ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"EFFECTOR_PWM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	EFFECTOR_PWM_initVar
  18              		.bss
  19              		.type	EFFECTOR_PWM_initVar, %object
  20              		.size	EFFECTOR_PWM_initVar, 1
  21              	EFFECTOR_PWM_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.EFFECTOR_PWM_Start,"ax",%progbits
  24              		.align	2
  25              		.global	EFFECTOR_PWM_Start
  26              		.code	16
  27              		.thumb_func
  28              		.type	EFFECTOR_PWM_Start, %function
  29              	EFFECTOR_PWM_Start:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\EFFECTOR_PWM.c"
   1:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * File Name: EFFECTOR_PWM.c
   3:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Version 3.10
   4:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
   5:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Description:
   6:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  15:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Note:
  16:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  17:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************
  18:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  24:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #include "EFFECTOR_PWM.h"
  25:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  26:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /* Error message for removed <resource> through optimization */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 2


  27:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #ifdef EFFECTOR_PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #error PWM_v3_10 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* EFFECTOR_PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  32:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** uint8 EFFECTOR_PWM_initVar = 0u;
  33:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  34:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  35:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_Start
  37:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
  38:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  39:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
  40:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  44:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
  45:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
  46:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  47:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
  48:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
  49:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  50:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Global variables:
  51:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  EFFECTOR_PWM_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  54:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** void EFFECTOR_PWM_Start(void) 
  56:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
  32              		.loc 1 56 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  57:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     if(EFFECTOR_PWM_initVar == 0u)
  40              		.loc 1 58 0
  41 0004 064B     		ldr	r3, .L3
  42 0006 1B78     		ldrb	r3, [r3]
  43 0008 002B     		cmp	r3, #0
  44 000a 04D1     		bne	.L2
  59:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
  60:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_Init();
  45              		.loc 1 60 0
  46 000c FFF7FEFF 		bl	EFFECTOR_PWM_Init
  61:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_initVar = 1u;
  47              		.loc 1 61 0
  48 0010 034B     		ldr	r3, .L3
  49 0012 0122     		mov	r2, #1
  50 0014 1A70     		strb	r2, [r3]
  51              	.L2:
  62:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
  63:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     EFFECTOR_PWM_Enable();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 3


  52              		.loc 1 63 0
  53 0016 FFF7FEFF 		bl	EFFECTOR_PWM_Enable
  64:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  65:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
  54              		.loc 1 65 0
  55 001a BD46     		mov	sp, r7
  56              		@ sp needed
  57 001c 80BD     		pop	{r7, pc}
  58              	.L4:
  59 001e C046     		.align	2
  60              	.L3:
  61 0020 00000000 		.word	EFFECTOR_PWM_initVar
  62              		.cfi_endproc
  63              	.LFE0:
  64              		.size	EFFECTOR_PWM_Start, .-EFFECTOR_PWM_Start
  65              		.section	.text.EFFECTOR_PWM_Init,"ax",%progbits
  66              		.align	2
  67              		.global	EFFECTOR_PWM_Init
  68              		.code	16
  69              		.thumb_func
  70              		.type	EFFECTOR_PWM_Init, %function
  71              	EFFECTOR_PWM_Init:
  72              	.LFB1:
  66:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  67:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  68:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_Init
  70:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
  71:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  72:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
  73:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  EFFECTOR_PWM_Start().
  76:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  77:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
  78:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
  79:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  80:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
  81:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
  82:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
  83:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** void EFFECTOR_PWM_Init(void) 
  85:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
  73              		.loc 1 85 0
  74              		.cfi_startproc
  75 0000 90B5     		push	{r4, r7, lr}
  76              		.cfi_def_cfa_offset 12
  77              		.cfi_offset 4, -12
  78              		.cfi_offset 7, -8
  79              		.cfi_offset 14, -4
  80 0002 83B0     		sub	sp, sp, #12
  81              		.cfi_def_cfa_offset 24
  82 0004 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
  86:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UsingFixedFunction || EFFECTOR_PWM_UseControl)
  87:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction || EFFECTOR_PWM_UseControl) */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 4


  89:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  90:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if(!EFFECTOR_PWM_UsingFixedFunction)
  91:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UseStatus)
  92:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             uint8 EFFECTOR_PWM_interruptState;
  94:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UseStatus) */
  95:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (!EFFECTOR_PWM_UsingFixedFunction) */
  96:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
  97:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UsingFixedFunction)
  98:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL |= EFFECTOR_PWM_CFG0_MODE;
 100:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_DeadBand2_4)
 101:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_CONTROL |= EFFECTOR_PWM_CFG0_DB;
 102:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_DeadBand2_4) */
 103:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 104:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         ctrl = EFFECTOR_PWM_CONTROL3 & ((uint8 )(~EFFECTOR_PWM_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL3 = ctrl | EFFECTOR_PWM_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 107:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_RT1 &= ((uint8)(~EFFECTOR_PWM_RT1_MASK));
 109:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_RT1 |= EFFECTOR_PWM_SYNC;
 110:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 111:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_RT1 &= ((uint8)(~EFFECTOR_PWM_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_RT1 |= EFFECTOR_PWM_SYNCDSI_EN;
 114:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 115:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #elif (EFFECTOR_PWM_UseControl)
 116:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         ctrl = EFFECTOR_PWM_CONTROL & ((uint8)(~EFFECTOR_PWM_CTRL_CMPMODE2_MASK)) &
  84              		.loc 1 117 0
  85 0006 234B     		ldr	r3, .L6
  86 0008 1B78     		ldrb	r3, [r3]
  87 000a DAB2     		uxtb	r2, r3
  88 000c FB1D     		add	r3, r7, #7
  89 000e 3F21     		mov	r1, #63
  90 0010 8A43     		bic	r2, r1
  91 0012 1A70     		strb	r2, [r3]
 118:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 ((uint8)(~EFFECTOR_PWM_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL = ctrl | EFFECTOR_PWM_DEFAULT_COMPARE2_MODE |
  92              		.loc 1 119 0
  93 0014 1F4B     		ldr	r3, .L6
  94 0016 FA1D     		add	r2, r7, #7
  95 0018 1278     		ldrb	r2, [r2]
  96 001a 0921     		mov	r1, #9
  97 001c 0A43     		orr	r2, r1
  98 001e D2B2     		uxtb	r2, r2
  99 0020 1A70     		strb	r2, [r3]
 120:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                    EFFECTOR_PWM_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 122:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 123:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (!EFFECTOR_PWM_UsingFixedFunction)
 124:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_Resolution == 8)
 125:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_AUX_CONTROLDP0 |= (EFFECTOR_PWM_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else /* (EFFECTOR_PWM_Resolution == 16)*/
 128:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_AUX_CONTROLDP0 |= (EFFECTOR_PWM_AUX_CTRL_FIFO0_CLR);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 5


 100              		.loc 1 129 0
 101 0022 1D4B     		ldr	r3, .L6+4
 102 0024 1C4A     		ldr	r2, .L6+4
 103 0026 1278     		ldrb	r2, [r2]
 104 0028 D2B2     		uxtb	r2, r2
 105 002a 0121     		mov	r1, #1
 106 002c 0A43     		orr	r2, r1
 107 002e D2B2     		uxtb	r2, r2
 108 0030 1A70     		strb	r2, [r3]
 130:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_AUX_CONTROLDP1 |= (EFFECTOR_PWM_AUX_CTRL_FIFO0_CLR);
 109              		.loc 1 130 0
 110 0032 1A4B     		ldr	r3, .L6+8
 111 0034 194A     		ldr	r2, .L6+8
 112 0036 1278     		ldrb	r2, [r2]
 113 0038 D2B2     		uxtb	r2, r2
 114 003a 0121     		mov	r1, #1
 115 003c 0A43     		orr	r2, r1
 116 003e D2B2     		uxtb	r2, r2
 117 0040 1A70     		strb	r2, [r3]
 131:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_Resolution == 8) */
 132:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 133:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_WriteCounter(EFFECTOR_PWM_INIT_PERIOD_VALUE);
 118              		.loc 1 133 0
 119 0042 174B     		ldr	r3, .L6+12
 120 0044 181C     		mov	r0, r3
 121 0046 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCounter
 134:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (!EFFECTOR_PWM_UsingFixedFunction) */
 135:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 136:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     EFFECTOR_PWM_WritePeriod(EFFECTOR_PWM_INIT_PERIOD_VALUE);
 122              		.loc 1 136 0
 123 004a 154B     		ldr	r3, .L6+12
 124 004c 181C     		mov	r0, r3
 125 004e FFF7FEFF 		bl	EFFECTOR_PWM_WritePeriod
 137:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 138:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_UseOneCompareMode)
 139:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_WriteCompare(EFFECTOR_PWM_INIT_COMPARE_VALUE1);
 140:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 141:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_WriteCompare1(EFFECTOR_PWM_INIT_COMPARE_VALUE1);
 126              		.loc 1 141 0
 127 0052 7F20     		mov	r0, #127
 128 0054 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare1
 142:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_WriteCompare2(EFFECTOR_PWM_INIT_COMPARE_VALUE2);
 129              		.loc 1 142 0
 130 0058 3F20     		mov	r0, #63
 131 005a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare2
 143:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UseOneCompareMode) */
 144:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 145:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_KillModeMinTime)
 146:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_WriteKillTime(EFFECTOR_PWM_MinimumKillTime);
 147:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_KillModeMinTime) */
 148:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 149:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_DeadBandUsed)
 150:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_WriteDeadTime(EFFECTOR_PWM_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_DeadBandUsed) */
 152:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 153:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UseStatus || EFFECTOR_PWM_UsingFixedFunction)
 154:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_SetInterruptMode(EFFECTOR_PWM_INIT_INTERRUPTS_MODE);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 6


 132              		.loc 1 154 0
 133 005e 0020     		mov	r0, #0
 134 0060 FFF7FEFF 		bl	EFFECTOR_PWM_SetInterruptMode
 155:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UseStatus || EFFECTOR_PWM_UsingFixedFunction) */
 156:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 157:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UsingFixedFunction)
 158:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_GLOBAL_ENABLE |= EFFECTOR_PWM_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL2 |= EFFECTOR_PWM_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #else
 163:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UseStatus)
 164:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 165:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_interruptState = CyEnterCriticalSection();
 135              		.loc 1 167 0
 136 0064 BC1D     		add	r4, r7, #6
 137 0066 FFF7FEFF 		bl	CyEnterCriticalSection
 138 006a 031C     		mov	r3, r0
 139 006c 2370     		strb	r3, [r4]
 168:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_STATUS_AUX_CTRL |= EFFECTOR_PWM_STATUS_ACTL_INT_EN_MASK;
 140              		.loc 1 169 0
 141 006e 0D4B     		ldr	r3, .L6+16
 142 0070 0C4A     		ldr	r2, .L6+16
 143 0072 1278     		ldrb	r2, [r2]
 144 0074 D2B2     		uxtb	r2, r2
 145 0076 1021     		mov	r1, #16
 146 0078 0A43     		orr	r2, r1
 147 007a D2B2     		uxtb	r2, r2
 148 007c 1A70     		strb	r2, [r3]
 170:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 171:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CyExitCriticalSection(EFFECTOR_PWM_interruptState);
 149              		.loc 1 172 0
 150 007e BB1D     		add	r3, r7, #6
 151 0080 1B78     		ldrb	r3, [r3]
 152 0082 181C     		mov	r0, r3
 153 0084 FFF7FEFF 		bl	CyExitCriticalSection
 173:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 174:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Clear the FIFO to enable the EFFECTOR_PWM_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_ClearFIFO();
 154              		.loc 1 176 0
 155 0088 FFF7FEFF 		bl	EFFECTOR_PWM_ClearFIFO
 177:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UseStatus) */
 178:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 179:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
 156              		.loc 1 179 0
 157 008c BD46     		mov	sp, r7
 158 008e 03B0     		add	sp, sp, #12
 159              		@ sp needed
 160 0090 90BD     		pop	{r4, r7, pc}
 161              	.L7:
 162 0092 C046     		.align	2
 163              	.L6:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 7


 164 0094 73000F40 		.word	1074724979
 165 0098 90000F40 		.word	1074725008
 166 009c 91000F40 		.word	1074725009
 167 00a0 FFFF0000 		.word	65535
 168 00a4 93000F40 		.word	1074725011
 169              		.cfi_endproc
 170              	.LFE1:
 171              		.size	EFFECTOR_PWM_Init, .-EFFECTOR_PWM_Init
 172              		.section	.text.EFFECTOR_PWM_Enable,"ax",%progbits
 173              		.align	2
 174              		.global	EFFECTOR_PWM_Enable
 175              		.code	16
 176              		.thumb_func
 177              		.type	EFFECTOR_PWM_Enable, %function
 178              	EFFECTOR_PWM_Enable:
 179              	.LFB2:
 180:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 181:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 182:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_Enable
 184:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
 185:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 186:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
 187:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 189:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
 190:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 191:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 192:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
 193:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 194:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 195:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Side Effects:
 196:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 198:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** void EFFECTOR_PWM_Enable(void) 
 200:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
 180              		.loc 1 200 0
 181              		.cfi_startproc
 182 0000 80B5     		push	{r7, lr}
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
 201:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UsingFixedFunction)
 203:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_GLOBAL_ENABLE |= EFFECTOR_PWM_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_GLOBAL_STBY_ENABLE |= EFFECTOR_PWM_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 206:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 207:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UseControl || EFFECTOR_PWM_UsingFixedFunction)
 209:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL |= EFFECTOR_PWM_CTRL_ENABLE;
 188              		.loc 1 209 0
 189 0004 054B     		ldr	r3, .L9
 190 0006 054A     		ldr	r2, .L9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 8


 191 0008 1278     		ldrb	r2, [r2]
 192 000a D2B2     		uxtb	r2, r2
 193 000c 8021     		mov	r1, #128
 194 000e 4942     		neg	r1, r1
 195 0010 0A43     		orr	r2, r1
 196 0012 D2B2     		uxtb	r2, r2
 197 0014 1A70     		strb	r2, [r3]
 210:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UseControl || EFFECTOR_PWM_UsingFixedFunction) */
 211:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
 198              		.loc 1 211 0
 199 0016 BD46     		mov	sp, r7
 200              		@ sp needed
 201 0018 80BD     		pop	{r7, pc}
 202              	.L10:
 203 001a C046     		.align	2
 204              	.L9:
 205 001c 73000F40 		.word	1074724979
 206              		.cfi_endproc
 207              	.LFE2:
 208              		.size	EFFECTOR_PWM_Enable, .-EFFECTOR_PWM_Enable
 209              		.section	.text.EFFECTOR_PWM_Stop,"ax",%progbits
 210              		.align	2
 211              		.global	EFFECTOR_PWM_Stop
 212              		.code	16
 213              		.thumb_func
 214              		.type	EFFECTOR_PWM_Stop, %function
 215              	EFFECTOR_PWM_Stop:
 216              	.LFB3:
 212:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 213:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 214:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_Stop
 216:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
 217:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 218:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
 219:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  interrupts.
 221:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 222:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
 223:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 224:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 225:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
 226:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 227:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 228:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Side Effects:
 229:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 232:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** void EFFECTOR_PWM_Stop(void) 
 234:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
 217              		.loc 1 234 0
 218              		.cfi_startproc
 219 0000 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 9


 223 0002 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 235:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UseControl || EFFECTOR_PWM_UsingFixedFunction)
 236:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_CONTROL &= ((uint8)(~EFFECTOR_PWM_CTRL_ENABLE));
 225              		.loc 1 236 0
 226 0004 044B     		ldr	r3, .L12
 227 0006 044A     		ldr	r2, .L12
 228 0008 1278     		ldrb	r2, [r2]
 229 000a D1B2     		uxtb	r1, r2
 230 000c 7F22     		mov	r2, #127
 231 000e 0A40     		and	r2, r1
 232 0010 D2B2     		uxtb	r2, r2
 233 0012 1A70     		strb	r2, [r3]
 237:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UseControl || EFFECTOR_PWM_UsingFixedFunction) */
 238:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 239:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UsingFixedFunction)
 241:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_GLOBAL_ENABLE &= ((uint8)(~EFFECTOR_PWM_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         EFFECTOR_PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~EFFECTOR_PWM_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 244:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
 234              		.loc 1 244 0
 235 0014 BD46     		mov	sp, r7
 236              		@ sp needed
 237 0016 80BD     		pop	{r7, pc}
 238              	.L13:
 239              		.align	2
 240              	.L12:
 241 0018 73000F40 		.word	1074724979
 242              		.cfi_endproc
 243              	.LFE3:
 244              		.size	EFFECTOR_PWM_Stop, .-EFFECTOR_PWM_Stop
 245              		.section	.text.EFFECTOR_PWM_WriteCounter,"ax",%progbits
 246              		.align	2
 247              		.global	EFFECTOR_PWM_WriteCounter
 248              		.code	16
 249              		.thumb_func
 250              		.type	EFFECTOR_PWM_WriteCounter, %function
 251              	EFFECTOR_PWM_WriteCounter:
 252              	.LFB4:
 245:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 246:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_UseOneCompareMode)
 247:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_CompareMode1SW)
 248:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 249:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 250:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Function Name: EFFECTOR_PWM_SetCompareMode
 252:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 254:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Summary:
 255:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 258:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Parameters:
 259:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 10


 262:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Return:
 263:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  None
 264:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 265:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         void EFFECTOR_PWM_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         {
 268:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if(EFFECTOR_PWM_UsingFixedFunction)
 269:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 270:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #if(0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << EFFECTOR_PWM_CTRL_CMPM
 272:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #else
 273:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #endif /* (0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 276:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL3 &= ((uint8)(~EFFECTOR_PWM_CTRL_CMPMODE1_MASK)); /*Clear Exist
 277:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 279:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #elif (EFFECTOR_PWM_UseControl)
 280:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 281:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #if(0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << EFFECTOR_PWM_CTRL_CMP
 283:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                                 EFFECTOR_PWM_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #else
 285:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemode1masked = comparemode & EFFECTOR_PWM_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #endif /* (0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 288:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #if(0 != EFFECTOR_PWM_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << EFFECTOR_PWM_CTRL_CMP
 290:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                                EFFECTOR_PWM_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #else
 292:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                     uint8 comparemode2masked = comparemode & EFFECTOR_PWM_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 #endif /* (0 != EFFECTOR_PWM_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 295:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL &= ((uint8)(~(EFFECTOR_PWM_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                             EFFECTOR_PWM_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 300:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #else
 301:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 303:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         }
 304:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* EFFECTOR_PWM_CompareMode1SW */
 305:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 306:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 308:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_CompareMode1SW)
 309:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 310:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 311:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Function Name: EFFECTOR_PWM_SetCompareMode1
 313:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 315:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Summary:
 316:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 318:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Parameters:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 11


 319:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 322:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Return:
 323:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  None
 324:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 325:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         void EFFECTOR_PWM_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         {
 328:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if(0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << EFFECTOR_PWM_CTRL_CMPMODE1
 330:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                            EFFECTOR_PWM_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #else
 332:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 uint8 comparemodemasked = comparemode & EFFECTOR_PWM_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (0 != EFFECTOR_PWM_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 335:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if (EFFECTOR_PWM_UseControl)
 336:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL &= ((uint8)(~EFFECTOR_PWM_CTRL_CMPMODE1_MASK)); /*Clear existi
 337:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (EFFECTOR_PWM_UseControl) */
 339:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         }
 340:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* EFFECTOR_PWM_CompareMode1SW */
 341:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 342:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_CompareMode2SW)
 343:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 344:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 345:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_SetCompareMode2
 347:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 349:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 350:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 352:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 353:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 356:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 357:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 358:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 359:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 362:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 363:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(0 != EFFECTOR_PWM_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << EFFECTOR_PWM_CTRL_CMPMODE2_SHI
 365:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                                  EFFECTOR_PWM_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 367:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             uint8 comparemodemasked = comparemode & EFFECTOR_PWM_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (0 != EFFECTOR_PWM_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 370:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_UseControl)
 371:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_CONTROL &= ((uint8)(~EFFECTOR_PWM_CTRL_CMPMODE2_MASK)); /*Clear existing m
 372:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UseControl) */
 374:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 375:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /*EFFECTOR_PWM_CompareMode2SW */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 12


 376:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 377:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 379:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 380:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (!EFFECTOR_PWM_UsingFixedFunction)
 381:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 382:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 383:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteCounter
 385:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 387:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 388:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 393:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 394:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 396:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 397:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 398:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 399:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Side Effects:
 400:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 402:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteCounter(uint16 counter) \
 404:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                        
 405:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 253              		.loc 1 405 0
 254              		.cfi_startproc
 255 0000 80B5     		push	{r7, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 82B0     		sub	sp, sp, #8
 260              		.cfi_def_cfa_offset 16
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 021C     		mov	r2, r0
 264 0008 BB1D     		add	r3, r7, #6
 265 000a 1A80     		strh	r2, [r3]
 406:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         CY_SET_REG16(EFFECTOR_PWM_COUNTER_LSB_PTR, counter);
 266              		.loc 1 406 0
 267 000c 034B     		ldr	r3, .L15
 268 000e BA1D     		add	r2, r7, #6
 269 0010 1288     		ldrh	r2, [r2]
 270 0012 1A80     		strh	r2, [r3]
 407:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 271              		.loc 1 407 0
 272 0014 BD46     		mov	sp, r7
 273 0016 02B0     		add	sp, sp, #8
 274              		@ sp needed
 275 0018 80BD     		pop	{r7, pc}
 276              	.L16:
 277 001a C046     		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 13


 278              	.L15:
 279 001c 00100F40 		.word	1074728960
 280              		.cfi_endproc
 281              	.LFE4:
 282              		.size	EFFECTOR_PWM_WriteCounter, .-EFFECTOR_PWM_WriteCounter
 283              		.section	.text.EFFECTOR_PWM_ReadCounter,"ax",%progbits
 284              		.align	2
 285              		.global	EFFECTOR_PWM_ReadCounter
 286              		.code	16
 287              		.thumb_func
 288              		.type	EFFECTOR_PWM_ReadCounter, %function
 289              	EFFECTOR_PWM_ReadCounter:
 290              	.LFB5:
 408:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 409:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 410:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadCounter
 412:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 414:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 415:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 418:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 419:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 420:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 421:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 422:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 424:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint16 EFFECTOR_PWM_ReadCounter(void) 
 426:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 291              		.loc 1 426 0
 292              		.cfi_startproc
 293 0000 80B5     		push	{r7, lr}
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 00AF     		add	r7, sp, #0
 298              		.cfi_def_cfa_register 7
 427:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****           (void)CY_GET_REG8(EFFECTOR_PWM_COUNTERCAP_LSB_PTR_8BIT);
 299              		.loc 1 430 0
 300 0004 034B     		ldr	r3, .L19
 301 0006 1B78     		ldrb	r3, [r3]
 431:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 432:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG16(EFFECTOR_PWM_CAPTURE_LSB_PTR));
 302              		.loc 1 433 0
 303 0008 034B     		ldr	r3, .L19+4
 304 000a 1B88     		ldrh	r3, [r3]
 305 000c 9BB2     		uxth	r3, r3
 434:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 306              		.loc 1 434 0
 307 000e 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 14


 308 0010 BD46     		mov	sp, r7
 309              		@ sp needed
 310 0012 80BD     		pop	{r7, pc}
 311              	.L20:
 312              		.align	2
 313              	.L19:
 314 0014 10000F40 		.word	1074724880
 315 0018 A0100F40 		.word	1074729120
 316              		.cfi_endproc
 317              	.LFE5:
 318              		.size	EFFECTOR_PWM_ReadCounter, .-EFFECTOR_PWM_ReadCounter
 319              		.section	.text.EFFECTOR_PWM_ClearFIFO,"ax",%progbits
 320              		.align	2
 321              		.global	EFFECTOR_PWM_ClearFIFO
 322              		.code	16
 323              		.thumb_func
 324              		.type	EFFECTOR_PWM_ClearFIFO, %function
 325              	EFFECTOR_PWM_ClearFIFO:
 326              	.LFB6:
 435:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 436:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if (EFFECTOR_PWM_UseStatus)
 437:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 438:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 439:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Function Name: EFFECTOR_PWM_ClearFIFO
 441:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 443:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Summary:
 444:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 446:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Parameters:
 447:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  None
 448:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 449:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         * Return:
 450:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *  None
 451:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *
 452:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         void EFFECTOR_PWM_ClearFIFO(void) 
 454:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         {
 327              		.loc 1 454 0
 328              		.cfi_startproc
 329 0000 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0002 00AF     		add	r7, sp, #0
 334              		.cfi_def_cfa_register 7
 455:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             while(0u != (EFFECTOR_PWM_ReadStatusRegister() & EFFECTOR_PWM_STATUS_FIFONEMPTY))
 335              		.loc 1 455 0
 336 0004 01E0     		b	.L22
 337              	.L23:
 456:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             {
 457:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 (void)EFFECTOR_PWM_ReadCapture();
 338              		.loc 1 457 0
 339 0006 FFF7FEFF 		bl	EFFECTOR_PWM_ReadCapture
 340              	.L22:
 455:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             while(0u != (EFFECTOR_PWM_ReadStatusRegister() & EFFECTOR_PWM_STATUS_FIFONEMPTY))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 15


 341              		.loc 1 455 0 discriminator 1
 342 000a FFF7FEFF 		bl	EFFECTOR_PWM_ReadStatusRegister
 343 000e 031C     		mov	r3, r0
 344 0010 1A1C     		mov	r2, r3
 345 0012 1023     		mov	r3, #16
 346 0014 1340     		and	r3, r2
 347 0016 F6D1     		bne	.L23
 458:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             }
 459:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         }
 348              		.loc 1 459 0
 349 0018 BD46     		mov	sp, r7
 350              		@ sp needed
 351 001a 80BD     		pop	{r7, pc}
 352              		.cfi_endproc
 353              	.LFE6:
 354              		.size	EFFECTOR_PWM_ClearFIFO, .-EFFECTOR_PWM_ClearFIFO
 355              		.section	.text.EFFECTOR_PWM_WritePeriod,"ax",%progbits
 356              		.align	2
 357              		.global	EFFECTOR_PWM_WritePeriod
 358              		.code	16
 359              		.thumb_func
 360              		.type	EFFECTOR_PWM_WritePeriod, %function
 361              	EFFECTOR_PWM_WritePeriod:
 362              	.LFB7:
 460:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 461:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* EFFECTOR_PWM_UseStatus */
 462:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 463:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* !EFFECTOR_PWM_UsingFixedFunction */
 464:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 465:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 466:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_WritePeriod
 468:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
 469:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 470:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
 471:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 474:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
 475:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 478:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
 479:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 480:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 481:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** void EFFECTOR_PWM_WritePeriod(uint16 period) 
 483:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
 363              		.loc 1 483 0
 364              		.cfi_startproc
 365 0000 80B5     		push	{r7, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 82B0     		sub	sp, sp, #8
 370              		.cfi_def_cfa_offset 16
 371 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 16


 372              		.cfi_def_cfa_register 7
 373 0006 021C     		mov	r2, r0
 374 0008 BB1D     		add	r3, r7, #6
 375 000a 1A80     		strh	r2, [r3]
 484:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if(EFFECTOR_PWM_UsingFixedFunction)
 485:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         CY_SET_REG16(EFFECTOR_PWM_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #else
 487:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         CY_SET_REG16(EFFECTOR_PWM_PERIOD_LSB_PTR, period);
 376              		.loc 1 487 0
 377 000c 034B     		ldr	r3, .L25
 378 000e BA1D     		add	r2, r7, #6
 379 0010 1288     		ldrh	r2, [r2]
 380 0012 1A80     		strh	r2, [r3]
 488:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 489:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
 381              		.loc 1 489 0
 382 0014 BD46     		mov	sp, r7
 383 0016 02B0     		add	sp, sp, #8
 384              		@ sp needed
 385 0018 80BD     		pop	{r7, pc}
 386              	.L26:
 387 001a C046     		.align	2
 388              	.L25:
 389 001c 80100F40 		.word	1074729088
 390              		.cfi_endproc
 391              	.LFE7:
 392              		.size	EFFECTOR_PWM_WritePeriod, .-EFFECTOR_PWM_WritePeriod
 393              		.section	.text.EFFECTOR_PWM_WriteCompare1,"ax",%progbits
 394              		.align	2
 395              		.global	EFFECTOR_PWM_WriteCompare1
 396              		.code	16
 397              		.thumb_func
 398              		.type	EFFECTOR_PWM_WriteCompare1, %function
 399              	EFFECTOR_PWM_WriteCompare1:
 400              	.LFB8:
 490:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 491:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_UseOneCompareMode)
 492:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 493:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 494:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteCompare
 496:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 498:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 499:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 505:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 506:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 508:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 509:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 510:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 511:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Side Effects:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 17


 512:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 515:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteCompare(uint16 compare) \
 517:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                        
 518:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 519:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UsingFixedFunction)
 520:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 522:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR, compare);
 523:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 524:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 525:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if (EFFECTOR_PWM_PWMMode == EFFECTOR_PWM__B_PWM__DITHER)
 526:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if(EFFECTOR_PWM_UsingFixedFunction)
 527:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 CY_SET_REG16(EFFECTOR_PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #else
 529:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 CY_SET_REG16(EFFECTOR_PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 531:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_PWMMode == EFFECTOR_PWM__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 533:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 534:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 535:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #else
 536:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 537:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 538:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteCompare1
 540:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 542:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 543:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 548:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 549:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 551:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 552:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 553:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 554:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteCompare1(uint16 compare) \
 556:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                         
 557:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 401              		.loc 1 557 0
 402              		.cfi_startproc
 403 0000 80B5     		push	{r7, lr}
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
 407 0002 82B0     		sub	sp, sp, #8
 408              		.cfi_def_cfa_offset 16
 409 0004 00AF     		add	r7, sp, #0
 410              		.cfi_def_cfa_register 7
 411 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 18


 412 0008 BB1D     		add	r3, r7, #6
 413 000a 1A80     		strh	r2, [r3]
 558:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UsingFixedFunction)
 559:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 561:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR, compare);
 414              		.loc 1 561 0
 415 000c 034B     		ldr	r3, .L28
 416 000e BA1D     		add	r2, r7, #6
 417 0010 1288     		ldrh	r2, [r2]
 418 0012 1A80     		strh	r2, [r3]
 562:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 563:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 419              		.loc 1 563 0
 420 0014 BD46     		mov	sp, r7
 421 0016 02B0     		add	sp, sp, #8
 422              		@ sp needed
 423 0018 80BD     		pop	{r7, pc}
 424              	.L29:
 425 001a C046     		.align	2
 426              	.L28:
 427 001c 40100F40 		.word	1074729024
 428              		.cfi_endproc
 429              	.LFE8:
 430              		.size	EFFECTOR_PWM_WriteCompare1, .-EFFECTOR_PWM_WriteCompare1
 431              		.section	.text.EFFECTOR_PWM_WriteCompare2,"ax",%progbits
 432              		.align	2
 433              		.global	EFFECTOR_PWM_WriteCompare2
 434              		.code	16
 435              		.thumb_func
 436              		.type	EFFECTOR_PWM_WriteCompare2, %function
 437              	EFFECTOR_PWM_WriteCompare2:
 438              	.LFB9:
 564:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 565:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 566:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteCompare2
 568:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 570:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 571:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  mode.
 576:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 577:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 578:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 580:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 581:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 582:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 583:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteCompare2(uint16 compare) \
 585:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                         
 586:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 439              		.loc 1 586 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 19


 440              		.cfi_startproc
 441 0000 80B5     		push	{r7, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 82B0     		sub	sp, sp, #8
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 021C     		mov	r2, r0
 450 0008 BB1D     		add	r3, r7, #6
 451 000a 1A80     		strh	r2, [r3]
 587:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UsingFixedFunction)
 588:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 590:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG16(EFFECTOR_PWM_COMPARE2_LSB_PTR, compare);
 452              		.loc 1 590 0
 453 000c 034B     		ldr	r3, .L31
 454 000e BA1D     		add	r2, r7, #6
 455 0010 1288     		ldrh	r2, [r2]
 456 0012 1A80     		strh	r2, [r3]
 591:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 592:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 457              		.loc 1 592 0
 458 0014 BD46     		mov	sp, r7
 459 0016 02B0     		add	sp, sp, #8
 460              		@ sp needed
 461 0018 80BD     		pop	{r7, pc}
 462              	.L32:
 463 001a C046     		.align	2
 464              	.L31:
 465 001c 60100F40 		.word	1074729056
 466              		.cfi_endproc
 467              	.LFE9:
 468              		.size	EFFECTOR_PWM_WriteCompare2, .-EFFECTOR_PWM_WriteCompare2
 469              		.section	.text.EFFECTOR_PWM_SetInterruptMode,"ax",%progbits
 470              		.align	2
 471              		.global	EFFECTOR_PWM_SetInterruptMode
 472              		.code	16
 473              		.thumb_func
 474              		.type	EFFECTOR_PWM_SetInterruptMode, %function
 475              	EFFECTOR_PWM_SetInterruptMode:
 476              	.LFB10:
 593:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 595:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_DeadBandUsed)
 596:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 597:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 598:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteDeadTime
 600:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 602:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 603:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 605:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 606:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  deadtime:  Number of counts for dead time
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 20


 607:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 608:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 609:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 610:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 611:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 614:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(!EFFECTOR_PWM_DeadBand2_4)
 616:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             CY_SET_REG8(EFFECTOR_PWM_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 618:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             EFFECTOR_PWM_DEADBAND_COUNT &= ((uint8)(~EFFECTOR_PWM_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 622:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if(EFFECTOR_PWM_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << EFFECTOR_PWM_DEADBAND_CO
 625:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                                     EFFECTOR_PWM_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #else
 627:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 EFFECTOR_PWM_DEADBAND_COUNT |= deadtime & EFFECTOR_PWM_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (EFFECTOR_PWM_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 630:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (!EFFECTOR_PWM_DeadBand2_4) */
 631:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 632:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 633:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 634:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadDeadTime
 636:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 638:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 639:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 641:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 642:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 643:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 644:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 645:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 647:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint8 EFFECTOR_PWM_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 650:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(!EFFECTOR_PWM_DeadBand2_4)
 652:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             return (CY_GET_REG8(EFFECTOR_PWM_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 654:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 655:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #if(EFFECTOR_PWM_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 return ((uint8)(((uint8)(EFFECTOR_PWM_DEADBAND_COUNT & EFFECTOR_PWM_DEADBAND_COUNT_
 658:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                                                                            EFFECTOR_PWM_DEADBAND_CO
 659:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #else
 660:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****                 return (EFFECTOR_PWM_DEADBAND_COUNT & EFFECTOR_PWM_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             #endif /* (EFFECTOR_PWM_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (!EFFECTOR_PWM_DeadBand2_4) */
 663:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 21


 664:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 666:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_UseStatus || EFFECTOR_PWM_UsingFixedFunction)
 667:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 668:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 669:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_SetInterruptMode
 671:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 673:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 674:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  source status register.
 676:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 677:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 678:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 680:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 681:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 682:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 683:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 477              		.loc 1 685 0
 478              		.cfi_startproc
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 487 0006 021C     		mov	r2, r0
 488 0008 FB1D     		add	r3, r7, #7
 489 000a 1A70     		strb	r2, [r3]
 686:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         CY_SET_REG8(EFFECTOR_PWM_STATUS_MASK_PTR, interruptMode);
 490              		.loc 1 686 0
 491 000c 034B     		ldr	r3, .L34
 492 000e FA1D     		add	r2, r7, #7
 493 0010 1278     		ldrb	r2, [r2]
 494 0012 1A70     		strb	r2, [r3]
 687:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 495              		.loc 1 687 0
 496 0014 BD46     		mov	sp, r7
 497 0016 02B0     		add	sp, sp, #8
 498              		@ sp needed
 499 0018 80BD     		pop	{r7, pc}
 500              	.L35:
 501 001a C046     		.align	2
 502              	.L34:
 503 001c 83000F40 		.word	1074724995
 504              		.cfi_endproc
 505              	.LFE10:
 506              		.size	EFFECTOR_PWM_SetInterruptMode, .-EFFECTOR_PWM_SetInterruptMode
 507              		.section	.text.EFFECTOR_PWM_ReadStatusRegister,"ax",%progbits
 508              		.align	2
 509              		.global	EFFECTOR_PWM_ReadStatusRegister
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 22


 510              		.code	16
 511              		.thumb_func
 512              		.type	EFFECTOR_PWM_ReadStatusRegister, %function
 513              	EFFECTOR_PWM_ReadStatusRegister:
 514              	.LFB11:
 688:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 689:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 690:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadStatusRegister
 692:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 694:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 695:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 697:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 698:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 699:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 700:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 701:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 710:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint8 EFFECTOR_PWM_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 515              		.loc 1 712 0
 516              		.cfi_startproc
 517 0000 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 713:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG8(EFFECTOR_PWM_STATUS_PTR));
 523              		.loc 1 713 0
 524 0004 024B     		ldr	r3, .L38
 525 0006 1B78     		ldrb	r3, [r3]
 526 0008 DBB2     		uxtb	r3, r3
 714:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 527              		.loc 1 714 0
 528 000a 181C     		mov	r0, r3
 529 000c BD46     		mov	sp, r7
 530              		@ sp needed
 531 000e 80BD     		pop	{r7, pc}
 532              	.L39:
 533              		.align	2
 534              	.L38:
 535 0010 63000F40 		.word	1074724963
 536              		.cfi_endproc
 537              	.LFE11:
 538              		.size	EFFECTOR_PWM_ReadStatusRegister, .-EFFECTOR_PWM_ReadStatusRegister
 539              		.section	.text.EFFECTOR_PWM_ReadControlRegister,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 23


 540              		.align	2
 541              		.global	EFFECTOR_PWM_ReadControlRegister
 542              		.code	16
 543              		.thumb_func
 544              		.type	EFFECTOR_PWM_ReadControlRegister, %function
 545              	EFFECTOR_PWM_ReadControlRegister:
 546              	.LFB12:
 715:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 716:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* (EFFECTOR_PWM_UseStatus || EFFECTOR_PWM_UsingFixedFunction) */
 717:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 718:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 719:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_UseControl)
 720:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 721:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 722:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadControlRegister
 724:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 726:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 727:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 730:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 731:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 732:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 733:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 734:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 736:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint8 EFFECTOR_PWM_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 547              		.loc 1 738 0
 548              		.cfi_startproc
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 82B0     		sub	sp, sp, #8
 554              		.cfi_def_cfa_offset 16
 555 0004 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 739:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         uint8 result;
 740:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 741:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         result = CY_GET_REG8(EFFECTOR_PWM_CONTROL_PTR);
 557              		.loc 1 741 0
 558 0006 054A     		ldr	r2, .L42
 559 0008 FB1D     		add	r3, r7, #7
 560 000a 1278     		ldrb	r2, [r2]
 561 000c 1A70     		strb	r2, [r3]
 742:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (result);
 562              		.loc 1 742 0
 563 000e FB1D     		add	r3, r7, #7
 564 0010 1B78     		ldrb	r3, [r3]
 743:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 565              		.loc 1 743 0
 566 0012 181C     		mov	r0, r3
 567 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 24


 568 0016 02B0     		add	sp, sp, #8
 569              		@ sp needed
 570 0018 80BD     		pop	{r7, pc}
 571              	.L43:
 572 001a C046     		.align	2
 573              	.L42:
 574 001c 73000F40 		.word	1074724979
 575              		.cfi_endproc
 576              	.LFE12:
 577              		.size	EFFECTOR_PWM_ReadControlRegister, .-EFFECTOR_PWM_ReadControlRegister
 578              		.section	.text.EFFECTOR_PWM_WriteControlRegister,"ax",%progbits
 579              		.align	2
 580              		.global	EFFECTOR_PWM_WriteControlRegister
 581              		.code	16
 582              		.thumb_func
 583              		.type	EFFECTOR_PWM_WriteControlRegister, %function
 584              	EFFECTOR_PWM_WriteControlRegister:
 585              	.LFB13:
 744:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 745:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 746:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_WriteControlRegister
 748:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 750:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 751:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 754:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 755:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 761:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 762:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 763:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 764:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     void EFFECTOR_PWM_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 586              		.loc 1 766 0
 587              		.cfi_startproc
 588 0000 80B5     		push	{r7, lr}
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 0002 82B0     		sub	sp, sp, #8
 593              		.cfi_def_cfa_offset 16
 594 0004 00AF     		add	r7, sp, #0
 595              		.cfi_def_cfa_register 7
 596 0006 021C     		mov	r2, r0
 597 0008 FB1D     		add	r3, r7, #7
 598 000a 1A70     		strb	r2, [r3]
 767:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         CY_SET_REG8(EFFECTOR_PWM_CONTROL_PTR, control);
 599              		.loc 1 767 0
 600 000c 034B     		ldr	r3, .L45
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 25


 601 000e FA1D     		add	r2, r7, #7
 602 0010 1278     		ldrb	r2, [r2]
 603 0012 1A70     		strb	r2, [r3]
 768:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 604              		.loc 1 768 0
 605 0014 BD46     		mov	sp, r7
 606 0016 02B0     		add	sp, sp, #8
 607              		@ sp needed
 608 0018 80BD     		pop	{r7, pc}
 609              	.L46:
 610 001a C046     		.align	2
 611              	.L45:
 612 001c 73000F40 		.word	1074724979
 613              		.cfi_endproc
 614              	.LFE13:
 615              		.size	EFFECTOR_PWM_WriteControlRegister, .-EFFECTOR_PWM_WriteControlRegister
 616              		.section	.text.EFFECTOR_PWM_ReadCapture,"ax",%progbits
 617              		.align	2
 618              		.global	EFFECTOR_PWM_ReadCapture
 619              		.code	16
 620              		.thumb_func
 621              		.type	EFFECTOR_PWM_ReadCapture, %function
 622              	EFFECTOR_PWM_ReadCapture:
 623              	.LFB14:
 769:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 770:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* (EFFECTOR_PWM_UseControl) */
 771:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 772:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 773:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (!EFFECTOR_PWM_UsingFixedFunction)
 774:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 775:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 776:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadCapture
 778:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 780:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 781:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 783:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 784:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 785:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 786:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 787:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 789:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint16 EFFECTOR_PWM_ReadCapture(void) 
 791:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 624              		.loc 1 791 0
 625              		.cfi_startproc
 626 0000 80B5     		push	{r7, lr}
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 00AF     		add	r7, sp, #0
 631              		.cfi_def_cfa_register 7
 792:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG16(EFFECTOR_PWM_CAPTURE_LSB_PTR));
 632              		.loc 1 792 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 26


 633 0004 024B     		ldr	r3, .L49
 634 0006 1B88     		ldrh	r3, [r3]
 635 0008 9BB2     		uxth	r3, r3
 793:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 636              		.loc 1 793 0
 637 000a 181C     		mov	r0, r3
 638 000c BD46     		mov	sp, r7
 639              		@ sp needed
 640 000e 80BD     		pop	{r7, pc}
 641              	.L50:
 642              		.align	2
 643              	.L49:
 644 0010 A0100F40 		.word	1074729120
 645              		.cfi_endproc
 646              	.LFE14:
 647              		.size	EFFECTOR_PWM_ReadCapture, .-EFFECTOR_PWM_ReadCapture
 648              		.section	.text.EFFECTOR_PWM_ReadCompare1,"ax",%progbits
 649              		.align	2
 650              		.global	EFFECTOR_PWM_ReadCompare1
 651              		.code	16
 652              		.thumb_func
 653              		.type	EFFECTOR_PWM_ReadCompare1, %function
 654              	EFFECTOR_PWM_ReadCompare1:
 655              	.LFB15:
 794:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 795:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* (!EFFECTOR_PWM_UsingFixedFunction) */
 796:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 797:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 798:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #if (EFFECTOR_PWM_UseOneCompareMode)
 799:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 800:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 801:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadCompare
 803:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 805:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 806:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 809:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 810:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 811:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 812:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 813:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 815:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint16 EFFECTOR_PWM_ReadCompare(void) 
 817:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 818:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #if(EFFECTOR_PWM_UsingFixedFunction)
 819:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             return ((uint16)CY_GET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #else
 821:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****             return (CY_GET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR));
 822:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 823:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 824:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 825:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #else
 826:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 27


 827:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 828:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadCompare1
 830:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 832:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 833:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 835:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 836:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 837:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 838:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 839:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 841:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint16 EFFECTOR_PWM_ReadCompare1(void) 
 843:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 656              		.loc 1 843 0
 657              		.cfi_startproc
 658 0000 80B5     		push	{r7, lr}
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 844:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG16(EFFECTOR_PWM_COMPARE1_LSB_PTR));
 664              		.loc 1 844 0
 665 0004 024B     		ldr	r3, .L53
 666 0006 1B88     		ldrh	r3, [r3]
 667 0008 9BB2     		uxth	r3, r3
 845:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 668              		.loc 1 845 0
 669 000a 181C     		mov	r0, r3
 670 000c BD46     		mov	sp, r7
 671              		@ sp needed
 672 000e 80BD     		pop	{r7, pc}
 673              	.L54:
 674              		.align	2
 675              	.L53:
 676 0010 40100F40 		.word	1074729024
 677              		.cfi_endproc
 678              	.LFE15:
 679              		.size	EFFECTOR_PWM_ReadCompare1, .-EFFECTOR_PWM_ReadCompare1
 680              		.section	.text.EFFECTOR_PWM_ReadCompare2,"ax",%progbits
 681              		.align	2
 682              		.global	EFFECTOR_PWM_ReadCompare2
 683              		.code	16
 684              		.thumb_func
 685              		.type	EFFECTOR_PWM_ReadCompare2, %function
 686              	EFFECTOR_PWM_ReadCompare2:
 687              	.LFB16:
 846:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 847:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 848:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Function Name: EFFECTOR_PWM_ReadCompare2
 850:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 28


 852:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Summary:
 853:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 855:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Parameters:
 856:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  None
 857:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 858:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     * Return:
 859:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *
 861:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     uint16 EFFECTOR_PWM_ReadCompare2(void) 
 863:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     {
 688              		.loc 1 863 0
 689              		.cfi_startproc
 690 0000 80B5     		push	{r7, lr}
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 0002 00AF     		add	r7, sp, #0
 695              		.cfi_def_cfa_register 7
 864:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG16(EFFECTOR_PWM_COMPARE2_LSB_PTR));
 696              		.loc 1 864 0
 697 0004 024B     		ldr	r3, .L57
 698 0006 1B88     		ldrh	r3, [r3]
 699 0008 9BB2     		uxth	r3, r3
 865:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     }
 700              		.loc 1 865 0
 701 000a 181C     		mov	r0, r3
 702 000c BD46     		mov	sp, r7
 703              		@ sp needed
 704 000e 80BD     		pop	{r7, pc}
 705              	.L58:
 706              		.align	2
 707              	.L57:
 708 0010 60100F40 		.word	1074729056
 709              		.cfi_endproc
 710              	.LFE16:
 711              		.size	EFFECTOR_PWM_ReadCompare2, .-EFFECTOR_PWM_ReadCompare2
 712              		.section	.text.EFFECTOR_PWM_ReadPeriod,"ax",%progbits
 713              		.align	2
 714              		.global	EFFECTOR_PWM_ReadPeriod
 715              		.code	16
 716              		.thumb_func
 717              		.type	EFFECTOR_PWM_ReadPeriod, %function
 718              	EFFECTOR_PWM_ReadPeriod:
 719              	.LFB17:
 866:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 867:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** #endif /* (EFFECTOR_PWM_UseOneCompareMode) */
 868:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 869:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** 
 870:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Function Name: EFFECTOR_PWM_ReadPeriod
 872:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** ********************************************************************************
 873:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 874:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Summary:
 875:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 29


 877:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Parameters:
 878:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  None
 879:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 880:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** * Return:
 881:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *
 883:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** uint16 EFFECTOR_PWM_ReadPeriod(void) 
 885:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** {
 720              		.loc 1 885 0
 721              		.cfi_startproc
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 886:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #if(EFFECTOR_PWM_UsingFixedFunction)
 887:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return ((uint16)CY_GET_REG16(EFFECTOR_PWM_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #else
 889:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****         return (CY_GET_REG16(EFFECTOR_PWM_PERIOD_LSB_PTR));
 728              		.loc 1 889 0
 729 0004 024B     		ldr	r3, .L61
 730 0006 1B88     		ldrh	r3, [r3]
 731 0008 9BB2     		uxth	r3, r3
 890:.\Generated_Source\PSoC4/EFFECTOR_PWM.c ****     #endif /* (EFFECTOR_PWM_UsingFixedFunction) */
 891:.\Generated_Source\PSoC4/EFFECTOR_PWM.c **** }
 732              		.loc 1 891 0
 733 000a 181C     		mov	r0, r3
 734 000c BD46     		mov	sp, r7
 735              		@ sp needed
 736 000e 80BD     		pop	{r7, pc}
 737              	.L62:
 738              		.align	2
 739              	.L61:
 740 0010 80100F40 		.word	1074729088
 741              		.cfi_endproc
 742              	.LFE17:
 743              		.size	EFFECTOR_PWM_ReadPeriod, .-EFFECTOR_PWM_ReadPeriod
 744              		.text
 745              	.Letext0:
 746              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 747              		.section	.debug_info,"",%progbits
 748              	.Ldebug_info0:
 749 0000 D6020000 		.4byte	0x2d6
 750 0004 0400     		.2byte	0x4
 751 0006 00000000 		.4byte	.Ldebug_abbrev0
 752 000a 04       		.byte	0x4
 753 000b 01       		.uleb128 0x1
 754 000c E7000000 		.4byte	.LASF42
 755 0010 01       		.byte	0x1
 756 0011 02030000 		.4byte	.LASF43
 757 0015 0F020000 		.4byte	.LASF44
 758 0019 00000000 		.4byte	.Ldebug_ranges0+0
 759 001d 00000000 		.4byte	0
 760 0021 00000000 		.4byte	.Ldebug_line0
 761 0025 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 30


 762 0026 01       		.byte	0x1
 763 0027 06       		.byte	0x6
 764 0028 95030000 		.4byte	.LASF0
 765 002c 02       		.uleb128 0x2
 766 002d 01       		.byte	0x1
 767 002e 08       		.byte	0x8
 768 002f 6E010000 		.4byte	.LASF1
 769 0033 02       		.uleb128 0x2
 770 0034 02       		.byte	0x2
 771 0035 05       		.byte	0x5
 772 0036 FE010000 		.4byte	.LASF2
 773 003a 02       		.uleb128 0x2
 774 003b 02       		.byte	0x2
 775 003c 07       		.byte	0x7
 776 003d 9E000000 		.4byte	.LASF3
 777 0041 02       		.uleb128 0x2
 778 0042 04       		.byte	0x4
 779 0043 05       		.byte	0x5
 780 0044 95000000 		.4byte	.LASF4
 781 0048 02       		.uleb128 0x2
 782 0049 04       		.byte	0x4
 783 004a 07       		.byte	0x7
 784 004b 81010000 		.4byte	.LASF5
 785 004f 02       		.uleb128 0x2
 786 0050 08       		.byte	0x8
 787 0051 05       		.byte	0x5
 788 0052 D2020000 		.4byte	.LASF6
 789 0056 02       		.uleb128 0x2
 790 0057 08       		.byte	0x8
 791 0058 07       		.byte	0x7
 792 0059 A6020000 		.4byte	.LASF7
 793 005d 03       		.uleb128 0x3
 794 005e 04       		.byte	0x4
 795 005f 05       		.byte	0x5
 796 0060 696E7400 		.ascii	"int\000"
 797 0064 02       		.uleb128 0x2
 798 0065 04       		.byte	0x4
 799 0066 07       		.byte	0x7
 800 0067 99020000 		.4byte	.LASF8
 801 006b 04       		.uleb128 0x4
 802 006c 93010000 		.4byte	.LASF9
 803 0070 02       		.byte	0x2
 804 0071 A1       		.byte	0xa1
 805 0072 2C000000 		.4byte	0x2c
 806 0076 04       		.uleb128 0x4
 807 0077 08020000 		.4byte	.LASF10
 808 007b 02       		.byte	0x2
 809 007c A2       		.byte	0xa2
 810 007d 3A000000 		.4byte	0x3a
 811 0081 02       		.uleb128 0x2
 812 0082 04       		.byte	0x4
 813 0083 04       		.byte	0x4
 814 0084 E1000000 		.4byte	.LASF11
 815 0088 02       		.uleb128 0x2
 816 0089 08       		.byte	0x8
 817 008a 04       		.byte	0x4
 818 008b F7010000 		.4byte	.LASF12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 31


 819 008f 02       		.uleb128 0x2
 820 0090 01       		.byte	0x1
 821 0091 08       		.byte	0x8
 822 0092 20000000 		.4byte	.LASF13
 823 0096 05       		.uleb128 0x5
 824 0097 7C010000 		.4byte	.LASF14
 825 009b 02       		.byte	0x2
 826 009c 4B01     		.2byte	0x14b
 827 009e A2000000 		.4byte	0xa2
 828 00a2 06       		.uleb128 0x6
 829 00a3 6B000000 		.4byte	0x6b
 830 00a7 05       		.uleb128 0x5
 831 00a8 00000000 		.4byte	.LASF15
 832 00ac 02       		.byte	0x2
 833 00ad 4C01     		.2byte	0x14c
 834 00af B3000000 		.4byte	0xb3
 835 00b3 06       		.uleb128 0x6
 836 00b4 76000000 		.4byte	0x76
 837 00b8 02       		.uleb128 0x2
 838 00b9 04       		.byte	0x4
 839 00ba 07       		.byte	0x7
 840 00bb C9020000 		.4byte	.LASF16
 841 00bf 07       		.uleb128 0x7
 842 00c0 2A030000 		.4byte	.LASF19
 843 00c4 01       		.byte	0x1
 844 00c5 37       		.byte	0x37
 845 00c6 00000000 		.4byte	.LFB0
 846 00ca 24000000 		.4byte	.LFE0-.LFB0
 847 00ce 01       		.uleb128 0x1
 848 00cf 9C       		.byte	0x9c
 849 00d0 08       		.uleb128 0x8
 850 00d1 E7030000 		.4byte	.LASF22
 851 00d5 01       		.byte	0x1
 852 00d6 54       		.byte	0x54
 853 00d7 00000000 		.4byte	.LFB1
 854 00db A8000000 		.4byte	.LFE1-.LFB1
 855 00df 01       		.uleb128 0x1
 856 00e0 9C       		.byte	0x9c
 857 00e1 02010000 		.4byte	0x102
 858 00e5 09       		.uleb128 0x9
 859 00e6 C4020000 		.4byte	.LASF17
 860 00ea 01       		.byte	0x1
 861 00eb 57       		.byte	0x57
 862 00ec 6B000000 		.4byte	0x6b
 863 00f0 02       		.uleb128 0x2
 864 00f1 91       		.byte	0x91
 865 00f2 6F       		.sleb128 -17
 866 00f3 09       		.uleb128 0x9
 867 00f4 25000000 		.4byte	.LASF18
 868 00f8 01       		.byte	0x1
 869 00f9 5D       		.byte	0x5d
 870 00fa 6B000000 		.4byte	0x6b
 871 00fe 02       		.uleb128 0x2
 872 00ff 91       		.byte	0x91
 873 0100 6E       		.sleb128 -18
 874 0101 00       		.byte	0
 875 0102 0A       		.uleb128 0xa
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 32


 876 0103 EE020000 		.4byte	.LASF20
 877 0107 01       		.byte	0x1
 878 0108 C7       		.byte	0xc7
 879 0109 00000000 		.4byte	.LFB2
 880 010d 20000000 		.4byte	.LFE2-.LFB2
 881 0111 01       		.uleb128 0x1
 882 0112 9C       		.byte	0x9c
 883 0113 0A       		.uleb128 0xa
 884 0114 87020000 		.4byte	.LASF21
 885 0118 01       		.byte	0x1
 886 0119 E9       		.byte	0xe9
 887 011a 00000000 		.4byte	.LFB3
 888 011e 1C000000 		.4byte	.LFE3-.LFB3
 889 0122 01       		.uleb128 0x1
 890 0123 9C       		.byte	0x9c
 891 0124 0B       		.uleb128 0xb
 892 0125 41000000 		.4byte	.LASF23
 893 0129 01       		.byte	0x1
 894 012a 9301     		.2byte	0x193
 895 012c 00000000 		.4byte	.LFB4
 896 0130 20000000 		.4byte	.LFE4-.LFB4
 897 0134 01       		.uleb128 0x1
 898 0135 9C       		.byte	0x9c
 899 0136 4A010000 		.4byte	0x14a
 900 013a 0C       		.uleb128 0xc
 901 013b EF010000 		.4byte	.LASF26
 902 013f 01       		.byte	0x1
 903 0140 9301     		.2byte	0x193
 904 0142 76000000 		.4byte	0x76
 905 0146 02       		.uleb128 0x2
 906 0147 91       		.byte	0x91
 907 0148 76       		.sleb128 -10
 908 0149 00       		.byte	0
 909 014a 0D       		.uleb128 0xd
 910 014b C8000000 		.4byte	.LASF33
 911 014f 01       		.byte	0x1
 912 0150 A901     		.2byte	0x1a9
 913 0152 76000000 		.4byte	0x76
 914 0156 00000000 		.4byte	.LFB5
 915 015a 1C000000 		.4byte	.LFE5-.LFB5
 916 015e 01       		.uleb128 0x1
 917 015f 9C       		.byte	0x9c
 918 0160 0E       		.uleb128 0xe
 919 0161 B1000000 		.4byte	.LASF24
 920 0165 01       		.byte	0x1
 921 0166 C501     		.2byte	0x1c5
 922 0168 00000000 		.4byte	.LFB6
 923 016c 1C000000 		.4byte	.LFE6-.LFB6
 924 0170 01       		.uleb128 0x1
 925 0171 9C       		.byte	0x9c
 926 0172 0B       		.uleb128 0xb
 927 0173 6E020000 		.4byte	.LASF25
 928 0177 01       		.byte	0x1
 929 0178 E201     		.2byte	0x1e2
 930 017a 00000000 		.4byte	.LFB7
 931 017e 20000000 		.4byte	.LFE7-.LFB7
 932 0182 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 33


 933 0183 9C       		.byte	0x9c
 934 0184 98010000 		.4byte	0x198
 935 0188 0C       		.uleb128 0xc
 936 0189 8E000000 		.4byte	.LASF27
 937 018d 01       		.byte	0x1
 938 018e E201     		.2byte	0x1e2
 939 0190 76000000 		.4byte	0x76
 940 0194 02       		.uleb128 0x2
 941 0195 91       		.byte	0x91
 942 0196 76       		.sleb128 -10
 943 0197 00       		.byte	0
 944 0198 0B       		.uleb128 0xb
 945 0199 5F030000 		.4byte	.LASF28
 946 019d 01       		.byte	0x1
 947 019e 2B02     		.2byte	0x22b
 948 01a0 00000000 		.4byte	.LFB8
 949 01a4 20000000 		.4byte	.LFE8-.LFB8
 950 01a8 01       		.uleb128 0x1
 951 01a9 9C       		.byte	0x9c
 952 01aa BE010000 		.4byte	0x1be
 953 01ae 0C       		.uleb128 0xc
 954 01af A1030000 		.4byte	.LASF29
 955 01b3 01       		.byte	0x1
 956 01b4 2B02     		.2byte	0x22b
 957 01b6 76000000 		.4byte	0x76
 958 01ba 02       		.uleb128 0x2
 959 01bb 91       		.byte	0x91
 960 01bc 76       		.sleb128 -10
 961 01bd 00       		.byte	0
 962 01be 0B       		.uleb128 0xb
 963 01bf 7A030000 		.4byte	.LASF30
 964 01c3 01       		.byte	0x1
 965 01c4 4802     		.2byte	0x248
 966 01c6 00000000 		.4byte	.LFB9
 967 01ca 20000000 		.4byte	.LFE9-.LFB9
 968 01ce 01       		.uleb128 0x1
 969 01cf 9C       		.byte	0x9c
 970 01d0 E4010000 		.4byte	0x1e4
 971 01d4 0C       		.uleb128 0xc
 972 01d5 A1030000 		.4byte	.LASF29
 973 01d9 01       		.byte	0x1
 974 01da 4802     		.2byte	0x248
 975 01dc 76000000 		.4byte	0x76
 976 01e0 02       		.uleb128 0x2
 977 01e1 91       		.byte	0x91
 978 01e2 76       		.sleb128 -10
 979 01e3 00       		.byte	0
 980 01e4 0B       		.uleb128 0xb
 981 01e5 C9030000 		.4byte	.LASF31
 982 01e9 01       		.byte	0x1
 983 01ea AC02     		.2byte	0x2ac
 984 01ec 00000000 		.4byte	.LFB10
 985 01f0 20000000 		.4byte	.LFE10-.LFB10
 986 01f4 01       		.uleb128 0x1
 987 01f5 9C       		.byte	0x9c
 988 01f6 0A020000 		.4byte	0x20a
 989 01fa 0C       		.uleb128 0xc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 34


 990 01fb E0020000 		.4byte	.LASF32
 991 01ff 01       		.byte	0x1
 992 0200 AC02     		.2byte	0x2ac
 993 0202 6B000000 		.4byte	0x6b
 994 0206 02       		.uleb128 0x2
 995 0207 91       		.byte	0x91
 996 0208 77       		.sleb128 -9
 997 0209 00       		.byte	0
 998 020a 0D       		.uleb128 0xd
 999 020b A9030000 		.4byte	.LASF34
 1000 020f 01       		.byte	0x1
 1001 0210 C702     		.2byte	0x2c7
 1002 0212 6B000000 		.4byte	0x6b
 1003 0216 00000000 		.4byte	.LFB11
 1004 021a 14000000 		.4byte	.LFE11-.LFB11
 1005 021e 01       		.uleb128 0x1
 1006 021f 9C       		.byte	0x9c
 1007 0220 0F       		.uleb128 0xf
 1008 0221 CE010000 		.4byte	.LASF45
 1009 0225 01       		.byte	0x1
 1010 0226 E102     		.2byte	0x2e1
 1011 0228 6B000000 		.4byte	0x6b
 1012 022c 00000000 		.4byte	.LFB12
 1013 0230 20000000 		.4byte	.LFE12-.LFB12
 1014 0234 01       		.uleb128 0x1
 1015 0235 9C       		.byte	0x9c
 1016 0236 4A020000 		.4byte	0x24a
 1017 023a 10       		.uleb128 0x10
 1018 023b BD020000 		.4byte	.LASF35
 1019 023f 01       		.byte	0x1
 1020 0240 E302     		.2byte	0x2e3
 1021 0242 6B000000 		.4byte	0x6b
 1022 0246 02       		.uleb128 0x2
 1023 0247 91       		.byte	0x91
 1024 0248 77       		.sleb128 -9
 1025 0249 00       		.byte	0
 1026 024a 0B       		.uleb128 0xb
 1027 024b 3D030000 		.4byte	.LASF36
 1028 024f 01       		.byte	0x1
 1029 0250 FD02     		.2byte	0x2fd
 1030 0252 00000000 		.4byte	.LFB13
 1031 0256 20000000 		.4byte	.LFE13-.LFB13
 1032 025a 01       		.uleb128 0x1
 1033 025b 9C       		.byte	0x9c
 1034 025c 70020000 		.4byte	0x270
 1035 0260 0C       		.uleb128 0xc
 1036 0261 99010000 		.4byte	.LASF37
 1037 0265 01       		.byte	0x1
 1038 0266 FD02     		.2byte	0x2fd
 1039 0268 6B000000 		.4byte	0x6b
 1040 026c 02       		.uleb128 0x2
 1041 026d 91       		.byte	0x91
 1042 026e 77       		.sleb128 -9
 1043 026f 00       		.byte	0
 1044 0270 0D       		.uleb128 0xd
 1045 0271 5B000000 		.4byte	.LASF38
 1046 0275 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 35


 1047 0276 1603     		.2byte	0x316
 1048 0278 76000000 		.4byte	0x76
 1049 027c 00000000 		.4byte	.LFB14
 1050 0280 14000000 		.4byte	.LFE14-.LFB14
 1051 0284 01       		.uleb128 0x1
 1052 0285 9C       		.byte	0x9c
 1053 0286 0D       		.uleb128 0xd
 1054 0287 74000000 		.4byte	.LASF39
 1055 028b 01       		.byte	0x1
 1056 028c 4A03     		.2byte	0x34a
 1057 028e 76000000 		.4byte	0x76
 1058 0292 00000000 		.4byte	.LFB15
 1059 0296 14000000 		.4byte	.LFE15-.LFB15
 1060 029a 01       		.uleb128 0x1
 1061 029b 9C       		.byte	0x9c
 1062 029c 0D       		.uleb128 0xd
 1063 029d 06000000 		.4byte	.LASF40
 1064 02a1 01       		.byte	0x1
 1065 02a2 5E03     		.2byte	0x35e
 1066 02a4 76000000 		.4byte	0x76
 1067 02a8 00000000 		.4byte	.LFB16
 1068 02ac 14000000 		.4byte	.LFE16-.LFB16
 1069 02b0 01       		.uleb128 0x1
 1070 02b1 9C       		.byte	0x9c
 1071 02b2 0D       		.uleb128 0xd
 1072 02b3 A1010000 		.4byte	.LASF41
 1073 02b7 01       		.byte	0x1
 1074 02b8 7403     		.2byte	0x374
 1075 02ba 76000000 		.4byte	0x76
 1076 02be 00000000 		.4byte	.LFB17
 1077 02c2 14000000 		.4byte	.LFE17-.LFB17
 1078 02c6 01       		.uleb128 0x1
 1079 02c7 9C       		.byte	0x9c
 1080 02c8 11       		.uleb128 0x11
 1081 02c9 B9010000 		.4byte	.LASF46
 1082 02cd 01       		.byte	0x1
 1083 02ce 20       		.byte	0x20
 1084 02cf 6B000000 		.4byte	0x6b
 1085 02d3 05       		.uleb128 0x5
 1086 02d4 03       		.byte	0x3
 1087 02d5 00000000 		.4byte	EFFECTOR_PWM_initVar
 1088 02d9 00       		.byte	0
 1089              		.section	.debug_abbrev,"",%progbits
 1090              	.Ldebug_abbrev0:
 1091 0000 01       		.uleb128 0x1
 1092 0001 11       		.uleb128 0x11
 1093 0002 01       		.byte	0x1
 1094 0003 25       		.uleb128 0x25
 1095 0004 0E       		.uleb128 0xe
 1096 0005 13       		.uleb128 0x13
 1097 0006 0B       		.uleb128 0xb
 1098 0007 03       		.uleb128 0x3
 1099 0008 0E       		.uleb128 0xe
 1100 0009 1B       		.uleb128 0x1b
 1101 000a 0E       		.uleb128 0xe
 1102 000b 55       		.uleb128 0x55
 1103 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 36


 1104 000d 11       		.uleb128 0x11
 1105 000e 01       		.uleb128 0x1
 1106 000f 10       		.uleb128 0x10
 1107 0010 17       		.uleb128 0x17
 1108 0011 00       		.byte	0
 1109 0012 00       		.byte	0
 1110 0013 02       		.uleb128 0x2
 1111 0014 24       		.uleb128 0x24
 1112 0015 00       		.byte	0
 1113 0016 0B       		.uleb128 0xb
 1114 0017 0B       		.uleb128 0xb
 1115 0018 3E       		.uleb128 0x3e
 1116 0019 0B       		.uleb128 0xb
 1117 001a 03       		.uleb128 0x3
 1118 001b 0E       		.uleb128 0xe
 1119 001c 00       		.byte	0
 1120 001d 00       		.byte	0
 1121 001e 03       		.uleb128 0x3
 1122 001f 24       		.uleb128 0x24
 1123 0020 00       		.byte	0
 1124 0021 0B       		.uleb128 0xb
 1125 0022 0B       		.uleb128 0xb
 1126 0023 3E       		.uleb128 0x3e
 1127 0024 0B       		.uleb128 0xb
 1128 0025 03       		.uleb128 0x3
 1129 0026 08       		.uleb128 0x8
 1130 0027 00       		.byte	0
 1131 0028 00       		.byte	0
 1132 0029 04       		.uleb128 0x4
 1133 002a 16       		.uleb128 0x16
 1134 002b 00       		.byte	0
 1135 002c 03       		.uleb128 0x3
 1136 002d 0E       		.uleb128 0xe
 1137 002e 3A       		.uleb128 0x3a
 1138 002f 0B       		.uleb128 0xb
 1139 0030 3B       		.uleb128 0x3b
 1140 0031 0B       		.uleb128 0xb
 1141 0032 49       		.uleb128 0x49
 1142 0033 13       		.uleb128 0x13
 1143 0034 00       		.byte	0
 1144 0035 00       		.byte	0
 1145 0036 05       		.uleb128 0x5
 1146 0037 16       		.uleb128 0x16
 1147 0038 00       		.byte	0
 1148 0039 03       		.uleb128 0x3
 1149 003a 0E       		.uleb128 0xe
 1150 003b 3A       		.uleb128 0x3a
 1151 003c 0B       		.uleb128 0xb
 1152 003d 3B       		.uleb128 0x3b
 1153 003e 05       		.uleb128 0x5
 1154 003f 49       		.uleb128 0x49
 1155 0040 13       		.uleb128 0x13
 1156 0041 00       		.byte	0
 1157 0042 00       		.byte	0
 1158 0043 06       		.uleb128 0x6
 1159 0044 35       		.uleb128 0x35
 1160 0045 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 37


 1161 0046 49       		.uleb128 0x49
 1162 0047 13       		.uleb128 0x13
 1163 0048 00       		.byte	0
 1164 0049 00       		.byte	0
 1165 004a 07       		.uleb128 0x7
 1166 004b 2E       		.uleb128 0x2e
 1167 004c 00       		.byte	0
 1168 004d 3F       		.uleb128 0x3f
 1169 004e 19       		.uleb128 0x19
 1170 004f 03       		.uleb128 0x3
 1171 0050 0E       		.uleb128 0xe
 1172 0051 3A       		.uleb128 0x3a
 1173 0052 0B       		.uleb128 0xb
 1174 0053 3B       		.uleb128 0x3b
 1175 0054 0B       		.uleb128 0xb
 1176 0055 27       		.uleb128 0x27
 1177 0056 19       		.uleb128 0x19
 1178 0057 11       		.uleb128 0x11
 1179 0058 01       		.uleb128 0x1
 1180 0059 12       		.uleb128 0x12
 1181 005a 06       		.uleb128 0x6
 1182 005b 40       		.uleb128 0x40
 1183 005c 18       		.uleb128 0x18
 1184 005d 9642     		.uleb128 0x2116
 1185 005f 19       		.uleb128 0x19
 1186 0060 00       		.byte	0
 1187 0061 00       		.byte	0
 1188 0062 08       		.uleb128 0x8
 1189 0063 2E       		.uleb128 0x2e
 1190 0064 01       		.byte	0x1
 1191 0065 3F       		.uleb128 0x3f
 1192 0066 19       		.uleb128 0x19
 1193 0067 03       		.uleb128 0x3
 1194 0068 0E       		.uleb128 0xe
 1195 0069 3A       		.uleb128 0x3a
 1196 006a 0B       		.uleb128 0xb
 1197 006b 3B       		.uleb128 0x3b
 1198 006c 0B       		.uleb128 0xb
 1199 006d 27       		.uleb128 0x27
 1200 006e 19       		.uleb128 0x19
 1201 006f 11       		.uleb128 0x11
 1202 0070 01       		.uleb128 0x1
 1203 0071 12       		.uleb128 0x12
 1204 0072 06       		.uleb128 0x6
 1205 0073 40       		.uleb128 0x40
 1206 0074 18       		.uleb128 0x18
 1207 0075 9642     		.uleb128 0x2116
 1208 0077 19       		.uleb128 0x19
 1209 0078 01       		.uleb128 0x1
 1210 0079 13       		.uleb128 0x13
 1211 007a 00       		.byte	0
 1212 007b 00       		.byte	0
 1213 007c 09       		.uleb128 0x9
 1214 007d 34       		.uleb128 0x34
 1215 007e 00       		.byte	0
 1216 007f 03       		.uleb128 0x3
 1217 0080 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 38


 1218 0081 3A       		.uleb128 0x3a
 1219 0082 0B       		.uleb128 0xb
 1220 0083 3B       		.uleb128 0x3b
 1221 0084 0B       		.uleb128 0xb
 1222 0085 49       		.uleb128 0x49
 1223 0086 13       		.uleb128 0x13
 1224 0087 02       		.uleb128 0x2
 1225 0088 18       		.uleb128 0x18
 1226 0089 00       		.byte	0
 1227 008a 00       		.byte	0
 1228 008b 0A       		.uleb128 0xa
 1229 008c 2E       		.uleb128 0x2e
 1230 008d 00       		.byte	0
 1231 008e 3F       		.uleb128 0x3f
 1232 008f 19       		.uleb128 0x19
 1233 0090 03       		.uleb128 0x3
 1234 0091 0E       		.uleb128 0xe
 1235 0092 3A       		.uleb128 0x3a
 1236 0093 0B       		.uleb128 0xb
 1237 0094 3B       		.uleb128 0x3b
 1238 0095 0B       		.uleb128 0xb
 1239 0096 27       		.uleb128 0x27
 1240 0097 19       		.uleb128 0x19
 1241 0098 11       		.uleb128 0x11
 1242 0099 01       		.uleb128 0x1
 1243 009a 12       		.uleb128 0x12
 1244 009b 06       		.uleb128 0x6
 1245 009c 40       		.uleb128 0x40
 1246 009d 18       		.uleb128 0x18
 1247 009e 9742     		.uleb128 0x2117
 1248 00a0 19       		.uleb128 0x19
 1249 00a1 00       		.byte	0
 1250 00a2 00       		.byte	0
 1251 00a3 0B       		.uleb128 0xb
 1252 00a4 2E       		.uleb128 0x2e
 1253 00a5 01       		.byte	0x1
 1254 00a6 3F       		.uleb128 0x3f
 1255 00a7 19       		.uleb128 0x19
 1256 00a8 03       		.uleb128 0x3
 1257 00a9 0E       		.uleb128 0xe
 1258 00aa 3A       		.uleb128 0x3a
 1259 00ab 0B       		.uleb128 0xb
 1260 00ac 3B       		.uleb128 0x3b
 1261 00ad 05       		.uleb128 0x5
 1262 00ae 27       		.uleb128 0x27
 1263 00af 19       		.uleb128 0x19
 1264 00b0 11       		.uleb128 0x11
 1265 00b1 01       		.uleb128 0x1
 1266 00b2 12       		.uleb128 0x12
 1267 00b3 06       		.uleb128 0x6
 1268 00b4 40       		.uleb128 0x40
 1269 00b5 18       		.uleb128 0x18
 1270 00b6 9742     		.uleb128 0x2117
 1271 00b8 19       		.uleb128 0x19
 1272 00b9 01       		.uleb128 0x1
 1273 00ba 13       		.uleb128 0x13
 1274 00bb 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 39


 1275 00bc 00       		.byte	0
 1276 00bd 0C       		.uleb128 0xc
 1277 00be 05       		.uleb128 0x5
 1278 00bf 00       		.byte	0
 1279 00c0 03       		.uleb128 0x3
 1280 00c1 0E       		.uleb128 0xe
 1281 00c2 3A       		.uleb128 0x3a
 1282 00c3 0B       		.uleb128 0xb
 1283 00c4 3B       		.uleb128 0x3b
 1284 00c5 05       		.uleb128 0x5
 1285 00c6 49       		.uleb128 0x49
 1286 00c7 13       		.uleb128 0x13
 1287 00c8 02       		.uleb128 0x2
 1288 00c9 18       		.uleb128 0x18
 1289 00ca 00       		.byte	0
 1290 00cb 00       		.byte	0
 1291 00cc 0D       		.uleb128 0xd
 1292 00cd 2E       		.uleb128 0x2e
 1293 00ce 00       		.byte	0
 1294 00cf 3F       		.uleb128 0x3f
 1295 00d0 19       		.uleb128 0x19
 1296 00d1 03       		.uleb128 0x3
 1297 00d2 0E       		.uleb128 0xe
 1298 00d3 3A       		.uleb128 0x3a
 1299 00d4 0B       		.uleb128 0xb
 1300 00d5 3B       		.uleb128 0x3b
 1301 00d6 05       		.uleb128 0x5
 1302 00d7 27       		.uleb128 0x27
 1303 00d8 19       		.uleb128 0x19
 1304 00d9 49       		.uleb128 0x49
 1305 00da 13       		.uleb128 0x13
 1306 00db 11       		.uleb128 0x11
 1307 00dc 01       		.uleb128 0x1
 1308 00dd 12       		.uleb128 0x12
 1309 00de 06       		.uleb128 0x6
 1310 00df 40       		.uleb128 0x40
 1311 00e0 18       		.uleb128 0x18
 1312 00e1 9742     		.uleb128 0x2117
 1313 00e3 19       		.uleb128 0x19
 1314 00e4 00       		.byte	0
 1315 00e5 00       		.byte	0
 1316 00e6 0E       		.uleb128 0xe
 1317 00e7 2E       		.uleb128 0x2e
 1318 00e8 00       		.byte	0
 1319 00e9 3F       		.uleb128 0x3f
 1320 00ea 19       		.uleb128 0x19
 1321 00eb 03       		.uleb128 0x3
 1322 00ec 0E       		.uleb128 0xe
 1323 00ed 3A       		.uleb128 0x3a
 1324 00ee 0B       		.uleb128 0xb
 1325 00ef 3B       		.uleb128 0x3b
 1326 00f0 05       		.uleb128 0x5
 1327 00f1 27       		.uleb128 0x27
 1328 00f2 19       		.uleb128 0x19
 1329 00f3 11       		.uleb128 0x11
 1330 00f4 01       		.uleb128 0x1
 1331 00f5 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 40


 1332 00f6 06       		.uleb128 0x6
 1333 00f7 40       		.uleb128 0x40
 1334 00f8 18       		.uleb128 0x18
 1335 00f9 9642     		.uleb128 0x2116
 1336 00fb 19       		.uleb128 0x19
 1337 00fc 00       		.byte	0
 1338 00fd 00       		.byte	0
 1339 00fe 0F       		.uleb128 0xf
 1340 00ff 2E       		.uleb128 0x2e
 1341 0100 01       		.byte	0x1
 1342 0101 3F       		.uleb128 0x3f
 1343 0102 19       		.uleb128 0x19
 1344 0103 03       		.uleb128 0x3
 1345 0104 0E       		.uleb128 0xe
 1346 0105 3A       		.uleb128 0x3a
 1347 0106 0B       		.uleb128 0xb
 1348 0107 3B       		.uleb128 0x3b
 1349 0108 05       		.uleb128 0x5
 1350 0109 27       		.uleb128 0x27
 1351 010a 19       		.uleb128 0x19
 1352 010b 49       		.uleb128 0x49
 1353 010c 13       		.uleb128 0x13
 1354 010d 11       		.uleb128 0x11
 1355 010e 01       		.uleb128 0x1
 1356 010f 12       		.uleb128 0x12
 1357 0110 06       		.uleb128 0x6
 1358 0111 40       		.uleb128 0x40
 1359 0112 18       		.uleb128 0x18
 1360 0113 9742     		.uleb128 0x2117
 1361 0115 19       		.uleb128 0x19
 1362 0116 01       		.uleb128 0x1
 1363 0117 13       		.uleb128 0x13
 1364 0118 00       		.byte	0
 1365 0119 00       		.byte	0
 1366 011a 10       		.uleb128 0x10
 1367 011b 34       		.uleb128 0x34
 1368 011c 00       		.byte	0
 1369 011d 03       		.uleb128 0x3
 1370 011e 0E       		.uleb128 0xe
 1371 011f 3A       		.uleb128 0x3a
 1372 0120 0B       		.uleb128 0xb
 1373 0121 3B       		.uleb128 0x3b
 1374 0122 05       		.uleb128 0x5
 1375 0123 49       		.uleb128 0x49
 1376 0124 13       		.uleb128 0x13
 1377 0125 02       		.uleb128 0x2
 1378 0126 18       		.uleb128 0x18
 1379 0127 00       		.byte	0
 1380 0128 00       		.byte	0
 1381 0129 11       		.uleb128 0x11
 1382 012a 34       		.uleb128 0x34
 1383 012b 00       		.byte	0
 1384 012c 03       		.uleb128 0x3
 1385 012d 0E       		.uleb128 0xe
 1386 012e 3A       		.uleb128 0x3a
 1387 012f 0B       		.uleb128 0xb
 1388 0130 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 41


 1389 0131 0B       		.uleb128 0xb
 1390 0132 49       		.uleb128 0x49
 1391 0133 13       		.uleb128 0x13
 1392 0134 3F       		.uleb128 0x3f
 1393 0135 19       		.uleb128 0x19
 1394 0136 02       		.uleb128 0x2
 1395 0137 18       		.uleb128 0x18
 1396 0138 00       		.byte	0
 1397 0139 00       		.byte	0
 1398 013a 00       		.byte	0
 1399              		.section	.debug_aranges,"",%progbits
 1400 0000 A4000000 		.4byte	0xa4
 1401 0004 0200     		.2byte	0x2
 1402 0006 00000000 		.4byte	.Ldebug_info0
 1403 000a 04       		.byte	0x4
 1404 000b 00       		.byte	0
 1405 000c 0000     		.2byte	0
 1406 000e 0000     		.2byte	0
 1407 0010 00000000 		.4byte	.LFB0
 1408 0014 24000000 		.4byte	.LFE0-.LFB0
 1409 0018 00000000 		.4byte	.LFB1
 1410 001c A8000000 		.4byte	.LFE1-.LFB1
 1411 0020 00000000 		.4byte	.LFB2
 1412 0024 20000000 		.4byte	.LFE2-.LFB2
 1413 0028 00000000 		.4byte	.LFB3
 1414 002c 1C000000 		.4byte	.LFE3-.LFB3
 1415 0030 00000000 		.4byte	.LFB4
 1416 0034 20000000 		.4byte	.LFE4-.LFB4
 1417 0038 00000000 		.4byte	.LFB5
 1418 003c 1C000000 		.4byte	.LFE5-.LFB5
 1419 0040 00000000 		.4byte	.LFB6
 1420 0044 1C000000 		.4byte	.LFE6-.LFB6
 1421 0048 00000000 		.4byte	.LFB7
 1422 004c 20000000 		.4byte	.LFE7-.LFB7
 1423 0050 00000000 		.4byte	.LFB8
 1424 0054 20000000 		.4byte	.LFE8-.LFB8
 1425 0058 00000000 		.4byte	.LFB9
 1426 005c 20000000 		.4byte	.LFE9-.LFB9
 1427 0060 00000000 		.4byte	.LFB10
 1428 0064 20000000 		.4byte	.LFE10-.LFB10
 1429 0068 00000000 		.4byte	.LFB11
 1430 006c 14000000 		.4byte	.LFE11-.LFB11
 1431 0070 00000000 		.4byte	.LFB12
 1432 0074 20000000 		.4byte	.LFE12-.LFB12
 1433 0078 00000000 		.4byte	.LFB13
 1434 007c 20000000 		.4byte	.LFE13-.LFB13
 1435 0080 00000000 		.4byte	.LFB14
 1436 0084 14000000 		.4byte	.LFE14-.LFB14
 1437 0088 00000000 		.4byte	.LFB15
 1438 008c 14000000 		.4byte	.LFE15-.LFB15
 1439 0090 00000000 		.4byte	.LFB16
 1440 0094 14000000 		.4byte	.LFE16-.LFB16
 1441 0098 00000000 		.4byte	.LFB17
 1442 009c 14000000 		.4byte	.LFE17-.LFB17
 1443 00a0 00000000 		.4byte	0
 1444 00a4 00000000 		.4byte	0
 1445              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 42


 1446              	.Ldebug_ranges0:
 1447 0000 00000000 		.4byte	.LFB0
 1448 0004 24000000 		.4byte	.LFE0
 1449 0008 00000000 		.4byte	.LFB1
 1450 000c A8000000 		.4byte	.LFE1
 1451 0010 00000000 		.4byte	.LFB2
 1452 0014 20000000 		.4byte	.LFE2
 1453 0018 00000000 		.4byte	.LFB3
 1454 001c 1C000000 		.4byte	.LFE3
 1455 0020 00000000 		.4byte	.LFB4
 1456 0024 20000000 		.4byte	.LFE4
 1457 0028 00000000 		.4byte	.LFB5
 1458 002c 1C000000 		.4byte	.LFE5
 1459 0030 00000000 		.4byte	.LFB6
 1460 0034 1C000000 		.4byte	.LFE6
 1461 0038 00000000 		.4byte	.LFB7
 1462 003c 20000000 		.4byte	.LFE7
 1463 0040 00000000 		.4byte	.LFB8
 1464 0044 20000000 		.4byte	.LFE8
 1465 0048 00000000 		.4byte	.LFB9
 1466 004c 20000000 		.4byte	.LFE9
 1467 0050 00000000 		.4byte	.LFB10
 1468 0054 20000000 		.4byte	.LFE10
 1469 0058 00000000 		.4byte	.LFB11
 1470 005c 14000000 		.4byte	.LFE11
 1471 0060 00000000 		.4byte	.LFB12
 1472 0064 20000000 		.4byte	.LFE12
 1473 0068 00000000 		.4byte	.LFB13
 1474 006c 20000000 		.4byte	.LFE13
 1475 0070 00000000 		.4byte	.LFB14
 1476 0074 14000000 		.4byte	.LFE14
 1477 0078 00000000 		.4byte	.LFB15
 1478 007c 14000000 		.4byte	.LFE15
 1479 0080 00000000 		.4byte	.LFB16
 1480 0084 14000000 		.4byte	.LFE16
 1481 0088 00000000 		.4byte	.LFB17
 1482 008c 14000000 		.4byte	.LFE17
 1483 0090 00000000 		.4byte	0
 1484 0094 00000000 		.4byte	0
 1485              		.section	.debug_line,"",%progbits
 1486              	.Ldebug_line0:
 1487 0000 B5010000 		.section	.debug_str,"MS",%progbits,1
 1487      02004B00 
 1487      00000201 
 1487      FB0E0D00 
 1487      01010101 
 1488              	.LASF15:
 1489 0000 72656731 		.ascii	"reg16\000"
 1489      3600
 1490              	.LASF40:
 1491 0006 45464645 		.ascii	"EFFECTOR_PWM_ReadCompare2\000"
 1491      43544F52 
 1491      5F50574D 
 1491      5F526561 
 1491      64436F6D 
 1492              	.LASF13:
 1493 0020 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 43


 1493      00
 1494              	.LASF18:
 1495 0025 45464645 		.ascii	"EFFECTOR_PWM_interruptState\000"
 1495      43544F52 
 1495      5F50574D 
 1495      5F696E74 
 1495      65727275 
 1496              	.LASF23:
 1497 0041 45464645 		.ascii	"EFFECTOR_PWM_WriteCounter\000"
 1497      43544F52 
 1497      5F50574D 
 1497      5F577269 
 1497      7465436F 
 1498              	.LASF38:
 1499 005b 45464645 		.ascii	"EFFECTOR_PWM_ReadCapture\000"
 1499      43544F52 
 1499      5F50574D 
 1499      5F526561 
 1499      64436170 
 1500              	.LASF39:
 1501 0074 45464645 		.ascii	"EFFECTOR_PWM_ReadCompare1\000"
 1501      43544F52 
 1501      5F50574D 
 1501      5F526561 
 1501      64436F6D 
 1502              	.LASF27:
 1503 008e 70657269 		.ascii	"period\000"
 1503      6F6400
 1504              	.LASF4:
 1505 0095 6C6F6E67 		.ascii	"long int\000"
 1505      20696E74 
 1505      00
 1506              	.LASF3:
 1507 009e 73686F72 		.ascii	"short unsigned int\000"
 1507      7420756E 
 1507      7369676E 
 1507      65642069 
 1507      6E7400
 1508              	.LASF24:
 1509 00b1 45464645 		.ascii	"EFFECTOR_PWM_ClearFIFO\000"
 1509      43544F52 
 1509      5F50574D 
 1509      5F436C65 
 1509      61724649 
 1510              	.LASF33:
 1511 00c8 45464645 		.ascii	"EFFECTOR_PWM_ReadCounter\000"
 1511      43544F52 
 1511      5F50574D 
 1511      5F526561 
 1511      64436F75 
 1512              	.LASF11:
 1513 00e1 666C6F61 		.ascii	"float\000"
 1513      7400
 1514              	.LASF42:
 1515 00e7 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1515      4320342E 
 1515      382E3420 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 44


 1515      32303134 
 1515      30353236 
 1516 011a 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1516      20726576 
 1516      6973696F 
 1516      6E203231 
 1516      31333538 
 1517 014d 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 1517      74643D67 
 1517      6E753939 
 1517      202D6666 
 1517      756E6374 
 1518              	.LASF1:
 1519 016e 756E7369 		.ascii	"unsigned char\000"
 1519      676E6564 
 1519      20636861 
 1519      7200
 1520              	.LASF14:
 1521 017c 72656738 		.ascii	"reg8\000"
 1521      00
 1522              	.LASF5:
 1523 0181 6C6F6E67 		.ascii	"long unsigned int\000"
 1523      20756E73 
 1523      69676E65 
 1523      6420696E 
 1523      7400
 1524              	.LASF9:
 1525 0193 75696E74 		.ascii	"uint8\000"
 1525      3800
 1526              	.LASF37:
 1527 0199 636F6E74 		.ascii	"control\000"
 1527      726F6C00 
 1528              	.LASF41:
 1529 01a1 45464645 		.ascii	"EFFECTOR_PWM_ReadPeriod\000"
 1529      43544F52 
 1529      5F50574D 
 1529      5F526561 
 1529      64506572 
 1530              	.LASF46:
 1531 01b9 45464645 		.ascii	"EFFECTOR_PWM_initVar\000"
 1531      43544F52 
 1531      5F50574D 
 1531      5F696E69 
 1531      74566172 
 1532              	.LASF45:
 1533 01ce 45464645 		.ascii	"EFFECTOR_PWM_ReadControlRegister\000"
 1533      43544F52 
 1533      5F50574D 
 1533      5F526561 
 1533      64436F6E 
 1534              	.LASF26:
 1535 01ef 636F756E 		.ascii	"counter\000"
 1535      74657200 
 1536              	.LASF12:
 1537 01f7 646F7562 		.ascii	"double\000"
 1537      6C6500
 1538              	.LASF2:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 45


 1539 01fe 73686F72 		.ascii	"short int\000"
 1539      7420696E 
 1539      7400
 1540              	.LASF10:
 1541 0208 75696E74 		.ascii	"uint16\000"
 1541      313600
 1542              	.LASF44:
 1543 020f 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 1543      73657273 
 1543      5C53616D 
 1543      75656C5C 
 1543      446F6375 
 1544 023d 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 1544      5C61726D 
 1544      5F636F6E 
 1544      74726F6C 
 1544      6C65725F 
 1545 026d 00       		.ascii	"\000"
 1546              	.LASF25:
 1547 026e 45464645 		.ascii	"EFFECTOR_PWM_WritePeriod\000"
 1547      43544F52 
 1547      5F50574D 
 1547      5F577269 
 1547      74655065 
 1548              	.LASF21:
 1549 0287 45464645 		.ascii	"EFFECTOR_PWM_Stop\000"
 1549      43544F52 
 1549      5F50574D 
 1549      5F53746F 
 1549      7000
 1550              	.LASF8:
 1551 0299 756E7369 		.ascii	"unsigned int\000"
 1551      676E6564 
 1551      20696E74 
 1551      00
 1552              	.LASF7:
 1553 02a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 1553      206C6F6E 
 1553      6720756E 
 1553      7369676E 
 1553      65642069 
 1554              	.LASF35:
 1555 02bd 72657375 		.ascii	"result\000"
 1555      6C7400
 1556              	.LASF17:
 1557 02c4 6374726C 		.ascii	"ctrl\000"
 1557      00
 1558              	.LASF16:
 1559 02c9 73697A65 		.ascii	"sizetype\000"
 1559      74797065 
 1559      00
 1560              	.LASF6:
 1561 02d2 6C6F6E67 		.ascii	"long long int\000"
 1561      206C6F6E 
 1561      6720696E 
 1561      7400
 1562              	.LASF32:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 46


 1563 02e0 696E7465 		.ascii	"interruptMode\000"
 1563      72727570 
 1563      744D6F64 
 1563      6500
 1564              	.LASF20:
 1565 02ee 45464645 		.ascii	"EFFECTOR_PWM_Enable\000"
 1565      43544F52 
 1565      5F50574D 
 1565      5F456E61 
 1565      626C6500 
 1566              	.LASF43:
 1567 0302 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\EFFECTOR_PWM.c\000"
 1567      6E657261 
 1567      7465645F 
 1567      536F7572 
 1567      63655C50 
 1568              	.LASF19:
 1569 032a 45464645 		.ascii	"EFFECTOR_PWM_Start\000"
 1569      43544F52 
 1569      5F50574D 
 1569      5F537461 
 1569      727400
 1570              	.LASF36:
 1571 033d 45464645 		.ascii	"EFFECTOR_PWM_WriteControlRegister\000"
 1571      43544F52 
 1571      5F50574D 
 1571      5F577269 
 1571      7465436F 
 1572              	.LASF28:
 1573 035f 45464645 		.ascii	"EFFECTOR_PWM_WriteCompare1\000"
 1573      43544F52 
 1573      5F50574D 
 1573      5F577269 
 1573      7465436F 
 1574              	.LASF30:
 1575 037a 45464645 		.ascii	"EFFECTOR_PWM_WriteCompare2\000"
 1575      43544F52 
 1575      5F50574D 
 1575      5F577269 
 1575      7465436F 
 1576              	.LASF0:
 1577 0395 7369676E 		.ascii	"signed char\000"
 1577      65642063 
 1577      68617200 
 1578              	.LASF29:
 1579 03a1 636F6D70 		.ascii	"compare\000"
 1579      61726500 
 1580              	.LASF34:
 1581 03a9 45464645 		.ascii	"EFFECTOR_PWM_ReadStatusRegister\000"
 1581      43544F52 
 1581      5F50574D 
 1581      5F526561 
 1581      64537461 
 1582              	.LASF31:
 1583 03c9 45464645 		.ascii	"EFFECTOR_PWM_SetInterruptMode\000"
 1583      43544F52 
 1583      5F50574D 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccBK8CjN.s 			page 47


 1583      5F536574 
 1583      496E7465 
 1584              	.LASF22:
 1585 03e7 45464645 		.ascii	"EFFECTOR_PWM_Init\000"
 1585      43544F52 
 1585      5F50574D 
 1585      5F496E69 
 1585      7400
 1586              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

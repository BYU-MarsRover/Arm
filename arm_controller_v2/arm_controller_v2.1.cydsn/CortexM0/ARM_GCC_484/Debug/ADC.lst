ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,8,4
  24              		.comm	ADC_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 16
  29              	ADC_channelsConfig:
  30 0000 02000000 		.word	2
  31 0004 02000000 		.word	2
  32 0008 00000000 		.word	0
  33 000c 00000000 		.word	0
  34              		.section	.text.ADC_Start,"ax",%progbits
  35              		.align	2
  36              		.global	ADC_Start
  37              		.code	16
  38              		.thumb_func
  39              		.type	ADC_Start, %function
  40              	ADC_Start:
  41              	.LFB0:
  42              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 2


  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000002u, 0x00000002u, 0x00000000u, 0x000000
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  43              		.loc 1 64 0
  44              		.cfi_startproc
  45 0000 80B5     		push	{r7, lr}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 3


  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  51              		.loc 1 66 0
  52 0004 064B     		ldr	r3, .L3
  53 0006 1B78     		ldrb	r3, [r3]
  54 0008 002B     		cmp	r3, #0
  55 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  56              		.loc 1 68 0
  57 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  58              		.loc 1 69 0
  59 0010 034B     		ldr	r3, .L3
  60 0012 0122     		mov	r2, #1
  61 0014 1A70     		strb	r2, [r3]
  62              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  63              		.loc 1 71 0
  64 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  65              		.loc 1 72 0
  66 001a BD46     		mov	sp, r7
  67              		@ sp needed
  68 001c 80BD     		pop	{r7, pc}
  69              	.L4:
  70 001e C046     		.align	2
  71              	.L3:
  72 0020 00000000 		.word	ADC_initVar
  73              		.cfi_endproc
  74              	.LFE0:
  75              		.size	ADC_Start, .-ADC_Start
  76              		.section	.text.ADC_Init,"ax",%progbits
  77              		.align	2
  78              		.global	ADC_Init
  79              		.code	16
  80              		.thumb_func
  81              		.type	ADC_Init, %function
  82              	ADC_Init:
  83              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 4


  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  84              		.loc 1 95 0
  85              		.cfi_startproc
  86 0000 90B5     		push	{r4, r7, lr}
  87              		.cfi_def_cfa_offset 12
  88              		.cfi_offset 4, -12
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 85B0     		sub	sp, sp, #20
  92              		.cfi_def_cfa_offset 32
  93 0004 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 5


 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  95              		.loc 1 140 0
  96 0006 0E20     		mov	r0, #14
  97 0008 0321     		mov	r1, #3
  98 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  99              		.loc 1 141 0
 100 000e 604B     		ldr	r3, .L16
 101 0010 0E20     		mov	r0, #14
 102 0012 191C     		mov	r1, r3
 103 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 104              		.loc 1 145 0
 105 0018 5E4B     		ldr	r3, .L16+4
 106 001a 0F22     		mov	r2, #15
 107 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 108              		.loc 1 146 0
 109 001e 5E4B     		ldr	r3, .L16+8
 110 0020 5E4A     		ldr	r2, .L16+12
 111 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 112              		.loc 1 147 0
 113 0024 5E4B     		ldr	r3, .L16+16
 114 0026 5F4A     		ldr	r2, .L16+20
 115 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 116              		.loc 1 148 0
 117 002a 5F4B     		ldr	r3, .L16+24
 118 002c 5F4A     		ldr	r2, .L16+28
 119 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 120              		.loc 1 149 0
 121 0030 5F4B     		ldr	r3, .L16+32
 122 0032 8022     		mov	r2, #128
 123 0034 D205     		lsl	r2, r2, #23
 124 0036 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 125              		.loc 1 150 0
 126 0038 5E4B     		ldr	r3, .L16+36
 127 003a 5F4A     		ldr	r2, .L16+40
 128 003c 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 129              		.loc 1 151 0
 130 003e 5F4B     		ldr	r3, .L16+44
 131 0040 5D4A     		ldr	r2, .L16+40
 132 0042 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 6


 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 133              		.loc 1 155 0
 134 0044 5E4B     		ldr	r3, .L16+48
 135 0046 5E4A     		ldr	r2, .L16+48
 136 0048 1268     		ldr	r2, [r2]
 137 004a 8021     		mov	r1, #128
 138 004c 4902     		lsl	r1, r1, #9
 139 004e 0A43     		orr	r2, r1
 140 0050 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 141              		.loc 1 158 0
 142 0052 5C4B     		ldr	r3, .L16+52
 143 0054 5B4A     		ldr	r2, .L16+52
 144 0056 1268     		ldr	r2, [r2]
 145 0058 8021     		mov	r1, #128
 146 005a 4902     		lsl	r1, r1, #9
 147 005c 0A43     		orr	r2, r1
 148 005e 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 149              		.loc 1 162 0
 150 0060 594B     		ldr	r3, .L16+56
 151 0062 0022     		mov	r2, #0
 152 0064 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 153              		.loc 1 163 0
 154 0066 594B     		ldr	r3, .L16+60
 155 0068 0022     		mov	r2, #0
 156 006a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 157              		.loc 1 164 0
 158 006c 584B     		ldr	r3, .L16+64
 159 006e 0122     		mov	r2, #1
 160 0070 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 161              		.loc 1 167 0
 162 0072 584B     		ldr	r3, .L16+68
 163 0074 0222     		mov	r2, #2
 164 0076 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 165              		.loc 1 171 0
 166 0078 574B     		ldr	r3, .L16+72
 167 007a 1B68     		ldr	r3, [r3]
 168 007c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 169              		.loc 1 172 0
 170 007e 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 7


 171 0080 564B     		ldr	r3, .L16+76
 172 0082 1340     		and	r3, r2
 173 0084 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 174              		.loc 1 178 0
 175 0086 7B68     		ldr	r3, [r7, #4]
 176 0088 0122     		mov	r2, #1
 177 008a 1343     		orr	r3, r2
 178 008c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 179              		.loc 1 191 0
 180 008e 524B     		ldr	r3, .L16+72
 181 0090 7A68     		ldr	r2, [r7, #4]
 182 0092 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 183              		.loc 1 197 0
 184 0094 0023     		mov	r3, #0
 185 0096 FB60     		str	r3, [r7, #12]
 186 0098 73E0     		b	.L6
 187              	.L15:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 188              		.loc 1 199 0
 189 009a 514B     		ldr	r3, .L16+80
 190 009c FA68     		ldr	r2, [r7, #12]
 191 009e 9200     		lsl	r2, r2, #2
 192 00a0 D258     		ldr	r2, [r2, r3]
 193 00a2 DC23     		mov	r3, #220
 194 00a4 9B01     		lsl	r3, r3, #6
 195 00a6 1340     		and	r3, r2
 196 00a8 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 197              		.loc 1 201 0
 198 00aa 4E4A     		ldr	r2, .L16+84
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 8


 199 00ac FB68     		ldr	r3, [r7, #12]
 200 00ae D318     		add	r3, r2, r3
 201 00b0 1B78     		ldrb	r3, [r3]
 202 00b2 7A68     		ldr	r2, [r7, #4]
 203 00b4 1343     		orr	r3, r2
 204 00b6 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 205              		.loc 1 218 0
 206 00b8 FB68     		ldr	r3, [r7, #12]
 207 00ba 9B00     		lsl	r3, r3, #2
 208 00bc 4A4A     		ldr	r2, .L16+88
 209 00be 9B18     		add	r3, r3, r2
 210 00c0 7A68     		ldr	r2, [r7, #4]
 211 00c2 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 212              		.loc 1 220 0
 213 00c4 464B     		ldr	r3, .L16+80
 214 00c6 FA68     		ldr	r2, [r7, #12]
 215 00c8 9200     		lsl	r2, r2, #2
 216 00ca D258     		ldr	r2, [r2, r3]
 217 00cc 0123     		mov	r3, #1
 218 00ce 1340     		and	r3, r2
 219 00d0 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 220              		.loc 1 222 0
 221 00d2 3D4B     		ldr	r3, .L16+56
 222 00d4 3C4A     		ldr	r2, .L16+56
 223 00d6 1168     		ldr	r1, [r2]
 224 00d8 FA68     		ldr	r2, [r7, #12]
 225 00da 0120     		mov	r0, #1
 226 00dc 041C     		mov	r4, r0
 227 00de 9440     		lsl	r4, r4, r2
 228 00e0 221C     		mov	r2, r4
 229 00e2 92B2     		uxth	r2, r2
 230 00e4 0A43     		orr	r2, r1
 231 00e6 1A60     		str	r2, [r3]
 232              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 9


 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 233              		.loc 1 225 0
 234 00e8 3D4B     		ldr	r3, .L16+80
 235 00ea FA68     		ldr	r2, [r7, #12]
 236 00ec 9200     		lsl	r2, r2, #2
 237 00ee D258     		ldr	r2, [r2, r3]
 238 00f0 0223     		mov	r3, #2
 239 00f2 1340     		and	r3, r2
 240 00f4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 241              		.loc 1 227 0
 242 00f6 354B     		ldr	r3, .L16+60
 243 00f8 344A     		ldr	r2, .L16+60
 244 00fa 1168     		ldr	r1, [r2]
 245 00fc FA68     		ldr	r2, [r7, #12]
 246 00fe 0120     		mov	r0, #1
 247 0100 041C     		mov	r4, r0
 248 0102 9440     		lsl	r4, r4, r2
 249 0104 221C     		mov	r2, r4
 250 0106 92B2     		uxth	r2, r2
 251 0108 0A43     		orr	r2, r1
 252 010a 1A60     		str	r2, [r3]
 253              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 254              		.loc 1 247 0
 255 010c 344B     		ldr	r3, .L16+80
 256 010e FA68     		ldr	r2, [r7, #12]
 257 0110 9200     		lsl	r2, r2, #2
 258 0112 D258     		ldr	r2, [r2, r3]
 259 0114 8023     		mov	r3, #128
 260 0116 9B00     		lsl	r3, r3, #2
 261 0118 1340     		and	r3, r2
 262 011a 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 263              		.loc 1 249 0
 264 011c 8023     		mov	r3, #128
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 10


 265 011e 5B00     		lsl	r3, r3, #1
 266 0120 BB60     		str	r3, [r7, #8]
 267 0122 02E0     		b	.L10
 268              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 269              		.loc 1 253 0
 270 0124 8023     		mov	r3, #128
 271 0126 5B01     		lsl	r3, r3, #5
 272 0128 BB60     		str	r3, [r7, #8]
 273              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 274              		.loc 1 256 0
 275 012a 2D4B     		ldr	r3, .L16+80
 276 012c FA68     		ldr	r2, [r7, #12]
 277 012e 9200     		lsl	r2, r2, #2
 278 0130 D258     		ldr	r2, [r2, r3]
 279 0132 8023     		mov	r3, #128
 280 0134 5B00     		lsl	r3, r3, #1
 281 0136 1340     		and	r3, r2
 282 0138 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 283              		.loc 1 263 0
 284 013a 2C4B     		ldr	r3, .L16+92
 285 013c FA68     		ldr	r2, [r7, #12]
 286 013e 5200     		lsl	r2, r2, #1
 287 0140 0021     		mov	r1, #0
 288 0142 D152     		strh	r1, [r2, r3]
 289 0144 09E0     		b	.L12
 290              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 291              		.loc 1 270 0
 292 0146 BB68     		ldr	r3, [r7, #8]
 293 0148 002B     		cmp	r3, #0
 294 014a 00DA     		bge	.L13
 295 014c 0133     		add	r3, r3, #1
 296              	.L13:
 297 014e 5B10     		asr	r3, r3, #1
 298 0150 99B2     		uxth	r1, r3
 299 0152 264B     		ldr	r3, .L16+92
 300 0154 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 11


 301 0156 5200     		lsl	r2, r2, #1
 302 0158 D152     		strh	r1, [r2, r3]
 303              	.L12:
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 304              		.loc 1 276 0
 305 015a BB68     		ldr	r3, [r7, #8]
 306 015c 244A     		ldr	r2, .L16+96
 307 015e 5343     		mul	r3, r2
 308 0160 8022     		mov	r2, #128
 309 0162 D200     		lsl	r2, r2, #3
 310 0164 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 311              		.loc 1 277 0
 312 0166 002B     		cmp	r3, #0
 313 0168 01DA     		bge	.L14
 314 016a 224C     		ldr	r4, .L16+100
 315 016c 1B19     		add	r3, r3, r4
 316              	.L14:
 317 016e DB12     		asr	r3, r3, #11
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 318              		.loc 1 276 0
 319 0170 9BB2     		uxth	r3, r3
 320 0172 19B2     		sxth	r1, r3
 321 0174 204B     		ldr	r3, .L16+104
 322 0176 FA68     		ldr	r2, [r7, #12]
 323 0178 9200     		lsl	r2, r2, #2
 324 017a D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 325              		.loc 1 197 0
 326 017c FB68     		ldr	r3, [r7, #12]
 327 017e 0133     		add	r3, r3, #1
 328 0180 FB60     		str	r3, [r7, #12]
 329              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 330              		.loc 1 197 0 is_stmt 0 discriminator 1
 331 0182 FB68     		ldr	r3, [r7, #12]
 332 0184 032B     		cmp	r3, #3
 333 0186 88D9     		bls	.L15
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 334              		.loc 1 279 0 is_stmt 1
 335 0188 BD46     		mov	sp, r7
 336 018a 05B0     		add	sp, sp, #20
 337              		@ sp needed
 338 018c 90BD     		pop	{r4, r7, pc}
 339              	.L17:
 340 018e C046     		.align	2
 341              	.L16:
 342 0190 00000000 		.word	ADC_ISR
 343 0194 20001A40 		.word	1075445792
 344 0198 00001A40 		.word	1075445760
 345 019c 40200013 		.word	318775360
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 12


 346 01a0 04001A40 		.word	1075445764
 347 01a4 84000080 		.word	-2147483516
 348 01a8 18001A40 		.word	1075445784
 349 01ac 0000FF07 		.word	134152192
 350 01b0 1C001A40 		.word	1075445788
 351 01b4 10001A40 		.word	1075445776
 352 01b8 02000200 		.word	131074
 353 01bc 14001A40 		.word	1075445780
 354 01c0 00031A40 		.word	1075446528
 355 01c4 40031A40 		.word	1075446592
 356 01c8 28021A40 		.word	1075446312
 357 01cc 38021A40 		.word	1075446328
 358 01d0 18021A40 		.word	1075446296
 359 01d4 000F1A40 		.word	1075449600
 360 01d8 30001A40 		.word	1075445808
 361 01dc FFFFFFDF 		.word	-536870913
 362 01e0 00000000 		.word	ADC_channelsConfig
 363 01e4 10000000 		.word	ADC_InputsPlacement.4717
 364 01e8 80001A40 		.word	1075445888
 365 01ec 00000000 		.word	ADC_offset
 366 01f0 10270000 		.word	10000
 367 01f4 FF070000 		.word	2047
 368 01f8 00000000 		.word	ADC_countsPer10Volt
 369              		.cfi_endproc
 370              	.LFE1:
 371              		.size	ADC_Init, .-ADC_Init
 372              		.section	.text.ADC_Enable,"ax",%progbits
 373              		.align	2
 374              		.global	ADC_Enable
 375              		.code	16
 376              		.thumb_func
 377              		.type	ADC_Enable, %function
 378              	ADC_Enable:
 379              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 380              		.loc 1 296 0
 381              		.cfi_startproc
 382 0000 80B5     		push	{r7, lr}
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 13


 386 0002 00AF     		add	r7, sp, #0
 387              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 388              		.loc 1 297 0
 389 0004 074B     		ldr	r3, .L20
 390 0006 1B68     		ldr	r3, [r3]
 391 0008 002B     		cmp	r3, #0
 392 000a 09DB     		blt	.L18
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 393              		.loc 1 307 0
 394 000c 054B     		ldr	r3, .L20
 395 000e 054A     		ldr	r2, .L20
 396 0010 1268     		ldr	r2, [r2]
 397 0012 8021     		mov	r1, #128
 398 0014 0906     		lsl	r1, r1, #24
 399 0016 0A43     		orr	r2, r1
 400 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 401              		.loc 1 310 0
 402 001a 0A20     		mov	r0, #10
 403 001c FFF7FEFF 		bl	CyDelayUs
 404              	.L18:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 405              		.loc 1 312 0
 406 0020 BD46     		mov	sp, r7
 407              		@ sp needed
 408 0022 80BD     		pop	{r7, pc}
 409              	.L21:
 410              		.align	2
 411              	.L20:
 412 0024 00001A40 		.word	1075445760
 413              		.cfi_endproc
 414              	.LFE2:
 415              		.size	ADC_Enable, .-ADC_Enable
 416              		.section	.text.ADC_Stop,"ax",%progbits
 417              		.align	2
 418              		.global	ADC_Stop
 419              		.code	16
 420              		.thumb_func
 421              		.type	ADC_Stop, %function
 422              	ADC_Stop:
 423              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 14


 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 424              		.loc 1 331 0
 425              		.cfi_startproc
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 432              		.loc 1 332 0
 433 0004 034B     		ldr	r3, .L23
 434 0006 034A     		ldr	r2, .L23
 435 0008 1268     		ldr	r2, [r2]
 436 000a 5200     		lsl	r2, r2, #1
 437 000c 5208     		lsr	r2, r2, #1
 438 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 439              		.loc 1 333 0
 440 0010 BD46     		mov	sp, r7
 441              		@ sp needed
 442 0012 80BD     		pop	{r7, pc}
 443              	.L24:
 444              		.align	2
 445              	.L23:
 446 0014 00001A40 		.word	1075445760
 447              		.cfi_endproc
 448              	.LFE3:
 449              		.size	ADC_Stop, .-ADC_Stop
 450              		.section	.text.ADC_StartConvert,"ax",%progbits
 451              		.align	2
 452              		.global	ADC_StartConvert
 453              		.code	16
 454              		.thumb_func
 455              		.type	ADC_StartConvert, %function
 456              	ADC_StartConvert:
 457              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 15


 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 458              		.loc 1 357 0
 459              		.cfi_startproc
 460 0000 80B5     		push	{r7, lr}
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 00AF     		add	r7, sp, #0
 465              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 466              		.loc 1 359 0
 467 0004 044B     		ldr	r3, .L26
 468 0006 044A     		ldr	r2, .L26
 469 0008 1268     		ldr	r2, [r2]
 470 000a 8021     		mov	r1, #128
 471 000c 4902     		lsl	r1, r1, #9
 472 000e 0A43     		orr	r2, r1
 473 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 474              		.loc 1 364 0
 475 0012 BD46     		mov	sp, r7
 476              		@ sp needed
 477 0014 80BD     		pop	{r7, pc}
 478              	.L27:
 479 0016 C046     		.align	2
 480              	.L26:
 481 0018 04001A40 		.word	1075445764
 482              		.cfi_endproc
 483              	.LFE4:
 484              		.size	ADC_StartConvert, .-ADC_StartConvert
 485              		.section	.text.ADC_StopConvert,"ax",%progbits
 486              		.align	2
 487              		.global	ADC_StopConvert
 488              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 16


 489              		.thumb_func
 490              		.type	ADC_StopConvert, %function
 491              	ADC_StopConvert:
 492              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 493              		.loc 1 382 0
 494              		.cfi_startproc
 495 0000 80B5     		push	{r7, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 00AF     		add	r7, sp, #0
 500              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 501              		.loc 1 384 0
 502 0004 034B     		ldr	r3, .L29
 503 0006 034A     		ldr	r2, .L29
 504 0008 1168     		ldr	r1, [r2]
 505 000a 034A     		ldr	r2, .L29+4
 506 000c 0A40     		and	r2, r1
 507 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 508              		.loc 1 386 0
 509 0010 BD46     		mov	sp, r7
 510              		@ sp needed
 511 0012 80BD     		pop	{r7, pc}
 512              	.L30:
 513              		.align	2
 514              	.L29:
 515 0014 04001A40 		.word	1075445764
 516 0018 FFFFFEFF 		.word	-65537
 517              		.cfi_endproc
 518              	.LFE5:
 519              		.size	ADC_StopConvert, .-ADC_StopConvert
 520              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 521              		.align	2
 522              		.global	ADC_IsEndConversion
 523              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 17


 524              		.thumb_func
 525              		.type	ADC_IsEndConversion, %function
 526              	ADC_IsEndConversion:
 527              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 528              		.loc 1 416 0
 529              		.cfi_startproc
 530 0000 80B5     		push	{r7, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 84B0     		sub	sp, sp, #16
 535              		.cfi_def_cfa_offset 24
 536 0004 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 538 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 539              		.loc 1 417 0
 540 0008 0023     		mov	r3, #0
 541 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 542              		.loc 1 419 0
 543 000c 7A68     		ldr	r2, [r7, #4]
 544 000e 0323     		mov	r3, #3
 545 0010 1340     		and	r3, r2
 546 0012 11D0     		beq	.L32
 547              	.L34:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 18


 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 548              		.loc 1 423 0 discriminator 1
 549 0014 0B4B     		ldr	r3, .L36
 550 0016 1A68     		ldr	r2, [r3]
 551 0018 0123     		mov	r3, #1
 552 001a 1340     		and	r3, r2
 553 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 554              		.loc 1 424 0 discriminator 1
 555 001e FB68     		ldr	r3, [r7, #12]
 556 0020 002B     		cmp	r3, #0
 557 0022 03D1     		bne	.L33
 558 0024 7A68     		ldr	r2, [r7, #4]
 559 0026 0223     		mov	r3, #2
 560 0028 1340     		and	r3, r2
 561 002a F3D1     		bne	.L34
 562              	.L33:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 563              		.loc 1 426 0
 564 002c FB68     		ldr	r3, [r7, #12]
 565 002e 002B     		cmp	r3, #0
 566 0030 02D0     		beq	.L32
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 567              		.loc 1 429 0
 568 0032 044B     		ldr	r3, .L36
 569 0034 0122     		mov	r2, #1
 570 0036 1A60     		str	r2, [r3]
 571              	.L32:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 572              		.loc 1 450 0
 573 0038 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 19


 451:.\Generated_Source\PSoC4/ADC.c **** }
 574              		.loc 1 451 0
 575 003a 181C     		mov	r0, r3
 576 003c BD46     		mov	sp, r7
 577 003e 04B0     		add	sp, sp, #16
 578              		@ sp needed
 579 0040 80BD     		pop	{r7, pc}
 580              	.L37:
 581 0042 C046     		.align	2
 582              	.L36:
 583 0044 10021A40 		.word	1075446288
 584              		.cfi_endproc
 585              	.LFE6:
 586              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 587              		.section	.text.ADC_GetResult16,"ax",%progbits
 588              		.align	2
 589              		.global	ADC_GetResult16
 590              		.code	16
 591              		.thumb_func
 592              		.type	ADC_GetResult16, %function
 593              	ADC_GetResult16:
 594              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 595              		.loc 1 470 0
 596              		.cfi_startproc
 597 0000 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0002 84B0     		sub	sp, sp, #16
 602              		.cfi_def_cfa_offset 24
 603 0004 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 606              		.loc 1 474 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 20


 607 0008 7B68     		ldr	r3, [r7, #4]
 608 000a 032B     		cmp	r3, #3
 609 000c 02D9     		bls	.L39
 610              		.loc 1 474 0 is_stmt 0 discriminator 1
 611 000e 0020     		mov	r0, #0
 612 0010 FFF7FEFF 		bl	CyHalt
 613              	.L39:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 614              		.loc 1 476 0 is_stmt 1
 615 0014 7B68     		ldr	r3, [r7, #4]
 616 0016 032B     		cmp	r3, #3
 617 0018 08D8     		bhi	.L40
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 618              		.loc 1 478 0
 619 001a 7B68     		ldr	r3, [r7, #4]
 620 001c 9B00     		lsl	r3, r3, #2
 621 001e 084A     		ldr	r2, .L43
 622 0020 9B18     		add	r3, r3, r2
 623 0022 1B68     		ldr	r3, [r3]
 624 0024 1B04     		lsl	r3, r3, #16
 625 0026 1B0C     		lsr	r3, r3, #16
 626 0028 FB60     		str	r3, [r7, #12]
 627 002a 01E0     		b	.L41
 628              	.L40:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 629              		.loc 1 486 0
 630 002c 0023     		mov	r3, #0
 631 002e FB60     		str	r3, [r7, #12]
 632              	.L41:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 633              		.loc 1 490 0
 634 0030 FB68     		ldr	r3, [r7, #12]
 635 0032 9BB2     		uxth	r3, r3
 636 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 637              		.loc 1 491 0
 638 0036 181C     		mov	r0, r3
 639 0038 BD46     		mov	sp, r7
 640 003a 04B0     		add	sp, sp, #16
 641              		@ sp needed
 642 003c 80BD     		pop	{r7, pc}
 643              	.L44:
 644 003e C046     		.align	2
 645              	.L43:
 646 0040 80011A40 		.word	1075446144
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 21


 647              		.cfi_endproc
 648              	.LFE7:
 649              		.size	ADC_GetResult16, .-ADC_GetResult16
 650              		.section	.text.ADC_SetChanMask,"ax",%progbits
 651              		.align	2
 652              		.global	ADC_SetChanMask
 653              		.code	16
 654              		.thumb_func
 655              		.type	ADC_SetChanMask, %function
 656              	ADC_SetChanMask:
 657              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 658              		.loc 1 515 0
 659              		.cfi_startproc
 660 0000 80B5     		push	{r7, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 82B0     		sub	sp, sp, #8
 665              		.cfi_def_cfa_offset 16
 666 0004 00AF     		add	r7, sp, #0
 667              		.cfi_def_cfa_register 7
 668 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 669              		.loc 1 516 0
 670 0008 034B     		ldr	r3, .L46
 671 000a 7968     		ldr	r1, [r7, #4]
 672 000c 0F22     		mov	r2, #15
 673 000e 0A40     		and	r2, r1
 674 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 675              		.loc 1 517 0
 676 0012 BD46     		mov	sp, r7
 677 0014 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 22


 678              		@ sp needed
 679 0016 80BD     		pop	{r7, pc}
 680              	.L47:
 681              		.align	2
 682              	.L46:
 683 0018 20001A40 		.word	1075445792
 684              		.cfi_endproc
 685              	.LFE8:
 686              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 687              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 688              		.align	2
 689              		.global	ADC_SetLowLimit
 690              		.code	16
 691              		.thumb_func
 692              		.type	ADC_SetLowLimit, %function
 693              	ADC_SetLowLimit:
 694              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 23


 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 695              		.loc 1 559 0
 696              		.cfi_startproc
 697 0000 80B5     		push	{r7, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 82B0     		sub	sp, sp, #8
 702              		.cfi_def_cfa_offset 16
 703 0004 00AF     		add	r7, sp, #0
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 706              		.loc 1 560 0
 707 0008 084B     		ldr	r3, .L49
 708 000a 084A     		ldr	r2, .L49
 709 000c 1268     		ldr	r2, [r2]
 710 000e 120C     		lsr	r2, r2, #16
 711 0010 1204     		lsl	r2, r2, #16
 712 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 713              		.loc 1 561 0
 714 0014 054B     		ldr	r3, .L49
 715 0016 054A     		ldr	r2, .L49
 716 0018 1168     		ldr	r1, [r2]
 717 001a 7A68     		ldr	r2, [r7, #4]
 718 001c 1204     		lsl	r2, r2, #16
 719 001e 120C     		lsr	r2, r2, #16
 720 0020 0A43     		orr	r2, r1
 721 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 722              		.loc 1 562 0
 723 0024 BD46     		mov	sp, r7
 724 0026 02B0     		add	sp, sp, #8
 725              		@ sp needed
 726 0028 80BD     		pop	{r7, pc}
 727              	.L50:
 728 002a C046     		.align	2
 729              	.L49:
 730 002c 18001A40 		.word	1075445784
 731              		.cfi_endproc
 732              	.LFE9:
 733              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 734              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 735              		.align	2
 736              		.global	ADC_SetHighLimit
 737              		.code	16
 738              		.thumb_func
 739              		.type	ADC_SetHighLimit, %function
 740              	ADC_SetHighLimit:
 741              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 24


 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 742              		.loc 1 580 0
 743              		.cfi_startproc
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 82B0     		sub	sp, sp, #8
 749              		.cfi_def_cfa_offset 16
 750 0004 00AF     		add	r7, sp, #0
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 753              		.loc 1 581 0
 754 0008 074B     		ldr	r3, .L52
 755 000a 074A     		ldr	r2, .L52
 756 000c 1268     		ldr	r2, [r2]
 757 000e 1204     		lsl	r2, r2, #16
 758 0010 120C     		lsr	r2, r2, #16
 759 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 760              		.loc 1 582 0
 761 0014 044B     		ldr	r3, .L52
 762 0016 044A     		ldr	r2, .L52
 763 0018 1168     		ldr	r1, [r2]
 764 001a 7A68     		ldr	r2, [r7, #4]
 765 001c 1204     		lsl	r2, r2, #16
 766 001e 0A43     		orr	r2, r1
 767 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 768              		.loc 1 583 0
 769 0022 BD46     		mov	sp, r7
 770 0024 02B0     		add	sp, sp, #8
 771              		@ sp needed
 772 0026 80BD     		pop	{r7, pc}
 773              	.L53:
 774              		.align	2
 775              	.L52:
 776 0028 18001A40 		.word	1075445784
 777              		.cfi_endproc
 778              	.LFE10:
 779              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 780              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 781              		.align	2
 782              		.global	ADC_SetLimitMask
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 25


 783              		.code	16
 784              		.thumb_func
 785              		.type	ADC_SetLimitMask, %function
 786              	ADC_SetLimitMask:
 787              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 788              		.loc 1 604 0
 789              		.cfi_startproc
 790 0000 80B5     		push	{r7, lr}
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 7, -8
 793              		.cfi_offset 14, -4
 794 0002 82B0     		sub	sp, sp, #8
 795              		.cfi_def_cfa_offset 16
 796 0004 00AF     		add	r7, sp, #0
 797              		.cfi_def_cfa_register 7
 798 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 799              		.loc 1 605 0
 800 0008 034B     		ldr	r3, .L55
 801 000a 7968     		ldr	r1, [r7, #4]
 802 000c 0F22     		mov	r2, #15
 803 000e 0A40     		and	r2, r1
 804 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 805              		.loc 1 606 0
 806 0012 BD46     		mov	sp, r7
 807 0014 02B0     		add	sp, sp, #8
 808              		@ sp needed
 809 0016 80BD     		pop	{r7, pc}
 810              	.L56:
 811              		.align	2
 812              	.L55:
 813 0018 38021A40 		.word	1075446328
 814              		.cfi_endproc
 815              	.LFE11:
 816              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 26


 817              		.section	.text.ADC_SetSatMask,"ax",%progbits
 818              		.align	2
 819              		.global	ADC_SetSatMask
 820              		.code	16
 821              		.thumb_func
 822              		.type	ADC_SetSatMask, %function
 823              	ADC_SetSatMask:
 824              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 825              		.loc 1 627 0
 826              		.cfi_startproc
 827 0000 80B5     		push	{r7, lr}
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 831 0002 82B0     		sub	sp, sp, #8
 832              		.cfi_def_cfa_offset 16
 833 0004 00AF     		add	r7, sp, #0
 834              		.cfi_def_cfa_register 7
 835 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 836              		.loc 1 628 0
 837 0008 034B     		ldr	r3, .L58
 838 000a 7968     		ldr	r1, [r7, #4]
 839 000c 0F22     		mov	r2, #15
 840 000e 0A40     		and	r2, r1
 841 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 842              		.loc 1 629 0
 843 0012 BD46     		mov	sp, r7
 844 0014 02B0     		add	sp, sp, #8
 845              		@ sp needed
 846 0016 80BD     		pop	{r7, pc}
 847              	.L59:
 848              		.align	2
 849              	.L58:
 850 0018 28021A40 		.word	1075446312
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 27


 851              		.cfi_endproc
 852              	.LFE12:
 853              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 854              		.section	.text.ADC_SetOffset,"ax",%progbits
 855              		.align	2
 856              		.global	ADC_SetOffset
 857              		.code	16
 858              		.thumb_func
 859              		.type	ADC_SetOffset, %function
 860              	ADC_SetOffset:
 861              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 862              		.loc 1 655 0
 863              		.cfi_startproc
 864 0000 80B5     		push	{r7, lr}
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 7, -8
 867              		.cfi_offset 14, -4
 868 0002 82B0     		sub	sp, sp, #8
 869              		.cfi_def_cfa_offset 16
 870 0004 00AF     		add	r7, sp, #0
 871              		.cfi_def_cfa_register 7
 872 0006 7860     		str	r0, [r7, #4]
 873 0008 0A1C     		mov	r2, r1
 874 000a BB1C     		add	r3, r7, #2
 875 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 876              		.loc 1 657 0
 877 000e 7B68     		ldr	r3, [r7, #4]
 878 0010 032B     		cmp	r3, #3
 879 0012 02D9     		bls	.L61
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 28


 880              		.loc 1 657 0 is_stmt 0 discriminator 1
 881 0014 0020     		mov	r0, #0
 882 0016 FFF7FEFF 		bl	CyHalt
 883              	.L61:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 884              		.loc 1 659 0 is_stmt 1
 885 001a 044B     		ldr	r3, .L62
 886 001c 7A68     		ldr	r2, [r7, #4]
 887 001e 5200     		lsl	r2, r2, #1
 888 0020 B91C     		add	r1, r7, #2
 889 0022 0988     		ldrh	r1, [r1]
 890 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 891              		.loc 1 660 0
 892 0026 BD46     		mov	sp, r7
 893 0028 02B0     		add	sp, sp, #8
 894              		@ sp needed
 895 002a 80BD     		pop	{r7, pc}
 896              	.L63:
 897              		.align	2
 898              	.L62:
 899 002c 00000000 		.word	ADC_offset
 900              		.cfi_endproc
 901              	.LFE13:
 902              		.size	ADC_SetOffset, .-ADC_SetOffset
 903              		.section	.text.ADC_SetGain,"ax",%progbits
 904              		.align	2
 905              		.global	ADC_SetGain
 906              		.code	16
 907              		.thumb_func
 908              		.type	ADC_SetGain, %function
 909              	ADC_SetGain:
 910              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 29


 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 911              		.loc 1 689 0
 912              		.cfi_startproc
 913 0000 80B5     		push	{r7, lr}
 914              		.cfi_def_cfa_offset 8
 915              		.cfi_offset 7, -8
 916              		.cfi_offset 14, -4
 917 0002 82B0     		sub	sp, sp, #8
 918              		.cfi_def_cfa_offset 16
 919 0004 00AF     		add	r7, sp, #0
 920              		.cfi_def_cfa_register 7
 921 0006 7860     		str	r0, [r7, #4]
 922 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 923              		.loc 1 691 0
 924 000a 7B68     		ldr	r3, [r7, #4]
 925 000c 032B     		cmp	r3, #3
 926 000e 02D9     		bls	.L65
 927              		.loc 1 691 0 is_stmt 0 discriminator 1
 928 0010 0020     		mov	r0, #0
 929 0012 FFF7FEFF 		bl	CyHalt
 930              	.L65:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 931              		.loc 1 693 0 is_stmt 1
 932 0016 044B     		ldr	r3, .L66
 933 0018 7A68     		ldr	r2, [r7, #4]
 934 001a 9200     		lsl	r2, r2, #2
 935 001c 3968     		ldr	r1, [r7]
 936 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 937              		.loc 1 694 0
 938 0020 BD46     		mov	sp, r7
 939 0022 02B0     		add	sp, sp, #8
 940              		@ sp needed
 941 0024 80BD     		pop	{r7, pc}
 942              	.L67:
 943 0026 C046     		.align	2
 944              	.L66:
 945 0028 00000000 		.word	ADC_countsPer10Volt
 946              		.cfi_endproc
 947              	.LFE14:
 948              		.size	ADC_SetGain, .-ADC_SetGain
 949              		.global	__aeabi_idiv
 950              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 951              		.align	2
 952              		.global	ADC_CountsTo_mVolts
 953              		.code	16
 954              		.thumb_func
 955              		.type	ADC_CountsTo_mVolts, %function
 956              	ADC_CountsTo_mVolts:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 30


 957              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 958              		.loc 1 722 0
 959              		.cfi_startproc
 960 0000 80B5     		push	{r7, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 84B0     		sub	sp, sp, #16
 965              		.cfi_def_cfa_offset 24
 966 0004 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0006 7860     		str	r0, [r7, #4]
 969 0008 0A1C     		mov	r2, r1
 970 000a BB1C     		add	r3, r7, #2
 971 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 972              		.loc 1 726 0
 973 000e 7B68     		ldr	r3, [r7, #4]
 974 0010 032B     		cmp	r3, #3
 975 0012 02D9     		bls	.L69
 976              		.loc 1 726 0 is_stmt 0 discriminator 1
 977 0014 0020     		mov	r0, #0
 978 0016 FFF7FEFF 		bl	CyHalt
 979              	.L69:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 31


 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 980              		.loc 1 737 0 is_stmt 1
 981 001a BB1C     		add	r3, r7, #2
 982 001c 1A88     		ldrh	r2, [r3]
 983 001e 1E4B     		ldr	r3, .L75
 984 0020 7968     		ldr	r1, [r7, #4]
 985 0022 4900     		lsl	r1, r1, #1
 986 0024 CB5A     		ldrh	r3, [r1, r3]
 987 0026 9BB2     		uxth	r3, r3
 988 0028 9BB2     		uxth	r3, r3
 989 002a D31A     		sub	r3, r2, r3
 990 002c 9AB2     		uxth	r2, r3
 991 002e BB1C     		add	r3, r7, #2
 992 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 993              		.loc 1 739 0
 994 0032 BB1C     		add	r3, r7, #2
 995 0034 0021     		mov	r1, #0
 996 0036 5B5E     		ldrsh	r3, [r3, r1]
 997 0038 184A     		ldr	r2, .L75+4
 998 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 999              		.loc 1 740 0
 1000 003c BB1C     		add	r3, r7, #2
 1001 003e 0021     		mov	r1, #0
 1002 0040 5B5E     		ldrsh	r3, [r3, r1]
 1003 0042 002B     		cmp	r3, #0
 1004 0044 08DD     		ble	.L70
 1005              		.loc 1 740 0 is_stmt 0 discriminator 1
 1006 0046 164B     		ldr	r3, .L75+8
 1007 0048 7968     		ldr	r1, [r7, #4]
 1008 004a 8900     		lsl	r1, r1, #2
 1009 004c CB58     		ldr	r3, [r1, r3]
 1010 004e 002B     		cmp	r3, #0
 1011 0050 00DA     		bge	.L71
 1012 0052 0133     		add	r3, r3, #1
 1013              	.L71:
 1014 0054 5B10     		asr	r3, r3, #1
 1015 0056 08E0     		b	.L72
 1016              	.L70:
 1017              		.loc 1 740 0 discriminator 2
 1018 0058 114B     		ldr	r3, .L75+8
 1019 005a 7968     		ldr	r1, [r7, #4]
 1020 005c 8900     		lsl	r1, r1, #2
 1021 005e CB58     		ldr	r3, [r1, r3]
 1022 0060 002B     		cmp	r3, #0
 1023 0062 00DA     		bge	.L73
 1024 0064 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 32


 1025              	.L73:
 1026 0066 5B10     		asr	r3, r3, #1
 1027 0068 5B42     		neg	r3, r3
 1028              	.L72:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1029              		.loc 1 739 0 is_stmt 1
 1030 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1031              		.loc 1 741 0
 1032 006c 0C4B     		ldr	r3, .L75+8
 1033 006e 7968     		ldr	r1, [r7, #4]
 1034 0070 8900     		lsl	r1, r1, #2
 1035 0072 CB58     		ldr	r3, [r1, r3]
 1036 0074 101C     		mov	r0, r2
 1037 0076 191C     		mov	r1, r3
 1038 0078 FFF7FEFF 		bl	__aeabi_idiv
 1039 007c 031C     		mov	r3, r0
 1040 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1041              		.loc 1 739 0
 1042 0080 3B1C     		mov	r3, r7
 1043 0082 0E33     		add	r3, r3, #14
 1044 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1045              		.loc 1 743 0
 1046 0086 3B1C     		mov	r3, r7
 1047 0088 0E33     		add	r3, r3, #14
 1048 008a 1B88     		ldrh	r3, [r3]
 1049 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1050              		.loc 1 744 0
 1051 008e 181C     		mov	r0, r3
 1052 0090 BD46     		mov	sp, r7
 1053 0092 04B0     		add	sp, sp, #16
 1054              		@ sp needed
 1055 0094 80BD     		pop	{r7, pc}
 1056              	.L76:
 1057 0096 C046     		.align	2
 1058              	.L75:
 1059 0098 00000000 		.word	ADC_offset
 1060 009c 10270000 		.word	10000
 1061 00a0 00000000 		.word	ADC_countsPer10Volt
 1062              		.cfi_endproc
 1063              	.LFE15:
 1064              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1065              		.global	__aeabi_lmul
 1066              		.global	__aeabi_ldivmod
 1067              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1068              		.align	2
 1069              		.global	ADC_CountsTo_uVolts
 1070              		.code	16
 1071              		.thumb_func
 1072              		.type	ADC_CountsTo_uVolts, %function
 1073              	ADC_CountsTo_uVolts:
 1074              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 33


 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1075              		.loc 1 776 0
 1076              		.cfi_startproc
 1077 0000 B0B5     		push	{r4, r5, r7, lr}
 1078              		.cfi_def_cfa_offset 16
 1079              		.cfi_offset 4, -16
 1080              		.cfi_offset 5, -12
 1081              		.cfi_offset 7, -8
 1082              		.cfi_offset 14, -4
 1083 0002 86B0     		sub	sp, sp, #24
 1084              		.cfi_def_cfa_offset 40
 1085 0004 00AF     		add	r7, sp, #0
 1086              		.cfi_def_cfa_register 7
 1087 0006 F860     		str	r0, [r7, #12]
 1088 0008 0A1C     		mov	r2, r1
 1089 000a 3B1C     		mov	r3, r7
 1090 000c 0A33     		add	r3, r3, #10
 1091 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1092              		.loc 1 780 0
 1093 0010 FB68     		ldr	r3, [r7, #12]
 1094 0012 032B     		cmp	r3, #3
 1095 0014 02D9     		bls	.L78
 1096              		.loc 1 780 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 34


 1097 0016 0020     		mov	r0, #0
 1098 0018 FFF7FEFF 		bl	CyHalt
 1099              	.L78:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1100              		.loc 1 791 0 is_stmt 1
 1101 001c 3B1C     		mov	r3, r7
 1102 001e 0A33     		add	r3, r3, #10
 1103 0020 1A88     		ldrh	r2, [r3]
 1104 0022 1B4B     		ldr	r3, .L80+8
 1105 0024 F968     		ldr	r1, [r7, #12]
 1106 0026 4900     		lsl	r1, r1, #1
 1107 0028 CB5A     		ldrh	r3, [r1, r3]
 1108 002a 9BB2     		uxth	r3, r3
 1109 002c 9BB2     		uxth	r3, r3
 1110 002e D31A     		sub	r3, r2, r3
 1111 0030 9AB2     		uxth	r2, r3
 1112 0032 3B1C     		mov	r3, r7
 1113 0034 0A33     		add	r3, r3, #10
 1114 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1115              		.loc 1 793 0
 1116 0038 3B1C     		mov	r3, r7
 1117 003a 0A33     		add	r3, r3, #10
 1118 003c 1B88     		ldrh	r3, [r3]
 1119 003e 1BB2     		sxth	r3, r3
 1120 0040 3B60     		str	r3, [r7]
 1121 0042 DB17     		asr	r3, r3, #31
 1122 0044 7B60     		str	r3, [r7, #4]
 1123 0046 3868     		ldr	r0, [r7]
 1124 0048 7968     		ldr	r1, [r7, #4]
 1125 004a 104B     		ldr	r3, .L80+4
 1126 004c 0E4A     		ldr	r2, .L80
 1127 004e FFF7FEFF 		bl	__aeabi_lmul
 1128 0052 021C     		mov	r2, r0
 1129 0054 0B1C     		mov	r3, r1
 1130 0056 0F49     		ldr	r1, .L80+12
 1131 0058 F868     		ldr	r0, [r7, #12]
 1132 005a 8000     		lsl	r0, r0, #2
 1133 005c 4158     		ldr	r1, [r0, r1]
 1134 005e 0C1C     		mov	r4, r1
 1135 0060 C917     		asr	r1, r1, #31
 1136 0062 0D1C     		mov	r5, r1
 1137 0064 101C     		mov	r0, r2
 1138 0066 191C     		mov	r1, r3
 1139 0068 221C     		mov	r2, r4
 1140 006a 2B1C     		mov	r3, r5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 35


 1141 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1142 0070 031C     		mov	r3, r0
 1143 0072 0C1C     		mov	r4, r1
 1144 0074 3B61     		str	r3, [r7, #16]
 1145 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1146              		.loc 1 795 0
 1147 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1148              		.loc 1 796 0
 1149 007a 181C     		mov	r0, r3
 1150 007c BD46     		mov	sp, r7
 1151 007e 06B0     		add	sp, sp, #24
 1152              		@ sp needed
 1153 0080 B0BD     		pop	{r4, r5, r7, pc}
 1154              	.L81:
 1155 0082 C046C046 		.align	3
 1155      C046
 1156              	.L80:
 1157 0088 80969800 		.word	10000000
 1158 008c 00000000 		.word	0
 1159 0090 00000000 		.word	ADC_offset
 1160 0094 00000000 		.word	ADC_countsPer10Volt
 1161              		.cfi_endproc
 1162              	.LFE16:
 1163              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1164              		.global	__aeabi_i2f
 1165              		.global	__aeabi_fmul
 1166              		.global	__aeabi_fdiv
 1167              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1168              		.align	2
 1169              		.global	ADC_CountsTo_Volts
 1170              		.code	16
 1171              		.thumb_func
 1172              		.type	ADC_CountsTo_Volts, %function
 1173              	ADC_CountsTo_Volts:
 1174              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 36


 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1175              		.loc 1 821 0
 1176              		.cfi_startproc
 1177 0000 90B5     		push	{r4, r7, lr}
 1178              		.cfi_def_cfa_offset 12
 1179              		.cfi_offset 4, -12
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 85B0     		sub	sp, sp, #20
 1183              		.cfi_def_cfa_offset 32
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 1186 0006 7860     		str	r0, [r7, #4]
 1187 0008 0A1C     		mov	r2, r1
 1188 000a BB1C     		add	r3, r7, #2
 1189 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1190              		.loc 1 825 0
 1191 000e 7B68     		ldr	r3, [r7, #4]
 1192 0010 032B     		cmp	r3, #3
 1193 0012 02D9     		bls	.L83
 1194              		.loc 1 825 0 is_stmt 0 discriminator 1
 1195 0014 0020     		mov	r0, #0
 1196 0016 FFF7FEFF 		bl	CyHalt
 1197              	.L83:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1198              		.loc 1 836 0 is_stmt 1
 1199 001a BB1C     		add	r3, r7, #2
 1200 001c 1A88     		ldrh	r2, [r3]
 1201 001e 154B     		ldr	r3, .L85
 1202 0020 7968     		ldr	r1, [r7, #4]
 1203 0022 4900     		lsl	r1, r1, #1
 1204 0024 CB5A     		ldrh	r3, [r1, r3]
 1205 0026 9BB2     		uxth	r3, r3
 1206 0028 9BB2     		uxth	r3, r3
 1207 002a D31A     		sub	r3, r2, r3
 1208 002c 9AB2     		uxth	r2, r3
 1209 002e BB1C     		add	r3, r7, #2
 1210 0030 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 37


 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1211              		.loc 1 838 0
 1212 0032 BB1C     		add	r3, r7, #2
 1213 0034 0022     		mov	r2, #0
 1214 0036 9B5E     		ldrsh	r3, [r3, r2]
 1215 0038 181C     		mov	r0, r3
 1216 003a FFF7FEFF 		bl	__aeabi_i2f
 1217 003e 031C     		add	r3, r0, #0
 1218 0040 181C     		add	r0, r3, #0
 1219 0042 0D49     		ldr	r1, .L85+4
 1220 0044 FFF7FEFF 		bl	__aeabi_fmul
 1221 0048 031C     		add	r3, r0, #0
 1222 004a 1C1C     		add	r4, r3, #0
 1223 004c 0B4B     		ldr	r3, .L85+8
 1224 004e 7A68     		ldr	r2, [r7, #4]
 1225 0050 9200     		lsl	r2, r2, #2
 1226 0052 D358     		ldr	r3, [r2, r3]
 1227 0054 181C     		mov	r0, r3
 1228 0056 FFF7FEFF 		bl	__aeabi_i2f
 1229 005a 031C     		add	r3, r0, #0
 1230 005c 201C     		add	r0, r4, #0
 1231 005e 191C     		add	r1, r3, #0
 1232 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1233 0064 031C     		add	r3, r0, #0
 1234 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1235              		.loc 1 840 0
 1236 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1237              		.loc 1 841 0
 1238 006a 181C     		add	r0, r3, #0
 1239 006c BD46     		mov	sp, r7
 1240 006e 05B0     		add	sp, sp, #20
 1241              		@ sp needed
 1242 0070 90BD     		pop	{r4, r7, pc}
 1243              	.L86:
 1244 0072 C046     		.align	2
 1245              	.L85:
 1246 0074 00000000 		.word	ADC_offset
 1247 0078 00002041 		.word	1092616192
 1248 007c 00000000 		.word	ADC_countsPer10Volt
 1249              		.cfi_endproc
 1250              	.LFE17:
 1251              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1252              		.section	.rodata
 1253              		.align	2
 1254              		.type	ADC_InputsPlacement.4717, %object
 1255              		.size	ADC_InputsPlacement.4717, 4
 1256              	ADC_InputsPlacement.4717:
 1257 0010 00       		.byte	0
 1258 0011 01       		.byte	1
 1259 0012 02       		.byte	2
 1260 0013 03       		.byte	3
 1261              		.text
 1262              	.Letext0:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 38


 1263              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1264              		.section	.debug_info,"",%progbits
 1265              	.Ldebug_info0:
 1266 0000 96040000 		.4byte	0x496
 1267 0004 0400     		.2byte	0x4
 1268 0006 00000000 		.4byte	.Ldebug_abbrev0
 1269 000a 04       		.byte	0x4
 1270 000b 01       		.uleb128 0x1
 1271 000c B0020000 		.4byte	.LASF60
 1272 0010 01       		.byte	0x1
 1273 0011 78020000 		.4byte	.LASF61
 1274 0015 9F000000 		.4byte	.LASF62
 1275 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1276 001d 00000000 		.4byte	0
 1277 0021 00000000 		.4byte	.Ldebug_line0
 1278 0025 02       		.uleb128 0x2
 1279 0026 01       		.byte	0x1
 1280 0027 06       		.byte	0x6
 1281 0028 7C000000 		.4byte	.LASF0
 1282 002c 02       		.uleb128 0x2
 1283 002d 01       		.byte	0x1
 1284 002e 08       		.byte	0x8
 1285 002f 97020000 		.4byte	.LASF1
 1286 0033 02       		.uleb128 0x2
 1287 0034 02       		.byte	0x2
 1288 0035 05       		.byte	0x5
 1289 0036 CC010000 		.4byte	.LASF2
 1290 003a 02       		.uleb128 0x2
 1291 003b 02       		.byte	0x2
 1292 003c 07       		.byte	0x7
 1293 003d A9010000 		.4byte	.LASF3
 1294 0041 02       		.uleb128 0x2
 1295 0042 04       		.byte	0x4
 1296 0043 05       		.byte	0x5
 1297 0044 29000000 		.4byte	.LASF4
 1298 0048 02       		.uleb128 0x2
 1299 0049 04       		.byte	0x4
 1300 004a 07       		.byte	0x7
 1301 004b 78010000 		.4byte	.LASF5
 1302 004f 02       		.uleb128 0x2
 1303 0050 08       		.byte	0x8
 1304 0051 05       		.byte	0x5
 1305 0052 6E000000 		.4byte	.LASF6
 1306 0056 02       		.uleb128 0x2
 1307 0057 08       		.byte	0x8
 1308 0058 07       		.byte	0x7
 1309 0059 32000000 		.4byte	.LASF7
 1310 005d 03       		.uleb128 0x3
 1311 005e 04       		.byte	0x4
 1312 005f 05       		.byte	0x5
 1313 0060 696E7400 		.ascii	"int\000"
 1314 0064 02       		.uleb128 0x2
 1315 0065 04       		.byte	0x4
 1316 0066 07       		.byte	0x7
 1317 0067 64010000 		.4byte	.LASF8
 1318 006b 04       		.uleb128 0x4
 1319 006c 26010000 		.4byte	.LASF9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 39


 1320 0070 02       		.byte	0x2
 1321 0071 A1       		.byte	0xa1
 1322 0072 2C000000 		.4byte	0x2c
 1323 0076 04       		.uleb128 0x4
 1324 0077 00000000 		.4byte	.LASF10
 1325 007b 02       		.byte	0x2
 1326 007c A2       		.byte	0xa2
 1327 007d 3A000000 		.4byte	0x3a
 1328 0081 04       		.uleb128 0x4
 1329 0082 33010000 		.4byte	.LASF11
 1330 0086 02       		.byte	0x2
 1331 0087 A3       		.byte	0xa3
 1332 0088 48000000 		.4byte	0x48
 1333 008c 04       		.uleb128 0x4
 1334 008d 7F030000 		.4byte	.LASF12
 1335 0091 02       		.byte	0x2
 1336 0092 A5       		.byte	0xa5
 1337 0093 33000000 		.4byte	0x33
 1338 0097 04       		.uleb128 0x4
 1339 0098 8F000000 		.4byte	.LASF13
 1340 009c 02       		.byte	0x2
 1341 009d A6       		.byte	0xa6
 1342 009e 41000000 		.4byte	0x41
 1343 00a2 04       		.uleb128 0x4
 1344 00a3 E3010000 		.4byte	.LASF14
 1345 00a7 02       		.byte	0x2
 1346 00a8 A7       		.byte	0xa7
 1347 00a9 AD000000 		.4byte	0xad
 1348 00ad 02       		.uleb128 0x2
 1349 00ae 04       		.byte	0x4
 1350 00af 04       		.byte	0x4
 1351 00b0 44020000 		.4byte	.LASF15
 1352 00b4 02       		.uleb128 0x2
 1353 00b5 08       		.byte	0x8
 1354 00b6 04       		.byte	0x4
 1355 00b7 2C010000 		.4byte	.LASF16
 1356 00bb 04       		.uleb128 0x4
 1357 00bc 22020000 		.4byte	.LASF17
 1358 00c0 02       		.byte	0x2
 1359 00c1 AC       		.byte	0xac
 1360 00c2 4F000000 		.4byte	0x4f
 1361 00c6 02       		.uleb128 0x2
 1362 00c7 01       		.byte	0x1
 1363 00c8 08       		.byte	0x8
 1364 00c9 4B030000 		.4byte	.LASF18
 1365 00cd 05       		.uleb128 0x5
 1366 00ce DD010000 		.4byte	.LASF19
 1367 00d2 02       		.byte	0x2
 1368 00d3 4D01     		.2byte	0x14d
 1369 00d5 D9000000 		.4byte	0xd9
 1370 00d9 06       		.uleb128 0x6
 1371 00da 81000000 		.4byte	0x81
 1372 00de 02       		.uleb128 0x2
 1373 00df 04       		.byte	0x4
 1374 00e0 07       		.byte	0x7
 1375 00e1 EB010000 		.4byte	.LASF20
 1376 00e5 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 40


 1377 00e6 95000000 		.4byte	.LASF25
 1378 00ea 01       		.byte	0x1
 1379 00eb 3F       		.byte	0x3f
 1380 00ec 00000000 		.4byte	.LFB0
 1381 00f0 24000000 		.4byte	.LFE0-.LFB0
 1382 00f4 01       		.uleb128 0x1
 1383 00f5 9C       		.byte	0x9c
 1384 00f6 08       		.uleb128 0x8
 1385 00f7 93030000 		.4byte	.LASF36
 1386 00fb 01       		.byte	0x1
 1387 00fc 5E       		.byte	0x5e
 1388 00fd 00000000 		.4byte	.LFB1
 1389 0101 FC010000 		.4byte	.LFE1-.LFB1
 1390 0105 01       		.uleb128 0x1
 1391 0106 9C       		.byte	0x9c
 1392 0107 47010000 		.4byte	0x147
 1393 010b 09       		.uleb128 0x9
 1394 010c 40030000 		.4byte	.LASF21
 1395 0110 01       		.byte	0x1
 1396 0111 60       		.byte	0x60
 1397 0112 81000000 		.4byte	0x81
 1398 0116 02       		.uleb128 0x2
 1399 0117 91       		.byte	0x91
 1400 0118 6C       		.sleb128 -20
 1401 0119 09       		.uleb128 0x9
 1402 011a 9F010000 		.4byte	.LASF22
 1403 011e 01       		.byte	0x1
 1404 011f 61       		.byte	0x61
 1405 0120 81000000 		.4byte	0x81
 1406 0124 02       		.uleb128 0x2
 1407 0125 91       		.byte	0x91
 1408 0126 64       		.sleb128 -28
 1409 0127 09       		.uleb128 0x9
 1410 0128 0F000000 		.4byte	.LASF23
 1411 012c 01       		.byte	0x1
 1412 012d 62       		.byte	0x62
 1413 012e 97000000 		.4byte	0x97
 1414 0132 02       		.uleb128 0x2
 1415 0133 91       		.byte	0x91
 1416 0134 68       		.sleb128 -24
 1417 0135 09       		.uleb128 0x9
 1418 0136 49000000 		.4byte	.LASF24
 1419 013a 01       		.byte	0x1
 1420 013b 65       		.byte	0x65
 1421 013c 57010000 		.4byte	0x157
 1422 0140 05       		.uleb128 0x5
 1423 0141 03       		.byte	0x3
 1424 0142 10000000 		.4byte	ADC_InputsPlacement.4717
 1425 0146 00       		.byte	0
 1426 0147 0A       		.uleb128 0xa
 1427 0148 6B000000 		.4byte	0x6b
 1428 014c 57010000 		.4byte	0x157
 1429 0150 0B       		.uleb128 0xb
 1430 0151 DE000000 		.4byte	0xde
 1431 0155 03       		.byte	0x3
 1432 0156 00       		.byte	0
 1433 0157 0C       		.uleb128 0xc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 41


 1434 0158 47010000 		.4byte	0x147
 1435 015c 0D       		.uleb128 0xd
 1436 015d 74030000 		.4byte	.LASF26
 1437 0161 01       		.byte	0x1
 1438 0162 2701     		.2byte	0x127
 1439 0164 00000000 		.4byte	.LFB2
 1440 0168 28000000 		.4byte	.LFE2-.LFB2
 1441 016c 01       		.uleb128 0x1
 1442 016d 9C       		.byte	0x9c
 1443 016e 0E       		.uleb128 0xe
 1444 016f 37030000 		.4byte	.LASF27
 1445 0173 01       		.byte	0x1
 1446 0174 4A01     		.2byte	0x14a
 1447 0176 00000000 		.4byte	.LFB3
 1448 017a 18000000 		.4byte	.LFE3-.LFB3
 1449 017e 01       		.uleb128 0x1
 1450 017f 9C       		.byte	0x9c
 1451 0180 0E       		.uleb128 0xe
 1452 0181 5D000000 		.4byte	.LASF28
 1453 0185 01       		.byte	0x1
 1454 0186 6401     		.2byte	0x164
 1455 0188 00000000 		.4byte	.LFB4
 1456 018c 1C000000 		.4byte	.LFE4-.LFB4
 1457 0190 01       		.uleb128 0x1
 1458 0191 9C       		.byte	0x9c
 1459 0192 0E       		.uleb128 0xe
 1460 0193 BC010000 		.4byte	.LASF29
 1461 0197 01       		.byte	0x1
 1462 0198 7D01     		.2byte	0x17d
 1463 019a 00000000 		.4byte	.LFB5
 1464 019e 1C000000 		.4byte	.LFE5-.LFB5
 1465 01a2 01       		.uleb128 0x1
 1466 01a3 9C       		.byte	0x9c
 1467 01a4 0F       		.uleb128 0xf
 1468 01a5 0E020000 		.4byte	.LASF31
 1469 01a9 01       		.byte	0x1
 1470 01aa 9F01     		.2byte	0x19f
 1471 01ac 81000000 		.4byte	0x81
 1472 01b0 00000000 		.4byte	.LFB6
 1473 01b4 48000000 		.4byte	.LFE6-.LFB6
 1474 01b8 01       		.uleb128 0x1
 1475 01b9 9C       		.byte	0x9c
 1476 01ba DD010000 		.4byte	0x1dd
 1477 01be 10       		.uleb128 0x10
 1478 01bf 4B010000 		.4byte	.LASF33
 1479 01c3 01       		.byte	0x1
 1480 01c4 9F01     		.2byte	0x19f
 1481 01c6 81000000 		.4byte	0x81
 1482 01ca 02       		.uleb128 0x2
 1483 01cb 91       		.byte	0x91
 1484 01cc 6C       		.sleb128 -20
 1485 01cd 11       		.uleb128 0x11
 1486 01ce 88000000 		.4byte	.LASF30
 1487 01d2 01       		.byte	0x1
 1488 01d3 A101     		.2byte	0x1a1
 1489 01d5 81000000 		.4byte	0x81
 1490 01d9 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 42


 1491 01da 91       		.byte	0x91
 1492 01db 74       		.sleb128 -12
 1493 01dc 00       		.byte	0
 1494 01dd 12       		.uleb128 0x12
 1495 01de A3030000 		.4byte	.LASF32
 1496 01e2 01       		.byte	0x1
 1497 01e3 D501     		.2byte	0x1d5
 1498 01e5 8C000000 		.4byte	0x8c
 1499 01e9 00000000 		.4byte	.LFB7
 1500 01ed 44000000 		.4byte	.LFE7-.LFB7
 1501 01f1 01       		.uleb128 0x1
 1502 01f2 9C       		.byte	0x9c
 1503 01f3 16020000 		.4byte	0x216
 1504 01f7 10       		.uleb128 0x10
 1505 01f8 46030000 		.4byte	.LASF34
 1506 01fc 01       		.byte	0x1
 1507 01fd D501     		.2byte	0x1d5
 1508 01ff 81000000 		.4byte	0x81
 1509 0203 02       		.uleb128 0x2
 1510 0204 91       		.byte	0x91
 1511 0205 6C       		.sleb128 -20
 1512 0206 11       		.uleb128 0x11
 1513 0207 9C030000 		.4byte	.LASF35
 1514 020b 01       		.byte	0x1
 1515 020c D701     		.2byte	0x1d7
 1516 020e 81000000 		.4byte	0x81
 1517 0212 02       		.uleb128 0x2
 1518 0213 91       		.byte	0x91
 1519 0214 74       		.sleb128 -12
 1520 0215 00       		.byte	0
 1521 0216 13       		.uleb128 0x13
 1522 0217 28020000 		.4byte	.LASF37
 1523 021b 01       		.byte	0x1
 1524 021c 0202     		.2byte	0x202
 1525 021e 00000000 		.4byte	.LFB8
 1526 0222 1C000000 		.4byte	.LFE8-.LFB8
 1527 0226 01       		.uleb128 0x1
 1528 0227 9C       		.byte	0x9c
 1529 0228 3C020000 		.4byte	0x23c
 1530 022c 10       		.uleb128 0x10
 1531 022d 3A010000 		.4byte	.LASF38
 1532 0231 01       		.byte	0x1
 1533 0232 0202     		.2byte	0x202
 1534 0234 81000000 		.4byte	0x81
 1535 0238 02       		.uleb128 0x2
 1536 0239 91       		.byte	0x91
 1537 023a 74       		.sleb128 -12
 1538 023b 00       		.byte	0
 1539 023c 13       		.uleb128 0x13
 1540 023d 68020000 		.4byte	.LASF39
 1541 0241 01       		.byte	0x1
 1542 0242 2E02     		.2byte	0x22e
 1543 0244 00000000 		.4byte	.LFB9
 1544 0248 30000000 		.4byte	.LFE9-.LFB9
 1545 024c 01       		.uleb128 0x1
 1546 024d 9C       		.byte	0x9c
 1547 024e 62020000 		.4byte	0x262
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 43


 1548 0252 10       		.uleb128 0x10
 1549 0253 F4010000 		.4byte	.LASF40
 1550 0257 01       		.byte	0x1
 1551 0258 2E02     		.2byte	0x22e
 1552 025a 81000000 		.4byte	0x81
 1553 025e 02       		.uleb128 0x2
 1554 025f 91       		.byte	0x91
 1555 0260 74       		.sleb128 -12
 1556 0261 00       		.byte	0
 1557 0262 13       		.uleb128 0x13
 1558 0263 FD010000 		.4byte	.LASF41
 1559 0267 01       		.byte	0x1
 1560 0268 4302     		.2byte	0x243
 1561 026a 00000000 		.4byte	.LFB10
 1562 026e 2C000000 		.4byte	.LFE10-.LFB10
 1563 0272 01       		.uleb128 0x1
 1564 0273 9C       		.byte	0x9c
 1565 0274 88020000 		.4byte	0x288
 1566 0278 10       		.uleb128 0x10
 1567 0279 4A020000 		.4byte	.LASF42
 1568 027d 01       		.byte	0x1
 1569 027e 4302     		.2byte	0x243
 1570 0280 81000000 		.4byte	0x81
 1571 0284 02       		.uleb128 0x2
 1572 0285 91       		.byte	0x91
 1573 0286 74       		.sleb128 -12
 1574 0287 00       		.byte	0
 1575 0288 13       		.uleb128 0x13
 1576 0289 53010000 		.4byte	.LASF43
 1577 028d 01       		.byte	0x1
 1578 028e 5B02     		.2byte	0x25b
 1579 0290 00000000 		.4byte	.LFB11
 1580 0294 1C000000 		.4byte	.LFE11-.LFB11
 1581 0298 01       		.uleb128 0x1
 1582 0299 9C       		.byte	0x9c
 1583 029a AE020000 		.4byte	0x2ae
 1584 029e 10       		.uleb128 0x10
 1585 029f 3A010000 		.4byte	.LASF38
 1586 02a3 01       		.byte	0x1
 1587 02a4 5B02     		.2byte	0x25b
 1588 02a6 81000000 		.4byte	0x81
 1589 02aa 02       		.uleb128 0x2
 1590 02ab 91       		.byte	0x91
 1591 02ac 74       		.sleb128 -12
 1592 02ad 00       		.byte	0
 1593 02ae 13       		.uleb128 0x13
 1594 02af 8A010000 		.4byte	.LASF44
 1595 02b3 01       		.byte	0x1
 1596 02b4 7202     		.2byte	0x272
 1597 02b6 00000000 		.4byte	.LFB12
 1598 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1599 02be 01       		.uleb128 0x1
 1600 02bf 9C       		.byte	0x9c
 1601 02c0 D4020000 		.4byte	0x2d4
 1602 02c4 10       		.uleb128 0x10
 1603 02c5 3A010000 		.4byte	.LASF38
 1604 02c9 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 44


 1605 02ca 7202     		.2byte	0x272
 1606 02cc 81000000 		.4byte	0x81
 1607 02d0 02       		.uleb128 0x2
 1608 02d1 91       		.byte	0x91
 1609 02d2 74       		.sleb128 -12
 1610 02d3 00       		.byte	0
 1611 02d4 14       		.uleb128 0x14
 1612 02d5 85030000 		.4byte	.LASF45
 1613 02d9 01       		.byte	0x1
 1614 02da 8E02     		.2byte	0x28e
 1615 02dc 00000000 		.4byte	.LFB13
 1616 02e0 30000000 		.4byte	.LFE13-.LFB13
 1617 02e4 01       		.uleb128 0x1
 1618 02e5 9C       		.byte	0x9c
 1619 02e6 09030000 		.4byte	0x309
 1620 02ea 10       		.uleb128 0x10
 1621 02eb 46030000 		.4byte	.LASF34
 1622 02ef 01       		.byte	0x1
 1623 02f0 8E02     		.2byte	0x28e
 1624 02f2 81000000 		.4byte	0x81
 1625 02f6 02       		.uleb128 0x2
 1626 02f7 91       		.byte	0x91
 1627 02f8 74       		.sleb128 -12
 1628 02f9 10       		.uleb128 0x10
 1629 02fa 63030000 		.4byte	.LASF46
 1630 02fe 01       		.byte	0x1
 1631 02ff 8E02     		.2byte	0x28e
 1632 0301 8C000000 		.4byte	0x8c
 1633 0305 02       		.uleb128 0x2
 1634 0306 91       		.byte	0x91
 1635 0307 72       		.sleb128 -14
 1636 0308 00       		.byte	0
 1637 0309 14       		.uleb128 0x14
 1638 030a 38020000 		.4byte	.LASF47
 1639 030e 01       		.byte	0x1
 1640 030f B002     		.2byte	0x2b0
 1641 0311 00000000 		.4byte	.LFB14
 1642 0315 2C000000 		.4byte	.LFE14-.LFB14
 1643 0319 01       		.uleb128 0x1
 1644 031a 9C       		.byte	0x9c
 1645 031b 3E030000 		.4byte	0x33e
 1646 031f 10       		.uleb128 0x10
 1647 0320 46030000 		.4byte	.LASF34
 1648 0324 01       		.byte	0x1
 1649 0325 B002     		.2byte	0x2b0
 1650 0327 81000000 		.4byte	0x81
 1651 032b 02       		.uleb128 0x2
 1652 032c 91       		.byte	0x91
 1653 032d 74       		.sleb128 -12
 1654 032e 10       		.uleb128 0x10
 1655 032f 07000000 		.4byte	.LASF48
 1656 0333 01       		.byte	0x1
 1657 0334 B002     		.2byte	0x2b0
 1658 0336 97000000 		.4byte	0x97
 1659 033a 02       		.uleb128 0x2
 1660 033b 91       		.byte	0x91
 1661 033c 70       		.sleb128 -16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 45


 1662 033d 00       		.byte	0
 1663 033e 12       		.uleb128 0x12
 1664 033f 54020000 		.4byte	.LASF49
 1665 0343 01       		.byte	0x1
 1666 0344 D102     		.2byte	0x2d1
 1667 0346 8C000000 		.4byte	0x8c
 1668 034a 00000000 		.4byte	.LFB15
 1669 034e A4000000 		.4byte	.LFE15-.LFB15
 1670 0352 01       		.uleb128 0x1
 1671 0353 9C       		.byte	0x9c
 1672 0354 86030000 		.4byte	0x386
 1673 0358 10       		.uleb128 0x10
 1674 0359 46030000 		.4byte	.LASF34
 1675 035d 01       		.byte	0x1
 1676 035e D102     		.2byte	0x2d1
 1677 0360 81000000 		.4byte	0x81
 1678 0364 02       		.uleb128 0x2
 1679 0365 91       		.byte	0x91
 1680 0366 6C       		.sleb128 -20
 1681 0367 10       		.uleb128 0x10
 1682 0368 6A030000 		.4byte	.LASF50
 1683 036c 01       		.byte	0x1
 1684 036d D102     		.2byte	0x2d1
 1685 036f 8C000000 		.4byte	0x8c
 1686 0373 02       		.uleb128 0x2
 1687 0374 91       		.byte	0x91
 1688 0375 6A       		.sleb128 -22
 1689 0376 11       		.uleb128 0x11
 1690 0377 D6010000 		.4byte	.LASF51
 1691 037b 01       		.byte	0x1
 1692 037c D302     		.2byte	0x2d3
 1693 037e 8C000000 		.4byte	0x8c
 1694 0382 02       		.uleb128 0x2
 1695 0383 91       		.byte	0x91
 1696 0384 76       		.sleb128 -10
 1697 0385 00       		.byte	0
 1698 0386 12       		.uleb128 0x12
 1699 0387 FE000000 		.4byte	.LASF52
 1700 038b 01       		.byte	0x1
 1701 038c 0703     		.2byte	0x307
 1702 038e 97000000 		.4byte	0x97
 1703 0392 00000000 		.4byte	.LFB16
 1704 0396 98000000 		.4byte	.LFE16-.LFB16
 1705 039a 01       		.uleb128 0x1
 1706 039b 9C       		.byte	0x9c
 1707 039c CE030000 		.4byte	0x3ce
 1708 03a0 10       		.uleb128 0x10
 1709 03a1 46030000 		.4byte	.LASF34
 1710 03a5 01       		.byte	0x1
 1711 03a6 0703     		.2byte	0x307
 1712 03a8 81000000 		.4byte	0x81
 1713 03ac 02       		.uleb128 0x2
 1714 03ad 91       		.byte	0x91
 1715 03ae 64       		.sleb128 -28
 1716 03af 10       		.uleb128 0x10
 1717 03b0 6A030000 		.4byte	.LASF50
 1718 03b4 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 46


 1719 03b5 0703     		.2byte	0x307
 1720 03b7 8C000000 		.4byte	0x8c
 1721 03bb 02       		.uleb128 0x2
 1722 03bc 91       		.byte	0x91
 1723 03bd 62       		.sleb128 -30
 1724 03be 11       		.uleb128 0x11
 1725 03bf 71010000 		.4byte	.LASF53
 1726 03c3 01       		.byte	0x1
 1727 03c4 0903     		.2byte	0x309
 1728 03c6 BB000000 		.4byte	0xbb
 1729 03ca 02       		.uleb128 0x2
 1730 03cb 91       		.byte	0x91
 1731 03cc 68       		.sleb128 -24
 1732 03cd 00       		.byte	0
 1733 03ce 12       		.uleb128 0x12
 1734 03cf 16000000 		.4byte	.LASF54
 1735 03d3 01       		.byte	0x1
 1736 03d4 3403     		.2byte	0x334
 1737 03d6 A2000000 		.4byte	0xa2
 1738 03da 00000000 		.4byte	.LFB17
 1739 03de 80000000 		.4byte	.LFE17-.LFB17
 1740 03e2 01       		.uleb128 0x1
 1741 03e3 9C       		.byte	0x9c
 1742 03e4 16040000 		.4byte	0x416
 1743 03e8 10       		.uleb128 0x10
 1744 03e9 46030000 		.4byte	.LASF34
 1745 03ed 01       		.byte	0x1
 1746 03ee 3403     		.2byte	0x334
 1747 03f0 81000000 		.4byte	0x81
 1748 03f4 02       		.uleb128 0x2
 1749 03f5 91       		.byte	0x91
 1750 03f6 64       		.sleb128 -28
 1751 03f7 10       		.uleb128 0x10
 1752 03f8 6A030000 		.4byte	.LASF50
 1753 03fc 01       		.byte	0x1
 1754 03fd 3403     		.2byte	0x334
 1755 03ff 8C000000 		.4byte	0x8c
 1756 0403 02       		.uleb128 0x2
 1757 0404 91       		.byte	0x91
 1758 0405 62       		.sleb128 -30
 1759 0406 11       		.uleb128 0x11
 1760 0407 99010000 		.4byte	.LASF55
 1761 040b 01       		.byte	0x1
 1762 040c 3603     		.2byte	0x336
 1763 040e A2000000 		.4byte	0xa2
 1764 0412 02       		.uleb128 0x2
 1765 0413 91       		.byte	0x91
 1766 0414 6C       		.sleb128 -20
 1767 0415 00       		.byte	0
 1768 0416 0A       		.uleb128 0xa
 1769 0417 81000000 		.4byte	0x81
 1770 041b 26040000 		.4byte	0x426
 1771 041f 0B       		.uleb128 0xb
 1772 0420 DE000000 		.4byte	0xde
 1773 0424 03       		.byte	0x3
 1774 0425 00       		.byte	0
 1775 0426 09       		.uleb128 0x9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 47


 1776 0427 50030000 		.4byte	.LASF56
 1777 042b 01       		.byte	0x1
 1778 042c 21       		.byte	0x21
 1779 042d 37040000 		.4byte	0x437
 1780 0431 05       		.uleb128 0x5
 1781 0432 03       		.byte	0x3
 1782 0433 00000000 		.4byte	ADC_channelsConfig
 1783 0437 0C       		.uleb128 0xc
 1784 0438 16040000 		.4byte	0x416
 1785 043c 15       		.uleb128 0x15
 1786 043d 3F010000 		.4byte	.LASF57
 1787 0441 01       		.byte	0x1
 1788 0442 18       		.byte	0x18
 1789 0443 6B000000 		.4byte	0x6b
 1790 0447 05       		.uleb128 0x5
 1791 0448 03       		.byte	0x3
 1792 0449 00000000 		.4byte	ADC_initVar
 1793 044d 0A       		.uleb128 0xa
 1794 044e 8C000000 		.4byte	0x8c
 1795 0452 5D040000 		.4byte	0x45d
 1796 0456 0B       		.uleb128 0xb
 1797 0457 DE000000 		.4byte	0xde
 1798 045b 03       		.byte	0x3
 1799 045c 00       		.byte	0
 1800 045d 15       		.uleb128 0x15
 1801 045e A5020000 		.4byte	.LASF58
 1802 0462 01       		.byte	0x1
 1803 0463 19       		.byte	0x19
 1804 0464 6E040000 		.4byte	0x46e
 1805 0468 05       		.uleb128 0x5
 1806 0469 03       		.byte	0x3
 1807 046a 00000000 		.4byte	ADC_offset
 1808 046e 06       		.uleb128 0x6
 1809 046f 4D040000 		.4byte	0x44d
 1810 0473 0A       		.uleb128 0xa
 1811 0474 97000000 		.4byte	0x97
 1812 0478 83040000 		.4byte	0x483
 1813 047c 0B       		.uleb128 0xb
 1814 047d DE000000 		.4byte	0xde
 1815 0481 03       		.byte	0x3
 1816 0482 00       		.byte	0
 1817 0483 15       		.uleb128 0x15
 1818 0484 12010000 		.4byte	.LASF59
 1819 0488 01       		.byte	0x1
 1820 0489 1A       		.byte	0x1a
 1821 048a 94040000 		.4byte	0x494
 1822 048e 05       		.uleb128 0x5
 1823 048f 03       		.byte	0x3
 1824 0490 00000000 		.4byte	ADC_countsPer10Volt
 1825 0494 06       		.uleb128 0x6
 1826 0495 73040000 		.4byte	0x473
 1827 0499 00       		.byte	0
 1828              		.section	.debug_abbrev,"",%progbits
 1829              	.Ldebug_abbrev0:
 1830 0000 01       		.uleb128 0x1
 1831 0001 11       		.uleb128 0x11
 1832 0002 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 48


 1833 0003 25       		.uleb128 0x25
 1834 0004 0E       		.uleb128 0xe
 1835 0005 13       		.uleb128 0x13
 1836 0006 0B       		.uleb128 0xb
 1837 0007 03       		.uleb128 0x3
 1838 0008 0E       		.uleb128 0xe
 1839 0009 1B       		.uleb128 0x1b
 1840 000a 0E       		.uleb128 0xe
 1841 000b 55       		.uleb128 0x55
 1842 000c 17       		.uleb128 0x17
 1843 000d 11       		.uleb128 0x11
 1844 000e 01       		.uleb128 0x1
 1845 000f 10       		.uleb128 0x10
 1846 0010 17       		.uleb128 0x17
 1847 0011 00       		.byte	0
 1848 0012 00       		.byte	0
 1849 0013 02       		.uleb128 0x2
 1850 0014 24       		.uleb128 0x24
 1851 0015 00       		.byte	0
 1852 0016 0B       		.uleb128 0xb
 1853 0017 0B       		.uleb128 0xb
 1854 0018 3E       		.uleb128 0x3e
 1855 0019 0B       		.uleb128 0xb
 1856 001a 03       		.uleb128 0x3
 1857 001b 0E       		.uleb128 0xe
 1858 001c 00       		.byte	0
 1859 001d 00       		.byte	0
 1860 001e 03       		.uleb128 0x3
 1861 001f 24       		.uleb128 0x24
 1862 0020 00       		.byte	0
 1863 0021 0B       		.uleb128 0xb
 1864 0022 0B       		.uleb128 0xb
 1865 0023 3E       		.uleb128 0x3e
 1866 0024 0B       		.uleb128 0xb
 1867 0025 03       		.uleb128 0x3
 1868 0026 08       		.uleb128 0x8
 1869 0027 00       		.byte	0
 1870 0028 00       		.byte	0
 1871 0029 04       		.uleb128 0x4
 1872 002a 16       		.uleb128 0x16
 1873 002b 00       		.byte	0
 1874 002c 03       		.uleb128 0x3
 1875 002d 0E       		.uleb128 0xe
 1876 002e 3A       		.uleb128 0x3a
 1877 002f 0B       		.uleb128 0xb
 1878 0030 3B       		.uleb128 0x3b
 1879 0031 0B       		.uleb128 0xb
 1880 0032 49       		.uleb128 0x49
 1881 0033 13       		.uleb128 0x13
 1882 0034 00       		.byte	0
 1883 0035 00       		.byte	0
 1884 0036 05       		.uleb128 0x5
 1885 0037 16       		.uleb128 0x16
 1886 0038 00       		.byte	0
 1887 0039 03       		.uleb128 0x3
 1888 003a 0E       		.uleb128 0xe
 1889 003b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 49


 1890 003c 0B       		.uleb128 0xb
 1891 003d 3B       		.uleb128 0x3b
 1892 003e 05       		.uleb128 0x5
 1893 003f 49       		.uleb128 0x49
 1894 0040 13       		.uleb128 0x13
 1895 0041 00       		.byte	0
 1896 0042 00       		.byte	0
 1897 0043 06       		.uleb128 0x6
 1898 0044 35       		.uleb128 0x35
 1899 0045 00       		.byte	0
 1900 0046 49       		.uleb128 0x49
 1901 0047 13       		.uleb128 0x13
 1902 0048 00       		.byte	0
 1903 0049 00       		.byte	0
 1904 004a 07       		.uleb128 0x7
 1905 004b 2E       		.uleb128 0x2e
 1906 004c 00       		.byte	0
 1907 004d 3F       		.uleb128 0x3f
 1908 004e 19       		.uleb128 0x19
 1909 004f 03       		.uleb128 0x3
 1910 0050 0E       		.uleb128 0xe
 1911 0051 3A       		.uleb128 0x3a
 1912 0052 0B       		.uleb128 0xb
 1913 0053 3B       		.uleb128 0x3b
 1914 0054 0B       		.uleb128 0xb
 1915 0055 27       		.uleb128 0x27
 1916 0056 19       		.uleb128 0x19
 1917 0057 11       		.uleb128 0x11
 1918 0058 01       		.uleb128 0x1
 1919 0059 12       		.uleb128 0x12
 1920 005a 06       		.uleb128 0x6
 1921 005b 40       		.uleb128 0x40
 1922 005c 18       		.uleb128 0x18
 1923 005d 9642     		.uleb128 0x2116
 1924 005f 19       		.uleb128 0x19
 1925 0060 00       		.byte	0
 1926 0061 00       		.byte	0
 1927 0062 08       		.uleb128 0x8
 1928 0063 2E       		.uleb128 0x2e
 1929 0064 01       		.byte	0x1
 1930 0065 3F       		.uleb128 0x3f
 1931 0066 19       		.uleb128 0x19
 1932 0067 03       		.uleb128 0x3
 1933 0068 0E       		.uleb128 0xe
 1934 0069 3A       		.uleb128 0x3a
 1935 006a 0B       		.uleb128 0xb
 1936 006b 3B       		.uleb128 0x3b
 1937 006c 0B       		.uleb128 0xb
 1938 006d 27       		.uleb128 0x27
 1939 006e 19       		.uleb128 0x19
 1940 006f 11       		.uleb128 0x11
 1941 0070 01       		.uleb128 0x1
 1942 0071 12       		.uleb128 0x12
 1943 0072 06       		.uleb128 0x6
 1944 0073 40       		.uleb128 0x40
 1945 0074 18       		.uleb128 0x18
 1946 0075 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 50


 1947 0077 19       		.uleb128 0x19
 1948 0078 01       		.uleb128 0x1
 1949 0079 13       		.uleb128 0x13
 1950 007a 00       		.byte	0
 1951 007b 00       		.byte	0
 1952 007c 09       		.uleb128 0x9
 1953 007d 34       		.uleb128 0x34
 1954 007e 00       		.byte	0
 1955 007f 03       		.uleb128 0x3
 1956 0080 0E       		.uleb128 0xe
 1957 0081 3A       		.uleb128 0x3a
 1958 0082 0B       		.uleb128 0xb
 1959 0083 3B       		.uleb128 0x3b
 1960 0084 0B       		.uleb128 0xb
 1961 0085 49       		.uleb128 0x49
 1962 0086 13       		.uleb128 0x13
 1963 0087 02       		.uleb128 0x2
 1964 0088 18       		.uleb128 0x18
 1965 0089 00       		.byte	0
 1966 008a 00       		.byte	0
 1967 008b 0A       		.uleb128 0xa
 1968 008c 01       		.uleb128 0x1
 1969 008d 01       		.byte	0x1
 1970 008e 49       		.uleb128 0x49
 1971 008f 13       		.uleb128 0x13
 1972 0090 01       		.uleb128 0x1
 1973 0091 13       		.uleb128 0x13
 1974 0092 00       		.byte	0
 1975 0093 00       		.byte	0
 1976 0094 0B       		.uleb128 0xb
 1977 0095 21       		.uleb128 0x21
 1978 0096 00       		.byte	0
 1979 0097 49       		.uleb128 0x49
 1980 0098 13       		.uleb128 0x13
 1981 0099 2F       		.uleb128 0x2f
 1982 009a 0B       		.uleb128 0xb
 1983 009b 00       		.byte	0
 1984 009c 00       		.byte	0
 1985 009d 0C       		.uleb128 0xc
 1986 009e 26       		.uleb128 0x26
 1987 009f 00       		.byte	0
 1988 00a0 49       		.uleb128 0x49
 1989 00a1 13       		.uleb128 0x13
 1990 00a2 00       		.byte	0
 1991 00a3 00       		.byte	0
 1992 00a4 0D       		.uleb128 0xd
 1993 00a5 2E       		.uleb128 0x2e
 1994 00a6 00       		.byte	0
 1995 00a7 3F       		.uleb128 0x3f
 1996 00a8 19       		.uleb128 0x19
 1997 00a9 03       		.uleb128 0x3
 1998 00aa 0E       		.uleb128 0xe
 1999 00ab 3A       		.uleb128 0x3a
 2000 00ac 0B       		.uleb128 0xb
 2001 00ad 3B       		.uleb128 0x3b
 2002 00ae 05       		.uleb128 0x5
 2003 00af 27       		.uleb128 0x27
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 51


 2004 00b0 19       		.uleb128 0x19
 2005 00b1 11       		.uleb128 0x11
 2006 00b2 01       		.uleb128 0x1
 2007 00b3 12       		.uleb128 0x12
 2008 00b4 06       		.uleb128 0x6
 2009 00b5 40       		.uleb128 0x40
 2010 00b6 18       		.uleb128 0x18
 2011 00b7 9642     		.uleb128 0x2116
 2012 00b9 19       		.uleb128 0x19
 2013 00ba 00       		.byte	0
 2014 00bb 00       		.byte	0
 2015 00bc 0E       		.uleb128 0xe
 2016 00bd 2E       		.uleb128 0x2e
 2017 00be 00       		.byte	0
 2018 00bf 3F       		.uleb128 0x3f
 2019 00c0 19       		.uleb128 0x19
 2020 00c1 03       		.uleb128 0x3
 2021 00c2 0E       		.uleb128 0xe
 2022 00c3 3A       		.uleb128 0x3a
 2023 00c4 0B       		.uleb128 0xb
 2024 00c5 3B       		.uleb128 0x3b
 2025 00c6 05       		.uleb128 0x5
 2026 00c7 27       		.uleb128 0x27
 2027 00c8 19       		.uleb128 0x19
 2028 00c9 11       		.uleb128 0x11
 2029 00ca 01       		.uleb128 0x1
 2030 00cb 12       		.uleb128 0x12
 2031 00cc 06       		.uleb128 0x6
 2032 00cd 40       		.uleb128 0x40
 2033 00ce 18       		.uleb128 0x18
 2034 00cf 9742     		.uleb128 0x2117
 2035 00d1 19       		.uleb128 0x19
 2036 00d2 00       		.byte	0
 2037 00d3 00       		.byte	0
 2038 00d4 0F       		.uleb128 0xf
 2039 00d5 2E       		.uleb128 0x2e
 2040 00d6 01       		.byte	0x1
 2041 00d7 3F       		.uleb128 0x3f
 2042 00d8 19       		.uleb128 0x19
 2043 00d9 03       		.uleb128 0x3
 2044 00da 0E       		.uleb128 0xe
 2045 00db 3A       		.uleb128 0x3a
 2046 00dc 0B       		.uleb128 0xb
 2047 00dd 3B       		.uleb128 0x3b
 2048 00de 05       		.uleb128 0x5
 2049 00df 27       		.uleb128 0x27
 2050 00e0 19       		.uleb128 0x19
 2051 00e1 49       		.uleb128 0x49
 2052 00e2 13       		.uleb128 0x13
 2053 00e3 11       		.uleb128 0x11
 2054 00e4 01       		.uleb128 0x1
 2055 00e5 12       		.uleb128 0x12
 2056 00e6 06       		.uleb128 0x6
 2057 00e7 40       		.uleb128 0x40
 2058 00e8 18       		.uleb128 0x18
 2059 00e9 9742     		.uleb128 0x2117
 2060 00eb 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 52


 2061 00ec 01       		.uleb128 0x1
 2062 00ed 13       		.uleb128 0x13
 2063 00ee 00       		.byte	0
 2064 00ef 00       		.byte	0
 2065 00f0 10       		.uleb128 0x10
 2066 00f1 05       		.uleb128 0x5
 2067 00f2 00       		.byte	0
 2068 00f3 03       		.uleb128 0x3
 2069 00f4 0E       		.uleb128 0xe
 2070 00f5 3A       		.uleb128 0x3a
 2071 00f6 0B       		.uleb128 0xb
 2072 00f7 3B       		.uleb128 0x3b
 2073 00f8 05       		.uleb128 0x5
 2074 00f9 49       		.uleb128 0x49
 2075 00fa 13       		.uleb128 0x13
 2076 00fb 02       		.uleb128 0x2
 2077 00fc 18       		.uleb128 0x18
 2078 00fd 00       		.byte	0
 2079 00fe 00       		.byte	0
 2080 00ff 11       		.uleb128 0x11
 2081 0100 34       		.uleb128 0x34
 2082 0101 00       		.byte	0
 2083 0102 03       		.uleb128 0x3
 2084 0103 0E       		.uleb128 0xe
 2085 0104 3A       		.uleb128 0x3a
 2086 0105 0B       		.uleb128 0xb
 2087 0106 3B       		.uleb128 0x3b
 2088 0107 05       		.uleb128 0x5
 2089 0108 49       		.uleb128 0x49
 2090 0109 13       		.uleb128 0x13
 2091 010a 02       		.uleb128 0x2
 2092 010b 18       		.uleb128 0x18
 2093 010c 00       		.byte	0
 2094 010d 00       		.byte	0
 2095 010e 12       		.uleb128 0x12
 2096 010f 2E       		.uleb128 0x2e
 2097 0110 01       		.byte	0x1
 2098 0111 3F       		.uleb128 0x3f
 2099 0112 19       		.uleb128 0x19
 2100 0113 03       		.uleb128 0x3
 2101 0114 0E       		.uleb128 0xe
 2102 0115 3A       		.uleb128 0x3a
 2103 0116 0B       		.uleb128 0xb
 2104 0117 3B       		.uleb128 0x3b
 2105 0118 05       		.uleb128 0x5
 2106 0119 27       		.uleb128 0x27
 2107 011a 19       		.uleb128 0x19
 2108 011b 49       		.uleb128 0x49
 2109 011c 13       		.uleb128 0x13
 2110 011d 11       		.uleb128 0x11
 2111 011e 01       		.uleb128 0x1
 2112 011f 12       		.uleb128 0x12
 2113 0120 06       		.uleb128 0x6
 2114 0121 40       		.uleb128 0x40
 2115 0122 18       		.uleb128 0x18
 2116 0123 9642     		.uleb128 0x2116
 2117 0125 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 53


 2118 0126 01       		.uleb128 0x1
 2119 0127 13       		.uleb128 0x13
 2120 0128 00       		.byte	0
 2121 0129 00       		.byte	0
 2122 012a 13       		.uleb128 0x13
 2123 012b 2E       		.uleb128 0x2e
 2124 012c 01       		.byte	0x1
 2125 012d 3F       		.uleb128 0x3f
 2126 012e 19       		.uleb128 0x19
 2127 012f 03       		.uleb128 0x3
 2128 0130 0E       		.uleb128 0xe
 2129 0131 3A       		.uleb128 0x3a
 2130 0132 0B       		.uleb128 0xb
 2131 0133 3B       		.uleb128 0x3b
 2132 0134 05       		.uleb128 0x5
 2133 0135 27       		.uleb128 0x27
 2134 0136 19       		.uleb128 0x19
 2135 0137 11       		.uleb128 0x11
 2136 0138 01       		.uleb128 0x1
 2137 0139 12       		.uleb128 0x12
 2138 013a 06       		.uleb128 0x6
 2139 013b 40       		.uleb128 0x40
 2140 013c 18       		.uleb128 0x18
 2141 013d 9742     		.uleb128 0x2117
 2142 013f 19       		.uleb128 0x19
 2143 0140 01       		.uleb128 0x1
 2144 0141 13       		.uleb128 0x13
 2145 0142 00       		.byte	0
 2146 0143 00       		.byte	0
 2147 0144 14       		.uleb128 0x14
 2148 0145 2E       		.uleb128 0x2e
 2149 0146 01       		.byte	0x1
 2150 0147 3F       		.uleb128 0x3f
 2151 0148 19       		.uleb128 0x19
 2152 0149 03       		.uleb128 0x3
 2153 014a 0E       		.uleb128 0xe
 2154 014b 3A       		.uleb128 0x3a
 2155 014c 0B       		.uleb128 0xb
 2156 014d 3B       		.uleb128 0x3b
 2157 014e 05       		.uleb128 0x5
 2158 014f 27       		.uleb128 0x27
 2159 0150 19       		.uleb128 0x19
 2160 0151 11       		.uleb128 0x11
 2161 0152 01       		.uleb128 0x1
 2162 0153 12       		.uleb128 0x12
 2163 0154 06       		.uleb128 0x6
 2164 0155 40       		.uleb128 0x40
 2165 0156 18       		.uleb128 0x18
 2166 0157 9642     		.uleb128 0x2116
 2167 0159 19       		.uleb128 0x19
 2168 015a 01       		.uleb128 0x1
 2169 015b 13       		.uleb128 0x13
 2170 015c 00       		.byte	0
 2171 015d 00       		.byte	0
 2172 015e 15       		.uleb128 0x15
 2173 015f 34       		.uleb128 0x34
 2174 0160 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 54


 2175 0161 03       		.uleb128 0x3
 2176 0162 0E       		.uleb128 0xe
 2177 0163 3A       		.uleb128 0x3a
 2178 0164 0B       		.uleb128 0xb
 2179 0165 3B       		.uleb128 0x3b
 2180 0166 0B       		.uleb128 0xb
 2181 0167 49       		.uleb128 0x49
 2182 0168 13       		.uleb128 0x13
 2183 0169 3F       		.uleb128 0x3f
 2184 016a 19       		.uleb128 0x19
 2185 016b 02       		.uleb128 0x2
 2186 016c 18       		.uleb128 0x18
 2187 016d 00       		.byte	0
 2188 016e 00       		.byte	0
 2189 016f 00       		.byte	0
 2190              		.section	.debug_aranges,"",%progbits
 2191 0000 A4000000 		.4byte	0xa4
 2192 0004 0200     		.2byte	0x2
 2193 0006 00000000 		.4byte	.Ldebug_info0
 2194 000a 04       		.byte	0x4
 2195 000b 00       		.byte	0
 2196 000c 0000     		.2byte	0
 2197 000e 0000     		.2byte	0
 2198 0010 00000000 		.4byte	.LFB0
 2199 0014 24000000 		.4byte	.LFE0-.LFB0
 2200 0018 00000000 		.4byte	.LFB1
 2201 001c FC010000 		.4byte	.LFE1-.LFB1
 2202 0020 00000000 		.4byte	.LFB2
 2203 0024 28000000 		.4byte	.LFE2-.LFB2
 2204 0028 00000000 		.4byte	.LFB3
 2205 002c 18000000 		.4byte	.LFE3-.LFB3
 2206 0030 00000000 		.4byte	.LFB4
 2207 0034 1C000000 		.4byte	.LFE4-.LFB4
 2208 0038 00000000 		.4byte	.LFB5
 2209 003c 1C000000 		.4byte	.LFE5-.LFB5
 2210 0040 00000000 		.4byte	.LFB6
 2211 0044 48000000 		.4byte	.LFE6-.LFB6
 2212 0048 00000000 		.4byte	.LFB7
 2213 004c 44000000 		.4byte	.LFE7-.LFB7
 2214 0050 00000000 		.4byte	.LFB8
 2215 0054 1C000000 		.4byte	.LFE8-.LFB8
 2216 0058 00000000 		.4byte	.LFB9
 2217 005c 30000000 		.4byte	.LFE9-.LFB9
 2218 0060 00000000 		.4byte	.LFB10
 2219 0064 2C000000 		.4byte	.LFE10-.LFB10
 2220 0068 00000000 		.4byte	.LFB11
 2221 006c 1C000000 		.4byte	.LFE11-.LFB11
 2222 0070 00000000 		.4byte	.LFB12
 2223 0074 1C000000 		.4byte	.LFE12-.LFB12
 2224 0078 00000000 		.4byte	.LFB13
 2225 007c 30000000 		.4byte	.LFE13-.LFB13
 2226 0080 00000000 		.4byte	.LFB14
 2227 0084 2C000000 		.4byte	.LFE14-.LFB14
 2228 0088 00000000 		.4byte	.LFB15
 2229 008c A4000000 		.4byte	.LFE15-.LFB15
 2230 0090 00000000 		.4byte	.LFB16
 2231 0094 98000000 		.4byte	.LFE16-.LFB16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 55


 2232 0098 00000000 		.4byte	.LFB17
 2233 009c 80000000 		.4byte	.LFE17-.LFB17
 2234 00a0 00000000 		.4byte	0
 2235 00a4 00000000 		.4byte	0
 2236              		.section	.debug_ranges,"",%progbits
 2237              	.Ldebug_ranges0:
 2238 0000 00000000 		.4byte	.LFB0
 2239 0004 24000000 		.4byte	.LFE0
 2240 0008 00000000 		.4byte	.LFB1
 2241 000c FC010000 		.4byte	.LFE1
 2242 0010 00000000 		.4byte	.LFB2
 2243 0014 28000000 		.4byte	.LFE2
 2244 0018 00000000 		.4byte	.LFB3
 2245 001c 18000000 		.4byte	.LFE3
 2246 0020 00000000 		.4byte	.LFB4
 2247 0024 1C000000 		.4byte	.LFE4
 2248 0028 00000000 		.4byte	.LFB5
 2249 002c 1C000000 		.4byte	.LFE5
 2250 0030 00000000 		.4byte	.LFB6
 2251 0034 48000000 		.4byte	.LFE6
 2252 0038 00000000 		.4byte	.LFB7
 2253 003c 44000000 		.4byte	.LFE7
 2254 0040 00000000 		.4byte	.LFB8
 2255 0044 1C000000 		.4byte	.LFE8
 2256 0048 00000000 		.4byte	.LFB9
 2257 004c 30000000 		.4byte	.LFE9
 2258 0050 00000000 		.4byte	.LFB10
 2259 0054 2C000000 		.4byte	.LFE10
 2260 0058 00000000 		.4byte	.LFB11
 2261 005c 1C000000 		.4byte	.LFE11
 2262 0060 00000000 		.4byte	.LFB12
 2263 0064 1C000000 		.4byte	.LFE12
 2264 0068 00000000 		.4byte	.LFB13
 2265 006c 30000000 		.4byte	.LFE13
 2266 0070 00000000 		.4byte	.LFB14
 2267 0074 2C000000 		.4byte	.LFE14
 2268 0078 00000000 		.4byte	.LFB15
 2269 007c A4000000 		.4byte	.LFE15
 2270 0080 00000000 		.4byte	.LFB16
 2271 0084 98000000 		.4byte	.LFE16
 2272 0088 00000000 		.4byte	.LFB17
 2273 008c 80000000 		.4byte	.LFE17
 2274 0090 00000000 		.4byte	0
 2275 0094 00000000 		.4byte	0
 2276              		.section	.debug_line,"",%progbits
 2277              	.Ldebug_line0:
 2278 0000 2E020000 		.section	.debug_str,"MS",%progbits,1
 2278      02004200 
 2278      00000201 
 2278      FB0E0D00 
 2278      01010101 
 2279              	.LASF10:
 2280 0000 75696E74 		.ascii	"uint16\000"
 2280      313600
 2281              	.LASF48:
 2282 0007 61646347 		.ascii	"adcGain\000"
 2282      61696E00 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 56


 2283              	.LASF23:
 2284 000f 636F756E 		.ascii	"counts\000"
 2284      747300
 2285              	.LASF54:
 2286 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2286      436F756E 
 2286      7473546F 
 2286      5F566F6C 
 2286      747300
 2287              	.LASF4:
 2288 0029 6C6F6E67 		.ascii	"long int\000"
 2288      20696E74 
 2288      00
 2289              	.LASF7:
 2290 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2290      206C6F6E 
 2290      6720756E 
 2290      7369676E 
 2290      65642069 
 2291              	.LASF24:
 2292 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2292      496E7075 
 2292      7473506C 
 2292      6163656D 
 2292      656E7400 
 2293              	.LASF28:
 2294 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2294      53746172 
 2294      74436F6E 
 2294      76657274 
 2294      00
 2295              	.LASF6:
 2296 006e 6C6F6E67 		.ascii	"long long int\000"
 2296      206C6F6E 
 2296      6720696E 
 2296      7400
 2297              	.LASF0:
 2298 007c 7369676E 		.ascii	"signed char\000"
 2298      65642063 
 2298      68617200 
 2299              	.LASF30:
 2300 0088 73746174 		.ascii	"status\000"
 2300      757300
 2301              	.LASF13:
 2302 008f 696E7433 		.ascii	"int32\000"
 2302      3200
 2303              	.LASF25:
 2304 0095 4144435F 		.ascii	"ADC_Start\000"
 2304      53746172 
 2304      7400
 2305              	.LASF62:
 2306 009f 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 2306      73657273 
 2306      5C53616D 
 2306      75656C5C 
 2306      446F6375 
 2307 00cd 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 57


 2307      5C61726D 
 2307      5F636F6E 
 2307      74726F6C 
 2307      6C65725F 
 2308 00fd 00       		.ascii	"\000"
 2309              	.LASF52:
 2310 00fe 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2310      436F756E 
 2310      7473546F 
 2310      5F75566F 
 2310      6C747300 
 2311              	.LASF59:
 2312 0112 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2312      636F756E 
 2312      74735065 
 2312      72313056 
 2312      6F6C7400 
 2313              	.LASF9:
 2314 0126 75696E74 		.ascii	"uint8\000"
 2314      3800
 2315              	.LASF16:
 2316 012c 646F7562 		.ascii	"double\000"
 2316      6C6500
 2317              	.LASF11:
 2318 0133 75696E74 		.ascii	"uint32\000"
 2318      333200
 2319              	.LASF38:
 2320 013a 6D61736B 		.ascii	"mask\000"
 2320      00
 2321              	.LASF57:
 2322 013f 4144435F 		.ascii	"ADC_initVar\000"
 2322      696E6974 
 2322      56617200 
 2323              	.LASF33:
 2324 014b 7265744D 		.ascii	"retMode\000"
 2324      6F646500 
 2325              	.LASF43:
 2326 0153 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2326      5365744C 
 2326      696D6974 
 2326      4D61736B 
 2326      00
 2327              	.LASF8:
 2328 0164 756E7369 		.ascii	"unsigned int\000"
 2328      676E6564 
 2328      20696E74 
 2328      00
 2329              	.LASF53:
 2330 0171 75566F6C 		.ascii	"uVolts\000"
 2330      747300
 2331              	.LASF5:
 2332 0178 6C6F6E67 		.ascii	"long unsigned int\000"
 2332      20756E73 
 2332      69676E65 
 2332      6420696E 
 2332      7400
 2333              	.LASF44:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 58


 2334 018a 4144435F 		.ascii	"ADC_SetSatMask\000"
 2334      53657453 
 2334      61744D61 
 2334      736B00
 2335              	.LASF55:
 2336 0199 766F6C74 		.ascii	"volts\000"
 2336      7300
 2337              	.LASF22:
 2338 019f 746D7052 		.ascii	"tmpRegVal\000"
 2338      65675661 
 2338      6C00
 2339              	.LASF3:
 2340 01a9 73686F72 		.ascii	"short unsigned int\000"
 2340      7420756E 
 2340      7369676E 
 2340      65642069 
 2340      6E7400
 2341              	.LASF29:
 2342 01bc 4144435F 		.ascii	"ADC_StopConvert\000"
 2342      53746F70 
 2342      436F6E76 
 2342      65727400 
 2343              	.LASF2:
 2344 01cc 73686F72 		.ascii	"short int\000"
 2344      7420696E 
 2344      7400
 2345              	.LASF51:
 2346 01d6 6D566F6C 		.ascii	"mVolts\000"
 2346      747300
 2347              	.LASF19:
 2348 01dd 72656733 		.ascii	"reg32\000"
 2348      3200
 2349              	.LASF14:
 2350 01e3 666C6F61 		.ascii	"float32\000"
 2350      74333200 
 2351              	.LASF20:
 2352 01eb 73697A65 		.ascii	"sizetype\000"
 2352      74797065 
 2352      00
 2353              	.LASF40:
 2354 01f4 6C6F774C 		.ascii	"lowLimit\000"
 2354      696D6974 
 2354      00
 2355              	.LASF41:
 2356 01fd 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2356      53657448 
 2356      6967684C 
 2356      696D6974 
 2356      00
 2357              	.LASF31:
 2358 020e 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2358      4973456E 
 2358      64436F6E 
 2358      76657273 
 2358      696F6E00 
 2359              	.LASF17:
 2360 0222 696E7436 		.ascii	"int64\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 59


 2360      3400
 2361              	.LASF37:
 2362 0228 4144435F 		.ascii	"ADC_SetChanMask\000"
 2362      53657443 
 2362      68616E4D 
 2362      61736B00 
 2363              	.LASF47:
 2364 0238 4144435F 		.ascii	"ADC_SetGain\000"
 2364      53657447 
 2364      61696E00 
 2365              	.LASF15:
 2366 0244 666C6F61 		.ascii	"float\000"
 2366      7400
 2367              	.LASF42:
 2368 024a 68696768 		.ascii	"highLimit\000"
 2368      4C696D69 
 2368      7400
 2369              	.LASF49:
 2370 0254 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2370      436F756E 
 2370      7473546F 
 2370      5F6D566F 
 2370      6C747300 
 2371              	.LASF39:
 2372 0268 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2372      5365744C 
 2372      6F774C69 
 2372      6D697400 
 2373              	.LASF61:
 2374 0278 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2374      6E657261 
 2374      7465645F 
 2374      536F7572 
 2374      63655C50 
 2375              	.LASF1:
 2376 0297 756E7369 		.ascii	"unsigned char\000"
 2376      676E6564 
 2376      20636861 
 2376      7200
 2377              	.LASF58:
 2378 02a5 4144435F 		.ascii	"ADC_offset\000"
 2378      6F666673 
 2378      657400
 2379              	.LASF60:
 2380 02b0 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2380      4320342E 
 2380      382E3420 
 2380      32303134 
 2380      30353236 
 2381 02e3 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2381      20726576 
 2381      6973696F 
 2381      6E203231 
 2381      31333538 
 2382 0316 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2382      74643D67 
 2382      6E753939 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccJI7Tf2.s 			page 60


 2382      202D6666 
 2382      756E6374 
 2383              	.LASF27:
 2384 0337 4144435F 		.ascii	"ADC_Stop\000"
 2384      53746F70 
 2384      00
 2385              	.LASF21:
 2386 0340 63684E75 		.ascii	"chNum\000"
 2386      6D00
 2387              	.LASF34:
 2388 0346 6368616E 		.ascii	"chan\000"
 2388      00
 2389              	.LASF18:
 2390 034b 63686172 		.ascii	"char\000"
 2390      00
 2391              	.LASF56:
 2392 0350 4144435F 		.ascii	"ADC_channelsConfig\000"
 2392      6368616E 
 2392      6E656C73 
 2392      436F6E66 
 2392      696700
 2393              	.LASF46:
 2394 0363 6F666673 		.ascii	"offset\000"
 2394      657400
 2395              	.LASF50:
 2396 036a 61646343 		.ascii	"adcCounts\000"
 2396      6F756E74 
 2396      7300
 2397              	.LASF26:
 2398 0374 4144435F 		.ascii	"ADC_Enable\000"
 2398      456E6162 
 2398      6C6500
 2399              	.LASF12:
 2400 037f 696E7431 		.ascii	"int16\000"
 2400      3600
 2401              	.LASF45:
 2402 0385 4144435F 		.ascii	"ADC_SetOffset\000"
 2402      5365744F 
 2402      66667365 
 2402      7400
 2403              	.LASF36:
 2404 0393 4144435F 		.ascii	"ADC_Init\000"
 2404      496E6974 
 2404      00
 2405              	.LASF35:
 2406 039c 72657375 		.ascii	"result\000"
 2406      6C7400
 2407              	.LASF32:
 2408 03a3 4144435F 		.ascii	"ADC_GetResult16\000"
 2408      47657452 
 2408      6573756C 
 2408      74313600 
 2409              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

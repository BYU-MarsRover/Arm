ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 02000000 		.word	2
  31 0004 02000000 		.word	2
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000002u, 0x00000002u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 5D4B     		ldr	r3, .L15
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 5B4B     		ldr	r3, .L15+4
 104 001a 0322     		mov	r2, #3
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 5B4B     		ldr	r3, .L15+8
 108 0020 5B4A     		ldr	r2, .L15+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 5B4B     		ldr	r3, .L15+16
 112 0026 5C4A     		ldr	r2, .L15+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 5C4B     		ldr	r3, .L15+24
 116 002c 5C4A     		ldr	r2, .L15+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 5C4B     		ldr	r3, .L15+32
 120 0032 8022     		mov	r2, #128
 121 0034 D205     		lsl	r2, r2, #23
 122 0036 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 123              		.loc 1 150 0
 124 0038 5B4B     		ldr	r3, .L15+36
 125 003a 5C4A     		ldr	r2, .L15+40
 126 003c 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 127              		.loc 1 151 0
 128 003e 5C4B     		ldr	r3, .L15+44
 129 0040 5A4A     		ldr	r2, .L15+40
 130 0042 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 6


 131              		.loc 1 155 0
 132 0044 5B4B     		ldr	r3, .L15+48
 133 0046 5B4A     		ldr	r2, .L15+48
 134 0048 1268     		ldr	r2, [r2]
 135 004a 8021     		mov	r1, #128
 136 004c 4902     		lsl	r1, r1, #9
 137 004e 0A43     		orr	r2, r1
 138 0050 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 139              		.loc 1 158 0
 140 0052 594B     		ldr	r3, .L15+52
 141 0054 584A     		ldr	r2, .L15+52
 142 0056 1268     		ldr	r2, [r2]
 143 0058 8021     		mov	r1, #128
 144 005a 4902     		lsl	r1, r1, #9
 145 005c 0A43     		orr	r2, r1
 146 005e 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 147              		.loc 1 162 0
 148 0060 564B     		ldr	r3, .L15+56
 149 0062 0022     		mov	r2, #0
 150 0064 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 151              		.loc 1 163 0
 152 0066 564B     		ldr	r3, .L15+60
 153 0068 0022     		mov	r2, #0
 154 006a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 155              		.loc 1 164 0
 156 006c 554B     		ldr	r3, .L15+64
 157 006e 0122     		mov	r2, #1
 158 0070 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 159              		.loc 1 167 0
 160 0072 554B     		ldr	r3, .L15+68
 161 0074 0222     		mov	r2, #2
 162 0076 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 163              		.loc 1 171 0
 164 0078 544B     		ldr	r3, .L15+72
 165 007a 1B68     		ldr	r3, [r3]
 166 007c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 167              		.loc 1 172 0
 168 007e 7A68     		ldr	r2, [r7, #4]
 169 0080 534B     		ldr	r3, .L15+76
 170 0082 1340     		and	r3, r2
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 7


 171 0084 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 172              		.loc 1 178 0
 173 0086 7B68     		ldr	r3, [r7, #4]
 174 0088 0122     		mov	r2, #1
 175 008a 1343     		orr	r3, r2
 176 008c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 177              		.loc 1 191 0
 178 008e 4F4B     		ldr	r3, .L15+72
 179 0090 7A68     		ldr	r2, [r7, #4]
 180 0092 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 181              		.loc 1 197 0
 182 0094 0023     		mov	r3, #0
 183 0096 FB60     		str	r3, [r7, #12]
 184 0098 6EE0     		b	.L6
 185              	.L14:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 186              		.loc 1 199 0
 187 009a 4E4B     		ldr	r3, .L15+80
 188 009c FA68     		ldr	r2, [r7, #12]
 189 009e 9200     		lsl	r2, r2, #2
 190 00a0 D258     		ldr	r2, [r2, r3]
 191 00a2 DC23     		mov	r3, #220
 192 00a4 9B01     		lsl	r3, r3, #6
 193 00a6 1340     		and	r3, r2
 194 00a8 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 195              		.loc 1 201 0
 196 00aa 4B4A     		ldr	r2, .L15+84
 197 00ac FB68     		ldr	r3, [r7, #12]
 198 00ae D318     		add	r3, r2, r3
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 8


 199 00b0 1B78     		ldrb	r3, [r3]
 200 00b2 7A68     		ldr	r2, [r7, #4]
 201 00b4 1343     		orr	r3, r2
 202 00b6 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 203              		.loc 1 218 0
 204 00b8 FB68     		ldr	r3, [r7, #12]
 205 00ba 9B00     		lsl	r3, r3, #2
 206 00bc 474A     		ldr	r2, .L15+88
 207 00be 9B18     		add	r3, r3, r2
 208 00c0 7A68     		ldr	r2, [r7, #4]
 209 00c2 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 210              		.loc 1 220 0
 211 00c4 434B     		ldr	r3, .L15+80
 212 00c6 FA68     		ldr	r2, [r7, #12]
 213 00c8 9200     		lsl	r2, r2, #2
 214 00ca D258     		ldr	r2, [r2, r3]
 215 00cc 0123     		mov	r3, #1
 216 00ce 1340     		and	r3, r2
 217 00d0 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 218              		.loc 1 222 0
 219 00d2 3A4B     		ldr	r3, .L15+56
 220 00d4 394A     		ldr	r2, .L15+56
 221 00d6 1168     		ldr	r1, [r2]
 222 00d8 FA68     		ldr	r2, [r7, #12]
 223 00da 0120     		mov	r0, #1
 224 00dc 041C     		mov	r4, r0
 225 00de 9440     		lsl	r4, r4, r2
 226 00e0 221C     		mov	r2, r4
 227 00e2 92B2     		uxth	r2, r2
 228 00e4 0A43     		orr	r2, r1
 229 00e6 1A60     		str	r2, [r3]
 230              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 231              		.loc 1 225 0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 9


 232 00e8 3A4B     		ldr	r3, .L15+80
 233 00ea FA68     		ldr	r2, [r7, #12]
 234 00ec 9200     		lsl	r2, r2, #2
 235 00ee D258     		ldr	r2, [r2, r3]
 236 00f0 0223     		mov	r3, #2
 237 00f2 1340     		and	r3, r2
 238 00f4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 239              		.loc 1 227 0
 240 00f6 324B     		ldr	r3, .L15+60
 241 00f8 314A     		ldr	r2, .L15+60
 242 00fa 1168     		ldr	r1, [r2]
 243 00fc FA68     		ldr	r2, [r7, #12]
 244 00fe 0120     		mov	r0, #1
 245 0100 041C     		mov	r4, r0
 246 0102 9440     		lsl	r4, r4, r2
 247 0104 221C     		mov	r2, r4
 248 0106 92B2     		uxth	r2, r2
 249 0108 0A43     		orr	r2, r1
 250 010a 1A60     		str	r2, [r3]
 251              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 252              		.loc 1 247 0
 253 010c 314B     		ldr	r3, .L15+80
 254 010e FA68     		ldr	r2, [r7, #12]
 255 0110 9200     		lsl	r2, r2, #2
 256 0112 D258     		ldr	r2, [r2, r3]
 257 0114 8023     		mov	r3, #128
 258 0116 9B00     		lsl	r3, r3, #2
 259 0118 1340     		and	r3, r2
 260 011a 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 261              		.loc 1 249 0
 262 011c 8023     		mov	r3, #128
 263 011e 5B00     		lsl	r3, r3, #1
 264 0120 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 10


 265 0122 02E0     		b	.L10
 266              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 267              		.loc 1 253 0
 268 0124 8023     		mov	r3, #128
 269 0126 5B01     		lsl	r3, r3, #5
 270 0128 BB60     		str	r3, [r7, #8]
 271              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 272              		.loc 1 256 0
 273 012a 2A4B     		ldr	r3, .L15+80
 274 012c FA68     		ldr	r2, [r7, #12]
 275 012e 9200     		lsl	r2, r2, #2
 276 0130 D258     		ldr	r2, [r2, r3]
 277 0132 8023     		mov	r3, #128
 278 0134 5B00     		lsl	r3, r3, #1
 279 0136 1340     		and	r3, r2
 280 0138 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 281              		.loc 1 263 0
 282 013a 294B     		ldr	r3, .L15+92
 283 013c FA68     		ldr	r2, [r7, #12]
 284 013e 5200     		lsl	r2, r2, #1
 285 0140 0021     		mov	r1, #0
 286 0142 D152     		strh	r1, [r2, r3]
 287 0144 04E0     		b	.L12
 288              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 289              		.loc 1 272 0
 290 0146 264B     		ldr	r3, .L15+92
 291 0148 FA68     		ldr	r2, [r7, #12]
 292 014a 5200     		lsl	r2, r2, #1
 293 014c 0021     		mov	r1, #0
 294 014e D152     		strh	r1, [r2, r3]
 295              	.L12:
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 11


 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 296              		.loc 1 276 0
 297 0150 BB68     		ldr	r3, [r7, #8]
 298 0152 244A     		ldr	r2, .L15+96
 299 0154 5343     		mul	r3, r2
 300 0156 8022     		mov	r2, #128
 301 0158 D200     		lsl	r2, r2, #3
 302 015a 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 303              		.loc 1 277 0
 304 015c 002B     		cmp	r3, #0
 305 015e 01DA     		bge	.L13
 306 0160 214C     		ldr	r4, .L15+100
 307 0162 1B19     		add	r3, r3, r4
 308              	.L13:
 309 0164 DB12     		asr	r3, r3, #11
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 310              		.loc 1 276 0
 311 0166 9BB2     		uxth	r3, r3
 312 0168 19B2     		sxth	r1, r3
 313 016a 204B     		ldr	r3, .L15+104
 314 016c FA68     		ldr	r2, [r7, #12]
 315 016e 9200     		lsl	r2, r2, #2
 316 0170 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 317              		.loc 1 197 0
 318 0172 FB68     		ldr	r3, [r7, #12]
 319 0174 0133     		add	r3, r3, #1
 320 0176 FB60     		str	r3, [r7, #12]
 321              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 322              		.loc 1 197 0 is_stmt 0 discriminator 1
 323 0178 FB68     		ldr	r3, [r7, #12]
 324 017a 012B     		cmp	r3, #1
 325 017c 8DD9     		bls	.L14
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 326              		.loc 1 279 0 is_stmt 1
 327 017e BD46     		mov	sp, r7
 328 0180 05B0     		add	sp, sp, #20
 329              		@ sp needed
 330 0182 90BD     		pop	{r4, r7, pc}
 331              	.L16:
 332              		.align	2
 333              	.L15:
 334 0184 00000000 		.word	ADC_ISR
 335 0188 20001A40 		.word	1075445792
 336 018c 00001A40 		.word	1075445760
 337 0190 40200013 		.word	318775360
 338 0194 04001A40 		.word	1075445764
 339 0198 8C000080 		.word	-2147483508
 340 019c 18001A40 		.word	1075445784
 341 01a0 0000FF07 		.word	134152192
 342 01a4 1C001A40 		.word	1075445788
 343 01a8 10001A40 		.word	1075445776
 344 01ac 02000200 		.word	131074
 345 01b0 14001A40 		.word	1075445780
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 12


 346 01b4 00031A40 		.word	1075446528
 347 01b8 40031A40 		.word	1075446592
 348 01bc 28021A40 		.word	1075446312
 349 01c0 38021A40 		.word	1075446328
 350 01c4 18021A40 		.word	1075446296
 351 01c8 000F1A40 		.word	1075449600
 352 01cc 30001A40 		.word	1075445808
 353 01d0 FFFFFFDF 		.word	-536870913
 354 01d4 00000000 		.word	ADC_channelsConfig
 355 01d8 08000000 		.word	ADC_InputsPlacement.4717
 356 01dc 80001A40 		.word	1075445888
 357 01e0 00000000 		.word	ADC_offset
 358 01e4 10270000 		.word	10000
 359 01e8 FF070000 		.word	2047
 360 01ec 00000000 		.word	ADC_countsPer10Volt
 361              		.cfi_endproc
 362              	.LFE1:
 363              		.size	ADC_Init, .-ADC_Init
 364              		.section	.text.ADC_Enable,"ax",%progbits
 365              		.align	2
 366              		.global	ADC_Enable
 367              		.code	16
 368              		.thumb_func
 369              		.type	ADC_Enable, %function
 370              	ADC_Enable:
 371              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 372              		.loc 1 296 0
 373              		.cfi_startproc
 374 0000 80B5     		push	{r7, lr}
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 0002 00AF     		add	r7, sp, #0
 379              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 380              		.loc 1 297 0
 381 0004 074B     		ldr	r3, .L19
 382 0006 1B68     		ldr	r3, [r3]
 383 0008 002B     		cmp	r3, #0
 384 000a 09DB     		blt	.L17
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 13


 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 385              		.loc 1 307 0
 386 000c 054B     		ldr	r3, .L19
 387 000e 054A     		ldr	r2, .L19
 388 0010 1268     		ldr	r2, [r2]
 389 0012 8021     		mov	r1, #128
 390 0014 0906     		lsl	r1, r1, #24
 391 0016 0A43     		orr	r2, r1
 392 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 393              		.loc 1 310 0
 394 001a 0A20     		mov	r0, #10
 395 001c FFF7FEFF 		bl	CyDelayUs
 396              	.L17:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 397              		.loc 1 312 0
 398 0020 BD46     		mov	sp, r7
 399              		@ sp needed
 400 0022 80BD     		pop	{r7, pc}
 401              	.L20:
 402              		.align	2
 403              	.L19:
 404 0024 00001A40 		.word	1075445760
 405              		.cfi_endproc
 406              	.LFE2:
 407              		.size	ADC_Enable, .-ADC_Enable
 408              		.section	.text.ADC_Stop,"ax",%progbits
 409              		.align	2
 410              		.global	ADC_Stop
 411              		.code	16
 412              		.thumb_func
 413              		.type	ADC_Stop, %function
 414              	ADC_Stop:
 415              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 14


 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 416              		.loc 1 331 0
 417              		.cfi_startproc
 418 0000 80B5     		push	{r7, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 424              		.loc 1 332 0
 425 0004 034B     		ldr	r3, .L22
 426 0006 034A     		ldr	r2, .L22
 427 0008 1268     		ldr	r2, [r2]
 428 000a 5200     		lsl	r2, r2, #1
 429 000c 5208     		lsr	r2, r2, #1
 430 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 431              		.loc 1 333 0
 432 0010 BD46     		mov	sp, r7
 433              		@ sp needed
 434 0012 80BD     		pop	{r7, pc}
 435              	.L23:
 436              		.align	2
 437              	.L22:
 438 0014 00001A40 		.word	1075445760
 439              		.cfi_endproc
 440              	.LFE3:
 441              		.size	ADC_Stop, .-ADC_Stop
 442              		.section	.text.ADC_StartConvert,"ax",%progbits
 443              		.align	2
 444              		.global	ADC_StartConvert
 445              		.code	16
 446              		.thumb_func
 447              		.type	ADC_StartConvert, %function
 448              	ADC_StartConvert:
 449              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 15


 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 450              		.loc 1 357 0
 451              		.cfi_startproc
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 00AF     		add	r7, sp, #0
 457              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 458              		.loc 1 359 0
 459 0004 044B     		ldr	r3, .L25
 460 0006 044A     		ldr	r2, .L25
 461 0008 1268     		ldr	r2, [r2]
 462 000a 8021     		mov	r1, #128
 463 000c 4902     		lsl	r1, r1, #9
 464 000e 0A43     		orr	r2, r1
 465 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 466              		.loc 1 364 0
 467 0012 BD46     		mov	sp, r7
 468              		@ sp needed
 469 0014 80BD     		pop	{r7, pc}
 470              	.L26:
 471 0016 C046     		.align	2
 472              	.L25:
 473 0018 04001A40 		.word	1075445764
 474              		.cfi_endproc
 475              	.LFE4:
 476              		.size	ADC_StartConvert, .-ADC_StartConvert
 477              		.section	.text.ADC_StopConvert,"ax",%progbits
 478              		.align	2
 479              		.global	ADC_StopConvert
 480              		.code	16
 481              		.thumb_func
 482              		.type	ADC_StopConvert, %function
 483              	ADC_StopConvert:
 484              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 16


 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 485              		.loc 1 382 0
 486              		.cfi_startproc
 487 0000 80B5     		push	{r7, lr}
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 00AF     		add	r7, sp, #0
 492              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 493              		.loc 1 384 0
 494 0004 034B     		ldr	r3, .L28
 495 0006 034A     		ldr	r2, .L28
 496 0008 1168     		ldr	r1, [r2]
 497 000a 034A     		ldr	r2, .L28+4
 498 000c 0A40     		and	r2, r1
 499 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 500              		.loc 1 386 0
 501 0010 BD46     		mov	sp, r7
 502              		@ sp needed
 503 0012 80BD     		pop	{r7, pc}
 504              	.L29:
 505              		.align	2
 506              	.L28:
 507 0014 04001A40 		.word	1075445764
 508 0018 FFFFFEFF 		.word	-65537
 509              		.cfi_endproc
 510              	.LFE5:
 511              		.size	ADC_StopConvert, .-ADC_StopConvert
 512              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 513              		.align	2
 514              		.global	ADC_IsEndConversion
 515              		.code	16
 516              		.thumb_func
 517              		.type	ADC_IsEndConversion, %function
 518              	ADC_IsEndConversion:
 519              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 17


 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 520              		.loc 1 416 0
 521              		.cfi_startproc
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 84B0     		sub	sp, sp, #16
 527              		.cfi_def_cfa_offset 24
 528 0004 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 530 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 531              		.loc 1 417 0
 532 0008 0023     		mov	r3, #0
 533 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 534              		.loc 1 419 0
 535 000c 7A68     		ldr	r2, [r7, #4]
 536 000e 0323     		mov	r3, #3
 537 0010 1340     		and	r3, r2
 538 0012 11D0     		beq	.L31
 539              	.L33:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 540              		.loc 1 423 0 discriminator 1
 541 0014 0B4B     		ldr	r3, .L35
 542 0016 1A68     		ldr	r2, [r3]
 543 0018 0123     		mov	r3, #1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 18


 544 001a 1340     		and	r3, r2
 545 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 546              		.loc 1 424 0 discriminator 1
 547 001e FB68     		ldr	r3, [r7, #12]
 548 0020 002B     		cmp	r3, #0
 549 0022 03D1     		bne	.L32
 550 0024 7A68     		ldr	r2, [r7, #4]
 551 0026 0223     		mov	r3, #2
 552 0028 1340     		and	r3, r2
 553 002a F3D1     		bne	.L33
 554              	.L32:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 555              		.loc 1 426 0
 556 002c FB68     		ldr	r3, [r7, #12]
 557 002e 002B     		cmp	r3, #0
 558 0030 02D0     		beq	.L31
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 559              		.loc 1 429 0
 560 0032 044B     		ldr	r3, .L35
 561 0034 0122     		mov	r2, #1
 562 0036 1A60     		str	r2, [r3]
 563              	.L31:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 564              		.loc 1 450 0
 565 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 566              		.loc 1 451 0
 567 003a 181C     		mov	r0, r3
 568 003c BD46     		mov	sp, r7
 569 003e 04B0     		add	sp, sp, #16
 570              		@ sp needed
 571 0040 80BD     		pop	{r7, pc}
 572              	.L36:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 19


 573 0042 C046     		.align	2
 574              	.L35:
 575 0044 10021A40 		.word	1075446288
 576              		.cfi_endproc
 577              	.LFE6:
 578              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 579              		.section	.text.ADC_GetResult16,"ax",%progbits
 580              		.align	2
 581              		.global	ADC_GetResult16
 582              		.code	16
 583              		.thumb_func
 584              		.type	ADC_GetResult16, %function
 585              	ADC_GetResult16:
 586              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 587              		.loc 1 470 0
 588              		.cfi_startproc
 589 0000 80B5     		push	{r7, lr}
 590              		.cfi_def_cfa_offset 8
 591              		.cfi_offset 7, -8
 592              		.cfi_offset 14, -4
 593 0002 84B0     		sub	sp, sp, #16
 594              		.cfi_def_cfa_offset 24
 595 0004 00AF     		add	r7, sp, #0
 596              		.cfi_def_cfa_register 7
 597 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 598              		.loc 1 474 0
 599 0008 7B68     		ldr	r3, [r7, #4]
 600 000a 012B     		cmp	r3, #1
 601 000c 02D9     		bls	.L38
 602              		.loc 1 474 0 is_stmt 0 discriminator 1
 603 000e 0020     		mov	r0, #0
 604 0010 FFF7FEFF 		bl	CyHalt
 605              	.L38:
 475:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 20


 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 606              		.loc 1 476 0 is_stmt 1
 607 0014 7B68     		ldr	r3, [r7, #4]
 608 0016 012B     		cmp	r3, #1
 609 0018 08D8     		bhi	.L39
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 610              		.loc 1 478 0
 611 001a 7B68     		ldr	r3, [r7, #4]
 612 001c 9B00     		lsl	r3, r3, #2
 613 001e 084A     		ldr	r2, .L42
 614 0020 9B18     		add	r3, r3, r2
 615 0022 1B68     		ldr	r3, [r3]
 616 0024 1B04     		lsl	r3, r3, #16
 617 0026 1B0C     		lsr	r3, r3, #16
 618 0028 FB60     		str	r3, [r7, #12]
 619 002a 01E0     		b	.L40
 620              	.L39:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 621              		.loc 1 486 0
 622 002c 0023     		mov	r3, #0
 623 002e FB60     		str	r3, [r7, #12]
 624              	.L40:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 625              		.loc 1 490 0
 626 0030 FB68     		ldr	r3, [r7, #12]
 627 0032 9BB2     		uxth	r3, r3
 628 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 629              		.loc 1 491 0
 630 0036 181C     		mov	r0, r3
 631 0038 BD46     		mov	sp, r7
 632 003a 04B0     		add	sp, sp, #16
 633              		@ sp needed
 634 003c 80BD     		pop	{r7, pc}
 635              	.L43:
 636 003e C046     		.align	2
 637              	.L42:
 638 0040 80011A40 		.word	1075446144
 639              		.cfi_endproc
 640              	.LFE7:
 641              		.size	ADC_GetResult16, .-ADC_GetResult16
 642              		.section	.text.ADC_SetChanMask,"ax",%progbits
 643              		.align	2
 644              		.global	ADC_SetChanMask
 645              		.code	16
 646              		.thumb_func
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 21


 647              		.type	ADC_SetChanMask, %function
 648              	ADC_SetChanMask:
 649              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 650              		.loc 1 515 0
 651              		.cfi_startproc
 652 0000 80B5     		push	{r7, lr}
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0002 82B0     		sub	sp, sp, #8
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 661              		.loc 1 516 0
 662 0008 034B     		ldr	r3, .L45
 663 000a 7968     		ldr	r1, [r7, #4]
 664 000c 0322     		mov	r2, #3
 665 000e 0A40     		and	r2, r1
 666 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 667              		.loc 1 517 0
 668 0012 BD46     		mov	sp, r7
 669 0014 02B0     		add	sp, sp, #8
 670              		@ sp needed
 671 0016 80BD     		pop	{r7, pc}
 672              	.L46:
 673              		.align	2
 674              	.L45:
 675 0018 20001A40 		.word	1075445792
 676              		.cfi_endproc
 677              	.LFE8:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 22


 678              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 679              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 680              		.align	2
 681              		.global	ADC_SetLowLimit
 682              		.code	16
 683              		.thumb_func
 684              		.type	ADC_SetLowLimit, %function
 685              	ADC_SetLowLimit:
 686              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 687              		.loc 1 559 0
 688              		.cfi_startproc
 689 0000 80B5     		push	{r7, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 7, -8
 692              		.cfi_offset 14, -4
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 23


 693 0002 82B0     		sub	sp, sp, #8
 694              		.cfi_def_cfa_offset 16
 695 0004 00AF     		add	r7, sp, #0
 696              		.cfi_def_cfa_register 7
 697 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 698              		.loc 1 560 0
 699 0008 084B     		ldr	r3, .L48
 700 000a 084A     		ldr	r2, .L48
 701 000c 1268     		ldr	r2, [r2]
 702 000e 120C     		lsr	r2, r2, #16
 703 0010 1204     		lsl	r2, r2, #16
 704 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 705              		.loc 1 561 0
 706 0014 054B     		ldr	r3, .L48
 707 0016 054A     		ldr	r2, .L48
 708 0018 1168     		ldr	r1, [r2]
 709 001a 7A68     		ldr	r2, [r7, #4]
 710 001c 1204     		lsl	r2, r2, #16
 711 001e 120C     		lsr	r2, r2, #16
 712 0020 0A43     		orr	r2, r1
 713 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 714              		.loc 1 562 0
 715 0024 BD46     		mov	sp, r7
 716 0026 02B0     		add	sp, sp, #8
 717              		@ sp needed
 718 0028 80BD     		pop	{r7, pc}
 719              	.L49:
 720 002a C046     		.align	2
 721              	.L48:
 722 002c 18001A40 		.word	1075445784
 723              		.cfi_endproc
 724              	.LFE9:
 725              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 726              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 727              		.align	2
 728              		.global	ADC_SetHighLimit
 729              		.code	16
 730              		.thumb_func
 731              		.type	ADC_SetHighLimit, %function
 732              	ADC_SetHighLimit:
 733              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 24


 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 734              		.loc 1 580 0
 735              		.cfi_startproc
 736 0000 80B5     		push	{r7, lr}
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 7, -8
 739              		.cfi_offset 14, -4
 740 0002 82B0     		sub	sp, sp, #8
 741              		.cfi_def_cfa_offset 16
 742 0004 00AF     		add	r7, sp, #0
 743              		.cfi_def_cfa_register 7
 744 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 745              		.loc 1 581 0
 746 0008 074B     		ldr	r3, .L51
 747 000a 074A     		ldr	r2, .L51
 748 000c 1268     		ldr	r2, [r2]
 749 000e 1204     		lsl	r2, r2, #16
 750 0010 120C     		lsr	r2, r2, #16
 751 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 752              		.loc 1 582 0
 753 0014 044B     		ldr	r3, .L51
 754 0016 044A     		ldr	r2, .L51
 755 0018 1168     		ldr	r1, [r2]
 756 001a 7A68     		ldr	r2, [r7, #4]
 757 001c 1204     		lsl	r2, r2, #16
 758 001e 0A43     		orr	r2, r1
 759 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 760              		.loc 1 583 0
 761 0022 BD46     		mov	sp, r7
 762 0024 02B0     		add	sp, sp, #8
 763              		@ sp needed
 764 0026 80BD     		pop	{r7, pc}
 765              	.L52:
 766              		.align	2
 767              	.L51:
 768 0028 18001A40 		.word	1075445784
 769              		.cfi_endproc
 770              	.LFE10:
 771              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 772              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 773              		.align	2
 774              		.global	ADC_SetLimitMask
 775              		.code	16
 776              		.thumb_func
 777              		.type	ADC_SetLimitMask, %function
 778              	ADC_SetLimitMask:
 779              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 25


 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 780              		.loc 1 604 0
 781              		.cfi_startproc
 782 0000 80B5     		push	{r7, lr}
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 82B0     		sub	sp, sp, #8
 787              		.cfi_def_cfa_offset 16
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 791              		.loc 1 605 0
 792 0008 034B     		ldr	r3, .L54
 793 000a 7968     		ldr	r1, [r7, #4]
 794 000c 0322     		mov	r2, #3
 795 000e 0A40     		and	r2, r1
 796 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 797              		.loc 1 606 0
 798 0012 BD46     		mov	sp, r7
 799 0014 02B0     		add	sp, sp, #8
 800              		@ sp needed
 801 0016 80BD     		pop	{r7, pc}
 802              	.L55:
 803              		.align	2
 804              	.L54:
 805 0018 38021A40 		.word	1075446328
 806              		.cfi_endproc
 807              	.LFE11:
 808              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 809              		.section	.text.ADC_SetSatMask,"ax",%progbits
 810              		.align	2
 811              		.global	ADC_SetSatMask
 812              		.code	16
 813              		.thumb_func
 814              		.type	ADC_SetSatMask, %function
 815              	ADC_SetSatMask:
 816              	.LFB12:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 26


 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 817              		.loc 1 627 0
 818              		.cfi_startproc
 819 0000 80B5     		push	{r7, lr}
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0002 82B0     		sub	sp, sp, #8
 824              		.cfi_def_cfa_offset 16
 825 0004 00AF     		add	r7, sp, #0
 826              		.cfi_def_cfa_register 7
 827 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 828              		.loc 1 628 0
 829 0008 034B     		ldr	r3, .L57
 830 000a 7968     		ldr	r1, [r7, #4]
 831 000c 0322     		mov	r2, #3
 832 000e 0A40     		and	r2, r1
 833 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 834              		.loc 1 629 0
 835 0012 BD46     		mov	sp, r7
 836 0014 02B0     		add	sp, sp, #8
 837              		@ sp needed
 838 0016 80BD     		pop	{r7, pc}
 839              	.L58:
 840              		.align	2
 841              	.L57:
 842 0018 28021A40 		.word	1075446312
 843              		.cfi_endproc
 844              	.LFE12:
 845              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 846              		.section	.text.ADC_SetOffset,"ax",%progbits
 847              		.align	2
 848              		.global	ADC_SetOffset
 849              		.code	16
 850              		.thumb_func
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 27


 851              		.type	ADC_SetOffset, %function
 852              	ADC_SetOffset:
 853              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 854              		.loc 1 655 0
 855              		.cfi_startproc
 856 0000 80B5     		push	{r7, lr}
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 7, -8
 859              		.cfi_offset 14, -4
 860 0002 82B0     		sub	sp, sp, #8
 861              		.cfi_def_cfa_offset 16
 862 0004 00AF     		add	r7, sp, #0
 863              		.cfi_def_cfa_register 7
 864 0006 7860     		str	r0, [r7, #4]
 865 0008 0A1C     		mov	r2, r1
 866 000a BB1C     		add	r3, r7, #2
 867 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 868              		.loc 1 657 0
 869 000e 7B68     		ldr	r3, [r7, #4]
 870 0010 012B     		cmp	r3, #1
 871 0012 02D9     		bls	.L60
 872              		.loc 1 657 0 is_stmt 0 discriminator 1
 873 0014 0020     		mov	r0, #0
 874 0016 FFF7FEFF 		bl	CyHalt
 875              	.L60:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 876              		.loc 1 659 0 is_stmt 1
 877 001a 044B     		ldr	r3, .L61
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 28


 878 001c 7A68     		ldr	r2, [r7, #4]
 879 001e 5200     		lsl	r2, r2, #1
 880 0020 B91C     		add	r1, r7, #2
 881 0022 0988     		ldrh	r1, [r1]
 882 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 883              		.loc 1 660 0
 884 0026 BD46     		mov	sp, r7
 885 0028 02B0     		add	sp, sp, #8
 886              		@ sp needed
 887 002a 80BD     		pop	{r7, pc}
 888              	.L62:
 889              		.align	2
 890              	.L61:
 891 002c 00000000 		.word	ADC_offset
 892              		.cfi_endproc
 893              	.LFE13:
 894              		.size	ADC_SetOffset, .-ADC_SetOffset
 895              		.section	.text.ADC_SetGain,"ax",%progbits
 896              		.align	2
 897              		.global	ADC_SetGain
 898              		.code	16
 899              		.thumb_func
 900              		.type	ADC_SetGain, %function
 901              	ADC_SetGain:
 902              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 903              		.loc 1 689 0
 904              		.cfi_startproc
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 29


 905 0000 80B5     		push	{r7, lr}
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 82B0     		sub	sp, sp, #8
 910              		.cfi_def_cfa_offset 16
 911 0004 00AF     		add	r7, sp, #0
 912              		.cfi_def_cfa_register 7
 913 0006 7860     		str	r0, [r7, #4]
 914 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 915              		.loc 1 691 0
 916 000a 7B68     		ldr	r3, [r7, #4]
 917 000c 012B     		cmp	r3, #1
 918 000e 02D9     		bls	.L64
 919              		.loc 1 691 0 is_stmt 0 discriminator 1
 920 0010 0020     		mov	r0, #0
 921 0012 FFF7FEFF 		bl	CyHalt
 922              	.L64:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 923              		.loc 1 693 0 is_stmt 1
 924 0016 044B     		ldr	r3, .L65
 925 0018 7A68     		ldr	r2, [r7, #4]
 926 001a 9200     		lsl	r2, r2, #2
 927 001c 3968     		ldr	r1, [r7]
 928 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 929              		.loc 1 694 0
 930 0020 BD46     		mov	sp, r7
 931 0022 02B0     		add	sp, sp, #8
 932              		@ sp needed
 933 0024 80BD     		pop	{r7, pc}
 934              	.L66:
 935 0026 C046     		.align	2
 936              	.L65:
 937 0028 00000000 		.word	ADC_countsPer10Volt
 938              		.cfi_endproc
 939              	.LFE14:
 940              		.size	ADC_SetGain, .-ADC_SetGain
 941              		.global	__aeabi_idiv
 942              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 943              		.align	2
 944              		.global	ADC_CountsTo_mVolts
 945              		.code	16
 946              		.thumb_func
 947              		.type	ADC_CountsTo_mVolts, %function
 948              	ADC_CountsTo_mVolts:
 949              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 30


 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 950              		.loc 1 722 0
 951              		.cfi_startproc
 952 0000 80B5     		push	{r7, lr}
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
 956 0002 84B0     		sub	sp, sp, #16
 957              		.cfi_def_cfa_offset 24
 958 0004 00AF     		add	r7, sp, #0
 959              		.cfi_def_cfa_register 7
 960 0006 7860     		str	r0, [r7, #4]
 961 0008 0A1C     		mov	r2, r1
 962 000a BB1C     		add	r3, r7, #2
 963 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 964              		.loc 1 726 0
 965 000e 7B68     		ldr	r3, [r7, #4]
 966 0010 012B     		cmp	r3, #1
 967 0012 02D9     		bls	.L68
 968              		.loc 1 726 0 is_stmt 0 discriminator 1
 969 0014 0020     		mov	r0, #0
 970 0016 FFF7FEFF 		bl	CyHalt
 971              	.L68:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 31


 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 972              		.loc 1 737 0 is_stmt 1
 973 001a BB1C     		add	r3, r7, #2
 974 001c 1A88     		ldrh	r2, [r3]
 975 001e 1E4B     		ldr	r3, .L74
 976 0020 7968     		ldr	r1, [r7, #4]
 977 0022 4900     		lsl	r1, r1, #1
 978 0024 CB5A     		ldrh	r3, [r1, r3]
 979 0026 9BB2     		uxth	r3, r3
 980 0028 9BB2     		uxth	r3, r3
 981 002a D31A     		sub	r3, r2, r3
 982 002c 9AB2     		uxth	r2, r3
 983 002e BB1C     		add	r3, r7, #2
 984 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 985              		.loc 1 739 0
 986 0032 BB1C     		add	r3, r7, #2
 987 0034 0021     		mov	r1, #0
 988 0036 5B5E     		ldrsh	r3, [r3, r1]
 989 0038 184A     		ldr	r2, .L74+4
 990 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 991              		.loc 1 740 0
 992 003c BB1C     		add	r3, r7, #2
 993 003e 0021     		mov	r1, #0
 994 0040 5B5E     		ldrsh	r3, [r3, r1]
 995 0042 002B     		cmp	r3, #0
 996 0044 08DD     		ble	.L69
 997              		.loc 1 740 0 is_stmt 0 discriminator 1
 998 0046 164B     		ldr	r3, .L74+8
 999 0048 7968     		ldr	r1, [r7, #4]
 1000 004a 8900     		lsl	r1, r1, #2
 1001 004c CB58     		ldr	r3, [r1, r3]
 1002 004e 002B     		cmp	r3, #0
 1003 0050 00DA     		bge	.L70
 1004 0052 0133     		add	r3, r3, #1
 1005              	.L70:
 1006 0054 5B10     		asr	r3, r3, #1
 1007 0056 08E0     		b	.L71
 1008              	.L69:
 1009              		.loc 1 740 0 discriminator 2
 1010 0058 114B     		ldr	r3, .L74+8
 1011 005a 7968     		ldr	r1, [r7, #4]
 1012 005c 8900     		lsl	r1, r1, #2
 1013 005e CB58     		ldr	r3, [r1, r3]
 1014 0060 002B     		cmp	r3, #0
 1015 0062 00DA     		bge	.L72
 1016 0064 0133     		add	r3, r3, #1
 1017              	.L72:
 1018 0066 5B10     		asr	r3, r3, #1
 1019 0068 5B42     		neg	r3, r3
 1020              	.L71:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1021              		.loc 1 739 0 is_stmt 1
 1022 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 32


 1023              		.loc 1 741 0
 1024 006c 0C4B     		ldr	r3, .L74+8
 1025 006e 7968     		ldr	r1, [r7, #4]
 1026 0070 8900     		lsl	r1, r1, #2
 1027 0072 CB58     		ldr	r3, [r1, r3]
 1028 0074 101C     		mov	r0, r2
 1029 0076 191C     		mov	r1, r3
 1030 0078 FFF7FEFF 		bl	__aeabi_idiv
 1031 007c 031C     		mov	r3, r0
 1032 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1033              		.loc 1 739 0
 1034 0080 3B1C     		mov	r3, r7
 1035 0082 0E33     		add	r3, r3, #14
 1036 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1037              		.loc 1 743 0
 1038 0086 3B1C     		mov	r3, r7
 1039 0088 0E33     		add	r3, r3, #14
 1040 008a 1B88     		ldrh	r3, [r3]
 1041 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1042              		.loc 1 744 0
 1043 008e 181C     		mov	r0, r3
 1044 0090 BD46     		mov	sp, r7
 1045 0092 04B0     		add	sp, sp, #16
 1046              		@ sp needed
 1047 0094 80BD     		pop	{r7, pc}
 1048              	.L75:
 1049 0096 C046     		.align	2
 1050              	.L74:
 1051 0098 00000000 		.word	ADC_offset
 1052 009c 10270000 		.word	10000
 1053 00a0 00000000 		.word	ADC_countsPer10Volt
 1054              		.cfi_endproc
 1055              	.LFE15:
 1056              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1057              		.global	__aeabi_lmul
 1058              		.global	__aeabi_ldivmod
 1059              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1060              		.align	2
 1061              		.global	ADC_CountsTo_uVolts
 1062              		.code	16
 1063              		.thumb_func
 1064              		.type	ADC_CountsTo_uVolts, %function
 1065              	ADC_CountsTo_uVolts:
 1066              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 33


 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1067              		.loc 1 776 0
 1068              		.cfi_startproc
 1069 0000 B0B5     		push	{r4, r5, r7, lr}
 1070              		.cfi_def_cfa_offset 16
 1071              		.cfi_offset 4, -16
 1072              		.cfi_offset 5, -12
 1073              		.cfi_offset 7, -8
 1074              		.cfi_offset 14, -4
 1075 0002 86B0     		sub	sp, sp, #24
 1076              		.cfi_def_cfa_offset 40
 1077 0004 00AF     		add	r7, sp, #0
 1078              		.cfi_def_cfa_register 7
 1079 0006 F860     		str	r0, [r7, #12]
 1080 0008 0A1C     		mov	r2, r1
 1081 000a 3B1C     		mov	r3, r7
 1082 000c 0A33     		add	r3, r3, #10
 1083 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1084              		.loc 1 780 0
 1085 0010 FB68     		ldr	r3, [r7, #12]
 1086 0012 012B     		cmp	r3, #1
 1087 0014 02D9     		bls	.L77
 1088              		.loc 1 780 0 is_stmt 0 discriminator 1
 1089 0016 0020     		mov	r0, #0
 1090 0018 FFF7FEFF 		bl	CyHalt
 1091              	.L77:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 34


 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1092              		.loc 1 791 0 is_stmt 1
 1093 001c 3B1C     		mov	r3, r7
 1094 001e 0A33     		add	r3, r3, #10
 1095 0020 1A88     		ldrh	r2, [r3]
 1096 0022 1B4B     		ldr	r3, .L79+8
 1097 0024 F968     		ldr	r1, [r7, #12]
 1098 0026 4900     		lsl	r1, r1, #1
 1099 0028 CB5A     		ldrh	r3, [r1, r3]
 1100 002a 9BB2     		uxth	r3, r3
 1101 002c 9BB2     		uxth	r3, r3
 1102 002e D31A     		sub	r3, r2, r3
 1103 0030 9AB2     		uxth	r2, r3
 1104 0032 3B1C     		mov	r3, r7
 1105 0034 0A33     		add	r3, r3, #10
 1106 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1107              		.loc 1 793 0
 1108 0038 3B1C     		mov	r3, r7
 1109 003a 0A33     		add	r3, r3, #10
 1110 003c 1B88     		ldrh	r3, [r3]
 1111 003e 1BB2     		sxth	r3, r3
 1112 0040 3B60     		str	r3, [r7]
 1113 0042 DB17     		asr	r3, r3, #31
 1114 0044 7B60     		str	r3, [r7, #4]
 1115 0046 3868     		ldr	r0, [r7]
 1116 0048 7968     		ldr	r1, [r7, #4]
 1117 004a 104B     		ldr	r3, .L79+4
 1118 004c 0E4A     		ldr	r2, .L79
 1119 004e FFF7FEFF 		bl	__aeabi_lmul
 1120 0052 021C     		mov	r2, r0
 1121 0054 0B1C     		mov	r3, r1
 1122 0056 0F49     		ldr	r1, .L79+12
 1123 0058 F868     		ldr	r0, [r7, #12]
 1124 005a 8000     		lsl	r0, r0, #2
 1125 005c 4158     		ldr	r1, [r0, r1]
 1126 005e 0C1C     		mov	r4, r1
 1127 0060 C917     		asr	r1, r1, #31
 1128 0062 0D1C     		mov	r5, r1
 1129 0064 101C     		mov	r0, r2
 1130 0066 191C     		mov	r1, r3
 1131 0068 221C     		mov	r2, r4
 1132 006a 2B1C     		mov	r3, r5
 1133 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1134 0070 031C     		mov	r3, r0
 1135 0072 0C1C     		mov	r4, r1
 1136 0074 3B61     		str	r3, [r7, #16]
 1137 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1138              		.loc 1 795 0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 35


 1139 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1140              		.loc 1 796 0
 1141 007a 181C     		mov	r0, r3
 1142 007c BD46     		mov	sp, r7
 1143 007e 06B0     		add	sp, sp, #24
 1144              		@ sp needed
 1145 0080 B0BD     		pop	{r4, r5, r7, pc}
 1146              	.L80:
 1147 0082 C046C046 		.align	3
 1147      C046
 1148              	.L79:
 1149 0088 80969800 		.word	10000000
 1150 008c 00000000 		.word	0
 1151 0090 00000000 		.word	ADC_offset
 1152 0094 00000000 		.word	ADC_countsPer10Volt
 1153              		.cfi_endproc
 1154              	.LFE16:
 1155              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1156              		.global	__aeabi_i2f
 1157              		.global	__aeabi_fmul
 1158              		.global	__aeabi_fdiv
 1159              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1160              		.align	2
 1161              		.global	ADC_CountsTo_Volts
 1162              		.code	16
 1163              		.thumb_func
 1164              		.type	ADC_CountsTo_Volts, %function
 1165              	ADC_CountsTo_Volts:
 1166              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1167              		.loc 1 821 0
 1168              		.cfi_startproc
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 36


 1169 0000 90B5     		push	{r4, r7, lr}
 1170              		.cfi_def_cfa_offset 12
 1171              		.cfi_offset 4, -12
 1172              		.cfi_offset 7, -8
 1173              		.cfi_offset 14, -4
 1174 0002 85B0     		sub	sp, sp, #20
 1175              		.cfi_def_cfa_offset 32
 1176 0004 00AF     		add	r7, sp, #0
 1177              		.cfi_def_cfa_register 7
 1178 0006 7860     		str	r0, [r7, #4]
 1179 0008 0A1C     		mov	r2, r1
 1180 000a BB1C     		add	r3, r7, #2
 1181 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1182              		.loc 1 825 0
 1183 000e 7B68     		ldr	r3, [r7, #4]
 1184 0010 012B     		cmp	r3, #1
 1185 0012 02D9     		bls	.L82
 1186              		.loc 1 825 0 is_stmt 0 discriminator 1
 1187 0014 0020     		mov	r0, #0
 1188 0016 FFF7FEFF 		bl	CyHalt
 1189              	.L82:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1190              		.loc 1 836 0 is_stmt 1
 1191 001a BB1C     		add	r3, r7, #2
 1192 001c 1A88     		ldrh	r2, [r3]
 1193 001e 154B     		ldr	r3, .L84
 1194 0020 7968     		ldr	r1, [r7, #4]
 1195 0022 4900     		lsl	r1, r1, #1
 1196 0024 CB5A     		ldrh	r3, [r1, r3]
 1197 0026 9BB2     		uxth	r3, r3
 1198 0028 9BB2     		uxth	r3, r3
 1199 002a D31A     		sub	r3, r2, r3
 1200 002c 9AB2     		uxth	r2, r3
 1201 002e BB1C     		add	r3, r7, #2
 1202 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1203              		.loc 1 838 0
 1204 0032 BB1C     		add	r3, r7, #2
 1205 0034 0022     		mov	r2, #0
 1206 0036 9B5E     		ldrsh	r3, [r3, r2]
 1207 0038 181C     		mov	r0, r3
 1208 003a FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 37


 1209 003e 031C     		add	r3, r0, #0
 1210 0040 181C     		add	r0, r3, #0
 1211 0042 0D49     		ldr	r1, .L84+4
 1212 0044 FFF7FEFF 		bl	__aeabi_fmul
 1213 0048 031C     		add	r3, r0, #0
 1214 004a 1C1C     		add	r4, r3, #0
 1215 004c 0B4B     		ldr	r3, .L84+8
 1216 004e 7A68     		ldr	r2, [r7, #4]
 1217 0050 9200     		lsl	r2, r2, #2
 1218 0052 D358     		ldr	r3, [r2, r3]
 1219 0054 181C     		mov	r0, r3
 1220 0056 FFF7FEFF 		bl	__aeabi_i2f
 1221 005a 031C     		add	r3, r0, #0
 1222 005c 201C     		add	r0, r4, #0
 1223 005e 191C     		add	r1, r3, #0
 1224 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1225 0064 031C     		add	r3, r0, #0
 1226 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1227              		.loc 1 840 0
 1228 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1229              		.loc 1 841 0
 1230 006a 181C     		add	r0, r3, #0
 1231 006c BD46     		mov	sp, r7
 1232 006e 05B0     		add	sp, sp, #20
 1233              		@ sp needed
 1234 0070 90BD     		pop	{r4, r7, pc}
 1235              	.L85:
 1236 0072 C046     		.align	2
 1237              	.L84:
 1238 0074 00000000 		.word	ADC_offset
 1239 0078 00002041 		.word	1092616192
 1240 007c 00000000 		.word	ADC_countsPer10Volt
 1241              		.cfi_endproc
 1242              	.LFE17:
 1243              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1244              		.section	.rodata
 1245              		.align	2
 1246              		.type	ADC_InputsPlacement.4717, %object
 1247              		.size	ADC_InputsPlacement.4717, 2
 1248              	ADC_InputsPlacement.4717:
 1249 0008 00       		.byte	0
 1250 0009 01       		.byte	1
 1251 000a 0000     		.text
 1252              	.Letext0:
 1253              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1254              		.section	.debug_info,"",%progbits
 1255              	.Ldebug_info0:
 1256 0000 96040000 		.4byte	0x496
 1257 0004 0400     		.2byte	0x4
 1258 0006 00000000 		.4byte	.Ldebug_abbrev0
 1259 000a 04       		.byte	0x4
 1260 000b 01       		.uleb128 0x1
 1261 000c A2020000 		.4byte	.LASF60
 1262 0010 01       		.byte	0x1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 38


 1263 0011 6A020000 		.4byte	.LASF61
 1264 0015 F4010000 		.4byte	.LASF62
 1265 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1266 001d 00000000 		.4byte	0
 1267 0021 00000000 		.4byte	.Ldebug_line0
 1268 0025 02       		.uleb128 0x2
 1269 0026 01       		.byte	0x1
 1270 0027 06       		.byte	0x6
 1271 0028 7C000000 		.4byte	.LASF0
 1272 002c 02       		.uleb128 0x2
 1273 002d 01       		.byte	0x1
 1274 002e 08       		.byte	0x8
 1275 002f 89020000 		.4byte	.LASF1
 1276 0033 02       		.uleb128 0x2
 1277 0034 02       		.byte	0x2
 1278 0035 05       		.byte	0x5
 1279 0036 76010000 		.4byte	.LASF2
 1280 003a 02       		.uleb128 0x2
 1281 003b 02       		.byte	0x2
 1282 003c 07       		.byte	0x7
 1283 003d 53010000 		.4byte	.LASF3
 1284 0041 02       		.uleb128 0x2
 1285 0042 04       		.byte	0x4
 1286 0043 05       		.byte	0x5
 1287 0044 9F000000 		.4byte	.LASF4
 1288 0048 02       		.uleb128 0x2
 1289 0049 04       		.byte	0x4
 1290 004a 07       		.byte	0x7
 1291 004b 22010000 		.4byte	.LASF5
 1292 004f 02       		.uleb128 0x2
 1293 0050 08       		.byte	0x8
 1294 0051 05       		.byte	0x5
 1295 0052 6E000000 		.4byte	.LASF6
 1296 0056 02       		.uleb128 0x2
 1297 0057 08       		.byte	0x8
 1298 0058 07       		.byte	0x7
 1299 0059 32000000 		.4byte	.LASF7
 1300 005d 03       		.uleb128 0x3
 1301 005e 04       		.byte	0x4
 1302 005f 05       		.byte	0x5
 1303 0060 696E7400 		.ascii	"int\000"
 1304 0064 02       		.uleb128 0x2
 1305 0065 04       		.byte	0x4
 1306 0066 07       		.byte	0x7
 1307 0067 0E010000 		.4byte	.LASF8
 1308 006b 04       		.uleb128 0x4
 1309 006c D0000000 		.4byte	.LASF9
 1310 0070 02       		.byte	0x2
 1311 0071 A1       		.byte	0xa1
 1312 0072 2C000000 		.4byte	0x2c
 1313 0076 04       		.uleb128 0x4
 1314 0077 00000000 		.4byte	.LASF10
 1315 007b 02       		.byte	0x2
 1316 007c A2       		.byte	0xa2
 1317 007d 3A000000 		.4byte	0x3a
 1318 0081 04       		.uleb128 0x4
 1319 0082 DD000000 		.4byte	.LASF11
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 39


 1320 0086 02       		.byte	0x2
 1321 0087 A3       		.byte	0xa3
 1322 0088 48000000 		.4byte	0x48
 1323 008c 04       		.uleb128 0x4
 1324 008d 71030000 		.4byte	.LASF12
 1325 0091 02       		.byte	0x2
 1326 0092 A5       		.byte	0xa5
 1327 0093 33000000 		.4byte	0x33
 1328 0097 04       		.uleb128 0x4
 1329 0098 8F000000 		.4byte	.LASF13
 1330 009c 02       		.byte	0x2
 1331 009d A6       		.byte	0xa6
 1332 009e 41000000 		.4byte	0x41
 1333 00a2 04       		.uleb128 0x4
 1334 00a3 8D010000 		.4byte	.LASF14
 1335 00a7 02       		.byte	0x2
 1336 00a8 A7       		.byte	0xa7
 1337 00a9 AD000000 		.4byte	0xad
 1338 00ad 02       		.uleb128 0x2
 1339 00ae 04       		.byte	0x4
 1340 00af 04       		.byte	0x4
 1341 00b0 EE010000 		.4byte	.LASF15
 1342 00b4 02       		.uleb128 0x2
 1343 00b5 08       		.byte	0x8
 1344 00b6 04       		.byte	0x4
 1345 00b7 D6000000 		.4byte	.LASF16
 1346 00bb 04       		.uleb128 0x4
 1347 00bc CC010000 		.4byte	.LASF17
 1348 00c0 02       		.byte	0x2
 1349 00c1 AC       		.byte	0xac
 1350 00c2 4F000000 		.4byte	0x4f
 1351 00c6 02       		.uleb128 0x2
 1352 00c7 01       		.byte	0x1
 1353 00c8 08       		.byte	0x8
 1354 00c9 3D030000 		.4byte	.LASF18
 1355 00cd 05       		.uleb128 0x5
 1356 00ce 87010000 		.4byte	.LASF19
 1357 00d2 02       		.byte	0x2
 1358 00d3 4D01     		.2byte	0x14d
 1359 00d5 D9000000 		.4byte	0xd9
 1360 00d9 06       		.uleb128 0x6
 1361 00da 81000000 		.4byte	0x81
 1362 00de 02       		.uleb128 0x2
 1363 00df 04       		.byte	0x4
 1364 00e0 07       		.byte	0x7
 1365 00e1 95010000 		.4byte	.LASF20
 1366 00e5 07       		.uleb128 0x7
 1367 00e6 95000000 		.4byte	.LASF25
 1368 00ea 01       		.byte	0x1
 1369 00eb 3F       		.byte	0x3f
 1370 00ec 00000000 		.4byte	.LFB0
 1371 00f0 24000000 		.4byte	.LFE0-.LFB0
 1372 00f4 01       		.uleb128 0x1
 1373 00f5 9C       		.byte	0x9c
 1374 00f6 08       		.uleb128 0x8
 1375 00f7 29000000 		.4byte	.LASF36
 1376 00fb 01       		.byte	0x1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 40


 1377 00fc 5E       		.byte	0x5e
 1378 00fd 00000000 		.4byte	.LFB1
 1379 0101 F0010000 		.4byte	.LFE1-.LFB1
 1380 0105 01       		.uleb128 0x1
 1381 0106 9C       		.byte	0x9c
 1382 0107 47010000 		.4byte	0x147
 1383 010b 09       		.uleb128 0x9
 1384 010c 32030000 		.4byte	.LASF21
 1385 0110 01       		.byte	0x1
 1386 0111 60       		.byte	0x60
 1387 0112 81000000 		.4byte	0x81
 1388 0116 02       		.uleb128 0x2
 1389 0117 91       		.byte	0x91
 1390 0118 6C       		.sleb128 -20
 1391 0119 09       		.uleb128 0x9
 1392 011a 49010000 		.4byte	.LASF22
 1393 011e 01       		.byte	0x1
 1394 011f 61       		.byte	0x61
 1395 0120 81000000 		.4byte	0x81
 1396 0124 02       		.uleb128 0x2
 1397 0125 91       		.byte	0x91
 1398 0126 64       		.sleb128 -28
 1399 0127 09       		.uleb128 0x9
 1400 0128 0F000000 		.4byte	.LASF23
 1401 012c 01       		.byte	0x1
 1402 012d 62       		.byte	0x62
 1403 012e 97000000 		.4byte	0x97
 1404 0132 02       		.uleb128 0x2
 1405 0133 91       		.byte	0x91
 1406 0134 68       		.sleb128 -24
 1407 0135 09       		.uleb128 0x9
 1408 0136 49000000 		.4byte	.LASF24
 1409 013a 01       		.byte	0x1
 1410 013b 65       		.byte	0x65
 1411 013c 57010000 		.4byte	0x157
 1412 0140 05       		.uleb128 0x5
 1413 0141 03       		.byte	0x3
 1414 0142 08000000 		.4byte	ADC_InputsPlacement.4717
 1415 0146 00       		.byte	0
 1416 0147 0A       		.uleb128 0xa
 1417 0148 6B000000 		.4byte	0x6b
 1418 014c 57010000 		.4byte	0x157
 1419 0150 0B       		.uleb128 0xb
 1420 0151 DE000000 		.4byte	0xde
 1421 0155 01       		.byte	0x1
 1422 0156 00       		.byte	0
 1423 0157 0C       		.uleb128 0xc
 1424 0158 47010000 		.4byte	0x147
 1425 015c 0D       		.uleb128 0xd
 1426 015d 66030000 		.4byte	.LASF26
 1427 0161 01       		.byte	0x1
 1428 0162 2701     		.2byte	0x127
 1429 0164 00000000 		.4byte	.LFB2
 1430 0168 28000000 		.4byte	.LFE2-.LFB2
 1431 016c 01       		.uleb128 0x1
 1432 016d 9C       		.byte	0x9c
 1433 016e 0E       		.uleb128 0xe
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 41


 1434 016f 29030000 		.4byte	.LASF27
 1435 0173 01       		.byte	0x1
 1436 0174 4A01     		.2byte	0x14a
 1437 0176 00000000 		.4byte	.LFB3
 1438 017a 18000000 		.4byte	.LFE3-.LFB3
 1439 017e 01       		.uleb128 0x1
 1440 017f 9C       		.byte	0x9c
 1441 0180 0E       		.uleb128 0xe
 1442 0181 5D000000 		.4byte	.LASF28
 1443 0185 01       		.byte	0x1
 1444 0186 6401     		.2byte	0x164
 1445 0188 00000000 		.4byte	.LFB4
 1446 018c 1C000000 		.4byte	.LFE4-.LFB4
 1447 0190 01       		.uleb128 0x1
 1448 0191 9C       		.byte	0x9c
 1449 0192 0E       		.uleb128 0xe
 1450 0193 66010000 		.4byte	.LASF29
 1451 0197 01       		.byte	0x1
 1452 0198 7D01     		.2byte	0x17d
 1453 019a 00000000 		.4byte	.LFB5
 1454 019e 1C000000 		.4byte	.LFE5-.LFB5
 1455 01a2 01       		.uleb128 0x1
 1456 01a3 9C       		.byte	0x9c
 1457 01a4 0F       		.uleb128 0xf
 1458 01a5 B8010000 		.4byte	.LASF31
 1459 01a9 01       		.byte	0x1
 1460 01aa 9F01     		.2byte	0x19f
 1461 01ac 81000000 		.4byte	0x81
 1462 01b0 00000000 		.4byte	.LFB6
 1463 01b4 48000000 		.4byte	.LFE6-.LFB6
 1464 01b8 01       		.uleb128 0x1
 1465 01b9 9C       		.byte	0x9c
 1466 01ba DD010000 		.4byte	0x1dd
 1467 01be 10       		.uleb128 0x10
 1468 01bf F5000000 		.4byte	.LASF33
 1469 01c3 01       		.byte	0x1
 1470 01c4 9F01     		.2byte	0x19f
 1471 01c6 81000000 		.4byte	0x81
 1472 01ca 02       		.uleb128 0x2
 1473 01cb 91       		.byte	0x91
 1474 01cc 6C       		.sleb128 -20
 1475 01cd 11       		.uleb128 0x11
 1476 01ce 88000000 		.4byte	.LASF30
 1477 01d2 01       		.byte	0x1
 1478 01d3 A101     		.2byte	0x1a1
 1479 01d5 81000000 		.4byte	0x81
 1480 01d9 02       		.uleb128 0x2
 1481 01da 91       		.byte	0x91
 1482 01db 74       		.sleb128 -12
 1483 01dc 00       		.byte	0
 1484 01dd 12       		.uleb128 0x12
 1485 01de 8C030000 		.4byte	.LASF32
 1486 01e2 01       		.byte	0x1
 1487 01e3 D501     		.2byte	0x1d5
 1488 01e5 8C000000 		.4byte	0x8c
 1489 01e9 00000000 		.4byte	.LFB7
 1490 01ed 44000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 42


 1491 01f1 01       		.uleb128 0x1
 1492 01f2 9C       		.byte	0x9c
 1493 01f3 16020000 		.4byte	0x216
 1494 01f7 10       		.uleb128 0x10
 1495 01f8 38030000 		.4byte	.LASF34
 1496 01fc 01       		.byte	0x1
 1497 01fd D501     		.2byte	0x1d5
 1498 01ff 81000000 		.4byte	0x81
 1499 0203 02       		.uleb128 0x2
 1500 0204 91       		.byte	0x91
 1501 0205 6C       		.sleb128 -20
 1502 0206 11       		.uleb128 0x11
 1503 0207 85030000 		.4byte	.LASF35
 1504 020b 01       		.byte	0x1
 1505 020c D701     		.2byte	0x1d7
 1506 020e 81000000 		.4byte	0x81
 1507 0212 02       		.uleb128 0x2
 1508 0213 91       		.byte	0x91
 1509 0214 74       		.sleb128 -12
 1510 0215 00       		.byte	0
 1511 0216 13       		.uleb128 0x13
 1512 0217 D2010000 		.4byte	.LASF37
 1513 021b 01       		.byte	0x1
 1514 021c 0202     		.2byte	0x202
 1515 021e 00000000 		.4byte	.LFB8
 1516 0222 1C000000 		.4byte	.LFE8-.LFB8
 1517 0226 01       		.uleb128 0x1
 1518 0227 9C       		.byte	0x9c
 1519 0228 3C020000 		.4byte	0x23c
 1520 022c 10       		.uleb128 0x10
 1521 022d E4000000 		.4byte	.LASF38
 1522 0231 01       		.byte	0x1
 1523 0232 0202     		.2byte	0x202
 1524 0234 81000000 		.4byte	0x81
 1525 0238 02       		.uleb128 0x2
 1526 0239 91       		.byte	0x91
 1527 023a 74       		.sleb128 -12
 1528 023b 00       		.byte	0
 1529 023c 13       		.uleb128 0x13
 1530 023d 5A020000 		.4byte	.LASF39
 1531 0241 01       		.byte	0x1
 1532 0242 2E02     		.2byte	0x22e
 1533 0244 00000000 		.4byte	.LFB9
 1534 0248 30000000 		.4byte	.LFE9-.LFB9
 1535 024c 01       		.uleb128 0x1
 1536 024d 9C       		.byte	0x9c
 1537 024e 62020000 		.4byte	0x262
 1538 0252 10       		.uleb128 0x10
 1539 0253 9E010000 		.4byte	.LASF40
 1540 0257 01       		.byte	0x1
 1541 0258 2E02     		.2byte	0x22e
 1542 025a 81000000 		.4byte	0x81
 1543 025e 02       		.uleb128 0x2
 1544 025f 91       		.byte	0x91
 1545 0260 74       		.sleb128 -12
 1546 0261 00       		.byte	0
 1547 0262 13       		.uleb128 0x13
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 43


 1548 0263 A7010000 		.4byte	.LASF41
 1549 0267 01       		.byte	0x1
 1550 0268 4302     		.2byte	0x243
 1551 026a 00000000 		.4byte	.LFB10
 1552 026e 2C000000 		.4byte	.LFE10-.LFB10
 1553 0272 01       		.uleb128 0x1
 1554 0273 9C       		.byte	0x9c
 1555 0274 88020000 		.4byte	0x288
 1556 0278 10       		.uleb128 0x10
 1557 0279 3C020000 		.4byte	.LASF42
 1558 027d 01       		.byte	0x1
 1559 027e 4302     		.2byte	0x243
 1560 0280 81000000 		.4byte	0x81
 1561 0284 02       		.uleb128 0x2
 1562 0285 91       		.byte	0x91
 1563 0286 74       		.sleb128 -12
 1564 0287 00       		.byte	0
 1565 0288 13       		.uleb128 0x13
 1566 0289 FD000000 		.4byte	.LASF43
 1567 028d 01       		.byte	0x1
 1568 028e 5B02     		.2byte	0x25b
 1569 0290 00000000 		.4byte	.LFB11
 1570 0294 1C000000 		.4byte	.LFE11-.LFB11
 1571 0298 01       		.uleb128 0x1
 1572 0299 9C       		.byte	0x9c
 1573 029a AE020000 		.4byte	0x2ae
 1574 029e 10       		.uleb128 0x10
 1575 029f E4000000 		.4byte	.LASF38
 1576 02a3 01       		.byte	0x1
 1577 02a4 5B02     		.2byte	0x25b
 1578 02a6 81000000 		.4byte	0x81
 1579 02aa 02       		.uleb128 0x2
 1580 02ab 91       		.byte	0x91
 1581 02ac 74       		.sleb128 -12
 1582 02ad 00       		.byte	0
 1583 02ae 13       		.uleb128 0x13
 1584 02af 34010000 		.4byte	.LASF44
 1585 02b3 01       		.byte	0x1
 1586 02b4 7202     		.2byte	0x272
 1587 02b6 00000000 		.4byte	.LFB12
 1588 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1589 02be 01       		.uleb128 0x1
 1590 02bf 9C       		.byte	0x9c
 1591 02c0 D4020000 		.4byte	0x2d4
 1592 02c4 10       		.uleb128 0x10
 1593 02c5 E4000000 		.4byte	.LASF38
 1594 02c9 01       		.byte	0x1
 1595 02ca 7202     		.2byte	0x272
 1596 02cc 81000000 		.4byte	0x81
 1597 02d0 02       		.uleb128 0x2
 1598 02d1 91       		.byte	0x91
 1599 02d2 74       		.sleb128 -12
 1600 02d3 00       		.byte	0
 1601 02d4 14       		.uleb128 0x14
 1602 02d5 77030000 		.4byte	.LASF45
 1603 02d9 01       		.byte	0x1
 1604 02da 8E02     		.2byte	0x28e
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 44


 1605 02dc 00000000 		.4byte	.LFB13
 1606 02e0 30000000 		.4byte	.LFE13-.LFB13
 1607 02e4 01       		.uleb128 0x1
 1608 02e5 9C       		.byte	0x9c
 1609 02e6 09030000 		.4byte	0x309
 1610 02ea 10       		.uleb128 0x10
 1611 02eb 38030000 		.4byte	.LASF34
 1612 02ef 01       		.byte	0x1
 1613 02f0 8E02     		.2byte	0x28e
 1614 02f2 81000000 		.4byte	0x81
 1615 02f6 02       		.uleb128 0x2
 1616 02f7 91       		.byte	0x91
 1617 02f8 74       		.sleb128 -12
 1618 02f9 10       		.uleb128 0x10
 1619 02fa 55030000 		.4byte	.LASF46
 1620 02fe 01       		.byte	0x1
 1621 02ff 8E02     		.2byte	0x28e
 1622 0301 8C000000 		.4byte	0x8c
 1623 0305 02       		.uleb128 0x2
 1624 0306 91       		.byte	0x91
 1625 0307 72       		.sleb128 -14
 1626 0308 00       		.byte	0
 1627 0309 14       		.uleb128 0x14
 1628 030a E2010000 		.4byte	.LASF47
 1629 030e 01       		.byte	0x1
 1630 030f B002     		.2byte	0x2b0
 1631 0311 00000000 		.4byte	.LFB14
 1632 0315 2C000000 		.4byte	.LFE14-.LFB14
 1633 0319 01       		.uleb128 0x1
 1634 031a 9C       		.byte	0x9c
 1635 031b 3E030000 		.4byte	0x33e
 1636 031f 10       		.uleb128 0x10
 1637 0320 38030000 		.4byte	.LASF34
 1638 0324 01       		.byte	0x1
 1639 0325 B002     		.2byte	0x2b0
 1640 0327 81000000 		.4byte	0x81
 1641 032b 02       		.uleb128 0x2
 1642 032c 91       		.byte	0x91
 1643 032d 74       		.sleb128 -12
 1644 032e 10       		.uleb128 0x10
 1645 032f 07000000 		.4byte	.LASF48
 1646 0333 01       		.byte	0x1
 1647 0334 B002     		.2byte	0x2b0
 1648 0336 97000000 		.4byte	0x97
 1649 033a 02       		.uleb128 0x2
 1650 033b 91       		.byte	0x91
 1651 033c 70       		.sleb128 -16
 1652 033d 00       		.byte	0
 1653 033e 12       		.uleb128 0x12
 1654 033f 46020000 		.4byte	.LASF49
 1655 0343 01       		.byte	0x1
 1656 0344 D102     		.2byte	0x2d1
 1657 0346 8C000000 		.4byte	0x8c
 1658 034a 00000000 		.4byte	.LFB15
 1659 034e A4000000 		.4byte	.LFE15-.LFB15
 1660 0352 01       		.uleb128 0x1
 1661 0353 9C       		.byte	0x9c
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 45


 1662 0354 86030000 		.4byte	0x386
 1663 0358 10       		.uleb128 0x10
 1664 0359 38030000 		.4byte	.LASF34
 1665 035d 01       		.byte	0x1
 1666 035e D102     		.2byte	0x2d1
 1667 0360 81000000 		.4byte	0x81
 1668 0364 02       		.uleb128 0x2
 1669 0365 91       		.byte	0x91
 1670 0366 6C       		.sleb128 -20
 1671 0367 10       		.uleb128 0x10
 1672 0368 5C030000 		.4byte	.LASF50
 1673 036c 01       		.byte	0x1
 1674 036d D102     		.2byte	0x2d1
 1675 036f 8C000000 		.4byte	0x8c
 1676 0373 02       		.uleb128 0x2
 1677 0374 91       		.byte	0x91
 1678 0375 6A       		.sleb128 -22
 1679 0376 11       		.uleb128 0x11
 1680 0377 80010000 		.4byte	.LASF51
 1681 037b 01       		.byte	0x1
 1682 037c D302     		.2byte	0x2d3
 1683 037e 8C000000 		.4byte	0x8c
 1684 0382 02       		.uleb128 0x2
 1685 0383 91       		.byte	0x91
 1686 0384 76       		.sleb128 -10
 1687 0385 00       		.byte	0
 1688 0386 12       		.uleb128 0x12
 1689 0387 A8000000 		.4byte	.LASF52
 1690 038b 01       		.byte	0x1
 1691 038c 0703     		.2byte	0x307
 1692 038e 97000000 		.4byte	0x97
 1693 0392 00000000 		.4byte	.LFB16
 1694 0396 98000000 		.4byte	.LFE16-.LFB16
 1695 039a 01       		.uleb128 0x1
 1696 039b 9C       		.byte	0x9c
 1697 039c CE030000 		.4byte	0x3ce
 1698 03a0 10       		.uleb128 0x10
 1699 03a1 38030000 		.4byte	.LASF34
 1700 03a5 01       		.byte	0x1
 1701 03a6 0703     		.2byte	0x307
 1702 03a8 81000000 		.4byte	0x81
 1703 03ac 02       		.uleb128 0x2
 1704 03ad 91       		.byte	0x91
 1705 03ae 64       		.sleb128 -28
 1706 03af 10       		.uleb128 0x10
 1707 03b0 5C030000 		.4byte	.LASF50
 1708 03b4 01       		.byte	0x1
 1709 03b5 0703     		.2byte	0x307
 1710 03b7 8C000000 		.4byte	0x8c
 1711 03bb 02       		.uleb128 0x2
 1712 03bc 91       		.byte	0x91
 1713 03bd 62       		.sleb128 -30
 1714 03be 11       		.uleb128 0x11
 1715 03bf 1B010000 		.4byte	.LASF53
 1716 03c3 01       		.byte	0x1
 1717 03c4 0903     		.2byte	0x309
 1718 03c6 BB000000 		.4byte	0xbb
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 46


 1719 03ca 02       		.uleb128 0x2
 1720 03cb 91       		.byte	0x91
 1721 03cc 68       		.sleb128 -24
 1722 03cd 00       		.byte	0
 1723 03ce 12       		.uleb128 0x12
 1724 03cf 16000000 		.4byte	.LASF54
 1725 03d3 01       		.byte	0x1
 1726 03d4 3403     		.2byte	0x334
 1727 03d6 A2000000 		.4byte	0xa2
 1728 03da 00000000 		.4byte	.LFB17
 1729 03de 80000000 		.4byte	.LFE17-.LFB17
 1730 03e2 01       		.uleb128 0x1
 1731 03e3 9C       		.byte	0x9c
 1732 03e4 16040000 		.4byte	0x416
 1733 03e8 10       		.uleb128 0x10
 1734 03e9 38030000 		.4byte	.LASF34
 1735 03ed 01       		.byte	0x1
 1736 03ee 3403     		.2byte	0x334
 1737 03f0 81000000 		.4byte	0x81
 1738 03f4 02       		.uleb128 0x2
 1739 03f5 91       		.byte	0x91
 1740 03f6 64       		.sleb128 -28
 1741 03f7 10       		.uleb128 0x10
 1742 03f8 5C030000 		.4byte	.LASF50
 1743 03fc 01       		.byte	0x1
 1744 03fd 3403     		.2byte	0x334
 1745 03ff 8C000000 		.4byte	0x8c
 1746 0403 02       		.uleb128 0x2
 1747 0404 91       		.byte	0x91
 1748 0405 62       		.sleb128 -30
 1749 0406 11       		.uleb128 0x11
 1750 0407 43010000 		.4byte	.LASF55
 1751 040b 01       		.byte	0x1
 1752 040c 3603     		.2byte	0x336
 1753 040e A2000000 		.4byte	0xa2
 1754 0412 02       		.uleb128 0x2
 1755 0413 91       		.byte	0x91
 1756 0414 6C       		.sleb128 -20
 1757 0415 00       		.byte	0
 1758 0416 0A       		.uleb128 0xa
 1759 0417 81000000 		.4byte	0x81
 1760 041b 26040000 		.4byte	0x426
 1761 041f 0B       		.uleb128 0xb
 1762 0420 DE000000 		.4byte	0xde
 1763 0424 01       		.byte	0x1
 1764 0425 00       		.byte	0
 1765 0426 09       		.uleb128 0x9
 1766 0427 42030000 		.4byte	.LASF56
 1767 042b 01       		.byte	0x1
 1768 042c 21       		.byte	0x21
 1769 042d 37040000 		.4byte	0x437
 1770 0431 05       		.uleb128 0x5
 1771 0432 03       		.byte	0x3
 1772 0433 00000000 		.4byte	ADC_channelsConfig
 1773 0437 0C       		.uleb128 0xc
 1774 0438 16040000 		.4byte	0x416
 1775 043c 15       		.uleb128 0x15
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 47


 1776 043d E9000000 		.4byte	.LASF57
 1777 0441 01       		.byte	0x1
 1778 0442 18       		.byte	0x18
 1779 0443 6B000000 		.4byte	0x6b
 1780 0447 05       		.uleb128 0x5
 1781 0448 03       		.byte	0x3
 1782 0449 00000000 		.4byte	ADC_initVar
 1783 044d 0A       		.uleb128 0xa
 1784 044e 8C000000 		.4byte	0x8c
 1785 0452 5D040000 		.4byte	0x45d
 1786 0456 0B       		.uleb128 0xb
 1787 0457 DE000000 		.4byte	0xde
 1788 045b 01       		.byte	0x1
 1789 045c 00       		.byte	0
 1790 045d 15       		.uleb128 0x15
 1791 045e 97020000 		.4byte	.LASF58
 1792 0462 01       		.byte	0x1
 1793 0463 19       		.byte	0x19
 1794 0464 6E040000 		.4byte	0x46e
 1795 0468 05       		.uleb128 0x5
 1796 0469 03       		.byte	0x3
 1797 046a 00000000 		.4byte	ADC_offset
 1798 046e 06       		.uleb128 0x6
 1799 046f 4D040000 		.4byte	0x44d
 1800 0473 0A       		.uleb128 0xa
 1801 0474 97000000 		.4byte	0x97
 1802 0478 83040000 		.4byte	0x483
 1803 047c 0B       		.uleb128 0xb
 1804 047d DE000000 		.4byte	0xde
 1805 0481 01       		.byte	0x1
 1806 0482 00       		.byte	0
 1807 0483 15       		.uleb128 0x15
 1808 0484 BC000000 		.4byte	.LASF59
 1809 0488 01       		.byte	0x1
 1810 0489 1A       		.byte	0x1a
 1811 048a 94040000 		.4byte	0x494
 1812 048e 05       		.uleb128 0x5
 1813 048f 03       		.byte	0x3
 1814 0490 00000000 		.4byte	ADC_countsPer10Volt
 1815 0494 06       		.uleb128 0x6
 1816 0495 73040000 		.4byte	0x473
 1817 0499 00       		.byte	0
 1818              		.section	.debug_abbrev,"",%progbits
 1819              	.Ldebug_abbrev0:
 1820 0000 01       		.uleb128 0x1
 1821 0001 11       		.uleb128 0x11
 1822 0002 01       		.byte	0x1
 1823 0003 25       		.uleb128 0x25
 1824 0004 0E       		.uleb128 0xe
 1825 0005 13       		.uleb128 0x13
 1826 0006 0B       		.uleb128 0xb
 1827 0007 03       		.uleb128 0x3
 1828 0008 0E       		.uleb128 0xe
 1829 0009 1B       		.uleb128 0x1b
 1830 000a 0E       		.uleb128 0xe
 1831 000b 55       		.uleb128 0x55
 1832 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 48


 1833 000d 11       		.uleb128 0x11
 1834 000e 01       		.uleb128 0x1
 1835 000f 10       		.uleb128 0x10
 1836 0010 17       		.uleb128 0x17
 1837 0011 00       		.byte	0
 1838 0012 00       		.byte	0
 1839 0013 02       		.uleb128 0x2
 1840 0014 24       		.uleb128 0x24
 1841 0015 00       		.byte	0
 1842 0016 0B       		.uleb128 0xb
 1843 0017 0B       		.uleb128 0xb
 1844 0018 3E       		.uleb128 0x3e
 1845 0019 0B       		.uleb128 0xb
 1846 001a 03       		.uleb128 0x3
 1847 001b 0E       		.uleb128 0xe
 1848 001c 00       		.byte	0
 1849 001d 00       		.byte	0
 1850 001e 03       		.uleb128 0x3
 1851 001f 24       		.uleb128 0x24
 1852 0020 00       		.byte	0
 1853 0021 0B       		.uleb128 0xb
 1854 0022 0B       		.uleb128 0xb
 1855 0023 3E       		.uleb128 0x3e
 1856 0024 0B       		.uleb128 0xb
 1857 0025 03       		.uleb128 0x3
 1858 0026 08       		.uleb128 0x8
 1859 0027 00       		.byte	0
 1860 0028 00       		.byte	0
 1861 0029 04       		.uleb128 0x4
 1862 002a 16       		.uleb128 0x16
 1863 002b 00       		.byte	0
 1864 002c 03       		.uleb128 0x3
 1865 002d 0E       		.uleb128 0xe
 1866 002e 3A       		.uleb128 0x3a
 1867 002f 0B       		.uleb128 0xb
 1868 0030 3B       		.uleb128 0x3b
 1869 0031 0B       		.uleb128 0xb
 1870 0032 49       		.uleb128 0x49
 1871 0033 13       		.uleb128 0x13
 1872 0034 00       		.byte	0
 1873 0035 00       		.byte	0
 1874 0036 05       		.uleb128 0x5
 1875 0037 16       		.uleb128 0x16
 1876 0038 00       		.byte	0
 1877 0039 03       		.uleb128 0x3
 1878 003a 0E       		.uleb128 0xe
 1879 003b 3A       		.uleb128 0x3a
 1880 003c 0B       		.uleb128 0xb
 1881 003d 3B       		.uleb128 0x3b
 1882 003e 05       		.uleb128 0x5
 1883 003f 49       		.uleb128 0x49
 1884 0040 13       		.uleb128 0x13
 1885 0041 00       		.byte	0
 1886 0042 00       		.byte	0
 1887 0043 06       		.uleb128 0x6
 1888 0044 35       		.uleb128 0x35
 1889 0045 00       		.byte	0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 49


 1890 0046 49       		.uleb128 0x49
 1891 0047 13       		.uleb128 0x13
 1892 0048 00       		.byte	0
 1893 0049 00       		.byte	0
 1894 004a 07       		.uleb128 0x7
 1895 004b 2E       		.uleb128 0x2e
 1896 004c 00       		.byte	0
 1897 004d 3F       		.uleb128 0x3f
 1898 004e 19       		.uleb128 0x19
 1899 004f 03       		.uleb128 0x3
 1900 0050 0E       		.uleb128 0xe
 1901 0051 3A       		.uleb128 0x3a
 1902 0052 0B       		.uleb128 0xb
 1903 0053 3B       		.uleb128 0x3b
 1904 0054 0B       		.uleb128 0xb
 1905 0055 27       		.uleb128 0x27
 1906 0056 19       		.uleb128 0x19
 1907 0057 11       		.uleb128 0x11
 1908 0058 01       		.uleb128 0x1
 1909 0059 12       		.uleb128 0x12
 1910 005a 06       		.uleb128 0x6
 1911 005b 40       		.uleb128 0x40
 1912 005c 18       		.uleb128 0x18
 1913 005d 9642     		.uleb128 0x2116
 1914 005f 19       		.uleb128 0x19
 1915 0060 00       		.byte	0
 1916 0061 00       		.byte	0
 1917 0062 08       		.uleb128 0x8
 1918 0063 2E       		.uleb128 0x2e
 1919 0064 01       		.byte	0x1
 1920 0065 3F       		.uleb128 0x3f
 1921 0066 19       		.uleb128 0x19
 1922 0067 03       		.uleb128 0x3
 1923 0068 0E       		.uleb128 0xe
 1924 0069 3A       		.uleb128 0x3a
 1925 006a 0B       		.uleb128 0xb
 1926 006b 3B       		.uleb128 0x3b
 1927 006c 0B       		.uleb128 0xb
 1928 006d 27       		.uleb128 0x27
 1929 006e 19       		.uleb128 0x19
 1930 006f 11       		.uleb128 0x11
 1931 0070 01       		.uleb128 0x1
 1932 0071 12       		.uleb128 0x12
 1933 0072 06       		.uleb128 0x6
 1934 0073 40       		.uleb128 0x40
 1935 0074 18       		.uleb128 0x18
 1936 0075 9642     		.uleb128 0x2116
 1937 0077 19       		.uleb128 0x19
 1938 0078 01       		.uleb128 0x1
 1939 0079 13       		.uleb128 0x13
 1940 007a 00       		.byte	0
 1941 007b 00       		.byte	0
 1942 007c 09       		.uleb128 0x9
 1943 007d 34       		.uleb128 0x34
 1944 007e 00       		.byte	0
 1945 007f 03       		.uleb128 0x3
 1946 0080 0E       		.uleb128 0xe
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 50


 1947 0081 3A       		.uleb128 0x3a
 1948 0082 0B       		.uleb128 0xb
 1949 0083 3B       		.uleb128 0x3b
 1950 0084 0B       		.uleb128 0xb
 1951 0085 49       		.uleb128 0x49
 1952 0086 13       		.uleb128 0x13
 1953 0087 02       		.uleb128 0x2
 1954 0088 18       		.uleb128 0x18
 1955 0089 00       		.byte	0
 1956 008a 00       		.byte	0
 1957 008b 0A       		.uleb128 0xa
 1958 008c 01       		.uleb128 0x1
 1959 008d 01       		.byte	0x1
 1960 008e 49       		.uleb128 0x49
 1961 008f 13       		.uleb128 0x13
 1962 0090 01       		.uleb128 0x1
 1963 0091 13       		.uleb128 0x13
 1964 0092 00       		.byte	0
 1965 0093 00       		.byte	0
 1966 0094 0B       		.uleb128 0xb
 1967 0095 21       		.uleb128 0x21
 1968 0096 00       		.byte	0
 1969 0097 49       		.uleb128 0x49
 1970 0098 13       		.uleb128 0x13
 1971 0099 2F       		.uleb128 0x2f
 1972 009a 0B       		.uleb128 0xb
 1973 009b 00       		.byte	0
 1974 009c 00       		.byte	0
 1975 009d 0C       		.uleb128 0xc
 1976 009e 26       		.uleb128 0x26
 1977 009f 00       		.byte	0
 1978 00a0 49       		.uleb128 0x49
 1979 00a1 13       		.uleb128 0x13
 1980 00a2 00       		.byte	0
 1981 00a3 00       		.byte	0
 1982 00a4 0D       		.uleb128 0xd
 1983 00a5 2E       		.uleb128 0x2e
 1984 00a6 00       		.byte	0
 1985 00a7 3F       		.uleb128 0x3f
 1986 00a8 19       		.uleb128 0x19
 1987 00a9 03       		.uleb128 0x3
 1988 00aa 0E       		.uleb128 0xe
 1989 00ab 3A       		.uleb128 0x3a
 1990 00ac 0B       		.uleb128 0xb
 1991 00ad 3B       		.uleb128 0x3b
 1992 00ae 05       		.uleb128 0x5
 1993 00af 27       		.uleb128 0x27
 1994 00b0 19       		.uleb128 0x19
 1995 00b1 11       		.uleb128 0x11
 1996 00b2 01       		.uleb128 0x1
 1997 00b3 12       		.uleb128 0x12
 1998 00b4 06       		.uleb128 0x6
 1999 00b5 40       		.uleb128 0x40
 2000 00b6 18       		.uleb128 0x18
 2001 00b7 9642     		.uleb128 0x2116
 2002 00b9 19       		.uleb128 0x19
 2003 00ba 00       		.byte	0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 51


 2004 00bb 00       		.byte	0
 2005 00bc 0E       		.uleb128 0xe
 2006 00bd 2E       		.uleb128 0x2e
 2007 00be 00       		.byte	0
 2008 00bf 3F       		.uleb128 0x3f
 2009 00c0 19       		.uleb128 0x19
 2010 00c1 03       		.uleb128 0x3
 2011 00c2 0E       		.uleb128 0xe
 2012 00c3 3A       		.uleb128 0x3a
 2013 00c4 0B       		.uleb128 0xb
 2014 00c5 3B       		.uleb128 0x3b
 2015 00c6 05       		.uleb128 0x5
 2016 00c7 27       		.uleb128 0x27
 2017 00c8 19       		.uleb128 0x19
 2018 00c9 11       		.uleb128 0x11
 2019 00ca 01       		.uleb128 0x1
 2020 00cb 12       		.uleb128 0x12
 2021 00cc 06       		.uleb128 0x6
 2022 00cd 40       		.uleb128 0x40
 2023 00ce 18       		.uleb128 0x18
 2024 00cf 9742     		.uleb128 0x2117
 2025 00d1 19       		.uleb128 0x19
 2026 00d2 00       		.byte	0
 2027 00d3 00       		.byte	0
 2028 00d4 0F       		.uleb128 0xf
 2029 00d5 2E       		.uleb128 0x2e
 2030 00d6 01       		.byte	0x1
 2031 00d7 3F       		.uleb128 0x3f
 2032 00d8 19       		.uleb128 0x19
 2033 00d9 03       		.uleb128 0x3
 2034 00da 0E       		.uleb128 0xe
 2035 00db 3A       		.uleb128 0x3a
 2036 00dc 0B       		.uleb128 0xb
 2037 00dd 3B       		.uleb128 0x3b
 2038 00de 05       		.uleb128 0x5
 2039 00df 27       		.uleb128 0x27
 2040 00e0 19       		.uleb128 0x19
 2041 00e1 49       		.uleb128 0x49
 2042 00e2 13       		.uleb128 0x13
 2043 00e3 11       		.uleb128 0x11
 2044 00e4 01       		.uleb128 0x1
 2045 00e5 12       		.uleb128 0x12
 2046 00e6 06       		.uleb128 0x6
 2047 00e7 40       		.uleb128 0x40
 2048 00e8 18       		.uleb128 0x18
 2049 00e9 9742     		.uleb128 0x2117
 2050 00eb 19       		.uleb128 0x19
 2051 00ec 01       		.uleb128 0x1
 2052 00ed 13       		.uleb128 0x13
 2053 00ee 00       		.byte	0
 2054 00ef 00       		.byte	0
 2055 00f0 10       		.uleb128 0x10
 2056 00f1 05       		.uleb128 0x5
 2057 00f2 00       		.byte	0
 2058 00f3 03       		.uleb128 0x3
 2059 00f4 0E       		.uleb128 0xe
 2060 00f5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 52


 2061 00f6 0B       		.uleb128 0xb
 2062 00f7 3B       		.uleb128 0x3b
 2063 00f8 05       		.uleb128 0x5
 2064 00f9 49       		.uleb128 0x49
 2065 00fa 13       		.uleb128 0x13
 2066 00fb 02       		.uleb128 0x2
 2067 00fc 18       		.uleb128 0x18
 2068 00fd 00       		.byte	0
 2069 00fe 00       		.byte	0
 2070 00ff 11       		.uleb128 0x11
 2071 0100 34       		.uleb128 0x34
 2072 0101 00       		.byte	0
 2073 0102 03       		.uleb128 0x3
 2074 0103 0E       		.uleb128 0xe
 2075 0104 3A       		.uleb128 0x3a
 2076 0105 0B       		.uleb128 0xb
 2077 0106 3B       		.uleb128 0x3b
 2078 0107 05       		.uleb128 0x5
 2079 0108 49       		.uleb128 0x49
 2080 0109 13       		.uleb128 0x13
 2081 010a 02       		.uleb128 0x2
 2082 010b 18       		.uleb128 0x18
 2083 010c 00       		.byte	0
 2084 010d 00       		.byte	0
 2085 010e 12       		.uleb128 0x12
 2086 010f 2E       		.uleb128 0x2e
 2087 0110 01       		.byte	0x1
 2088 0111 3F       		.uleb128 0x3f
 2089 0112 19       		.uleb128 0x19
 2090 0113 03       		.uleb128 0x3
 2091 0114 0E       		.uleb128 0xe
 2092 0115 3A       		.uleb128 0x3a
 2093 0116 0B       		.uleb128 0xb
 2094 0117 3B       		.uleb128 0x3b
 2095 0118 05       		.uleb128 0x5
 2096 0119 27       		.uleb128 0x27
 2097 011a 19       		.uleb128 0x19
 2098 011b 49       		.uleb128 0x49
 2099 011c 13       		.uleb128 0x13
 2100 011d 11       		.uleb128 0x11
 2101 011e 01       		.uleb128 0x1
 2102 011f 12       		.uleb128 0x12
 2103 0120 06       		.uleb128 0x6
 2104 0121 40       		.uleb128 0x40
 2105 0122 18       		.uleb128 0x18
 2106 0123 9642     		.uleb128 0x2116
 2107 0125 19       		.uleb128 0x19
 2108 0126 01       		.uleb128 0x1
 2109 0127 13       		.uleb128 0x13
 2110 0128 00       		.byte	0
 2111 0129 00       		.byte	0
 2112 012a 13       		.uleb128 0x13
 2113 012b 2E       		.uleb128 0x2e
 2114 012c 01       		.byte	0x1
 2115 012d 3F       		.uleb128 0x3f
 2116 012e 19       		.uleb128 0x19
 2117 012f 03       		.uleb128 0x3
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 53


 2118 0130 0E       		.uleb128 0xe
 2119 0131 3A       		.uleb128 0x3a
 2120 0132 0B       		.uleb128 0xb
 2121 0133 3B       		.uleb128 0x3b
 2122 0134 05       		.uleb128 0x5
 2123 0135 27       		.uleb128 0x27
 2124 0136 19       		.uleb128 0x19
 2125 0137 11       		.uleb128 0x11
 2126 0138 01       		.uleb128 0x1
 2127 0139 12       		.uleb128 0x12
 2128 013a 06       		.uleb128 0x6
 2129 013b 40       		.uleb128 0x40
 2130 013c 18       		.uleb128 0x18
 2131 013d 9742     		.uleb128 0x2117
 2132 013f 19       		.uleb128 0x19
 2133 0140 01       		.uleb128 0x1
 2134 0141 13       		.uleb128 0x13
 2135 0142 00       		.byte	0
 2136 0143 00       		.byte	0
 2137 0144 14       		.uleb128 0x14
 2138 0145 2E       		.uleb128 0x2e
 2139 0146 01       		.byte	0x1
 2140 0147 3F       		.uleb128 0x3f
 2141 0148 19       		.uleb128 0x19
 2142 0149 03       		.uleb128 0x3
 2143 014a 0E       		.uleb128 0xe
 2144 014b 3A       		.uleb128 0x3a
 2145 014c 0B       		.uleb128 0xb
 2146 014d 3B       		.uleb128 0x3b
 2147 014e 05       		.uleb128 0x5
 2148 014f 27       		.uleb128 0x27
 2149 0150 19       		.uleb128 0x19
 2150 0151 11       		.uleb128 0x11
 2151 0152 01       		.uleb128 0x1
 2152 0153 12       		.uleb128 0x12
 2153 0154 06       		.uleb128 0x6
 2154 0155 40       		.uleb128 0x40
 2155 0156 18       		.uleb128 0x18
 2156 0157 9642     		.uleb128 0x2116
 2157 0159 19       		.uleb128 0x19
 2158 015a 01       		.uleb128 0x1
 2159 015b 13       		.uleb128 0x13
 2160 015c 00       		.byte	0
 2161 015d 00       		.byte	0
 2162 015e 15       		.uleb128 0x15
 2163 015f 34       		.uleb128 0x34
 2164 0160 00       		.byte	0
 2165 0161 03       		.uleb128 0x3
 2166 0162 0E       		.uleb128 0xe
 2167 0163 3A       		.uleb128 0x3a
 2168 0164 0B       		.uleb128 0xb
 2169 0165 3B       		.uleb128 0x3b
 2170 0166 0B       		.uleb128 0xb
 2171 0167 49       		.uleb128 0x49
 2172 0168 13       		.uleb128 0x13
 2173 0169 3F       		.uleb128 0x3f
 2174 016a 19       		.uleb128 0x19
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 54


 2175 016b 02       		.uleb128 0x2
 2176 016c 18       		.uleb128 0x18
 2177 016d 00       		.byte	0
 2178 016e 00       		.byte	0
 2179 016f 00       		.byte	0
 2180              		.section	.debug_aranges,"",%progbits
 2181 0000 A4000000 		.4byte	0xa4
 2182 0004 0200     		.2byte	0x2
 2183 0006 00000000 		.4byte	.Ldebug_info0
 2184 000a 04       		.byte	0x4
 2185 000b 00       		.byte	0
 2186 000c 0000     		.2byte	0
 2187 000e 0000     		.2byte	0
 2188 0010 00000000 		.4byte	.LFB0
 2189 0014 24000000 		.4byte	.LFE0-.LFB0
 2190 0018 00000000 		.4byte	.LFB1
 2191 001c F0010000 		.4byte	.LFE1-.LFB1
 2192 0020 00000000 		.4byte	.LFB2
 2193 0024 28000000 		.4byte	.LFE2-.LFB2
 2194 0028 00000000 		.4byte	.LFB3
 2195 002c 18000000 		.4byte	.LFE3-.LFB3
 2196 0030 00000000 		.4byte	.LFB4
 2197 0034 1C000000 		.4byte	.LFE4-.LFB4
 2198 0038 00000000 		.4byte	.LFB5
 2199 003c 1C000000 		.4byte	.LFE5-.LFB5
 2200 0040 00000000 		.4byte	.LFB6
 2201 0044 48000000 		.4byte	.LFE6-.LFB6
 2202 0048 00000000 		.4byte	.LFB7
 2203 004c 44000000 		.4byte	.LFE7-.LFB7
 2204 0050 00000000 		.4byte	.LFB8
 2205 0054 1C000000 		.4byte	.LFE8-.LFB8
 2206 0058 00000000 		.4byte	.LFB9
 2207 005c 30000000 		.4byte	.LFE9-.LFB9
 2208 0060 00000000 		.4byte	.LFB10
 2209 0064 2C000000 		.4byte	.LFE10-.LFB10
 2210 0068 00000000 		.4byte	.LFB11
 2211 006c 1C000000 		.4byte	.LFE11-.LFB11
 2212 0070 00000000 		.4byte	.LFB12
 2213 0074 1C000000 		.4byte	.LFE12-.LFB12
 2214 0078 00000000 		.4byte	.LFB13
 2215 007c 30000000 		.4byte	.LFE13-.LFB13
 2216 0080 00000000 		.4byte	.LFB14
 2217 0084 2C000000 		.4byte	.LFE14-.LFB14
 2218 0088 00000000 		.4byte	.LFB15
 2219 008c A4000000 		.4byte	.LFE15-.LFB15
 2220 0090 00000000 		.4byte	.LFB16
 2221 0094 98000000 		.4byte	.LFE16-.LFB16
 2222 0098 00000000 		.4byte	.LFB17
 2223 009c 80000000 		.4byte	.LFE17-.LFB17
 2224 00a0 00000000 		.4byte	0
 2225 00a4 00000000 		.4byte	0
 2226              		.section	.debug_ranges,"",%progbits
 2227              	.Ldebug_ranges0:
 2228 0000 00000000 		.4byte	.LFB0
 2229 0004 24000000 		.4byte	.LFE0
 2230 0008 00000000 		.4byte	.LFB1
 2231 000c F0010000 		.4byte	.LFE1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 55


 2232 0010 00000000 		.4byte	.LFB2
 2233 0014 28000000 		.4byte	.LFE2
 2234 0018 00000000 		.4byte	.LFB3
 2235 001c 18000000 		.4byte	.LFE3
 2236 0020 00000000 		.4byte	.LFB4
 2237 0024 1C000000 		.4byte	.LFE4
 2238 0028 00000000 		.4byte	.LFB5
 2239 002c 1C000000 		.4byte	.LFE5
 2240 0030 00000000 		.4byte	.LFB6
 2241 0034 48000000 		.4byte	.LFE6
 2242 0038 00000000 		.4byte	.LFB7
 2243 003c 44000000 		.4byte	.LFE7
 2244 0040 00000000 		.4byte	.LFB8
 2245 0044 1C000000 		.4byte	.LFE8
 2246 0048 00000000 		.4byte	.LFB9
 2247 004c 30000000 		.4byte	.LFE9
 2248 0050 00000000 		.4byte	.LFB10
 2249 0054 2C000000 		.4byte	.LFE10
 2250 0058 00000000 		.4byte	.LFB11
 2251 005c 1C000000 		.4byte	.LFE11
 2252 0060 00000000 		.4byte	.LFB12
 2253 0064 1C000000 		.4byte	.LFE12
 2254 0068 00000000 		.4byte	.LFB13
 2255 006c 30000000 		.4byte	.LFE13
 2256 0070 00000000 		.4byte	.LFB14
 2257 0074 2C000000 		.4byte	.LFE14
 2258 0078 00000000 		.4byte	.LFB15
 2259 007c A4000000 		.4byte	.LFE15
 2260 0080 00000000 		.4byte	.LFB16
 2261 0084 98000000 		.4byte	.LFE16
 2262 0088 00000000 		.4byte	.LFB17
 2263 008c 80000000 		.4byte	.LFE17
 2264 0090 00000000 		.4byte	0
 2265 0094 00000000 		.4byte	0
 2266              		.section	.debug_line,"",%progbits
 2267              	.Ldebug_line0:
 2268 0000 30020000 		.section	.debug_str,"MS",%progbits,1
 2268      02004200 
 2268      00000201 
 2268      FB0E0D00 
 2268      01010101 
 2269              	.LASF10:
 2270 0000 75696E74 		.ascii	"uint16\000"
 2270      313600
 2271              	.LASF48:
 2272 0007 61646347 		.ascii	"adcGain\000"
 2272      61696E00 
 2273              	.LASF23:
 2274 000f 636F756E 		.ascii	"counts\000"
 2274      747300
 2275              	.LASF54:
 2276 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2276      436F756E 
 2276      7473546F 
 2276      5F566F6C 
 2276      747300
 2277              	.LASF36:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 56


 2278 0029 4144435F 		.ascii	"ADC_Init\000"
 2278      496E6974 
 2278      00
 2279              	.LASF7:
 2280 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2280      206C6F6E 
 2280      6720756E 
 2280      7369676E 
 2280      65642069 
 2281              	.LASF24:
 2282 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2282      496E7075 
 2282      7473506C 
 2282      6163656D 
 2282      656E7400 
 2283              	.LASF28:
 2284 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2284      53746172 
 2284      74436F6E 
 2284      76657274 
 2284      00
 2285              	.LASF6:
 2286 006e 6C6F6E67 		.ascii	"long long int\000"
 2286      206C6F6E 
 2286      6720696E 
 2286      7400
 2287              	.LASF0:
 2288 007c 7369676E 		.ascii	"signed char\000"
 2288      65642063 
 2288      68617200 
 2289              	.LASF30:
 2290 0088 73746174 		.ascii	"status\000"
 2290      757300
 2291              	.LASF13:
 2292 008f 696E7433 		.ascii	"int32\000"
 2292      3200
 2293              	.LASF25:
 2294 0095 4144435F 		.ascii	"ADC_Start\000"
 2294      53746172 
 2294      7400
 2295              	.LASF4:
 2296 009f 6C6F6E67 		.ascii	"long int\000"
 2296      20696E74 
 2296      00
 2297              	.LASF52:
 2298 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2298      436F756E 
 2298      7473546F 
 2298      5F75566F 
 2298      6C747300 
 2299              	.LASF59:
 2300 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2300      636F756E 
 2300      74735065 
 2300      72313056 
 2300      6F6C7400 
 2301              	.LASF9:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 57


 2302 00d0 75696E74 		.ascii	"uint8\000"
 2302      3800
 2303              	.LASF16:
 2304 00d6 646F7562 		.ascii	"double\000"
 2304      6C6500
 2305              	.LASF11:
 2306 00dd 75696E74 		.ascii	"uint32\000"
 2306      333200
 2307              	.LASF38:
 2308 00e4 6D61736B 		.ascii	"mask\000"
 2308      00
 2309              	.LASF57:
 2310 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2310      696E6974 
 2310      56617200 
 2311              	.LASF33:
 2312 00f5 7265744D 		.ascii	"retMode\000"
 2312      6F646500 
 2313              	.LASF43:
 2314 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2314      5365744C 
 2314      696D6974 
 2314      4D61736B 
 2314      00
 2315              	.LASF8:
 2316 010e 756E7369 		.ascii	"unsigned int\000"
 2316      676E6564 
 2316      20696E74 
 2316      00
 2317              	.LASF53:
 2318 011b 75566F6C 		.ascii	"uVolts\000"
 2318      747300
 2319              	.LASF5:
 2320 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2320      20756E73 
 2320      69676E65 
 2320      6420696E 
 2320      7400
 2321              	.LASF44:
 2322 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2322      53657453 
 2322      61744D61 
 2322      736B00
 2323              	.LASF55:
 2324 0143 766F6C74 		.ascii	"volts\000"
 2324      7300
 2325              	.LASF22:
 2326 0149 746D7052 		.ascii	"tmpRegVal\000"
 2326      65675661 
 2326      6C00
 2327              	.LASF3:
 2328 0153 73686F72 		.ascii	"short unsigned int\000"
 2328      7420756E 
 2328      7369676E 
 2328      65642069 
 2328      6E7400
 2329              	.LASF29:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 58


 2330 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2330      53746F70 
 2330      436F6E76 
 2330      65727400 
 2331              	.LASF2:
 2332 0176 73686F72 		.ascii	"short int\000"
 2332      7420696E 
 2332      7400
 2333              	.LASF51:
 2334 0180 6D566F6C 		.ascii	"mVolts\000"
 2334      747300
 2335              	.LASF19:
 2336 0187 72656733 		.ascii	"reg32\000"
 2336      3200
 2337              	.LASF14:
 2338 018d 666C6F61 		.ascii	"float32\000"
 2338      74333200 
 2339              	.LASF20:
 2340 0195 73697A65 		.ascii	"sizetype\000"
 2340      74797065 
 2340      00
 2341              	.LASF40:
 2342 019e 6C6F774C 		.ascii	"lowLimit\000"
 2342      696D6974 
 2342      00
 2343              	.LASF41:
 2344 01a7 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2344      53657448 
 2344      6967684C 
 2344      696D6974 
 2344      00
 2345              	.LASF31:
 2346 01b8 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2346      4973456E 
 2346      64436F6E 
 2346      76657273 
 2346      696F6E00 
 2347              	.LASF17:
 2348 01cc 696E7436 		.ascii	"int64\000"
 2348      3400
 2349              	.LASF37:
 2350 01d2 4144435F 		.ascii	"ADC_SetChanMask\000"
 2350      53657443 
 2350      68616E4D 
 2350      61736B00 
 2351              	.LASF47:
 2352 01e2 4144435F 		.ascii	"ADC_SetGain\000"
 2352      53657447 
 2352      61696E00 
 2353              	.LASF15:
 2354 01ee 666C6F61 		.ascii	"float\000"
 2354      7400
 2355              	.LASF62:
 2356 01f4 5A3A5C4F 		.ascii	"Z:\\OneDrive\\Tech\\GitHub\\Arm\\arm_controller_v2\\"
 2356      6E654472 
 2356      6976655C 
 2356      54656368 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 59


 2356      5C476974 
 2357 0222 61726D5F 		.ascii	"arm_controller_v2.1.cydsn\000"
 2357      636F6E74 
 2357      726F6C6C 
 2357      65725F76 
 2357      322E312E 
 2358              	.LASF42:
 2359 023c 68696768 		.ascii	"highLimit\000"
 2359      4C696D69 
 2359      7400
 2360              	.LASF49:
 2361 0246 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2361      436F756E 
 2361      7473546F 
 2361      5F6D566F 
 2361      6C747300 
 2362              	.LASF39:
 2363 025a 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2363      5365744C 
 2363      6F774C69 
 2363      6D697400 
 2364              	.LASF61:
 2365 026a 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2365      6E657261 
 2365      7465645F 
 2365      536F7572 
 2365      63655C50 
 2366              	.LASF1:
 2367 0289 756E7369 		.ascii	"unsigned char\000"
 2367      676E6564 
 2367      20636861 
 2367      7200
 2368              	.LASF58:
 2369 0297 4144435F 		.ascii	"ADC_offset\000"
 2369      6F666673 
 2369      657400
 2370              	.LASF60:
 2371 02a2 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2371      4320342E 
 2371      382E3420 
 2371      32303134 
 2371      30353236 
 2372 02d5 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2372      20726576 
 2372      6973696F 
 2372      6E203231 
 2372      31333538 
 2373 0308 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2373      74643D67 
 2373      6E753939 
 2373      202D6666 
 2373      756E6374 
 2374              	.LASF27:
 2375 0329 4144435F 		.ascii	"ADC_Stop\000"
 2375      53746F70 
 2375      00
 2376              	.LASF21:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\cctRZGnL.s 			page 60


 2377 0332 63684E75 		.ascii	"chNum\000"
 2377      6D00
 2378              	.LASF34:
 2379 0338 6368616E 		.ascii	"chan\000"
 2379      00
 2380              	.LASF18:
 2381 033d 63686172 		.ascii	"char\000"
 2381      00
 2382              	.LASF56:
 2383 0342 4144435F 		.ascii	"ADC_channelsConfig\000"
 2383      6368616E 
 2383      6E656C73 
 2383      436F6E66 
 2383      696700
 2384              	.LASF46:
 2385 0355 6F666673 		.ascii	"offset\000"
 2385      657400
 2386              	.LASF50:
 2387 035c 61646343 		.ascii	"adcCounts\000"
 2387      6F756E74 
 2387      7300
 2388              	.LASF26:
 2389 0366 4144435F 		.ascii	"ADC_Enable\000"
 2389      456E6162 
 2389      6C6500
 2390              	.LASF12:
 2391 0371 696E7431 		.ascii	"int16\000"
 2391      3600
 2392              	.LASF45:
 2393 0377 4144435F 		.ascii	"ADC_SetOffset\000"
 2393      5365744F 
 2393      66667365 
 2393      7400
 2394              	.LASF35:
 2395 0385 72657375 		.ascii	"result\000"
 2395      6C7400
 2396              	.LASF32:
 2397 038c 4144435F 		.ascii	"ADC_GetResult16\000"
 2397      47657452 
 2397      6573756C 
 2397      74313600 
 2398              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ServoGoalPosition,"ax",%progbits
  18              		.align	2
  19              		.global	ServoGoalPosition
  20              		.code	16
  21              		.thumb_func
  22              		.type	ServoGoalPosition, %function
  23              	ServoGoalPosition:
  24              	.LFB34:
  25              		.file 1 ".\\dynamixel.h"
   1:.\dynamixel.h **** /* ========================================
   2:.\dynamixel.h ****  * BYU Mars Rover 2015
   3:.\dynamixel.h ****  * Author: Sam Bury
   4:.\dynamixel.h ****  * ========================================
   5:.\dynamixel.h **** */
   6:.\dynamixel.h **** #ifndef DYNAMIXEL_H
   7:.\dynamixel.h **** #define DYNAMIXEL_H
   8:.\dynamixel.h **** 
   9:.\dynamixel.h ****     #include <project.h>
  10:.\dynamixel.h ****     
  11:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position);
  12:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque);
  13:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed);
  14:.\dynamixel.h **** 
  15:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position)
  16:.\dynamixel.h ****     {
  26              		.loc 1 16 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 86B0     		sub	sp, sp, #24
  33              		.cfi_def_cfa_offset 32
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 0A1C     		mov	r2, r1
  37 0008 FB1D     		add	r3, r7, #7
  38 000a 011C     		add	r1, r0, #0
  39 000c 1970     		strb	r1, [r3]
  40 000e 3B1D     		add	r3, r7, #4
  41 0010 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 2


  17:.\dynamixel.h ****         uint8 array[9];
  18:.\dynamixel.h ****         
  19:.\dynamixel.h ****         array[0] = 0xFF;
  42              		.loc 1 19 0
  43 0012 3B1C     		mov	r3, r7
  44 0014 0C33     		add	r3, r3, #12
  45 0016 FF22     		mov	r2, #255
  46 0018 1A70     		strb	r2, [r3]
  20:.\dynamixel.h ****         array[1] = 0xFF;
  47              		.loc 1 20 0
  48 001a 3B1C     		mov	r3, r7
  49 001c 0C33     		add	r3, r3, #12
  50 001e FF22     		mov	r2, #255
  51 0020 5A70     		strb	r2, [r3, #1]
  21:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
  52              		.loc 1 21 0
  53 0022 3B1C     		mov	r3, r7
  54 0024 0C33     		add	r3, r3, #12
  55 0026 FA1D     		add	r2, r7, #7
  56 0028 1278     		ldrb	r2, [r2]
  57 002a 9A70     		strb	r2, [r3, #2]
  22:.\dynamixel.h ****         array[3] = 0x05;
  58              		.loc 1 22 0
  59 002c 3B1C     		mov	r3, r7
  60 002e 0C33     		add	r3, r3, #12
  61 0030 0522     		mov	r2, #5
  62 0032 DA70     		strb	r2, [r3, #3]
  23:.\dynamixel.h ****         array[4] = 0x03; //write instruction
  63              		.loc 1 23 0
  64 0034 3B1C     		mov	r3, r7
  65 0036 0C33     		add	r3, r3, #12
  66 0038 0322     		mov	r2, #3
  67 003a 1A71     		strb	r2, [r3, #4]
  24:.\dynamixel.h ****         array[5] = 0x1E;
  68              		.loc 1 24 0
  69 003c 3B1C     		mov	r3, r7
  70 003e 0C33     		add	r3, r3, #12
  71 0040 1E22     		mov	r2, #30
  72 0042 5A71     		strb	r2, [r3, #5]
  25:.\dynamixel.h ****         array[6] = position;
  73              		.loc 1 25 0
  74 0044 3B1D     		add	r3, r7, #4
  75 0046 1B88     		ldrh	r3, [r3]
  76 0048 DAB2     		uxtb	r2, r3
  77 004a 3B1C     		mov	r3, r7
  78 004c 0C33     		add	r3, r3, #12
  79 004e 9A71     		strb	r2, [r3, #6]
  26:.\dynamixel.h ****         array[7] = position >> 8;
  80              		.loc 1 26 0
  81 0050 3B1D     		add	r3, r7, #4
  82 0052 1B88     		ldrh	r3, [r3]
  83 0054 1B0A     		lsr	r3, r3, #8
  84 0056 9BB2     		uxth	r3, r3
  85 0058 DAB2     		uxtb	r2, r3
  86 005a 3B1C     		mov	r3, r7
  87 005c 0C33     		add	r3, r3, #12
  88 005e DA71     		strb	r2, [r3, #7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 3


  27:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
  89              		.loc 1 27 0
  90 0060 3B1C     		mov	r3, r7
  91 0062 0C33     		add	r3, r3, #12
  92 0064 9A79     		ldrb	r2, [r3, #6]
  93 0066 FB1D     		add	r3, r7, #7
  94 0068 1B78     		ldrb	r3, [r3]
  95 006a D318     		add	r3, r2, r3
  96 006c DAB2     		uxtb	r2, r3
  97 006e 3B1C     		mov	r3, r7
  98 0070 0C33     		add	r3, r3, #12
  99 0072 DB79     		ldrb	r3, [r3, #7]
 100 0074 D318     		add	r3, r2, r3
 101 0076 DBB2     		uxtb	r3, r3
 102 0078 2633     		add	r3, r3, #38
 103 007a DBB2     		uxtb	r3, r3
 104 007c DB43     		mvn	r3, r3
 105 007e DAB2     		uxtb	r2, r3
 106 0080 3B1C     		mov	r3, r7
 107 0082 0C33     		add	r3, r3, #12
 108 0084 1A72     		strb	r2, [r3, #8]
  28:.\dynamixel.h ****         
  29:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 109              		.loc 1 29 0
 110 0086 3B1C     		mov	r3, r7
 111 0088 0C33     		add	r3, r3, #12
 112 008a 181C     		mov	r0, r3
 113 008c 0921     		mov	r1, #9
 114 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  30:.\dynamixel.h ****     }
 115              		.loc 1 30 0
 116 0092 BD46     		mov	sp, r7
 117 0094 06B0     		add	sp, sp, #24
 118              		@ sp needed
 119 0096 80BD     		pop	{r7, pc}
 120              		.cfi_endproc
 121              	.LFE34:
 122              		.size	ServoGoalPosition, .-ServoGoalPosition
 123              		.section	.text.SetServoTorque,"ax",%progbits
 124              		.align	2
 125              		.global	SetServoTorque
 126              		.code	16
 127              		.thumb_func
 128              		.type	SetServoTorque, %function
 129              	SetServoTorque:
 130              	.LFB35:
  31:.\dynamixel.h **** 
  32:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque)
  33:.\dynamixel.h ****     {
 131              		.loc 1 33 0
 132              		.cfi_startproc
 133 0000 80B5     		push	{r7, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 7, -8
 136              		.cfi_offset 14, -4
 137 0002 86B0     		sub	sp, sp, #24
 138              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 4


 139 0004 00AF     		add	r7, sp, #0
 140              		.cfi_def_cfa_register 7
 141 0006 0A1C     		mov	r2, r1
 142 0008 FB1D     		add	r3, r7, #7
 143 000a 011C     		add	r1, r0, #0
 144 000c 1970     		strb	r1, [r3]
 145 000e 3B1D     		add	r3, r7, #4
 146 0010 1A80     		strh	r2, [r3]
  34:.\dynamixel.h ****         uint8 array[9];
  35:.\dynamixel.h ****         
  36:.\dynamixel.h ****         array[0] = 0xFF;
 147              		.loc 1 36 0
 148 0012 3B1C     		mov	r3, r7
 149 0014 0C33     		add	r3, r3, #12
 150 0016 FF22     		mov	r2, #255
 151 0018 1A70     		strb	r2, [r3]
  37:.\dynamixel.h ****         array[1] = 0xFF;
 152              		.loc 1 37 0
 153 001a 3B1C     		mov	r3, r7
 154 001c 0C33     		add	r3, r3, #12
 155 001e FF22     		mov	r2, #255
 156 0020 5A70     		strb	r2, [r3, #1]
  38:.\dynamixel.h ****         array[2] = servoID; 
 157              		.loc 1 38 0
 158 0022 3B1C     		mov	r3, r7
 159 0024 0C33     		add	r3, r3, #12
 160 0026 FA1D     		add	r2, r7, #7
 161 0028 1278     		ldrb	r2, [r2]
 162 002a 9A70     		strb	r2, [r3, #2]
  39:.\dynamixel.h ****         array[3] = 0x05;
 163              		.loc 1 39 0
 164 002c 3B1C     		mov	r3, r7
 165 002e 0C33     		add	r3, r3, #12
 166 0030 0522     		mov	r2, #5
 167 0032 DA70     		strb	r2, [r3, #3]
  40:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 168              		.loc 1 40 0
 169 0034 3B1C     		mov	r3, r7
 170 0036 0C33     		add	r3, r3, #12
 171 0038 0322     		mov	r2, #3
 172 003a 1A71     		strb	r2, [r3, #4]
  41:.\dynamixel.h ****         array[5] = 0x0E;
 173              		.loc 1 41 0
 174 003c 3B1C     		mov	r3, r7
 175 003e 0C33     		add	r3, r3, #12
 176 0040 0E22     		mov	r2, #14
 177 0042 5A71     		strb	r2, [r3, #5]
  42:.\dynamixel.h ****         array[6] = torque;
 178              		.loc 1 42 0
 179 0044 3B1D     		add	r3, r7, #4
 180 0046 1B88     		ldrh	r3, [r3]
 181 0048 DAB2     		uxtb	r2, r3
 182 004a 3B1C     		mov	r3, r7
 183 004c 0C33     		add	r3, r3, #12
 184 004e 9A71     		strb	r2, [r3, #6]
  43:.\dynamixel.h ****         array[7] = torque >> 8;
 185              		.loc 1 43 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 5


 186 0050 3B1D     		add	r3, r7, #4
 187 0052 1B88     		ldrh	r3, [r3]
 188 0054 1B0A     		lsr	r3, r3, #8
 189 0056 9BB2     		uxth	r3, r3
 190 0058 DAB2     		uxtb	r2, r3
 191 005a 3B1C     		mov	r3, r7
 192 005c 0C33     		add	r3, r3, #12
 193 005e DA71     		strb	r2, [r3, #7]
  44:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 194              		.loc 1 44 0
 195 0060 3B1C     		mov	r3, r7
 196 0062 0C33     		add	r3, r3, #12
 197 0064 9A79     		ldrb	r2, [r3, #6]
 198 0066 FB1D     		add	r3, r7, #7
 199 0068 1B78     		ldrb	r3, [r3]
 200 006a D318     		add	r3, r2, r3
 201 006c DAB2     		uxtb	r2, r3
 202 006e 3B1C     		mov	r3, r7
 203 0070 0C33     		add	r3, r3, #12
 204 0072 DB79     		ldrb	r3, [r3, #7]
 205 0074 D318     		add	r3, r2, r3
 206 0076 DBB2     		uxtb	r3, r3
 207 0078 1633     		add	r3, r3, #22
 208 007a DBB2     		uxtb	r3, r3
 209 007c DB43     		mvn	r3, r3
 210 007e DAB2     		uxtb	r2, r3
 211 0080 3B1C     		mov	r3, r7
 212 0082 0C33     		add	r3, r3, #12
 213 0084 1A72     		strb	r2, [r3, #8]
  45:.\dynamixel.h ****         
  46:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);
 214              		.loc 1 46 0
 215 0086 3B1C     		mov	r3, r7
 216 0088 0C33     		add	r3, r3, #12
 217 008a 181C     		mov	r0, r3
 218 008c 0921     		mov	r1, #9
 219 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  47:.\dynamixel.h ****     }    
 220              		.loc 1 47 0
 221 0092 BD46     		mov	sp, r7
 222 0094 06B0     		add	sp, sp, #24
 223              		@ sp needed
 224 0096 80BD     		pop	{r7, pc}
 225              		.cfi_endproc
 226              	.LFE35:
 227              		.size	SetServoTorque, .-SetServoTorque
 228              		.section	.text.ServoSpeed,"ax",%progbits
 229              		.align	2
 230              		.global	ServoSpeed
 231              		.code	16
 232              		.thumb_func
 233              		.type	ServoSpeed, %function
 234              	ServoSpeed:
 235              	.LFB36:
  48:.\dynamixel.h **** 
  49:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed)
  50:.\dynamixel.h ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 6


 236              		.loc 1 50 0
 237              		.cfi_startproc
 238 0000 80B5     		push	{r7, lr}
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 86B0     		sub	sp, sp, #24
 243              		.cfi_def_cfa_offset 32
 244 0004 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 246 0006 0A1C     		mov	r2, r1
 247 0008 FB1D     		add	r3, r7, #7
 248 000a 011C     		add	r1, r0, #0
 249 000c 1970     		strb	r1, [r3]
 250 000e 3B1D     		add	r3, r7, #4
 251 0010 1A80     		strh	r2, [r3]
  51:.\dynamixel.h ****         uint8 array[9];
  52:.\dynamixel.h ****         
  53:.\dynamixel.h ****         array[0] = 0xFF;
 252              		.loc 1 53 0
 253 0012 3B1C     		mov	r3, r7
 254 0014 0C33     		add	r3, r3, #12
 255 0016 FF22     		mov	r2, #255
 256 0018 1A70     		strb	r2, [r3]
  54:.\dynamixel.h ****         array[1] = 0xFF;
 257              		.loc 1 54 0
 258 001a 3B1C     		mov	r3, r7
 259 001c 0C33     		add	r3, r3, #12
 260 001e FF22     		mov	r2, #255
 261 0020 5A70     		strb	r2, [r3, #1]
  55:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 262              		.loc 1 55 0
 263 0022 3B1C     		mov	r3, r7
 264 0024 0C33     		add	r3, r3, #12
 265 0026 FA1D     		add	r2, r7, #7
 266 0028 1278     		ldrb	r2, [r2]
 267 002a 9A70     		strb	r2, [r3, #2]
  56:.\dynamixel.h ****         array[3] = 0x05;
 268              		.loc 1 56 0
 269 002c 3B1C     		mov	r3, r7
 270 002e 0C33     		add	r3, r3, #12
 271 0030 0522     		mov	r2, #5
 272 0032 DA70     		strb	r2, [r3, #3]
  57:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 273              		.loc 1 57 0
 274 0034 3B1C     		mov	r3, r7
 275 0036 0C33     		add	r3, r3, #12
 276 0038 0322     		mov	r2, #3
 277 003a 1A71     		strb	r2, [r3, #4]
  58:.\dynamixel.h ****         array[5] = 0x20;
 278              		.loc 1 58 0
 279 003c 3B1C     		mov	r3, r7
 280 003e 0C33     		add	r3, r3, #12
 281 0040 2022     		mov	r2, #32
 282 0042 5A71     		strb	r2, [r3, #5]
  59:.\dynamixel.h ****         array[6] = speed;
 283              		.loc 1 59 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 7


 284 0044 3B1D     		add	r3, r7, #4
 285 0046 1B88     		ldrh	r3, [r3]
 286 0048 DAB2     		uxtb	r2, r3
 287 004a 3B1C     		mov	r3, r7
 288 004c 0C33     		add	r3, r3, #12
 289 004e 9A71     		strb	r2, [r3, #6]
  60:.\dynamixel.h ****         array[7] = speed >> 8;
 290              		.loc 1 60 0
 291 0050 3B1D     		add	r3, r7, #4
 292 0052 1B88     		ldrh	r3, [r3]
 293 0054 1B0A     		lsr	r3, r3, #8
 294 0056 9BB2     		uxth	r3, r3
 295 0058 DAB2     		uxtb	r2, r3
 296 005a 3B1C     		mov	r3, r7
 297 005c 0C33     		add	r3, r3, #12
 298 005e DA71     		strb	r2, [r3, #7]
  61:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 299              		.loc 1 61 0
 300 0060 3B1C     		mov	r3, r7
 301 0062 0C33     		add	r3, r3, #12
 302 0064 9A79     		ldrb	r2, [r3, #6]
 303 0066 FB1D     		add	r3, r7, #7
 304 0068 1B78     		ldrb	r3, [r3]
 305 006a D318     		add	r3, r2, r3
 306 006c DAB2     		uxtb	r2, r3
 307 006e 3B1C     		mov	r3, r7
 308 0070 0C33     		add	r3, r3, #12
 309 0072 DB79     		ldrb	r3, [r3, #7]
 310 0074 D318     		add	r3, r2, r3
 311 0076 DBB2     		uxtb	r3, r3
 312 0078 2833     		add	r3, r3, #40
 313 007a DBB2     		uxtb	r3, r3
 314 007c DB43     		mvn	r3, r3
 315 007e DAB2     		uxtb	r2, r3
 316 0080 3B1C     		mov	r3, r7
 317 0082 0C33     		add	r3, r3, #12
 318 0084 1A72     		strb	r2, [r3, #8]
  62:.\dynamixel.h ****         
  63:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 319              		.loc 1 63 0
 320 0086 3B1C     		mov	r3, r7
 321 0088 0C33     		add	r3, r3, #12
 322 008a 181C     		mov	r0, r3
 323 008c 0921     		mov	r1, #9
 324 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  64:.\dynamixel.h ****     }
 325              		.loc 1 64 0
 326 0092 BD46     		mov	sp, r7
 327 0094 06B0     		add	sp, sp, #24
 328              		@ sp needed
 329 0096 80BD     		pop	{r7, pc}
 330              		.cfi_endproc
 331              	.LFE36:
 332              		.size	ServoSpeed, .-ServoSpeed
 333              		.global	NEUTRAL
 334              		.data
 335              		.align	1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 8


 336              		.type	NEUTRAL, %object
 337              		.size	NEUTRAL, 2
 338              	NEUTRAL:
 339 0000 DC05     		.short	1500
 340              		.comm	data_array,22,4
 341              		.comm	feedback_array,14,4
 342              		.comm	heartbeat_array,14,4
 343              		.comm	HEARTBEAT_FLAG,1,1
 344              		.global	WT_feedback_flag
 345              		.bss
 346              		.type	WT_feedback_flag, %object
 347              		.size	WT_feedback_flag, 1
 348              	WT_feedback_flag:
 349 0000 00       		.space	1
 350              		.global	WR_feedback_flag
 351              		.type	WR_feedback_flag, %object
 352              		.size	WR_feedback_flag, 1
 353              	WR_feedback_flag:
 354 0001 00       		.space	1
 355              		.global	WR_feedback
 356              		.align	1
 357              		.type	WR_feedback, %object
 358              		.size	WR_feedback, 2
 359              	WR_feedback:
 360 0002 0000     		.space	2
 361              		.global	WT_FLAG
 362              		.type	WT_FLAG, %object
 363              		.size	WT_FLAG, 1
 364              	WT_FLAG:
 365 0004 00       		.space	1
 366              		.global	WR_FLAG
 367              		.type	WR_FLAG, %object
 368              		.size	WR_FLAG, 1
 369              	WR_FLAG:
 370 0005 00       		.space	1
 371              		.global	ELBOW_FLAG
 372              		.type	ELBOW_FLAG, %object
 373              		.size	ELBOW_FLAG, 1
 374              	ELBOW_FLAG:
 375 0006 00       		.space	1
 376              		.global	SHOULDER_FLAG
 377              		.type	SHOULDER_FLAG, %object
 378              		.size	SHOULDER_FLAG, 1
 379              	SHOULDER_FLAG:
 380 0007 00       		.space	1
 381              		.global	BA_FLAG
 382              		.type	BA_FLAG, %object
 383              		.size	BA_FLAG, 1
 384              	BA_FLAG:
 385 0008 00       		.space	1
 386              		.global	EFFECTOR_FLAG
 387              		.type	EFFECTOR_FLAG, %object
 388              		.size	EFFECTOR_FLAG, 1
 389              	EFFECTOR_FLAG:
 390 0009 00       		.space	1
 391              		.global	ARD_FLAG
 392              		.type	ARD_FLAG, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 9


 393              		.size	ARD_FLAG, 1
 394              	ARD_FLAG:
 395 000a 00       		.space	1
 396              		.global	Time_Out_flag
 397              		.type	Time_Out_flag, %object
 398              		.size	Time_Out_flag, 1
 399              	Time_Out_flag:
 400 000b 00       		.space	1
 401              		.global	Time_count
 402              		.type	Time_count, %object
 403              		.size	Time_count, 1
 404              	Time_count:
 405 000c 00       		.space	1
 406              		.global	dropped_packets
 407 000d 00       		.align	1
 408              		.type	dropped_packets, %object
 409              		.size	dropped_packets, 2
 410              	dropped_packets:
 411 000e 0000     		.space	2
 412              		.global	fail_safe_errors
 413              		.align	1
 414              		.type	fail_safe_errors, %object
 415              		.size	fail_safe_errors, 2
 416              	fail_safe_errors:
 417 0010 0000     		.space	2
 418              		.global	shldr_errors
 419              		.align	1
 420              		.type	shldr_errors, %object
 421              		.size	shldr_errors, 2
 422              	shldr_errors:
 423 0012 0000     		.space	2
 424              		.global	elbw_errors
 425              		.align	1
 426              		.type	elbw_errors, %object
 427              		.size	elbw_errors, 2
 428              	elbw_errors:
 429 0014 0000     		.space	2
 430              		.global	BA_errors
 431              		.align	1
 432              		.type	BA_errors, %object
 433              		.size	BA_errors, 2
 434              	BA_errors:
 435 0016 0000     		.space	2
 436              		.global	WT_errors
 437              		.align	1
 438              		.type	WT_errors, %object
 439              		.size	WT_errors, 2
 440              	WT_errors:
 441 0018 0000     		.space	2
 442              		.global	WR_errors
 443              		.align	1
 444              		.type	WR_errors, %object
 445              		.size	WR_errors, 2
 446              	WR_errors:
 447 001a 0000     		.space	2
 448              		.global	eff_errors
 449              		.align	1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 10


 450              		.type	eff_errors, %object
 451              		.size	eff_errors, 2
 452              	eff_errors:
 453 001c 0000     		.space	2
 454              		.comm	timerFlag,1,1
 455              		.comm	latest_command,2,2
 456              		.comm	latest_WR_command,2,2
 457              		.comm	latest_WT_command,2,2
 458              		.section	.text.timer_isr,"ax",%progbits
 459              		.align	2
 460              		.global	timer_isr
 461              		.code	16
 462              		.thumb_func
 463              		.type	timer_isr, %function
 464              	timer_isr:
 465              	.LFB37:
 466              		.file 2 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 467              		.loc 2 11 0
 468              		.cfi_startproc
 469 0000 80B5     		push	{r7, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 82B0     		sub	sp, sp, #8
 474              		.cfi_def_cfa_offset 16
 475 0004 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 477              		.loc 2 12 0
 478 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 479 000a 031C     		mov	r3, r0
 480 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 481              		.loc 2 13 0
 482 000e 054B     		ldr	r3, .L5
 483 0010 0122     		mov	r2, #1
 484 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 485              		.loc 2 14 0
 486 0014 7B68     		ldr	r3, [r7, #4]
 487 0016 181C     		mov	r0, r3
 488 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 489              		.loc 2 15 0
 490 001c BD46     		mov	sp, r7
 491 001e 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 11


 492              		@ sp needed
 493 0020 80BD     		pop	{r7, pc}
 494              	.L6:
 495 0022 C046     		.align	2
 496              	.L5:
 497 0024 00000000 		.word	timerFlag
 498              		.cfi_endproc
 499              	.LFE37:
 500              		.size	timer_isr, .-timer_isr
 501              		.section	.text.simple_pos_to_vel,"ax",%progbits
 502              		.align	2
 503              		.global	simple_pos_to_vel
 504              		.code	16
 505              		.thumb_func
 506              		.type	simple_pos_to_vel, %function
 507              	simple_pos_to_vel:
 508              	.LFB38:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** //TODO: set bounds checking
  19:.\main.c      **** uint16 simple_pos_to_vel(uint16 new_command, uint16 recent_command)
  20:.\main.c      **** {
 509              		.loc 2 20 0
 510              		.cfi_startproc
 511 0000 80B5     		push	{r7, lr}
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
 515 0002 84B0     		sub	sp, sp, #16
 516              		.cfi_def_cfa_offset 24
 517 0004 00AF     		add	r7, sp, #0
 518              		.cfi_def_cfa_register 7
 519 0006 0A1C     		mov	r2, r1
 520 0008 BB1D     		add	r3, r7, #6
 521 000a 011C     		add	r1, r0, #0
 522 000c 1980     		strh	r1, [r3]
 523 000e 3B1D     		add	r3, r7, #4
 524 0010 1A80     		strh	r2, [r3]
  21:.\main.c      ****     uint16 cur_command;
  22:.\main.c      ****     
  23:.\main.c      ****     if(new_command >= 1000 && new_command < 1250)
 525              		.loc 2 23 0
 526 0012 BB1D     		add	r3, r7, #6
 527 0014 1A88     		ldrh	r2, [r3]
 528 0016 454B     		ldr	r3, .L23
 529 0018 9A42     		cmp	r2, r3
 530 001a 16D9     		bls	.L8
 531              		.loc 2 23 0 is_stmt 0 discriminator 1
 532 001c BB1D     		add	r3, r7, #6
 533 001e 1A88     		ldrh	r2, [r3]
 534 0020 434B     		ldr	r3, .L23+4
 535 0022 9A42     		cmp	r2, r3
 536 0024 11D8     		bhi	.L8
  24:.\main.c      ****     {
  25:.\main.c      ****         if(recent_command > 1002)
 537              		.loc 2 25 0 is_stmt 1
 538 0026 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 12


 539 0028 1A88     		ldrh	r2, [r3]
 540 002a 424B     		ldr	r3, .L23+8
 541 002c 9A42     		cmp	r2, r3
 542 002e 06D9     		bls	.L9
  26:.\main.c      ****         {
  27:.\main.c      ****             cur_command = recent_command - 2;
 543              		.loc 2 27 0
 544 0030 3B1C     		mov	r3, r7
 545 0032 0E33     		add	r3, r3, #14
 546 0034 3A1D     		add	r2, r7, #4
 547 0036 1288     		ldrh	r2, [r2]
 548 0038 023A     		sub	r2, r2, #2
 549 003a 1A80     		strh	r2, [r3]
  25:.\main.c      ****         if(recent_command > 1002)
 550              		.loc 2 25 0
 551 003c 6EE0     		b	.L11
 552              	.L9:
  28:.\main.c      ****         }
  29:.\main.c      ****         else
  30:.\main.c      ****         {
  31:.\main.c      ****             cur_command = 1000;
 553              		.loc 2 31 0
 554 003e 3B1C     		mov	r3, r7
 555 0040 0E33     		add	r3, r3, #14
 556 0042 FA22     		mov	r2, #250
 557 0044 9200     		lsl	r2, r2, #2
 558 0046 1A80     		strh	r2, [r3]
  25:.\main.c      ****         if(recent_command > 1002)
 559              		.loc 2 25 0
 560 0048 68E0     		b	.L11
 561              	.L8:
  32:.\main.c      ****         }
  33:.\main.c      ****     }
  34:.\main.c      ****     else if(new_command >= 1250 && new_command < 1375)
 562              		.loc 2 34 0
 563 004a BB1D     		add	r3, r7, #6
 564 004c 1A88     		ldrh	r2, [r3]
 565 004e 384B     		ldr	r3, .L23+4
 566 0050 9A42     		cmp	r2, r3
 567 0052 16D9     		bls	.L12
 568              		.loc 2 34 0 is_stmt 0 discriminator 1
 569 0054 BB1D     		add	r3, r7, #6
 570 0056 1A88     		ldrh	r2, [r3]
 571 0058 374B     		ldr	r3, .L23+12
 572 005a 9A42     		cmp	r2, r3
 573 005c 11D8     		bhi	.L12
  35:.\main.c      ****     {
  36:.\main.c      ****         if(recent_command > 1001)
 574              		.loc 2 36 0 is_stmt 1
 575 005e 3B1D     		add	r3, r7, #4
 576 0060 1A88     		ldrh	r2, [r3]
 577 0062 364B     		ldr	r3, .L23+16
 578 0064 9A42     		cmp	r2, r3
 579 0066 06D9     		bls	.L13
  37:.\main.c      ****         {
  38:.\main.c      ****             cur_command = recent_command - 1;
 580              		.loc 2 38 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 13


 581 0068 3B1C     		mov	r3, r7
 582 006a 0E33     		add	r3, r3, #14
 583 006c 3A1D     		add	r2, r7, #4
 584 006e 1288     		ldrh	r2, [r2]
 585 0070 013A     		sub	r2, r2, #1
 586 0072 1A80     		strh	r2, [r3]
  36:.\main.c      ****         if(recent_command > 1001)
 587              		.loc 2 36 0
 588 0074 52E0     		b	.L11
 589              	.L13:
  39:.\main.c      ****         }
  40:.\main.c      ****         else
  41:.\main.c      ****         {
  42:.\main.c      ****             cur_command = 1000;
 590              		.loc 2 42 0
 591 0076 3B1C     		mov	r3, r7
 592 0078 0E33     		add	r3, r3, #14
 593 007a FA22     		mov	r2, #250
 594 007c 9200     		lsl	r2, r2, #2
 595 007e 1A80     		strh	r2, [r3]
  36:.\main.c      ****         if(recent_command > 1001)
 596              		.loc 2 36 0
 597 0080 4CE0     		b	.L11
 598              	.L12:
  43:.\main.c      ****         }    
  44:.\main.c      ****     }
  45:.\main.c      ****     else if(new_command <= 1625 && new_command >= 1375)
 599              		.loc 2 45 0
 600 0082 BB1D     		add	r3, r7, #6
 601 0084 1A88     		ldrh	r2, [r3]
 602 0086 2E4B     		ldr	r3, .L23+20
 603 0088 9A42     		cmp	r2, r3
 604 008a 0AD8     		bhi	.L15
 605              		.loc 2 45 0 is_stmt 0 discriminator 1
 606 008c BB1D     		add	r3, r7, #6
 607 008e 1A88     		ldrh	r2, [r3]
 608 0090 294B     		ldr	r3, .L23+12
 609 0092 9A42     		cmp	r2, r3
 610 0094 05D9     		bls	.L15
  46:.\main.c      ****     {
  47:.\main.c      ****         cur_command = recent_command;
 611              		.loc 2 47 0 is_stmt 1
 612 0096 3B1C     		mov	r3, r7
 613 0098 0E33     		add	r3, r3, #14
 614 009a 3A1D     		add	r2, r7, #4
 615 009c 1288     		ldrh	r2, [r2]
 616 009e 1A80     		strh	r2, [r3]
 617 00a0 3CE0     		b	.L11
 618              	.L15:
  48:.\main.c      ****     }
  49:.\main.c      ****     else if(new_command > 1625 && new_command <= 1750)
 619              		.loc 2 49 0
 620 00a2 BB1D     		add	r3, r7, #6
 621 00a4 1A88     		ldrh	r2, [r3]
 622 00a6 264B     		ldr	r3, .L23+20
 623 00a8 9A42     		cmp	r2, r3
 624 00aa 16D9     		bls	.L16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 14


 625              		.loc 2 49 0 is_stmt 0 discriminator 1
 626 00ac BB1D     		add	r3, r7, #6
 627 00ae 1A88     		ldrh	r2, [r3]
 628 00b0 244B     		ldr	r3, .L23+24
 629 00b2 9A42     		cmp	r2, r3
 630 00b4 11D8     		bhi	.L16
  50:.\main.c      ****     {
  51:.\main.c      ****         if(recent_command < 1999)
 631              		.loc 2 51 0 is_stmt 1
 632 00b6 3B1D     		add	r3, r7, #4
 633 00b8 1A88     		ldrh	r2, [r3]
 634 00ba 234B     		ldr	r3, .L23+28
 635 00bc 9A42     		cmp	r2, r3
 636 00be 06D8     		bhi	.L17
  52:.\main.c      ****         {
  53:.\main.c      ****             cur_command = recent_command + 1;
 637              		.loc 2 53 0
 638 00c0 3B1C     		mov	r3, r7
 639 00c2 0E33     		add	r3, r3, #14
 640 00c4 3A1D     		add	r2, r7, #4
 641 00c6 1288     		ldrh	r2, [r2]
 642 00c8 0132     		add	r2, r2, #1
 643 00ca 1A80     		strh	r2, [r3]
  51:.\main.c      ****         if(recent_command < 1999)
 644              		.loc 2 51 0
 645 00cc 26E0     		b	.L11
 646              	.L17:
  54:.\main.c      ****         }
  55:.\main.c      ****         else
  56:.\main.c      ****         {
  57:.\main.c      ****             cur_command = 2000;
 647              		.loc 2 57 0
 648 00ce 3B1C     		mov	r3, r7
 649 00d0 0E33     		add	r3, r3, #14
 650 00d2 FA22     		mov	r2, #250
 651 00d4 D200     		lsl	r2, r2, #3
 652 00d6 1A80     		strh	r2, [r3]
  51:.\main.c      ****         if(recent_command < 1999)
 653              		.loc 2 51 0
 654 00d8 20E0     		b	.L11
 655              	.L16:
  58:.\main.c      ****         }
  59:.\main.c      ****     }
  60:.\main.c      ****     else if(new_command > 1750 && new_command <= 2000)
 656              		.loc 2 60 0
 657 00da BB1D     		add	r3, r7, #6
 658 00dc 1A88     		ldrh	r2, [r3]
 659 00de 194B     		ldr	r3, .L23+24
 660 00e0 9A42     		cmp	r2, r3
 661 00e2 17D9     		bls	.L19
 662              		.loc 2 60 0 is_stmt 0 discriminator 1
 663 00e4 BB1D     		add	r3, r7, #6
 664 00e6 1A88     		ldrh	r2, [r3]
 665 00e8 FA23     		mov	r3, #250
 666 00ea DB00     		lsl	r3, r3, #3
 667 00ec 9A42     		cmp	r2, r3
 668 00ee 11D8     		bhi	.L19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 15


  61:.\main.c      ****     {
  62:.\main.c      ****         if(recent_command < 1998)
 669              		.loc 2 62 0 is_stmt 1
 670 00f0 3B1D     		add	r3, r7, #4
 671 00f2 1A88     		ldrh	r2, [r3]
 672 00f4 154B     		ldr	r3, .L23+32
 673 00f6 9A42     		cmp	r2, r3
 674 00f8 06D8     		bhi	.L20
  63:.\main.c      ****         {
  64:.\main.c      ****             cur_command = recent_command + 2;
 675              		.loc 2 64 0
 676 00fa 3B1C     		mov	r3, r7
 677 00fc 0E33     		add	r3, r3, #14
 678 00fe 3A1D     		add	r2, r7, #4
 679 0100 1288     		ldrh	r2, [r2]
 680 0102 0232     		add	r2, r2, #2
 681 0104 1A80     		strh	r2, [r3]
  62:.\main.c      ****         if(recent_command < 1998)
 682              		.loc 2 62 0
 683 0106 09E0     		b	.L11
 684              	.L20:
  65:.\main.c      ****         }
  66:.\main.c      ****         else
  67:.\main.c      ****         {
  68:.\main.c      ****             cur_command = 2000;
 685              		.loc 2 68 0
 686 0108 3B1C     		mov	r3, r7
 687 010a 0E33     		add	r3, r3, #14
 688 010c FA22     		mov	r2, #250
 689 010e D200     		lsl	r2, r2, #3
 690 0110 1A80     		strh	r2, [r3]
  62:.\main.c      ****         if(recent_command < 1998)
 691              		.loc 2 62 0
 692 0112 03E0     		b	.L11
 693              	.L19:
  69:.\main.c      ****         }
  70:.\main.c      ****     }
  71:.\main.c      ****     else
  72:.\main.c      ****     {
  73:.\main.c      ****         //increment error variable
  74:.\main.c      ****         cur_command = 1500;
 694              		.loc 2 74 0
 695 0114 3B1C     		mov	r3, r7
 696 0116 0E33     		add	r3, r3, #14
 697 0118 0D4A     		ldr	r2, .L23+36
 698 011a 1A80     		strh	r2, [r3]
 699              	.L11:
  75:.\main.c      ****     }
  76:.\main.c      ****     return cur_command;
 700              		.loc 2 76 0
 701 011c 3B1C     		mov	r3, r7
 702 011e 0E33     		add	r3, r3, #14
 703 0120 1B88     		ldrh	r3, [r3]
  77:.\main.c      **** }
 704              		.loc 2 77 0
 705 0122 181C     		mov	r0, r3
 706 0124 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 16


 707 0126 04B0     		add	sp, sp, #16
 708              		@ sp needed
 709 0128 80BD     		pop	{r7, pc}
 710              	.L24:
 711 012a C046     		.align	2
 712              	.L23:
 713 012c E7030000 		.word	999
 714 0130 E1040000 		.word	1249
 715 0134 EA030000 		.word	1002
 716 0138 5E050000 		.word	1374
 717 013c E9030000 		.word	1001
 718 0140 59060000 		.word	1625
 719 0144 D6060000 		.word	1750
 720 0148 CE070000 		.word	1998
 721 014c CD070000 		.word	1997
 722 0150 DC050000 		.word	1500
 723              		.cfi_endproc
 724              	.LFE38:
 725              		.size	simple_pos_to_vel, .-simple_pos_to_vel
 726              		.section	.text.WT_pos_to_vel,"ax",%progbits
 727              		.align	2
 728              		.global	WT_pos_to_vel
 729              		.code	16
 730              		.thumb_func
 731              		.type	WT_pos_to_vel, %function
 732              	WT_pos_to_vel:
 733              	.LFB39:
  78:.\main.c      **** 
  79:.\main.c      **** uint16 WT_pos_to_vel(uint16 new_command, uint16 recent_command)
  80:.\main.c      **** {
 734              		.loc 2 80 0
 735              		.cfi_startproc
 736 0000 80B5     		push	{r7, lr}
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 7, -8
 739              		.cfi_offset 14, -4
 740 0002 84B0     		sub	sp, sp, #16
 741              		.cfi_def_cfa_offset 24
 742 0004 00AF     		add	r7, sp, #0
 743              		.cfi_def_cfa_register 7
 744 0006 0A1C     		mov	r2, r1
 745 0008 BB1D     		add	r3, r7, #6
 746 000a 011C     		add	r1, r0, #0
 747 000c 1980     		strh	r1, [r3]
 748 000e 3B1D     		add	r3, r7, #4
 749 0010 1A80     		strh	r2, [r3]
  81:.\main.c      ****     uint16 cur_command;
  82:.\main.c      ****     
  83:.\main.c      ****     if(new_command >= 1024 && new_command < 2000)
 750              		.loc 2 83 0
 751 0012 BB1D     		add	r3, r7, #6
 752 0014 1A88     		ldrh	r2, [r3]
 753 0016 2A4B     		ldr	r3, .L35
 754 0018 9A42     		cmp	r2, r3
 755 001a 16D9     		bls	.L26
 756              		.loc 2 83 0 is_stmt 0 discriminator 1
 757 001c BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 17


 758 001e 1A88     		ldrh	r2, [r3]
 759 0020 284B     		ldr	r3, .L35+4
 760 0022 9A42     		cmp	r2, r3
 761 0024 11D8     		bhi	.L26
  84:.\main.c      ****     {
  85:.\main.c      ****         if(recent_command > 1027)
 762              		.loc 2 85 0 is_stmt 1
 763 0026 3B1D     		add	r3, r7, #4
 764 0028 1A88     		ldrh	r2, [r3]
 765 002a 274B     		ldr	r3, .L35+8
 766 002c 9A42     		cmp	r2, r3
 767 002e 06D9     		bls	.L27
  86:.\main.c      ****         {
  87:.\main.c      ****             cur_command = recent_command - 3;
 768              		.loc 2 87 0
 769 0030 3B1C     		mov	r3, r7
 770 0032 0E33     		add	r3, r3, #14
 771 0034 3A1D     		add	r2, r7, #4
 772 0036 1288     		ldrh	r2, [r2]
 773 0038 033A     		sub	r2, r2, #3
 774 003a 1A80     		strh	r2, [r3]
  85:.\main.c      ****         if(recent_command > 1027)
 775              		.loc 2 85 0
 776 003c 39E0     		b	.L29
 777              	.L27:
  88:.\main.c      ****         }
  89:.\main.c      ****         else
  90:.\main.c      ****         {
  91:.\main.c      ****             cur_command = 1024;
 778              		.loc 2 91 0
 779 003e 3B1C     		mov	r3, r7
 780 0040 0E33     		add	r3, r3, #14
 781 0042 8022     		mov	r2, #128
 782 0044 D200     		lsl	r2, r2, #3
 783 0046 1A80     		strh	r2, [r3]
  85:.\main.c      ****         if(recent_command > 1027)
 784              		.loc 2 85 0
 785 0048 33E0     		b	.L29
 786              	.L26:
  92:.\main.c      ****         }    
  93:.\main.c      ****     }
  94:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 787              		.loc 2 94 0
 788 004a BB1D     		add	r3, r7, #6
 789 004c 1A88     		ldrh	r2, [r3]
 790 004e 8323     		mov	r3, #131
 791 0050 1B01     		lsl	r3, r3, #4
 792 0052 9A42     		cmp	r2, r3
 793 0054 0AD8     		bhi	.L30
 794              		.loc 2 94 0 is_stmt 0 discriminator 1
 795 0056 BB1D     		add	r3, r7, #6
 796 0058 1A88     		ldrh	r2, [r3]
 797 005a 1A4B     		ldr	r3, .L35+4
 798 005c 9A42     		cmp	r2, r3
 799 005e 05D9     		bls	.L30
  95:.\main.c      ****     {
  96:.\main.c      ****         cur_command = recent_command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 18


 800              		.loc 2 96 0 is_stmt 1
 801 0060 3B1C     		mov	r3, r7
 802 0062 0E33     		add	r3, r3, #14
 803 0064 3A1D     		add	r2, r7, #4
 804 0066 1288     		ldrh	r2, [r2]
 805 0068 1A80     		strh	r2, [r3]
 806 006a 22E0     		b	.L29
 807              	.L30:
  97:.\main.c      ****     }
  98:.\main.c      ****     else if(new_command > 2096 && new_command <= 3072)
 808              		.loc 2 98 0
 809 006c BB1D     		add	r3, r7, #6
 810 006e 1A88     		ldrh	r2, [r3]
 811 0070 8323     		mov	r3, #131
 812 0072 1B01     		lsl	r3, r3, #4
 813 0074 9A42     		cmp	r2, r3
 814 0076 17D9     		bls	.L31
 815              		.loc 2 98 0 is_stmt 0 discriminator 1
 816 0078 BB1D     		add	r3, r7, #6
 817 007a 1A88     		ldrh	r2, [r3]
 818 007c C023     		mov	r3, #192
 819 007e 1B01     		lsl	r3, r3, #4
 820 0080 9A42     		cmp	r2, r3
 821 0082 11D8     		bhi	.L31
  99:.\main.c      ****     {
 100:.\main.c      ****         if(recent_command < 3069)
 822              		.loc 2 100 0 is_stmt 1
 823 0084 3B1D     		add	r3, r7, #4
 824 0086 1A88     		ldrh	r2, [r3]
 825 0088 104B     		ldr	r3, .L35+12
 826 008a 9A42     		cmp	r2, r3
 827 008c 06D8     		bhi	.L32
 101:.\main.c      ****         {
 102:.\main.c      ****             cur_command = recent_command + 3;
 828              		.loc 2 102 0
 829 008e 3B1C     		mov	r3, r7
 830 0090 0E33     		add	r3, r3, #14
 831 0092 3A1D     		add	r2, r7, #4
 832 0094 1288     		ldrh	r2, [r2]
 833 0096 0332     		add	r2, r2, #3
 834 0098 1A80     		strh	r2, [r3]
 100:.\main.c      ****         if(recent_command < 3069)
 835              		.loc 2 100 0
 836 009a 0AE0     		b	.L29
 837              	.L32:
 103:.\main.c      ****         }
 104:.\main.c      ****         else
 105:.\main.c      ****         {
 106:.\main.c      ****             cur_command = 3072;
 838              		.loc 2 106 0
 839 009c 3B1C     		mov	r3, r7
 840 009e 0E33     		add	r3, r3, #14
 841 00a0 C022     		mov	r2, #192
 842 00a2 1201     		lsl	r2, r2, #4
 843 00a4 1A80     		strh	r2, [r3]
 100:.\main.c      ****         if(recent_command < 3069)
 844              		.loc 2 100 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 19


 845 00a6 04E0     		b	.L29
 846              	.L31:
 107:.\main.c      ****         }
 108:.\main.c      ****     }
 109:.\main.c      ****     else
 110:.\main.c      ****     {
 111:.\main.c      ****         //increment error variable
 112:.\main.c      ****         cur_command = 2048;
 847              		.loc 2 112 0
 848 00a8 3B1C     		mov	r3, r7
 849 00aa 0E33     		add	r3, r3, #14
 850 00ac 8022     		mov	r2, #128
 851 00ae 1201     		lsl	r2, r2, #4
 852 00b0 1A80     		strh	r2, [r3]
 853              	.L29:
 113:.\main.c      ****     }
 114:.\main.c      ****     return cur_command;
 854              		.loc 2 114 0
 855 00b2 3B1C     		mov	r3, r7
 856 00b4 0E33     		add	r3, r3, #14
 857 00b6 1B88     		ldrh	r3, [r3]
 115:.\main.c      **** }
 858              		.loc 2 115 0
 859 00b8 181C     		mov	r0, r3
 860 00ba BD46     		mov	sp, r7
 861 00bc 04B0     		add	sp, sp, #16
 862              		@ sp needed
 863 00be 80BD     		pop	{r7, pc}
 864              	.L36:
 865              		.align	2
 866              	.L35:
 867 00c0 FF030000 		.word	1023
 868 00c4 CF070000 		.word	1999
 869 00c8 03040000 		.word	1027
 870 00cc FC0B0000 		.word	3068
 871              		.cfi_endproc
 872              	.LFE39:
 873              		.size	WT_pos_to_vel, .-WT_pos_to_vel
 874              		.section	.text.WR_pos_to_vel,"ax",%progbits
 875              		.align	2
 876              		.global	WR_pos_to_vel
 877              		.code	16
 878              		.thumb_func
 879              		.type	WR_pos_to_vel, %function
 880              	WR_pos_to_vel:
 881              	.LFB40:
 116:.\main.c      **** 
 117:.\main.c      **** uint16 WR_pos_to_vel(uint16 new_command, uint16 recent_command)
 118:.\main.c      **** {
 882              		.loc 2 118 0
 883              		.cfi_startproc
 884 0000 80B5     		push	{r7, lr}
 885              		.cfi_def_cfa_offset 8
 886              		.cfi_offset 7, -8
 887              		.cfi_offset 14, -4
 888 0002 84B0     		sub	sp, sp, #16
 889              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 20


 890 0004 00AF     		add	r7, sp, #0
 891              		.cfi_def_cfa_register 7
 892 0006 0A1C     		mov	r2, r1
 893 0008 BB1D     		add	r3, r7, #6
 894 000a 011C     		add	r1, r0, #0
 895 000c 1980     		strh	r1, [r3]
 896 000e 3B1D     		add	r3, r7, #4
 897 0010 1A80     		strh	r2, [r3]
 119:.\main.c      ****     uint16 cur_command;
 120:.\main.c      ****     
 121:.\main.c      ****     if(new_command >= 0 && new_command < 2000)
 898              		.loc 2 121 0
 899 0012 BB1D     		add	r3, r7, #6
 900 0014 1A88     		ldrh	r2, [r3]
 901 0016 264B     		ldr	r3, .L47
 902 0018 9A42     		cmp	r2, r3
 903 001a 0FD8     		bhi	.L38
 122:.\main.c      ****     {
 123:.\main.c      ****         if(recent_command > 3)
 904              		.loc 2 123 0
 905 001c 3B1D     		add	r3, r7, #4
 906 001e 1B88     		ldrh	r3, [r3]
 907 0020 032B     		cmp	r3, #3
 908 0022 06D9     		bls	.L39
 124:.\main.c      ****         {
 125:.\main.c      ****             cur_command = recent_command - 3;
 909              		.loc 2 125 0
 910 0024 3B1C     		mov	r3, r7
 911 0026 0E33     		add	r3, r3, #14
 912 0028 3A1D     		add	r2, r7, #4
 913 002a 1288     		ldrh	r2, [r2]
 914 002c 033A     		sub	r2, r2, #3
 915 002e 1A80     		strh	r2, [r3]
 916 0030 36E0     		b	.L41
 917              	.L39:
 126:.\main.c      ****         }
 127:.\main.c      ****         else
 128:.\main.c      ****         {
 129:.\main.c      ****             cur_command = 0;
 918              		.loc 2 129 0
 919 0032 3B1C     		mov	r3, r7
 920 0034 0E33     		add	r3, r3, #14
 921 0036 0022     		mov	r2, #0
 922 0038 1A80     		strh	r2, [r3]
 923 003a 31E0     		b	.L41
 924              	.L38:
 130:.\main.c      ****         }  
 131:.\main.c      ****     }
 132:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 925              		.loc 2 132 0
 926 003c BB1D     		add	r3, r7, #6
 927 003e 1A88     		ldrh	r2, [r3]
 928 0040 8323     		mov	r3, #131
 929 0042 1B01     		lsl	r3, r3, #4
 930 0044 9A42     		cmp	r2, r3
 931 0046 0AD8     		bhi	.L42
 932              		.loc 2 132 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 21


 933 0048 BB1D     		add	r3, r7, #6
 934 004a 1A88     		ldrh	r2, [r3]
 935 004c 184B     		ldr	r3, .L47
 936 004e 9A42     		cmp	r2, r3
 937 0050 05D9     		bls	.L42
 133:.\main.c      ****     {
 134:.\main.c      ****         cur_command = recent_command;
 938              		.loc 2 134 0 is_stmt 1
 939 0052 3B1C     		mov	r3, r7
 940 0054 0E33     		add	r3, r3, #14
 941 0056 3A1D     		add	r2, r7, #4
 942 0058 1288     		ldrh	r2, [r2]
 943 005a 1A80     		strh	r2, [r3]
 944 005c 20E0     		b	.L41
 945              	.L42:
 135:.\main.c      ****     }
 136:.\main.c      ****     else if(new_command > 2096 && new_command <= 4095)
 946              		.loc 2 136 0
 947 005e BB1D     		add	r3, r7, #6
 948 0060 1A88     		ldrh	r2, [r3]
 949 0062 8323     		mov	r3, #131
 950 0064 1B01     		lsl	r3, r3, #4
 951 0066 9A42     		cmp	r2, r3
 952 0068 15D9     		bls	.L43
 953              		.loc 2 136 0 is_stmt 0 discriminator 1
 954 006a BB1D     		add	r3, r7, #6
 955 006c 1A88     		ldrh	r2, [r3]
 956 006e 114B     		ldr	r3, .L47+4
 957 0070 9A42     		cmp	r2, r3
 958 0072 10D8     		bhi	.L43
 137:.\main.c      ****     {
 138:.\main.c      ****         if(recent_command < 4092)
 959              		.loc 2 138 0 is_stmt 1
 960 0074 3B1D     		add	r3, r7, #4
 961 0076 1A88     		ldrh	r2, [r3]
 962 0078 0F4B     		ldr	r3, .L47+8
 963 007a 9A42     		cmp	r2, r3
 964 007c 06D8     		bhi	.L44
 139:.\main.c      ****         {
 140:.\main.c      ****             cur_command = recent_command + 3;
 965              		.loc 2 140 0
 966 007e 3B1C     		mov	r3, r7
 967 0080 0E33     		add	r3, r3, #14
 968 0082 3A1D     		add	r2, r7, #4
 969 0084 1288     		ldrh	r2, [r2]
 970 0086 0332     		add	r2, r2, #3
 971 0088 1A80     		strh	r2, [r3]
 138:.\main.c      ****         if(recent_command < 4092)
 972              		.loc 2 138 0
 973 008a 09E0     		b	.L41
 974              	.L44:
 141:.\main.c      ****         }
 142:.\main.c      ****         else
 143:.\main.c      ****         {
 144:.\main.c      ****             cur_command = 4095;
 975              		.loc 2 144 0
 976 008c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 22


 977 008e 0E33     		add	r3, r3, #14
 978 0090 084A     		ldr	r2, .L47+4
 979 0092 1A80     		strh	r2, [r3]
 138:.\main.c      ****         if(recent_command < 4092)
 980              		.loc 2 138 0
 981 0094 04E0     		b	.L41
 982              	.L43:
 145:.\main.c      ****         }
 146:.\main.c      ****     }
 147:.\main.c      ****     else
 148:.\main.c      ****     {
 149:.\main.c      ****         //increment error variable
 150:.\main.c      ****         cur_command = 2048;
 983              		.loc 2 150 0
 984 0096 3B1C     		mov	r3, r7
 985 0098 0E33     		add	r3, r3, #14
 986 009a 8022     		mov	r2, #128
 987 009c 1201     		lsl	r2, r2, #4
 988 009e 1A80     		strh	r2, [r3]
 989              	.L41:
 151:.\main.c      ****     }
 152:.\main.c      ****     return cur_command;
 990              		.loc 2 152 0
 991 00a0 3B1C     		mov	r3, r7
 992 00a2 0E33     		add	r3, r3, #14
 993 00a4 1B88     		ldrh	r3, [r3]
 153:.\main.c      **** }
 994              		.loc 2 153 0
 995 00a6 181C     		mov	r0, r3
 996 00a8 BD46     		mov	sp, r7
 997 00aa 04B0     		add	sp, sp, #16
 998              		@ sp needed
 999 00ac 80BD     		pop	{r7, pc}
 1000              	.L48:
 1001 00ae C046     		.align	2
 1002              	.L47:
 1003 00b0 CF070000 		.word	1999
 1004 00b4 FF0F0000 		.word	4095
 1005 00b8 FB0F0000 		.word	4091
 1006              		.cfi_endproc
 1007              	.LFE40:
 1008              		.size	WR_pos_to_vel, .-WR_pos_to_vel
 1009              		.section	.text.make_command,"ax",%progbits
 1010              		.align	2
 1011              		.global	make_command
 1012              		.code	16
 1013              		.thumb_func
 1014              		.type	make_command, %function
 1015              	make_command:
 1016              	.LFB41:
 154:.\main.c      **** 
 155:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 156:.\main.c      **** {
 1017              		.loc 2 156 0
 1018              		.cfi_startproc
 1019 0000 80B5     		push	{r7, lr}
 1020              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 23


 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 1023 0002 84B0     		sub	sp, sp, #16
 1024              		.cfi_def_cfa_offset 24
 1025 0004 00AF     		add	r7, sp, #0
 1026              		.cfi_def_cfa_register 7
 1027 0006 7860     		str	r0, [r7, #4]
 1028 0008 FB1C     		add	r3, r7, #3
 1029 000a 1970     		strb	r1, [r3]
 1030 000c BB1C     		add	r3, r7, #2
 1031 000e 1A70     		strb	r2, [r3]
 157:.\main.c      ****     uint16 command;
 158:.\main.c      ****     int16 temp1;
 159:.\main.c      ****     int16 temp2;
 160:.\main.c      ****     int16 temp3;
 161:.\main.c      ****     
 162:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1032              		.loc 2 162 0
 1033 0010 FB1C     		add	r3, r7, #3
 1034 0012 1B78     		ldrb	r3, [r3]
 1035 0014 7A68     		ldr	r2, [r7, #4]
 1036 0016 D318     		add	r3, r2, r3
 1037 0018 1B78     		ldrb	r3, [r3]
 1038 001a 5BB2     		sxtb	r3, r3
 1039 001c 1A02     		lsl	r2, r3, #8
 1040 001e 3B1C     		mov	r3, r7
 1041 0020 0E33     		add	r3, r3, #14
 1042 0022 1A80     		strh	r2, [r3]
 163:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1043              		.loc 2 163 0
 1044 0024 BB1C     		add	r3, r7, #2
 1045 0026 1B78     		ldrb	r3, [r3]
 1046 0028 7A68     		ldr	r2, [r7, #4]
 1047 002a D318     		add	r3, r2, r3
 1048 002c 1B78     		ldrb	r3, [r3]
 1049 002e 5BB2     		sxtb	r3, r3
 1050 0030 9AB2     		uxth	r2, r3
 1051 0032 3B1C     		mov	r3, r7
 1052 0034 0C33     		add	r3, r3, #12
 1053 0036 111C     		add	r1, r2, #0
 1054 0038 FF22     		mov	r2, #255
 1055 003a 0A40     		and	r2, r1
 1056 003c 1A80     		strh	r2, [r3]
 164:.\main.c      ****     temp3 = temp1 | temp2;
 1057              		.loc 2 164 0
 1058 003e 3B1C     		mov	r3, r7
 1059 0040 0A33     		add	r3, r3, #10
 1060 0042 391C     		mov	r1, r7
 1061 0044 0E31     		add	r1, r1, #14
 1062 0046 3A1C     		mov	r2, r7
 1063 0048 0C32     		add	r2, r2, #12
 1064 004a 0988     		ldrh	r1, [r1]
 1065 004c 1288     		ldrh	r2, [r2]
 1066 004e 0A43     		orr	r2, r1
 1067 0050 1A80     		strh	r2, [r3]
 165:.\main.c      ****     command = (temp3/2) + 1500;
 1068              		.loc 2 165 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 24


 1069 0052 3B1C     		mov	r3, r7
 1070 0054 0A33     		add	r3, r3, #10
 1071 0056 0021     		mov	r1, #0
 1072 0058 5B5E     		ldrsh	r3, [r3, r1]
 1073 005a 002B     		cmp	r3, #0
 1074 005c 00DA     		bge	.L50
 1075 005e 0133     		add	r3, r3, #1
 1076              	.L50:
 1077 0060 5B10     		asr	r3, r3, #1
 1078 0062 9BB2     		uxth	r3, r3
 1079 0064 9AB2     		uxth	r2, r3
 1080 0066 3B1C     		mov	r3, r7
 1081 0068 0833     		add	r3, r3, #8
 1082 006a 0549     		ldr	r1, .L52
 1083 006c 5218     		add	r2, r2, r1
 1084 006e 1A80     		strh	r2, [r3]
 166:.\main.c      ****     return command;
 1085              		.loc 2 166 0
 1086 0070 3B1C     		mov	r3, r7
 1087 0072 0833     		add	r3, r3, #8
 1088 0074 1B88     		ldrh	r3, [r3]
 167:.\main.c      **** }
 1089              		.loc 2 167 0
 1090 0076 181C     		mov	r0, r3
 1091 0078 BD46     		mov	sp, r7
 1092 007a 04B0     		add	sp, sp, #16
 1093              		@ sp needed
 1094 007c 80BD     		pop	{r7, pc}
 1095              	.L53:
 1096 007e C046     		.align	2
 1097              	.L52:
 1098 0080 DC050000 		.word	1500
 1099              		.cfi_endproc
 1100              	.LFE41:
 1101              		.size	make_command, .-make_command
 1102              		.section	.text.make_wristRotate_command,"ax",%progbits
 1103              		.align	2
 1104              		.global	make_wristRotate_command
 1105              		.code	16
 1106              		.thumb_func
 1107              		.type	make_wristRotate_command, %function
 1108              	make_wristRotate_command:
 1109              	.LFB42:
 168:.\main.c      **** 
 169:.\main.c      **** uint16 make_wristRotate_command(int8* info_array, uint8 byte1, uint8 byte2)
 170:.\main.c      **** {
 1110              		.loc 2 170 0
 1111              		.cfi_startproc
 1112 0000 80B5     		push	{r7, lr}
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 7, -8
 1115              		.cfi_offset 14, -4
 1116 0002 84B0     		sub	sp, sp, #16
 1117              		.cfi_def_cfa_offset 24
 1118 0004 00AF     		add	r7, sp, #0
 1119              		.cfi_def_cfa_register 7
 1120 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 25


 1121 0008 FB1C     		add	r3, r7, #3
 1122 000a 1970     		strb	r1, [r3]
 1123 000c BB1C     		add	r3, r7, #2
 1124 000e 1A70     		strb	r2, [r3]
 171:.\main.c      ****     uint16 command;
 172:.\main.c      ****     int16 temp1;
 173:.\main.c      ****     int16 temp2;
 174:.\main.c      ****     int16 temp3;
 175:.\main.c      ****     
 176:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1125              		.loc 2 176 0
 1126 0010 FB1C     		add	r3, r7, #3
 1127 0012 1B78     		ldrb	r3, [r3]
 1128 0014 7A68     		ldr	r2, [r7, #4]
 1129 0016 D318     		add	r3, r2, r3
 1130 0018 1B78     		ldrb	r3, [r3]
 1131 001a 5BB2     		sxtb	r3, r3
 1132 001c 1A02     		lsl	r2, r3, #8
 1133 001e 3B1C     		mov	r3, r7
 1134 0020 0E33     		add	r3, r3, #14
 1135 0022 1A80     		strh	r2, [r3]
 177:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1136              		.loc 2 177 0
 1137 0024 BB1C     		add	r3, r7, #2
 1138 0026 1B78     		ldrb	r3, [r3]
 1139 0028 7A68     		ldr	r2, [r7, #4]
 1140 002a D318     		add	r3, r2, r3
 1141 002c 1B78     		ldrb	r3, [r3]
 1142 002e 5BB2     		sxtb	r3, r3
 1143 0030 9AB2     		uxth	r2, r3
 1144 0032 3B1C     		mov	r3, r7
 1145 0034 0C33     		add	r3, r3, #12
 1146 0036 111C     		add	r1, r2, #0
 1147 0038 FF22     		mov	r2, #255
 1148 003a 0A40     		and	r2, r1
 1149 003c 1A80     		strh	r2, [r3]
 178:.\main.c      ****     temp3 = temp1 | temp2;
 1150              		.loc 2 178 0
 1151 003e 3B1C     		mov	r3, r7
 1152 0040 0A33     		add	r3, r3, #10
 1153 0042 391C     		mov	r1, r7
 1154 0044 0E31     		add	r1, r1, #14
 1155 0046 3A1C     		mov	r2, r7
 1156 0048 0C32     		add	r2, r2, #12
 1157 004a 0988     		ldrh	r1, [r1]
 1158 004c 1288     		ldrh	r2, [r2]
 1159 004e 0A43     		orr	r2, r1
 1160 0050 1A80     		strh	r2, [r3]
 179:.\main.c      ****     command = (2*temp3) + 2048;
 1161              		.loc 2 179 0
 1162 0052 3B1C     		mov	r3, r7
 1163 0054 0A33     		add	r3, r3, #10
 1164 0056 0022     		mov	r2, #0
 1165 0058 9B5E     		ldrsh	r3, [r3, r2]
 1166 005a 8022     		mov	r2, #128
 1167 005c D200     		lsl	r2, r2, #3
 1168 005e 9B18     		add	r3, r3, r2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 26


 1169 0060 9BB2     		uxth	r3, r3
 1170 0062 3A1C     		mov	r2, r7
 1171 0064 0832     		add	r2, r2, #8
 1172 0066 DB18     		add	r3, r3, r3
 1173 0068 1380     		strh	r3, [r2]
 180:.\main.c      ****     return command;
 1174              		.loc 2 180 0
 1175 006a 3B1C     		mov	r3, r7
 1176 006c 0833     		add	r3, r3, #8
 1177 006e 1B88     		ldrh	r3, [r3]
 181:.\main.c      **** }
 1178              		.loc 2 181 0
 1179 0070 181C     		mov	r0, r3
 1180 0072 BD46     		mov	sp, r7
 1181 0074 04B0     		add	sp, sp, #16
 1182              		@ sp needed
 1183 0076 80BD     		pop	{r7, pc}
 1184              		.cfi_endproc
 1185              	.LFE42:
 1186              		.size	make_wristRotate_command, .-make_wristRotate_command
 1187              		.section	.text.make_wristTilt_command,"ax",%progbits
 1188              		.align	2
 1189              		.global	make_wristTilt_command
 1190              		.code	16
 1191              		.thumb_func
 1192              		.type	make_wristTilt_command, %function
 1193              	make_wristTilt_command:
 1194              	.LFB43:
 182:.\main.c      **** 
 183:.\main.c      **** uint16 make_wristTilt_command(int8* info_array, uint8 byte1, uint8 byte2)
 184:.\main.c      **** {
 1195              		.loc 2 184 0
 1196              		.cfi_startproc
 1197 0000 80B5     		push	{r7, lr}
 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 7, -8
 1200              		.cfi_offset 14, -4
 1201 0002 84B0     		sub	sp, sp, #16
 1202              		.cfi_def_cfa_offset 24
 1203 0004 00AF     		add	r7, sp, #0
 1204              		.cfi_def_cfa_register 7
 1205 0006 7860     		str	r0, [r7, #4]
 1206 0008 FB1C     		add	r3, r7, #3
 1207 000a 1970     		strb	r1, [r3]
 1208 000c BB1C     		add	r3, r7, #2
 1209 000e 1A70     		strb	r2, [r3]
 185:.\main.c      ****     uint16 command;
 186:.\main.c      ****     int16 temp1;
 187:.\main.c      ****     int16 temp2;
 188:.\main.c      ****     int16 temp3;
 189:.\main.c      ****     
 190:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1210              		.loc 2 190 0
 1211 0010 FB1C     		add	r3, r7, #3
 1212 0012 1B78     		ldrb	r3, [r3]
 1213 0014 7A68     		ldr	r2, [r7, #4]
 1214 0016 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 27


 1215 0018 1B78     		ldrb	r3, [r3]
 1216 001a 5BB2     		sxtb	r3, r3
 1217 001c 1A02     		lsl	r2, r3, #8
 1218 001e 3B1C     		mov	r3, r7
 1219 0020 0E33     		add	r3, r3, #14
 1220 0022 1A80     		strh	r2, [r3]
 191:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1221              		.loc 2 191 0
 1222 0024 BB1C     		add	r3, r7, #2
 1223 0026 1B78     		ldrb	r3, [r3]
 1224 0028 7A68     		ldr	r2, [r7, #4]
 1225 002a D318     		add	r3, r2, r3
 1226 002c 1B78     		ldrb	r3, [r3]
 1227 002e 5BB2     		sxtb	r3, r3
 1228 0030 9AB2     		uxth	r2, r3
 1229 0032 3B1C     		mov	r3, r7
 1230 0034 0C33     		add	r3, r3, #12
 1231 0036 111C     		add	r1, r2, #0
 1232 0038 FF22     		mov	r2, #255
 1233 003a 0A40     		and	r2, r1
 1234 003c 1A80     		strh	r2, [r3]
 192:.\main.c      ****     temp3 = temp1 | temp2;
 1235              		.loc 2 192 0
 1236 003e 3B1C     		mov	r3, r7
 1237 0040 0A33     		add	r3, r3, #10
 1238 0042 391C     		mov	r1, r7
 1239 0044 0E31     		add	r1, r1, #14
 1240 0046 3A1C     		mov	r2, r7
 1241 0048 0C32     		add	r2, r2, #12
 1242 004a 0988     		ldrh	r1, [r1]
 1243 004c 1288     		ldrh	r2, [r2]
 1244 004e 0A43     		orr	r2, r1
 1245 0050 1A80     		strh	r2, [r3]
 193:.\main.c      ****     command = temp3 + 2048;
 1246              		.loc 2 193 0
 1247 0052 3B1C     		mov	r3, r7
 1248 0054 0A33     		add	r3, r3, #10
 1249 0056 1A88     		ldrh	r2, [r3]
 1250 0058 3B1C     		mov	r3, r7
 1251 005a 0833     		add	r3, r3, #8
 1252 005c 8021     		mov	r1, #128
 1253 005e 0901     		lsl	r1, r1, #4
 1254 0060 5218     		add	r2, r2, r1
 1255 0062 1A80     		strh	r2, [r3]
 194:.\main.c      ****     return command;
 1256              		.loc 2 194 0
 1257 0064 3B1C     		mov	r3, r7
 1258 0066 0833     		add	r3, r3, #8
 1259 0068 1B88     		ldrh	r3, [r3]
 195:.\main.c      **** }
 1260              		.loc 2 195 0
 1261 006a 181C     		mov	r0, r3
 1262 006c BD46     		mov	sp, r7
 1263 006e 04B0     		add	sp, sp, #16
 1264              		@ sp needed
 1265 0070 80BD     		pop	{r7, pc}
 1266              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 28


 1267              	.LFE43:
 1268              		.size	make_wristTilt_command, .-make_wristTilt_command
 1269              		.comm	send_packet_state,1,1
 1270 0072 C046     		.section	.text.send_packet,"ax",%progbits
 1271              		.align	2
 1272              		.global	send_packet
 1273              		.code	16
 1274              		.thumb_func
 1275              		.type	send_packet, %function
 1276              	send_packet:
 1277              	.LFB44:
 196:.\main.c      **** 
 197:.\main.c      **** enum send_packet_states {send_start, send_init, send_feedback, send_heartbeat, send_wait} send_pack
 198:.\main.c      **** void send_packet()
 199:.\main.c      **** {
 1278              		.loc 2 199 0
 1279              		.cfi_startproc
 1280 0000 80B5     		push	{r7, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 00AF     		add	r7, sp, #0
 1285              		.cfi_def_cfa_register 7
 200:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 201:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 202:.\main.c      ****     //TODO define system state
 203:.\main.c      ****     //send packet via serial to wiznet
 204:.\main.c      ****     
 205:.\main.c      ****     switch(send_packet_state)
 1286              		.loc 2 205 0
 1287 0004 5B4B     		ldr	r3, .L79
 1288 0006 1B78     		ldrb	r3, [r3]
 1289 0008 042B     		cmp	r3, #4
 1290 000a 6CD8     		bhi	.L59
 1291 000c 9A00     		lsl	r2, r3, #2
 1292 000e 5A4B     		ldr	r3, .L79+4
 1293 0010 D318     		add	r3, r2, r3
 1294 0012 1B68     		ldr	r3, [r3]
 1295 0014 9F46     		mov	pc, r3
 1296              		.section	.rodata
 1297              		.align	2
 1298              	.L61:
 1299 0000 EE000000 		.word	.L78
 1300 0004 16000000 		.word	.L62
 1301 0008 C0000000 		.word	.L63
 1302 000c D0000000 		.word	.L64
 1303 0010 EE000000 		.word	.L78
 1304              		.section	.text.send_packet
 1305              	.L62:
 206:.\main.c      ****     {
 207:.\main.c      ****         case send_start:
 208:.\main.c      ****             break;
 209:.\main.c      ****         
 210:.\main.c      ****         case send_init:
 211:.\main.c      ****             feedback_array[0] = 7;
 1306              		.loc 2 211 0
 1307 0016 594B     		ldr	r3, .L79+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 29


 1308 0018 0722     		mov	r2, #7
 1309 001a 1A70     		strb	r2, [r3]
 212:.\main.c      ****             feedback_array[1] = 7;
 1310              		.loc 2 212 0
 1311 001c 574B     		ldr	r3, .L79+8
 1312 001e 0722     		mov	r2, #7
 1313 0020 5A70     		strb	r2, [r3, #1]
 213:.\main.c      ****             feedback_array[2] = 7;
 1314              		.loc 2 213 0
 1315 0022 564B     		ldr	r3, .L79+8
 1316 0024 0722     		mov	r2, #7
 1317 0026 9A70     		strb	r2, [r3, #2]
 214:.\main.c      ****             feedback_array[3] = 7;
 1318              		.loc 2 214 0
 1319 0028 544B     		ldr	r3, .L79+8
 1320 002a 0722     		mov	r2, #7
 1321 002c DA70     		strb	r2, [r3, #3]
 215:.\main.c      ****             feedback_array[4] = 7;
 1322              		.loc 2 215 0
 1323 002e 534B     		ldr	r3, .L79+8
 1324 0030 0722     		mov	r2, #7
 1325 0032 1A71     		strb	r2, [r3, #4]
 216:.\main.c      ****             feedback_array[5] = 7;
 1326              		.loc 2 216 0
 1327 0034 514B     		ldr	r3, .L79+8
 1328 0036 0722     		mov	r2, #7
 1329 0038 5A71     		strb	r2, [r3, #5]
 217:.\main.c      ****             feedback_array[6] = 7;
 1330              		.loc 2 217 0
 1331 003a 504B     		ldr	r3, .L79+8
 1332 003c 0722     		mov	r2, #7
 1333 003e 9A71     		strb	r2, [r3, #6]
 218:.\main.c      ****             feedback_array[7] = 7;
 1334              		.loc 2 218 0
 1335 0040 4E4B     		ldr	r3, .L79+8
 1336 0042 0722     		mov	r2, #7
 1337 0044 DA71     		strb	r2, [r3, #7]
 219:.\main.c      ****             feedback_array[8] = 7;
 1338              		.loc 2 219 0
 1339 0046 4D4B     		ldr	r3, .L79+8
 1340 0048 0722     		mov	r2, #7
 1341 004a 1A72     		strb	r2, [r3, #8]
 220:.\main.c      ****             feedback_array[9] = 7;
 1342              		.loc 2 220 0
 1343 004c 4B4B     		ldr	r3, .L79+8
 1344 004e 0722     		mov	r2, #7
 1345 0050 5A72     		strb	r2, [r3, #9]
 221:.\main.c      ****             feedback_array[10] = 7;
 1346              		.loc 2 221 0
 1347 0052 4A4B     		ldr	r3, .L79+8
 1348 0054 0722     		mov	r2, #7
 1349 0056 9A72     		strb	r2, [r3, #10]
 222:.\main.c      ****             feedback_array[11] = 7;
 1350              		.loc 2 222 0
 1351 0058 484B     		ldr	r3, .L79+8
 1352 005a 0722     		mov	r2, #7
 1353 005c DA72     		strb	r2, [r3, #11]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 30


 223:.\main.c      ****             feedback_array[12] = 7;
 1354              		.loc 2 223 0
 1355 005e 474B     		ldr	r3, .L79+8
 1356 0060 0722     		mov	r2, #7
 1357 0062 1A73     		strb	r2, [r3, #12]
 224:.\main.c      ****             feedback_array[13] = 0xee;
 1358              		.loc 2 224 0
 1359 0064 454B     		ldr	r3, .L79+8
 1360 0066 EE22     		mov	r2, #238
 1361 0068 5A73     		strb	r2, [r3, #13]
 225:.\main.c      ****             
 226:.\main.c      ****             heartbeat_array[0] = 7;
 1362              		.loc 2 226 0
 1363 006a 454B     		ldr	r3, .L79+12
 1364 006c 0722     		mov	r2, #7
 1365 006e 1A70     		strb	r2, [r3]
 227:.\main.c      ****             heartbeat_array[1] = 7;
 1366              		.loc 2 227 0
 1367 0070 434B     		ldr	r3, .L79+12
 1368 0072 0722     		mov	r2, #7
 1369 0074 5A70     		strb	r2, [r3, #1]
 228:.\main.c      ****             heartbeat_array[2] = 7;
 1370              		.loc 2 228 0
 1371 0076 424B     		ldr	r3, .L79+12
 1372 0078 0722     		mov	r2, #7
 1373 007a 9A70     		strb	r2, [r3, #2]
 229:.\main.c      ****             heartbeat_array[3] = 7;
 1374              		.loc 2 229 0
 1375 007c 404B     		ldr	r3, .L79+12
 1376 007e 0722     		mov	r2, #7
 1377 0080 DA70     		strb	r2, [r3, #3]
 230:.\main.c      ****             heartbeat_array[4] = 7;
 1378              		.loc 2 230 0
 1379 0082 3F4B     		ldr	r3, .L79+12
 1380 0084 0722     		mov	r2, #7
 1381 0086 1A71     		strb	r2, [r3, #4]
 231:.\main.c      ****             heartbeat_array[5] = 7;
 1382              		.loc 2 231 0
 1383 0088 3D4B     		ldr	r3, .L79+12
 1384 008a 0722     		mov	r2, #7
 1385 008c 5A71     		strb	r2, [r3, #5]
 232:.\main.c      ****             heartbeat_array[6] = 7;
 1386              		.loc 2 232 0
 1387 008e 3C4B     		ldr	r3, .L79+12
 1388 0090 0722     		mov	r2, #7
 1389 0092 9A71     		strb	r2, [r3, #6]
 233:.\main.c      ****             heartbeat_array[7] = 7;
 1390              		.loc 2 233 0
 1391 0094 3A4B     		ldr	r3, .L79+12
 1392 0096 0722     		mov	r2, #7
 1393 0098 DA71     		strb	r2, [r3, #7]
 234:.\main.c      ****             heartbeat_array[8] = 7;
 1394              		.loc 2 234 0
 1395 009a 394B     		ldr	r3, .L79+12
 1396 009c 0722     		mov	r2, #7
 1397 009e 1A72     		strb	r2, [r3, #8]
 235:.\main.c      ****             heartbeat_array[9] = 7;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 31


 1398              		.loc 2 235 0
 1399 00a0 374B     		ldr	r3, .L79+12
 1400 00a2 0722     		mov	r2, #7
 1401 00a4 5A72     		strb	r2, [r3, #9]
 236:.\main.c      ****             heartbeat_array[10] = 7;
 1402              		.loc 2 236 0
 1403 00a6 364B     		ldr	r3, .L79+12
 1404 00a8 0722     		mov	r2, #7
 1405 00aa 9A72     		strb	r2, [r3, #10]
 237:.\main.c      ****             heartbeat_array[11] = 7;
 1406              		.loc 2 237 0
 1407 00ac 344B     		ldr	r3, .L79+12
 1408 00ae 0722     		mov	r2, #7
 1409 00b0 DA72     		strb	r2, [r3, #11]
 238:.\main.c      ****             heartbeat_array[12] = 7;
 1410              		.loc 2 238 0
 1411 00b2 334B     		ldr	r3, .L79+12
 1412 00b4 0722     		mov	r2, #7
 1413 00b6 1A73     		strb	r2, [r3, #12]
 239:.\main.c      ****             heartbeat_array[13] = 0xee;
 1414              		.loc 2 239 0
 1415 00b8 314B     		ldr	r3, .L79+12
 1416 00ba EE22     		mov	r2, #238
 1417 00bc 5A73     		strb	r2, [r3, #13]
 240:.\main.c      ****             break;
 1418              		.loc 2 240 0
 1419 00be 17E0     		b	.L66
 1420              	.L63:
 241:.\main.c      ****         
 242:.\main.c      ****         case send_feedback:
 243:.\main.c      ****             wiznetWriteUdpFrame(feedback_array, SEND_ARRAY_SIZE);
 1421              		.loc 2 243 0
 1422 00c0 2E4B     		ldr	r3, .L79+8
 1423 00c2 181C     		mov	r0, r3
 1424 00c4 0E21     		mov	r1, #14
 1425 00c6 FFF7FEFF 		bl	wiznetWriteUdpFrame
 244:.\main.c      ****             wiznetSend();
 1426              		.loc 2 244 0
 1427 00ca FFF7FEFF 		bl	wiznetSend
 245:.\main.c      ****             break;
 1428              		.loc 2 245 0
 1429 00ce 0FE0     		b	.L66
 1430              	.L64:
 246:.\main.c      ****         
 247:.\main.c      ****         case send_heartbeat:
 248:.\main.c      ****             wiznetWriteUdpFrame(heartbeat_array, SEND_ARRAY_SIZE);
 1431              		.loc 2 248 0
 1432 00d0 2B4B     		ldr	r3, .L79+12
 1433 00d2 181C     		mov	r0, r3
 1434 00d4 0E21     		mov	r1, #14
 1435 00d6 FFF7FEFF 		bl	wiznetWriteUdpFrame
 249:.\main.c      ****             wiznetSend();
 1436              		.loc 2 249 0
 1437 00da FFF7FEFF 		bl	wiznetSend
 250:.\main.c      ****             HEARTBEAT_FLAG = 0;
 1438              		.loc 2 250 0
 1439 00de 294B     		ldr	r3, .L79+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 32


 1440 00e0 0022     		mov	r2, #0
 1441 00e2 1A70     		strb	r2, [r3]
 251:.\main.c      ****             break;
 1442              		.loc 2 251 0
 1443 00e4 04E0     		b	.L66
 1444              	.L59:
 252:.\main.c      ****         
 253:.\main.c      ****         case send_wait:
 254:.\main.c      ****             break;
 255:.\main.c      ****         
 256:.\main.c      ****         default:
 257:.\main.c      ****             send_packet_state = send_start;
 1445              		.loc 2 257 0
 1446 00e6 234B     		ldr	r3, .L79
 1447 00e8 0022     		mov	r2, #0
 1448 00ea 1A70     		strb	r2, [r3]
 258:.\main.c      ****             break;
 1449              		.loc 2 258 0
 1450 00ec 00E0     		b	.L66
 1451              	.L78:
 254:.\main.c      ****             break;
 1452              		.loc 2 254 0
 1453 00ee C046     		mov	r8, r8
 1454              	.L66:
 259:.\main.c      ****     }
 260:.\main.c      ****     
 261:.\main.c      ****     switch(send_packet_state)
 1455              		.loc 2 261 0
 1456 00f0 204B     		ldr	r3, .L79
 1457 00f2 1B78     		ldrb	r3, [r3]
 1458 00f4 042B     		cmp	r3, #4
 1459 00f6 37D8     		bhi	.L67
 1460 00f8 9A00     		lsl	r2, r3, #2
 1461 00fa 234B     		ldr	r3, .L79+20
 1462 00fc D318     		add	r3, r2, r3
 1463 00fe 1B68     		ldr	r3, [r3]
 1464 0100 9F46     		mov	pc, r3
 1465              		.section	.rodata
 1466              		.align	2
 1467              	.L69:
 1468 0014 02010000 		.word	.L68
 1469 0018 0A010000 		.word	.L70
 1470 001c 12010000 		.word	.L71
 1471 0020 1A010000 		.word	.L72
 1472 0024 22010000 		.word	.L73
 1473              		.section	.text.send_packet
 1474              	.L68:
 262:.\main.c      ****     {
 263:.\main.c      ****         case send_start:
 264:.\main.c      ****             send_packet_state = send_init;
 1475              		.loc 2 264 0
 1476 0102 1C4B     		ldr	r3, .L79
 1477 0104 0122     		mov	r2, #1
 1478 0106 1A70     		strb	r2, [r3]
 265:.\main.c      ****             break;
 1479              		.loc 2 265 0
 1480 0108 32E0     		b	.L58
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 33


 1481              	.L70:
 266:.\main.c      ****         
 267:.\main.c      ****         case send_init:
 268:.\main.c      ****             send_packet_state = send_heartbeat;
 1482              		.loc 2 268 0
 1483 010a 1A4B     		ldr	r3, .L79
 1484 010c 0322     		mov	r2, #3
 1485 010e 1A70     		strb	r2, [r3]
 269:.\main.c      ****             break;
 1486              		.loc 2 269 0
 1487 0110 2EE0     		b	.L58
 1488              	.L71:
 270:.\main.c      ****         
 271:.\main.c      ****         case send_feedback:
 272:.\main.c      ****             send_packet_state = send_wait;            
 1489              		.loc 2 272 0
 1490 0112 184B     		ldr	r3, .L79
 1491 0114 0422     		mov	r2, #4
 1492 0116 1A70     		strb	r2, [r3]
 273:.\main.c      ****             break;
 1493              		.loc 2 273 0
 1494 0118 2AE0     		b	.L58
 1495              	.L72:
 274:.\main.c      ****         
 275:.\main.c      ****         case send_heartbeat:
 276:.\main.c      ****             send_packet_state = send_wait;
 1496              		.loc 2 276 0
 1497 011a 164B     		ldr	r3, .L79
 1498 011c 0422     		mov	r2, #4
 1499 011e 1A70     		strb	r2, [r3]
 277:.\main.c      ****             break;
 1500              		.loc 2 277 0
 1501 0120 26E0     		b	.L58
 1502              	.L73:
 278:.\main.c      ****         
 279:.\main.c      ****         case send_wait:
 280:.\main.c      ****             if(HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 1503              		.loc 2 280 0
 1504 0122 184B     		ldr	r3, .L79+16
 1505 0124 1B78     		ldrb	r3, [r3]
 1506 0126 002B     		cmp	r3, #0
 1507 0128 0AD0     		beq	.L75
 1508              		.loc 2 280 0 is_stmt 0 discriminator 1
 1509 012a FFF7FEFF 		bl	WIZ_INT_Read
 1510 012e 031C     		mov	r3, r0
 1511 0130 002B     		cmp	r3, #0
 1512 0132 05D1     		bne	.L75
 281:.\main.c      ****             {
 282:.\main.c      ****                 wiznetClearInterrupts();    
 1513              		.loc 2 282 0 is_stmt 1
 1514 0134 FFF7FEFF 		bl	wiznetClearInterrupts
 283:.\main.c      ****                 send_packet_state = send_heartbeat;
 1515              		.loc 2 283 0
 1516 0138 0E4B     		ldr	r3, .L79
 1517 013a 0322     		mov	r2, #3
 1518 013c 1A70     		strb	r2, [r3]
 1519 013e 12E0     		b	.L76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 34


 1520              	.L75:
 284:.\main.c      ****             }
 285:.\main.c      ****             else if(!HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 1521              		.loc 2 285 0
 1522 0140 104B     		ldr	r3, .L79+16
 1523 0142 1B78     		ldrb	r3, [r3]
 1524 0144 002B     		cmp	r3, #0
 1525 0146 0AD1     		bne	.L77
 1526              		.loc 2 285 0 is_stmt 0 discriminator 1
 1527 0148 FFF7FEFF 		bl	WIZ_INT_Read
 1528 014c 031C     		mov	r3, r0
 1529 014e 002B     		cmp	r3, #0
 1530 0150 05D1     		bne	.L77
 286:.\main.c      ****             {
 287:.\main.c      ****                 wiznetClearInterrupts();    
 1531              		.loc 2 287 0 is_stmt 1
 1532 0152 FFF7FEFF 		bl	wiznetClearInterrupts
 288:.\main.c      ****                 send_packet_state = send_feedback;
 1533              		.loc 2 288 0
 1534 0156 074B     		ldr	r3, .L79
 1535 0158 0222     		mov	r2, #2
 1536 015a 1A70     		strb	r2, [r3]
 1537 015c 03E0     		b	.L76
 1538              	.L77:
 289:.\main.c      ****             }
 290:.\main.c      ****             else
 291:.\main.c      ****             {
 292:.\main.c      ****                 send_packet_state = send_wait;
 1539              		.loc 2 292 0
 1540 015e 054B     		ldr	r3, .L79
 1541 0160 0422     		mov	r2, #4
 1542 0162 1A70     		strb	r2, [r3]
 293:.\main.c      ****             }
 294:.\main.c      ****             break;
 1543              		.loc 2 294 0
 1544 0164 04E0     		b	.L58
 1545              	.L76:
 1546 0166 03E0     		b	.L58
 1547              	.L67:
 295:.\main.c      **** 
 296:.\main.c      ****         default:
 297:.\main.c      ****             send_packet_state = send_start;
 1548              		.loc 2 297 0
 1549 0168 024B     		ldr	r3, .L79
 1550 016a 0022     		mov	r2, #0
 1551 016c 1A70     		strb	r2, [r3]
 298:.\main.c      ****             break;
 1552              		.loc 2 298 0
 1553 016e C046     		mov	r8, r8
 1554              	.L58:
 299:.\main.c      ****     }    
 300:.\main.c      **** }
 1555              		.loc 2 300 0
 1556 0170 BD46     		mov	sp, r7
 1557              		@ sp needed
 1558 0172 80BD     		pop	{r7, pc}
 1559              	.L80:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 35


 1560              		.align	2
 1561              	.L79:
 1562 0174 00000000 		.word	send_packet_state
 1563 0178 00000000 		.word	.L61
 1564 017c 00000000 		.word	feedback_array
 1565 0180 00000000 		.word	heartbeat_array
 1566 0184 00000000 		.word	HEARTBEAT_FLAG
 1567 0188 14000000 		.word	.L69
 1568              		.cfi_endproc
 1569              	.LFE44:
 1570              		.size	send_packet, .-send_packet
 1571              		.section	.text.fill_data_array,"ax",%progbits
 1572              		.align	2
 1573              		.global	fill_data_array
 1574              		.code	16
 1575              		.thumb_func
 1576              		.type	fill_data_array, %function
 1577              	fill_data_array:
 1578              	.LFB45:
 301:.\main.c      **** 
 302:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 303:.\main.c      **** void fill_data_array()
 304:.\main.c      **** {
 1579              		.loc 2 304 0
 1580              		.cfi_startproc
 1581 0000 80B5     		push	{r7, lr}
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 7, -8
 1584              		.cfi_offset 14, -4
 1585 0002 00AF     		add	r7, sp, #0
 1586              		.cfi_def_cfa_register 7
 305:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1587              		.loc 2 305 0
 1588 0004 034B     		ldr	r3, .L82
 1589 0006 181C     		mov	r0, r3
 1590 0008 1621     		mov	r1, #22
 1591 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 306:.\main.c      **** }
 1592              		.loc 2 306 0
 1593 000e BD46     		mov	sp, r7
 1594              		@ sp needed
 1595 0010 80BD     		pop	{r7, pc}
 1596              	.L83:
 1597 0012 C046     		.align	2
 1598              	.L82:
 1599 0014 00000000 		.word	data_array
 1600              		.cfi_endproc
 1601              	.LFE45:
 1602              		.size	fill_data_array, .-fill_data_array
 1603              		.comm	wristTilt_state,1,1
 1604              		.section	.text.wristTilt,"ax",%progbits
 1605              		.align	2
 1606              		.global	wristTilt
 1607              		.code	16
 1608              		.thumb_func
 1609              		.type	wristTilt, %function
 1610              	wristTilt:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 36


 1611              	.LFB46:
 307:.\main.c      **** 
 308:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 309:.\main.c      **** //control the tilting motion of the wrist
 310:.\main.c      **** void wristTilt()
 311:.\main.c      **** {
 1612              		.loc 2 311 0
 1613              		.cfi_startproc
 1614 0000 90B5     		push	{r4, r7, lr}
 1615              		.cfi_def_cfa_offset 12
 1616              		.cfi_offset 4, -12
 1617              		.cfi_offset 7, -8
 1618              		.cfi_offset 14, -4
 1619 0002 83B0     		sub	sp, sp, #12
 1620              		.cfi_def_cfa_offset 24
 1621 0004 00AF     		add	r7, sp, #0
 1622              		.cfi_def_cfa_register 7
 312:.\main.c      ****     uint16 newest_command;
 313:.\main.c      ****     uint16 temp_command;
 314:.\main.c      ****     
 315:.\main.c      ****     switch(wristTilt_state){ //actions
 1623              		.loc 2 315 0
 1624 0006 4A4B     		ldr	r3, .L107
 1625 0008 1B78     		ldrb	r3, [r3]
 1626 000a 012B     		cmp	r3, #1
 1627 000c 08D0     		beq	.L86
 1628 000e 02DC     		bgt	.L87
 1629 0010 002B     		cmp	r3, #0
 1630 0012 56D0     		beq	.L105
 1631 0014 51E0     		b	.L85
 1632              	.L87:
 1633 0016 022B     		cmp	r3, #2
 1634 0018 0DD0     		beq	.L89
 1635 001a 032B     		cmp	r3, #3
 1636 001c 53D0     		beq	.L106
 1637 001e 4CE0     		b	.L85
 1638              	.L86:
 316:.\main.c      ****         case tilt_start:
 317:.\main.c      ****             break;
 318:.\main.c      **** 
 319:.\main.c      ****         case tilt_init:      
 320:.\main.c      ****             ServoGoalPosition(0x02, 2048);
 1639              		.loc 2 320 0
 1640 0020 8023     		mov	r3, #128
 1641 0022 1B01     		lsl	r3, r3, #4
 1642 0024 0220     		mov	r0, #2
 1643 0026 191C     		mov	r1, r3
 1644 0028 FFF7FEFF 		bl	ServoGoalPosition
 321:.\main.c      ****             latest_WT_command = 2048;
 1645              		.loc 2 321 0
 1646 002c 414B     		ldr	r3, .L107+4
 1647 002e 8022     		mov	r2, #128
 1648 0030 1201     		lsl	r2, r2, #4
 1649 0032 1A80     		strh	r2, [r3]
 322:.\main.c      ****             break;
 1650              		.loc 2 322 0
 1651 0034 48E0     		b	.L91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 37


 1652              	.L89:
 323:.\main.c      **** 
 324:.\main.c      ****         case tilt_control:
 325:.\main.c      ****             newest_command = make_wristTilt_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1653              		.loc 2 325 0
 1654 0036 BC1D     		add	r4, r7, #6
 1655 0038 3F4B     		ldr	r3, .L107+8
 1656 003a 181C     		mov	r0, r3
 1657 003c 1021     		mov	r1, #16
 1658 003e 1122     		mov	r2, #17
 1659 0040 FFF7FEFF 		bl	make_wristTilt_command
 1660 0044 031C     		mov	r3, r0
 1661 0046 2380     		strh	r3, [r4]
 326:.\main.c      ****             
 327:.\main.c      ****             if(newest_command <= 3072 && newest_command >= 1024)
 1662              		.loc 2 327 0
 1663 0048 BB1D     		add	r3, r7, #6
 1664 004a 1A88     		ldrh	r2, [r3]
 1665 004c C023     		mov	r3, #192
 1666 004e 1B01     		lsl	r3, r3, #4
 1667 0050 9A42     		cmp	r2, r3
 1668 0052 1AD8     		bhi	.L92
 1669              		.loc 2 327 0 is_stmt 0 discriminator 1
 1670 0054 BB1D     		add	r3, r7, #6
 1671 0056 1A88     		ldrh	r2, [r3]
 1672 0058 384B     		ldr	r3, .L107+12
 1673 005a 9A42     		cmp	r2, r3
 1674 005c 15D9     		bls	.L92
 328:.\main.c      ****             {
 329:.\main.c      ****                 LED_Write(0);
 1675              		.loc 2 329 0 is_stmt 1
 1676 005e 0020     		mov	r0, #0
 1677 0060 FFF7FEFF 		bl	LED_Write
 330:.\main.c      ****                 latest_WT_command = WT_pos_to_vel(newest_command, latest_WT_command);
 1678              		.loc 2 330 0
 1679 0064 334B     		ldr	r3, .L107+4
 1680 0066 1B88     		ldrh	r3, [r3]
 1681 0068 BA1D     		add	r2, r7, #6
 1682 006a 1288     		ldrh	r2, [r2]
 1683 006c 101C     		mov	r0, r2
 1684 006e 191C     		mov	r1, r3
 1685 0070 FFF7FEFF 		bl	WT_pos_to_vel
 1686 0074 031C     		mov	r3, r0
 1687 0076 1A1C     		mov	r2, r3
 1688 0078 2E4B     		ldr	r3, .L107+4
 1689 007a 1A80     		strh	r2, [r3]
 331:.\main.c      ****                 ServoGoalPosition(0x02, latest_WT_command);            
 1690              		.loc 2 331 0
 1691 007c 2D4B     		ldr	r3, .L107+4
 1692 007e 1B88     		ldrh	r3, [r3]
 1693 0080 0220     		mov	r0, #2
 1694 0082 191C     		mov	r1, r3
 1695 0084 FFF7FEFF 		bl	ServoGoalPosition
 1696 0088 13E0     		b	.L93
 1697              	.L92:
 332:.\main.c      ****             }
 333:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 38


 334:.\main.c      ****             {
 335:.\main.c      ****                 //increment error variable
 336:.\main.c      ****                 LED_Write(1);
 1698              		.loc 2 336 0
 1699 008a 0120     		mov	r0, #1
 1700 008c FFF7FEFF 		bl	LED_Write
 337:.\main.c      ****                 temp_command = WT_pos_to_vel(2048, latest_WT_command);
 1701              		.loc 2 337 0
 1702 0090 284B     		ldr	r3, .L107+4
 1703 0092 1B88     		ldrh	r3, [r3]
 1704 0094 3C1D     		add	r4, r7, #4
 1705 0096 8022     		mov	r2, #128
 1706 0098 1201     		lsl	r2, r2, #4
 1707 009a 101C     		mov	r0, r2
 1708 009c 191C     		mov	r1, r3
 1709 009e FFF7FEFF 		bl	WT_pos_to_vel
 1710 00a2 031C     		mov	r3, r0
 1711 00a4 2380     		strh	r3, [r4]
 338:.\main.c      ****                 ServoGoalPosition(0x02, temp_command);
 1712              		.loc 2 338 0
 1713 00a6 3B1D     		add	r3, r7, #4
 1714 00a8 1B88     		ldrh	r3, [r3]
 1715 00aa 0220     		mov	r0, #2
 1716 00ac 191C     		mov	r1, r3
 1717 00ae FFF7FEFF 		bl	ServoGoalPosition
 1718              	.L93:
 339:.\main.c      ****             }
 340:.\main.c      ****             
 341:.\main.c      ****             WT_FLAG = 0;
 1719              		.loc 2 341 0
 1720 00b2 234B     		ldr	r3, .L107+16
 1721 00b4 0022     		mov	r2, #0
 1722 00b6 1A70     		strb	r2, [r3]
 342:.\main.c      ****             break;
 1723              		.loc 2 342 0
 1724 00b8 06E0     		b	.L91
 1725              	.L85:
 343:.\main.c      ****             
 344:.\main.c      ****         case tilt_wait:
 345:.\main.c      ****             break;
 346:.\main.c      ****                         
 347:.\main.c      ****         default:
 348:.\main.c      ****             wristTilt_state = tilt_start;
 1726              		.loc 2 348 0
 1727 00ba 1D4B     		ldr	r3, .L107
 1728 00bc 0022     		mov	r2, #0
 1729 00be 1A70     		strb	r2, [r3]
 349:.\main.c      ****             break;
 1730              		.loc 2 349 0
 1731 00c0 02E0     		b	.L91
 1732              	.L105:
 317:.\main.c      ****             break;
 1733              		.loc 2 317 0
 1734 00c2 C046     		mov	r8, r8
 1735 00c4 00E0     		b	.L91
 1736              	.L106:
 345:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 39


 1737              		.loc 2 345 0
 1738 00c6 C046     		mov	r8, r8
 1739              	.L91:
 350:.\main.c      ****     }
 351:.\main.c      ****     
 352:.\main.c      ****     switch(wristTilt_state){ //transitions
 1740              		.loc 2 352 0
 1741 00c8 194B     		ldr	r3, .L107
 1742 00ca 1B78     		ldrb	r3, [r3]
 1743 00cc 012B     		cmp	r3, #1
 1744 00ce 0CD0     		beq	.L95
 1745 00d0 02DC     		bgt	.L96
 1746 00d2 002B     		cmp	r3, #0
 1747 00d4 05D0     		beq	.L97
 1748 00d6 24E0     		b	.L94
 1749              	.L96:
 1750 00d8 022B     		cmp	r3, #2
 1751 00da 0AD0     		beq	.L98
 1752 00dc 032B     		cmp	r3, #3
 1753 00de 14D0     		beq	.L99
 1754 00e0 1FE0     		b	.L94
 1755              	.L97:
 353:.\main.c      ****         case tilt_start:
 354:.\main.c      ****             wristTilt_state = tilt_init;
 1756              		.loc 2 354 0
 1757 00e2 134B     		ldr	r3, .L107
 1758 00e4 0122     		mov	r2, #1
 1759 00e6 1A70     		strb	r2, [r3]
 355:.\main.c      ****             break;
 1760              		.loc 2 355 0
 1761 00e8 1FE0     		b	.L84
 1762              	.L95:
 356:.\main.c      ****         
 357:.\main.c      ****         case tilt_init:
 358:.\main.c      ****             wristTilt_state = tilt_wait;
 1763              		.loc 2 358 0
 1764 00ea 114B     		ldr	r3, .L107
 1765 00ec 0322     		mov	r2, #3
 1766 00ee 1A70     		strb	r2, [r3]
 359:.\main.c      ****             break;
 1767              		.loc 2 359 0
 1768 00f0 1BE0     		b	.L84
 1769              	.L98:
 360:.\main.c      ****         
 361:.\main.c      ****         case tilt_control:
 362:.\main.c      ****             if(WT_FLAG)
 1770              		.loc 2 362 0
 1771 00f2 134B     		ldr	r3, .L107+16
 1772 00f4 1B78     		ldrb	r3, [r3]
 1773 00f6 002B     		cmp	r3, #0
 1774 00f8 03D0     		beq	.L101
 363:.\main.c      ****             {
 364:.\main.c      ****                 wristTilt_state = tilt_control;
 1775              		.loc 2 364 0
 1776 00fa 0D4B     		ldr	r3, .L107
 1777 00fc 0222     		mov	r2, #2
 1778 00fe 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 40


 365:.\main.c      ****             }
 366:.\main.c      ****             else
 367:.\main.c      ****             {
 368:.\main.c      ****                 wristTilt_state = tilt_wait;
 369:.\main.c      ****             }
 370:.\main.c      ****             break;
 1779              		.loc 2 370 0
 1780 0100 13E0     		b	.L84
 1781              	.L101:
 368:.\main.c      ****                 wristTilt_state = tilt_wait;
 1782              		.loc 2 368 0
 1783 0102 0B4B     		ldr	r3, .L107
 1784 0104 0322     		mov	r2, #3
 1785 0106 1A70     		strb	r2, [r3]
 1786              		.loc 2 370 0
 1787 0108 0FE0     		b	.L84
 1788              	.L99:
 371:.\main.c      ****         
 372:.\main.c      ****         case tilt_wait:
 373:.\main.c      ****             if(WT_FLAG)
 1789              		.loc 2 373 0
 1790 010a 0D4B     		ldr	r3, .L107+16
 1791 010c 1B78     		ldrb	r3, [r3]
 1792 010e 002B     		cmp	r3, #0
 1793 0110 03D0     		beq	.L103
 374:.\main.c      ****             {
 375:.\main.c      ****                 wristTilt_state = tilt_control;
 1794              		.loc 2 375 0
 1795 0112 074B     		ldr	r3, .L107
 1796 0114 0222     		mov	r2, #2
 1797 0116 1A70     		strb	r2, [r3]
 376:.\main.c      ****             }
 377:.\main.c      ****             else
 378:.\main.c      ****             {
 379:.\main.c      ****                 wristTilt_state = tilt_wait; 
 380:.\main.c      ****             }
 381:.\main.c      ****             break;
 1798              		.loc 2 381 0
 1799 0118 07E0     		b	.L84
 1800              	.L103:
 379:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1801              		.loc 2 379 0
 1802 011a 054B     		ldr	r3, .L107
 1803 011c 0322     		mov	r2, #3
 1804 011e 1A70     		strb	r2, [r3]
 1805              		.loc 2 381 0
 1806 0120 03E0     		b	.L84
 1807              	.L94:
 382:.\main.c      ****             
 383:.\main.c      ****         default:
 384:.\main.c      ****             wristTilt_state = tilt_start;
 1808              		.loc 2 384 0
 1809 0122 034B     		ldr	r3, .L107
 1810 0124 0022     		mov	r2, #0
 1811 0126 1A70     		strb	r2, [r3]
 385:.\main.c      ****             break;
 1812              		.loc 2 385 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 41


 1813 0128 C046     		mov	r8, r8
 1814              	.L84:
 386:.\main.c      ****     }  
 387:.\main.c      **** }
 1815              		.loc 2 387 0
 1816 012a BD46     		mov	sp, r7
 1817 012c 03B0     		add	sp, sp, #12
 1818              		@ sp needed
 1819 012e 90BD     		pop	{r4, r7, pc}
 1820              	.L108:
 1821              		.align	2
 1822              	.L107:
 1823 0130 00000000 		.word	wristTilt_state
 1824 0134 00000000 		.word	latest_WT_command
 1825 0138 00000000 		.word	data_array
 1826 013c FF030000 		.word	1023
 1827 0140 00000000 		.word	WT_FLAG
 1828              		.cfi_endproc
 1829              	.LFE46:
 1830              		.size	wristTilt, .-wristTilt
 1831              		.comm	wristRotate_state,1,1
 1832              		.section	.text.wristRotate,"ax",%progbits
 1833              		.align	2
 1834              		.global	wristRotate
 1835              		.code	16
 1836              		.thumb_func
 1837              		.type	wristRotate, %function
 1838              	wristRotate:
 1839              	.LFB47:
 388:.\main.c      **** 
 389:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 390:.\main.c      **** //control the rotating motion of the wrist
 391:.\main.c      **** void wristRotate()
 392:.\main.c      **** {
 1840              		.loc 2 392 0
 1841              		.cfi_startproc
 1842 0000 90B5     		push	{r4, r7, lr}
 1843              		.cfi_def_cfa_offset 12
 1844              		.cfi_offset 4, -12
 1845              		.cfi_offset 7, -8
 1846              		.cfi_offset 14, -4
 1847 0002 83B0     		sub	sp, sp, #12
 1848              		.cfi_def_cfa_offset 24
 1849 0004 00AF     		add	r7, sp, #0
 1850              		.cfi_def_cfa_register 7
 393:.\main.c      ****     uint16 newest_command;
 394:.\main.c      ****     uint16 temp_command;
 395:.\main.c      ****     
 396:.\main.c      ****     switch(wristRotate_state){ //actions
 1851              		.loc 2 396 0
 1852 0006 474B     		ldr	r3, .L132
 1853 0008 1B78     		ldrb	r3, [r3]
 1854 000a 012B     		cmp	r3, #1
 1855 000c 08D0     		beq	.L111
 1856 000e 02DC     		bgt	.L112
 1857 0010 002B     		cmp	r3, #0
 1858 0012 50D0     		beq	.L130
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 42


 1859 0014 4BE0     		b	.L110
 1860              	.L112:
 1861 0016 022B     		cmp	r3, #2
 1862 0018 0DD0     		beq	.L114
 1863 001a 032B     		cmp	r3, #3
 1864 001c 4DD0     		beq	.L131
 1865 001e 46E0     		b	.L110
 1866              	.L111:
 397:.\main.c      ****         case rotate_start:
 398:.\main.c      ****             break;
 399:.\main.c      **** 
 400:.\main.c      ****         case rotate_init:
 401:.\main.c      ****             ServoGoalPosition(0x01, 2048);
 1867              		.loc 2 401 0
 1868 0020 8023     		mov	r3, #128
 1869 0022 1B01     		lsl	r3, r3, #4
 1870 0024 0120     		mov	r0, #1
 1871 0026 191C     		mov	r1, r3
 1872 0028 FFF7FEFF 		bl	ServoGoalPosition
 402:.\main.c      ****             latest_WR_command = 2048;
 1873              		.loc 2 402 0
 1874 002c 3E4B     		ldr	r3, .L132+4
 1875 002e 8022     		mov	r2, #128
 1876 0030 1201     		lsl	r2, r2, #4
 1877 0032 1A80     		strh	r2, [r3]
 403:.\main.c      ****             break;
 1878              		.loc 2 403 0
 1879 0034 42E0     		b	.L116
 1880              	.L114:
 404:.\main.c      **** 
 405:.\main.c      ****         case rotate_control:
 406:.\main.c      ****             newest_command = make_wristRotate_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1881              		.loc 2 406 0
 1882 0036 BC1D     		add	r4, r7, #6
 1883 0038 3C4B     		ldr	r3, .L132+8
 1884 003a 181C     		mov	r0, r3
 1885 003c 1221     		mov	r1, #18
 1886 003e 1322     		mov	r2, #19
 1887 0040 FFF7FEFF 		bl	make_wristRotate_command
 1888 0044 031C     		mov	r3, r0
 1889 0046 2380     		strh	r3, [r4]
 407:.\main.c      ****             
 408:.\main.c      ****             if(newest_command <= 4095 && newest_command >= 0)
 1890              		.loc 2 408 0
 1891 0048 BB1D     		add	r3, r7, #6
 1892 004a 1A88     		ldrh	r2, [r3]
 1893 004c 384B     		ldr	r3, .L132+12
 1894 004e 9A42     		cmp	r2, r3
 1895 0050 15D8     		bhi	.L117
 409:.\main.c      ****             {
 410:.\main.c      ****                 LED_Write(0);
 1896              		.loc 2 410 0
 1897 0052 0020     		mov	r0, #0
 1898 0054 FFF7FEFF 		bl	LED_Write
 411:.\main.c      ****                 latest_WR_command = WR_pos_to_vel(newest_command,latest_WR_command);
 1899              		.loc 2 411 0
 1900 0058 334B     		ldr	r3, .L132+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 43


 1901 005a 1B88     		ldrh	r3, [r3]
 1902 005c BA1D     		add	r2, r7, #6
 1903 005e 1288     		ldrh	r2, [r2]
 1904 0060 101C     		mov	r0, r2
 1905 0062 191C     		mov	r1, r3
 1906 0064 FFF7FEFF 		bl	WR_pos_to_vel
 1907 0068 031C     		mov	r3, r0
 1908 006a 1A1C     		mov	r2, r3
 1909 006c 2E4B     		ldr	r3, .L132+4
 1910 006e 1A80     		strh	r2, [r3]
 412:.\main.c      ****                 ServoGoalPosition(0x01, latest_WR_command);            
 1911              		.loc 2 412 0
 1912 0070 2D4B     		ldr	r3, .L132+4
 1913 0072 1B88     		ldrh	r3, [r3]
 1914 0074 0120     		mov	r0, #1
 1915 0076 191C     		mov	r1, r3
 1916 0078 FFF7FEFF 		bl	ServoGoalPosition
 1917 007c 13E0     		b	.L118
 1918              	.L117:
 413:.\main.c      ****             }
 414:.\main.c      ****             else
 415:.\main.c      ****             {
 416:.\main.c      ****                 //increment error variable
 417:.\main.c      ****                 LED_Write(1);
 1919              		.loc 2 417 0
 1920 007e 0120     		mov	r0, #1
 1921 0080 FFF7FEFF 		bl	LED_Write
 418:.\main.c      ****                 temp_command = WR_pos_to_vel(2048,latest_WR_command);
 1922              		.loc 2 418 0
 1923 0084 284B     		ldr	r3, .L132+4
 1924 0086 1B88     		ldrh	r3, [r3]
 1925 0088 3C1D     		add	r4, r7, #4
 1926 008a 8022     		mov	r2, #128
 1927 008c 1201     		lsl	r2, r2, #4
 1928 008e 101C     		mov	r0, r2
 1929 0090 191C     		mov	r1, r3
 1930 0092 FFF7FEFF 		bl	WR_pos_to_vel
 1931 0096 031C     		mov	r3, r0
 1932 0098 2380     		strh	r3, [r4]
 419:.\main.c      ****                 ServoGoalPosition(0x01, temp_command);
 1933              		.loc 2 419 0
 1934 009a 3B1D     		add	r3, r7, #4
 1935 009c 1B88     		ldrh	r3, [r3]
 1936 009e 0120     		mov	r0, #1
 1937 00a0 191C     		mov	r1, r3
 1938 00a2 FFF7FEFF 		bl	ServoGoalPosition
 1939              	.L118:
 420:.\main.c      ****             }
 421:.\main.c      ****             WR_FLAG = 0;
 1940              		.loc 2 421 0
 1941 00a6 234B     		ldr	r3, .L132+16
 1942 00a8 0022     		mov	r2, #0
 1943 00aa 1A70     		strb	r2, [r3]
 422:.\main.c      ****             break;
 1944              		.loc 2 422 0
 1945 00ac 06E0     		b	.L116
 1946              	.L110:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 44


 423:.\main.c      ****             
 424:.\main.c      ****         case rotate_wait:
 425:.\main.c      ****             break;
 426:.\main.c      ****  
 427:.\main.c      ****         default:
 428:.\main.c      ****             wristRotate_state = rotate_start;
 1947              		.loc 2 428 0
 1948 00ae 1D4B     		ldr	r3, .L132
 1949 00b0 0022     		mov	r2, #0
 1950 00b2 1A70     		strb	r2, [r3]
 429:.\main.c      ****             break;
 1951              		.loc 2 429 0
 1952 00b4 02E0     		b	.L116
 1953              	.L130:
 398:.\main.c      ****             break;
 1954              		.loc 2 398 0
 1955 00b6 C046     		mov	r8, r8
 1956 00b8 00E0     		b	.L116
 1957              	.L131:
 425:.\main.c      ****             break;
 1958              		.loc 2 425 0
 1959 00ba C046     		mov	r8, r8
 1960              	.L116:
 430:.\main.c      ****     }
 431:.\main.c      ****     
 432:.\main.c      ****     switch(wristRotate_state){ //transitions
 1961              		.loc 2 432 0
 1962 00bc 194B     		ldr	r3, .L132
 1963 00be 1B78     		ldrb	r3, [r3]
 1964 00c0 012B     		cmp	r3, #1
 1965 00c2 0CD0     		beq	.L120
 1966 00c4 02DC     		bgt	.L121
 1967 00c6 002B     		cmp	r3, #0
 1968 00c8 05D0     		beq	.L122
 1969 00ca 24E0     		b	.L119
 1970              	.L121:
 1971 00cc 022B     		cmp	r3, #2
 1972 00ce 0AD0     		beq	.L123
 1973 00d0 032B     		cmp	r3, #3
 1974 00d2 14D0     		beq	.L124
 1975 00d4 1FE0     		b	.L119
 1976              	.L122:
 433:.\main.c      ****         case rotate_start:
 434:.\main.c      ****             wristRotate_state = rotate_init;
 1977              		.loc 2 434 0
 1978 00d6 134B     		ldr	r3, .L132
 1979 00d8 0122     		mov	r2, #1
 1980 00da 1A70     		strb	r2, [r3]
 435:.\main.c      ****             break;
 1981              		.loc 2 435 0
 1982 00dc 1FE0     		b	.L109
 1983              	.L120:
 436:.\main.c      ****         
 437:.\main.c      ****         case rotate_init:
 438:.\main.c      ****             wristRotate_state = rotate_wait;
 1984              		.loc 2 438 0
 1985 00de 114B     		ldr	r3, .L132
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 45


 1986 00e0 0322     		mov	r2, #3
 1987 00e2 1A70     		strb	r2, [r3]
 439:.\main.c      ****             break;
 1988              		.loc 2 439 0
 1989 00e4 1BE0     		b	.L109
 1990              	.L123:
 440:.\main.c      ****         
 441:.\main.c      ****         case rotate_control:
 442:.\main.c      ****             if(WR_FLAG)
 1991              		.loc 2 442 0
 1992 00e6 134B     		ldr	r3, .L132+16
 1993 00e8 1B78     		ldrb	r3, [r3]
 1994 00ea 002B     		cmp	r3, #0
 1995 00ec 03D0     		beq	.L126
 443:.\main.c      ****             {
 444:.\main.c      ****                 wristRotate_state = rotate_control;
 1996              		.loc 2 444 0
 1997 00ee 0D4B     		ldr	r3, .L132
 1998 00f0 0222     		mov	r2, #2
 1999 00f2 1A70     		strb	r2, [r3]
 445:.\main.c      ****             }
 446:.\main.c      ****             else
 447:.\main.c      ****             {
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 449:.\main.c      ****             }
 450:.\main.c      ****             break;
 2000              		.loc 2 450 0
 2001 00f4 13E0     		b	.L109
 2002              	.L126:
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 2003              		.loc 2 448 0
 2004 00f6 0B4B     		ldr	r3, .L132
 2005 00f8 0322     		mov	r2, #3
 2006 00fa 1A70     		strb	r2, [r3]
 2007              		.loc 2 450 0
 2008 00fc 0FE0     		b	.L109
 2009              	.L124:
 451:.\main.c      ****         
 452:.\main.c      ****         case rotate_wait:
 453:.\main.c      ****             if(WR_FLAG)
 2010              		.loc 2 453 0
 2011 00fe 0D4B     		ldr	r3, .L132+16
 2012 0100 1B78     		ldrb	r3, [r3]
 2013 0102 002B     		cmp	r3, #0
 2014 0104 03D0     		beq	.L128
 454:.\main.c      ****             {
 455:.\main.c      ****                 wristRotate_state = rotate_control;
 2015              		.loc 2 455 0
 2016 0106 074B     		ldr	r3, .L132
 2017 0108 0222     		mov	r2, #2
 2018 010a 1A70     		strb	r2, [r3]
 456:.\main.c      ****             }
 457:.\main.c      ****             else
 458:.\main.c      ****             {
 459:.\main.c      ****                 wristRotate_state = rotate_wait;
 460:.\main.c      ****             }
 461:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 46


 2019              		.loc 2 461 0
 2020 010c 07E0     		b	.L109
 2021              	.L128:
 459:.\main.c      ****                 wristRotate_state = rotate_wait;
 2022              		.loc 2 459 0
 2023 010e 054B     		ldr	r3, .L132
 2024 0110 0322     		mov	r2, #3
 2025 0112 1A70     		strb	r2, [r3]
 2026              		.loc 2 461 0
 2027 0114 03E0     		b	.L109
 2028              	.L119:
 462:.\main.c      ****             
 463:.\main.c      ****         default:
 464:.\main.c      ****             wristRotate_state = rotate_start;
 2029              		.loc 2 464 0
 2030 0116 034B     		ldr	r3, .L132
 2031 0118 0022     		mov	r2, #0
 2032 011a 1A70     		strb	r2, [r3]
 465:.\main.c      ****             break;
 2033              		.loc 2 465 0
 2034 011c C046     		mov	r8, r8
 2035              	.L109:
 466:.\main.c      ****     }  
 467:.\main.c      **** }
 2036              		.loc 2 467 0
 2037 011e BD46     		mov	sp, r7
 2038 0120 03B0     		add	sp, sp, #12
 2039              		@ sp needed
 2040 0122 90BD     		pop	{r4, r7, pc}
 2041              	.L133:
 2042              		.align	2
 2043              	.L132:
 2044 0124 00000000 		.word	wristRotate_state
 2045 0128 00000000 		.word	latest_WR_command
 2046 012c 00000000 		.word	data_array
 2047 0130 FF0F0000 		.word	4095
 2048 0134 00000000 		.word	WR_FLAG
 2049              		.cfi_endproc
 2050              	.LFE47:
 2051              		.size	wristRotate, .-wristRotate
 2052              		.comm	elbow_state,1,1
 2053              		.section	.text.elbow,"ax",%progbits
 2054              		.align	2
 2055              		.global	elbow
 2056              		.code	16
 2057              		.thumb_func
 2058              		.type	elbow, %function
 2059              	elbow:
 2060              	.LFB48:
 468:.\main.c      **** 
 469:.\main.c      **** //control the elbow
 470:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 471:.\main.c      **** void elbow()
 472:.\main.c      **** { 
 2061              		.loc 2 472 0
 2062              		.cfi_startproc
 2063 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 47


 2064              		.cfi_def_cfa_offset 12
 2065              		.cfi_offset 4, -12
 2066              		.cfi_offset 7, -8
 2067              		.cfi_offset 14, -4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              		.cfi_def_cfa_offset 24
 2070 0004 00AF     		add	r7, sp, #0
 2071              		.cfi_def_cfa_register 7
 473:.\main.c      ****     uint16 command;
 474:.\main.c      ****         
 475:.\main.c      ****     switch(elbow_state){ //actions
 2072              		.loc 2 475 0
 2073 0006 3B4B     		ldr	r3, .L157
 2074 0008 1B78     		ldrb	r3, [r3]
 2075 000a 012B     		cmp	r3, #1
 2076 000c 08D0     		beq	.L136
 2077 000e 02DC     		bgt	.L137
 2078 0010 002B     		cmp	r3, #0
 2079 0012 38D0     		beq	.L155
 2080 0014 33E0     		b	.L135
 2081              	.L137:
 2082 0016 022B     		cmp	r3, #2
 2083 0018 08D0     		beq	.L139
 2084 001a 032B     		cmp	r3, #3
 2085 001c 35D0     		beq	.L156
 2086 001e 2EE0     		b	.L135
 2087              	.L136:
 476:.\main.c      ****         case elbw_start:
 477:.\main.c      ****             break;
 478:.\main.c      **** 
 479:.\main.c      ****         case elbw_init:
 480:.\main.c      ****             ELBW_PWM_WriteCompare(NEUTRAL);
 2088              		.loc 2 480 0
 2089 0020 354B     		ldr	r3, .L157+4
 2090 0022 1B88     		ldrh	r3, [r3]
 2091 0024 181C     		mov	r0, r3
 2092 0026 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 481:.\main.c      ****             break;
 2093              		.loc 2 481 0
 2094 002a 2FE0     		b	.L141
 2095              	.L139:
 482:.\main.c      **** 
 483:.\main.c      ****         case elbw_execute:
 484:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2096              		.loc 2 484 0
 2097 002c BC1D     		add	r4, r7, #6
 2098 002e 334B     		ldr	r3, .L157+8
 2099 0030 181C     		mov	r0, r3
 2100 0032 0E21     		mov	r1, #14
 2101 0034 0F22     		mov	r2, #15
 2102 0036 FFF7FEFF 		bl	make_command
 2103 003a 031C     		mov	r3, r0
 2104 003c 2380     		strh	r3, [r4]
 485:.\main.c      ****             
 486:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2105              		.loc 2 486 0
 2106 003e BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 48


 2107 0040 1A88     		ldrh	r2, [r3]
 2108 0042 FA23     		mov	r3, #250
 2109 0044 DB00     		lsl	r3, r3, #3
 2110 0046 9A42     		cmp	r2, r3
 2111 0048 0DD8     		bhi	.L142
 2112              		.loc 2 486 0 is_stmt 0 discriminator 1
 2113 004a BB1D     		add	r3, r7, #6
 2114 004c 1A88     		ldrh	r2, [r3]
 2115 004e 2C4B     		ldr	r3, .L157+12
 2116 0050 9A42     		cmp	r2, r3
 2117 0052 08D9     		bls	.L142
 487:.\main.c      ****             {
 488:.\main.c      ****                 LED_Write(0);
 2118              		.loc 2 488 0 is_stmt 1
 2119 0054 0020     		mov	r0, #0
 2120 0056 FFF7FEFF 		bl	LED_Write
 489:.\main.c      ****                 ELBW_PWM_WriteCompare(command);
 2121              		.loc 2 489 0
 2122 005a BB1D     		add	r3, r7, #6
 2123 005c 1B88     		ldrh	r3, [r3]
 2124 005e 181C     		mov	r0, r3
 2125 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2126 0064 07E0     		b	.L143
 2127              	.L142:
 490:.\main.c      ****             }
 491:.\main.c      ****             else
 492:.\main.c      ****             {
 493:.\main.c      ****                 //increment error variable
 494:.\main.c      ****                 LED_Write(1);
 2128              		.loc 2 494 0
 2129 0066 0120     		mov	r0, #1
 2130 0068 FFF7FEFF 		bl	LED_Write
 495:.\main.c      ****                 ELBW_PWM_WriteCompare(NEUTRAL);
 2131              		.loc 2 495 0
 2132 006c 224B     		ldr	r3, .L157+4
 2133 006e 1B88     		ldrh	r3, [r3]
 2134 0070 181C     		mov	r0, r3
 2135 0072 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2136              	.L143:
 496:.\main.c      ****             }
 497:.\main.c      ****             ELBOW_FLAG = 0;
 2137              		.loc 2 497 0
 2138 0076 234B     		ldr	r3, .L157+16
 2139 0078 0022     		mov	r2, #0
 2140 007a 1A70     		strb	r2, [r3]
 498:.\main.c      ****             break;
 2141              		.loc 2 498 0
 2142 007c 06E0     		b	.L141
 2143              	.L135:
 499:.\main.c      ****             
 500:.\main.c      ****         case elbw_wait:
 501:.\main.c      ****             break;
 502:.\main.c      ****                         
 503:.\main.c      ****         default:
 504:.\main.c      ****             elbow_state = elbw_start;
 2144              		.loc 2 504 0
 2145 007e 1D4B     		ldr	r3, .L157
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 49


 2146 0080 0022     		mov	r2, #0
 2147 0082 1A70     		strb	r2, [r3]
 505:.\main.c      ****             break;
 2148              		.loc 2 505 0
 2149 0084 02E0     		b	.L141
 2150              	.L155:
 477:.\main.c      ****             break;
 2151              		.loc 2 477 0
 2152 0086 C046     		mov	r8, r8
 2153 0088 00E0     		b	.L141
 2154              	.L156:
 501:.\main.c      ****             break;
 2155              		.loc 2 501 0
 2156 008a C046     		mov	r8, r8
 2157              	.L141:
 506:.\main.c      ****     }
 507:.\main.c      ****     
 508:.\main.c      ****     switch(elbow_state){ //transitions
 2158              		.loc 2 508 0
 2159 008c 194B     		ldr	r3, .L157
 2160 008e 1B78     		ldrb	r3, [r3]
 2161 0090 012B     		cmp	r3, #1
 2162 0092 0CD0     		beq	.L145
 2163 0094 02DC     		bgt	.L146
 2164 0096 002B     		cmp	r3, #0
 2165 0098 05D0     		beq	.L147
 2166 009a 24E0     		b	.L144
 2167              	.L146:
 2168 009c 022B     		cmp	r3, #2
 2169 009e 0AD0     		beq	.L148
 2170 00a0 032B     		cmp	r3, #3
 2171 00a2 14D0     		beq	.L149
 2172 00a4 1FE0     		b	.L144
 2173              	.L147:
 509:.\main.c      ****         case elbw_start:
 510:.\main.c      ****             elbow_state = elbw_init;
 2174              		.loc 2 510 0
 2175 00a6 134B     		ldr	r3, .L157
 2176 00a8 0122     		mov	r2, #1
 2177 00aa 1A70     		strb	r2, [r3]
 511:.\main.c      ****             break;
 2178              		.loc 2 511 0
 2179 00ac 1FE0     		b	.L134
 2180              	.L145:
 512:.\main.c      ****         
 513:.\main.c      ****         case elbw_init:
 514:.\main.c      ****             elbow_state = elbw_wait;
 2181              		.loc 2 514 0
 2182 00ae 114B     		ldr	r3, .L157
 2183 00b0 0322     		mov	r2, #3
 2184 00b2 1A70     		strb	r2, [r3]
 515:.\main.c      ****             break;
 2185              		.loc 2 515 0
 2186 00b4 1BE0     		b	.L134
 2187              	.L148:
 516:.\main.c      ****         
 517:.\main.c      ****         case elbw_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 50


 518:.\main.c      ****             if(ELBOW_FLAG)
 2188              		.loc 2 518 0
 2189 00b6 134B     		ldr	r3, .L157+16
 2190 00b8 1B78     		ldrb	r3, [r3]
 2191 00ba 002B     		cmp	r3, #0
 2192 00bc 03D0     		beq	.L151
 519:.\main.c      ****             {
 520:.\main.c      ****                 elbow_state = elbw_execute;
 2193              		.loc 2 520 0
 2194 00be 0D4B     		ldr	r3, .L157
 2195 00c0 0222     		mov	r2, #2
 2196 00c2 1A70     		strb	r2, [r3]
 521:.\main.c      ****             }
 522:.\main.c      ****             else
 523:.\main.c      ****             {
 524:.\main.c      ****                 elbow_state = elbw_wait;
 525:.\main.c      ****             }
 526:.\main.c      ****             break;
 2197              		.loc 2 526 0
 2198 00c4 13E0     		b	.L134
 2199              	.L151:
 524:.\main.c      ****                 elbow_state = elbw_wait;
 2200              		.loc 2 524 0
 2201 00c6 0B4B     		ldr	r3, .L157
 2202 00c8 0322     		mov	r2, #3
 2203 00ca 1A70     		strb	r2, [r3]
 2204              		.loc 2 526 0
 2205 00cc 0FE0     		b	.L134
 2206              	.L149:
 527:.\main.c      ****         
 528:.\main.c      ****         case elbw_wait:
 529:.\main.c      ****             if(ELBOW_FLAG)
 2207              		.loc 2 529 0
 2208 00ce 0D4B     		ldr	r3, .L157+16
 2209 00d0 1B78     		ldrb	r3, [r3]
 2210 00d2 002B     		cmp	r3, #0
 2211 00d4 03D0     		beq	.L153
 530:.\main.c      ****             {
 531:.\main.c      ****                 elbow_state = elbw_execute;
 2212              		.loc 2 531 0
 2213 00d6 074B     		ldr	r3, .L157
 2214 00d8 0222     		mov	r2, #2
 2215 00da 1A70     		strb	r2, [r3]
 532:.\main.c      ****             }
 533:.\main.c      ****             else
 534:.\main.c      ****             {
 535:.\main.c      ****                 elbow_state = elbw_wait; 
 536:.\main.c      ****             }
 537:.\main.c      ****             break;
 2216              		.loc 2 537 0
 2217 00dc 07E0     		b	.L134
 2218              	.L153:
 535:.\main.c      ****                 elbow_state = elbw_wait; 
 2219              		.loc 2 535 0
 2220 00de 054B     		ldr	r3, .L157
 2221 00e0 0322     		mov	r2, #3
 2222 00e2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 51


 2223              		.loc 2 537 0
 2224 00e4 03E0     		b	.L134
 2225              	.L144:
 538:.\main.c      ****             
 539:.\main.c      ****         default:
 540:.\main.c      ****             elbow_state = elbw_start;
 2226              		.loc 2 540 0
 2227 00e6 034B     		ldr	r3, .L157
 2228 00e8 0022     		mov	r2, #0
 2229 00ea 1A70     		strb	r2, [r3]
 541:.\main.c      ****             break;
 2230              		.loc 2 541 0
 2231 00ec C046     		mov	r8, r8
 2232              	.L134:
 542:.\main.c      ****     }
 543:.\main.c      **** }
 2233              		.loc 2 543 0
 2234 00ee BD46     		mov	sp, r7
 2235 00f0 03B0     		add	sp, sp, #12
 2236              		@ sp needed
 2237 00f2 90BD     		pop	{r4, r7, pc}
 2238              	.L158:
 2239              		.align	2
 2240              	.L157:
 2241 00f4 00000000 		.word	elbow_state
 2242 00f8 00000000 		.word	NEUTRAL
 2243 00fc 00000000 		.word	data_array
 2244 0100 E7030000 		.word	999
 2245 0104 00000000 		.word	ELBOW_FLAG
 2246              		.cfi_endproc
 2247              	.LFE48:
 2248              		.size	elbow, .-elbow
 2249              		.comm	shoulder_state,1,1
 2250              		.section	.text.shoulder,"ax",%progbits
 2251              		.align	2
 2252              		.global	shoulder
 2253              		.code	16
 2254              		.thumb_func
 2255              		.type	shoulder, %function
 2256              	shoulder:
 2257              	.LFB49:
 544:.\main.c      **** 
 545:.\main.c      **** //control the shoulder
 546:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 547:.\main.c      **** void shoulder()
 548:.\main.c      **** { 
 2258              		.loc 2 548 0
 2259              		.cfi_startproc
 2260 0000 90B5     		push	{r4, r7, lr}
 2261              		.cfi_def_cfa_offset 12
 2262              		.cfi_offset 4, -12
 2263              		.cfi_offset 7, -8
 2264              		.cfi_offset 14, -4
 2265 0002 83B0     		sub	sp, sp, #12
 2266              		.cfi_def_cfa_offset 24
 2267 0004 00AF     		add	r7, sp, #0
 2268              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 52


 549:.\main.c      ****     uint16 command;
 550:.\main.c      ****         
 551:.\main.c      ****     switch(shoulder_state){ //actions
 2269              		.loc 2 551 0
 2270 0006 3B4B     		ldr	r3, .L182
 2271 0008 1B78     		ldrb	r3, [r3]
 2272 000a 012B     		cmp	r3, #1
 2273 000c 08D0     		beq	.L161
 2274 000e 02DC     		bgt	.L162
 2275 0010 002B     		cmp	r3, #0
 2276 0012 38D0     		beq	.L180
 2277 0014 33E0     		b	.L160
 2278              	.L162:
 2279 0016 022B     		cmp	r3, #2
 2280 0018 08D0     		beq	.L164
 2281 001a 032B     		cmp	r3, #3
 2282 001c 35D0     		beq	.L181
 2283 001e 2EE0     		b	.L160
 2284              	.L161:
 552:.\main.c      ****         case shldr_start:
 553:.\main.c      ****             break;
 554:.\main.c      **** 
 555:.\main.c      ****         case shldr_init:
 556:.\main.c      ****             SHLDR_PWM_WriteCompare(NEUTRAL);
 2285              		.loc 2 556 0
 2286 0020 354B     		ldr	r3, .L182+4
 2287 0022 1B88     		ldrh	r3, [r3]
 2288 0024 181C     		mov	r0, r3
 2289 0026 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 557:.\main.c      ****             break;
 2290              		.loc 2 557 0
 2291 002a 2FE0     		b	.L166
 2292              	.L164:
 558:.\main.c      **** 
 559:.\main.c      ****         case shldr_execute:
 560:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2293              		.loc 2 560 0
 2294 002c BC1D     		add	r4, r7, #6
 2295 002e 334B     		ldr	r3, .L182+8
 2296 0030 181C     		mov	r0, r3
 2297 0032 0C21     		mov	r1, #12
 2298 0034 0D22     		mov	r2, #13
 2299 0036 FFF7FEFF 		bl	make_command
 2300 003a 031C     		mov	r3, r0
 2301 003c 2380     		strh	r3, [r4]
 561:.\main.c      ****             
 562:.\main.c      ****             if(command <= 2000 && command >= 1000) //changed from avg
 2302              		.loc 2 562 0
 2303 003e BB1D     		add	r3, r7, #6
 2304 0040 1A88     		ldrh	r2, [r3]
 2305 0042 FA23     		mov	r3, #250
 2306 0044 DB00     		lsl	r3, r3, #3
 2307 0046 9A42     		cmp	r2, r3
 2308 0048 0DD8     		bhi	.L167
 2309              		.loc 2 562 0 is_stmt 0 discriminator 1
 2310 004a BB1D     		add	r3, r7, #6
 2311 004c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 53


 2312 004e 2C4B     		ldr	r3, .L182+12
 2313 0050 9A42     		cmp	r2, r3
 2314 0052 08D9     		bls	.L167
 563:.\main.c      ****             {
 564:.\main.c      ****                 LED_Write(0);
 2315              		.loc 2 564 0 is_stmt 1
 2316 0054 0020     		mov	r0, #0
 2317 0056 FFF7FEFF 		bl	LED_Write
 565:.\main.c      ****                 SHLDR_PWM_WriteCompare(command);
 2318              		.loc 2 565 0
 2319 005a BB1D     		add	r3, r7, #6
 2320 005c 1B88     		ldrh	r3, [r3]
 2321 005e 181C     		mov	r0, r3
 2322 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2323 0064 07E0     		b	.L168
 2324              	.L167:
 566:.\main.c      ****             }
 567:.\main.c      ****             else
 568:.\main.c      ****             {
 569:.\main.c      ****                 //increment error variable
 570:.\main.c      ****                 LED_Write(1);
 2325              		.loc 2 570 0
 2326 0066 0120     		mov	r0, #1
 2327 0068 FFF7FEFF 		bl	LED_Write
 571:.\main.c      ****                 SHLDR_PWM_WriteCompare(NEUTRAL);
 2328              		.loc 2 571 0
 2329 006c 224B     		ldr	r3, .L182+4
 2330 006e 1B88     		ldrh	r3, [r3]
 2331 0070 181C     		mov	r0, r3
 2332 0072 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2333              	.L168:
 572:.\main.c      ****             }
 573:.\main.c      ****             SHOULDER_FLAG = 0;
 2334              		.loc 2 573 0
 2335 0076 234B     		ldr	r3, .L182+16
 2336 0078 0022     		mov	r2, #0
 2337 007a 1A70     		strb	r2, [r3]
 574:.\main.c      ****             break;
 2338              		.loc 2 574 0
 2339 007c 06E0     		b	.L166
 2340              	.L160:
 575:.\main.c      ****             
 576:.\main.c      ****         case shldr_wait:
 577:.\main.c      ****             break;
 578:.\main.c      ****                         
 579:.\main.c      ****         default:
 580:.\main.c      ****             shoulder_state = shldr_start;
 2341              		.loc 2 580 0
 2342 007e 1D4B     		ldr	r3, .L182
 2343 0080 0022     		mov	r2, #0
 2344 0082 1A70     		strb	r2, [r3]
 581:.\main.c      ****             break;
 2345              		.loc 2 581 0
 2346 0084 02E0     		b	.L166
 2347              	.L180:
 553:.\main.c      ****             break;
 2348              		.loc 2 553 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 54


 2349 0086 C046     		mov	r8, r8
 2350 0088 00E0     		b	.L166
 2351              	.L181:
 577:.\main.c      ****             break;
 2352              		.loc 2 577 0
 2353 008a C046     		mov	r8, r8
 2354              	.L166:
 582:.\main.c      ****     }
 583:.\main.c      ****     
 584:.\main.c      ****     switch(shoulder_state){ //transitions
 2355              		.loc 2 584 0
 2356 008c 194B     		ldr	r3, .L182
 2357 008e 1B78     		ldrb	r3, [r3]
 2358 0090 012B     		cmp	r3, #1
 2359 0092 0CD0     		beq	.L170
 2360 0094 02DC     		bgt	.L171
 2361 0096 002B     		cmp	r3, #0
 2362 0098 05D0     		beq	.L172
 2363 009a 24E0     		b	.L169
 2364              	.L171:
 2365 009c 022B     		cmp	r3, #2
 2366 009e 0AD0     		beq	.L173
 2367 00a0 032B     		cmp	r3, #3
 2368 00a2 14D0     		beq	.L174
 2369 00a4 1FE0     		b	.L169
 2370              	.L172:
 585:.\main.c      ****         case shldr_start:
 586:.\main.c      ****             shoulder_state = shldr_init;
 2371              		.loc 2 586 0
 2372 00a6 134B     		ldr	r3, .L182
 2373 00a8 0122     		mov	r2, #1
 2374 00aa 1A70     		strb	r2, [r3]
 587:.\main.c      ****             break;
 2375              		.loc 2 587 0
 2376 00ac 1FE0     		b	.L159
 2377              	.L170:
 588:.\main.c      ****         
 589:.\main.c      ****         case shldr_init:
 590:.\main.c      ****             shoulder_state = shldr_wait;
 2378              		.loc 2 590 0
 2379 00ae 114B     		ldr	r3, .L182
 2380 00b0 0322     		mov	r2, #3
 2381 00b2 1A70     		strb	r2, [r3]
 591:.\main.c      ****             break;
 2382              		.loc 2 591 0
 2383 00b4 1BE0     		b	.L159
 2384              	.L173:
 592:.\main.c      ****         
 593:.\main.c      ****         case shldr_execute:
 594:.\main.c      ****             if(SHOULDER_FLAG)
 2385              		.loc 2 594 0
 2386 00b6 134B     		ldr	r3, .L182+16
 2387 00b8 1B78     		ldrb	r3, [r3]
 2388 00ba 002B     		cmp	r3, #0
 2389 00bc 03D0     		beq	.L176
 595:.\main.c      ****             {
 596:.\main.c      ****                 shoulder_state = shldr_execute;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 55


 2390              		.loc 2 596 0
 2391 00be 0D4B     		ldr	r3, .L182
 2392 00c0 0222     		mov	r2, #2
 2393 00c2 1A70     		strb	r2, [r3]
 597:.\main.c      ****             }
 598:.\main.c      ****             else
 599:.\main.c      ****             {
 600:.\main.c      ****                 shoulder_state = shldr_wait;
 601:.\main.c      ****             }
 602:.\main.c      ****             break;
 2394              		.loc 2 602 0
 2395 00c4 13E0     		b	.L159
 2396              	.L176:
 600:.\main.c      ****                 shoulder_state = shldr_wait;
 2397              		.loc 2 600 0
 2398 00c6 0B4B     		ldr	r3, .L182
 2399 00c8 0322     		mov	r2, #3
 2400 00ca 1A70     		strb	r2, [r3]
 2401              		.loc 2 602 0
 2402 00cc 0FE0     		b	.L159
 2403              	.L174:
 603:.\main.c      ****         
 604:.\main.c      ****         case shldr_wait:
 605:.\main.c      ****             if(SHOULDER_FLAG)
 2404              		.loc 2 605 0
 2405 00ce 0D4B     		ldr	r3, .L182+16
 2406 00d0 1B78     		ldrb	r3, [r3]
 2407 00d2 002B     		cmp	r3, #0
 2408 00d4 03D0     		beq	.L178
 606:.\main.c      ****             {
 607:.\main.c      ****                 shoulder_state = shldr_execute;
 2409              		.loc 2 607 0
 2410 00d6 074B     		ldr	r3, .L182
 2411 00d8 0222     		mov	r2, #2
 2412 00da 1A70     		strb	r2, [r3]
 608:.\main.c      ****             }
 609:.\main.c      ****             else
 610:.\main.c      ****             {
 611:.\main.c      ****                 shoulder_state = shldr_wait; 
 612:.\main.c      ****             }
 613:.\main.c      ****             break;
 2413              		.loc 2 613 0
 2414 00dc 07E0     		b	.L159
 2415              	.L178:
 611:.\main.c      ****                 shoulder_state = shldr_wait; 
 2416              		.loc 2 611 0
 2417 00de 054B     		ldr	r3, .L182
 2418 00e0 0322     		mov	r2, #3
 2419 00e2 1A70     		strb	r2, [r3]
 2420              		.loc 2 613 0
 2421 00e4 03E0     		b	.L159
 2422              	.L169:
 614:.\main.c      ****             
 615:.\main.c      ****         default:
 616:.\main.c      ****             shoulder_state = shldr_start;
 2423              		.loc 2 616 0
 2424 00e6 034B     		ldr	r3, .L182
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 56


 2425 00e8 0022     		mov	r2, #0
 2426 00ea 1A70     		strb	r2, [r3]
 617:.\main.c      ****             break;
 2427              		.loc 2 617 0
 2428 00ec C046     		mov	r8, r8
 2429              	.L159:
 618:.\main.c      ****     }  
 619:.\main.c      **** }
 2430              		.loc 2 619 0
 2431 00ee BD46     		mov	sp, r7
 2432 00f0 03B0     		add	sp, sp, #12
 2433              		@ sp needed
 2434 00f2 90BD     		pop	{r4, r7, pc}
 2435              	.L183:
 2436              		.align	2
 2437              	.L182:
 2438 00f4 00000000 		.word	shoulder_state
 2439 00f8 00000000 		.word	NEUTRAL
 2440 00fc 00000000 		.word	data_array
 2441 0100 E7030000 		.word	999
 2442 0104 00000000 		.word	SHOULDER_FLAG
 2443              		.cfi_endproc
 2444              	.LFE49:
 2445              		.size	shoulder, .-shoulder
 2446              		.comm	baseAzimuth_state,1,1
 2447              		.section	.text.baseAzimuth,"ax",%progbits
 2448              		.align	2
 2449              		.global	baseAzimuth
 2450              		.code	16
 2451              		.thumb_func
 2452              		.type	baseAzimuth, %function
 2453              	baseAzimuth:
 2454              	.LFB50:
 620:.\main.c      **** 
 621:.\main.c      **** //control the turret
 622:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 623:.\main.c      **** void baseAzimuth()
 624:.\main.c      **** { 
 2455              		.loc 2 624 0
 2456              		.cfi_startproc
 2457 0000 90B5     		push	{r4, r7, lr}
 2458              		.cfi_def_cfa_offset 12
 2459              		.cfi_offset 4, -12
 2460              		.cfi_offset 7, -8
 2461              		.cfi_offset 14, -4
 2462 0002 83B0     		sub	sp, sp, #12
 2463              		.cfi_def_cfa_offset 24
 2464 0004 00AF     		add	r7, sp, #0
 2465              		.cfi_def_cfa_register 7
 625:.\main.c      ****     uint16 newest_command;
 626:.\main.c      ****     uint16 temp_command;
 627:.\main.c      ****     
 628:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2466              		.loc 2 628 0
 2467 0006 484B     		ldr	r3, .L207
 2468 0008 1B78     		ldrb	r3, [r3]
 2469 000a 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 57


 2470 000c 08D0     		beq	.L186
 2471 000e 02DC     		bgt	.L187
 2472 0010 002B     		cmp	r3, #0
 2473 0012 51D0     		beq	.L205
 2474 0014 4CE0     		b	.L185
 2475              	.L187:
 2476 0016 022B     		cmp	r3, #2
 2477 0018 0BD0     		beq	.L189
 2478 001a 032B     		cmp	r3, #3
 2479 001c 4ED0     		beq	.L206
 2480 001e 47E0     		b	.L185
 2481              	.L186:
 629:.\main.c      ****         case BA_start:
 630:.\main.c      ****             break;
 631:.\main.c      **** 
 632:.\main.c      ****         case BA_init:
 633:.\main.c      ****             BA_PWM_WriteCompare(NEUTRAL);
 2482              		.loc 2 633 0
 2483 0020 424B     		ldr	r3, .L207+4
 2484 0022 1B88     		ldrh	r3, [r3]
 2485 0024 181C     		mov	r0, r3
 2486 0026 FFF7FEFF 		bl	BA_PWM_WriteCompare
 634:.\main.c      ****             latest_command = 1500;
 2487              		.loc 2 634 0
 2488 002a 414B     		ldr	r3, .L207+8
 2489 002c 414A     		ldr	r2, .L207+12
 2490 002e 1A80     		strh	r2, [r3]
 635:.\main.c      ****             break;
 2491              		.loc 2 635 0
 2492 0030 45E0     		b	.L191
 2493              	.L189:
 636:.\main.c      **** 
 637:.\main.c      ****         case BA_execute:
 638:.\main.c      ****             newest_command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2494              		.loc 2 638 0
 2495 0032 BC1D     		add	r4, r7, #6
 2496 0034 404B     		ldr	r3, .L207+16
 2497 0036 181C     		mov	r0, r3
 2498 0038 0A21     		mov	r1, #10
 2499 003a 0B22     		mov	r2, #11
 2500 003c FFF7FEFF 		bl	make_command
 2501 0040 031C     		mov	r3, r0
 2502 0042 2380     		strh	r3, [r4]
 639:.\main.c      **** 
 640:.\main.c      ****             if(newest_command <= 2000 && newest_command >= 1000)
 2503              		.loc 2 640 0
 2504 0044 BB1D     		add	r3, r7, #6
 2505 0046 1A88     		ldrh	r2, [r3]
 2506 0048 FA23     		mov	r3, #250
 2507 004a DB00     		lsl	r3, r3, #3
 2508 004c 9A42     		cmp	r2, r3
 2509 004e 19D8     		bhi	.L192
 2510              		.loc 2 640 0 is_stmt 0 discriminator 1
 2511 0050 BB1D     		add	r3, r7, #6
 2512 0052 1A88     		ldrh	r2, [r3]
 2513 0054 394B     		ldr	r3, .L207+20
 2514 0056 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 58


 2515 0058 14D9     		bls	.L192
 641:.\main.c      ****             {
 642:.\main.c      ****                 BA_PWM_WriteCompare(latest_command);
 2516              		.loc 2 642 0 is_stmt 1
 2517 005a 354B     		ldr	r3, .L207+8
 2518 005c 1B88     		ldrh	r3, [r3]
 2519 005e 181C     		mov	r0, r3
 2520 0060 FFF7FEFF 		bl	BA_PWM_WriteCompare
 643:.\main.c      ****                 latest_command = simple_pos_to_vel(newest_command, latest_command);
 2521              		.loc 2 643 0
 2522 0064 324B     		ldr	r3, .L207+8
 2523 0066 1B88     		ldrh	r3, [r3]
 2524 0068 BA1D     		add	r2, r7, #6
 2525 006a 1288     		ldrh	r2, [r2]
 2526 006c 101C     		mov	r0, r2
 2527 006e 191C     		mov	r1, r3
 2528 0070 FFF7FEFF 		bl	simple_pos_to_vel
 2529 0074 031C     		mov	r3, r0
 2530 0076 1A1C     		mov	r2, r3
 2531 0078 2D4B     		ldr	r3, .L207+8
 2532 007a 1A80     		strh	r2, [r3]
 644:.\main.c      ****                 LED_Write(0);
 2533              		.loc 2 644 0
 2534 007c 0020     		mov	r0, #0
 2535 007e FFF7FEFF 		bl	LED_Write
 2536 0082 11E0     		b	.L193
 2537              	.L192:
 645:.\main.c      ****             }
 646:.\main.c      ****             else
 647:.\main.c      ****             {
 648:.\main.c      ****                 LED_Write(1);
 2538              		.loc 2 648 0
 2539 0084 0120     		mov	r0, #1
 2540 0086 FFF7FEFF 		bl	LED_Write
 649:.\main.c      ****                 //increment error variable
 650:.\main.c      ****                 temp_command = simple_pos_to_vel(1500, latest_command);
 2541              		.loc 2 650 0
 2542 008a 294B     		ldr	r3, .L207+8
 2543 008c 1B88     		ldrh	r3, [r3]
 2544 008e 3C1D     		add	r4, r7, #4
 2545 0090 284A     		ldr	r2, .L207+12
 2546 0092 101C     		mov	r0, r2
 2547 0094 191C     		mov	r1, r3
 2548 0096 FFF7FEFF 		bl	simple_pos_to_vel
 2549 009a 031C     		mov	r3, r0
 2550 009c 2380     		strh	r3, [r4]
 651:.\main.c      ****                 BA_PWM_WriteCompare(temp_command);
 2551              		.loc 2 651 0
 2552 009e 3B1D     		add	r3, r7, #4
 2553 00a0 1B88     		ldrh	r3, [r3]
 2554 00a2 181C     		mov	r0, r3
 2555 00a4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2556              	.L193:
 652:.\main.c      ****             }
 653:.\main.c      ****             BA_FLAG = 0;
 2557              		.loc 2 653 0
 2558 00a8 254B     		ldr	r3, .L207+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 59


 2559 00aa 0022     		mov	r2, #0
 2560 00ac 1A70     		strb	r2, [r3]
 654:.\main.c      ****             break;
 2561              		.loc 2 654 0
 2562 00ae 06E0     		b	.L191
 2563              	.L185:
 655:.\main.c      ****             
 656:.\main.c      ****         case BA_wait:
 657:.\main.c      ****             break;
 658:.\main.c      ****             
 659:.\main.c      ****         default:
 660:.\main.c      ****             baseAzimuth_state = BA_start;
 2564              		.loc 2 660 0
 2565 00b0 1D4B     		ldr	r3, .L207
 2566 00b2 0022     		mov	r2, #0
 2567 00b4 1A70     		strb	r2, [r3]
 661:.\main.c      ****             break;
 2568              		.loc 2 661 0
 2569 00b6 02E0     		b	.L191
 2570              	.L205:
 630:.\main.c      ****             break;
 2571              		.loc 2 630 0
 2572 00b8 C046     		mov	r8, r8
 2573 00ba 00E0     		b	.L191
 2574              	.L206:
 657:.\main.c      ****             break;
 2575              		.loc 2 657 0
 2576 00bc C046     		mov	r8, r8
 2577              	.L191:
 662:.\main.c      ****     }
 663:.\main.c      ****     
 664:.\main.c      ****     switch(baseAzimuth_state)
 2578              		.loc 2 664 0
 2579 00be 1A4B     		ldr	r3, .L207
 2580 00c0 1B78     		ldrb	r3, [r3]
 2581 00c2 012B     		cmp	r3, #1
 2582 00c4 0CD0     		beq	.L195
 2583 00c6 02DC     		bgt	.L196
 2584 00c8 002B     		cmp	r3, #0
 2585 00ca 05D0     		beq	.L197
 2586 00cc 24E0     		b	.L194
 2587              	.L196:
 2588 00ce 022B     		cmp	r3, #2
 2589 00d0 0AD0     		beq	.L198
 2590 00d2 032B     		cmp	r3, #3
 2591 00d4 14D0     		beq	.L199
 2592 00d6 1FE0     		b	.L194
 2593              	.L197:
 665:.\main.c      ****     { //transitions
 666:.\main.c      ****         case BA_start:
 667:.\main.c      ****             baseAzimuth_state = BA_init;
 2594              		.loc 2 667 0
 2595 00d8 134B     		ldr	r3, .L207
 2596 00da 0122     		mov	r2, #1
 2597 00dc 1A70     		strb	r2, [r3]
 668:.\main.c      ****             break;
 2598              		.loc 2 668 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 60


 2599 00de 1FE0     		b	.L184
 2600              	.L195:
 669:.\main.c      ****         
 670:.\main.c      ****         case BA_init:
 671:.\main.c      ****             baseAzimuth_state = BA_wait;
 2601              		.loc 2 671 0
 2602 00e0 114B     		ldr	r3, .L207
 2603 00e2 0322     		mov	r2, #3
 2604 00e4 1A70     		strb	r2, [r3]
 672:.\main.c      ****             break;
 2605              		.loc 2 672 0
 2606 00e6 1BE0     		b	.L184
 2607              	.L198:
 673:.\main.c      ****         
 674:.\main.c      ****         case BA_execute:
 675:.\main.c      ****             if(BA_FLAG)
 2608              		.loc 2 675 0
 2609 00e8 154B     		ldr	r3, .L207+24
 2610 00ea 1B78     		ldrb	r3, [r3]
 2611 00ec 002B     		cmp	r3, #0
 2612 00ee 03D0     		beq	.L201
 676:.\main.c      ****             {
 677:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2613              		.loc 2 677 0
 2614 00f0 0D4B     		ldr	r3, .L207
 2615 00f2 0222     		mov	r2, #2
 2616 00f4 1A70     		strb	r2, [r3]
 678:.\main.c      ****             }
 679:.\main.c      ****             else
 680:.\main.c      ****             {
 681:.\main.c      ****                 baseAzimuth_state = BA_wait;
 682:.\main.c      ****             }
 683:.\main.c      ****             break;
 2617              		.loc 2 683 0
 2618 00f6 13E0     		b	.L184
 2619              	.L201:
 681:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2620              		.loc 2 681 0
 2621 00f8 0B4B     		ldr	r3, .L207
 2622 00fa 0322     		mov	r2, #3
 2623 00fc 1A70     		strb	r2, [r3]
 2624              		.loc 2 683 0
 2625 00fe 0FE0     		b	.L184
 2626              	.L199:
 684:.\main.c      ****         
 685:.\main.c      ****         case BA_wait:
 686:.\main.c      ****             if(BA_FLAG)
 2627              		.loc 2 686 0
 2628 0100 0F4B     		ldr	r3, .L207+24
 2629 0102 1B78     		ldrb	r3, [r3]
 2630 0104 002B     		cmp	r3, #0
 2631 0106 03D0     		beq	.L203
 687:.\main.c      ****             {
 688:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2632              		.loc 2 688 0
 2633 0108 074B     		ldr	r3, .L207
 2634 010a 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 61


 2635 010c 1A70     		strb	r2, [r3]
 689:.\main.c      ****             }
 690:.\main.c      ****             else
 691:.\main.c      ****             {
 692:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 693:.\main.c      ****             }
 694:.\main.c      ****             break;
 2636              		.loc 2 694 0
 2637 010e 07E0     		b	.L184
 2638              	.L203:
 692:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2639              		.loc 2 692 0
 2640 0110 054B     		ldr	r3, .L207
 2641 0112 0322     		mov	r2, #3
 2642 0114 1A70     		strb	r2, [r3]
 2643              		.loc 2 694 0
 2644 0116 03E0     		b	.L184
 2645              	.L194:
 695:.\main.c      ****             
 696:.\main.c      ****         default:
 697:.\main.c      ****             baseAzimuth_state = BA_start;
 2646              		.loc 2 697 0
 2647 0118 034B     		ldr	r3, .L207
 2648 011a 0022     		mov	r2, #0
 2649 011c 1A70     		strb	r2, [r3]
 698:.\main.c      ****             break;
 2650              		.loc 2 698 0
 2651 011e C046     		mov	r8, r8
 2652              	.L184:
 699:.\main.c      ****     }
 700:.\main.c      **** }
 2653              		.loc 2 700 0
 2654 0120 BD46     		mov	sp, r7
 2655 0122 03B0     		add	sp, sp, #12
 2656              		@ sp needed
 2657 0124 90BD     		pop	{r4, r7, pc}
 2658              	.L208:
 2659 0126 C046     		.align	2
 2660              	.L207:
 2661 0128 00000000 		.word	baseAzimuth_state
 2662 012c 00000000 		.word	NEUTRAL
 2663 0130 00000000 		.word	latest_command
 2664 0134 DC050000 		.word	1500
 2665 0138 00000000 		.word	data_array
 2666 013c E7030000 		.word	999
 2667 0140 00000000 		.word	BA_FLAG
 2668              		.cfi_endproc
 2669              	.LFE50:
 2670              		.size	baseAzimuth, .-baseAzimuth
 2671              		.comm	effector_state,1,1
 2672              		.section	.text.effector,"ax",%progbits
 2673              		.align	2
 2674              		.global	effector
 2675              		.code	16
 2676              		.thumb_func
 2677              		.type	effector, %function
 2678              	effector:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 62


 2679              	.LFB51:
 701:.\main.c      **** 
 702:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 703:.\main.c      **** void effector()
 704:.\main.c      **** {
 2680              		.loc 2 704 0
 2681              		.cfi_startproc
 2682 0000 90B5     		push	{r4, r7, lr}
 2683              		.cfi_def_cfa_offset 12
 2684              		.cfi_offset 4, -12
 2685              		.cfi_offset 7, -8
 2686              		.cfi_offset 14, -4
 2687 0002 83B0     		sub	sp, sp, #12
 2688              		.cfi_def_cfa_offset 24
 2689 0004 00AF     		add	r7, sp, #0
 2690              		.cfi_def_cfa_register 7
 705:.\main.c      ****     uint16 command;
 706:.\main.c      **** 
 707:.\main.c      ****     switch(effector_state){ //actions
 2691              		.loc 2 707 0
 2692 0006 384B     		ldr	r3, .L232
 2693 0008 1B78     		ldrb	r3, [r3]
 2694 000a 012B     		cmp	r3, #1
 2695 000c 08D0     		beq	.L211
 2696 000e 02DC     		bgt	.L212
 2697 0010 002B     		cmp	r3, #0
 2698 0012 32D0     		beq	.L230
 2699 0014 2DE0     		b	.L210
 2700              	.L212:
 2701 0016 022B     		cmp	r3, #2
 2702 0018 08D0     		beq	.L214
 2703 001a 032B     		cmp	r3, #3
 2704 001c 2FD0     		beq	.L231
 2705 001e 28E0     		b	.L210
 2706              	.L211:
 708:.\main.c      ****         case eff_start:
 709:.\main.c      ****             break;
 710:.\main.c      **** 
 711:.\main.c      ****         case eff_init:           
 712:.\main.c      ****            EFFECTOR_PWM_WriteCompare(NEUTRAL);
 2707              		.loc 2 712 0
 2708 0020 324B     		ldr	r3, .L232+4
 2709 0022 1B88     		ldrh	r3, [r3]
 2710 0024 181C     		mov	r0, r3
 2711 0026 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 713:.\main.c      ****            break;
 2712              		.loc 2 713 0
 2713 002a 29E0     		b	.L216
 2714              	.L214:
 714:.\main.c      **** 
 715:.\main.c      ****         case eff_execute:
 716:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);
 2715              		.loc 2 716 0
 2716 002c BC1D     		add	r4, r7, #6
 2717 002e 304B     		ldr	r3, .L232+8
 2718 0030 181C     		mov	r0, r3
 2719 0032 1421     		mov	r1, #20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 63


 2720 0034 1522     		mov	r2, #21
 2721 0036 FFF7FEFF 		bl	make_command
 2722 003a 031C     		mov	r3, r0
 2723 003c 2380     		strh	r3, [r4]
 717:.\main.c      **** 
 718:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2724              		.loc 2 718 0
 2725 003e BB1D     		add	r3, r7, #6
 2726 0040 1A88     		ldrh	r2, [r3]
 2727 0042 FA23     		mov	r3, #250
 2728 0044 DB00     		lsl	r3, r3, #3
 2729 0046 9A42     		cmp	r2, r3
 2730 0048 0AD8     		bhi	.L217
 2731              		.loc 2 718 0 is_stmt 0 discriminator 1
 2732 004a BB1D     		add	r3, r7, #6
 2733 004c 1A88     		ldrh	r2, [r3]
 2734 004e 294B     		ldr	r3, .L232+12
 2735 0050 9A42     		cmp	r2, r3
 2736 0052 05D9     		bls	.L217
 719:.\main.c      ****             {
 720:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 2737              		.loc 2 720 0 is_stmt 1
 2738 0054 BB1D     		add	r3, r7, #6
 2739 0056 1B88     		ldrh	r3, [r3]
 2740 0058 181C     		mov	r0, r3
 2741 005a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 2742 005e 04E0     		b	.L218
 2743              	.L217:
 721:.\main.c      ****             }
 722:.\main.c      ****             else
 723:.\main.c      ****             {
 724:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(1000);
 2744              		.loc 2 724 0
 2745 0060 FA23     		mov	r3, #250
 2746 0062 9B00     		lsl	r3, r3, #2
 2747 0064 181C     		mov	r0, r3
 2748 0066 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 2749              	.L218:
 725:.\main.c      ****             }
 726:.\main.c      ****             
 727:.\main.c      ****             EFFECTOR_FLAG = 0;
 2750              		.loc 2 727 0
 2751 006a 234B     		ldr	r3, .L232+16
 2752 006c 0022     		mov	r2, #0
 2753 006e 1A70     		strb	r2, [r3]
 728:.\main.c      ****             break;
 2754              		.loc 2 728 0
 2755 0070 06E0     		b	.L216
 2756              	.L210:
 729:.\main.c      ****             
 730:.\main.c      ****         case eff_wait:
 731:.\main.c      ****             break;
 732:.\main.c      ****         
 733:.\main.c      ****         default:
 734:.\main.c      ****             effector_state = eff_start;
 2757              		.loc 2 734 0
 2758 0072 1D4B     		ldr	r3, .L232
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 64


 2759 0074 0022     		mov	r2, #0
 2760 0076 1A70     		strb	r2, [r3]
 735:.\main.c      ****             break;
 2761              		.loc 2 735 0
 2762 0078 02E0     		b	.L216
 2763              	.L230:
 709:.\main.c      ****             break;
 2764              		.loc 2 709 0
 2765 007a C046     		mov	r8, r8
 2766 007c 00E0     		b	.L216
 2767              	.L231:
 731:.\main.c      ****             break;
 2768              		.loc 2 731 0
 2769 007e C046     		mov	r8, r8
 2770              	.L216:
 736:.\main.c      ****     }
 737:.\main.c      ****     
 738:.\main.c      ****     switch(effector_state){ //transitions
 2771              		.loc 2 738 0
 2772 0080 194B     		ldr	r3, .L232
 2773 0082 1B78     		ldrb	r3, [r3]
 2774 0084 012B     		cmp	r3, #1
 2775 0086 0CD0     		beq	.L220
 2776 0088 02DC     		bgt	.L221
 2777 008a 002B     		cmp	r3, #0
 2778 008c 05D0     		beq	.L222
 2779 008e 24E0     		b	.L219
 2780              	.L221:
 2781 0090 022B     		cmp	r3, #2
 2782 0092 0AD0     		beq	.L223
 2783 0094 032B     		cmp	r3, #3
 2784 0096 14D0     		beq	.L224
 2785 0098 1FE0     		b	.L219
 2786              	.L222:
 739:.\main.c      ****         case eff_start:
 740:.\main.c      ****             effector_state = eff_init;
 2787              		.loc 2 740 0
 2788 009a 134B     		ldr	r3, .L232
 2789 009c 0122     		mov	r2, #1
 2790 009e 1A70     		strb	r2, [r3]
 741:.\main.c      ****             break;
 2791              		.loc 2 741 0
 2792 00a0 1FE0     		b	.L209
 2793              	.L220:
 742:.\main.c      ****         
 743:.\main.c      ****         case eff_init:
 744:.\main.c      ****             effector_state = eff_wait;
 2794              		.loc 2 744 0
 2795 00a2 114B     		ldr	r3, .L232
 2796 00a4 0322     		mov	r2, #3
 2797 00a6 1A70     		strb	r2, [r3]
 745:.\main.c      ****             break;
 2798              		.loc 2 745 0
 2799 00a8 1BE0     		b	.L209
 2800              	.L223:
 746:.\main.c      ****         
 747:.\main.c      ****         case eff_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 65


 748:.\main.c      ****             if(EFFECTOR_FLAG)
 2801              		.loc 2 748 0
 2802 00aa 134B     		ldr	r3, .L232+16
 2803 00ac 1B78     		ldrb	r3, [r3]
 2804 00ae 002B     		cmp	r3, #0
 2805 00b0 03D0     		beq	.L226
 749:.\main.c      ****             {
 750:.\main.c      ****                 effector_state = eff_execute;
 2806              		.loc 2 750 0
 2807 00b2 0D4B     		ldr	r3, .L232
 2808 00b4 0222     		mov	r2, #2
 2809 00b6 1A70     		strb	r2, [r3]
 751:.\main.c      ****             }
 752:.\main.c      ****             else
 753:.\main.c      ****             {
 754:.\main.c      ****                 effector_state = eff_wait;
 755:.\main.c      ****             }
 756:.\main.c      ****             break;
 2810              		.loc 2 756 0
 2811 00b8 13E0     		b	.L209
 2812              	.L226:
 754:.\main.c      ****                 effector_state = eff_wait;
 2813              		.loc 2 754 0
 2814 00ba 0B4B     		ldr	r3, .L232
 2815 00bc 0322     		mov	r2, #3
 2816 00be 1A70     		strb	r2, [r3]
 2817              		.loc 2 756 0
 2818 00c0 0FE0     		b	.L209
 2819              	.L224:
 757:.\main.c      ****         
 758:.\main.c      ****         case eff_wait:
 759:.\main.c      ****             if(EFFECTOR_FLAG)
 2820              		.loc 2 759 0
 2821 00c2 0D4B     		ldr	r3, .L232+16
 2822 00c4 1B78     		ldrb	r3, [r3]
 2823 00c6 002B     		cmp	r3, #0
 2824 00c8 03D0     		beq	.L228
 760:.\main.c      ****             {
 761:.\main.c      ****                 effector_state = eff_execute;
 2825              		.loc 2 761 0
 2826 00ca 074B     		ldr	r3, .L232
 2827 00cc 0222     		mov	r2, #2
 2828 00ce 1A70     		strb	r2, [r3]
 762:.\main.c      ****             }
 763:.\main.c      ****             else
 764:.\main.c      ****             {
 765:.\main.c      ****                 effector_state = eff_wait; 
 766:.\main.c      ****             }
 767:.\main.c      ****             break;
 2829              		.loc 2 767 0
 2830 00d0 07E0     		b	.L209
 2831              	.L228:
 765:.\main.c      ****                 effector_state = eff_wait; 
 2832              		.loc 2 765 0
 2833 00d2 054B     		ldr	r3, .L232
 2834 00d4 0322     		mov	r2, #3
 2835 00d6 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 66


 2836              		.loc 2 767 0
 2837 00d8 03E0     		b	.L209
 2838              	.L219:
 768:.\main.c      ****         
 769:.\main.c      ****         default:
 770:.\main.c      ****             effector_state = eff_start;
 2839              		.loc 2 770 0
 2840 00da 034B     		ldr	r3, .L232
 2841 00dc 0022     		mov	r2, #0
 2842 00de 1A70     		strb	r2, [r3]
 771:.\main.c      ****             break;
 2843              		.loc 2 771 0
 2844 00e0 C046     		mov	r8, r8
 2845              	.L209:
 772:.\main.c      ****     }    
 773:.\main.c      **** }
 2846              		.loc 2 773 0
 2847 00e2 BD46     		mov	sp, r7
 2848 00e4 03B0     		add	sp, sp, #12
 2849              		@ sp needed
 2850 00e6 90BD     		pop	{r4, r7, pc}
 2851              	.L233:
 2852              		.align	2
 2853              	.L232:
 2854 00e8 00000000 		.word	effector_state
 2855 00ec 00000000 		.word	NEUTRAL
 2856 00f0 00000000 		.word	data_array
 2857 00f4 E7030000 		.word	999
 2858 00f8 00000000 		.word	EFFECTOR_FLAG
 2859              		.cfi_endproc
 2860              	.LFE51:
 2861              		.size	effector, .-effector
 2862              		.comm	arduino_state,1,1
 2863              		.section	.text.arduino,"ax",%progbits
 2864              		.align	2
 2865              		.global	arduino
 2866              		.code	16
 2867              		.thumb_func
 2868              		.type	arduino, %function
 2869              	arduino:
 2870              	.LFB52:
 774:.\main.c      **** 
 775:.\main.c      **** enum arduino_states {ard_start, ard_init, ard_wait, ard_read, ard_write} arduino_state;
 776:.\main.c      **** void arduino()
 777:.\main.c      **** {
 2871              		.loc 2 777 0
 2872              		.cfi_startproc
 2873 0000 80B5     		push	{r7, lr}
 2874              		.cfi_def_cfa_offset 8
 2875              		.cfi_offset 7, -8
 2876              		.cfi_offset 14, -4
 2877 0002 82B0     		sub	sp, sp, #8
 2878              		.cfi_def_cfa_offset 16
 2879 0004 00AF     		add	r7, sp, #0
 2880              		.cfi_def_cfa_register 7
 778:.\main.c      ****     uint8 video_mux;
 779:.\main.c      ****     uint8 laser;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 67


 780:.\main.c      ****     uint8 pack_for_rover;
 781:.\main.c      ****     uint8 ARD_ARRAY_SIZE = 12;
 2881              		.loc 2 781 0
 2882 0006 FB1C     		add	r3, r7, #3
 2883 0008 0C22     		mov	r2, #12
 2884 000a 1A70     		strb	r2, [r3]
 782:.\main.c      ****     
 783:.\main.c      ****     switch(arduino_state) //state actions
 2885              		.loc 2 783 0
 2886 000c 3C4B     		ldr	r3, .L258
 2887 000e 1B78     		ldrb	r3, [r3]
 2888 0010 042B     		cmp	r3, #4
 2889 0012 3BD8     		bhi	.L235
 2890 0014 9A00     		lsl	r2, r3, #2
 2891 0016 3B4B     		ldr	r3, .L258+4
 2892 0018 D318     		add	r3, r2, r3
 2893 001a 1B68     		ldr	r3, [r3]
 2894 001c 9F46     		mov	pc, r3
 2895              		.section	.rodata
 2896              		.align	2
 2897              	.L237:
 2898 0028 94000000 		.word	.L257
 2899 002c 1E000000 		.word	.L238
 2900 0030 94000000 		.word	.L257
 2901 0034 44000000 		.word	.L240
 2902 0038 6C000000 		.word	.L241
 2903              		.section	.text.arduino
 2904              	.L238:
 784:.\main.c      ****     {
 785:.\main.c      ****         case ard_start:
 786:.\main.c      ****             break;
 787:.\main.c      ****         
 788:.\main.c      ****         case ard_init:
 789:.\main.c      ****             video_mux = 0x01;
 2905              		.loc 2 789 0
 2906 001e BB1C     		add	r3, r7, #2
 2907 0020 0122     		mov	r2, #1
 2908 0022 1A70     		strb	r2, [r3]
 790:.\main.c      ****             laser = 0x00;
 2909              		.loc 2 790 0
 2910 0024 7B1C     		add	r3, r7, #1
 2911 0026 0022     		mov	r2, #0
 2912 0028 1A70     		strb	r2, [r3]
 791:.\main.c      ****             pack_for_rover = video_mux | laser;
 2913              		.loc 2 791 0
 2914 002a 3B1C     		mov	r3, r7
 2915 002c B91C     		add	r1, r7, #2
 2916 002e 7A1C     		add	r2, r7, #1
 2917 0030 0978     		ldrb	r1, [r1]
 2918 0032 1278     		ldrb	r2, [r2]
 2919 0034 0A43     		orr	r2, r1
 2920 0036 1A70     		strb	r2, [r3]
 792:.\main.c      ****             //write initial video, laser enable
 793:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 2921              		.loc 2 793 0
 2922 0038 3B1C     		mov	r3, r7
 2923 003a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 68


 2924 003c 181C     		mov	r0, r3
 2925 003e FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
 794:.\main.c      ****             break;
 2926              		.loc 2 794 0
 2927 0042 28E0     		b	.L242
 2928              	.L240:
 2929              	.LBB2:
 795:.\main.c      ****         
 796:.\main.c      ****         case ard_wait:
 797:.\main.c      ****             break;
 798:.\main.c      ****         
 799:.\main.c      ****         case ard_read:
 800:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2930              		.loc 2 800 0
 2931 0044 0023     		mov	r3, #0
 2932 0046 7B60     		str	r3, [r7, #4]
 2933 0048 0AE0     		b	.L243
 2934              	.L244:
 801:.\main.c      ****             {
 802:.\main.c      ****               feedback_array[i] = Arduino_UART_UartGetByte();
 2935              		.loc 2 802 0 discriminator 2
 2936 004a FFF7FEFF 		bl	Arduino_UART_UartGetByte
 2937 004e 031C     		mov	r3, r0
 2938 0050 DAB2     		uxtb	r2, r3
 2939 0052 2D49     		ldr	r1, .L258+8
 2940 0054 7B68     		ldr	r3, [r7, #4]
 2941 0056 CB18     		add	r3, r1, r3
 2942 0058 1A70     		strb	r2, [r3]
 800:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2943              		.loc 2 800 0 discriminator 2
 2944 005a 7B68     		ldr	r3, [r7, #4]
 2945 005c 0133     		add	r3, r3, #1
 2946 005e 7B60     		str	r3, [r7, #4]
 2947              	.L243:
 800:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2948              		.loc 2 800 0 is_stmt 0 discriminator 1
 2949 0060 FB1C     		add	r3, r7, #3
 2950 0062 1A78     		ldrb	r2, [r3]
 2951 0064 7B68     		ldr	r3, [r7, #4]
 2952 0066 9A42     		cmp	r2, r3
 2953 0068 EFDC     		bgt	.L244
 2954              	.LBE2:
 803:.\main.c      ****             }
 804:.\main.c      ****             break;
 2955              		.loc 2 804 0 is_stmt 1
 2956 006a 14E0     		b	.L242
 2957              	.L241:
 805:.\main.c      ****         
 806:.\main.c      ****         case ard_write:
 807:.\main.c      ****             //write laser
 808:.\main.c      ****             //write video
 809:.\main.c      ****             //video_mux = data_array[ARD_BYTE_1];
 810:.\main.c      ****             //laser = data_array[ARD_BYTE_2];
 811:.\main.c      ****             
 812:.\main.c      ****             pack_for_rover = video_mux | laser;
 2958              		.loc 2 812 0
 2959 006c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 69


 2960 006e B91C     		add	r1, r7, #2
 2961 0070 7A1C     		add	r2, r7, #1
 2962 0072 0978     		ldrb	r1, [r1]
 2963 0074 1278     		ldrb	r2, [r2]
 2964 0076 0A43     		orr	r2, r1
 2965 0078 1A70     		strb	r2, [r3]
 813:.\main.c      ****             
 814:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 2966              		.loc 2 814 0
 2967 007a 3B1C     		mov	r3, r7
 2968 007c 1B78     		ldrb	r3, [r3]
 2969 007e 181C     		mov	r0, r3
 2970 0080 FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
 815:.\main.c      ****             
 816:.\main.c      ****             //pass exactly what was sent to me by basestation
 817:.\main.c      ****             ARD_FLAG = 0;
 2971              		.loc 2 817 0
 2972 0084 214B     		ldr	r3, .L258+12
 2973 0086 0022     		mov	r2, #0
 2974 0088 1A70     		strb	r2, [r3]
 818:.\main.c      ****             break;
 2975              		.loc 2 818 0
 2976 008a 04E0     		b	.L242
 2977              	.L235:
 819:.\main.c      ****         
 820:.\main.c      ****         default:
 821:.\main.c      ****             arduino_state = ard_start;
 2978              		.loc 2 821 0
 2979 008c 1C4B     		ldr	r3, .L258
 2980 008e 0022     		mov	r2, #0
 2981 0090 1A70     		strb	r2, [r3]
 822:.\main.c      ****             break;
 2982              		.loc 2 822 0
 2983 0092 00E0     		b	.L242
 2984              	.L257:
 786:.\main.c      ****             break;
 2985              		.loc 2 786 0
 2986 0094 C046     		mov	r8, r8
 2987              	.L242:
 823:.\main.c      ****     }
 824:.\main.c      ****     switch(arduino_state) //state transitions
 2988              		.loc 2 824 0
 2989 0096 1A4B     		ldr	r3, .L258
 2990 0098 1B78     		ldrb	r3, [r3]
 2991 009a 042B     		cmp	r3, #4
 2992 009c 28D8     		bhi	.L245
 2993 009e 9A00     		lsl	r2, r3, #2
 2994 00a0 1B4B     		ldr	r3, .L258+16
 2995 00a2 D318     		add	r3, r2, r3
 2996 00a4 1B68     		ldr	r3, [r3]
 2997 00a6 9F46     		mov	pc, r3
 2998              		.section	.rodata
 2999              		.align	2
 3000              	.L247:
 3001 003c A8000000 		.word	.L246
 3002 0040 B0000000 		.word	.L248
 3003 0044 B8000000 		.word	.L249
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 70


 3004 0048 C0000000 		.word	.L250
 3005 004c D8000000 		.word	.L251
 3006              		.section	.text.arduino
 3007              	.L246:
 825:.\main.c      ****     {
 826:.\main.c      ****         case ard_start:
 827:.\main.c      ****             arduino_state = ard_init;
 3008              		.loc 2 827 0
 3009 00a8 154B     		ldr	r3, .L258
 3010 00aa 0122     		mov	r2, #1
 3011 00ac 1A70     		strb	r2, [r3]
 828:.\main.c      ****             break;
 3012              		.loc 2 828 0
 3013 00ae 23E0     		b	.L234
 3014              	.L248:
 829:.\main.c      ****         
 830:.\main.c      ****         case ard_init:
 831:.\main.c      ****             arduino_state = ard_wait;
 3015              		.loc 2 831 0
 3016 00b0 134B     		ldr	r3, .L258
 3017 00b2 0222     		mov	r2, #2
 3018 00b4 1A70     		strb	r2, [r3]
 832:.\main.c      ****             break;
 3019              		.loc 2 832 0
 3020 00b6 1FE0     		b	.L234
 3021              	.L249:
 833:.\main.c      ****         
 834:.\main.c      ****         case ard_wait:
 835:.\main.c      ****             arduino_state = ard_read;
 3022              		.loc 2 835 0
 3023 00b8 114B     		ldr	r3, .L258
 3024 00ba 0322     		mov	r2, #3
 3025 00bc 1A70     		strb	r2, [r3]
 836:.\main.c      ****             break;
 3026              		.loc 2 836 0
 3027 00be 1BE0     		b	.L234
 3028              	.L250:
 837:.\main.c      ****         
 838:.\main.c      ****         case ard_read:
 839:.\main.c      ****             if(ARD_FLAG)
 3029              		.loc 2 839 0
 3030 00c0 124B     		ldr	r3, .L258+12
 3031 00c2 1B78     		ldrb	r3, [r3]
 3032 00c4 002B     		cmp	r3, #0
 3033 00c6 03D0     		beq	.L253
 840:.\main.c      ****             {
 841:.\main.c      ****                 arduino_state = ard_write;
 3034              		.loc 2 841 0
 3035 00c8 0D4B     		ldr	r3, .L258
 3036 00ca 0422     		mov	r2, #4
 3037 00cc 1A70     		strb	r2, [r3]
 842:.\main.c      ****             }
 843:.\main.c      ****             else
 844:.\main.c      ****             {
 845:.\main.c      ****                 arduino_state = ard_wait;
 846:.\main.c      ****             }
 847:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 71


 3038              		.loc 2 847 0
 3039 00ce 13E0     		b	.L234
 3040              	.L253:
 845:.\main.c      ****                 arduino_state = ard_wait;
 3041              		.loc 2 845 0
 3042 00d0 0B4B     		ldr	r3, .L258
 3043 00d2 0222     		mov	r2, #2
 3044 00d4 1A70     		strb	r2, [r3]
 3045              		.loc 2 847 0
 3046 00d6 0FE0     		b	.L234
 3047              	.L251:
 848:.\main.c      ****             
 849:.\main.c      ****         case ard_write:
 850:.\main.c      ****             if(ARD_FLAG)
 3048              		.loc 2 850 0
 3049 00d8 0C4B     		ldr	r3, .L258+12
 3050 00da 1B78     		ldrb	r3, [r3]
 3051 00dc 002B     		cmp	r3, #0
 3052 00de 03D0     		beq	.L255
 851:.\main.c      ****             {
 852:.\main.c      ****                 arduino_state = ard_write;
 3053              		.loc 2 852 0
 3054 00e0 074B     		ldr	r3, .L258
 3055 00e2 0422     		mov	r2, #4
 3056 00e4 1A70     		strb	r2, [r3]
 853:.\main.c      ****             }
 854:.\main.c      ****             else
 855:.\main.c      ****             {
 856:.\main.c      ****                 arduino_state = ard_wait;
 857:.\main.c      ****             }
 858:.\main.c      ****             break;
 3057              		.loc 2 858 0
 3058 00e6 07E0     		b	.L234
 3059              	.L255:
 856:.\main.c      ****                 arduino_state = ard_wait;
 3060              		.loc 2 856 0
 3061 00e8 054B     		ldr	r3, .L258
 3062 00ea 0222     		mov	r2, #2
 3063 00ec 1A70     		strb	r2, [r3]
 3064              		.loc 2 858 0
 3065 00ee 03E0     		b	.L234
 3066              	.L245:
 859:.\main.c      ****             
 860:.\main.c      ****         default:
 861:.\main.c      ****             arduino_state = ard_start;
 3067              		.loc 2 861 0
 3068 00f0 034B     		ldr	r3, .L258
 3069 00f2 0022     		mov	r2, #0
 3070 00f4 1A70     		strb	r2, [r3]
 862:.\main.c      ****             break;
 3071              		.loc 2 862 0
 3072 00f6 C046     		mov	r8, r8
 3073              	.L234:
 863:.\main.c      ****     }   
 864:.\main.c      **** }
 3074              		.loc 2 864 0
 3075 00f8 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 72


 3076 00fa 02B0     		add	sp, sp, #8
 3077              		@ sp needed
 3078 00fc 80BD     		pop	{r7, pc}
 3079              	.L259:
 3080 00fe C046     		.align	2
 3081              	.L258:
 3082 0100 00000000 		.word	arduino_state
 3083 0104 28000000 		.word	.L237
 3084 0108 00000000 		.word	feedback_array
 3085 010c 00000000 		.word	ARD_FLAG
 3086 0110 3C000000 		.word	.L247
 3087              		.cfi_endproc
 3088              	.LFE52:
 3089              		.size	arduino, .-arduino
 3090              		.section	.text.initialize,"ax",%progbits
 3091              		.align	2
 3092              		.global	initialize
 3093              		.code	16
 3094              		.thumb_func
 3095              		.type	initialize, %function
 3096              	initialize:
 3097              	.LFB53:
 865:.\main.c      **** 
 866:.\main.c      **** //Initialization function for the program
 867:.\main.c      **** void initialize()
 868:.\main.c      **** {
 3098              		.loc 2 868 0
 3099              		.cfi_startproc
 3100 0000 80B5     		push	{r7, lr}
 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 7, -8
 3103              		.cfi_offset 14, -4
 3104 0002 82B0     		sub	sp, sp, #8
 3105              		.cfi_def_cfa_offset 16
 3106 0004 00AF     		add	r7, sp, #0
 3107              		.cfi_def_cfa_register 7
 869:.\main.c      ****     //initialize the wiznet
 870:.\main.c      ****     WIZ_RST_Write(0);
 3108              		.loc 2 870 0
 3109 0006 0020     		mov	r0, #0
 3110 0008 FFF7FEFF 		bl	WIZ_RST_Write
 871:.\main.c      ****     CyDelay(10);
 3111              		.loc 2 871 0
 3112 000c 0A20     		mov	r0, #10
 3113 000e FFF7FEFF 		bl	CyDelay
 872:.\main.c      ****     WIZ_RST_Write(1);
 3114              		.loc 2 872 0
 3115 0012 0120     		mov	r0, #1
 3116 0014 FFF7FEFF 		bl	WIZ_RST_Write
 873:.\main.c      ****     WIZ_SS_Write(1);
 3117              		.loc 2 873 0
 3118 0018 0120     		mov	r0, #1
 3119 001a FFF7FEFF 		bl	WIZ_SS_Write
 3120              	.LBB3:
 874:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3121              		.loc 2 874 0
 3122 001e FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 73


 3123 0020 0022     		mov	r2, #0
 3124 0022 1A70     		strb	r2, [r3]
 3125 0024 0DE0     		b	.L261
 3126              	.L264:
 875:.\main.c      ****     {
 876:.\main.c      ****         if(WIZ_RDY_Read())
 3127              		.loc 2 876 0
 3128 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3129 002a 031C     		mov	r3, r0
 3130 002c 002B     		cmp	r3, #0
 3131 002e 00D0     		beq	.L262
 877:.\main.c      ****         {
 878:.\main.c      ****             break;
 3132              		.loc 2 878 0
 3133 0030 0BE0     		b	.L263
 3134              	.L262:
 879:.\main.c      ****         }
 880:.\main.c      ****         else
 881:.\main.c      ****         {
 882:.\main.c      ****             CyDelay(4);
 3135              		.loc 2 882 0
 3136 0032 0420     		mov	r0, #4
 3137 0034 FFF7FEFF 		bl	CyDelay
 874:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3138              		.loc 2 874 0
 3139 0038 FB1D     		add	r3, r7, #7
 3140 003a 1A78     		ldrb	r2, [r3]
 3141 003c FB1D     		add	r3, r7, #7
 3142 003e 0132     		add	r2, r2, #1
 3143 0040 1A70     		strb	r2, [r3]
 3144              	.L261:
 874:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3145              		.loc 2 874 0 is_stmt 0 discriminator 1
 3146 0042 FB1D     		add	r3, r7, #7
 3147 0044 1B78     		ldrb	r3, [r3]
 3148 0046 632B     		cmp	r3, #99
 3149 0048 EDD9     		bls	.L264
 3150              	.L263:
 3151              	.LBE3:
 883:.\main.c      ****         }
 884:.\main.c      ****     }
 885:.\main.c      ****     
 886:.\main.c      ****     //Initialize state variables
 887:.\main.c      ****     baseAzimuth_state = BA_start;
 3152              		.loc 2 887 0 is_stmt 1
 3153 004a 274B     		ldr	r3, .L265
 3154 004c 0022     		mov	r2, #0
 3155 004e 1A70     		strb	r2, [r3]
 888:.\main.c      ****     wristTilt_state = tilt_start;
 3156              		.loc 2 888 0
 3157 0050 264B     		ldr	r3, .L265+4
 3158 0052 0022     		mov	r2, #0
 3159 0054 1A70     		strb	r2, [r3]
 889:.\main.c      ****     wristRotate_state = rotate_start;
 3160              		.loc 2 889 0
 3161 0056 264B     		ldr	r3, .L265+8
 3162 0058 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 74


 3163 005a 1A70     		strb	r2, [r3]
 890:.\main.c      ****     shoulder_state = shldr_start;
 3164              		.loc 2 890 0
 3165 005c 254B     		ldr	r3, .L265+12
 3166 005e 0022     		mov	r2, #0
 3167 0060 1A70     		strb	r2, [r3]
 891:.\main.c      ****     elbow_state = elbw_start;
 3168              		.loc 2 891 0
 3169 0062 254B     		ldr	r3, .L265+16
 3170 0064 0022     		mov	r2, #0
 3171 0066 1A70     		strb	r2, [r3]
 892:.\main.c      ****     effector_state = eff_start;
 3172              		.loc 2 892 0
 3173 0068 244B     		ldr	r3, .L265+20
 3174 006a 0022     		mov	r2, #0
 3175 006c 1A70     		strb	r2, [r3]
 893:.\main.c      ****     //arduino_state = ard_start;
 894:.\main.c      ****     //send_packet_state = send_start;
 895:.\main.c      ****     
 896:.\main.c      ****     //start all of our components
 897:.\main.c      ****     SPIM_1_Start();
 3176              		.loc 2 897 0
 3177 006e FFF7FEFF 		bl	SPIM_1_Start
 898:.\main.c      ****     Clock_pwm_Start();
 3178              		.loc 2 898 0
 3179 0072 FFF7FEFF 		bl	Clock_pwm_Start
 899:.\main.c      ****     Clock_counter_Start();
 3180              		.loc 2 899 0
 3181 0076 FFF7FEFF 		bl	Clock_counter_Start
 900:.\main.c      ****     Wrist_UART_Start();
 3182              		.loc 2 900 0
 3183 007a FFF7FEFF 		bl	Wrist_UART_Start
 901:.\main.c      ****     SHLDR_PWM_Start();
 3184              		.loc 2 901 0
 3185 007e FFF7FEFF 		bl	SHLDR_PWM_Start
 902:.\main.c      ****     BA_PWM_Start();
 3186              		.loc 2 902 0
 3187 0082 FFF7FEFF 		bl	BA_PWM_Start
 903:.\main.c      ****     ELBW_PWM_Start();
 3188              		.loc 2 903 0
 3189 0086 FFF7FEFF 		bl	ELBW_PWM_Start
 904:.\main.c      ****     EFFECTOR_PWM_Start();
 3190              		.loc 2 904 0
 3191 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
 905:.\main.c      ****     //ADC_Start();
 906:.\main.c      ****     //ADC_StartConvert();
 907:.\main.c      ****     //Arduino_UART_Start();
 908:.\main.c      ****     
 909:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3192              		.loc 2 909 0
 3193 008e 1C4B     		ldr	r3, .L265+24
 3194 0090 0420     		mov	r0, #4
 3195 0092 0121     		mov	r1, #1
 3196 0094 1A1C     		mov	r2, r3
 3197 0096 FFF7FEFF 		bl	wiznetInit
 910:.\main.c      ****     
 911:.\main.c      ****     //Initialize the dynamixels <-- Will do this on the computer
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 75


 912:.\main.c      ****     ServoSpeed(0xFE, 100);
 3198              		.loc 2 912 0
 3199 009a FE20     		mov	r0, #254
 3200 009c 6421     		mov	r1, #100
 3201 009e FFF7FEFF 		bl	ServoSpeed
 913:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3202              		.loc 2 913 0
 3203 00a2 184B     		ldr	r3, .L265+28
 3204 00a4 FE20     		mov	r0, #254
 3205 00a6 191C     		mov	r1, r3
 3206 00a8 FFF7FEFF 		bl	SetServoTorque
 914:.\main.c      ****     
 915:.\main.c      ****     //Initialize our motor drivers
 916:.\main.c      ****     ELBW_PWM_WriteCompare(NEUTRAL); 
 3207              		.loc 2 916 0
 3208 00ac 164B     		ldr	r3, .L265+32
 3209 00ae 1B88     		ldrh	r3, [r3]
 3210 00b0 181C     		mov	r0, r3
 3211 00b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 917:.\main.c      ****     SHLDR_PWM_WriteCompare(NEUTRAL);
 3212              		.loc 2 917 0
 3213 00b6 144B     		ldr	r3, .L265+32
 3214 00b8 1B88     		ldrh	r3, [r3]
 3215 00ba 181C     		mov	r0, r3
 3216 00bc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 918:.\main.c      ****     EFFECTOR_PWM_WriteCompare(NEUTRAL);
 3217              		.loc 2 918 0
 3218 00c0 114B     		ldr	r3, .L265+32
 3219 00c2 1B88     		ldrh	r3, [r3]
 3220 00c4 181C     		mov	r0, r3
 3221 00c6 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 919:.\main.c      ****     CyDelay(3000);
 3222              		.loc 2 919 0
 3223 00ca 104B     		ldr	r3, .L265+36
 3224 00cc 181C     		mov	r0, r3
 3225 00ce FFF7FEFF 		bl	CyDelay
 920:.\main.c      ****     
 921:.\main.c      ****     //ISR stuff
 922:.\main.c      ****     CyGlobalIntEnable;
 3226              		.loc 2 922 0
 3227              	@ 922 ".\main.c" 1
 3228 00d2 62B6     		CPSIE   i
 3229              	@ 0 "" 2
 923:.\main.c      ****     isr_1_StartEx(timer_isr);
 3230              		.loc 2 923 0
 3231              		.code	16
 3232 00d4 0E4B     		ldr	r3, .L265+40
 3233 00d6 181C     		mov	r0, r3
 3234 00d8 FFF7FEFF 		bl	isr_1_StartEx
 924:.\main.c      ****     Timer_1_Start();    
 3235              		.loc 2 924 0
 3236 00dc FFF7FEFF 		bl	Timer_1_Start
 925:.\main.c      **** }
 3237              		.loc 2 925 0
 3238 00e0 BD46     		mov	sp, r7
 3239 00e2 02B0     		add	sp, sp, #8
 3240              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 76


 3241 00e4 80BD     		pop	{r7, pc}
 3242              	.L266:
 3243 00e6 C046     		.align	2
 3244              	.L265:
 3245 00e8 00000000 		.word	baseAzimuth_state
 3246 00ec 00000000 		.word	wristTilt_state
 3247 00f0 00000000 		.word	wristRotate_state
 3248 00f4 00000000 		.word	shoulder_state
 3249 00f8 00000000 		.word	elbow_state
 3250 00fc 00000000 		.word	effector_state
 3251 0100 87690000 		.word	27015
 3252 0104 FF030000 		.word	1023
 3253 0108 00000000 		.word	NEUTRAL
 3254 010c B80B0000 		.word	3000
 3255 0110 00000000 		.word	timer_isr
 3256              		.cfi_endproc
 3257              	.LFE53:
 3258              		.size	initialize, .-initialize
 3259              		.section	.text.main,"ax",%progbits
 3260              		.align	2
 3261              		.global	main
 3262              		.code	16
 3263              		.thumb_func
 3264              		.type	main, %function
 3265              	main:
 3266              	.LFB54:
 926:.\main.c      **** int main()
 927:.\main.c      **** {  
 3267              		.loc 2 927 0
 3268              		.cfi_startproc
 3269 0000 80B5     		push	{r7, lr}
 3270              		.cfi_def_cfa_offset 8
 3271              		.cfi_offset 7, -8
 3272              		.cfi_offset 14, -4
 3273 0002 84B0     		sub	sp, sp, #16
 3274              		.cfi_def_cfa_offset 24
 3275 0004 00AF     		add	r7, sp, #0
 3276              		.cfi_def_cfa_register 7
 928:.\main.c      ****     //Define variables
 929:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 3277              		.loc 2 929 0
 3278 0006 3B1C     		mov	r3, r7
 3279 0008 0F33     		add	r3, r3, #15
 3280 000a 0022     		mov	r2, #0
 3281 000c 1A70     		strb	r2, [r3]
 930:.\main.c      ****     int16 temp_val = NEUTRAL;
 3282              		.loc 2 930 0
 3283 000e 334B     		ldr	r3, .L275
 3284 0010 1A88     		ldrh	r2, [r3]
 3285 0012 BB1D     		add	r3, r7, #6
 3286 0014 1A80     		strh	r2, [r3]
 931:.\main.c      ****     
 932:.\main.c      ****     initialize();
 3287              		.loc 2 932 0
 3288 0016 FFF7FEFF 		bl	initialize
 3289              	.L274:
 933:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 77


 934:.\main.c      ****     for(;;)
 935:.\main.c      ****     {   
 936:.\main.c      ****         if(WIZ_INT_Read()==0)
 3290              		.loc 2 936 0
 3291 001a FFF7FEFF 		bl	WIZ_INT_Read
 3292 001e 031C     		mov	r3, r0
 3293 0020 002B     		cmp	r3, #0
 3294 0022 1AD1     		bne	.L268
 937:.\main.c      ****         {
 938:.\main.c      ****             wiznetClearInterrupts();
 3295              		.loc 2 938 0
 3296 0024 FFF7FEFF 		bl	wiznetClearInterrupts
 939:.\main.c      ****             fill_data_array();
 3297              		.loc 2 939 0
 3298 0028 FFF7FEFF 		bl	fill_data_array
 940:.\main.c      ****             //TODO: check addresses? -- set up error checking/reporting logic
 941:.\main.c      ****             BA_FLAG = 1;
 3299              		.loc 2 941 0
 3300 002c 2C4B     		ldr	r3, .L275+4
 3301 002e 0122     		mov	r2, #1
 3302 0030 1A70     		strb	r2, [r3]
 942:.\main.c      ****             WR_FLAG = 1;
 3303              		.loc 2 942 0
 3304 0032 2C4B     		ldr	r3, .L275+8
 3305 0034 0122     		mov	r2, #1
 3306 0036 1A70     		strb	r2, [r3]
 943:.\main.c      ****             WT_FLAG = 1;
 3307              		.loc 2 943 0
 3308 0038 2B4B     		ldr	r3, .L275+12
 3309 003a 0122     		mov	r2, #1
 3310 003c 1A70     		strb	r2, [r3]
 944:.\main.c      ****             SHOULDER_FLAG = 1;
 3311              		.loc 2 944 0
 3312 003e 2B4B     		ldr	r3, .L275+16
 3313 0040 0122     		mov	r2, #1
 3314 0042 1A70     		strb	r2, [r3]
 945:.\main.c      ****             ELBOW_FLAG = 1;
 3315              		.loc 2 945 0
 3316 0044 2A4B     		ldr	r3, .L275+20
 3317 0046 0122     		mov	r2, #1
 3318 0048 1A70     		strb	r2, [r3]
 946:.\main.c      ****             EFFECTOR_FLAG = 1;
 3319              		.loc 2 946 0
 3320 004a 2A4B     		ldr	r3, .L275+24
 3321 004c 0122     		mov	r2, #1
 3322 004e 1A70     		strb	r2, [r3]
 947:.\main.c      ****             //ARD_FLAG = 1;
 948:.\main.c      ****             fs_count = 0;
 3323              		.loc 2 948 0
 3324 0050 3B1C     		mov	r3, r7
 3325 0052 0F33     		add	r3, r3, #15
 3326 0054 0022     		mov	r2, #0
 3327 0056 1A70     		strb	r2, [r3]
 3328 0058 06E0     		b	.L269
 3329              	.L268:
 949:.\main.c      ****             //HEARTBEAT_FLAG = 1;
 950:.\main.c      ****             //send_packet(); //send heartbeat
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 78


 951:.\main.c      ****         }
 952:.\main.c      ****         else
 953:.\main.c      ****         {
 954:.\main.c      ****             fs_count += 1;
 3330              		.loc 2 954 0
 3331 005a 3B1C     		mov	r3, r7
 3332 005c 0F33     		add	r3, r3, #15
 3333 005e 3A1C     		mov	r2, r7
 3334 0060 0F32     		add	r2, r2, #15
 3335 0062 1278     		ldrb	r2, [r2]
 3336 0064 0132     		add	r2, r2, #1
 3337 0066 1A70     		strb	r2, [r3]
 3338              	.L269:
 955:.\main.c      ****         }
 956:.\main.c      ****         
 957:.\main.c      ****         if(fs_count >= 50)
 3339              		.loc 2 957 0
 3340 0068 3B1C     		mov	r3, r7
 3341 006a 0F33     		add	r3, r3, #15
 3342 006c 1B78     		ldrb	r3, [r3]
 3343 006e 312B     		cmp	r3, #49
 3344 0070 1DD9     		bls	.L270
 958:.\main.c      ****         {
 959:.\main.c      ****             temp_val = NEUTRAL;
 3345              		.loc 2 959 0
 3346 0072 1A4B     		ldr	r3, .L275
 3347 0074 1A88     		ldrh	r2, [r3]
 3348 0076 BB1D     		add	r3, r7, #6
 3349 0078 1A80     		strh	r2, [r3]
 3350              	.LBB4:
 960:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3351              		.loc 2 960 0
 3352 007a 0023     		mov	r3, #0
 3353 007c BB60     		str	r3, [r7, #8]
 3354 007e 13E0     		b	.L271
 3355              	.L272:
 961:.\main.c      ****             {
 962:.\main.c      ****                 data_array[i] = temp_val >> 8;
 3356              		.loc 2 962 0 discriminator 2
 3357 0080 BB1D     		add	r3, r7, #6
 3358 0082 0022     		mov	r2, #0
 3359 0084 9B5E     		ldrsh	r3, [r3, r2]
 3360 0086 1B12     		asr	r3, r3, #8
 3361 0088 9BB2     		uxth	r3, r3
 3362 008a DAB2     		uxtb	r2, r3
 3363 008c 1A49     		ldr	r1, .L275+28
 3364 008e BB68     		ldr	r3, [r7, #8]
 3365 0090 CB18     		add	r3, r1, r3
 3366 0092 1A70     		strb	r2, [r3]
 963:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 3367              		.loc 2 963 0 discriminator 2
 3368 0094 BB68     		ldr	r3, [r7, #8]
 3369 0096 0133     		add	r3, r3, #1
 3370 0098 BA1D     		add	r2, r7, #6
 3371 009a 1288     		ldrh	r2, [r2]
 3372 009c D1B2     		uxtb	r1, r2
 3373 009e 164A     		ldr	r2, .L275+28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 79


 3374 00a0 D154     		strb	r1, [r2, r3]
 960:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3375              		.loc 2 960 0 discriminator 2
 3376 00a2 BB68     		ldr	r3, [r7, #8]
 3377 00a4 0233     		add	r3, r3, #2
 3378 00a6 BB60     		str	r3, [r7, #8]
 3379              	.L271:
 960:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3380              		.loc 2 960 0 is_stmt 0 discriminator 1
 3381 00a8 BB68     		ldr	r3, [r7, #8]
 3382 00aa 152B     		cmp	r3, #21
 3383 00ac E8DD     		ble	.L272
 3384              	.L270:
 3385              	.LBE4:
 964:.\main.c      ****             }
 965:.\main.c      ****         }
 966:.\main.c      ****         
 967:.\main.c      ****         baseAzimuth();
 3386              		.loc 2 967 0 is_stmt 1
 3387 00ae FFF7FEFF 		bl	baseAzimuth
 968:.\main.c      ****         shoulder();
 3388              		.loc 2 968 0
 3389 00b2 FFF7FEFF 		bl	shoulder
 969:.\main.c      ****         elbow();
 3390              		.loc 2 969 0
 3391 00b6 FFF7FEFF 		bl	elbow
 970:.\main.c      ****         effector();
 3392              		.loc 2 970 0
 3393 00ba FFF7FEFF 		bl	effector
 971:.\main.c      ****         wristTilt();
 3394              		.loc 2 971 0
 3395 00be FFF7FEFF 		bl	wristTilt
 972:.\main.c      ****         wristRotate();
 3396              		.loc 2 972 0
 3397 00c2 FFF7FEFF 		bl	wristRotate
 973:.\main.c      ****         //arduino();
 974:.\main.c      ****         //send_packet(); //send feedback packet
 975:.\main.c      ****         
 976:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3398              		.loc 2 976 0
 3399 00c6 C046     		mov	r8, r8
 3400              	.L273:
 3401              		.loc 2 976 0 is_stmt 0 discriminator 1
 3402 00c8 0C4B     		ldr	r3, .L275+32
 3403 00ca 1B78     		ldrb	r3, [r3]
 3404 00cc DBB2     		uxtb	r3, r3
 3405 00ce 002B     		cmp	r3, #0
 3406 00d0 FAD0     		beq	.L273
 977:.\main.c      ****         timerFlag = 0;
 3407              		.loc 2 977 0 is_stmt 1
 3408 00d2 0A4B     		ldr	r3, .L275+32
 3409 00d4 0022     		mov	r2, #0
 3410 00d6 1A70     		strb	r2, [r3]
 978:.\main.c      ****     } 
 3411              		.loc 2 978 0
 3412 00d8 9FE7     		b	.L274
 3413              	.L276:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 80


 3414 00da C046     		.align	2
 3415              	.L275:
 3416 00dc 00000000 		.word	NEUTRAL
 3417 00e0 00000000 		.word	BA_FLAG
 3418 00e4 00000000 		.word	WR_FLAG
 3419 00e8 00000000 		.word	WT_FLAG
 3420 00ec 00000000 		.word	SHOULDER_FLAG
 3421 00f0 00000000 		.word	ELBOW_FLAG
 3422 00f4 00000000 		.word	EFFECTOR_FLAG
 3423 00f8 00000000 		.word	data_array
 3424 00fc 00000000 		.word	timerFlag
 3425              		.cfi_endproc
 3426              	.LFE54:
 3427              		.size	main, .-main
 3428              		.text
 3429              	.Letext0:
 3430              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3431              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3432              		.file 5 ".\\Generated_Source\\PSoC4/cytypes.h"
 3433              		.file 6 ".\\main.h"
 3434              		.section	.debug_info,"",%progbits
 3435              	.Ldebug_info0:
 3436 0000 030A0000 		.4byte	0xa03
 3437 0004 0400     		.2byte	0x4
 3438 0006 00000000 		.4byte	.Ldebug_abbrev0
 3439 000a 04       		.byte	0x4
 3440 000b 01       		.uleb128 0x1
 3441 000c E8050000 		.4byte	.LASF144
 3442 0010 01       		.byte	0x1
 3443 0011 74070000 		.4byte	.LASF145
 3444 0015 AE060000 		.4byte	.LASF146
 3445 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3446 001d 00000000 		.4byte	0
 3447 0021 00000000 		.4byte	.Ldebug_line0
 3448 0025 02       		.uleb128 0x2
 3449 0026 01       		.byte	0x1
 3450 0027 06       		.byte	0x6
 3451 0028 80060000 		.4byte	.LASF0
 3452 002c 03       		.uleb128 0x3
 3453 002d D1040000 		.4byte	.LASF9
 3454 0031 03       		.byte	0x3
 3455 0032 1C       		.byte	0x1c
 3456 0033 37000000 		.4byte	0x37
 3457 0037 02       		.uleb128 0x2
 3458 0038 01       		.byte	0x1
 3459 0039 08       		.byte	0x8
 3460 003a 67050000 		.4byte	.LASF1
 3461 003e 02       		.uleb128 0x2
 3462 003f 02       		.byte	0x2
 3463 0040 05       		.byte	0x5
 3464 0041 38040000 		.4byte	.LASF2
 3465 0045 02       		.uleb128 0x2
 3466 0046 02       		.byte	0x2
 3467 0047 07       		.byte	0x7
 3468 0048 8C060000 		.4byte	.LASF3
 3469 004c 02       		.uleb128 0x2
 3470 004d 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 81


 3471 004e 05       		.byte	0x5
 3472 004f 63040000 		.4byte	.LASF4
 3473 0053 02       		.uleb128 0x2
 3474 0054 04       		.byte	0x4
 3475 0055 07       		.byte	0x7
 3476 0056 1E050000 		.4byte	.LASF5
 3477 005a 02       		.uleb128 0x2
 3478 005b 08       		.byte	0x8
 3479 005c 05       		.byte	0x5
 3480 005d CA020000 		.4byte	.LASF6
 3481 0061 02       		.uleb128 0x2
 3482 0062 08       		.byte	0x8
 3483 0063 07       		.byte	0x7
 3484 0064 2F010000 		.4byte	.LASF7
 3485 0068 04       		.uleb128 0x4
 3486 0069 04       		.byte	0x4
 3487 006a 05       		.byte	0x5
 3488 006b 696E7400 		.ascii	"int\000"
 3489 006f 02       		.uleb128 0x2
 3490 0070 04       		.byte	0x4
 3491 0071 07       		.byte	0x7
 3492 0072 68000000 		.4byte	.LASF8
 3493 0076 03       		.uleb128 0x3
 3494 0077 88020000 		.4byte	.LASF10
 3495 007b 04       		.byte	0x4
 3496 007c 2A       		.byte	0x2a
 3497 007d 2C000000 		.4byte	0x2c
 3498 0081 03       		.uleb128 0x3
 3499 0082 16070000 		.4byte	.LASF11
 3500 0086 05       		.byte	0x5
 3501 0087 A1       		.byte	0xa1
 3502 0088 37000000 		.4byte	0x37
 3503 008c 03       		.uleb128 0x3
 3504 008d 54020000 		.4byte	.LASF12
 3505 0091 05       		.byte	0x5
 3506 0092 A2       		.byte	0xa2
 3507 0093 45000000 		.4byte	0x45
 3508 0097 03       		.uleb128 0x3
 3509 0098 70030000 		.4byte	.LASF13
 3510 009c 05       		.byte	0x5
 3511 009d A3       		.byte	0xa3
 3512 009e 53000000 		.4byte	0x53
 3513 00a2 03       		.uleb128 0x3
 3514 00a3 62020000 		.4byte	.LASF14
 3515 00a7 05       		.byte	0x5
 3516 00a8 A4       		.byte	0xa4
 3517 00a9 25000000 		.4byte	0x25
 3518 00ad 03       		.uleb128 0x3
 3519 00ae 97000000 		.4byte	.LASF15
 3520 00b2 05       		.byte	0x5
 3521 00b3 A5       		.byte	0xa5
 3522 00b4 3E000000 		.4byte	0x3e
 3523 00b8 02       		.uleb128 0x2
 3524 00b9 04       		.byte	0x4
 3525 00ba 04       		.byte	0x4
 3526 00bb 03010000 		.4byte	.LASF16
 3527 00bf 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 82


 3528 00c0 08       		.byte	0x8
 3529 00c1 04       		.byte	0x4
 3530 00c2 1C070000 		.4byte	.LASF17
 3531 00c6 02       		.uleb128 0x2
 3532 00c7 01       		.byte	0x1
 3533 00c8 08       		.byte	0x8
 3534 00c9 40020000 		.4byte	.LASF18
 3535 00cd 05       		.uleb128 0x5
 3536 00ce 81000000 		.4byte	0x81
 3537 00d2 02       		.uleb128 0x2
 3538 00d3 04       		.byte	0x4
 3539 00d4 07       		.byte	0x7
 3540 00d5 15050000 		.4byte	.LASF19
 3541 00d9 06       		.uleb128 0x6
 3542 00da 3D050000 		.4byte	.LASF25
 3543 00de 01       		.byte	0x1
 3544 00df 02       		.byte	0x2
 3545 00e0 C5       		.byte	0xc5
 3546 00e1 04010000 		.4byte	0x104
 3547 00e5 07       		.uleb128 0x7
 3548 00e6 4C030000 		.4byte	.LASF20
 3549 00ea 00       		.sleb128 0
 3550 00eb 07       		.uleb128 0x7
 3551 00ec 2E040000 		.4byte	.LASF21
 3552 00f0 01       		.sleb128 1
 3553 00f1 07       		.uleb128 0x7
 3554 00f2 07050000 		.4byte	.LASF22
 3555 00f6 02       		.sleb128 2
 3556 00f7 07       		.uleb128 0x7
 3557 00f8 83010000 		.4byte	.LASF23
 3558 00fc 03       		.sleb128 3
 3559 00fd 07       		.uleb128 0x7
 3560 00fe 7F030000 		.4byte	.LASF24
 3561 0102 04       		.sleb128 4
 3562 0103 00       		.byte	0
 3563 0104 08       		.uleb128 0x8
 3564 0105 A6040000 		.4byte	.LASF26
 3565 0109 01       		.byte	0x1
 3566 010a 02       		.byte	0x2
 3567 010b 3401     		.2byte	0x134
 3568 010d 2A010000 		.4byte	0x12a
 3569 0111 07       		.uleb128 0x7
 3570 0112 DB000000 		.4byte	.LASF27
 3571 0116 00       		.sleb128 0
 3572 0117 07       		.uleb128 0x7
 3573 0118 0C000000 		.4byte	.LASF28
 3574 011c 01       		.sleb128 1
 3575 011d 07       		.uleb128 0x7
 3576 011e 6C040000 		.4byte	.LASF29
 3577 0122 02       		.sleb128 2
 3578 0123 07       		.uleb128 0x7
 3579 0124 FF060000 		.4byte	.LASF30
 3580 0128 03       		.sleb128 3
 3581 0129 00       		.byte	0
 3582 012a 08       		.uleb128 0x8
 3583 012b 11030000 		.4byte	.LASF31
 3584 012f 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 83


 3585 0130 02       		.byte	0x2
 3586 0131 8501     		.2byte	0x185
 3587 0133 50010000 		.4byte	0x150
 3588 0137 07       		.uleb128 0x7
 3589 0138 B6000000 		.4byte	.LASF32
 3590 013c 00       		.sleb128 0
 3591 013d 07       		.uleb128 0x7
 3592 013e DC050000 		.4byte	.LASF33
 3593 0142 01       		.sleb128 1
 3594 0143 07       		.uleb128 0x7
 3595 0144 1F040000 		.4byte	.LASF34
 3596 0148 02       		.sleb128 2
 3597 0149 07       		.uleb128 0x7
 3598 014a DB040000 		.4byte	.LASF35
 3599 014e 03       		.sleb128 3
 3600 014f 00       		.byte	0
 3601 0150 08       		.uleb128 0x8
 3602 0151 48000000 		.4byte	.LASF36
 3603 0155 01       		.byte	0x1
 3604 0156 02       		.byte	0x2
 3605 0157 D601     		.2byte	0x1d6
 3606 0159 76010000 		.4byte	0x176
 3607 015d 07       		.uleb128 0x7
 3608 015e AE030000 		.4byte	.LASF37
 3609 0162 00       		.sleb128 0
 3610 0163 07       		.uleb128 0x7
 3611 0164 7D070000 		.4byte	.LASF38
 3612 0168 01       		.sleb128 1
 3613 0169 07       		.uleb128 0x7
 3614 016a 30050000 		.4byte	.LASF39
 3615 016e 02       		.sleb128 2
 3616 016f 07       		.uleb128 0x7
 3617 0170 9F060000 		.4byte	.LASF40
 3618 0174 03       		.sleb128 3
 3619 0175 00       		.byte	0
 3620 0176 08       		.uleb128 0x8
 3621 0177 D8020000 		.4byte	.LASF41
 3622 017b 01       		.byte	0x1
 3623 017c 02       		.byte	0x2
 3624 017d 2202     		.2byte	0x222
 3625 017f 9C010000 		.4byte	0x19c
 3626 0183 07       		.uleb128 0x7
 3627 0184 50050000 		.4byte	.LASF42
 3628 0188 00       		.sleb128 0
 3629 0189 07       		.uleb128 0x7
 3630 018a 9F020000 		.4byte	.LASF43
 3631 018e 01       		.sleb128 1
 3632 018f 07       		.uleb128 0x7
 3633 0190 C5050000 		.4byte	.LASF44
 3634 0194 02       		.sleb128 2
 3635 0195 07       		.uleb128 0x7
 3636 0196 FD010000 		.4byte	.LASF45
 3637 019a 03       		.sleb128 3
 3638 019b 00       		.byte	0
 3639 019c 08       		.uleb128 0x8
 3640 019d 84000000 		.4byte	.LASF46
 3641 01a1 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 84


 3642 01a2 02       		.byte	0x2
 3643 01a3 6E02     		.2byte	0x26e
 3644 01a5 C2010000 		.4byte	0x1c2
 3645 01a9 07       		.uleb128 0x7
 3646 01aa AD000000 		.4byte	.LASF47
 3647 01ae 00       		.sleb128 0
 3648 01af 07       		.uleb128 0x7
 3649 01b0 09010000 		.4byte	.LASF48
 3650 01b4 01       		.sleb128 1
 3651 01b5 07       		.uleb128 0x7
 3652 01b6 3D000000 		.4byte	.LASF49
 3653 01ba 02       		.sleb128 2
 3654 01bb 07       		.uleb128 0x7
 3655 01bc 9E040000 		.4byte	.LASF50
 3656 01c0 03       		.sleb128 3
 3657 01c1 00       		.byte	0
 3658 01c2 08       		.uleb128 0x8
 3659 01c3 3C030000 		.4byte	.LASF51
 3660 01c7 01       		.byte	0x1
 3661 01c8 02       		.byte	0x2
 3662 01c9 BE02     		.2byte	0x2be
 3663 01cb E8010000 		.4byte	0x1e8
 3664 01cf 07       		.uleb128 0x7
 3665 01d0 C0010000 		.4byte	.LASF52
 3666 01d4 00       		.sleb128 0
 3667 01d5 07       		.uleb128 0x7
 3668 01d6 BC050000 		.4byte	.LASF53
 3669 01da 01       		.sleb128 1
 3670 01db 07       		.uleb128 0x7
 3671 01dc 6B010000 		.4byte	.LASF54
 3672 01e0 02       		.sleb128 2
 3673 01e1 07       		.uleb128 0x7
 3674 01e2 F2040000 		.4byte	.LASF55
 3675 01e6 03       		.sleb128 3
 3676 01e7 00       		.byte	0
 3677 01e8 08       		.uleb128 0x8
 3678 01e9 E5010000 		.4byte	.LASF56
 3679 01ed 01       		.byte	0x1
 3680 01ee 02       		.byte	0x2
 3681 01ef 0703     		.2byte	0x307
 3682 01f1 14020000 		.4byte	0x214
 3683 01f5 07       		.uleb128 0x7
 3684 01f6 7E020000 		.4byte	.LASF57
 3685 01fa 00       		.sleb128 0
 3686 01fb 07       		.uleb128 0x7
 3687 01fc 2E070000 		.4byte	.LASF58
 3688 0200 01       		.sleb128 1
 3689 0201 07       		.uleb128 0x7
 3690 0202 D3050000 		.4byte	.LASF59
 3691 0206 02       		.sleb128 2
 3692 0207 07       		.uleb128 0x7
 3693 0208 16000000 		.4byte	.LASF60
 3694 020c 03       		.sleb128 3
 3695 020d 07       		.uleb128 0x7
 3696 020e D1000000 		.4byte	.LASF61
 3697 0212 04       		.sleb128 4
 3698 0213 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 85


 3699 0214 09       		.uleb128 0x9
 3700 0215 46010000 		.4byte	.LASF64
 3701 0219 01       		.byte	0x1
 3702 021a 0F       		.byte	0xf
 3703 021b 00000000 		.4byte	.LFB34
 3704 021f 98000000 		.4byte	.LFE34-.LFB34
 3705 0223 01       		.uleb128 0x1
 3706 0224 9C       		.byte	0x9c
 3707 0225 54020000 		.4byte	0x254
 3708 0229 0A       		.uleb128 0xa
 3709 022a 37070000 		.4byte	.LASF62
 3710 022e 01       		.byte	0x1
 3711 022f 0F       		.byte	0xf
 3712 0230 81000000 		.4byte	0x81
 3713 0234 02       		.uleb128 0x2
 3714 0235 91       		.byte	0x91
 3715 0236 67       		.sleb128 -25
 3716 0237 0A       		.uleb128 0xa
 3717 0238 63070000 		.4byte	.LASF63
 3718 023c 01       		.byte	0x1
 3719 023d 0F       		.byte	0xf
 3720 023e 8C000000 		.4byte	0x8c
 3721 0242 02       		.uleb128 0x2
 3722 0243 91       		.byte	0x91
 3723 0244 64       		.sleb128 -28
 3724 0245 0B       		.uleb128 0xb
 3725 0246 DB030000 		.4byte	.LASF67
 3726 024a 01       		.byte	0x1
 3727 024b 11       		.byte	0x11
 3728 024c 54020000 		.4byte	0x254
 3729 0250 02       		.uleb128 0x2
 3730 0251 91       		.byte	0x91
 3731 0252 6C       		.sleb128 -20
 3732 0253 00       		.byte	0
 3733 0254 0C       		.uleb128 0xc
 3734 0255 81000000 		.4byte	0x81
 3735 0259 64020000 		.4byte	0x264
 3736 025d 0D       		.uleb128 0xd
 3737 025e D2000000 		.4byte	0xd2
 3738 0262 08       		.byte	0x8
 3739 0263 00       		.byte	0
 3740 0264 09       		.uleb128 0x9
 3741 0265 54070000 		.4byte	.LASF65
 3742 0269 01       		.byte	0x1
 3743 026a 20       		.byte	0x20
 3744 026b 00000000 		.4byte	.LFB35
 3745 026f 98000000 		.4byte	.LFE35-.LFB35
 3746 0273 01       		.uleb128 0x1
 3747 0274 9C       		.byte	0x9c
 3748 0275 A4020000 		.4byte	0x2a4
 3749 0279 0A       		.uleb128 0xa
 3750 027a 37070000 		.4byte	.LASF62
 3751 027e 01       		.byte	0x1
 3752 027f 20       		.byte	0x20
 3753 0280 81000000 		.4byte	0x81
 3754 0284 02       		.uleb128 0x2
 3755 0285 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 86


 3756 0286 67       		.sleb128 -25
 3757 0287 0A       		.uleb128 0xa
 3758 0288 5B020000 		.4byte	.LASF66
 3759 028c 01       		.byte	0x1
 3760 028d 20       		.byte	0x20
 3761 028e 8C000000 		.4byte	0x8c
 3762 0292 02       		.uleb128 0x2
 3763 0293 91       		.byte	0x91
 3764 0294 64       		.sleb128 -28
 3765 0295 0B       		.uleb128 0xb
 3766 0296 DB030000 		.4byte	.LASF67
 3767 029a 01       		.byte	0x1
 3768 029b 22       		.byte	0x22
 3769 029c 54020000 		.4byte	0x254
 3770 02a0 02       		.uleb128 0x2
 3771 02a1 91       		.byte	0x91
 3772 02a2 6C       		.sleb128 -20
 3773 02a3 00       		.byte	0
 3774 02a4 09       		.uleb128 0x9
 3775 02a5 E7040000 		.4byte	.LASF68
 3776 02a9 01       		.byte	0x1
 3777 02aa 31       		.byte	0x31
 3778 02ab 00000000 		.4byte	.LFB36
 3779 02af 98000000 		.4byte	.LFE36-.LFB36
 3780 02b3 01       		.uleb128 0x1
 3781 02b4 9C       		.byte	0x9c
 3782 02b5 E4020000 		.4byte	0x2e4
 3783 02b9 0A       		.uleb128 0xa
 3784 02ba 37070000 		.4byte	.LASF62
 3785 02be 01       		.byte	0x1
 3786 02bf 31       		.byte	0x31
 3787 02c0 81000000 		.4byte	0x81
 3788 02c4 02       		.uleb128 0x2
 3789 02c5 91       		.byte	0x91
 3790 02c6 67       		.sleb128 -25
 3791 02c7 0A       		.uleb128 0xa
 3792 02c8 C3000000 		.4byte	.LASF69
 3793 02cc 01       		.byte	0x1
 3794 02cd 31       		.byte	0x31
 3795 02ce 8C000000 		.4byte	0x8c
 3796 02d2 02       		.uleb128 0x2
 3797 02d3 91       		.byte	0x91
 3798 02d4 64       		.sleb128 -28
 3799 02d5 0B       		.uleb128 0xb
 3800 02d6 DB030000 		.4byte	.LASF67
 3801 02da 01       		.byte	0x1
 3802 02db 33       		.byte	0x33
 3803 02dc 54020000 		.4byte	0x254
 3804 02e0 02       		.uleb128 0x2
 3805 02e1 91       		.byte	0x91
 3806 02e2 6C       		.sleb128 -20
 3807 02e3 00       		.byte	0
 3808 02e4 09       		.uleb128 0x9
 3809 02e5 79040000 		.4byte	.LASF70
 3810 02e9 02       		.byte	0x2
 3811 02ea 0A       		.byte	0xa
 3812 02eb 00000000 		.4byte	.LFB37
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 87


 3813 02ef 28000000 		.4byte	.LFE37-.LFB37
 3814 02f3 01       		.uleb128 0x1
 3815 02f4 9C       		.byte	0x9c
 3816 02f5 08030000 		.4byte	0x308
 3817 02f9 0B       		.uleb128 0xb
 3818 02fa 3F070000 		.4byte	.LASF71
 3819 02fe 02       		.byte	0x2
 3820 02ff 0C       		.byte	0xc
 3821 0300 97000000 		.4byte	0x97
 3822 0304 02       		.uleb128 0x2
 3823 0305 91       		.byte	0x91
 3824 0306 74       		.sleb128 -12
 3825 0307 00       		.byte	0
 3826 0308 0E       		.uleb128 0xe
 3827 0309 E8020000 		.4byte	.LASF75
 3828 030d 02       		.byte	0x2
 3829 030e 13       		.byte	0x13
 3830 030f 8C000000 		.4byte	0x8c
 3831 0313 00000000 		.4byte	.LFB38
 3832 0317 54010000 		.4byte	.LFE38-.LFB38
 3833 031b 01       		.uleb128 0x1
 3834 031c 9C       		.byte	0x9c
 3835 031d 4C030000 		.4byte	0x34c
 3836 0321 0A       		.uleb128 0xa
 3837 0322 67020000 		.4byte	.LASF72
 3838 0326 02       		.byte	0x2
 3839 0327 13       		.byte	0x13
 3840 0328 8C000000 		.4byte	0x8c
 3841 032c 02       		.uleb128 0x2
 3842 032d 91       		.byte	0x91
 3843 032e 6E       		.sleb128 -18
 3844 032f 0A       		.uleb128 0xa
 3845 0330 45020000 		.4byte	.LASF73
 3846 0334 02       		.byte	0x2
 3847 0335 13       		.byte	0x13
 3848 0336 8C000000 		.4byte	0x8c
 3849 033a 02       		.uleb128 0x2
 3850 033b 91       		.byte	0x91
 3851 033c 6C       		.sleb128 -20
 3852 033d 0B       		.uleb128 0xb
 3853 033e B7040000 		.4byte	.LASF74
 3854 0342 02       		.byte	0x2
 3855 0343 15       		.byte	0x15
 3856 0344 8C000000 		.4byte	0x8c
 3857 0348 02       		.uleb128 0x2
 3858 0349 91       		.byte	0x91
 3859 034a 76       		.sleb128 -10
 3860 034b 00       		.byte	0
 3861 034c 0E       		.uleb128 0xe
 3862 034d 08020000 		.4byte	.LASF76
 3863 0351 02       		.byte	0x2
 3864 0352 4F       		.byte	0x4f
 3865 0353 8C000000 		.4byte	0x8c
 3866 0357 00000000 		.4byte	.LFB39
 3867 035b D0000000 		.4byte	.LFE39-.LFB39
 3868 035f 01       		.uleb128 0x1
 3869 0360 9C       		.byte	0x9c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 88


 3870 0361 90030000 		.4byte	0x390
 3871 0365 0A       		.uleb128 0xa
 3872 0366 67020000 		.4byte	.LASF72
 3873 036a 02       		.byte	0x2
 3874 036b 4F       		.byte	0x4f
 3875 036c 8C000000 		.4byte	0x8c
 3876 0370 02       		.uleb128 0x2
 3877 0371 91       		.byte	0x91
 3878 0372 6E       		.sleb128 -18
 3879 0373 0A       		.uleb128 0xa
 3880 0374 45020000 		.4byte	.LASF73
 3881 0378 02       		.byte	0x2
 3882 0379 4F       		.byte	0x4f
 3883 037a 8C000000 		.4byte	0x8c
 3884 037e 02       		.uleb128 0x2
 3885 037f 91       		.byte	0x91
 3886 0380 6C       		.sleb128 -20
 3887 0381 0B       		.uleb128 0xb
 3888 0382 B7040000 		.4byte	.LASF74
 3889 0386 02       		.byte	0x2
 3890 0387 51       		.byte	0x51
 3891 0388 8C000000 		.4byte	0x8c
 3892 038c 02       		.uleb128 0x2
 3893 038d 91       		.byte	0x91
 3894 038e 76       		.sleb128 -10
 3895 038f 00       		.byte	0
 3896 0390 0E       		.uleb128 0xe
 3897 0391 C3040000 		.4byte	.LASF77
 3898 0395 02       		.byte	0x2
 3899 0396 75       		.byte	0x75
 3900 0397 8C000000 		.4byte	0x8c
 3901 039b 00000000 		.4byte	.LFB40
 3902 039f BC000000 		.4byte	.LFE40-.LFB40
 3903 03a3 01       		.uleb128 0x1
 3904 03a4 9C       		.byte	0x9c
 3905 03a5 D4030000 		.4byte	0x3d4
 3906 03a9 0A       		.uleb128 0xa
 3907 03aa 67020000 		.4byte	.LASF72
 3908 03ae 02       		.byte	0x2
 3909 03af 75       		.byte	0x75
 3910 03b0 8C000000 		.4byte	0x8c
 3911 03b4 02       		.uleb128 0x2
 3912 03b5 91       		.byte	0x91
 3913 03b6 6E       		.sleb128 -18
 3914 03b7 0A       		.uleb128 0xa
 3915 03b8 45020000 		.4byte	.LASF73
 3916 03bc 02       		.byte	0x2
 3917 03bd 75       		.byte	0x75
 3918 03be 8C000000 		.4byte	0x8c
 3919 03c2 02       		.uleb128 0x2
 3920 03c3 91       		.byte	0x91
 3921 03c4 6C       		.sleb128 -20
 3922 03c5 0B       		.uleb128 0xb
 3923 03c6 B7040000 		.4byte	.LASF74
 3924 03ca 02       		.byte	0x2
 3925 03cb 77       		.byte	0x77
 3926 03cc 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 89


 3927 03d0 02       		.uleb128 0x2
 3928 03d1 91       		.byte	0x91
 3929 03d2 76       		.sleb128 -10
 3930 03d3 00       		.byte	0
 3931 03d4 0E       		.uleb128 0xe
 3932 03d5 89030000 		.4byte	.LASF78
 3933 03d9 02       		.byte	0x2
 3934 03da 9B       		.byte	0x9b
 3935 03db 8C000000 		.4byte	0x8c
 3936 03df 00000000 		.4byte	.LFB41
 3937 03e3 84000000 		.4byte	.LFE41-.LFB41
 3938 03e7 01       		.uleb128 0x1
 3939 03e8 9C       		.byte	0x9c
 3940 03e9 50040000 		.4byte	0x450
 3941 03ed 0A       		.uleb128 0xa
 3942 03ee 5C050000 		.4byte	.LASF79
 3943 03f2 02       		.byte	0x2
 3944 03f3 9B       		.byte	0x9b
 3945 03f4 50040000 		.4byte	0x450
 3946 03f8 02       		.uleb128 0x2
 3947 03f9 91       		.byte	0x91
 3948 03fa 6C       		.sleb128 -20
 3949 03fb 0A       		.uleb128 0xa
 3950 03fc 77010000 		.4byte	.LASF80
 3951 0400 02       		.byte	0x2
 3952 0401 9B       		.byte	0x9b
 3953 0402 81000000 		.4byte	0x81
 3954 0406 02       		.uleb128 0x2
 3955 0407 91       		.byte	0x91
 3956 0408 6B       		.sleb128 -21
 3957 0409 0A       		.uleb128 0xa
 3958 040a 7D010000 		.4byte	.LASF81
 3959 040e 02       		.byte	0x2
 3960 040f 9B       		.byte	0x9b
 3961 0410 81000000 		.4byte	0x81
 3962 0414 02       		.uleb128 0x2
 3963 0415 91       		.byte	0x91
 3964 0416 6A       		.sleb128 -22
 3965 0417 0B       		.uleb128 0xb
 3966 0418 6F060000 		.4byte	.LASF82
 3967 041c 02       		.byte	0x2
 3968 041d 9D       		.byte	0x9d
 3969 041e 8C000000 		.4byte	0x8c
 3970 0422 02       		.uleb128 0x2
 3971 0423 91       		.byte	0x91
 3972 0424 70       		.sleb128 -16
 3973 0425 0B       		.uleb128 0xb
 3974 0426 9D010000 		.4byte	.LASF83
 3975 042a 02       		.byte	0x2
 3976 042b 9E       		.byte	0x9e
 3977 042c AD000000 		.4byte	0xad
 3978 0430 02       		.uleb128 0x2
 3979 0431 91       		.byte	0x91
 3980 0432 76       		.sleb128 -10
 3981 0433 0B       		.uleb128 0xb
 3982 0434 A3010000 		.4byte	.LASF84
 3983 0438 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 90


 3984 0439 9F       		.byte	0x9f
 3985 043a AD000000 		.4byte	0xad
 3986 043e 02       		.uleb128 0x2
 3987 043f 91       		.byte	0x91
 3988 0440 74       		.sleb128 -12
 3989 0441 0B       		.uleb128 0xb
 3990 0442 A9010000 		.4byte	.LASF85
 3991 0446 02       		.byte	0x2
 3992 0447 A0       		.byte	0xa0
 3993 0448 AD000000 		.4byte	0xad
 3994 044c 02       		.uleb128 0x2
 3995 044d 91       		.byte	0x91
 3996 044e 72       		.sleb128 -14
 3997 044f 00       		.byte	0
 3998 0450 0F       		.uleb128 0xf
 3999 0451 04       		.byte	0x4
 4000 0452 A2000000 		.4byte	0xa2
 4001 0456 0E       		.uleb128 0xe
 4002 0457 A3050000 		.4byte	.LASF86
 4003 045b 02       		.byte	0x2
 4004 045c A9       		.byte	0xa9
 4005 045d 8C000000 		.4byte	0x8c
 4006 0461 00000000 		.4byte	.LFB42
 4007 0465 78000000 		.4byte	.LFE42-.LFB42
 4008 0469 01       		.uleb128 0x1
 4009 046a 9C       		.byte	0x9c
 4010 046b D2040000 		.4byte	0x4d2
 4011 046f 0A       		.uleb128 0xa
 4012 0470 5C050000 		.4byte	.LASF79
 4013 0474 02       		.byte	0x2
 4014 0475 A9       		.byte	0xa9
 4015 0476 50040000 		.4byte	0x450
 4016 047a 02       		.uleb128 0x2
 4017 047b 91       		.byte	0x91
 4018 047c 6C       		.sleb128 -20
 4019 047d 0A       		.uleb128 0xa
 4020 047e 77010000 		.4byte	.LASF80
 4021 0482 02       		.byte	0x2
 4022 0483 A9       		.byte	0xa9
 4023 0484 81000000 		.4byte	0x81
 4024 0488 02       		.uleb128 0x2
 4025 0489 91       		.byte	0x91
 4026 048a 6B       		.sleb128 -21
 4027 048b 0A       		.uleb128 0xa
 4028 048c 7D010000 		.4byte	.LASF81
 4029 0490 02       		.byte	0x2
 4030 0491 A9       		.byte	0xa9
 4031 0492 81000000 		.4byte	0x81
 4032 0496 02       		.uleb128 0x2
 4033 0497 91       		.byte	0x91
 4034 0498 6A       		.sleb128 -22
 4035 0499 0B       		.uleb128 0xb
 4036 049a 6F060000 		.4byte	.LASF82
 4037 049e 02       		.byte	0x2
 4038 049f AB       		.byte	0xab
 4039 04a0 8C000000 		.4byte	0x8c
 4040 04a4 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 91


 4041 04a5 91       		.byte	0x91
 4042 04a6 70       		.sleb128 -16
 4043 04a7 0B       		.uleb128 0xb
 4044 04a8 9D010000 		.4byte	.LASF83
 4045 04ac 02       		.byte	0x2
 4046 04ad AC       		.byte	0xac
 4047 04ae AD000000 		.4byte	0xad
 4048 04b2 02       		.uleb128 0x2
 4049 04b3 91       		.byte	0x91
 4050 04b4 76       		.sleb128 -10
 4051 04b5 0B       		.uleb128 0xb
 4052 04b6 A3010000 		.4byte	.LASF84
 4053 04ba 02       		.byte	0x2
 4054 04bb AD       		.byte	0xad
 4055 04bc AD000000 		.4byte	0xad
 4056 04c0 02       		.uleb128 0x2
 4057 04c1 91       		.byte	0x91
 4058 04c2 74       		.sleb128 -12
 4059 04c3 0B       		.uleb128 0xb
 4060 04c4 A9010000 		.4byte	.LASF85
 4061 04c8 02       		.byte	0x2
 4062 04c9 AE       		.byte	0xae
 4063 04ca AD000000 		.4byte	0xad
 4064 04ce 02       		.uleb128 0x2
 4065 04cf 91       		.byte	0x91
 4066 04d0 72       		.sleb128 -14
 4067 04d1 00       		.byte	0
 4068 04d2 0E       		.uleb128 0xe
 4069 04d3 29020000 		.4byte	.LASF87
 4070 04d7 02       		.byte	0x2
 4071 04d8 B7       		.byte	0xb7
 4072 04d9 8C000000 		.4byte	0x8c
 4073 04dd 00000000 		.4byte	.LFB43
 4074 04e1 72000000 		.4byte	.LFE43-.LFB43
 4075 04e5 01       		.uleb128 0x1
 4076 04e6 9C       		.byte	0x9c
 4077 04e7 4E050000 		.4byte	0x54e
 4078 04eb 0A       		.uleb128 0xa
 4079 04ec 5C050000 		.4byte	.LASF79
 4080 04f0 02       		.byte	0x2
 4081 04f1 B7       		.byte	0xb7
 4082 04f2 50040000 		.4byte	0x450
 4083 04f6 02       		.uleb128 0x2
 4084 04f7 91       		.byte	0x91
 4085 04f8 6C       		.sleb128 -20
 4086 04f9 0A       		.uleb128 0xa
 4087 04fa 77010000 		.4byte	.LASF80
 4088 04fe 02       		.byte	0x2
 4089 04ff B7       		.byte	0xb7
 4090 0500 81000000 		.4byte	0x81
 4091 0504 02       		.uleb128 0x2
 4092 0505 91       		.byte	0x91
 4093 0506 6B       		.sleb128 -21
 4094 0507 0A       		.uleb128 0xa
 4095 0508 7D010000 		.4byte	.LASF81
 4096 050c 02       		.byte	0x2
 4097 050d B7       		.byte	0xb7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 92


 4098 050e 81000000 		.4byte	0x81
 4099 0512 02       		.uleb128 0x2
 4100 0513 91       		.byte	0x91
 4101 0514 6A       		.sleb128 -22
 4102 0515 0B       		.uleb128 0xb
 4103 0516 6F060000 		.4byte	.LASF82
 4104 051a 02       		.byte	0x2
 4105 051b B9       		.byte	0xb9
 4106 051c 8C000000 		.4byte	0x8c
 4107 0520 02       		.uleb128 0x2
 4108 0521 91       		.byte	0x91
 4109 0522 70       		.sleb128 -16
 4110 0523 0B       		.uleb128 0xb
 4111 0524 9D010000 		.4byte	.LASF83
 4112 0528 02       		.byte	0x2
 4113 0529 BA       		.byte	0xba
 4114 052a AD000000 		.4byte	0xad
 4115 052e 02       		.uleb128 0x2
 4116 052f 91       		.byte	0x91
 4117 0530 76       		.sleb128 -10
 4118 0531 0B       		.uleb128 0xb
 4119 0532 A3010000 		.4byte	.LASF84
 4120 0536 02       		.byte	0x2
 4121 0537 BB       		.byte	0xbb
 4122 0538 AD000000 		.4byte	0xad
 4123 053c 02       		.uleb128 0x2
 4124 053d 91       		.byte	0x91
 4125 053e 74       		.sleb128 -12
 4126 053f 0B       		.uleb128 0xb
 4127 0540 A9010000 		.4byte	.LASF85
 4128 0544 02       		.byte	0x2
 4129 0545 BC       		.byte	0xbc
 4130 0546 AD000000 		.4byte	0xad
 4131 054a 02       		.uleb128 0x2
 4132 054b 91       		.byte	0x91
 4133 054c 72       		.sleb128 -14
 4134 054d 00       		.byte	0
 4135 054e 10       		.uleb128 0x10
 4136 054f F5030000 		.4byte	.LASF88
 4137 0553 02       		.byte	0x2
 4138 0554 C6       		.byte	0xc6
 4139 0555 00000000 		.4byte	.LFB44
 4140 0559 8C010000 		.4byte	.LFE44-.LFB44
 4141 055d 01       		.uleb128 0x1
 4142 055e 9C       		.byte	0x9c
 4143 055f 11       		.uleb128 0x11
 4144 0560 87050000 		.4byte	.LASF89
 4145 0564 02       		.byte	0x2
 4146 0565 2F01     		.2byte	0x12f
 4147 0567 00000000 		.4byte	.LFB45
 4148 056b 18000000 		.4byte	.LFE45-.LFB45
 4149 056f 01       		.uleb128 0x1
 4150 0570 9C       		.byte	0x9c
 4151 0571 12       		.uleb128 0x12
 4152 0572 96030000 		.4byte	.LASF92
 4153 0576 02       		.byte	0x2
 4154 0577 3601     		.2byte	0x136
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 93


 4155 0579 00000000 		.4byte	.LFB46
 4156 057d 44010000 		.4byte	.LFE46-.LFB46
 4157 0581 01       		.uleb128 0x1
 4158 0582 9C       		.byte	0x9c
 4159 0583 A6050000 		.4byte	0x5a6
 4160 0587 13       		.uleb128 0x13
 4161 0588 75000000 		.4byte	.LASF90
 4162 058c 02       		.byte	0x2
 4163 058d 3801     		.2byte	0x138
 4164 058f 8C000000 		.4byte	0x8c
 4165 0593 02       		.uleb128 0x2
 4166 0594 91       		.byte	0x91
 4167 0595 6E       		.sleb128 -18
 4168 0596 13       		.uleb128 0x13
 4169 0597 09070000 		.4byte	.LASF91
 4170 059b 02       		.byte	0x2
 4171 059c 3901     		.2byte	0x139
 4172 059e 8C000000 		.4byte	0x8c
 4173 05a2 02       		.uleb128 0x2
 4174 05a3 91       		.byte	0x91
 4175 05a4 6C       		.sleb128 -20
 4176 05a5 00       		.byte	0
 4177 05a6 12       		.uleb128 0x12
 4178 05a7 97050000 		.4byte	.LASF93
 4179 05ab 02       		.byte	0x2
 4180 05ac 8701     		.2byte	0x187
 4181 05ae 00000000 		.4byte	.LFB47
 4182 05b2 38010000 		.4byte	.LFE47-.LFB47
 4183 05b6 01       		.uleb128 0x1
 4184 05b7 9C       		.byte	0x9c
 4185 05b8 DB050000 		.4byte	0x5db
 4186 05bc 13       		.uleb128 0x13
 4187 05bd 75000000 		.4byte	.LASF90
 4188 05c1 02       		.byte	0x2
 4189 05c2 8901     		.2byte	0x189
 4190 05c4 8C000000 		.4byte	0x8c
 4191 05c8 02       		.uleb128 0x2
 4192 05c9 91       		.byte	0x91
 4193 05ca 6E       		.sleb128 -18
 4194 05cb 13       		.uleb128 0x13
 4195 05cc 09070000 		.4byte	.LASF91
 4196 05d0 02       		.byte	0x2
 4197 05d1 8A01     		.2byte	0x18a
 4198 05d3 8C000000 		.4byte	0x8c
 4199 05d7 02       		.uleb128 0x2
 4200 05d8 91       		.byte	0x91
 4201 05d9 6C       		.sleb128 -20
 4202 05da 00       		.byte	0
 4203 05db 12       		.uleb128 0x12
 4204 05dc BA010000 		.4byte	.LASF94
 4205 05e0 02       		.byte	0x2
 4206 05e1 D701     		.2byte	0x1d7
 4207 05e3 00000000 		.4byte	.LFB48
 4208 05e7 08010000 		.4byte	.LFE48-.LFB48
 4209 05eb 01       		.uleb128 0x1
 4210 05ec 9C       		.byte	0x9c
 4211 05ed 01060000 		.4byte	0x601
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 94


 4212 05f1 13       		.uleb128 0x13
 4213 05f2 6F060000 		.4byte	.LASF82
 4214 05f6 02       		.byte	0x2
 4215 05f7 D901     		.2byte	0x1d9
 4216 05f9 8C000000 		.4byte	0x8c
 4217 05fd 02       		.uleb128 0x2
 4218 05fe 91       		.byte	0x91
 4219 05ff 6E       		.sleb128 -18
 4220 0600 00       		.byte	0
 4221 0601 12       		.uleb128 0x12
 4222 0602 62010000 		.4byte	.LASF95
 4223 0606 02       		.byte	0x2
 4224 0607 2302     		.2byte	0x223
 4225 0609 00000000 		.4byte	.LFB49
 4226 060d 08010000 		.4byte	.LFE49-.LFB49
 4227 0611 01       		.uleb128 0x1
 4228 0612 9C       		.byte	0x9c
 4229 0613 27060000 		.4byte	0x627
 4230 0617 13       		.uleb128 0x13
 4231 0618 6F060000 		.4byte	.LASF82
 4232 061c 02       		.byte	0x2
 4233 061d 2502     		.2byte	0x225
 4234 061f 8C000000 		.4byte	0x8c
 4235 0623 02       		.uleb128 0x2
 4236 0624 91       		.byte	0x91
 4237 0625 6E       		.sleb128 -18
 4238 0626 00       		.byte	0
 4239 0627 12       		.uleb128 0x12
 4240 0628 00000000 		.4byte	.LASF96
 4241 062c 02       		.byte	0x2
 4242 062d 6F02     		.2byte	0x26f
 4243 062f 00000000 		.4byte	.LFB50
 4244 0633 44010000 		.4byte	.LFE50-.LFB50
 4245 0637 01       		.uleb128 0x1
 4246 0638 9C       		.byte	0x9c
 4247 0639 5C060000 		.4byte	0x65c
 4248 063d 13       		.uleb128 0x13
 4249 063e 75000000 		.4byte	.LASF90
 4250 0642 02       		.byte	0x2
 4251 0643 7102     		.2byte	0x271
 4252 0645 8C000000 		.4byte	0x8c
 4253 0649 02       		.uleb128 0x2
 4254 064a 91       		.byte	0x91
 4255 064b 6E       		.sleb128 -18
 4256 064c 13       		.uleb128 0x13
 4257 064d 09070000 		.4byte	.LASF91
 4258 0651 02       		.byte	0x2
 4259 0652 7202     		.2byte	0x272
 4260 0654 8C000000 		.4byte	0x8c
 4261 0658 02       		.uleb128 0x2
 4262 0659 91       		.byte	0x91
 4263 065a 6C       		.sleb128 -20
 4264 065b 00       		.byte	0
 4265 065c 12       		.uleb128 0x12
 4266 065d 5F000000 		.4byte	.LASF97
 4267 0661 02       		.byte	0x2
 4268 0662 BF02     		.2byte	0x2bf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 95


 4269 0664 00000000 		.4byte	.LFB51
 4270 0668 FC000000 		.4byte	.LFE51-.LFB51
 4271 066c 01       		.uleb128 0x1
 4272 066d 9C       		.byte	0x9c
 4273 066e 82060000 		.4byte	0x682
 4274 0672 13       		.uleb128 0x13
 4275 0673 6F060000 		.4byte	.LASF82
 4276 0677 02       		.byte	0x2
 4277 0678 C102     		.2byte	0x2c1
 4278 067a 8C000000 		.4byte	0x8c
 4279 067e 02       		.uleb128 0x2
 4280 067f 91       		.byte	0x91
 4281 0680 6E       		.sleb128 -18
 4282 0681 00       		.byte	0
 4283 0682 12       		.uleb128 0x12
 4284 0683 C9000000 		.4byte	.LASF98
 4285 0687 02       		.byte	0x2
 4286 0688 0803     		.2byte	0x308
 4287 068a 00000000 		.4byte	.LFB52
 4288 068e 14010000 		.4byte	.LFE52-.LFB52
 4289 0692 01       		.uleb128 0x1
 4290 0693 9C       		.byte	0x9c
 4291 0694 EC060000 		.4byte	0x6ec
 4292 0698 13       		.uleb128 0x13
 4293 0699 55000000 		.4byte	.LASF99
 4294 069d 02       		.byte	0x2
 4295 069e 0A03     		.2byte	0x30a
 4296 06a0 81000000 		.4byte	0x81
 4297 06a4 02       		.uleb128 0x2
 4298 06a5 91       		.byte	0x91
 4299 06a6 72       		.sleb128 -14
 4300 06a7 13       		.uleb128 0x13
 4301 06a8 E1030000 		.4byte	.LASF100
 4302 06ac 02       		.byte	0x2
 4303 06ad 0B03     		.2byte	0x30b
 4304 06af 81000000 		.4byte	0x81
 4305 06b3 02       		.uleb128 0x2
 4306 06b4 91       		.byte	0x91
 4307 06b5 71       		.sleb128 -15
 4308 06b6 13       		.uleb128 0x13
 4309 06b7 02030000 		.4byte	.LASF101
 4310 06bb 02       		.byte	0x2
 4311 06bc 0C03     		.2byte	0x30c
 4312 06be 81000000 		.4byte	0x81
 4313 06c2 02       		.uleb128 0x2
 4314 06c3 91       		.byte	0x91
 4315 06c4 70       		.sleb128 -16
 4316 06c5 13       		.uleb128 0x13
 4317 06c6 10040000 		.4byte	.LASF102
 4318 06ca 02       		.byte	0x2
 4319 06cb 0D03     		.2byte	0x30d
 4320 06cd 81000000 		.4byte	0x81
 4321 06d1 02       		.uleb128 0x2
 4322 06d2 91       		.byte	0x91
 4323 06d3 73       		.sleb128 -13
 4324 06d4 14       		.uleb128 0x14
 4325 06d5 44000000 		.4byte	.LBB2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 96


 4326 06d9 26000000 		.4byte	.LBE2-.LBB2
 4327 06dd 15       		.uleb128 0x15
 4328 06de 6900     		.ascii	"i\000"
 4329 06e0 02       		.byte	0x2
 4330 06e1 2003     		.2byte	0x320
 4331 06e3 68000000 		.4byte	0x68
 4332 06e7 02       		.uleb128 0x2
 4333 06e8 91       		.byte	0x91
 4334 06e9 74       		.sleb128 -12
 4335 06ea 00       		.byte	0
 4336 06eb 00       		.byte	0
 4337 06ec 12       		.uleb128 0x12
 4338 06ed AF010000 		.4byte	.LASF103
 4339 06f1 02       		.byte	0x2
 4340 06f2 6303     		.2byte	0x363
 4341 06f4 00000000 		.4byte	.LFB53
 4342 06f8 14010000 		.4byte	.LFE53-.LFB53
 4343 06fc 01       		.uleb128 0x1
 4344 06fd 9C       		.byte	0x9c
 4345 06fe 1A070000 		.4byte	0x71a
 4346 0702 14       		.uleb128 0x14
 4347 0703 1E000000 		.4byte	.LBB3
 4348 0707 2C000000 		.4byte	.LBE3-.LBB3
 4349 070b 15       		.uleb128 0x15
 4350 070c 6A00     		.ascii	"j\000"
 4351 070e 02       		.byte	0x2
 4352 070f 6A03     		.2byte	0x36a
 4353 0711 81000000 		.4byte	0x81
 4354 0715 02       		.uleb128 0x2
 4355 0716 91       		.byte	0x91
 4356 0717 77       		.sleb128 -9
 4357 0718 00       		.byte	0
 4358 0719 00       		.byte	0
 4359 071a 16       		.uleb128 0x16
 4360 071b A9060000 		.4byte	.LASF104
 4361 071f 02       		.byte	0x2
 4362 0720 9E03     		.2byte	0x39e
 4363 0722 68000000 		.4byte	0x68
 4364 0726 00000000 		.4byte	.LFB54
 4365 072a 00010000 		.4byte	.LFE54-.LFB54
 4366 072e 01       		.uleb128 0x1
 4367 072f 9C       		.byte	0x9c
 4368 0730 6A070000 		.4byte	0x76a
 4369 0734 13       		.uleb128 0x13
 4370 0735 F4010000 		.4byte	.LASF105
 4371 0739 02       		.byte	0x2
 4372 073a A103     		.2byte	0x3a1
 4373 073c 81000000 		.4byte	0x81
 4374 0740 02       		.uleb128 0x2
 4375 0741 91       		.byte	0x91
 4376 0742 77       		.sleb128 -9
 4377 0743 13       		.uleb128 0x13
 4378 0744 77060000 		.4byte	.LASF106
 4379 0748 02       		.byte	0x2
 4380 0749 A203     		.2byte	0x3a2
 4381 074b AD000000 		.4byte	0xad
 4382 074f 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 97


 4383 0750 91       		.byte	0x91
 4384 0751 6E       		.sleb128 -18
 4385 0752 14       		.uleb128 0x14
 4386 0753 7A000000 		.4byte	.LBB4
 4387 0757 34000000 		.4byte	.LBE4-.LBB4
 4388 075b 15       		.uleb128 0x15
 4389 075c 6900     		.ascii	"i\000"
 4390 075e 02       		.byte	0x2
 4391 075f C003     		.2byte	0x3c0
 4392 0761 68000000 		.4byte	0x68
 4393 0765 02       		.uleb128 0x2
 4394 0766 91       		.byte	0x91
 4395 0767 70       		.sleb128 -16
 4396 0768 00       		.byte	0
 4397 0769 00       		.byte	0
 4398 076a 17       		.uleb128 0x17
 4399 076b FA020000 		.4byte	.LASF107
 4400 076f 06       		.byte	0x6
 4401 0770 28       		.byte	0x28
 4402 0771 8C000000 		.4byte	0x8c
 4403 0775 05       		.uleb128 0x5
 4404 0776 03       		.byte	0x3
 4405 0777 00000000 		.4byte	NEUTRAL
 4406 077b 0C       		.uleb128 0xc
 4407 077c A2000000 		.4byte	0xa2
 4408 0780 8B070000 		.4byte	0x78b
 4409 0784 0D       		.uleb128 0xd
 4410 0785 D2000000 		.4byte	0xd2
 4411 0789 15       		.byte	0x15
 4412 078a 00       		.byte	0
 4413 078b 17       		.uleb128 0x17
 4414 078c 16020000 		.4byte	.LASF108
 4415 0790 06       		.byte	0x6
 4416 0791 2C       		.byte	0x2c
 4417 0792 7B070000 		.4byte	0x77b
 4418 0796 05       		.uleb128 0x5
 4419 0797 03       		.byte	0x3
 4420 0798 00000000 		.4byte	data_array
 4421 079c 0C       		.uleb128 0xc
 4422 079d 76000000 		.4byte	0x76
 4423 07a1 AC070000 		.4byte	0x7ac
 4424 07a5 0D       		.uleb128 0xd
 4425 07a6 D2000000 		.4byte	0xd2
 4426 07aa 0D       		.byte	0xd
 4427 07ab 00       		.byte	0
 4428 07ac 17       		.uleb128 0x17
 4429 07ad AA020000 		.4byte	.LASF109
 4430 07b1 06       		.byte	0x6
 4431 07b2 2F       		.byte	0x2f
 4432 07b3 9C070000 		.4byte	0x79c
 4433 07b7 05       		.uleb128 0x5
 4434 07b8 03       		.byte	0x3
 4435 07b9 00000000 		.4byte	feedback_array
 4436 07bd 17       		.uleb128 0x17
 4437 07be 11010000 		.4byte	.LASF110
 4438 07c2 06       		.byte	0x6
 4439 07c3 30       		.byte	0x30
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 98


 4440 07c4 9C070000 		.4byte	0x79c
 4441 07c8 05       		.uleb128 0x5
 4442 07c9 03       		.byte	0x3
 4443 07ca 00000000 		.4byte	heartbeat_array
 4444 07ce 17       		.uleb128 0x17
 4445 07cf 01040000 		.4byte	.LASF111
 4446 07d3 06       		.byte	0x6
 4447 07d4 31       		.byte	0x31
 4448 07d5 81000000 		.4byte	0x81
 4449 07d9 05       		.uleb128 0x5
 4450 07da 03       		.byte	0x3
 4451 07db 00000000 		.4byte	HEARTBEAT_FLAG
 4452 07df 17       		.uleb128 0x17
 4453 07e0 D4010000 		.4byte	.LASF112
 4454 07e4 06       		.byte	0x6
 4455 07e5 3A       		.byte	0x3a
 4456 07e6 81000000 		.4byte	0x81
 4457 07ea 05       		.uleb128 0x5
 4458 07eb 03       		.byte	0x3
 4459 07ec 00000000 		.4byte	WT_feedback_flag
 4460 07f0 17       		.uleb128 0x17
 4461 07f1 B9020000 		.4byte	.LASF113
 4462 07f5 06       		.byte	0x6
 4463 07f6 3B       		.byte	0x3b
 4464 07f7 81000000 		.4byte	0x81
 4465 07fb 05       		.uleb128 0x5
 4466 07fc 03       		.byte	0x3
 4467 07fd 00000000 		.4byte	WR_feedback_flag
 4468 0801 17       		.uleb128 0x17
 4469 0802 FB040000 		.4byte	.LASF114
 4470 0806 06       		.byte	0x6
 4471 0807 3C       		.byte	0x3c
 4472 0808 8C000000 		.4byte	0x8c
 4473 080c 05       		.uleb128 0x5
 4474 080d 03       		.byte	0x3
 4475 080e 00000000 		.4byte	WR_feedback
 4476 0812 17       		.uleb128 0x17
 4477 0813 77030000 		.4byte	.LASF115
 4478 0817 06       		.byte	0x6
 4479 0818 3D       		.byte	0x3d
 4480 0819 81000000 		.4byte	0x81
 4481 081d 05       		.uleb128 0x5
 4482 081e 03       		.byte	0x3
 4483 081f 00000000 		.4byte	WT_FLAG
 4484 0823 17       		.uleb128 0x17
 4485 0824 21020000 		.4byte	.LASF116
 4486 0828 06       		.byte	0x6
 4487 0829 3E       		.byte	0x3e
 4488 082a 81000000 		.4byte	0x81
 4489 082e 05       		.uleb128 0x5
 4490 082f 03       		.byte	0x3
 4491 0830 00000000 		.4byte	WR_FLAG
 4492 0834 17       		.uleb128 0x17
 4493 0835 23070000 		.4byte	.LASF117
 4494 0839 06       		.byte	0x6
 4495 083a 3F       		.byte	0x3f
 4496 083b 81000000 		.4byte	0x81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 99


 4497 083f 05       		.uleb128 0x5
 4498 0840 03       		.byte	0x3
 4499 0841 00000000 		.4byte	ELBOW_FLAG
 4500 0845 17       		.uleb128 0x17
 4501 0846 A0030000 		.4byte	.LASF118
 4502 084a 06       		.byte	0x6
 4503 084b 40       		.byte	0x40
 4504 084c 81000000 		.4byte	0x81
 4505 0850 05       		.uleb128 0x5
 4506 0851 03       		.byte	0x3
 4507 0852 00000000 		.4byte	SHOULDER_FLAG
 4508 0856 17       		.uleb128 0x17
 4509 0857 6C070000 		.4byte	.LASF119
 4510 085b 06       		.byte	0x6
 4511 085c 41       		.byte	0x41
 4512 085d 81000000 		.4byte	0x81
 4513 0861 05       		.uleb128 0x5
 4514 0862 03       		.byte	0x3
 4515 0863 00000000 		.4byte	BA_FLAG
 4516 0867 17       		.uleb128 0x17
 4517 0868 24030000 		.4byte	.LASF120
 4518 086c 06       		.byte	0x6
 4519 086d 42       		.byte	0x42
 4520 086e 81000000 		.4byte	0x81
 4521 0872 05       		.uleb128 0x5
 4522 0873 03       		.byte	0x3
 4523 0874 00000000 		.4byte	EFFECTOR_FLAG
 4524 0878 17       		.uleb128 0x17
 4525 0879 83040000 		.4byte	.LASF121
 4526 087d 06       		.byte	0x6
 4527 087e 43       		.byte	0x43
 4528 087f 81000000 		.4byte	0x81
 4529 0883 05       		.uleb128 0x5
 4530 0884 03       		.byte	0x3
 4531 0885 00000000 		.4byte	ARD_FLAG
 4532 0889 17       		.uleb128 0x17
 4533 088a E7030000 		.4byte	.LASF122
 4534 088e 06       		.byte	0x6
 4535 088f 46       		.byte	0x46
 4536 0890 81000000 		.4byte	0x81
 4537 0894 05       		.uleb128 0x5
 4538 0895 03       		.byte	0x3
 4539 0896 00000000 		.4byte	Time_Out_flag
 4540 089a 17       		.uleb128 0x17
 4541 089b 73020000 		.4byte	.LASF123
 4542 089f 06       		.byte	0x6
 4543 08a0 47       		.byte	0x47
 4544 08a1 81000000 		.4byte	0x81
 4545 08a5 05       		.uleb128 0x5
 4546 08a6 03       		.byte	0x3
 4547 08a7 00000000 		.4byte	Time_count
 4548 08ab 17       		.uleb128 0x17
 4549 08ac 9D000000 		.4byte	.LASF124
 4550 08b0 06       		.byte	0x6
 4551 08b1 4A       		.byte	0x4a
 4552 08b2 8C000000 		.4byte	0x8c
 4553 08b6 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 100


 4554 08b7 03       		.byte	0x3
 4555 08b8 00000000 		.4byte	dropped_packets
 4556 08bc 17       		.uleb128 0x17
 4557 08bd E6000000 		.4byte	.LASF125
 4558 08c1 06       		.byte	0x6
 4559 08c2 4B       		.byte	0x4b
 4560 08c3 8C000000 		.4byte	0x8c
 4561 08c7 05       		.uleb128 0x5
 4562 08c8 03       		.byte	0x3
 4563 08c9 00000000 		.4byte	fail_safe_errors
 4564 08cd 17       		.uleb128 0x17
 4565 08ce 47070000 		.4byte	.LASF126
 4566 08d2 06       		.byte	0x6
 4567 08d3 4C       		.byte	0x4c
 4568 08d4 8C000000 		.4byte	0x8c
 4569 08d8 05       		.uleb128 0x5
 4570 08d9 03       		.byte	0x3
 4571 08da 00000000 		.4byte	shldr_errors
 4572 08de 17       		.uleb128 0x17
 4573 08df 1F000000 		.4byte	.LASF127
 4574 08e3 06       		.byte	0x6
 4575 08e4 4D       		.byte	0x4d
 4576 08e5 8C000000 		.4byte	0x8c
 4577 08e9 05       		.uleb128 0x5
 4578 08ea 03       		.byte	0x3
 4579 08eb 00000000 		.4byte	elbw_errors
 4580 08ef 17       		.uleb128 0x17
 4581 08f0 CA010000 		.4byte	.LASF128
 4582 08f4 06       		.byte	0x6
 4583 08f5 4E       		.byte	0x4e
 4584 08f6 8C000000 		.4byte	0x8c
 4585 08fa 05       		.uleb128 0x5
 4586 08fb 03       		.byte	0x3
 4587 08fc 00000000 		.4byte	BA_errors
 4588 0900 17       		.uleb128 0x17
 4589 0901 66030000 		.4byte	.LASF129
 4590 0905 06       		.byte	0x6
 4591 0906 4F       		.byte	0x4f
 4592 0907 8C000000 		.4byte	0x8c
 4593 090b 05       		.uleb128 0x5
 4594 090c 03       		.byte	0x3
 4595 090d 00000000 		.4byte	WT_errors
 4596 0911 17       		.uleb128 0x17
 4597 0912 32030000 		.4byte	.LASF130
 4598 0916 06       		.byte	0x6
 4599 0917 50       		.byte	0x50
 4600 0918 8C000000 		.4byte	0x8c
 4601 091c 05       		.uleb128 0x5
 4602 091d 03       		.byte	0x3
 4603 091e 00000000 		.4byte	WR_errors
 4604 0922 17       		.uleb128 0x17
 4605 0923 92010000 		.4byte	.LASF131
 4606 0927 06       		.byte	0x6
 4607 0928 51       		.byte	0x51
 4608 0929 8C000000 		.4byte	0x8c
 4609 092d 05       		.uleb128 0x5
 4610 092e 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 101


 4611 092f 00000000 		.4byte	eff_errors
 4612 0933 17       		.uleb128 0x17
 4613 0934 58010000 		.4byte	.LASF132
 4614 0938 06       		.byte	0x6
 4615 0939 53       		.byte	0x53
 4616 093a CD000000 		.4byte	0xcd
 4617 093e 05       		.uleb128 0x5
 4618 093f 03       		.byte	0x3
 4619 0940 00000000 		.4byte	timerFlag
 4620 0944 17       		.uleb128 0x17
 4621 0945 54040000 		.4byte	.LASF133
 4622 0949 06       		.byte	0x6
 4623 094a 5B       		.byte	0x5b
 4624 094b 8C000000 		.4byte	0x8c
 4625 094f 05       		.uleb128 0x5
 4626 0950 03       		.byte	0x3
 4627 0951 00000000 		.4byte	latest_command
 4628 0955 17       		.uleb128 0x17
 4629 0956 2B000000 		.4byte	.LASF134
 4630 095a 06       		.byte	0x6
 4631 095b 5F       		.byte	0x5f
 4632 095c 8C000000 		.4byte	0x8c
 4633 0960 05       		.uleb128 0x5
 4634 0961 03       		.byte	0x3
 4635 0962 00000000 		.4byte	latest_WR_command
 4636 0966 17       		.uleb128 0x17
 4637 0967 B9030000 		.4byte	.LASF135
 4638 096b 06       		.byte	0x6
 4639 096c 60       		.byte	0x60
 4640 096d 8C000000 		.4byte	0x8c
 4641 0971 05       		.uleb128 0x5
 4642 0972 03       		.byte	0x3
 4643 0973 00000000 		.4byte	latest_WT_command
 4644 0977 17       		.uleb128 0x17
 4645 0978 75050000 		.4byte	.LASF136
 4646 097c 02       		.byte	0x2
 4647 097d C5       		.byte	0xc5
 4648 097e D9000000 		.4byte	0xd9
 4649 0982 05       		.uleb128 0x5
 4650 0983 03       		.byte	0x3
 4651 0984 00000000 		.4byte	send_packet_state
 4652 0988 18       		.uleb128 0x18
 4653 0989 CB030000 		.4byte	.LASF137
 4654 098d 02       		.byte	0x2
 4655 098e 3401     		.2byte	0x134
 4656 0990 04010000 		.4byte	0x104
 4657 0994 05       		.uleb128 0x5
 4658 0995 03       		.byte	0x3
 4659 0996 00000000 		.4byte	wristTilt_state
 4660 099a 18       		.uleb128 0x18
 4661 099b 8C040000 		.4byte	.LASF138
 4662 099f 02       		.byte	0x2
 4663 09a0 8501     		.2byte	0x185
 4664 09a2 2A010000 		.4byte	0x12a
 4665 09a6 05       		.uleb128 0x5
 4666 09a7 03       		.byte	0x3
 4667 09a8 00000000 		.4byte	wristRotate_state
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 102


 4668 09ac 18       		.uleb128 0x18
 4669 09ad F7000000 		.4byte	.LASF139
 4670 09b1 02       		.byte	0x2
 4671 09b2 D601     		.2byte	0x1d6
 4672 09b4 50010000 		.4byte	0x150
 4673 09b8 05       		.uleb128 0x5
 4674 09b9 03       		.byte	0x3
 4675 09ba 00000000 		.4byte	elbow_state
 4676 09be 18       		.uleb128 0x18
 4677 09bf 90020000 		.4byte	.LASF140
 4678 09c3 02       		.byte	0x2
 4679 09c4 2202     		.2byte	0x222
 4680 09c6 76010000 		.4byte	0x176
 4681 09ca 05       		.uleb128 0x5
 4682 09cb 03       		.byte	0x3
 4683 09cc 00000000 		.4byte	shoulder_state
 4684 09d0 18       		.uleb128 0x18
 4685 09d1 42040000 		.4byte	.LASF141
 4686 09d5 02       		.byte	0x2
 4687 09d6 6E02     		.2byte	0x26e
 4688 09d8 9C010000 		.4byte	0x19c
 4689 09dc 05       		.uleb128 0x5
 4690 09dd 03       		.byte	0x3
 4691 09de 00000000 		.4byte	baseAzimuth_state
 4692 09e2 18       		.uleb128 0x18
 4693 09e3 57030000 		.4byte	.LASF142
 4694 09e7 02       		.byte	0x2
 4695 09e8 BE02     		.2byte	0x2be
 4696 09ea C2010000 		.4byte	0x1c2
 4697 09ee 05       		.uleb128 0x5
 4698 09ef 03       		.byte	0x3
 4699 09f0 00000000 		.4byte	effector_state
 4700 09f4 18       		.uleb128 0x18
 4701 09f5 21010000 		.4byte	.LASF143
 4702 09f9 02       		.byte	0x2
 4703 09fa 0703     		.2byte	0x307
 4704 09fc E8010000 		.4byte	0x1e8
 4705 0a00 05       		.uleb128 0x5
 4706 0a01 03       		.byte	0x3
 4707 0a02 00000000 		.4byte	arduino_state
 4708 0a06 00       		.byte	0
 4709              		.section	.debug_abbrev,"",%progbits
 4710              	.Ldebug_abbrev0:
 4711 0000 01       		.uleb128 0x1
 4712 0001 11       		.uleb128 0x11
 4713 0002 01       		.byte	0x1
 4714 0003 25       		.uleb128 0x25
 4715 0004 0E       		.uleb128 0xe
 4716 0005 13       		.uleb128 0x13
 4717 0006 0B       		.uleb128 0xb
 4718 0007 03       		.uleb128 0x3
 4719 0008 0E       		.uleb128 0xe
 4720 0009 1B       		.uleb128 0x1b
 4721 000a 0E       		.uleb128 0xe
 4722 000b 55       		.uleb128 0x55
 4723 000c 17       		.uleb128 0x17
 4724 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 103


 4725 000e 01       		.uleb128 0x1
 4726 000f 10       		.uleb128 0x10
 4727 0010 17       		.uleb128 0x17
 4728 0011 00       		.byte	0
 4729 0012 00       		.byte	0
 4730 0013 02       		.uleb128 0x2
 4731 0014 24       		.uleb128 0x24
 4732 0015 00       		.byte	0
 4733 0016 0B       		.uleb128 0xb
 4734 0017 0B       		.uleb128 0xb
 4735 0018 3E       		.uleb128 0x3e
 4736 0019 0B       		.uleb128 0xb
 4737 001a 03       		.uleb128 0x3
 4738 001b 0E       		.uleb128 0xe
 4739 001c 00       		.byte	0
 4740 001d 00       		.byte	0
 4741 001e 03       		.uleb128 0x3
 4742 001f 16       		.uleb128 0x16
 4743 0020 00       		.byte	0
 4744 0021 03       		.uleb128 0x3
 4745 0022 0E       		.uleb128 0xe
 4746 0023 3A       		.uleb128 0x3a
 4747 0024 0B       		.uleb128 0xb
 4748 0025 3B       		.uleb128 0x3b
 4749 0026 0B       		.uleb128 0xb
 4750 0027 49       		.uleb128 0x49
 4751 0028 13       		.uleb128 0x13
 4752 0029 00       		.byte	0
 4753 002a 00       		.byte	0
 4754 002b 04       		.uleb128 0x4
 4755 002c 24       		.uleb128 0x24
 4756 002d 00       		.byte	0
 4757 002e 0B       		.uleb128 0xb
 4758 002f 0B       		.uleb128 0xb
 4759 0030 3E       		.uleb128 0x3e
 4760 0031 0B       		.uleb128 0xb
 4761 0032 03       		.uleb128 0x3
 4762 0033 08       		.uleb128 0x8
 4763 0034 00       		.byte	0
 4764 0035 00       		.byte	0
 4765 0036 05       		.uleb128 0x5
 4766 0037 35       		.uleb128 0x35
 4767 0038 00       		.byte	0
 4768 0039 49       		.uleb128 0x49
 4769 003a 13       		.uleb128 0x13
 4770 003b 00       		.byte	0
 4771 003c 00       		.byte	0
 4772 003d 06       		.uleb128 0x6
 4773 003e 04       		.uleb128 0x4
 4774 003f 01       		.byte	0x1
 4775 0040 03       		.uleb128 0x3
 4776 0041 0E       		.uleb128 0xe
 4777 0042 0B       		.uleb128 0xb
 4778 0043 0B       		.uleb128 0xb
 4779 0044 3A       		.uleb128 0x3a
 4780 0045 0B       		.uleb128 0xb
 4781 0046 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 104


 4782 0047 0B       		.uleb128 0xb
 4783 0048 01       		.uleb128 0x1
 4784 0049 13       		.uleb128 0x13
 4785 004a 00       		.byte	0
 4786 004b 00       		.byte	0
 4787 004c 07       		.uleb128 0x7
 4788 004d 28       		.uleb128 0x28
 4789 004e 00       		.byte	0
 4790 004f 03       		.uleb128 0x3
 4791 0050 0E       		.uleb128 0xe
 4792 0051 1C       		.uleb128 0x1c
 4793 0052 0D       		.uleb128 0xd
 4794 0053 00       		.byte	0
 4795 0054 00       		.byte	0
 4796 0055 08       		.uleb128 0x8
 4797 0056 04       		.uleb128 0x4
 4798 0057 01       		.byte	0x1
 4799 0058 03       		.uleb128 0x3
 4800 0059 0E       		.uleb128 0xe
 4801 005a 0B       		.uleb128 0xb
 4802 005b 0B       		.uleb128 0xb
 4803 005c 3A       		.uleb128 0x3a
 4804 005d 0B       		.uleb128 0xb
 4805 005e 3B       		.uleb128 0x3b
 4806 005f 05       		.uleb128 0x5
 4807 0060 01       		.uleb128 0x1
 4808 0061 13       		.uleb128 0x13
 4809 0062 00       		.byte	0
 4810 0063 00       		.byte	0
 4811 0064 09       		.uleb128 0x9
 4812 0065 2E       		.uleb128 0x2e
 4813 0066 01       		.byte	0x1
 4814 0067 3F       		.uleb128 0x3f
 4815 0068 19       		.uleb128 0x19
 4816 0069 03       		.uleb128 0x3
 4817 006a 0E       		.uleb128 0xe
 4818 006b 3A       		.uleb128 0x3a
 4819 006c 0B       		.uleb128 0xb
 4820 006d 3B       		.uleb128 0x3b
 4821 006e 0B       		.uleb128 0xb
 4822 006f 27       		.uleb128 0x27
 4823 0070 19       		.uleb128 0x19
 4824 0071 11       		.uleb128 0x11
 4825 0072 01       		.uleb128 0x1
 4826 0073 12       		.uleb128 0x12
 4827 0074 06       		.uleb128 0x6
 4828 0075 40       		.uleb128 0x40
 4829 0076 18       		.uleb128 0x18
 4830 0077 9642     		.uleb128 0x2116
 4831 0079 19       		.uleb128 0x19
 4832 007a 01       		.uleb128 0x1
 4833 007b 13       		.uleb128 0x13
 4834 007c 00       		.byte	0
 4835 007d 00       		.byte	0
 4836 007e 0A       		.uleb128 0xa
 4837 007f 05       		.uleb128 0x5
 4838 0080 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 105


 4839 0081 03       		.uleb128 0x3
 4840 0082 0E       		.uleb128 0xe
 4841 0083 3A       		.uleb128 0x3a
 4842 0084 0B       		.uleb128 0xb
 4843 0085 3B       		.uleb128 0x3b
 4844 0086 0B       		.uleb128 0xb
 4845 0087 49       		.uleb128 0x49
 4846 0088 13       		.uleb128 0x13
 4847 0089 02       		.uleb128 0x2
 4848 008a 18       		.uleb128 0x18
 4849 008b 00       		.byte	0
 4850 008c 00       		.byte	0
 4851 008d 0B       		.uleb128 0xb
 4852 008e 34       		.uleb128 0x34
 4853 008f 00       		.byte	0
 4854 0090 03       		.uleb128 0x3
 4855 0091 0E       		.uleb128 0xe
 4856 0092 3A       		.uleb128 0x3a
 4857 0093 0B       		.uleb128 0xb
 4858 0094 3B       		.uleb128 0x3b
 4859 0095 0B       		.uleb128 0xb
 4860 0096 49       		.uleb128 0x49
 4861 0097 13       		.uleb128 0x13
 4862 0098 02       		.uleb128 0x2
 4863 0099 18       		.uleb128 0x18
 4864 009a 00       		.byte	0
 4865 009b 00       		.byte	0
 4866 009c 0C       		.uleb128 0xc
 4867 009d 01       		.uleb128 0x1
 4868 009e 01       		.byte	0x1
 4869 009f 49       		.uleb128 0x49
 4870 00a0 13       		.uleb128 0x13
 4871 00a1 01       		.uleb128 0x1
 4872 00a2 13       		.uleb128 0x13
 4873 00a3 00       		.byte	0
 4874 00a4 00       		.byte	0
 4875 00a5 0D       		.uleb128 0xd
 4876 00a6 21       		.uleb128 0x21
 4877 00a7 00       		.byte	0
 4878 00a8 49       		.uleb128 0x49
 4879 00a9 13       		.uleb128 0x13
 4880 00aa 2F       		.uleb128 0x2f
 4881 00ab 0B       		.uleb128 0xb
 4882 00ac 00       		.byte	0
 4883 00ad 00       		.byte	0
 4884 00ae 0E       		.uleb128 0xe
 4885 00af 2E       		.uleb128 0x2e
 4886 00b0 01       		.byte	0x1
 4887 00b1 3F       		.uleb128 0x3f
 4888 00b2 19       		.uleb128 0x19
 4889 00b3 03       		.uleb128 0x3
 4890 00b4 0E       		.uleb128 0xe
 4891 00b5 3A       		.uleb128 0x3a
 4892 00b6 0B       		.uleb128 0xb
 4893 00b7 3B       		.uleb128 0x3b
 4894 00b8 0B       		.uleb128 0xb
 4895 00b9 27       		.uleb128 0x27
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 106


 4896 00ba 19       		.uleb128 0x19
 4897 00bb 49       		.uleb128 0x49
 4898 00bc 13       		.uleb128 0x13
 4899 00bd 11       		.uleb128 0x11
 4900 00be 01       		.uleb128 0x1
 4901 00bf 12       		.uleb128 0x12
 4902 00c0 06       		.uleb128 0x6
 4903 00c1 40       		.uleb128 0x40
 4904 00c2 18       		.uleb128 0x18
 4905 00c3 9742     		.uleb128 0x2117
 4906 00c5 19       		.uleb128 0x19
 4907 00c6 01       		.uleb128 0x1
 4908 00c7 13       		.uleb128 0x13
 4909 00c8 00       		.byte	0
 4910 00c9 00       		.byte	0
 4911 00ca 0F       		.uleb128 0xf
 4912 00cb 0F       		.uleb128 0xf
 4913 00cc 00       		.byte	0
 4914 00cd 0B       		.uleb128 0xb
 4915 00ce 0B       		.uleb128 0xb
 4916 00cf 49       		.uleb128 0x49
 4917 00d0 13       		.uleb128 0x13
 4918 00d1 00       		.byte	0
 4919 00d2 00       		.byte	0
 4920 00d3 10       		.uleb128 0x10
 4921 00d4 2E       		.uleb128 0x2e
 4922 00d5 00       		.byte	0
 4923 00d6 3F       		.uleb128 0x3f
 4924 00d7 19       		.uleb128 0x19
 4925 00d8 03       		.uleb128 0x3
 4926 00d9 0E       		.uleb128 0xe
 4927 00da 3A       		.uleb128 0x3a
 4928 00db 0B       		.uleb128 0xb
 4929 00dc 3B       		.uleb128 0x3b
 4930 00dd 0B       		.uleb128 0xb
 4931 00de 11       		.uleb128 0x11
 4932 00df 01       		.uleb128 0x1
 4933 00e0 12       		.uleb128 0x12
 4934 00e1 06       		.uleb128 0x6
 4935 00e2 40       		.uleb128 0x40
 4936 00e3 18       		.uleb128 0x18
 4937 00e4 9642     		.uleb128 0x2116
 4938 00e6 19       		.uleb128 0x19
 4939 00e7 00       		.byte	0
 4940 00e8 00       		.byte	0
 4941 00e9 11       		.uleb128 0x11
 4942 00ea 2E       		.uleb128 0x2e
 4943 00eb 00       		.byte	0
 4944 00ec 3F       		.uleb128 0x3f
 4945 00ed 19       		.uleb128 0x19
 4946 00ee 03       		.uleb128 0x3
 4947 00ef 0E       		.uleb128 0xe
 4948 00f0 3A       		.uleb128 0x3a
 4949 00f1 0B       		.uleb128 0xb
 4950 00f2 3B       		.uleb128 0x3b
 4951 00f3 05       		.uleb128 0x5
 4952 00f4 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 107


 4953 00f5 01       		.uleb128 0x1
 4954 00f6 12       		.uleb128 0x12
 4955 00f7 06       		.uleb128 0x6
 4956 00f8 40       		.uleb128 0x40
 4957 00f9 18       		.uleb128 0x18
 4958 00fa 9642     		.uleb128 0x2116
 4959 00fc 19       		.uleb128 0x19
 4960 00fd 00       		.byte	0
 4961 00fe 00       		.byte	0
 4962 00ff 12       		.uleb128 0x12
 4963 0100 2E       		.uleb128 0x2e
 4964 0101 01       		.byte	0x1
 4965 0102 3F       		.uleb128 0x3f
 4966 0103 19       		.uleb128 0x19
 4967 0104 03       		.uleb128 0x3
 4968 0105 0E       		.uleb128 0xe
 4969 0106 3A       		.uleb128 0x3a
 4970 0107 0B       		.uleb128 0xb
 4971 0108 3B       		.uleb128 0x3b
 4972 0109 05       		.uleb128 0x5
 4973 010a 11       		.uleb128 0x11
 4974 010b 01       		.uleb128 0x1
 4975 010c 12       		.uleb128 0x12
 4976 010d 06       		.uleb128 0x6
 4977 010e 40       		.uleb128 0x40
 4978 010f 18       		.uleb128 0x18
 4979 0110 9642     		.uleb128 0x2116
 4980 0112 19       		.uleb128 0x19
 4981 0113 01       		.uleb128 0x1
 4982 0114 13       		.uleb128 0x13
 4983 0115 00       		.byte	0
 4984 0116 00       		.byte	0
 4985 0117 13       		.uleb128 0x13
 4986 0118 34       		.uleb128 0x34
 4987 0119 00       		.byte	0
 4988 011a 03       		.uleb128 0x3
 4989 011b 0E       		.uleb128 0xe
 4990 011c 3A       		.uleb128 0x3a
 4991 011d 0B       		.uleb128 0xb
 4992 011e 3B       		.uleb128 0x3b
 4993 011f 05       		.uleb128 0x5
 4994 0120 49       		.uleb128 0x49
 4995 0121 13       		.uleb128 0x13
 4996 0122 02       		.uleb128 0x2
 4997 0123 18       		.uleb128 0x18
 4998 0124 00       		.byte	0
 4999 0125 00       		.byte	0
 5000 0126 14       		.uleb128 0x14
 5001 0127 0B       		.uleb128 0xb
 5002 0128 01       		.byte	0x1
 5003 0129 11       		.uleb128 0x11
 5004 012a 01       		.uleb128 0x1
 5005 012b 12       		.uleb128 0x12
 5006 012c 06       		.uleb128 0x6
 5007 012d 00       		.byte	0
 5008 012e 00       		.byte	0
 5009 012f 15       		.uleb128 0x15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 108


 5010 0130 34       		.uleb128 0x34
 5011 0131 00       		.byte	0
 5012 0132 03       		.uleb128 0x3
 5013 0133 08       		.uleb128 0x8
 5014 0134 3A       		.uleb128 0x3a
 5015 0135 0B       		.uleb128 0xb
 5016 0136 3B       		.uleb128 0x3b
 5017 0137 05       		.uleb128 0x5
 5018 0138 49       		.uleb128 0x49
 5019 0139 13       		.uleb128 0x13
 5020 013a 02       		.uleb128 0x2
 5021 013b 18       		.uleb128 0x18
 5022 013c 00       		.byte	0
 5023 013d 00       		.byte	0
 5024 013e 16       		.uleb128 0x16
 5025 013f 2E       		.uleb128 0x2e
 5026 0140 01       		.byte	0x1
 5027 0141 3F       		.uleb128 0x3f
 5028 0142 19       		.uleb128 0x19
 5029 0143 03       		.uleb128 0x3
 5030 0144 0E       		.uleb128 0xe
 5031 0145 3A       		.uleb128 0x3a
 5032 0146 0B       		.uleb128 0xb
 5033 0147 3B       		.uleb128 0x3b
 5034 0148 05       		.uleb128 0x5
 5035 0149 49       		.uleb128 0x49
 5036 014a 13       		.uleb128 0x13
 5037 014b 11       		.uleb128 0x11
 5038 014c 01       		.uleb128 0x1
 5039 014d 12       		.uleb128 0x12
 5040 014e 06       		.uleb128 0x6
 5041 014f 40       		.uleb128 0x40
 5042 0150 18       		.uleb128 0x18
 5043 0151 9642     		.uleb128 0x2116
 5044 0153 19       		.uleb128 0x19
 5045 0154 01       		.uleb128 0x1
 5046 0155 13       		.uleb128 0x13
 5047 0156 00       		.byte	0
 5048 0157 00       		.byte	0
 5049 0158 17       		.uleb128 0x17
 5050 0159 34       		.uleb128 0x34
 5051 015a 00       		.byte	0
 5052 015b 03       		.uleb128 0x3
 5053 015c 0E       		.uleb128 0xe
 5054 015d 3A       		.uleb128 0x3a
 5055 015e 0B       		.uleb128 0xb
 5056 015f 3B       		.uleb128 0x3b
 5057 0160 0B       		.uleb128 0xb
 5058 0161 49       		.uleb128 0x49
 5059 0162 13       		.uleb128 0x13
 5060 0163 3F       		.uleb128 0x3f
 5061 0164 19       		.uleb128 0x19
 5062 0165 02       		.uleb128 0x2
 5063 0166 18       		.uleb128 0x18
 5064 0167 00       		.byte	0
 5065 0168 00       		.byte	0
 5066 0169 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 109


 5067 016a 34       		.uleb128 0x34
 5068 016b 00       		.byte	0
 5069 016c 03       		.uleb128 0x3
 5070 016d 0E       		.uleb128 0xe
 5071 016e 3A       		.uleb128 0x3a
 5072 016f 0B       		.uleb128 0xb
 5073 0170 3B       		.uleb128 0x3b
 5074 0171 05       		.uleb128 0x5
 5075 0172 49       		.uleb128 0x49
 5076 0173 13       		.uleb128 0x13
 5077 0174 3F       		.uleb128 0x3f
 5078 0175 19       		.uleb128 0x19
 5079 0176 02       		.uleb128 0x2
 5080 0177 18       		.uleb128 0x18
 5081 0178 00       		.byte	0
 5082 0179 00       		.byte	0
 5083 017a 00       		.byte	0
 5084              		.section	.debug_aranges,"",%progbits
 5085 0000 BC000000 		.4byte	0xbc
 5086 0004 0200     		.2byte	0x2
 5087 0006 00000000 		.4byte	.Ldebug_info0
 5088 000a 04       		.byte	0x4
 5089 000b 00       		.byte	0
 5090 000c 0000     		.2byte	0
 5091 000e 0000     		.2byte	0
 5092 0010 00000000 		.4byte	.LFB34
 5093 0014 98000000 		.4byte	.LFE34-.LFB34
 5094 0018 00000000 		.4byte	.LFB35
 5095 001c 98000000 		.4byte	.LFE35-.LFB35
 5096 0020 00000000 		.4byte	.LFB36
 5097 0024 98000000 		.4byte	.LFE36-.LFB36
 5098 0028 00000000 		.4byte	.LFB37
 5099 002c 28000000 		.4byte	.LFE37-.LFB37
 5100 0030 00000000 		.4byte	.LFB38
 5101 0034 54010000 		.4byte	.LFE38-.LFB38
 5102 0038 00000000 		.4byte	.LFB39
 5103 003c D0000000 		.4byte	.LFE39-.LFB39
 5104 0040 00000000 		.4byte	.LFB40
 5105 0044 BC000000 		.4byte	.LFE40-.LFB40
 5106 0048 00000000 		.4byte	.LFB41
 5107 004c 84000000 		.4byte	.LFE41-.LFB41
 5108 0050 00000000 		.4byte	.LFB42
 5109 0054 78000000 		.4byte	.LFE42-.LFB42
 5110 0058 00000000 		.4byte	.LFB43
 5111 005c 72000000 		.4byte	.LFE43-.LFB43
 5112 0060 00000000 		.4byte	.LFB44
 5113 0064 8C010000 		.4byte	.LFE44-.LFB44
 5114 0068 00000000 		.4byte	.LFB45
 5115 006c 18000000 		.4byte	.LFE45-.LFB45
 5116 0070 00000000 		.4byte	.LFB46
 5117 0074 44010000 		.4byte	.LFE46-.LFB46
 5118 0078 00000000 		.4byte	.LFB47
 5119 007c 38010000 		.4byte	.LFE47-.LFB47
 5120 0080 00000000 		.4byte	.LFB48
 5121 0084 08010000 		.4byte	.LFE48-.LFB48
 5122 0088 00000000 		.4byte	.LFB49
 5123 008c 08010000 		.4byte	.LFE49-.LFB49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 110


 5124 0090 00000000 		.4byte	.LFB50
 5125 0094 44010000 		.4byte	.LFE50-.LFB50
 5126 0098 00000000 		.4byte	.LFB51
 5127 009c FC000000 		.4byte	.LFE51-.LFB51
 5128 00a0 00000000 		.4byte	.LFB52
 5129 00a4 14010000 		.4byte	.LFE52-.LFB52
 5130 00a8 00000000 		.4byte	.LFB53
 5131 00ac 14010000 		.4byte	.LFE53-.LFB53
 5132 00b0 00000000 		.4byte	.LFB54
 5133 00b4 00010000 		.4byte	.LFE54-.LFB54
 5134 00b8 00000000 		.4byte	0
 5135 00bc 00000000 		.4byte	0
 5136              		.section	.debug_ranges,"",%progbits
 5137              	.Ldebug_ranges0:
 5138 0000 00000000 		.4byte	.LFB34
 5139 0004 98000000 		.4byte	.LFE34
 5140 0008 00000000 		.4byte	.LFB35
 5141 000c 98000000 		.4byte	.LFE35
 5142 0010 00000000 		.4byte	.LFB36
 5143 0014 98000000 		.4byte	.LFE36
 5144 0018 00000000 		.4byte	.LFB37
 5145 001c 28000000 		.4byte	.LFE37
 5146 0020 00000000 		.4byte	.LFB38
 5147 0024 54010000 		.4byte	.LFE38
 5148 0028 00000000 		.4byte	.LFB39
 5149 002c D0000000 		.4byte	.LFE39
 5150 0030 00000000 		.4byte	.LFB40
 5151 0034 BC000000 		.4byte	.LFE40
 5152 0038 00000000 		.4byte	.LFB41
 5153 003c 84000000 		.4byte	.LFE41
 5154 0040 00000000 		.4byte	.LFB42
 5155 0044 78000000 		.4byte	.LFE42
 5156 0048 00000000 		.4byte	.LFB43
 5157 004c 72000000 		.4byte	.LFE43
 5158 0050 00000000 		.4byte	.LFB44
 5159 0054 8C010000 		.4byte	.LFE44
 5160 0058 00000000 		.4byte	.LFB45
 5161 005c 18000000 		.4byte	.LFE45
 5162 0060 00000000 		.4byte	.LFB46
 5163 0064 44010000 		.4byte	.LFE46
 5164 0068 00000000 		.4byte	.LFB47
 5165 006c 38010000 		.4byte	.LFE47
 5166 0070 00000000 		.4byte	.LFB48
 5167 0074 08010000 		.4byte	.LFE48
 5168 0078 00000000 		.4byte	.LFB49
 5169 007c 08010000 		.4byte	.LFE49
 5170 0080 00000000 		.4byte	.LFB50
 5171 0084 44010000 		.4byte	.LFE50
 5172 0088 00000000 		.4byte	.LFB51
 5173 008c FC000000 		.4byte	.LFE51
 5174 0090 00000000 		.4byte	.LFB52
 5175 0094 14010000 		.4byte	.LFE52
 5176 0098 00000000 		.4byte	.LFB53
 5177 009c 14010000 		.4byte	.LFE53
 5178 00a0 00000000 		.4byte	.LFB54
 5179 00a4 00010000 		.4byte	.LFE54
 5180 00a8 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 111


 5181 00ac 00000000 		.4byte	0
 5182              		.section	.debug_line,"",%progbits
 5183              	.Ldebug_line0:
 5184 0000 9F050000 		.section	.debug_str,"MS",%progbits,1
 5184      02006001 
 5184      00000201 
 5184      FB0E0D00 
 5184      01010101 
 5185              	.LASF96:
 5186 0000 62617365 		.ascii	"baseAzimuth\000"
 5186      417A696D 
 5186      75746800 
 5187              	.LASF28:
 5188 000c 74696C74 		.ascii	"tilt_init\000"
 5188      5F696E69 
 5188      7400
 5189              	.LASF60:
 5190 0016 6172645F 		.ascii	"ard_read\000"
 5190      72656164 
 5190      00
 5191              	.LASF127:
 5192 001f 656C6277 		.ascii	"elbw_errors\000"
 5192      5F657272 
 5192      6F727300 
 5193              	.LASF134:
 5194 002b 6C617465 		.ascii	"latest_WR_command\000"
 5194      73745F57 
 5194      525F636F 
 5194      6D6D616E 
 5194      6400
 5195              	.LASF49:
 5196 003d 42415F65 		.ascii	"BA_execute\000"
 5196      78656375 
 5196      746500
 5197              	.LASF36:
 5198 0048 656C626F 		.ascii	"elbow_states\000"
 5198      775F7374 
 5198      61746573 
 5198      00
 5199              	.LASF99:
 5200 0055 76696465 		.ascii	"video_mux\000"
 5200      6F5F6D75 
 5200      7800
 5201              	.LASF97:
 5202 005f 65666665 		.ascii	"effector\000"
 5202      63746F72 
 5202      00
 5203              	.LASF8:
 5204 0068 756E7369 		.ascii	"unsigned int\000"
 5204      676E6564 
 5204      20696E74 
 5204      00
 5205              	.LASF90:
 5206 0075 6E657765 		.ascii	"newest_command\000"
 5206      73745F63 
 5206      6F6D6D61 
 5206      6E6400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 112


 5207              	.LASF46:
 5208 0084 62617365 		.ascii	"baseAzimuth_states\000"
 5208      417A696D 
 5208      7574685F 
 5208      73746174 
 5208      657300
 5209              	.LASF15:
 5210 0097 696E7431 		.ascii	"int16\000"
 5210      3600
 5211              	.LASF124:
 5212 009d 64726F70 		.ascii	"dropped_packets\000"
 5212      7065645F 
 5212      7061636B 
 5212      65747300 
 5213              	.LASF47:
 5214 00ad 42415F73 		.ascii	"BA_start\000"
 5214      74617274 
 5214      00
 5215              	.LASF32:
 5216 00b6 726F7461 		.ascii	"rotate_start\000"
 5216      74655F73 
 5216      74617274 
 5216      00
 5217              	.LASF69:
 5218 00c3 73706565 		.ascii	"speed\000"
 5218      6400
 5219              	.LASF98:
 5220 00c9 61726475 		.ascii	"arduino\000"
 5220      696E6F00 
 5221              	.LASF61:
 5222 00d1 6172645F 		.ascii	"ard_write\000"
 5222      77726974 
 5222      6500
 5223              	.LASF27:
 5224 00db 74696C74 		.ascii	"tilt_start\000"
 5224      5F737461 
 5224      727400
 5225              	.LASF125:
 5226 00e6 6661696C 		.ascii	"fail_safe_errors\000"
 5226      5F736166 
 5226      655F6572 
 5226      726F7273 
 5226      00
 5227              	.LASF139:
 5228 00f7 656C626F 		.ascii	"elbow_state\000"
 5228      775F7374 
 5228      61746500 
 5229              	.LASF16:
 5230 0103 666C6F61 		.ascii	"float\000"
 5230      7400
 5231              	.LASF48:
 5232 0109 42415F69 		.ascii	"BA_init\000"
 5232      6E697400 
 5233              	.LASF110:
 5234 0111 68656172 		.ascii	"heartbeat_array\000"
 5234      74626561 
 5234      745F6172 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 113


 5234      72617900 
 5235              	.LASF143:
 5236 0121 61726475 		.ascii	"arduino_state\000"
 5236      696E6F5F 
 5236      73746174 
 5236      6500
 5237              	.LASF7:
 5238 012f 6C6F6E67 		.ascii	"long long unsigned int\000"
 5238      206C6F6E 
 5238      6720756E 
 5238      7369676E 
 5238      65642069 
 5239              	.LASF64:
 5240 0146 53657276 		.ascii	"ServoGoalPosition\000"
 5240      6F476F61 
 5240      6C506F73 
 5240      6974696F 
 5240      6E00
 5241              	.LASF132:
 5242 0158 74696D65 		.ascii	"timerFlag\000"
 5242      72466C61 
 5242      6700
 5243              	.LASF95:
 5244 0162 73686F75 		.ascii	"shoulder\000"
 5244      6C646572 
 5244      00
 5245              	.LASF54:
 5246 016b 6566665F 		.ascii	"eff_execute\000"
 5246      65786563 
 5246      75746500 
 5247              	.LASF80:
 5248 0177 62797465 		.ascii	"byte1\000"
 5248      3100
 5249              	.LASF81:
 5250 017d 62797465 		.ascii	"byte2\000"
 5250      3200
 5251              	.LASF23:
 5252 0183 73656E64 		.ascii	"send_heartbeat\000"
 5252      5F686561 
 5252      72746265 
 5252      617400
 5253              	.LASF131:
 5254 0192 6566665F 		.ascii	"eff_errors\000"
 5254      6572726F 
 5254      727300
 5255              	.LASF83:
 5256 019d 74656D70 		.ascii	"temp1\000"
 5256      3100
 5257              	.LASF84:
 5258 01a3 74656D70 		.ascii	"temp2\000"
 5258      3200
 5259              	.LASF85:
 5260 01a9 74656D70 		.ascii	"temp3\000"
 5260      3300
 5261              	.LASF103:
 5262 01af 696E6974 		.ascii	"initialize\000"
 5262      69616C69 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 114


 5262      7A6500
 5263              	.LASF94:
 5264 01ba 656C626F 		.ascii	"elbow\000"
 5264      7700
 5265              	.LASF52:
 5266 01c0 6566665F 		.ascii	"eff_start\000"
 5266      73746172 
 5266      7400
 5267              	.LASF128:
 5268 01ca 42415F65 		.ascii	"BA_errors\000"
 5268      72726F72 
 5268      7300
 5269              	.LASF112:
 5270 01d4 57545F66 		.ascii	"WT_feedback_flag\000"
 5270      65656462 
 5270      61636B5F 
 5270      666C6167 
 5270      00
 5271              	.LASF56:
 5272 01e5 61726475 		.ascii	"arduino_states\000"
 5272      696E6F5F 
 5272      73746174 
 5272      657300
 5273              	.LASF105:
 5274 01f4 66735F63 		.ascii	"fs_count\000"
 5274      6F756E74 
 5274      00
 5275              	.LASF45:
 5276 01fd 73686C64 		.ascii	"shldr_wait\000"
 5276      725F7761 
 5276      697400
 5277              	.LASF76:
 5278 0208 57545F70 		.ascii	"WT_pos_to_vel\000"
 5278      6F735F74 
 5278      6F5F7665 
 5278      6C00
 5279              	.LASF108:
 5280 0216 64617461 		.ascii	"data_array\000"
 5280      5F617272 
 5280      617900
 5281              	.LASF116:
 5282 0221 57525F46 		.ascii	"WR_FLAG\000"
 5282      4C414700 
 5283              	.LASF87:
 5284 0229 6D616B65 		.ascii	"make_wristTilt_command\000"
 5284      5F777269 
 5284      73745469 
 5284      6C745F63 
 5284      6F6D6D61 
 5285              	.LASF18:
 5286 0240 63686172 		.ascii	"char\000"
 5286      00
 5287              	.LASF73:
 5288 0245 72656365 		.ascii	"recent_command\000"
 5288      6E745F63 
 5288      6F6D6D61 
 5288      6E6400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 115


 5289              	.LASF12:
 5290 0254 75696E74 		.ascii	"uint16\000"
 5290      313600
 5291              	.LASF66:
 5292 025b 746F7271 		.ascii	"torque\000"
 5292      756500
 5293              	.LASF14:
 5294 0262 696E7438 		.ascii	"int8\000"
 5294      00
 5295              	.LASF72:
 5296 0267 6E65775F 		.ascii	"new_command\000"
 5296      636F6D6D 
 5296      616E6400 
 5297              	.LASF123:
 5298 0273 54696D65 		.ascii	"Time_count\000"
 5298      5F636F75 
 5298      6E7400
 5299              	.LASF57:
 5300 027e 6172645F 		.ascii	"ard_start\000"
 5300      73746172 
 5300      7400
 5301              	.LASF10:
 5302 0288 75696E74 		.ascii	"uint8_t\000"
 5302      385F7400 
 5303              	.LASF140:
 5304 0290 73686F75 		.ascii	"shoulder_state\000"
 5304      6C646572 
 5304      5F737461 
 5304      746500
 5305              	.LASF43:
 5306 029f 73686C64 		.ascii	"shldr_init\000"
 5306      725F696E 
 5306      697400
 5307              	.LASF109:
 5308 02aa 66656564 		.ascii	"feedback_array\000"
 5308      6261636B 
 5308      5F617272 
 5308      617900
 5309              	.LASF113:
 5310 02b9 57525F66 		.ascii	"WR_feedback_flag\000"
 5310      65656462 
 5310      61636B5F 
 5310      666C6167 
 5310      00
 5311              	.LASF6:
 5312 02ca 6C6F6E67 		.ascii	"long long int\000"
 5312      206C6F6E 
 5312      6720696E 
 5312      7400
 5313              	.LASF41:
 5314 02d8 73686F75 		.ascii	"shoulder_states\000"
 5314      6C646572 
 5314      5F737461 
 5314      74657300 
 5315              	.LASF75:
 5316 02e8 73696D70 		.ascii	"simple_pos_to_vel\000"
 5316      6C655F70 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 116


 5316      6F735F74 
 5316      6F5F7665 
 5316      6C00
 5317              	.LASF107:
 5318 02fa 4E455554 		.ascii	"NEUTRAL\000"
 5318      52414C00 
 5319              	.LASF101:
 5320 0302 7061636B 		.ascii	"pack_for_rover\000"
 5320      5F666F72 
 5320      5F726F76 
 5320      657200
 5321              	.LASF31:
 5322 0311 77726973 		.ascii	"wristRotate_states\000"
 5322      74526F74 
 5322      6174655F 
 5322      73746174 
 5322      657300
 5323              	.LASF120:
 5324 0324 45464645 		.ascii	"EFFECTOR_FLAG\000"
 5324      43544F52 
 5324      5F464C41 
 5324      4700
 5325              	.LASF130:
 5326 0332 57525F65 		.ascii	"WR_errors\000"
 5326      72726F72 
 5326      7300
 5327              	.LASF51:
 5328 033c 65666665 		.ascii	"effector_states\000"
 5328      63746F72 
 5328      5F737461 
 5328      74657300 
 5329              	.LASF20:
 5330 034c 73656E64 		.ascii	"send_start\000"
 5330      5F737461 
 5330      727400
 5331              	.LASF142:
 5332 0357 65666665 		.ascii	"effector_state\000"
 5332      63746F72 
 5332      5F737461 
 5332      746500
 5333              	.LASF129:
 5334 0366 57545F65 		.ascii	"WT_errors\000"
 5334      72726F72 
 5334      7300
 5335              	.LASF13:
 5336 0370 75696E74 		.ascii	"uint32\000"
 5336      333200
 5337              	.LASF115:
 5338 0377 57545F46 		.ascii	"WT_FLAG\000"
 5338      4C414700 
 5339              	.LASF24:
 5340 037f 73656E64 		.ascii	"send_wait\000"
 5340      5F776169 
 5340      7400
 5341              	.LASF78:
 5342 0389 6D616B65 		.ascii	"make_command\000"
 5342      5F636F6D 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 117


 5342      6D616E64 
 5342      00
 5343              	.LASF92:
 5344 0396 77726973 		.ascii	"wristTilt\000"
 5344      7454696C 
 5344      7400
 5345              	.LASF118:
 5346 03a0 53484F55 		.ascii	"SHOULDER_FLAG\000"
 5346      4C444552 
 5346      5F464C41 
 5346      4700
 5347              	.LASF37:
 5348 03ae 656C6277 		.ascii	"elbw_start\000"
 5348      5F737461 
 5348      727400
 5349              	.LASF135:
 5350 03b9 6C617465 		.ascii	"latest_WT_command\000"
 5350      73745F57 
 5350      545F636F 
 5350      6D6D616E 
 5350      6400
 5351              	.LASF137:
 5352 03cb 77726973 		.ascii	"wristTilt_state\000"
 5352      7454696C 
 5352      745F7374 
 5352      61746500 
 5353              	.LASF67:
 5354 03db 61727261 		.ascii	"array\000"
 5354      7900
 5355              	.LASF100:
 5356 03e1 6C617365 		.ascii	"laser\000"
 5356      7200
 5357              	.LASF122:
 5358 03e7 54696D65 		.ascii	"Time_Out_flag\000"
 5358      5F4F7574 
 5358      5F666C61 
 5358      6700
 5359              	.LASF88:
 5360 03f5 73656E64 		.ascii	"send_packet\000"
 5360      5F706163 
 5360      6B657400 
 5361              	.LASF111:
 5362 0401 48454152 		.ascii	"HEARTBEAT_FLAG\000"
 5362      54424541 
 5362      545F464C 
 5362      414700
 5363              	.LASF102:
 5364 0410 4152445F 		.ascii	"ARD_ARRAY_SIZE\000"
 5364      41525241 
 5364      595F5349 
 5364      5A4500
 5365              	.LASF34:
 5366 041f 726F7461 		.ascii	"rotate_control\000"
 5366      74655F63 
 5366      6F6E7472 
 5366      6F6C00
 5367              	.LASF21:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 118


 5368 042e 73656E64 		.ascii	"send_init\000"
 5368      5F696E69 
 5368      7400
 5369              	.LASF2:
 5370 0438 73686F72 		.ascii	"short int\000"
 5370      7420696E 
 5370      7400
 5371              	.LASF141:
 5372 0442 62617365 		.ascii	"baseAzimuth_state\000"
 5372      417A696D 
 5372      7574685F 
 5372      73746174 
 5372      6500
 5373              	.LASF133:
 5374 0454 6C617465 		.ascii	"latest_command\000"
 5374      73745F63 
 5374      6F6D6D61 
 5374      6E6400
 5375              	.LASF4:
 5376 0463 6C6F6E67 		.ascii	"long int\000"
 5376      20696E74 
 5376      00
 5377              	.LASF29:
 5378 046c 74696C74 		.ascii	"tilt_control\000"
 5378      5F636F6E 
 5378      74726F6C 
 5378      00
 5379              	.LASF70:
 5380 0479 74696D65 		.ascii	"timer_isr\000"
 5380      725F6973 
 5380      7200
 5381              	.LASF121:
 5382 0483 4152445F 		.ascii	"ARD_FLAG\000"
 5382      464C4147 
 5382      00
 5383              	.LASF138:
 5384 048c 77726973 		.ascii	"wristRotate_state\000"
 5384      74526F74 
 5384      6174655F 
 5384      73746174 
 5384      6500
 5385              	.LASF50:
 5386 049e 42415F77 		.ascii	"BA_wait\000"
 5386      61697400 
 5387              	.LASF26:
 5388 04a6 77726973 		.ascii	"wristTilt_states\000"
 5388      7454696C 
 5388      745F7374 
 5388      61746573 
 5388      00
 5389              	.LASF74:
 5390 04b7 6375725F 		.ascii	"cur_command\000"
 5390      636F6D6D 
 5390      616E6400 
 5391              	.LASF77:
 5392 04c3 57525F70 		.ascii	"WR_pos_to_vel\000"
 5392      6F735F74 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 119


 5392      6F5F7665 
 5392      6C00
 5393              	.LASF9:
 5394 04d1 5F5F7569 		.ascii	"__uint8_t\000"
 5394      6E74385F 
 5394      7400
 5395              	.LASF35:
 5396 04db 726F7461 		.ascii	"rotate_wait\000"
 5396      74655F77 
 5396      61697400 
 5397              	.LASF68:
 5398 04e7 53657276 		.ascii	"ServoSpeed\000"
 5398      6F537065 
 5398      656400
 5399              	.LASF55:
 5400 04f2 6566665F 		.ascii	"eff_wait\000"
 5400      77616974 
 5400      00
 5401              	.LASF114:
 5402 04fb 57525F66 		.ascii	"WR_feedback\000"
 5402      65656462 
 5402      61636B00 
 5403              	.LASF22:
 5404 0507 73656E64 		.ascii	"send_feedback\000"
 5404      5F666565 
 5404      64626163 
 5404      6B00
 5405              	.LASF19:
 5406 0515 73697A65 		.ascii	"sizetype\000"
 5406      74797065 
 5406      00
 5407              	.LASF5:
 5408 051e 6C6F6E67 		.ascii	"long unsigned int\000"
 5408      20756E73 
 5408      69676E65 
 5408      6420696E 
 5408      7400
 5409              	.LASF39:
 5410 0530 656C6277 		.ascii	"elbw_execute\000"
 5410      5F657865 
 5410      63757465 
 5410      00
 5411              	.LASF25:
 5412 053d 73656E64 		.ascii	"send_packet_states\000"
 5412      5F706163 
 5412      6B65745F 
 5412      73746174 
 5412      657300
 5413              	.LASF42:
 5414 0550 73686C64 		.ascii	"shldr_start\000"
 5414      725F7374 
 5414      61727400 
 5415              	.LASF79:
 5416 055c 696E666F 		.ascii	"info_array\000"
 5416      5F617272 
 5416      617900
 5417              	.LASF1:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 120


 5418 0567 756E7369 		.ascii	"unsigned char\000"
 5418      676E6564 
 5418      20636861 
 5418      7200
 5419              	.LASF136:
 5420 0575 73656E64 		.ascii	"send_packet_state\000"
 5420      5F706163 
 5420      6B65745F 
 5420      73746174 
 5420      6500
 5421              	.LASF89:
 5422 0587 66696C6C 		.ascii	"fill_data_array\000"
 5422      5F646174 
 5422      615F6172 
 5422      72617900 
 5423              	.LASF93:
 5424 0597 77726973 		.ascii	"wristRotate\000"
 5424      74526F74 
 5424      61746500 
 5425              	.LASF86:
 5426 05a3 6D616B65 		.ascii	"make_wristRotate_command\000"
 5426      5F777269 
 5426      7374526F 
 5426      74617465 
 5426      5F636F6D 
 5427              	.LASF53:
 5428 05bc 6566665F 		.ascii	"eff_init\000"
 5428      696E6974 
 5428      00
 5429              	.LASF44:
 5430 05c5 73686C64 		.ascii	"shldr_execute\000"
 5430      725F6578 
 5430      65637574 
 5430      6500
 5431              	.LASF59:
 5432 05d3 6172645F 		.ascii	"ard_wait\000"
 5432      77616974 
 5432      00
 5433              	.LASF33:
 5434 05dc 726F7461 		.ascii	"rotate_init\000"
 5434      74655F69 
 5434      6E697400 
 5435              	.LASF144:
 5436 05e8 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 5436      4320342E 
 5436      382E3420 
 5436      32303134 
 5436      30353236 
 5437 061b 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 5437      20726576 
 5437      6973696F 
 5437      6E203231 
 5437      31333538 
 5438 064e 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 5438      74643D67 
 5438      6E753939 
 5438      202D6666 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 121


 5438      756E6374 
 5439              	.LASF82:
 5440 066f 636F6D6D 		.ascii	"command\000"
 5440      616E6400 
 5441              	.LASF106:
 5442 0677 74656D70 		.ascii	"temp_val\000"
 5442      5F76616C 
 5442      00
 5443              	.LASF0:
 5444 0680 7369676E 		.ascii	"signed char\000"
 5444      65642063 
 5444      68617200 
 5445              	.LASF3:
 5446 068c 73686F72 		.ascii	"short unsigned int\000"
 5446      7420756E 
 5446      7369676E 
 5446      65642069 
 5446      6E7400
 5447              	.LASF40:
 5448 069f 656C6277 		.ascii	"elbw_wait\000"
 5448      5F776169 
 5448      7400
 5449              	.LASF104:
 5450 06a9 6D61696E 		.ascii	"main\000"
 5450      00
 5451              	.LASF146:
 5452 06ae 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 5452      73657273 
 5452      5C53616D 
 5452      75656C5C 
 5452      446F6375 
 5453 06db 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 5453      65725F76 
 5453      325C6172 
 5453      6D5F636F 
 5453      6E74726F 
 5454              	.LASF30:
 5455 06ff 74696C74 		.ascii	"tilt_wait\000"
 5455      5F776169 
 5455      7400
 5456              	.LASF91:
 5457 0709 74656D70 		.ascii	"temp_command\000"
 5457      5F636F6D 
 5457      6D616E64 
 5457      00
 5458              	.LASF11:
 5459 0716 75696E74 		.ascii	"uint8\000"
 5459      3800
 5460              	.LASF17:
 5461 071c 646F7562 		.ascii	"double\000"
 5461      6C6500
 5462              	.LASF117:
 5463 0723 454C424F 		.ascii	"ELBOW_FLAG\000"
 5463      575F464C 
 5463      414700
 5464              	.LASF58:
 5465 072e 6172645F 		.ascii	"ard_init\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cckMOYTi.s 			page 122


 5465      696E6974 
 5465      00
 5466              	.LASF62:
 5467 0737 73657276 		.ascii	"servoID\000"
 5467      6F494400 
 5468              	.LASF71:
 5469 073f 6973725F 		.ascii	"isr_var\000"
 5469      76617200 
 5470              	.LASF126:
 5471 0747 73686C64 		.ascii	"shldr_errors\000"
 5471      725F6572 
 5471      726F7273 
 5471      00
 5472              	.LASF65:
 5473 0754 53657453 		.ascii	"SetServoTorque\000"
 5473      6572766F 
 5473      546F7271 
 5473      756500
 5474              	.LASF63:
 5475 0763 706F7369 		.ascii	"position\000"
 5475      74696F6E 
 5475      00
 5476              	.LASF119:
 5477 076c 42415F46 		.ascii	"BA_FLAG\000"
 5477      4C414700 
 5478              	.LASF145:
 5479 0774 2E5C6D61 		.ascii	".\\main.c\000"
 5479      696E2E63 
 5479      00
 5480              	.LASF38:
 5481 077d 656C6277 		.ascii	"elbw_init\000"
 5481      5F696E69 
 5481      7400
 5482              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

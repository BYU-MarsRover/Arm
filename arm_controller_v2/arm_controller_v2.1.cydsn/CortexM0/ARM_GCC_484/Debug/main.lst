ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	serv_arr_cspot,1,1
  23              		.comm	servo_array,40,4
  24              		.comm	led_arr_cspot,1,1
  25              		.comm	led_array,40,4
  26              		.comm	feedback_count,2,2
  27              		.comm	timerFlag,1,1
  28              		.section	.text.timer_isr,"ax",%progbits
  29              		.align	2
  30              		.global	timer_isr
  31              		.code	16
  32              		.thumb_func
  33              		.type	timer_isr, %function
  34              	timer_isr:
  35              	.LFB33:
  36              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define DATA_ARRAY_SIZE 14
  14:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  15:.\main.c      **** 
  16:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  17:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  18:.\main.c      **** 
  19:.\main.c      **** #define NUM_OF_SM 2
  20:.\main.c      **** uint8 fin_exec; //counts
  21:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 2


  22:.\main.c      **** #define TEST_ARRAY_SIZE 10
  23:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  24:.\main.c      **** 
  25:.\main.c      **** #define SERV_ARR_SIZE 20
  26:.\main.c      **** uint8 serv_arr_cspot;
  27:.\main.c      **** uint16 servo_array[SERV_ARR_SIZE];
  28:.\main.c      **** //uint8 serv_avg_count = 0;
  29:.\main.c      **** 
  30:.\main.c      **** #define LED_ARR_SIZE 20
  31:.\main.c      **** uint8 led_arr_cspot;
  32:.\main.c      **** uint16 led_array[LED_ARR_SIZE];
  33:.\main.c      **** 
  34:.\main.c      **** uint16 feedback_count;
  35:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  36:.\main.c      **** 
  37:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  38:.\main.c      **** ///set to the time of the longest path for our code
  39:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  40:.\main.c      **** CY_ISR(timer_isr)
  41:.\main.c      **** {
  37              		.loc 1 41 0
  38              		.cfi_startproc
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  42:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  47              		.loc 1 42 0
  48 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  49 000a 031C     		mov	r3, r0
  50 000c 7B60     		str	r3, [r7, #4]
  43:.\main.c      ****     timerFlag = 1;
  51              		.loc 1 43 0
  52 000e 054B     		ldr	r3, .L2
  53 0010 0122     		mov	r2, #1
  54 0012 1A70     		strb	r2, [r3]
  44:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  55              		.loc 1 44 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 181C     		mov	r0, r3
  58 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  45:.\main.c      **** }
  59              		.loc 1 45 0
  60 001c BD46     		mov	sp, r7
  61 001e 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0020 80BD     		pop	{r7, pc}
  64              	.L3:
  65 0022 C046     		.align	2
  66              	.L2:
  67 0024 00000000 		.word	timerFlag
  68              		.cfi_endproc
  69              	.LFE33:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 3


  70              		.size	timer_isr, .-timer_isr
  71              		.section	.text.fill_data_array,"ax",%progbits
  72              		.align	2
  73              		.global	fill_data_array
  74              		.code	16
  75              		.thumb_func
  76              		.type	fill_data_array, %function
  77              	fill_data_array:
  78              	.LFB34:
  46:.\main.c      **** 
  47:.\main.c      **** 
  48:.\main.c      **** //Funtion declarations/definitions
  49:.\main.c      **** //TODO do we need to make a header for good practice?
  50:.\main.c      **** 
  51:.\main.c      **** //---------------------------------------------------
  52:.\main.c      **** //    Function stubs for the header
  53:.\main.c      **** //---------------------------------------------------
  54:.\main.c      **** void fill_data_array();
  55:.\main.c      **** void baseAzimuth();
  56:.\main.c      **** void shoulder();
  57:.\main.c      **** void elbow();
  58:.\main.c      **** void wristTilt();
  59:.\main.c      **** void wristRotate();
  60:.\main.c      **** void send_feedback();
  61:.\main.c      **** 
  62:.\main.c      **** void servo();
  63:.\main.c      **** void servo1();
  64:.\main.c      **** 
  65:.\main.c      **** void led();
  66:.\main.c      **** void led1();
  67:.\main.c      **** 
  68:.\main.c      **** void fill_data_array1();
  69:.\main.c      **** 
  70:.\main.c      **** //--------------------------------------------------- END Function Stubs
  71:.\main.c      **** 
  72:.\main.c      **** 
  73:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  74:.\main.c      **** void fill_data_array() //maybe take param: uint8* array
  75:.\main.c      **** {
  79              		.loc 1 75 0
  80              		.cfi_startproc
  81 0000 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 82B0     		sub	sp, sp, #8
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  76:.\main.c      ****     
  77:.\main.c      ****     //read one byte at a time
  78:.\main.c      ****     uint8 c = 0; //UART_1_UartGetChar();
  89              		.loc 1 78 0
  90 0006 FB1D     		add	r3, r7, #7
  91 0008 0022     		mov	r2, #0
  92 000a 1A70     		strb	r2, [r3]
  79:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 4


  80:.\main.c      **** 
  81:.\main.c      ****     if(c == 'q'){
  93              		.loc 1 81 0
  94 000c FB1D     		add	r3, r7, #7
  95 000e 1B78     		ldrb	r3, [r3]
  96 0010 712B     		cmp	r3, #113
  97 0012 04D1     		bne	.L5
  82:.\main.c      ****         data_array[1] = 2000;
  98              		.loc 1 82 0
  99 0014 354B     		ldr	r3, .L18
 100 0016 FA22     		mov	r2, #250
 101 0018 D200     		lsl	r2, r2, #3
 102 001a 5A80     		strh	r2, [r3, #2]
 103 001c 62E0     		b	.L4
 104              	.L5:
  83:.\main.c      ****     }
  84:.\main.c      ****     else if(c == 'w'){
 105              		.loc 1 84 0
 106 001e FB1D     		add	r3, r7, #7
 107 0020 1B78     		ldrb	r3, [r3]
 108 0022 772B     		cmp	r3, #119
 109 0024 03D1     		bne	.L7
  85:.\main.c      ****         data_array[1] = 1750;
 110              		.loc 1 85 0
 111 0026 314B     		ldr	r3, .L18
 112 0028 314A     		ldr	r2, .L18+4
 113 002a 5A80     		strh	r2, [r3, #2]
 114 002c 5AE0     		b	.L4
 115              	.L7:
  86:.\main.c      ****     }
  87:.\main.c      ****     else if(c == 'e'){
 116              		.loc 1 87 0
 117 002e FB1D     		add	r3, r7, #7
 118 0030 1B78     		ldrb	r3, [r3]
 119 0032 652B     		cmp	r3, #101
 120 0034 03D1     		bne	.L8
  88:.\main.c      ****         data_array[1] = 1500;
 121              		.loc 1 88 0
 122 0036 2D4B     		ldr	r3, .L18
 123 0038 2E4A     		ldr	r2, .L18+8
 124 003a 5A80     		strh	r2, [r3, #2]
 125 003c 52E0     		b	.L4
 126              	.L8:
  89:.\main.c      ****     }
  90:.\main.c      ****     else if(c == 'r'){
 127              		.loc 1 90 0
 128 003e FB1D     		add	r3, r7, #7
 129 0040 1B78     		ldrb	r3, [r3]
 130 0042 722B     		cmp	r3, #114
 131 0044 03D1     		bne	.L9
  91:.\main.c      ****         data_array[1] = 1250;
 132              		.loc 1 91 0
 133 0046 294B     		ldr	r3, .L18
 134 0048 2B4A     		ldr	r2, .L18+12
 135 004a 5A80     		strh	r2, [r3, #2]
 136 004c 4AE0     		b	.L4
 137              	.L9:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 5


  92:.\main.c      ****     }
  93:.\main.c      ****     else if(c == 't'){
 138              		.loc 1 93 0
 139 004e FB1D     		add	r3, r7, #7
 140 0050 1B78     		ldrb	r3, [r3]
 141 0052 742B     		cmp	r3, #116
 142 0054 04D1     		bne	.L10
  94:.\main.c      ****         data_array[1] = 1000;
 143              		.loc 1 94 0
 144 0056 254B     		ldr	r3, .L18
 145 0058 FA22     		mov	r2, #250
 146 005a 9200     		lsl	r2, r2, #2
 147 005c 5A80     		strh	r2, [r3, #2]
 148 005e 41E0     		b	.L4
 149              	.L10:
  95:.\main.c      ****     }    
  96:.\main.c      ****     else if(c == '1'){
 150              		.loc 1 96 0
 151 0060 FB1D     		add	r3, r7, #7
 152 0062 1B78     		ldrb	r3, [r3]
 153 0064 312B     		cmp	r3, #49
 154 0066 04D1     		bne	.L11
  97:.\main.c      ****         data_array[2] = 1000;
 155              		.loc 1 97 0
 156 0068 204B     		ldr	r3, .L18
 157 006a FA22     		mov	r2, #250
 158 006c 9200     		lsl	r2, r2, #2
 159 006e 9A80     		strh	r2, [r3, #4]
 160 0070 38E0     		b	.L4
 161              	.L11:
  98:.\main.c      ****     }
  99:.\main.c      ****     else if(c == '2'){
 162              		.loc 1 99 0
 163 0072 FB1D     		add	r3, r7, #7
 164 0074 1B78     		ldrb	r3, [r3]
 165 0076 322B     		cmp	r3, #50
 166 0078 03D1     		bne	.L12
 100:.\main.c      ****         data_array[2] = 5000;
 167              		.loc 1 100 0
 168 007a 1C4B     		ldr	r3, .L18
 169 007c 1F4A     		ldr	r2, .L18+16
 170 007e 9A80     		strh	r2, [r3, #4]
 171 0080 30E0     		b	.L4
 172              	.L12:
 101:.\main.c      ****     }
 102:.\main.c      ****     else if(c == '3'){
 173              		.loc 1 102 0
 174 0082 FB1D     		add	r3, r7, #7
 175 0084 1B78     		ldrb	r3, [r3]
 176 0086 332B     		cmp	r3, #51
 177 0088 03D1     		bne	.L13
 103:.\main.c      ****         data_array[2] = 10000;
 178              		.loc 1 103 0
 179 008a 184B     		ldr	r3, .L18
 180 008c 1C4A     		ldr	r2, .L18+20
 181 008e 9A80     		strh	r2, [r3, #4]
 182 0090 28E0     		b	.L4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 6


 183              	.L13:
 104:.\main.c      ****     }
 105:.\main.c      ****     else if(c == '4'){
 184              		.loc 1 105 0
 185 0092 FB1D     		add	r3, r7, #7
 186 0094 1B78     		ldrb	r3, [r3]
 187 0096 342B     		cmp	r3, #52
 188 0098 03D1     		bne	.L14
 106:.\main.c      ****         data_array[2] = 15000;
 189              		.loc 1 106 0
 190 009a 144B     		ldr	r3, .L18
 191 009c 194A     		ldr	r2, .L18+24
 192 009e 9A80     		strh	r2, [r3, #4]
 193 00a0 20E0     		b	.L4
 194              	.L14:
 107:.\main.c      ****     }
 108:.\main.c      ****     else if(c == '5'){
 195              		.loc 1 108 0
 196 00a2 FB1D     		add	r3, r7, #7
 197 00a4 1B78     		ldrb	r3, [r3]
 198 00a6 352B     		cmp	r3, #53
 199 00a8 03D1     		bne	.L15
 109:.\main.c      ****         data_array[2] =19000;
 200              		.loc 1 109 0
 201 00aa 104B     		ldr	r3, .L18
 202 00ac 164A     		ldr	r2, .L18+28
 203 00ae 9A80     		strh	r2, [r3, #4]
 204 00b0 18E0     		b	.L4
 205              	.L15:
 110:.\main.c      ****     }    
 111:.\main.c      ****     else if(c == 'j'){
 206              		.loc 1 111 0
 207 00b2 FB1D     		add	r3, r7, #7
 208 00b4 1B78     		ldrb	r3, [r3]
 209 00b6 6A2B     		cmp	r3, #106
 210 00b8 04D1     		bne	.L16
 112:.\main.c      ****         data_array[3] = 1000;
 211              		.loc 1 112 0
 212 00ba 0C4B     		ldr	r3, .L18
 213 00bc FA22     		mov	r2, #250
 214 00be 9200     		lsl	r2, r2, #2
 215 00c0 DA80     		strh	r2, [r3, #6]
 216 00c2 0FE0     		b	.L4
 217              	.L16:
 113:.\main.c      ****     }
 114:.\main.c      ****     else if(c == 'k'){
 218              		.loc 1 114 0
 219 00c4 FB1D     		add	r3, r7, #7
 220 00c6 1B78     		ldrb	r3, [r3]
 221 00c8 6B2B     		cmp	r3, #107
 222 00ca 03D1     		bne	.L17
 115:.\main.c      ****         data_array[3] = 1500;
 223              		.loc 1 115 0
 224 00cc 074B     		ldr	r3, .L18
 225 00ce 094A     		ldr	r2, .L18+8
 226 00d0 DA80     		strh	r2, [r3, #6]
 227 00d2 07E0     		b	.L4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 7


 228              	.L17:
 116:.\main.c      ****     }
 117:.\main.c      ****     else if(c == 'l'){
 229              		.loc 1 117 0
 230 00d4 FB1D     		add	r3, r7, #7
 231 00d6 1B78     		ldrb	r3, [r3]
 232 00d8 6C2B     		cmp	r3, #108
 233 00da 03D1     		bne	.L4
 118:.\main.c      ****         data_array[3] =2000;
 234              		.loc 1 118 0
 235 00dc 034B     		ldr	r3, .L18
 236 00de FA22     		mov	r2, #250
 237 00e0 D200     		lsl	r2, r2, #3
 238 00e2 DA80     		strh	r2, [r3, #6]
 239              	.L4:
 119:.\main.c      ****     }    
 120:.\main.c      **** 
 121:.\main.c      **** }
 240              		.loc 1 121 0
 241 00e4 BD46     		mov	sp, r7
 242 00e6 02B0     		add	sp, sp, #8
 243              		@ sp needed
 244 00e8 80BD     		pop	{r7, pc}
 245              	.L19:
 246 00ea C046     		.align	2
 247              	.L18:
 248 00ec 00000000 		.word	data_array
 249 00f0 D6060000 		.word	1750
 250 00f4 DC050000 		.word	1500
 251 00f8 E2040000 		.word	1250
 252 00fc 88130000 		.word	5000
 253 0100 10270000 		.word	10000
 254 0104 983A0000 		.word	15000
 255 0108 384A0000 		.word	19000
 256              		.cfi_endproc
 257              	.LFE34:
 258              		.size	fill_data_array, .-fill_data_array
 259              		.section	.text.fill_data_array1,"ax",%progbits
 260              		.align	2
 261              		.global	fill_data_array1
 262              		.code	16
 263              		.thumb_func
 264              		.type	fill_data_array1, %function
 265              	fill_data_array1:
 266              	.LFB35:
 122:.\main.c      **** 
 123:.\main.c      **** void fill_data_array1()
 124:.\main.c      **** {
 267              		.loc 1 124 0
 268              		.cfi_startproc
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 8


 276              		.cfi_def_cfa_register 7
 125:.\main.c      ****     uint8 i = 0;
 277              		.loc 1 125 0
 278 0006 FB1D     		add	r3, r7, #7
 279 0008 0022     		mov	r2, #0
 280 000a 1A70     		strb	r2, [r3]
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 281              		.loc 1 126 0
 282 000c FB1D     		add	r3, r7, #7
 283 000e 0022     		mov	r2, #0
 284 0010 1A70     		strb	r2, [r3]
 285 0012 0FE0     		b	.L21
 286              	.L22:
 127:.\main.c      ****     {
 128:.\main.c      ****         data_array[i] = test_array[i];
 287              		.loc 1 128 0 discriminator 2
 288 0014 FB1D     		add	r3, r7, #7
 289 0016 1A78     		ldrb	r2, [r3]
 290 0018 FB1D     		add	r3, r7, #7
 291 001a 1978     		ldrb	r1, [r3]
 292 001c 094B     		ldr	r3, .L23
 293 001e 4900     		lsl	r1, r1, #1
 294 0020 CB5A     		ldrh	r3, [r1, r3]
 295 0022 99B2     		uxth	r1, r3
 296 0024 084B     		ldr	r3, .L23+4
 297 0026 5200     		lsl	r2, r2, #1
 298 0028 D152     		strh	r1, [r2, r3]
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 299              		.loc 1 126 0 discriminator 2
 300 002a FB1D     		add	r3, r7, #7
 301 002c 1A78     		ldrb	r2, [r3]
 302 002e FB1D     		add	r3, r7, #7
 303 0030 0132     		add	r2, r2, #1
 304 0032 1A70     		strb	r2, [r3]
 305              	.L21:
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 306              		.loc 1 126 0 is_stmt 0 discriminator 1
 307 0034 FB1D     		add	r3, r7, #7
 308 0036 1B78     		ldrb	r3, [r3]
 309 0038 092B     		cmp	r3, #9
 310 003a EBD9     		bls	.L22
 129:.\main.c      ****     }
 130:.\main.c      **** }
 311              		.loc 1 130 0 is_stmt 1
 312 003c BD46     		mov	sp, r7
 313 003e 02B0     		add	sp, sp, #8
 314              		@ sp needed
 315 0040 80BD     		pop	{r7, pc}
 316              	.L24:
 317 0042 C046     		.align	2
 318              	.L23:
 319 0044 00000000 		.word	test_array
 320 0048 00000000 		.word	data_array
 321              		.cfi_endproc
 322              	.LFE35:
 323              		.size	fill_data_array1, .-fill_data_array1
 324              		.section	.text.baseAzimuth,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 9


 325              		.align	2
 326              		.global	baseAzimuth
 327              		.code	16
 328              		.thumb_func
 329              		.type	baseAzimuth, %function
 330              	baseAzimuth:
 331              	.LFB36:
 131:.\main.c      **** 
 132:.\main.c      **** //control the turret
 133:.\main.c      **** void baseAzimuth()
 134:.\main.c      **** {
 332              		.loc 1 134 0
 333              		.cfi_startproc
 334 0000 80B5     		push	{r7, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 00AF     		add	r7, sp, #0
 339              		.cfi_def_cfa_register 7
 135:.\main.c      ****     //take instruction from data_array
 136:.\main.c      ****     //smooth input
 137:.\main.c      ****     //actuate the turret using PWM
 138:.\main.c      **** }
 340              		.loc 1 138 0
 341 0004 BD46     		mov	sp, r7
 342              		@ sp needed
 343 0006 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE36:
 346              		.size	baseAzimuth, .-baseAzimuth
 347              		.comm	shldr_state,1,1
 348              		.section	.text.shoulder,"ax",%progbits
 349              		.align	2
 350              		.global	shoulder
 351              		.code	16
 352              		.thumb_func
 353              		.type	shoulder, %function
 354              	shoulder:
 355              	.LFB37:
 139:.\main.c      **** 
 140:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
 141:.\main.c      **** //control the shoulder
 142:.\main.c      **** void shoulder()
 143:.\main.c      **** {
 356              		.loc 1 143 0
 357              		.cfi_startproc
 358 0000 80B5     		push	{r7, lr}
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 00AF     		add	r7, sp, #0
 363              		.cfi_def_cfa_register 7
 144:.\main.c      ****     //take instruction from data_array
 145:.\main.c      ****     //smooth input
 146:.\main.c      ****     //actuate the shoulder using PWM
 147:.\main.c      ****     //get feedback
 148:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 10


 149:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 150:.\main.c      ****     //switch statement for state actions
 151:.\main.c      **** 		//start
 152:.\main.c      **** 			//break
 153:.\main.c      **** 		//initialize
 154:.\main.c      **** 			//create smoothing array
 155:.\main.c      **** 		//feedback
 156:.\main.c      **** 			//read feedback
 157:.\main.c      **** 		//execute
 158:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 159:.\main.c      **** 			//calculate average of value in array
 160:.\main.c      ****     
 161:.\main.c      ****     switch(shldr_state)
 364              		.loc 1 161 0
 365 0004 0E4B     		ldr	r3, .L34
 366 0006 1B78     		ldrb	r3, [r3]
 367 0008 012B     		cmp	r3, #1
 368 000a 0CD0     		beq	.L28
 369 000c 02DC     		bgt	.L29
 370 000e 002B     		cmp	r3, #0
 371 0010 05D0     		beq	.L30
 372 0012 12E0     		b	.L26
 373              	.L29:
 374 0014 022B     		cmp	r3, #2
 375 0016 0FD0     		beq	.L33
 376 0018 032B     		cmp	r3, #3
 377 001a 08D0     		beq	.L32
 378 001c 0DE0     		b	.L26
 379              	.L30:
 162:.\main.c      ****     {//switch staatement for state transitions
 163:.\main.c      **** 		case shldr_start: //start
 164:.\main.c      **** 			//next state will be init
 165:.\main.c      ****             shldr_state = shldr_init;
 380              		.loc 1 165 0
 381 001e 084B     		ldr	r3, .L34
 382 0020 0122     		mov	r2, #1
 383 0022 1A70     		strb	r2, [r3]
 166:.\main.c      ****             break;
 384              		.loc 1 166 0
 385 0024 09E0     		b	.L26
 386              	.L28:
 167:.\main.c      ****         
 168:.\main.c      **** 		case shldr_init: //initialize
 169:.\main.c      **** 			//next state will be feedback
 170:.\main.c      ****             shldr_state = shldr_fdbk;
 387              		.loc 1 170 0
 388 0026 064B     		ldr	r3, .L34
 389 0028 0222     		mov	r2, #2
 390 002a 1A70     		strb	r2, [r3]
 171:.\main.c      ****             break;
 391              		.loc 1 171 0
 392 002c 05E0     		b	.L26
 393              	.L32:
 172:.\main.c      ****         
 173:.\main.c      **** 		case shldr_fdbk://feedback
 174:.\main.c      **** 			//if position ok relative to average
 175:.\main.c      **** 				//execute
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 11


 176:.\main.c      **** 			//else if not ok
 177:.\main.c      **** 				//report problem
 178:.\main.c      ****             break;
 179:.\main.c      **** 		case shldr_exe://execute
 180:.\main.c      **** 			//next state will be report
 181:.\main.c      ****             shldr_state = shldr_fdbk;
 394              		.loc 1 181 0
 395 002e 044B     		ldr	r3, .L34
 396 0030 0222     		mov	r2, #2
 397 0032 1A70     		strb	r2, [r3]
 182:.\main.c      ****             break;
 398              		.loc 1 182 0
 399 0034 C046     		mov	r8, r8
 400 0036 00E0     		b	.L26
 401              	.L33:
 178:.\main.c      ****             break;
 402              		.loc 1 178 0
 403 0038 C046     		mov	r8, r8
 404              	.L26:
 183:.\main.c      ****     }
 184:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 185:.\main.c      **** }
 405              		.loc 1 185 0
 406 003a BD46     		mov	sp, r7
 407              		@ sp needed
 408 003c 80BD     		pop	{r7, pc}
 409              	.L35:
 410 003e C046     		.align	2
 411              	.L34:
 412 0040 00000000 		.word	shldr_state
 413              		.cfi_endproc
 414              	.LFE37:
 415              		.size	shoulder, .-shoulder
 416              		.section	.text.elbow,"ax",%progbits
 417              		.align	2
 418              		.global	elbow
 419              		.code	16
 420              		.thumb_func
 421              		.type	elbow, %function
 422              	elbow:
 423              	.LFB38:
 186:.\main.c      **** 
 187:.\main.c      **** //control the elbow
 188:.\main.c      **** void elbow()
 189:.\main.c      **** {
 424              		.loc 1 189 0
 425              		.cfi_startproc
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 190:.\main.c      ****     //take instruction from data_array
 191:.\main.c      ****     //smooth input
 192:.\main.c      ****     //actuate the elbow using PWM
 193:.\main.c      ****     //get feedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 12


 194:.\main.c      **** }
 432              		.loc 1 194 0
 433 0004 BD46     		mov	sp, r7
 434              		@ sp needed
 435 0006 80BD     		pop	{r7, pc}
 436              		.cfi_endproc
 437              	.LFE38:
 438              		.size	elbow, .-elbow
 439              		.comm	wristTilt_state,1,1
 440              		.section	.text.wristTilt,"ax",%progbits
 441              		.align	2
 442              		.global	wristTilt
 443              		.code	16
 444              		.thumb_func
 445              		.type	wristTilt, %function
 446              	wristTilt:
 447              	.LFB39:
 195:.\main.c      **** 
 196:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 197:.\main.c      **** //control the tilting motion of the wrist
 198:.\main.c      **** void wristTilt()
 199:.\main.c      **** {
 448              		.loc 1 199 0
 449              		.cfi_startproc
 450 0000 80B5     		push	{r7, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 00AF     		add	r7, sp, #0
 455              		.cfi_def_cfa_register 7
 200:.\main.c      ****     // Overview
 201:.\main.c      ****     //take instruction from data_array
 202:.\main.c      ****     //smooth input
 203:.\main.c      ****     //actuate the tilting using UART
 204:.\main.c      ****     //get feedback
 205:.\main.c      **** 
 206:.\main.c      ****     //-------------------------- 
 207:.\main.c      ****     // Dynamixel Servo specific
 208:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 209:.\main.c      ****     // TODO: Set the desired position
 210:.\main.c      **** 
 211:.\main.c      ****     //--------------------------
 212:.\main.c      ****     // State machine
 213:.\main.c      ****     
 214:.\main.c      ****         // Action
 215:.\main.c      ****     switch(wristTilt_state)
 456              		.loc 1 215 0
 457 0004 0F4B     		ldr	r3, .L53
 458 0006 1B78     		ldrb	r3, [r3]
 459 0008 012B     		cmp	r3, #1
 460 000a 06D0     		beq	.L50
 461 000c 07DC     		bgt	.L51
 462 000e 002B     		cmp	r3, #0
 463 0010 06D1     		bne	.L38
 216:.\main.c      ****     {
 217:.\main.c      ****         case tilt_init:
 218:.\main.c      ****             wristTilt_state = tilt_start;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 13


 464              		.loc 1 218 0
 465 0012 0C4B     		ldr	r3, .L53
 466 0014 0122     		mov	r2, #1
 467 0016 1A70     		strb	r2, [r3]
 219:.\main.c      ****             break;
 468              		.loc 1 219 0
 469 0018 02E0     		b	.L38
 470              	.L50:
 220:.\main.c      ****         case tilt_start:
 221:.\main.c      ****             // Set the torque - this is a one time thing
 222:.\main.c      ****             // Set the speed - I think this is a one time thing
 223:.\main.c      ****             break;
 471              		.loc 1 223 0
 472 001a C046     		mov	r8, r8
 473 001c 00E0     		b	.L38
 474              	.L51:
 224:.\main.c      ****         case tilt_control:
 225:.\main.c      ****             break;
 475              		.loc 1 225 0
 476 001e C046     		mov	r8, r8
 477              	.L38:
 226:.\main.c      ****         case tilt_feedback:
 227:.\main.c      ****             break;
 228:.\main.c      ****     }
 229:.\main.c      ****         // Transistion
 230:.\main.c      ****     switch(wristTilt_state)
 478              		.loc 1 230 0
 479 0020 084B     		ldr	r3, .L53
 480 0022 1B78     		ldrb	r3, [r3]
 481 0024 012B     		cmp	r3, #1
 482 0026 06D0     		beq	.L45
 483 0028 09DC     		bgt	.L52
 484 002a 002B     		cmp	r3, #0
 485 002c 08D1     		bne	.L37
 231:.\main.c      ****     {
 232:.\main.c      ****         case tilt_init:
 233:.\main.c      ****             wristTilt_state = tilt_start;
 486              		.loc 1 233 0
 487 002e 054B     		ldr	r3, .L53
 488 0030 0122     		mov	r2, #1
 489 0032 1A70     		strb	r2, [r3]
 234:.\main.c      ****             break;
 490              		.loc 1 234 0
 491 0034 04E0     		b	.L37
 492              	.L45:
 235:.\main.c      ****         case tilt_start:
 236:.\main.c      ****             wristTilt_state = tilt_control;
 493              		.loc 1 236 0
 494 0036 034B     		ldr	r3, .L53
 495 0038 0222     		mov	r2, #2
 496 003a 1A70     		strb	r2, [r3]
 237:.\main.c      ****             break;
 497              		.loc 1 237 0
 498 003c 00E0     		b	.L37
 499              	.L52:
 238:.\main.c      ****         case tilt_control:
 239:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 14


 500              		.loc 1 239 0
 501 003e C046     		mov	r8, r8
 502              	.L37:
 240:.\main.c      ****         case tilt_feedback:
 241:.\main.c      ****             break;
 242:.\main.c      ****     }
 243:.\main.c      **** }
 503              		.loc 1 243 0
 504 0040 BD46     		mov	sp, r7
 505              		@ sp needed
 506 0042 80BD     		pop	{r7, pc}
 507              	.L54:
 508              		.align	2
 509              	.L53:
 510 0044 00000000 		.word	wristTilt_state
 511              		.cfi_endproc
 512              	.LFE39:
 513              		.size	wristTilt, .-wristTilt
 514              		.comm	wristRotate_state,1,1
 515              		.section	.text.wristRotate,"ax",%progbits
 516              		.align	2
 517              		.global	wristRotate
 518              		.code	16
 519              		.thumb_func
 520              		.type	wristRotate, %function
 521              	wristRotate:
 522              	.LFB40:
 244:.\main.c      **** 
 245:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 246:.\main.c      **** //control the rotating motion of the wrist
 247:.\main.c      **** void wristRotate()
 248:.\main.c      **** {
 523              		.loc 1 248 0
 524              		.cfi_startproc
 525 0000 80B5     		push	{r7, lr}
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 7, -8
 528              		.cfi_offset 14, -4
 529 0002 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 249:.\main.c      ****     //Overview
 250:.\main.c      ****     //take instruction from data_array
 251:.\main.c      ****     //smooth input
 252:.\main.c      ****     //actuate the tilting using UART
 253:.\main.c      ****     //get feedback
 254:.\main.c      **** 
 255:.\main.c      ****     //-------------------------- 
 256:.\main.c      ****     // Dynamixel Servo specific
 257:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 258:.\main.c      ****     // TODO: Set the desired position
 259:.\main.c      **** 
 260:.\main.c      ****     //--------------------------
 261:.\main.c      ****     // State machine
 262:.\main.c      ****     
 263:.\main.c      ****         // Action
 264:.\main.c      ****     switch(wristRotate_state)
 531              		.loc 1 264 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 15


 532 0004 0F4B     		ldr	r3, .L71
 533 0006 1B78     		ldrb	r3, [r3]
 534 0008 012B     		cmp	r3, #1
 535 000a 06D0     		beq	.L68
 536 000c 07DC     		bgt	.L69
 537 000e 002B     		cmp	r3, #0
 538 0010 06D1     		bne	.L56
 265:.\main.c      ****     {
 266:.\main.c      ****         case rotate_init:
 267:.\main.c      ****             wristRotate_state = rotate_start;
 539              		.loc 1 267 0
 540 0012 0C4B     		ldr	r3, .L71
 541 0014 0122     		mov	r2, #1
 542 0016 1A70     		strb	r2, [r3]
 268:.\main.c      ****             break;
 543              		.loc 1 268 0
 544 0018 02E0     		b	.L56
 545              	.L68:
 269:.\main.c      ****         case rotate_start:
 270:.\main.c      ****             // Set the torque - this is a one time thing
 271:.\main.c      ****             // Set the speed - I think this is a one time thing
 272:.\main.c      ****             break;
 546              		.loc 1 272 0
 547 001a C046     		mov	r8, r8
 548 001c 00E0     		b	.L56
 549              	.L69:
 273:.\main.c      ****         case rotate_control:
 274:.\main.c      ****             break;
 550              		.loc 1 274 0
 551 001e C046     		mov	r8, r8
 552              	.L56:
 275:.\main.c      ****         case rotate_feedback:
 276:.\main.c      ****             break;
 277:.\main.c      ****     }
 278:.\main.c      ****         // Transistion
 279:.\main.c      ****     switch(wristRotate_state)
 553              		.loc 1 279 0
 554 0020 084B     		ldr	r3, .L71
 555 0022 1B78     		ldrb	r3, [r3]
 556 0024 012B     		cmp	r3, #1
 557 0026 06D0     		beq	.L63
 558 0028 09DC     		bgt	.L70
 559 002a 002B     		cmp	r3, #0
 560 002c 08D1     		bne	.L55
 280:.\main.c      ****     {
 281:.\main.c      ****         case rotate_init:
 282:.\main.c      ****             wristRotate_state = rotate_start;
 561              		.loc 1 282 0
 562 002e 054B     		ldr	r3, .L71
 563 0030 0122     		mov	r2, #1
 564 0032 1A70     		strb	r2, [r3]
 283:.\main.c      ****             break;
 565              		.loc 1 283 0
 566 0034 04E0     		b	.L55
 567              	.L63:
 284:.\main.c      ****         case rotate_start:
 285:.\main.c      ****             wristRotate_state = rotate_control;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 16


 568              		.loc 1 285 0
 569 0036 034B     		ldr	r3, .L71
 570 0038 0222     		mov	r2, #2
 571 003a 1A70     		strb	r2, [r3]
 286:.\main.c      ****             break;
 572              		.loc 1 286 0
 573 003c 00E0     		b	.L55
 574              	.L70:
 287:.\main.c      ****         case rotate_control:
 288:.\main.c      ****             break;
 575              		.loc 1 288 0
 576 003e C046     		mov	r8, r8
 577              	.L55:
 289:.\main.c      ****         case rotate_feedback:
 290:.\main.c      ****             break;
 291:.\main.c      ****     }
 292:.\main.c      **** }
 578              		.loc 1 292 0
 579 0040 BD46     		mov	sp, r7
 580              		@ sp needed
 581 0042 80BD     		pop	{r7, pc}
 582              	.L72:
 583              		.align	2
 584              	.L71:
 585 0044 00000000 		.word	wristRotate_state
 586              		.cfi_endproc
 587              	.LFE40:
 588              		.size	wristRotate, .-wristRotate
 589              		.section	.text.send_feedback,"ax",%progbits
 590              		.align	2
 591              		.global	send_feedback
 592              		.code	16
 593              		.thumb_func
 594              		.type	send_feedback, %function
 595              	send_feedback:
 596              	.LFB41:
 293:.\main.c      **** 
 294:.\main.c      **** void send_feedback()
 295:.\main.c      **** {
 597              		.loc 1 295 0
 598              		.cfi_startproc
 599 0000 80B5     		push	{r7, lr}
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 296:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 297:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 298:.\main.c      ****     //TODO define system state
 299:.\main.c      ****     //send packet via serial to wiznet
 300:.\main.c      **** }
 605              		.loc 1 300 0
 606 0004 BD46     		mov	sp, r7
 607              		@ sp needed
 608 0006 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 17


 610              	.LFE41:
 611              		.size	send_feedback, .-send_feedback
 612              		.comm	led_state,1,1
 613              		.section	.text.led,"ax",%progbits
 614              		.align	2
 615              		.global	led
 616              		.code	16
 617              		.thumb_func
 618              		.type	led, %function
 619              	led:
 620              	.LFB42:
 301:.\main.c      **** 
 302:.\main.c      **** enum led_states {l_start,l_different,l_wait} led_state;
 303:.\main.c      **** void led()
 304:.\main.c      **** {
 621              		.loc 1 304 0
 622              		.cfi_startproc
 623 0000 80B5     		push	{r7, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 82B0     		sub	sp, sp, #8
 628              		.cfi_def_cfa_offset 16
 629 0004 00AF     		add	r7, sp, #0
 630              		.cfi_def_cfa_register 7
 305:.\main.c      ****     uint16 old = 0;
 631              		.loc 1 305 0
 632 0006 BB1D     		add	r3, r7, #6
 633 0008 0022     		mov	r2, #0
 634 000a 1A80     		strh	r2, [r3]
 306:.\main.c      ****     switch(led_state)
 635              		.loc 1 306 0
 636 000c 1C4B     		ldr	r3, .L88
 637 000e 1B78     		ldrb	r3, [r3]
 638 0010 012B     		cmp	r3, #1
 639 0012 09D1     		bne	.L87
 307:.\main.c      ****     {
 308:.\main.c      ****         case l_start:
 309:.\main.c      ****             break;
 310:.\main.c      ****         
 311:.\main.c      ****         case l_different:
 312:.\main.c      ****             PWM_1_WriteCompare1(data_array[1]);
 640              		.loc 1 312 0
 641 0014 1B4B     		ldr	r3, .L88+4
 642 0016 5B88     		ldrh	r3, [r3, #2]
 643 0018 181C     		mov	r0, r3
 644 001a FFF7FEFF 		bl	PWM_1_WriteCompare1
 313:.\main.c      ****             old = data_array[1];
 645              		.loc 1 313 0
 646 001e BB1D     		add	r3, r7, #6
 647 0020 184A     		ldr	r2, .L88+4
 648 0022 5288     		ldrh	r2, [r2, #2]
 649 0024 1A80     		strh	r2, [r3]
 314:.\main.c      ****             break;
 650              		.loc 1 314 0
 651 0026 00E0     		b	.L75
 652              	.L87:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 18


 315:.\main.c      ****             
 316:.\main.c      ****         case l_wait:
 317:.\main.c      ****             break;
 653              		.loc 1 317 0
 654 0028 C046     		mov	r8, r8
 655              	.L75:
 318:.\main.c      ****     }
 319:.\main.c      ****     
 320:.\main.c      ****     switch(led_state)
 656              		.loc 1 320 0
 657 002a 154B     		ldr	r3, .L88
 658 002c 1B78     		ldrb	r3, [r3]
 659 002e 012B     		cmp	r3, #1
 660 0030 07D0     		beq	.L80
 661 0032 022B     		cmp	r3, #2
 662 0034 13D0     		beq	.L81
 663 0036 002B     		cmp	r3, #0
 664 0038 1FD1     		bne	.L74
 321:.\main.c      ****     {
 322:.\main.c      ****         case l_start:
 323:.\main.c      ****             led_state = l_wait;
 665              		.loc 1 323 0
 666 003a 114B     		ldr	r3, .L88
 667 003c 0222     		mov	r2, #2
 668 003e 1A70     		strb	r2, [r3]
 324:.\main.c      ****             break;
 669              		.loc 1 324 0
 670 0040 1BE0     		b	.L74
 671              	.L80:
 325:.\main.c      ****         
 326:.\main.c      ****         case l_different:
 327:.\main.c      ****             if(data_array[1] != old)
 672              		.loc 1 327 0
 673 0042 104B     		ldr	r3, .L88+4
 674 0044 5B88     		ldrh	r3, [r3, #2]
 675 0046 BA1D     		add	r2, r7, #6
 676 0048 1288     		ldrh	r2, [r2]
 677 004a 9A42     		cmp	r2, r3
 678 004c 03D0     		beq	.L83
 328:.\main.c      ****             {
 329:.\main.c      ****                 led_state = l_different;
 679              		.loc 1 329 0
 680 004e 0C4B     		ldr	r3, .L88
 681 0050 0122     		mov	r2, #1
 682 0052 1A70     		strb	r2, [r3]
 330:.\main.c      ****             }
 331:.\main.c      ****             else
 332:.\main.c      ****             {
 333:.\main.c      ****                 led_state = l_wait;
 334:.\main.c      ****             }
 335:.\main.c      ****             break;
 683              		.loc 1 335 0
 684 0054 11E0     		b	.L74
 685              	.L83:
 333:.\main.c      ****                 led_state = l_wait;
 686              		.loc 1 333 0
 687 0056 0A4B     		ldr	r3, .L88
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 19


 688 0058 0222     		mov	r2, #2
 689 005a 1A70     		strb	r2, [r3]
 690              		.loc 1 335 0
 691 005c 0DE0     		b	.L74
 692              	.L81:
 336:.\main.c      ****             
 337:.\main.c      ****         case l_wait:
 338:.\main.c      ****             if(data_array[1] != old)
 693              		.loc 1 338 0
 694 005e 094B     		ldr	r3, .L88+4
 695 0060 5B88     		ldrh	r3, [r3, #2]
 696 0062 BA1D     		add	r2, r7, #6
 697 0064 1288     		ldrh	r2, [r2]
 698 0066 9A42     		cmp	r2, r3
 699 0068 03D0     		beq	.L85
 339:.\main.c      ****             {
 340:.\main.c      ****                 led_state = l_different;
 700              		.loc 1 340 0
 701 006a 054B     		ldr	r3, .L88
 702 006c 0122     		mov	r2, #1
 703 006e 1A70     		strb	r2, [r3]
 704 0070 02E0     		b	.L86
 705              	.L85:
 341:.\main.c      ****             }
 342:.\main.c      ****             else
 343:.\main.c      ****             {
 344:.\main.c      ****                 led_state = l_wait;
 706              		.loc 1 344 0
 707 0072 034B     		ldr	r3, .L88
 708 0074 0222     		mov	r2, #2
 709 0076 1A70     		strb	r2, [r3]
 710              	.L86:
 345:.\main.c      ****             }
 346:.\main.c      ****             break;
 711              		.loc 1 346 0
 712 0078 C046     		mov	r8, r8
 713              	.L74:
 347:.\main.c      ****     }
 348:.\main.c      **** }
 714              		.loc 1 348 0
 715 007a BD46     		mov	sp, r7
 716 007c 02B0     		add	sp, sp, #8
 717              		@ sp needed
 718 007e 80BD     		pop	{r7, pc}
 719              	.L89:
 720              		.align	2
 721              	.L88:
 722 0080 00000000 		.word	led_state
 723 0084 00000000 		.word	data_array
 724              		.cfi_endproc
 725              	.LFE42:
 726              		.size	led, .-led
 727              		.global	__aeabi_uidiv
 728              		.section	.text.average,"ax",%progbits
 729              		.align	2
 730              		.global	average
 731              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 20


 732              		.thumb_func
 733              		.type	average, %function
 734              	average:
 735              	.LFB43:
 349:.\main.c      **** 
 350:.\main.c      **** //Average function to be used in smoothing our input
 351:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 352:.\main.c      **** {
 736              		.loc 1 352 0
 737              		.cfi_startproc
 738 0000 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 86B0     		sub	sp, sp, #24
 743              		.cfi_def_cfa_offset 32
 744 0004 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
 747 0008 0A1C     		mov	r2, r1
 748 000a FB1C     		add	r3, r7, #3
 749 000c 1A70     		strb	r2, [r3]
 353:.\main.c      ****     uint8 i;
 354:.\main.c      ****     uint32 sum = 0;
 750              		.loc 1 354 0
 751 000e 0023     		mov	r3, #0
 752 0010 3B61     		str	r3, [r7, #16]
 355:.\main.c      ****     uint16 avg = 0;
 753              		.loc 1 355 0
 754 0012 3B1C     		mov	r3, r7
 755 0014 0E33     		add	r3, r3, #14
 756 0016 0022     		mov	r2, #0
 757 0018 1A80     		strh	r2, [r3]
 356:.\main.c      ****     
 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 758              		.loc 1 357 0
 759 001a 3B1C     		mov	r3, r7
 760 001c 1733     		add	r3, r3, #23
 761 001e 0022     		mov	r2, #0
 762 0020 1A70     		strb	r2, [r3]
 763 0022 10E0     		b	.L91
 764              	.L92:
 358:.\main.c      ****     {
 359:.\main.c      ****         sum += array[i];
 765              		.loc 1 359 0 discriminator 2
 766 0024 3B1C     		mov	r3, r7
 767 0026 1733     		add	r3, r3, #23
 768 0028 1B78     		ldrb	r3, [r3]
 769 002a 5B00     		lsl	r3, r3, #1
 770 002c 7A68     		ldr	r2, [r7, #4]
 771 002e D318     		add	r3, r2, r3
 772 0030 1B88     		ldrh	r3, [r3]
 773 0032 3A69     		ldr	r2, [r7, #16]
 774 0034 D318     		add	r3, r2, r3
 775 0036 3B61     		str	r3, [r7, #16]
 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 776              		.loc 1 357 0 discriminator 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 21


 777 0038 3B1C     		mov	r3, r7
 778 003a 1733     		add	r3, r3, #23
 779 003c 1A78     		ldrb	r2, [r3]
 780 003e 3B1C     		mov	r3, r7
 781 0040 1733     		add	r3, r3, #23
 782 0042 0132     		add	r2, r2, #1
 783 0044 1A70     		strb	r2, [r3]
 784              	.L91:
 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 785              		.loc 1 357 0 is_stmt 0 discriminator 1
 786 0046 3A1C     		mov	r2, r7
 787 0048 1732     		add	r2, r2, #23
 788 004a FB1C     		add	r3, r7, #3
 789 004c 1278     		ldrb	r2, [r2]
 790 004e 1B78     		ldrb	r3, [r3]
 791 0050 9A42     		cmp	r2, r3
 792 0052 E7D3     		bcc	.L92
 360:.\main.c      ****     }
 361:.\main.c      ****     
 362:.\main.c      ****     avg = sum/num_items;
 793              		.loc 1 362 0 is_stmt 1
 794 0054 FB1C     		add	r3, r7, #3
 795 0056 1B78     		ldrb	r3, [r3]
 796 0058 3869     		ldr	r0, [r7, #16]
 797 005a 191C     		mov	r1, r3
 798 005c FFF7FEFF 		bl	__aeabi_uidiv
 799 0060 031C     		mov	r3, r0
 800 0062 1A1C     		mov	r2, r3
 801 0064 3B1C     		mov	r3, r7
 802 0066 0E33     		add	r3, r3, #14
 803 0068 1A80     		strh	r2, [r3]
 363:.\main.c      ****     
 364:.\main.c      ****     return avg;
 804              		.loc 1 364 0
 805 006a 3B1C     		mov	r3, r7
 806 006c 0E33     		add	r3, r3, #14
 807 006e 1B88     		ldrh	r3, [r3]
 365:.\main.c      **** }
 808              		.loc 1 365 0
 809 0070 181C     		mov	r0, r3
 810 0072 BD46     		mov	sp, r7
 811 0074 06B0     		add	sp, sp, #24
 812              		@ sp needed
 813 0076 80BD     		pop	{r7, pc}
 814              		.cfi_endproc
 815              	.LFE43:
 816              		.size	average, .-average
 817              		.comm	servo_state,1,1
 818              		.section	.text.servo,"ax",%progbits
 819              		.align	2
 820              		.global	servo
 821              		.code	16
 822              		.thumb_func
 823              		.type	servo, %function
 824              	servo:
 825              	.LFB44:
 366:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 22


 367:.\main.c      **** enum servo_states {s_start,s_different,s_wait} servo_state;
 368:.\main.c      **** void servo()
 369:.\main.c      **** {
 826              		.loc 1 369 0
 827              		.cfi_startproc
 828 0000 80B5     		push	{r7, lr}
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 7, -8
 831              		.cfi_offset 14, -4
 832 0002 82B0     		sub	sp, sp, #8
 833              		.cfi_def_cfa_offset 16
 834 0004 00AF     		add	r7, sp, #0
 835              		.cfi_def_cfa_register 7
 370:.\main.c      ****     uint16 old = 0;
 836              		.loc 1 370 0
 837 0006 BB1D     		add	r3, r7, #6
 838 0008 0022     		mov	r2, #0
 839 000a 1A80     		strh	r2, [r3]
 371:.\main.c      ****     switch(servo_state){
 840              		.loc 1 371 0
 841 000c 1C4B     		ldr	r3, .L108
 842 000e 1B78     		ldrb	r3, [r3]
 843 0010 012B     		cmp	r3, #1
 844 0012 09D1     		bne	.L107
 372:.\main.c      ****         case s_start:
 373:.\main.c      ****             break;
 374:.\main.c      ****         
 375:.\main.c      ****         case s_different:
 376:.\main.c      ****             PWM_1_WriteCompare2(data_array[2]);
 845              		.loc 1 376 0
 846 0014 1B4B     		ldr	r3, .L108+4
 847 0016 9B88     		ldrh	r3, [r3, #4]
 848 0018 181C     		mov	r0, r3
 849 001a FFF7FEFF 		bl	PWM_1_WriteCompare2
 377:.\main.c      ****             old = data_array[2];
 850              		.loc 1 377 0
 851 001e BB1D     		add	r3, r7, #6
 852 0020 184A     		ldr	r2, .L108+4
 853 0022 9288     		ldrh	r2, [r2, #4]
 854 0024 1A80     		strh	r2, [r3]
 378:.\main.c      ****             break;
 855              		.loc 1 378 0
 856 0026 00E0     		b	.L95
 857              	.L107:
 379:.\main.c      ****             
 380:.\main.c      ****         case s_wait:
 381:.\main.c      ****             break;
 858              		.loc 1 381 0
 859 0028 C046     		mov	r8, r8
 860              	.L95:
 382:.\main.c      ****     }
 383:.\main.c      ****     
 384:.\main.c      ****     switch(servo_state){
 861              		.loc 1 384 0
 862 002a 154B     		ldr	r3, .L108
 863 002c 1B78     		ldrb	r3, [r3]
 864 002e 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 23


 865 0030 07D0     		beq	.L100
 866 0032 022B     		cmp	r3, #2
 867 0034 13D0     		beq	.L101
 868 0036 002B     		cmp	r3, #0
 869 0038 1FD1     		bne	.L94
 385:.\main.c      ****         case s_start:
 386:.\main.c      ****             servo_state = s_wait;
 870              		.loc 1 386 0
 871 003a 114B     		ldr	r3, .L108
 872 003c 0222     		mov	r2, #2
 873 003e 1A70     		strb	r2, [r3]
 387:.\main.c      ****             break;
 874              		.loc 1 387 0
 875 0040 1BE0     		b	.L94
 876              	.L100:
 388:.\main.c      ****         
 389:.\main.c      ****         case s_different:
 390:.\main.c      ****             if(data_array[2] != old)
 877              		.loc 1 390 0
 878 0042 104B     		ldr	r3, .L108+4
 879 0044 9B88     		ldrh	r3, [r3, #4]
 880 0046 BA1D     		add	r2, r7, #6
 881 0048 1288     		ldrh	r2, [r2]
 882 004a 9A42     		cmp	r2, r3
 883 004c 03D0     		beq	.L103
 391:.\main.c      ****             {
 392:.\main.c      ****                 servo_state = s_different;
 884              		.loc 1 392 0
 885 004e 0C4B     		ldr	r3, .L108
 886 0050 0122     		mov	r2, #1
 887 0052 1A70     		strb	r2, [r3]
 393:.\main.c      ****             }
 394:.\main.c      ****             else
 395:.\main.c      ****             {
 396:.\main.c      ****                 servo_state = s_wait;
 397:.\main.c      ****             }
 398:.\main.c      ****             break;
 888              		.loc 1 398 0
 889 0054 11E0     		b	.L94
 890              	.L103:
 396:.\main.c      ****                 servo_state = s_wait;
 891              		.loc 1 396 0
 892 0056 0A4B     		ldr	r3, .L108
 893 0058 0222     		mov	r2, #2
 894 005a 1A70     		strb	r2, [r3]
 895              		.loc 1 398 0
 896 005c 0DE0     		b	.L94
 897              	.L101:
 399:.\main.c      ****             
 400:.\main.c      ****         case s_wait:
 401:.\main.c      ****             if(data_array[2] != old)
 898              		.loc 1 401 0
 899 005e 094B     		ldr	r3, .L108+4
 900 0060 9B88     		ldrh	r3, [r3, #4]
 901 0062 BA1D     		add	r2, r7, #6
 902 0064 1288     		ldrh	r2, [r2]
 903 0066 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 24


 904 0068 03D0     		beq	.L105
 402:.\main.c      ****             {
 403:.\main.c      ****                 servo_state = s_different;
 905              		.loc 1 403 0
 906 006a 054B     		ldr	r3, .L108
 907 006c 0122     		mov	r2, #1
 908 006e 1A70     		strb	r2, [r3]
 909 0070 02E0     		b	.L106
 910              	.L105:
 404:.\main.c      ****             }
 405:.\main.c      ****             else
 406:.\main.c      ****             {
 407:.\main.c      ****                 servo_state = s_wait;
 911              		.loc 1 407 0
 912 0072 034B     		ldr	r3, .L108
 913 0074 0222     		mov	r2, #2
 914 0076 1A70     		strb	r2, [r3]
 915              	.L106:
 408:.\main.c      ****             }
 409:.\main.c      ****             break;
 916              		.loc 1 409 0
 917 0078 C046     		mov	r8, r8
 918              	.L94:
 410:.\main.c      ****     }    
 411:.\main.c      **** }
 919              		.loc 1 411 0
 920 007a BD46     		mov	sp, r7
 921 007c 02B0     		add	sp, sp, #8
 922              		@ sp needed
 923 007e 80BD     		pop	{r7, pc}
 924              	.L109:
 925              		.align	2
 926              	.L108:
 927 0080 00000000 		.word	servo_state
 928 0084 00000000 		.word	data_array
 929              		.cfi_endproc
 930              	.LFE44:
 931              		.size	servo, .-servo
 932              		.comm	servo1_state,1,1
 933              		.section	.text.servo1,"ax",%progbits
 934              		.align	2
 935              		.global	servo1
 936              		.code	16
 937              		.thumb_func
 938              		.type	servo1, %function
 939              	servo1:
 940              	.LFB45:
 412:.\main.c      **** 
 413:.\main.c      **** //New servo design
 414:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 415:.\main.c      **** enum servo1_states {s1_start,s1_init,s1_execute,s1_wait} servo1_state;
 416:.\main.c      **** void servo1()
 417:.\main.c      **** { 
 941              		.loc 1 417 0
 942              		.cfi_startproc
 943 0000 90B5     		push	{r4, r7, lr}
 944              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 25


 945              		.cfi_offset 4, -12
 946              		.cfi_offset 7, -8
 947              		.cfi_offset 14, -4
 948 0002 83B0     		sub	sp, sp, #12
 949              		.cfi_def_cfa_offset 24
 950 0004 00AF     		add	r7, sp, #0
 951              		.cfi_def_cfa_register 7
 418:.\main.c      ****     uint8 i;
 419:.\main.c      ****     uint16 avg;
 420:.\main.c      ****     uint16 command;
 421:.\main.c      ****     
 422:.\main.c      ****     switch(servo1_state){ //actions
 952              		.loc 1 422 0
 953 0006 444B     		ldr	r3, .L133
 954 0008 1B78     		ldrb	r3, [r3]
 955 000a 012B     		cmp	r3, #1
 956 000c 03D0     		beq	.L112
 957 000e 51DD     		ble	.L132
 958 0010 022B     		cmp	r3, #2
 959 0012 17D0     		beq	.L115
 423:.\main.c      ****         case s1_start:
 424:.\main.c      ****             break;
 425:.\main.c      **** 
 426:.\main.c      ****         case s1_init:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 428:.\main.c      ****             {
 429:.\main.c      ****                 servo_array[i] = 1500;
 430:.\main.c      ****             }
 431:.\main.c      ****             serv_arr_cspot = 0;
 432:.\main.c      ****             break;
 433:.\main.c      **** 
 434:.\main.c      ****         case s1_execute:
 435:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 436:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 437:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 438:.\main.c      ****             {
 439:.\main.c      ****                 serv_arr_cspot++;
 440:.\main.c      ****             }
 441:.\main.c      ****             else
 442:.\main.c      ****             {
 443:.\main.c      ****                 serv_arr_cspot = 0;
 444:.\main.c      ****             }
 445:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 446:.\main.c      ****             //servo_array[serv_avg_count] = data_array[2];
 447:.\main.c      ****             PWM_1_WriteCompare2(avg);
 448:.\main.c      ****             //new_pack = 0;
 449:.\main.c      ****             fin_exec++;
 450:.\main.c      ****             break;
 451:.\main.c      ****             
 452:.\main.c      ****         case s1_wait:
 453:.\main.c      ****             break;
 960              		.loc 1 453 0
 961 0014 4FE0     		b	.L111
 962              	.L112:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 963              		.loc 1 427 0
 964 0016 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 26


 965 0018 0022     		mov	r2, #0
 966 001a 1A70     		strb	r2, [r3]
 967 001c 0AE0     		b	.L117
 968              	.L118:
 429:.\main.c      ****                 servo_array[i] = 1500;
 969              		.loc 1 429 0 discriminator 2
 970 001e FB1D     		add	r3, r7, #7
 971 0020 1A78     		ldrb	r2, [r3]
 972 0022 3E4B     		ldr	r3, .L133+4
 973 0024 5200     		lsl	r2, r2, #1
 974 0026 3E49     		ldr	r1, .L133+8
 975 0028 D152     		strh	r1, [r2, r3]
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 976              		.loc 1 427 0 discriminator 2
 977 002a FB1D     		add	r3, r7, #7
 978 002c 1A78     		ldrb	r2, [r3]
 979 002e FB1D     		add	r3, r7, #7
 980 0030 0132     		add	r2, r2, #1
 981 0032 1A70     		strb	r2, [r3]
 982              	.L117:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 983              		.loc 1 427 0 is_stmt 0 discriminator 1
 984 0034 FB1D     		add	r3, r7, #7
 985 0036 1B78     		ldrb	r3, [r3]
 986 0038 132B     		cmp	r3, #19
 987 003a F0D9     		bls	.L118
 431:.\main.c      ****             serv_arr_cspot = 0;
 988              		.loc 1 431 0 is_stmt 1
 989 003c 394B     		ldr	r3, .L133+12
 990 003e 0022     		mov	r2, #0
 991 0040 1A70     		strb	r2, [r3]
 432:.\main.c      ****             break;
 992              		.loc 1 432 0
 993 0042 38E0     		b	.L111
 994              	.L115:
 435:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 995              		.loc 1 435 0
 996 0044 384B     		ldr	r3, .L133+16
 997 0046 9B88     		ldrh	r3, [r3, #4]
 998 0048 1A02     		lsl	r2, r3, #8
 999 004a 374B     		ldr	r3, .L133+16
 1000 004c DB88     		ldrh	r3, [r3, #6]
 1001 004e 1343     		orr	r3, r2
 1002 0050 00D5     		bpl	.L119
 1003 0052 0133     		add	r3, r3, #1
 1004              	.L119:
 1005 0054 5B10     		asr	r3, r3, #1
 1006 0056 9AB2     		uxth	r2, r3
 1007 0058 3B1D     		add	r3, r7, #4
 1008 005a 3149     		ldr	r1, .L133+8
 1009 005c 5218     		add	r2, r2, r1
 1010 005e 1A80     		strh	r2, [r3]
 436:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 1011              		.loc 1 436 0
 1012 0060 304B     		ldr	r3, .L133+12
 1013 0062 1B78     		ldrb	r3, [r3]
 1014 0064 1A1C     		mov	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 27


 1015 0066 2D4B     		ldr	r3, .L133+4
 1016 0068 5200     		lsl	r2, r2, #1
 1017 006a 391D     		add	r1, r7, #4
 1018 006c 0988     		ldrh	r1, [r1]
 1019 006e D152     		strh	r1, [r2, r3]
 437:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 1020              		.loc 1 437 0
 1021 0070 2C4B     		ldr	r3, .L133+12
 1022 0072 1B78     		ldrb	r3, [r3]
 1023 0074 122B     		cmp	r3, #18
 1024 0076 06D8     		bhi	.L120
 439:.\main.c      ****                 serv_arr_cspot++;
 1025              		.loc 1 439 0
 1026 0078 2A4B     		ldr	r3, .L133+12
 1027 007a 1B78     		ldrb	r3, [r3]
 1028 007c 0133     		add	r3, r3, #1
 1029 007e DAB2     		uxtb	r2, r3
 1030 0080 284B     		ldr	r3, .L133+12
 1031 0082 1A70     		strb	r2, [r3]
 1032 0084 02E0     		b	.L121
 1033              	.L120:
 443:.\main.c      ****                 serv_arr_cspot = 0;
 1034              		.loc 1 443 0
 1035 0086 274B     		ldr	r3, .L133+12
 1036 0088 0022     		mov	r2, #0
 1037 008a 1A70     		strb	r2, [r3]
 1038              	.L121:
 445:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 1039              		.loc 1 445 0
 1040 008c BC1C     		add	r4, r7, #2
 1041 008e 234B     		ldr	r3, .L133+4
 1042 0090 181C     		mov	r0, r3
 1043 0092 1421     		mov	r1, #20
 1044 0094 FFF7FEFF 		bl	average
 1045 0098 031C     		mov	r3, r0
 1046 009a 2380     		strh	r3, [r4]
 447:.\main.c      ****             PWM_1_WriteCompare2(avg);
 1047              		.loc 1 447 0
 1048 009c BB1C     		add	r3, r7, #2
 1049 009e 1B88     		ldrh	r3, [r3]
 1050 00a0 181C     		mov	r0, r3
 1051 00a2 FFF7FEFF 		bl	PWM_1_WriteCompare2
 449:.\main.c      ****             fin_exec++;
 1052              		.loc 1 449 0
 1053 00a6 214B     		ldr	r3, .L133+20
 1054 00a8 1B78     		ldrb	r3, [r3]
 1055 00aa 0133     		add	r3, r3, #1
 1056 00ac DAB2     		uxtb	r2, r3
 1057 00ae 1F4B     		ldr	r3, .L133+20
 1058 00b0 1A70     		strb	r2, [r3]
 450:.\main.c      ****             break;
 1059              		.loc 1 450 0
 1060 00b2 00E0     		b	.L111
 1061              	.L132:
 424:.\main.c      ****             break;
 1062              		.loc 1 424 0
 1063 00b4 C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 28


 1064              	.L111:
 454:.\main.c      ****     }
 455:.\main.c      ****     
 456:.\main.c      ****     switch(servo1_state){ //transitions
 1065              		.loc 1 456 0
 1066 00b6 184B     		ldr	r3, .L133
 1067 00b8 1B78     		ldrb	r3, [r3]
 1068 00ba 012B     		cmp	r3, #1
 1069 00bc 0CD0     		beq	.L123
 1070 00be 02DC     		bgt	.L124
 1071 00c0 002B     		cmp	r3, #0
 1072 00c2 05D0     		beq	.L125
 1073 00c4 24E0     		b	.L110
 1074              	.L124:
 1075 00c6 022B     		cmp	r3, #2
 1076 00c8 0AD0     		beq	.L126
 1077 00ca 032B     		cmp	r3, #3
 1078 00cc 14D0     		beq	.L127
 1079 00ce 1FE0     		b	.L110
 1080              	.L125:
 457:.\main.c      ****         case s1_start:
 458:.\main.c      ****             servo1_state = s1_init;
 1081              		.loc 1 458 0
 1082 00d0 114B     		ldr	r3, .L133
 1083 00d2 0122     		mov	r2, #1
 1084 00d4 1A70     		strb	r2, [r3]
 459:.\main.c      ****             break;
 1085              		.loc 1 459 0
 1086 00d6 1BE0     		b	.L110
 1087              	.L123:
 460:.\main.c      ****         
 461:.\main.c      ****         case s1_init:
 462:.\main.c      ****             servo1_state = s1_wait;
 1088              		.loc 1 462 0
 1089 00d8 0F4B     		ldr	r3, .L133
 1090 00da 0322     		mov	r2, #3
 1091 00dc 1A70     		strb	r2, [r3]
 463:.\main.c      ****             break;
 1092              		.loc 1 463 0
 1093 00de 17E0     		b	.L110
 1094              	.L126:
 464:.\main.c      ****         
 465:.\main.c      ****         case s1_execute:
 466:.\main.c      ****             if(new_pack)
 1095              		.loc 1 466 0
 1096 00e0 134B     		ldr	r3, .L133+24
 1097 00e2 1B78     		ldrb	r3, [r3]
 1098 00e4 002B     		cmp	r3, #0
 1099 00e6 03D0     		beq	.L128
 467:.\main.c      ****             {
 468:.\main.c      ****                 servo1_state = s1_execute;
 1100              		.loc 1 468 0
 1101 00e8 0B4B     		ldr	r3, .L133
 1102 00ea 0222     		mov	r2, #2
 1103 00ec 1A70     		strb	r2, [r3]
 469:.\main.c      ****             }
 470:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 29


 471:.\main.c      ****             {
 472:.\main.c      ****                 servo1_state = s1_wait;
 473:.\main.c      ****             }
 474:.\main.c      ****             break;
 1104              		.loc 1 474 0
 1105 00ee 0FE0     		b	.L110
 1106              	.L128:
 472:.\main.c      ****                 servo1_state = s1_wait;
 1107              		.loc 1 472 0
 1108 00f0 094B     		ldr	r3, .L133
 1109 00f2 0322     		mov	r2, #3
 1110 00f4 1A70     		strb	r2, [r3]
 1111              		.loc 1 474 0
 1112 00f6 0BE0     		b	.L110
 1113              	.L127:
 475:.\main.c      ****         
 476:.\main.c      ****         case s1_wait:
 477:.\main.c      ****             if(new_pack)
 1114              		.loc 1 477 0
 1115 00f8 0D4B     		ldr	r3, .L133+24
 1116 00fa 1B78     		ldrb	r3, [r3]
 1117 00fc 002B     		cmp	r3, #0
 1118 00fe 03D0     		beq	.L130
 478:.\main.c      ****             {
 479:.\main.c      ****                 servo1_state = s1_execute;
 1119              		.loc 1 479 0
 1120 0100 054B     		ldr	r3, .L133
 1121 0102 0222     		mov	r2, #2
 1122 0104 1A70     		strb	r2, [r3]
 1123 0106 02E0     		b	.L131
 1124              	.L130:
 480:.\main.c      ****             }
 481:.\main.c      ****             else
 482:.\main.c      ****             {
 483:.\main.c      ****                 servo1_state = s1_wait; 
 1125              		.loc 1 483 0
 1126 0108 034B     		ldr	r3, .L133
 1127 010a 0322     		mov	r2, #3
 1128 010c 1A70     		strb	r2, [r3]
 1129              	.L131:
 484:.\main.c      ****             }
 485:.\main.c      ****             break;
 1130              		.loc 1 485 0
 1131 010e C046     		mov	r8, r8
 1132              	.L110:
 486:.\main.c      ****     }    
 487:.\main.c      **** }
 1133              		.loc 1 487 0
 1134 0110 BD46     		mov	sp, r7
 1135 0112 03B0     		add	sp, sp, #12
 1136              		@ sp needed
 1137 0114 90BD     		pop	{r4, r7, pc}
 1138              	.L134:
 1139 0116 C046     		.align	2
 1140              	.L133:
 1141 0118 00000000 		.word	servo1_state
 1142 011c 00000000 		.word	servo_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 30


 1143 0120 DC050000 		.word	1500
 1144 0124 00000000 		.word	serv_arr_cspot
 1145 0128 00000000 		.word	data_array
 1146 012c 00000000 		.word	fin_exec
 1147 0130 00000000 		.word	new_pack
 1148              		.cfi_endproc
 1149              	.LFE45:
 1150              		.size	servo1, .-servo1
 1151              		.section	.text.led_adjust,"ax",%progbits
 1152              		.align	2
 1153              		.global	led_adjust
 1154              		.code	16
 1155              		.thumb_func
 1156              		.type	led_adjust, %function
 1157              	led_adjust:
 1158              	.LFB46:
 488:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 489:.\main.c      **** 
 490:.\main.c      **** uint16 led_adjust(uint16 raw)
 491:.\main.c      **** {
 1159              		.loc 1 491 0
 1160              		.cfi_startproc
 1161 0000 80B5     		push	{r7, lr}
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 7, -8
 1164              		.cfi_offset 14, -4
 1165 0002 84B0     		sub	sp, sp, #16
 1166              		.cfi_def_cfa_offset 24
 1167 0004 00AF     		add	r7, sp, #0
 1168              		.cfi_def_cfa_register 7
 1169 0006 021C     		mov	r2, r0
 1170 0008 BB1D     		add	r3, r7, #6
 1171 000a 1A80     		strh	r2, [r3]
 492:.\main.c      ****     uint16 new_val;
 493:.\main.c      ****     if(raw <= 1250)
 1172              		.loc 1 493 0
 1173 000c BB1D     		add	r3, r7, #6
 1174 000e 1A88     		ldrh	r2, [r3]
 1175 0010 194B     		ldr	r3, .L142
 1176 0012 9A42     		cmp	r2, r3
 1177 0014 05D8     		bhi	.L136
 494:.\main.c      ****     {
 495:.\main.c      ****         new_val = 1000;
 1178              		.loc 1 495 0
 1179 0016 3B1C     		mov	r3, r7
 1180 0018 0E33     		add	r3, r3, #14
 1181 001a FA22     		mov	r2, #250
 1182 001c 9200     		lsl	r2, r2, #2
 1183 001e 1A80     		strh	r2, [r3]
 1184 0020 22E0     		b	.L137
 1185              	.L136:
 496:.\main.c      ****     }
 497:.\main.c      ****     else if(raw <= 1500)
 1186              		.loc 1 497 0
 1187 0022 BB1D     		add	r3, r7, #6
 1188 0024 1A88     		ldrh	r2, [r3]
 1189 0026 154B     		ldr	r3, .L142+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 31


 1190 0028 9A42     		cmp	r2, r3
 1191 002a 04D8     		bhi	.L138
 498:.\main.c      ****     {
 499:.\main.c      ****         new_val = 5000;
 1192              		.loc 1 499 0
 1193 002c 3B1C     		mov	r3, r7
 1194 002e 0E33     		add	r3, r3, #14
 1195 0030 134A     		ldr	r2, .L142+8
 1196 0032 1A80     		strh	r2, [r3]
 1197 0034 18E0     		b	.L137
 1198              	.L138:
 500:.\main.c      ****     }
 501:.\main.c      ****     else if(raw <= 1750)
 1199              		.loc 1 501 0
 1200 0036 BB1D     		add	r3, r7, #6
 1201 0038 1A88     		ldrh	r2, [r3]
 1202 003a 124B     		ldr	r3, .L142+12
 1203 003c 9A42     		cmp	r2, r3
 1204 003e 04D8     		bhi	.L139
 502:.\main.c      ****     {
 503:.\main.c      ****         new_val = 10000;
 1205              		.loc 1 503 0
 1206 0040 3B1C     		mov	r3, r7
 1207 0042 0E33     		add	r3, r3, #14
 1208 0044 104A     		ldr	r2, .L142+16
 1209 0046 1A80     		strh	r2, [r3]
 1210 0048 0EE0     		b	.L137
 1211              	.L139:
 504:.\main.c      ****     }
 505:.\main.c      ****     else if(raw <= 2000)
 1212              		.loc 1 505 0
 1213 004a BB1D     		add	r3, r7, #6
 1214 004c 1A88     		ldrh	r2, [r3]
 1215 004e FA23     		mov	r3, #250
 1216 0050 DB00     		lsl	r3, r3, #3
 1217 0052 9A42     		cmp	r2, r3
 1218 0054 04D8     		bhi	.L140
 506:.\main.c      ****     {
 507:.\main.c      ****         new_val = 15000;
 1219              		.loc 1 507 0
 1220 0056 3B1C     		mov	r3, r7
 1221 0058 0E33     		add	r3, r3, #14
 1222 005a 0C4A     		ldr	r2, .L142+20
 1223 005c 1A80     		strh	r2, [r3]
 1224 005e 03E0     		b	.L137
 1225              	.L140:
 508:.\main.c      ****     }
 509:.\main.c      ****     else
 510:.\main.c      ****     {
 511:.\main.c      ****         new_val = 0;
 1226              		.loc 1 511 0
 1227 0060 3B1C     		mov	r3, r7
 1228 0062 0E33     		add	r3, r3, #14
 1229 0064 0022     		mov	r2, #0
 1230 0066 1A80     		strh	r2, [r3]
 1231              	.L137:
 512:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 32


 513:.\main.c      ****     return new_val;
 1232              		.loc 1 513 0
 1233 0068 3B1C     		mov	r3, r7
 1234 006a 0E33     		add	r3, r3, #14
 1235 006c 1B88     		ldrh	r3, [r3]
 514:.\main.c      **** }
 1236              		.loc 1 514 0
 1237 006e 181C     		mov	r0, r3
 1238 0070 BD46     		mov	sp, r7
 1239 0072 04B0     		add	sp, sp, #16
 1240              		@ sp needed
 1241 0074 80BD     		pop	{r7, pc}
 1242              	.L143:
 1243 0076 C046     		.align	2
 1244              	.L142:
 1245 0078 E2040000 		.word	1250
 1246 007c DC050000 		.word	1500
 1247 0080 88130000 		.word	5000
 1248 0084 D6060000 		.word	1750
 1249 0088 10270000 		.word	10000
 1250 008c 983A0000 		.word	15000
 1251              		.cfi_endproc
 1252              	.LFE46:
 1253              		.size	led_adjust, .-led_adjust
 1254              		.comm	led1_state,1,1
 1255              		.section	.text.led1,"ax",%progbits
 1256              		.align	2
 1257              		.global	led1
 1258              		.code	16
 1259              		.thumb_func
 1260              		.type	led1, %function
 1261              	led1:
 1262              	.LFB47:
 515:.\main.c      **** 
 516:.\main.c      **** //New led design
 517:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 518:.\main.c      **** enum led1_states {l1_start,l1_init,l1_execute,l1_wait} led1_state;
 519:.\main.c      **** void led1()
 520:.\main.c      **** { 
 1263              		.loc 1 520 0
 1264              		.cfi_startproc
 1265 0000 90B5     		push	{r4, r7, lr}
 1266              		.cfi_def_cfa_offset 12
 1267              		.cfi_offset 4, -12
 1268              		.cfi_offset 7, -8
 1269              		.cfi_offset 14, -4
 1270 0002 83B0     		sub	sp, sp, #12
 1271              		.cfi_def_cfa_offset 24
 1272 0004 00AF     		add	r7, sp, #0
 1273              		.cfi_def_cfa_register 7
 521:.\main.c      ****     uint8 i;
 522:.\main.c      ****     uint16 avg;
 523:.\main.c      ****     uint16 command;
 524:.\main.c      ****     
 525:.\main.c      ****     switch(led1_state){ //actions
 1274              		.loc 1 525 0
 1275 0006 464B     		ldr	r3, .L167
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 33


 1276 0008 1B78     		ldrb	r3, [r3]
 1277 000a 012B     		cmp	r3, #1
 1278 000c 03D0     		beq	.L146
 1279 000e 55DD     		ble	.L166
 1280 0010 022B     		cmp	r3, #2
 1281 0012 17D0     		beq	.L149
 526:.\main.c      ****         case l1_start:
 527:.\main.c      ****             break;
 528:.\main.c      **** 
 529:.\main.c      ****         case l1_init:
 530:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 531:.\main.c      ****             {
 532:.\main.c      ****                 led_array[i] = 1500;
 533:.\main.c      ****             }
 534:.\main.c      ****             led_arr_cspot = 0;
 535:.\main.c      ****             break;
 536:.\main.c      **** 
 537:.\main.c      ****         case l1_execute:
 538:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 539:.\main.c      ****             led_array[led_arr_cspot] = command;
 540:.\main.c      ****             if(led_arr_cspot < (LED_ARR_SIZE - 1))
 541:.\main.c      ****             {
 542:.\main.c      ****                 led_arr_cspot++;
 543:.\main.c      ****             }
 544:.\main.c      ****             else
 545:.\main.c      ****             {
 546:.\main.c      ****                 led_arr_cspot = 0;
 547:.\main.c      ****             }
 548:.\main.c      ****             avg = average(led_array, LED_ARR_SIZE);
 549:.\main.c      ****             
 550:.\main.c      ****             PWM_1_WriteCompare1(led_adjust(avg));
 551:.\main.c      ****             fin_exec++;
 552:.\main.c      ****             break;
 553:.\main.c      ****             
 554:.\main.c      ****         case l1_wait:
 555:.\main.c      ****             break;
 1282              		.loc 1 555 0
 1283 0014 53E0     		b	.L145
 1284              	.L146:
 530:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1285              		.loc 1 530 0
 1286 0016 FB1D     		add	r3, r7, #7
 1287 0018 0022     		mov	r2, #0
 1288 001a 1A70     		strb	r2, [r3]
 1289 001c 0AE0     		b	.L151
 1290              	.L152:
 532:.\main.c      ****                 led_array[i] = 1500;
 1291              		.loc 1 532 0 discriminator 2
 1292 001e FB1D     		add	r3, r7, #7
 1293 0020 1A78     		ldrb	r2, [r3]
 1294 0022 404B     		ldr	r3, .L167+4
 1295 0024 5200     		lsl	r2, r2, #1
 1296 0026 4049     		ldr	r1, .L167+8
 1297 0028 D152     		strh	r1, [r2, r3]
 530:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1298              		.loc 1 530 0 discriminator 2
 1299 002a FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 34


 1300 002c 1A78     		ldrb	r2, [r3]
 1301 002e FB1D     		add	r3, r7, #7
 1302 0030 0132     		add	r2, r2, #1
 1303 0032 1A70     		strb	r2, [r3]
 1304              	.L151:
 530:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1305              		.loc 1 530 0 is_stmt 0 discriminator 1
 1306 0034 FB1D     		add	r3, r7, #7
 1307 0036 1B78     		ldrb	r3, [r3]
 1308 0038 132B     		cmp	r3, #19
 1309 003a F0D9     		bls	.L152
 534:.\main.c      ****             led_arr_cspot = 0;
 1310              		.loc 1 534 0 is_stmt 1
 1311 003c 3B4B     		ldr	r3, .L167+12
 1312 003e 0022     		mov	r2, #0
 1313 0040 1A70     		strb	r2, [r3]
 535:.\main.c      ****             break;
 1314              		.loc 1 535 0
 1315 0042 3CE0     		b	.L145
 1316              	.L149:
 538:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 1317              		.loc 1 538 0
 1318 0044 3A4B     		ldr	r3, .L167+16
 1319 0046 1B89     		ldrh	r3, [r3, #8]
 1320 0048 1A02     		lsl	r2, r3, #8
 1321 004a 394B     		ldr	r3, .L167+16
 1322 004c 5B89     		ldrh	r3, [r3, #10]
 1323 004e 1343     		orr	r3, r2
 1324 0050 00D5     		bpl	.L153
 1325 0052 0133     		add	r3, r3, #1
 1326              	.L153:
 1327 0054 5B10     		asr	r3, r3, #1
 1328 0056 9AB2     		uxth	r2, r3
 1329 0058 3B1D     		add	r3, r7, #4
 1330 005a 3349     		ldr	r1, .L167+8
 1331 005c 5218     		add	r2, r2, r1
 1332 005e 1A80     		strh	r2, [r3]
 539:.\main.c      ****             led_array[led_arr_cspot] = command;
 1333              		.loc 1 539 0
 1334 0060 324B     		ldr	r3, .L167+12
 1335 0062 1B78     		ldrb	r3, [r3]
 1336 0064 1A1C     		mov	r2, r3
 1337 0066 2F4B     		ldr	r3, .L167+4
 1338 0068 5200     		lsl	r2, r2, #1
 1339 006a 391D     		add	r1, r7, #4
 1340 006c 0988     		ldrh	r1, [r1]
 1341 006e D152     		strh	r1, [r2, r3]
 540:.\main.c      ****             if(led_arr_cspot < (LED_ARR_SIZE - 1))
 1342              		.loc 1 540 0
 1343 0070 2E4B     		ldr	r3, .L167+12
 1344 0072 1B78     		ldrb	r3, [r3]
 1345 0074 122B     		cmp	r3, #18
 1346 0076 06D8     		bhi	.L154
 542:.\main.c      ****                 led_arr_cspot++;
 1347              		.loc 1 542 0
 1348 0078 2C4B     		ldr	r3, .L167+12
 1349 007a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 35


 1350 007c 0133     		add	r3, r3, #1
 1351 007e DAB2     		uxtb	r2, r3
 1352 0080 2A4B     		ldr	r3, .L167+12
 1353 0082 1A70     		strb	r2, [r3]
 1354 0084 02E0     		b	.L155
 1355              	.L154:
 546:.\main.c      ****                 led_arr_cspot = 0;
 1356              		.loc 1 546 0
 1357 0086 294B     		ldr	r3, .L167+12
 1358 0088 0022     		mov	r2, #0
 1359 008a 1A70     		strb	r2, [r3]
 1360              	.L155:
 548:.\main.c      ****             avg = average(led_array, LED_ARR_SIZE);
 1361              		.loc 1 548 0
 1362 008c BC1C     		add	r4, r7, #2
 1363 008e 254B     		ldr	r3, .L167+4
 1364 0090 181C     		mov	r0, r3
 1365 0092 1421     		mov	r1, #20
 1366 0094 FFF7FEFF 		bl	average
 1367 0098 031C     		mov	r3, r0
 1368 009a 2380     		strh	r3, [r4]
 550:.\main.c      ****             PWM_1_WriteCompare1(led_adjust(avg));
 1369              		.loc 1 550 0
 1370 009c BB1C     		add	r3, r7, #2
 1371 009e 1B88     		ldrh	r3, [r3]
 1372 00a0 181C     		mov	r0, r3
 1373 00a2 FFF7FEFF 		bl	led_adjust
 1374 00a6 031C     		mov	r3, r0
 1375 00a8 181C     		mov	r0, r3
 1376 00aa FFF7FEFF 		bl	PWM_1_WriteCompare1
 551:.\main.c      ****             fin_exec++;
 1377              		.loc 1 551 0
 1378 00ae 214B     		ldr	r3, .L167+20
 1379 00b0 1B78     		ldrb	r3, [r3]
 1380 00b2 0133     		add	r3, r3, #1
 1381 00b4 DAB2     		uxtb	r2, r3
 1382 00b6 1F4B     		ldr	r3, .L167+20
 1383 00b8 1A70     		strb	r2, [r3]
 552:.\main.c      ****             break;
 1384              		.loc 1 552 0
 1385 00ba 00E0     		b	.L145
 1386              	.L166:
 527:.\main.c      ****             break;
 1387              		.loc 1 527 0
 1388 00bc C046     		mov	r8, r8
 1389              	.L145:
 556:.\main.c      ****     }
 557:.\main.c      ****     
 558:.\main.c      ****     switch(led1_state){ //transitions
 1390              		.loc 1 558 0
 1391 00be 184B     		ldr	r3, .L167
 1392 00c0 1B78     		ldrb	r3, [r3]
 1393 00c2 012B     		cmp	r3, #1
 1394 00c4 0CD0     		beq	.L157
 1395 00c6 02DC     		bgt	.L158
 1396 00c8 002B     		cmp	r3, #0
 1397 00ca 05D0     		beq	.L159
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 36


 1398 00cc 24E0     		b	.L144
 1399              	.L158:
 1400 00ce 022B     		cmp	r3, #2
 1401 00d0 0AD0     		beq	.L160
 1402 00d2 032B     		cmp	r3, #3
 1403 00d4 14D0     		beq	.L161
 1404 00d6 1FE0     		b	.L144
 1405              	.L159:
 559:.\main.c      ****         case l1_start:
 560:.\main.c      ****             led1_state = l1_init;
 1406              		.loc 1 560 0
 1407 00d8 114B     		ldr	r3, .L167
 1408 00da 0122     		mov	r2, #1
 1409 00dc 1A70     		strb	r2, [r3]
 561:.\main.c      ****             break;
 1410              		.loc 1 561 0
 1411 00de 1BE0     		b	.L144
 1412              	.L157:
 562:.\main.c      ****         
 563:.\main.c      ****         case l1_init:
 564:.\main.c      ****             led1_state = l1_wait;
 1413              		.loc 1 564 0
 1414 00e0 0F4B     		ldr	r3, .L167
 1415 00e2 0322     		mov	r2, #3
 1416 00e4 1A70     		strb	r2, [r3]
 565:.\main.c      ****             break;
 1417              		.loc 1 565 0
 1418 00e6 17E0     		b	.L144
 1419              	.L160:
 566:.\main.c      ****         
 567:.\main.c      ****         case l1_execute:
 568:.\main.c      ****             if(new_pack)
 1420              		.loc 1 568 0
 1421 00e8 134B     		ldr	r3, .L167+24
 1422 00ea 1B78     		ldrb	r3, [r3]
 1423 00ec 002B     		cmp	r3, #0
 1424 00ee 03D0     		beq	.L162
 569:.\main.c      ****             {
 570:.\main.c      ****                 led1_state = l1_execute;
 1425              		.loc 1 570 0
 1426 00f0 0B4B     		ldr	r3, .L167
 1427 00f2 0222     		mov	r2, #2
 1428 00f4 1A70     		strb	r2, [r3]
 571:.\main.c      ****             }
 572:.\main.c      ****             else
 573:.\main.c      ****             {
 574:.\main.c      ****                 led1_state = l1_wait;
 575:.\main.c      ****             }
 576:.\main.c      ****             break;
 1429              		.loc 1 576 0
 1430 00f6 0FE0     		b	.L144
 1431              	.L162:
 574:.\main.c      ****                 led1_state = l1_wait;
 1432              		.loc 1 574 0
 1433 00f8 094B     		ldr	r3, .L167
 1434 00fa 0322     		mov	r2, #3
 1435 00fc 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 37


 1436              		.loc 1 576 0
 1437 00fe 0BE0     		b	.L144
 1438              	.L161:
 577:.\main.c      ****         
 578:.\main.c      ****         case l1_wait:
 579:.\main.c      ****             if(new_pack)
 1439              		.loc 1 579 0
 1440 0100 0D4B     		ldr	r3, .L167+24
 1441 0102 1B78     		ldrb	r3, [r3]
 1442 0104 002B     		cmp	r3, #0
 1443 0106 03D0     		beq	.L164
 580:.\main.c      ****             {
 581:.\main.c      ****                 led1_state = l1_execute;
 1444              		.loc 1 581 0
 1445 0108 054B     		ldr	r3, .L167
 1446 010a 0222     		mov	r2, #2
 1447 010c 1A70     		strb	r2, [r3]
 1448 010e 02E0     		b	.L165
 1449              	.L164:
 582:.\main.c      ****             }
 583:.\main.c      ****             else
 584:.\main.c      ****             {
 585:.\main.c      ****                 led1_state = l1_wait; 
 1450              		.loc 1 585 0
 1451 0110 034B     		ldr	r3, .L167
 1452 0112 0322     		mov	r2, #3
 1453 0114 1A70     		strb	r2, [r3]
 1454              	.L165:
 586:.\main.c      ****             }
 587:.\main.c      ****             break;
 1455              		.loc 1 587 0
 1456 0116 C046     		mov	r8, r8
 1457              	.L144:
 588:.\main.c      ****     }    
 589:.\main.c      **** }
 1458              		.loc 1 589 0
 1459 0118 BD46     		mov	sp, r7
 1460 011a 03B0     		add	sp, sp, #12
 1461              		@ sp needed
 1462 011c 90BD     		pop	{r4, r7, pc}
 1463              	.L168:
 1464 011e C046     		.align	2
 1465              	.L167:
 1466 0120 00000000 		.word	led1_state
 1467 0124 00000000 		.word	led_array
 1468 0128 DC050000 		.word	1500
 1469 012c 00000000 		.word	led_arr_cspot
 1470 0130 00000000 		.word	data_array
 1471 0134 00000000 		.word	fin_exec
 1472 0138 00000000 		.word	new_pack
 1473              		.cfi_endproc
 1474              	.LFE47:
 1475              		.size	led1, .-led1
 1476              		.comm	motor_state,1,1
 1477              		.section	.text.motor,"ax",%progbits
 1478              		.align	2
 1479              		.global	motor
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 38


 1480              		.code	16
 1481              		.thumb_func
 1482              		.type	motor, %function
 1483              	motor:
 1484              	.LFB48:
 590:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 591:.\main.c      **** 
 592:.\main.c      **** 
 593:.\main.c      **** enum motor_states {m_start,m_different,m_wait} motor_state;
 594:.\main.c      **** void motor(){
 1485              		.loc 1 594 0
 1486              		.cfi_startproc
 1487 0000 80B5     		push	{r7, lr}
 1488              		.cfi_def_cfa_offset 8
 1489              		.cfi_offset 7, -8
 1490              		.cfi_offset 14, -4
 1491 0002 00AF     		add	r7, sp, #0
 1492              		.cfi_def_cfa_register 7
 595:.\main.c      **** //    uint16 old = 0;
 596:.\main.c      **** //    switch(motor_state){ //state actions
 597:.\main.c      **** //        case m_start:
 598:.\main.c      **** //            break;
 599:.\main.c      **** //        
 600:.\main.c      **** //        case m_different:
 601:.\main.c      **** //            PWM_2_WriteCompare1(data_array[1]);
 602:.\main.c      **** //            old = data_array[3];
 603:.\main.c      **** //            break;
 604:.\main.c      **** //            
 605:.\main.c      **** //        case m_wait:
 606:.\main.c      **** //            break;
 607:.\main.c      **** //    }
 608:.\main.c      **** //    
 609:.\main.c      **** //    switch(motor_state){ //state transitions
 610:.\main.c      **** //        case m_start:
 611:.\main.c      **** //            motor_state = m_wait;
 612:.\main.c      **** //            break;
 613:.\main.c      **** //        
 614:.\main.c      **** //        case m_different:
 615:.\main.c      **** //            if(data_array[3] != old)
 616:.\main.c      **** //            {
 617:.\main.c      **** //                motor_state = m_different;
 618:.\main.c      **** //            }
 619:.\main.c      **** //            else
 620:.\main.c      **** //            {
 621:.\main.c      **** //                motor_state = m_wait;
 622:.\main.c      **** //            }
 623:.\main.c      **** //            break;
 624:.\main.c      **** //            
 625:.\main.c      **** //        case m_wait:
 626:.\main.c      **** //            if(data_array[3] != old)
 627:.\main.c      **** //            {
 628:.\main.c      **** //                motor_state = m_different;
 629:.\main.c      **** //            }
 630:.\main.c      **** //            else
 631:.\main.c      **** //            {
 632:.\main.c      **** //                motor_state = m_wait;
 633:.\main.c      **** //            }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 39


 634:.\main.c      **** //            break;
 635:.\main.c      **** //    }
 636:.\main.c      **** }
 1493              		.loc 1 636 0
 1494 0004 BD46     		mov	sp, r7
 1495              		@ sp needed
 1496 0006 80BD     		pop	{r7, pc}
 1497              		.cfi_endproc
 1498              	.LFE48:
 1499              		.size	motor, .-motor
 1500              		.global	__aeabi_idivmod
 1501              		.section	.text.main,"ax",%progbits
 1502              		.align	2
 1503              		.global	main
 1504              		.code	16
 1505              		.thumb_func
 1506              		.type	main, %function
 1507              	main:
 1508              	.LFB49:
 637:.\main.c      **** 
 638:.\main.c      **** int main()
 639:.\main.c      **** {
 1509              		.loc 1 639 0
 1510              		.cfi_startproc
 1511 0000 80B5     		push	{r7, lr}
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 86B0     		sub	sp, sp, #24
 1516              		.cfi_def_cfa_offset 32
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 640:.\main.c      ****     CyGlobalIntEnable;
 1519              		.loc 1 640 0
 1520              	@ 640 ".\main.c" 1
 1521 0006 62B6     		CPSIE   i
 1522              	@ 0 "" 2
 641:.\main.c      ****     
 642:.\main.c      ****     //Define variables
 643:.\main.c      ****     time_t t;
 644:.\main.c      ****     uint8 counter;
 645:.\main.c      ****     
 646:.\main.c      ****     //start all of our components
 647:.\main.c      ****     Clock_pwm_Start();
 1523              		.loc 1 647 0
 1524              		.code	16
 1525 0008 FFF7FEFF 		bl	Clock_pwm_Start
 648:.\main.c      ****     Clock_counter_Start();
 1526              		.loc 1 648 0
 1527 000c FFF7FEFF 		bl	Clock_counter_Start
 649:.\main.c      ****     
 650:.\main.c      ****     PWM_1_Start();
 1528              		.loc 1 650 0
 1529 0010 FFF7FEFF 		bl	PWM_1_Start
 651:.\main.c      ****     //PWM_2_Start();
 652:.\main.c      ****     
 653:.\main.c      ****     Timer_1_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 40


 1530              		.loc 1 653 0
 1531 0014 FFF7FEFF 		bl	Timer_1_Start
 654:.\main.c      ****     //UART_1_Start();
 655:.\main.c      ****     
 656:.\main.c      ****     isr_1_StartEx(timer_isr);
 1532              		.loc 1 656 0
 1533 0018 374B     		ldr	r3, .L179
 1534 001a 181C     		mov	r0, r3
 1535 001c FFF7FEFF 		bl	isr_1_StartEx
 657:.\main.c      ****     
 658:.\main.c      ****     srand((unsigned) time(&t));
 1536              		.loc 1 658 0
 1537 0020 3B1D     		add	r3, r7, #4
 1538 0022 181C     		mov	r0, r3
 1539 0024 FFF7FEFF 		bl	time
 1540 0028 031C     		mov	r3, r0
 1541 002a 181C     		mov	r0, r3
 1542 002c FFF7FEFF 		bl	srand
 659:.\main.c      ****     int counter_five = 0;
 1543              		.loc 1 659 0
 1544 0030 0023     		mov	r3, #0
 1545 0032 FB60     		str	r3, [r7, #12]
 1546              	.L177:
 660:.\main.c      ****     
 661:.\main.c      ****     for(;;)
 662:.\main.c      ****     {
 663:.\main.c      ****         //check addresses
 664:.\main.c      ****         //TODO get the address bytes from Steve
 665:.\main.c      ****         
 666:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1547              		.loc 1 666 0
 1548 0034 314B     		ldr	r3, .L179+4
 1549 0036 1B78     		ldrb	r3, [r3]
 1550 0038 002B     		cmp	r3, #0
 1551 003a 07D0     		beq	.L171
 667:.\main.c      ****         {
 668:.\main.c      ****             fill_data_array1(); //potentially take input &data_array
 1552              		.loc 1 668 0
 1553 003c FFF7FEFF 		bl	fill_data_array1
 669:.\main.c      ****             new_pack = 1;
 1554              		.loc 1 669 0
 1555 0040 2F4B     		ldr	r3, .L179+8
 1556 0042 0122     		mov	r2, #1
 1557 0044 1A70     		strb	r2, [r3]
 670:.\main.c      ****             fin_exec = 0;
 1558              		.loc 1 670 0
 1559 0046 2F4B     		ldr	r3, .L179+12
 1560 0048 0022     		mov	r2, #0
 1561 004a 1A70     		strb	r2, [r3]
 1562              	.L171:
 671:.\main.c      ****         }
 672:.\main.c      ****         
 673:.\main.c      **** //        baseAzimuth();
 674:.\main.c      **** //        shoulder();
 675:.\main.c      **** //        elbow();
 676:.\main.c      **** //        wristTilt();
 677:.\main.c      **** //        wristRotate();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 41


 678:.\main.c      **** 
 679:.\main.c      ****         led1();
 1563              		.loc 1 679 0
 1564 004c FFF7FEFF 		bl	led1
 680:.\main.c      **** //        led();
 681:.\main.c      ****         servo1();
 1565              		.loc 1 681 0
 1566 0050 FFF7FEFF 		bl	servo1
 682:.\main.c      **** //        servo();
 683:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1567              		.loc 1 683 0
 1568 0054 2B4B     		ldr	r3, .L179+12
 1569 0056 1B78     		ldrb	r3, [r3]
 1570 0058 022B     		cmp	r3, #2
 1571 005a 03D1     		bne	.L172
 684:.\main.c      ****         {
 685:.\main.c      ****             new_pack = 0;
 1572              		.loc 1 685 0
 1573 005c 284B     		ldr	r3, .L179+8
 1574 005e 0022     		mov	r2, #0
 1575 0060 1A70     		strb	r2, [r3]
 686:.\main.c      ****         }
 687:.\main.c      ****         
 688:.\main.c      ****         
 689:.\main.c      ****         while(!timerFlag) //this while loop will periodize our code to the time of longest path
 1576              		.loc 1 689 0
 1577 0062 FFE7     		b	.L178
 1578              	.L172:
 1579              	.L178:
 1580 0064 C046     		mov	r8, r8
 1581              	.L173:
 1582              		.loc 1 689 0 is_stmt 0 discriminator 1
 1583 0066 284B     		ldr	r3, .L179+16
 1584 0068 1B78     		ldrb	r3, [r3]
 1585 006a 002B     		cmp	r3, #0
 1586 006c FBD0     		beq	.L173
 690:.\main.c      ****         {
 691:.\main.c      **** //            //Potential solution to how we will want to send feedback
 692:.\main.c      **** //            feedback_count++;
 693:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 694:.\main.c      **** //            {                                        //time through the full set of instructions
 695:.\main.c      **** //                send_feedback();
 696:.\main.c      **** //            }
 697:.\main.c      ****         }
 698:.\main.c      ****         counter++;
 1587              		.loc 1 698 0 is_stmt 1
 1588 006e 3B1C     		mov	r3, r7
 1589 0070 1733     		add	r3, r3, #23
 1590 0072 1A78     		ldrb	r2, [r3]
 1591 0074 3B1C     		mov	r3, r7
 1592 0076 1733     		add	r3, r3, #23
 1593 0078 0132     		add	r2, r2, #1
 1594 007a 1A70     		strb	r2, [r3]
 699:.\main.c      ****         if(counter == 100)
 1595              		.loc 1 699 0
 1596 007c 3B1C     		mov	r3, r7
 1597 007e 1733     		add	r3, r3, #23
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 42


 1598 0080 1B78     		ldrb	r3, [r3]
 1599 0082 642B     		cmp	r3, #100
 1600 0084 33D1     		bne	.L174
 1601              	.LBB2:
 700:.\main.c      ****         {
 701:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1602              		.loc 1 701 0
 1603 0086 0023     		mov	r3, #0
 1604 0088 3B61     		str	r3, [r7, #16]
 1605 008a 26E0     		b	.L175
 1606              	.L176:
 1607              	.LBB3:
 702:.\main.c      ****             {
 703:.\main.c      ****                 int16 random_number = rand()%2001 - 1000;
 1608              		.loc 1 703 0 discriminator 2
 1609 008c FFF7FEFF 		bl	rand
 1610 0090 031C     		mov	r3, r0
 1611 0092 181C     		mov	r0, r3
 1612 0094 1D49     		ldr	r1, .L179+20
 1613 0096 FFF7FEFF 		bl	__aeabi_idivmod
 1614 009a 0B1C     		mov	r3, r1
 1615 009c 9BB2     		uxth	r3, r3
 1616 009e 1C4A     		ldr	r2, .L179+24
 1617 00a0 9B18     		add	r3, r3, r2
 1618 00a2 9AB2     		uxth	r2, r3
 1619 00a4 3B1C     		mov	r3, r7
 1620 00a6 0A33     		add	r3, r3, #10
 1621 00a8 1A80     		strh	r2, [r3]
 704:.\main.c      ****                 test_array[i] = random_number >> 8;
 1622              		.loc 1 704 0 discriminator 2
 1623 00aa 3B1C     		mov	r3, r7
 1624 00ac 0A33     		add	r3, r3, #10
 1625 00ae 0022     		mov	r2, #0
 1626 00b0 9B5E     		ldrsh	r3, [r3, r2]
 1627 00b2 1B12     		asr	r3, r3, #8
 1628 00b4 99B2     		uxth	r1, r3
 1629 00b6 174B     		ldr	r3, .L179+28
 1630 00b8 3A69     		ldr	r2, [r7, #16]
 1631 00ba 5200     		lsl	r2, r2, #1
 1632 00bc D152     		strh	r1, [r2, r3]
 705:.\main.c      ****                 test_array[i+1] = random_number & 0x00FF;
 1633              		.loc 1 705 0 discriminator 2
 1634 00be 3B69     		ldr	r3, [r7, #16]
 1635 00c0 5A1C     		add	r2, r3, #1
 1636 00c2 3B1C     		mov	r3, r7
 1637 00c4 0A33     		add	r3, r3, #10
 1638 00c6 1988     		ldrh	r1, [r3]
 1639 00c8 FF23     		mov	r3, #255
 1640 00ca 0B40     		and	r3, r1
 1641 00cc 99B2     		uxth	r1, r3
 1642 00ce 114B     		ldr	r3, .L179+28
 1643 00d0 5200     		lsl	r2, r2, #1
 1644 00d2 D152     		strh	r1, [r2, r3]
 1645              	.LBE3:
 701:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1646              		.loc 1 701 0 discriminator 2
 1647 00d4 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 43


 1648 00d6 0233     		add	r3, r3, #2
 1649 00d8 3B61     		str	r3, [r7, #16]
 1650              	.L175:
 701:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1651              		.loc 1 701 0 is_stmt 0 discriminator 1
 1652 00da 3B69     		ldr	r3, [r7, #16]
 1653 00dc 092B     		cmp	r3, #9
 1654 00de D5DD     		ble	.L176
 1655              	.LBE2:
 706:.\main.c      ****             }
 707:.\main.c      ****             counter = 0;
 1656              		.loc 1 707 0 is_stmt 1
 1657 00e0 3B1C     		mov	r3, r7
 1658 00e2 1733     		add	r3, r3, #23
 1659 00e4 0022     		mov	r2, #0
 1660 00e6 1A70     		strb	r2, [r3]
 708:.\main.c      ****             wiznet = 1;
 1661              		.loc 1 708 0
 1662 00e8 044B     		ldr	r3, .L179+4
 1663 00ea 0122     		mov	r2, #1
 1664 00ec 1A70     		strb	r2, [r3]
 1665              	.L174:
 709:.\main.c      ****         }
 710:.\main.c      ****         timerFlag = 0;
 1666              		.loc 1 710 0
 1667 00ee 064B     		ldr	r3, .L179+16
 1668 00f0 0022     		mov	r2, #0
 1669 00f2 1A70     		strb	r2, [r3]
 711:.\main.c      ****     }
 1670              		.loc 1 711 0
 1671 00f4 9EE7     		b	.L177
 1672              	.L180:
 1673 00f6 C046     		.align	2
 1674              	.L179:
 1675 00f8 00000000 		.word	timer_isr
 1676 00fc 00000000 		.word	wiznet
 1677 0100 00000000 		.word	new_pack
 1678 0104 00000000 		.word	fin_exec
 1679 0108 00000000 		.word	timerFlag
 1680 010c D1070000 		.word	2001
 1681 0110 18FCFFFF 		.word	-1000
 1682 0114 00000000 		.word	test_array
 1683              		.cfi_endproc
 1684              	.LFE49:
 1685              		.size	main, .-main
 1686              		.text
 1687              	.Letext0:
 1688              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1689              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1690              		.section	.debug_info,"",%progbits
 1691              	.Ldebug_info0:
 1692 0000 18060000 		.4byte	0x618
 1693 0004 0400     		.2byte	0x4
 1694 0006 00000000 		.4byte	.Ldebug_abbrev0
 1695 000a 04       		.byte	0x4
 1696 000b 01       		.uleb128 0x1
 1697 000c 53040000 		.4byte	.LASF98
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 44


 1698 0010 01       		.byte	0x1
 1699 0011 15020000 		.4byte	.LASF99
 1700 0015 0A030000 		.4byte	.LASF100
 1701 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1702 001d 00000000 		.4byte	0
 1703 0021 00000000 		.4byte	.Ldebug_line0
 1704 0025 02       		.uleb128 0x2
 1705 0026 01       		.byte	0x1
 1706 0027 06       		.byte	0x6
 1707 0028 46010000 		.4byte	.LASF0
 1708 002c 02       		.uleb128 0x2
 1709 002d 01       		.byte	0x1
 1710 002e 08       		.byte	0x8
 1711 002f CA010000 		.4byte	.LASF1
 1712 0033 02       		.uleb128 0x2
 1713 0034 02       		.byte	0x2
 1714 0035 05       		.byte	0x5
 1715 0036 D7000000 		.4byte	.LASF2
 1716 003a 02       		.uleb128 0x2
 1717 003b 02       		.byte	0x2
 1718 003c 07       		.byte	0x7
 1719 003d D9020000 		.4byte	.LASF3
 1720 0041 02       		.uleb128 0x2
 1721 0042 04       		.byte	0x4
 1722 0043 05       		.byte	0x5
 1723 0044 97010000 		.4byte	.LASF4
 1724 0048 02       		.uleb128 0x2
 1725 0049 04       		.byte	0x4
 1726 004a 07       		.byte	0x7
 1727 004b C7020000 		.4byte	.LASF5
 1728 004f 02       		.uleb128 0x2
 1729 0050 08       		.byte	0x8
 1730 0051 05       		.byte	0x5
 1731 0052 B5000000 		.4byte	.LASF6
 1732 0056 02       		.uleb128 0x2
 1733 0057 08       		.byte	0x8
 1734 0058 07       		.byte	0x7
 1735 0059 8D020000 		.4byte	.LASF7
 1736 005d 03       		.uleb128 0x3
 1737 005e 04       		.byte	0x4
 1738 005f 05       		.byte	0x5
 1739 0060 696E7400 		.ascii	"int\000"
 1740 0064 02       		.uleb128 0x2
 1741 0065 04       		.byte	0x4
 1742 0066 07       		.byte	0x7
 1743 0067 B2020000 		.4byte	.LASF8
 1744 006b 04       		.uleb128 0x4
 1745 006c 90030000 		.4byte	.LASF9
 1746 0070 02       		.byte	0x2
 1747 0071 A1       		.byte	0xa1
 1748 0072 2C000000 		.4byte	0x2c
 1749 0076 04       		.uleb128 0x4
 1750 0077 FF000000 		.4byte	.LASF10
 1751 007b 02       		.byte	0x2
 1752 007c A2       		.byte	0xa2
 1753 007d 3A000000 		.4byte	0x3a
 1754 0081 04       		.uleb128 0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 45


 1755 0082 B1030000 		.4byte	.LASF11
 1756 0086 02       		.byte	0x2
 1757 0087 A3       		.byte	0xa3
 1758 0088 48000000 		.4byte	0x48
 1759 008c 04       		.uleb128 0x4
 1760 008d 12010000 		.4byte	.LASF12
 1761 0091 02       		.byte	0x2
 1762 0092 A5       		.byte	0xa5
 1763 0093 33000000 		.4byte	0x33
 1764 0097 02       		.uleb128 0x2
 1765 0098 04       		.byte	0x4
 1766 0099 04       		.byte	0x4
 1767 009a 5D010000 		.4byte	.LASF13
 1768 009e 02       		.uleb128 0x2
 1769 009f 08       		.byte	0x8
 1770 00a0 04       		.byte	0x4
 1771 00a1 CF030000 		.4byte	.LASF14
 1772 00a5 02       		.uleb128 0x2
 1773 00a6 01       		.byte	0x1
 1774 00a7 08       		.byte	0x8
 1775 00a8 92010000 		.4byte	.LASF15
 1776 00ac 02       		.uleb128 0x2
 1777 00ad 04       		.byte	0x4
 1778 00ae 07       		.byte	0x7
 1779 00af 87000000 		.4byte	.LASF16
 1780 00b3 04       		.uleb128 0x4
 1781 00b4 E3030000 		.4byte	.LASF17
 1782 00b8 03       		.byte	0x3
 1783 00b9 7A       		.byte	0x7a
 1784 00ba 41000000 		.4byte	0x41
 1785 00be 05       		.uleb128 0x5
 1786 00bf A9010000 		.4byte	.LASF22
 1787 00c3 01       		.byte	0x1
 1788 00c4 01       		.byte	0x1
 1789 00c5 8C       		.byte	0x8c
 1790 00c6 E3000000 		.4byte	0xe3
 1791 00ca 06       		.uleb128 0x6
 1792 00cb 09020000 		.4byte	.LASF18
 1793 00cf 00       		.sleb128 0
 1794 00d0 06       		.uleb128 0x6
 1795 00d1 22000000 		.4byte	.LASF19
 1796 00d5 01       		.sleb128 1
 1797 00d6 06       		.uleb128 0x6
 1798 00d7 69020000 		.4byte	.LASF20
 1799 00db 02       		.sleb128 2
 1800 00dc 06       		.uleb128 0x6
 1801 00dd B8030000 		.4byte	.LASF21
 1802 00e1 03       		.sleb128 3
 1803 00e2 00       		.byte	0
 1804 00e3 05       		.uleb128 0x5
 1805 00e4 EC020000 		.4byte	.LASF23
 1806 00e8 01       		.byte	0x1
 1807 00e9 01       		.byte	0x1
 1808 00ea C4       		.byte	0xc4
 1809 00eb 08010000 		.4byte	0x108
 1810 00ef 06       		.uleb128 0x6
 1811 00f0 F0010000 		.4byte	.LASF24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 46


 1812 00f4 00       		.sleb128 0
 1813 00f5 06       		.uleb128 0x6
 1814 00f6 2D000000 		.4byte	.LASF25
 1815 00fa 01       		.sleb128 1
 1816 00fb 06       		.uleb128 0x6
 1817 00fc C2030000 		.4byte	.LASF26
 1818 0100 02       		.sleb128 2
 1819 0101 06       		.uleb128 0x6
 1820 0102 5B020000 		.4byte	.LASF27
 1821 0106 03       		.sleb128 3
 1822 0107 00       		.byte	0
 1823 0108 05       		.uleb128 0x5
 1824 0109 90000000 		.4byte	.LASF28
 1825 010d 01       		.byte	0x1
 1826 010e 01       		.byte	0x1
 1827 010f F5       		.byte	0xf5
 1828 0110 2D010000 		.4byte	0x12d
 1829 0114 06       		.uleb128 0x6
 1830 0115 18010000 		.4byte	.LASF29
 1831 0119 00       		.sleb128 0
 1832 011a 06       		.uleb128 0x6
 1833 011b 7A000000 		.4byte	.LASF30
 1834 011f 01       		.sleb128 1
 1835 0120 06       		.uleb128 0x6
 1836 0121 83010000 		.4byte	.LASF31
 1837 0125 02       		.sleb128 2
 1838 0126 06       		.uleb128 0x6
 1839 0127 FD040000 		.4byte	.LASF32
 1840 012b 03       		.sleb128 3
 1841 012c 00       		.byte	0
 1842 012d 07       		.uleb128 0x7
 1843 012e 85030000 		.4byte	.LASF33
 1844 0132 01       		.byte	0x1
 1845 0133 01       		.byte	0x1
 1846 0134 2E01     		.2byte	0x12e
 1847 0136 4D010000 		.4byte	0x14d
 1848 013a 06       		.uleb128 0x6
 1849 013b 00000000 		.4byte	.LASF34
 1850 013f 00       		.sleb128 0
 1851 0140 06       		.uleb128 0x6
 1852 0141 3A010000 		.4byte	.LASF35
 1853 0145 01       		.sleb128 1
 1854 0146 06       		.uleb128 0x6
 1855 0147 46020000 		.4byte	.LASF36
 1856 014b 02       		.sleb128 2
 1857 014c 00       		.byte	0
 1858 014d 07       		.uleb128 0x7
 1859 014e E1000000 		.4byte	.LASF37
 1860 0152 01       		.byte	0x1
 1861 0153 01       		.byte	0x1
 1862 0154 6F01     		.2byte	0x16f
 1863 0156 6D010000 		.4byte	0x16d
 1864 015a 06       		.uleb128 0x6
 1865 015b 05040000 		.4byte	.LASF38
 1866 015f 00       		.sleb128 0
 1867 0160 06       		.uleb128 0x6
 1868 0161 F3030000 		.4byte	.LASF39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 47


 1869 0165 01       		.sleb128 1
 1870 0166 06       		.uleb128 0x6
 1871 0167 4C040000 		.4byte	.LASF40
 1872 016b 02       		.sleb128 2
 1873 016c 00       		.byte	0
 1874 016d 07       		.uleb128 0x7
 1875 016e A4020000 		.4byte	.LASF41
 1876 0172 01       		.byte	0x1
 1877 0173 01       		.byte	0x1
 1878 0174 9F01     		.2byte	0x19f
 1879 0176 93010000 		.4byte	0x193
 1880 017a 06       		.uleb128 0x6
 1881 017b A0010000 		.4byte	.LASF42
 1882 017f 00       		.sleb128 0
 1883 0180 06       		.uleb128 0x6
 1884 0181 17040000 		.4byte	.LASF43
 1885 0185 01       		.sleb128 1
 1886 0186 06       		.uleb128 0x6
 1887 0187 F4000000 		.4byte	.LASF44
 1888 018b 02       		.sleb128 2
 1889 018c 06       		.uleb128 0x6
 1890 018d F5040000 		.4byte	.LASF45
 1891 0191 03       		.sleb128 3
 1892 0192 00       		.byte	0
 1893 0193 07       		.uleb128 0x7
 1894 0194 2E010000 		.4byte	.LASF46
 1895 0198 01       		.byte	0x1
 1896 0199 01       		.byte	0x1
 1897 019a 0602     		.2byte	0x206
 1898 019c B9010000 		.4byte	0x1b9
 1899 01a0 06       		.uleb128 0x6
 1900 01a1 EA030000 		.4byte	.LASF47
 1901 01a5 00       		.sleb128 0
 1902 01a6 06       		.uleb128 0x6
 1903 01a7 3E000000 		.4byte	.LASF48
 1904 01ab 01       		.sleb128 1
 1905 01ac 06       		.uleb128 0x6
 1906 01ad B6010000 		.4byte	.LASF49
 1907 01b1 02       		.sleb128 2
 1908 01b2 06       		.uleb128 0x6
 1909 01b3 CF000000 		.4byte	.LASF50
 1910 01b7 03       		.sleb128 3
 1911 01b8 00       		.byte	0
 1912 01b9 07       		.uleb128 0x7
 1913 01ba FD020000 		.4byte	.LASF51
 1914 01be 01       		.byte	0x1
 1915 01bf 01       		.byte	0x1
 1916 01c0 5102     		.2byte	0x251
 1917 01c2 D9010000 		.4byte	0x1d9
 1918 01c6 06       		.uleb128 0x6
 1919 01c7 BF020000 		.4byte	.LASF52
 1920 01cb 00       		.sleb128 0
 1921 01cc 06       		.uleb128 0x6
 1922 01cd 9C030000 		.4byte	.LASF53
 1923 01d1 01       		.sleb128 1
 1924 01d2 06       		.uleb128 0x6
 1925 01d3 0D050000 		.4byte	.LASF54
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 48


 1926 01d7 02       		.sleb128 2
 1927 01d8 00       		.byte	0
 1928 01d9 08       		.uleb128 0x8
 1929 01da 2C020000 		.4byte	.LASF74
 1930 01de 01       		.byte	0x1
 1931 01df 28       		.byte	0x28
 1932 01e0 00000000 		.4byte	.LFB33
 1933 01e4 28000000 		.4byte	.LFE33-.LFB33
 1934 01e8 01       		.uleb128 0x1
 1935 01e9 9C       		.byte	0x9c
 1936 01ea FD010000 		.4byte	0x1fd
 1937 01ee 09       		.uleb128 0x9
 1938 01ef 36020000 		.4byte	.LASF55
 1939 01f3 01       		.byte	0x1
 1940 01f4 2A       		.byte	0x2a
 1941 01f5 81000000 		.4byte	0x81
 1942 01f9 02       		.uleb128 0x2
 1943 01fa 91       		.byte	0x91
 1944 01fb 74       		.sleb128 -12
 1945 01fc 00       		.byte	0
 1946 01fd 0A       		.uleb128 0xa
 1947 01fe 46000000 		.4byte	.LASF56
 1948 0202 01       		.byte	0x1
 1949 0203 4A       		.byte	0x4a
 1950 0204 00000000 		.4byte	.LFB34
 1951 0208 0C010000 		.4byte	.LFE34-.LFB34
 1952 020c 01       		.uleb128 0x1
 1953 020d 9C       		.byte	0x9c
 1954 020e 1F020000 		.4byte	0x21f
 1955 0212 0B       		.uleb128 0xb
 1956 0213 6300     		.ascii	"c\000"
 1957 0215 01       		.byte	0x1
 1958 0216 4E       		.byte	0x4e
 1959 0217 6B000000 		.4byte	0x6b
 1960 021b 02       		.uleb128 0x2
 1961 021c 91       		.byte	0x91
 1962 021d 77       		.sleb128 -9
 1963 021e 00       		.byte	0
 1964 021f 0A       		.uleb128 0xa
 1965 0220 24040000 		.4byte	.LASF57
 1966 0224 01       		.byte	0x1
 1967 0225 7B       		.byte	0x7b
 1968 0226 00000000 		.4byte	.LFB35
 1969 022a 4C000000 		.4byte	.LFE35-.LFB35
 1970 022e 01       		.uleb128 0x1
 1971 022f 9C       		.byte	0x9c
 1972 0230 41020000 		.4byte	0x241
 1973 0234 0B       		.uleb128 0xb
 1974 0235 6900     		.ascii	"i\000"
 1975 0237 01       		.byte	0x1
 1976 0238 7D       		.byte	0x7d
 1977 0239 6B000000 		.4byte	0x6b
 1978 023d 02       		.uleb128 0x2
 1979 023e 91       		.byte	0x91
 1980 023f 77       		.sleb128 -9
 1981 0240 00       		.byte	0
 1982 0241 0C       		.uleb128 0xc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 49


 1983 0242 6D010000 		.4byte	.LASF58
 1984 0246 01       		.byte	0x1
 1985 0247 85       		.byte	0x85
 1986 0248 00000000 		.4byte	.LFB36
 1987 024c 08000000 		.4byte	.LFE36-.LFB36
 1988 0250 01       		.uleb128 0x1
 1989 0251 9C       		.byte	0x9c
 1990 0252 0C       		.uleb128 0xc
 1991 0253 A8030000 		.4byte	.LASF59
 1992 0257 01       		.byte	0x1
 1993 0258 8E       		.byte	0x8e
 1994 0259 00000000 		.4byte	.LFB37
 1995 025d 44000000 		.4byte	.LFE37-.LFB37
 1996 0261 01       		.uleb128 0x1
 1997 0262 9C       		.byte	0x9c
 1998 0263 0C       		.uleb128 0xc
 1999 0264 EE000000 		.4byte	.LASF60
 2000 0268 01       		.byte	0x1
 2001 0269 BC       		.byte	0xbc
 2002 026a 00000000 		.4byte	.LFB38
 2003 026e 08000000 		.4byte	.LFE38-.LFB38
 2004 0272 01       		.uleb128 0x1
 2005 0273 9C       		.byte	0x9c
 2006 0274 0C       		.uleb128 0xc
 2007 0275 79010000 		.4byte	.LASF61
 2008 0279 01       		.byte	0x1
 2009 027a C6       		.byte	0xc6
 2010 027b 00000000 		.4byte	.LFB39
 2011 027f 48000000 		.4byte	.LFE39-.LFB39
 2012 0283 01       		.uleb128 0x1
 2013 0284 9C       		.byte	0x9c
 2014 0285 0C       		.uleb128 0xc
 2015 0286 06010000 		.4byte	.LASF62
 2016 028a 01       		.byte	0x1
 2017 028b F7       		.byte	0xf7
 2018 028c 00000000 		.4byte	.LFB40
 2019 0290 48000000 		.4byte	.LFE40-.LFB40
 2020 0294 01       		.uleb128 0x1
 2021 0295 9C       		.byte	0x9c
 2022 0296 0D       		.uleb128 0xd
 2023 0297 1E020000 		.4byte	.LASF63
 2024 029b 01       		.byte	0x1
 2025 029c 2601     		.2byte	0x126
 2026 029e 00000000 		.4byte	.LFB41
 2027 02a2 08000000 		.4byte	.LFE41-.LFB41
 2028 02a6 01       		.uleb128 0x1
 2029 02a7 9C       		.byte	0x9c
 2030 02a8 0E       		.uleb128 0xe
 2031 02a9 6C656400 		.ascii	"led\000"
 2032 02ad 01       		.byte	0x1
 2033 02ae 2F01     		.2byte	0x12f
 2034 02b0 00000000 		.4byte	.LFB42
 2035 02b4 88000000 		.4byte	.LFE42-.LFB42
 2036 02b8 01       		.uleb128 0x1
 2037 02b9 9C       		.byte	0x9c
 2038 02ba CE020000 		.4byte	0x2ce
 2039 02be 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 50


 2040 02bf 6F6C6400 		.ascii	"old\000"
 2041 02c3 01       		.byte	0x1
 2042 02c4 3101     		.2byte	0x131
 2043 02c6 76000000 		.4byte	0x76
 2044 02ca 02       		.uleb128 0x2
 2045 02cb 91       		.byte	0x91
 2046 02cc 76       		.sleb128 -10
 2047 02cd 00       		.byte	0
 2048 02ce 10       		.uleb128 0x10
 2049 02cf DA040000 		.4byte	.LASF69
 2050 02d3 01       		.byte	0x1
 2051 02d4 5F01     		.2byte	0x15f
 2052 02d6 76000000 		.4byte	0x76
 2053 02da 00000000 		.4byte	.LFB43
 2054 02de 78000000 		.4byte	.LFE43-.LFB43
 2055 02e2 01       		.uleb128 0x1
 2056 02e3 9C       		.byte	0x9c
 2057 02e4 32030000 		.4byte	0x332
 2058 02e8 11       		.uleb128 0x11
 2059 02e9 38000000 		.4byte	.LASF64
 2060 02ed 01       		.byte	0x1
 2061 02ee 5F01     		.2byte	0x15f
 2062 02f0 32030000 		.4byte	0x332
 2063 02f4 02       		.uleb128 0x2
 2064 02f5 91       		.byte	0x91
 2065 02f6 64       		.sleb128 -28
 2066 02f7 11       		.uleb128 0x11
 2067 02f8 74020000 		.4byte	.LASF65
 2068 02fc 01       		.byte	0x1
 2069 02fd 5F01     		.2byte	0x15f
 2070 02ff 6B000000 		.4byte	0x6b
 2071 0303 02       		.uleb128 0x2
 2072 0304 91       		.byte	0x91
 2073 0305 63       		.sleb128 -29
 2074 0306 0F       		.uleb128 0xf
 2075 0307 6900     		.ascii	"i\000"
 2076 0309 01       		.byte	0x1
 2077 030a 6101     		.2byte	0x161
 2078 030c 6B000000 		.4byte	0x6b
 2079 0310 02       		.uleb128 0x2
 2080 0311 91       		.byte	0x91
 2081 0312 77       		.sleb128 -9
 2082 0313 0F       		.uleb128 0xf
 2083 0314 73756D00 		.ascii	"sum\000"
 2084 0318 01       		.byte	0x1
 2085 0319 6201     		.2byte	0x162
 2086 031b 81000000 		.4byte	0x81
 2087 031f 02       		.uleb128 0x2
 2088 0320 91       		.byte	0x91
 2089 0321 70       		.sleb128 -16
 2090 0322 0F       		.uleb128 0xf
 2091 0323 61766700 		.ascii	"avg\000"
 2092 0327 01       		.byte	0x1
 2093 0328 6301     		.2byte	0x163
 2094 032a 76000000 		.4byte	0x76
 2095 032e 02       		.uleb128 0x2
 2096 032f 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 51


 2097 0330 6E       		.sleb128 -18
 2098 0331 00       		.byte	0
 2099 0332 12       		.uleb128 0x12
 2100 0333 04       		.byte	0x4
 2101 0334 76000000 		.4byte	0x76
 2102 0338 13       		.uleb128 0x13
 2103 0339 FF030000 		.4byte	.LASF66
 2104 033d 01       		.byte	0x1
 2105 033e 7001     		.2byte	0x170
 2106 0340 00000000 		.4byte	.LFB44
 2107 0344 88000000 		.4byte	.LFE44-.LFB44
 2108 0348 01       		.uleb128 0x1
 2109 0349 9C       		.byte	0x9c
 2110 034a 5E030000 		.4byte	0x35e
 2111 034e 0F       		.uleb128 0xf
 2112 034f 6F6C6400 		.ascii	"old\000"
 2113 0353 01       		.byte	0x1
 2114 0354 7201     		.2byte	0x172
 2115 0356 76000000 		.4byte	0x76
 2116 035a 02       		.uleb128 0x2
 2117 035b 91       		.byte	0x91
 2118 035c 76       		.sleb128 -10
 2119 035d 00       		.byte	0
 2120 035e 13       		.uleb128 0x13
 2121 035f 7E030000 		.4byte	.LASF67
 2122 0363 01       		.byte	0x1
 2123 0364 A001     		.2byte	0x1a0
 2124 0366 00000000 		.4byte	.LFB45
 2125 036a 34010000 		.4byte	.LFE45-.LFB45
 2126 036e 01       		.uleb128 0x1
 2127 036f 9C       		.byte	0x9c
 2128 0370 A0030000 		.4byte	0x3a0
 2129 0374 0F       		.uleb128 0xf
 2130 0375 6900     		.ascii	"i\000"
 2131 0377 01       		.byte	0x1
 2132 0378 A201     		.2byte	0x1a2
 2133 037a 6B000000 		.4byte	0x6b
 2134 037e 02       		.uleb128 0x2
 2135 037f 91       		.byte	0x91
 2136 0380 6F       		.sleb128 -17
 2137 0381 0F       		.uleb128 0xf
 2138 0382 61766700 		.ascii	"avg\000"
 2139 0386 01       		.byte	0x1
 2140 0387 A301     		.2byte	0x1a3
 2141 0389 76000000 		.4byte	0x76
 2142 038d 02       		.uleb128 0x2
 2143 038e 91       		.byte	0x91
 2144 038f 6A       		.sleb128 -22
 2145 0390 14       		.uleb128 0x14
 2146 0391 ED040000 		.4byte	.LASF68
 2147 0395 01       		.byte	0x1
 2148 0396 A401     		.2byte	0x1a4
 2149 0398 76000000 		.4byte	0x76
 2150 039c 02       		.uleb128 0x2
 2151 039d 91       		.byte	0x91
 2152 039e 6C       		.sleb128 -20
 2153 039f 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 52


 2154 03a0 15       		.uleb128 0x15
 2155 03a1 AA000000 		.4byte	.LASF70
 2156 03a5 01       		.byte	0x1
 2157 03a6 EA01     		.2byte	0x1ea
 2158 03a8 76000000 		.4byte	0x76
 2159 03ac 00000000 		.4byte	.LFB46
 2160 03b0 90000000 		.4byte	.LFE46-.LFB46
 2161 03b4 01       		.uleb128 0x1
 2162 03b5 9C       		.byte	0x9c
 2163 03b6 D9030000 		.4byte	0x3d9
 2164 03ba 16       		.uleb128 0x16
 2165 03bb 72617700 		.ascii	"raw\000"
 2166 03bf 01       		.byte	0x1
 2167 03c0 EA01     		.2byte	0x1ea
 2168 03c2 76000000 		.4byte	0x76
 2169 03c6 02       		.uleb128 0x2
 2170 03c7 91       		.byte	0x91
 2171 03c8 6E       		.sleb128 -18
 2172 03c9 14       		.uleb128 0x14
 2173 03ca 1A000000 		.4byte	.LASF71
 2174 03ce 01       		.byte	0x1
 2175 03cf EC01     		.2byte	0x1ec
 2176 03d1 76000000 		.4byte	0x76
 2177 03d5 02       		.uleb128 0x2
 2178 03d6 91       		.byte	0x91
 2179 03d7 76       		.sleb128 -10
 2180 03d8 00       		.byte	0
 2181 03d9 13       		.uleb128 0x13
 2182 03da 1F040000 		.4byte	.LASF72
 2183 03de 01       		.byte	0x1
 2184 03df 0702     		.2byte	0x207
 2185 03e1 00000000 		.4byte	.LFB47
 2186 03e5 3C010000 		.4byte	.LFE47-.LFB47
 2187 03e9 01       		.uleb128 0x1
 2188 03ea 9C       		.byte	0x9c
 2189 03eb 1B040000 		.4byte	0x41b
 2190 03ef 0F       		.uleb128 0xf
 2191 03f0 6900     		.ascii	"i\000"
 2192 03f2 01       		.byte	0x1
 2193 03f3 0902     		.2byte	0x209
 2194 03f5 6B000000 		.4byte	0x6b
 2195 03f9 02       		.uleb128 0x2
 2196 03fa 91       		.byte	0x91
 2197 03fb 6F       		.sleb128 -17
 2198 03fc 0F       		.uleb128 0xf
 2199 03fd 61766700 		.ascii	"avg\000"
 2200 0401 01       		.byte	0x1
 2201 0402 0A02     		.2byte	0x20a
 2202 0404 76000000 		.4byte	0x76
 2203 0408 02       		.uleb128 0x2
 2204 0409 91       		.byte	0x91
 2205 040a 6A       		.sleb128 -22
 2206 040b 14       		.uleb128 0x14
 2207 040c ED040000 		.4byte	.LASF68
 2208 0410 01       		.byte	0x1
 2209 0411 0B02     		.2byte	0x20b
 2210 0413 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 53


 2211 0417 02       		.uleb128 0x2
 2212 0418 91       		.byte	0x91
 2213 0419 6C       		.sleb128 -20
 2214 041a 00       		.byte	0
 2215 041b 0D       		.uleb128 0xd
 2216 041c 96030000 		.4byte	.LASF73
 2217 0420 01       		.byte	0x1
 2218 0421 5202     		.2byte	0x252
 2219 0423 00000000 		.4byte	.LFB48
 2220 0427 08000000 		.4byte	.LFE48-.LFB48
 2221 042b 01       		.uleb128 0x1
 2222 042c 9C       		.byte	0x9c
 2223 042d 17       		.uleb128 0x17
 2224 042e 69030000 		.4byte	.LASF75
 2225 0432 01       		.byte	0x1
 2226 0433 7E02     		.2byte	0x27e
 2227 0435 5D000000 		.4byte	0x5d
 2228 0439 00000000 		.4byte	.LFB49
 2229 043d 18010000 		.4byte	.LFE49-.LFB49
 2230 0441 01       		.uleb128 0x1
 2231 0442 9C       		.byte	0x9c
 2232 0443 A3040000 		.4byte	0x4a3
 2233 0447 0F       		.uleb128 0xf
 2234 0448 7400     		.ascii	"t\000"
 2235 044a 01       		.byte	0x1
 2236 044b 8302     		.2byte	0x283
 2237 044d B3000000 		.4byte	0xb3
 2238 0451 02       		.uleb128 0x2
 2239 0452 91       		.byte	0x91
 2240 0453 64       		.sleb128 -28
 2241 0454 14       		.uleb128 0x14
 2242 0455 3E020000 		.4byte	.LASF76
 2243 0459 01       		.byte	0x1
 2244 045a 8402     		.2byte	0x284
 2245 045c 6B000000 		.4byte	0x6b
 2246 0460 02       		.uleb128 0x2
 2247 0461 91       		.byte	0x91
 2248 0462 77       		.sleb128 -9
 2249 0463 14       		.uleb128 0x14
 2250 0464 D6030000 		.4byte	.LASF77
 2251 0468 01       		.byte	0x1
 2252 0469 9302     		.2byte	0x293
 2253 046b 5D000000 		.4byte	0x5d
 2254 046f 02       		.uleb128 0x2
 2255 0470 91       		.byte	0x91
 2256 0471 6C       		.sleb128 -20
 2257 0472 18       		.uleb128 0x18
 2258 0473 86000000 		.4byte	.LBB2
 2259 0477 5A000000 		.4byte	.LBE2-.LBB2
 2260 047b 0F       		.uleb128 0xf
 2261 047c 6900     		.ascii	"i\000"
 2262 047e 01       		.byte	0x1
 2263 047f BD02     		.2byte	0x2bd
 2264 0481 5D000000 		.4byte	0x5d
 2265 0485 02       		.uleb128 0x2
 2266 0486 91       		.byte	0x91
 2267 0487 70       		.sleb128 -16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 54


 2268 0488 18       		.uleb128 0x18
 2269 0489 8C000000 		.4byte	.LBB3
 2270 048d 48000000 		.4byte	.LBE3-.LBB3
 2271 0491 14       		.uleb128 0x14
 2272 0492 4D020000 		.4byte	.LASF78
 2273 0496 01       		.byte	0x1
 2274 0497 BF02     		.2byte	0x2bf
 2275 0499 8C000000 		.4byte	0x8c
 2276 049d 02       		.uleb128 0x2
 2277 049e 91       		.byte	0x91
 2278 049f 6A       		.sleb128 -22
 2279 04a0 00       		.byte	0
 2280 04a1 00       		.byte	0
 2281 04a2 00       		.byte	0
 2282 04a3 19       		.uleb128 0x19
 2283 04a4 76000000 		.4byte	0x76
 2284 04a8 B3040000 		.4byte	0x4b3
 2285 04ac 1A       		.uleb128 0x1a
 2286 04ad AC000000 		.4byte	0xac
 2287 04b1 0D       		.byte	0xd
 2288 04b2 00       		.byte	0
 2289 04b3 1B       		.uleb128 0x1b
 2290 04b4 E2040000 		.4byte	.LASF79
 2291 04b8 01       		.byte	0x1
 2292 04b9 0E       		.byte	0xe
 2293 04ba A3040000 		.4byte	0x4a3
 2294 04be 05       		.uleb128 0x5
 2295 04bf 03       		.byte	0x3
 2296 04c0 00000000 		.4byte	data_array
 2297 04c4 1B       		.uleb128 0x1b
 2298 04c5 A3000000 		.4byte	.LASF80
 2299 04c9 01       		.byte	0x1
 2300 04ca 10       		.byte	0x10
 2301 04cb 6B000000 		.4byte	0x6b
 2302 04cf 05       		.uleb128 0x5
 2303 04d0 03       		.byte	0x3
 2304 04d1 00000000 		.4byte	wiznet
 2305 04d5 1B       		.uleb128 0x1b
 2306 04d6 43040000 		.4byte	.LASF81
 2307 04da 01       		.byte	0x1
 2308 04db 11       		.byte	0x11
 2309 04dc 6B000000 		.4byte	0x6b
 2310 04e0 05       		.uleb128 0x5
 2311 04e1 03       		.byte	0x3
 2312 04e2 00000000 		.4byte	new_pack
 2313 04e6 1B       		.uleb128 0x1b
 2314 04e7 C1010000 		.4byte	.LASF82
 2315 04eb 01       		.byte	0x1
 2316 04ec 14       		.byte	0x14
 2317 04ed 6B000000 		.4byte	0x6b
 2318 04f1 05       		.uleb128 0x5
 2319 04f2 03       		.byte	0x3
 2320 04f3 00000000 		.4byte	fin_exec
 2321 04f7 19       		.uleb128 0x19
 2322 04f8 8C000000 		.4byte	0x8c
 2323 04fc 07050000 		.4byte	0x507
 2324 0500 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 55


 2325 0501 AC000000 		.4byte	0xac
 2326 0505 09       		.byte	0x9
 2327 0506 00       		.byte	0
 2328 0507 1B       		.uleb128 0x1b
 2329 0508 52010000 		.4byte	.LASF83
 2330 050c 01       		.byte	0x1
 2331 050d 17       		.byte	0x17
 2332 050e F7040000 		.4byte	0x4f7
 2333 0512 05       		.uleb128 0x5
 2334 0513 03       		.byte	0x3
 2335 0514 00000000 		.4byte	test_array
 2336 0518 1B       		.uleb128 0x1b
 2337 0519 FA010000 		.4byte	.LASF84
 2338 051d 01       		.byte	0x1
 2339 051e 1A       		.byte	0x1a
 2340 051f 6B000000 		.4byte	0x6b
 2341 0523 05       		.uleb128 0x5
 2342 0524 03       		.byte	0x3
 2343 0525 00000000 		.4byte	serv_arr_cspot
 2344 0529 19       		.uleb128 0x19
 2345 052a 76000000 		.4byte	0x76
 2346 052e 39050000 		.4byte	0x539
 2347 0532 1A       		.uleb128 0x1a
 2348 0533 AC000000 		.4byte	0xac
 2349 0537 13       		.byte	0x13
 2350 0538 00       		.byte	0
 2351 0539 1B       		.uleb128 0x1b
 2352 053a 56000000 		.4byte	.LASF85
 2353 053e 01       		.byte	0x1
 2354 053f 1B       		.byte	0x1b
 2355 0540 29050000 		.4byte	0x529
 2356 0544 05       		.uleb128 0x5
 2357 0545 03       		.byte	0x3
 2358 0546 00000000 		.4byte	servo_array
 2359 054a 1B       		.uleb128 0x1b
 2360 054b 35040000 		.4byte	.LASF86
 2361 054f 01       		.byte	0x1
 2362 0550 1F       		.byte	0x1f
 2363 0551 6B000000 		.4byte	0x6b
 2364 0555 05       		.uleb128 0x5
 2365 0556 03       		.byte	0x3
 2366 0557 00000000 		.4byte	led_arr_cspot
 2367 055b 1B       		.uleb128 0x1b
 2368 055c 63010000 		.4byte	.LASF87
 2369 0560 01       		.byte	0x1
 2370 0561 20       		.byte	0x20
 2371 0562 29050000 		.4byte	0x529
 2372 0566 05       		.uleb128 0x5
 2373 0567 03       		.byte	0x3
 2374 0568 00000000 		.4byte	led_array
 2375 056c 1B       		.uleb128 0x1b
 2376 056d 7E020000 		.4byte	.LASF88
 2377 0571 01       		.byte	0x1
 2378 0572 22       		.byte	0x22
 2379 0573 76000000 		.4byte	0x76
 2380 0577 05       		.uleb128 0x5
 2381 0578 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 56


 2382 0579 00000000 		.4byte	feedback_count
 2383 057d 1B       		.uleb128 0x1b
 2384 057e 24010000 		.4byte	.LASF89
 2385 0582 01       		.byte	0x1
 2386 0583 23       		.byte	0x23
 2387 0584 6B000000 		.4byte	0x6b
 2388 0588 05       		.uleb128 0x5
 2389 0589 03       		.byte	0x3
 2390 058a 00000000 		.4byte	timerFlag
 2391 058e 1B       		.uleb128 0x1b
 2392 058f D8010000 		.4byte	.LASF90
 2393 0593 01       		.byte	0x1
 2394 0594 8C       		.byte	0x8c
 2395 0595 BE000000 		.4byte	0xbe
 2396 0599 05       		.uleb128 0x5
 2397 059a 03       		.byte	0x3
 2398 059b 00000000 		.4byte	shldr_state
 2399 059f 1B       		.uleb128 0x1b
 2400 05a0 6E030000 		.4byte	.LASF91
 2401 05a4 01       		.byte	0x1
 2402 05a5 C4       		.byte	0xc4
 2403 05a6 E3000000 		.4byte	0xe3
 2404 05aa 05       		.uleb128 0x5
 2405 05ab 03       		.byte	0x3
 2406 05ac 00000000 		.4byte	wristTilt_state
 2407 05b0 1B       		.uleb128 0x1b
 2408 05b1 08000000 		.4byte	.LASF92
 2409 05b5 01       		.byte	0x1
 2410 05b6 F5       		.byte	0xf5
 2411 05b7 08010000 		.4byte	0x108
 2412 05bb 05       		.uleb128 0x5
 2413 05bc 03       		.byte	0x3
 2414 05bd 00000000 		.4byte	wristRotate_state
 2415 05c1 1C       		.uleb128 0x1c
 2416 05c2 0D040000 		.4byte	.LASF93
 2417 05c6 01       		.byte	0x1
 2418 05c7 2E01     		.2byte	0x12e
 2419 05c9 2D010000 		.4byte	0x12d
 2420 05cd 05       		.uleb128 0x5
 2421 05ce 03       		.byte	0x3
 2422 05cf 00000000 		.4byte	led_state
 2423 05d3 1C       		.uleb128 0x1c
 2424 05d4 E4010000 		.4byte	.LASF94
 2425 05d8 01       		.byte	0x1
 2426 05d9 6F01     		.2byte	0x16f
 2427 05db 4D010000 		.4byte	0x14d
 2428 05df 05       		.uleb128 0x5
 2429 05e0 03       		.byte	0x3
 2430 05e1 00000000 		.4byte	servo_state
 2431 05e5 1C       		.uleb128 0x1c
 2432 05e6 6D000000 		.4byte	.LASF95
 2433 05ea 01       		.byte	0x1
 2434 05eb 9F01     		.2byte	0x19f
 2435 05ed 6D010000 		.4byte	0x16d
 2436 05f1 05       		.uleb128 0x5
 2437 05f2 03       		.byte	0x3
 2438 05f3 00000000 		.4byte	servo1_state
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 57


 2439 05f7 1C       		.uleb128 0x1c
 2440 05f8 62000000 		.4byte	.LASF96
 2441 05fc 01       		.byte	0x1
 2442 05fd 0602     		.2byte	0x206
 2443 05ff 93010000 		.4byte	0x193
 2444 0603 05       		.uleb128 0x5
 2445 0604 03       		.byte	0x3
 2446 0605 00000000 		.4byte	led1_state
 2447 0609 1C       		.uleb128 0x1c
 2448 060a C3000000 		.4byte	.LASF97
 2449 060e 01       		.byte	0x1
 2450 060f 5102     		.2byte	0x251
 2451 0611 B9010000 		.4byte	0x1b9
 2452 0615 05       		.uleb128 0x5
 2453 0616 03       		.byte	0x3
 2454 0617 00000000 		.4byte	motor_state
 2455 061b 00       		.byte	0
 2456              		.section	.debug_abbrev,"",%progbits
 2457              	.Ldebug_abbrev0:
 2458 0000 01       		.uleb128 0x1
 2459 0001 11       		.uleb128 0x11
 2460 0002 01       		.byte	0x1
 2461 0003 25       		.uleb128 0x25
 2462 0004 0E       		.uleb128 0xe
 2463 0005 13       		.uleb128 0x13
 2464 0006 0B       		.uleb128 0xb
 2465 0007 03       		.uleb128 0x3
 2466 0008 0E       		.uleb128 0xe
 2467 0009 1B       		.uleb128 0x1b
 2468 000a 0E       		.uleb128 0xe
 2469 000b 55       		.uleb128 0x55
 2470 000c 17       		.uleb128 0x17
 2471 000d 11       		.uleb128 0x11
 2472 000e 01       		.uleb128 0x1
 2473 000f 10       		.uleb128 0x10
 2474 0010 17       		.uleb128 0x17
 2475 0011 00       		.byte	0
 2476 0012 00       		.byte	0
 2477 0013 02       		.uleb128 0x2
 2478 0014 24       		.uleb128 0x24
 2479 0015 00       		.byte	0
 2480 0016 0B       		.uleb128 0xb
 2481 0017 0B       		.uleb128 0xb
 2482 0018 3E       		.uleb128 0x3e
 2483 0019 0B       		.uleb128 0xb
 2484 001a 03       		.uleb128 0x3
 2485 001b 0E       		.uleb128 0xe
 2486 001c 00       		.byte	0
 2487 001d 00       		.byte	0
 2488 001e 03       		.uleb128 0x3
 2489 001f 24       		.uleb128 0x24
 2490 0020 00       		.byte	0
 2491 0021 0B       		.uleb128 0xb
 2492 0022 0B       		.uleb128 0xb
 2493 0023 3E       		.uleb128 0x3e
 2494 0024 0B       		.uleb128 0xb
 2495 0025 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 58


 2496 0026 08       		.uleb128 0x8
 2497 0027 00       		.byte	0
 2498 0028 00       		.byte	0
 2499 0029 04       		.uleb128 0x4
 2500 002a 16       		.uleb128 0x16
 2501 002b 00       		.byte	0
 2502 002c 03       		.uleb128 0x3
 2503 002d 0E       		.uleb128 0xe
 2504 002e 3A       		.uleb128 0x3a
 2505 002f 0B       		.uleb128 0xb
 2506 0030 3B       		.uleb128 0x3b
 2507 0031 0B       		.uleb128 0xb
 2508 0032 49       		.uleb128 0x49
 2509 0033 13       		.uleb128 0x13
 2510 0034 00       		.byte	0
 2511 0035 00       		.byte	0
 2512 0036 05       		.uleb128 0x5
 2513 0037 04       		.uleb128 0x4
 2514 0038 01       		.byte	0x1
 2515 0039 03       		.uleb128 0x3
 2516 003a 0E       		.uleb128 0xe
 2517 003b 0B       		.uleb128 0xb
 2518 003c 0B       		.uleb128 0xb
 2519 003d 3A       		.uleb128 0x3a
 2520 003e 0B       		.uleb128 0xb
 2521 003f 3B       		.uleb128 0x3b
 2522 0040 0B       		.uleb128 0xb
 2523 0041 01       		.uleb128 0x1
 2524 0042 13       		.uleb128 0x13
 2525 0043 00       		.byte	0
 2526 0044 00       		.byte	0
 2527 0045 06       		.uleb128 0x6
 2528 0046 28       		.uleb128 0x28
 2529 0047 00       		.byte	0
 2530 0048 03       		.uleb128 0x3
 2531 0049 0E       		.uleb128 0xe
 2532 004a 1C       		.uleb128 0x1c
 2533 004b 0D       		.uleb128 0xd
 2534 004c 00       		.byte	0
 2535 004d 00       		.byte	0
 2536 004e 07       		.uleb128 0x7
 2537 004f 04       		.uleb128 0x4
 2538 0050 01       		.byte	0x1
 2539 0051 03       		.uleb128 0x3
 2540 0052 0E       		.uleb128 0xe
 2541 0053 0B       		.uleb128 0xb
 2542 0054 0B       		.uleb128 0xb
 2543 0055 3A       		.uleb128 0x3a
 2544 0056 0B       		.uleb128 0xb
 2545 0057 3B       		.uleb128 0x3b
 2546 0058 05       		.uleb128 0x5
 2547 0059 01       		.uleb128 0x1
 2548 005a 13       		.uleb128 0x13
 2549 005b 00       		.byte	0
 2550 005c 00       		.byte	0
 2551 005d 08       		.uleb128 0x8
 2552 005e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 59


 2553 005f 01       		.byte	0x1
 2554 0060 3F       		.uleb128 0x3f
 2555 0061 19       		.uleb128 0x19
 2556 0062 03       		.uleb128 0x3
 2557 0063 0E       		.uleb128 0xe
 2558 0064 3A       		.uleb128 0x3a
 2559 0065 0B       		.uleb128 0xb
 2560 0066 3B       		.uleb128 0x3b
 2561 0067 0B       		.uleb128 0xb
 2562 0068 27       		.uleb128 0x27
 2563 0069 19       		.uleb128 0x19
 2564 006a 11       		.uleb128 0x11
 2565 006b 01       		.uleb128 0x1
 2566 006c 12       		.uleb128 0x12
 2567 006d 06       		.uleb128 0x6
 2568 006e 40       		.uleb128 0x40
 2569 006f 18       		.uleb128 0x18
 2570 0070 9642     		.uleb128 0x2116
 2571 0072 19       		.uleb128 0x19
 2572 0073 01       		.uleb128 0x1
 2573 0074 13       		.uleb128 0x13
 2574 0075 00       		.byte	0
 2575 0076 00       		.byte	0
 2576 0077 09       		.uleb128 0x9
 2577 0078 34       		.uleb128 0x34
 2578 0079 00       		.byte	0
 2579 007a 03       		.uleb128 0x3
 2580 007b 0E       		.uleb128 0xe
 2581 007c 3A       		.uleb128 0x3a
 2582 007d 0B       		.uleb128 0xb
 2583 007e 3B       		.uleb128 0x3b
 2584 007f 0B       		.uleb128 0xb
 2585 0080 49       		.uleb128 0x49
 2586 0081 13       		.uleb128 0x13
 2587 0082 02       		.uleb128 0x2
 2588 0083 18       		.uleb128 0x18
 2589 0084 00       		.byte	0
 2590 0085 00       		.byte	0
 2591 0086 0A       		.uleb128 0xa
 2592 0087 2E       		.uleb128 0x2e
 2593 0088 01       		.byte	0x1
 2594 0089 3F       		.uleb128 0x3f
 2595 008a 19       		.uleb128 0x19
 2596 008b 03       		.uleb128 0x3
 2597 008c 0E       		.uleb128 0xe
 2598 008d 3A       		.uleb128 0x3a
 2599 008e 0B       		.uleb128 0xb
 2600 008f 3B       		.uleb128 0x3b
 2601 0090 0B       		.uleb128 0xb
 2602 0091 11       		.uleb128 0x11
 2603 0092 01       		.uleb128 0x1
 2604 0093 12       		.uleb128 0x12
 2605 0094 06       		.uleb128 0x6
 2606 0095 40       		.uleb128 0x40
 2607 0096 18       		.uleb128 0x18
 2608 0097 9742     		.uleb128 0x2117
 2609 0099 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 60


 2610 009a 01       		.uleb128 0x1
 2611 009b 13       		.uleb128 0x13
 2612 009c 00       		.byte	0
 2613 009d 00       		.byte	0
 2614 009e 0B       		.uleb128 0xb
 2615 009f 34       		.uleb128 0x34
 2616 00a0 00       		.byte	0
 2617 00a1 03       		.uleb128 0x3
 2618 00a2 08       		.uleb128 0x8
 2619 00a3 3A       		.uleb128 0x3a
 2620 00a4 0B       		.uleb128 0xb
 2621 00a5 3B       		.uleb128 0x3b
 2622 00a6 0B       		.uleb128 0xb
 2623 00a7 49       		.uleb128 0x49
 2624 00a8 13       		.uleb128 0x13
 2625 00a9 02       		.uleb128 0x2
 2626 00aa 18       		.uleb128 0x18
 2627 00ab 00       		.byte	0
 2628 00ac 00       		.byte	0
 2629 00ad 0C       		.uleb128 0xc
 2630 00ae 2E       		.uleb128 0x2e
 2631 00af 00       		.byte	0
 2632 00b0 3F       		.uleb128 0x3f
 2633 00b1 19       		.uleb128 0x19
 2634 00b2 03       		.uleb128 0x3
 2635 00b3 0E       		.uleb128 0xe
 2636 00b4 3A       		.uleb128 0x3a
 2637 00b5 0B       		.uleb128 0xb
 2638 00b6 3B       		.uleb128 0x3b
 2639 00b7 0B       		.uleb128 0xb
 2640 00b8 11       		.uleb128 0x11
 2641 00b9 01       		.uleb128 0x1
 2642 00ba 12       		.uleb128 0x12
 2643 00bb 06       		.uleb128 0x6
 2644 00bc 40       		.uleb128 0x40
 2645 00bd 18       		.uleb128 0x18
 2646 00be 9742     		.uleb128 0x2117
 2647 00c0 19       		.uleb128 0x19
 2648 00c1 00       		.byte	0
 2649 00c2 00       		.byte	0
 2650 00c3 0D       		.uleb128 0xd
 2651 00c4 2E       		.uleb128 0x2e
 2652 00c5 00       		.byte	0
 2653 00c6 3F       		.uleb128 0x3f
 2654 00c7 19       		.uleb128 0x19
 2655 00c8 03       		.uleb128 0x3
 2656 00c9 0E       		.uleb128 0xe
 2657 00ca 3A       		.uleb128 0x3a
 2658 00cb 0B       		.uleb128 0xb
 2659 00cc 3B       		.uleb128 0x3b
 2660 00cd 05       		.uleb128 0x5
 2661 00ce 11       		.uleb128 0x11
 2662 00cf 01       		.uleb128 0x1
 2663 00d0 12       		.uleb128 0x12
 2664 00d1 06       		.uleb128 0x6
 2665 00d2 40       		.uleb128 0x40
 2666 00d3 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 61


 2667 00d4 9742     		.uleb128 0x2117
 2668 00d6 19       		.uleb128 0x19
 2669 00d7 00       		.byte	0
 2670 00d8 00       		.byte	0
 2671 00d9 0E       		.uleb128 0xe
 2672 00da 2E       		.uleb128 0x2e
 2673 00db 01       		.byte	0x1
 2674 00dc 3F       		.uleb128 0x3f
 2675 00dd 19       		.uleb128 0x19
 2676 00de 03       		.uleb128 0x3
 2677 00df 08       		.uleb128 0x8
 2678 00e0 3A       		.uleb128 0x3a
 2679 00e1 0B       		.uleb128 0xb
 2680 00e2 3B       		.uleb128 0x3b
 2681 00e3 05       		.uleb128 0x5
 2682 00e4 11       		.uleb128 0x11
 2683 00e5 01       		.uleb128 0x1
 2684 00e6 12       		.uleb128 0x12
 2685 00e7 06       		.uleb128 0x6
 2686 00e8 40       		.uleb128 0x40
 2687 00e9 18       		.uleb128 0x18
 2688 00ea 9642     		.uleb128 0x2116
 2689 00ec 19       		.uleb128 0x19
 2690 00ed 01       		.uleb128 0x1
 2691 00ee 13       		.uleb128 0x13
 2692 00ef 00       		.byte	0
 2693 00f0 00       		.byte	0
 2694 00f1 0F       		.uleb128 0xf
 2695 00f2 34       		.uleb128 0x34
 2696 00f3 00       		.byte	0
 2697 00f4 03       		.uleb128 0x3
 2698 00f5 08       		.uleb128 0x8
 2699 00f6 3A       		.uleb128 0x3a
 2700 00f7 0B       		.uleb128 0xb
 2701 00f8 3B       		.uleb128 0x3b
 2702 00f9 05       		.uleb128 0x5
 2703 00fa 49       		.uleb128 0x49
 2704 00fb 13       		.uleb128 0x13
 2705 00fc 02       		.uleb128 0x2
 2706 00fd 18       		.uleb128 0x18
 2707 00fe 00       		.byte	0
 2708 00ff 00       		.byte	0
 2709 0100 10       		.uleb128 0x10
 2710 0101 2E       		.uleb128 0x2e
 2711 0102 01       		.byte	0x1
 2712 0103 3F       		.uleb128 0x3f
 2713 0104 19       		.uleb128 0x19
 2714 0105 03       		.uleb128 0x3
 2715 0106 0E       		.uleb128 0xe
 2716 0107 3A       		.uleb128 0x3a
 2717 0108 0B       		.uleb128 0xb
 2718 0109 3B       		.uleb128 0x3b
 2719 010a 05       		.uleb128 0x5
 2720 010b 27       		.uleb128 0x27
 2721 010c 19       		.uleb128 0x19
 2722 010d 49       		.uleb128 0x49
 2723 010e 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 62


 2724 010f 11       		.uleb128 0x11
 2725 0110 01       		.uleb128 0x1
 2726 0111 12       		.uleb128 0x12
 2727 0112 06       		.uleb128 0x6
 2728 0113 40       		.uleb128 0x40
 2729 0114 18       		.uleb128 0x18
 2730 0115 9642     		.uleb128 0x2116
 2731 0117 19       		.uleb128 0x19
 2732 0118 01       		.uleb128 0x1
 2733 0119 13       		.uleb128 0x13
 2734 011a 00       		.byte	0
 2735 011b 00       		.byte	0
 2736 011c 11       		.uleb128 0x11
 2737 011d 05       		.uleb128 0x5
 2738 011e 00       		.byte	0
 2739 011f 03       		.uleb128 0x3
 2740 0120 0E       		.uleb128 0xe
 2741 0121 3A       		.uleb128 0x3a
 2742 0122 0B       		.uleb128 0xb
 2743 0123 3B       		.uleb128 0x3b
 2744 0124 05       		.uleb128 0x5
 2745 0125 49       		.uleb128 0x49
 2746 0126 13       		.uleb128 0x13
 2747 0127 02       		.uleb128 0x2
 2748 0128 18       		.uleb128 0x18
 2749 0129 00       		.byte	0
 2750 012a 00       		.byte	0
 2751 012b 12       		.uleb128 0x12
 2752 012c 0F       		.uleb128 0xf
 2753 012d 00       		.byte	0
 2754 012e 0B       		.uleb128 0xb
 2755 012f 0B       		.uleb128 0xb
 2756 0130 49       		.uleb128 0x49
 2757 0131 13       		.uleb128 0x13
 2758 0132 00       		.byte	0
 2759 0133 00       		.byte	0
 2760 0134 13       		.uleb128 0x13
 2761 0135 2E       		.uleb128 0x2e
 2762 0136 01       		.byte	0x1
 2763 0137 3F       		.uleb128 0x3f
 2764 0138 19       		.uleb128 0x19
 2765 0139 03       		.uleb128 0x3
 2766 013a 0E       		.uleb128 0xe
 2767 013b 3A       		.uleb128 0x3a
 2768 013c 0B       		.uleb128 0xb
 2769 013d 3B       		.uleb128 0x3b
 2770 013e 05       		.uleb128 0x5
 2771 013f 11       		.uleb128 0x11
 2772 0140 01       		.uleb128 0x1
 2773 0141 12       		.uleb128 0x12
 2774 0142 06       		.uleb128 0x6
 2775 0143 40       		.uleb128 0x40
 2776 0144 18       		.uleb128 0x18
 2777 0145 9642     		.uleb128 0x2116
 2778 0147 19       		.uleb128 0x19
 2779 0148 01       		.uleb128 0x1
 2780 0149 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 63


 2781 014a 00       		.byte	0
 2782 014b 00       		.byte	0
 2783 014c 14       		.uleb128 0x14
 2784 014d 34       		.uleb128 0x34
 2785 014e 00       		.byte	0
 2786 014f 03       		.uleb128 0x3
 2787 0150 0E       		.uleb128 0xe
 2788 0151 3A       		.uleb128 0x3a
 2789 0152 0B       		.uleb128 0xb
 2790 0153 3B       		.uleb128 0x3b
 2791 0154 05       		.uleb128 0x5
 2792 0155 49       		.uleb128 0x49
 2793 0156 13       		.uleb128 0x13
 2794 0157 02       		.uleb128 0x2
 2795 0158 18       		.uleb128 0x18
 2796 0159 00       		.byte	0
 2797 015a 00       		.byte	0
 2798 015b 15       		.uleb128 0x15
 2799 015c 2E       		.uleb128 0x2e
 2800 015d 01       		.byte	0x1
 2801 015e 3F       		.uleb128 0x3f
 2802 015f 19       		.uleb128 0x19
 2803 0160 03       		.uleb128 0x3
 2804 0161 0E       		.uleb128 0xe
 2805 0162 3A       		.uleb128 0x3a
 2806 0163 0B       		.uleb128 0xb
 2807 0164 3B       		.uleb128 0x3b
 2808 0165 05       		.uleb128 0x5
 2809 0166 27       		.uleb128 0x27
 2810 0167 19       		.uleb128 0x19
 2811 0168 49       		.uleb128 0x49
 2812 0169 13       		.uleb128 0x13
 2813 016a 11       		.uleb128 0x11
 2814 016b 01       		.uleb128 0x1
 2815 016c 12       		.uleb128 0x12
 2816 016d 06       		.uleb128 0x6
 2817 016e 40       		.uleb128 0x40
 2818 016f 18       		.uleb128 0x18
 2819 0170 9742     		.uleb128 0x2117
 2820 0172 19       		.uleb128 0x19
 2821 0173 01       		.uleb128 0x1
 2822 0174 13       		.uleb128 0x13
 2823 0175 00       		.byte	0
 2824 0176 00       		.byte	0
 2825 0177 16       		.uleb128 0x16
 2826 0178 05       		.uleb128 0x5
 2827 0179 00       		.byte	0
 2828 017a 03       		.uleb128 0x3
 2829 017b 08       		.uleb128 0x8
 2830 017c 3A       		.uleb128 0x3a
 2831 017d 0B       		.uleb128 0xb
 2832 017e 3B       		.uleb128 0x3b
 2833 017f 05       		.uleb128 0x5
 2834 0180 49       		.uleb128 0x49
 2835 0181 13       		.uleb128 0x13
 2836 0182 02       		.uleb128 0x2
 2837 0183 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 64


 2838 0184 00       		.byte	0
 2839 0185 00       		.byte	0
 2840 0186 17       		.uleb128 0x17
 2841 0187 2E       		.uleb128 0x2e
 2842 0188 01       		.byte	0x1
 2843 0189 3F       		.uleb128 0x3f
 2844 018a 19       		.uleb128 0x19
 2845 018b 03       		.uleb128 0x3
 2846 018c 0E       		.uleb128 0xe
 2847 018d 3A       		.uleb128 0x3a
 2848 018e 0B       		.uleb128 0xb
 2849 018f 3B       		.uleb128 0x3b
 2850 0190 05       		.uleb128 0x5
 2851 0191 49       		.uleb128 0x49
 2852 0192 13       		.uleb128 0x13
 2853 0193 11       		.uleb128 0x11
 2854 0194 01       		.uleb128 0x1
 2855 0195 12       		.uleb128 0x12
 2856 0196 06       		.uleb128 0x6
 2857 0197 40       		.uleb128 0x40
 2858 0198 18       		.uleb128 0x18
 2859 0199 9642     		.uleb128 0x2116
 2860 019b 19       		.uleb128 0x19
 2861 019c 01       		.uleb128 0x1
 2862 019d 13       		.uleb128 0x13
 2863 019e 00       		.byte	0
 2864 019f 00       		.byte	0
 2865 01a0 18       		.uleb128 0x18
 2866 01a1 0B       		.uleb128 0xb
 2867 01a2 01       		.byte	0x1
 2868 01a3 11       		.uleb128 0x11
 2869 01a4 01       		.uleb128 0x1
 2870 01a5 12       		.uleb128 0x12
 2871 01a6 06       		.uleb128 0x6
 2872 01a7 00       		.byte	0
 2873 01a8 00       		.byte	0
 2874 01a9 19       		.uleb128 0x19
 2875 01aa 01       		.uleb128 0x1
 2876 01ab 01       		.byte	0x1
 2877 01ac 49       		.uleb128 0x49
 2878 01ad 13       		.uleb128 0x13
 2879 01ae 01       		.uleb128 0x1
 2880 01af 13       		.uleb128 0x13
 2881 01b0 00       		.byte	0
 2882 01b1 00       		.byte	0
 2883 01b2 1A       		.uleb128 0x1a
 2884 01b3 21       		.uleb128 0x21
 2885 01b4 00       		.byte	0
 2886 01b5 49       		.uleb128 0x49
 2887 01b6 13       		.uleb128 0x13
 2888 01b7 2F       		.uleb128 0x2f
 2889 01b8 0B       		.uleb128 0xb
 2890 01b9 00       		.byte	0
 2891 01ba 00       		.byte	0
 2892 01bb 1B       		.uleb128 0x1b
 2893 01bc 34       		.uleb128 0x34
 2894 01bd 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 65


 2895 01be 03       		.uleb128 0x3
 2896 01bf 0E       		.uleb128 0xe
 2897 01c0 3A       		.uleb128 0x3a
 2898 01c1 0B       		.uleb128 0xb
 2899 01c2 3B       		.uleb128 0x3b
 2900 01c3 0B       		.uleb128 0xb
 2901 01c4 49       		.uleb128 0x49
 2902 01c5 13       		.uleb128 0x13
 2903 01c6 3F       		.uleb128 0x3f
 2904 01c7 19       		.uleb128 0x19
 2905 01c8 02       		.uleb128 0x2
 2906 01c9 18       		.uleb128 0x18
 2907 01ca 00       		.byte	0
 2908 01cb 00       		.byte	0
 2909 01cc 1C       		.uleb128 0x1c
 2910 01cd 34       		.uleb128 0x34
 2911 01ce 00       		.byte	0
 2912 01cf 03       		.uleb128 0x3
 2913 01d0 0E       		.uleb128 0xe
 2914 01d1 3A       		.uleb128 0x3a
 2915 01d2 0B       		.uleb128 0xb
 2916 01d3 3B       		.uleb128 0x3b
 2917 01d4 05       		.uleb128 0x5
 2918 01d5 49       		.uleb128 0x49
 2919 01d6 13       		.uleb128 0x13
 2920 01d7 3F       		.uleb128 0x3f
 2921 01d8 19       		.uleb128 0x19
 2922 01d9 02       		.uleb128 0x2
 2923 01da 18       		.uleb128 0x18
 2924 01db 00       		.byte	0
 2925 01dc 00       		.byte	0
 2926 01dd 00       		.byte	0
 2927              		.section	.debug_aranges,"",%progbits
 2928 0000 9C000000 		.4byte	0x9c
 2929 0004 0200     		.2byte	0x2
 2930 0006 00000000 		.4byte	.Ldebug_info0
 2931 000a 04       		.byte	0x4
 2932 000b 00       		.byte	0
 2933 000c 0000     		.2byte	0
 2934 000e 0000     		.2byte	0
 2935 0010 00000000 		.4byte	.LFB33
 2936 0014 28000000 		.4byte	.LFE33-.LFB33
 2937 0018 00000000 		.4byte	.LFB34
 2938 001c 0C010000 		.4byte	.LFE34-.LFB34
 2939 0020 00000000 		.4byte	.LFB35
 2940 0024 4C000000 		.4byte	.LFE35-.LFB35
 2941 0028 00000000 		.4byte	.LFB36
 2942 002c 08000000 		.4byte	.LFE36-.LFB36
 2943 0030 00000000 		.4byte	.LFB37
 2944 0034 44000000 		.4byte	.LFE37-.LFB37
 2945 0038 00000000 		.4byte	.LFB38
 2946 003c 08000000 		.4byte	.LFE38-.LFB38
 2947 0040 00000000 		.4byte	.LFB39
 2948 0044 48000000 		.4byte	.LFE39-.LFB39
 2949 0048 00000000 		.4byte	.LFB40
 2950 004c 48000000 		.4byte	.LFE40-.LFB40
 2951 0050 00000000 		.4byte	.LFB41
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 66


 2952 0054 08000000 		.4byte	.LFE41-.LFB41
 2953 0058 00000000 		.4byte	.LFB42
 2954 005c 88000000 		.4byte	.LFE42-.LFB42
 2955 0060 00000000 		.4byte	.LFB43
 2956 0064 78000000 		.4byte	.LFE43-.LFB43
 2957 0068 00000000 		.4byte	.LFB44
 2958 006c 88000000 		.4byte	.LFE44-.LFB44
 2959 0070 00000000 		.4byte	.LFB45
 2960 0074 34010000 		.4byte	.LFE45-.LFB45
 2961 0078 00000000 		.4byte	.LFB46
 2962 007c 90000000 		.4byte	.LFE46-.LFB46
 2963 0080 00000000 		.4byte	.LFB47
 2964 0084 3C010000 		.4byte	.LFE47-.LFB47
 2965 0088 00000000 		.4byte	.LFB48
 2966 008c 08000000 		.4byte	.LFE48-.LFB48
 2967 0090 00000000 		.4byte	.LFB49
 2968 0094 18010000 		.4byte	.LFE49-.LFB49
 2969 0098 00000000 		.4byte	0
 2970 009c 00000000 		.4byte	0
 2971              		.section	.debug_ranges,"",%progbits
 2972              	.Ldebug_ranges0:
 2973 0000 00000000 		.4byte	.LFB33
 2974 0004 28000000 		.4byte	.LFE33
 2975 0008 00000000 		.4byte	.LFB34
 2976 000c 0C010000 		.4byte	.LFE34
 2977 0010 00000000 		.4byte	.LFB35
 2978 0014 4C000000 		.4byte	.LFE35
 2979 0018 00000000 		.4byte	.LFB36
 2980 001c 08000000 		.4byte	.LFE36
 2981 0020 00000000 		.4byte	.LFB37
 2982 0024 44000000 		.4byte	.LFE37
 2983 0028 00000000 		.4byte	.LFB38
 2984 002c 08000000 		.4byte	.LFE38
 2985 0030 00000000 		.4byte	.LFB39
 2986 0034 48000000 		.4byte	.LFE39
 2987 0038 00000000 		.4byte	.LFB40
 2988 003c 48000000 		.4byte	.LFE40
 2989 0040 00000000 		.4byte	.LFB41
 2990 0044 08000000 		.4byte	.LFE41
 2991 0048 00000000 		.4byte	.LFB42
 2992 004c 88000000 		.4byte	.LFE42
 2993 0050 00000000 		.4byte	.LFB43
 2994 0054 78000000 		.4byte	.LFE43
 2995 0058 00000000 		.4byte	.LFB44
 2996 005c 88000000 		.4byte	.LFE44
 2997 0060 00000000 		.4byte	.LFB45
 2998 0064 34010000 		.4byte	.LFE45
 2999 0068 00000000 		.4byte	.LFB46
 3000 006c 90000000 		.4byte	.LFE46
 3001 0070 00000000 		.4byte	.LFB47
 3002 0074 3C010000 		.4byte	.LFE47
 3003 0078 00000000 		.4byte	.LFB48
 3004 007c 08000000 		.4byte	.LFE48
 3005 0080 00000000 		.4byte	.LFB49
 3006 0084 18010000 		.4byte	.LFE49
 3007 0088 00000000 		.4byte	0
 3008 008c 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 67


 3009              		.section	.debug_line,"",%progbits
 3010              	.Ldebug_line0:
 3011 0000 2A030000 		.section	.debug_str,"MS",%progbits,1
 3011      0200BF00 
 3011      00000201 
 3011      FB0E0D00 
 3011      01010101 
 3012              	.LASF34:
 3013 0000 6C5F7374 		.ascii	"l_start\000"
 3013      61727400 
 3014              	.LASF92:
 3015 0008 77726973 		.ascii	"wristRotate_state\000"
 3015      74526F74 
 3015      6174655F 
 3015      73746174 
 3015      6500
 3016              	.LASF71:
 3017 001a 6E65775F 		.ascii	"new_val\000"
 3017      76616C00 
 3018              	.LASF19:
 3019 0022 73686C64 		.ascii	"shldr_init\000"
 3019      725F696E 
 3019      697400
 3020              	.LASF25:
 3021 002d 74696C74 		.ascii	"tilt_start\000"
 3021      5F737461 
 3021      727400
 3022              	.LASF64:
 3023 0038 61727261 		.ascii	"array\000"
 3023      7900
 3024              	.LASF48:
 3025 003e 6C315F69 		.ascii	"l1_init\000"
 3025      6E697400 
 3026              	.LASF56:
 3027 0046 66696C6C 		.ascii	"fill_data_array\000"
 3027      5F646174 
 3027      615F6172 
 3027      72617900 
 3028              	.LASF85:
 3029 0056 73657276 		.ascii	"servo_array\000"
 3029      6F5F6172 
 3029      72617900 
 3030              	.LASF96:
 3031 0062 6C656431 		.ascii	"led1_state\000"
 3031      5F737461 
 3031      746500
 3032              	.LASF95:
 3033 006d 73657276 		.ascii	"servo1_state\000"
 3033      6F315F73 
 3033      74617465 
 3033      00
 3034              	.LASF30:
 3035 007a 726F7461 		.ascii	"rotate_start\000"
 3035      74655F73 
 3035      74617274 
 3035      00
 3036              	.LASF16:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 68


 3037 0087 73697A65 		.ascii	"sizetype\000"
 3037      74797065 
 3037      00
 3038              	.LASF28:
 3039 0090 77726973 		.ascii	"wristRotate_states\000"
 3039      74526F74 
 3039      6174655F 
 3039      73746174 
 3039      657300
 3040              	.LASF80:
 3041 00a3 77697A6E 		.ascii	"wiznet\000"
 3041      657400
 3042              	.LASF70:
 3043 00aa 6C65645F 		.ascii	"led_adjust\000"
 3043      61646A75 
 3043      737400
 3044              	.LASF6:
 3045 00b5 6C6F6E67 		.ascii	"long long int\000"
 3045      206C6F6E 
 3045      6720696E 
 3045      7400
 3046              	.LASF97:
 3047 00c3 6D6F746F 		.ascii	"motor_state\000"
 3047      725F7374 
 3047      61746500 
 3048              	.LASF50:
 3049 00cf 6C315F77 		.ascii	"l1_wait\000"
 3049      61697400 
 3050              	.LASF2:
 3051 00d7 73686F72 		.ascii	"short int\000"
 3051      7420696E 
 3051      7400
 3052              	.LASF37:
 3053 00e1 73657276 		.ascii	"servo_states\000"
 3053      6F5F7374 
 3053      61746573 
 3053      00
 3054              	.LASF60:
 3055 00ee 656C626F 		.ascii	"elbow\000"
 3055      7700
 3056              	.LASF44:
 3057 00f4 73315F65 		.ascii	"s1_execute\000"
 3057      78656375 
 3057      746500
 3058              	.LASF10:
 3059 00ff 75696E74 		.ascii	"uint16\000"
 3059      313600
 3060              	.LASF62:
 3061 0106 77726973 		.ascii	"wristRotate\000"
 3061      74526F74 
 3061      61746500 
 3062              	.LASF12:
 3063 0112 696E7431 		.ascii	"int16\000"
 3063      3600
 3064              	.LASF29:
 3065 0118 726F7461 		.ascii	"rotate_init\000"
 3065      74655F69 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 69


 3065      6E697400 
 3066              	.LASF89:
 3067 0124 74696D65 		.ascii	"timerFlag\000"
 3067      72466C61 
 3067      6700
 3068              	.LASF46:
 3069 012e 6C656431 		.ascii	"led1_states\000"
 3069      5F737461 
 3069      74657300 
 3070              	.LASF35:
 3071 013a 6C5F6469 		.ascii	"l_different\000"
 3071      66666572 
 3071      656E7400 
 3072              	.LASF0:
 3073 0146 7369676E 		.ascii	"signed char\000"
 3073      65642063 
 3073      68617200 
 3074              	.LASF83:
 3075 0152 74657374 		.ascii	"test_array\000"
 3075      5F617272 
 3075      617900
 3076              	.LASF13:
 3077 015d 666C6F61 		.ascii	"float\000"
 3077      7400
 3078              	.LASF87:
 3079 0163 6C65645F 		.ascii	"led_array\000"
 3079      61727261 
 3079      7900
 3080              	.LASF58:
 3081 016d 62617365 		.ascii	"baseAzimuth\000"
 3081      417A696D 
 3081      75746800 
 3082              	.LASF61:
 3083 0179 77726973 		.ascii	"wristTilt\000"
 3083      7454696C 
 3083      7400
 3084              	.LASF31:
 3085 0183 726F7461 		.ascii	"rotate_control\000"
 3085      74655F63 
 3085      6F6E7472 
 3085      6F6C00
 3086              	.LASF15:
 3087 0192 63686172 		.ascii	"char\000"
 3087      00
 3088              	.LASF4:
 3089 0197 6C6F6E67 		.ascii	"long int\000"
 3089      20696E74 
 3089      00
 3090              	.LASF42:
 3091 01a0 73315F73 		.ascii	"s1_start\000"
 3091      74617274 
 3091      00
 3092              	.LASF22:
 3093 01a9 73686C64 		.ascii	"shldr_states\000"
 3093      725F7374 
 3093      61746573 
 3093      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 70


 3094              	.LASF49:
 3095 01b6 6C315F65 		.ascii	"l1_execute\000"
 3095      78656375 
 3095      746500
 3096              	.LASF82:
 3097 01c1 66696E5F 		.ascii	"fin_exec\000"
 3097      65786563 
 3097      00
 3098              	.LASF1:
 3099 01ca 756E7369 		.ascii	"unsigned char\000"
 3099      676E6564 
 3099      20636861 
 3099      7200
 3100              	.LASF90:
 3101 01d8 73686C64 		.ascii	"shldr_state\000"
 3101      725F7374 
 3101      61746500 
 3102              	.LASF94:
 3103 01e4 73657276 		.ascii	"servo_state\000"
 3103      6F5F7374 
 3103      61746500 
 3104              	.LASF24:
 3105 01f0 74696C74 		.ascii	"tilt_init\000"
 3105      5F696E69 
 3105      7400
 3106              	.LASF84:
 3107 01fa 73657276 		.ascii	"serv_arr_cspot\000"
 3107      5F617272 
 3107      5F637370 
 3107      6F7400
 3108              	.LASF18:
 3109 0209 73686C64 		.ascii	"shldr_start\000"
 3109      725F7374 
 3109      61727400 
 3110              	.LASF99:
 3111 0215 2E5C6D61 		.ascii	".\\main.c\000"
 3111      696E2E63 
 3111      00
 3112              	.LASF63:
 3113 021e 73656E64 		.ascii	"send_feedback\000"
 3113      5F666565 
 3113      64626163 
 3113      6B00
 3114              	.LASF74:
 3115 022c 74696D65 		.ascii	"timer_isr\000"
 3115      725F6973 
 3115      7200
 3116              	.LASF55:
 3117 0236 6973725F 		.ascii	"isr_var\000"
 3117      76617200 
 3118              	.LASF76:
 3119 023e 636F756E 		.ascii	"counter\000"
 3119      74657200 
 3120              	.LASF36:
 3121 0246 6C5F7761 		.ascii	"l_wait\000"
 3121      697400
 3122              	.LASF78:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 71


 3123 024d 72616E64 		.ascii	"random_number\000"
 3123      6F6D5F6E 
 3123      756D6265 
 3123      7200
 3124              	.LASF27:
 3125 025b 74696C74 		.ascii	"tilt_feedback\000"
 3125      5F666565 
 3125      64626163 
 3125      6B00
 3126              	.LASF20:
 3127 0269 73686C64 		.ascii	"shldr_fdbk\000"
 3127      725F6664 
 3127      626B00
 3128              	.LASF65:
 3129 0274 6E756D5F 		.ascii	"num_items\000"
 3129      6974656D 
 3129      7300
 3130              	.LASF88:
 3131 027e 66656564 		.ascii	"feedback_count\000"
 3131      6261636B 
 3131      5F636F75 
 3131      6E7400
 3132              	.LASF7:
 3133 028d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3133      206C6F6E 
 3133      6720756E 
 3133      7369676E 
 3133      65642069 
 3134              	.LASF41:
 3135 02a4 73657276 		.ascii	"servo1_states\000"
 3135      6F315F73 
 3135      74617465 
 3135      7300
 3136              	.LASF8:
 3137 02b2 756E7369 		.ascii	"unsigned int\000"
 3137      676E6564 
 3137      20696E74 
 3137      00
 3138              	.LASF52:
 3139 02bf 6D5F7374 		.ascii	"m_start\000"
 3139      61727400 
 3140              	.LASF5:
 3141 02c7 6C6F6E67 		.ascii	"long unsigned int\000"
 3141      20756E73 
 3141      69676E65 
 3141      6420696E 
 3141      7400
 3142              	.LASF3:
 3143 02d9 73686F72 		.ascii	"short unsigned int\000"
 3143      7420756E 
 3143      7369676E 
 3143      65642069 
 3143      6E7400
 3144              	.LASF23:
 3145 02ec 77726973 		.ascii	"wristTilt_states\000"
 3145      7454696C 
 3145      745F7374 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 72


 3145      61746573 
 3145      00
 3146              	.LASF51:
 3147 02fd 6D6F746F 		.ascii	"motor_states\000"
 3147      725F7374 
 3147      61746573 
 3147      00
 3148              	.LASF100:
 3149 030a 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 3149      73657273 
 3149      5C53616D 
 3149      75656C5C 
 3149      446F6375 
 3150 0338 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 3150      5C61726D 
 3150      5F636F6E 
 3150      74726F6C 
 3150      6C65725F 
 3151 0368 00       		.ascii	"\000"
 3152              	.LASF75:
 3153 0369 6D61696E 		.ascii	"main\000"
 3153      00
 3154              	.LASF91:
 3155 036e 77726973 		.ascii	"wristTilt_state\000"
 3155      7454696C 
 3155      745F7374 
 3155      61746500 
 3156              	.LASF67:
 3157 037e 73657276 		.ascii	"servo1\000"
 3157      6F3100
 3158              	.LASF33:
 3159 0385 6C65645F 		.ascii	"led_states\000"
 3159      73746174 
 3159      657300
 3160              	.LASF9:
 3161 0390 75696E74 		.ascii	"uint8\000"
 3161      3800
 3162              	.LASF73:
 3163 0396 6D6F746F 		.ascii	"motor\000"
 3163      7200
 3164              	.LASF53:
 3165 039c 6D5F6469 		.ascii	"m_different\000"
 3165      66666572 
 3165      656E7400 
 3166              	.LASF59:
 3167 03a8 73686F75 		.ascii	"shoulder\000"
 3167      6C646572 
 3167      00
 3168              	.LASF11:
 3169 03b1 75696E74 		.ascii	"uint32\000"
 3169      333200
 3170              	.LASF21:
 3171 03b8 73686C64 		.ascii	"shldr_exe\000"
 3171      725F6578 
 3171      6500
 3172              	.LASF26:
 3173 03c2 74696C74 		.ascii	"tilt_control\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 73


 3173      5F636F6E 
 3173      74726F6C 
 3173      00
 3174              	.LASF14:
 3175 03cf 646F7562 		.ascii	"double\000"
 3175      6C6500
 3176              	.LASF77:
 3177 03d6 636F756E 		.ascii	"counter_five\000"
 3177      7465725F 
 3177      66697665 
 3177      00
 3178              	.LASF17:
 3179 03e3 74696D65 		.ascii	"time_t\000"
 3179      5F7400
 3180              	.LASF47:
 3181 03ea 6C315F73 		.ascii	"l1_start\000"
 3181      74617274 
 3181      00
 3182              	.LASF39:
 3183 03f3 735F6469 		.ascii	"s_different\000"
 3183      66666572 
 3183      656E7400 
 3184              	.LASF66:
 3185 03ff 73657276 		.ascii	"servo\000"
 3185      6F00
 3186              	.LASF38:
 3187 0405 735F7374 		.ascii	"s_start\000"
 3187      61727400 
 3188              	.LASF93:
 3189 040d 6C65645F 		.ascii	"led_state\000"
 3189      73746174 
 3189      6500
 3190              	.LASF43:
 3191 0417 73315F69 		.ascii	"s1_init\000"
 3191      6E697400 
 3192              	.LASF72:
 3193 041f 6C656431 		.ascii	"led1\000"
 3193      00
 3194              	.LASF57:
 3195 0424 66696C6C 		.ascii	"fill_data_array1\000"
 3195      5F646174 
 3195      615F6172 
 3195      72617931 
 3195      00
 3196              	.LASF86:
 3197 0435 6C65645F 		.ascii	"led_arr_cspot\000"
 3197      6172725F 
 3197      6373706F 
 3197      7400
 3198              	.LASF81:
 3199 0443 6E65775F 		.ascii	"new_pack\000"
 3199      7061636B 
 3199      00
 3200              	.LASF40:
 3201 044c 735F7761 		.ascii	"s_wait\000"
 3201      697400
 3202              	.LASF98:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZdhc07.s 			page 74


 3203 0453 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3203      4320342E 
 3203      382E3420 
 3203      32303134 
 3203      30353236 
 3204 0486 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3204      20726576 
 3204      6973696F 
 3204      6E203231 
 3204      31333538 
 3205 04b9 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 3205      74643D67 
 3205      6E753939 
 3205      202D6666 
 3205      756E6374 
 3206              	.LASF69:
 3207 04da 61766572 		.ascii	"average\000"
 3207      61676500 
 3208              	.LASF79:
 3209 04e2 64617461 		.ascii	"data_array\000"
 3209      5F617272 
 3209      617900
 3210              	.LASF68:
 3211 04ed 636F6D6D 		.ascii	"command\000"
 3211      616E6400 
 3212              	.LASF45:
 3213 04f5 73315F77 		.ascii	"s1_wait\000"
 3213      61697400 
 3214              	.LASF32:
 3215 04fd 726F7461 		.ascii	"rotate_feedback\000"
 3215      74655F66 
 3215      65656462 
 3215      61636B00 
 3216              	.LASF54:
 3217 050d 6D5F7761 		.ascii	"m_wait\000"
 3217      697400
 3218              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

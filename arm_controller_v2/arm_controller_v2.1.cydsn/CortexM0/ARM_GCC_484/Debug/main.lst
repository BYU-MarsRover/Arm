ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	BA_arr_cspot,1,1
  25              		.comm	baseAz_array,40,4
  26              		.comm	feedback_count,2,2
  27              		.comm	timerFlag,1,1
  28              		.section	.text.timer_isr,"ax",%progbits
  29              		.align	2
  30              		.global	timer_isr
  31              		.code	16
  32              		.thumb_func
  33              		.type	timer_isr, %function
  34              	timer_isr:
  35              	.LFB33:
  36              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define DATA_ARRAY_SIZE 14
  14:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  15:.\main.c      **** 
  16:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  17:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  18:.\main.c      **** 
  19:.\main.c      **** #define NUM_OF_SM 2
  20:.\main.c      **** uint8 fin_exec; //counts
  21:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 2


  22:.\main.c      **** #define TEST_ARRAY_SIZE 10
  23:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  24:.\main.c      **** 
  25:.\main.c      **** #define ELBW_ARR_SIZE 20
  26:.\main.c      **** uint8 elbw_arr_cspot;
  27:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  28:.\main.c      **** 
  29:.\main.c      **** #define BA_ARR_SIZE 20
  30:.\main.c      **** uint8 BA_arr_cspot;
  31:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  32:.\main.c      **** 
  33:.\main.c      **** uint16 feedback_count;
  34:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  35:.\main.c      **** 
  36:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  37:.\main.c      **** ///set to the time of the longest path for our code
  38:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  39:.\main.c      **** CY_ISR(timer_isr)
  40:.\main.c      **** {
  37              		.loc 1 40 0
  38              		.cfi_startproc
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  41:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  47              		.loc 1 41 0
  48 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  49 000a 031C     		mov	r3, r0
  50 000c 7B60     		str	r3, [r7, #4]
  42:.\main.c      ****     timerFlag = 1;
  51              		.loc 1 42 0
  52 000e 054B     		ldr	r3, .L2
  53 0010 0122     		mov	r2, #1
  54 0012 1A70     		strb	r2, [r3]
  43:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  55              		.loc 1 43 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 181C     		mov	r0, r3
  58 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  44:.\main.c      **** }
  59              		.loc 1 44 0
  60 001c BD46     		mov	sp, r7
  61 001e 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0020 80BD     		pop	{r7, pc}
  64              	.L3:
  65 0022 C046     		.align	2
  66              	.L2:
  67 0024 00000000 		.word	timerFlag
  68              		.cfi_endproc
  69              	.LFE33:
  70              		.size	timer_isr, .-timer_isr
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 3


  71              		.section	.text.fill_data_array,"ax",%progbits
  72              		.align	2
  73              		.global	fill_data_array
  74              		.code	16
  75              		.thumb_func
  76              		.type	fill_data_array, %function
  77              	fill_data_array:
  78              	.LFB34:
  45:.\main.c      **** 
  46:.\main.c      **** 
  47:.\main.c      **** //Funtion declarations/definitions
  48:.\main.c      **** //TODO do we need to make a header for good practice?
  49:.\main.c      **** 
  50:.\main.c      **** //---------------------------------------------------
  51:.\main.c      **** //    Function stubs for the header
  52:.\main.c      **** //---------------------------------------------------
  53:.\main.c      **** void fill_data_array();
  54:.\main.c      **** void baseAzimuth();
  55:.\main.c      **** void shoulder();
  56:.\main.c      **** void elbow();
  57:.\main.c      **** void wristTilt();
  58:.\main.c      **** void wristRotate();
  59:.\main.c      **** void send_feedback();
  60:.\main.c      **** //--------------------------------------------------- END Function Stubs
  61:.\main.c      **** 
  62:.\main.c      **** 
  63:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  64:.\main.c      **** void fill_data_array()
  65:.\main.c      **** {
  79              		.loc 1 65 0
  80              		.cfi_startproc
  81 0000 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 82B0     		sub	sp, sp, #8
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  66:.\main.c      ****     uint8 i = 0;
  89              		.loc 1 66 0
  90 0006 FB1D     		add	r3, r7, #7
  91 0008 0022     		mov	r2, #0
  92 000a 1A70     		strb	r2, [r3]
  67:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
  93              		.loc 1 67 0
  94 000c FB1D     		add	r3, r7, #7
  95 000e 0022     		mov	r2, #0
  96 0010 1A70     		strb	r2, [r3]
  97 0012 0FE0     		b	.L5
  98              	.L6:
  68:.\main.c      ****     {
  69:.\main.c      ****         data_array[i] = test_array[i];
  99              		.loc 1 69 0 discriminator 2
 100 0014 FB1D     		add	r3, r7, #7
 101 0016 1A78     		ldrb	r2, [r3]
 102 0018 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 4


 103 001a 1978     		ldrb	r1, [r3]
 104 001c 094B     		ldr	r3, .L7
 105 001e 4900     		lsl	r1, r1, #1
 106 0020 CB5A     		ldrh	r3, [r1, r3]
 107 0022 99B2     		uxth	r1, r3
 108 0024 084B     		ldr	r3, .L7+4
 109 0026 5200     		lsl	r2, r2, #1
 110 0028 D152     		strh	r1, [r2, r3]
  67:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 111              		.loc 1 67 0 discriminator 2
 112 002a FB1D     		add	r3, r7, #7
 113 002c 1A78     		ldrb	r2, [r3]
 114 002e FB1D     		add	r3, r7, #7
 115 0030 0132     		add	r2, r2, #1
 116 0032 1A70     		strb	r2, [r3]
 117              	.L5:
  67:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 118              		.loc 1 67 0 is_stmt 0 discriminator 1
 119 0034 FB1D     		add	r3, r7, #7
 120 0036 1B78     		ldrb	r3, [r3]
 121 0038 092B     		cmp	r3, #9
 122 003a EBD9     		bls	.L6
  70:.\main.c      ****     }
  71:.\main.c      **** }
 123              		.loc 1 71 0 is_stmt 1
 124 003c BD46     		mov	sp, r7
 125 003e 02B0     		add	sp, sp, #8
 126              		@ sp needed
 127 0040 80BD     		pop	{r7, pc}
 128              	.L8:
 129 0042 C046     		.align	2
 130              	.L7:
 131 0044 00000000 		.word	test_array
 132 0048 00000000 		.word	data_array
 133              		.cfi_endproc
 134              	.LFE34:
 135              		.size	fill_data_array, .-fill_data_array
 136              		.comm	shldr_state,1,1
 137              		.section	.text.shoulder,"ax",%progbits
 138              		.align	2
 139              		.global	shoulder
 140              		.code	16
 141              		.thumb_func
 142              		.type	shoulder, %function
 143              	shoulder:
 144              	.LFB35:
  72:.\main.c      **** 
  73:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
  74:.\main.c      **** //control the shoulder
  75:.\main.c      **** void shoulder()
  76:.\main.c      **** {
 145              		.loc 1 76 0
 146              		.cfi_startproc
 147 0000 80B5     		push	{r7, lr}
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 5


 151 0002 00AF     		add	r7, sp, #0
 152              		.cfi_def_cfa_register 7
  77:.\main.c      ****     //take instruction from data_array
  78:.\main.c      ****     //smooth input
  79:.\main.c      ****     //actuate the shoulder using PWM
  80:.\main.c      ****     //get feedback
  81:.\main.c      ****     
  82:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  83:.\main.c      ****     //switch statement for state actions
  84:.\main.c      **** 		//start
  85:.\main.c      **** 			//break
  86:.\main.c      **** 		//initialize
  87:.\main.c      **** 			//create smoothing array
  88:.\main.c      **** 		//feedback
  89:.\main.c      **** 			//read feedback
  90:.\main.c      **** 		//execute
  91:.\main.c      **** 			//add the shifted value from main to back of smoothing array
  92:.\main.c      **** 			//calculate average of value in array
  93:.\main.c      ****     
  94:.\main.c      ****     switch(shldr_state)
 153              		.loc 1 94 0
 154 0004 0E4B     		ldr	r3, .L17
 155 0006 1B78     		ldrb	r3, [r3]
 156 0008 012B     		cmp	r3, #1
 157 000a 0CD0     		beq	.L11
 158 000c 02DC     		bgt	.L12
 159 000e 002B     		cmp	r3, #0
 160 0010 05D0     		beq	.L13
 161 0012 12E0     		b	.L9
 162              	.L12:
 163 0014 022B     		cmp	r3, #2
 164 0016 0FD0     		beq	.L16
 165 0018 032B     		cmp	r3, #3
 166 001a 08D0     		beq	.L15
 167 001c 0DE0     		b	.L9
 168              	.L13:
  95:.\main.c      ****     {//switch staatement for state transitions
  96:.\main.c      **** 		case shldr_start: //start
  97:.\main.c      **** 			//next state will be init
  98:.\main.c      ****             shldr_state = shldr_init;
 169              		.loc 1 98 0
 170 001e 084B     		ldr	r3, .L17
 171 0020 0122     		mov	r2, #1
 172 0022 1A70     		strb	r2, [r3]
  99:.\main.c      ****             break;
 173              		.loc 1 99 0
 174 0024 09E0     		b	.L9
 175              	.L11:
 100:.\main.c      ****         
 101:.\main.c      **** 		case shldr_init: //initialize
 102:.\main.c      **** 			//next state will be feedback
 103:.\main.c      ****             shldr_state = shldr_fdbk;
 176              		.loc 1 103 0
 177 0026 064B     		ldr	r3, .L17
 178 0028 0222     		mov	r2, #2
 179 002a 1A70     		strb	r2, [r3]
 104:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 6


 180              		.loc 1 104 0
 181 002c 05E0     		b	.L9
 182              	.L15:
 105:.\main.c      ****         
 106:.\main.c      **** 		case shldr_fdbk://feedback
 107:.\main.c      **** 			//if position ok relative to average
 108:.\main.c      **** 				//execute
 109:.\main.c      **** 			//else if not ok
 110:.\main.c      **** 				//report problem
 111:.\main.c      ****             break;
 112:.\main.c      **** 		case shldr_exe://execute
 113:.\main.c      **** 			//next state will be report
 114:.\main.c      ****             shldr_state = shldr_fdbk;
 183              		.loc 1 114 0
 184 002e 044B     		ldr	r3, .L17
 185 0030 0222     		mov	r2, #2
 186 0032 1A70     		strb	r2, [r3]
 115:.\main.c      ****             break;
 187              		.loc 1 115 0
 188 0034 C046     		mov	r8, r8
 189 0036 00E0     		b	.L9
 190              	.L16:
 111:.\main.c      ****             break;
 191              		.loc 1 111 0
 192 0038 C046     		mov	r8, r8
 193              	.L9:
 116:.\main.c      ****     }
 117:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 118:.\main.c      **** }
 194              		.loc 1 118 0
 195 003a BD46     		mov	sp, r7
 196              		@ sp needed
 197 003c 80BD     		pop	{r7, pc}
 198              	.L18:
 199 003e C046     		.align	2
 200              	.L17:
 201 0040 00000000 		.word	shldr_state
 202              		.cfi_endproc
 203              	.LFE35:
 204              		.size	shoulder, .-shoulder
 205              		.comm	wristTilt_state,1,1
 206              		.section	.text.wristTilt,"ax",%progbits
 207              		.align	2
 208              		.global	wristTilt
 209              		.code	16
 210              		.thumb_func
 211              		.type	wristTilt, %function
 212              	wristTilt:
 213              	.LFB36:
 119:.\main.c      **** 
 120:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 121:.\main.c      **** //control the tilting motion of the wrist
 122:.\main.c      **** void wristTilt()
 123:.\main.c      **** {
 214              		.loc 1 123 0
 215              		.cfi_startproc
 216 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 7


 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 124:.\main.c      ****     // Overview
 125:.\main.c      ****     //take instruction from data_array
 126:.\main.c      ****     //smooth input
 127:.\main.c      ****     //actuate the tilting using UART
 128:.\main.c      ****     //get feedback
 129:.\main.c      **** 
 130:.\main.c      ****     //-------------------------- 
 131:.\main.c      ****     // Dynamixel Servo specific
 132:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 133:.\main.c      ****     // TODO: Set the desired position
 134:.\main.c      **** 
 135:.\main.c      ****     //--------------------------
 136:.\main.c      ****     // State machine
 137:.\main.c      ****     
 138:.\main.c      ****         // Action
 139:.\main.c      ****     switch(wristTilt_state)
 222              		.loc 1 139 0
 223 0004 0F4B     		ldr	r3, .L35
 224 0006 1B78     		ldrb	r3, [r3]
 225 0008 012B     		cmp	r3, #1
 226 000a 06D0     		beq	.L32
 227 000c 07DC     		bgt	.L33
 228 000e 002B     		cmp	r3, #0
 229 0010 06D1     		bne	.L20
 140:.\main.c      ****     {
 141:.\main.c      ****         case tilt_init:
 142:.\main.c      ****             wristTilt_state = tilt_start;
 230              		.loc 1 142 0
 231 0012 0C4B     		ldr	r3, .L35
 232 0014 0122     		mov	r2, #1
 233 0016 1A70     		strb	r2, [r3]
 143:.\main.c      ****             break;
 234              		.loc 1 143 0
 235 0018 02E0     		b	.L20
 236              	.L32:
 144:.\main.c      ****         case tilt_start:
 145:.\main.c      ****             // Set the torque - this is a one time thing
 146:.\main.c      ****             // Set the speed - I think this is a one time thing
 147:.\main.c      ****             break;
 237              		.loc 1 147 0
 238 001a C046     		mov	r8, r8
 239 001c 00E0     		b	.L20
 240              	.L33:
 148:.\main.c      ****         case tilt_control:
 149:.\main.c      ****             break;
 241              		.loc 1 149 0
 242 001e C046     		mov	r8, r8
 243              	.L20:
 150:.\main.c      ****         case tilt_feedback:
 151:.\main.c      ****             break;
 152:.\main.c      ****     }
 153:.\main.c      ****         // Transistion
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 8


 154:.\main.c      ****     switch(wristTilt_state)
 244              		.loc 1 154 0
 245 0020 084B     		ldr	r3, .L35
 246 0022 1B78     		ldrb	r3, [r3]
 247 0024 012B     		cmp	r3, #1
 248 0026 06D0     		beq	.L27
 249 0028 09DC     		bgt	.L34
 250 002a 002B     		cmp	r3, #0
 251 002c 08D1     		bne	.L19
 155:.\main.c      ****     {
 156:.\main.c      ****         case tilt_init:
 157:.\main.c      ****             wristTilt_state = tilt_start;
 252              		.loc 1 157 0
 253 002e 054B     		ldr	r3, .L35
 254 0030 0122     		mov	r2, #1
 255 0032 1A70     		strb	r2, [r3]
 158:.\main.c      ****             break;
 256              		.loc 1 158 0
 257 0034 04E0     		b	.L19
 258              	.L27:
 159:.\main.c      ****         case tilt_start:
 160:.\main.c      ****             wristTilt_state = tilt_control;
 259              		.loc 1 160 0
 260 0036 034B     		ldr	r3, .L35
 261 0038 0222     		mov	r2, #2
 262 003a 1A70     		strb	r2, [r3]
 161:.\main.c      ****             break;
 263              		.loc 1 161 0
 264 003c 00E0     		b	.L19
 265              	.L34:
 162:.\main.c      ****         case tilt_control:
 163:.\main.c      ****             break;
 266              		.loc 1 163 0
 267 003e C046     		mov	r8, r8
 268              	.L19:
 164:.\main.c      ****         case tilt_feedback:
 165:.\main.c      ****             break;
 166:.\main.c      ****     }
 167:.\main.c      **** }
 269              		.loc 1 167 0
 270 0040 BD46     		mov	sp, r7
 271              		@ sp needed
 272 0042 80BD     		pop	{r7, pc}
 273              	.L36:
 274              		.align	2
 275              	.L35:
 276 0044 00000000 		.word	wristTilt_state
 277              		.cfi_endproc
 278              	.LFE36:
 279              		.size	wristTilt, .-wristTilt
 280              		.comm	wristRotate_state,1,1
 281              		.section	.text.wristRotate,"ax",%progbits
 282              		.align	2
 283              		.global	wristRotate
 284              		.code	16
 285              		.thumb_func
 286              		.type	wristRotate, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 9


 287              	wristRotate:
 288              	.LFB37:
 168:.\main.c      **** 
 169:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 170:.\main.c      **** //control the rotating motion of the wrist
 171:.\main.c      **** void wristRotate()
 172:.\main.c      **** {
 289              		.loc 1 172 0
 290              		.cfi_startproc
 291 0000 80B5     		push	{r7, lr}
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 00AF     		add	r7, sp, #0
 296              		.cfi_def_cfa_register 7
 173:.\main.c      ****     //Overview
 174:.\main.c      ****     //take instruction from data_array
 175:.\main.c      ****     //smooth input
 176:.\main.c      ****     //actuate the tilting using UART
 177:.\main.c      ****     //get feedback
 178:.\main.c      **** 
 179:.\main.c      ****     //-------------------------- 
 180:.\main.c      ****     // Dynamixel Servo specific
 181:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 182:.\main.c      ****     // TODO: Set the desired position
 183:.\main.c      **** 
 184:.\main.c      ****     //--------------------------
 185:.\main.c      ****     // State machine
 186:.\main.c      ****     
 187:.\main.c      ****         // Action
 188:.\main.c      ****     switch(wristRotate_state)
 297              		.loc 1 188 0
 298 0004 0F4B     		ldr	r3, .L53
 299 0006 1B78     		ldrb	r3, [r3]
 300 0008 012B     		cmp	r3, #1
 301 000a 06D0     		beq	.L50
 302 000c 07DC     		bgt	.L51
 303 000e 002B     		cmp	r3, #0
 304 0010 06D1     		bne	.L38
 189:.\main.c      ****     {
 190:.\main.c      ****         case rotate_init:
 191:.\main.c      ****             wristRotate_state = rotate_start;
 305              		.loc 1 191 0
 306 0012 0C4B     		ldr	r3, .L53
 307 0014 0122     		mov	r2, #1
 308 0016 1A70     		strb	r2, [r3]
 192:.\main.c      ****             break;
 309              		.loc 1 192 0
 310 0018 02E0     		b	.L38
 311              	.L50:
 193:.\main.c      ****         case rotate_start:
 194:.\main.c      ****             // Set the torque - this is a one time thing
 195:.\main.c      ****             // Set the speed - I think this is a one time thing
 196:.\main.c      ****             break;
 312              		.loc 1 196 0
 313 001a C046     		mov	r8, r8
 314 001c 00E0     		b	.L38
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 10


 315              	.L51:
 197:.\main.c      ****         case rotate_control:
 198:.\main.c      ****             break;
 316              		.loc 1 198 0
 317 001e C046     		mov	r8, r8
 318              	.L38:
 199:.\main.c      ****         case rotate_feedback:
 200:.\main.c      ****             break;
 201:.\main.c      ****     }
 202:.\main.c      ****         // Transistion
 203:.\main.c      ****     switch(wristRotate_state)
 319              		.loc 1 203 0
 320 0020 084B     		ldr	r3, .L53
 321 0022 1B78     		ldrb	r3, [r3]
 322 0024 012B     		cmp	r3, #1
 323 0026 06D0     		beq	.L45
 324 0028 09DC     		bgt	.L52
 325 002a 002B     		cmp	r3, #0
 326 002c 08D1     		bne	.L37
 204:.\main.c      ****     {
 205:.\main.c      ****         case rotate_init:
 206:.\main.c      ****             wristRotate_state = rotate_start;
 327              		.loc 1 206 0
 328 002e 054B     		ldr	r3, .L53
 329 0030 0122     		mov	r2, #1
 330 0032 1A70     		strb	r2, [r3]
 207:.\main.c      ****             break;
 331              		.loc 1 207 0
 332 0034 04E0     		b	.L37
 333              	.L45:
 208:.\main.c      ****         case rotate_start:
 209:.\main.c      ****             wristRotate_state = rotate_control;
 334              		.loc 1 209 0
 335 0036 034B     		ldr	r3, .L53
 336 0038 0222     		mov	r2, #2
 337 003a 1A70     		strb	r2, [r3]
 210:.\main.c      ****             break;
 338              		.loc 1 210 0
 339 003c 00E0     		b	.L37
 340              	.L52:
 211:.\main.c      ****         case rotate_control:
 212:.\main.c      ****             break;
 341              		.loc 1 212 0
 342 003e C046     		mov	r8, r8
 343              	.L37:
 213:.\main.c      ****         case rotate_feedback:
 214:.\main.c      ****             break;
 215:.\main.c      ****     }
 216:.\main.c      **** }
 344              		.loc 1 216 0
 345 0040 BD46     		mov	sp, r7
 346              		@ sp needed
 347 0042 80BD     		pop	{r7, pc}
 348              	.L54:
 349              		.align	2
 350              	.L53:
 351 0044 00000000 		.word	wristRotate_state
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 11


 352              		.cfi_endproc
 353              	.LFE37:
 354              		.size	wristRotate, .-wristRotate
 355              		.section	.text.send_feedback,"ax",%progbits
 356              		.align	2
 357              		.global	send_feedback
 358              		.code	16
 359              		.thumb_func
 360              		.type	send_feedback, %function
 361              	send_feedback:
 362              	.LFB38:
 217:.\main.c      **** 
 218:.\main.c      **** void send_feedback()
 219:.\main.c      **** {
 363              		.loc 1 219 0
 364              		.cfi_startproc
 365 0000 80B5     		push	{r7, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 220:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 221:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 222:.\main.c      ****     //TODO define system state
 223:.\main.c      ****     //send packet via serial to wiznet
 224:.\main.c      **** }
 371              		.loc 1 224 0
 372 0004 BD46     		mov	sp, r7
 373              		@ sp needed
 374 0006 80BD     		pop	{r7, pc}
 375              		.cfi_endproc
 376              	.LFE38:
 377              		.size	send_feedback, .-send_feedback
 378              		.global	__aeabi_uidiv
 379              		.section	.text.average,"ax",%progbits
 380              		.align	2
 381              		.global	average
 382              		.code	16
 383              		.thumb_func
 384              		.type	average, %function
 385              	average:
 386              	.LFB39:
 225:.\main.c      **** 
 226:.\main.c      **** 
 227:.\main.c      **** //Average function to be used in smoothing our input
 228:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 229:.\main.c      **** {
 387              		.loc 1 229 0
 388              		.cfi_startproc
 389 0000 80B5     		push	{r7, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 86B0     		sub	sp, sp, #24
 394              		.cfi_def_cfa_offset 32
 395 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 12


 396              		.cfi_def_cfa_register 7
 397 0006 7860     		str	r0, [r7, #4]
 398 0008 0A1C     		mov	r2, r1
 399 000a FB1C     		add	r3, r7, #3
 400 000c 1A70     		strb	r2, [r3]
 230:.\main.c      ****     uint8 i;
 231:.\main.c      ****     uint32 sum = 0;
 401              		.loc 1 231 0
 402 000e 0023     		mov	r3, #0
 403 0010 3B61     		str	r3, [r7, #16]
 232:.\main.c      ****     uint16 avg = 0;
 404              		.loc 1 232 0
 405 0012 3B1C     		mov	r3, r7
 406 0014 0E33     		add	r3, r3, #14
 407 0016 0022     		mov	r2, #0
 408 0018 1A80     		strh	r2, [r3]
 233:.\main.c      ****     
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 409              		.loc 1 234 0
 410 001a 3B1C     		mov	r3, r7
 411 001c 1733     		add	r3, r3, #23
 412 001e 0022     		mov	r2, #0
 413 0020 1A70     		strb	r2, [r3]
 414 0022 10E0     		b	.L57
 415              	.L58:
 235:.\main.c      ****     {
 236:.\main.c      ****         sum += array[i];
 416              		.loc 1 236 0 discriminator 2
 417 0024 3B1C     		mov	r3, r7
 418 0026 1733     		add	r3, r3, #23
 419 0028 1B78     		ldrb	r3, [r3]
 420 002a 5B00     		lsl	r3, r3, #1
 421 002c 7A68     		ldr	r2, [r7, #4]
 422 002e D318     		add	r3, r2, r3
 423 0030 1B88     		ldrh	r3, [r3]
 424 0032 3A69     		ldr	r2, [r7, #16]
 425 0034 D318     		add	r3, r2, r3
 426 0036 3B61     		str	r3, [r7, #16]
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 427              		.loc 1 234 0 discriminator 2
 428 0038 3B1C     		mov	r3, r7
 429 003a 1733     		add	r3, r3, #23
 430 003c 1A78     		ldrb	r2, [r3]
 431 003e 3B1C     		mov	r3, r7
 432 0040 1733     		add	r3, r3, #23
 433 0042 0132     		add	r2, r2, #1
 434 0044 1A70     		strb	r2, [r3]
 435              	.L57:
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 436              		.loc 1 234 0 is_stmt 0 discriminator 1
 437 0046 3A1C     		mov	r2, r7
 438 0048 1732     		add	r2, r2, #23
 439 004a FB1C     		add	r3, r7, #3
 440 004c 1278     		ldrb	r2, [r2]
 441 004e 1B78     		ldrb	r3, [r3]
 442 0050 9A42     		cmp	r2, r3
 443 0052 E7D3     		bcc	.L58
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 13


 237:.\main.c      ****     }
 238:.\main.c      ****     
 239:.\main.c      ****     avg = sum/num_items;
 444              		.loc 1 239 0 is_stmt 1
 445 0054 FB1C     		add	r3, r7, #3
 446 0056 1B78     		ldrb	r3, [r3]
 447 0058 3869     		ldr	r0, [r7, #16]
 448 005a 191C     		mov	r1, r3
 449 005c FFF7FEFF 		bl	__aeabi_uidiv
 450 0060 031C     		mov	r3, r0
 451 0062 1A1C     		mov	r2, r3
 452 0064 3B1C     		mov	r3, r7
 453 0066 0E33     		add	r3, r3, #14
 454 0068 1A80     		strh	r2, [r3]
 240:.\main.c      ****     
 241:.\main.c      ****     return avg;
 455              		.loc 1 241 0
 456 006a 3B1C     		mov	r3, r7
 457 006c 0E33     		add	r3, r3, #14
 458 006e 1B88     		ldrh	r3, [r3]
 242:.\main.c      **** }
 459              		.loc 1 242 0
 460 0070 181C     		mov	r0, r3
 461 0072 BD46     		mov	sp, r7
 462 0074 06B0     		add	sp, sp, #24
 463              		@ sp needed
 464 0076 80BD     		pop	{r7, pc}
 465              		.cfi_endproc
 466              	.LFE39:
 467              		.size	average, .-average
 468              		.comm	elbow_state,1,1
 469              		.section	.text.elbow,"ax",%progbits
 470              		.align	2
 471              		.global	elbow
 472              		.code	16
 473              		.thumb_func
 474              		.type	elbow, %function
 475              	elbow:
 476              	.LFB40:
 243:.\main.c      **** 
 244:.\main.c      **** 
 245:.\main.c      **** //control the elbow
 246:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 247:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 248:.\main.c      **** void elbow()
 249:.\main.c      **** { 
 477              		.loc 1 249 0
 478              		.cfi_startproc
 479 0000 90B5     		push	{r4, r7, lr}
 480              		.cfi_def_cfa_offset 12
 481              		.cfi_offset 4, -12
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 83B0     		sub	sp, sp, #12
 485              		.cfi_def_cfa_offset 24
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 14


 250:.\main.c      ****     //take instruction from data_array
 251:.\main.c      ****     //smooth input
 252:.\main.c      ****     //actuate the elbow using PWM
 253:.\main.c      ****     //get feedback
 254:.\main.c      ****     uint8 i;
 255:.\main.c      ****     uint16 avg;
 256:.\main.c      ****     uint16 command;
 257:.\main.c      ****     
 258:.\main.c      ****     switch(elbow_state){ //actions
 488              		.loc 1 258 0
 489 0006 444B     		ldr	r3, .L83
 490 0008 1B78     		ldrb	r3, [r3]
 491 000a 012B     		cmp	r3, #1
 492 000c 03D0     		beq	.L62
 493 000e 51DD     		ble	.L82
 494 0010 022B     		cmp	r3, #2
 495 0012 17D0     		beq	.L65
 259:.\main.c      ****         case elbw_start:
 260:.\main.c      ****             break;
 261:.\main.c      **** 
 262:.\main.c      ****         case elbw_init:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 264:.\main.c      ****             {
 265:.\main.c      ****                 elbow_array[i] = 1500;
 266:.\main.c      ****             }
 267:.\main.c      ****             elbw_arr_cspot = 0;
 268:.\main.c      ****             break;
 269:.\main.c      **** 
 270:.\main.c      ****         case elbw_execute:
 271:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 272:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 273:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 274:.\main.c      ****             {
 275:.\main.c      ****                 elbw_arr_cspot++;
 276:.\main.c      ****             }
 277:.\main.c      ****             else
 278:.\main.c      ****             {
 279:.\main.c      ****                 elbw_arr_cspot = 0;
 280:.\main.c      ****             }
 281:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 282:.\main.c      ****             PWM_3_WriteCompare(avg);
 283:.\main.c      ****             fin_exec++;
 284:.\main.c      ****             break;
 285:.\main.c      ****             
 286:.\main.c      ****         case elbw_wait:
 287:.\main.c      ****             break;
 496              		.loc 1 287 0
 497 0014 4FE0     		b	.L61
 498              	.L62:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 499              		.loc 1 263 0
 500 0016 FB1D     		add	r3, r7, #7
 501 0018 0022     		mov	r2, #0
 502 001a 1A70     		strb	r2, [r3]
 503 001c 0AE0     		b	.L67
 504              	.L68:
 265:.\main.c      ****                 elbow_array[i] = 1500;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 15


 505              		.loc 1 265 0 discriminator 2
 506 001e FB1D     		add	r3, r7, #7
 507 0020 1A78     		ldrb	r2, [r3]
 508 0022 3E4B     		ldr	r3, .L83+4
 509 0024 5200     		lsl	r2, r2, #1
 510 0026 3E49     		ldr	r1, .L83+8
 511 0028 D152     		strh	r1, [r2, r3]
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 512              		.loc 1 263 0 discriminator 2
 513 002a FB1D     		add	r3, r7, #7
 514 002c 1A78     		ldrb	r2, [r3]
 515 002e FB1D     		add	r3, r7, #7
 516 0030 0132     		add	r2, r2, #1
 517 0032 1A70     		strb	r2, [r3]
 518              	.L67:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 519              		.loc 1 263 0 is_stmt 0 discriminator 1
 520 0034 FB1D     		add	r3, r7, #7
 521 0036 1B78     		ldrb	r3, [r3]
 522 0038 132B     		cmp	r3, #19
 523 003a F0D9     		bls	.L68
 267:.\main.c      ****             elbw_arr_cspot = 0;
 524              		.loc 1 267 0 is_stmt 1
 525 003c 394B     		ldr	r3, .L83+12
 526 003e 0022     		mov	r2, #0
 527 0040 1A70     		strb	r2, [r3]
 268:.\main.c      ****             break;
 528              		.loc 1 268 0
 529 0042 38E0     		b	.L61
 530              	.L65:
 271:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 531              		.loc 1 271 0
 532 0044 384B     		ldr	r3, .L83+16
 533 0046 9B88     		ldrh	r3, [r3, #4]
 534 0048 1A02     		lsl	r2, r3, #8
 535 004a 374B     		ldr	r3, .L83+16
 536 004c DB88     		ldrh	r3, [r3, #6]
 537 004e 1343     		orr	r3, r2
 538 0050 00D5     		bpl	.L69
 539 0052 0133     		add	r3, r3, #1
 540              	.L69:
 541 0054 5B10     		asr	r3, r3, #1
 542 0056 9AB2     		uxth	r2, r3
 543 0058 3B1D     		add	r3, r7, #4
 544 005a 3149     		ldr	r1, .L83+8
 545 005c 5218     		add	r2, r2, r1
 546 005e 1A80     		strh	r2, [r3]
 272:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 547              		.loc 1 272 0
 548 0060 304B     		ldr	r3, .L83+12
 549 0062 1B78     		ldrb	r3, [r3]
 550 0064 1A1C     		mov	r2, r3
 551 0066 2D4B     		ldr	r3, .L83+4
 552 0068 5200     		lsl	r2, r2, #1
 553 006a 391D     		add	r1, r7, #4
 554 006c 0988     		ldrh	r1, [r1]
 555 006e D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 16


 273:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 556              		.loc 1 273 0
 557 0070 2C4B     		ldr	r3, .L83+12
 558 0072 1B78     		ldrb	r3, [r3]
 559 0074 122B     		cmp	r3, #18
 560 0076 06D8     		bhi	.L70
 275:.\main.c      ****                 elbw_arr_cspot++;
 561              		.loc 1 275 0
 562 0078 2A4B     		ldr	r3, .L83+12
 563 007a 1B78     		ldrb	r3, [r3]
 564 007c 0133     		add	r3, r3, #1
 565 007e DAB2     		uxtb	r2, r3
 566 0080 284B     		ldr	r3, .L83+12
 567 0082 1A70     		strb	r2, [r3]
 568 0084 02E0     		b	.L71
 569              	.L70:
 279:.\main.c      ****                 elbw_arr_cspot = 0;
 570              		.loc 1 279 0
 571 0086 274B     		ldr	r3, .L83+12
 572 0088 0022     		mov	r2, #0
 573 008a 1A70     		strb	r2, [r3]
 574              	.L71:
 281:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 575              		.loc 1 281 0
 576 008c BC1C     		add	r4, r7, #2
 577 008e 234B     		ldr	r3, .L83+4
 578 0090 181C     		mov	r0, r3
 579 0092 1421     		mov	r1, #20
 580 0094 FFF7FEFF 		bl	average
 581 0098 031C     		mov	r3, r0
 582 009a 2380     		strh	r3, [r4]
 282:.\main.c      ****             PWM_3_WriteCompare(avg);
 583              		.loc 1 282 0
 584 009c BB1C     		add	r3, r7, #2
 585 009e 1B88     		ldrh	r3, [r3]
 586 00a0 181C     		mov	r0, r3
 587 00a2 FFF7FEFF 		bl	PWM_3_WriteCompare
 283:.\main.c      ****             fin_exec++;
 588              		.loc 1 283 0
 589 00a6 214B     		ldr	r3, .L83+20
 590 00a8 1B78     		ldrb	r3, [r3]
 591 00aa 0133     		add	r3, r3, #1
 592 00ac DAB2     		uxtb	r2, r3
 593 00ae 1F4B     		ldr	r3, .L83+20
 594 00b0 1A70     		strb	r2, [r3]
 284:.\main.c      ****             break;
 595              		.loc 1 284 0
 596 00b2 00E0     		b	.L61
 597              	.L82:
 260:.\main.c      ****             break;
 598              		.loc 1 260 0
 599 00b4 C046     		mov	r8, r8
 600              	.L61:
 288:.\main.c      ****     }
 289:.\main.c      ****     
 290:.\main.c      ****     switch(elbow_state){ //transitions
 601              		.loc 1 290 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 17


 602 00b6 184B     		ldr	r3, .L83
 603 00b8 1B78     		ldrb	r3, [r3]
 604 00ba 012B     		cmp	r3, #1
 605 00bc 0CD0     		beq	.L73
 606 00be 02DC     		bgt	.L74
 607 00c0 002B     		cmp	r3, #0
 608 00c2 05D0     		beq	.L75
 609 00c4 24E0     		b	.L60
 610              	.L74:
 611 00c6 022B     		cmp	r3, #2
 612 00c8 0AD0     		beq	.L76
 613 00ca 032B     		cmp	r3, #3
 614 00cc 14D0     		beq	.L77
 615 00ce 1FE0     		b	.L60
 616              	.L75:
 291:.\main.c      ****         case elbw_start:
 292:.\main.c      ****             elbow_state = elbw_init;
 617              		.loc 1 292 0
 618 00d0 114B     		ldr	r3, .L83
 619 00d2 0122     		mov	r2, #1
 620 00d4 1A70     		strb	r2, [r3]
 293:.\main.c      ****             break;
 621              		.loc 1 293 0
 622 00d6 1BE0     		b	.L60
 623              	.L73:
 294:.\main.c      ****         
 295:.\main.c      ****         case elbw_init:
 296:.\main.c      ****             elbow_state = elbw_wait;
 624              		.loc 1 296 0
 625 00d8 0F4B     		ldr	r3, .L83
 626 00da 0322     		mov	r2, #3
 627 00dc 1A70     		strb	r2, [r3]
 297:.\main.c      ****             break;
 628              		.loc 1 297 0
 629 00de 17E0     		b	.L60
 630              	.L76:
 298:.\main.c      ****         
 299:.\main.c      ****         case elbw_execute:
 300:.\main.c      ****             if(new_pack)
 631              		.loc 1 300 0
 632 00e0 134B     		ldr	r3, .L83+24
 633 00e2 1B78     		ldrb	r3, [r3]
 634 00e4 002B     		cmp	r3, #0
 635 00e6 03D0     		beq	.L78
 301:.\main.c      ****             {
 302:.\main.c      ****                 elbow_state = elbw_execute;
 636              		.loc 1 302 0
 637 00e8 0B4B     		ldr	r3, .L83
 638 00ea 0222     		mov	r2, #2
 639 00ec 1A70     		strb	r2, [r3]
 303:.\main.c      ****             }
 304:.\main.c      ****             else
 305:.\main.c      ****             {
 306:.\main.c      ****                 elbow_state = elbw_wait;
 307:.\main.c      ****             }
 308:.\main.c      ****             break;
 640              		.loc 1 308 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 18


 641 00ee 0FE0     		b	.L60
 642              	.L78:
 306:.\main.c      ****                 elbow_state = elbw_wait;
 643              		.loc 1 306 0
 644 00f0 094B     		ldr	r3, .L83
 645 00f2 0322     		mov	r2, #3
 646 00f4 1A70     		strb	r2, [r3]
 647              		.loc 1 308 0
 648 00f6 0BE0     		b	.L60
 649              	.L77:
 309:.\main.c      ****         
 310:.\main.c      ****         case elbw_wait:
 311:.\main.c      ****             if(new_pack)
 650              		.loc 1 311 0
 651 00f8 0D4B     		ldr	r3, .L83+24
 652 00fa 1B78     		ldrb	r3, [r3]
 653 00fc 002B     		cmp	r3, #0
 654 00fe 03D0     		beq	.L80
 312:.\main.c      ****             {
 313:.\main.c      ****                 elbow_state = elbw_execute;
 655              		.loc 1 313 0
 656 0100 054B     		ldr	r3, .L83
 657 0102 0222     		mov	r2, #2
 658 0104 1A70     		strb	r2, [r3]
 659 0106 02E0     		b	.L81
 660              	.L80:
 314:.\main.c      ****             }
 315:.\main.c      ****             else
 316:.\main.c      ****             {
 317:.\main.c      ****                 elbow_state = elbw_wait; 
 661              		.loc 1 317 0
 662 0108 034B     		ldr	r3, .L83
 663 010a 0322     		mov	r2, #3
 664 010c 1A70     		strb	r2, [r3]
 665              	.L81:
 318:.\main.c      ****             }
 319:.\main.c      ****             break;
 666              		.loc 1 319 0
 667 010e C046     		mov	r8, r8
 668              	.L60:
 320:.\main.c      ****     }    
 321:.\main.c      **** }
 669              		.loc 1 321 0
 670 0110 BD46     		mov	sp, r7
 671 0112 03B0     		add	sp, sp, #12
 672              		@ sp needed
 673 0114 90BD     		pop	{r4, r7, pc}
 674              	.L84:
 675 0116 C046     		.align	2
 676              	.L83:
 677 0118 00000000 		.word	elbow_state
 678 011c 00000000 		.word	elbow_array
 679 0120 DC050000 		.word	1500
 680 0124 00000000 		.word	elbw_arr_cspot
 681 0128 00000000 		.word	data_array
 682 012c 00000000 		.word	fin_exec
 683 0130 00000000 		.word	new_pack
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 19


 684              		.cfi_endproc
 685              	.LFE40:
 686              		.size	elbow, .-elbow
 687              		.comm	baseAzimuth_state,1,1
 688              		.section	.text.baseAzimuth,"ax",%progbits
 689              		.align	2
 690              		.global	baseAzimuth
 691              		.code	16
 692              		.thumb_func
 693              		.type	baseAzimuth, %function
 694              	baseAzimuth:
 695              	.LFB41:
 322:.\main.c      **** 
 323:.\main.c      **** //control the turret
 324:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 325:.\main.c      **** void baseAzimuth()
 326:.\main.c      **** { 
 696              		.loc 1 326 0
 697              		.cfi_startproc
 698 0000 90B5     		push	{r4, r7, lr}
 699              		.cfi_def_cfa_offset 12
 700              		.cfi_offset 4, -12
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 83B0     		sub	sp, sp, #12
 704              		.cfi_def_cfa_offset 24
 705 0004 00AF     		add	r7, sp, #0
 706              		.cfi_def_cfa_register 7
 327:.\main.c      ****     //take instruction from data_array
 328:.\main.c      ****     //smooth input
 329:.\main.c      ****     //actuate the turret using PWM
 330:.\main.c      ****     uint8 i;
 331:.\main.c      ****     uint16 avg;
 332:.\main.c      ****     uint16 command;
 333:.\main.c      ****     
 334:.\main.c      ****     switch(baseAzimuth_state){ //actions
 707              		.loc 1 334 0
 708 0006 444B     		ldr	r3, .L108
 709 0008 1B78     		ldrb	r3, [r3]
 710 000a 012B     		cmp	r3, #1
 711 000c 03D0     		beq	.L87
 712 000e 51DD     		ble	.L107
 713 0010 022B     		cmp	r3, #2
 714 0012 17D0     		beq	.L90
 335:.\main.c      ****         case BA_start:
 336:.\main.c      ****             break;
 337:.\main.c      **** 
 338:.\main.c      ****         case BA_init:
 339:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 340:.\main.c      ****             {
 341:.\main.c      ****                 baseAz_array[i] = 1500;
 342:.\main.c      ****             }
 343:.\main.c      ****             BA_arr_cspot = 0;
 344:.\main.c      ****             break;
 345:.\main.c      **** 
 346:.\main.c      ****         case BA_execute:
 347:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 20


 348:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 349:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 350:.\main.c      ****             {
 351:.\main.c      ****                 BA_arr_cspot++;
 352:.\main.c      ****             }
 353:.\main.c      ****             else
 354:.\main.c      ****             {
 355:.\main.c      ****                 BA_arr_cspot = 0;
 356:.\main.c      ****             }
 357:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 358:.\main.c      ****             
 359:.\main.c      ****             PWM_2_WriteCompare(avg);
 360:.\main.c      ****             fin_exec++;
 361:.\main.c      ****             break;
 362:.\main.c      ****             
 363:.\main.c      ****         case BA_wait:
 364:.\main.c      ****             break;
 715              		.loc 1 364 0
 716 0014 4FE0     		b	.L86
 717              	.L87:
 339:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 718              		.loc 1 339 0
 719 0016 FB1D     		add	r3, r7, #7
 720 0018 0022     		mov	r2, #0
 721 001a 1A70     		strb	r2, [r3]
 722 001c 0AE0     		b	.L92
 723              	.L93:
 341:.\main.c      ****                 baseAz_array[i] = 1500;
 724              		.loc 1 341 0 discriminator 2
 725 001e FB1D     		add	r3, r7, #7
 726 0020 1A78     		ldrb	r2, [r3]
 727 0022 3E4B     		ldr	r3, .L108+4
 728 0024 5200     		lsl	r2, r2, #1
 729 0026 3E49     		ldr	r1, .L108+8
 730 0028 D152     		strh	r1, [r2, r3]
 339:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 731              		.loc 1 339 0 discriminator 2
 732 002a FB1D     		add	r3, r7, #7
 733 002c 1A78     		ldrb	r2, [r3]
 734 002e FB1D     		add	r3, r7, #7
 735 0030 0132     		add	r2, r2, #1
 736 0032 1A70     		strb	r2, [r3]
 737              	.L92:
 339:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 738              		.loc 1 339 0 is_stmt 0 discriminator 1
 739 0034 FB1D     		add	r3, r7, #7
 740 0036 1B78     		ldrb	r3, [r3]
 741 0038 132B     		cmp	r3, #19
 742 003a F0D9     		bls	.L93
 343:.\main.c      ****             BA_arr_cspot = 0;
 743              		.loc 1 343 0 is_stmt 1
 744 003c 394B     		ldr	r3, .L108+12
 745 003e 0022     		mov	r2, #0
 746 0040 1A70     		strb	r2, [r3]
 344:.\main.c      ****             break;
 747              		.loc 1 344 0
 748 0042 38E0     		b	.L86
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 21


 749              	.L90:
 347:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 750              		.loc 1 347 0
 751 0044 384B     		ldr	r3, .L108+16
 752 0046 1B89     		ldrh	r3, [r3, #8]
 753 0048 1A02     		lsl	r2, r3, #8
 754 004a 374B     		ldr	r3, .L108+16
 755 004c 5B89     		ldrh	r3, [r3, #10]
 756 004e 1343     		orr	r3, r2
 757 0050 00D5     		bpl	.L94
 758 0052 0133     		add	r3, r3, #1
 759              	.L94:
 760 0054 5B10     		asr	r3, r3, #1
 761 0056 9AB2     		uxth	r2, r3
 762 0058 3B1D     		add	r3, r7, #4
 763 005a 3149     		ldr	r1, .L108+8
 764 005c 5218     		add	r2, r2, r1
 765 005e 1A80     		strh	r2, [r3]
 348:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 766              		.loc 1 348 0
 767 0060 304B     		ldr	r3, .L108+12
 768 0062 1B78     		ldrb	r3, [r3]
 769 0064 1A1C     		mov	r2, r3
 770 0066 2D4B     		ldr	r3, .L108+4
 771 0068 5200     		lsl	r2, r2, #1
 772 006a 391D     		add	r1, r7, #4
 773 006c 0988     		ldrh	r1, [r1]
 774 006e D152     		strh	r1, [r2, r3]
 349:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 775              		.loc 1 349 0
 776 0070 2C4B     		ldr	r3, .L108+12
 777 0072 1B78     		ldrb	r3, [r3]
 778 0074 122B     		cmp	r3, #18
 779 0076 06D8     		bhi	.L95
 351:.\main.c      ****                 BA_arr_cspot++;
 780              		.loc 1 351 0
 781 0078 2A4B     		ldr	r3, .L108+12
 782 007a 1B78     		ldrb	r3, [r3]
 783 007c 0133     		add	r3, r3, #1
 784 007e DAB2     		uxtb	r2, r3
 785 0080 284B     		ldr	r3, .L108+12
 786 0082 1A70     		strb	r2, [r3]
 787 0084 02E0     		b	.L96
 788              	.L95:
 355:.\main.c      ****                 BA_arr_cspot = 0;
 789              		.loc 1 355 0
 790 0086 274B     		ldr	r3, .L108+12
 791 0088 0022     		mov	r2, #0
 792 008a 1A70     		strb	r2, [r3]
 793              	.L96:
 357:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 794              		.loc 1 357 0
 795 008c BC1C     		add	r4, r7, #2
 796 008e 234B     		ldr	r3, .L108+4
 797 0090 181C     		mov	r0, r3
 798 0092 1421     		mov	r1, #20
 799 0094 FFF7FEFF 		bl	average
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 22


 800 0098 031C     		mov	r3, r0
 801 009a 2380     		strh	r3, [r4]
 359:.\main.c      ****             PWM_2_WriteCompare(avg);
 802              		.loc 1 359 0
 803 009c BB1C     		add	r3, r7, #2
 804 009e 1B88     		ldrh	r3, [r3]
 805 00a0 181C     		mov	r0, r3
 806 00a2 FFF7FEFF 		bl	PWM_2_WriteCompare
 360:.\main.c      ****             fin_exec++;
 807              		.loc 1 360 0
 808 00a6 214B     		ldr	r3, .L108+20
 809 00a8 1B78     		ldrb	r3, [r3]
 810 00aa 0133     		add	r3, r3, #1
 811 00ac DAB2     		uxtb	r2, r3
 812 00ae 1F4B     		ldr	r3, .L108+20
 813 00b0 1A70     		strb	r2, [r3]
 361:.\main.c      ****             break;
 814              		.loc 1 361 0
 815 00b2 00E0     		b	.L86
 816              	.L107:
 336:.\main.c      ****             break;
 817              		.loc 1 336 0
 818 00b4 C046     		mov	r8, r8
 819              	.L86:
 365:.\main.c      ****     }
 366:.\main.c      ****     
 367:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 820              		.loc 1 367 0
 821 00b6 184B     		ldr	r3, .L108
 822 00b8 1B78     		ldrb	r3, [r3]
 823 00ba 012B     		cmp	r3, #1
 824 00bc 0CD0     		beq	.L98
 825 00be 02DC     		bgt	.L99
 826 00c0 002B     		cmp	r3, #0
 827 00c2 05D0     		beq	.L100
 828 00c4 24E0     		b	.L85
 829              	.L99:
 830 00c6 022B     		cmp	r3, #2
 831 00c8 0AD0     		beq	.L101
 832 00ca 032B     		cmp	r3, #3
 833 00cc 14D0     		beq	.L102
 834 00ce 1FE0     		b	.L85
 835              	.L100:
 368:.\main.c      ****         case BA_start:
 369:.\main.c      ****             baseAzimuth_state = BA_init;
 836              		.loc 1 369 0
 837 00d0 114B     		ldr	r3, .L108
 838 00d2 0122     		mov	r2, #1
 839 00d4 1A70     		strb	r2, [r3]
 370:.\main.c      ****             break;
 840              		.loc 1 370 0
 841 00d6 1BE0     		b	.L85
 842              	.L98:
 371:.\main.c      ****         
 372:.\main.c      ****         case BA_init:
 373:.\main.c      ****             baseAzimuth_state = BA_wait;
 843              		.loc 1 373 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 23


 844 00d8 0F4B     		ldr	r3, .L108
 845 00da 0322     		mov	r2, #3
 846 00dc 1A70     		strb	r2, [r3]
 374:.\main.c      ****             break;
 847              		.loc 1 374 0
 848 00de 17E0     		b	.L85
 849              	.L101:
 375:.\main.c      ****         
 376:.\main.c      ****         case BA_execute:
 377:.\main.c      ****             if(new_pack)
 850              		.loc 1 377 0
 851 00e0 134B     		ldr	r3, .L108+24
 852 00e2 1B78     		ldrb	r3, [r3]
 853 00e4 002B     		cmp	r3, #0
 854 00e6 03D0     		beq	.L103
 378:.\main.c      ****             {
 379:.\main.c      ****                 baseAzimuth_state = BA_execute;
 855              		.loc 1 379 0
 856 00e8 0B4B     		ldr	r3, .L108
 857 00ea 0222     		mov	r2, #2
 858 00ec 1A70     		strb	r2, [r3]
 380:.\main.c      ****             }
 381:.\main.c      ****             else
 382:.\main.c      ****             {
 383:.\main.c      ****                 baseAzimuth_state = BA_wait;
 384:.\main.c      ****             }
 385:.\main.c      ****             break;
 859              		.loc 1 385 0
 860 00ee 0FE0     		b	.L85
 861              	.L103:
 383:.\main.c      ****                 baseAzimuth_state = BA_wait;
 862              		.loc 1 383 0
 863 00f0 094B     		ldr	r3, .L108
 864 00f2 0322     		mov	r2, #3
 865 00f4 1A70     		strb	r2, [r3]
 866              		.loc 1 385 0
 867 00f6 0BE0     		b	.L85
 868              	.L102:
 386:.\main.c      ****         
 387:.\main.c      ****         case BA_wait:
 388:.\main.c      ****             if(new_pack)
 869              		.loc 1 388 0
 870 00f8 0D4B     		ldr	r3, .L108+24
 871 00fa 1B78     		ldrb	r3, [r3]
 872 00fc 002B     		cmp	r3, #0
 873 00fe 03D0     		beq	.L105
 389:.\main.c      ****             {
 390:.\main.c      ****                 baseAzimuth_state = BA_execute;
 874              		.loc 1 390 0
 875 0100 054B     		ldr	r3, .L108
 876 0102 0222     		mov	r2, #2
 877 0104 1A70     		strb	r2, [r3]
 878 0106 02E0     		b	.L106
 879              	.L105:
 391:.\main.c      ****             }
 392:.\main.c      ****             else
 393:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 24


 394:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 880              		.loc 1 394 0
 881 0108 034B     		ldr	r3, .L108
 882 010a 0322     		mov	r2, #3
 883 010c 1A70     		strb	r2, [r3]
 884              	.L106:
 395:.\main.c      ****             }
 396:.\main.c      ****             break;
 885              		.loc 1 396 0
 886 010e C046     		mov	r8, r8
 887              	.L85:
 397:.\main.c      ****     }    
 398:.\main.c      **** }
 888              		.loc 1 398 0
 889 0110 BD46     		mov	sp, r7
 890 0112 03B0     		add	sp, sp, #12
 891              		@ sp needed
 892 0114 90BD     		pop	{r4, r7, pc}
 893              	.L109:
 894 0116 C046     		.align	2
 895              	.L108:
 896 0118 00000000 		.word	baseAzimuth_state
 897 011c 00000000 		.word	baseAz_array
 898 0120 DC050000 		.word	1500
 899 0124 00000000 		.word	BA_arr_cspot
 900 0128 00000000 		.word	data_array
 901 012c 00000000 		.word	fin_exec
 902 0130 00000000 		.word	new_pack
 903              		.cfi_endproc
 904              	.LFE41:
 905              		.size	baseAzimuth, .-baseAzimuth
 906              		.global	__aeabi_idivmod
 907              		.section	.text.main,"ax",%progbits
 908              		.align	2
 909              		.global	main
 910              		.code	16
 911              		.thumb_func
 912              		.type	main, %function
 913              	main:
 914              	.LFB42:
 399:.\main.c      **** 
 400:.\main.c      **** int main()
 401:.\main.c      **** {  
 915              		.loc 1 401 0
 916              		.cfi_startproc
 917 0000 80B5     		push	{r7, lr}
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 7, -8
 920              		.cfi_offset 14, -4
 921 0002 84B0     		sub	sp, sp, #16
 922              		.cfi_def_cfa_offset 24
 923 0004 00AF     		add	r7, sp, #0
 924              		.cfi_def_cfa_register 7
 402:.\main.c      ****     CyGlobalIntEnable;
 925              		.loc 1 402 0
 926              	@ 402 ".\main.c" 1
 927 0006 62B6     		CPSIE   i
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 25


 928              	@ 0 "" 2
 403:.\main.c      ****     
 404:.\main.c      ****     //Define variables
 405:.\main.c      ****     time_t t;
 406:.\main.c      ****     uint8 counter;
 407:.\main.c      ****     
 408:.\main.c      ****     //start all of our components
 409:.\main.c      ****     Clock_pwm_Start();
 929              		.loc 1 409 0
 930              		.code	16
 931 0008 FFF7FEFF 		bl	Clock_pwm_Start
 410:.\main.c      ****     Clock_counter_Start();
 932              		.loc 1 410 0
 933 000c FFF7FEFF 		bl	Clock_counter_Start
 411:.\main.c      ****     
 412:.\main.c      ****     //PWM_1_Start();
 413:.\main.c      ****     PWM_2_Start();
 934              		.loc 1 413 0
 935 0010 FFF7FEFF 		bl	PWM_2_Start
 414:.\main.c      ****     
 415:.\main.c      ****     PWM_2_WriteCompare(1500); //Initialize our motor drivers
 936              		.loc 1 415 0
 937 0014 3B4B     		ldr	r3, .L119
 938 0016 181C     		mov	r0, r3
 939 0018 FFF7FEFF 		bl	PWM_2_WriteCompare
 416:.\main.c      ****     CyDelay(10000);
 940              		.loc 1 416 0
 941 001c 3A4B     		ldr	r3, .L119+4
 942 001e 181C     		mov	r0, r3
 943 0020 FFF7FEFF 		bl	CyDelay
 417:.\main.c      ****     
 418:.\main.c      ****     PWM_3_Start();
 944              		.loc 1 418 0
 945 0024 FFF7FEFF 		bl	PWM_3_Start
 419:.\main.c      ****     
 420:.\main.c      ****     Timer_1_Start();
 946              		.loc 1 420 0
 947 0028 FFF7FEFF 		bl	Timer_1_Start
 421:.\main.c      ****     
 422:.\main.c      ****     isr_1_StartEx(timer_isr);
 948              		.loc 1 422 0
 949 002c 374B     		ldr	r3, .L119+8
 950 002e 181C     		mov	r0, r3
 951 0030 FFF7FEFF 		bl	isr_1_StartEx
 423:.\main.c      ****     
 424:.\main.c      ****     //helpers for generating random arrays
 425:.\main.c      ****     srand((unsigned) time(&t));
 952              		.loc 1 425 0
 953 0034 3B1C     		mov	r3, r7
 954 0036 181C     		mov	r0, r3
 955 0038 FFF7FEFF 		bl	time
 956 003c 031C     		mov	r3, r0
 957 003e 181C     		mov	r0, r3
 958 0040 FFF7FEFF 		bl	srand
 959              	.L117:
 426:.\main.c      ****     
 427:.\main.c      ****     for(;;)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 26


 428:.\main.c      ****     {
 429:.\main.c      ****         //check addresses
 430:.\main.c      ****         //TODO get the address bytes from Steve
 431:.\main.c      ****         
 432:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 960              		.loc 1 432 0
 961 0044 324B     		ldr	r3, .L119+12
 962 0046 1B78     		ldrb	r3, [r3]
 963 0048 002B     		cmp	r3, #0
 964 004a 07D0     		beq	.L111
 433:.\main.c      ****         {
 434:.\main.c      ****             fill_data_array();
 965              		.loc 1 434 0
 966 004c FFF7FEFF 		bl	fill_data_array
 435:.\main.c      ****             new_pack = 1;
 967              		.loc 1 435 0
 968 0050 304B     		ldr	r3, .L119+16
 969 0052 0122     		mov	r2, #1
 970 0054 1A70     		strb	r2, [r3]
 436:.\main.c      ****             fin_exec = 0;
 971              		.loc 1 436 0
 972 0056 304B     		ldr	r3, .L119+20
 973 0058 0022     		mov	r2, #0
 974 005a 1A70     		strb	r2, [r3]
 975              	.L111:
 437:.\main.c      ****         }
 438:.\main.c      ****         
 439:.\main.c      ****         baseAzimuth();
 976              		.loc 1 439 0
 977 005c FFF7FEFF 		bl	baseAzimuth
 440:.\main.c      **** //        shoulder();
 441:.\main.c      ****         elbow();
 978              		.loc 1 441 0
 979 0060 FFF7FEFF 		bl	elbow
 442:.\main.c      **** //        wristTilt();
 443:.\main.c      **** //        wristRotate();
 444:.\main.c      **** 
 445:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 980              		.loc 1 445 0
 981 0064 2C4B     		ldr	r3, .L119+20
 982 0066 1B78     		ldrb	r3, [r3]
 983 0068 022B     		cmp	r3, #2
 984 006a 03D1     		bne	.L112
 446:.\main.c      ****         {
 447:.\main.c      ****             new_pack = 0;
 985              		.loc 1 447 0
 986 006c 294B     		ldr	r3, .L119+16
 987 006e 0022     		mov	r2, #0
 988 0070 1A70     		strb	r2, [r3]
 448:.\main.c      ****         }
 449:.\main.c      ****         
 450:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 989              		.loc 1 450 0
 990 0072 FFE7     		b	.L118
 991              	.L112:
 992              	.L118:
 993 0074 C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 27


 994              	.L113:
 995              		.loc 1 450 0 is_stmt 0 discriminator 1
 996 0076 294B     		ldr	r3, .L119+24
 997 0078 1B78     		ldrb	r3, [r3]
 998 007a 002B     		cmp	r3, #0
 999 007c FBD0     		beq	.L113
 451:.\main.c      ****         timerFlag = 0;
 1000              		.loc 1 451 0 is_stmt 1
 1001 007e 274B     		ldr	r3, .L119+24
 1002 0080 0022     		mov	r2, #0
 1003 0082 1A70     		strb	r2, [r3]
 452:.\main.c      ****         
 453:.\main.c      ****         counter++;
 1004              		.loc 1 453 0
 1005 0084 3B1C     		mov	r3, r7
 1006 0086 0F33     		add	r3, r3, #15
 1007 0088 1A78     		ldrb	r2, [r3]
 1008 008a 3B1C     		mov	r3, r7
 1009 008c 0F33     		add	r3, r3, #15
 1010 008e 0132     		add	r2, r2, #1
 1011 0090 1A70     		strb	r2, [r3]
 454:.\main.c      ****         
 455:.\main.c      ****         if(counter == 100)
 1012              		.loc 1 455 0
 1013 0092 3B1C     		mov	r3, r7
 1014 0094 0F33     		add	r3, r3, #15
 1015 0096 1B78     		ldrb	r3, [r3]
 1016 0098 642B     		cmp	r3, #100
 1017 009a 31D1     		bne	.L114
 1018              	.LBB2:
 456:.\main.c      ****         {
 457:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1019              		.loc 1 457 0
 1020 009c 0023     		mov	r3, #0
 1021 009e BB60     		str	r3, [r7, #8]
 1022 00a0 23E0     		b	.L115
 1023              	.L116:
 1024              	.LBB3:
 458:.\main.c      ****             {
 459:.\main.c      ****                 int16 random_number = rand()%2001 - 1000;
 1025              		.loc 1 459 0 discriminator 2
 1026 00a2 FFF7FEFF 		bl	rand
 1027 00a6 031C     		mov	r3, r0
 1028 00a8 181C     		mov	r0, r3
 1029 00aa 1D49     		ldr	r1, .L119+28
 1030 00ac FFF7FEFF 		bl	__aeabi_idivmod
 1031 00b0 0B1C     		mov	r3, r1
 1032 00b2 9BB2     		uxth	r3, r3
 1033 00b4 1B4A     		ldr	r2, .L119+32
 1034 00b6 9B18     		add	r3, r3, r2
 1035 00b8 9AB2     		uxth	r2, r3
 1036 00ba BB1D     		add	r3, r7, #6
 1037 00bc 1A80     		strh	r2, [r3]
 460:.\main.c      ****                 test_array[i] = random_number >> 8;
 1038              		.loc 1 460 0 discriminator 2
 1039 00be BB1D     		add	r3, r7, #6
 1040 00c0 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 28


 1041 00c2 9B5E     		ldrsh	r3, [r3, r2]
 1042 00c4 1B12     		asr	r3, r3, #8
 1043 00c6 99B2     		uxth	r1, r3
 1044 00c8 174B     		ldr	r3, .L119+36
 1045 00ca BA68     		ldr	r2, [r7, #8]
 1046 00cc 5200     		lsl	r2, r2, #1
 1047 00ce D152     		strh	r1, [r2, r3]
 461:.\main.c      ****                 test_array[i+1] = random_number & 0x00FF;
 1048              		.loc 1 461 0 discriminator 2
 1049 00d0 BB68     		ldr	r3, [r7, #8]
 1050 00d2 5A1C     		add	r2, r3, #1
 1051 00d4 BB1D     		add	r3, r7, #6
 1052 00d6 1988     		ldrh	r1, [r3]
 1053 00d8 FF23     		mov	r3, #255
 1054 00da 0B40     		and	r3, r1
 1055 00dc 99B2     		uxth	r1, r3
 1056 00de 124B     		ldr	r3, .L119+36
 1057 00e0 5200     		lsl	r2, r2, #1
 1058 00e2 D152     		strh	r1, [r2, r3]
 1059              	.LBE3:
 457:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1060              		.loc 1 457 0 discriminator 2
 1061 00e4 BB68     		ldr	r3, [r7, #8]
 1062 00e6 0233     		add	r3, r3, #2
 1063 00e8 BB60     		str	r3, [r7, #8]
 1064              	.L115:
 457:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1065              		.loc 1 457 0 is_stmt 0 discriminator 1
 1066 00ea BB68     		ldr	r3, [r7, #8]
 1067 00ec 092B     		cmp	r3, #9
 1068 00ee D8DD     		ble	.L116
 1069              	.LBE2:
 462:.\main.c      ****             }
 463:.\main.c      ****             counter = 0;
 1070              		.loc 1 463 0 is_stmt 1
 1071 00f0 3B1C     		mov	r3, r7
 1072 00f2 0F33     		add	r3, r3, #15
 1073 00f4 0022     		mov	r2, #0
 1074 00f6 1A70     		strb	r2, [r3]
 464:.\main.c      ****             wiznet = 1;
 1075              		.loc 1 464 0
 1076 00f8 054B     		ldr	r3, .L119+12
 1077 00fa 0122     		mov	r2, #1
 1078 00fc 1A70     		strb	r2, [r3]
 465:.\main.c      ****         }
 466:.\main.c      ****         
 467:.\main.c      **** //            //Potential solution to how we will want to send feedback
 468:.\main.c      **** //            feedback_count++;
 469:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 470:.\main.c      **** //            {                                        //time through the full set of instructions
 471:.\main.c      **** //                send_feedback();
 472:.\main.c      **** //            }
 473:.\main.c      ****     }
 1079              		.loc 1 473 0
 1080 00fe A1E7     		b	.L117
 1081              	.L114:
 1082 0100 A0E7     		b	.L117
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 29


 1083              	.L120:
 1084 0102 C046     		.align	2
 1085              	.L119:
 1086 0104 DC050000 		.word	1500
 1087 0108 10270000 		.word	10000
 1088 010c 00000000 		.word	timer_isr
 1089 0110 00000000 		.word	wiznet
 1090 0114 00000000 		.word	new_pack
 1091 0118 00000000 		.word	fin_exec
 1092 011c 00000000 		.word	timerFlag
 1093 0120 D1070000 		.word	2001
 1094 0124 18FCFFFF 		.word	-1000
 1095 0128 00000000 		.word	test_array
 1096              		.cfi_endproc
 1097              	.LFE42:
 1098              		.size	main, .-main
 1099              		.text
 1100              	.Letext0:
 1101              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1102              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1103              		.section	.debug_info,"",%progbits
 1104              	.Ldebug_info0:
 1105 0000 8C040000 		.4byte	0x48c
 1106 0004 0400     		.2byte	0x4
 1107 0006 00000000 		.4byte	.Ldebug_abbrev0
 1108 000a 04       		.byte	0x4
 1109 000b 01       		.uleb128 0x1
 1110 000c 80030000 		.4byte	.LASF74
 1111 0010 01       		.byte	0x1
 1112 0011 B6010000 		.4byte	.LASF75
 1113 0015 97020000 		.4byte	.LASF76
 1114 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1115 001d 00000000 		.4byte	0
 1116 0021 00000000 		.4byte	.Ldebug_line0
 1117 0025 02       		.uleb128 0x2
 1118 0026 01       		.byte	0x1
 1119 0027 06       		.byte	0x6
 1120 0028 0E010000 		.4byte	.LASF0
 1121 002c 02       		.uleb128 0x2
 1122 002d 01       		.byte	0x1
 1123 002e 08       		.byte	0x8
 1124 002f CD010000 		.4byte	.LASF1
 1125 0033 02       		.uleb128 0x2
 1126 0034 02       		.byte	0x2
 1127 0035 05       		.byte	0x5
 1128 0036 39000000 		.4byte	.LASF2
 1129 003a 02       		.uleb128 0x2
 1130 003b 02       		.byte	0x2
 1131 003c 07       		.byte	0x7
 1132 003d 61020000 		.4byte	.LASF3
 1133 0041 02       		.uleb128 0x2
 1134 0042 04       		.byte	0x4
 1135 0043 05       		.byte	0x5
 1136 0044 5B010000 		.4byte	.LASF4
 1137 0048 02       		.uleb128 0x2
 1138 0049 04       		.byte	0x4
 1139 004a 07       		.byte	0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 30


 1140 004b 4F020000 		.4byte	.LASF5
 1141 004f 02       		.uleb128 0x2
 1142 0050 08       		.byte	0x8
 1143 0051 05       		.byte	0x5
 1144 0052 7E000000 		.4byte	.LASF6
 1145 0056 02       		.uleb128 0x2
 1146 0057 08       		.byte	0x8
 1147 0058 07       		.byte	0x7
 1148 0059 2B020000 		.4byte	.LASF7
 1149 005d 03       		.uleb128 0x3
 1150 005e 04       		.byte	0x4
 1151 005f 05       		.byte	0x5
 1152 0060 696E7400 		.ascii	"int\000"
 1153 0064 02       		.uleb128 0x2
 1154 0065 04       		.byte	0x4
 1155 0066 07       		.byte	0x7
 1156 0067 42020000 		.4byte	.LASF8
 1157 006b 04       		.uleb128 0x4
 1158 006c A4010000 		.4byte	.LASF9
 1159 0070 02       		.byte	0x2
 1160 0071 A1       		.byte	0xa1
 1161 0072 2C000000 		.4byte	0x2c
 1162 0076 04       		.uleb128 0x4
 1163 0077 BC000000 		.4byte	.LASF10
 1164 007b 02       		.byte	0x2
 1165 007c A2       		.byte	0xa2
 1166 007d 3A000000 		.4byte	0x3a
 1167 0081 04       		.uleb128 0x4
 1168 0082 1D030000 		.4byte	.LASF11
 1169 0086 02       		.byte	0x2
 1170 0087 A3       		.byte	0xa3
 1171 0088 48000000 		.4byte	0x48
 1172 008c 04       		.uleb128 0x4
 1173 008d DE000000 		.4byte	.LASF12
 1174 0091 02       		.byte	0x2
 1175 0092 A5       		.byte	0xa5
 1176 0093 33000000 		.4byte	0x33
 1177 0097 02       		.uleb128 0x2
 1178 0098 04       		.byte	0x4
 1179 0099 04       		.byte	0x4
 1180 009a 25010000 		.4byte	.LASF13
 1181 009e 02       		.uleb128 0x2
 1182 009f 08       		.byte	0x8
 1183 00a0 04       		.byte	0x4
 1184 00a1 3B030000 		.4byte	.LASF14
 1185 00a5 02       		.uleb128 0x2
 1186 00a6 01       		.byte	0x1
 1187 00a7 08       		.byte	0x8
 1188 00a8 92020000 		.4byte	.LASF15
 1189 00ac 02       		.uleb128 0x2
 1190 00ad 04       		.byte	0x4
 1191 00ae 07       		.byte	0x7
 1192 00af 50000000 		.4byte	.LASF16
 1193 00b3 04       		.uleb128 0x4
 1194 00b4 42030000 		.4byte	.LASF17
 1195 00b8 03       		.byte	0x3
 1196 00b9 7A       		.byte	0x7a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 31


 1197 00ba 41000000 		.4byte	0x41
 1198 00be 05       		.uleb128 0x5
 1199 00bf 77010000 		.4byte	.LASF22
 1200 00c3 01       		.byte	0x1
 1201 00c4 01       		.byte	0x1
 1202 00c5 49       		.byte	0x49
 1203 00c6 E3000000 		.4byte	0xe3
 1204 00ca 06       		.uleb128 0x6
 1205 00cb AA010000 		.4byte	.LASF18
 1206 00cf 00       		.sleb128 0
 1207 00d0 06       		.uleb128 0x6
 1208 00d1 09000000 		.4byte	.LASF19
 1209 00d5 01       		.sleb128 1
 1210 00d6 06       		.uleb128 0x6
 1211 00d7 07020000 		.4byte	.LASF20
 1212 00db 02       		.sleb128 2
 1213 00dc 06       		.uleb128 0x6
 1214 00dd 24030000 		.4byte	.LASF21
 1215 00e1 03       		.sleb128 3
 1216 00e2 00       		.byte	0
 1217 00e3 05       		.uleb128 0x5
 1218 00e4 74020000 		.4byte	.LASF23
 1219 00e8 01       		.byte	0x1
 1220 00e9 01       		.byte	0x1
 1221 00ea 78       		.byte	0x78
 1222 00eb 08010000 		.4byte	0x108
 1223 00ef 06       		.uleb128 0x6
 1224 00f0 9A010000 		.4byte	.LASF24
 1225 00f4 00       		.sleb128 0
 1226 00f5 06       		.uleb128 0x6
 1227 00f6 14000000 		.4byte	.LASF25
 1228 00fa 01       		.sleb128 1
 1229 00fb 06       		.uleb128 0x6
 1230 00fc 2E030000 		.4byte	.LASF26
 1231 0100 02       		.sleb128 2
 1232 0101 06       		.uleb128 0x6
 1233 0102 F9010000 		.4byte	.LASF27
 1234 0106 03       		.sleb128 3
 1235 0107 00       		.byte	0
 1236 0108 05       		.uleb128 0x5
 1237 0109 64000000 		.4byte	.LASF28
 1238 010d 01       		.byte	0x1
 1239 010e 01       		.byte	0x1
 1240 010f A9       		.byte	0xa9
 1241 0110 2D010000 		.4byte	0x12d
 1242 0114 06       		.uleb128 0x6
 1243 0115 E4000000 		.4byte	.LASF29
 1244 0119 00       		.sleb128 0
 1245 011a 06       		.uleb128 0x6
 1246 011b 43000000 		.4byte	.LASF30
 1247 011f 01       		.sleb128 1
 1248 0120 06       		.uleb128 0x6
 1249 0121 4C010000 		.4byte	.LASF31
 1250 0125 02       		.sleb128 2
 1251 0126 06       		.uleb128 0x6
 1252 0127 39040000 		.4byte	.LASF32
 1253 012b 03       		.sleb128 3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 32


 1254 012c 00       		.byte	0
 1255 012d 05       		.uleb128 0x5
 1256 012e 85020000 		.4byte	.LASF33
 1257 0132 01       		.byte	0x1
 1258 0133 01       		.byte	0x1
 1259 0134 F7       		.byte	0xf7
 1260 0135 52010000 		.4byte	0x152
 1261 0139 06       		.uleb128 0x6
 1262 013a 2B010000 		.4byte	.LASF34
 1263 013e 00       		.sleb128 0
 1264 013f 06       		.uleb128 0x6
 1265 0140 2F000000 		.4byte	.LASF35
 1266 0144 01       		.sleb128 1
 1267 0145 06       		.uleb128 0x6
 1268 0146 2C040000 		.4byte	.LASF36
 1269 014a 02       		.sleb128 2
 1270 014b 06       		.uleb128 0x6
 1271 014c 07040000 		.4byte	.LASF37
 1272 0150 03       		.sleb128 3
 1273 0151 00       		.byte	0
 1274 0152 07       		.uleb128 0x7
 1275 0153 64010000 		.4byte	.LASF38
 1276 0157 01       		.byte	0x1
 1277 0158 01       		.byte	0x1
 1278 0159 4401     		.2byte	0x144
 1279 015b 78010000 		.4byte	0x178
 1280 015f 06       		.uleb128 0x6
 1281 0160 00000000 		.4byte	.LASF39
 1282 0164 00       		.sleb128 0
 1283 0165 06       		.uleb128 0x6
 1284 0166 8C000000 		.4byte	.LASF40
 1285 016a 01       		.sleb128 1
 1286 016b 06       		.uleb128 0x6
 1287 016c 59000000 		.4byte	.LASF41
 1288 0170 02       		.sleb128 2
 1289 0171 06       		.uleb128 0x6
 1290 0172 06010000 		.4byte	.LASF42
 1291 0176 03       		.sleb128 3
 1292 0177 00       		.byte	0
 1293 0178 08       		.uleb128 0x8
 1294 0179 6D030000 		.4byte	.LASF54
 1295 017d 01       		.byte	0x1
 1296 017e 27       		.byte	0x27
 1297 017f 00000000 		.4byte	.LFB33
 1298 0183 28000000 		.4byte	.LFE33-.LFB33
 1299 0187 01       		.uleb128 0x1
 1300 0188 9C       		.byte	0x9c
 1301 0189 9C010000 		.4byte	0x19c
 1302 018d 09       		.uleb128 0x9
 1303 018e DB010000 		.4byte	.LASF43
 1304 0192 01       		.byte	0x1
 1305 0193 29       		.byte	0x29
 1306 0194 81000000 		.4byte	0x81
 1307 0198 02       		.uleb128 0x2
 1308 0199 91       		.byte	0x91
 1309 019a 74       		.sleb128 -12
 1310 019b 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 33


 1311 019c 0A       		.uleb128 0xa
 1312 019d 1F000000 		.4byte	.LASF50
 1313 01a1 01       		.byte	0x1
 1314 01a2 40       		.byte	0x40
 1315 01a3 00000000 		.4byte	.LFB34
 1316 01a7 4C000000 		.4byte	.LFE34-.LFB34
 1317 01ab 01       		.uleb128 0x1
 1318 01ac 9C       		.byte	0x9c
 1319 01ad BE010000 		.4byte	0x1be
 1320 01b1 0B       		.uleb128 0xb
 1321 01b2 6900     		.ascii	"i\000"
 1322 01b4 01       		.byte	0x1
 1323 01b5 42       		.byte	0x42
 1324 01b6 6B000000 		.4byte	0x6b
 1325 01ba 02       		.uleb128 0x2
 1326 01bb 91       		.byte	0x91
 1327 01bc 77       		.sleb128 -9
 1328 01bd 00       		.byte	0
 1329 01be 0C       		.uleb128 0xc
 1330 01bf 14030000 		.4byte	.LASF44
 1331 01c3 01       		.byte	0x1
 1332 01c4 4B       		.byte	0x4b
 1333 01c5 00000000 		.4byte	.LFB35
 1334 01c9 44000000 		.4byte	.LFE35-.LFB35
 1335 01cd 01       		.uleb128 0x1
 1336 01ce 9C       		.byte	0x9c
 1337 01cf 0C       		.uleb128 0xc
 1338 01d0 42010000 		.4byte	.LASF45
 1339 01d4 01       		.byte	0x1
 1340 01d5 7A       		.byte	0x7a
 1341 01d6 00000000 		.4byte	.LFB36
 1342 01da 48000000 		.4byte	.LFE36-.LFB36
 1343 01de 01       		.uleb128 0x1
 1344 01df 9C       		.byte	0x9c
 1345 01e0 0C       		.uleb128 0xc
 1346 01e1 D2000000 		.4byte	.LASF46
 1347 01e5 01       		.byte	0x1
 1348 01e6 AB       		.byte	0xab
 1349 01e7 00000000 		.4byte	.LFB37
 1350 01eb 48000000 		.4byte	.LFE37-.LFB37
 1351 01ef 01       		.uleb128 0x1
 1352 01f0 9C       		.byte	0x9c
 1353 01f1 0C       		.uleb128 0xc
 1354 01f2 BF010000 		.4byte	.LASF47
 1355 01f6 01       		.byte	0x1
 1356 01f7 DA       		.byte	0xda
 1357 01f8 00000000 		.4byte	.LFB38
 1358 01fc 08000000 		.4byte	.LFE38-.LFB38
 1359 0200 01       		.uleb128 0x1
 1360 0201 9C       		.byte	0x9c
 1361 0202 0D       		.uleb128 0xd
 1362 0203 11040000 		.4byte	.LASF77
 1363 0207 01       		.byte	0x1
 1364 0208 E4       		.byte	0xe4
 1365 0209 76000000 		.4byte	0x76
 1366 020d 00000000 		.4byte	.LFB39
 1367 0211 78000000 		.4byte	.LFE39-.LFB39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 34


 1368 0215 01       		.uleb128 0x1
 1369 0216 9C       		.byte	0x9c
 1370 0217 60020000 		.4byte	0x260
 1371 021b 0E       		.uleb128 0xe
 1372 021c 49030000 		.4byte	.LASF48
 1373 0220 01       		.byte	0x1
 1374 0221 E4       		.byte	0xe4
 1375 0222 60020000 		.4byte	0x260
 1376 0226 02       		.uleb128 0x2
 1377 0227 91       		.byte	0x91
 1378 0228 64       		.sleb128 -28
 1379 0229 0E       		.uleb128 0xe
 1380 022a 12020000 		.4byte	.LASF49
 1381 022e 01       		.byte	0x1
 1382 022f E4       		.byte	0xe4
 1383 0230 6B000000 		.4byte	0x6b
 1384 0234 02       		.uleb128 0x2
 1385 0235 91       		.byte	0x91
 1386 0236 63       		.sleb128 -29
 1387 0237 0B       		.uleb128 0xb
 1388 0238 6900     		.ascii	"i\000"
 1389 023a 01       		.byte	0x1
 1390 023b E6       		.byte	0xe6
 1391 023c 6B000000 		.4byte	0x6b
 1392 0240 02       		.uleb128 0x2
 1393 0241 91       		.byte	0x91
 1394 0242 77       		.sleb128 -9
 1395 0243 0B       		.uleb128 0xb
 1396 0244 73756D00 		.ascii	"sum\000"
 1397 0248 01       		.byte	0x1
 1398 0249 E7       		.byte	0xe7
 1399 024a 81000000 		.4byte	0x81
 1400 024e 02       		.uleb128 0x2
 1401 024f 91       		.byte	0x91
 1402 0250 70       		.sleb128 -16
 1403 0251 0B       		.uleb128 0xb
 1404 0252 61766700 		.ascii	"avg\000"
 1405 0256 01       		.byte	0x1
 1406 0257 E8       		.byte	0xe8
 1407 0258 76000000 		.4byte	0x76
 1408 025c 02       		.uleb128 0x2
 1409 025d 91       		.byte	0x91
 1410 025e 6E       		.sleb128 -18
 1411 025f 00       		.byte	0
 1412 0260 0F       		.uleb128 0xf
 1413 0261 04       		.byte	0x4
 1414 0262 76000000 		.4byte	0x76
 1415 0266 10       		.uleb128 0x10
 1416 0267 B6000000 		.4byte	.LASF51
 1417 026b 01       		.byte	0x1
 1418 026c F8       		.byte	0xf8
 1419 026d 00000000 		.4byte	.LFB40
 1420 0271 34010000 		.4byte	.LFE40-.LFB40
 1421 0275 01       		.uleb128 0x1
 1422 0276 9C       		.byte	0x9c
 1423 0277 A5020000 		.4byte	0x2a5
 1424 027b 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 35


 1425 027c 6900     		.ascii	"i\000"
 1426 027e 01       		.byte	0x1
 1427 027f FE       		.byte	0xfe
 1428 0280 6B000000 		.4byte	0x6b
 1429 0284 02       		.uleb128 0x2
 1430 0285 91       		.byte	0x91
 1431 0286 6F       		.sleb128 -17
 1432 0287 0B       		.uleb128 0xb
 1433 0288 61766700 		.ascii	"avg\000"
 1434 028c 01       		.byte	0x1
 1435 028d FF       		.byte	0xff
 1436 028e 76000000 		.4byte	0x76
 1437 0292 02       		.uleb128 0x2
 1438 0293 91       		.byte	0x91
 1439 0294 6A       		.sleb128 -22
 1440 0295 11       		.uleb128 0x11
 1441 0296 24040000 		.4byte	.LASF52
 1442 029a 01       		.byte	0x1
 1443 029b 0001     		.2byte	0x100
 1444 029d 76000000 		.4byte	0x76
 1445 02a1 02       		.uleb128 0x2
 1446 02a2 91       		.byte	0x91
 1447 02a3 6C       		.sleb128 -20
 1448 02a4 00       		.byte	0
 1449 02a5 12       		.uleb128 0x12
 1450 02a6 36010000 		.4byte	.LASF53
 1451 02aa 01       		.byte	0x1
 1452 02ab 4501     		.2byte	0x145
 1453 02ad 00000000 		.4byte	.LFB41
 1454 02b1 34010000 		.4byte	.LFE41-.LFB41
 1455 02b5 01       		.uleb128 0x1
 1456 02b6 9C       		.byte	0x9c
 1457 02b7 E7020000 		.4byte	0x2e7
 1458 02bb 13       		.uleb128 0x13
 1459 02bc 6900     		.ascii	"i\000"
 1460 02be 01       		.byte	0x1
 1461 02bf 4A01     		.2byte	0x14a
 1462 02c1 6B000000 		.4byte	0x6b
 1463 02c5 02       		.uleb128 0x2
 1464 02c6 91       		.byte	0x91
 1465 02c7 6F       		.sleb128 -17
 1466 02c8 13       		.uleb128 0x13
 1467 02c9 61766700 		.ascii	"avg\000"
 1468 02cd 01       		.byte	0x1
 1469 02ce 4B01     		.2byte	0x14b
 1470 02d0 76000000 		.4byte	0x76
 1471 02d4 02       		.uleb128 0x2
 1472 02d5 91       		.byte	0x91
 1473 02d6 6A       		.sleb128 -22
 1474 02d7 11       		.uleb128 0x11
 1475 02d8 24040000 		.4byte	.LASF52
 1476 02dc 01       		.byte	0x1
 1477 02dd 4C01     		.2byte	0x14c
 1478 02df 76000000 		.4byte	0x76
 1479 02e3 02       		.uleb128 0x2
 1480 02e4 91       		.byte	0x91
 1481 02e5 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 36


 1482 02e6 00       		.byte	0
 1483 02e7 14       		.uleb128 0x14
 1484 02e8 F6020000 		.4byte	.LASF55
 1485 02ec 01       		.byte	0x1
 1486 02ed 9001     		.2byte	0x190
 1487 02ef 5D000000 		.4byte	0x5d
 1488 02f3 00000000 		.4byte	.LFB42
 1489 02f7 2C010000 		.4byte	.LFE42-.LFB42
 1490 02fb 01       		.uleb128 0x1
 1491 02fc 9C       		.byte	0x9c
 1492 02fd 4E030000 		.4byte	0x34e
 1493 0301 13       		.uleb128 0x13
 1494 0302 7400     		.ascii	"t\000"
 1495 0304 01       		.byte	0x1
 1496 0305 9501     		.2byte	0x195
 1497 0307 B3000000 		.4byte	0xb3
 1498 030b 02       		.uleb128 0x2
 1499 030c 91       		.byte	0x91
 1500 030d 68       		.sleb128 -24
 1501 030e 11       		.uleb128 0x11
 1502 030f E3010000 		.4byte	.LASF56
 1503 0313 01       		.byte	0x1
 1504 0314 9601     		.2byte	0x196
 1505 0316 6B000000 		.4byte	0x6b
 1506 031a 02       		.uleb128 0x2
 1507 031b 91       		.byte	0x91
 1508 031c 77       		.sleb128 -9
 1509 031d 15       		.uleb128 0x15
 1510 031e 9C000000 		.4byte	.LBB2
 1511 0322 54000000 		.4byte	.LBE2-.LBB2
 1512 0326 13       		.uleb128 0x13
 1513 0327 6900     		.ascii	"i\000"
 1514 0329 01       		.byte	0x1
 1515 032a C901     		.2byte	0x1c9
 1516 032c 5D000000 		.4byte	0x5d
 1517 0330 02       		.uleb128 0x2
 1518 0331 91       		.byte	0x91
 1519 0332 70       		.sleb128 -16
 1520 0333 15       		.uleb128 0x15
 1521 0334 A2000000 		.4byte	.LBB3
 1522 0338 42000000 		.4byte	.LBE3-.LBB3
 1523 033c 11       		.uleb128 0x11
 1524 033d EB010000 		.4byte	.LASF57
 1525 0341 01       		.byte	0x1
 1526 0342 CB01     		.2byte	0x1cb
 1527 0344 8C000000 		.4byte	0x8c
 1528 0348 02       		.uleb128 0x2
 1529 0349 91       		.byte	0x91
 1530 034a 6E       		.sleb128 -18
 1531 034b 00       		.byte	0
 1532 034c 00       		.byte	0
 1533 034d 00       		.byte	0
 1534 034e 16       		.uleb128 0x16
 1535 034f 76000000 		.4byte	0x76
 1536 0353 5E030000 		.4byte	0x35e
 1537 0357 17       		.uleb128 0x17
 1538 0358 AC000000 		.4byte	0xac
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 37


 1539 035c 0D       		.byte	0xd
 1540 035d 00       		.byte	0
 1541 035e 18       		.uleb128 0x18
 1542 035f 19040000 		.4byte	.LASF58
 1543 0363 01       		.byte	0x1
 1544 0364 0E       		.byte	0xe
 1545 0365 4E030000 		.4byte	0x34e
 1546 0369 05       		.uleb128 0x5
 1547 036a 03       		.byte	0x3
 1548 036b 00000000 		.4byte	data_array
 1549 036f 18       		.uleb128 0x18
 1550 0370 77000000 		.4byte	.LASF59
 1551 0374 01       		.byte	0x1
 1552 0375 10       		.byte	0x10
 1553 0376 6B000000 		.4byte	0x6b
 1554 037a 05       		.uleb128 0x5
 1555 037b 03       		.byte	0x3
 1556 037c 00000000 		.4byte	wiznet
 1557 0380 18       		.uleb128 0x18
 1558 0381 77030000 		.4byte	.LASF60
 1559 0385 01       		.byte	0x1
 1560 0386 11       		.byte	0x11
 1561 0387 6B000000 		.4byte	0x6b
 1562 038b 05       		.uleb128 0x5
 1563 038c 03       		.byte	0x3
 1564 038d 00000000 		.4byte	new_pack
 1565 0391 18       		.uleb128 0x18
 1566 0392 84010000 		.4byte	.LASF61
 1567 0396 01       		.byte	0x1
 1568 0397 14       		.byte	0x14
 1569 0398 6B000000 		.4byte	0x6b
 1570 039c 05       		.uleb128 0x5
 1571 039d 03       		.byte	0x3
 1572 039e 00000000 		.4byte	fin_exec
 1573 03a2 16       		.uleb128 0x16
 1574 03a3 8C000000 		.4byte	0x8c
 1575 03a7 B2030000 		.4byte	0x3b2
 1576 03ab 17       		.uleb128 0x17
 1577 03ac AC000000 		.4byte	0xac
 1578 03b0 09       		.byte	0x9
 1579 03b1 00       		.byte	0
 1580 03b2 18       		.uleb128 0x18
 1581 03b3 1A010000 		.4byte	.LASF62
 1582 03b7 01       		.byte	0x1
 1583 03b8 17       		.byte	0x17
 1584 03b9 A2030000 		.4byte	0x3a2
 1585 03bd 05       		.uleb128 0x5
 1586 03be 03       		.byte	0x3
 1587 03bf 00000000 		.4byte	test_array
 1588 03c3 18       		.uleb128 0x18
 1589 03c4 C3000000 		.4byte	.LASF63
 1590 03c8 01       		.byte	0x1
 1591 03c9 1A       		.byte	0x1a
 1592 03ca 6B000000 		.4byte	0x6b
 1593 03ce 05       		.uleb128 0x5
 1594 03cf 03       		.byte	0x3
 1595 03d0 00000000 		.4byte	elbw_arr_cspot
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 38


 1596 03d4 16       		.uleb128 0x16
 1597 03d5 76000000 		.4byte	0x76
 1598 03d9 E4030000 		.4byte	0x3e4
 1599 03dd 17       		.uleb128 0x17
 1600 03de AC000000 		.4byte	0xac
 1601 03e2 13       		.byte	0x13
 1602 03e3 00       		.byte	0
 1603 03e4 18       		.uleb128 0x18
 1604 03e5 FB020000 		.4byte	.LASF64
 1605 03e9 01       		.byte	0x1
 1606 03ea 1B       		.byte	0x1b
 1607 03eb D4030000 		.4byte	0x3d4
 1608 03ef 05       		.uleb128 0x5
 1609 03f0 03       		.byte	0x3
 1610 03f1 00000000 		.4byte	elbow_array
 1611 03f5 18       		.uleb128 0x18
 1612 03f6 8D010000 		.4byte	.LASF65
 1613 03fa 01       		.byte	0x1
 1614 03fb 1E       		.byte	0x1e
 1615 03fc 6B000000 		.4byte	0x6b
 1616 0400 05       		.uleb128 0x5
 1617 0401 03       		.byte	0x3
 1618 0402 00000000 		.4byte	BA_arr_cspot
 1619 0406 18       		.uleb128 0x18
 1620 0407 07030000 		.4byte	.LASF66
 1621 040b 01       		.byte	0x1
 1622 040c 1F       		.byte	0x1f
 1623 040d D4030000 		.4byte	0x3d4
 1624 0411 05       		.uleb128 0x5
 1625 0412 03       		.byte	0x3
 1626 0413 00000000 		.4byte	baseAz_array
 1627 0417 18       		.uleb128 0x18
 1628 0418 1C020000 		.4byte	.LASF67
 1629 041c 01       		.byte	0x1
 1630 041d 21       		.byte	0x21
 1631 041e 76000000 		.4byte	0x76
 1632 0422 05       		.uleb128 0x5
 1633 0423 03       		.byte	0x3
 1634 0424 00000000 		.4byte	feedback_count
 1635 0428 18       		.uleb128 0x18
 1636 0429 F0000000 		.4byte	.LASF68
 1637 042d 01       		.byte	0x1
 1638 042e 22       		.byte	0x22
 1639 042f 6B000000 		.4byte	0x6b
 1640 0433 05       		.uleb128 0x5
 1641 0434 03       		.byte	0x3
 1642 0435 00000000 		.4byte	timerFlag
 1643 0439 18       		.uleb128 0x18
 1644 043a FA000000 		.4byte	.LASF69
 1645 043e 01       		.byte	0x1
 1646 043f 49       		.byte	0x49
 1647 0440 BE000000 		.4byte	0xbe
 1648 0444 05       		.uleb128 0x5
 1649 0445 03       		.byte	0x3
 1650 0446 00000000 		.4byte	shldr_state
 1651 044a 18       		.uleb128 0x18
 1652 044b A6000000 		.4byte	.LASF70
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 39


 1653 044f 01       		.byte	0x1
 1654 0450 78       		.byte	0x78
 1655 0451 E3000000 		.4byte	0xe3
 1656 0455 05       		.uleb128 0x5
 1657 0456 03       		.byte	0x3
 1658 0457 00000000 		.4byte	wristTilt_state
 1659 045b 18       		.uleb128 0x18
 1660 045c 4F030000 		.4byte	.LASF71
 1661 0460 01       		.byte	0x1
 1662 0461 A9       		.byte	0xa9
 1663 0462 08010000 		.4byte	0x108
 1664 0466 05       		.uleb128 0x5
 1665 0467 03       		.byte	0x3
 1666 0468 00000000 		.4byte	wristRotate_state
 1667 046c 18       		.uleb128 0x18
 1668 046d 61030000 		.4byte	.LASF72
 1669 0471 01       		.byte	0x1
 1670 0472 F7       		.byte	0xf7
 1671 0473 2D010000 		.4byte	0x12d
 1672 0477 05       		.uleb128 0x5
 1673 0478 03       		.byte	0x3
 1674 0479 00000000 		.4byte	elbow_state
 1675 047d 19       		.uleb128 0x19
 1676 047e 94000000 		.4byte	.LASF73
 1677 0482 01       		.byte	0x1
 1678 0483 4401     		.2byte	0x144
 1679 0485 52010000 		.4byte	0x152
 1680 0489 05       		.uleb128 0x5
 1681 048a 03       		.byte	0x3
 1682 048b 00000000 		.4byte	baseAzimuth_state
 1683 048f 00       		.byte	0
 1684              		.section	.debug_abbrev,"",%progbits
 1685              	.Ldebug_abbrev0:
 1686 0000 01       		.uleb128 0x1
 1687 0001 11       		.uleb128 0x11
 1688 0002 01       		.byte	0x1
 1689 0003 25       		.uleb128 0x25
 1690 0004 0E       		.uleb128 0xe
 1691 0005 13       		.uleb128 0x13
 1692 0006 0B       		.uleb128 0xb
 1693 0007 03       		.uleb128 0x3
 1694 0008 0E       		.uleb128 0xe
 1695 0009 1B       		.uleb128 0x1b
 1696 000a 0E       		.uleb128 0xe
 1697 000b 55       		.uleb128 0x55
 1698 000c 17       		.uleb128 0x17
 1699 000d 11       		.uleb128 0x11
 1700 000e 01       		.uleb128 0x1
 1701 000f 10       		.uleb128 0x10
 1702 0010 17       		.uleb128 0x17
 1703 0011 00       		.byte	0
 1704 0012 00       		.byte	0
 1705 0013 02       		.uleb128 0x2
 1706 0014 24       		.uleb128 0x24
 1707 0015 00       		.byte	0
 1708 0016 0B       		.uleb128 0xb
 1709 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 40


 1710 0018 3E       		.uleb128 0x3e
 1711 0019 0B       		.uleb128 0xb
 1712 001a 03       		.uleb128 0x3
 1713 001b 0E       		.uleb128 0xe
 1714 001c 00       		.byte	0
 1715 001d 00       		.byte	0
 1716 001e 03       		.uleb128 0x3
 1717 001f 24       		.uleb128 0x24
 1718 0020 00       		.byte	0
 1719 0021 0B       		.uleb128 0xb
 1720 0022 0B       		.uleb128 0xb
 1721 0023 3E       		.uleb128 0x3e
 1722 0024 0B       		.uleb128 0xb
 1723 0025 03       		.uleb128 0x3
 1724 0026 08       		.uleb128 0x8
 1725 0027 00       		.byte	0
 1726 0028 00       		.byte	0
 1727 0029 04       		.uleb128 0x4
 1728 002a 16       		.uleb128 0x16
 1729 002b 00       		.byte	0
 1730 002c 03       		.uleb128 0x3
 1731 002d 0E       		.uleb128 0xe
 1732 002e 3A       		.uleb128 0x3a
 1733 002f 0B       		.uleb128 0xb
 1734 0030 3B       		.uleb128 0x3b
 1735 0031 0B       		.uleb128 0xb
 1736 0032 49       		.uleb128 0x49
 1737 0033 13       		.uleb128 0x13
 1738 0034 00       		.byte	0
 1739 0035 00       		.byte	0
 1740 0036 05       		.uleb128 0x5
 1741 0037 04       		.uleb128 0x4
 1742 0038 01       		.byte	0x1
 1743 0039 03       		.uleb128 0x3
 1744 003a 0E       		.uleb128 0xe
 1745 003b 0B       		.uleb128 0xb
 1746 003c 0B       		.uleb128 0xb
 1747 003d 3A       		.uleb128 0x3a
 1748 003e 0B       		.uleb128 0xb
 1749 003f 3B       		.uleb128 0x3b
 1750 0040 0B       		.uleb128 0xb
 1751 0041 01       		.uleb128 0x1
 1752 0042 13       		.uleb128 0x13
 1753 0043 00       		.byte	0
 1754 0044 00       		.byte	0
 1755 0045 06       		.uleb128 0x6
 1756 0046 28       		.uleb128 0x28
 1757 0047 00       		.byte	0
 1758 0048 03       		.uleb128 0x3
 1759 0049 0E       		.uleb128 0xe
 1760 004a 1C       		.uleb128 0x1c
 1761 004b 0D       		.uleb128 0xd
 1762 004c 00       		.byte	0
 1763 004d 00       		.byte	0
 1764 004e 07       		.uleb128 0x7
 1765 004f 04       		.uleb128 0x4
 1766 0050 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 41


 1767 0051 03       		.uleb128 0x3
 1768 0052 0E       		.uleb128 0xe
 1769 0053 0B       		.uleb128 0xb
 1770 0054 0B       		.uleb128 0xb
 1771 0055 3A       		.uleb128 0x3a
 1772 0056 0B       		.uleb128 0xb
 1773 0057 3B       		.uleb128 0x3b
 1774 0058 05       		.uleb128 0x5
 1775 0059 01       		.uleb128 0x1
 1776 005a 13       		.uleb128 0x13
 1777 005b 00       		.byte	0
 1778 005c 00       		.byte	0
 1779 005d 08       		.uleb128 0x8
 1780 005e 2E       		.uleb128 0x2e
 1781 005f 01       		.byte	0x1
 1782 0060 3F       		.uleb128 0x3f
 1783 0061 19       		.uleb128 0x19
 1784 0062 03       		.uleb128 0x3
 1785 0063 0E       		.uleb128 0xe
 1786 0064 3A       		.uleb128 0x3a
 1787 0065 0B       		.uleb128 0xb
 1788 0066 3B       		.uleb128 0x3b
 1789 0067 0B       		.uleb128 0xb
 1790 0068 27       		.uleb128 0x27
 1791 0069 19       		.uleb128 0x19
 1792 006a 11       		.uleb128 0x11
 1793 006b 01       		.uleb128 0x1
 1794 006c 12       		.uleb128 0x12
 1795 006d 06       		.uleb128 0x6
 1796 006e 40       		.uleb128 0x40
 1797 006f 18       		.uleb128 0x18
 1798 0070 9642     		.uleb128 0x2116
 1799 0072 19       		.uleb128 0x19
 1800 0073 01       		.uleb128 0x1
 1801 0074 13       		.uleb128 0x13
 1802 0075 00       		.byte	0
 1803 0076 00       		.byte	0
 1804 0077 09       		.uleb128 0x9
 1805 0078 34       		.uleb128 0x34
 1806 0079 00       		.byte	0
 1807 007a 03       		.uleb128 0x3
 1808 007b 0E       		.uleb128 0xe
 1809 007c 3A       		.uleb128 0x3a
 1810 007d 0B       		.uleb128 0xb
 1811 007e 3B       		.uleb128 0x3b
 1812 007f 0B       		.uleb128 0xb
 1813 0080 49       		.uleb128 0x49
 1814 0081 13       		.uleb128 0x13
 1815 0082 02       		.uleb128 0x2
 1816 0083 18       		.uleb128 0x18
 1817 0084 00       		.byte	0
 1818 0085 00       		.byte	0
 1819 0086 0A       		.uleb128 0xa
 1820 0087 2E       		.uleb128 0x2e
 1821 0088 01       		.byte	0x1
 1822 0089 3F       		.uleb128 0x3f
 1823 008a 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 42


 1824 008b 03       		.uleb128 0x3
 1825 008c 0E       		.uleb128 0xe
 1826 008d 3A       		.uleb128 0x3a
 1827 008e 0B       		.uleb128 0xb
 1828 008f 3B       		.uleb128 0x3b
 1829 0090 0B       		.uleb128 0xb
 1830 0091 11       		.uleb128 0x11
 1831 0092 01       		.uleb128 0x1
 1832 0093 12       		.uleb128 0x12
 1833 0094 06       		.uleb128 0x6
 1834 0095 40       		.uleb128 0x40
 1835 0096 18       		.uleb128 0x18
 1836 0097 9742     		.uleb128 0x2117
 1837 0099 19       		.uleb128 0x19
 1838 009a 01       		.uleb128 0x1
 1839 009b 13       		.uleb128 0x13
 1840 009c 00       		.byte	0
 1841 009d 00       		.byte	0
 1842 009e 0B       		.uleb128 0xb
 1843 009f 34       		.uleb128 0x34
 1844 00a0 00       		.byte	0
 1845 00a1 03       		.uleb128 0x3
 1846 00a2 08       		.uleb128 0x8
 1847 00a3 3A       		.uleb128 0x3a
 1848 00a4 0B       		.uleb128 0xb
 1849 00a5 3B       		.uleb128 0x3b
 1850 00a6 0B       		.uleb128 0xb
 1851 00a7 49       		.uleb128 0x49
 1852 00a8 13       		.uleb128 0x13
 1853 00a9 02       		.uleb128 0x2
 1854 00aa 18       		.uleb128 0x18
 1855 00ab 00       		.byte	0
 1856 00ac 00       		.byte	0
 1857 00ad 0C       		.uleb128 0xc
 1858 00ae 2E       		.uleb128 0x2e
 1859 00af 00       		.byte	0
 1860 00b0 3F       		.uleb128 0x3f
 1861 00b1 19       		.uleb128 0x19
 1862 00b2 03       		.uleb128 0x3
 1863 00b3 0E       		.uleb128 0xe
 1864 00b4 3A       		.uleb128 0x3a
 1865 00b5 0B       		.uleb128 0xb
 1866 00b6 3B       		.uleb128 0x3b
 1867 00b7 0B       		.uleb128 0xb
 1868 00b8 11       		.uleb128 0x11
 1869 00b9 01       		.uleb128 0x1
 1870 00ba 12       		.uleb128 0x12
 1871 00bb 06       		.uleb128 0x6
 1872 00bc 40       		.uleb128 0x40
 1873 00bd 18       		.uleb128 0x18
 1874 00be 9742     		.uleb128 0x2117
 1875 00c0 19       		.uleb128 0x19
 1876 00c1 00       		.byte	0
 1877 00c2 00       		.byte	0
 1878 00c3 0D       		.uleb128 0xd
 1879 00c4 2E       		.uleb128 0x2e
 1880 00c5 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 43


 1881 00c6 3F       		.uleb128 0x3f
 1882 00c7 19       		.uleb128 0x19
 1883 00c8 03       		.uleb128 0x3
 1884 00c9 0E       		.uleb128 0xe
 1885 00ca 3A       		.uleb128 0x3a
 1886 00cb 0B       		.uleb128 0xb
 1887 00cc 3B       		.uleb128 0x3b
 1888 00cd 0B       		.uleb128 0xb
 1889 00ce 27       		.uleb128 0x27
 1890 00cf 19       		.uleb128 0x19
 1891 00d0 49       		.uleb128 0x49
 1892 00d1 13       		.uleb128 0x13
 1893 00d2 11       		.uleb128 0x11
 1894 00d3 01       		.uleb128 0x1
 1895 00d4 12       		.uleb128 0x12
 1896 00d5 06       		.uleb128 0x6
 1897 00d6 40       		.uleb128 0x40
 1898 00d7 18       		.uleb128 0x18
 1899 00d8 9642     		.uleb128 0x2116
 1900 00da 19       		.uleb128 0x19
 1901 00db 01       		.uleb128 0x1
 1902 00dc 13       		.uleb128 0x13
 1903 00dd 00       		.byte	0
 1904 00de 00       		.byte	0
 1905 00df 0E       		.uleb128 0xe
 1906 00e0 05       		.uleb128 0x5
 1907 00e1 00       		.byte	0
 1908 00e2 03       		.uleb128 0x3
 1909 00e3 0E       		.uleb128 0xe
 1910 00e4 3A       		.uleb128 0x3a
 1911 00e5 0B       		.uleb128 0xb
 1912 00e6 3B       		.uleb128 0x3b
 1913 00e7 0B       		.uleb128 0xb
 1914 00e8 49       		.uleb128 0x49
 1915 00e9 13       		.uleb128 0x13
 1916 00ea 02       		.uleb128 0x2
 1917 00eb 18       		.uleb128 0x18
 1918 00ec 00       		.byte	0
 1919 00ed 00       		.byte	0
 1920 00ee 0F       		.uleb128 0xf
 1921 00ef 0F       		.uleb128 0xf
 1922 00f0 00       		.byte	0
 1923 00f1 0B       		.uleb128 0xb
 1924 00f2 0B       		.uleb128 0xb
 1925 00f3 49       		.uleb128 0x49
 1926 00f4 13       		.uleb128 0x13
 1927 00f5 00       		.byte	0
 1928 00f6 00       		.byte	0
 1929 00f7 10       		.uleb128 0x10
 1930 00f8 2E       		.uleb128 0x2e
 1931 00f9 01       		.byte	0x1
 1932 00fa 3F       		.uleb128 0x3f
 1933 00fb 19       		.uleb128 0x19
 1934 00fc 03       		.uleb128 0x3
 1935 00fd 0E       		.uleb128 0xe
 1936 00fe 3A       		.uleb128 0x3a
 1937 00ff 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 44


 1938 0100 3B       		.uleb128 0x3b
 1939 0101 0B       		.uleb128 0xb
 1940 0102 11       		.uleb128 0x11
 1941 0103 01       		.uleb128 0x1
 1942 0104 12       		.uleb128 0x12
 1943 0105 06       		.uleb128 0x6
 1944 0106 40       		.uleb128 0x40
 1945 0107 18       		.uleb128 0x18
 1946 0108 9642     		.uleb128 0x2116
 1947 010a 19       		.uleb128 0x19
 1948 010b 01       		.uleb128 0x1
 1949 010c 13       		.uleb128 0x13
 1950 010d 00       		.byte	0
 1951 010e 00       		.byte	0
 1952 010f 11       		.uleb128 0x11
 1953 0110 34       		.uleb128 0x34
 1954 0111 00       		.byte	0
 1955 0112 03       		.uleb128 0x3
 1956 0113 0E       		.uleb128 0xe
 1957 0114 3A       		.uleb128 0x3a
 1958 0115 0B       		.uleb128 0xb
 1959 0116 3B       		.uleb128 0x3b
 1960 0117 05       		.uleb128 0x5
 1961 0118 49       		.uleb128 0x49
 1962 0119 13       		.uleb128 0x13
 1963 011a 02       		.uleb128 0x2
 1964 011b 18       		.uleb128 0x18
 1965 011c 00       		.byte	0
 1966 011d 00       		.byte	0
 1967 011e 12       		.uleb128 0x12
 1968 011f 2E       		.uleb128 0x2e
 1969 0120 01       		.byte	0x1
 1970 0121 3F       		.uleb128 0x3f
 1971 0122 19       		.uleb128 0x19
 1972 0123 03       		.uleb128 0x3
 1973 0124 0E       		.uleb128 0xe
 1974 0125 3A       		.uleb128 0x3a
 1975 0126 0B       		.uleb128 0xb
 1976 0127 3B       		.uleb128 0x3b
 1977 0128 05       		.uleb128 0x5
 1978 0129 11       		.uleb128 0x11
 1979 012a 01       		.uleb128 0x1
 1980 012b 12       		.uleb128 0x12
 1981 012c 06       		.uleb128 0x6
 1982 012d 40       		.uleb128 0x40
 1983 012e 18       		.uleb128 0x18
 1984 012f 9642     		.uleb128 0x2116
 1985 0131 19       		.uleb128 0x19
 1986 0132 01       		.uleb128 0x1
 1987 0133 13       		.uleb128 0x13
 1988 0134 00       		.byte	0
 1989 0135 00       		.byte	0
 1990 0136 13       		.uleb128 0x13
 1991 0137 34       		.uleb128 0x34
 1992 0138 00       		.byte	0
 1993 0139 03       		.uleb128 0x3
 1994 013a 08       		.uleb128 0x8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 45


 1995 013b 3A       		.uleb128 0x3a
 1996 013c 0B       		.uleb128 0xb
 1997 013d 3B       		.uleb128 0x3b
 1998 013e 05       		.uleb128 0x5
 1999 013f 49       		.uleb128 0x49
 2000 0140 13       		.uleb128 0x13
 2001 0141 02       		.uleb128 0x2
 2002 0142 18       		.uleb128 0x18
 2003 0143 00       		.byte	0
 2004 0144 00       		.byte	0
 2005 0145 14       		.uleb128 0x14
 2006 0146 2E       		.uleb128 0x2e
 2007 0147 01       		.byte	0x1
 2008 0148 3F       		.uleb128 0x3f
 2009 0149 19       		.uleb128 0x19
 2010 014a 03       		.uleb128 0x3
 2011 014b 0E       		.uleb128 0xe
 2012 014c 3A       		.uleb128 0x3a
 2013 014d 0B       		.uleb128 0xb
 2014 014e 3B       		.uleb128 0x3b
 2015 014f 05       		.uleb128 0x5
 2016 0150 49       		.uleb128 0x49
 2017 0151 13       		.uleb128 0x13
 2018 0152 11       		.uleb128 0x11
 2019 0153 01       		.uleb128 0x1
 2020 0154 12       		.uleb128 0x12
 2021 0155 06       		.uleb128 0x6
 2022 0156 40       		.uleb128 0x40
 2023 0157 18       		.uleb128 0x18
 2024 0158 9642     		.uleb128 0x2116
 2025 015a 19       		.uleb128 0x19
 2026 015b 01       		.uleb128 0x1
 2027 015c 13       		.uleb128 0x13
 2028 015d 00       		.byte	0
 2029 015e 00       		.byte	0
 2030 015f 15       		.uleb128 0x15
 2031 0160 0B       		.uleb128 0xb
 2032 0161 01       		.byte	0x1
 2033 0162 11       		.uleb128 0x11
 2034 0163 01       		.uleb128 0x1
 2035 0164 12       		.uleb128 0x12
 2036 0165 06       		.uleb128 0x6
 2037 0166 00       		.byte	0
 2038 0167 00       		.byte	0
 2039 0168 16       		.uleb128 0x16
 2040 0169 01       		.uleb128 0x1
 2041 016a 01       		.byte	0x1
 2042 016b 49       		.uleb128 0x49
 2043 016c 13       		.uleb128 0x13
 2044 016d 01       		.uleb128 0x1
 2045 016e 13       		.uleb128 0x13
 2046 016f 00       		.byte	0
 2047 0170 00       		.byte	0
 2048 0171 17       		.uleb128 0x17
 2049 0172 21       		.uleb128 0x21
 2050 0173 00       		.byte	0
 2051 0174 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 46


 2052 0175 13       		.uleb128 0x13
 2053 0176 2F       		.uleb128 0x2f
 2054 0177 0B       		.uleb128 0xb
 2055 0178 00       		.byte	0
 2056 0179 00       		.byte	0
 2057 017a 18       		.uleb128 0x18
 2058 017b 34       		.uleb128 0x34
 2059 017c 00       		.byte	0
 2060 017d 03       		.uleb128 0x3
 2061 017e 0E       		.uleb128 0xe
 2062 017f 3A       		.uleb128 0x3a
 2063 0180 0B       		.uleb128 0xb
 2064 0181 3B       		.uleb128 0x3b
 2065 0182 0B       		.uleb128 0xb
 2066 0183 49       		.uleb128 0x49
 2067 0184 13       		.uleb128 0x13
 2068 0185 3F       		.uleb128 0x3f
 2069 0186 19       		.uleb128 0x19
 2070 0187 02       		.uleb128 0x2
 2071 0188 18       		.uleb128 0x18
 2072 0189 00       		.byte	0
 2073 018a 00       		.byte	0
 2074 018b 19       		.uleb128 0x19
 2075 018c 34       		.uleb128 0x34
 2076 018d 00       		.byte	0
 2077 018e 03       		.uleb128 0x3
 2078 018f 0E       		.uleb128 0xe
 2079 0190 3A       		.uleb128 0x3a
 2080 0191 0B       		.uleb128 0xb
 2081 0192 3B       		.uleb128 0x3b
 2082 0193 05       		.uleb128 0x5
 2083 0194 49       		.uleb128 0x49
 2084 0195 13       		.uleb128 0x13
 2085 0196 3F       		.uleb128 0x3f
 2086 0197 19       		.uleb128 0x19
 2087 0198 02       		.uleb128 0x2
 2088 0199 18       		.uleb128 0x18
 2089 019a 00       		.byte	0
 2090 019b 00       		.byte	0
 2091 019c 00       		.byte	0
 2092              		.section	.debug_aranges,"",%progbits
 2093 0000 64000000 		.4byte	0x64
 2094 0004 0200     		.2byte	0x2
 2095 0006 00000000 		.4byte	.Ldebug_info0
 2096 000a 04       		.byte	0x4
 2097 000b 00       		.byte	0
 2098 000c 0000     		.2byte	0
 2099 000e 0000     		.2byte	0
 2100 0010 00000000 		.4byte	.LFB33
 2101 0014 28000000 		.4byte	.LFE33-.LFB33
 2102 0018 00000000 		.4byte	.LFB34
 2103 001c 4C000000 		.4byte	.LFE34-.LFB34
 2104 0020 00000000 		.4byte	.LFB35
 2105 0024 44000000 		.4byte	.LFE35-.LFB35
 2106 0028 00000000 		.4byte	.LFB36
 2107 002c 48000000 		.4byte	.LFE36-.LFB36
 2108 0030 00000000 		.4byte	.LFB37
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 47


 2109 0034 48000000 		.4byte	.LFE37-.LFB37
 2110 0038 00000000 		.4byte	.LFB38
 2111 003c 08000000 		.4byte	.LFE38-.LFB38
 2112 0040 00000000 		.4byte	.LFB39
 2113 0044 78000000 		.4byte	.LFE39-.LFB39
 2114 0048 00000000 		.4byte	.LFB40
 2115 004c 34010000 		.4byte	.LFE40-.LFB40
 2116 0050 00000000 		.4byte	.LFB41
 2117 0054 34010000 		.4byte	.LFE41-.LFB41
 2118 0058 00000000 		.4byte	.LFB42
 2119 005c 2C010000 		.4byte	.LFE42-.LFB42
 2120 0060 00000000 		.4byte	0
 2121 0064 00000000 		.4byte	0
 2122              		.section	.debug_ranges,"",%progbits
 2123              	.Ldebug_ranges0:
 2124 0000 00000000 		.4byte	.LFB33
 2125 0004 28000000 		.4byte	.LFE33
 2126 0008 00000000 		.4byte	.LFB34
 2127 000c 4C000000 		.4byte	.LFE34
 2128 0010 00000000 		.4byte	.LFB35
 2129 0014 44000000 		.4byte	.LFE35
 2130 0018 00000000 		.4byte	.LFB36
 2131 001c 48000000 		.4byte	.LFE36
 2132 0020 00000000 		.4byte	.LFB37
 2133 0024 48000000 		.4byte	.LFE37
 2134 0028 00000000 		.4byte	.LFB38
 2135 002c 08000000 		.4byte	.LFE38
 2136 0030 00000000 		.4byte	.LFB39
 2137 0034 78000000 		.4byte	.LFE39
 2138 0038 00000000 		.4byte	.LFB40
 2139 003c 34010000 		.4byte	.LFE40
 2140 0040 00000000 		.4byte	.LFB41
 2141 0044 34010000 		.4byte	.LFE41
 2142 0048 00000000 		.4byte	.LFB42
 2143 004c 2C010000 		.4byte	.LFE42
 2144 0050 00000000 		.4byte	0
 2145 0054 00000000 		.4byte	0
 2146              		.section	.debug_line,"",%progbits
 2147              	.Ldebug_line0:
 2148 0000 6B020000 		.section	.debug_str,"MS",%progbits,1
 2148      0200BF00 
 2148      00000201 
 2148      FB0E0D00 
 2148      01010101 
 2149              	.LASF39:
 2150 0000 42415F73 		.ascii	"BA_start\000"
 2150      74617274 
 2150      00
 2151              	.LASF19:
 2152 0009 73686C64 		.ascii	"shldr_init\000"
 2152      725F696E 
 2152      697400
 2153              	.LASF25:
 2154 0014 74696C74 		.ascii	"tilt_start\000"
 2154      5F737461 
 2154      727400
 2155              	.LASF50:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 48


 2156 001f 66696C6C 		.ascii	"fill_data_array\000"
 2156      5F646174 
 2156      615F6172 
 2156      72617900 
 2157              	.LASF35:
 2158 002f 656C6277 		.ascii	"elbw_init\000"
 2158      5F696E69 
 2158      7400
 2159              	.LASF2:
 2160 0039 73686F72 		.ascii	"short int\000"
 2160      7420696E 
 2160      7400
 2161              	.LASF30:
 2162 0043 726F7461 		.ascii	"rotate_start\000"
 2162      74655F73 
 2162      74617274 
 2162      00
 2163              	.LASF16:
 2164 0050 73697A65 		.ascii	"sizetype\000"
 2164      74797065 
 2164      00
 2165              	.LASF41:
 2166 0059 42415F65 		.ascii	"BA_execute\000"
 2166      78656375 
 2166      746500
 2167              	.LASF28:
 2168 0064 77726973 		.ascii	"wristRotate_states\000"
 2168      74526F74 
 2168      6174655F 
 2168      73746174 
 2168      657300
 2169              	.LASF59:
 2170 0077 77697A6E 		.ascii	"wiznet\000"
 2170      657400
 2171              	.LASF6:
 2172 007e 6C6F6E67 		.ascii	"long long int\000"
 2172      206C6F6E 
 2172      6720696E 
 2172      7400
 2173              	.LASF40:
 2174 008c 42415F69 		.ascii	"BA_init\000"
 2174      6E697400 
 2175              	.LASF73:
 2176 0094 62617365 		.ascii	"baseAzimuth_state\000"
 2176      417A696D 
 2176      7574685F 
 2176      73746174 
 2176      6500
 2177              	.LASF70:
 2178 00a6 77726973 		.ascii	"wristTilt_state\000"
 2178      7454696C 
 2178      745F7374 
 2178      61746500 
 2179              	.LASF51:
 2180 00b6 656C626F 		.ascii	"elbow\000"
 2180      7700
 2181              	.LASF10:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 49


 2182 00bc 75696E74 		.ascii	"uint16\000"
 2182      313600
 2183              	.LASF63:
 2184 00c3 656C6277 		.ascii	"elbw_arr_cspot\000"
 2184      5F617272 
 2184      5F637370 
 2184      6F7400
 2185              	.LASF46:
 2186 00d2 77726973 		.ascii	"wristRotate\000"
 2186      74526F74 
 2186      61746500 
 2187              	.LASF12:
 2188 00de 696E7431 		.ascii	"int16\000"
 2188      3600
 2189              	.LASF29:
 2190 00e4 726F7461 		.ascii	"rotate_init\000"
 2190      74655F69 
 2190      6E697400 
 2191              	.LASF68:
 2192 00f0 74696D65 		.ascii	"timerFlag\000"
 2192      72466C61 
 2192      6700
 2193              	.LASF69:
 2194 00fa 73686C64 		.ascii	"shldr_state\000"
 2194      725F7374 
 2194      61746500 
 2195              	.LASF42:
 2196 0106 42415F77 		.ascii	"BA_wait\000"
 2196      61697400 
 2197              	.LASF0:
 2198 010e 7369676E 		.ascii	"signed char\000"
 2198      65642063 
 2198      68617200 
 2199              	.LASF62:
 2200 011a 74657374 		.ascii	"test_array\000"
 2200      5F617272 
 2200      617900
 2201              	.LASF13:
 2202 0125 666C6F61 		.ascii	"float\000"
 2202      7400
 2203              	.LASF34:
 2204 012b 656C6277 		.ascii	"elbw_start\000"
 2204      5F737461 
 2204      727400
 2205              	.LASF53:
 2206 0136 62617365 		.ascii	"baseAzimuth\000"
 2206      417A696D 
 2206      75746800 
 2207              	.LASF45:
 2208 0142 77726973 		.ascii	"wristTilt\000"
 2208      7454696C 
 2208      7400
 2209              	.LASF31:
 2210 014c 726F7461 		.ascii	"rotate_control\000"
 2210      74655F63 
 2210      6F6E7472 
 2210      6F6C00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 50


 2211              	.LASF4:
 2212 015b 6C6F6E67 		.ascii	"long int\000"
 2212      20696E74 
 2212      00
 2213              	.LASF38:
 2214 0164 62617365 		.ascii	"baseAzimuth_states\000"
 2214      417A696D 
 2214      7574685F 
 2214      73746174 
 2214      657300
 2215              	.LASF22:
 2216 0177 73686C64 		.ascii	"shldr_states\000"
 2216      725F7374 
 2216      61746573 
 2216      00
 2217              	.LASF61:
 2218 0184 66696E5F 		.ascii	"fin_exec\000"
 2218      65786563 
 2218      00
 2219              	.LASF65:
 2220 018d 42415F61 		.ascii	"BA_arr_cspot\000"
 2220      72725F63 
 2220      73706F74 
 2220      00
 2221              	.LASF24:
 2222 019a 74696C74 		.ascii	"tilt_init\000"
 2222      5F696E69 
 2222      7400
 2223              	.LASF9:
 2224 01a4 75696E74 		.ascii	"uint8\000"
 2224      3800
 2225              	.LASF18:
 2226 01aa 73686C64 		.ascii	"shldr_start\000"
 2226      725F7374 
 2226      61727400 
 2227              	.LASF75:
 2228 01b6 2E5C6D61 		.ascii	".\\main.c\000"
 2228      696E2E63 
 2228      00
 2229              	.LASF47:
 2230 01bf 73656E64 		.ascii	"send_feedback\000"
 2230      5F666565 
 2230      64626163 
 2230      6B00
 2231              	.LASF1:
 2232 01cd 756E7369 		.ascii	"unsigned char\000"
 2232      676E6564 
 2232      20636861 
 2232      7200
 2233              	.LASF43:
 2234 01db 6973725F 		.ascii	"isr_var\000"
 2234      76617200 
 2235              	.LASF56:
 2236 01e3 636F756E 		.ascii	"counter\000"
 2236      74657200 
 2237              	.LASF57:
 2238 01eb 72616E64 		.ascii	"random_number\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 51


 2238      6F6D5F6E 
 2238      756D6265 
 2238      7200
 2239              	.LASF27:
 2240 01f9 74696C74 		.ascii	"tilt_feedback\000"
 2240      5F666565 
 2240      64626163 
 2240      6B00
 2241              	.LASF20:
 2242 0207 73686C64 		.ascii	"shldr_fdbk\000"
 2242      725F6664 
 2242      626B00
 2243              	.LASF49:
 2244 0212 6E756D5F 		.ascii	"num_items\000"
 2244      6974656D 
 2244      7300
 2245              	.LASF67:
 2246 021c 66656564 		.ascii	"feedback_count\000"
 2246      6261636B 
 2246      5F636F75 
 2246      6E7400
 2247              	.LASF7:
 2248 022b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2248      206C6F6E 
 2248      6720756E 
 2248      7369676E 
 2248      65642069 
 2249              	.LASF8:
 2250 0242 756E7369 		.ascii	"unsigned int\000"
 2250      676E6564 
 2250      20696E74 
 2250      00
 2251              	.LASF5:
 2252 024f 6C6F6E67 		.ascii	"long unsigned int\000"
 2252      20756E73 
 2252      69676E65 
 2252      6420696E 
 2252      7400
 2253              	.LASF3:
 2254 0261 73686F72 		.ascii	"short unsigned int\000"
 2254      7420756E 
 2254      7369676E 
 2254      65642069 
 2254      6E7400
 2255              	.LASF23:
 2256 0274 77726973 		.ascii	"wristTilt_states\000"
 2256      7454696C 
 2256      745F7374 
 2256      61746573 
 2256      00
 2257              	.LASF33:
 2258 0285 656C626F 		.ascii	"elbow_states\000"
 2258      775F7374 
 2258      61746573 
 2258      00
 2259              	.LASF15:
 2260 0292 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 52


 2260      00
 2261              	.LASF76:
 2262 0297 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 2262      73657273 
 2262      5C53616D 
 2262      75656C5C 
 2262      446F6375 
 2263 02c5 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 2263      5C61726D 
 2263      5F636F6E 
 2263      74726F6C 
 2263      6C65725F 
 2264 02f5 00       		.ascii	"\000"
 2265              	.LASF55:
 2266 02f6 6D61696E 		.ascii	"main\000"
 2266      00
 2267              	.LASF64:
 2268 02fb 656C626F 		.ascii	"elbow_array\000"
 2268      775F6172 
 2268      72617900 
 2269              	.LASF66:
 2270 0307 62617365 		.ascii	"baseAz_array\000"
 2270      417A5F61 
 2270      72726179 
 2270      00
 2271              	.LASF44:
 2272 0314 73686F75 		.ascii	"shoulder\000"
 2272      6C646572 
 2272      00
 2273              	.LASF11:
 2274 031d 75696E74 		.ascii	"uint32\000"
 2274      333200
 2275              	.LASF21:
 2276 0324 73686C64 		.ascii	"shldr_exe\000"
 2276      725F6578 
 2276      6500
 2277              	.LASF26:
 2278 032e 74696C74 		.ascii	"tilt_control\000"
 2278      5F636F6E 
 2278      74726F6C 
 2278      00
 2279              	.LASF14:
 2280 033b 646F7562 		.ascii	"double\000"
 2280      6C6500
 2281              	.LASF17:
 2282 0342 74696D65 		.ascii	"time_t\000"
 2282      5F7400
 2283              	.LASF48:
 2284 0349 61727261 		.ascii	"array\000"
 2284      7900
 2285              	.LASF71:
 2286 034f 77726973 		.ascii	"wristRotate_state\000"
 2286      74526F74 
 2286      6174655F 
 2286      73746174 
 2286      6500
 2287              	.LASF72:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccfHQNci.s 			page 53


 2288 0361 656C626F 		.ascii	"elbow_state\000"
 2288      775F7374 
 2288      61746500 
 2289              	.LASF54:
 2290 036d 74696D65 		.ascii	"timer_isr\000"
 2290      725F6973 
 2290      7200
 2291              	.LASF60:
 2292 0377 6E65775F 		.ascii	"new_pack\000"
 2292      7061636B 
 2292      00
 2293              	.LASF74:
 2294 0380 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2294      4320342E 
 2294      382E3420 
 2294      32303134 
 2294      30353236 
 2295 03b3 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2295      20726576 
 2295      6973696F 
 2295      6E203231 
 2295      31333538 
 2296 03e6 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2296      74643D67 
 2296      6E753939 
 2296      202D6666 
 2296      756E6374 
 2297              	.LASF37:
 2298 0407 656C6277 		.ascii	"elbw_wait\000"
 2298      5F776169 
 2298      7400
 2299              	.LASF77:
 2300 0411 61766572 		.ascii	"average\000"
 2300      61676500 
 2301              	.LASF58:
 2302 0419 64617461 		.ascii	"data_array\000"
 2302      5F617272 
 2302      617900
 2303              	.LASF52:
 2304 0424 636F6D6D 		.ascii	"command\000"
 2304      616E6400 
 2305              	.LASF36:
 2306 042c 656C6277 		.ascii	"elbw_execute\000"
 2306      5F657865 
 2306      63757465 
 2306      00
 2307              	.LASF32:
 2308 0439 726F7461 		.ascii	"rotate_feedback\000"
 2308      74655F66 
 2308      65656462 
 2308      61636B00 
 2309              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	feedback_array,14,4
  44              		.comm	wiznet,1,1
  45              		.comm	test_array,22,4
  46              		.global	WT_FLAG
  47              		.bss
  48              		.type	WT_FLAG, %object
  49              		.size	WT_FLAG, 1
  50              	WT_FLAG:
  51 0000 00       		.space	1
  52              		.global	WR_FLAG
  53              		.type	WR_FLAG, %object
  54              		.size	WR_FLAG, 1
  55              	WR_FLAG:
  56 0001 00       		.space	1
  57              		.global	ELBOW_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 2


  58              		.type	ELBOW_FLAG, %object
  59              		.size	ELBOW_FLAG, 1
  60              	ELBOW_FLAG:
  61 0002 00       		.space	1
  62              		.global	SHOULDER_FLAG
  63              		.type	SHOULDER_FLAG, %object
  64              		.size	SHOULDER_FLAG, 1
  65              	SHOULDER_FLAG:
  66 0003 00       		.space	1
  67              		.global	BA_FLAG
  68              		.type	BA_FLAG, %object
  69              		.size	BA_FLAG, 1
  70              	BA_FLAG:
  71 0004 00       		.space	1
  72              		.global	EFFECTOR_FLAG
  73              		.type	EFFECTOR_FLAG, %object
  74              		.size	EFFECTOR_FLAG, 1
  75              	EFFECTOR_FLAG:
  76 0005 00       		.space	1
  77              		.global	ARD_FLAG
  78              		.type	ARD_FLAG, %object
  79              		.size	ARD_FLAG, 1
  80              	ARD_FLAG:
  81 0006 00       		.space	1
  82              		.global	dropped_packets
  83 0007 00       		.align	1
  84              		.type	dropped_packets, %object
  85              		.size	dropped_packets, 2
  86              	dropped_packets:
  87 0008 0000     		.space	2
  88              		.global	fail_safe_errors
  89              		.align	1
  90              		.type	fail_safe_errors, %object
  91              		.size	fail_safe_errors, 2
  92              	fail_safe_errors:
  93 000a 0000     		.space	2
  94              		.global	shldr_errors
  95              		.align	1
  96              		.type	shldr_errors, %object
  97              		.size	shldr_errors, 2
  98              	shldr_errors:
  99 000c 0000     		.space	2
 100              		.global	elbw_errors
 101              		.align	1
 102              		.type	elbw_errors, %object
 103              		.size	elbw_errors, 2
 104              	elbw_errors:
 105 000e 0000     		.space	2
 106              		.global	BA_errors
 107              		.align	1
 108              		.type	BA_errors, %object
 109              		.size	BA_errors, 2
 110              	BA_errors:
 111 0010 0000     		.space	2
 112              		.global	WT_errors
 113              		.align	1
 114              		.type	WT_errors, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 3


 115              		.size	WT_errors, 2
 116              	WT_errors:
 117 0012 0000     		.space	2
 118              		.global	WR_errors
 119              		.align	1
 120              		.type	WR_errors, %object
 121              		.size	WR_errors, 2
 122              	WR_errors:
 123 0014 0000     		.space	2
 124              		.global	eff_errors
 125              		.align	1
 126              		.type	eff_errors, %object
 127              		.size	eff_errors, 2
 128              	eff_errors:
 129 0016 0000     		.space	2
 130              		.comm	timerFlag,1,1
 131              		.section	.text.timer_isr,"ax",%progbits
 132              		.align	2
 133              		.global	timer_isr
 134              		.code	16
 135              		.thumb_func
 136              		.type	timer_isr, %function
 137              	timer_isr:
 138              	.LFB34:
 139              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 140              		.loc 1 11 0
 141              		.cfi_startproc
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 82B0     		sub	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 150              		.loc 1 12 0
 151 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 152 000a 031C     		mov	r3, r0
 153 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 154              		.loc 1 13 0
 155 000e 054B     		ldr	r3, .L2
 156 0010 0122     		mov	r2, #1
 157 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 4


 158              		.loc 1 14 0
 159 0014 7B68     		ldr	r3, [r7, #4]
 160 0016 181C     		mov	r0, r3
 161 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 162              		.loc 1 15 0
 163 001c BD46     		mov	sp, r7
 164 001e 02B0     		add	sp, sp, #8
 165              		@ sp needed
 166 0020 80BD     		pop	{r7, pc}
 167              	.L3:
 168 0022 C046     		.align	2
 169              	.L2:
 170 0024 00000000 		.word	timerFlag
 171              		.cfi_endproc
 172              	.LFE34:
 173              		.size	timer_isr, .-timer_isr
 174              		.global	__aeabi_idiv
 175              		.section	.text.CalibrationElbow,"ax",%progbits
 176              		.align	2
 177              		.global	CalibrationElbow
 178              		.code	16
 179              		.thumb_func
 180              		.type	CalibrationElbow, %function
 181              	CalibrationElbow:
 182              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  19:.\main.c      **** {
 183              		.loc 1 19 0
 184              		.cfi_startproc
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 86B0     		sub	sp, sp, #24
 190              		.cfi_def_cfa_offset 32
 191 0004 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 193 0006 021C     		mov	r2, r0
 194 0008 BB1D     		add	r3, r7, #6
 195 000a 1A80     		strh	r2, [r3]
  20:.\main.c      ****     uint8 	CYCLES = 3;
 196              		.loc 1 20 0
 197 000c 3B1C     		mov	r3, r7
 198 000e 1133     		add	r3, r3, #17
 199 0010 0322     		mov	r2, #3
 200 0012 1A70     		strb	r2, [r3]
  21:.\main.c      **** 	uint8 	i;
  22:.\main.c      **** 	uint16 	bound;
  23:.\main.c      **** 	uint16 	average;
  24:.\main.c      ****     uint32  channel;
  25:.\main.c      ****     int16   difference;
  26:.\main.c      ****  
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 201              		.loc 1 27 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 5


 202 0014 3B1C     		mov	r3, r7
 203 0016 1733     		add	r3, r3, #23
 204 0018 0022     		mov	r2, #0
 205 001a 1A70     		strb	r2, [r3]
 206 001c 3B1C     		mov	r3, r7
 207 001e 1233     		add	r3, r3, #18
 208 0020 0022     		mov	r2, #0
 209 0022 1A80     		strh	r2, [r3]
 210 0024 70E0     		b	.L5
 211              	.L13:
  28:.\main.c      **** 	{
  29:.\main.c      ****         // Test stop switch
  30:.\main.c      ****         LED_Write(0);
 212              		.loc 1 30 0
 213 0026 0020     		mov	r0, #0
 214 0028 FFF7FEFF 		bl	LED_Write
  31:.\main.c      ****         
  32:.\main.c      ****         // Move till stop switch presses down
  33:.\main.c      ****         if(velocity < 1500)
 215              		.loc 1 33 0
 216 002c BB1D     		add	r3, r7, #6
 217 002e 1A88     		ldrh	r2, [r3]
 218 0030 554B     		ldr	r3, .L18
 219 0032 9A42     		cmp	r2, r3
 220 0034 0BD8     		bhi	.L6
  34:.\main.c      ****         {
  35:.\main.c      ****             while(stop_elb_dn_Read())
 221              		.loc 1 35 0
 222 0036 04E0     		b	.L7
 223              	.L8:
  36:.\main.c      ****             {
  37:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 224              		.loc 1 37 0
 225 0038 BB1D     		add	r3, r7, #6
 226 003a 1B88     		ldrh	r3, [r3]
 227 003c 181C     		mov	r0, r3
 228 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 229              	.L7:
  35:.\main.c      ****             while(stop_elb_dn_Read())
 230              		.loc 1 35 0 discriminator 1
 231 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 232 0046 031C     		mov	r3, r0
 233 0048 002B     		cmp	r3, #0
 234 004a F5D1     		bne	.L8
 235 004c 15E0     		b	.L9
 236              	.L6:
  38:.\main.c      ****             }
  39:.\main.c      ****         }
  40:.\main.c      ****         else if(velocity > 1500)
 237              		.loc 1 40 0
 238 004e BB1D     		add	r3, r7, #6
 239 0050 1A88     		ldrh	r2, [r3]
 240 0052 4E4B     		ldr	r3, .L18+4
 241 0054 9A42     		cmp	r2, r3
 242 0056 0BD9     		bls	.L10
  41:.\main.c      ****         {
  42:.\main.c      ****             while(stop_elb_up_Read())
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 6


 243              		.loc 1 42 0
 244 0058 04E0     		b	.L11
 245              	.L12:
  43:.\main.c      ****             {
  44:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 246              		.loc 1 44 0
 247 005a BB1D     		add	r3, r7, #6
 248 005c 1B88     		ldrh	r3, [r3]
 249 005e 181C     		mov	r0, r3
 250 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 251              	.L11:
  42:.\main.c      ****             while(stop_elb_up_Read())
 252              		.loc 1 42 0 discriminator 1
 253 0064 FFF7FEFF 		bl	stop_elb_up_Read
 254 0068 031C     		mov	r3, r0
 255 006a 002B     		cmp	r3, #0
 256 006c F5D1     		bne	.L12
 257 006e 04E0     		b	.L9
 258              	.L10:
  45:.\main.c      ****             }
  46:.\main.c      ****         }
  47:.\main.c      ****         else
  48:.\main.c      ****         {
  49:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 259              		.loc 1 49 0
 260 0070 BB1D     		add	r3, r7, #6
 261 0072 1B88     		ldrh	r3, [r3]
 262 0074 181C     		mov	r0, r3
 263 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 264              	.L9:
  50:.\main.c      ****         }
  51:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 265              		.loc 1 51 0
 266 007a 444B     		ldr	r3, .L18+4
 267 007c 181C     		mov	r0, r3
 268 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  52:.\main.c      ****         LED_Write(1);
 269              		.loc 1 52 0
 270 0082 0120     		mov	r0, #1
 271 0084 FFF7FEFF 		bl	LED_Write
  53:.\main.c      ****         CyDelay(1000);
 272              		.loc 1 53 0
 273 0088 FA23     		mov	r3, #250
 274 008a 9B00     		lsl	r3, r3, #2
 275 008c 181C     		mov	r0, r3
 276 008e FFF7FEFF 		bl	CyDelay
  54:.\main.c      ****         
  55:.\main.c      ****         channel = ELBOW_POT;
 277              		.loc 1 55 0
 278 0092 0123     		mov	r3, #1
 279 0094 FB60     		str	r3, [r7, #12]
  56:.\main.c      ****         
  57:.\main.c      ****         // Add the value to average
  58:.\main.c      ****         average+=potFeedback(channel);
 280              		.loc 1 58 0
 281 0096 FB68     		ldr	r3, [r7, #12]
 282 0098 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 7


 283 009a FFF7FEFF 		bl	potFeedback
 284 009e 031C     		mov	r3, r0
 285 00a0 191C     		mov	r1, r3
 286 00a2 3B1C     		mov	r3, r7
 287 00a4 1233     		add	r3, r3, #18
 288 00a6 3A1C     		mov	r2, r7
 289 00a8 1232     		add	r2, r2, #18
 290 00aa 1288     		ldrh	r2, [r2]
 291 00ac 8A18     		add	r2, r1, r2
 292 00ae 1A80     		strh	r2, [r3]
  59:.\main.c      ****  
  60:.\main.c      **** 		// Move away for 2 seconds
  61:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  62:.\main.c      ****         difference = 1500-velocity;
 293              		.loc 1 62 0
 294 00b0 BB1D     		add	r3, r7, #6
 295 00b2 1B88     		ldrh	r3, [r3]
 296 00b4 354A     		ldr	r2, .L18+4
 297 00b6 D31A     		sub	r3, r2, r3
 298 00b8 9AB2     		uxth	r2, r3
 299 00ba 3B1C     		mov	r3, r7
 300 00bc 0A33     		add	r3, r3, #10
 301 00be 1A80     		strh	r2, [r3]
  63:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 302              		.loc 1 63 0
 303 00c0 3B1C     		mov	r3, r7
 304 00c2 0A33     		add	r3, r3, #10
 305 00c4 1B88     		ldrh	r3, [r3]
 306 00c6 314A     		ldr	r2, .L18+4
 307 00c8 9B18     		add	r3, r3, r2
 308 00ca 9BB2     		uxth	r3, r3
 309 00cc 181C     		mov	r0, r3
 310 00ce FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  64:.\main.c      ****         LED_Write(0); 
 311              		.loc 1 64 0
 312 00d2 0020     		mov	r0, #0
 313 00d4 FFF7FEFF 		bl	LED_Write
  65:.\main.c      ****         CyDelay(1000);
 314              		.loc 1 65 0
 315 00d8 FA23     		mov	r3, #250
 316 00da 9B00     		lsl	r3, r3, #2
 317 00dc 181C     		mov	r0, r3
 318 00de FFF7FEFF 		bl	CyDelay
  66:.\main.c      ****  
  67:.\main.c      **** 		// Stop moving
  68:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 319              		.loc 1 68 0
 320 00e2 2A4B     		ldr	r3, .L18+4
 321 00e4 181C     		mov	r0, r3
 322 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  69:.\main.c      ****         LED_Write(1); 
 323              		.loc 1 69 0
 324 00ea 0120     		mov	r0, #1
 325 00ec FFF7FEFF 		bl	LED_Write
  70:.\main.c      ****         CyDelay(1000);
 326              		.loc 1 70 0
 327 00f0 FA23     		mov	r3, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 8


 328 00f2 9B00     		lsl	r3, r3, #2
 329 00f4 181C     		mov	r0, r3
 330 00f6 FFF7FEFF 		bl	CyDelay
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 331              		.loc 1 27 0
 332 00fa 3B1C     		mov	r3, r7
 333 00fc 1733     		add	r3, r3, #23
 334 00fe 1A78     		ldrb	r2, [r3]
 335 0100 3B1C     		mov	r3, r7
 336 0102 1733     		add	r3, r3, #23
 337 0104 0132     		add	r2, r2, #1
 338 0106 1A70     		strb	r2, [r3]
 339              	.L5:
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 340              		.loc 1 27 0 is_stmt 0 discriminator 1
 341 0108 3A1C     		mov	r2, r7
 342 010a 1732     		add	r2, r2, #23
 343 010c 3B1C     		mov	r3, r7
 344 010e 1133     		add	r3, r3, #17
 345 0110 1278     		ldrb	r2, [r2]
 346 0112 1B78     		ldrb	r3, [r3]
 347 0114 9A42     		cmp	r2, r3
 348 0116 00D2     		bcs	.LCB191
 349 0118 85E7     		b	.L13	@long jump
 350              	.LCB191:
  71:.\main.c      **** 	}
  72:.\main.c      ****     
  73:.\main.c      ****     if(velocity > 1500)
 351              		.loc 1 73 0 is_stmt 1
 352 011a BB1D     		add	r3, r7, #6
 353 011c 1A88     		ldrh	r2, [r3]
 354 011e 1B4B     		ldr	r3, .L18+4
 355 0120 9A42     		cmp	r2, r3
 356 0122 10D9     		bls	.L14
  74:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 357              		.loc 1 74 0
 358 0124 3B1C     		mov	r3, r7
 359 0126 1233     		add	r3, r3, #18
 360 0128 1A88     		ldrh	r2, [r3]
 361 012a 3B1C     		mov	r3, r7
 362 012c 1133     		add	r3, r3, #17
 363 012e 1B78     		ldrb	r3, [r3]
 364 0130 101C     		mov	r0, r2
 365 0132 191C     		mov	r1, r3
 366 0134 FFF7FEFF 		bl	__aeabi_idiv
 367 0138 031C     		mov	r3, r0
 368 013a 9AB2     		uxth	r2, r3
 369 013c 3B1C     		mov	r3, r7
 370 013e 1433     		add	r3, r3, #20
 371 0140 143A     		sub	r2, r2, #20
 372 0142 1A80     		strh	r2, [r3]
 373 0144 18E0     		b	.L15
 374              	.L14:
  75:.\main.c      ****     else if(velocity < 1500)
 375              		.loc 1 75 0
 376 0146 BB1D     		add	r3, r7, #6
 377 0148 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 9


 378 014a 0F4B     		ldr	r3, .L18
 379 014c 9A42     		cmp	r2, r3
 380 014e 10D8     		bhi	.L16
  76:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 381              		.loc 1 76 0
 382 0150 3B1C     		mov	r3, r7
 383 0152 1233     		add	r3, r3, #18
 384 0154 1A88     		ldrh	r2, [r3]
 385 0156 3B1C     		mov	r3, r7
 386 0158 1133     		add	r3, r3, #17
 387 015a 1B78     		ldrb	r3, [r3]
 388 015c 101C     		mov	r0, r2
 389 015e 191C     		mov	r1, r3
 390 0160 FFF7FEFF 		bl	__aeabi_idiv
 391 0164 031C     		mov	r3, r0
 392 0166 9AB2     		uxth	r2, r3
 393 0168 3B1C     		mov	r3, r7
 394 016a 1433     		add	r3, r3, #20
 395 016c 1432     		add	r2, r2, #20
 396 016e 1A80     		strh	r2, [r3]
 397 0170 02E0     		b	.L15
 398              	.L16:
  77:.\main.c      ****     else // velocity == 1500
  78:.\main.c      ****         LED_Write(1); 
 399              		.loc 1 78 0
 400 0172 0120     		mov	r0, #1
 401 0174 FFF7FEFF 		bl	LED_Write
 402              	.L15:
  79:.\main.c      ****  
  80:.\main.c      **** 	return bound;
 403              		.loc 1 80 0
 404 0178 3B1C     		mov	r3, r7
 405 017a 1433     		add	r3, r3, #20
 406 017c 1B88     		ldrh	r3, [r3]
  81:.\main.c      **** }
 407              		.loc 1 81 0
 408 017e 181C     		mov	r0, r3
 409 0180 BD46     		mov	sp, r7
 410 0182 06B0     		add	sp, sp, #24
 411              		@ sp needed
 412 0184 80BD     		pop	{r7, pc}
 413              	.L19:
 414 0186 C046     		.align	2
 415              	.L18:
 416 0188 DB050000 		.word	1499
 417 018c DC050000 		.word	1500
 418              		.cfi_endproc
 419              	.LFE35:
 420              		.size	CalibrationElbow, .-CalibrationElbow
 421              		.section	.text.CalibrationShoulder,"ax",%progbits
 422              		.align	2
 423              		.global	CalibrationShoulder
 424              		.code	16
 425              		.thumb_func
 426              		.type	CalibrationShoulder, %function
 427              	CalibrationShoulder:
 428              	.LFB36:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 10


  82:.\main.c      **** 
  83:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
  84:.\main.c      **** {
 429              		.loc 1 84 0
 430              		.cfi_startproc
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 86B0     		sub	sp, sp, #24
 436              		.cfi_def_cfa_offset 32
 437 0004 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 439 0006 021C     		mov	r2, r0
 440 0008 BB1D     		add	r3, r7, #6
 441 000a 1A80     		strh	r2, [r3]
  85:.\main.c      **** 	uint8 	CYCLES = 3;
 442              		.loc 1 85 0
 443 000c 3B1C     		mov	r3, r7
 444 000e 1133     		add	r3, r3, #17
 445 0010 0322     		mov	r2, #3
 446 0012 1A70     		strb	r2, [r3]
  86:.\main.c      **** 	uint8 	i;
  87:.\main.c      **** 	uint16 	bound;
  88:.\main.c      **** 	uint16 	average;
  89:.\main.c      ****     uint32  channel;
  90:.\main.c      ****     int16 difference;
  91:.\main.c      ****  
  92:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 447              		.loc 1 92 0
 448 0014 3B1C     		mov	r3, r7
 449 0016 1733     		add	r3, r3, #23
 450 0018 0022     		mov	r2, #0
 451 001a 1A70     		strb	r2, [r3]
 452 001c 3B1C     		mov	r3, r7
 453 001e 1233     		add	r3, r3, #18
 454 0020 0022     		mov	r2, #0
 455 0022 1A80     		strh	r2, [r3]
 456 0024 70E0     		b	.L21
 457              	.L29:
  93:.\main.c      **** 	{
  94:.\main.c      ****         LED_Write(0);
 458              		.loc 1 94 0
 459 0026 0020     		mov	r0, #0
 460 0028 FFF7FEFF 		bl	LED_Write
  95:.\main.c      **** 		// Move till stop switch presses down
  96:.\main.c      ****         if(velocity < 1500)
 461              		.loc 1 96 0
 462 002c BB1D     		add	r3, r7, #6
 463 002e 1A88     		ldrh	r2, [r3]
 464 0030 554B     		ldr	r3, .L34
 465 0032 9A42     		cmp	r2, r3
 466 0034 0BD8     		bhi	.L22
  97:.\main.c      ****         {
  98:.\main.c      ****             while(stop_shdr_dn_Read())
 467              		.loc 1 98 0
 468 0036 04E0     		b	.L23
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 11


 469              	.L24:
  99:.\main.c      ****             {
 100:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 470              		.loc 1 100 0
 471 0038 BB1D     		add	r3, r7, #6
 472 003a 1B88     		ldrh	r3, [r3]
 473 003c 181C     		mov	r0, r3
 474 003e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 475              	.L23:
  98:.\main.c      ****             while(stop_shdr_dn_Read())
 476              		.loc 1 98 0 discriminator 1
 477 0042 FFF7FEFF 		bl	stop_shdr_dn_Read
 478 0046 031C     		mov	r3, r0
 479 0048 002B     		cmp	r3, #0
 480 004a F5D1     		bne	.L24
 481 004c 15E0     		b	.L25
 482              	.L22:
 101:.\main.c      ****             }
 102:.\main.c      ****         }
 103:.\main.c      ****         else if(velocity > 1500)
 483              		.loc 1 103 0
 484 004e BB1D     		add	r3, r7, #6
 485 0050 1A88     		ldrh	r2, [r3]
 486 0052 4E4B     		ldr	r3, .L34+4
 487 0054 9A42     		cmp	r2, r3
 488 0056 0BD9     		bls	.L26
 104:.\main.c      ****         {
 105:.\main.c      ****             while(stop_shdr_up_Read())
 489              		.loc 1 105 0
 490 0058 04E0     		b	.L27
 491              	.L28:
 106:.\main.c      ****             {
 107:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 492              		.loc 1 107 0
 493 005a BB1D     		add	r3, r7, #6
 494 005c 1B88     		ldrh	r3, [r3]
 495 005e 181C     		mov	r0, r3
 496 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 497              	.L27:
 105:.\main.c      ****             while(stop_shdr_up_Read())
 498              		.loc 1 105 0 discriminator 1
 499 0064 FFF7FEFF 		bl	stop_shdr_up_Read
 500 0068 031C     		mov	r3, r0
 501 006a 002B     		cmp	r3, #0
 502 006c F5D1     		bne	.L28
 503 006e 04E0     		b	.L25
 504              	.L26:
 108:.\main.c      ****             }
 109:.\main.c      ****         }
 110:.\main.c      ****         else
 111:.\main.c      ****         {
 112:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 505              		.loc 1 112 0
 506 0070 BB1D     		add	r3, r7, #6
 507 0072 1B88     		ldrh	r3, [r3]
 508 0074 181C     		mov	r0, r3
 509 0076 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 12


 510              	.L25:
 113:.\main.c      ****         }
 114:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 511              		.loc 1 114 0
 512 007a 444B     		ldr	r3, .L34+4
 513 007c 181C     		mov	r0, r3
 514 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 115:.\main.c      ****         LED_Write(1); 
 515              		.loc 1 115 0
 516 0082 0120     		mov	r0, #1
 517 0084 FFF7FEFF 		bl	LED_Write
 116:.\main.c      ****         CyDelay(1000);
 518              		.loc 1 116 0
 519 0088 FA23     		mov	r3, #250
 520 008a 9B00     		lsl	r3, r3, #2
 521 008c 181C     		mov	r0, r3
 522 008e FFF7FEFF 		bl	CyDelay
 117:.\main.c      ****         
 118:.\main.c      ****         channel = SHOULDER_POT;
 523              		.loc 1 118 0
 524 0092 0023     		mov	r3, #0
 525 0094 FB60     		str	r3, [r7, #12]
 119:.\main.c      ****  
 120:.\main.c      **** 		// Add the value to average
 121:.\main.c      ****         average+=potFeedback(channel);
 526              		.loc 1 121 0
 527 0096 FB68     		ldr	r3, [r7, #12]
 528 0098 181C     		mov	r0, r3
 529 009a FFF7FEFF 		bl	potFeedback
 530 009e 031C     		mov	r3, r0
 531 00a0 191C     		mov	r1, r3
 532 00a2 3B1C     		mov	r3, r7
 533 00a4 1233     		add	r3, r3, #18
 534 00a6 3A1C     		mov	r2, r7
 535 00a8 1232     		add	r2, r2, #18
 536 00aa 1288     		ldrh	r2, [r2]
 537 00ac 8A18     		add	r2, r1, r2
 538 00ae 1A80     		strh	r2, [r3]
 122:.\main.c      ****  
 123:.\main.c      **** 		// Move away for 2 seconds
 124:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 125:.\main.c      ****         difference = 1500-velocity;
 539              		.loc 1 125 0
 540 00b0 BB1D     		add	r3, r7, #6
 541 00b2 1B88     		ldrh	r3, [r3]
 542 00b4 354A     		ldr	r2, .L34+4
 543 00b6 D31A     		sub	r3, r2, r3
 544 00b8 9AB2     		uxth	r2, r3
 545 00ba 3B1C     		mov	r3, r7
 546 00bc 0A33     		add	r3, r3, #10
 547 00be 1A80     		strh	r2, [r3]
 126:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 548              		.loc 1 126 0
 549 00c0 3B1C     		mov	r3, r7
 550 00c2 0A33     		add	r3, r3, #10
 551 00c4 1B88     		ldrh	r3, [r3]
 552 00c6 314A     		ldr	r2, .L34+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 13


 553 00c8 9B18     		add	r3, r3, r2
 554 00ca 9BB2     		uxth	r3, r3
 555 00cc 181C     		mov	r0, r3
 556 00ce FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 127:.\main.c      ****         LED_Write(0); 
 557              		.loc 1 127 0
 558 00d2 0020     		mov	r0, #0
 559 00d4 FFF7FEFF 		bl	LED_Write
 128:.\main.c      ****         CyDelay(1000);
 560              		.loc 1 128 0
 561 00d8 FA23     		mov	r3, #250
 562 00da 9B00     		lsl	r3, r3, #2
 563 00dc 181C     		mov	r0, r3
 564 00de FFF7FEFF 		bl	CyDelay
 129:.\main.c      ****  
 130:.\main.c      **** 		// Stop moving
 131:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 565              		.loc 1 131 0
 566 00e2 2A4B     		ldr	r3, .L34+4
 567 00e4 181C     		mov	r0, r3
 568 00e6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 132:.\main.c      ****         LED_Write(1); 
 569              		.loc 1 132 0
 570 00ea 0120     		mov	r0, #1
 571 00ec FFF7FEFF 		bl	LED_Write
 133:.\main.c      ****         CyDelay(1000);
 572              		.loc 1 133 0
 573 00f0 FA23     		mov	r3, #250
 574 00f2 9B00     		lsl	r3, r3, #2
 575 00f4 181C     		mov	r0, r3
 576 00f6 FFF7FEFF 		bl	CyDelay
  92:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 577              		.loc 1 92 0
 578 00fa 3B1C     		mov	r3, r7
 579 00fc 1733     		add	r3, r3, #23
 580 00fe 1A78     		ldrb	r2, [r3]
 581 0100 3B1C     		mov	r3, r7
 582 0102 1733     		add	r3, r3, #23
 583 0104 0132     		add	r2, r2, #1
 584 0106 1A70     		strb	r2, [r3]
 585              	.L21:
  92:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 586              		.loc 1 92 0 is_stmt 0 discriminator 1
 587 0108 3A1C     		mov	r2, r7
 588 010a 1732     		add	r2, r2, #23
 589 010c 3B1C     		mov	r3, r7
 590 010e 1133     		add	r3, r3, #17
 591 0110 1278     		ldrb	r2, [r2]
 592 0112 1B78     		ldrb	r3, [r3]
 593 0114 9A42     		cmp	r2, r3
 594 0116 00D2     		bcs	.LCB420
 595 0118 85E7     		b	.L29	@long jump
 596              	.LCB420:
 134:.\main.c      **** 	}
 135:.\main.c      ****  
 136:.\main.c      **** 	if(velocity > 1500)
 597              		.loc 1 136 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 14


 598 011a BB1D     		add	r3, r7, #6
 599 011c 1A88     		ldrh	r2, [r3]
 600 011e 1B4B     		ldr	r3, .L34+4
 601 0120 9A42     		cmp	r2, r3
 602 0122 10D9     		bls	.L30
 137:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 603              		.loc 1 137 0
 604 0124 3B1C     		mov	r3, r7
 605 0126 1233     		add	r3, r3, #18
 606 0128 1A88     		ldrh	r2, [r3]
 607 012a 3B1C     		mov	r3, r7
 608 012c 1133     		add	r3, r3, #17
 609 012e 1B78     		ldrb	r3, [r3]
 610 0130 101C     		mov	r0, r2
 611 0132 191C     		mov	r1, r3
 612 0134 FFF7FEFF 		bl	__aeabi_idiv
 613 0138 031C     		mov	r3, r0
 614 013a 9AB2     		uxth	r2, r3
 615 013c 3B1C     		mov	r3, r7
 616 013e 1433     		add	r3, r3, #20
 617 0140 143A     		sub	r2, r2, #20
 618 0142 1A80     		strh	r2, [r3]
 619 0144 18E0     		b	.L31
 620              	.L30:
 138:.\main.c      ****     else if(velocity < 1500)
 621              		.loc 1 138 0
 622 0146 BB1D     		add	r3, r7, #6
 623 0148 1A88     		ldrh	r2, [r3]
 624 014a 0F4B     		ldr	r3, .L34
 625 014c 9A42     		cmp	r2, r3
 626 014e 10D8     		bhi	.L32
 139:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 627              		.loc 1 139 0
 628 0150 3B1C     		mov	r3, r7
 629 0152 1233     		add	r3, r3, #18
 630 0154 1A88     		ldrh	r2, [r3]
 631 0156 3B1C     		mov	r3, r7
 632 0158 1133     		add	r3, r3, #17
 633 015a 1B78     		ldrb	r3, [r3]
 634 015c 101C     		mov	r0, r2
 635 015e 191C     		mov	r1, r3
 636 0160 FFF7FEFF 		bl	__aeabi_idiv
 637 0164 031C     		mov	r3, r0
 638 0166 9AB2     		uxth	r2, r3
 639 0168 3B1C     		mov	r3, r7
 640 016a 1433     		add	r3, r3, #20
 641 016c 1432     		add	r2, r2, #20
 642 016e 1A80     		strh	r2, [r3]
 643 0170 02E0     		b	.L31
 644              	.L32:
 140:.\main.c      ****     else // velocity == 1500
 141:.\main.c      ****         LED_Write(1); 
 645              		.loc 1 141 0
 646 0172 0120     		mov	r0, #1
 647 0174 FFF7FEFF 		bl	LED_Write
 648              	.L31:
 142:.\main.c      ****  
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 15


 143:.\main.c      **** 	return bound;
 649              		.loc 1 143 0
 650 0178 3B1C     		mov	r3, r7
 651 017a 1433     		add	r3, r3, #20
 652 017c 1B88     		ldrh	r3, [r3]
 144:.\main.c      **** }
 653              		.loc 1 144 0
 654 017e 181C     		mov	r0, r3
 655 0180 BD46     		mov	sp, r7
 656 0182 06B0     		add	sp, sp, #24
 657              		@ sp needed
 658 0184 80BD     		pop	{r7, pc}
 659              	.L35:
 660 0186 C046     		.align	2
 661              	.L34:
 662 0188 DB050000 		.word	1499
 663 018c DC050000 		.word	1500
 664              		.cfi_endproc
 665              	.LFE36:
 666              		.size	CalibrationShoulder, .-CalibrationShoulder
 667              		.global	__aeabi_uidiv
 668              		.section	.text.average,"ax",%progbits
 669              		.align	2
 670              		.global	average
 671              		.code	16
 672              		.thumb_func
 673              		.type	average, %function
 674              	average:
 675              	.LFB37:
 145:.\main.c      **** 
 146:.\main.c      **** //Average function to be used in smoothing our input
 147:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 148:.\main.c      **** {
 676              		.loc 1 148 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 86B0     		sub	sp, sp, #24
 683              		.cfi_def_cfa_offset 32
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 687 0008 0A1C     		mov	r2, r1
 688 000a FB1C     		add	r3, r7, #3
 689 000c 1A70     		strb	r2, [r3]
 149:.\main.c      ****     uint8 i;
 150:.\main.c      ****     uint32 sum = 0;
 690              		.loc 1 150 0
 691 000e 0023     		mov	r3, #0
 692 0010 3B61     		str	r3, [r7, #16]
 151:.\main.c      ****     uint16 avg = 0;
 693              		.loc 1 151 0
 694 0012 3B1C     		mov	r3, r7
 695 0014 0E33     		add	r3, r3, #14
 696 0016 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 16


 697 0018 1A80     		strh	r2, [r3]
 152:.\main.c      ****     
 153:.\main.c      ****     for(i = 0; i < num_items; i++)
 698              		.loc 1 153 0
 699 001a 3B1C     		mov	r3, r7
 700 001c 1733     		add	r3, r3, #23
 701 001e 0022     		mov	r2, #0
 702 0020 1A70     		strb	r2, [r3]
 703 0022 10E0     		b	.L37
 704              	.L38:
 154:.\main.c      ****     {
 155:.\main.c      ****         sum += av_array[i];
 705              		.loc 1 155 0 discriminator 2
 706 0024 3B1C     		mov	r3, r7
 707 0026 1733     		add	r3, r3, #23
 708 0028 1B78     		ldrb	r3, [r3]
 709 002a 5B00     		lsl	r3, r3, #1
 710 002c 7A68     		ldr	r2, [r7, #4]
 711 002e D318     		add	r3, r2, r3
 712 0030 1B88     		ldrh	r3, [r3]
 713 0032 3A69     		ldr	r2, [r7, #16]
 714 0034 D318     		add	r3, r2, r3
 715 0036 3B61     		str	r3, [r7, #16]
 153:.\main.c      ****     for(i = 0; i < num_items; i++)
 716              		.loc 1 153 0 discriminator 2
 717 0038 3B1C     		mov	r3, r7
 718 003a 1733     		add	r3, r3, #23
 719 003c 1A78     		ldrb	r2, [r3]
 720 003e 3B1C     		mov	r3, r7
 721 0040 1733     		add	r3, r3, #23
 722 0042 0132     		add	r2, r2, #1
 723 0044 1A70     		strb	r2, [r3]
 724              	.L37:
 153:.\main.c      ****     for(i = 0; i < num_items; i++)
 725              		.loc 1 153 0 is_stmt 0 discriminator 1
 726 0046 3A1C     		mov	r2, r7
 727 0048 1732     		add	r2, r2, #23
 728 004a FB1C     		add	r3, r7, #3
 729 004c 1278     		ldrb	r2, [r2]
 730 004e 1B78     		ldrb	r3, [r3]
 731 0050 9A42     		cmp	r2, r3
 732 0052 E7D3     		bcc	.L38
 156:.\main.c      ****     }
 157:.\main.c      ****     
 158:.\main.c      ****     avg = sum/num_items;
 733              		.loc 1 158 0 is_stmt 1
 734 0054 FB1C     		add	r3, r7, #3
 735 0056 1B78     		ldrb	r3, [r3]
 736 0058 3869     		ldr	r0, [r7, #16]
 737 005a 191C     		mov	r1, r3
 738 005c FFF7FEFF 		bl	__aeabi_uidiv
 739 0060 031C     		mov	r3, r0
 740 0062 1A1C     		mov	r2, r3
 741 0064 3B1C     		mov	r3, r7
 742 0066 0E33     		add	r3, r3, #14
 743 0068 1A80     		strh	r2, [r3]
 159:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 17


 160:.\main.c      ****     return avg;
 744              		.loc 1 160 0
 745 006a 3B1C     		mov	r3, r7
 746 006c 0E33     		add	r3, r3, #14
 747 006e 1B88     		ldrh	r3, [r3]
 161:.\main.c      **** }
 748              		.loc 1 161 0
 749 0070 181C     		mov	r0, r3
 750 0072 BD46     		mov	sp, r7
 751 0074 06B0     		add	sp, sp, #24
 752              		@ sp needed
 753 0076 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE37:
 756              		.size	average, .-average
 757              		.section	.text.maintain_array,"ax",%progbits
 758              		.align	2
 759              		.global	maintain_array
 760              		.code	16
 761              		.thumb_func
 762              		.type	maintain_array, %function
 763              	maintain_array:
 764              	.LFB38:
 162:.\main.c      **** 
 163:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 164:.\main.c      **** {
 765              		.loc 1 164 0
 766              		.cfi_startproc
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 0A1C     		mov	r2, r1
 776 0008 FB1D     		add	r3, r7, #7
 777 000a 011C     		add	r1, r0, #0
 778 000c 1970     		strb	r1, [r3]
 779 000e BB1D     		add	r3, r7, #6
 780 0010 1A70     		strb	r2, [r3]
 165:.\main.c      ****     if(cpos < (SIZE - 1))
 781              		.loc 1 165 0
 782 0012 FB1D     		add	r3, r7, #7
 783 0014 1A78     		ldrb	r2, [r3]
 784 0016 BB1D     		add	r3, r7, #6
 785 0018 1B78     		ldrb	r3, [r3]
 786 001a 013B     		sub	r3, r3, #1
 787 001c 9A42     		cmp	r2, r3
 788 001e 05DA     		bge	.L41
 166:.\main.c      ****     {
 167:.\main.c      ****         cpos++;
 789              		.loc 1 167 0
 790 0020 FB1D     		add	r3, r7, #7
 791 0022 1A78     		ldrb	r2, [r3]
 792 0024 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 18


 793 0026 0132     		add	r2, r2, #1
 794 0028 1A70     		strb	r2, [r3]
 795 002a 02E0     		b	.L42
 796              	.L41:
 168:.\main.c      ****     }
 169:.\main.c      ****     else
 170:.\main.c      ****     {
 171:.\main.c      ****         cpos = 0;
 797              		.loc 1 171 0
 798 002c FB1D     		add	r3, r7, #7
 799 002e 0022     		mov	r2, #0
 800 0030 1A70     		strb	r2, [r3]
 801              	.L42:
 172:.\main.c      ****     }
 173:.\main.c      ****     return cpos;
 802              		.loc 1 173 0
 803 0032 FB1D     		add	r3, r7, #7
 804 0034 1B78     		ldrb	r3, [r3]
 174:.\main.c      **** }
 805              		.loc 1 174 0
 806 0036 181C     		mov	r0, r3
 807 0038 BD46     		mov	sp, r7
 808 003a 02B0     		add	sp, sp, #8
 809              		@ sp needed
 810 003c 80BD     		pop	{r7, pc}
 811              		.cfi_endproc
 812              	.LFE38:
 813              		.size	maintain_array, .-maintain_array
 814 003e C046     		.section	.text.check_update,"ax",%progbits
 815              		.align	2
 816              		.global	check_update
 817              		.code	16
 818              		.thumb_func
 819              		.type	check_update, %function
 820              	check_update:
 821              	.LFB39:
 175:.\main.c      **** 
 176:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 177:.\main.c      **** {
 822              		.loc 1 177 0
 823              		.cfi_startproc
 824 0000 80B5     		push	{r7, lr}
 825              		.cfi_def_cfa_offset 8
 826              		.cfi_offset 7, -8
 827              		.cfi_offset 14, -4
 828 0002 86B0     		sub	sp, sp, #24
 829              		.cfi_def_cfa_offset 32
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 F860     		str	r0, [r7, #12]
 833 0008 7B60     		str	r3, [r7, #4]
 834 000a 3B1C     		mov	r3, r7
 835 000c 0B33     		add	r3, r3, #11
 836 000e 1970     		strb	r1, [r3]
 837 0010 3B1C     		mov	r3, r7
 838 0012 0A33     		add	r3, r3, #10
 839 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 19


 178:.\main.c      ****     uint8 index;
 179:.\main.c      ****     if(arr_pos != 0)
 840              		.loc 1 179 0
 841 0016 3B1C     		mov	r3, r7
 842 0018 0B33     		add	r3, r3, #11
 843 001a 1B78     		ldrb	r3, [r3]
 844 001c 002B     		cmp	r3, #0
 845 001e 07D0     		beq	.L45
 180:.\main.c      ****     {
 181:.\main.c      ****         index = arr_pos - 1;
 846              		.loc 1 181 0
 847 0020 3B1C     		mov	r3, r7
 848 0022 1733     		add	r3, r3, #23
 849 0024 3A1C     		mov	r2, r7
 850 0026 0B32     		add	r2, r2, #11
 851 0028 1278     		ldrb	r2, [r2]
 852 002a 013A     		sub	r2, r2, #1
 853 002c 1A70     		strb	r2, [r3]
 854 002e 06E0     		b	.L46
 855              	.L45:
 182:.\main.c      ****     }
 183:.\main.c      ****     else
 184:.\main.c      ****     {
 185:.\main.c      ****         index = size - 1;
 856              		.loc 1 185 0
 857 0030 3B1C     		mov	r3, r7
 858 0032 1733     		add	r3, r3, #23
 859 0034 3A1C     		mov	r2, r7
 860 0036 0A32     		add	r2, r2, #10
 861 0038 1278     		ldrb	r2, [r2]
 862 003a 013A     		sub	r2, r2, #1
 863 003c 1A70     		strb	r2, [r3]
 864              	.L46:
 186:.\main.c      ****     }
 187:.\main.c      ****     
 188:.\main.c      ****     if(change < 0)
 865              		.loc 1 188 0
 866 003e 7B68     		ldr	r3, [r7, #4]
 867 0040 002B     		cmp	r3, #0
 868 0042 2ADA     		bge	.L47
 189:.\main.c      ****     {
 190:.\main.c      ****         if(array[index] >= (1000 - change))
 869              		.loc 1 190 0
 870 0044 3B1C     		mov	r3, r7
 871 0046 1733     		add	r3, r3, #23
 872 0048 1B78     		ldrb	r3, [r3]
 873 004a 5B00     		lsl	r3, r3, #1
 874 004c FA68     		ldr	r2, [r7, #12]
 875 004e D318     		add	r3, r2, r3
 876 0050 1B88     		ldrh	r3, [r3]
 877 0052 1A1C     		mov	r2, r3
 878 0054 7B68     		ldr	r3, [r7, #4]
 879 0056 FA21     		mov	r1, #250
 880 0058 8900     		lsl	r1, r1, #2
 881 005a CB1A     		sub	r3, r1, r3
 882 005c 9A42     		cmp	r2, r3
 883 005e 12DB     		blt	.L48
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 20


 191:.\main.c      ****         {
 192:.\main.c      ****             array[arr_pos] = (array[index] + change);
 884              		.loc 1 192 0
 885 0060 3B1C     		mov	r3, r7
 886 0062 0B33     		add	r3, r3, #11
 887 0064 1B78     		ldrb	r3, [r3]
 888 0066 5B00     		lsl	r3, r3, #1
 889 0068 FA68     		ldr	r2, [r7, #12]
 890 006a D318     		add	r3, r2, r3
 891 006c 3A1C     		mov	r2, r7
 892 006e 1732     		add	r2, r2, #23
 893 0070 1278     		ldrb	r2, [r2]
 894 0072 5200     		lsl	r2, r2, #1
 895 0074 F968     		ldr	r1, [r7, #12]
 896 0076 8A18     		add	r2, r1, r2
 897 0078 1188     		ldrh	r1, [r2]
 898 007a 7A68     		ldr	r2, [r7, #4]
 899 007c 92B2     		uxth	r2, r2
 900 007e 8A18     		add	r2, r1, r2
 901 0080 92B2     		uxth	r2, r2
 902 0082 1A80     		strh	r2, [r3]
 903 0084 33E0     		b	.L50
 904              	.L48:
 193:.\main.c      ****         }
 194:.\main.c      ****         else
 195:.\main.c      ****         {
 196:.\main.c      ****             array[arr_pos] = 1000;
 905              		.loc 1 196 0
 906 0086 3B1C     		mov	r3, r7
 907 0088 0B33     		add	r3, r3, #11
 908 008a 1B78     		ldrb	r3, [r3]
 909 008c 5B00     		lsl	r3, r3, #1
 910 008e FA68     		ldr	r2, [r7, #12]
 911 0090 D318     		add	r3, r2, r3
 912 0092 FA22     		mov	r2, #250
 913 0094 9200     		lsl	r2, r2, #2
 914 0096 1A80     		strh	r2, [r3]
 915 0098 29E0     		b	.L50
 916              	.L47:
 197:.\main.c      ****         }
 198:.\main.c      ****     }
 199:.\main.c      ****     else
 200:.\main.c      ****     {
 201:.\main.c      ****         if(array[index] <= (2000 - change))
 917              		.loc 1 201 0
 918 009a 3B1C     		mov	r3, r7
 919 009c 1733     		add	r3, r3, #23
 920 009e 1B78     		ldrb	r3, [r3]
 921 00a0 5B00     		lsl	r3, r3, #1
 922 00a2 FA68     		ldr	r2, [r7, #12]
 923 00a4 D318     		add	r3, r2, r3
 924 00a6 1B88     		ldrh	r3, [r3]
 925 00a8 1A1C     		mov	r2, r3
 926 00aa 7B68     		ldr	r3, [r7, #4]
 927 00ac FA21     		mov	r1, #250
 928 00ae C900     		lsl	r1, r1, #3
 929 00b0 CB1A     		sub	r3, r1, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 21


 930 00b2 9A42     		cmp	r2, r3
 931 00b4 12DC     		bgt	.L51
 202:.\main.c      ****         {
 203:.\main.c      ****             array[arr_pos] = (array[index] + change);
 932              		.loc 1 203 0
 933 00b6 3B1C     		mov	r3, r7
 934 00b8 0B33     		add	r3, r3, #11
 935 00ba 1B78     		ldrb	r3, [r3]
 936 00bc 5B00     		lsl	r3, r3, #1
 937 00be FA68     		ldr	r2, [r7, #12]
 938 00c0 D318     		add	r3, r2, r3
 939 00c2 3A1C     		mov	r2, r7
 940 00c4 1732     		add	r2, r2, #23
 941 00c6 1278     		ldrb	r2, [r2]
 942 00c8 5200     		lsl	r2, r2, #1
 943 00ca F968     		ldr	r1, [r7, #12]
 944 00cc 8A18     		add	r2, r1, r2
 945 00ce 1188     		ldrh	r1, [r2]
 946 00d0 7A68     		ldr	r2, [r7, #4]
 947 00d2 92B2     		uxth	r2, r2
 948 00d4 8A18     		add	r2, r1, r2
 949 00d6 92B2     		uxth	r2, r2
 950 00d8 1A80     		strh	r2, [r3]
 951 00da 08E0     		b	.L50
 952              	.L51:
 204:.\main.c      ****         }
 205:.\main.c      ****         else
 206:.\main.c      ****         {
 207:.\main.c      ****             array[arr_pos] = 2000;
 953              		.loc 1 207 0
 954 00dc 3B1C     		mov	r3, r7
 955 00de 0B33     		add	r3, r3, #11
 956 00e0 1B78     		ldrb	r3, [r3]
 957 00e2 5B00     		lsl	r3, r3, #1
 958 00e4 FA68     		ldr	r2, [r7, #12]
 959 00e6 D318     		add	r3, r2, r3
 960 00e8 FA22     		mov	r2, #250
 961 00ea D200     		lsl	r2, r2, #3
 962 00ec 1A80     		strh	r2, [r3]
 963              	.L50:
 208:.\main.c      ****         }
 209:.\main.c      ****     }
 210:.\main.c      ****     
 211:.\main.c      ****     return maintain_array(arr_pos, size);
 964              		.loc 1 211 0
 965 00ee 3B1C     		mov	r3, r7
 966 00f0 0B33     		add	r3, r3, #11
 967 00f2 1A78     		ldrb	r2, [r3]
 968 00f4 3B1C     		mov	r3, r7
 969 00f6 0A33     		add	r3, r3, #10
 970 00f8 1B78     		ldrb	r3, [r3]
 971 00fa 101C     		mov	r0, r2
 972 00fc 191C     		mov	r1, r3
 973 00fe FFF7FEFF 		bl	maintain_array
 974 0102 031C     		mov	r3, r0
 212:.\main.c      **** }
 975              		.loc 1 212 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 22


 976 0104 181C     		mov	r0, r3
 977 0106 BD46     		mov	sp, r7
 978 0108 06B0     		add	sp, sp, #24
 979              		@ sp needed
 980 010a 80BD     		pop	{r7, pc}
 981              		.cfi_endproc
 982              	.LFE39:
 983              		.size	check_update, .-check_update
 984              		.section	.text.pos_to_vel,"ax",%progbits
 985              		.align	2
 986              		.global	pos_to_vel
 987              		.code	16
 988              		.thumb_func
 989              		.type	pos_to_vel, %function
 990              	pos_to_vel:
 991              	.LFB40:
 213:.\main.c      **** 
 214:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 215:.\main.c      **** {
 992              		.loc 1 215 0
 993              		.cfi_startproc
 994 0000 90B5     		push	{r4, r7, lr}
 995              		.cfi_def_cfa_offset 12
 996              		.cfi_offset 4, -12
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 0002 83B0     		sub	sp, sp, #12
 1000              		.cfi_def_cfa_offset 24
 1001 0004 00AF     		add	r7, sp, #0
 1002              		.cfi_def_cfa_register 7
 1003 0006 3960     		str	r1, [r7]
 1004 0008 111C     		mov	r1, r2
 1005 000a 1A1C     		mov	r2, r3
 1006 000c FB1D     		add	r3, r7, #7
 1007 000e 1870     		strb	r0, [r3]
 1008 0010 BB1D     		add	r3, r7, #6
 1009 0012 1970     		strb	r1, [r3]
 1010 0014 3B1D     		add	r3, r7, #4
 1011 0016 1A80     		strh	r2, [r3]
 216:.\main.c      ****     if(command >= 1000 && command < 1125)
 1012              		.loc 1 216 0
 1013 0018 3B1D     		add	r3, r7, #4
 1014 001a 1A88     		ldrh	r2, [r3]
 1015 001c 724B     		ldr	r3, .L65
 1016 001e 9A42     		cmp	r2, r3
 1017 0020 11D9     		bls	.L54
 1018              		.loc 1 216 0 is_stmt 0 discriminator 1
 1019 0022 3B1D     		add	r3, r7, #4
 1020 0024 1A88     		ldrh	r2, [r3]
 1021 0026 714B     		ldr	r3, .L65+4
 1022 0028 9A42     		cmp	r2, r3
 1023 002a 0CD8     		bhi	.L54
 217:.\main.c      ****     {
 218:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 1024              		.loc 1 218 0 is_stmt 1
 1025 002c FC1D     		add	r4, r7, #7
 1026 002e 3868     		ldr	r0, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 23


 1027 0030 FB1D     		add	r3, r7, #7
 1028 0032 1978     		ldrb	r1, [r3]
 1029 0034 BB1D     		add	r3, r7, #6
 1030 0036 1A78     		ldrb	r2, [r3]
 1031 0038 6423     		mov	r3, #100
 1032 003a 5B42     		neg	r3, r3
 1033 003c FFF7FEFF 		bl	check_update
 1034 0040 031C     		mov	r3, r0
 1035 0042 2370     		strb	r3, [r4]
 1036 0044 CAE0     		b	.L55
 1037              	.L54:
 219:.\main.c      ****     }
 220:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1038              		.loc 1 220 0
 1039 0046 3B1D     		add	r3, r7, #4
 1040 0048 1A88     		ldrh	r2, [r3]
 1041 004a 684B     		ldr	r3, .L65+4
 1042 004c 9A42     		cmp	r2, r3
 1043 004e 11D9     		bls	.L56
 1044              		.loc 1 220 0 is_stmt 0 discriminator 1
 1045 0050 3B1D     		add	r3, r7, #4
 1046 0052 1A88     		ldrh	r2, [r3]
 1047 0054 664B     		ldr	r3, .L65+8
 1048 0056 9A42     		cmp	r2, r3
 1049 0058 0CD8     		bhi	.L56
 221:.\main.c      ****     {
 222:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1050              		.loc 1 222 0 is_stmt 1
 1051 005a FC1D     		add	r4, r7, #7
 1052 005c 3868     		ldr	r0, [r7]
 1053 005e FB1D     		add	r3, r7, #7
 1054 0060 1978     		ldrb	r1, [r3]
 1055 0062 BB1D     		add	r3, r7, #6
 1056 0064 1A78     		ldrb	r2, [r3]
 1057 0066 3223     		mov	r3, #50
 1058 0068 5B42     		neg	r3, r3
 1059 006a FFF7FEFF 		bl	check_update
 1060 006e 031C     		mov	r3, r0
 1061 0070 2370     		strb	r3, [r4]
 1062 0072 B3E0     		b	.L55
 1063              	.L56:
 223:.\main.c      ****     }
 224:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1064              		.loc 1 224 0
 1065 0074 3B1D     		add	r3, r7, #4
 1066 0076 1A88     		ldrh	r2, [r3]
 1067 0078 5D4B     		ldr	r3, .L65+8
 1068 007a 9A42     		cmp	r2, r3
 1069 007c 11D9     		bls	.L57
 1070              		.loc 1 224 0 is_stmt 0 discriminator 1
 1071 007e 3B1D     		add	r3, r7, #4
 1072 0080 1A88     		ldrh	r2, [r3]
 1073 0082 5C4B     		ldr	r3, .L65+12
 1074 0084 9A42     		cmp	r2, r3
 1075 0086 0CD8     		bhi	.L57
 225:.\main.c      ****     {
 226:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 24


 1076              		.loc 1 226 0 is_stmt 1
 1077 0088 FC1D     		add	r4, r7, #7
 1078 008a 3868     		ldr	r0, [r7]
 1079 008c FB1D     		add	r3, r7, #7
 1080 008e 1978     		ldrb	r1, [r3]
 1081 0090 BB1D     		add	r3, r7, #6
 1082 0092 1A78     		ldrb	r2, [r3]
 1083 0094 0A23     		mov	r3, #10
 1084 0096 5B42     		neg	r3, r3
 1085 0098 FFF7FEFF 		bl	check_update
 1086 009c 031C     		mov	r3, r0
 1087 009e 2370     		strb	r3, [r4]
 1088 00a0 9CE0     		b	.L55
 1089              	.L57:
 227:.\main.c      ****     }
 228:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1090              		.loc 1 228 0
 1091 00a2 3B1D     		add	r3, r7, #4
 1092 00a4 1A88     		ldrh	r2, [r3]
 1093 00a6 534B     		ldr	r3, .L65+12
 1094 00a8 9A42     		cmp	r2, r3
 1095 00aa 11D9     		bls	.L58
 1096              		.loc 1 228 0 is_stmt 0 discriminator 1
 1097 00ac 3B1D     		add	r3, r7, #4
 1098 00ae 1A88     		ldrh	r2, [r3]
 1099 00b0 514B     		ldr	r3, .L65+16
 1100 00b2 9A42     		cmp	r2, r3
 1101 00b4 0CD8     		bhi	.L58
 229:.\main.c      ****     {
 230:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1102              		.loc 1 230 0 is_stmt 1
 1103 00b6 FC1D     		add	r4, r7, #7
 1104 00b8 3868     		ldr	r0, [r7]
 1105 00ba FB1D     		add	r3, r7, #7
 1106 00bc 1978     		ldrb	r1, [r3]
 1107 00be BB1D     		add	r3, r7, #6
 1108 00c0 1A78     		ldrb	r2, [r3]
 1109 00c2 0523     		mov	r3, #5
 1110 00c4 5B42     		neg	r3, r3
 1111 00c6 FFF7FEFF 		bl	check_update
 1112 00ca 031C     		mov	r3, r0
 1113 00cc 2370     		strb	r3, [r4]
 1114 00ce 85E0     		b	.L55
 1115              	.L58:
 231:.\main.c      ****     }
 232:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1116              		.loc 1 232 0
 1117 00d0 3B1D     		add	r3, r7, #4
 1118 00d2 1A88     		ldrh	r2, [r3]
 1119 00d4 494B     		ldr	r3, .L65+20
 1120 00d6 9A42     		cmp	r2, r3
 1121 00d8 10D8     		bhi	.L59
 1122              		.loc 1 232 0 is_stmt 0 discriminator 1
 1123 00da 3B1D     		add	r3, r7, #4
 1124 00dc 1A88     		ldrh	r2, [r3]
 1125 00de 464B     		ldr	r3, .L65+16
 1126 00e0 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 25


 1127 00e2 0BD9     		bls	.L59
 233:.\main.c      ****     {
 234:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1128              		.loc 1 234 0 is_stmt 1
 1129 00e4 FC1D     		add	r4, r7, #7
 1130 00e6 FB1D     		add	r3, r7, #7
 1131 00e8 1A78     		ldrb	r2, [r3]
 1132 00ea BB1D     		add	r3, r7, #6
 1133 00ec 1B78     		ldrb	r3, [r3]
 1134 00ee 101C     		mov	r0, r2
 1135 00f0 191C     		mov	r1, r3
 1136 00f2 FFF7FEFF 		bl	maintain_array
 1137 00f6 031C     		mov	r3, r0
 1138 00f8 2370     		strb	r3, [r4]
 1139 00fa 6FE0     		b	.L55
 1140              	.L59:
 235:.\main.c      ****     }
 236:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1141              		.loc 1 236 0
 1142 00fc 3B1D     		add	r3, r7, #4
 1143 00fe 1A88     		ldrh	r2, [r3]
 1144 0100 3E4B     		ldr	r3, .L65+20
 1145 0102 9A42     		cmp	r2, r3
 1146 0104 13D9     		bls	.L60
 1147              		.loc 1 236 0 is_stmt 0 discriminator 1
 1148 0106 3B1D     		add	r3, r7, #4
 1149 0108 1A88     		ldrh	r2, [r3]
 1150 010a 3D4B     		ldr	r3, .L65+24
 1151 010c 9A42     		cmp	r2, r3
 1152 010e 0ED8     		bhi	.L60
 237:.\main.c      ****     {
 238:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1153              		.loc 1 238 0 is_stmt 1
 1154 0110 FC1D     		add	r4, r7, #7
 1155 0112 3968     		ldr	r1, [r7]
 1156 0114 FB1D     		add	r3, r7, #7
 1157 0116 1A78     		ldrb	r2, [r3]
 1158 0118 BB1D     		add	r3, r7, #6
 1159 011a 1B78     		ldrb	r3, [r3]
 1160 011c 081C     		mov	r0, r1
 1161 011e 111C     		mov	r1, r2
 1162 0120 1A1C     		mov	r2, r3
 1163 0122 0523     		mov	r3, #5
 1164 0124 FFF7FEFF 		bl	check_update
 1165 0128 031C     		mov	r3, r0
 1166 012a 2370     		strb	r3, [r4]
 1167 012c 56E0     		b	.L55
 1168              	.L60:
 239:.\main.c      ****     }
 240:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1169              		.loc 1 240 0
 1170 012e 3B1D     		add	r3, r7, #4
 1171 0130 1A88     		ldrh	r2, [r3]
 1172 0132 334B     		ldr	r3, .L65+24
 1173 0134 9A42     		cmp	r2, r3
 1174 0136 13D9     		bls	.L61
 1175              		.loc 1 240 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 26


 1176 0138 3B1D     		add	r3, r7, #4
 1177 013a 1A88     		ldrh	r2, [r3]
 1178 013c 314B     		ldr	r3, .L65+28
 1179 013e 9A42     		cmp	r2, r3
 1180 0140 0ED8     		bhi	.L61
 241:.\main.c      ****     {
 242:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1181              		.loc 1 242 0 is_stmt 1
 1182 0142 FC1D     		add	r4, r7, #7
 1183 0144 3968     		ldr	r1, [r7]
 1184 0146 FB1D     		add	r3, r7, #7
 1185 0148 1A78     		ldrb	r2, [r3]
 1186 014a BB1D     		add	r3, r7, #6
 1187 014c 1B78     		ldrb	r3, [r3]
 1188 014e 081C     		mov	r0, r1
 1189 0150 111C     		mov	r1, r2
 1190 0152 1A1C     		mov	r2, r3
 1191 0154 0A23     		mov	r3, #10
 1192 0156 FFF7FEFF 		bl	check_update
 1193 015a 031C     		mov	r3, r0
 1194 015c 2370     		strb	r3, [r4]
 1195 015e 3DE0     		b	.L55
 1196              	.L61:
 243:.\main.c      ****     }
 244:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1197              		.loc 1 244 0
 1198 0160 3B1D     		add	r3, r7, #4
 1199 0162 1A88     		ldrh	r2, [r3]
 1200 0164 274B     		ldr	r3, .L65+28
 1201 0166 9A42     		cmp	r2, r3
 1202 0168 13D9     		bls	.L62
 1203              		.loc 1 244 0 is_stmt 0 discriminator 1
 1204 016a 3B1D     		add	r3, r7, #4
 1205 016c 1A88     		ldrh	r2, [r3]
 1206 016e 264B     		ldr	r3, .L65+32
 1207 0170 9A42     		cmp	r2, r3
 1208 0172 0ED8     		bhi	.L62
 245:.\main.c      ****     {
 246:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1209              		.loc 1 246 0 is_stmt 1
 1210 0174 FC1D     		add	r4, r7, #7
 1211 0176 3968     		ldr	r1, [r7]
 1212 0178 FB1D     		add	r3, r7, #7
 1213 017a 1A78     		ldrb	r2, [r3]
 1214 017c BB1D     		add	r3, r7, #6
 1215 017e 1B78     		ldrb	r3, [r3]
 1216 0180 081C     		mov	r0, r1
 1217 0182 111C     		mov	r1, r2
 1218 0184 1A1C     		mov	r2, r3
 1219 0186 3223     		mov	r3, #50
 1220 0188 FFF7FEFF 		bl	check_update
 1221 018c 031C     		mov	r3, r0
 1222 018e 2370     		strb	r3, [r4]
 1223 0190 24E0     		b	.L55
 1224              	.L62:
 247:.\main.c      ****     }
 248:.\main.c      ****     else if(command > 1875 && command <= 2000)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 27


 1225              		.loc 1 248 0
 1226 0192 3B1D     		add	r3, r7, #4
 1227 0194 1A88     		ldrh	r2, [r3]
 1228 0196 1C4B     		ldr	r3, .L65+32
 1229 0198 9A42     		cmp	r2, r3
 1230 019a 14D9     		bls	.L63
 1231              		.loc 1 248 0 is_stmt 0 discriminator 1
 1232 019c 3B1D     		add	r3, r7, #4
 1233 019e 1A88     		ldrh	r2, [r3]
 1234 01a0 FA23     		mov	r3, #250
 1235 01a2 DB00     		lsl	r3, r3, #3
 1236 01a4 9A42     		cmp	r2, r3
 1237 01a6 0ED8     		bhi	.L63
 249:.\main.c      ****     {
 250:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1238              		.loc 1 250 0 is_stmt 1
 1239 01a8 FC1D     		add	r4, r7, #7
 1240 01aa 3968     		ldr	r1, [r7]
 1241 01ac FB1D     		add	r3, r7, #7
 1242 01ae 1A78     		ldrb	r2, [r3]
 1243 01b0 BB1D     		add	r3, r7, #6
 1244 01b2 1B78     		ldrb	r3, [r3]
 1245 01b4 081C     		mov	r0, r1
 1246 01b6 111C     		mov	r1, r2
 1247 01b8 1A1C     		mov	r2, r3
 1248 01ba 6423     		mov	r3, #100
 1249 01bc FFF7FEFF 		bl	check_update
 1250 01c0 031C     		mov	r3, r0
 1251 01c2 2370     		strb	r3, [r4]
 1252 01c4 0AE0     		b	.L55
 1253              	.L63:
 251:.\main.c      ****     }
 252:.\main.c      ****     else
 253:.\main.c      ****     {
 254:.\main.c      ****         //increment error variable
 255:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1254              		.loc 1 255 0
 1255 01c6 FC1D     		add	r4, r7, #7
 1256 01c8 FB1D     		add	r3, r7, #7
 1257 01ca 1A78     		ldrb	r2, [r3]
 1258 01cc BB1D     		add	r3, r7, #6
 1259 01ce 1B78     		ldrb	r3, [r3]
 1260 01d0 101C     		mov	r0, r2
 1261 01d2 191C     		mov	r1, r3
 1262 01d4 FFF7FEFF 		bl	maintain_array
 1263 01d8 031C     		mov	r3, r0
 1264 01da 2370     		strb	r3, [r4]
 1265              	.L55:
 256:.\main.c      ****     }
 257:.\main.c      ****     return cur_pos;
 1266              		.loc 1 257 0
 1267 01dc FB1D     		add	r3, r7, #7
 1268 01de 1B78     		ldrb	r3, [r3]
 258:.\main.c      **** }
 1269              		.loc 1 258 0
 1270 01e0 181C     		mov	r0, r3
 1271 01e2 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 28


 1272 01e4 03B0     		add	sp, sp, #12
 1273              		@ sp needed
 1274 01e6 90BD     		pop	{r4, r7, pc}
 1275              	.L66:
 1276              		.align	2
 1277              	.L65:
 1278 01e8 E7030000 		.word	999
 1279 01ec 64040000 		.word	1124
 1280 01f0 E1040000 		.word	1249
 1281 01f4 5E050000 		.word	1374
 1282 01f8 D1050000 		.word	1489
 1283 01fc E6050000 		.word	1510
 1284 0200 59060000 		.word	1625
 1285 0204 D6060000 		.word	1750
 1286 0208 53070000 		.word	1875
 1287              		.cfi_endproc
 1288              	.LFE40:
 1289              		.size	pos_to_vel, .-pos_to_vel
 1290              		.section	.text.make_command,"ax",%progbits
 1291              		.align	2
 1292              		.global	make_command
 1293              		.code	16
 1294              		.thumb_func
 1295              		.type	make_command, %function
 1296              	make_command:
 1297              	.LFB41:
 259:.\main.c      **** 
 260:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 261:.\main.c      **** {
 1298              		.loc 1 261 0
 1299              		.cfi_startproc
 1300 0000 80B5     		push	{r7, lr}
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 84B0     		sub	sp, sp, #16
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              		.cfi_def_cfa_register 7
 1308 0006 7860     		str	r0, [r7, #4]
 1309 0008 FB1C     		add	r3, r7, #3
 1310 000a 1970     		strb	r1, [r3]
 1311 000c BB1C     		add	r3, r7, #2
 1312 000e 1A70     		strb	r2, [r3]
 262:.\main.c      ****     uint16 command;
 263:.\main.c      ****     int16 temp1;
 264:.\main.c      ****     int16 temp2;
 265:.\main.c      ****     int16 temp3;
 266:.\main.c      ****     
 267:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1313              		.loc 1 267 0
 1314 0010 FB1C     		add	r3, r7, #3
 1315 0012 1B78     		ldrb	r3, [r3]
 1316 0014 7A68     		ldr	r2, [r7, #4]
 1317 0016 D318     		add	r3, r2, r3
 1318 0018 1B78     		ldrb	r3, [r3]
 1319 001a 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 29


 1320 001c 1A02     		lsl	r2, r3, #8
 1321 001e 3B1C     		mov	r3, r7
 1322 0020 0E33     		add	r3, r3, #14
 1323 0022 1A80     		strh	r2, [r3]
 268:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1324              		.loc 1 268 0
 1325 0024 BB1C     		add	r3, r7, #2
 1326 0026 1B78     		ldrb	r3, [r3]
 1327 0028 7A68     		ldr	r2, [r7, #4]
 1328 002a D318     		add	r3, r2, r3
 1329 002c 1B78     		ldrb	r3, [r3]
 1330 002e 5BB2     		sxtb	r3, r3
 1331 0030 9AB2     		uxth	r2, r3
 1332 0032 3B1C     		mov	r3, r7
 1333 0034 0C33     		add	r3, r3, #12
 1334 0036 111C     		add	r1, r2, #0
 1335 0038 FF22     		mov	r2, #255
 1336 003a 0A40     		and	r2, r1
 1337 003c 1A80     		strh	r2, [r3]
 269:.\main.c      ****     temp3 = temp1 | temp2;
 1338              		.loc 1 269 0
 1339 003e 3B1C     		mov	r3, r7
 1340 0040 0A33     		add	r3, r3, #10
 1341 0042 391C     		mov	r1, r7
 1342 0044 0E31     		add	r1, r1, #14
 1343 0046 3A1C     		mov	r2, r7
 1344 0048 0C32     		add	r2, r2, #12
 1345 004a 0988     		ldrh	r1, [r1]
 1346 004c 1288     		ldrh	r2, [r2]
 1347 004e 0A43     		orr	r2, r1
 1348 0050 1A80     		strh	r2, [r3]
 270:.\main.c      ****     command = (temp3/2) + 1500;
 1349              		.loc 1 270 0
 1350 0052 3B1C     		mov	r3, r7
 1351 0054 0A33     		add	r3, r3, #10
 1352 0056 0021     		mov	r1, #0
 1353 0058 5B5E     		ldrsh	r3, [r3, r1]
 1354 005a 002B     		cmp	r3, #0
 1355 005c 00DA     		bge	.L68
 1356 005e 0133     		add	r3, r3, #1
 1357              	.L68:
 1358 0060 5B10     		asr	r3, r3, #1
 1359 0062 9BB2     		uxth	r3, r3
 1360 0064 9AB2     		uxth	r2, r3
 1361 0066 3B1C     		mov	r3, r7
 1362 0068 0833     		add	r3, r3, #8
 1363 006a 0549     		ldr	r1, .L70
 1364 006c 5218     		add	r2, r2, r1
 1365 006e 1A80     		strh	r2, [r3]
 271:.\main.c      ****     return command;
 1366              		.loc 1 271 0
 1367 0070 3B1C     		mov	r3, r7
 1368 0072 0833     		add	r3, r3, #8
 1369 0074 1B88     		ldrh	r3, [r3]
 272:.\main.c      **** }
 1370              		.loc 1 272 0
 1371 0076 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 30


 1372 0078 BD46     		mov	sp, r7
 1373 007a 04B0     		add	sp, sp, #16
 1374              		@ sp needed
 1375 007c 80BD     		pop	{r7, pc}
 1376              	.L71:
 1377 007e C046     		.align	2
 1378              	.L70:
 1379 0080 DC050000 		.word	1500
 1380              		.cfi_endproc
 1381              	.LFE41:
 1382              		.size	make_command, .-make_command
 1383              		.section	.text.potFeedback,"ax",%progbits
 1384              		.align	2
 1385              		.global	potFeedback
 1386              		.code	16
 1387              		.thumb_func
 1388              		.type	potFeedback, %function
 1389              	potFeedback:
 1390              	.LFB42:
 273:.\main.c      **** 
 274:.\main.c      **** uint16 potFeedback(uint32 channel)
 275:.\main.c      **** {
 1391              		.loc 1 275 0
 1392              		.cfi_startproc
 1393 0000 80B5     		push	{r7, lr}
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397 0002 84B0     		sub	sp, sp, #16
 1398              		.cfi_def_cfa_offset 24
 1399 0004 00AF     		add	r7, sp, #0
 1400              		.cfi_def_cfa_register 7
 1401 0006 7860     		str	r0, [r7, #4]
 276:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1402              		.loc 1 276 0
 1403 0008 7B68     		ldr	r3, [r7, #4]
 1404 000a 181C     		mov	r0, r3
 1405 000c FFF7FEFF 		bl	ADC_GetResult16
 1406 0010 031C     		mov	r3, r0
 1407 0012 1A1C     		mov	r2, r3
 1408 0014 3B1C     		mov	r3, r7
 1409 0016 0E33     		add	r3, r3, #14
 1410 0018 1A80     		strh	r2, [r3]
 277:.\main.c      ****     return feedback;
 1411              		.loc 1 277 0
 1412 001a 3B1C     		mov	r3, r7
 1413 001c 0E33     		add	r3, r3, #14
 1414 001e 1B88     		ldrh	r3, [r3]
 278:.\main.c      **** }
 1415              		.loc 1 278 0
 1416 0020 181C     		mov	r0, r3
 1417 0022 BD46     		mov	sp, r7
 1418 0024 04B0     		add	sp, sp, #16
 1419              		@ sp needed
 1420 0026 80BD     		pop	{r7, pc}
 1421              		.cfi_endproc
 1422              	.LFE42:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 31


 1423              		.size	potFeedback, .-potFeedback
 1424              		.section	.text.send_packet,"ax",%progbits
 1425              		.align	2
 1426              		.global	send_packet
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	send_packet, %function
 1430              	send_packet:
 1431              	.LFB43:
 279:.\main.c      **** 
 280:.\main.c      **** void send_packet(uint8 heart_beat)
 281:.\main.c      **** {
 1432              		.loc 1 281 0
 1433              		.cfi_startproc
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 82B0     		sub	sp, sp, #8
 1439              		.cfi_def_cfa_offset 16
 1440 0004 00AF     		add	r7, sp, #0
 1441              		.cfi_def_cfa_register 7
 1442 0006 021C     		mov	r2, r0
 1443 0008 FB1D     		add	r3, r7, #7
 1444 000a 1A70     		strb	r2, [r3]
 282:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 283:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 284:.\main.c      ****     //TODO define system state
 285:.\main.c      ****     //send packet via serial to wiznet
 286:.\main.c      ****     if(heart_beat){
 1445              		.loc 1 286 0
 1446 000c FB1D     		add	r3, r7, #7
 1447 000e 1B78     		ldrb	r3, [r3]
 1448 0010 002B     		cmp	r3, #0
 1449 0012 2FD0     		beq	.L75
 287:.\main.c      ****         feedback_array[0] = 7;
 1450              		.loc 1 287 0
 1451 0014 384B     		ldr	r3, .L78
 1452 0016 0722     		mov	r2, #7
 1453 0018 1A70     		strb	r2, [r3]
 288:.\main.c      ****         feedback_array[1] = 7;
 1454              		.loc 1 288 0
 1455 001a 374B     		ldr	r3, .L78
 1456 001c 0722     		mov	r2, #7
 1457 001e 5A70     		strb	r2, [r3, #1]
 289:.\main.c      ****         feedback_array[2] = 7;
 1458              		.loc 1 289 0
 1459 0020 354B     		ldr	r3, .L78
 1460 0022 0722     		mov	r2, #7
 1461 0024 9A70     		strb	r2, [r3, #2]
 290:.\main.c      ****         feedback_array[3] = 7;
 1462              		.loc 1 290 0
 1463 0026 344B     		ldr	r3, .L78
 1464 0028 0722     		mov	r2, #7
 1465 002a DA70     		strb	r2, [r3, #3]
 291:.\main.c      ****         feedback_array[4] = 7;
 1466              		.loc 1 291 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 32


 1467 002c 324B     		ldr	r3, .L78
 1468 002e 0722     		mov	r2, #7
 1469 0030 1A71     		strb	r2, [r3, #4]
 292:.\main.c      ****         feedback_array[5] = 7;
 1470              		.loc 1 292 0
 1471 0032 314B     		ldr	r3, .L78
 1472 0034 0722     		mov	r2, #7
 1473 0036 5A71     		strb	r2, [r3, #5]
 293:.\main.c      ****         feedback_array[6] = 7;
 1474              		.loc 1 293 0
 1475 0038 2F4B     		ldr	r3, .L78
 1476 003a 0722     		mov	r2, #7
 1477 003c 9A71     		strb	r2, [r3, #6]
 294:.\main.c      ****         feedback_array[7] = 7;
 1478              		.loc 1 294 0
 1479 003e 2E4B     		ldr	r3, .L78
 1480 0040 0722     		mov	r2, #7
 1481 0042 DA71     		strb	r2, [r3, #7]
 295:.\main.c      ****         feedback_array[8] = 7;
 1482              		.loc 1 295 0
 1483 0044 2C4B     		ldr	r3, .L78
 1484 0046 0722     		mov	r2, #7
 1485 0048 1A72     		strb	r2, [r3, #8]
 296:.\main.c      ****         feedback_array[9] = 7;
 1486              		.loc 1 296 0
 1487 004a 2B4B     		ldr	r3, .L78
 1488 004c 0722     		mov	r2, #7
 1489 004e 5A72     		strb	r2, [r3, #9]
 297:.\main.c      ****         feedback_array[10] = 7;
 1490              		.loc 1 297 0
 1491 0050 294B     		ldr	r3, .L78
 1492 0052 0722     		mov	r2, #7
 1493 0054 9A72     		strb	r2, [r3, #10]
 298:.\main.c      ****         feedback_array[11] = 7;
 1494              		.loc 1 298 0
 1495 0056 284B     		ldr	r3, .L78
 1496 0058 0722     		mov	r2, #7
 1497 005a DA72     		strb	r2, [r3, #11]
 299:.\main.c      ****         feedback_array[12] = 7;
 1498              		.loc 1 299 0
 1499 005c 264B     		ldr	r3, .L78
 1500 005e 0722     		mov	r2, #7
 1501 0060 1A73     		strb	r2, [r3, #12]
 300:.\main.c      ****         feedback_array[13] = 0xee;
 1502              		.loc 1 300 0
 1503 0062 254B     		ldr	r3, .L78
 1504 0064 EE22     		mov	r2, #238
 1505 0066 5A73     		strb	r2, [r3, #13]
 301:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1506              		.loc 1 301 0
 1507 0068 234B     		ldr	r3, .L78
 1508 006a 181C     		mov	r0, r3
 1509 006c 0E21     		mov	r1, #14
 1510 006e FFF7FEFF 		bl	wiznetWriteUdpFrame
 1511 0072 31E0     		b	.L76
 1512              	.L75:
 302:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 33


 303:.\main.c      ****     else{
 304:.\main.c      ****         feedback_array[0] = 7;      // ph value
 1513              		.loc 1 304 0
 1514 0074 204B     		ldr	r3, .L78
 1515 0076 0722     		mov	r2, #7
 1516 0078 1A70     		strb	r2, [r3]
 305:.\main.c      ****         feedback_array[1] = 7;      // humidity
 1517              		.loc 1 305 0
 1518 007a 1F4B     		ldr	r3, .L78
 1519 007c 0722     		mov	r2, #7
 1520 007e 5A70     		strb	r2, [r3, #1]
 306:.\main.c      ****         feedback_array[2] = 7;      // wrist rotate temperature
 1521              		.loc 1 306 0
 1522 0080 1D4B     		ldr	r3, .L78
 1523 0082 0722     		mov	r2, #7
 1524 0084 9A70     		strb	r2, [r3, #2]
 307:.\main.c      ****         feedback_array[3] = 7;      // wrist rotate position
 1525              		.loc 1 307 0
 1526 0086 1C4B     		ldr	r3, .L78
 1527 0088 0722     		mov	r2, #7
 1528 008a DA70     		strb	r2, [r3, #3]
 308:.\main.c      ****         feedback_array[4] = 7;      // wrist rotate error status
 1529              		.loc 1 308 0
 1530 008c 1A4B     		ldr	r3, .L78
 1531 008e 0722     		mov	r2, #7
 1532 0090 1A71     		strb	r2, [r3, #4]
 309:.\main.c      ****         feedback_array[5] = 7;      // wrist tilt temperature
 1533              		.loc 1 309 0
 1534 0092 194B     		ldr	r3, .L78
 1535 0094 0722     		mov	r2, #7
 1536 0096 5A71     		strb	r2, [r3, #5]
 310:.\main.c      ****         feedback_array[6] = 7;      // wrist tilt position
 1537              		.loc 1 310 0
 1538 0098 174B     		ldr	r3, .L78
 1539 009a 0722     		mov	r2, #7
 1540 009c 9A71     		strb	r2, [r3, #6]
 311:.\main.c      ****         feedback_array[7] = 7;      // wrist tilt error statue
 1541              		.loc 1 311 0
 1542 009e 164B     		ldr	r3, .L78
 1543 00a0 0722     		mov	r2, #7
 1544 00a2 DA71     		strb	r2, [r3, #7]
 312:.\main.c      ****         feedback_array[8] = 7;      // elbow stop switch count
 1545              		.loc 1 312 0
 1546 00a4 144B     		ldr	r3, .L78
 1547 00a6 0722     		mov	r2, #7
 1548 00a8 1A72     		strb	r2, [r3, #8]
 313:.\main.c      ****         feedback_array[9] = 7;      // elbow pot value
 1549              		.loc 1 313 0
 1550 00aa 134B     		ldr	r3, .L78
 1551 00ac 0722     		mov	r2, #7
 1552 00ae 5A72     		strb	r2, [r3, #9]
 314:.\main.c      ****         feedback_array[10] = 7;      // shoulder stop swtich count
 1553              		.loc 1 314 0
 1554 00b0 114B     		ldr	r3, .L78
 1555 00b2 0722     		mov	r2, #7
 1556 00b4 9A72     		strb	r2, [r3, #10]
 315:.\main.c      ****         feedback_array[11] = 7;      // shoulder pot value
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 34


 1557              		.loc 1 315 0
 1558 00b6 104B     		ldr	r3, .L78
 1559 00b8 0722     		mov	r2, #7
 1560 00ba DA72     		strb	r2, [r3, #11]
 316:.\main.c      ****         feedback_array[12] = 7;      // turret error status
 1561              		.loc 1 316 0
 1562 00bc 0E4B     		ldr	r3, .L78
 1563 00be 0722     		mov	r2, #7
 1564 00c0 1A73     		strb	r2, [r3, #12]
 317:.\main.c      ****         feedback_array[13] = 0xff;       
 1565              		.loc 1 317 0
 1566 00c2 0D4B     		ldr	r3, .L78
 1567 00c4 FF22     		mov	r2, #255
 1568 00c6 5A73     		strb	r2, [r3, #13]
 318:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1569              		.loc 1 318 0
 1570 00c8 0B4B     		ldr	r3, .L78
 1571 00ca 181C     		mov	r0, r3
 1572 00cc 0E21     		mov	r1, #14
 1573 00ce FFF7FEFF 		bl	wiznetWriteUdpFrame
 319:.\main.c      ****         LED_Write(1);
 1574              		.loc 1 319 0
 1575 00d2 0120     		mov	r0, #1
 1576 00d4 FFF7FEFF 		bl	LED_Write
 1577              	.L76:
 320:.\main.c      ****     }
 321:.\main.c      ****     wiznetSend();
 1578              		.loc 1 321 0
 1579 00d8 FFF7FEFF 		bl	wiznetSend
 322:.\main.c      ****     while(WIZ_INT_Read() == 1);
 1580              		.loc 1 322 0
 1581 00dc C046     		mov	r8, r8
 1582              	.L77:
 1583              		.loc 1 322 0 is_stmt 0 discriminator 1
 1584 00de FFF7FEFF 		bl	WIZ_INT_Read
 1585 00e2 031C     		mov	r3, r0
 1586 00e4 012B     		cmp	r3, #1
 1587 00e6 FAD0     		beq	.L77
 323:.\main.c      ****     wiznetClearInterrupts();
 1588              		.loc 1 323 0 is_stmt 1
 1589 00e8 FFF7FEFF 		bl	wiznetClearInterrupts
 324:.\main.c      ****     LED_Write(0);    
 1590              		.loc 1 324 0
 1591 00ec 0020     		mov	r0, #0
 1592 00ee FFF7FEFF 		bl	LED_Write
 325:.\main.c      **** }
 1593              		.loc 1 325 0
 1594 00f2 BD46     		mov	sp, r7
 1595 00f4 02B0     		add	sp, sp, #8
 1596              		@ sp needed
 1597 00f6 80BD     		pop	{r7, pc}
 1598              	.L79:
 1599              		.align	2
 1600              	.L78:
 1601 00f8 00000000 		.word	feedback_array
 1602              		.cfi_endproc
 1603              	.LFE43:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 35


 1604              		.size	send_packet, .-send_packet
 1605              		.section	.text.fill_data_array,"ax",%progbits
 1606              		.align	2
 1607              		.global	fill_data_array
 1608              		.code	16
 1609              		.thumb_func
 1610              		.type	fill_data_array, %function
 1611              	fill_data_array:
 1612              	.LFB44:
 326:.\main.c      **** 
 327:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 328:.\main.c      **** void fill_data_array()
 329:.\main.c      **** {
 1613              		.loc 1 329 0
 1614              		.cfi_startproc
 1615 0000 80B5     		push	{r7, lr}
 1616              		.cfi_def_cfa_offset 8
 1617              		.cfi_offset 7, -8
 1618              		.cfi_offset 14, -4
 1619 0002 00AF     		add	r7, sp, #0
 1620              		.cfi_def_cfa_register 7
 330:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1621              		.loc 1 330 0
 1622 0004 034B     		ldr	r3, .L81
 1623 0006 181C     		mov	r0, r3
 1624 0008 1621     		mov	r1, #22
 1625 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 331:.\main.c      **** }
 1626              		.loc 1 331 0
 1627 000e BD46     		mov	sp, r7
 1628              		@ sp needed
 1629 0010 80BD     		pop	{r7, pc}
 1630              	.L82:
 1631 0012 C046     		.align	2
 1632              	.L81:
 1633 0014 00000000 		.word	data_array
 1634              		.cfi_endproc
 1635              	.LFE44:
 1636              		.size	fill_data_array, .-fill_data_array
 1637              		.section	.text.ServoGoalPosition,"ax",%progbits
 1638              		.align	2
 1639              		.global	ServoGoalPosition
 1640              		.code	16
 1641              		.thumb_func
 1642              		.type	ServoGoalPosition, %function
 1643              	ServoGoalPosition:
 1644              	.LFB45:
 332:.\main.c      **** 
 333:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 334:.\main.c      **** {
 1645              		.loc 1 334 0
 1646              		.cfi_startproc
 1647 0000 80B5     		push	{r7, lr}
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 7, -8
 1650              		.cfi_offset 14, -4
 1651 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 36


 1652              		.cfi_def_cfa_offset 32
 1653 0004 00AF     		add	r7, sp, #0
 1654              		.cfi_def_cfa_register 7
 1655 0006 0A1C     		mov	r2, r1
 1656 0008 FB1D     		add	r3, r7, #7
 1657 000a 011C     		add	r1, r0, #0
 1658 000c 1970     		strb	r1, [r3]
 1659 000e 3B1D     		add	r3, r7, #4
 1660 0010 1A80     		strh	r2, [r3]
 335:.\main.c      ****     uint8 array[9];
 336:.\main.c      ****     
 337:.\main.c      ****     array[0] = 0xFF;
 1661              		.loc 1 337 0
 1662 0012 3B1C     		mov	r3, r7
 1663 0014 0C33     		add	r3, r3, #12
 1664 0016 FF22     		mov	r2, #255
 1665 0018 1A70     		strb	r2, [r3]
 338:.\main.c      ****     array[1] = 0xFF;
 1666              		.loc 1 338 0
 1667 001a 3B1C     		mov	r3, r7
 1668 001c 0C33     		add	r3, r3, #12
 1669 001e FF22     		mov	r2, #255
 1670 0020 5A70     		strb	r2, [r3, #1]
 339:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1671              		.loc 1 339 0
 1672 0022 3B1C     		mov	r3, r7
 1673 0024 0C33     		add	r3, r3, #12
 1674 0026 FA1D     		add	r2, r7, #7
 1675 0028 1278     		ldrb	r2, [r2]
 1676 002a 9A70     		strb	r2, [r3, #2]
 340:.\main.c      ****     array[3] = 0x05;
 1677              		.loc 1 340 0
 1678 002c 3B1C     		mov	r3, r7
 1679 002e 0C33     		add	r3, r3, #12
 1680 0030 0522     		mov	r2, #5
 1681 0032 DA70     		strb	r2, [r3, #3]
 341:.\main.c      ****     array[4] = 0x03; //write instruction
 1682              		.loc 1 341 0
 1683 0034 3B1C     		mov	r3, r7
 1684 0036 0C33     		add	r3, r3, #12
 1685 0038 0322     		mov	r2, #3
 1686 003a 1A71     		strb	r2, [r3, #4]
 342:.\main.c      ****     array[5] = 0x1E;
 1687              		.loc 1 342 0
 1688 003c 3B1C     		mov	r3, r7
 1689 003e 0C33     		add	r3, r3, #12
 1690 0040 1E22     		mov	r2, #30
 1691 0042 5A71     		strb	r2, [r3, #5]
 343:.\main.c      ****     array[6] = position;
 1692              		.loc 1 343 0
 1693 0044 3B1D     		add	r3, r7, #4
 1694 0046 1B88     		ldrh	r3, [r3]
 1695 0048 DAB2     		uxtb	r2, r3
 1696 004a 3B1C     		mov	r3, r7
 1697 004c 0C33     		add	r3, r3, #12
 1698 004e 9A71     		strb	r2, [r3, #6]
 344:.\main.c      ****     array[7] = position >> 8;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 37


 1699              		.loc 1 344 0
 1700 0050 3B1D     		add	r3, r7, #4
 1701 0052 1B88     		ldrh	r3, [r3]
 1702 0054 1B0A     		lsr	r3, r3, #8
 1703 0056 9BB2     		uxth	r3, r3
 1704 0058 DAB2     		uxtb	r2, r3
 1705 005a 3B1C     		mov	r3, r7
 1706 005c 0C33     		add	r3, r3, #12
 1707 005e DA71     		strb	r2, [r3, #7]
 345:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1708              		.loc 1 345 0
 1709 0060 3B1C     		mov	r3, r7
 1710 0062 0C33     		add	r3, r3, #12
 1711 0064 9A79     		ldrb	r2, [r3, #6]
 1712 0066 FB1D     		add	r3, r7, #7
 1713 0068 1B78     		ldrb	r3, [r3]
 1714 006a D318     		add	r3, r2, r3
 1715 006c DAB2     		uxtb	r2, r3
 1716 006e 3B1C     		mov	r3, r7
 1717 0070 0C33     		add	r3, r3, #12
 1718 0072 DB79     		ldrb	r3, [r3, #7]
 1719 0074 D318     		add	r3, r2, r3
 1720 0076 DBB2     		uxtb	r3, r3
 1721 0078 2633     		add	r3, r3, #38
 1722 007a DBB2     		uxtb	r3, r3
 1723 007c DB43     		mvn	r3, r3
 1724 007e DAB2     		uxtb	r2, r3
 1725 0080 3B1C     		mov	r3, r7
 1726 0082 0C33     		add	r3, r3, #12
 1727 0084 1A72     		strb	r2, [r3, #8]
 346:.\main.c      ****     
 347:.\main.c      ****     Wrist_UART_SpiUartPutArray(array, 0x09);  
 1728              		.loc 1 347 0
 1729 0086 3B1C     		mov	r3, r7
 1730 0088 0C33     		add	r3, r3, #12
 1731 008a 181C     		mov	r0, r3
 1732 008c 0921     		mov	r1, #9
 1733 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
 348:.\main.c      **** }
 1734              		.loc 1 348 0
 1735 0092 BD46     		mov	sp, r7
 1736 0094 06B0     		add	sp, sp, #24
 1737              		@ sp needed
 1738 0096 80BD     		pop	{r7, pc}
 1739              		.cfi_endproc
 1740              	.LFE45:
 1741              		.size	ServoGoalPosition, .-ServoGoalPosition
 1742              		.section	.text.SetServoTorque,"ax",%progbits
 1743              		.align	2
 1744              		.global	SetServoTorque
 1745              		.code	16
 1746              		.thumb_func
 1747              		.type	SetServoTorque, %function
 1748              	SetServoTorque:
 1749              	.LFB46:
 349:.\main.c      **** 
 350:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 38


 351:.\main.c      **** {
 1750              		.loc 1 351 0
 1751              		.cfi_startproc
 1752 0000 80B5     		push	{r7, lr}
 1753              		.cfi_def_cfa_offset 8
 1754              		.cfi_offset 7, -8
 1755              		.cfi_offset 14, -4
 1756 0002 86B0     		sub	sp, sp, #24
 1757              		.cfi_def_cfa_offset 32
 1758 0004 00AF     		add	r7, sp, #0
 1759              		.cfi_def_cfa_register 7
 1760 0006 0A1C     		mov	r2, r1
 1761 0008 FB1D     		add	r3, r7, #7
 1762 000a 011C     		add	r1, r0, #0
 1763 000c 1970     		strb	r1, [r3]
 1764 000e 3B1D     		add	r3, r7, #4
 1765 0010 1A80     		strh	r2, [r3]
 352:.\main.c      ****     uint8 array[9];
 353:.\main.c      ****     
 354:.\main.c      ****     array[0] = 0xFF;
 1766              		.loc 1 354 0
 1767 0012 3B1C     		mov	r3, r7
 1768 0014 0C33     		add	r3, r3, #12
 1769 0016 FF22     		mov	r2, #255
 1770 0018 1A70     		strb	r2, [r3]
 355:.\main.c      ****     array[1] = 0xFF;
 1771              		.loc 1 355 0
 1772 001a 3B1C     		mov	r3, r7
 1773 001c 0C33     		add	r3, r3, #12
 1774 001e FF22     		mov	r2, #255
 1775 0020 5A70     		strb	r2, [r3, #1]
 356:.\main.c      ****     array[2] = servoID; 
 1776              		.loc 1 356 0
 1777 0022 3B1C     		mov	r3, r7
 1778 0024 0C33     		add	r3, r3, #12
 1779 0026 FA1D     		add	r2, r7, #7
 1780 0028 1278     		ldrb	r2, [r2]
 1781 002a 9A70     		strb	r2, [r3, #2]
 357:.\main.c      ****     array[3] = 0x05;
 1782              		.loc 1 357 0
 1783 002c 3B1C     		mov	r3, r7
 1784 002e 0C33     		add	r3, r3, #12
 1785 0030 0522     		mov	r2, #5
 1786 0032 DA70     		strb	r2, [r3, #3]
 358:.\main.c      ****     array[4] = 0x03; //write instruction
 1787              		.loc 1 358 0
 1788 0034 3B1C     		mov	r3, r7
 1789 0036 0C33     		add	r3, r3, #12
 1790 0038 0322     		mov	r2, #3
 1791 003a 1A71     		strb	r2, [r3, #4]
 359:.\main.c      ****     array[5] = 0x0E;
 1792              		.loc 1 359 0
 1793 003c 3B1C     		mov	r3, r7
 1794 003e 0C33     		add	r3, r3, #12
 1795 0040 0E22     		mov	r2, #14
 1796 0042 5A71     		strb	r2, [r3, #5]
 360:.\main.c      ****     array[6] = torque;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 39


 1797              		.loc 1 360 0
 1798 0044 3B1D     		add	r3, r7, #4
 1799 0046 1B88     		ldrh	r3, [r3]
 1800 0048 DAB2     		uxtb	r2, r3
 1801 004a 3B1C     		mov	r3, r7
 1802 004c 0C33     		add	r3, r3, #12
 1803 004e 9A71     		strb	r2, [r3, #6]
 361:.\main.c      ****     array[7] = torque >> 8;
 1804              		.loc 1 361 0
 1805 0050 3B1D     		add	r3, r7, #4
 1806 0052 1B88     		ldrh	r3, [r3]
 1807 0054 1B0A     		lsr	r3, r3, #8
 1808 0056 9BB2     		uxth	r3, r3
 1809 0058 DAB2     		uxtb	r2, r3
 1810 005a 3B1C     		mov	r3, r7
 1811 005c 0C33     		add	r3, r3, #12
 1812 005e DA71     		strb	r2, [r3, #7]
 362:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1813              		.loc 1 362 0
 1814 0060 3B1C     		mov	r3, r7
 1815 0062 0C33     		add	r3, r3, #12
 1816 0064 9A79     		ldrb	r2, [r3, #6]
 1817 0066 FB1D     		add	r3, r7, #7
 1818 0068 1B78     		ldrb	r3, [r3]
 1819 006a D318     		add	r3, r2, r3
 1820 006c DAB2     		uxtb	r2, r3
 1821 006e 3B1C     		mov	r3, r7
 1822 0070 0C33     		add	r3, r3, #12
 1823 0072 DB79     		ldrb	r3, [r3, #7]
 1824 0074 D318     		add	r3, r2, r3
 1825 0076 DBB2     		uxtb	r3, r3
 1826 0078 1633     		add	r3, r3, #22
 1827 007a DBB2     		uxtb	r3, r3
 1828 007c DB43     		mvn	r3, r3
 1829 007e DAB2     		uxtb	r2, r3
 1830 0080 3B1C     		mov	r3, r7
 1831 0082 0C33     		add	r3, r3, #12
 1832 0084 1A72     		strb	r2, [r3, #8]
 363:.\main.c      ****     
 364:.\main.c      ****     Wrist_UART_SpiUartPutArray(array, 0x09);
 1833              		.loc 1 364 0
 1834 0086 3B1C     		mov	r3, r7
 1835 0088 0C33     		add	r3, r3, #12
 1836 008a 181C     		mov	r0, r3
 1837 008c 0921     		mov	r1, #9
 1838 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
 365:.\main.c      ****     
 366:.\main.c      **** }    
 1839              		.loc 1 366 0
 1840 0092 BD46     		mov	sp, r7
 1841 0094 06B0     		add	sp, sp, #24
 1842              		@ sp needed
 1843 0096 80BD     		pop	{r7, pc}
 1844              		.cfi_endproc
 1845              	.LFE46:
 1846              		.size	SetServoTorque, .-SetServoTorque
 1847              		.section	.text.ServoSpeed,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 40


 1848              		.align	2
 1849              		.global	ServoSpeed
 1850              		.code	16
 1851              		.thumb_func
 1852              		.type	ServoSpeed, %function
 1853              	ServoSpeed:
 1854              	.LFB47:
 367:.\main.c      **** 
 368:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 369:.\main.c      **** {
 1855              		.loc 1 369 0
 1856              		.cfi_startproc
 1857 0000 80B5     		push	{r7, lr}
 1858              		.cfi_def_cfa_offset 8
 1859              		.cfi_offset 7, -8
 1860              		.cfi_offset 14, -4
 1861 0002 86B0     		sub	sp, sp, #24
 1862              		.cfi_def_cfa_offset 32
 1863 0004 00AF     		add	r7, sp, #0
 1864              		.cfi_def_cfa_register 7
 1865 0006 0A1C     		mov	r2, r1
 1866 0008 FB1D     		add	r3, r7, #7
 1867 000a 011C     		add	r1, r0, #0
 1868 000c 1970     		strb	r1, [r3]
 1869 000e 3B1D     		add	r3, r7, #4
 1870 0010 1A80     		strh	r2, [r3]
 370:.\main.c      ****     uint8 array[9];
 371:.\main.c      ****     
 372:.\main.c      ****     array[0] = 0xFF;
 1871              		.loc 1 372 0
 1872 0012 3B1C     		mov	r3, r7
 1873 0014 0C33     		add	r3, r3, #12
 1874 0016 FF22     		mov	r2, #255
 1875 0018 1A70     		strb	r2, [r3]
 373:.\main.c      ****     array[1] = 0xFF;
 1876              		.loc 1 373 0
 1877 001a 3B1C     		mov	r3, r7
 1878 001c 0C33     		add	r3, r3, #12
 1879 001e FF22     		mov	r2, #255
 1880 0020 5A70     		strb	r2, [r3, #1]
 374:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1881              		.loc 1 374 0
 1882 0022 3B1C     		mov	r3, r7
 1883 0024 0C33     		add	r3, r3, #12
 1884 0026 FA1D     		add	r2, r7, #7
 1885 0028 1278     		ldrb	r2, [r2]
 1886 002a 9A70     		strb	r2, [r3, #2]
 375:.\main.c      ****     array[3] = 0x05;
 1887              		.loc 1 375 0
 1888 002c 3B1C     		mov	r3, r7
 1889 002e 0C33     		add	r3, r3, #12
 1890 0030 0522     		mov	r2, #5
 1891 0032 DA70     		strb	r2, [r3, #3]
 376:.\main.c      ****     array[4] = 0x03; //write instruction
 1892              		.loc 1 376 0
 1893 0034 3B1C     		mov	r3, r7
 1894 0036 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 41


 1895 0038 0322     		mov	r2, #3
 1896 003a 1A71     		strb	r2, [r3, #4]
 377:.\main.c      ****     array[5] = 0x20;
 1897              		.loc 1 377 0
 1898 003c 3B1C     		mov	r3, r7
 1899 003e 0C33     		add	r3, r3, #12
 1900 0040 2022     		mov	r2, #32
 1901 0042 5A71     		strb	r2, [r3, #5]
 378:.\main.c      ****     array[6] = speed;
 1902              		.loc 1 378 0
 1903 0044 3B1D     		add	r3, r7, #4
 1904 0046 1B88     		ldrh	r3, [r3]
 1905 0048 DAB2     		uxtb	r2, r3
 1906 004a 3B1C     		mov	r3, r7
 1907 004c 0C33     		add	r3, r3, #12
 1908 004e 9A71     		strb	r2, [r3, #6]
 379:.\main.c      ****     array[7] = speed >> 8;
 1909              		.loc 1 379 0
 1910 0050 3B1D     		add	r3, r7, #4
 1911 0052 1B88     		ldrh	r3, [r3]
 1912 0054 1B0A     		lsr	r3, r3, #8
 1913 0056 9BB2     		uxth	r3, r3
 1914 0058 DAB2     		uxtb	r2, r3
 1915 005a 3B1C     		mov	r3, r7
 1916 005c 0C33     		add	r3, r3, #12
 1917 005e DA71     		strb	r2, [r3, #7]
 380:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1918              		.loc 1 380 0
 1919 0060 3B1C     		mov	r3, r7
 1920 0062 0C33     		add	r3, r3, #12
 1921 0064 9A79     		ldrb	r2, [r3, #6]
 1922 0066 FB1D     		add	r3, r7, #7
 1923 0068 1B78     		ldrb	r3, [r3]
 1924 006a D318     		add	r3, r2, r3
 1925 006c DAB2     		uxtb	r2, r3
 1926 006e 3B1C     		mov	r3, r7
 1927 0070 0C33     		add	r3, r3, #12
 1928 0072 DB79     		ldrb	r3, [r3, #7]
 1929 0074 D318     		add	r3, r2, r3
 1930 0076 DBB2     		uxtb	r3, r3
 1931 0078 2833     		add	r3, r3, #40
 1932 007a DBB2     		uxtb	r3, r3
 1933 007c DB43     		mvn	r3, r3
 1934 007e DAB2     		uxtb	r2, r3
 1935 0080 3B1C     		mov	r3, r7
 1936 0082 0C33     		add	r3, r3, #12
 1937 0084 1A72     		strb	r2, [r3, #8]
 381:.\main.c      ****     
 382:.\main.c      ****     Wrist_UART_SpiUartPutArray(array, 0x09);
 1938              		.loc 1 382 0
 1939 0086 3B1C     		mov	r3, r7
 1940 0088 0C33     		add	r3, r3, #12
 1941 008a 181C     		mov	r0, r3
 1942 008c 0921     		mov	r1, #9
 1943 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
 383:.\main.c      ****     
 384:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 42


 1944              		.loc 1 384 0
 1945 0092 BD46     		mov	sp, r7
 1946 0094 06B0     		add	sp, sp, #24
 1947              		@ sp needed
 1948 0096 80BD     		pop	{r7, pc}
 1949              		.cfi_endproc
 1950              	.LFE47:
 1951              		.size	ServoSpeed, .-ServoSpeed
 1952              		.comm	wristTilt_state,1,1
 1953              		.section	.text.wristTilt,"ax",%progbits
 1954              		.align	2
 1955              		.global	wristTilt
 1956              		.code	16
 1957              		.thumb_func
 1958              		.type	wristTilt, %function
 1959              	wristTilt:
 1960              	.LFB48:
 385:.\main.c      **** 
 386:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 387:.\main.c      **** //control the tilting motion of the wrist
 388:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 389:.\main.c      **** {
 1961              		.loc 1 389 0
 1962              		.cfi_startproc
 1963 0000 90B5     		push	{r4, r7, lr}
 1964              		.cfi_def_cfa_offset 12
 1965              		.cfi_offset 4, -12
 1966              		.cfi_offset 7, -8
 1967              		.cfi_offset 14, -4
 1968 0002 85B0     		sub	sp, sp, #20
 1969              		.cfi_def_cfa_offset 32
 1970 0004 00AF     		add	r7, sp, #0
 1971              		.cfi_def_cfa_register 7
 1972 0006 021C     		mov	r2, r0
 1973 0008 3960     		str	r1, [r7]
 1974 000a FB1D     		add	r3, r7, #7
 1975 000c 1A70     		strb	r2, [r3]
 390:.\main.c      ****     // Overview
 391:.\main.c      ****     //take instruction from data_array
 392:.\main.c      ****     //smooth input
 393:.\main.c      ****     //actuate the tilting using UART
 394:.\main.c      ****     //get feedback
 395:.\main.c      **** 
 396:.\main.c      ****     //-------------------------- 
 397:.\main.c      ****     // Dynamixel Servo specific
 398:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 399:.\main.c      ****     // TODO: Set the desired position
 400:.\main.c      **** 
 401:.\main.c      ****     //--------------------------
 402:.\main.c      ****     // State machine
 403:.\main.c      ****     
 404:.\main.c      ****     uint8 i;
 405:.\main.c      ****     uint16 avg;
 406:.\main.c      ****     uint16 command;
 407:.\main.c      ****     
 408:.\main.c      ****     switch(wristTilt_state){ //actions
 1976              		.loc 1 408 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 43


 1977 000e 5B4B     		ldr	r3, .L114
 1978 0010 1B78     		ldrb	r3, [r3]
 1979 0012 012B     		cmp	r3, #1
 1980 0014 0AD0     		beq	.L88
 1981 0016 03DC     		bgt	.L89
 1982 0018 002B     		cmp	r3, #0
 1983 001a 00D1     		bne	.LCB1675
 1984 001c 73E0     		b	.L112	@long jump
 1985              	.LCB1675:
 1986 001e 6EE0     		b	.L87
 1987              	.L89:
 1988 0020 022B     		cmp	r3, #2
 1989 0022 25D0     		beq	.L91
 1990 0024 032B     		cmp	r3, #3
 1991 0026 00D1     		bne	.LCB1683
 1992 0028 6FE0     		b	.L113	@long jump
 1993              	.LCB1683:
 1994 002a 68E0     		b	.L87
 1995              	.L88:
 409:.\main.c      ****         case tilt_start:
 410:.\main.c      ****             break;
 411:.\main.c      **** 
 412:.\main.c      ****         case tilt_init:
 413:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1996              		.loc 1 413 0
 1997 002c 3B1C     		mov	r3, r7
 1998 002e 0F33     		add	r3, r3, #15
 1999 0030 0022     		mov	r2, #0
 2000 0032 1A70     		strb	r2, [r3]
 2001 0034 0EE0     		b	.L94
 2002              	.L95:
 414:.\main.c      ****             {
 415:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 2003              		.loc 1 415 0 discriminator 2
 2004 0036 3B1C     		mov	r3, r7
 2005 0038 0F33     		add	r3, r3, #15
 2006 003a 1B78     		ldrb	r3, [r3]
 2007 003c 5B00     		lsl	r3, r3, #1
 2008 003e 3A68     		ldr	r2, [r7]
 2009 0040 D318     		add	r3, r2, r3
 2010 0042 4F4A     		ldr	r2, .L114+4
 2011 0044 1A80     		strh	r2, [r3]
 413:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2012              		.loc 1 413 0 discriminator 2
 2013 0046 3B1C     		mov	r3, r7
 2014 0048 0F33     		add	r3, r3, #15
 2015 004a 1A78     		ldrb	r2, [r3]
 2016 004c 3B1C     		mov	r3, r7
 2017 004e 0F33     		add	r3, r3, #15
 2018 0050 0132     		add	r2, r2, #1
 2019 0052 1A70     		strb	r2, [r3]
 2020              	.L94:
 413:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2021              		.loc 1 413 0 is_stmt 0 discriminator 1
 2022 0054 3B1C     		mov	r3, r7
 2023 0056 0F33     		add	r3, r3, #15
 2024 0058 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 44


 2025 005a 132B     		cmp	r3, #19
 2026 005c EBD9     		bls	.L95
 416:.\main.c      ****             }
 417:.\main.c      ****             WT_arr_cspot = 0;
 2027              		.loc 1 417 0 is_stmt 1
 2028 005e FB1D     		add	r3, r7, #7
 2029 0060 0022     		mov	r2, #0
 2030 0062 1A70     		strb	r2, [r3]
 418:.\main.c      ****             
 419:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 2031              		.loc 1 419 0
 2032 0064 464B     		ldr	r3, .L114+4
 2033 0066 0220     		mov	r0, #2
 2034 0068 191C     		mov	r1, r3
 2035 006a FFF7FEFF 		bl	ServoGoalPosition
 420:.\main.c      ****             break;
 2036              		.loc 1 420 0
 2037 006e 4DE0     		b	.L93
 2038              	.L91:
 421:.\main.c      **** 
 422:.\main.c      ****         case tilt_control:
 423:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 2039              		.loc 1 423 0
 2040 0070 3C1C     		mov	r4, r7
 2041 0072 0C34     		add	r4, r4, #12
 2042 0074 434B     		ldr	r3, .L114+8
 2043 0076 181C     		mov	r0, r3
 2044 0078 1021     		mov	r1, #16
 2045 007a 1122     		mov	r2, #17
 2046 007c FFF7FEFF 		bl	make_command
 2047 0080 031C     		mov	r3, r0
 2048 0082 2380     		strh	r3, [r4]
 424:.\main.c      ****             
 425:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 2049              		.loc 1 425 0
 2050 0084 FB1D     		add	r3, r7, #7
 2051 0086 1B78     		ldrb	r3, [r3]
 2052 0088 5B00     		lsl	r3, r3, #1
 2053 008a 3A68     		ldr	r2, [r7]
 2054 008c D318     		add	r3, r2, r3
 2055 008e 3A1C     		mov	r2, r7
 2056 0090 0C32     		add	r2, r2, #12
 2057 0092 1288     		ldrh	r2, [r2]
 2058 0094 1A80     		strh	r2, [r3]
 426:.\main.c      ****             
 427:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 2059              		.loc 1 427 0
 2060 0096 FB1D     		add	r3, r7, #7
 2061 0098 1B78     		ldrb	r3, [r3]
 2062 009a 122B     		cmp	r3, #18
 2063 009c 05D8     		bhi	.L96
 428:.\main.c      ****             {
 429:.\main.c      ****                 WT_arr_cspot++;
 2064              		.loc 1 429 0
 2065 009e FB1D     		add	r3, r7, #7
 2066 00a0 1A78     		ldrb	r2, [r3]
 2067 00a2 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 45


 2068 00a4 0132     		add	r2, r2, #1
 2069 00a6 1A70     		strb	r2, [r3]
 2070 00a8 02E0     		b	.L97
 2071              	.L96:
 430:.\main.c      ****             }
 431:.\main.c      ****             else
 432:.\main.c      ****             {
 433:.\main.c      ****                 WT_arr_cspot = 0;
 2072              		.loc 1 433 0
 2073 00aa FB1D     		add	r3, r7, #7
 2074 00ac 0022     		mov	r2, #0
 2075 00ae 1A70     		strb	r2, [r3]
 2076              	.L97:
 434:.\main.c      ****             }
 435:.\main.c      ****             
 436:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 437:.\main.c      ****             
 438:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 2077              		.loc 1 438 0
 2078 00b0 3C1C     		mov	r4, r7
 2079 00b2 0A34     		add	r4, r4, #10
 2080 00b4 3B68     		ldr	r3, [r7]
 2081 00b6 181C     		mov	r0, r3
 2082 00b8 1421     		mov	r1, #20
 2083 00ba FFF7FEFF 		bl	average
 2084 00be 031C     		mov	r3, r0
 2085 00c0 2380     		strh	r3, [r4]
 439:.\main.c      ****             
 440:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2086              		.loc 1 440 0
 2087 00c2 3B1C     		mov	r3, r7
 2088 00c4 0A33     		add	r3, r3, #10
 2089 00c6 1A88     		ldrh	r2, [r3]
 2090 00c8 FA23     		mov	r3, #250
 2091 00ca DB00     		lsl	r3, r3, #3
 2092 00cc 9A42     		cmp	r2, r3
 2093 00ce 0DD8     		bhi	.L98
 2094              		.loc 1 440 0 is_stmt 0 discriminator 1
 2095 00d0 3B1C     		mov	r3, r7
 2096 00d2 0A33     		add	r3, r3, #10
 2097 00d4 1A88     		ldrh	r2, [r3]
 2098 00d6 2C4B     		ldr	r3, .L114+12
 2099 00d8 9A42     		cmp	r2, r3
 2100 00da 07D9     		bls	.L98
 441:.\main.c      ****             {
 442:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 2101              		.loc 1 442 0 is_stmt 1
 2102 00dc 3B1C     		mov	r3, r7
 2103 00de 0A33     		add	r3, r3, #10
 2104 00e0 1B88     		ldrh	r3, [r3]
 2105 00e2 0220     		mov	r0, #2
 2106 00e4 191C     		mov	r1, r3
 2107 00e6 FFF7FEFF 		bl	ServoGoalPosition
 2108 00ea 04E0     		b	.L99
 2109              	.L98:
 443:.\main.c      ****             }
 444:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 46


 445:.\main.c      ****             {
 446:.\main.c      ****                 //increment error variable
 447:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 2110              		.loc 1 447 0
 2111 00ec 244B     		ldr	r3, .L114+4
 2112 00ee 0220     		mov	r0, #2
 2113 00f0 191C     		mov	r1, r3
 2114 00f2 FFF7FEFF 		bl	ServoGoalPosition
 2115              	.L99:
 448:.\main.c      ****             }
 449:.\main.c      ****             WT_FLAG = 0;
 2116              		.loc 1 449 0
 2117 00f6 254B     		ldr	r3, .L114+16
 2118 00f8 0022     		mov	r2, #0
 2119 00fa 1A70     		strb	r2, [r3]
 450:.\main.c      ****             break;
 2120              		.loc 1 450 0
 2121 00fc 06E0     		b	.L93
 2122              	.L87:
 451:.\main.c      ****             
 452:.\main.c      ****         case tilt_wait:
 453:.\main.c      ****             break;
 454:.\main.c      ****                         
 455:.\main.c      ****         default:
 456:.\main.c      ****             wristTilt_state = tilt_start;
 2123              		.loc 1 456 0
 2124 00fe 1F4B     		ldr	r3, .L114
 2125 0100 0022     		mov	r2, #0
 2126 0102 1A70     		strb	r2, [r3]
 457:.\main.c      ****             break;
 2127              		.loc 1 457 0
 2128 0104 02E0     		b	.L93
 2129              	.L112:
 410:.\main.c      ****             break;
 2130              		.loc 1 410 0
 2131 0106 C046     		mov	r8, r8
 2132 0108 00E0     		b	.L93
 2133              	.L113:
 453:.\main.c      ****             break;
 2134              		.loc 1 453 0
 2135 010a C046     		mov	r8, r8
 2136              	.L93:
 458:.\main.c      ****     }
 459:.\main.c      ****     
 460:.\main.c      ****     switch(wristTilt_state){ //transitions
 2137              		.loc 1 460 0
 2138 010c 1B4B     		ldr	r3, .L114
 2139 010e 1B78     		ldrb	r3, [r3]
 2140 0110 012B     		cmp	r3, #1
 2141 0112 0CD0     		beq	.L101
 2142 0114 02DC     		bgt	.L102
 2143 0116 002B     		cmp	r3, #0
 2144 0118 05D0     		beq	.L103
 2145 011a 24E0     		b	.L100
 2146              	.L102:
 2147 011c 022B     		cmp	r3, #2
 2148 011e 0AD0     		beq	.L104
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 47


 2149 0120 032B     		cmp	r3, #3
 2150 0122 14D0     		beq	.L105
 2151 0124 1FE0     		b	.L100
 2152              	.L103:
 461:.\main.c      ****         case tilt_start:
 462:.\main.c      ****             wristTilt_state = tilt_init;
 2153              		.loc 1 462 0
 2154 0126 154B     		ldr	r3, .L114
 2155 0128 0122     		mov	r2, #1
 2156 012a 1A70     		strb	r2, [r3]
 463:.\main.c      ****             break;
 2157              		.loc 1 463 0
 2158 012c 1FE0     		b	.L106
 2159              	.L101:
 464:.\main.c      ****         
 465:.\main.c      ****         case tilt_init:
 466:.\main.c      ****             wristTilt_state = tilt_wait;
 2160              		.loc 1 466 0
 2161 012e 134B     		ldr	r3, .L114
 2162 0130 0322     		mov	r2, #3
 2163 0132 1A70     		strb	r2, [r3]
 467:.\main.c      ****             break;
 2164              		.loc 1 467 0
 2165 0134 1BE0     		b	.L106
 2166              	.L104:
 468:.\main.c      ****         
 469:.\main.c      ****         case tilt_control:
 470:.\main.c      ****             if(WT_FLAG)
 2167              		.loc 1 470 0
 2168 0136 154B     		ldr	r3, .L114+16
 2169 0138 1B78     		ldrb	r3, [r3]
 2170 013a 002B     		cmp	r3, #0
 2171 013c 03D0     		beq	.L107
 471:.\main.c      ****             {
 472:.\main.c      ****                 wristTilt_state = tilt_control;
 2172              		.loc 1 472 0
 2173 013e 0F4B     		ldr	r3, .L114
 2174 0140 0222     		mov	r2, #2
 2175 0142 1A70     		strb	r2, [r3]
 473:.\main.c      ****             }
 474:.\main.c      ****             else
 475:.\main.c      ****             {
 476:.\main.c      ****                 wristTilt_state = tilt_wait;
 477:.\main.c      ****             }
 478:.\main.c      ****             break;
 2176              		.loc 1 478 0
 2177 0144 13E0     		b	.L106
 2178              	.L107:
 476:.\main.c      ****                 wristTilt_state = tilt_wait;
 2179              		.loc 1 476 0
 2180 0146 0D4B     		ldr	r3, .L114
 2181 0148 0322     		mov	r2, #3
 2182 014a 1A70     		strb	r2, [r3]
 2183              		.loc 1 478 0
 2184 014c 0FE0     		b	.L106
 2185              	.L105:
 479:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 48


 480:.\main.c      ****         case tilt_wait:
 481:.\main.c      ****             if(WT_FLAG)
 2186              		.loc 1 481 0
 2187 014e 0F4B     		ldr	r3, .L114+16
 2188 0150 1B78     		ldrb	r3, [r3]
 2189 0152 002B     		cmp	r3, #0
 2190 0154 03D0     		beq	.L109
 482:.\main.c      ****             {
 483:.\main.c      ****                 wristTilt_state = tilt_control;
 2191              		.loc 1 483 0
 2192 0156 094B     		ldr	r3, .L114
 2193 0158 0222     		mov	r2, #2
 2194 015a 1A70     		strb	r2, [r3]
 484:.\main.c      ****             }
 485:.\main.c      ****             else
 486:.\main.c      ****             {
 487:.\main.c      ****                 wristTilt_state = tilt_wait; 
 488:.\main.c      ****             }
 489:.\main.c      ****             break;
 2195              		.loc 1 489 0
 2196 015c 07E0     		b	.L106
 2197              	.L109:
 487:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2198              		.loc 1 487 0
 2199 015e 074B     		ldr	r3, .L114
 2200 0160 0322     		mov	r2, #3
 2201 0162 1A70     		strb	r2, [r3]
 2202              		.loc 1 489 0
 2203 0164 03E0     		b	.L106
 2204              	.L100:
 490:.\main.c      ****             
 491:.\main.c      ****         default:
 492:.\main.c      ****             wristTilt_state = tilt_start;
 2205              		.loc 1 492 0
 2206 0166 054B     		ldr	r3, .L114
 2207 0168 0022     		mov	r2, #0
 2208 016a 1A70     		strb	r2, [r3]
 493:.\main.c      ****             break;
 2209              		.loc 1 493 0
 2210 016c C046     		mov	r8, r8
 2211              	.L106:
 494:.\main.c      ****     }  
 495:.\main.c      ****     return WT_arr_cspot;
 2212              		.loc 1 495 0
 2213 016e FB1D     		add	r3, r7, #7
 2214 0170 1B78     		ldrb	r3, [r3]
 496:.\main.c      **** }
 2215              		.loc 1 496 0
 2216 0172 181C     		mov	r0, r3
 2217 0174 BD46     		mov	sp, r7
 2218 0176 05B0     		add	sp, sp, #20
 2219              		@ sp needed
 2220 0178 90BD     		pop	{r4, r7, pc}
 2221              	.L115:
 2222 017a C046     		.align	2
 2223              	.L114:
 2224 017c 00000000 		.word	wristTilt_state
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 49


 2225 0180 DC050000 		.word	1500
 2226 0184 00000000 		.word	data_array
 2227 0188 E7030000 		.word	999
 2228 018c 00000000 		.word	WT_FLAG
 2229              		.cfi_endproc
 2230              	.LFE48:
 2231              		.size	wristTilt, .-wristTilt
 2232              		.comm	wristRotate_state,1,1
 2233              		.section	.text.wristRotate,"ax",%progbits
 2234              		.align	2
 2235              		.global	wristRotate
 2236              		.code	16
 2237              		.thumb_func
 2238              		.type	wristRotate, %function
 2239              	wristRotate:
 2240              	.LFB49:
 497:.\main.c      **** 
 498:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 499:.\main.c      **** //control the rotating motion of the wrist
 500:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 501:.\main.c      **** {
 2241              		.loc 1 501 0
 2242              		.cfi_startproc
 2243 0000 90B5     		push	{r4, r7, lr}
 2244              		.cfi_def_cfa_offset 12
 2245              		.cfi_offset 4, -12
 2246              		.cfi_offset 7, -8
 2247              		.cfi_offset 14, -4
 2248 0002 85B0     		sub	sp, sp, #20
 2249              		.cfi_def_cfa_offset 32
 2250 0004 00AF     		add	r7, sp, #0
 2251              		.cfi_def_cfa_register 7
 2252 0006 021C     		mov	r2, r0
 2253 0008 3960     		str	r1, [r7]
 2254 000a FB1D     		add	r3, r7, #7
 2255 000c 1A70     		strb	r2, [r3]
 502:.\main.c      ****     //Overview
 503:.\main.c      ****     //take instruction from data_array
 504:.\main.c      ****     //smooth input
 505:.\main.c      ****     //actuate the tilting using UART
 506:.\main.c      ****     //get feedback
 507:.\main.c      **** 
 508:.\main.c      ****     //-------------------------- 
 509:.\main.c      ****     // Dynamixel Servo specific
 510:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 511:.\main.c      ****     // TODO: Set the desired position
 512:.\main.c      **** 
 513:.\main.c      ****     //--------------------------
 514:.\main.c      ****     // State machine
 515:.\main.c      ****     
 516:.\main.c      ****     uint8 i;
 517:.\main.c      ****     uint16 avg;
 518:.\main.c      ****     uint16 command;
 519:.\main.c      ****     
 520:.\main.c      ****     switch(wristRotate_state){ //actions
 2256              		.loc 1 520 0
 2257 000e 5B4B     		ldr	r3, .L144
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 50


 2258 0010 1B78     		ldrb	r3, [r3]
 2259 0012 012B     		cmp	r3, #1
 2260 0014 0AD0     		beq	.L118
 2261 0016 03DC     		bgt	.L119
 2262 0018 002B     		cmp	r3, #0
 2263 001a 00D1     		bne	.LCB1948
 2264 001c 73E0     		b	.L142	@long jump
 2265              	.LCB1948:
 2266 001e 6EE0     		b	.L117
 2267              	.L119:
 2268 0020 022B     		cmp	r3, #2
 2269 0022 25D0     		beq	.L121
 2270 0024 032B     		cmp	r3, #3
 2271 0026 00D1     		bne	.LCB1956
 2272 0028 6FE0     		b	.L143	@long jump
 2273              	.LCB1956:
 2274 002a 68E0     		b	.L117
 2275              	.L118:
 521:.\main.c      ****         case rotate_start:
 522:.\main.c      ****             break;
 523:.\main.c      **** 
 524:.\main.c      ****         case rotate_init:
 525:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2276              		.loc 1 525 0
 2277 002c 3B1C     		mov	r3, r7
 2278 002e 0F33     		add	r3, r3, #15
 2279 0030 0022     		mov	r2, #0
 2280 0032 1A70     		strb	r2, [r3]
 2281 0034 0EE0     		b	.L124
 2282              	.L125:
 526:.\main.c      ****             {
 527:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2283              		.loc 1 527 0 discriminator 2
 2284 0036 3B1C     		mov	r3, r7
 2285 0038 0F33     		add	r3, r3, #15
 2286 003a 1B78     		ldrb	r3, [r3]
 2287 003c 5B00     		lsl	r3, r3, #1
 2288 003e 3A68     		ldr	r2, [r7]
 2289 0040 D318     		add	r3, r2, r3
 2290 0042 4F4A     		ldr	r2, .L144+4
 2291 0044 1A80     		strh	r2, [r3]
 525:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2292              		.loc 1 525 0 discriminator 2
 2293 0046 3B1C     		mov	r3, r7
 2294 0048 0F33     		add	r3, r3, #15
 2295 004a 1A78     		ldrb	r2, [r3]
 2296 004c 3B1C     		mov	r3, r7
 2297 004e 0F33     		add	r3, r3, #15
 2298 0050 0132     		add	r2, r2, #1
 2299 0052 1A70     		strb	r2, [r3]
 2300              	.L124:
 525:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2301              		.loc 1 525 0 is_stmt 0 discriminator 1
 2302 0054 3B1C     		mov	r3, r7
 2303 0056 0F33     		add	r3, r3, #15
 2304 0058 1B78     		ldrb	r3, [r3]
 2305 005a 132B     		cmp	r3, #19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 51


 2306 005c EBD9     		bls	.L125
 528:.\main.c      ****             }
 529:.\main.c      ****             WR_arr_cspot = 0;
 2307              		.loc 1 529 0 is_stmt 1
 2308 005e FB1D     		add	r3, r7, #7
 2309 0060 0022     		mov	r2, #0
 2310 0062 1A70     		strb	r2, [r3]
 530:.\main.c      ****             
 531:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2311              		.loc 1 531 0
 2312 0064 464B     		ldr	r3, .L144+4
 2313 0066 0120     		mov	r0, #1
 2314 0068 191C     		mov	r1, r3
 2315 006a FFF7FEFF 		bl	ServoGoalPosition
 532:.\main.c      ****             break;
 2316              		.loc 1 532 0
 2317 006e 4DE0     		b	.L123
 2318              	.L121:
 533:.\main.c      **** 
 534:.\main.c      ****         case rotate_control:
 535:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2319              		.loc 1 535 0
 2320 0070 3C1C     		mov	r4, r7
 2321 0072 0C34     		add	r4, r4, #12
 2322 0074 434B     		ldr	r3, .L144+8
 2323 0076 181C     		mov	r0, r3
 2324 0078 1221     		mov	r1, #18
 2325 007a 1322     		mov	r2, #19
 2326 007c FFF7FEFF 		bl	make_command
 2327 0080 031C     		mov	r3, r0
 2328 0082 2380     		strh	r3, [r4]
 536:.\main.c      ****             
 537:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2329              		.loc 1 537 0
 2330 0084 FB1D     		add	r3, r7, #7
 2331 0086 1B78     		ldrb	r3, [r3]
 2332 0088 5B00     		lsl	r3, r3, #1
 2333 008a 3A68     		ldr	r2, [r7]
 2334 008c D318     		add	r3, r2, r3
 2335 008e 3A1C     		mov	r2, r7
 2336 0090 0C32     		add	r2, r2, #12
 2337 0092 1288     		ldrh	r2, [r2]
 2338 0094 1A80     		strh	r2, [r3]
 538:.\main.c      ****             
 539:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2339              		.loc 1 539 0
 2340 0096 FB1D     		add	r3, r7, #7
 2341 0098 1B78     		ldrb	r3, [r3]
 2342 009a 122B     		cmp	r3, #18
 2343 009c 05D8     		bhi	.L126
 540:.\main.c      ****             {
 541:.\main.c      ****                 WR_arr_cspot++;
 2344              		.loc 1 541 0
 2345 009e FB1D     		add	r3, r7, #7
 2346 00a0 1A78     		ldrb	r2, [r3]
 2347 00a2 FB1D     		add	r3, r7, #7
 2348 00a4 0132     		add	r2, r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 52


 2349 00a6 1A70     		strb	r2, [r3]
 2350 00a8 02E0     		b	.L127
 2351              	.L126:
 542:.\main.c      ****             }
 543:.\main.c      ****             else
 544:.\main.c      ****             {
 545:.\main.c      ****                 WR_arr_cspot = 0;
 2352              		.loc 1 545 0
 2353 00aa FB1D     		add	r3, r7, #7
 2354 00ac 0022     		mov	r2, #0
 2355 00ae 1A70     		strb	r2, [r3]
 2356              	.L127:
 546:.\main.c      ****             }
 547:.\main.c      ****             
 548:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 549:.\main.c      ****             
 550:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2357              		.loc 1 550 0
 2358 00b0 3C1C     		mov	r4, r7
 2359 00b2 0A34     		add	r4, r4, #10
 2360 00b4 3B68     		ldr	r3, [r7]
 2361 00b6 181C     		mov	r0, r3
 2362 00b8 1421     		mov	r1, #20
 2363 00ba FFF7FEFF 		bl	average
 2364 00be 031C     		mov	r3, r0
 2365 00c0 2380     		strh	r3, [r4]
 551:.\main.c      ****             
 552:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2366              		.loc 1 552 0
 2367 00c2 3B1C     		mov	r3, r7
 2368 00c4 0A33     		add	r3, r3, #10
 2369 00c6 1A88     		ldrh	r2, [r3]
 2370 00c8 FA23     		mov	r3, #250
 2371 00ca DB00     		lsl	r3, r3, #3
 2372 00cc 9A42     		cmp	r2, r3
 2373 00ce 0DD8     		bhi	.L128
 2374              		.loc 1 552 0 is_stmt 0 discriminator 1
 2375 00d0 3B1C     		mov	r3, r7
 2376 00d2 0A33     		add	r3, r3, #10
 2377 00d4 1A88     		ldrh	r2, [r3]
 2378 00d6 2C4B     		ldr	r3, .L144+12
 2379 00d8 9A42     		cmp	r2, r3
 2380 00da 07D9     		bls	.L128
 553:.\main.c      ****             {
 554:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 555:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2381              		.loc 1 555 0 is_stmt 1
 2382 00dc 3B1C     		mov	r3, r7
 2383 00de 0A33     		add	r3, r3, #10
 2384 00e0 1B88     		ldrh	r3, [r3]
 2385 00e2 0120     		mov	r0, #1
 2386 00e4 191C     		mov	r1, r3
 2387 00e6 FFF7FEFF 		bl	ServoGoalPosition
 2388 00ea 04E0     		b	.L129
 2389              	.L128:
 556:.\main.c      ****             }
 557:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 53


 558:.\main.c      ****             {
 559:.\main.c      ****                 //increment error variable
 560:.\main.c      ****                 //TODO: if we scale, change the "neutral" value
 561:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2390              		.loc 1 561 0
 2391 00ec 244B     		ldr	r3, .L144+4
 2392 00ee 0120     		mov	r0, #1
 2393 00f0 191C     		mov	r1, r3
 2394 00f2 FFF7FEFF 		bl	ServoGoalPosition
 2395              	.L129:
 562:.\main.c      ****             }
 563:.\main.c      ****             WR_FLAG = 0;
 2396              		.loc 1 563 0
 2397 00f6 254B     		ldr	r3, .L144+16
 2398 00f8 0022     		mov	r2, #0
 2399 00fa 1A70     		strb	r2, [r3]
 564:.\main.c      ****             break;
 2400              		.loc 1 564 0
 2401 00fc 06E0     		b	.L123
 2402              	.L117:
 565:.\main.c      ****             
 566:.\main.c      ****         case rotate_wait:
 567:.\main.c      ****             break;
 568:.\main.c      ****                         
 569:.\main.c      ****         default:
 570:.\main.c      ****             wristRotate_state = rotate_start;
 2403              		.loc 1 570 0
 2404 00fe 1F4B     		ldr	r3, .L144
 2405 0100 0022     		mov	r2, #0
 2406 0102 1A70     		strb	r2, [r3]
 571:.\main.c      ****             break;
 2407              		.loc 1 571 0
 2408 0104 02E0     		b	.L123
 2409              	.L142:
 522:.\main.c      ****             break;
 2410              		.loc 1 522 0
 2411 0106 C046     		mov	r8, r8
 2412 0108 00E0     		b	.L123
 2413              	.L143:
 567:.\main.c      ****             break;
 2414              		.loc 1 567 0
 2415 010a C046     		mov	r8, r8
 2416              	.L123:
 572:.\main.c      ****     }
 573:.\main.c      ****     
 574:.\main.c      ****     switch(wristRotate_state){ //transitions
 2417              		.loc 1 574 0
 2418 010c 1B4B     		ldr	r3, .L144
 2419 010e 1B78     		ldrb	r3, [r3]
 2420 0110 012B     		cmp	r3, #1
 2421 0112 0CD0     		beq	.L131
 2422 0114 02DC     		bgt	.L132
 2423 0116 002B     		cmp	r3, #0
 2424 0118 05D0     		beq	.L133
 2425 011a 24E0     		b	.L130
 2426              	.L132:
 2427 011c 022B     		cmp	r3, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 54


 2428 011e 0AD0     		beq	.L134
 2429 0120 032B     		cmp	r3, #3
 2430 0122 14D0     		beq	.L135
 2431 0124 1FE0     		b	.L130
 2432              	.L133:
 575:.\main.c      ****         case rotate_start:
 576:.\main.c      ****             wristRotate_state = rotate_init;
 2433              		.loc 1 576 0
 2434 0126 154B     		ldr	r3, .L144
 2435 0128 0122     		mov	r2, #1
 2436 012a 1A70     		strb	r2, [r3]
 577:.\main.c      ****             break;
 2437              		.loc 1 577 0
 2438 012c 1FE0     		b	.L136
 2439              	.L131:
 578:.\main.c      ****         
 579:.\main.c      ****         case rotate_init:
 580:.\main.c      ****             wristRotate_state = rotate_wait;
 2440              		.loc 1 580 0
 2441 012e 134B     		ldr	r3, .L144
 2442 0130 0322     		mov	r2, #3
 2443 0132 1A70     		strb	r2, [r3]
 581:.\main.c      ****             break;
 2444              		.loc 1 581 0
 2445 0134 1BE0     		b	.L136
 2446              	.L134:
 582:.\main.c      ****         
 583:.\main.c      ****         case rotate_control:
 584:.\main.c      ****             if(WR_FLAG)
 2447              		.loc 1 584 0
 2448 0136 154B     		ldr	r3, .L144+16
 2449 0138 1B78     		ldrb	r3, [r3]
 2450 013a 002B     		cmp	r3, #0
 2451 013c 03D0     		beq	.L137
 585:.\main.c      ****             {
 586:.\main.c      ****                 wristRotate_state = rotate_control;
 2452              		.loc 1 586 0
 2453 013e 0F4B     		ldr	r3, .L144
 2454 0140 0222     		mov	r2, #2
 2455 0142 1A70     		strb	r2, [r3]
 587:.\main.c      ****             }
 588:.\main.c      ****             else
 589:.\main.c      ****             {
 590:.\main.c      ****                 wristRotate_state = rotate_wait;
 591:.\main.c      ****             }
 592:.\main.c      ****             break;
 2456              		.loc 1 592 0
 2457 0144 13E0     		b	.L136
 2458              	.L137:
 590:.\main.c      ****                 wristRotate_state = rotate_wait;
 2459              		.loc 1 590 0
 2460 0146 0D4B     		ldr	r3, .L144
 2461 0148 0322     		mov	r2, #3
 2462 014a 1A70     		strb	r2, [r3]
 2463              		.loc 1 592 0
 2464 014c 0FE0     		b	.L136
 2465              	.L135:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 55


 593:.\main.c      ****         
 594:.\main.c      ****         case rotate_wait:
 595:.\main.c      ****             if(WR_FLAG)
 2466              		.loc 1 595 0
 2467 014e 0F4B     		ldr	r3, .L144+16
 2468 0150 1B78     		ldrb	r3, [r3]
 2469 0152 002B     		cmp	r3, #0
 2470 0154 03D0     		beq	.L139
 596:.\main.c      ****             {
 597:.\main.c      ****                 wristRotate_state = rotate_control;
 2471              		.loc 1 597 0
 2472 0156 094B     		ldr	r3, .L144
 2473 0158 0222     		mov	r2, #2
 2474 015a 1A70     		strb	r2, [r3]
 598:.\main.c      ****             }
 599:.\main.c      ****             else
 600:.\main.c      ****             {
 601:.\main.c      ****                 wristRotate_state = rotate_wait;
 602:.\main.c      ****             }
 603:.\main.c      ****             break;
 2475              		.loc 1 603 0
 2476 015c 07E0     		b	.L136
 2477              	.L139:
 601:.\main.c      ****                 wristRotate_state = rotate_wait;
 2478              		.loc 1 601 0
 2479 015e 074B     		ldr	r3, .L144
 2480 0160 0322     		mov	r2, #3
 2481 0162 1A70     		strb	r2, [r3]
 2482              		.loc 1 603 0
 2483 0164 03E0     		b	.L136
 2484              	.L130:
 604:.\main.c      ****             
 605:.\main.c      ****         default:
 606:.\main.c      ****             wristRotate_state = rotate_start;
 2485              		.loc 1 606 0
 2486 0166 054B     		ldr	r3, .L144
 2487 0168 0022     		mov	r2, #0
 2488 016a 1A70     		strb	r2, [r3]
 607:.\main.c      ****             break;
 2489              		.loc 1 607 0
 2490 016c C046     		mov	r8, r8
 2491              	.L136:
 608:.\main.c      ****     }  
 609:.\main.c      ****     return WR_arr_cspot;
 2492              		.loc 1 609 0
 2493 016e FB1D     		add	r3, r7, #7
 2494 0170 1B78     		ldrb	r3, [r3]
 610:.\main.c      **** }
 2495              		.loc 1 610 0
 2496 0172 181C     		mov	r0, r3
 2497 0174 BD46     		mov	sp, r7
 2498 0176 05B0     		add	sp, sp, #20
 2499              		@ sp needed
 2500 0178 90BD     		pop	{r4, r7, pc}
 2501              	.L145:
 2502 017a C046     		.align	2
 2503              	.L144:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 56


 2504 017c 00000000 		.word	wristRotate_state
 2505 0180 DC050000 		.word	1500
 2506 0184 00000000 		.word	data_array
 2507 0188 E7030000 		.word	999
 2508 018c 00000000 		.word	WR_FLAG
 2509              		.cfi_endproc
 2510              	.LFE49:
 2511              		.size	wristRotate, .-wristRotate
 2512              		.comm	elbow_state,1,1
 2513              		.section	.text.elbow,"ax",%progbits
 2514              		.align	2
 2515              		.global	elbow
 2516              		.code	16
 2517              		.thumb_func
 2518              		.type	elbow, %function
 2519              	elbow:
 2520              	.LFB50:
 611:.\main.c      **** 
 612:.\main.c      **** //control the elbow
 613:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 614:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 615:.\main.c      **** { 
 2521              		.loc 1 615 0
 2522              		.cfi_startproc
 2523 0000 90B5     		push	{r4, r7, lr}
 2524              		.cfi_def_cfa_offset 12
 2525              		.cfi_offset 4, -12
 2526              		.cfi_offset 7, -8
 2527              		.cfi_offset 14, -4
 2528 0002 85B0     		sub	sp, sp, #20
 2529              		.cfi_def_cfa_offset 32
 2530 0004 00AF     		add	r7, sp, #0
 2531              		.cfi_def_cfa_register 7
 2532 0006 021C     		mov	r2, r0
 2533 0008 3960     		str	r1, [r7]
 2534 000a FB1D     		add	r3, r7, #7
 2535 000c 1A70     		strb	r2, [r3]
 616:.\main.c      ****     //take instruction from data_array
 617:.\main.c      ****     //smooth input
 618:.\main.c      ****     //actuate the elbow using PWM
 619:.\main.c      ****     //get feedback
 620:.\main.c      ****     uint8 i;
 621:.\main.c      ****     uint16 avg;
 622:.\main.c      ****     uint16 command;
 623:.\main.c      ****     
 624:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2536              		.loc 1 624 0
 2537 000e 3C1C     		mov	r4, r7
 2538 0010 0C34     		add	r4, r4, #12
 2539 0012 0120     		mov	r0, #1
 2540 0014 FFF7FEFF 		bl	potFeedback
 2541 0018 031C     		mov	r3, r0
 2542 001a 2380     		strh	r3, [r4]
 625:.\main.c      ****     
 626:.\main.c      ****     switch(elbow_state){ //actions
 2543              		.loc 1 626 0
 2544 001c BB4B     		ldr	r3, .L194
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 57


 2545 001e 1B78     		ldrb	r3, [r3]
 2546 0020 012B     		cmp	r3, #1
 2547 0022 0AD0     		beq	.L148
 2548 0024 03DC     		bgt	.L149
 2549 0026 002B     		cmp	r3, #0
 2550 0028 00D1     		bne	.LCB2227
 2551 002a 4CE1     		b	.L193	@long jump
 2552              	.LCB2227:
 2553 002c 47E1     		b	.L147
 2554              	.L149:
 2555 002e 022B     		cmp	r3, #2
 2556 0030 24D0     		beq	.L151
 2557 0032 032B     		cmp	r3, #3
 2558 0034 00D1     		bne	.LCB2235
 2559 0036 2EE1     		b	.L152	@long jump
 2560              	.LCB2235:
 2561 0038 41E1     		b	.L147
 2562              	.L148:
 627:.\main.c      ****         case elbw_start:
 628:.\main.c      ****             break;
 629:.\main.c      **** 
 630:.\main.c      ****         case elbw_init:
 631:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2563              		.loc 1 631 0
 2564 003a 3B1C     		mov	r3, r7
 2565 003c 0F33     		add	r3, r3, #15
 2566 003e 0022     		mov	r2, #0
 2567 0040 1A70     		strb	r2, [r3]
 2568 0042 0EE0     		b	.L154
 2569              	.L155:
 632:.\main.c      ****             {
 633:.\main.c      ****                 elbow_array[i] = 1500;
 2570              		.loc 1 633 0 discriminator 2
 2571 0044 3B1C     		mov	r3, r7
 2572 0046 0F33     		add	r3, r3, #15
 2573 0048 1B78     		ldrb	r3, [r3]
 2574 004a 5B00     		lsl	r3, r3, #1
 2575 004c 3A68     		ldr	r2, [r7]
 2576 004e D318     		add	r3, r2, r3
 2577 0050 AF4A     		ldr	r2, .L194+4
 2578 0052 1A80     		strh	r2, [r3]
 631:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2579              		.loc 1 631 0 discriminator 2
 2580 0054 3B1C     		mov	r3, r7
 2581 0056 0F33     		add	r3, r3, #15
 2582 0058 1A78     		ldrb	r2, [r3]
 2583 005a 3B1C     		mov	r3, r7
 2584 005c 0F33     		add	r3, r3, #15
 2585 005e 0132     		add	r2, r2, #1
 2586 0060 1A70     		strb	r2, [r3]
 2587              	.L154:
 631:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2588              		.loc 1 631 0 is_stmt 0 discriminator 1
 2589 0062 3B1C     		mov	r3, r7
 2590 0064 0F33     		add	r3, r3, #15
 2591 0066 1B78     		ldrb	r3, [r3]
 2592 0068 132B     		cmp	r3, #19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 58


 2593 006a EBD9     		bls	.L155
 634:.\main.c      ****             }
 635:.\main.c      ****             elbw_arr_cspot = 0;
 2594              		.loc 1 635 0 is_stmt 1
 2595 006c FB1D     		add	r3, r7, #7
 2596 006e 0022     		mov	r2, #0
 2597 0070 1A70     		strb	r2, [r3]
 636:.\main.c      ****             
 637:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2598              		.loc 1 637 0
 2599 0072 A74B     		ldr	r3, .L194+4
 2600 0074 181C     		mov	r0, r3
 2601 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 638:.\main.c      ****             break;
 2602              		.loc 1 638 0
 2603 007a 25E1     		b	.L153
 2604              	.L151:
 639:.\main.c      **** 
 640:.\main.c      ****         case elbw_execute:
 641:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2605              		.loc 1 641 0
 2606 007c 3C1C     		mov	r4, r7
 2607 007e 0A34     		add	r4, r4, #10
 2608 0080 A44B     		ldr	r3, .L194+8
 2609 0082 181C     		mov	r0, r3
 2610 0084 0E21     		mov	r1, #14
 2611 0086 0F22     		mov	r2, #15
 2612 0088 FFF7FEFF 		bl	make_command
 2613 008c 031C     		mov	r3, r0
 2614 008e 2380     		strh	r3, [r4]
 642:.\main.c      ****             
 643:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2615              		.loc 1 643 0
 2616 0090 FB1D     		add	r3, r7, #7
 2617 0092 1B78     		ldrb	r3, [r3]
 2618 0094 5B00     		lsl	r3, r3, #1
 2619 0096 3A68     		ldr	r2, [r7]
 2620 0098 D318     		add	r3, r2, r3
 2621 009a 3A1C     		mov	r2, r7
 2622 009c 0A32     		add	r2, r2, #10
 2623 009e 1288     		ldrh	r2, [r2]
 2624 00a0 1A80     		strh	r2, [r3]
 644:.\main.c      ****             
 645:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2625              		.loc 1 645 0
 2626 00a2 FB1D     		add	r3, r7, #7
 2627 00a4 1B78     		ldrb	r3, [r3]
 2628 00a6 122B     		cmp	r3, #18
 2629 00a8 05D8     		bhi	.L156
 646:.\main.c      ****             {
 647:.\main.c      ****                 elbw_arr_cspot++;
 2630              		.loc 1 647 0
 2631 00aa FB1D     		add	r3, r7, #7
 2632 00ac 1A78     		ldrb	r2, [r3]
 2633 00ae FB1D     		add	r3, r7, #7
 2634 00b0 0132     		add	r2, r2, #1
 2635 00b2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 59


 2636 00b4 02E0     		b	.L157
 2637              	.L156:
 648:.\main.c      ****             }
 649:.\main.c      ****             else
 650:.\main.c      ****             {
 651:.\main.c      ****                 elbw_arr_cspot = 0;
 2638              		.loc 1 651 0
 2639 00b6 FB1D     		add	r3, r7, #7
 2640 00b8 0022     		mov	r2, #0
 2641 00ba 1A70     		strb	r2, [r3]
 2642              	.L157:
 652:.\main.c      ****             }
 653:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2643              		.loc 1 653 0
 2644 00bc 3C1C     		mov	r4, r7
 2645 00be 0834     		add	r4, r4, #8
 2646 00c0 3B68     		ldr	r3, [r7]
 2647 00c2 181C     		mov	r0, r3
 2648 00c4 1421     		mov	r1, #20
 2649 00c6 FFF7FEFF 		bl	average
 2650 00ca 031C     		mov	r3, r0
 2651 00cc 2380     		strh	r3, [r4]
 654:.\main.c      ****             
 655:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2652              		.loc 1 655 0
 2653 00ce FFF7FEFF 		bl	stop_elb_dn_Read
 2654 00d2 031C     		mov	r3, r0
 2655 00d4 002B     		cmp	r3, #0
 2656 00d6 05D0     		beq	.L158
 2657              		.loc 1 655 0 is_stmt 0 discriminator 1
 2658 00d8 FFF7FEFF 		bl	stop_elb_up_Read
 2659 00dc 031C     		mov	r3, r0
 2660 00de 002B     		cmp	r3, #0
 2661 00e0 00D0     		beq	.LCB2331
 2662 00e2 6FE0     		b	.L159	@long jump
 2663              	.LCB2331:
 2664              	.L158:
 656:.\main.c      ****             {
 657:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2665              		.loc 1 657 0 is_stmt 1
 2666 00e4 3B1C     		mov	r3, r7
 2667 00e6 0C33     		add	r3, r3, #12
 2668 00e8 1A88     		ldrh	r2, [r3]
 2669 00ea 8B4B     		ldr	r3, .L194+12
 2670 00ec 1B68     		ldr	r3, [r3]
 2671 00ee 9A42     		cmp	r2, r3
 2672 00f0 23D8     		bhi	.L160
 658:.\main.c      ****                 {
 659:.\main.c      ****                     if (avg < 1500)
 2673              		.loc 1 659 0
 2674 00f2 3B1C     		mov	r3, r7
 2675 00f4 0833     		add	r3, r3, #8
 2676 00f6 1A88     		ldrh	r2, [r3]
 2677 00f8 884B     		ldr	r3, .L194+16
 2678 00fa 9A42     		cmp	r2, r3
 2679 00fc 04D8     		bhi	.L161
 660:.\main.c      ****                     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 60


 661:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2680              		.loc 1 661 0
 2681 00fe 844B     		ldr	r3, .L194+4
 2682 0100 181C     		mov	r0, r3
 2683 0102 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2684 0106 5CE0     		b	.L164
 2685              	.L161:
 662:.\main.c      ****                     }
 663:.\main.c      ****                     else
 664:.\main.c      ****                     {
 665:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2686              		.loc 1 665 0
 2687 0108 3B1C     		mov	r3, r7
 2688 010a 0833     		add	r3, r3, #8
 2689 010c 1A88     		ldrh	r2, [r3]
 2690 010e FA23     		mov	r3, #250
 2691 0110 DB00     		lsl	r3, r3, #3
 2692 0112 9A42     		cmp	r2, r3
 2693 0114 0CD8     		bhi	.L163
 2694              		.loc 1 665 0 is_stmt 0 discriminator 1
 2695 0116 3B1C     		mov	r3, r7
 2696 0118 0833     		add	r3, r3, #8
 2697 011a 1A88     		ldrh	r2, [r3]
 2698 011c 804B     		ldr	r3, .L194+20
 2699 011e 9A42     		cmp	r2, r3
 2700 0120 06D9     		bls	.L163
 666:.\main.c      ****                         {
 667:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2701              		.loc 1 667 0 is_stmt 1
 2702 0122 3B1C     		mov	r3, r7
 2703 0124 0833     		add	r3, r3, #8
 2704 0126 1B88     		ldrh	r3, [r3]
 2705 0128 181C     		mov	r0, r3
 2706 012a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2707 012e 48E0     		b	.L164
 2708              	.L163:
 668:.\main.c      ****                         }
 669:.\main.c      ****                         else
 670:.\main.c      ****                         {
 671:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2709              		.loc 1 671 0
 2710 0130 774B     		ldr	r3, .L194+4
 2711 0132 181C     		mov	r0, r3
 2712 0134 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2713 0138 43E0     		b	.L164
 2714              	.L160:
 672:.\main.c      ****                         }
 673:.\main.c      ****                     }
 674:.\main.c      ****                 }
 675:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND) // upper bound checking, only move away is 
 2715              		.loc 1 675 0
 2716 013a 3B1C     		mov	r3, r7
 2717 013c 0C33     		add	r3, r3, #12
 2718 013e 1A88     		ldrh	r2, [r3]
 2719 0140 784B     		ldr	r3, .L194+24
 2720 0142 1B68     		ldr	r3, [r3]
 2721 0144 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 61


 2722 0146 23D3     		bcc	.L165
 676:.\main.c      ****                 {
 677:.\main.c      ****                     if(avg > 1500)
 2723              		.loc 1 677 0
 2724 0148 3B1C     		mov	r3, r7
 2725 014a 0833     		add	r3, r3, #8
 2726 014c 1A88     		ldrh	r2, [r3]
 2727 014e 704B     		ldr	r3, .L194+4
 2728 0150 9A42     		cmp	r2, r3
 2729 0152 04D9     		bls	.L166
 678:.\main.c      ****                     {
 679:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2730              		.loc 1 679 0
 2731 0154 6E4B     		ldr	r3, .L194+4
 2732 0156 181C     		mov	r0, r3
 2733 0158 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2734 015c 31E0     		b	.L164
 2735              	.L166:
 680:.\main.c      ****                     }
 681:.\main.c      ****                     else
 682:.\main.c      ****                     {
 683:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2736              		.loc 1 683 0
 2737 015e 3B1C     		mov	r3, r7
 2738 0160 0833     		add	r3, r3, #8
 2739 0162 1A88     		ldrh	r2, [r3]
 2740 0164 FA23     		mov	r3, #250
 2741 0166 DB00     		lsl	r3, r3, #3
 2742 0168 9A42     		cmp	r2, r3
 2743 016a 0CD8     		bhi	.L168
 2744              		.loc 1 683 0 is_stmt 0 discriminator 1
 2745 016c 3B1C     		mov	r3, r7
 2746 016e 0833     		add	r3, r3, #8
 2747 0170 1A88     		ldrh	r2, [r3]
 2748 0172 6B4B     		ldr	r3, .L194+20
 2749 0174 9A42     		cmp	r2, r3
 2750 0176 06D9     		bls	.L168
 684:.\main.c      ****                         {
 685:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2751              		.loc 1 685 0 is_stmt 1
 2752 0178 3B1C     		mov	r3, r7
 2753 017a 0833     		add	r3, r3, #8
 2754 017c 1B88     		ldrh	r3, [r3]
 2755 017e 181C     		mov	r0, r3
 2756 0180 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2757 0184 1DE0     		b	.L164
 2758              	.L168:
 686:.\main.c      ****                         }
 687:.\main.c      ****                         else
 688:.\main.c      ****                         {
 689:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2759              		.loc 1 689 0
 2760 0186 624B     		ldr	r3, .L194+4
 2761 0188 181C     		mov	r0, r3
 2762 018a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2763 018e 18E0     		b	.L164
 2764              	.L165:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 62


 690:.\main.c      ****                         }
 691:.\main.c      ****                     }
 692:.\main.c      ****                 }
 693:.\main.c      ****                 else
 694:.\main.c      ****                 {
 695:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2765              		.loc 1 695 0
 2766 0190 3B1C     		mov	r3, r7
 2767 0192 0833     		add	r3, r3, #8
 2768 0194 1A88     		ldrh	r2, [r3]
 2769 0196 FA23     		mov	r3, #250
 2770 0198 DB00     		lsl	r3, r3, #3
 2771 019a 9A42     		cmp	r2, r3
 2772 019c 0CD8     		bhi	.L169
 2773              		.loc 1 695 0 is_stmt 0 discriminator 1
 2774 019e 3B1C     		mov	r3, r7
 2775 01a0 0833     		add	r3, r3, #8
 2776 01a2 1A88     		ldrh	r2, [r3]
 2777 01a4 5E4B     		ldr	r3, .L194+20
 2778 01a6 9A42     		cmp	r2, r3
 2779 01a8 06D9     		bls	.L169
 696:.\main.c      ****                     {
 697:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2780              		.loc 1 697 0 is_stmt 1
 2781 01aa 3B1C     		mov	r3, r7
 2782 01ac 0833     		add	r3, r3, #8
 2783 01ae 1B88     		ldrh	r3, [r3]
 2784 01b0 181C     		mov	r0, r3
 2785 01b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2786 01b6 04E0     		b	.L164
 2787              	.L169:
 698:.\main.c      ****                     }
 699:.\main.c      ****                     else
 700:.\main.c      ****                     {
 701:.\main.c      ****                         ELBW_PWM_WriteCompare(NEUTRAL);
 2788              		.loc 1 701 0
 2789 01b8 554B     		ldr	r3, .L194+4
 2790 01ba 181C     		mov	r0, r3
 2791 01bc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 657:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2792              		.loc 1 657 0
 2793 01c0 65E0     		b	.L170
 2794              	.L164:
 2795 01c2 64E0     		b	.L170
 2796              	.L159:
 702:.\main.c      ****                     }
 703:.\main.c      ****                 }
 704:.\main.c      ****             }
 705:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 706:.\main.c      ****             {
 707:.\main.c      ****                 if(!stop_elb_dn_Read()){
 2797              		.loc 1 707 0
 2798 01c4 FFF7FEFF 		bl	stop_elb_dn_Read
 2799 01c8 031C     		mov	r3, r0
 2800 01ca 002B     		cmp	r3, #0
 2801 01cc 2BD1     		bne	.L171
 708:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) + BOUND_OFFSET;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 63


 2802              		.loc 1 708 0
 2803 01ce 0120     		mov	r0, #1
 2804 01d0 FFF7FEFF 		bl	potFeedback
 2805 01d4 031C     		mov	r3, r0
 2806 01d6 1433     		add	r3, r3, #20
 2807 01d8 1A1C     		mov	r2, r3
 2808 01da 4F4B     		ldr	r3, .L194+12
 2809 01dc 1A60     		str	r2, [r3]
 709:.\main.c      ****                     if (avg < 1500)
 2810              		.loc 1 709 0
 2811 01de 3B1C     		mov	r3, r7
 2812 01e0 0833     		add	r3, r3, #8
 2813 01e2 1A88     		ldrh	r2, [r3]
 2814 01e4 4D4B     		ldr	r3, .L194+16
 2815 01e6 9A42     		cmp	r2, r3
 2816 01e8 04D8     		bhi	.L172
 710:.\main.c      ****                     {
 711:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2817              		.loc 1 711 0
 2818 01ea 494B     		ldr	r3, .L194+4
 2819 01ec 181C     		mov	r0, r3
 2820 01ee FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2821 01f2 4CE0     		b	.L170
 2822              	.L172:
 712:.\main.c      ****                     }
 713:.\main.c      ****                     else
 714:.\main.c      ****                     {
 715:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2823              		.loc 1 715 0
 2824 01f4 3B1C     		mov	r3, r7
 2825 01f6 0833     		add	r3, r3, #8
 2826 01f8 1A88     		ldrh	r2, [r3]
 2827 01fa FA23     		mov	r3, #250
 2828 01fc DB00     		lsl	r3, r3, #3
 2829 01fe 9A42     		cmp	r2, r3
 2830 0200 0CD8     		bhi	.L174
 2831              		.loc 1 715 0 is_stmt 0 discriminator 1
 2832 0202 3B1C     		mov	r3, r7
 2833 0204 0833     		add	r3, r3, #8
 2834 0206 1A88     		ldrh	r2, [r3]
 2835 0208 454B     		ldr	r3, .L194+20
 2836 020a 9A42     		cmp	r2, r3
 2837 020c 06D9     		bls	.L174
 716:.\main.c      ****                         {
 717:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2838              		.loc 1 717 0 is_stmt 1
 2839 020e 3B1C     		mov	r3, r7
 2840 0210 0833     		add	r3, r3, #8
 2841 0212 1B88     		ldrh	r3, [r3]
 2842 0214 181C     		mov	r0, r3
 2843 0216 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2844 021a 38E0     		b	.L170
 2845              	.L174:
 718:.\main.c      ****                         }
 719:.\main.c      ****                         else
 720:.\main.c      ****                         {
 721:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 64


 2846              		.loc 1 721 0
 2847 021c 3C4B     		ldr	r3, .L194+4
 2848 021e 181C     		mov	r0, r3
 2849 0220 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2850 0224 33E0     		b	.L170
 2851              	.L171:
 722:.\main.c      ****                         }
 723:.\main.c      ****                     }
 724:.\main.c      ****                 }
 725:.\main.c      ****                 else if(!stop_elb_up_Read()){
 2852              		.loc 1 725 0
 2853 0226 FFF7FEFF 		bl	stop_elb_up_Read
 2854 022a 031C     		mov	r3, r0
 2855 022c 002B     		cmp	r3, #0
 2856 022e 2BD1     		bne	.L175
 726:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) - BOUND_OFFSET;
 2857              		.loc 1 726 0
 2858 0230 0120     		mov	r0, #1
 2859 0232 FFF7FEFF 		bl	potFeedback
 2860 0236 031C     		mov	r3, r0
 2861 0238 143B     		sub	r3, r3, #20
 2862 023a 1A1C     		mov	r2, r3
 2863 023c 394B     		ldr	r3, .L194+24
 2864 023e 1A60     		str	r2, [r3]
 727:.\main.c      ****                     if(avg > 1500)
 2865              		.loc 1 727 0
 2866 0240 3B1C     		mov	r3, r7
 2867 0242 0833     		add	r3, r3, #8
 2868 0244 1A88     		ldrh	r2, [r3]
 2869 0246 324B     		ldr	r3, .L194+4
 2870 0248 9A42     		cmp	r2, r3
 2871 024a 04D9     		bls	.L176
 728:.\main.c      ****                     {
 729:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2872              		.loc 1 729 0
 2873 024c 304B     		ldr	r3, .L194+4
 2874 024e 181C     		mov	r0, r3
 2875 0250 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2876 0254 1BE0     		b	.L170
 2877              	.L176:
 730:.\main.c      ****                     }
 731:.\main.c      ****                     else
 732:.\main.c      ****                     {
 733:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2878              		.loc 1 733 0
 2879 0256 3B1C     		mov	r3, r7
 2880 0258 0833     		add	r3, r3, #8
 2881 025a 1A88     		ldrh	r2, [r3]
 2882 025c FA23     		mov	r3, #250
 2883 025e DB00     		lsl	r3, r3, #3
 2884 0260 9A42     		cmp	r2, r3
 2885 0262 0CD8     		bhi	.L178
 2886              		.loc 1 733 0 is_stmt 0 discriminator 1
 2887 0264 3B1C     		mov	r3, r7
 2888 0266 0833     		add	r3, r3, #8
 2889 0268 1A88     		ldrh	r2, [r3]
 2890 026a 2D4B     		ldr	r3, .L194+20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 65


 2891 026c 9A42     		cmp	r2, r3
 2892 026e 06D9     		bls	.L178
 734:.\main.c      ****                         {
 735:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2893              		.loc 1 735 0 is_stmt 1
 2894 0270 3B1C     		mov	r3, r7
 2895 0272 0833     		add	r3, r3, #8
 2896 0274 1B88     		ldrh	r3, [r3]
 2897 0276 181C     		mov	r0, r3
 2898 0278 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2899 027c 07E0     		b	.L170
 2900              	.L178:
 736:.\main.c      ****                         }
 737:.\main.c      ****                         else
 738:.\main.c      ****                         {
 739:.\main.c      ****                             //increment error variable
 740:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2901              		.loc 1 740 0
 2902 027e 244B     		ldr	r3, .L194+4
 2903 0280 181C     		mov	r0, r3
 2904 0282 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2905 0286 02E0     		b	.L170
 2906              	.L175:
 741:.\main.c      ****                         }
 742:.\main.c      ****                     }
 743:.\main.c      ****                 }
 744:.\main.c      ****                 else{
 745:.\main.c      ****                     LED_Write(1);
 2907              		.loc 1 745 0
 2908 0288 0120     		mov	r0, #1
 2909 028a FFF7FEFF 		bl	LED_Write
 2910              	.L170:
 746:.\main.c      ****                 }
 747:.\main.c      ****             }
 748:.\main.c      ****             ELBOW_FLAG = 0;
 2911              		.loc 1 748 0
 2912 028e 264B     		ldr	r3, .L194+28
 2913 0290 0022     		mov	r2, #0
 2914 0292 1A70     		strb	r2, [r3]
 749:.\main.c      ****             break;
 2915              		.loc 1 749 0
 2916 0294 18E0     		b	.L153
 2917              	.L152:
 750:.\main.c      ****             
 751:.\main.c      ****         case elbw_wait:
 752:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2918              		.loc 1 752 0
 2919 0296 3B1C     		mov	r3, r7
 2920 0298 0C33     		add	r3, r3, #12
 2921 029a 1A88     		ldrh	r2, [r3]
 2922 029c 1E4B     		ldr	r3, .L194+12
 2923 029e 1B68     		ldr	r3, [r3]
 2924 02a0 9A42     		cmp	r2, r3
 2925 02a2 06D9     		bls	.L179
 2926              		.loc 1 752 0 is_stmt 0 discriminator 1
 2927 02a4 3B1C     		mov	r3, r7
 2928 02a6 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 66


 2929 02a8 1A88     		ldrh	r2, [r3]
 2930 02aa 1E4B     		ldr	r3, .L194+24
 2931 02ac 1B68     		ldr	r3, [r3]
 2932 02ae 9A42     		cmp	r2, r3
 2933 02b0 04D3     		bcc	.L180
 2934              	.L179:
 753:.\main.c      ****             {
 754:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2935              		.loc 1 754 0 is_stmt 1
 2936 02b2 174B     		ldr	r3, .L194+4
 2937 02b4 181C     		mov	r0, r3
 2938 02b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 755:.\main.c      ****             }
 756:.\main.c      ****             break;
 2939              		.loc 1 756 0
 2940 02ba 05E0     		b	.L153
 2941              	.L180:
 2942 02bc 04E0     		b	.L153
 2943              	.L147:
 757:.\main.c      ****                         
 758:.\main.c      ****         default:
 759:.\main.c      ****             elbow_state = elbw_start;
 2944              		.loc 1 759 0
 2945 02be 134B     		ldr	r3, .L194
 2946 02c0 0022     		mov	r2, #0
 2947 02c2 1A70     		strb	r2, [r3]
 760:.\main.c      ****             break;
 2948              		.loc 1 760 0
 2949 02c4 00E0     		b	.L153
 2950              	.L193:
 628:.\main.c      ****             break;
 2951              		.loc 1 628 0
 2952 02c6 C046     		mov	r8, r8
 2953              	.L153:
 761:.\main.c      ****     }
 762:.\main.c      ****     
 763:.\main.c      ****     switch(elbow_state){ //transitions
 2954              		.loc 1 763 0
 2955 02c8 104B     		ldr	r3, .L194
 2956 02ca 1B78     		ldrb	r3, [r3]
 2957 02cc 012B     		cmp	r3, #1
 2958 02ce 0CD0     		beq	.L182
 2959 02d0 02DC     		bgt	.L183
 2960 02d2 002B     		cmp	r3, #0
 2961 02d4 05D0     		beq	.L184
 2962 02d6 35E0     		b	.L181
 2963              	.L183:
 2964 02d8 022B     		cmp	r3, #2
 2965 02da 0AD0     		beq	.L185
 2966 02dc 032B     		cmp	r3, #3
 2967 02de 25D0     		beq	.L186
 2968 02e0 30E0     		b	.L181
 2969              	.L184:
 764:.\main.c      ****         case elbw_start:
 765:.\main.c      ****             elbow_state = elbw_init;
 2970              		.loc 1 765 0
 2971 02e2 0A4B     		ldr	r3, .L194
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 67


 2972 02e4 0122     		mov	r2, #1
 2973 02e6 1A70     		strb	r2, [r3]
 766:.\main.c      ****             break;
 2974              		.loc 1 766 0
 2975 02e8 30E0     		b	.L187
 2976              	.L182:
 767:.\main.c      ****         
 768:.\main.c      ****         case elbw_init:
 769:.\main.c      ****             elbow_state = elbw_wait;
 2977              		.loc 1 769 0
 2978 02ea 084B     		ldr	r3, .L194
 2979 02ec 0322     		mov	r2, #3
 2980 02ee 1A70     		strb	r2, [r3]
 770:.\main.c      ****             break;
 2981              		.loc 1 770 0
 2982 02f0 2CE0     		b	.L187
 2983              	.L185:
 771:.\main.c      ****         
 772:.\main.c      ****         case elbw_execute:
 773:.\main.c      ****             if(ELBOW_FLAG)
 2984              		.loc 1 773 0
 2985 02f2 0D4B     		ldr	r3, .L194+28
 2986 02f4 1B78     		ldrb	r3, [r3]
 2987 02f6 002B     		cmp	r3, #0
 2988 02f8 03D0     		beq	.L188
 774:.\main.c      ****             {
 775:.\main.c      ****                 elbow_state = elbw_execute;
 2989              		.loc 1 775 0
 2990 02fa 044B     		ldr	r3, .L194
 2991 02fc 0222     		mov	r2, #2
 2992 02fe 1A70     		strb	r2, [r3]
 776:.\main.c      ****             }
 777:.\main.c      ****             else
 778:.\main.c      ****             {
 779:.\main.c      ****                 elbow_state = elbw_wait;
 780:.\main.c      ****             }
 781:.\main.c      ****             break;
 2993              		.loc 1 781 0
 2994 0300 24E0     		b	.L187
 2995              	.L188:
 779:.\main.c      ****                 elbow_state = elbw_wait;
 2996              		.loc 1 779 0
 2997 0302 024B     		ldr	r3, .L194
 2998 0304 0322     		mov	r2, #3
 2999 0306 1A70     		strb	r2, [r3]
 3000              		.loc 1 781 0
 3001 0308 20E0     		b	.L187
 3002              	.L195:
 3003 030a C046     		.align	2
 3004              	.L194:
 3005 030c 00000000 		.word	elbow_state
 3006 0310 DC050000 		.word	1500
 3007 0314 00000000 		.word	data_array
 3008 0318 00000000 		.word	ELBOW_LOWER_BOUND
 3009 031c DB050000 		.word	1499
 3010 0320 E7030000 		.word	999
 3011 0324 00000000 		.word	ELBOW_UPPER_BOUND
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 68


 3012 0328 00000000 		.word	ELBOW_FLAG
 3013              	.L186:
 782:.\main.c      ****         
 783:.\main.c      ****         case elbw_wait:
 784:.\main.c      ****             if(ELBOW_FLAG)
 3014              		.loc 1 784 0
 3015 032c 0A4B     		ldr	r3, .L196
 3016 032e 1B78     		ldrb	r3, [r3]
 3017 0330 002B     		cmp	r3, #0
 3018 0332 03D0     		beq	.L190
 785:.\main.c      ****             {
 786:.\main.c      ****                 elbow_state = elbw_execute;
 3019              		.loc 1 786 0
 3020 0334 094B     		ldr	r3, .L196+4
 3021 0336 0222     		mov	r2, #2
 3022 0338 1A70     		strb	r2, [r3]
 787:.\main.c      ****             }
 788:.\main.c      ****             else
 789:.\main.c      ****             {
 790:.\main.c      ****                 elbow_state = elbw_wait; 
 791:.\main.c      ****             }
 792:.\main.c      ****             break;
 3023              		.loc 1 792 0
 3024 033a 07E0     		b	.L187
 3025              	.L190:
 790:.\main.c      ****                 elbow_state = elbw_wait; 
 3026              		.loc 1 790 0
 3027 033c 074B     		ldr	r3, .L196+4
 3028 033e 0322     		mov	r2, #3
 3029 0340 1A70     		strb	r2, [r3]
 3030              		.loc 1 792 0
 3031 0342 03E0     		b	.L187
 3032              	.L181:
 793:.\main.c      ****             
 794:.\main.c      ****         default:
 795:.\main.c      ****             elbow_state = elbw_start;
 3033              		.loc 1 795 0
 3034 0344 054B     		ldr	r3, .L196+4
 3035 0346 0022     		mov	r2, #0
 3036 0348 1A70     		strb	r2, [r3]
 796:.\main.c      ****             break;
 3037              		.loc 1 796 0
 3038 034a C046     		mov	r8, r8
 3039              	.L187:
 797:.\main.c      ****     }  
 798:.\main.c      ****     return elbw_arr_cspot;
 3040              		.loc 1 798 0
 3041 034c FB1D     		add	r3, r7, #7
 3042 034e 1B78     		ldrb	r3, [r3]
 799:.\main.c      **** }
 3043              		.loc 1 799 0
 3044 0350 181C     		mov	r0, r3
 3045 0352 BD46     		mov	sp, r7
 3046 0354 05B0     		add	sp, sp, #20
 3047              		@ sp needed
 3048 0356 90BD     		pop	{r4, r7, pc}
 3049              	.L197:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 69


 3050              		.align	2
 3051              	.L196:
 3052 0358 00000000 		.word	ELBOW_FLAG
 3053 035c 00000000 		.word	elbow_state
 3054              		.cfi_endproc
 3055              	.LFE50:
 3056              		.size	elbow, .-elbow
 3057              		.comm	shoulder_state,1,1
 3058              		.section	.text.shoulder,"ax",%progbits
 3059              		.align	2
 3060              		.global	shoulder
 3061              		.code	16
 3062              		.thumb_func
 3063              		.type	shoulder, %function
 3064              	shoulder:
 3065              	.LFB51:
 800:.\main.c      **** 
 801:.\main.c      **** //control the shoulder
 802:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 803:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 804:.\main.c      **** { 
 3066              		.loc 1 804 0
 3067              		.cfi_startproc
 3068 0000 90B5     		push	{r4, r7, lr}
 3069              		.cfi_def_cfa_offset 12
 3070              		.cfi_offset 4, -12
 3071              		.cfi_offset 7, -8
 3072              		.cfi_offset 14, -4
 3073 0002 85B0     		sub	sp, sp, #20
 3074              		.cfi_def_cfa_offset 32
 3075 0004 00AF     		add	r7, sp, #0
 3076              		.cfi_def_cfa_register 7
 3077 0006 021C     		mov	r2, r0
 3078 0008 3960     		str	r1, [r7]
 3079 000a FB1D     		add	r3, r7, #7
 3080 000c 1A70     		strb	r2, [r3]
 805:.\main.c      ****     //take instruction from data_array
 806:.\main.c      ****     //smooth input
 807:.\main.c      ****     //actuate the shoulder using PWM
 808:.\main.c      ****     //get feedback
 809:.\main.c      ****     uint8 i;
 810:.\main.c      ****     uint16 avg;
 811:.\main.c      ****     uint16 command;
 812:.\main.c      ****     
 813:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 3081              		.loc 1 813 0
 3082 000e 3C1C     		mov	r4, r7
 3083 0010 0C34     		add	r4, r4, #12
 3084 0012 0020     		mov	r0, #0
 3085 0014 FFF7FEFF 		bl	potFeedback
 3086 0018 031C     		mov	r3, r0
 3087 001a 2380     		strh	r3, [r4]
 814:.\main.c      ****     
 815:.\main.c      ****     switch(shoulder_state){ //actions
 3088              		.loc 1 815 0
 3089 001c BB4B     		ldr	r3, .L246
 3090 001e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 70


 3091 0020 012B     		cmp	r3, #1
 3092 0022 0AD0     		beq	.L200
 3093 0024 03DC     		bgt	.L201
 3094 0026 002B     		cmp	r3, #0
 3095 0028 00D1     		bne	.LCB2757
 3096 002a 4CE1     		b	.L245	@long jump
 3097              	.LCB2757:
 3098 002c 47E1     		b	.L199
 3099              	.L201:
 3100 002e 022B     		cmp	r3, #2
 3101 0030 24D0     		beq	.L203
 3102 0032 032B     		cmp	r3, #3
 3103 0034 00D1     		bne	.LCB2765
 3104 0036 2EE1     		b	.L204	@long jump
 3105              	.LCB2765:
 3106 0038 41E1     		b	.L199
 3107              	.L200:
 816:.\main.c      ****         case shldr_start:
 817:.\main.c      ****             break;
 818:.\main.c      **** 
 819:.\main.c      ****         case shldr_init:
 820:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3108              		.loc 1 820 0
 3109 003a 3B1C     		mov	r3, r7
 3110 003c 0F33     		add	r3, r3, #15
 3111 003e 0022     		mov	r2, #0
 3112 0040 1A70     		strb	r2, [r3]
 3113 0042 0EE0     		b	.L206
 3114              	.L207:
 821:.\main.c      ****             {
 822:.\main.c      ****                 shoulder_array[i] = 1500;
 3115              		.loc 1 822 0 discriminator 2
 3116 0044 3B1C     		mov	r3, r7
 3117 0046 0F33     		add	r3, r3, #15
 3118 0048 1B78     		ldrb	r3, [r3]
 3119 004a 5B00     		lsl	r3, r3, #1
 3120 004c 3A68     		ldr	r2, [r7]
 3121 004e D318     		add	r3, r2, r3
 3122 0050 AF4A     		ldr	r2, .L246+4
 3123 0052 1A80     		strh	r2, [r3]
 820:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3124              		.loc 1 820 0 discriminator 2
 3125 0054 3B1C     		mov	r3, r7
 3126 0056 0F33     		add	r3, r3, #15
 3127 0058 1A78     		ldrb	r2, [r3]
 3128 005a 3B1C     		mov	r3, r7
 3129 005c 0F33     		add	r3, r3, #15
 3130 005e 0132     		add	r2, r2, #1
 3131 0060 1A70     		strb	r2, [r3]
 3132              	.L206:
 820:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3133              		.loc 1 820 0 is_stmt 0 discriminator 1
 3134 0062 3B1C     		mov	r3, r7
 3135 0064 0F33     		add	r3, r3, #15
 3136 0066 1B78     		ldrb	r3, [r3]
 3137 0068 132B     		cmp	r3, #19
 3138 006a EBD9     		bls	.L207
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 71


 823:.\main.c      ****             }
 824:.\main.c      ****             shldr_arr_cspot = 0;
 3139              		.loc 1 824 0 is_stmt 1
 3140 006c FB1D     		add	r3, r7, #7
 3141 006e 0022     		mov	r2, #0
 3142 0070 1A70     		strb	r2, [r3]
 825:.\main.c      ****                         
 826:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 3143              		.loc 1 826 0
 3144 0072 A74B     		ldr	r3, .L246+4
 3145 0074 181C     		mov	r0, r3
 3146 0076 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 827:.\main.c      ****             break;
 3147              		.loc 1 827 0
 3148 007a 25E1     		b	.L205
 3149              	.L203:
 828:.\main.c      **** 
 829:.\main.c      ****         case shldr_execute:
 830:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 3150              		.loc 1 830 0
 3151 007c 3C1C     		mov	r4, r7
 3152 007e 0A34     		add	r4, r4, #10
 3153 0080 A44B     		ldr	r3, .L246+8
 3154 0082 181C     		mov	r0, r3
 3155 0084 0C21     		mov	r1, #12
 3156 0086 0D22     		mov	r2, #13
 3157 0088 FFF7FEFF 		bl	make_command
 3158 008c 031C     		mov	r3, r0
 3159 008e 2380     		strh	r3, [r4]
 831:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 3160              		.loc 1 831 0
 3161 0090 FB1D     		add	r3, r7, #7
 3162 0092 1B78     		ldrb	r3, [r3]
 3163 0094 5B00     		lsl	r3, r3, #1
 3164 0096 3A68     		ldr	r2, [r7]
 3165 0098 D318     		add	r3, r2, r3
 3166 009a 3A1C     		mov	r2, r7
 3167 009c 0A32     		add	r2, r2, #10
 3168 009e 1288     		ldrh	r2, [r2]
 3169 00a0 1A80     		strh	r2, [r3]
 832:.\main.c      ****         
 833:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 3170              		.loc 1 833 0
 3171 00a2 FB1D     		add	r3, r7, #7
 3172 00a4 1B78     		ldrb	r3, [r3]
 3173 00a6 122B     		cmp	r3, #18
 3174 00a8 05D8     		bhi	.L208
 834:.\main.c      ****             {
 835:.\main.c      ****                 shldr_arr_cspot++;
 3175              		.loc 1 835 0
 3176 00aa FB1D     		add	r3, r7, #7
 3177 00ac 1A78     		ldrb	r2, [r3]
 3178 00ae FB1D     		add	r3, r7, #7
 3179 00b0 0132     		add	r2, r2, #1
 3180 00b2 1A70     		strb	r2, [r3]
 3181 00b4 02E0     		b	.L209
 3182              	.L208:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 72


 836:.\main.c      ****             }
 837:.\main.c      ****             else
 838:.\main.c      ****             {
 839:.\main.c      ****                 shldr_arr_cspot = 0;
 3183              		.loc 1 839 0
 3184 00b6 FB1D     		add	r3, r7, #7
 3185 00b8 0022     		mov	r2, #0
 3186 00ba 1A70     		strb	r2, [r3]
 3187              	.L209:
 840:.\main.c      ****             }
 841:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 3188              		.loc 1 841 0
 3189 00bc 3C1C     		mov	r4, r7
 3190 00be 0834     		add	r4, r4, #8
 3191 00c0 3B68     		ldr	r3, [r7]
 3192 00c2 181C     		mov	r0, r3
 3193 00c4 1421     		mov	r1, #20
 3194 00c6 FFF7FEFF 		bl	average
 3195 00ca 031C     		mov	r3, r0
 3196 00cc 2380     		strh	r3, [r4]
 842:.\main.c      ****             
 843:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 3197              		.loc 1 843 0
 3198 00ce FFF7FEFF 		bl	stop_shdr_dn_Read
 3199 00d2 031C     		mov	r3, r0
 3200 00d4 002B     		cmp	r3, #0
 3201 00d6 05D0     		beq	.L210
 3202              		.loc 1 843 0 is_stmt 0 discriminator 1
 3203 00d8 FFF7FEFF 		bl	stop_shdr_up_Read
 3204 00dc 031C     		mov	r3, r0
 3205 00de 002B     		cmp	r3, #0
 3206 00e0 00D0     		beq	.LCB2861
 3207 00e2 6FE0     		b	.L211	@long jump
 3208              	.LCB2861:
 3209              	.L210:
 844:.\main.c      ****             {
 845:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3210              		.loc 1 845 0 is_stmt 1
 3211 00e4 3B1C     		mov	r3, r7
 3212 00e6 0C33     		add	r3, r3, #12
 3213 00e8 1A88     		ldrh	r2, [r3]
 3214 00ea 8B4B     		ldr	r3, .L246+12
 3215 00ec 1B68     		ldr	r3, [r3]
 3216 00ee 9A42     		cmp	r2, r3
 3217 00f0 23D8     		bhi	.L212
 846:.\main.c      ****                 {
 847:.\main.c      ****                     if (avg < 1500)
 3218              		.loc 1 847 0
 3219 00f2 3B1C     		mov	r3, r7
 3220 00f4 0833     		add	r3, r3, #8
 3221 00f6 1A88     		ldrh	r2, [r3]
 3222 00f8 884B     		ldr	r3, .L246+16
 3223 00fa 9A42     		cmp	r2, r3
 3224 00fc 04D8     		bhi	.L213
 848:.\main.c      ****                     {
 849:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3225              		.loc 1 849 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 73


 3226 00fe 844B     		ldr	r3, .L246+4
 3227 0100 181C     		mov	r0, r3
 3228 0102 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3229 0106 5CE0     		b	.L216
 3230              	.L213:
 850:.\main.c      ****                     }
 851:.\main.c      ****                     else
 852:.\main.c      ****                     {
 853:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3231              		.loc 1 853 0
 3232 0108 3B1C     		mov	r3, r7
 3233 010a 0833     		add	r3, r3, #8
 3234 010c 1A88     		ldrh	r2, [r3]
 3235 010e FA23     		mov	r3, #250
 3236 0110 DB00     		lsl	r3, r3, #3
 3237 0112 9A42     		cmp	r2, r3
 3238 0114 0CD8     		bhi	.L215
 3239              		.loc 1 853 0 is_stmt 0 discriminator 1
 3240 0116 3B1C     		mov	r3, r7
 3241 0118 0833     		add	r3, r3, #8
 3242 011a 1A88     		ldrh	r2, [r3]
 3243 011c 804B     		ldr	r3, .L246+20
 3244 011e 9A42     		cmp	r2, r3
 3245 0120 06D9     		bls	.L215
 854:.\main.c      ****                         {
 855:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3246              		.loc 1 855 0 is_stmt 1
 3247 0122 3B1C     		mov	r3, r7
 3248 0124 0833     		add	r3, r3, #8
 3249 0126 1B88     		ldrh	r3, [r3]
 3250 0128 181C     		mov	r0, r3
 3251 012a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3252 012e 48E0     		b	.L216
 3253              	.L215:
 856:.\main.c      ****                         }
 857:.\main.c      ****                         else
 858:.\main.c      ****                         {
 859:.\main.c      ****                             //increment error variable
 860:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3254              		.loc 1 860 0
 3255 0130 774B     		ldr	r3, .L246+4
 3256 0132 181C     		mov	r0, r3
 3257 0134 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3258 0138 43E0     		b	.L216
 3259              	.L212:
 861:.\main.c      ****                         }
 862:.\main.c      ****                     }
 863:.\main.c      ****                 }
 864:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 3260              		.loc 1 864 0
 3261 013a 3B1C     		mov	r3, r7
 3262 013c 0C33     		add	r3, r3, #12
 3263 013e 1A88     		ldrh	r2, [r3]
 3264 0140 784B     		ldr	r3, .L246+24
 3265 0142 1B68     		ldr	r3, [r3]
 3266 0144 9A42     		cmp	r2, r3
 3267 0146 23D3     		bcc	.L217
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 74


 865:.\main.c      ****                 {
 866:.\main.c      ****                     if(avg > 1500)
 3268              		.loc 1 866 0
 3269 0148 3B1C     		mov	r3, r7
 3270 014a 0833     		add	r3, r3, #8
 3271 014c 1A88     		ldrh	r2, [r3]
 3272 014e 704B     		ldr	r3, .L246+4
 3273 0150 9A42     		cmp	r2, r3
 3274 0152 04D9     		bls	.L218
 867:.\main.c      ****                     {
 868:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3275              		.loc 1 868 0
 3276 0154 6E4B     		ldr	r3, .L246+4
 3277 0156 181C     		mov	r0, r3
 3278 0158 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3279 015c 31E0     		b	.L216
 3280              	.L218:
 869:.\main.c      ****                     }
 870:.\main.c      ****                     else
 871:.\main.c      ****                     {
 872:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3281              		.loc 1 872 0
 3282 015e 3B1C     		mov	r3, r7
 3283 0160 0833     		add	r3, r3, #8
 3284 0162 1A88     		ldrh	r2, [r3]
 3285 0164 FA23     		mov	r3, #250
 3286 0166 DB00     		lsl	r3, r3, #3
 3287 0168 9A42     		cmp	r2, r3
 3288 016a 0CD8     		bhi	.L220
 3289              		.loc 1 872 0 is_stmt 0 discriminator 1
 3290 016c 3B1C     		mov	r3, r7
 3291 016e 0833     		add	r3, r3, #8
 3292 0170 1A88     		ldrh	r2, [r3]
 3293 0172 6B4B     		ldr	r3, .L246+20
 3294 0174 9A42     		cmp	r2, r3
 3295 0176 06D9     		bls	.L220
 873:.\main.c      ****                         {
 874:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3296              		.loc 1 874 0 is_stmt 1
 3297 0178 3B1C     		mov	r3, r7
 3298 017a 0833     		add	r3, r3, #8
 3299 017c 1B88     		ldrh	r3, [r3]
 3300 017e 181C     		mov	r0, r3
 3301 0180 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3302 0184 1DE0     		b	.L216
 3303              	.L220:
 875:.\main.c      ****                         }
 876:.\main.c      ****                         else
 877:.\main.c      ****                         {
 878:.\main.c      ****                             //throw error
 879:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3304              		.loc 1 879 0
 3305 0186 624B     		ldr	r3, .L246+4
 3306 0188 181C     		mov	r0, r3
 3307 018a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3308 018e 18E0     		b	.L216
 3309              	.L217:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 75


 880:.\main.c      ****                         }
 881:.\main.c      ****                     }
 882:.\main.c      ****                 }
 883:.\main.c      ****                 else
 884:.\main.c      ****                 {
 885:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3310              		.loc 1 885 0
 3311 0190 3B1C     		mov	r3, r7
 3312 0192 0833     		add	r3, r3, #8
 3313 0194 1A88     		ldrh	r2, [r3]
 3314 0196 FA23     		mov	r3, #250
 3315 0198 DB00     		lsl	r3, r3, #3
 3316 019a 9A42     		cmp	r2, r3
 3317 019c 0CD8     		bhi	.L221
 3318              		.loc 1 885 0 is_stmt 0 discriminator 1
 3319 019e 3B1C     		mov	r3, r7
 3320 01a0 0833     		add	r3, r3, #8
 3321 01a2 1A88     		ldrh	r2, [r3]
 3322 01a4 5E4B     		ldr	r3, .L246+20
 3323 01a6 9A42     		cmp	r2, r3
 3324 01a8 06D9     		bls	.L221
 886:.\main.c      ****                     {
 887:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3325              		.loc 1 887 0 is_stmt 1
 3326 01aa 3B1C     		mov	r3, r7
 3327 01ac 0833     		add	r3, r3, #8
 3328 01ae 1B88     		ldrh	r3, [r3]
 3329 01b0 181C     		mov	r0, r3
 3330 01b2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3331 01b6 04E0     		b	.L216
 3332              	.L221:
 888:.\main.c      ****                     }
 889:.\main.c      ****                     else
 890:.\main.c      ****                     {
 891:.\main.c      ****                         //throw error
 892:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3333              		.loc 1 892 0
 3334 01b8 554B     		ldr	r3, .L246+4
 3335 01ba 181C     		mov	r0, r3
 3336 01bc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 845:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3337              		.loc 1 845 0
 3338 01c0 65E0     		b	.L222
 3339              	.L216:
 3340 01c2 64E0     		b	.L222
 3341              	.L211:
 893:.\main.c      ****                     }
 894:.\main.c      ****                 }
 895:.\main.c      ****             }
 896:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 897:.\main.c      ****             {
 898:.\main.c      ****                 if(!stop_elb_dn_Read()){
 3342              		.loc 1 898 0
 3343 01c4 FFF7FEFF 		bl	stop_elb_dn_Read
 3344 01c8 031C     		mov	r3, r0
 3345 01ca 002B     		cmp	r3, #0
 3346 01cc 2BD1     		bne	.L223
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 76


 899:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) + BOUND_OFFSET;
 3347              		.loc 1 899 0
 3348 01ce 0020     		mov	r0, #0
 3349 01d0 FFF7FEFF 		bl	potFeedback
 3350 01d4 031C     		mov	r3, r0
 3351 01d6 1433     		add	r3, r3, #20
 3352 01d8 1A1C     		mov	r2, r3
 3353 01da 4F4B     		ldr	r3, .L246+12
 3354 01dc 1A60     		str	r2, [r3]
 900:.\main.c      ****                     if (avg < 1500)
 3355              		.loc 1 900 0
 3356 01de 3B1C     		mov	r3, r7
 3357 01e0 0833     		add	r3, r3, #8
 3358 01e2 1A88     		ldrh	r2, [r3]
 3359 01e4 4D4B     		ldr	r3, .L246+16
 3360 01e6 9A42     		cmp	r2, r3
 3361 01e8 04D8     		bhi	.L224
 901:.\main.c      ****                     {
 902:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3362              		.loc 1 902 0
 3363 01ea 494B     		ldr	r3, .L246+4
 3364 01ec 181C     		mov	r0, r3
 3365 01ee FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3366 01f2 4CE0     		b	.L222
 3367              	.L224:
 903:.\main.c      ****                     }
 904:.\main.c      ****                     else
 905:.\main.c      ****                     {
 906:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3368              		.loc 1 906 0
 3369 01f4 3B1C     		mov	r3, r7
 3370 01f6 0833     		add	r3, r3, #8
 3371 01f8 1A88     		ldrh	r2, [r3]
 3372 01fa FA23     		mov	r3, #250
 3373 01fc DB00     		lsl	r3, r3, #3
 3374 01fe 9A42     		cmp	r2, r3
 3375 0200 0CD8     		bhi	.L226
 3376              		.loc 1 906 0 is_stmt 0 discriminator 1
 3377 0202 3B1C     		mov	r3, r7
 3378 0204 0833     		add	r3, r3, #8
 3379 0206 1A88     		ldrh	r2, [r3]
 3380 0208 454B     		ldr	r3, .L246+20
 3381 020a 9A42     		cmp	r2, r3
 3382 020c 06D9     		bls	.L226
 907:.\main.c      ****                         {
 908:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3383              		.loc 1 908 0 is_stmt 1
 3384 020e 3B1C     		mov	r3, r7
 3385 0210 0833     		add	r3, r3, #8
 3386 0212 1B88     		ldrh	r3, [r3]
 3387 0214 181C     		mov	r0, r3
 3388 0216 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3389 021a 38E0     		b	.L222
 3390              	.L226:
 909:.\main.c      ****                         }
 910:.\main.c      ****                         else
 911:.\main.c      ****                         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 77


 912:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3391              		.loc 1 912 0
 3392 021c 3C4B     		ldr	r3, .L246+4
 3393 021e 181C     		mov	r0, r3
 3394 0220 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3395 0224 33E0     		b	.L222
 3396              	.L223:
 913:.\main.c      ****                         }
 914:.\main.c      ****                     }
 915:.\main.c      ****                 }
 916:.\main.c      ****                 else if(!stop_elb_up_Read()){
 3397              		.loc 1 916 0
 3398 0226 FFF7FEFF 		bl	stop_elb_up_Read
 3399 022a 031C     		mov	r3, r0
 3400 022c 002B     		cmp	r3, #0
 3401 022e 2BD1     		bne	.L227
 917:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) - BOUND_OFFSET;
 3402              		.loc 1 917 0
 3403 0230 0020     		mov	r0, #0
 3404 0232 FFF7FEFF 		bl	potFeedback
 3405 0236 031C     		mov	r3, r0
 3406 0238 143B     		sub	r3, r3, #20
 3407 023a 1A1C     		mov	r2, r3
 3408 023c 394B     		ldr	r3, .L246+24
 3409 023e 1A60     		str	r2, [r3]
 918:.\main.c      ****                     if(avg > 1500)
 3410              		.loc 1 918 0
 3411 0240 3B1C     		mov	r3, r7
 3412 0242 0833     		add	r3, r3, #8
 3413 0244 1A88     		ldrh	r2, [r3]
 3414 0246 324B     		ldr	r3, .L246+4
 3415 0248 9A42     		cmp	r2, r3
 3416 024a 04D9     		bls	.L228
 919:.\main.c      ****                     {
 920:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3417              		.loc 1 920 0
 3418 024c 304B     		ldr	r3, .L246+4
 3419 024e 181C     		mov	r0, r3
 3420 0250 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3421 0254 1BE0     		b	.L222
 3422              	.L228:
 921:.\main.c      ****                     }
 922:.\main.c      ****                     else
 923:.\main.c      ****                     {
 924:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3423              		.loc 1 924 0
 3424 0256 3B1C     		mov	r3, r7
 3425 0258 0833     		add	r3, r3, #8
 3426 025a 1A88     		ldrh	r2, [r3]
 3427 025c FA23     		mov	r3, #250
 3428 025e DB00     		lsl	r3, r3, #3
 3429 0260 9A42     		cmp	r2, r3
 3430 0262 0CD8     		bhi	.L230
 3431              		.loc 1 924 0 is_stmt 0 discriminator 1
 3432 0264 3B1C     		mov	r3, r7
 3433 0266 0833     		add	r3, r3, #8
 3434 0268 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 78


 3435 026a 2D4B     		ldr	r3, .L246+20
 3436 026c 9A42     		cmp	r2, r3
 3437 026e 06D9     		bls	.L230
 925:.\main.c      ****                         {
 926:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3438              		.loc 1 926 0 is_stmt 1
 3439 0270 3B1C     		mov	r3, r7
 3440 0272 0833     		add	r3, r3, #8
 3441 0274 1B88     		ldrh	r3, [r3]
 3442 0276 181C     		mov	r0, r3
 3443 0278 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3444 027c 07E0     		b	.L222
 3445              	.L230:
 927:.\main.c      ****                         }
 928:.\main.c      ****                         else
 929:.\main.c      ****                         {
 930:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3446              		.loc 1 930 0
 3447 027e 244B     		ldr	r3, .L246+4
 3448 0280 181C     		mov	r0, r3
 3449 0282 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3450 0286 02E0     		b	.L222
 3451              	.L227:
 931:.\main.c      ****                         }
 932:.\main.c      ****                     }
 933:.\main.c      ****                 }
 934:.\main.c      ****                 else{
 935:.\main.c      ****                     LED_Write(1);
 3452              		.loc 1 935 0
 3453 0288 0120     		mov	r0, #1
 3454 028a FFF7FEFF 		bl	LED_Write
 3455              	.L222:
 936:.\main.c      ****                 }
 937:.\main.c      ****             }
 938:.\main.c      ****             SHOULDER_FLAG = 0;
 3456              		.loc 1 938 0
 3457 028e 264B     		ldr	r3, .L246+28
 3458 0290 0022     		mov	r2, #0
 3459 0292 1A70     		strb	r2, [r3]
 939:.\main.c      ****             break;
 3460              		.loc 1 939 0
 3461 0294 18E0     		b	.L205
 3462              	.L204:
 940:.\main.c      ****             
 941:.\main.c      ****         case shldr_wait:
 942:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3463              		.loc 1 942 0
 3464 0296 3B1C     		mov	r3, r7
 3465 0298 0C33     		add	r3, r3, #12
 3466 029a 1A88     		ldrh	r2, [r3]
 3467 029c 1E4B     		ldr	r3, .L246+12
 3468 029e 1B68     		ldr	r3, [r3]
 3469 02a0 9A42     		cmp	r2, r3
 3470 02a2 06D9     		bls	.L231
 3471              		.loc 1 942 0 is_stmt 0 discriminator 1
 3472 02a4 3B1C     		mov	r3, r7
 3473 02a6 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 79


 3474 02a8 1A88     		ldrh	r2, [r3]
 3475 02aa 1E4B     		ldr	r3, .L246+24
 3476 02ac 1B68     		ldr	r3, [r3]
 3477 02ae 9A42     		cmp	r2, r3
 3478 02b0 04D3     		bcc	.L232
 3479              	.L231:
 943:.\main.c      ****             {
 944:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3480              		.loc 1 944 0 is_stmt 1
 3481 02b2 174B     		ldr	r3, .L246+4
 3482 02b4 181C     		mov	r0, r3
 3483 02b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 945:.\main.c      ****             }
 946:.\main.c      ****             break;
 3484              		.loc 1 946 0
 3485 02ba 05E0     		b	.L205
 3486              	.L232:
 3487 02bc 04E0     		b	.L205
 3488              	.L199:
 947:.\main.c      ****                         
 948:.\main.c      ****         default:
 949:.\main.c      ****             shoulder_state = shldr_start;
 3489              		.loc 1 949 0
 3490 02be 134B     		ldr	r3, .L246
 3491 02c0 0022     		mov	r2, #0
 3492 02c2 1A70     		strb	r2, [r3]
 950:.\main.c      ****             break;
 3493              		.loc 1 950 0
 3494 02c4 00E0     		b	.L205
 3495              	.L245:
 817:.\main.c      ****             break;
 3496              		.loc 1 817 0
 3497 02c6 C046     		mov	r8, r8
 3498              	.L205:
 951:.\main.c      ****     }
 952:.\main.c      ****     
 953:.\main.c      ****     switch(shoulder_state){ //transitions
 3499              		.loc 1 953 0
 3500 02c8 104B     		ldr	r3, .L246
 3501 02ca 1B78     		ldrb	r3, [r3]
 3502 02cc 012B     		cmp	r3, #1
 3503 02ce 0CD0     		beq	.L234
 3504 02d0 02DC     		bgt	.L235
 3505 02d2 002B     		cmp	r3, #0
 3506 02d4 05D0     		beq	.L236
 3507 02d6 35E0     		b	.L233
 3508              	.L235:
 3509 02d8 022B     		cmp	r3, #2
 3510 02da 0AD0     		beq	.L237
 3511 02dc 032B     		cmp	r3, #3
 3512 02de 25D0     		beq	.L238
 3513 02e0 30E0     		b	.L233
 3514              	.L236:
 954:.\main.c      ****         case shldr_start:
 955:.\main.c      ****             shoulder_state = shldr_init;
 3515              		.loc 1 955 0
 3516 02e2 0A4B     		ldr	r3, .L246
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 80


 3517 02e4 0122     		mov	r2, #1
 3518 02e6 1A70     		strb	r2, [r3]
 956:.\main.c      ****             break;
 3519              		.loc 1 956 0
 3520 02e8 30E0     		b	.L239
 3521              	.L234:
 957:.\main.c      ****         
 958:.\main.c      ****         case shldr_init:
 959:.\main.c      ****             shoulder_state = shldr_wait;
 3522              		.loc 1 959 0
 3523 02ea 084B     		ldr	r3, .L246
 3524 02ec 0322     		mov	r2, #3
 3525 02ee 1A70     		strb	r2, [r3]
 960:.\main.c      ****             break;
 3526              		.loc 1 960 0
 3527 02f0 2CE0     		b	.L239
 3528              	.L237:
 961:.\main.c      ****         
 962:.\main.c      ****         case shldr_execute:
 963:.\main.c      ****             if(SHOULDER_FLAG)
 3529              		.loc 1 963 0
 3530 02f2 0D4B     		ldr	r3, .L246+28
 3531 02f4 1B78     		ldrb	r3, [r3]
 3532 02f6 002B     		cmp	r3, #0
 3533 02f8 03D0     		beq	.L240
 964:.\main.c      ****             {
 965:.\main.c      ****                 shoulder_state = shldr_execute;
 3534              		.loc 1 965 0
 3535 02fa 044B     		ldr	r3, .L246
 3536 02fc 0222     		mov	r2, #2
 3537 02fe 1A70     		strb	r2, [r3]
 966:.\main.c      ****             }
 967:.\main.c      ****             else
 968:.\main.c      ****             {
 969:.\main.c      ****                 shoulder_state = shldr_wait;
 970:.\main.c      ****             }
 971:.\main.c      ****             break;
 3538              		.loc 1 971 0
 3539 0300 24E0     		b	.L239
 3540              	.L240:
 969:.\main.c      ****                 shoulder_state = shldr_wait;
 3541              		.loc 1 969 0
 3542 0302 024B     		ldr	r3, .L246
 3543 0304 0322     		mov	r2, #3
 3544 0306 1A70     		strb	r2, [r3]
 3545              		.loc 1 971 0
 3546 0308 20E0     		b	.L239
 3547              	.L247:
 3548 030a C046     		.align	2
 3549              	.L246:
 3550 030c 00000000 		.word	shoulder_state
 3551 0310 DC050000 		.word	1500
 3552 0314 00000000 		.word	data_array
 3553 0318 00000000 		.word	SHOULDER_LOWER_BOUND
 3554 031c DB050000 		.word	1499
 3555 0320 E7030000 		.word	999
 3556 0324 00000000 		.word	SHOULDER_UPPER_BOUND
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 81


 3557 0328 00000000 		.word	SHOULDER_FLAG
 3558              	.L238:
 972:.\main.c      ****         
 973:.\main.c      ****         case shldr_wait:
 974:.\main.c      ****             if(SHOULDER_FLAG)
 3559              		.loc 1 974 0
 3560 032c 0A4B     		ldr	r3, .L248
 3561 032e 1B78     		ldrb	r3, [r3]
 3562 0330 002B     		cmp	r3, #0
 3563 0332 03D0     		beq	.L242
 975:.\main.c      ****             {
 976:.\main.c      ****                 shoulder_state = shldr_execute;
 3564              		.loc 1 976 0
 3565 0334 094B     		ldr	r3, .L248+4
 3566 0336 0222     		mov	r2, #2
 3567 0338 1A70     		strb	r2, [r3]
 977:.\main.c      ****             }
 978:.\main.c      ****             else
 979:.\main.c      ****             {
 980:.\main.c      ****                 shoulder_state = shldr_wait; 
 981:.\main.c      ****             }
 982:.\main.c      ****             break;
 3568              		.loc 1 982 0
 3569 033a 07E0     		b	.L239
 3570              	.L242:
 980:.\main.c      ****                 shoulder_state = shldr_wait; 
 3571              		.loc 1 980 0
 3572 033c 074B     		ldr	r3, .L248+4
 3573 033e 0322     		mov	r2, #3
 3574 0340 1A70     		strb	r2, [r3]
 3575              		.loc 1 982 0
 3576 0342 03E0     		b	.L239
 3577              	.L233:
 983:.\main.c      ****             
 984:.\main.c      ****         default:
 985:.\main.c      ****             shoulder_state = shldr_start;
 3578              		.loc 1 985 0
 3579 0344 054B     		ldr	r3, .L248+4
 3580 0346 0022     		mov	r2, #0
 3581 0348 1A70     		strb	r2, [r3]
 986:.\main.c      ****             break;
 3582              		.loc 1 986 0
 3583 034a C046     		mov	r8, r8
 3584              	.L239:
 987:.\main.c      ****     }  
 988:.\main.c      ****     return shldr_arr_cspot;
 3585              		.loc 1 988 0
 3586 034c FB1D     		add	r3, r7, #7
 3587 034e 1B78     		ldrb	r3, [r3]
 989:.\main.c      **** }
 3588              		.loc 1 989 0
 3589 0350 181C     		mov	r0, r3
 3590 0352 BD46     		mov	sp, r7
 3591 0354 05B0     		add	sp, sp, #20
 3592              		@ sp needed
 3593 0356 90BD     		pop	{r4, r7, pc}
 3594              	.L249:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 82


 3595              		.align	2
 3596              	.L248:
 3597 0358 00000000 		.word	SHOULDER_FLAG
 3598 035c 00000000 		.word	shoulder_state
 3599              		.cfi_endproc
 3600              	.LFE51:
 3601              		.size	shoulder, .-shoulder
 3602              		.comm	baseAzimuth_state,1,1
 3603              		.section	.text.baseAzimuth,"ax",%progbits
 3604              		.align	2
 3605              		.global	baseAzimuth
 3606              		.code	16
 3607              		.thumb_func
 3608              		.type	baseAzimuth, %function
 3609              	baseAzimuth:
 3610              	.LFB52:
 990:.\main.c      **** 
 991:.\main.c      **** //control the turret
 992:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 993:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 994:.\main.c      **** { 
 3611              		.loc 1 994 0
 3612              		.cfi_startproc
 3613 0000 90B5     		push	{r4, r7, lr}
 3614              		.cfi_def_cfa_offset 12
 3615              		.cfi_offset 4, -12
 3616              		.cfi_offset 7, -8
 3617              		.cfi_offset 14, -4
 3618 0002 85B0     		sub	sp, sp, #20
 3619              		.cfi_def_cfa_offset 32
 3620 0004 00AF     		add	r7, sp, #0
 3621              		.cfi_def_cfa_register 7
 3622 0006 021C     		mov	r2, r0
 3623 0008 3960     		str	r1, [r7]
 3624 000a FB1D     		add	r3, r7, #7
 3625 000c 1A70     		strb	r2, [r3]
 995:.\main.c      ****     //take instruction from data_array
 996:.\main.c      ****     //smooth input
 997:.\main.c      ****     //actuate the turret using PWM
 998:.\main.c      ****     uint8 i;
 999:.\main.c      ****     uint16 avg;
1000:.\main.c      ****     uint16 command;
1001:.\main.c      ****     
1002:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3626              		.loc 1 1002 0
 3627 000e 564B     		ldr	r3, .L276
 3628 0010 1B78     		ldrb	r3, [r3]
 3629 0012 012B     		cmp	r3, #1
 3630 0014 08D0     		beq	.L252
 3631 0016 02DC     		bgt	.L253
 3632 0018 002B     		cmp	r3, #0
 3633 001a 6AD0     		beq	.L274
 3634 001c 65E0     		b	.L251
 3635              	.L253:
 3636 001e 022B     		cmp	r3, #2
 3637 0020 23D0     		beq	.L255
 3638 0022 032B     		cmp	r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 83


 3639 0024 67D0     		beq	.L275
 3640 0026 60E0     		b	.L251
 3641              	.L252:
1003:.\main.c      ****         case BA_start:
1004:.\main.c      ****             break;
1005:.\main.c      **** 
1006:.\main.c      ****         case BA_init:
1007:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3642              		.loc 1 1007 0
 3643 0028 3B1C     		mov	r3, r7
 3644 002a 0F33     		add	r3, r3, #15
 3645 002c 0022     		mov	r2, #0
 3646 002e 1A70     		strb	r2, [r3]
 3647 0030 0EE0     		b	.L258
 3648              	.L259:
1008:.\main.c      ****             {
1009:.\main.c      ****                 baseAz_array[i] = 1500;
 3649              		.loc 1 1009 0 discriminator 2
 3650 0032 3B1C     		mov	r3, r7
 3651 0034 0F33     		add	r3, r3, #15
 3652 0036 1B78     		ldrb	r3, [r3]
 3653 0038 5B00     		lsl	r3, r3, #1
 3654 003a 3A68     		ldr	r2, [r7]
 3655 003c D318     		add	r3, r2, r3
 3656 003e 4B4A     		ldr	r2, .L276+4
 3657 0040 1A80     		strh	r2, [r3]
1007:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3658              		.loc 1 1007 0 discriminator 2
 3659 0042 3B1C     		mov	r3, r7
 3660 0044 0F33     		add	r3, r3, #15
 3661 0046 1A78     		ldrb	r2, [r3]
 3662 0048 3B1C     		mov	r3, r7
 3663 004a 0F33     		add	r3, r3, #15
 3664 004c 0132     		add	r2, r2, #1
 3665 004e 1A70     		strb	r2, [r3]
 3666              	.L258:
1007:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3667              		.loc 1 1007 0 is_stmt 0 discriminator 1
 3668 0050 3B1C     		mov	r3, r7
 3669 0052 0F33     		add	r3, r3, #15
 3670 0054 1B78     		ldrb	r3, [r3]
 3671 0056 132B     		cmp	r3, #19
 3672 0058 EBD9     		bls	.L259
1010:.\main.c      ****             }
1011:.\main.c      ****             BA_arr_cspot = 0;
 3673              		.loc 1 1011 0 is_stmt 1
 3674 005a FB1D     		add	r3, r7, #7
 3675 005c 0022     		mov	r2, #0
 3676 005e 1A70     		strb	r2, [r3]
1012:.\main.c      ****             
1013:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3677              		.loc 1 1013 0
 3678 0060 424B     		ldr	r3, .L276+4
 3679 0062 181C     		mov	r0, r3
 3680 0064 FFF7FEFF 		bl	BA_PWM_WriteCompare
1014:.\main.c      ****             break;
 3681              		.loc 1 1014 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 84


 3682 0068 46E0     		b	.L257
 3683              	.L255:
1015:.\main.c      **** 
1016:.\main.c      ****         case BA_execute:
1017:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3684              		.loc 1 1017 0
 3685 006a 3C1C     		mov	r4, r7
 3686 006c 0C34     		add	r4, r4, #12
 3687 006e 404B     		ldr	r3, .L276+8
 3688 0070 181C     		mov	r0, r3
 3689 0072 0A21     		mov	r1, #10
 3690 0074 0B22     		mov	r2, #11
 3691 0076 FFF7FEFF 		bl	make_command
 3692 007a 031C     		mov	r3, r0
 3693 007c 2380     		strh	r3, [r4]
1018:.\main.c      **** 
1019:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3694              		.loc 1 1019 0
 3695 007e FC1D     		add	r4, r7, #7
 3696 0080 FB1D     		add	r3, r7, #7
 3697 0082 1978     		ldrb	r1, [r3]
 3698 0084 3A68     		ldr	r2, [r7]
 3699 0086 3B1C     		mov	r3, r7
 3700 0088 0C33     		add	r3, r3, #12
 3701 008a 1B88     		ldrh	r3, [r3]
 3702 008c 081C     		mov	r0, r1
 3703 008e 111C     		mov	r1, r2
 3704 0090 1422     		mov	r2, #20
 3705 0092 FFF7FEFF 		bl	pos_to_vel
 3706 0096 031C     		mov	r3, r0
 3707 0098 2370     		strb	r3, [r4]
1020:.\main.c      ****             
1021:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3708              		.loc 1 1021 0
 3709 009a 3C1C     		mov	r4, r7
 3710 009c 0A34     		add	r4, r4, #10
 3711 009e 3B68     		ldr	r3, [r7]
 3712 00a0 181C     		mov	r0, r3
 3713 00a2 1421     		mov	r1, #20
 3714 00a4 FFF7FEFF 		bl	average
 3715 00a8 031C     		mov	r3, r0
 3716 00aa 2380     		strh	r3, [r4]
1022:.\main.c      **** 
1023:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3717              		.loc 1 1023 0
 3718 00ac 3B1C     		mov	r3, r7
 3719 00ae 0A33     		add	r3, r3, #10
 3720 00b0 1A88     		ldrh	r2, [r3]
 3721 00b2 FA23     		mov	r3, #250
 3722 00b4 DB00     		lsl	r3, r3, #3
 3723 00b6 9A42     		cmp	r2, r3
 3724 00b8 0CD8     		bhi	.L260
 3725              		.loc 1 1023 0 is_stmt 0 discriminator 1
 3726 00ba 3B1C     		mov	r3, r7
 3727 00bc 0A33     		add	r3, r3, #10
 3728 00be 1A88     		ldrh	r2, [r3]
 3729 00c0 2C4B     		ldr	r3, .L276+12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 85


 3730 00c2 9A42     		cmp	r2, r3
 3731 00c4 06D9     		bls	.L260
1024:.\main.c      ****             {
1025:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3732              		.loc 1 1025 0 is_stmt 1
 3733 00c6 3B1C     		mov	r3, r7
 3734 00c8 0A33     		add	r3, r3, #10
 3735 00ca 1B88     		ldrh	r3, [r3]
 3736 00cc 181C     		mov	r0, r3
 3737 00ce FFF7FEFF 		bl	BA_PWM_WriteCompare
 3738 00d2 06E0     		b	.L261
 3739              	.L260:
1026:.\main.c      ****             }
1027:.\main.c      ****             else
1028:.\main.c      ****             {
1029:.\main.c      ****                 LED_Write(1);
 3740              		.loc 1 1029 0
 3741 00d4 0120     		mov	r0, #1
 3742 00d6 FFF7FEFF 		bl	LED_Write
1030:.\main.c      **** 
1031:.\main.c      ****                 //increment error variable
1032:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3743              		.loc 1 1032 0
 3744 00da 244B     		ldr	r3, .L276+4
 3745 00dc 181C     		mov	r0, r3
 3746 00de FFF7FEFF 		bl	BA_PWM_WriteCompare
 3747              	.L261:
1033:.\main.c      ****             }
1034:.\main.c      ****             BA_FLAG = 0;
 3748              		.loc 1 1034 0
 3749 00e2 254B     		ldr	r3, .L276+16
 3750 00e4 0022     		mov	r2, #0
 3751 00e6 1A70     		strb	r2, [r3]
1035:.\main.c      ****             break;
 3752              		.loc 1 1035 0
 3753 00e8 06E0     		b	.L257
 3754              	.L251:
1036:.\main.c      ****             
1037:.\main.c      ****         case BA_wait:
1038:.\main.c      ****             break;
1039:.\main.c      ****             
1040:.\main.c      ****         default:
1041:.\main.c      ****             baseAzimuth_state = BA_start;
 3755              		.loc 1 1041 0
 3756 00ea 1F4B     		ldr	r3, .L276
 3757 00ec 0022     		mov	r2, #0
 3758 00ee 1A70     		strb	r2, [r3]
1042:.\main.c      ****             break;
 3759              		.loc 1 1042 0
 3760 00f0 02E0     		b	.L257
 3761              	.L274:
1004:.\main.c      ****             break;
 3762              		.loc 1 1004 0
 3763 00f2 C046     		mov	r8, r8
 3764 00f4 00E0     		b	.L257
 3765              	.L275:
1038:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 86


 3766              		.loc 1 1038 0
 3767 00f6 C046     		mov	r8, r8
 3768              	.L257:
1043:.\main.c      ****     }
1044:.\main.c      ****     
1045:.\main.c      ****     switch(baseAzimuth_state)
 3769              		.loc 1 1045 0
 3770 00f8 1B4B     		ldr	r3, .L276
 3771 00fa 1B78     		ldrb	r3, [r3]
 3772 00fc 012B     		cmp	r3, #1
 3773 00fe 0CD0     		beq	.L263
 3774 0100 02DC     		bgt	.L264
 3775 0102 002B     		cmp	r3, #0
 3776 0104 05D0     		beq	.L265
 3777 0106 24E0     		b	.L262
 3778              	.L264:
 3779 0108 022B     		cmp	r3, #2
 3780 010a 0AD0     		beq	.L266
 3781 010c 032B     		cmp	r3, #3
 3782 010e 14D0     		beq	.L267
 3783 0110 1FE0     		b	.L262
 3784              	.L265:
1046:.\main.c      ****     { //transitions
1047:.\main.c      ****         case BA_start:
1048:.\main.c      ****             baseAzimuth_state = BA_init;
 3785              		.loc 1 1048 0
 3786 0112 154B     		ldr	r3, .L276
 3787 0114 0122     		mov	r2, #1
 3788 0116 1A70     		strb	r2, [r3]
1049:.\main.c      ****             break;
 3789              		.loc 1 1049 0
 3790 0118 1FE0     		b	.L268
 3791              	.L263:
1050:.\main.c      ****         
1051:.\main.c      ****         case BA_init:
1052:.\main.c      ****             baseAzimuth_state = BA_wait;
 3792              		.loc 1 1052 0
 3793 011a 134B     		ldr	r3, .L276
 3794 011c 0322     		mov	r2, #3
 3795 011e 1A70     		strb	r2, [r3]
1053:.\main.c      ****             break;
 3796              		.loc 1 1053 0
 3797 0120 1BE0     		b	.L268
 3798              	.L266:
1054:.\main.c      ****         
1055:.\main.c      ****         case BA_execute:
1056:.\main.c      ****             if(BA_FLAG)
 3799              		.loc 1 1056 0
 3800 0122 154B     		ldr	r3, .L276+16
 3801 0124 1B78     		ldrb	r3, [r3]
 3802 0126 002B     		cmp	r3, #0
 3803 0128 03D0     		beq	.L269
1057:.\main.c      ****             {
1058:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3804              		.loc 1 1058 0
 3805 012a 0F4B     		ldr	r3, .L276
 3806 012c 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 87


 3807 012e 1A70     		strb	r2, [r3]
1059:.\main.c      ****             }
1060:.\main.c      ****             else
1061:.\main.c      ****             {
1062:.\main.c      ****                 baseAzimuth_state = BA_wait;
1063:.\main.c      ****             }
1064:.\main.c      ****             break;
 3808              		.loc 1 1064 0
 3809 0130 13E0     		b	.L268
 3810              	.L269:
1062:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3811              		.loc 1 1062 0
 3812 0132 0D4B     		ldr	r3, .L276
 3813 0134 0322     		mov	r2, #3
 3814 0136 1A70     		strb	r2, [r3]
 3815              		.loc 1 1064 0
 3816 0138 0FE0     		b	.L268
 3817              	.L267:
1065:.\main.c      ****         
1066:.\main.c      ****         case BA_wait:
1067:.\main.c      ****             if(BA_FLAG)
 3818              		.loc 1 1067 0
 3819 013a 0F4B     		ldr	r3, .L276+16
 3820 013c 1B78     		ldrb	r3, [r3]
 3821 013e 002B     		cmp	r3, #0
 3822 0140 03D0     		beq	.L271
1068:.\main.c      ****             {
1069:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3823              		.loc 1 1069 0
 3824 0142 094B     		ldr	r3, .L276
 3825 0144 0222     		mov	r2, #2
 3826 0146 1A70     		strb	r2, [r3]
1070:.\main.c      ****             }
1071:.\main.c      ****             else
1072:.\main.c      ****             {
1073:.\main.c      ****                 baseAzimuth_state = BA_wait; 
1074:.\main.c      ****             }
1075:.\main.c      ****             break;
 3827              		.loc 1 1075 0
 3828 0148 07E0     		b	.L268
 3829              	.L271:
1073:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3830              		.loc 1 1073 0
 3831 014a 074B     		ldr	r3, .L276
 3832 014c 0322     		mov	r2, #3
 3833 014e 1A70     		strb	r2, [r3]
 3834              		.loc 1 1075 0
 3835 0150 03E0     		b	.L268
 3836              	.L262:
1076:.\main.c      ****             
1077:.\main.c      ****         default:
1078:.\main.c      ****             baseAzimuth_state = BA_start;
 3837              		.loc 1 1078 0
 3838 0152 054B     		ldr	r3, .L276
 3839 0154 0022     		mov	r2, #0
 3840 0156 1A70     		strb	r2, [r3]
1079:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 88


 3841              		.loc 1 1079 0
 3842 0158 C046     		mov	r8, r8
 3843              	.L268:
1080:.\main.c      ****     }  
1081:.\main.c      ****     return BA_arr_cspot;
 3844              		.loc 1 1081 0
 3845 015a FB1D     		add	r3, r7, #7
 3846 015c 1B78     		ldrb	r3, [r3]
1082:.\main.c      **** }
 3847              		.loc 1 1082 0
 3848 015e 181C     		mov	r0, r3
 3849 0160 BD46     		mov	sp, r7
 3850 0162 05B0     		add	sp, sp, #20
 3851              		@ sp needed
 3852 0164 90BD     		pop	{r4, r7, pc}
 3853              	.L277:
 3854 0166 C046     		.align	2
 3855              	.L276:
 3856 0168 00000000 		.word	baseAzimuth_state
 3857 016c DC050000 		.word	1500
 3858 0170 00000000 		.word	data_array
 3859 0174 E7030000 		.word	999
 3860 0178 00000000 		.word	BA_FLAG
 3861              		.cfi_endproc
 3862              	.LFE52:
 3863              		.size	baseAzimuth, .-baseAzimuth
 3864              		.comm	effector_state,1,1
 3865              		.section	.text.effector,"ax",%progbits
 3866              		.align	2
 3867              		.global	effector
 3868              		.code	16
 3869              		.thumb_func
 3870              		.type	effector, %function
 3871              	effector:
 3872              	.LFB53:
1083:.\main.c      **** 
1084:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
1085:.\main.c      **** void effector()
1086:.\main.c      **** {
 3873              		.loc 1 1086 0
 3874              		.cfi_startproc
 3875 0000 90B5     		push	{r4, r7, lr}
 3876              		.cfi_def_cfa_offset 12
 3877              		.cfi_offset 4, -12
 3878              		.cfi_offset 7, -8
 3879              		.cfi_offset 14, -4
 3880 0002 83B0     		sub	sp, sp, #12
 3881              		.cfi_def_cfa_offset 24
 3882 0004 00AF     		add	r7, sp, #0
 3883              		.cfi_def_cfa_register 7
1087:.\main.c      ****     uint16 command;
1088:.\main.c      **** 
1089:.\main.c      ****     switch(effector_state){ //actions
 3884              		.loc 1 1089 0
 3885 0006 374B     		ldr	r3, .L301
 3886 0008 1B78     		ldrb	r3, [r3]
 3887 000a 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 89


 3888 000c 08D0     		beq	.L280
 3889 000e 02DC     		bgt	.L281
 3890 0010 002B     		cmp	r3, #0
 3891 0012 30D0     		beq	.L299
 3892 0014 2BE0     		b	.L279
 3893              	.L281:
 3894 0016 022B     		cmp	r3, #2
 3895 0018 07D0     		beq	.L283
 3896 001a 032B     		cmp	r3, #3
 3897 001c 2DD0     		beq	.L300
 3898 001e 26E0     		b	.L279
 3899              	.L280:
1090:.\main.c      ****         case shldr_start:
1091:.\main.c      ****             break;
1092:.\main.c      **** 
1093:.\main.c      ****         case eff_init:           
1094:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3900              		.loc 1 1094 0
 3901 0020 314B     		ldr	r3, .L301+4
 3902 0022 181C     		mov	r0, r3
 3903 0024 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1095:.\main.c      ****            break;
 3904              		.loc 1 1095 0
 3905 0028 28E0     		b	.L285
 3906              	.L283:
1096:.\main.c      **** 
1097:.\main.c      ****         case eff_execute:
1098:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3907              		.loc 1 1098 0
 3908 002a BC1D     		add	r4, r7, #6
 3909 002c 2F4B     		ldr	r3, .L301+8
 3910 002e 181C     		mov	r0, r3
 3911 0030 1421     		mov	r1, #20
 3912 0032 1522     		mov	r2, #21
 3913 0034 FFF7FEFF 		bl	make_command
 3914 0038 031C     		mov	r3, r0
 3915 003a 2380     		strh	r3, [r4]
1099:.\main.c      **** 
1100:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3916              		.loc 1 1100 0
 3917 003c BB1D     		add	r3, r7, #6
 3918 003e 1A88     		ldrh	r2, [r3]
 3919 0040 FA23     		mov	r3, #250
 3920 0042 DB00     		lsl	r3, r3, #3
 3921 0044 9A42     		cmp	r2, r3
 3922 0046 0AD8     		bhi	.L286
 3923              		.loc 1 1100 0 is_stmt 0 discriminator 1
 3924 0048 BB1D     		add	r3, r7, #6
 3925 004a 1A88     		ldrh	r2, [r3]
 3926 004c 284B     		ldr	r3, .L301+12
 3927 004e 9A42     		cmp	r2, r3
 3928 0050 05D9     		bls	.L286
1101:.\main.c      ****             {
1102:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3929              		.loc 1 1102 0 is_stmt 1
 3930 0052 BB1D     		add	r3, r7, #6
 3931 0054 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 90


 3932 0056 181C     		mov	r0, r3
 3933 0058 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3934 005c 03E0     		b	.L287
 3935              	.L286:
1103:.\main.c      ****             }
1104:.\main.c      ****             else
1105:.\main.c      ****             {
1106:.\main.c      ****                 //increment error variable
1107:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3936              		.loc 1 1107 0
 3937 005e 224B     		ldr	r3, .L301+4
 3938 0060 181C     		mov	r0, r3
 3939 0062 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3940              	.L287:
1108:.\main.c      ****             }
1109:.\main.c      ****             
1110:.\main.c      ****             EFFECTOR_FLAG = 0;
 3941              		.loc 1 1110 0
 3942 0066 234B     		ldr	r3, .L301+16
 3943 0068 0022     		mov	r2, #0
 3944 006a 1A70     		strb	r2, [r3]
1111:.\main.c      ****             break;
 3945              		.loc 1 1111 0
 3946 006c 06E0     		b	.L285
 3947              	.L279:
1112:.\main.c      ****             
1113:.\main.c      ****         case eff_wait:
1114:.\main.c      ****             break;
1115:.\main.c      ****         
1116:.\main.c      ****         default:
1117:.\main.c      ****             effector_state = eff_start;
 3948              		.loc 1 1117 0
 3949 006e 1D4B     		ldr	r3, .L301
 3950 0070 0022     		mov	r2, #0
 3951 0072 1A70     		strb	r2, [r3]
1118:.\main.c      ****             break;
 3952              		.loc 1 1118 0
 3953 0074 02E0     		b	.L285
 3954              	.L299:
1091:.\main.c      ****             break;
 3955              		.loc 1 1091 0
 3956 0076 C046     		mov	r8, r8
 3957 0078 00E0     		b	.L285
 3958              	.L300:
1114:.\main.c      ****             break;
 3959              		.loc 1 1114 0
 3960 007a C046     		mov	r8, r8
 3961              	.L285:
1119:.\main.c      ****     }
1120:.\main.c      ****     
1121:.\main.c      ****     switch(effector_state){ //transitions
 3962              		.loc 1 1121 0
 3963 007c 194B     		ldr	r3, .L301
 3964 007e 1B78     		ldrb	r3, [r3]
 3965 0080 012B     		cmp	r3, #1
 3966 0082 0CD0     		beq	.L289
 3967 0084 02DC     		bgt	.L290
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 91


 3968 0086 002B     		cmp	r3, #0
 3969 0088 05D0     		beq	.L291
 3970 008a 24E0     		b	.L288
 3971              	.L290:
 3972 008c 022B     		cmp	r3, #2
 3973 008e 0AD0     		beq	.L292
 3974 0090 032B     		cmp	r3, #3
 3975 0092 14D0     		beq	.L293
 3976 0094 1FE0     		b	.L288
 3977              	.L291:
1122:.\main.c      ****         case eff_start:
1123:.\main.c      ****             effector_state = eff_init;
 3978              		.loc 1 1123 0
 3979 0096 134B     		ldr	r3, .L301
 3980 0098 0122     		mov	r2, #1
 3981 009a 1A70     		strb	r2, [r3]
1124:.\main.c      ****             break;
 3982              		.loc 1 1124 0
 3983 009c 1FE0     		b	.L278
 3984              	.L289:
1125:.\main.c      ****         
1126:.\main.c      ****         case eff_init:
1127:.\main.c      ****             effector_state = eff_wait;
 3985              		.loc 1 1127 0
 3986 009e 114B     		ldr	r3, .L301
 3987 00a0 0322     		mov	r2, #3
 3988 00a2 1A70     		strb	r2, [r3]
1128:.\main.c      ****             break;
 3989              		.loc 1 1128 0
 3990 00a4 1BE0     		b	.L278
 3991              	.L292:
1129:.\main.c      ****         
1130:.\main.c      ****         case eff_execute:
1131:.\main.c      ****             if(EFFECTOR_FLAG)
 3992              		.loc 1 1131 0
 3993 00a6 134B     		ldr	r3, .L301+16
 3994 00a8 1B78     		ldrb	r3, [r3]
 3995 00aa 002B     		cmp	r3, #0
 3996 00ac 03D0     		beq	.L295
1132:.\main.c      ****             {
1133:.\main.c      ****                 effector_state = eff_execute;
 3997              		.loc 1 1133 0
 3998 00ae 0D4B     		ldr	r3, .L301
 3999 00b0 0222     		mov	r2, #2
 4000 00b2 1A70     		strb	r2, [r3]
1134:.\main.c      ****             }
1135:.\main.c      ****             else
1136:.\main.c      ****             {
1137:.\main.c      ****                 effector_state = eff_wait;
1138:.\main.c      ****             }
1139:.\main.c      ****             break;
 4001              		.loc 1 1139 0
 4002 00b4 13E0     		b	.L278
 4003              	.L295:
1137:.\main.c      ****                 effector_state = eff_wait;
 4004              		.loc 1 1137 0
 4005 00b6 0B4B     		ldr	r3, .L301
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 92


 4006 00b8 0322     		mov	r2, #3
 4007 00ba 1A70     		strb	r2, [r3]
 4008              		.loc 1 1139 0
 4009 00bc 0FE0     		b	.L278
 4010              	.L293:
1140:.\main.c      ****         
1141:.\main.c      ****         case eff_wait:
1142:.\main.c      ****             if(EFFECTOR_FLAG)
 4011              		.loc 1 1142 0
 4012 00be 0D4B     		ldr	r3, .L301+16
 4013 00c0 1B78     		ldrb	r3, [r3]
 4014 00c2 002B     		cmp	r3, #0
 4015 00c4 03D0     		beq	.L297
1143:.\main.c      ****             {
1144:.\main.c      ****                 effector_state = eff_execute;
 4016              		.loc 1 1144 0
 4017 00c6 074B     		ldr	r3, .L301
 4018 00c8 0222     		mov	r2, #2
 4019 00ca 1A70     		strb	r2, [r3]
1145:.\main.c      ****             }
1146:.\main.c      ****             else
1147:.\main.c      ****             {
1148:.\main.c      ****                 effector_state = eff_wait; 
1149:.\main.c      ****             }
1150:.\main.c      ****             break;
 4020              		.loc 1 1150 0
 4021 00cc 07E0     		b	.L278
 4022              	.L297:
1148:.\main.c      ****                 effector_state = eff_wait; 
 4023              		.loc 1 1148 0
 4024 00ce 054B     		ldr	r3, .L301
 4025 00d0 0322     		mov	r2, #3
 4026 00d2 1A70     		strb	r2, [r3]
 4027              		.loc 1 1150 0
 4028 00d4 03E0     		b	.L278
 4029              	.L288:
1151:.\main.c      ****         
1152:.\main.c      ****         default:
1153:.\main.c      ****             effector_state = eff_start;
 4030              		.loc 1 1153 0
 4031 00d6 034B     		ldr	r3, .L301
 4032 00d8 0022     		mov	r2, #0
 4033 00da 1A70     		strb	r2, [r3]
1154:.\main.c      ****             break;
 4034              		.loc 1 1154 0
 4035 00dc C046     		mov	r8, r8
 4036              	.L278:
1155:.\main.c      ****     }    
1156:.\main.c      **** }
 4037              		.loc 1 1156 0
 4038 00de BD46     		mov	sp, r7
 4039 00e0 03B0     		add	sp, sp, #12
 4040              		@ sp needed
 4041 00e2 90BD     		pop	{r4, r7, pc}
 4042              	.L302:
 4043              		.align	2
 4044              	.L301:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 93


 4045 00e4 00000000 		.word	effector_state
 4046 00e8 DC050000 		.word	1500
 4047 00ec 00000000 		.word	data_array
 4048 00f0 E7030000 		.word	999
 4049 00f4 00000000 		.word	EFFECTOR_FLAG
 4050              		.cfi_endproc
 4051              	.LFE53:
 4052              		.size	effector, .-effector
 4053              		.comm	arduino_state,1,1
 4054              		.section	.text.arduino,"ax",%progbits
 4055              		.align	2
 4056              		.global	arduino
 4057              		.code	16
 4058              		.thumb_func
 4059              		.type	arduino, %function
 4060              	arduino:
 4061              	.LFB54:
1157:.\main.c      **** 
1158:.\main.c      **** enum arduino_states {ard_start, ard_init, ard_wait, ard_read, ard_write} arduino_state;
1159:.\main.c      **** void arduino()
1160:.\main.c      **** {
 4062              		.loc 1 1160 0
 4063              		.cfi_startproc
 4064 0000 80B5     		push	{r7, lr}
 4065              		.cfi_def_cfa_offset 8
 4066              		.cfi_offset 7, -8
 4067              		.cfi_offset 14, -4
 4068 0002 00AF     		add	r7, sp, #0
 4069              		.cfi_def_cfa_register 7
1161:.\main.c      ****     //uint8 video_mux = data_array[ARD_BYTE_1];
1162:.\main.c      ****     //uint8 laser = data_array[ARD_BYTE_2];
1163:.\main.c      ****     
1164:.\main.c      ****     switch(arduino_state) //state actions
 4070              		.loc 1 1164 0
 4071 0004 224B     		ldr	r3, .L325
 4072 0006 1B78     		ldrb	r3, [r3]
 4073 0008 042B     		cmp	r3, #4
 4074 000a 08D8     		bhi	.L304
 4075 000c 9A00     		lsl	r2, r3, #2
 4076 000e 214B     		ldr	r3, .L325+4
 4077 0010 D318     		add	r3, r2, r3
 4078 0012 1B68     		ldr	r3, [r3]
 4079 0014 9F46     		mov	pc, r3
 4080              		.section	.rodata
 4081              		.align	2
 4082              	.L306:
 4083 0000 26000000 		.word	.L324
 4084 0004 26000000 		.word	.L324
 4085 0008 26000000 		.word	.L324
 4086 000c 26000000 		.word	.L324
 4087 0010 16000000 		.word	.L310
 4088              		.section	.text.arduino
 4089              	.L310:
1165:.\main.c      ****     {
1166:.\main.c      ****         case ard_start:
1167:.\main.c      ****             break;
1168:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 94


1169:.\main.c      ****         case ard_init:
1170:.\main.c      ****             //write initial video
1171:.\main.c      ****             //write the laser enable
1172:.\main.c      ****             break;
1173:.\main.c      ****         
1174:.\main.c      ****         case ard_wait:
1175:.\main.c      ****             break;
1176:.\main.c      ****         
1177:.\main.c      ****         case ard_read:
1178:.\main.c      ****             //for(int i = 0; i < ARD_ARRAY_SIZE; i++)
1179:.\main.c      ****             //{
1180:.\main.c      ****             //  feedback_array[i] = Arduino_UART_UARTGetChar();
1181:.\main.c      ****             //{
1182:.\main.c      ****             break;
1183:.\main.c      ****         
1184:.\main.c      ****         case ard_write:
1185:.\main.c      ****             //write laser
1186:.\main.c      ****             //write video
1187:.\main.c      ****             ARD_FLAG = 0;
 4090              		.loc 1 1187 0
 4091 0016 204B     		ldr	r3, .L325+8
 4092 0018 0022     		mov	r2, #0
 4093 001a 1A70     		strb	r2, [r3]
1188:.\main.c      ****             break;
 4094              		.loc 1 1188 0
 4095 001c 04E0     		b	.L311
 4096              	.L304:
1189:.\main.c      ****         
1190:.\main.c      ****         default:
1191:.\main.c      ****             arduino_state = ard_start;
 4097              		.loc 1 1191 0
 4098 001e 1C4B     		ldr	r3, .L325
 4099 0020 0022     		mov	r2, #0
 4100 0022 1A70     		strb	r2, [r3]
1192:.\main.c      ****             break;
 4101              		.loc 1 1192 0
 4102 0024 00E0     		b	.L311
 4103              	.L324:
1167:.\main.c      ****             break;
 4104              		.loc 1 1167 0
 4105 0026 C046     		mov	r8, r8
 4106              	.L311:
1193:.\main.c      ****     }
1194:.\main.c      ****     switch(arduino_state) //state transitions
 4107              		.loc 1 1194 0
 4108 0028 194B     		ldr	r3, .L325
 4109 002a 1B78     		ldrb	r3, [r3]
 4110 002c 042B     		cmp	r3, #4
 4111 002e 28D8     		bhi	.L312
 4112 0030 9A00     		lsl	r2, r3, #2
 4113 0032 1A4B     		ldr	r3, .L325+12
 4114 0034 D318     		add	r3, r2, r3
 4115 0036 1B68     		ldr	r3, [r3]
 4116 0038 9F46     		mov	pc, r3
 4117              		.section	.rodata
 4118              		.align	2
 4119              	.L314:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 95


 4120 0014 3A000000 		.word	.L313
 4121 0018 42000000 		.word	.L315
 4122 001c 4A000000 		.word	.L316
 4123 0020 52000000 		.word	.L317
 4124 0024 6A000000 		.word	.L318
 4125              		.section	.text.arduino
 4126              	.L313:
1195:.\main.c      ****     {
1196:.\main.c      ****         case ard_start:
1197:.\main.c      ****             arduino_state = ard_init;
 4127              		.loc 1 1197 0
 4128 003a 154B     		ldr	r3, .L325
 4129 003c 0122     		mov	r2, #1
 4130 003e 1A70     		strb	r2, [r3]
1198:.\main.c      ****             break;
 4131              		.loc 1 1198 0
 4132 0040 23E0     		b	.L303
 4133              	.L315:
1199:.\main.c      ****         
1200:.\main.c      ****         case ard_init:
1201:.\main.c      ****             arduino_state = ard_wait;
 4134              		.loc 1 1201 0
 4135 0042 134B     		ldr	r3, .L325
 4136 0044 0222     		mov	r2, #2
 4137 0046 1A70     		strb	r2, [r3]
1202:.\main.c      ****             break;
 4138              		.loc 1 1202 0
 4139 0048 1FE0     		b	.L303
 4140              	.L316:
1203:.\main.c      ****         
1204:.\main.c      ****         case ard_wait:
1205:.\main.c      ****             arduino_state = ard_read;
 4141              		.loc 1 1205 0
 4142 004a 114B     		ldr	r3, .L325
 4143 004c 0322     		mov	r2, #3
 4144 004e 1A70     		strb	r2, [r3]
1206:.\main.c      ****             break;
 4145              		.loc 1 1206 0
 4146 0050 1BE0     		b	.L303
 4147              	.L317:
1207:.\main.c      ****         
1208:.\main.c      ****         case ard_read:
1209:.\main.c      ****             if(ARD_FLAG)
 4148              		.loc 1 1209 0
 4149 0052 114B     		ldr	r3, .L325+8
 4150 0054 1B78     		ldrb	r3, [r3]
 4151 0056 002B     		cmp	r3, #0
 4152 0058 03D0     		beq	.L320
1210:.\main.c      ****             {
1211:.\main.c      ****                 arduino_state = ard_write;
 4153              		.loc 1 1211 0
 4154 005a 0D4B     		ldr	r3, .L325
 4155 005c 0422     		mov	r2, #4
 4156 005e 1A70     		strb	r2, [r3]
1212:.\main.c      ****             }
1213:.\main.c      ****             else
1214:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 96


1215:.\main.c      ****                 arduino_state = ard_wait;
1216:.\main.c      ****             }
1217:.\main.c      ****             break;
 4157              		.loc 1 1217 0
 4158 0060 13E0     		b	.L303
 4159              	.L320:
1215:.\main.c      ****                 arduino_state = ard_wait;
 4160              		.loc 1 1215 0
 4161 0062 0B4B     		ldr	r3, .L325
 4162 0064 0222     		mov	r2, #2
 4163 0066 1A70     		strb	r2, [r3]
 4164              		.loc 1 1217 0
 4165 0068 0FE0     		b	.L303
 4166              	.L318:
1218:.\main.c      ****             
1219:.\main.c      ****         case ard_write:
1220:.\main.c      ****             if(ARD_FLAG)
 4167              		.loc 1 1220 0
 4168 006a 0B4B     		ldr	r3, .L325+8
 4169 006c 1B78     		ldrb	r3, [r3]
 4170 006e 002B     		cmp	r3, #0
 4171 0070 03D0     		beq	.L322
1221:.\main.c      ****             {
1222:.\main.c      ****                 arduino_state = ard_write;
 4172              		.loc 1 1222 0
 4173 0072 074B     		ldr	r3, .L325
 4174 0074 0422     		mov	r2, #4
 4175 0076 1A70     		strb	r2, [r3]
1223:.\main.c      ****             }
1224:.\main.c      ****             else
1225:.\main.c      ****             {
1226:.\main.c      ****                 arduino_state = ard_wait;
1227:.\main.c      ****             }
1228:.\main.c      ****             break;
 4176              		.loc 1 1228 0
 4177 0078 07E0     		b	.L303
 4178              	.L322:
1226:.\main.c      ****                 arduino_state = ard_wait;
 4179              		.loc 1 1226 0
 4180 007a 054B     		ldr	r3, .L325
 4181 007c 0222     		mov	r2, #2
 4182 007e 1A70     		strb	r2, [r3]
 4183              		.loc 1 1228 0
 4184 0080 03E0     		b	.L303
 4185              	.L312:
1229:.\main.c      ****             
1230:.\main.c      ****         default:
1231:.\main.c      ****             arduino_state = ard_start;
 4186              		.loc 1 1231 0
 4187 0082 034B     		ldr	r3, .L325
 4188 0084 0022     		mov	r2, #0
 4189 0086 1A70     		strb	r2, [r3]
1232:.\main.c      ****             break;
 4190              		.loc 1 1232 0
 4191 0088 C046     		mov	r8, r8
 4192              	.L303:
1233:.\main.c      ****     }   
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 97


1234:.\main.c      **** }
 4193              		.loc 1 1234 0
 4194 008a BD46     		mov	sp, r7
 4195              		@ sp needed
 4196 008c 80BD     		pop	{r7, pc}
 4197              	.L326:
 4198 008e C046     		.align	2
 4199              	.L325:
 4200 0090 00000000 		.word	arduino_state
 4201 0094 00000000 		.word	.L306
 4202 0098 00000000 		.word	ARD_FLAG
 4203 009c 14000000 		.word	.L314
 4204              		.cfi_endproc
 4205              	.LFE54:
 4206              		.size	arduino, .-arduino
 4207              		.section	.text.initialize,"ax",%progbits
 4208              		.align	2
 4209              		.global	initialize
 4210              		.code	16
 4211              		.thumb_func
 4212              		.type	initialize, %function
 4213              	initialize:
 4214              	.LFB55:
1235:.\main.c      **** 
1236:.\main.c      **** //Initialization function for the program
1237:.\main.c      **** void initialize()
1238:.\main.c      **** {
 4215              		.loc 1 1238 0
 4216              		.cfi_startproc
 4217 0000 80B5     		push	{r7, lr}
 4218              		.cfi_def_cfa_offset 8
 4219              		.cfi_offset 7, -8
 4220              		.cfi_offset 14, -4
 4221 0002 82B0     		sub	sp, sp, #8
 4222              		.cfi_def_cfa_offset 16
 4223 0004 00AF     		add	r7, sp, #0
 4224              		.cfi_def_cfa_register 7
1239:.\main.c      ****     //initialize the wiznet
1240:.\main.c      ****     WIZ_RST_Write(0);
 4225              		.loc 1 1240 0
 4226 0006 0020     		mov	r0, #0
 4227 0008 FFF7FEFF 		bl	WIZ_RST_Write
1241:.\main.c      ****     CyDelay(10);
 4228              		.loc 1 1241 0
 4229 000c 0A20     		mov	r0, #10
 4230 000e FFF7FEFF 		bl	CyDelay
1242:.\main.c      ****     WIZ_RST_Write(1);
 4231              		.loc 1 1242 0
 4232 0012 0120     		mov	r0, #1
 4233 0014 FFF7FEFF 		bl	WIZ_RST_Write
1243:.\main.c      ****     WIZ_SS_Write(1);
 4234              		.loc 1 1243 0
 4235 0018 0120     		mov	r0, #1
 4236 001a FFF7FEFF 		bl	WIZ_SS_Write
 4237              	.LBB2:
1244:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4238              		.loc 1 1244 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 98


 4239 001e FB1D     		add	r3, r7, #7
 4240 0020 0022     		mov	r2, #0
 4241 0022 1A70     		strb	r2, [r3]
 4242 0024 0DE0     		b	.L328
 4243              	.L331:
1245:.\main.c      ****     {
1246:.\main.c      ****         if(WIZ_RDY_Read())
 4244              		.loc 1 1246 0
 4245 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 4246 002a 031C     		mov	r3, r0
 4247 002c 002B     		cmp	r3, #0
 4248 002e 00D0     		beq	.L329
1247:.\main.c      ****         {
1248:.\main.c      ****             break;
 4249              		.loc 1 1248 0
 4250 0030 0BE0     		b	.L330
 4251              	.L329:
1249:.\main.c      ****         }
1250:.\main.c      ****         else
1251:.\main.c      ****         {
1252:.\main.c      ****             CyDelay(4);
 4252              		.loc 1 1252 0
 4253 0032 0420     		mov	r0, #4
 4254 0034 FFF7FEFF 		bl	CyDelay
1244:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4255              		.loc 1 1244 0
 4256 0038 FB1D     		add	r3, r7, #7
 4257 003a 1A78     		ldrb	r2, [r3]
 4258 003c FB1D     		add	r3, r7, #7
 4259 003e 0132     		add	r2, r2, #1
 4260 0040 1A70     		strb	r2, [r3]
 4261              	.L328:
1244:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4262              		.loc 1 1244 0 is_stmt 0 discriminator 1
 4263 0042 FB1D     		add	r3, r7, #7
 4264 0044 1B78     		ldrb	r3, [r3]
 4265 0046 632B     		cmp	r3, #99
 4266 0048 EDD9     		bls	.L331
 4267              	.L330:
 4268              	.LBE2:
1253:.\main.c      ****         }
1254:.\main.c      ****     }
1255:.\main.c      ****     
1256:.\main.c      ****     //Initialize state variables
1257:.\main.c      ****     baseAzimuth_state = BA_start;
 4269              		.loc 1 1257 0 is_stmt 1
 4270 004a 384B     		ldr	r3, .L332
 4271 004c 0022     		mov	r2, #0
 4272 004e 1A70     		strb	r2, [r3]
1258:.\main.c      ****     wristTilt_state = tilt_start;
 4273              		.loc 1 1258 0
 4274 0050 374B     		ldr	r3, .L332+4
 4275 0052 0022     		mov	r2, #0
 4276 0054 1A70     		strb	r2, [r3]
1259:.\main.c      ****     wristRotate_state = rotate_start;
 4277              		.loc 1 1259 0
 4278 0056 374B     		ldr	r3, .L332+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 99


 4279 0058 0022     		mov	r2, #0
 4280 005a 1A70     		strb	r2, [r3]
1260:.\main.c      ****     shoulder_state = shldr_start;
 4281              		.loc 1 1260 0
 4282 005c 364B     		ldr	r3, .L332+12
 4283 005e 0022     		mov	r2, #0
 4284 0060 1A70     		strb	r2, [r3]
1261:.\main.c      ****     elbow_state = elbw_start;
 4285              		.loc 1 1261 0
 4286 0062 364B     		ldr	r3, .L332+16
 4287 0064 0022     		mov	r2, #0
 4288 0066 1A70     		strb	r2, [r3]
1262:.\main.c      ****     effector_state = eff_start;
 4289              		.loc 1 1262 0
 4290 0068 354B     		ldr	r3, .L332+20
 4291 006a 0022     		mov	r2, #0
 4292 006c 1A70     		strb	r2, [r3]
1263:.\main.c      ****     arduino_state = ard_start;
 4293              		.loc 1 1263 0
 4294 006e 354B     		ldr	r3, .L332+24
 4295 0070 0022     		mov	r2, #0
 4296 0072 1A70     		strb	r2, [r3]
1264:.\main.c      ****     
1265:.\main.c      ****     //start all of our components
1266:.\main.c      ****     SPIM_1_Start();
 4297              		.loc 1 1266 0
 4298 0074 FFF7FEFF 		bl	SPIM_1_Start
1267:.\main.c      ****     Clock_pwm_Start();
 4299              		.loc 1 1267 0
 4300 0078 FFF7FEFF 		bl	Clock_pwm_Start
1268:.\main.c      ****     Clock_counter_Start();
 4301              		.loc 1 1268 0
 4302 007c FFF7FEFF 		bl	Clock_counter_Start
1269:.\main.c      ****     Wrist_UART_Start();
 4303              		.loc 1 1269 0
 4304 0080 FFF7FEFF 		bl	Wrist_UART_Start
1270:.\main.c      ****     SHLDR_PWM_Start();
 4305              		.loc 1 1270 0
 4306 0084 FFF7FEFF 		bl	SHLDR_PWM_Start
1271:.\main.c      ****     BA_PWM_Start();
 4307              		.loc 1 1271 0
 4308 0088 FFF7FEFF 		bl	BA_PWM_Start
1272:.\main.c      ****     ELBW_PWM_Start();
 4309              		.loc 1 1272 0
 4310 008c FFF7FEFF 		bl	ELBW_PWM_Start
1273:.\main.c      ****     EFFECTOR_PWM_Start();
 4311              		.loc 1 1273 0
 4312 0090 FFF7FEFF 		bl	EFFECTOR_PWM_Start
1274:.\main.c      ****     ADC_Start();
 4313              		.loc 1 1274 0
 4314 0094 FFF7FEFF 		bl	ADC_Start
1275:.\main.c      ****     ADC_StartConvert();
 4315              		.loc 1 1275 0
 4316 0098 FFF7FEFF 		bl	ADC_StartConvert
1276:.\main.c      ****     
1277:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 4317              		.loc 1 1277 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 100


 4318 009c 2A4B     		ldr	r3, .L332+28
 4319 009e 0420     		mov	r0, #4
 4320 00a0 0121     		mov	r1, #1
 4321 00a2 1A1C     		mov	r2, r3
 4322 00a4 FFF7FEFF 		bl	wiznetInit
1278:.\main.c      ****     
1279:.\main.c      ****     //Initialize the dynamixels
1280:.\main.c      ****     ServoSpeed(0xFE, 100);
 4323              		.loc 1 1280 0
 4324 00a8 FE20     		mov	r0, #254
 4325 00aa 6421     		mov	r1, #100
 4326 00ac FFF7FEFF 		bl	ServoSpeed
1281:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 4327              		.loc 1 1281 0
 4328 00b0 264B     		ldr	r3, .L332+32
 4329 00b2 FE20     		mov	r0, #254
 4330 00b4 191C     		mov	r1, r3
 4331 00b6 FFF7FEFF 		bl	SetServoTorque
1282:.\main.c      ****     
1283:.\main.c      ****     //Initialize our motor drivers
1284:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 4332              		.loc 1 1284 0
 4333 00ba 254B     		ldr	r3, .L332+36
 4334 00bc 181C     		mov	r0, r3
 4335 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1285:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 4336              		.loc 1 1285 0
 4337 00c2 234B     		ldr	r3, .L332+36
 4338 00c4 181C     		mov	r0, r3
 4339 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1286:.\main.c      ****     CyDelay(3000);
 4340              		.loc 1 1286 0
 4341 00ca 224B     		ldr	r3, .L332+40
 4342 00cc 181C     		mov	r0, r3
 4343 00ce FFF7FEFF 		bl	CyDelay
1287:.\main.c      ****     LED_Write(0);
 4344              		.loc 1 1287 0
 4345 00d2 0020     		mov	r0, #0
 4346 00d4 FFF7FEFF 		bl	LED_Write
1288:.\main.c      ****     
1289:.\main.c      ****     //initial calibration funtions for elbow and shoulder pots
1290:.\main.c      ****     SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
 4347              		.loc 1 1290 0
 4348 00d8 1F4B     		ldr	r3, .L332+44
 4349 00da 181C     		mov	r0, r3
 4350 00dc FFF7FEFF 		bl	CalibrationShoulder
 4351 00e0 031C     		mov	r3, r0
 4352 00e2 1A1C     		mov	r2, r3
 4353 00e4 1D4B     		ldr	r3, .L332+48
 4354 00e6 1A60     		str	r2, [r3]
1291:.\main.c      ****     SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
 4355              		.loc 1 1291 0
 4356 00e8 1D4B     		ldr	r3, .L332+52
 4357 00ea 181C     		mov	r0, r3
 4358 00ec FFF7FEFF 		bl	CalibrationShoulder
 4359 00f0 031C     		mov	r3, r0
 4360 00f2 1A1C     		mov	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 101


 4361 00f4 1B4B     		ldr	r3, .L332+56
 4362 00f6 1A60     		str	r2, [r3]
1292:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 4363              		.loc 1 1292 0
 4364 00f8 174B     		ldr	r3, .L332+44
 4365 00fa 181C     		mov	r0, r3
 4366 00fc FFF7FEFF 		bl	CalibrationElbow
 4367 0100 031C     		mov	r3, r0
 4368 0102 1A1C     		mov	r2, r3
 4369 0104 184B     		ldr	r3, .L332+60
 4370 0106 1A60     		str	r2, [r3]
1293:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 4371              		.loc 1 1293 0
 4372 0108 154B     		ldr	r3, .L332+52
 4373 010a 181C     		mov	r0, r3
 4374 010c FFF7FEFF 		bl	CalibrationElbow
 4375 0110 031C     		mov	r3, r0
 4376 0112 1A1C     		mov	r2, r3
 4377 0114 154B     		ldr	r3, .L332+64
 4378 0116 1A60     		str	r2, [r3]
1294:.\main.c      ****     
1295:.\main.c      ****     //ISR stuff
1296:.\main.c      ****     CyGlobalIntEnable;
 4379              		.loc 1 1296 0
 4380              	@ 1296 ".\main.c" 1
 4381 0118 62B6     		CPSIE   i
 4382              	@ 0 "" 2
1297:.\main.c      ****     isr_1_StartEx(timer_isr);
 4383              		.loc 1 1297 0
 4384              		.code	16
 4385 011a 154B     		ldr	r3, .L332+68
 4386 011c 181C     		mov	r0, r3
 4387 011e FFF7FEFF 		bl	isr_1_StartEx
1298:.\main.c      ****     Timer_1_Start();    
 4388              		.loc 1 1298 0
 4389 0122 FFF7FEFF 		bl	Timer_1_Start
1299:.\main.c      **** }
 4390              		.loc 1 1299 0
 4391 0126 BD46     		mov	sp, r7
 4392 0128 02B0     		add	sp, sp, #8
 4393              		@ sp needed
 4394 012a 80BD     		pop	{r7, pc}
 4395              	.L333:
 4396              		.align	2
 4397              	.L332:
 4398 012c 00000000 		.word	baseAzimuth_state
 4399 0130 00000000 		.word	wristTilt_state
 4400 0134 00000000 		.word	wristRotate_state
 4401 0138 00000000 		.word	shoulder_state
 4402 013c 00000000 		.word	elbow_state
 4403 0140 00000000 		.word	effector_state
 4404 0144 00000000 		.word	arduino_state
 4405 0148 87690000 		.word	27015
 4406 014c FF030000 		.word	1023
 4407 0150 DC050000 		.word	1500
 4408 0154 B80B0000 		.word	3000
 4409 0158 A4060000 		.word	1700
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 102


 4410 015c 00000000 		.word	SHOULDER_UPPER_BOUND
 4411 0160 14050000 		.word	1300
 4412 0164 00000000 		.word	SHOULDER_LOWER_BOUND
 4413 0168 00000000 		.word	ELBOW_UPPER_BOUND
 4414 016c 00000000 		.word	ELBOW_LOWER_BOUND
 4415 0170 00000000 		.word	timer_isr
 4416              		.cfi_endproc
 4417              	.LFE55:
 4418              		.size	initialize, .-initialize
 4419              		.section	.text.main,"ax",%progbits
 4420              		.align	2
 4421              		.global	main
 4422              		.code	16
 4423              		.thumb_func
 4424              		.type	main, %function
 4425              	main:
 4426              	.LFB56:
1300:.\main.c      **** int main()
1301:.\main.c      **** {  
 4427              		.loc 1 1301 0
 4428              		.cfi_startproc
 4429 0000 90B5     		push	{r4, r7, lr}
 4430              		.cfi_def_cfa_offset 12
 4431              		.cfi_offset 4, -12
 4432              		.cfi_offset 7, -8
 4433              		.cfi_offset 14, -4
 4434 0002 B7B0     		sub	sp, sp, #220
 4435              		.cfi_def_cfa_offset 232
 4436 0004 00AF     		add	r7, sp, #0
 4437              		.cfi_def_cfa_register 7
1302:.\main.c      ****     //Define variables
1303:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1304:.\main.c      ****     uint8 BA_cspot;
1305:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1306:.\main.c      ****     uint8 shldr_cspot;
1307:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1308:.\main.c      ****     uint8 elbw_cspot;
1309:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1310:.\main.c      ****     uint8 WT_cspot;
1311:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1312:.\main.c      ****     uint8 WR_cspot;
1313:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1314:.\main.c      ****     
1315:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4438              		.loc 1 1315 0
 4439 0006 3B1C     		mov	r3, r7
 4440 0008 D233     		add	r3, r3, #210
 4441 000a 0022     		mov	r2, #0
 4442 000c 1A70     		strb	r2, [r3]
1316:.\main.c      ****     int16 temp_val = 1500; 
 4443              		.loc 1 1316 0
 4444 000e 3B1C     		mov	r3, r7
 4445 0010 CA33     		add	r3, r3, #202
 4446 0012 5C4A     		ldr	r2, .L344
 4447 0014 1A80     		strh	r2, [r3]
1317:.\main.c      ****     
1318:.\main.c      ****     initialize();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 103


 4448              		.loc 1 1318 0
 4449 0016 FFF7FEFF 		bl	initialize
 4450              	.L342:
1319:.\main.c      **** 
1320:.\main.c      ****     for(;;)
1321:.\main.c      ****     {   
1322:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4451              		.loc 1 1322 0
 4452 001a FFF7FEFF 		bl	WIZ_INT_Read
 4453 001e 031C     		mov	r3, r0
 4454 0020 002B     		cmp	r3, #0
 4455 0022 20D1     		bne	.L335
1323:.\main.c      ****         {
1324:.\main.c      ****             wiznetClearInterrupts();
 4456              		.loc 1 1324 0
 4457 0024 FFF7FEFF 		bl	wiznetClearInterrupts
1325:.\main.c      ****             fill_data_array();
 4458              		.loc 1 1325 0
 4459 0028 FFF7FEFF 		bl	fill_data_array
1326:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1327:.\main.c      ****             BA_FLAG = 1;
 4460              		.loc 1 1327 0
 4461 002c 564B     		ldr	r3, .L344+4
 4462 002e 0122     		mov	r2, #1
 4463 0030 1A70     		strb	r2, [r3]
1328:.\main.c      ****             WR_FLAG = 1;
 4464              		.loc 1 1328 0
 4465 0032 564B     		ldr	r3, .L344+8
 4466 0034 0122     		mov	r2, #1
 4467 0036 1A70     		strb	r2, [r3]
1329:.\main.c      ****             WT_FLAG = 1;
 4468              		.loc 1 1329 0
 4469 0038 554B     		ldr	r3, .L344+12
 4470 003a 0122     		mov	r2, #1
 4471 003c 1A70     		strb	r2, [r3]
1330:.\main.c      ****             SHOULDER_FLAG = 1;
 4472              		.loc 1 1330 0
 4473 003e 554B     		ldr	r3, .L344+16
 4474 0040 0122     		mov	r2, #1
 4475 0042 1A70     		strb	r2, [r3]
1331:.\main.c      ****             ELBOW_FLAG = 1;
 4476              		.loc 1 1331 0
 4477 0044 544B     		ldr	r3, .L344+20
 4478 0046 0122     		mov	r2, #1
 4479 0048 1A70     		strb	r2, [r3]
1332:.\main.c      ****             EFFECTOR_FLAG = 1;
 4480              		.loc 1 1332 0
 4481 004a 544B     		ldr	r3, .L344+24
 4482 004c 0122     		mov	r2, #1
 4483 004e 1A70     		strb	r2, [r3]
1333:.\main.c      ****             ARD_FLAG = 1;
 4484              		.loc 1 1333 0
 4485 0050 534B     		ldr	r3, .L344+28
 4486 0052 0122     		mov	r2, #1
 4487 0054 1A70     		strb	r2, [r3]
1334:.\main.c      ****             fs_count = 0;
 4488              		.loc 1 1334 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 104


 4489 0056 3B1C     		mov	r3, r7
 4490 0058 D233     		add	r3, r3, #210
 4491 005a 0022     		mov	r2, #0
 4492 005c 1A70     		strb	r2, [r3]
1335:.\main.c      ****             send_packet(1); //send heartbeat
 4493              		.loc 1 1335 0
 4494 005e 0120     		mov	r0, #1
 4495 0060 FFF7FEFF 		bl	send_packet
 4496 0064 06E0     		b	.L336
 4497              	.L335:
1336:.\main.c      ****             //wiznet = 0; //for testing
1337:.\main.c      ****         }
1338:.\main.c      ****         else
1339:.\main.c      ****         {
1340:.\main.c      ****             fs_count += 1;
 4498              		.loc 1 1340 0
 4499 0066 3B1C     		mov	r3, r7
 4500 0068 D233     		add	r3, r3, #210
 4501 006a 3A1C     		mov	r2, r7
 4502 006c D232     		add	r2, r2, #210
 4503 006e 1278     		ldrb	r2, [r2]
 4504 0070 0132     		add	r2, r2, #1
 4505 0072 1A70     		strb	r2, [r3]
 4506              	.L336:
1341:.\main.c      ****         }
1342:.\main.c      ****         
1343:.\main.c      ****         if(fs_count >= 50)
 4507              		.loc 1 1343 0
 4508 0074 3B1C     		mov	r3, r7
 4509 0076 D233     		add	r3, r3, #210
 4510 0078 1B78     		ldrb	r3, [r3]
 4511 007a 312B     		cmp	r3, #49
 4512 007c 2CD9     		bls	.L337
1344:.\main.c      ****         {
1345:.\main.c      ****             temp_val = 1500;
 4513              		.loc 1 1345 0
 4514 007e 3B1C     		mov	r3, r7
 4515 0080 CA33     		add	r3, r3, #202
 4516 0082 404A     		ldr	r2, .L344
 4517 0084 1A80     		strh	r2, [r3]
 4518              	.LBB3:
1346:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4519              		.loc 1 1346 0
 4520 0086 0023     		mov	r3, #0
 4521 0088 CC20     		mov	r0, #204
 4522 008a C019     		add	r0, r0, r7
 4523 008c 0360     		str	r3, [r0]
 4524 008e 1DE0     		b	.L338
 4525              	.L339:
1347:.\main.c      ****             {
1348:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4526              		.loc 1 1348 0 discriminator 2
 4527 0090 3B1C     		mov	r3, r7
 4528 0092 CA33     		add	r3, r3, #202
 4529 0094 0022     		mov	r2, #0
 4530 0096 9B5E     		ldrsh	r3, [r3, r2]
 4531 0098 1B12     		asr	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 105


 4532 009a 9BB2     		uxth	r3, r3
 4533 009c DAB2     		uxtb	r2, r3
 4534 009e 4149     		ldr	r1, .L344+32
 4535 00a0 CC20     		mov	r0, #204
 4536 00a2 C019     		add	r0, r0, r7
 4537 00a4 0368     		ldr	r3, [r0]
 4538 00a6 CB18     		add	r3, r1, r3
 4539 00a8 1A70     		strb	r2, [r3]
1349:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4540              		.loc 1 1349 0 discriminator 2
 4541 00aa CC22     		mov	r2, #204
 4542 00ac D219     		add	r2, r2, r7
 4543 00ae 1368     		ldr	r3, [r2]
 4544 00b0 0133     		add	r3, r3, #1
 4545 00b2 3A1C     		mov	r2, r7
 4546 00b4 CA32     		add	r2, r2, #202
 4547 00b6 1288     		ldrh	r2, [r2]
 4548 00b8 D1B2     		uxtb	r1, r2
 4549 00ba 3A4A     		ldr	r2, .L344+32
 4550 00bc D154     		strb	r1, [r2, r3]
1346:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4551              		.loc 1 1346 0 discriminator 2
 4552 00be CC20     		mov	r0, #204
 4553 00c0 C019     		add	r0, r0, r7
 4554 00c2 0368     		ldr	r3, [r0]
 4555 00c4 0233     		add	r3, r3, #2
 4556 00c6 CC22     		mov	r2, #204
 4557 00c8 D219     		add	r2, r2, r7
 4558 00ca 1360     		str	r3, [r2]
 4559              	.L338:
1346:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4560              		.loc 1 1346 0 is_stmt 0 discriminator 1
 4561 00cc CC20     		mov	r0, #204
 4562 00ce C019     		add	r0, r0, r7
 4563 00d0 0368     		ldr	r3, [r0]
 4564 00d2 152B     		cmp	r3, #21
 4565 00d4 DCDD     		ble	.L339
 4566              	.LBE3:
1350:.\main.c      ****             }
1351:.\main.c      ****         }
1352:.\main.c      ****         else
1353:.\main.c      ****         {
1354:.\main.c      ****         
1355:.\main.c      ****         //if(wiznet gives a complete packet)
1356:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1357:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1358:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1359:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1360:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1361:.\main.c      ****             effector();
1362:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
1363:.\main.c      ****             send_packet(0); //send feedback once every tick
1364:.\main.c      ****             
1365:.\main.c      ****         //else{dropped_packets++}
1366:.\main.c      ****         }
1367:.\main.c      ****         
1368:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 106


 4567              		.loc 1 1368 0 is_stmt 1
 4568 00d6 4AE0     		b	.L343
 4569              	.L337:
1356:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4570              		.loc 1 1356 0
 4571 00d8 3C1C     		mov	r4, r7
 4572 00da D734     		add	r4, r4, #215
 4573 00dc 3B1C     		mov	r3, r7
 4574 00de D733     		add	r3, r3, #215
 4575 00e0 1A78     		ldrb	r2, [r3]
 4576 00e2 3B1C     		mov	r3, r7
 4577 00e4 A033     		add	r3, r3, #160
 4578 00e6 101C     		mov	r0, r2
 4579 00e8 191C     		mov	r1, r3
 4580 00ea FFF7FEFF 		bl	baseAzimuth
 4581 00ee 031C     		mov	r3, r0
 4582 00f0 2370     		strb	r3, [r4]
1357:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4583              		.loc 1 1357 0
 4584 00f2 3C1C     		mov	r4, r7
 4585 00f4 D634     		add	r4, r4, #214
 4586 00f6 3B1C     		mov	r3, r7
 4587 00f8 D633     		add	r3, r3, #214
 4588 00fa 1A78     		ldrb	r2, [r3]
 4589 00fc 3B1C     		mov	r3, r7
 4590 00fe 7833     		add	r3, r3, #120
 4591 0100 101C     		mov	r0, r2
 4592 0102 191C     		mov	r1, r3
 4593 0104 FFF7FEFF 		bl	shoulder
 4594 0108 031C     		mov	r3, r0
 4595 010a 2370     		strb	r3, [r4]
1358:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4596              		.loc 1 1358 0
 4597 010c 3C1C     		mov	r4, r7
 4598 010e D534     		add	r4, r4, #213
 4599 0110 3B1C     		mov	r3, r7
 4600 0112 D533     		add	r3, r3, #213
 4601 0114 1A78     		ldrb	r2, [r3]
 4602 0116 3B1C     		mov	r3, r7
 4603 0118 5033     		add	r3, r3, #80
 4604 011a 101C     		mov	r0, r2
 4605 011c 191C     		mov	r1, r3
 4606 011e FFF7FEFF 		bl	elbow
 4607 0122 031C     		mov	r3, r0
 4608 0124 2370     		strb	r3, [r4]
1359:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4609              		.loc 1 1359 0
 4610 0126 3C1C     		mov	r4, r7
 4611 0128 D434     		add	r4, r4, #212
 4612 012a 3B1C     		mov	r3, r7
 4613 012c D433     		add	r3, r3, #212
 4614 012e 1A78     		ldrb	r2, [r3]
 4615 0130 3B1C     		mov	r3, r7
 4616 0132 2833     		add	r3, r3, #40
 4617 0134 101C     		mov	r0, r2
 4618 0136 191C     		mov	r1, r3
 4619 0138 FFF7FEFF 		bl	wristTilt
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 107


 4620 013c 031C     		mov	r3, r0
 4621 013e 2370     		strb	r3, [r4]
1360:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4622              		.loc 1 1360 0
 4623 0140 3C1C     		mov	r4, r7
 4624 0142 D334     		add	r4, r4, #211
 4625 0144 3B1C     		mov	r3, r7
 4626 0146 D333     		add	r3, r3, #211
 4627 0148 1A78     		ldrb	r2, [r3]
 4628 014a 3B1C     		mov	r3, r7
 4629 014c 101C     		mov	r0, r2
 4630 014e 191C     		mov	r1, r3
 4631 0150 FFF7FEFF 		bl	wristRotate
 4632 0154 031C     		mov	r3, r0
 4633 0156 2370     		strb	r3, [r4]
1361:.\main.c      ****             effector();
 4634              		.loc 1 1361 0
 4635 0158 FFF7FEFF 		bl	effector
1362:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
 4636              		.loc 1 1362 0
 4637 015c 124B     		ldr	r3, .L344+36
 4638 015e 5B78     		ldrb	r3, [r3, #1]
 4639 0160 0133     		add	r3, r3, #1
 4640 0162 DAB2     		uxtb	r2, r3
 4641 0164 104B     		ldr	r3, .L344+36
 4642 0166 5A70     		strb	r2, [r3, #1]
1363:.\main.c      ****             send_packet(0); //send feedback once every tick
 4643              		.loc 1 1363 0
 4644 0168 0020     		mov	r0, #0
 4645 016a FFF7FEFF 		bl	send_packet
 4646              	.L343:
 4647              		.loc 1 1368 0
 4648 016e C046     		mov	r8, r8
 4649              	.L341:
 4650              		.loc 1 1368 0 is_stmt 0 discriminator 1
 4651 0170 0E4B     		ldr	r3, .L344+40
 4652 0172 1B78     		ldrb	r3, [r3]
 4653 0174 DBB2     		uxtb	r3, r3
 4654 0176 002B     		cmp	r3, #0
 4655 0178 FAD0     		beq	.L341
1369:.\main.c      ****         timerFlag = 0;
 4656              		.loc 1 1369 0 is_stmt 1
 4657 017a 0C4B     		ldr	r3, .L344+40
 4658 017c 0022     		mov	r2, #0
 4659 017e 1A70     		strb	r2, [r3]
1370:.\main.c      ****     } 
 4660              		.loc 1 1370 0
 4661 0180 4BE7     		b	.L342
 4662              	.L345:
 4663 0182 C046     		.align	2
 4664              	.L344:
 4665 0184 DC050000 		.word	1500
 4666 0188 00000000 		.word	BA_FLAG
 4667 018c 00000000 		.word	WR_FLAG
 4668 0190 00000000 		.word	WT_FLAG
 4669 0194 00000000 		.word	SHOULDER_FLAG
 4670 0198 00000000 		.word	ELBOW_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 108


 4671 019c 00000000 		.word	EFFECTOR_FLAG
 4672 01a0 00000000 		.word	ARD_FLAG
 4673 01a4 00000000 		.word	data_array
 4674 01a8 00000000 		.word	feedback_array
 4675 01ac 00000000 		.word	timerFlag
 4676              		.cfi_endproc
 4677              	.LFE56:
 4678              		.size	main, .-main
 4679              		.text
 4680              	.Letext0:
 4681              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4682              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4683              		.file 4 ".\\Generated_Source\\PSoC4/cytypes.h"
 4684              		.file 5 ".\\main.h"
 4685              		.section	.debug_info,"",%progbits
 4686              	.Ldebug_info0:
 4687 0000 CA0B0000 		.4byte	0xbca
 4688 0004 0400     		.2byte	0x4
 4689 0006 00000000 		.4byte	.Ldebug_abbrev0
 4690 000a 04       		.byte	0x4
 4691 000b 01       		.uleb128 0x1
 4692 000c 15060000 		.4byte	.LASF160
 4693 0010 01       		.byte	0x1
 4694 0011 BC070000 		.4byte	.LASF161
 4695 0015 02070000 		.4byte	.LASF162
 4696 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4697 001d 00000000 		.4byte	0
 4698 0021 00000000 		.4byte	.Ldebug_line0
 4699 0025 02       		.uleb128 0x2
 4700 0026 01       		.byte	0x1
 4701 0027 06       		.byte	0x6
 4702 0028 B8060000 		.4byte	.LASF0
 4703 002c 03       		.uleb128 0x3
 4704 002d F4040000 		.4byte	.LASF9
 4705 0031 02       		.byte	0x2
 4706 0032 1C       		.byte	0x1c
 4707 0033 37000000 		.4byte	0x37
 4708 0037 02       		.uleb128 0x2
 4709 0038 01       		.byte	0x1
 4710 0039 08       		.byte	0x8
 4711 003a A1050000 		.4byte	.LASF1
 4712 003e 02       		.uleb128 0x2
 4713 003f 02       		.byte	0x2
 4714 0040 05       		.byte	0x5
 4715 0041 6A040000 		.4byte	.LASF2
 4716 0045 02       		.uleb128 0x2
 4717 0046 02       		.byte	0x2
 4718 0047 07       		.byte	0x7
 4719 0048 D7060000 		.4byte	.LASF3
 4720 004c 02       		.uleb128 0x2
 4721 004d 04       		.byte	0x4
 4722 004e 05       		.byte	0x5
 4723 004f 8F040000 		.4byte	.LASF4
 4724 0053 02       		.uleb128 0x2
 4725 0054 04       		.byte	0x4
 4726 0055 07       		.byte	0x7
 4727 0056 3D050000 		.4byte	.LASF5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 109


 4728 005a 02       		.uleb128 0x2
 4729 005b 08       		.byte	0x8
 4730 005c 05       		.byte	0x5
 4731 005d 0C030000 		.4byte	.LASF6
 4732 0061 02       		.uleb128 0x2
 4733 0062 08       		.byte	0x8
 4734 0063 07       		.byte	0x7
 4735 0064 A6010000 		.4byte	.LASF7
 4736 0068 04       		.uleb128 0x4
 4737 0069 04       		.byte	0x4
 4738 006a 05       		.byte	0x5
 4739 006b 696E7400 		.ascii	"int\000"
 4740 006f 02       		.uleb128 0x2
 4741 0070 04       		.byte	0x4
 4742 0071 07       		.byte	0x7
 4743 0072 80000000 		.4byte	.LASF8
 4744 0076 03       		.uleb128 0x3
 4745 0077 E2020000 		.4byte	.LASF10
 4746 007b 03       		.byte	0x3
 4747 007c 2A       		.byte	0x2a
 4748 007d 2C000000 		.4byte	0x2c
 4749 0081 03       		.uleb128 0x3
 4750 0082 66070000 		.4byte	.LASF11
 4751 0086 04       		.byte	0x4
 4752 0087 A1       		.byte	0xa1
 4753 0088 37000000 		.4byte	0x37
 4754 008c 03       		.uleb128 0x3
 4755 008d AD020000 		.4byte	.LASF12
 4756 0091 04       		.byte	0x4
 4757 0092 A2       		.byte	0xa2
 4758 0093 45000000 		.4byte	0x45
 4759 0097 03       		.uleb128 0x3
 4760 0098 9E030000 		.4byte	.LASF13
 4761 009c 04       		.byte	0x4
 4762 009d A3       		.byte	0xa3
 4763 009e 53000000 		.4byte	0x53
 4764 00a2 03       		.uleb128 0x3
 4765 00a3 BB020000 		.4byte	.LASF14
 4766 00a7 04       		.byte	0x4
 4767 00a8 A4       		.byte	0xa4
 4768 00a9 25000000 		.4byte	0x25
 4769 00ad 03       		.uleb128 0x3
 4770 00ae A0000000 		.4byte	.LASF15
 4771 00b2 04       		.byte	0x4
 4772 00b3 A5       		.byte	0xa5
 4773 00b4 3E000000 		.4byte	0x3e
 4774 00b8 02       		.uleb128 0x2
 4775 00b9 04       		.byte	0x4
 4776 00ba 04       		.byte	0x4
 4777 00bb 72010000 		.4byte	.LASF16
 4778 00bf 02       		.uleb128 0x2
 4779 00c0 08       		.byte	0x8
 4780 00c1 04       		.byte	0x4
 4781 00c2 6C070000 		.4byte	.LASF17
 4782 00c6 02       		.uleb128 0x2
 4783 00c7 01       		.byte	0x1
 4784 00c8 08       		.byte	0x8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 110


 4785 00c9 A8020000 		.4byte	.LASF18
 4786 00cd 05       		.uleb128 0x5
 4787 00ce 81000000 		.4byte	0x81
 4788 00d2 02       		.uleb128 0x2
 4789 00d3 04       		.byte	0x4
 4790 00d4 07       		.byte	0x7
 4791 00d5 34050000 		.4byte	.LASF19
 4792 00d9 06       		.uleb128 0x6
 4793 00da DC040000 		.4byte	.LASF24
 4794 00de 01       		.byte	0x1
 4795 00df 01       		.byte	0x1
 4796 00e0 8201     		.2byte	0x182
 4797 00e2 FF000000 		.4byte	0xff
 4798 00e6 07       		.uleb128 0x7
 4799 00e7 3A010000 		.4byte	.LASF20
 4800 00eb 00       		.sleb128 0
 4801 00ec 07       		.uleb128 0x7
 4802 00ed 0C000000 		.4byte	.LASF21
 4803 00f1 01       		.sleb128 1
 4804 00f2 07       		.uleb128 0x7
 4805 00f3 98040000 		.4byte	.LASF22
 4806 00f7 02       		.sleb128 2
 4807 00f8 07       		.uleb128 0x7
 4808 00f9 53070000 		.4byte	.LASF23
 4809 00fd 03       		.sleb128 3
 4810 00fe 00       		.byte	0
 4811 00ff 06       		.uleb128 0x6
 4812 0100 43030000 		.4byte	.LASF25
 4813 0104 01       		.byte	0x1
 4814 0105 01       		.byte	0x1
 4815 0106 F201     		.2byte	0x1f2
 4816 0108 25010000 		.4byte	0x125
 4817 010c 07       		.uleb128 0x7
 4818 010d 06010000 		.4byte	.LASF26
 4819 0111 00       		.sleb128 0
 4820 0112 07       		.uleb128 0x7
 4821 0113 09060000 		.4byte	.LASF27
 4822 0117 01       		.sleb128 1
 4823 0118 07       		.uleb128 0x7
 4824 0119 5B040000 		.4byte	.LASF28
 4825 011d 02       		.sleb128 2
 4826 011e 07       		.uleb128 0x7
 4827 011f 69050000 		.4byte	.LASF29
 4828 0123 03       		.sleb128 3
 4829 0124 00       		.byte	0
 4830 0125 06       		.uleb128 0x6
 4831 0126 61000000 		.4byte	.LASF30
 4832 012a 01       		.byte	0x1
 4833 012b 01       		.byte	0x1
 4834 012c 6502     		.2byte	0x265
 4835 012e 4B010000 		.4byte	0x14b
 4836 0132 07       		.uleb128 0x7
 4837 0133 DE030000 		.4byte	.LASF31
 4838 0137 00       		.sleb128 0
 4839 0138 07       		.uleb128 0x7
 4840 0139 C5070000 		.4byte	.LASF32
 4841 013d 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 111


 4842 013e 07       		.uleb128 0x7
 4843 013f 4F050000 		.4byte	.LASF33
 4844 0143 02       		.sleb128 2
 4845 0144 07       		.uleb128 0x7
 4846 0145 EA060000 		.4byte	.LASF34
 4847 0149 03       		.sleb128 3
 4848 014a 00       		.byte	0
 4849 014b 06       		.uleb128 0x6
 4850 014c 1A030000 		.4byte	.LASF35
 4851 0150 01       		.byte	0x1
 4852 0151 01       		.byte	0x1
 4853 0152 2203     		.2byte	0x322
 4854 0154 71010000 		.4byte	0x171
 4855 0158 07       		.uleb128 0x7
 4856 0159 8A050000 		.4byte	.LASF36
 4857 015d 00       		.sleb128 0
 4858 015e 07       		.uleb128 0x7
 4859 015f F2020000 		.4byte	.LASF37
 4860 0163 01       		.sleb128 1
 4861 0164 07       		.uleb128 0x7
 4862 0165 E0050000 		.4byte	.LASF38
 4863 0169 02       		.sleb128 2
 4864 016a 07       		.uleb128 0x7
 4865 016b 82020000 		.4byte	.LASF39
 4866 016f 03       		.sleb128 3
 4867 0170 00       		.byte	0
 4868 0171 06       		.uleb128 0x6
 4869 0172 8D000000 		.4byte	.LASF40
 4870 0176 01       		.byte	0x1
 4871 0177 01       		.byte	0x1
 4872 0178 E003     		.2byte	0x3e0
 4873 017a 97010000 		.4byte	0x197
 4874 017e 07       		.uleb128 0x7
 4875 017f D0000000 		.4byte	.LASF41
 4876 0183 00       		.sleb128 0
 4877 0184 07       		.uleb128 0x7
 4878 0185 78010000 		.4byte	.LASF42
 4879 0189 01       		.sleb128 1
 4880 018a 07       		.uleb128 0x7
 4881 018b 56000000 		.4byte	.LASF43
 4882 018f 02       		.sleb128 2
 4883 0190 07       		.uleb128 0x7
 4884 0191 D4040000 		.4byte	.LASF44
 4885 0195 03       		.sleb128 3
 4886 0196 00       		.byte	0
 4887 0197 06       		.uleb128 0x6
 4888 0198 79030000 		.4byte	.LASF45
 4889 019c 01       		.byte	0x1
 4890 019d 01       		.byte	0x1
 4891 019e 3C04     		.2byte	0x43c
 4892 01a0 BD010000 		.4byte	0x1bd
 4893 01a4 07       		.uleb128 0x7
 4894 01a5 32020000 		.4byte	.LASF46
 4895 01a9 00       		.sleb128 0
 4896 01aa 07       		.uleb128 0x7
 4897 01ab CB050000 		.4byte	.LASF47
 4898 01af 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 112


 4899 01b0 07       		.uleb128 0x7
 4900 01b1 E2010000 		.4byte	.LASF48
 4901 01b5 02       		.sleb128 2
 4902 01b6 07       		.uleb128 0x7
 4903 01b7 16050000 		.4byte	.LASF49
 4904 01bb 03       		.sleb128 3
 4905 01bc 00       		.byte	0
 4906 01bd 06       		.uleb128 0x6
 4907 01be 65020000 		.4byte	.LASF50
 4908 01c2 01       		.byte	0x1
 4909 01c3 01       		.byte	0x1
 4910 01c4 8604     		.2byte	0x486
 4911 01c6 E9010000 		.4byte	0x1e9
 4912 01ca 07       		.uleb128 0x7
 4913 01cb D8020000 		.4byte	.LASF51
 4914 01cf 00       		.sleb128 0
 4915 01d0 07       		.uleb128 0x7
 4916 01d1 7E070000 		.4byte	.LASF52
 4917 01d5 01       		.sleb128 1
 4918 01d6 07       		.uleb128 0x7
 4919 01d7 00060000 		.4byte	.LASF53
 4920 01db 02       		.sleb128 2
 4921 01dc 07       		.uleb128 0x7
 4922 01dd 2B000000 		.4byte	.LASF54
 4923 01e1 03       		.sleb128 3
 4924 01e2 07       		.uleb128 0x7
 4925 01e3 30010000 		.4byte	.LASF55
 4926 01e7 04       		.sleb128 4
 4927 01e8 00       		.byte	0
 4928 01e9 08       		.uleb128 0x8
 4929 01ea A5040000 		.4byte	.LASF89
 4930 01ee 01       		.byte	0x1
 4931 01ef 0A       		.byte	0xa
 4932 01f0 00000000 		.4byte	.LFB34
 4933 01f4 28000000 		.4byte	.LFE34-.LFB34
 4934 01f8 01       		.uleb128 0x1
 4935 01f9 9C       		.byte	0x9c
 4936 01fa 0D020000 		.4byte	0x20d
 4937 01fe 09       		.uleb128 0x9
 4938 01ff 8F070000 		.4byte	.LASF56
 4939 0203 01       		.byte	0x1
 4940 0204 0C       		.byte	0xc
 4941 0205 97000000 		.4byte	0x97
 4942 0209 02       		.uleb128 0x2
 4943 020a 91       		.byte	0x91
 4944 020b 74       		.sleb128 -12
 4945 020c 00       		.byte	0
 4946 020d 0A       		.uleb128 0xa
 4947 020e AF000000 		.4byte	.LASF62
 4948 0212 01       		.byte	0x1
 4949 0213 12       		.byte	0x12
 4950 0214 8C000000 		.4byte	0x8c
 4951 0218 00000000 		.4byte	.LFB35
 4952 021c 90010000 		.4byte	.LFE35-.LFB35
 4953 0220 01       		.uleb128 0x1
 4954 0221 9C       		.byte	0x9c
 4955 0222 87020000 		.4byte	0x287
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 113


 4956 0226 0B       		.uleb128 0xb
 4957 0227 1F050000 		.4byte	.LASF64
 4958 022b 01       		.byte	0x1
 4959 022c 12       		.byte	0x12
 4960 022d 8C000000 		.4byte	0x8c
 4961 0231 02       		.uleb128 0x2
 4962 0232 91       		.byte	0x91
 4963 0233 66       		.sleb128 -26
 4964 0234 09       		.uleb128 0x9
 4965 0235 D1020000 		.4byte	.LASF57
 4966 0239 01       		.byte	0x1
 4967 023a 14       		.byte	0x14
 4968 023b 81000000 		.4byte	0x81
 4969 023f 02       		.uleb128 0x2
 4970 0240 91       		.byte	0x91
 4971 0241 71       		.sleb128 -15
 4972 0242 0C       		.uleb128 0xc
 4973 0243 6900     		.ascii	"i\000"
 4974 0245 01       		.byte	0x1
 4975 0246 15       		.byte	0x15
 4976 0247 81000000 		.4byte	0x81
 4977 024b 02       		.uleb128 0x2
 4978 024c 91       		.byte	0x91
 4979 024d 77       		.sleb128 -9
 4980 024e 09       		.uleb128 0x9
 4981 024f 98030000 		.4byte	.LASF58
 4982 0253 01       		.byte	0x1
 4983 0254 16       		.byte	0x16
 4984 0255 8C000000 		.4byte	0x8c
 4985 0259 02       		.uleb128 0x2
 4986 025a 91       		.byte	0x91
 4987 025b 74       		.sleb128 -12
 4988 025c 09       		.uleb128 0x9
 4989 025d CF060000 		.4byte	.LASF59
 4990 0261 01       		.byte	0x1
 4991 0262 17       		.byte	0x17
 4992 0263 8C000000 		.4byte	0x8c
 4993 0267 02       		.uleb128 0x2
 4994 0268 91       		.byte	0x91
 4995 0269 72       		.sleb128 -14
 4996 026a 09       		.uleb128 0x9
 4997 026b 2F040000 		.4byte	.LASF60
 4998 026f 01       		.byte	0x1
 4999 0270 18       		.byte	0x18
 5000 0271 97000000 		.4byte	0x97
 5001 0275 02       		.uleb128 0x2
 5002 0276 91       		.byte	0x91
 5003 0277 6C       		.sleb128 -20
 5004 0278 09       		.uleb128 0x9
 5005 0279 A4060000 		.4byte	.LASF61
 5006 027d 01       		.byte	0x1
 5007 027e 19       		.byte	0x19
 5008 027f AD000000 		.4byte	0xad
 5009 0283 02       		.uleb128 0x2
 5010 0284 91       		.byte	0x91
 5011 0285 6A       		.sleb128 -22
 5012 0286 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 114


 5013 0287 0A       		.uleb128 0xa
 5014 0288 51020000 		.4byte	.LASF63
 5015 028c 01       		.byte	0x1
 5016 028d 53       		.byte	0x53
 5017 028e 8C000000 		.4byte	0x8c
 5018 0292 00000000 		.4byte	.LFB36
 5019 0296 90010000 		.4byte	.LFE36-.LFB36
 5020 029a 01       		.uleb128 0x1
 5021 029b 9C       		.byte	0x9c
 5022 029c 01030000 		.4byte	0x301
 5023 02a0 0B       		.uleb128 0xb
 5024 02a1 1F050000 		.4byte	.LASF64
 5025 02a5 01       		.byte	0x1
 5026 02a6 53       		.byte	0x53
 5027 02a7 8C000000 		.4byte	0x8c
 5028 02ab 02       		.uleb128 0x2
 5029 02ac 91       		.byte	0x91
 5030 02ad 66       		.sleb128 -26
 5031 02ae 09       		.uleb128 0x9
 5032 02af D1020000 		.4byte	.LASF57
 5033 02b3 01       		.byte	0x1
 5034 02b4 55       		.byte	0x55
 5035 02b5 81000000 		.4byte	0x81
 5036 02b9 02       		.uleb128 0x2
 5037 02ba 91       		.byte	0x91
 5038 02bb 71       		.sleb128 -15
 5039 02bc 0C       		.uleb128 0xc
 5040 02bd 6900     		.ascii	"i\000"
 5041 02bf 01       		.byte	0x1
 5042 02c0 56       		.byte	0x56
 5043 02c1 81000000 		.4byte	0x81
 5044 02c5 02       		.uleb128 0x2
 5045 02c6 91       		.byte	0x91
 5046 02c7 77       		.sleb128 -9
 5047 02c8 09       		.uleb128 0x9
 5048 02c9 98030000 		.4byte	.LASF58
 5049 02cd 01       		.byte	0x1
 5050 02ce 57       		.byte	0x57
 5051 02cf 8C000000 		.4byte	0x8c
 5052 02d3 02       		.uleb128 0x2
 5053 02d4 91       		.byte	0x91
 5054 02d5 74       		.sleb128 -12
 5055 02d6 09       		.uleb128 0x9
 5056 02d7 CF060000 		.4byte	.LASF59
 5057 02db 01       		.byte	0x1
 5058 02dc 58       		.byte	0x58
 5059 02dd 8C000000 		.4byte	0x8c
 5060 02e1 02       		.uleb128 0x2
 5061 02e2 91       		.byte	0x91
 5062 02e3 72       		.sleb128 -14
 5063 02e4 09       		.uleb128 0x9
 5064 02e5 2F040000 		.4byte	.LASF60
 5065 02e9 01       		.byte	0x1
 5066 02ea 59       		.byte	0x59
 5067 02eb 97000000 		.4byte	0x97
 5068 02ef 02       		.uleb128 0x2
 5069 02f0 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 115


 5070 02f1 6C       		.sleb128 -20
 5071 02f2 09       		.uleb128 0x9
 5072 02f3 A4060000 		.4byte	.LASF61
 5073 02f7 01       		.byte	0x1
 5074 02f8 5A       		.byte	0x5a
 5075 02f9 AD000000 		.4byte	0xad
 5076 02fd 02       		.uleb128 0x2
 5077 02fe 91       		.byte	0x91
 5078 02ff 6A       		.sleb128 -22
 5079 0300 00       		.byte	0
 5080 0301 0A       		.uleb128 0xa
 5081 0302 CF060000 		.4byte	.LASF59
 5082 0306 01       		.byte	0x1
 5083 0307 93       		.byte	0x93
 5084 0308 8C000000 		.4byte	0x8c
 5085 030c 00000000 		.4byte	.LFB37
 5086 0310 78000000 		.4byte	.LFE37-.LFB37
 5087 0314 01       		.uleb128 0x1
 5088 0315 9C       		.byte	0x9c
 5089 0316 5F030000 		.4byte	0x35f
 5090 031a 0B       		.uleb128 0xb
 5091 031b 86040000 		.4byte	.LASF65
 5092 031f 01       		.byte	0x1
 5093 0320 93       		.byte	0x93
 5094 0321 5F030000 		.4byte	0x35f
 5095 0325 02       		.uleb128 0x2
 5096 0326 91       		.byte	0x91
 5097 0327 64       		.sleb128 -28
 5098 0328 0B       		.uleb128 0xb
 5099 0329 16000000 		.4byte	.LASF66
 5100 032d 01       		.byte	0x1
 5101 032e 93       		.byte	0x93
 5102 032f 81000000 		.4byte	0x81
 5103 0333 02       		.uleb128 0x2
 5104 0334 91       		.byte	0x91
 5105 0335 63       		.sleb128 -29
 5106 0336 0C       		.uleb128 0xc
 5107 0337 6900     		.ascii	"i\000"
 5108 0339 01       		.byte	0x1
 5109 033a 95       		.byte	0x95
 5110 033b 81000000 		.4byte	0x81
 5111 033f 02       		.uleb128 0x2
 5112 0340 91       		.byte	0x91
 5113 0341 77       		.sleb128 -9
 5114 0342 0C       		.uleb128 0xc
 5115 0343 73756D00 		.ascii	"sum\000"
 5116 0347 01       		.byte	0x1
 5117 0348 96       		.byte	0x96
 5118 0349 97000000 		.4byte	0x97
 5119 034d 02       		.uleb128 0x2
 5120 034e 91       		.byte	0x91
 5121 034f 70       		.sleb128 -16
 5122 0350 0C       		.uleb128 0xc
 5123 0351 61766700 		.ascii	"avg\000"
 5124 0355 01       		.byte	0x1
 5125 0356 97       		.byte	0x97
 5126 0357 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 116


 5127 035b 02       		.uleb128 0x2
 5128 035c 91       		.byte	0x91
 5129 035d 6E       		.sleb128 -18
 5130 035e 00       		.byte	0
 5131 035f 0D       		.uleb128 0xd
 5132 0360 04       		.byte	0x4
 5133 0361 8C000000 		.4byte	0x8c
 5134 0365 0E       		.uleb128 0xe
 5135 0366 E8000000 		.4byte	.LASF67
 5136 036a 01       		.byte	0x1
 5137 036b A3       		.byte	0xa3
 5138 036c 81000000 		.4byte	0x81
 5139 0370 00000000 		.4byte	.LFB38
 5140 0374 3E000000 		.4byte	.LFE38-.LFB38
 5141 0378 01       		.uleb128 0x1
 5142 0379 9C       		.byte	0x9c
 5143 037a 9B030000 		.4byte	0x39b
 5144 037e 0B       		.uleb128 0xb
 5145 037f 2A030000 		.4byte	.LASF68
 5146 0383 01       		.byte	0x1
 5147 0384 A3       		.byte	0xa3
 5148 0385 81000000 		.4byte	0x81
 5149 0389 02       		.uleb128 0x2
 5150 038a 91       		.byte	0x91
 5151 038b 77       		.sleb128 -9
 5152 038c 0B       		.uleb128 0xb
 5153 038d 7D020000 		.4byte	.LASF69
 5154 0391 01       		.byte	0x1
 5155 0392 A3       		.byte	0xa3
 5156 0393 81000000 		.4byte	0x81
 5157 0397 02       		.uleb128 0x2
 5158 0398 91       		.byte	0x91
 5159 0399 76       		.sleb128 -10
 5160 039a 00       		.byte	0
 5161 039b 0A       		.uleb128 0xa
 5162 039c FE040000 		.4byte	.LASF70
 5163 03a0 01       		.byte	0x1
 5164 03a1 B0       		.byte	0xb0
 5165 03a2 81000000 		.4byte	0x81
 5166 03a6 00000000 		.4byte	.LFB39
 5167 03aa 0C010000 		.4byte	.LFE39-.LFB39
 5168 03ae 01       		.uleb128 0x1
 5169 03af 9C       		.byte	0x9c
 5170 03b0 FB030000 		.4byte	0x3fb
 5171 03b4 0B       		.uleb128 0xb
 5172 03b5 F9030000 		.4byte	.LASF71
 5173 03b9 01       		.byte	0x1
 5174 03ba B0       		.byte	0xb0
 5175 03bb 5F030000 		.4byte	0x35f
 5176 03bf 02       		.uleb128 0x2
 5177 03c0 91       		.byte	0x91
 5178 03c1 6C       		.sleb128 -20
 5179 03c2 0B       		.uleb128 0xb
 5180 03c3 EA020000 		.4byte	.LASF72
 5181 03c7 01       		.byte	0x1
 5182 03c8 B0       		.byte	0xb0
 5183 03c9 81000000 		.4byte	0x81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 117


 5184 03cd 02       		.uleb128 0x2
 5185 03ce 91       		.byte	0x91
 5186 03cf 6B       		.sleb128 -21
 5187 03d0 0B       		.uleb128 0xb
 5188 03d1 45010000 		.4byte	.LASF73
 5189 03d5 01       		.byte	0x1
 5190 03d6 B0       		.byte	0xb0
 5191 03d7 81000000 		.4byte	0x81
 5192 03db 02       		.uleb128 0x2
 5193 03dc 91       		.byte	0x91
 5194 03dd 6A       		.sleb128 -22
 5195 03de 0B       		.uleb128 0xb
 5196 03df 28040000 		.4byte	.LASF74
 5197 03e3 01       		.byte	0x1
 5198 03e4 B0       		.byte	0xb0
 5199 03e5 68000000 		.4byte	0x68
 5200 03e9 02       		.uleb128 0x2
 5201 03ea 91       		.byte	0x91
 5202 03eb 64       		.sleb128 -28
 5203 03ec 09       		.uleb128 0x9
 5204 03ed 8E010000 		.4byte	.LASF75
 5205 03f1 01       		.byte	0x1
 5206 03f2 B2       		.byte	0xb2
 5207 03f3 81000000 		.4byte	0x81
 5208 03f7 02       		.uleb128 0x2
 5209 03f8 91       		.byte	0x91
 5210 03f9 77       		.sleb128 -9
 5211 03fa 00       		.byte	0
 5212 03fb 0A       		.uleb128 0xa
 5213 03fc 5B010000 		.4byte	.LASF76
 5214 0400 01       		.byte	0x1
 5215 0401 D6       		.byte	0xd6
 5216 0402 81000000 		.4byte	0x81
 5217 0406 00000000 		.4byte	.LFB40
 5218 040a 0C020000 		.4byte	.LFE40-.LFB40
 5219 040e 01       		.uleb128 0x1
 5220 040f 9C       		.byte	0x9c
 5221 0410 4D040000 		.4byte	0x44d
 5222 0414 0B       		.uleb128 0xb
 5223 0415 98020000 		.4byte	.LASF77
 5224 0419 01       		.byte	0x1
 5225 041a D6       		.byte	0xd6
 5226 041b 81000000 		.4byte	0x81
 5227 041f 02       		.uleb128 0x2
 5228 0420 91       		.byte	0x91
 5229 0421 6F       		.sleb128 -17
 5230 0422 0B       		.uleb128 0xb
 5231 0423 F9030000 		.4byte	.LASF71
 5232 0427 01       		.byte	0x1
 5233 0428 D6       		.byte	0xd6
 5234 0429 5F030000 		.4byte	0x35f
 5235 042d 02       		.uleb128 0x2
 5236 042e 91       		.byte	0x91
 5237 042f 68       		.sleb128 -24
 5238 0430 0B       		.uleb128 0xb
 5239 0431 43040000 		.4byte	.LASF78
 5240 0435 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 118


 5241 0436 D6       		.byte	0xd6
 5242 0437 81000000 		.4byte	0x81
 5243 043b 02       		.uleb128 0x2
 5244 043c 91       		.byte	0x91
 5245 043d 6E       		.sleb128 -18
 5246 043e 0B       		.uleb128 0xb
 5247 043f 9C060000 		.4byte	.LASF79
 5248 0443 01       		.byte	0x1
 5249 0444 D6       		.byte	0xd6
 5250 0445 8C000000 		.4byte	0x8c
 5251 0449 02       		.uleb128 0x2
 5252 044a 91       		.byte	0x91
 5253 044b 6C       		.sleb128 -20
 5254 044c 00       		.byte	0
 5255 044d 0F       		.uleb128 0xf
 5256 044e B9030000 		.4byte	.LASF80
 5257 0452 01       		.byte	0x1
 5258 0453 0401     		.2byte	0x104
 5259 0455 8C000000 		.4byte	0x8c
 5260 0459 00000000 		.4byte	.LFB41
 5261 045d 84000000 		.4byte	.LFE41-.LFB41
 5262 0461 01       		.uleb128 0x1
 5263 0462 9C       		.byte	0x9c
 5264 0463 D1040000 		.4byte	0x4d1
 5265 0467 10       		.uleb128 0x10
 5266 0468 96050000 		.4byte	.LASF81
 5267 046c 01       		.byte	0x1
 5268 046d 0401     		.2byte	0x104
 5269 046f D1040000 		.4byte	0x4d1
 5270 0473 02       		.uleb128 0x2
 5271 0474 91       		.byte	0x91
 5272 0475 6C       		.sleb128 -20
 5273 0476 10       		.uleb128 0x10
 5274 0477 EE010000 		.4byte	.LASF82
 5275 047b 01       		.byte	0x1
 5276 047c 0401     		.2byte	0x104
 5277 047e 81000000 		.4byte	0x81
 5278 0482 02       		.uleb128 0x2
 5279 0483 91       		.byte	0x91
 5280 0484 6B       		.sleb128 -21
 5281 0485 10       		.uleb128 0x10
 5282 0486 F4010000 		.4byte	.LASF83
 5283 048a 01       		.byte	0x1
 5284 048b 0401     		.2byte	0x104
 5285 048d 81000000 		.4byte	0x81
 5286 0491 02       		.uleb128 0x2
 5287 0492 91       		.byte	0x91
 5288 0493 6A       		.sleb128 -22
 5289 0494 11       		.uleb128 0x11
 5290 0495 9C060000 		.4byte	.LASF79
 5291 0499 01       		.byte	0x1
 5292 049a 0601     		.2byte	0x106
 5293 049c 8C000000 		.4byte	0x8c
 5294 04a0 02       		.uleb128 0x2
 5295 04a1 91       		.byte	0x91
 5296 04a2 70       		.sleb128 -16
 5297 04a3 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 119


 5298 04a4 0F020000 		.4byte	.LASF84
 5299 04a8 01       		.byte	0x1
 5300 04a9 0701     		.2byte	0x107
 5301 04ab AD000000 		.4byte	0xad
 5302 04af 02       		.uleb128 0x2
 5303 04b0 91       		.byte	0x91
 5304 04b1 76       		.sleb128 -10
 5305 04b2 11       		.uleb128 0x11
 5306 04b3 15020000 		.4byte	.LASF85
 5307 04b7 01       		.byte	0x1
 5308 04b8 0801     		.2byte	0x108
 5309 04ba AD000000 		.4byte	0xad
 5310 04be 02       		.uleb128 0x2
 5311 04bf 91       		.byte	0x91
 5312 04c0 74       		.sleb128 -12
 5313 04c1 11       		.uleb128 0x11
 5314 04c2 1B020000 		.4byte	.LASF86
 5315 04c6 01       		.byte	0x1
 5316 04c7 0901     		.2byte	0x109
 5317 04c9 AD000000 		.4byte	0xad
 5318 04cd 02       		.uleb128 0x2
 5319 04ce 91       		.byte	0x91
 5320 04cf 72       		.sleb128 -14
 5321 04d0 00       		.byte	0
 5322 04d1 0D       		.uleb128 0xd
 5323 04d2 04       		.byte	0x4
 5324 04d3 A2000000 		.4byte	0xa2
 5325 04d7 12       		.uleb128 0x12
 5326 04d8 37040000 		.4byte	.LASF87
 5327 04dc 01       		.byte	0x1
 5328 04dd 1201     		.2byte	0x112
 5329 04df 8C000000 		.4byte	0x8c
 5330 04e3 00000000 		.4byte	.LFB42
 5331 04e7 28000000 		.4byte	.LFE42-.LFB42
 5332 04eb 01       		.uleb128 0x1
 5333 04ec 9C       		.byte	0x9c
 5334 04ed 10050000 		.4byte	0x510
 5335 04f1 10       		.uleb128 0x10
 5336 04f2 2F040000 		.4byte	.LASF60
 5337 04f6 01       		.byte	0x1
 5338 04f7 1201     		.2byte	0x112
 5339 04f9 97000000 		.4byte	0x97
 5340 04fd 02       		.uleb128 0x2
 5341 04fe 91       		.byte	0x91
 5342 04ff 6C       		.sleb128 -20
 5343 0500 11       		.uleb128 0x11
 5344 0501 C0020000 		.4byte	.LASF88
 5345 0505 01       		.byte	0x1
 5346 0506 1401     		.2byte	0x114
 5347 0508 8C000000 		.4byte	0x8c
 5348 050c 02       		.uleb128 0x2
 5349 050d 91       		.byte	0x91
 5350 050e 76       		.sleb128 -10
 5351 050f 00       		.byte	0
 5352 0510 13       		.uleb128 0x13
 5353 0511 1C040000 		.4byte	.LASF90
 5354 0515 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 120


 5355 0516 1801     		.2byte	0x118
 5356 0518 00000000 		.4byte	.LFB43
 5357 051c FC000000 		.4byte	.LFE43-.LFB43
 5358 0520 01       		.uleb128 0x1
 5359 0521 9C       		.byte	0x9c
 5360 0522 36050000 		.4byte	0x536
 5361 0526 10       		.uleb128 0x10
 5362 0527 C4060000 		.4byte	.LASF91
 5363 052b 01       		.byte	0x1
 5364 052c 1801     		.2byte	0x118
 5365 052e 81000000 		.4byte	0x81
 5366 0532 02       		.uleb128 0x2
 5367 0533 91       		.byte	0x91
 5368 0534 77       		.sleb128 -9
 5369 0535 00       		.byte	0
 5370 0536 14       		.uleb128 0x14
 5371 0537 AF050000 		.4byte	.LASF114
 5372 053b 01       		.byte	0x1
 5373 053c 4801     		.2byte	0x148
 5374 053e 00000000 		.4byte	.LFB44
 5375 0542 18000000 		.4byte	.LFE44-.LFB44
 5376 0546 01       		.uleb128 0x1
 5377 0547 9C       		.byte	0x9c
 5378 0548 13       		.uleb128 0x13
 5379 0549 BD010000 		.4byte	.LASF92
 5380 054d 01       		.byte	0x1
 5381 054e 4D01     		.2byte	0x14d
 5382 0550 00000000 		.4byte	.LFB45
 5383 0554 98000000 		.4byte	.LFE45-.LFB45
 5384 0558 01       		.uleb128 0x1
 5385 0559 9C       		.byte	0x9c
 5386 055a 8C050000 		.4byte	0x58c
 5387 055e 10       		.uleb128 0x10
 5388 055f 87070000 		.4byte	.LASF93
 5389 0563 01       		.byte	0x1
 5390 0564 4D01     		.2byte	0x14d
 5391 0566 81000000 		.4byte	0x81
 5392 056a 02       		.uleb128 0x2
 5393 056b 91       		.byte	0x91
 5394 056c 67       		.sleb128 -25
 5395 056d 10       		.uleb128 0x10
 5396 056e B3070000 		.4byte	.LASF94
 5397 0572 01       		.byte	0x1
 5398 0573 4D01     		.2byte	0x14d
 5399 0575 8C000000 		.4byte	0x8c
 5400 0579 02       		.uleb128 0x2
 5401 057a 91       		.byte	0x91
 5402 057b 64       		.sleb128 -28
 5403 057c 11       		.uleb128 0x11
 5404 057d F9030000 		.4byte	.LASF71
 5405 0581 01       		.byte	0x1
 5406 0582 4F01     		.2byte	0x14f
 5407 0584 8C050000 		.4byte	0x58c
 5408 0588 02       		.uleb128 0x2
 5409 0589 91       		.byte	0x91
 5410 058a 6C       		.sleb128 -20
 5411 058b 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 121


 5412 058c 15       		.uleb128 0x15
 5413 058d 81000000 		.4byte	0x81
 5414 0591 9C050000 		.4byte	0x59c
 5415 0595 16       		.uleb128 0x16
 5416 0596 D2000000 		.4byte	0xd2
 5417 059a 08       		.byte	0x8
 5418 059b 00       		.byte	0
 5419 059c 13       		.uleb128 0x13
 5420 059d A4070000 		.4byte	.LASF95
 5421 05a1 01       		.byte	0x1
 5422 05a2 5E01     		.2byte	0x15e
 5423 05a4 00000000 		.4byte	.LFB46
 5424 05a8 98000000 		.4byte	.LFE46-.LFB46
 5425 05ac 01       		.uleb128 0x1
 5426 05ad 9C       		.byte	0x9c
 5427 05ae E0050000 		.4byte	0x5e0
 5428 05b2 10       		.uleb128 0x10
 5429 05b3 87070000 		.4byte	.LASF93
 5430 05b7 01       		.byte	0x1
 5431 05b8 5E01     		.2byte	0x15e
 5432 05ba 81000000 		.4byte	0x81
 5433 05be 02       		.uleb128 0x2
 5434 05bf 91       		.byte	0x91
 5435 05c0 67       		.sleb128 -25
 5436 05c1 10       		.uleb128 0x10
 5437 05c2 B4020000 		.4byte	.LASF96
 5438 05c6 01       		.byte	0x1
 5439 05c7 5E01     		.2byte	0x15e
 5440 05c9 8C000000 		.4byte	0x8c
 5441 05cd 02       		.uleb128 0x2
 5442 05ce 91       		.byte	0x91
 5443 05cf 64       		.sleb128 -28
 5444 05d0 11       		.uleb128 0x11
 5445 05d1 F9030000 		.4byte	.LASF71
 5446 05d5 01       		.byte	0x1
 5447 05d6 6001     		.2byte	0x160
 5448 05d8 8C050000 		.4byte	0x58c
 5449 05dc 02       		.uleb128 0x2
 5450 05dd 91       		.byte	0x91
 5451 05de 6C       		.sleb128 -20
 5452 05df 00       		.byte	0
 5453 05e0 13       		.uleb128 0x13
 5454 05e1 0B050000 		.4byte	.LASF97
 5455 05e5 01       		.byte	0x1
 5456 05e6 7001     		.2byte	0x170
 5457 05e8 00000000 		.4byte	.LFB47
 5458 05ec 98000000 		.4byte	.LFE47-.LFB47
 5459 05f0 01       		.uleb128 0x1
 5460 05f1 9C       		.byte	0x9c
 5461 05f2 24060000 		.4byte	0x624
 5462 05f6 10       		.uleb128 0x10
 5463 05f7 87070000 		.4byte	.LASF93
 5464 05fb 01       		.byte	0x1
 5465 05fc 7001     		.2byte	0x170
 5466 05fe 81000000 		.4byte	0x81
 5467 0602 02       		.uleb128 0x2
 5468 0603 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 122


 5469 0604 67       		.sleb128 -25
 5470 0605 10       		.uleb128 0x10
 5471 0606 13010000 		.4byte	.LASF98
 5472 060a 01       		.byte	0x1
 5473 060b 7001     		.2byte	0x170
 5474 060d 8C000000 		.4byte	0x8c
 5475 0611 02       		.uleb128 0x2
 5476 0612 91       		.byte	0x91
 5477 0613 64       		.sleb128 -28
 5478 0614 11       		.uleb128 0x11
 5479 0615 F9030000 		.4byte	.LASF71
 5480 0619 01       		.byte	0x1
 5481 061a 7201     		.2byte	0x172
 5482 061c 8C050000 		.4byte	0x58c
 5483 0620 02       		.uleb128 0x2
 5484 0621 91       		.byte	0x91
 5485 0622 6C       		.sleb128 -20
 5486 0623 00       		.byte	0
 5487 0624 12       		.uleb128 0x12
 5488 0625 C6030000 		.4byte	.LASF99
 5489 0629 01       		.byte	0x1
 5490 062a 8401     		.2byte	0x184
 5491 062c 81000000 		.4byte	0x81
 5492 0630 00000000 		.4byte	.LFB48
 5493 0634 90010000 		.4byte	.LFE48-.LFB48
 5494 0638 01       		.uleb128 0x1
 5495 0639 9C       		.byte	0x9c
 5496 063a 88060000 		.4byte	0x688
 5497 063e 10       		.uleb128 0x10
 5498 063f 4E040000 		.4byte	.LASF100
 5499 0643 01       		.byte	0x1
 5500 0644 8401     		.2byte	0x184
 5501 0646 81000000 		.4byte	0x81
 5502 064a 02       		.uleb128 0x2
 5503 064b 91       		.byte	0x91
 5504 064c 67       		.sleb128 -25
 5505 064d 10       		.uleb128 0x10
 5506 064e 6E000000 		.4byte	.LASF101
 5507 0652 01       		.byte	0x1
 5508 0653 8401     		.2byte	0x184
 5509 0655 5F030000 		.4byte	0x35f
 5510 0659 02       		.uleb128 0x2
 5511 065a 91       		.byte	0x91
 5512 065b 60       		.sleb128 -32
 5513 065c 17       		.uleb128 0x17
 5514 065d 6900     		.ascii	"i\000"
 5515 065f 01       		.byte	0x1
 5516 0660 9401     		.2byte	0x194
 5517 0662 81000000 		.4byte	0x81
 5518 0666 02       		.uleb128 0x2
 5519 0667 91       		.byte	0x91
 5520 0668 6F       		.sleb128 -17
 5521 0669 17       		.uleb128 0x17
 5522 066a 61766700 		.ascii	"avg\000"
 5523 066e 01       		.byte	0x1
 5524 066f 9501     		.2byte	0x195
 5525 0671 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 123


 5526 0675 02       		.uleb128 0x2
 5527 0676 91       		.byte	0x91
 5528 0677 6A       		.sleb128 -22
 5529 0678 11       		.uleb128 0x11
 5530 0679 9C060000 		.4byte	.LASF79
 5531 067d 01       		.byte	0x1
 5532 067e 9601     		.2byte	0x196
 5533 0680 8C000000 		.4byte	0x8c
 5534 0684 02       		.uleb128 0x2
 5535 0685 91       		.byte	0x91
 5536 0686 6C       		.sleb128 -20
 5537 0687 00       		.byte	0
 5538 0688 12       		.uleb128 0x12
 5539 0689 BF050000 		.4byte	.LASF102
 5540 068d 01       		.byte	0x1
 5541 068e F401     		.2byte	0x1f4
 5542 0690 81000000 		.4byte	0x81
 5543 0694 00000000 		.4byte	.LFB49
 5544 0698 90010000 		.4byte	.LFE49-.LFB49
 5545 069c 01       		.uleb128 0x1
 5546 069d 9C       		.byte	0x9c
 5547 069e EC060000 		.4byte	0x6ec
 5548 06a2 10       		.uleb128 0x10
 5549 06a3 49000000 		.4byte	.LASF103
 5550 06a7 01       		.byte	0x1
 5551 06a8 F401     		.2byte	0x1f4
 5552 06aa 81000000 		.4byte	0x81
 5553 06ae 02       		.uleb128 0x2
 5554 06af 91       		.byte	0x91
 5555 06b0 67       		.sleb128 -25
 5556 06b1 10       		.uleb128 0x10
 5557 06b2 5D070000 		.4byte	.LASF104
 5558 06b6 01       		.byte	0x1
 5559 06b7 F401     		.2byte	0x1f4
 5560 06b9 5F030000 		.4byte	0x35f
 5561 06bd 02       		.uleb128 0x2
 5562 06be 91       		.byte	0x91
 5563 06bf 60       		.sleb128 -32
 5564 06c0 17       		.uleb128 0x17
 5565 06c1 6900     		.ascii	"i\000"
 5566 06c3 01       		.byte	0x1
 5567 06c4 0402     		.2byte	0x204
 5568 06c6 81000000 		.4byte	0x81
 5569 06ca 02       		.uleb128 0x2
 5570 06cb 91       		.byte	0x91
 5571 06cc 6F       		.sleb128 -17
 5572 06cd 17       		.uleb128 0x17
 5573 06ce 61766700 		.ascii	"avg\000"
 5574 06d2 01       		.byte	0x1
 5575 06d3 0502     		.2byte	0x205
 5576 06d5 8C000000 		.4byte	0x8c
 5577 06d9 02       		.uleb128 0x2
 5578 06da 91       		.byte	0x91
 5579 06db 6A       		.sleb128 -22
 5580 06dc 11       		.uleb128 0x11
 5581 06dd 9C060000 		.4byte	.LASF79
 5582 06e1 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 124


 5583 06e2 0602     		.2byte	0x206
 5584 06e4 8C000000 		.4byte	0x8c
 5585 06e8 02       		.uleb128 0x2
 5586 06e9 91       		.byte	0x91
 5587 06ea 6C       		.sleb128 -20
 5588 06eb 00       		.byte	0
 5589 06ec 12       		.uleb128 0x12
 5590 06ed 2C020000 		.4byte	.LASF105
 5591 06f1 01       		.byte	0x1
 5592 06f2 6602     		.2byte	0x266
 5593 06f4 81000000 		.4byte	0x81
 5594 06f8 00000000 		.4byte	.LFB50
 5595 06fc 60030000 		.4byte	.LFE50-.LFB50
 5596 0700 01       		.uleb128 0x1
 5597 0701 9C       		.byte	0x9c
 5598 0702 5F070000 		.4byte	0x75f
 5599 0706 10       		.uleb128 0x10
 5600 0707 19010000 		.4byte	.LASF106
 5601 070b 01       		.byte	0x1
 5602 070c 6602     		.2byte	0x266
 5603 070e 81000000 		.4byte	0x81
 5604 0712 02       		.uleb128 0x2
 5605 0713 91       		.byte	0x91
 5606 0714 67       		.sleb128 -25
 5607 0715 10       		.uleb128 0x10
 5608 0716 D4050000 		.4byte	.LASF107
 5609 071a 01       		.byte	0x1
 5610 071b 6602     		.2byte	0x266
 5611 071d 5F030000 		.4byte	0x35f
 5612 0721 02       		.uleb128 0x2
 5613 0722 91       		.byte	0x91
 5614 0723 60       		.sleb128 -32
 5615 0724 17       		.uleb128 0x17
 5616 0725 6900     		.ascii	"i\000"
 5617 0727 01       		.byte	0x1
 5618 0728 6C02     		.2byte	0x26c
 5619 072a 81000000 		.4byte	0x81
 5620 072e 02       		.uleb128 0x2
 5621 072f 91       		.byte	0x91
 5622 0730 6F       		.sleb128 -17
 5623 0731 17       		.uleb128 0x17
 5624 0732 61766700 		.ascii	"avg\000"
 5625 0736 01       		.byte	0x1
 5626 0737 6D02     		.2byte	0x26d
 5627 0739 8C000000 		.4byte	0x8c
 5628 073d 02       		.uleb128 0x2
 5629 073e 91       		.byte	0x91
 5630 073f 68       		.sleb128 -24
 5631 0740 11       		.uleb128 0x11
 5632 0741 9C060000 		.4byte	.LASF79
 5633 0745 01       		.byte	0x1
 5634 0746 6E02     		.2byte	0x26e
 5635 0748 8C000000 		.4byte	0x8c
 5636 074c 02       		.uleb128 0x2
 5637 074d 91       		.byte	0x91
 5638 074e 6A       		.sleb128 -22
 5639 074f 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 125


 5640 0750 C0020000 		.4byte	.LASF88
 5641 0754 01       		.byte	0x1
 5642 0755 7002     		.2byte	0x270
 5643 0757 8C000000 		.4byte	0x8c
 5644 075b 02       		.uleb128 0x2
 5645 075c 91       		.byte	0x91
 5646 075d 6C       		.sleb128 -20
 5647 075e 00       		.byte	0
 5648 075f 12       		.uleb128 0x12
 5649 0760 D9010000 		.4byte	.LASF108
 5650 0764 01       		.byte	0x1
 5651 0765 2303     		.2byte	0x323
 5652 0767 81000000 		.4byte	0x81
 5653 076b 00000000 		.4byte	.LFB51
 5654 076f 60030000 		.4byte	.LFE51-.LFB51
 5655 0773 01       		.uleb128 0x1
 5656 0774 9C       		.byte	0x9c
 5657 0775 D2070000 		.4byte	0x7d2
 5658 0779 10       		.uleb128 0x10
 5659 077a FF030000 		.4byte	.LASF109
 5660 077e 01       		.byte	0x1
 5661 077f 2303     		.2byte	0x323
 5662 0781 81000000 		.4byte	0x81
 5663 0785 02       		.uleb128 0x2
 5664 0786 91       		.byte	0x91
 5665 0787 67       		.sleb128 -25
 5666 0788 10       		.uleb128 0x10
 5667 0789 D9000000 		.4byte	.LASF110
 5668 078d 01       		.byte	0x1
 5669 078e 2303     		.2byte	0x323
 5670 0790 5F030000 		.4byte	0x35f
 5671 0794 02       		.uleb128 0x2
 5672 0795 91       		.byte	0x91
 5673 0796 60       		.sleb128 -32
 5674 0797 17       		.uleb128 0x17
 5675 0798 6900     		.ascii	"i\000"
 5676 079a 01       		.byte	0x1
 5677 079b 2903     		.2byte	0x329
 5678 079d 81000000 		.4byte	0x81
 5679 07a1 02       		.uleb128 0x2
 5680 07a2 91       		.byte	0x91
 5681 07a3 6F       		.sleb128 -17
 5682 07a4 17       		.uleb128 0x17
 5683 07a5 61766700 		.ascii	"avg\000"
 5684 07a9 01       		.byte	0x1
 5685 07aa 2A03     		.2byte	0x32a
 5686 07ac 8C000000 		.4byte	0x8c
 5687 07b0 02       		.uleb128 0x2
 5688 07b1 91       		.byte	0x91
 5689 07b2 68       		.sleb128 -24
 5690 07b3 11       		.uleb128 0x11
 5691 07b4 9C060000 		.4byte	.LASF79
 5692 07b8 01       		.byte	0x1
 5693 07b9 2B03     		.2byte	0x32b
 5694 07bb 8C000000 		.4byte	0x8c
 5695 07bf 02       		.uleb128 0x2
 5696 07c0 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 126


 5697 07c1 6A       		.sleb128 -22
 5698 07c2 11       		.uleb128 0x11
 5699 07c3 C0020000 		.4byte	.LASF88
 5700 07c7 01       		.byte	0x1
 5701 07c8 2D03     		.2byte	0x32d
 5702 07ca 8C000000 		.4byte	0x8c
 5703 07ce 02       		.uleb128 0x2
 5704 07cf 91       		.byte	0x91
 5705 07d0 6C       		.sleb128 -20
 5706 07d1 00       		.byte	0
 5707 07d2 12       		.uleb128 0x12
 5708 07d3 00000000 		.4byte	.LASF111
 5709 07d7 01       		.byte	0x1
 5710 07d8 E103     		.2byte	0x3e1
 5711 07da 81000000 		.4byte	0x81
 5712 07de 00000000 		.4byte	.LFB52
 5713 07e2 7C010000 		.4byte	.LFE52-.LFB52
 5714 07e6 01       		.uleb128 0x1
 5715 07e7 9C       		.byte	0x9c
 5716 07e8 36080000 		.4byte	0x836
 5717 07ec 10       		.uleb128 0x10
 5718 07ed 0F040000 		.4byte	.LASF112
 5719 07f1 01       		.byte	0x1
 5720 07f2 E103     		.2byte	0x3e1
 5721 07f4 81000000 		.4byte	0x81
 5722 07f8 02       		.uleb128 0x2
 5723 07f9 91       		.byte	0x91
 5724 07fa 67       		.sleb128 -25
 5725 07fb 10       		.uleb128 0x10
 5726 07fc 5C050000 		.4byte	.LASF113
 5727 0800 01       		.byte	0x1
 5728 0801 E103     		.2byte	0x3e1
 5729 0803 5F030000 		.4byte	0x35f
 5730 0807 02       		.uleb128 0x2
 5731 0808 91       		.byte	0x91
 5732 0809 60       		.sleb128 -32
 5733 080a 17       		.uleb128 0x17
 5734 080b 6900     		.ascii	"i\000"
 5735 080d 01       		.byte	0x1
 5736 080e E603     		.2byte	0x3e6
 5737 0810 81000000 		.4byte	0x81
 5738 0814 02       		.uleb128 0x2
 5739 0815 91       		.byte	0x91
 5740 0816 6F       		.sleb128 -17
 5741 0817 17       		.uleb128 0x17
 5742 0818 61766700 		.ascii	"avg\000"
 5743 081c 01       		.byte	0x1
 5744 081d E703     		.2byte	0x3e7
 5745 081f 8C000000 		.4byte	0x8c
 5746 0823 02       		.uleb128 0x2
 5747 0824 91       		.byte	0x91
 5748 0825 6A       		.sleb128 -22
 5749 0826 11       		.uleb128 0x11
 5750 0827 9C060000 		.4byte	.LASF79
 5751 082b 01       		.byte	0x1
 5752 082c E803     		.2byte	0x3e8
 5753 082e 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 127


 5754 0832 02       		.uleb128 0x2
 5755 0833 91       		.byte	0x91
 5756 0834 6C       		.sleb128 -20
 5757 0835 00       		.byte	0
 5758 0836 18       		.uleb128 0x18
 5759 0837 77000000 		.4byte	.LASF116
 5760 083b 01       		.byte	0x1
 5761 083c 3D04     		.2byte	0x43d
 5762 083e 00000000 		.4byte	.LFB53
 5763 0842 F8000000 		.4byte	.LFE53-.LFB53
 5764 0846 01       		.uleb128 0x1
 5765 0847 9C       		.byte	0x9c
 5766 0848 5C080000 		.4byte	0x85c
 5767 084c 11       		.uleb128 0x11
 5768 084d 9C060000 		.4byte	.LASF79
 5769 0851 01       		.byte	0x1
 5770 0852 3F04     		.2byte	0x43f
 5771 0854 8C000000 		.4byte	0x8c
 5772 0858 02       		.uleb128 0x2
 5773 0859 91       		.byte	0x91
 5774 085a 6E       		.sleb128 -18
 5775 085b 00       		.byte	0
 5776 085c 19       		.uleb128 0x19
 5777 085d 28010000 		.4byte	.LASF115
 5778 0861 01       		.byte	0x1
 5779 0862 8704     		.2byte	0x487
 5780 0864 00000000 		.4byte	.LFB54
 5781 0868 A0000000 		.4byte	.LFE54-.LFB54
 5782 086c 01       		.uleb128 0x1
 5783 086d 9C       		.byte	0x9c
 5784 086e 18       		.uleb128 0x18
 5785 086f 21020000 		.4byte	.LASF117
 5786 0873 01       		.byte	0x1
 5787 0874 D504     		.2byte	0x4d5
 5788 0876 00000000 		.4byte	.LFB55
 5789 087a 74010000 		.4byte	.LFE55-.LFB55
 5790 087e 01       		.uleb128 0x1
 5791 087f 9C       		.byte	0x9c
 5792 0880 9C080000 		.4byte	0x89c
 5793 0884 1A       		.uleb128 0x1a
 5794 0885 1E000000 		.4byte	.LBB2
 5795 0889 2C000000 		.4byte	.LBE2-.LBB2
 5796 088d 17       		.uleb128 0x17
 5797 088e 6A00     		.ascii	"j\000"
 5798 0890 01       		.byte	0x1
 5799 0891 DC04     		.2byte	0x4dc
 5800 0893 81000000 		.4byte	0x81
 5801 0897 02       		.uleb128 0x2
 5802 0898 91       		.byte	0x91
 5803 0899 77       		.sleb128 -9
 5804 089a 00       		.byte	0
 5805 089b 00       		.byte	0
 5806 089c 1B       		.uleb128 0x1b
 5807 089d F4060000 		.4byte	.LASF118
 5808 08a1 01       		.byte	0x1
 5809 08a2 1405     		.2byte	0x514
 5810 08a4 68000000 		.4byte	0x68
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 128


 5811 08a8 00000000 		.4byte	.LFB56
 5812 08ac B0010000 		.4byte	.LFE56-.LFB56
 5813 08b0 01       		.uleb128 0x1
 5814 08b1 9C       		.byte	0x9c
 5815 08b2 87090000 		.4byte	0x987
 5816 08b6 11       		.uleb128 0x11
 5817 08b7 A6000000 		.4byte	.LASF119
 5818 08bb 01       		.byte	0x1
 5819 08bc 1805     		.2byte	0x518
 5820 08be 81000000 		.4byte	0x81
 5821 08c2 02       		.uleb128 0x2
 5822 08c3 91       		.byte	0x91
 5823 08c4 6F       		.sleb128 -17
 5824 08c5 11       		.uleb128 0x11
 5825 08c6 F9060000 		.4byte	.LASF120
 5826 08ca 01       		.byte	0x1
 5827 08cb 1905     		.2byte	0x519
 5828 08cd 87090000 		.4byte	0x987
 5829 08d1 03       		.uleb128 0x3
 5830 08d2 91       		.byte	0x91
 5831 08d3 B87F     		.sleb128 -72
 5832 08d5 11       		.uleb128 0x11
 5833 08d6 A5030000 		.4byte	.LASF121
 5834 08da 01       		.byte	0x1
 5835 08db 1A05     		.2byte	0x51a
 5836 08dd 81000000 		.4byte	0x81
 5837 08e1 02       		.uleb128 0x2
 5838 08e2 91       		.byte	0x91
 5839 08e3 6E       		.sleb128 -18
 5840 08e4 11       		.uleb128 0x11
 5841 08e5 28050000 		.4byte	.LASF122
 5842 08e9 01       		.byte	0x1
 5843 08ea 1B05     		.2byte	0x51b
 5844 08ec 87090000 		.4byte	0x987
 5845 08f0 03       		.uleb128 0x3
 5846 08f1 91       		.byte	0x91
 5847 08f2 907F     		.sleb128 -112
 5848 08f4 11       		.uleb128 0x11
 5849 08f5 3C020000 		.4byte	.LASF123
 5850 08f9 01       		.byte	0x1
 5851 08fa 1C05     		.2byte	0x51c
 5852 08fc 81000000 		.4byte	0x81
 5853 0900 02       		.uleb128 0x2
 5854 0901 91       		.byte	0x91
 5855 0902 6D       		.sleb128 -19
 5856 0903 11       		.uleb128 0x11
 5857 0904 38030000 		.4byte	.LASF124
 5858 0908 01       		.byte	0x1
 5859 0909 1D05     		.2byte	0x51d
 5860 090b 87090000 		.4byte	0x987
 5861 090f 03       		.uleb128 0x3
 5862 0910 91       		.byte	0x91
 5863 0911 E87E     		.sleb128 -152
 5864 0913 11       		.uleb128 0x11
 5865 0914 40000000 		.4byte	.LASF125
 5866 0918 01       		.byte	0x1
 5867 0919 1E05     		.2byte	0x51e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 129


 5868 091b 81000000 		.4byte	0x81
 5869 091f 02       		.uleb128 0x2
 5870 0920 91       		.byte	0x91
 5871 0921 6C       		.sleb128 -20
 5872 0922 11       		.uleb128 0x11
 5873 0923 6E000000 		.4byte	.LASF101
 5874 0927 01       		.byte	0x1
 5875 0928 1F05     		.2byte	0x51f
 5876 092a 87090000 		.4byte	0x987
 5877 092e 03       		.uleb128 0x3
 5878 092f 91       		.byte	0x91
 5879 0930 C07E     		.sleb128 -192
 5880 0932 11       		.uleb128 0x11
 5881 0933 2F030000 		.4byte	.LASF126
 5882 0937 01       		.byte	0x1
 5883 0938 2005     		.2byte	0x520
 5884 093a 81000000 		.4byte	0x81
 5885 093e 02       		.uleb128 0x2
 5886 093f 91       		.byte	0x91
 5887 0940 6B       		.sleb128 -21
 5888 0941 11       		.uleb128 0x11
 5889 0942 5D070000 		.4byte	.LASF104
 5890 0946 01       		.byte	0x1
 5891 0947 2105     		.2byte	0x521
 5892 0949 87090000 		.4byte	0x987
 5893 094d 03       		.uleb128 0x3
 5894 094e 91       		.byte	0x91
 5895 094f 987E     		.sleb128 -232
 5896 0951 11       		.uleb128 0x11
 5897 0952 74020000 		.4byte	.LASF127
 5898 0956 01       		.byte	0x1
 5899 0957 2305     		.2byte	0x523
 5900 0959 81000000 		.4byte	0x81
 5901 095d 02       		.uleb128 0x2
 5902 095e 91       		.byte	0x91
 5903 095f 6A       		.sleb128 -22
 5904 0960 11       		.uleb128 0x11
 5905 0961 AF060000 		.4byte	.LASF128
 5906 0965 01       		.byte	0x1
 5907 0966 2405     		.2byte	0x524
 5908 0968 AD000000 		.4byte	0xad
 5909 096c 02       		.uleb128 0x2
 5910 096d 91       		.byte	0x91
 5911 096e 62       		.sleb128 -30
 5912 096f 1A       		.uleb128 0x1a
 5913 0970 86000000 		.4byte	.LBB3
 5914 0974 50000000 		.4byte	.LBE3-.LBB3
 5915 0978 17       		.uleb128 0x17
 5916 0979 6900     		.ascii	"i\000"
 5917 097b 01       		.byte	0x1
 5918 097c 4205     		.2byte	0x542
 5919 097e 68000000 		.4byte	0x68
 5920 0982 02       		.uleb128 0x2
 5921 0983 91       		.byte	0x91
 5922 0984 64       		.sleb128 -28
 5923 0985 00       		.byte	0
 5924 0986 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 130


 5925 0987 15       		.uleb128 0x15
 5926 0988 8C000000 		.4byte	0x8c
 5927 098c 97090000 		.4byte	0x997
 5928 0990 16       		.uleb128 0x16
 5929 0991 D2000000 		.4byte	0xd2
 5930 0995 13       		.byte	0x13
 5931 0996 00       		.byte	0
 5932 0997 1C       		.uleb128 0x1c
 5933 0998 EE050000 		.4byte	.LASF129
 5934 099c 05       		.byte	0x5
 5935 099d 17       		.byte	0x17
 5936 099e 97000000 		.4byte	0x97
 5937 09a2 05       		.uleb128 0x5
 5938 09a3 03       		.byte	0x3
 5939 09a4 00000000 		.4byte	ELBOW_UPPER_BOUND
 5940 09a8 1C       		.uleb128 0x1c
 5941 09a9 94010000 		.4byte	.LASF130
 5942 09ad 05       		.byte	0x5
 5943 09ae 18       		.byte	0x18
 5944 09af 97000000 		.4byte	0x97
 5945 09b3 05       		.uleb128 0x5
 5946 09b4 03       		.byte	0x3
 5947 09b5 00000000 		.4byte	ELBOW_LOWER_BOUND
 5948 09b9 1C       		.uleb128 0x1c
 5949 09ba 64030000 		.4byte	.LASF131
 5950 09be 05       		.byte	0x5
 5951 09bf 19       		.byte	0x19
 5952 09c0 97000000 		.4byte	0x97
 5953 09c4 05       		.uleb128 0x5
 5954 09c5 03       		.byte	0x3
 5955 09c6 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5956 09ca 1C       		.uleb128 0x1c
 5957 09cb 75050000 		.4byte	.LASF132
 5958 09cf 05       		.byte	0x5
 5959 09d0 1A       		.byte	0x1a
 5960 09d1 97000000 		.4byte	0x97
 5961 09d5 05       		.uleb128 0x5
 5962 09d6 03       		.byte	0x3
 5963 09d7 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5964 09db 15       		.uleb128 0x15
 5965 09dc A2000000 		.4byte	0xa2
 5966 09e0 EB090000 		.4byte	0x9eb
 5967 09e4 16       		.uleb128 0x16
 5968 09e5 D2000000 		.4byte	0xd2
 5969 09e9 15       		.byte	0x15
 5970 09ea 00       		.byte	0
 5971 09eb 1C       		.uleb128 0x1c
 5972 09ec 8D020000 		.4byte	.LASF133
 5973 09f0 05       		.byte	0x5
 5974 09f1 33       		.byte	0x33
 5975 09f2 DB090000 		.4byte	0x9db
 5976 09f6 05       		.uleb128 0x5
 5977 09f7 03       		.byte	0x3
 5978 09f8 00000000 		.4byte	data_array
 5979 09fc 15       		.uleb128 0x15
 5980 09fd 76000000 		.4byte	0x76
 5981 0a01 0C0A0000 		.4byte	0xa0c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 131


 5982 0a05 16       		.uleb128 0x16
 5983 0a06 D2000000 		.4byte	0xd2
 5984 0a0a 0D       		.byte	0xd
 5985 0a0b 00       		.byte	0
 5986 0a0c 1C       		.uleb128 0x1c
 5987 0a0d FD020000 		.4byte	.LASF134
 5988 0a11 05       		.byte	0x5
 5989 0a12 36       		.byte	0x36
 5990 0a13 FC090000 		.4byte	0x9fc
 5991 0a17 05       		.uleb128 0x5
 5992 0a18 03       		.byte	0x3
 5993 0a19 00000000 		.4byte	feedback_array
 5994 0a1d 1C       		.uleb128 0x1c
 5995 0a1e ED040000 		.4byte	.LASF135
 5996 0a22 05       		.byte	0x5
 5997 0a23 39       		.byte	0x39
 5998 0a24 81000000 		.4byte	0x81
 5999 0a28 05       		.uleb128 0x5
 6000 0a29 03       		.byte	0x3
 6001 0a2a 00000000 		.4byte	wiznet
 6002 0a2e 1C       		.uleb128 0x1c
 6003 0a2f 20000000 		.4byte	.LASF136
 6004 0a33 05       		.byte	0x5
 6005 0a34 3D       		.byte	0x3d
 6006 0a35 DB090000 		.4byte	0x9db
 6007 0a39 05       		.uleb128 0x5
 6008 0a3a 03       		.byte	0x3
 6009 0a3b 00000000 		.4byte	test_array
 6010 0a3f 1C       		.uleb128 0x1c
 6011 0a40 B1030000 		.4byte	.LASF137
 6012 0a44 05       		.byte	0x5
 6013 0a45 46       		.byte	0x46
 6014 0a46 81000000 		.4byte	0x81
 6015 0a4a 05       		.uleb128 0x5
 6016 0a4b 03       		.byte	0x3
 6017 0a4c 00000000 		.4byte	WT_FLAG
 6018 0a50 1C       		.uleb128 0x1c
 6019 0a51 A0020000 		.4byte	.LASF138
 6020 0a55 05       		.byte	0x5
 6021 0a56 47       		.byte	0x47
 6022 0a57 81000000 		.4byte	0x81
 6023 0a5b 05       		.uleb128 0x5
 6024 0a5c 03       		.byte	0x3
 6025 0a5d 00000000 		.4byte	WR_FLAG
 6026 0a61 1C       		.uleb128 0x1c
 6027 0a62 73070000 		.4byte	.LASF139
 6028 0a66 05       		.byte	0x5
 6029 0a67 48       		.byte	0x48
 6030 0a68 81000000 		.4byte	0x81
 6031 0a6c 05       		.uleb128 0x5
 6032 0a6d 03       		.byte	0x3
 6033 0a6e 00000000 		.4byte	ELBOW_FLAG
 6034 0a72 1C       		.uleb128 0x1c
 6035 0a73 D0030000 		.4byte	.LASF140
 6036 0a77 05       		.byte	0x5
 6037 0a78 49       		.byte	0x49
 6038 0a79 81000000 		.4byte	0x81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 132


 6039 0a7d 05       		.uleb128 0x5
 6040 0a7e 03       		.byte	0x3
 6041 0a7f 00000000 		.4byte	SHOULDER_FLAG
 6042 0a83 1C       		.uleb128 0x1c
 6043 0a84 C9020000 		.4byte	.LASF141
 6044 0a88 05       		.byte	0x5
 6045 0a89 4A       		.byte	0x4a
 6046 0a8a 81000000 		.4byte	0x81
 6047 0a8e 05       		.uleb128 0x5
 6048 0a8f 03       		.byte	0x3
 6049 0a90 00000000 		.4byte	BA_FLAG
 6050 0a94 1C       		.uleb128 0x1c
 6051 0a95 56030000 		.4byte	.LASF142
 6052 0a99 05       		.byte	0x5
 6053 0a9a 4B       		.byte	0x4b
 6054 0a9b 81000000 		.4byte	0x81
 6055 0a9f 05       		.uleb128 0x5
 6056 0aa0 03       		.byte	0x3
 6057 0aa1 00000000 		.4byte	EFFECTOR_FLAG
 6058 0aa5 1C       		.uleb128 0x1c
 6059 0aa6 AF040000 		.4byte	.LASF143
 6060 0aaa 05       		.byte	0x5
 6061 0aab 4C       		.byte	0x4c
 6062 0aac 81000000 		.4byte	0x81
 6063 0ab0 05       		.uleb128 0x5
 6064 0ab1 03       		.byte	0x3
 6065 0ab2 00000000 		.4byte	ARD_FLAG
 6066 0ab6 1C       		.uleb128 0x1c
 6067 0ab7 C0000000 		.4byte	.LASF144
 6068 0abb 05       		.byte	0x5
 6069 0abc 4F       		.byte	0x4f
 6070 0abd 8C000000 		.4byte	0x8c
 6071 0ac1 05       		.uleb128 0x5
 6072 0ac2 03       		.byte	0x3
 6073 0ac3 00000000 		.4byte	dropped_packets
 6074 0ac7 1C       		.uleb128 0x1c
 6075 0ac8 4A010000 		.4byte	.LASF145
 6076 0acc 05       		.byte	0x5
 6077 0acd 50       		.byte	0x50
 6078 0ace 8C000000 		.4byte	0x8c
 6079 0ad2 05       		.uleb128 0x5
 6080 0ad3 03       		.byte	0x3
 6081 0ad4 00000000 		.4byte	fail_safe_errors
 6082 0ad8 1C       		.uleb128 0x1c
 6083 0ad9 97070000 		.4byte	.LASF146
 6084 0add 05       		.byte	0x5
 6085 0ade 51       		.byte	0x51
 6086 0adf 8C000000 		.4byte	0x8c
 6087 0ae3 05       		.uleb128 0x5
 6088 0ae4 03       		.byte	0x3
 6089 0ae5 00000000 		.4byte	shldr_errors
 6090 0ae9 1C       		.uleb128 0x1c
 6091 0aea 34000000 		.4byte	.LASF147
 6092 0aee 05       		.byte	0x5
 6093 0aef 52       		.byte	0x52
 6094 0af0 8C000000 		.4byte	0x8c
 6095 0af4 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 133


 6096 0af5 03       		.byte	0x3
 6097 0af6 00000000 		.4byte	elbw_errors
 6098 0afa 1C       		.uleb128 0x1c
 6099 0afb 47020000 		.4byte	.LASF148
 6100 0aff 05       		.byte	0x5
 6101 0b00 53       		.byte	0x53
 6102 0b01 8C000000 		.4byte	0x8c
 6103 0b05 05       		.uleb128 0x5
 6104 0b06 03       		.byte	0x3
 6105 0b07 00000000 		.4byte	BA_errors
 6106 0b0b 1C       		.uleb128 0x1c
 6107 0b0c FA010000 		.4byte	.LASF149
 6108 0b10 05       		.byte	0x5
 6109 0b11 54       		.byte	0x54
 6110 0b12 8C000000 		.4byte	0x8c
 6111 0b16 05       		.uleb128 0x5
 6112 0b17 03       		.byte	0x3
 6113 0b18 00000000 		.4byte	WT_errors
 6114 0b1c 1C       		.uleb128 0x1c
 6115 0b1d B8040000 		.4byte	.LASF150
 6116 0b21 05       		.byte	0x5
 6117 0b22 55       		.byte	0x55
 6118 0b23 8C000000 		.4byte	0x8c
 6119 0b27 05       		.uleb128 0x5
 6120 0b28 03       		.byte	0x3
 6121 0b29 00000000 		.4byte	WR_errors
 6122 0b2d 1C       		.uleb128 0x1c
 6123 0b2e 04020000 		.4byte	.LASF151
 6124 0b32 05       		.byte	0x5
 6125 0b33 56       		.byte	0x56
 6126 0b34 8C000000 		.4byte	0x8c
 6127 0b38 05       		.uleb128 0x5
 6128 0b39 03       		.byte	0x3
 6129 0b3a 00000000 		.4byte	eff_errors
 6130 0b3e 1C       		.uleb128 0x1c
 6131 0b3f CF010000 		.4byte	.LASF152
 6132 0b43 05       		.byte	0x5
 6133 0b44 58       		.byte	0x58
 6134 0b45 CD000000 		.4byte	0xcd
 6135 0b49 05       		.uleb128 0x5
 6136 0b4a 03       		.byte	0x3
 6137 0b4b 00000000 		.4byte	timerFlag
 6138 0b4f 1D       		.uleb128 0x1d
 6139 0b50 E9030000 		.4byte	.LASF153
 6140 0b54 01       		.byte	0x1
 6141 0b55 8201     		.2byte	0x182
 6142 0b57 D9000000 		.4byte	0xd9
 6143 0b5b 05       		.uleb128 0x5
 6144 0b5c 03       		.byte	0x3
 6145 0b5d 00000000 		.4byte	wristTilt_state
 6146 0b61 1D       		.uleb128 0x1d
 6147 0b62 C2040000 		.4byte	.LASF154
 6148 0b66 01       		.byte	0x1
 6149 0b67 F201     		.2byte	0x1f2
 6150 0b69 FF000000 		.4byte	0xff
 6151 0b6d 05       		.uleb128 0x5
 6152 0b6e 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 134


 6153 0b6f 00000000 		.4byte	wristRotate_state
 6154 0b73 1D       		.uleb128 0x1d
 6155 0b74 66010000 		.4byte	.LASF155
 6156 0b78 01       		.byte	0x1
 6157 0b79 6502     		.2byte	0x265
 6158 0b7b 25010000 		.4byte	0x125
 6159 0b7f 05       		.uleb128 0x5
 6160 0b80 03       		.byte	0x3
 6161 0b81 00000000 		.4byte	elbow_state
 6162 0b85 1D       		.uleb128 0x1d
 6163 0b86 F7000000 		.4byte	.LASF156
 6164 0b8a 01       		.byte	0x1
 6165 0b8b 2203     		.2byte	0x322
 6166 0b8d 4B010000 		.4byte	0x14b
 6167 0b91 05       		.uleb128 0x5
 6168 0b92 03       		.byte	0x3
 6169 0b93 00000000 		.4byte	shoulder_state
 6170 0b97 1D       		.uleb128 0x1d
 6171 0b98 74040000 		.4byte	.LASF157
 6172 0b9c 01       		.byte	0x1
 6173 0b9d E003     		.2byte	0x3e0
 6174 0b9f 71010000 		.4byte	0x171
 6175 0ba3 05       		.uleb128 0x5
 6176 0ba4 03       		.byte	0x3
 6177 0ba5 00000000 		.4byte	baseAzimuth_state
 6178 0ba9 1D       		.uleb128 0x1d
 6179 0baa 89030000 		.4byte	.LASF158
 6180 0bae 01       		.byte	0x1
 6181 0baf 3C04     		.2byte	0x43c
 6182 0bb1 97010000 		.4byte	0x197
 6183 0bb5 05       		.uleb128 0x5
 6184 0bb6 03       		.byte	0x3
 6185 0bb7 00000000 		.4byte	effector_state
 6186 0bbb 1D       		.uleb128 0x1d
 6187 0bbc 80010000 		.4byte	.LASF159
 6188 0bc0 01       		.byte	0x1
 6189 0bc1 8604     		.2byte	0x486
 6190 0bc3 BD010000 		.4byte	0x1bd
 6191 0bc7 05       		.uleb128 0x5
 6192 0bc8 03       		.byte	0x3
 6193 0bc9 00000000 		.4byte	arduino_state
 6194 0bcd 00       		.byte	0
 6195              		.section	.debug_abbrev,"",%progbits
 6196              	.Ldebug_abbrev0:
 6197 0000 01       		.uleb128 0x1
 6198 0001 11       		.uleb128 0x11
 6199 0002 01       		.byte	0x1
 6200 0003 25       		.uleb128 0x25
 6201 0004 0E       		.uleb128 0xe
 6202 0005 13       		.uleb128 0x13
 6203 0006 0B       		.uleb128 0xb
 6204 0007 03       		.uleb128 0x3
 6205 0008 0E       		.uleb128 0xe
 6206 0009 1B       		.uleb128 0x1b
 6207 000a 0E       		.uleb128 0xe
 6208 000b 55       		.uleb128 0x55
 6209 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 135


 6210 000d 11       		.uleb128 0x11
 6211 000e 01       		.uleb128 0x1
 6212 000f 10       		.uleb128 0x10
 6213 0010 17       		.uleb128 0x17
 6214 0011 00       		.byte	0
 6215 0012 00       		.byte	0
 6216 0013 02       		.uleb128 0x2
 6217 0014 24       		.uleb128 0x24
 6218 0015 00       		.byte	0
 6219 0016 0B       		.uleb128 0xb
 6220 0017 0B       		.uleb128 0xb
 6221 0018 3E       		.uleb128 0x3e
 6222 0019 0B       		.uleb128 0xb
 6223 001a 03       		.uleb128 0x3
 6224 001b 0E       		.uleb128 0xe
 6225 001c 00       		.byte	0
 6226 001d 00       		.byte	0
 6227 001e 03       		.uleb128 0x3
 6228 001f 16       		.uleb128 0x16
 6229 0020 00       		.byte	0
 6230 0021 03       		.uleb128 0x3
 6231 0022 0E       		.uleb128 0xe
 6232 0023 3A       		.uleb128 0x3a
 6233 0024 0B       		.uleb128 0xb
 6234 0025 3B       		.uleb128 0x3b
 6235 0026 0B       		.uleb128 0xb
 6236 0027 49       		.uleb128 0x49
 6237 0028 13       		.uleb128 0x13
 6238 0029 00       		.byte	0
 6239 002a 00       		.byte	0
 6240 002b 04       		.uleb128 0x4
 6241 002c 24       		.uleb128 0x24
 6242 002d 00       		.byte	0
 6243 002e 0B       		.uleb128 0xb
 6244 002f 0B       		.uleb128 0xb
 6245 0030 3E       		.uleb128 0x3e
 6246 0031 0B       		.uleb128 0xb
 6247 0032 03       		.uleb128 0x3
 6248 0033 08       		.uleb128 0x8
 6249 0034 00       		.byte	0
 6250 0035 00       		.byte	0
 6251 0036 05       		.uleb128 0x5
 6252 0037 35       		.uleb128 0x35
 6253 0038 00       		.byte	0
 6254 0039 49       		.uleb128 0x49
 6255 003a 13       		.uleb128 0x13
 6256 003b 00       		.byte	0
 6257 003c 00       		.byte	0
 6258 003d 06       		.uleb128 0x6
 6259 003e 04       		.uleb128 0x4
 6260 003f 01       		.byte	0x1
 6261 0040 03       		.uleb128 0x3
 6262 0041 0E       		.uleb128 0xe
 6263 0042 0B       		.uleb128 0xb
 6264 0043 0B       		.uleb128 0xb
 6265 0044 3A       		.uleb128 0x3a
 6266 0045 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 136


 6267 0046 3B       		.uleb128 0x3b
 6268 0047 05       		.uleb128 0x5
 6269 0048 01       		.uleb128 0x1
 6270 0049 13       		.uleb128 0x13
 6271 004a 00       		.byte	0
 6272 004b 00       		.byte	0
 6273 004c 07       		.uleb128 0x7
 6274 004d 28       		.uleb128 0x28
 6275 004e 00       		.byte	0
 6276 004f 03       		.uleb128 0x3
 6277 0050 0E       		.uleb128 0xe
 6278 0051 1C       		.uleb128 0x1c
 6279 0052 0D       		.uleb128 0xd
 6280 0053 00       		.byte	0
 6281 0054 00       		.byte	0
 6282 0055 08       		.uleb128 0x8
 6283 0056 2E       		.uleb128 0x2e
 6284 0057 01       		.byte	0x1
 6285 0058 3F       		.uleb128 0x3f
 6286 0059 19       		.uleb128 0x19
 6287 005a 03       		.uleb128 0x3
 6288 005b 0E       		.uleb128 0xe
 6289 005c 3A       		.uleb128 0x3a
 6290 005d 0B       		.uleb128 0xb
 6291 005e 3B       		.uleb128 0x3b
 6292 005f 0B       		.uleb128 0xb
 6293 0060 27       		.uleb128 0x27
 6294 0061 19       		.uleb128 0x19
 6295 0062 11       		.uleb128 0x11
 6296 0063 01       		.uleb128 0x1
 6297 0064 12       		.uleb128 0x12
 6298 0065 06       		.uleb128 0x6
 6299 0066 40       		.uleb128 0x40
 6300 0067 18       		.uleb128 0x18
 6301 0068 9642     		.uleb128 0x2116
 6302 006a 19       		.uleb128 0x19
 6303 006b 01       		.uleb128 0x1
 6304 006c 13       		.uleb128 0x13
 6305 006d 00       		.byte	0
 6306 006e 00       		.byte	0
 6307 006f 09       		.uleb128 0x9
 6308 0070 34       		.uleb128 0x34
 6309 0071 00       		.byte	0
 6310 0072 03       		.uleb128 0x3
 6311 0073 0E       		.uleb128 0xe
 6312 0074 3A       		.uleb128 0x3a
 6313 0075 0B       		.uleb128 0xb
 6314 0076 3B       		.uleb128 0x3b
 6315 0077 0B       		.uleb128 0xb
 6316 0078 49       		.uleb128 0x49
 6317 0079 13       		.uleb128 0x13
 6318 007a 02       		.uleb128 0x2
 6319 007b 18       		.uleb128 0x18
 6320 007c 00       		.byte	0
 6321 007d 00       		.byte	0
 6322 007e 0A       		.uleb128 0xa
 6323 007f 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 137


 6324 0080 01       		.byte	0x1
 6325 0081 3F       		.uleb128 0x3f
 6326 0082 19       		.uleb128 0x19
 6327 0083 03       		.uleb128 0x3
 6328 0084 0E       		.uleb128 0xe
 6329 0085 3A       		.uleb128 0x3a
 6330 0086 0B       		.uleb128 0xb
 6331 0087 3B       		.uleb128 0x3b
 6332 0088 0B       		.uleb128 0xb
 6333 0089 27       		.uleb128 0x27
 6334 008a 19       		.uleb128 0x19
 6335 008b 49       		.uleb128 0x49
 6336 008c 13       		.uleb128 0x13
 6337 008d 11       		.uleb128 0x11
 6338 008e 01       		.uleb128 0x1
 6339 008f 12       		.uleb128 0x12
 6340 0090 06       		.uleb128 0x6
 6341 0091 40       		.uleb128 0x40
 6342 0092 18       		.uleb128 0x18
 6343 0093 9642     		.uleb128 0x2116
 6344 0095 19       		.uleb128 0x19
 6345 0096 01       		.uleb128 0x1
 6346 0097 13       		.uleb128 0x13
 6347 0098 00       		.byte	0
 6348 0099 00       		.byte	0
 6349 009a 0B       		.uleb128 0xb
 6350 009b 05       		.uleb128 0x5
 6351 009c 00       		.byte	0
 6352 009d 03       		.uleb128 0x3
 6353 009e 0E       		.uleb128 0xe
 6354 009f 3A       		.uleb128 0x3a
 6355 00a0 0B       		.uleb128 0xb
 6356 00a1 3B       		.uleb128 0x3b
 6357 00a2 0B       		.uleb128 0xb
 6358 00a3 49       		.uleb128 0x49
 6359 00a4 13       		.uleb128 0x13
 6360 00a5 02       		.uleb128 0x2
 6361 00a6 18       		.uleb128 0x18
 6362 00a7 00       		.byte	0
 6363 00a8 00       		.byte	0
 6364 00a9 0C       		.uleb128 0xc
 6365 00aa 34       		.uleb128 0x34
 6366 00ab 00       		.byte	0
 6367 00ac 03       		.uleb128 0x3
 6368 00ad 08       		.uleb128 0x8
 6369 00ae 3A       		.uleb128 0x3a
 6370 00af 0B       		.uleb128 0xb
 6371 00b0 3B       		.uleb128 0x3b
 6372 00b1 0B       		.uleb128 0xb
 6373 00b2 49       		.uleb128 0x49
 6374 00b3 13       		.uleb128 0x13
 6375 00b4 02       		.uleb128 0x2
 6376 00b5 18       		.uleb128 0x18
 6377 00b6 00       		.byte	0
 6378 00b7 00       		.byte	0
 6379 00b8 0D       		.uleb128 0xd
 6380 00b9 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 138


 6381 00ba 00       		.byte	0
 6382 00bb 0B       		.uleb128 0xb
 6383 00bc 0B       		.uleb128 0xb
 6384 00bd 49       		.uleb128 0x49
 6385 00be 13       		.uleb128 0x13
 6386 00bf 00       		.byte	0
 6387 00c0 00       		.byte	0
 6388 00c1 0E       		.uleb128 0xe
 6389 00c2 2E       		.uleb128 0x2e
 6390 00c3 01       		.byte	0x1
 6391 00c4 3F       		.uleb128 0x3f
 6392 00c5 19       		.uleb128 0x19
 6393 00c6 03       		.uleb128 0x3
 6394 00c7 0E       		.uleb128 0xe
 6395 00c8 3A       		.uleb128 0x3a
 6396 00c9 0B       		.uleb128 0xb
 6397 00ca 3B       		.uleb128 0x3b
 6398 00cb 0B       		.uleb128 0xb
 6399 00cc 27       		.uleb128 0x27
 6400 00cd 19       		.uleb128 0x19
 6401 00ce 49       		.uleb128 0x49
 6402 00cf 13       		.uleb128 0x13
 6403 00d0 11       		.uleb128 0x11
 6404 00d1 01       		.uleb128 0x1
 6405 00d2 12       		.uleb128 0x12
 6406 00d3 06       		.uleb128 0x6
 6407 00d4 40       		.uleb128 0x40
 6408 00d5 18       		.uleb128 0x18
 6409 00d6 9742     		.uleb128 0x2117
 6410 00d8 19       		.uleb128 0x19
 6411 00d9 01       		.uleb128 0x1
 6412 00da 13       		.uleb128 0x13
 6413 00db 00       		.byte	0
 6414 00dc 00       		.byte	0
 6415 00dd 0F       		.uleb128 0xf
 6416 00de 2E       		.uleb128 0x2e
 6417 00df 01       		.byte	0x1
 6418 00e0 3F       		.uleb128 0x3f
 6419 00e1 19       		.uleb128 0x19
 6420 00e2 03       		.uleb128 0x3
 6421 00e3 0E       		.uleb128 0xe
 6422 00e4 3A       		.uleb128 0x3a
 6423 00e5 0B       		.uleb128 0xb
 6424 00e6 3B       		.uleb128 0x3b
 6425 00e7 05       		.uleb128 0x5
 6426 00e8 27       		.uleb128 0x27
 6427 00e9 19       		.uleb128 0x19
 6428 00ea 49       		.uleb128 0x49
 6429 00eb 13       		.uleb128 0x13
 6430 00ec 11       		.uleb128 0x11
 6431 00ed 01       		.uleb128 0x1
 6432 00ee 12       		.uleb128 0x12
 6433 00ef 06       		.uleb128 0x6
 6434 00f0 40       		.uleb128 0x40
 6435 00f1 18       		.uleb128 0x18
 6436 00f2 9742     		.uleb128 0x2117
 6437 00f4 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 139


 6438 00f5 01       		.uleb128 0x1
 6439 00f6 13       		.uleb128 0x13
 6440 00f7 00       		.byte	0
 6441 00f8 00       		.byte	0
 6442 00f9 10       		.uleb128 0x10
 6443 00fa 05       		.uleb128 0x5
 6444 00fb 00       		.byte	0
 6445 00fc 03       		.uleb128 0x3
 6446 00fd 0E       		.uleb128 0xe
 6447 00fe 3A       		.uleb128 0x3a
 6448 00ff 0B       		.uleb128 0xb
 6449 0100 3B       		.uleb128 0x3b
 6450 0101 05       		.uleb128 0x5
 6451 0102 49       		.uleb128 0x49
 6452 0103 13       		.uleb128 0x13
 6453 0104 02       		.uleb128 0x2
 6454 0105 18       		.uleb128 0x18
 6455 0106 00       		.byte	0
 6456 0107 00       		.byte	0
 6457 0108 11       		.uleb128 0x11
 6458 0109 34       		.uleb128 0x34
 6459 010a 00       		.byte	0
 6460 010b 03       		.uleb128 0x3
 6461 010c 0E       		.uleb128 0xe
 6462 010d 3A       		.uleb128 0x3a
 6463 010e 0B       		.uleb128 0xb
 6464 010f 3B       		.uleb128 0x3b
 6465 0110 05       		.uleb128 0x5
 6466 0111 49       		.uleb128 0x49
 6467 0112 13       		.uleb128 0x13
 6468 0113 02       		.uleb128 0x2
 6469 0114 18       		.uleb128 0x18
 6470 0115 00       		.byte	0
 6471 0116 00       		.byte	0
 6472 0117 12       		.uleb128 0x12
 6473 0118 2E       		.uleb128 0x2e
 6474 0119 01       		.byte	0x1
 6475 011a 3F       		.uleb128 0x3f
 6476 011b 19       		.uleb128 0x19
 6477 011c 03       		.uleb128 0x3
 6478 011d 0E       		.uleb128 0xe
 6479 011e 3A       		.uleb128 0x3a
 6480 011f 0B       		.uleb128 0xb
 6481 0120 3B       		.uleb128 0x3b
 6482 0121 05       		.uleb128 0x5
 6483 0122 27       		.uleb128 0x27
 6484 0123 19       		.uleb128 0x19
 6485 0124 49       		.uleb128 0x49
 6486 0125 13       		.uleb128 0x13
 6487 0126 11       		.uleb128 0x11
 6488 0127 01       		.uleb128 0x1
 6489 0128 12       		.uleb128 0x12
 6490 0129 06       		.uleb128 0x6
 6491 012a 40       		.uleb128 0x40
 6492 012b 18       		.uleb128 0x18
 6493 012c 9642     		.uleb128 0x2116
 6494 012e 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 140


 6495 012f 01       		.uleb128 0x1
 6496 0130 13       		.uleb128 0x13
 6497 0131 00       		.byte	0
 6498 0132 00       		.byte	0
 6499 0133 13       		.uleb128 0x13
 6500 0134 2E       		.uleb128 0x2e
 6501 0135 01       		.byte	0x1
 6502 0136 3F       		.uleb128 0x3f
 6503 0137 19       		.uleb128 0x19
 6504 0138 03       		.uleb128 0x3
 6505 0139 0E       		.uleb128 0xe
 6506 013a 3A       		.uleb128 0x3a
 6507 013b 0B       		.uleb128 0xb
 6508 013c 3B       		.uleb128 0x3b
 6509 013d 05       		.uleb128 0x5
 6510 013e 27       		.uleb128 0x27
 6511 013f 19       		.uleb128 0x19
 6512 0140 11       		.uleb128 0x11
 6513 0141 01       		.uleb128 0x1
 6514 0142 12       		.uleb128 0x12
 6515 0143 06       		.uleb128 0x6
 6516 0144 40       		.uleb128 0x40
 6517 0145 18       		.uleb128 0x18
 6518 0146 9642     		.uleb128 0x2116
 6519 0148 19       		.uleb128 0x19
 6520 0149 01       		.uleb128 0x1
 6521 014a 13       		.uleb128 0x13
 6522 014b 00       		.byte	0
 6523 014c 00       		.byte	0
 6524 014d 14       		.uleb128 0x14
 6525 014e 2E       		.uleb128 0x2e
 6526 014f 00       		.byte	0
 6527 0150 3F       		.uleb128 0x3f
 6528 0151 19       		.uleb128 0x19
 6529 0152 03       		.uleb128 0x3
 6530 0153 0E       		.uleb128 0xe
 6531 0154 3A       		.uleb128 0x3a
 6532 0155 0B       		.uleb128 0xb
 6533 0156 3B       		.uleb128 0x3b
 6534 0157 05       		.uleb128 0x5
 6535 0158 11       		.uleb128 0x11
 6536 0159 01       		.uleb128 0x1
 6537 015a 12       		.uleb128 0x12
 6538 015b 06       		.uleb128 0x6
 6539 015c 40       		.uleb128 0x40
 6540 015d 18       		.uleb128 0x18
 6541 015e 9642     		.uleb128 0x2116
 6542 0160 19       		.uleb128 0x19
 6543 0161 00       		.byte	0
 6544 0162 00       		.byte	0
 6545 0163 15       		.uleb128 0x15
 6546 0164 01       		.uleb128 0x1
 6547 0165 01       		.byte	0x1
 6548 0166 49       		.uleb128 0x49
 6549 0167 13       		.uleb128 0x13
 6550 0168 01       		.uleb128 0x1
 6551 0169 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 141


 6552 016a 00       		.byte	0
 6553 016b 00       		.byte	0
 6554 016c 16       		.uleb128 0x16
 6555 016d 21       		.uleb128 0x21
 6556 016e 00       		.byte	0
 6557 016f 49       		.uleb128 0x49
 6558 0170 13       		.uleb128 0x13
 6559 0171 2F       		.uleb128 0x2f
 6560 0172 0B       		.uleb128 0xb
 6561 0173 00       		.byte	0
 6562 0174 00       		.byte	0
 6563 0175 17       		.uleb128 0x17
 6564 0176 34       		.uleb128 0x34
 6565 0177 00       		.byte	0
 6566 0178 03       		.uleb128 0x3
 6567 0179 08       		.uleb128 0x8
 6568 017a 3A       		.uleb128 0x3a
 6569 017b 0B       		.uleb128 0xb
 6570 017c 3B       		.uleb128 0x3b
 6571 017d 05       		.uleb128 0x5
 6572 017e 49       		.uleb128 0x49
 6573 017f 13       		.uleb128 0x13
 6574 0180 02       		.uleb128 0x2
 6575 0181 18       		.uleb128 0x18
 6576 0182 00       		.byte	0
 6577 0183 00       		.byte	0
 6578 0184 18       		.uleb128 0x18
 6579 0185 2E       		.uleb128 0x2e
 6580 0186 01       		.byte	0x1
 6581 0187 3F       		.uleb128 0x3f
 6582 0188 19       		.uleb128 0x19
 6583 0189 03       		.uleb128 0x3
 6584 018a 0E       		.uleb128 0xe
 6585 018b 3A       		.uleb128 0x3a
 6586 018c 0B       		.uleb128 0xb
 6587 018d 3B       		.uleb128 0x3b
 6588 018e 05       		.uleb128 0x5
 6589 018f 11       		.uleb128 0x11
 6590 0190 01       		.uleb128 0x1
 6591 0191 12       		.uleb128 0x12
 6592 0192 06       		.uleb128 0x6
 6593 0193 40       		.uleb128 0x40
 6594 0194 18       		.uleb128 0x18
 6595 0195 9642     		.uleb128 0x2116
 6596 0197 19       		.uleb128 0x19
 6597 0198 01       		.uleb128 0x1
 6598 0199 13       		.uleb128 0x13
 6599 019a 00       		.byte	0
 6600 019b 00       		.byte	0
 6601 019c 19       		.uleb128 0x19
 6602 019d 2E       		.uleb128 0x2e
 6603 019e 00       		.byte	0
 6604 019f 3F       		.uleb128 0x3f
 6605 01a0 19       		.uleb128 0x19
 6606 01a1 03       		.uleb128 0x3
 6607 01a2 0E       		.uleb128 0xe
 6608 01a3 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 142


 6609 01a4 0B       		.uleb128 0xb
 6610 01a5 3B       		.uleb128 0x3b
 6611 01a6 05       		.uleb128 0x5
 6612 01a7 11       		.uleb128 0x11
 6613 01a8 01       		.uleb128 0x1
 6614 01a9 12       		.uleb128 0x12
 6615 01aa 06       		.uleb128 0x6
 6616 01ab 40       		.uleb128 0x40
 6617 01ac 18       		.uleb128 0x18
 6618 01ad 9742     		.uleb128 0x2117
 6619 01af 19       		.uleb128 0x19
 6620 01b0 00       		.byte	0
 6621 01b1 00       		.byte	0
 6622 01b2 1A       		.uleb128 0x1a
 6623 01b3 0B       		.uleb128 0xb
 6624 01b4 01       		.byte	0x1
 6625 01b5 11       		.uleb128 0x11
 6626 01b6 01       		.uleb128 0x1
 6627 01b7 12       		.uleb128 0x12
 6628 01b8 06       		.uleb128 0x6
 6629 01b9 00       		.byte	0
 6630 01ba 00       		.byte	0
 6631 01bb 1B       		.uleb128 0x1b
 6632 01bc 2E       		.uleb128 0x2e
 6633 01bd 01       		.byte	0x1
 6634 01be 3F       		.uleb128 0x3f
 6635 01bf 19       		.uleb128 0x19
 6636 01c0 03       		.uleb128 0x3
 6637 01c1 0E       		.uleb128 0xe
 6638 01c2 3A       		.uleb128 0x3a
 6639 01c3 0B       		.uleb128 0xb
 6640 01c4 3B       		.uleb128 0x3b
 6641 01c5 05       		.uleb128 0x5
 6642 01c6 49       		.uleb128 0x49
 6643 01c7 13       		.uleb128 0x13
 6644 01c8 11       		.uleb128 0x11
 6645 01c9 01       		.uleb128 0x1
 6646 01ca 12       		.uleb128 0x12
 6647 01cb 06       		.uleb128 0x6
 6648 01cc 40       		.uleb128 0x40
 6649 01cd 18       		.uleb128 0x18
 6650 01ce 9642     		.uleb128 0x2116
 6651 01d0 19       		.uleb128 0x19
 6652 01d1 01       		.uleb128 0x1
 6653 01d2 13       		.uleb128 0x13
 6654 01d3 00       		.byte	0
 6655 01d4 00       		.byte	0
 6656 01d5 1C       		.uleb128 0x1c
 6657 01d6 34       		.uleb128 0x34
 6658 01d7 00       		.byte	0
 6659 01d8 03       		.uleb128 0x3
 6660 01d9 0E       		.uleb128 0xe
 6661 01da 3A       		.uleb128 0x3a
 6662 01db 0B       		.uleb128 0xb
 6663 01dc 3B       		.uleb128 0x3b
 6664 01dd 0B       		.uleb128 0xb
 6665 01de 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 143


 6666 01df 13       		.uleb128 0x13
 6667 01e0 3F       		.uleb128 0x3f
 6668 01e1 19       		.uleb128 0x19
 6669 01e2 02       		.uleb128 0x2
 6670 01e3 18       		.uleb128 0x18
 6671 01e4 00       		.byte	0
 6672 01e5 00       		.byte	0
 6673 01e6 1D       		.uleb128 0x1d
 6674 01e7 34       		.uleb128 0x34
 6675 01e8 00       		.byte	0
 6676 01e9 03       		.uleb128 0x3
 6677 01ea 0E       		.uleb128 0xe
 6678 01eb 3A       		.uleb128 0x3a
 6679 01ec 0B       		.uleb128 0xb
 6680 01ed 3B       		.uleb128 0x3b
 6681 01ee 05       		.uleb128 0x5
 6682 01ef 49       		.uleb128 0x49
 6683 01f0 13       		.uleb128 0x13
 6684 01f1 3F       		.uleb128 0x3f
 6685 01f2 19       		.uleb128 0x19
 6686 01f3 02       		.uleb128 0x2
 6687 01f4 18       		.uleb128 0x18
 6688 01f5 00       		.byte	0
 6689 01f6 00       		.byte	0
 6690 01f7 00       		.byte	0
 6691              		.section	.debug_aranges,"",%progbits
 6692 0000 CC000000 		.4byte	0xcc
 6693 0004 0200     		.2byte	0x2
 6694 0006 00000000 		.4byte	.Ldebug_info0
 6695 000a 04       		.byte	0x4
 6696 000b 00       		.byte	0
 6697 000c 0000     		.2byte	0
 6698 000e 0000     		.2byte	0
 6699 0010 00000000 		.4byte	.LFB34
 6700 0014 28000000 		.4byte	.LFE34-.LFB34
 6701 0018 00000000 		.4byte	.LFB35
 6702 001c 90010000 		.4byte	.LFE35-.LFB35
 6703 0020 00000000 		.4byte	.LFB36
 6704 0024 90010000 		.4byte	.LFE36-.LFB36
 6705 0028 00000000 		.4byte	.LFB37
 6706 002c 78000000 		.4byte	.LFE37-.LFB37
 6707 0030 00000000 		.4byte	.LFB38
 6708 0034 3E000000 		.4byte	.LFE38-.LFB38
 6709 0038 00000000 		.4byte	.LFB39
 6710 003c 0C010000 		.4byte	.LFE39-.LFB39
 6711 0040 00000000 		.4byte	.LFB40
 6712 0044 0C020000 		.4byte	.LFE40-.LFB40
 6713 0048 00000000 		.4byte	.LFB41
 6714 004c 84000000 		.4byte	.LFE41-.LFB41
 6715 0050 00000000 		.4byte	.LFB42
 6716 0054 28000000 		.4byte	.LFE42-.LFB42
 6717 0058 00000000 		.4byte	.LFB43
 6718 005c FC000000 		.4byte	.LFE43-.LFB43
 6719 0060 00000000 		.4byte	.LFB44
 6720 0064 18000000 		.4byte	.LFE44-.LFB44
 6721 0068 00000000 		.4byte	.LFB45
 6722 006c 98000000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 144


 6723 0070 00000000 		.4byte	.LFB46
 6724 0074 98000000 		.4byte	.LFE46-.LFB46
 6725 0078 00000000 		.4byte	.LFB47
 6726 007c 98000000 		.4byte	.LFE47-.LFB47
 6727 0080 00000000 		.4byte	.LFB48
 6728 0084 90010000 		.4byte	.LFE48-.LFB48
 6729 0088 00000000 		.4byte	.LFB49
 6730 008c 90010000 		.4byte	.LFE49-.LFB49
 6731 0090 00000000 		.4byte	.LFB50
 6732 0094 60030000 		.4byte	.LFE50-.LFB50
 6733 0098 00000000 		.4byte	.LFB51
 6734 009c 60030000 		.4byte	.LFE51-.LFB51
 6735 00a0 00000000 		.4byte	.LFB52
 6736 00a4 7C010000 		.4byte	.LFE52-.LFB52
 6737 00a8 00000000 		.4byte	.LFB53
 6738 00ac F8000000 		.4byte	.LFE53-.LFB53
 6739 00b0 00000000 		.4byte	.LFB54
 6740 00b4 A0000000 		.4byte	.LFE54-.LFB54
 6741 00b8 00000000 		.4byte	.LFB55
 6742 00bc 74010000 		.4byte	.LFE55-.LFB55
 6743 00c0 00000000 		.4byte	.LFB56
 6744 00c4 B0010000 		.4byte	.LFE56-.LFB56
 6745 00c8 00000000 		.4byte	0
 6746 00cc 00000000 		.4byte	0
 6747              		.section	.debug_ranges,"",%progbits
 6748              	.Ldebug_ranges0:
 6749 0000 00000000 		.4byte	.LFB34
 6750 0004 28000000 		.4byte	.LFE34
 6751 0008 00000000 		.4byte	.LFB35
 6752 000c 90010000 		.4byte	.LFE35
 6753 0010 00000000 		.4byte	.LFB36
 6754 0014 90010000 		.4byte	.LFE36
 6755 0018 00000000 		.4byte	.LFB37
 6756 001c 78000000 		.4byte	.LFE37
 6757 0020 00000000 		.4byte	.LFB38
 6758 0024 3E000000 		.4byte	.LFE38
 6759 0028 00000000 		.4byte	.LFB39
 6760 002c 0C010000 		.4byte	.LFE39
 6761 0030 00000000 		.4byte	.LFB40
 6762 0034 0C020000 		.4byte	.LFE40
 6763 0038 00000000 		.4byte	.LFB41
 6764 003c 84000000 		.4byte	.LFE41
 6765 0040 00000000 		.4byte	.LFB42
 6766 0044 28000000 		.4byte	.LFE42
 6767 0048 00000000 		.4byte	.LFB43
 6768 004c FC000000 		.4byte	.LFE43
 6769 0050 00000000 		.4byte	.LFB44
 6770 0054 18000000 		.4byte	.LFE44
 6771 0058 00000000 		.4byte	.LFB45
 6772 005c 98000000 		.4byte	.LFE45
 6773 0060 00000000 		.4byte	.LFB46
 6774 0064 98000000 		.4byte	.LFE46
 6775 0068 00000000 		.4byte	.LFB47
 6776 006c 98000000 		.4byte	.LFE47
 6777 0070 00000000 		.4byte	.LFB48
 6778 0074 90010000 		.4byte	.LFE48
 6779 0078 00000000 		.4byte	.LFB49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 145


 6780 007c 90010000 		.4byte	.LFE49
 6781 0080 00000000 		.4byte	.LFB50
 6782 0084 60030000 		.4byte	.LFE50
 6783 0088 00000000 		.4byte	.LFB51
 6784 008c 60030000 		.4byte	.LFE51
 6785 0090 00000000 		.4byte	.LFB52
 6786 0094 7C010000 		.4byte	.LFE52
 6787 0098 00000000 		.4byte	.LFB53
 6788 009c F8000000 		.4byte	.LFE53
 6789 00a0 00000000 		.4byte	.LFB54
 6790 00a4 A0000000 		.4byte	.LFE54
 6791 00a8 00000000 		.4byte	.LFB55
 6792 00ac 74010000 		.4byte	.LFE55
 6793 00b0 00000000 		.4byte	.LFB56
 6794 00b4 B0010000 		.4byte	.LFE56
 6795 00b8 00000000 		.4byte	0
 6796 00bc 00000000 		.4byte	0
 6797              		.section	.debug_line,"",%progbits
 6798              	.Ldebug_line0:
 6799 0000 C1060000 		.section	.debug_str,"MS",%progbits,1
 6799      02004F01 
 6799      00000201 
 6799      FB0E0D00 
 6799      01010101 
 6800              	.LASF111:
 6801 0000 62617365 		.ascii	"baseAzimuth\000"
 6801      417A696D 
 6801      75746800 
 6802              	.LASF21:
 6803 000c 74696C74 		.ascii	"tilt_init\000"
 6803      5F696E69 
 6803      7400
 6804              	.LASF66:
 6805 0016 6E756D5F 		.ascii	"num_items\000"
 6805      6974656D 
 6805      7300
 6806              	.LASF136:
 6807 0020 74657374 		.ascii	"test_array\000"
 6807      5F617272 
 6807      617900
 6808              	.LASF54:
 6809 002b 6172645F 		.ascii	"ard_read\000"
 6809      72656164 
 6809      00
 6810              	.LASF147:
 6811 0034 656C6277 		.ascii	"elbw_errors\000"
 6811      5F657272 
 6811      6F727300 
 6812              	.LASF125:
 6813 0040 57545F63 		.ascii	"WT_cspot\000"
 6813      73706F74 
 6813      00
 6814              	.LASF103:
 6815 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6815      72725F63 
 6815      73706F74 
 6815      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 146


 6816              	.LASF43:
 6817 0056 42415F65 		.ascii	"BA_execute\000"
 6817      78656375 
 6817      746500
 6818              	.LASF30:
 6819 0061 656C626F 		.ascii	"elbow_states\000"
 6819      775F7374 
 6819      61746573 
 6819      00
 6820              	.LASF101:
 6821 006e 57545F61 		.ascii	"WT_array\000"
 6821      72726179 
 6821      00
 6822              	.LASF116:
 6823 0077 65666665 		.ascii	"effector\000"
 6823      63746F72 
 6823      00
 6824              	.LASF8:
 6825 0080 756E7369 		.ascii	"unsigned int\000"
 6825      676E6564 
 6825      20696E74 
 6825      00
 6826              	.LASF40:
 6827 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6827      417A696D 
 6827      7574685F 
 6827      73746174 
 6827      657300
 6828              	.LASF15:
 6829 00a0 696E7431 		.ascii	"int16\000"
 6829      3600
 6830              	.LASF119:
 6831 00a6 42415F63 		.ascii	"BA_cspot\000"
 6831      73706F74 
 6831      00
 6832              	.LASF62:
 6833 00af 43616C69 		.ascii	"CalibrationElbow\000"
 6833      62726174 
 6833      696F6E45 
 6833      6C626F77 
 6833      00
 6834              	.LASF144:
 6835 00c0 64726F70 		.ascii	"dropped_packets\000"
 6835      7065645F 
 6835      7061636B 
 6835      65747300 
 6836              	.LASF41:
 6837 00d0 42415F73 		.ascii	"BA_start\000"
 6837      74617274 
 6837      00
 6838              	.LASF110:
 6839 00d9 73686F75 		.ascii	"shoulder_array\000"
 6839      6C646572 
 6839      5F617272 
 6839      617900
 6840              	.LASF67:
 6841 00e8 6D61696E 		.ascii	"maintain_array\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 147


 6841      7461696E 
 6841      5F617272 
 6841      617900
 6842              	.LASF156:
 6843 00f7 73686F75 		.ascii	"shoulder_state\000"
 6843      6C646572 
 6843      5F737461 
 6843      746500
 6844              	.LASF26:
 6845 0106 726F7461 		.ascii	"rotate_start\000"
 6845      74655F73 
 6845      74617274 
 6845      00
 6846              	.LASF98:
 6847 0113 73706565 		.ascii	"speed\000"
 6847      6400
 6848              	.LASF106:
 6849 0119 656C6277 		.ascii	"elbw_arr_cspot\000"
 6849      5F617272 
 6849      5F637370 
 6849      6F7400
 6850              	.LASF115:
 6851 0128 61726475 		.ascii	"arduino\000"
 6851      696E6F00 
 6852              	.LASF55:
 6853 0130 6172645F 		.ascii	"ard_write\000"
 6853      77726974 
 6853      6500
 6854              	.LASF20:
 6855 013a 74696C74 		.ascii	"tilt_start\000"
 6855      5F737461 
 6855      727400
 6856              	.LASF73:
 6857 0145 73697A65 		.ascii	"size\000"
 6857      00
 6858              	.LASF145:
 6859 014a 6661696C 		.ascii	"fail_safe_errors\000"
 6859      5F736166 
 6859      655F6572 
 6859      726F7273 
 6859      00
 6860              	.LASF76:
 6861 015b 706F735F 		.ascii	"pos_to_vel\000"
 6861      746F5F76 
 6861      656C00
 6862              	.LASF155:
 6863 0166 656C626F 		.ascii	"elbow_state\000"
 6863      775F7374 
 6863      61746500 
 6864              	.LASF16:
 6865 0172 666C6F61 		.ascii	"float\000"
 6865      7400
 6866              	.LASF42:
 6867 0178 42415F69 		.ascii	"BA_init\000"
 6867      6E697400 
 6868              	.LASF159:
 6869 0180 61726475 		.ascii	"arduino_state\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 148


 6869      696E6F5F 
 6869      73746174 
 6869      6500
 6870              	.LASF75:
 6871 018e 696E6465 		.ascii	"index\000"
 6871      7800
 6872              	.LASF130:
 6873 0194 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6873      575F4C4F 
 6873      5745525F 
 6873      424F554E 
 6873      4400
 6874              	.LASF7:
 6875 01a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 6875      206C6F6E 
 6875      6720756E 
 6875      7369676E 
 6875      65642069 
 6876              	.LASF92:
 6877 01bd 53657276 		.ascii	"ServoGoalPosition\000"
 6877      6F476F61 
 6877      6C506F73 
 6877      6974696F 
 6877      6E00
 6878              	.LASF152:
 6879 01cf 74696D65 		.ascii	"timerFlag\000"
 6879      72466C61 
 6879      6700
 6880              	.LASF108:
 6881 01d9 73686F75 		.ascii	"shoulder\000"
 6881      6C646572 
 6881      00
 6882              	.LASF48:
 6883 01e2 6566665F 		.ascii	"eff_execute\000"
 6883      65786563 
 6883      75746500 
 6884              	.LASF82:
 6885 01ee 62797465 		.ascii	"byte1\000"
 6885      3100
 6886              	.LASF83:
 6887 01f4 62797465 		.ascii	"byte2\000"
 6887      3200
 6888              	.LASF149:
 6889 01fa 57545F65 		.ascii	"WT_errors\000"
 6889      72726F72 
 6889      7300
 6890              	.LASF151:
 6891 0204 6566665F 		.ascii	"eff_errors\000"
 6891      6572726F 
 6891      727300
 6892              	.LASF84:
 6893 020f 74656D70 		.ascii	"temp1\000"
 6893      3100
 6894              	.LASF85:
 6895 0215 74656D70 		.ascii	"temp2\000"
 6895      3200
 6896              	.LASF86:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 149


 6897 021b 74656D70 		.ascii	"temp3\000"
 6897      3300
 6898              	.LASF117:
 6899 0221 696E6974 		.ascii	"initialize\000"
 6899      69616C69 
 6899      7A6500
 6900              	.LASF105:
 6901 022c 656C626F 		.ascii	"elbow\000"
 6901      7700
 6902              	.LASF46:
 6903 0232 6566665F 		.ascii	"eff_start\000"
 6903      73746172 
 6903      7400
 6904              	.LASF123:
 6905 023c 656C6277 		.ascii	"elbw_cspot\000"
 6905      5F637370 
 6905      6F7400
 6906              	.LASF148:
 6907 0247 42415F65 		.ascii	"BA_errors\000"
 6907      72726F72 
 6907      7300
 6908              	.LASF63:
 6909 0251 43616C69 		.ascii	"CalibrationShoulder\000"
 6909      62726174 
 6909      696F6E53 
 6909      686F756C 
 6909      64657200 
 6910              	.LASF50:
 6911 0265 61726475 		.ascii	"arduino_states\000"
 6911      696E6F5F 
 6911      73746174 
 6911      657300
 6912              	.LASF127:
 6913 0274 66735F63 		.ascii	"fs_count\000"
 6913      6F756E74 
 6913      00
 6914              	.LASF69:
 6915 027d 53495A45 		.ascii	"SIZE\000"
 6915      00
 6916              	.LASF39:
 6917 0282 73686C64 		.ascii	"shldr_wait\000"
 6917      725F7761 
 6917      697400
 6918              	.LASF133:
 6919 028d 64617461 		.ascii	"data_array\000"
 6919      5F617272 
 6919      617900
 6920              	.LASF77:
 6921 0298 6375725F 		.ascii	"cur_pos\000"
 6921      706F7300 
 6922              	.LASF138:
 6923 02a0 57525F46 		.ascii	"WR_FLAG\000"
 6923      4C414700 
 6924              	.LASF18:
 6925 02a8 63686172 		.ascii	"char\000"
 6925      00
 6926              	.LASF12:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 150


 6927 02ad 75696E74 		.ascii	"uint16\000"
 6927      313600
 6928              	.LASF96:
 6929 02b4 746F7271 		.ascii	"torque\000"
 6929      756500
 6930              	.LASF14:
 6931 02bb 696E7438 		.ascii	"int8\000"
 6931      00
 6932              	.LASF88:
 6933 02c0 66656564 		.ascii	"feedback\000"
 6933      6261636B 
 6933      00
 6934              	.LASF141:
 6935 02c9 42415F46 		.ascii	"BA_FLAG\000"
 6935      4C414700 
 6936              	.LASF57:
 6937 02d1 4359434C 		.ascii	"CYCLES\000"
 6937      455300
 6938              	.LASF51:
 6939 02d8 6172645F 		.ascii	"ard_start\000"
 6939      73746172 
 6939      7400
 6940              	.LASF10:
 6941 02e2 75696E74 		.ascii	"uint8_t\000"
 6941      385F7400 
 6942              	.LASF72:
 6943 02ea 6172725F 		.ascii	"arr_pos\000"
 6943      706F7300 
 6944              	.LASF37:
 6945 02f2 73686C64 		.ascii	"shldr_init\000"
 6945      725F696E 
 6945      697400
 6946              	.LASF134:
 6947 02fd 66656564 		.ascii	"feedback_array\000"
 6947      6261636B 
 6947      5F617272 
 6947      617900
 6948              	.LASF6:
 6949 030c 6C6F6E67 		.ascii	"long long int\000"
 6949      206C6F6E 
 6949      6720696E 
 6949      7400
 6950              	.LASF35:
 6951 031a 73686F75 		.ascii	"shoulder_states\000"
 6951      6C646572 
 6951      5F737461 
 6951      74657300 
 6952              	.LASF68:
 6953 032a 63706F73 		.ascii	"cpos\000"
 6953      00
 6954              	.LASF126:
 6955 032f 57525F63 		.ascii	"WR_cspot\000"
 6955      73706F74 
 6955      00
 6956              	.LASF124:
 6957 0338 656C6277 		.ascii	"elbw_array\000"
 6957      5F617272 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 151


 6957      617900
 6958              	.LASF25:
 6959 0343 77726973 		.ascii	"wristRotate_states\000"
 6959      74526F74 
 6959      6174655F 
 6959      73746174 
 6959      657300
 6960              	.LASF142:
 6961 0356 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6961      43544F52 
 6961      5F464C41 
 6961      4700
 6962              	.LASF131:
 6963 0364 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6963      4C444552 
 6963      5F555050 
 6963      45525F42 
 6963      4F554E44 
 6964              	.LASF45:
 6965 0379 65666665 		.ascii	"effector_states\000"
 6965      63746F72 
 6965      5F737461 
 6965      74657300 
 6966              	.LASF158:
 6967 0389 65666665 		.ascii	"effector_state\000"
 6967      63746F72 
 6967      5F737461 
 6967      746500
 6968              	.LASF58:
 6969 0398 626F756E 		.ascii	"bound\000"
 6969      6400
 6970              	.LASF13:
 6971 039e 75696E74 		.ascii	"uint32\000"
 6971      333200
 6972              	.LASF121:
 6973 03a5 73686C64 		.ascii	"shldr_cspot\000"
 6973      725F6373 
 6973      706F7400 
 6974              	.LASF137:
 6975 03b1 57545F46 		.ascii	"WT_FLAG\000"
 6975      4C414700 
 6976              	.LASF80:
 6977 03b9 6D616B65 		.ascii	"make_command\000"
 6977      5F636F6D 
 6977      6D616E64 
 6977      00
 6978              	.LASF99:
 6979 03c6 77726973 		.ascii	"wristTilt\000"
 6979      7454696C 
 6979      7400
 6980              	.LASF140:
 6981 03d0 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6981      4C444552 
 6981      5F464C41 
 6981      4700
 6982              	.LASF31:
 6983 03de 656C6277 		.ascii	"elbw_start\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 152


 6983      5F737461 
 6983      727400
 6984              	.LASF153:
 6985 03e9 77726973 		.ascii	"wristTilt_state\000"
 6985      7454696C 
 6985      745F7374 
 6985      61746500 
 6986              	.LASF71:
 6987 03f9 61727261 		.ascii	"array\000"
 6987      7900
 6988              	.LASF109:
 6989 03ff 73686C64 		.ascii	"shldr_arr_cspot\000"
 6989      725F6172 
 6989      725F6373 
 6989      706F7400 
 6990              	.LASF112:
 6991 040f 42415F61 		.ascii	"BA_arr_cspot\000"
 6991      72725F63 
 6991      73706F74 
 6991      00
 6992              	.LASF90:
 6993 041c 73656E64 		.ascii	"send_packet\000"
 6993      5F706163 
 6993      6B657400 
 6994              	.LASF74:
 6995 0428 6368616E 		.ascii	"change\000"
 6995      676500
 6996              	.LASF60:
 6997 042f 6368616E 		.ascii	"channel\000"
 6997      6E656C00 
 6998              	.LASF87:
 6999 0437 706F7446 		.ascii	"potFeedback\000"
 6999      65656462 
 6999      61636B00 
 7000              	.LASF78:
 7001 0443 41525241 		.ascii	"ARRAY_SIZE\000"
 7001      595F5349 
 7001      5A4500
 7002              	.LASF100:
 7003 044e 57545F61 		.ascii	"WT_arr_cspot\000"
 7003      72725F63 
 7003      73706F74 
 7003      00
 7004              	.LASF28:
 7005 045b 726F7461 		.ascii	"rotate_control\000"
 7005      74655F63 
 7005      6F6E7472 
 7005      6F6C00
 7006              	.LASF2:
 7007 046a 73686F72 		.ascii	"short int\000"
 7007      7420696E 
 7007      7400
 7008              	.LASF157:
 7009 0474 62617365 		.ascii	"baseAzimuth_state\000"
 7009      417A696D 
 7009      7574685F 
 7009      73746174 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 153


 7009      6500
 7010              	.LASF65:
 7011 0486 61765F61 		.ascii	"av_array\000"
 7011      72726179 
 7011      00
 7012              	.LASF4:
 7013 048f 6C6F6E67 		.ascii	"long int\000"
 7013      20696E74 
 7013      00
 7014              	.LASF22:
 7015 0498 74696C74 		.ascii	"tilt_control\000"
 7015      5F636F6E 
 7015      74726F6C 
 7015      00
 7016              	.LASF89:
 7017 04a5 74696D65 		.ascii	"timer_isr\000"
 7017      725F6973 
 7017      7200
 7018              	.LASF143:
 7019 04af 4152445F 		.ascii	"ARD_FLAG\000"
 7019      464C4147 
 7019      00
 7020              	.LASF150:
 7021 04b8 57525F65 		.ascii	"WR_errors\000"
 7021      72726F72 
 7021      7300
 7022              	.LASF154:
 7023 04c2 77726973 		.ascii	"wristRotate_state\000"
 7023      74526F74 
 7023      6174655F 
 7023      73746174 
 7023      6500
 7024              	.LASF44:
 7025 04d4 42415F77 		.ascii	"BA_wait\000"
 7025      61697400 
 7026              	.LASF24:
 7027 04dc 77726973 		.ascii	"wristTilt_states\000"
 7027      7454696C 
 7027      745F7374 
 7027      61746573 
 7027      00
 7028              	.LASF135:
 7029 04ed 77697A6E 		.ascii	"wiznet\000"
 7029      657400
 7030              	.LASF9:
 7031 04f4 5F5F7569 		.ascii	"__uint8_t\000"
 7031      6E74385F 
 7031      7400
 7032              	.LASF70:
 7033 04fe 63686563 		.ascii	"check_update\000"
 7033      6B5F7570 
 7033      64617465 
 7033      00
 7034              	.LASF97:
 7035 050b 53657276 		.ascii	"ServoSpeed\000"
 7035      6F537065 
 7035      656400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 154


 7036              	.LASF49:
 7037 0516 6566665F 		.ascii	"eff_wait\000"
 7037      77616974 
 7037      00
 7038              	.LASF64:
 7039 051f 76656C6F 		.ascii	"velocity\000"
 7039      63697479 
 7039      00
 7040              	.LASF122:
 7041 0528 73686C64 		.ascii	"shldr_array\000"
 7041      725F6172 
 7041      72617900 
 7042              	.LASF19:
 7043 0534 73697A65 		.ascii	"sizetype\000"
 7043      74797065 
 7043      00
 7044              	.LASF5:
 7045 053d 6C6F6E67 		.ascii	"long unsigned int\000"
 7045      20756E73 
 7045      69676E65 
 7045      6420696E 
 7045      7400
 7046              	.LASF33:
 7047 054f 656C6277 		.ascii	"elbw_execute\000"
 7047      5F657865 
 7047      63757465 
 7047      00
 7048              	.LASF113:
 7049 055c 62617365 		.ascii	"baseAz_array\000"
 7049      417A5F61 
 7049      72726179 
 7049      00
 7050              	.LASF29:
 7051 0569 726F7461 		.ascii	"rotate_wait\000"
 7051      74655F77 
 7051      61697400 
 7052              	.LASF132:
 7053 0575 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 7053      4C444552 
 7053      5F4C4F57 
 7053      45525F42 
 7053      4F554E44 
 7054              	.LASF36:
 7055 058a 73686C64 		.ascii	"shldr_start\000"
 7055      725F7374 
 7055      61727400 
 7056              	.LASF81:
 7057 0596 696E666F 		.ascii	"info_array\000"
 7057      5F617272 
 7057      617900
 7058              	.LASF1:
 7059 05a1 756E7369 		.ascii	"unsigned char\000"
 7059      676E6564 
 7059      20636861 
 7059      7200
 7060              	.LASF114:
 7061 05af 66696C6C 		.ascii	"fill_data_array\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 155


 7061      5F646174 
 7061      615F6172 
 7061      72617900 
 7062              	.LASF102:
 7063 05bf 77726973 		.ascii	"wristRotate\000"
 7063      74526F74 
 7063      61746500 
 7064              	.LASF47:
 7065 05cb 6566665F 		.ascii	"eff_init\000"
 7065      696E6974 
 7065      00
 7066              	.LASF107:
 7067 05d4 656C626F 		.ascii	"elbow_array\000"
 7067      775F6172 
 7067      72617900 
 7068              	.LASF38:
 7069 05e0 73686C64 		.ascii	"shldr_execute\000"
 7069      725F6578 
 7069      65637574 
 7069      6500
 7070              	.LASF129:
 7071 05ee 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 7071      575F5550 
 7071      5045525F 
 7071      424F554E 
 7071      4400
 7072              	.LASF53:
 7073 0600 6172645F 		.ascii	"ard_wait\000"
 7073      77616974 
 7073      00
 7074              	.LASF27:
 7075 0609 726F7461 		.ascii	"rotate_init\000"
 7075      74655F69 
 7075      6E697400 
 7076              	.LASF160:
 7077 0615 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 7077      4320342E 
 7077      382E3420 
 7077      32303134 
 7077      30353236 
 7078 0648 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 7078      20726576 
 7078      6973696F 
 7078      6E203231 
 7078      31333538 
 7079 067b 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 7079      74643D67 
 7079      6E753939 
 7079      202D6666 
 7079      756E6374 
 7080              	.LASF79:
 7081 069c 636F6D6D 		.ascii	"command\000"
 7081      616E6400 
 7082              	.LASF61:
 7083 06a4 64696666 		.ascii	"difference\000"
 7083      6572656E 
 7083      636500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 156


 7084              	.LASF128:
 7085 06af 74656D70 		.ascii	"temp_val\000"
 7085      5F76616C 
 7085      00
 7086              	.LASF0:
 7087 06b8 7369676E 		.ascii	"signed char\000"
 7087      65642063 
 7087      68617200 
 7088              	.LASF91:
 7089 06c4 68656172 		.ascii	"heart_beat\000"
 7089      745F6265 
 7089      617400
 7090              	.LASF59:
 7091 06cf 61766572 		.ascii	"average\000"
 7091      61676500 
 7092              	.LASF3:
 7093 06d7 73686F72 		.ascii	"short unsigned int\000"
 7093      7420756E 
 7093      7369676E 
 7093      65642069 
 7093      6E7400
 7094              	.LASF34:
 7095 06ea 656C6277 		.ascii	"elbw_wait\000"
 7095      5F776169 
 7095      7400
 7096              	.LASF118:
 7097 06f4 6D61696E 		.ascii	"main\000"
 7097      00
 7098              	.LASF120:
 7099 06f9 42415F61 		.ascii	"BA_array\000"
 7099      72726179 
 7099      00
 7100              	.LASF162:
 7101 0702 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 7101      73657273 
 7101      5C53616D 
 7101      75656C5C 
 7101      446F6375 
 7102 072f 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 7102      65725F76 
 7102      325C6172 
 7102      6D5F636F 
 7102      6E74726F 
 7103              	.LASF23:
 7104 0753 74696C74 		.ascii	"tilt_wait\000"
 7104      5F776169 
 7104      7400
 7105              	.LASF104:
 7106 075d 57525F61 		.ascii	"WR_array\000"
 7106      72726179 
 7106      00
 7107              	.LASF11:
 7108 0766 75696E74 		.ascii	"uint8\000"
 7108      3800
 7109              	.LASF17:
 7110 076c 646F7562 		.ascii	"double\000"
 7110      6C6500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccIdZYB9.s 			page 157


 7111              	.LASF139:
 7112 0773 454C424F 		.ascii	"ELBOW_FLAG\000"
 7112      575F464C 
 7112      414700
 7113              	.LASF52:
 7114 077e 6172645F 		.ascii	"ard_init\000"
 7114      696E6974 
 7114      00
 7115              	.LASF93:
 7116 0787 73657276 		.ascii	"servoID\000"
 7116      6F494400 
 7117              	.LASF56:
 7118 078f 6973725F 		.ascii	"isr_var\000"
 7118      76617200 
 7119              	.LASF146:
 7120 0797 73686C64 		.ascii	"shldr_errors\000"
 7120      725F6572 
 7120      726F7273 
 7120      00
 7121              	.LASF95:
 7122 07a4 53657453 		.ascii	"SetServoTorque\000"
 7122      6572766F 
 7122      546F7271 
 7122      756500
 7123              	.LASF94:
 7124 07b3 706F7369 		.ascii	"position\000"
 7124      74696F6E 
 7124      00
 7125              	.LASF161:
 7126 07bc 2E5C6D61 		.ascii	".\\main.c\000"
 7126      696E2E63 
 7126      00
 7127              	.LASF32:
 7128 07c5 656C6277 		.ascii	"elbw_init\000"
 7128      5F696E69 
 7128      7400
 7129              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

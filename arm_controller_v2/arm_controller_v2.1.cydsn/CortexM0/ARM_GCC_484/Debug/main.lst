ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,14,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	WT_arr_cspot,1,1
  29              		.comm	WT_array,40,4
  30              		.comm	WR_arr_cspot,1,1
  31              		.comm	WR_array,40,4
  32              		.comm	timerFlag,1,1
  33              		.section	.text.timer_isr,"ax",%progbits
  34              		.align	2
  35              		.global	timer_isr
  36              		.code	16
  37              		.thumb_func
  38              		.type	timer_isr, %function
  39              	timer_isr:
  40              	.LFB34:
  41              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** #include <wiznet5500.h>
  10:.\main.c      **** #include <spi.h>
  11:.\main.c      **** 
  12:.\main.c      **** //Initializations of global variables
  13:.\main.c      **** #define ownIpAddr 4
  14:.\main.c      **** #define dstIpAddr 1
  15:.\main.c      **** #define udpPort 27015
  16:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 2


  17:.\main.c      **** #define ELBOW_UPPER_BOUND 1000
  18:.\main.c      **** #define ELBOW_LOWER_BOUND 100
  19:.\main.c      **** #define SHOULDER_UPPER_BOUND 64000
  20:.\main.c      **** #define SHOULDER_LOWER_BOUND 0
  21:.\main.c      **** #define SHOULDER_POT 0
  22:.\main.c      **** #define ELBOW_POT 1
  23:.\main.c      **** 
  24:.\main.c      **** #define BA_BYTE_1 4
  25:.\main.c      **** #define BA_BYTE_2 5
  26:.\main.c      **** #define SHLDR_BYTE_1 6
  27:.\main.c      **** #define SHLDR_BYTE_2 7
  28:.\main.c      **** #define ELBW_BYTE_1 8
  29:.\main.c      **** #define ELBW_BYTE_2 9
  30:.\main.c      **** #define WT_BYTE_1 10
  31:.\main.c      **** #define WR_BYTE_2 11
  32:.\main.c      **** 
  33:.\main.c      **** #define DATA_ARRAY_SIZE 14
  34:.\main.c      **** uint8 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  35:.\main.c      **** 
  36:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  37:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  38:.\main.c      **** 
  39:.\main.c      **** #define NUM_OF_SM 3
  40:.\main.c      **** uint8 fin_exec; //counts
  41:.\main.c      **** 
  42:.\main.c      **** #define TEST_ARRAY_SIZE 10
  43:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  44:.\main.c      **** 
  45:.\main.c      **** #define ELBW_ARR_SIZE 20
  46:.\main.c      **** uint8 elbw_arr_cspot;
  47:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  48:.\main.c      **** 
  49:.\main.c      **** #define SHLDR_ARR_SIZE 20
  50:.\main.c      **** uint8 shldr_arr_cspot;
  51:.\main.c      **** uint16 shoulder_array[SHLDR_ARR_SIZE];
  52:.\main.c      **** 
  53:.\main.c      **** #define BA_ARR_SIZE 20
  54:.\main.c      **** uint8 BA_arr_cspot;
  55:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  56:.\main.c      **** 
  57:.\main.c      **** #define WT_ARR_SIZE 20  //for wristTilt
  58:.\main.c      **** uint8 WT_arr_cspot;
  59:.\main.c      **** uint16 WT_array[WT_ARR_SIZE];
  60:.\main.c      **** 
  61:.\main.c      **** #define WR_ARR_SIZE 20  //for wristRotate
  62:.\main.c      **** uint8 WR_arr_cspot;
  63:.\main.c      **** uint16 WR_array[WR_ARR_SIZE];
  64:.\main.c      **** 
  65:.\main.c      **** //uint16 feedback_count;
  66:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  67:.\main.c      **** 
  68:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  69:.\main.c      **** ///set to the time of the longest path for our code
  70:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  71:.\main.c      **** CY_ISR(timer_isr)
  72:.\main.c      **** {
  42              		.loc 1 72 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 3


  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 82B0     		sub	sp, sp, #8
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  73:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  52              		.loc 1 73 0
  53 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  54 000a 031C     		mov	r3, r0
  55 000c 7B60     		str	r3, [r7, #4]
  74:.\main.c      ****     timerFlag = 1;
  56              		.loc 1 74 0
  57 000e 054B     		ldr	r3, .L2
  58 0010 0122     		mov	r2, #1
  59 0012 1A70     		strb	r2, [r3]
  75:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  60              		.loc 1 75 0
  61 0014 7B68     		ldr	r3, [r7, #4]
  62 0016 181C     		mov	r0, r3
  63 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  76:.\main.c      **** }
  64              		.loc 1 76 0
  65 001c BD46     		mov	sp, r7
  66 001e 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              	.L3:
  70 0022 C046     		.align	2
  71              	.L2:
  72 0024 00000000 		.word	timerFlag
  73              		.cfi_endproc
  74              	.LFE34:
  75              		.size	timer_isr, .-timer_isr
  76              		.section	.text.reverse,"ax",%progbits
  77              		.align	2
  78              		.global	reverse
  79              		.code	16
  80              		.thumb_func
  81              		.type	reverse, %function
  82              	reverse:
  83              	.LFB35:
  77:.\main.c      **** 
  78:.\main.c      **** 
  79:.\main.c      **** //Funtion declarations/definitions
  80:.\main.c      **** //TODO do we need to make a header for good practice?
  81:.\main.c      **** 
  82:.\main.c      **** //---------------------------------------------------
  83:.\main.c      **** //    Function stubs for the header
  84:.\main.c      **** //---------------------------------------------------
  85:.\main.c      **** void fill_data_array();
  86:.\main.c      **** void baseAzimuth();
  87:.\main.c      **** void shoulder();
  88:.\main.c      **** void elbow();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 4


  89:.\main.c      **** void wristTilt();
  90:.\main.c      **** void wristRotate();
  91:.\main.c      **** void send_feedback();
  92:.\main.c      **** uint16 potFeedback();
  93:.\main.c      **** //--------------------------------------------------- END Function Stubs
  94:.\main.c      **** 
  95:.\main.c      **** // function to convert int to string
  96:.\main.c      **** void reverse(char s[])
  97:.\main.c      ****  {
  84              		.loc 1 97 0
  85              		.cfi_startproc
  86 0000 80B5     		push	{r7, lr}
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 86B0     		sub	sp, sp, #24
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  94 0006 7860     		str	r0, [r7, #4]
  98:.\main.c      ****      int i, j;
  99:.\main.c      ****      char c;
 100:.\main.c      ****  
 101:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  95              		.loc 1 101 0
  96 0008 0023     		mov	r3, #0
  97 000a 7B61     		str	r3, [r7, #20]
  98 000c 7B68     		ldr	r3, [r7, #4]
  99 000e 181C     		mov	r0, r3
 100 0010 FFF7FEFF 		bl	strlen
 101 0014 031C     		mov	r3, r0
 102 0016 013B     		sub	r3, r3, #1
 103 0018 3B61     		str	r3, [r7, #16]
 104 001a 1BE0     		b	.L5
 105              	.L6:
 102:.\main.c      ****          c = s[i];
 106              		.loc 1 102 0 discriminator 2
 107 001c 7B69     		ldr	r3, [r7, #20]
 108 001e 7A68     		ldr	r2, [r7, #4]
 109 0020 D218     		add	r2, r2, r3
 110 0022 3B1C     		mov	r3, r7
 111 0024 0F33     		add	r3, r3, #15
 112 0026 1278     		ldrb	r2, [r2]
 113 0028 1A70     		strb	r2, [r3]
 103:.\main.c      ****          s[i] = s[j];
 114              		.loc 1 103 0 discriminator 2
 115 002a 7B69     		ldr	r3, [r7, #20]
 116 002c 7A68     		ldr	r2, [r7, #4]
 117 002e D318     		add	r3, r2, r3
 118 0030 3A69     		ldr	r2, [r7, #16]
 119 0032 7968     		ldr	r1, [r7, #4]
 120 0034 8A18     		add	r2, r1, r2
 121 0036 1278     		ldrb	r2, [r2]
 122 0038 1A70     		strb	r2, [r3]
 104:.\main.c      ****          s[j] = c;
 123              		.loc 1 104 0 discriminator 2
 124 003a 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 5


 125 003c 7A68     		ldr	r2, [r7, #4]
 126 003e D318     		add	r3, r2, r3
 127 0040 3A1C     		mov	r2, r7
 128 0042 0F32     		add	r2, r2, #15
 129 0044 1278     		ldrb	r2, [r2]
 130 0046 1A70     		strb	r2, [r3]
 101:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 131              		.loc 1 101 0 discriminator 2
 132 0048 7B69     		ldr	r3, [r7, #20]
 133 004a 0133     		add	r3, r3, #1
 134 004c 7B61     		str	r3, [r7, #20]
 135 004e 3B69     		ldr	r3, [r7, #16]
 136 0050 013B     		sub	r3, r3, #1
 137 0052 3B61     		str	r3, [r7, #16]
 138              	.L5:
 101:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 139              		.loc 1 101 0 is_stmt 0 discriminator 1
 140 0054 7A69     		ldr	r2, [r7, #20]
 141 0056 3B69     		ldr	r3, [r7, #16]
 142 0058 9A42     		cmp	r2, r3
 143 005a DFDB     		blt	.L6
 105:.\main.c      ****      }
 106:.\main.c      ****  }
 144              		.loc 1 106 0 is_stmt 1
 145 005c BD46     		mov	sp, r7
 146 005e 06B0     		add	sp, sp, #24
 147              		@ sp needed
 148 0060 80BD     		pop	{r7, pc}
 149              		.cfi_endproc
 150              	.LFE35:
 151              		.size	reverse, .-reverse
 152              		.global	__aeabi_idivmod
 153              		.global	__aeabi_idiv
 154              		.section	.text.itoa,"ax",%progbits
 155              		.align	2
 156              		.global	itoa
 157              		.code	16
 158              		.thumb_func
 159              		.type	itoa, %function
 160              	itoa:
 161              	.LFB36:
 107:.\main.c      **** /* itoa:  convert n to characters in s */
 108:.\main.c      ****  void itoa(int n, char s[])
 109:.\main.c      ****  {
 162              		.loc 1 109 0
 163              		.cfi_startproc
 164 0000 90B5     		push	{r4, r7, lr}
 165              		.cfi_def_cfa_offset 12
 166              		.cfi_offset 4, -12
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 85B0     		sub	sp, sp, #20
 170              		.cfi_def_cfa_offset 32
 171 0004 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 174 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 6


 110:.\main.c      ****      int i, sign;
 111:.\main.c      ****  
 112:.\main.c      ****      if ((sign = n) < 0)  /* record sign */
 175              		.loc 1 112 0
 176 000a 7B68     		ldr	r3, [r7, #4]
 177 000c BB60     		str	r3, [r7, #8]
 178 000e BB68     		ldr	r3, [r7, #8]
 179 0010 002B     		cmp	r3, #0
 180 0012 02DA     		bge	.L8
 113:.\main.c      ****          n = -n;          /* make n positive */
 181              		.loc 1 113 0
 182 0014 7B68     		ldr	r3, [r7, #4]
 183 0016 5B42     		neg	r3, r3
 184 0018 7B60     		str	r3, [r7, #4]
 185              	.L8:
 114:.\main.c      ****      i = 0;
 186              		.loc 1 114 0
 187 001a 0023     		mov	r3, #0
 188 001c FB60     		str	r3, [r7, #12]
 189              	.L9:
 115:.\main.c      ****      do {       /* generate digits in reverse order */
 116:.\main.c      ****          s[i++] = n % 10 + '0';   /* get next digit */
 190              		.loc 1 116 0 discriminator 1
 191 001e FB68     		ldr	r3, [r7, #12]
 192 0020 5A1C     		add	r2, r3, #1
 193 0022 FA60     		str	r2, [r7, #12]
 194 0024 3A68     		ldr	r2, [r7]
 195 0026 D418     		add	r4, r2, r3
 196 0028 7B68     		ldr	r3, [r7, #4]
 197 002a 181C     		mov	r0, r3
 198 002c 0A21     		mov	r1, #10
 199 002e FFF7FEFF 		bl	__aeabi_idivmod
 200 0032 0B1C     		mov	r3, r1
 201 0034 DBB2     		uxtb	r3, r3
 202 0036 3033     		add	r3, r3, #48
 203 0038 DBB2     		uxtb	r3, r3
 204 003a 2370     		strb	r3, [r4]
 117:.\main.c      ****      } while ((n /= 10) > 0);     /* delete it */
 205              		.loc 1 117 0 discriminator 1
 206 003c 7B68     		ldr	r3, [r7, #4]
 207 003e 181C     		mov	r0, r3
 208 0040 0A21     		mov	r1, #10
 209 0042 FFF7FEFF 		bl	__aeabi_idiv
 210 0046 031C     		mov	r3, r0
 211 0048 7B60     		str	r3, [r7, #4]
 212 004a 7B68     		ldr	r3, [r7, #4]
 213 004c 002B     		cmp	r3, #0
 214 004e E6DC     		bgt	.L9
 118:.\main.c      ****      if (sign < 0)
 215              		.loc 1 118 0
 216 0050 BB68     		ldr	r3, [r7, #8]
 217 0052 002B     		cmp	r3, #0
 218 0054 06DA     		bge	.L10
 119:.\main.c      ****          s[i++] = '-';
 219              		.loc 1 119 0
 220 0056 FB68     		ldr	r3, [r7, #12]
 221 0058 5A1C     		add	r2, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 7


 222 005a FA60     		str	r2, [r7, #12]
 223 005c 3A68     		ldr	r2, [r7]
 224 005e D318     		add	r3, r2, r3
 225 0060 2D22     		mov	r2, #45
 226 0062 1A70     		strb	r2, [r3]
 227              	.L10:
 120:.\main.c      ****      s[i] = '\0';
 228              		.loc 1 120 0
 229 0064 FB68     		ldr	r3, [r7, #12]
 230 0066 3A68     		ldr	r2, [r7]
 231 0068 D318     		add	r3, r2, r3
 232 006a 0022     		mov	r2, #0
 233 006c 1A70     		strb	r2, [r3]
 121:.\main.c      ****      reverse(s);
 234              		.loc 1 121 0
 235 006e 3B68     		ldr	r3, [r7]
 236 0070 181C     		mov	r0, r3
 237 0072 FFF7FEFF 		bl	reverse
 122:.\main.c      ****  }
 238              		.loc 1 122 0
 239 0076 BD46     		mov	sp, r7
 240 0078 05B0     		add	sp, sp, #20
 241              		@ sp needed
 242 007a 90BD     		pop	{r4, r7, pc}
 243              		.cfi_endproc
 244              	.LFE36:
 245              		.size	itoa, .-itoa
 246              		.section	.text.potFeedback,"ax",%progbits
 247              		.align	2
 248              		.global	potFeedback
 249              		.code	16
 250              		.thumb_func
 251              		.type	potFeedback, %function
 252              	potFeedback:
 253              	.LFB37:
 123:.\main.c      **** 
 124:.\main.c      **** 
 125:.\main.c      **** 
 126:.\main.c      **** uint16 potFeedback(uint32 channel){
 254              		.loc 1 126 0
 255              		.cfi_startproc
 256 0000 80B5     		push	{r7, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 7, -8
 259              		.cfi_offset 14, -4
 260 0002 84B0     		sub	sp, sp, #16
 261              		.cfi_def_cfa_offset 24
 262 0004 00AF     		add	r7, sp, #0
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 127:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 265              		.loc 1 127 0
 266 0008 7B68     		ldr	r3, [r7, #4]
 267 000a 181C     		mov	r0, r3
 268 000c FFF7FEFF 		bl	ADC_GetResult16
 269 0010 031C     		mov	r3, r0
 270 0012 1A1C     		mov	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 8


 271 0014 3B1C     		mov	r3, r7
 272 0016 0E33     		add	r3, r3, #14
 273 0018 1A80     		strh	r2, [r3]
 128:.\main.c      ****     return feedback;
 274              		.loc 1 128 0
 275 001a 3B1C     		mov	r3, r7
 276 001c 0E33     		add	r3, r3, #14
 277 001e 1B88     		ldrh	r3, [r3]
 129:.\main.c      **** }
 278              		.loc 1 129 0
 279 0020 181C     		mov	r0, r3
 280 0022 BD46     		mov	sp, r7
 281 0024 04B0     		add	sp, sp, #16
 282              		@ sp needed
 283 0026 80BD     		pop	{r7, pc}
 284              		.cfi_endproc
 285              	.LFE37:
 286              		.size	potFeedback, .-potFeedback
 287              		.section	.text.fill_data_array,"ax",%progbits
 288              		.align	2
 289              		.global	fill_data_array
 290              		.code	16
 291              		.thumb_func
 292              		.type	fill_data_array, %function
 293              	fill_data_array:
 294              	.LFB38:
 130:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 131:.\main.c      **** void fill_data_array()
 132:.\main.c      **** {
 295              		.loc 1 132 0
 296              		.cfi_startproc
 297 0000 80B5     		push	{r7, lr}
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 7, -8
 300              		.cfi_offset 14, -4
 301 0002 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 133:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 303              		.loc 1 133 0
 304 0004 034B     		ldr	r3, .L14
 305 0006 181C     		mov	r0, r3
 306 0008 0E21     		mov	r1, #14
 307 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 134:.\main.c      **** //    uint8 i = 0;
 135:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 136:.\main.c      **** //    {
 137:.\main.c      **** //        data_array[i] = test_array[i];
 138:.\main.c      **** //    }
 139:.\main.c      **** }
 308              		.loc 1 139 0
 309 000e BD46     		mov	sp, r7
 310              		@ sp needed
 311 0010 80BD     		pop	{r7, pc}
 312              	.L15:
 313 0012 C046     		.align	2
 314              	.L14:
 315 0014 00000000 		.word	data_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 9


 316              		.cfi_endproc
 317              	.LFE38:
 318              		.size	fill_data_array, .-fill_data_array
 319              		.comm	wristTilt_state,1,1
 320              		.section	.text.wristTilt,"ax",%progbits
 321              		.align	2
 322              		.global	wristTilt
 323              		.code	16
 324              		.thumb_func
 325              		.type	wristTilt, %function
 326              	wristTilt:
 327              	.LFB39:
 140:.\main.c      **** 
 141:.\main.c      **** 
 142:.\main.c      **** 
 143:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 144:.\main.c      **** //control the tilting motion of the wrist
 145:.\main.c      **** void wristTilt()
 146:.\main.c      **** {
 328              		.loc 1 146 0
 329              		.cfi_startproc
 330 0000 80B5     		push	{r7, lr}
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 147:.\main.c      ****     // Overview
 148:.\main.c      ****     //take instruction from data_array
 149:.\main.c      ****     //smooth input
 150:.\main.c      ****     //actuate the tilting using UART
 151:.\main.c      ****     //get feedback
 152:.\main.c      **** 
 153:.\main.c      ****     //-------------------------- 
 154:.\main.c      ****     // Dynamixel Servo specific
 155:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 156:.\main.c      ****     // TODO: Set the desired position
 157:.\main.c      **** 
 158:.\main.c      ****     //--------------------------
 159:.\main.c      ****     // State machine
 160:.\main.c      ****     
 161:.\main.c      ****         // Action
 162:.\main.c      ****     switch(wristTilt_state)
 336              		.loc 1 162 0
 337 0004 0F4B     		ldr	r3, .L32
 338 0006 1B78     		ldrb	r3, [r3]
 339 0008 012B     		cmp	r3, #1
 340 000a 06D0     		beq	.L29
 341 000c 07DC     		bgt	.L30
 342 000e 002B     		cmp	r3, #0
 343 0010 06D1     		bne	.L17
 163:.\main.c      ****     {
 164:.\main.c      ****         case tilt_init:
 165:.\main.c      ****             wristTilt_state = tilt_start;
 344              		.loc 1 165 0
 345 0012 0C4B     		ldr	r3, .L32
 346 0014 0122     		mov	r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 10


 347 0016 1A70     		strb	r2, [r3]
 166:.\main.c      ****             break;
 348              		.loc 1 166 0
 349 0018 02E0     		b	.L17
 350              	.L29:
 167:.\main.c      ****         case tilt_start:
 168:.\main.c      ****             // Set the torque - this is a one time thing
 169:.\main.c      ****             // Set the speed - I think this is a one time thing
 170:.\main.c      ****             break;
 351              		.loc 1 170 0
 352 001a C046     		mov	r8, r8
 353 001c 00E0     		b	.L17
 354              	.L30:
 171:.\main.c      ****         case tilt_control:
 172:.\main.c      ****             break;
 355              		.loc 1 172 0
 356 001e C046     		mov	r8, r8
 357              	.L17:
 173:.\main.c      ****         case tilt_feedback:
 174:.\main.c      ****             break;
 175:.\main.c      ****     }
 176:.\main.c      ****         // Transistion
 177:.\main.c      ****     switch(wristTilt_state)
 358              		.loc 1 177 0
 359 0020 084B     		ldr	r3, .L32
 360 0022 1B78     		ldrb	r3, [r3]
 361 0024 012B     		cmp	r3, #1
 362 0026 06D0     		beq	.L24
 363 0028 09DC     		bgt	.L31
 364 002a 002B     		cmp	r3, #0
 365 002c 08D1     		bne	.L16
 178:.\main.c      ****     {
 179:.\main.c      ****         case tilt_init:
 180:.\main.c      ****             wristTilt_state = tilt_start;
 366              		.loc 1 180 0
 367 002e 054B     		ldr	r3, .L32
 368 0030 0122     		mov	r2, #1
 369 0032 1A70     		strb	r2, [r3]
 181:.\main.c      ****             break;
 370              		.loc 1 181 0
 371 0034 04E0     		b	.L16
 372              	.L24:
 182:.\main.c      ****         case tilt_start:
 183:.\main.c      ****             wristTilt_state = tilt_control;
 373              		.loc 1 183 0
 374 0036 034B     		ldr	r3, .L32
 375 0038 0222     		mov	r2, #2
 376 003a 1A70     		strb	r2, [r3]
 184:.\main.c      ****             break;
 377              		.loc 1 184 0
 378 003c 00E0     		b	.L16
 379              	.L31:
 185:.\main.c      ****         case tilt_control:
 186:.\main.c      ****             break;
 380              		.loc 1 186 0
 381 003e C046     		mov	r8, r8
 382              	.L16:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 11


 187:.\main.c      ****         case tilt_feedback:
 188:.\main.c      ****             break;
 189:.\main.c      ****     }
 190:.\main.c      **** }
 383              		.loc 1 190 0
 384 0040 BD46     		mov	sp, r7
 385              		@ sp needed
 386 0042 80BD     		pop	{r7, pc}
 387              	.L33:
 388              		.align	2
 389              	.L32:
 390 0044 00000000 		.word	wristTilt_state
 391              		.cfi_endproc
 392              	.LFE39:
 393              		.size	wristTilt, .-wristTilt
 394              		.comm	wristRotate_state,1,1
 395              		.section	.text.wristRotate,"ax",%progbits
 396              		.align	2
 397              		.global	wristRotate
 398              		.code	16
 399              		.thumb_func
 400              		.type	wristRotate, %function
 401              	wristRotate:
 402              	.LFB40:
 191:.\main.c      **** 
 192:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 193:.\main.c      **** //control the rotating motion of the wrist
 194:.\main.c      **** void wristRotate()
 195:.\main.c      **** {
 403              		.loc 1 195 0
 404              		.cfi_startproc
 405 0000 80B5     		push	{r7, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 00AF     		add	r7, sp, #0
 410              		.cfi_def_cfa_register 7
 196:.\main.c      ****     //Overview
 197:.\main.c      ****     //take instruction from data_array
 198:.\main.c      ****     //smooth input
 199:.\main.c      ****     //actuate the tilting using UART
 200:.\main.c      ****     //get feedback
 201:.\main.c      **** 
 202:.\main.c      ****     //-------------------------- 
 203:.\main.c      ****     // Dynamixel Servo specific
 204:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 205:.\main.c      ****     // TODO: Set the desired position
 206:.\main.c      **** 
 207:.\main.c      ****     //--------------------------
 208:.\main.c      ****     // State machine
 209:.\main.c      ****     
 210:.\main.c      ****         // Action
 211:.\main.c      ****     switch(wristRotate_state)
 411              		.loc 1 211 0
 412 0004 0F4B     		ldr	r3, .L50
 413 0006 1B78     		ldrb	r3, [r3]
 414 0008 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 12


 415 000a 06D0     		beq	.L47
 416 000c 07DC     		bgt	.L48
 417 000e 002B     		cmp	r3, #0
 418 0010 06D1     		bne	.L35
 212:.\main.c      ****     {
 213:.\main.c      ****         case rotate_init:
 214:.\main.c      ****             wristRotate_state = rotate_start;
 419              		.loc 1 214 0
 420 0012 0C4B     		ldr	r3, .L50
 421 0014 0122     		mov	r2, #1
 422 0016 1A70     		strb	r2, [r3]
 215:.\main.c      ****             break;
 423              		.loc 1 215 0
 424 0018 02E0     		b	.L35
 425              	.L47:
 216:.\main.c      ****         case rotate_start:
 217:.\main.c      ****             // Set the torque - this is a one time thing
 218:.\main.c      ****             // Set the speed - I think this is a one time thing
 219:.\main.c      ****             break;
 426              		.loc 1 219 0
 427 001a C046     		mov	r8, r8
 428 001c 00E0     		b	.L35
 429              	.L48:
 220:.\main.c      ****         case rotate_control:
 221:.\main.c      ****             break;
 430              		.loc 1 221 0
 431 001e C046     		mov	r8, r8
 432              	.L35:
 222:.\main.c      ****         case rotate_feedback:
 223:.\main.c      ****             break;
 224:.\main.c      ****     }
 225:.\main.c      ****         // Transistion
 226:.\main.c      ****     switch(wristRotate_state)
 433              		.loc 1 226 0
 434 0020 084B     		ldr	r3, .L50
 435 0022 1B78     		ldrb	r3, [r3]
 436 0024 012B     		cmp	r3, #1
 437 0026 06D0     		beq	.L42
 438 0028 09DC     		bgt	.L49
 439 002a 002B     		cmp	r3, #0
 440 002c 08D1     		bne	.L34
 227:.\main.c      ****     {
 228:.\main.c      ****         case rotate_init:
 229:.\main.c      ****             wristRotate_state = rotate_start;
 441              		.loc 1 229 0
 442 002e 054B     		ldr	r3, .L50
 443 0030 0122     		mov	r2, #1
 444 0032 1A70     		strb	r2, [r3]
 230:.\main.c      ****             break;
 445              		.loc 1 230 0
 446 0034 04E0     		b	.L34
 447              	.L42:
 231:.\main.c      ****         case rotate_start:
 232:.\main.c      ****             wristRotate_state = rotate_control;
 448              		.loc 1 232 0
 449 0036 034B     		ldr	r3, .L50
 450 0038 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 13


 451 003a 1A70     		strb	r2, [r3]
 233:.\main.c      ****             break;
 452              		.loc 1 233 0
 453 003c 00E0     		b	.L34
 454              	.L49:
 234:.\main.c      ****         case rotate_control:
 235:.\main.c      ****             break;
 455              		.loc 1 235 0
 456 003e C046     		mov	r8, r8
 457              	.L34:
 236:.\main.c      ****         case rotate_feedback:
 237:.\main.c      ****             break;
 238:.\main.c      ****     }
 239:.\main.c      **** }
 458              		.loc 1 239 0
 459 0040 BD46     		mov	sp, r7
 460              		@ sp needed
 461 0042 80BD     		pop	{r7, pc}
 462              	.L51:
 463              		.align	2
 464              	.L50:
 465 0044 00000000 		.word	wristRotate_state
 466              		.cfi_endproc
 467              	.LFE40:
 468              		.size	wristRotate, .-wristRotate
 469              		.section	.text.send_feedback,"ax",%progbits
 470              		.align	2
 471              		.global	send_feedback
 472              		.code	16
 473              		.thumb_func
 474              		.type	send_feedback, %function
 475              	send_feedback:
 476              	.LFB41:
 240:.\main.c      **** 
 241:.\main.c      **** void send_feedback()
 242:.\main.c      **** {
 477              		.loc 1 242 0
 478              		.cfi_startproc
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 243:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 244:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 245:.\main.c      ****     //TODO define system state
 246:.\main.c      ****     //send packet via serial to wiznet
 247:.\main.c      **** }
 485              		.loc 1 247 0
 486 0004 BD46     		mov	sp, r7
 487              		@ sp needed
 488 0006 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE41:
 491              		.size	send_feedback, .-send_feedback
 492              		.global	__aeabi_uidiv
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 14


 493              		.section	.text.average,"ax",%progbits
 494              		.align	2
 495              		.global	average
 496              		.code	16
 497              		.thumb_func
 498              		.type	average, %function
 499              	average:
 500              	.LFB42:
 248:.\main.c      **** 
 249:.\main.c      **** 
 250:.\main.c      **** //Average function to be used in smoothing our input
 251:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 252:.\main.c      **** {
 501              		.loc 1 252 0
 502              		.cfi_startproc
 503 0000 80B5     		push	{r7, lr}
 504              		.cfi_def_cfa_offset 8
 505              		.cfi_offset 7, -8
 506              		.cfi_offset 14, -4
 507 0002 86B0     		sub	sp, sp, #24
 508              		.cfi_def_cfa_offset 32
 509 0004 00AF     		add	r7, sp, #0
 510              		.cfi_def_cfa_register 7
 511 0006 7860     		str	r0, [r7, #4]
 512 0008 0A1C     		mov	r2, r1
 513 000a FB1C     		add	r3, r7, #3
 514 000c 1A70     		strb	r2, [r3]
 253:.\main.c      ****     uint8 i;
 254:.\main.c      ****     uint32 sum = 0;
 515              		.loc 1 254 0
 516 000e 0023     		mov	r3, #0
 517 0010 3B61     		str	r3, [r7, #16]
 255:.\main.c      ****     uint16 avg = 0;
 518              		.loc 1 255 0
 519 0012 3B1C     		mov	r3, r7
 520 0014 0E33     		add	r3, r3, #14
 521 0016 0022     		mov	r2, #0
 522 0018 1A80     		strh	r2, [r3]
 256:.\main.c      ****     
 257:.\main.c      ****     for(i = 0; i < num_items; i++)
 523              		.loc 1 257 0
 524 001a 3B1C     		mov	r3, r7
 525 001c 1733     		add	r3, r3, #23
 526 001e 0022     		mov	r2, #0
 527 0020 1A70     		strb	r2, [r3]
 528 0022 10E0     		b	.L54
 529              	.L55:
 258:.\main.c      ****     {
 259:.\main.c      ****         sum += array[i];
 530              		.loc 1 259 0 discriminator 2
 531 0024 3B1C     		mov	r3, r7
 532 0026 1733     		add	r3, r3, #23
 533 0028 1B78     		ldrb	r3, [r3]
 534 002a 5B00     		lsl	r3, r3, #1
 535 002c 7A68     		ldr	r2, [r7, #4]
 536 002e D318     		add	r3, r2, r3
 537 0030 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 15


 538 0032 3A69     		ldr	r2, [r7, #16]
 539 0034 D318     		add	r3, r2, r3
 540 0036 3B61     		str	r3, [r7, #16]
 257:.\main.c      ****     for(i = 0; i < num_items; i++)
 541              		.loc 1 257 0 discriminator 2
 542 0038 3B1C     		mov	r3, r7
 543 003a 1733     		add	r3, r3, #23
 544 003c 1A78     		ldrb	r2, [r3]
 545 003e 3B1C     		mov	r3, r7
 546 0040 1733     		add	r3, r3, #23
 547 0042 0132     		add	r2, r2, #1
 548 0044 1A70     		strb	r2, [r3]
 549              	.L54:
 257:.\main.c      ****     for(i = 0; i < num_items; i++)
 550              		.loc 1 257 0 is_stmt 0 discriminator 1
 551 0046 3A1C     		mov	r2, r7
 552 0048 1732     		add	r2, r2, #23
 553 004a FB1C     		add	r3, r7, #3
 554 004c 1278     		ldrb	r2, [r2]
 555 004e 1B78     		ldrb	r3, [r3]
 556 0050 9A42     		cmp	r2, r3
 557 0052 E7D3     		bcc	.L55
 260:.\main.c      ****     }
 261:.\main.c      ****     
 262:.\main.c      ****     avg = sum/num_items;
 558              		.loc 1 262 0 is_stmt 1
 559 0054 FB1C     		add	r3, r7, #3
 560 0056 1B78     		ldrb	r3, [r3]
 561 0058 3869     		ldr	r0, [r7, #16]
 562 005a 191C     		mov	r1, r3
 563 005c FFF7FEFF 		bl	__aeabi_uidiv
 564 0060 031C     		mov	r3, r0
 565 0062 1A1C     		mov	r2, r3
 566 0064 3B1C     		mov	r3, r7
 567 0066 0E33     		add	r3, r3, #14
 568 0068 1A80     		strh	r2, [r3]
 263:.\main.c      ****     
 264:.\main.c      ****     return avg;
 569              		.loc 1 264 0
 570 006a 3B1C     		mov	r3, r7
 571 006c 0E33     		add	r3, r3, #14
 572 006e 1B88     		ldrh	r3, [r3]
 265:.\main.c      **** }
 573              		.loc 1 265 0
 574 0070 181C     		mov	r0, r3
 575 0072 BD46     		mov	sp, r7
 576 0074 06B0     		add	sp, sp, #24
 577              		@ sp needed
 578 0076 80BD     		pop	{r7, pc}
 579              		.cfi_endproc
 580              	.LFE42:
 581              		.size	average, .-average
 582              		.comm	elbow_state,1,1
 583              		.section	.rodata
 584              		.align	2
 585              	.LC8:
 586 0000 0D0A00   		.ascii	"\015\012\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 16


 587 0003 00       		.section	.text.elbow,"ax",%progbits
 588              		.align	2
 589              		.global	elbow
 590              		.code	16
 591              		.thumb_func
 592              		.type	elbow, %function
 593              	elbow:
 594              	.LFB43:
 266:.\main.c      **** 
 267:.\main.c      **** 
 268:.\main.c      **** //control the elbow
 269:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 270:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 271:.\main.c      **** void elbow()
 272:.\main.c      **** { 
 595              		.loc 1 272 0
 596              		.cfi_startproc
 597 0000 90B5     		push	{r4, r7, lr}
 598              		.cfi_def_cfa_offset 12
 599              		.cfi_offset 4, -12
 600              		.cfi_offset 7, -8
 601              		.cfi_offset 14, -4
 602 0002 89B0     		sub	sp, sp, #36
 603              		.cfi_def_cfa_offset 48
 604 0004 00AF     		add	r7, sp, #0
 605              		.cfi_def_cfa_register 7
 273:.\main.c      ****     //take instruction from data_array
 274:.\main.c      ****     //smooth input
 275:.\main.c      ****     //actuate the elbow using PWM
 276:.\main.c      ****     //get feedback
 277:.\main.c      ****     uint8 i;
 278:.\main.c      ****     uint16 avg;
 279:.\main.c      ****     uint16 command;
 280:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 606              		.loc 1 280 0
 607 0006 3C1C     		mov	r4, r7
 608 0008 1C34     		add	r4, r4, #28
 609 000a 0120     		mov	r0, #1
 610 000c FFF7FEFF 		bl	potFeedback
 611 0010 031C     		mov	r3, r0
 612 0012 2380     		strh	r3, [r4]
 281:.\main.c      ****     
 282:.\main.c      ****     switch(elbow_state){ //actions
 613              		.loc 1 282 0
 614 0014 8D4B     		ldr	r3, .L93
 615 0016 1B78     		ldrb	r3, [r3]
 616 0018 012B     		cmp	r3, #1
 617 001a 07D0     		beq	.L59
 618 001c 00DC     		bgt	.LCB514
 619 001e E3E0     		b	.L92	@long jump
 620              	.LCB514:
 621 0020 022B     		cmp	r3, #2
 622 0022 1FD0     		beq	.L62
 623 0024 032B     		cmp	r3, #3
 624 0026 00D1     		bne	.LCB518
 625 0028 CDE0     		b	.L63	@long jump
 626              	.LCB518:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 17


 627 002a DEE0     		b	.L58
 628              	.L59:
 629              	.LBB2:
 283:.\main.c      ****         case elbw_start:
 284:.\main.c      ****             break;
 285:.\main.c      **** 
 286:.\main.c      ****         case elbw_init:
 287:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 630              		.loc 1 287 0
 631 002c 3B1C     		mov	r3, r7
 632 002e 1F33     		add	r3, r3, #31
 633 0030 0022     		mov	r2, #0
 634 0032 1A70     		strb	r2, [r3]
 635 0034 0DE0     		b	.L65
 636              	.L66:
 288:.\main.c      ****             {
 289:.\main.c      ****                 elbow_array[i] = 1500;
 637              		.loc 1 289 0 discriminator 2
 638 0036 3B1C     		mov	r3, r7
 639 0038 1F33     		add	r3, r3, #31
 640 003a 1A78     		ldrb	r2, [r3]
 641 003c 844B     		ldr	r3, .L93+4
 642 003e 5200     		lsl	r2, r2, #1
 643 0040 8449     		ldr	r1, .L93+8
 644 0042 D152     		strh	r1, [r2, r3]
 287:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 645              		.loc 1 287 0 discriminator 2
 646 0044 3B1C     		mov	r3, r7
 647 0046 1F33     		add	r3, r3, #31
 648 0048 1A78     		ldrb	r2, [r3]
 649 004a 3B1C     		mov	r3, r7
 650 004c 1F33     		add	r3, r3, #31
 651 004e 0132     		add	r2, r2, #1
 652 0050 1A70     		strb	r2, [r3]
 653              	.L65:
 287:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 654              		.loc 1 287 0 is_stmt 0 discriminator 1
 655 0052 3B1C     		mov	r3, r7
 656 0054 1F33     		add	r3, r3, #31
 657 0056 1B78     		ldrb	r3, [r3]
 658 0058 132B     		cmp	r3, #19
 659 005a ECD9     		bls	.L66
 290:.\main.c      ****             }
 291:.\main.c      ****             elbw_arr_cspot = 0;
 660              		.loc 1 291 0 is_stmt 1
 661 005c 7E4B     		ldr	r3, .L93+12
 662 005e 0022     		mov	r2, #0
 663 0060 1A70     		strb	r2, [r3]
 292:.\main.c      ****             break;
 664              		.loc 1 292 0
 665 0062 C2E0     		b	.L58
 666              	.L62:
 293:.\main.c      **** 
 294:.\main.c      ****         case elbw_execute:
 295:.\main.c      ****             command = (((data_array[ELBW_BYTE_1] << 8) | data_array[ELBW_BYTE_2])/2) + 1500;
 667              		.loc 1 295 0
 668 0064 7D4B     		ldr	r3, .L93+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 18


 669 0066 1B7A     		ldrb	r3, [r3, #8]
 670 0068 1A02     		lsl	r2, r3, #8
 671 006a 7C4B     		ldr	r3, .L93+16
 672 006c 5B7A     		ldrb	r3, [r3, #9]
 673 006e 1343     		orr	r3, r2
 674 0070 00D5     		bpl	.L67
 675 0072 0133     		add	r3, r3, #1
 676              	.L67:
 677 0074 5B10     		asr	r3, r3, #1
 678 0076 9AB2     		uxth	r2, r3
 679 0078 3B1C     		mov	r3, r7
 680 007a 1A33     		add	r3, r3, #26
 681 007c 7549     		ldr	r1, .L93+8
 682 007e 5218     		add	r2, r2, r1
 683 0080 1A80     		strh	r2, [r3]
 296:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 684              		.loc 1 296 0
 685 0082 754B     		ldr	r3, .L93+12
 686 0084 1B78     		ldrb	r3, [r3]
 687 0086 1A1C     		mov	r2, r3
 688 0088 714B     		ldr	r3, .L93+4
 689 008a 5200     		lsl	r2, r2, #1
 690 008c 391C     		mov	r1, r7
 691 008e 1A31     		add	r1, r1, #26
 692 0090 0988     		ldrh	r1, [r1]
 693 0092 D152     		strh	r1, [r2, r3]
 297:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 694              		.loc 1 297 0
 695 0094 704B     		ldr	r3, .L93+12
 696 0096 1B78     		ldrb	r3, [r3]
 697 0098 122B     		cmp	r3, #18
 698 009a 06D8     		bhi	.L68
 298:.\main.c      ****             {
 299:.\main.c      ****                 elbw_arr_cspot++;
 699              		.loc 1 299 0
 700 009c 6E4B     		ldr	r3, .L93+12
 701 009e 1B78     		ldrb	r3, [r3]
 702 00a0 0133     		add	r3, r3, #1
 703 00a2 DAB2     		uxtb	r2, r3
 704 00a4 6C4B     		ldr	r3, .L93+12
 705 00a6 1A70     		strb	r2, [r3]
 706 00a8 02E0     		b	.L69
 707              	.L68:
 300:.\main.c      ****             }
 301:.\main.c      ****             else
 302:.\main.c      ****             {
 303:.\main.c      ****                 elbw_arr_cspot = 0;
 708              		.loc 1 303 0
 709 00aa 6B4B     		ldr	r3, .L93+12
 710 00ac 0022     		mov	r2, #0
 711 00ae 1A70     		strb	r2, [r3]
 712              	.L69:
 304:.\main.c      ****             }
 305:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 713              		.loc 1 305 0
 714 00b0 3C1C     		mov	r4, r7
 715 00b2 1834     		add	r4, r4, #24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 19


 716 00b4 664B     		ldr	r3, .L93+4
 717 00b6 181C     		mov	r0, r3
 718 00b8 1421     		mov	r1, #20
 719 00ba FFF7FEFF 		bl	average
 720 00be 031C     		mov	r3, r0
 721 00c0 2380     		strh	r3, [r4]
 306:.\main.c      ****            
 307:.\main.c      ****             //uint16 feedback = potFeedback(ELBOW_POT);
 308:.\main.c      ****             //TODO make sure reading from correct pots
 309:.\main.c      ****             char buffer[20];
 310:.\main.c      ****             
 311:.\main.c      ****             itoa(avg, buffer);
 722              		.loc 1 311 0
 723 00c2 3B1C     		mov	r3, r7
 724 00c4 1833     		add	r3, r3, #24
 725 00c6 1A88     		ldrh	r2, [r3]
 726 00c8 3B1D     		add	r3, r7, #4
 727 00ca 101C     		mov	r0, r2
 728 00cc 191C     		mov	r1, r3
 729 00ce FFF7FEFF 		bl	itoa
 312:.\main.c      ****             
 313:.\main.c      ****             UART_1_UartPutString(buffer);      
 730              		.loc 1 313 0
 731 00d2 3B1D     		add	r3, r7, #4
 732 00d4 181C     		mov	r0, r3
 733 00d6 FFF7FEFF 		bl	UART_1_UartPutString
 314:.\main.c      ****             UART_1_UartPutString("\r\n");      
 734              		.loc 1 314 0
 735 00da 614B     		ldr	r3, .L93+20
 736 00dc 181C     		mov	r0, r3
 737 00de FFF7FEFF 		bl	UART_1_UartPutString
 315:.\main.c      ****             
 316:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 738              		.loc 1 316 0
 739 00e2 3B1C     		mov	r3, r7
 740 00e4 1C33     		add	r3, r3, #28
 741 00e6 1B88     		ldrh	r3, [r3]
 742 00e8 642B     		cmp	r3, #100
 743 00ea 23D8     		bhi	.L70
 317:.\main.c      ****             {
 318:.\main.c      ****                 if (avg < 1500)
 744              		.loc 1 318 0
 745 00ec 3B1C     		mov	r3, r7
 746 00ee 1833     		add	r3, r3, #24
 747 00f0 1A88     		ldrh	r2, [r3]
 748 00f2 5C4B     		ldr	r3, .L93+24
 749 00f4 9A42     		cmp	r2, r3
 750 00f6 04D8     		bhi	.L71
 319:.\main.c      ****                 {
 320:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 751              		.loc 1 320 0
 752 00f8 564B     		ldr	r3, .L93+8
 753 00fa 181C     		mov	r0, r3
 754 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 755 0100 5AE0     		b	.L74
 756              	.L71:
 321:.\main.c      ****                 }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 20


 322:.\main.c      ****                 else
 323:.\main.c      ****                 {
 324:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 757              		.loc 1 324 0
 758 0102 3B1C     		mov	r3, r7
 759 0104 1833     		add	r3, r3, #24
 760 0106 1A88     		ldrh	r2, [r3]
 761 0108 FA23     		mov	r3, #250
 762 010a DB00     		lsl	r3, r3, #3
 763 010c 9A42     		cmp	r2, r3
 764 010e 0CD8     		bhi	.L73
 765              		.loc 1 324 0 is_stmt 0 discriminator 1
 766 0110 3B1C     		mov	r3, r7
 767 0112 1833     		add	r3, r3, #24
 768 0114 1A88     		ldrh	r2, [r3]
 769 0116 544B     		ldr	r3, .L93+28
 770 0118 9A42     		cmp	r2, r3
 771 011a 06D9     		bls	.L73
 325:.\main.c      ****                     {
 326:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 772              		.loc 1 326 0 is_stmt 1
 773 011c 3B1C     		mov	r3, r7
 774 011e 1833     		add	r3, r3, #24
 775 0120 1B88     		ldrh	r3, [r3]
 776 0122 181C     		mov	r0, r3
 777 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 778 0128 46E0     		b	.L74
 779              	.L73:
 327:.\main.c      ****                     }
 328:.\main.c      ****                     else
 329:.\main.c      ****                     {
 330:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 780              		.loc 1 330 0
 781 012a 4A4B     		ldr	r3, .L93+8
 782 012c 181C     		mov	r0, r3
 783 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 784 0132 41E0     		b	.L74
 785              	.L70:
 331:.\main.c      ****                     }
 332:.\main.c      ****                 }
 333:.\main.c      ****             }
 334:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 786              		.loc 1 334 0
 787 0134 3B1C     		mov	r3, r7
 788 0136 1C33     		add	r3, r3, #28
 789 0138 1A88     		ldrh	r2, [r3]
 790 013a 4B4B     		ldr	r3, .L93+28
 791 013c 9A42     		cmp	r2, r3
 792 013e 23D9     		bls	.L75
 335:.\main.c      ****             {
 336:.\main.c      ****                 if(avg > 1500)
 793              		.loc 1 336 0
 794 0140 3B1C     		mov	r3, r7
 795 0142 1833     		add	r3, r3, #24
 796 0144 1A88     		ldrh	r2, [r3]
 797 0146 434B     		ldr	r3, .L93+8
 798 0148 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 21


 799 014a 04D9     		bls	.L76
 337:.\main.c      ****                 {
 338:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 800              		.loc 1 338 0
 801 014c 414B     		ldr	r3, .L93+8
 802 014e 181C     		mov	r0, r3
 803 0150 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 804 0154 30E0     		b	.L74
 805              	.L76:
 339:.\main.c      ****                 }
 340:.\main.c      ****                 else
 341:.\main.c      ****                 {
 342:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 806              		.loc 1 342 0
 807 0156 3B1C     		mov	r3, r7
 808 0158 1833     		add	r3, r3, #24
 809 015a 1A88     		ldrh	r2, [r3]
 810 015c FA23     		mov	r3, #250
 811 015e DB00     		lsl	r3, r3, #3
 812 0160 9A42     		cmp	r2, r3
 813 0162 0CD8     		bhi	.L78
 814              		.loc 1 342 0 is_stmt 0 discriminator 1
 815 0164 3B1C     		mov	r3, r7
 816 0166 1833     		add	r3, r3, #24
 817 0168 1A88     		ldrh	r2, [r3]
 818 016a 3F4B     		ldr	r3, .L93+28
 819 016c 9A42     		cmp	r2, r3
 820 016e 06D9     		bls	.L78
 343:.\main.c      ****                     {
 344:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 821              		.loc 1 344 0 is_stmt 1
 822 0170 3B1C     		mov	r3, r7
 823 0172 1833     		add	r3, r3, #24
 824 0174 1B88     		ldrh	r3, [r3]
 825 0176 181C     		mov	r0, r3
 826 0178 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 827 017c 1CE0     		b	.L74
 828              	.L78:
 345:.\main.c      ****                     }
 346:.\main.c      ****                     else
 347:.\main.c      ****                     {
 348:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 829              		.loc 1 348 0
 830 017e 354B     		ldr	r3, .L93+8
 831 0180 181C     		mov	r0, r3
 832 0182 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 833 0186 17E0     		b	.L74
 834              	.L75:
 349:.\main.c      ****                     }
 350:.\main.c      ****                 }
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 835              		.loc 1 354 0
 836 0188 3B1C     		mov	r3, r7
 837 018a 1833     		add	r3, r3, #24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 22


 838 018c 1A88     		ldrh	r2, [r3]
 839 018e FA23     		mov	r3, #250
 840 0190 DB00     		lsl	r3, r3, #3
 841 0192 9A42     		cmp	r2, r3
 842 0194 0CD8     		bhi	.L79
 843              		.loc 1 354 0 is_stmt 0 discriminator 1
 844 0196 3B1C     		mov	r3, r7
 845 0198 1833     		add	r3, r3, #24
 846 019a 1A88     		ldrh	r2, [r3]
 847 019c 324B     		ldr	r3, .L93+28
 848 019e 9A42     		cmp	r2, r3
 849 01a0 06D9     		bls	.L79
 355:.\main.c      ****                 {
 356:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 850              		.loc 1 356 0 is_stmt 1
 851 01a2 3B1C     		mov	r3, r7
 852 01a4 1833     		add	r3, r3, #24
 853 01a6 1B88     		ldrh	r3, [r3]
 854 01a8 181C     		mov	r0, r3
 855 01aa FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 856 01ae 03E0     		b	.L74
 857              	.L79:
 357:.\main.c      ****                 }
 358:.\main.c      ****                 else
 359:.\main.c      ****                 {
 360:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 858              		.loc 1 360 0
 859 01b0 284B     		ldr	r3, .L93+8
 860 01b2 181C     		mov	r0, r3
 861 01b4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 862              	.L74:
 361:.\main.c      ****                 }
 362:.\main.c      ****             }
 363:.\main.c      ****             
 364:.\main.c      ****             fin_exec++;
 863              		.loc 1 364 0
 864 01b8 2C4B     		ldr	r3, .L93+32
 865 01ba 1B78     		ldrb	r3, [r3]
 866 01bc 0133     		add	r3, r3, #1
 867 01be DAB2     		uxtb	r2, r3
 868 01c0 2A4B     		ldr	r3, .L93+32
 869 01c2 1A70     		strb	r2, [r3]
 365:.\main.c      ****             break;
 870              		.loc 1 365 0
 871 01c4 11E0     		b	.L58
 872              	.L63:
 366:.\main.c      ****             
 367:.\main.c      ****         case elbw_wait:
 368:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 873              		.loc 1 368 0
 874 01c6 3B1C     		mov	r3, r7
 875 01c8 1C33     		add	r3, r3, #28
 876 01ca 1B88     		ldrh	r3, [r3]
 877 01cc 642B     		cmp	r3, #100
 878 01ce 05D9     		bls	.L80
 879              		.loc 1 368 0 is_stmt 0 discriminator 1
 880 01d0 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 23


 881 01d2 1C33     		add	r3, r3, #28
 882 01d4 1A88     		ldrh	r2, [r3]
 883 01d6 244B     		ldr	r3, .L93+28
 884 01d8 9A42     		cmp	r2, r3
 885 01da 03D9     		bls	.L81
 886              	.L80:
 369:.\main.c      ****             {
 370:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 887              		.loc 1 370 0 is_stmt 1
 888 01dc 1D4B     		ldr	r3, .L93+8
 889 01de 181C     		mov	r0, r3
 890 01e0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 891              	.L81:
 371:.\main.c      ****             }
 372:.\main.c      ****             break;
 892              		.loc 1 372 0
 893 01e4 C046     		mov	r8, r8
 894 01e6 00E0     		b	.L58
 895              	.L92:
 284:.\main.c      ****             break;
 896              		.loc 1 284 0
 897 01e8 C046     		mov	r8, r8
 898              	.L58:
 899              	.LBE2:
 373:.\main.c      ****     }
 374:.\main.c      ****     
 375:.\main.c      ****     switch(elbow_state){ //transitions
 900              		.loc 1 375 0
 901 01ea 184B     		ldr	r3, .L93
 902 01ec 1B78     		ldrb	r3, [r3]
 903 01ee 012B     		cmp	r3, #1
 904 01f0 0CD0     		beq	.L83
 905 01f2 02DC     		bgt	.L84
 906 01f4 002B     		cmp	r3, #0
 907 01f6 05D0     		beq	.L85
 908 01f8 24E0     		b	.L57
 909              	.L84:
 910 01fa 022B     		cmp	r3, #2
 911 01fc 0AD0     		beq	.L86
 912 01fe 032B     		cmp	r3, #3
 913 0200 14D0     		beq	.L87
 914 0202 1FE0     		b	.L57
 915              	.L85:
 376:.\main.c      ****         case elbw_start:
 377:.\main.c      ****             elbow_state = elbw_init;
 916              		.loc 1 377 0
 917 0204 114B     		ldr	r3, .L93
 918 0206 0122     		mov	r2, #1
 919 0208 1A70     		strb	r2, [r3]
 378:.\main.c      ****             break;
 920              		.loc 1 378 0
 921 020a 1BE0     		b	.L57
 922              	.L83:
 379:.\main.c      ****         
 380:.\main.c      ****         case elbw_init:
 381:.\main.c      ****             elbow_state = elbw_wait;
 923              		.loc 1 381 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 24


 924 020c 0F4B     		ldr	r3, .L93
 925 020e 0322     		mov	r2, #3
 926 0210 1A70     		strb	r2, [r3]
 382:.\main.c      ****             break;
 927              		.loc 1 382 0
 928 0212 17E0     		b	.L57
 929              	.L86:
 383:.\main.c      ****         
 384:.\main.c      ****         case elbw_execute:
 385:.\main.c      ****             if(new_pack)
 930              		.loc 1 385 0
 931 0214 164B     		ldr	r3, .L93+36
 932 0216 1B78     		ldrb	r3, [r3]
 933 0218 002B     		cmp	r3, #0
 934 021a 03D0     		beq	.L88
 386:.\main.c      ****             {
 387:.\main.c      ****                 elbow_state = elbw_execute;
 935              		.loc 1 387 0
 936 021c 0B4B     		ldr	r3, .L93
 937 021e 0222     		mov	r2, #2
 938 0220 1A70     		strb	r2, [r3]
 388:.\main.c      ****             }
 389:.\main.c      ****             else
 390:.\main.c      ****             {
 391:.\main.c      ****                 elbow_state = elbw_wait;
 392:.\main.c      ****             }
 393:.\main.c      ****             break;
 939              		.loc 1 393 0
 940 0222 0FE0     		b	.L57
 941              	.L88:
 391:.\main.c      ****                 elbow_state = elbw_wait;
 942              		.loc 1 391 0
 943 0224 094B     		ldr	r3, .L93
 944 0226 0322     		mov	r2, #3
 945 0228 1A70     		strb	r2, [r3]
 946              		.loc 1 393 0
 947 022a 0BE0     		b	.L57
 948              	.L87:
 394:.\main.c      ****         
 395:.\main.c      ****         case elbw_wait:
 396:.\main.c      ****             if(new_pack)
 949              		.loc 1 396 0
 950 022c 104B     		ldr	r3, .L93+36
 951 022e 1B78     		ldrb	r3, [r3]
 952 0230 002B     		cmp	r3, #0
 953 0232 03D0     		beq	.L90
 397:.\main.c      ****             {
 398:.\main.c      ****                 elbow_state = elbw_execute;
 954              		.loc 1 398 0
 955 0234 054B     		ldr	r3, .L93
 956 0236 0222     		mov	r2, #2
 957 0238 1A70     		strb	r2, [r3]
 958 023a 02E0     		b	.L91
 959              	.L90:
 399:.\main.c      ****             }
 400:.\main.c      ****             else
 401:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 25


 402:.\main.c      ****                 elbow_state = elbw_wait; 
 960              		.loc 1 402 0
 961 023c 034B     		ldr	r3, .L93
 962 023e 0322     		mov	r2, #3
 963 0240 1A70     		strb	r2, [r3]
 964              	.L91:
 403:.\main.c      ****             }
 404:.\main.c      ****             break;
 965              		.loc 1 404 0
 966 0242 C046     		mov	r8, r8
 967              	.L57:
 405:.\main.c      ****     }    
 406:.\main.c      **** }
 968              		.loc 1 406 0
 969 0244 BD46     		mov	sp, r7
 970 0246 09B0     		add	sp, sp, #36
 971              		@ sp needed
 972 0248 90BD     		pop	{r4, r7, pc}
 973              	.L94:
 974 024a C046     		.align	2
 975              	.L93:
 976 024c 00000000 		.word	elbow_state
 977 0250 00000000 		.word	elbow_array
 978 0254 DC050000 		.word	1500
 979 0258 00000000 		.word	elbw_arr_cspot
 980 025c 00000000 		.word	data_array
 981 0260 00000000 		.word	.LC8
 982 0264 DB050000 		.word	1499
 983 0268 E7030000 		.word	999
 984 026c 00000000 		.word	fin_exec
 985 0270 00000000 		.word	new_pack
 986              		.cfi_endproc
 987              	.LFE43:
 988              		.size	elbow, .-elbow
 989              		.comm	shoulder_state,1,1
 990              		.section	.text.shoulder,"ax",%progbits
 991              		.align	2
 992              		.global	shoulder
 993              		.code	16
 994              		.thumb_func
 995              		.type	shoulder, %function
 996              	shoulder:
 997              	.LFB44:
 407:.\main.c      **** 
 408:.\main.c      **** //control the shoulder
 409:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 410:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 411:.\main.c      **** void shoulder()
 412:.\main.c      **** { 
 998              		.loc 1 412 0
 999              		.cfi_startproc
 1000 0000 90B5     		push	{r4, r7, lr}
 1001              		.cfi_def_cfa_offset 12
 1002              		.cfi_offset 4, -12
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 26


 1006              		.cfi_def_cfa_offset 24
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 413:.\main.c      ****     //take instruction from data_array
 414:.\main.c      ****     //smooth input
 415:.\main.c      ****     //actuate the shoulder using PWM
 416:.\main.c      ****     //get feedback
 417:.\main.c      ****     uint8 i;
 418:.\main.c      ****     uint16 avg;
 419:.\main.c      ****     uint16 command;
 420:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 1009              		.loc 1 420 0
 1010 0006 3C1D     		add	r4, r7, #4
 1011 0008 0020     		mov	r0, #0
 1012 000a FFF7FEFF 		bl	potFeedback
 1013 000e 031C     		mov	r3, r0
 1014 0010 2380     		strh	r3, [r4]
 421:.\main.c      ****     
 422:.\main.c      ****     switch(shoulder_state){ //actions
 1015              		.loc 1 422 0
 1016 0012 7A4B     		ldr	r3, .L130
 1017 0014 1B78     		ldrb	r3, [r3]
 1018 0016 012B     		cmp	r3, #1
 1019 0018 07D0     		beq	.L97
 1020 001a 00DC     		bgt	.LCB904
 1021 001c BCE0     		b	.L129	@long jump
 1022              	.LCB904:
 1023 001e 022B     		cmp	r3, #2
 1024 0020 1AD0     		beq	.L100
 1025 0022 032B     		cmp	r3, #3
 1026 0024 00D1     		bne	.LCB908
 1027 0026 A8E0     		b	.L101	@long jump
 1028              	.LCB908:
 1029 0028 B7E0     		b	.L96
 1030              	.L97:
 423:.\main.c      ****         case shldr_start:
 424:.\main.c      ****             break;
 425:.\main.c      **** 
 426:.\main.c      ****         case shldr_init:
 427:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1031              		.loc 1 427 0
 1032 002a FB1D     		add	r3, r7, #7
 1033 002c 0022     		mov	r2, #0
 1034 002e 1A70     		strb	r2, [r3]
 1035 0030 0AE0     		b	.L102
 1036              	.L103:
 428:.\main.c      ****             {
 429:.\main.c      ****                 shoulder_array[i] = 1500;
 1037              		.loc 1 429 0 discriminator 2
 1038 0032 FB1D     		add	r3, r7, #7
 1039 0034 1A78     		ldrb	r2, [r3]
 1040 0036 724B     		ldr	r3, .L130+4
 1041 0038 5200     		lsl	r2, r2, #1
 1042 003a 7249     		ldr	r1, .L130+8
 1043 003c D152     		strh	r1, [r2, r3]
 427:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1044              		.loc 1 427 0 discriminator 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 27


 1045 003e FB1D     		add	r3, r7, #7
 1046 0040 1A78     		ldrb	r2, [r3]
 1047 0042 FB1D     		add	r3, r7, #7
 1048 0044 0132     		add	r2, r2, #1
 1049 0046 1A70     		strb	r2, [r3]
 1050              	.L102:
 427:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1051              		.loc 1 427 0 is_stmt 0 discriminator 1
 1052 0048 FB1D     		add	r3, r7, #7
 1053 004a 1B78     		ldrb	r3, [r3]
 1054 004c 132B     		cmp	r3, #19
 1055 004e F0D9     		bls	.L103
 430:.\main.c      ****             }
 431:.\main.c      ****             shldr_arr_cspot = 0;
 1056              		.loc 1 431 0 is_stmt 1
 1057 0050 6D4B     		ldr	r3, .L130+12
 1058 0052 0022     		mov	r2, #0
 1059 0054 1A70     		strb	r2, [r3]
 432:.\main.c      ****             break;
 1060              		.loc 1 432 0
 1061 0056 A0E0     		b	.L96
 1062              	.L100:
 433:.\main.c      **** 
 434:.\main.c      ****         case shldr_execute:
 435:.\main.c      ****             command = (((data_array[SHLDR_BYTE_1] << 8) | data_array[SHLDR_BYTE_2])/2) + 1500;
 1063              		.loc 1 435 0
 1064 0058 6C4B     		ldr	r3, .L130+16
 1065 005a 9B79     		ldrb	r3, [r3, #6]
 1066 005c 1A02     		lsl	r2, r3, #8
 1067 005e 6B4B     		ldr	r3, .L130+16
 1068 0060 DB79     		ldrb	r3, [r3, #7]
 1069 0062 1343     		orr	r3, r2
 1070 0064 00D5     		bpl	.L104
 1071 0066 0133     		add	r3, r3, #1
 1072              	.L104:
 1073 0068 5B10     		asr	r3, r3, #1
 1074 006a 9AB2     		uxth	r2, r3
 1075 006c BB1C     		add	r3, r7, #2
 1076 006e 6549     		ldr	r1, .L130+8
 1077 0070 5218     		add	r2, r2, r1
 1078 0072 1A80     		strh	r2, [r3]
 436:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;
 1079              		.loc 1 436 0
 1080 0074 644B     		ldr	r3, .L130+12
 1081 0076 1B78     		ldrb	r3, [r3]
 1082 0078 1A1C     		mov	r2, r3
 1083 007a 614B     		ldr	r3, .L130+4
 1084 007c 5200     		lsl	r2, r2, #1
 1085 007e B91C     		add	r1, r7, #2
 1086 0080 0988     		ldrh	r1, [r1]
 1087 0082 D152     		strh	r1, [r2, r3]
 437:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 1088              		.loc 1 437 0
 1089 0084 604B     		ldr	r3, .L130+12
 1090 0086 1B78     		ldrb	r3, [r3]
 1091 0088 122B     		cmp	r3, #18
 1092 008a 06D8     		bhi	.L105
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 28


 438:.\main.c      ****             {
 439:.\main.c      ****                 shldr_arr_cspot++;
 1093              		.loc 1 439 0
 1094 008c 5E4B     		ldr	r3, .L130+12
 1095 008e 1B78     		ldrb	r3, [r3]
 1096 0090 0133     		add	r3, r3, #1
 1097 0092 DAB2     		uxtb	r2, r3
 1098 0094 5C4B     		ldr	r3, .L130+12
 1099 0096 1A70     		strb	r2, [r3]
 1100 0098 02E0     		b	.L106
 1101              	.L105:
 440:.\main.c      ****             }
 441:.\main.c      ****             else
 442:.\main.c      ****             {
 443:.\main.c      ****                 shldr_arr_cspot = 0;
 1102              		.loc 1 443 0
 1103 009a 5B4B     		ldr	r3, .L130+12
 1104 009c 0022     		mov	r2, #0
 1105 009e 1A70     		strb	r2, [r3]
 1106              	.L106:
 444:.\main.c      ****             }
 445:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 1107              		.loc 1 445 0
 1108 00a0 3C1C     		mov	r4, r7
 1109 00a2 574B     		ldr	r3, .L130+4
 1110 00a4 181C     		mov	r0, r3
 1111 00a6 1421     		mov	r1, #20
 1112 00a8 FFF7FEFF 		bl	average
 1113 00ac 031C     		mov	r3, r0
 1114 00ae 2380     		strh	r3, [r4]
 446:.\main.c      ****            
 447:.\main.c      ****             //uint16 feedback = potFeedback(SHOULDER_POT);
 448:.\main.c      ****             
 449:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 1115              		.loc 1 449 0
 1116 00b0 3B1D     		add	r3, r7, #4
 1117 00b2 1B88     		ldrh	r3, [r3]
 1118 00b4 002B     		cmp	r3, #0
 1119 00b6 1FD1     		bne	.L107
 450:.\main.c      ****             {
 451:.\main.c      ****                 if (avg < 1500)
 1120              		.loc 1 451 0
 1121 00b8 3B1C     		mov	r3, r7
 1122 00ba 1A88     		ldrh	r2, [r3]
 1123 00bc 544B     		ldr	r3, .L130+20
 1124 00be 9A42     		cmp	r2, r3
 1125 00c0 04D8     		bhi	.L108
 452:.\main.c      ****                 {
 453:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1126              		.loc 1 453 0
 1127 00c2 504B     		ldr	r3, .L130+8
 1128 00c4 181C     		mov	r0, r3
 1129 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1130 00ca 4FE0     		b	.L111
 1131              	.L108:
 454:.\main.c      ****                 }
 455:.\main.c      ****                 else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 29


 456:.\main.c      ****                 {
 457:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1132              		.loc 1 457 0
 1133 00cc 3B1C     		mov	r3, r7
 1134 00ce 1A88     		ldrh	r2, [r3]
 1135 00d0 FA23     		mov	r3, #250
 1136 00d2 DB00     		lsl	r3, r3, #3
 1137 00d4 9A42     		cmp	r2, r3
 1138 00d6 0AD8     		bhi	.L110
 1139              		.loc 1 457 0 is_stmt 0 discriminator 1
 1140 00d8 3B1C     		mov	r3, r7
 1141 00da 1A88     		ldrh	r2, [r3]
 1142 00dc 4D4B     		ldr	r3, .L130+24
 1143 00de 9A42     		cmp	r2, r3
 1144 00e0 05D9     		bls	.L110
 458:.\main.c      ****                     {
 459:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1145              		.loc 1 459 0 is_stmt 1
 1146 00e2 3B1C     		mov	r3, r7
 1147 00e4 1B88     		ldrh	r3, [r3]
 1148 00e6 181C     		mov	r0, r3
 1149 00e8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1150 00ec 3EE0     		b	.L111
 1151              	.L110:
 460:.\main.c      ****                     }
 461:.\main.c      ****                     else
 462:.\main.c      ****                     {
 463:.\main.c      ****                         //throw error
 464:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 1152              		.loc 1 464 0
 1153 00ee 454B     		ldr	r3, .L130+8
 1154 00f0 181C     		mov	r0, r3
 1155 00f2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1156 00f6 39E0     		b	.L111
 1157              	.L107:
 465:.\main.c      ****                     }
 466:.\main.c      ****                 }
 467:.\main.c      ****             }
 468:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 1158              		.loc 1 468 0
 1159 00f8 3B1D     		add	r3, r7, #4
 1160 00fa 1A88     		ldrh	r2, [r3]
 1161 00fc 464B     		ldr	r3, .L130+28
 1162 00fe 9A42     		cmp	r2, r3
 1163 0100 1FD9     		bls	.L112
 469:.\main.c      ****             {
 470:.\main.c      ****                 if(avg > 1500)
 1164              		.loc 1 470 0
 1165 0102 3B1C     		mov	r3, r7
 1166 0104 1A88     		ldrh	r2, [r3]
 1167 0106 3F4B     		ldr	r3, .L130+8
 1168 0108 9A42     		cmp	r2, r3
 1169 010a 04D9     		bls	.L113
 471:.\main.c      ****                 {
 472:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1170              		.loc 1 472 0
 1171 010c 3D4B     		ldr	r3, .L130+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 30


 1172 010e 181C     		mov	r0, r3
 1173 0110 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1174 0114 2AE0     		b	.L111
 1175              	.L113:
 473:.\main.c      ****                 }
 474:.\main.c      ****                 else
 475:.\main.c      ****                 {
 476:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1176              		.loc 1 476 0
 1177 0116 3B1C     		mov	r3, r7
 1178 0118 1A88     		ldrh	r2, [r3]
 1179 011a FA23     		mov	r3, #250
 1180 011c DB00     		lsl	r3, r3, #3
 1181 011e 9A42     		cmp	r2, r3
 1182 0120 0AD8     		bhi	.L115
 1183              		.loc 1 476 0 is_stmt 0 discriminator 1
 1184 0122 3B1C     		mov	r3, r7
 1185 0124 1A88     		ldrh	r2, [r3]
 1186 0126 3B4B     		ldr	r3, .L130+24
 1187 0128 9A42     		cmp	r2, r3
 1188 012a 05D9     		bls	.L115
 477:.\main.c      ****                     {
 478:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1189              		.loc 1 478 0 is_stmt 1
 1190 012c 3B1C     		mov	r3, r7
 1191 012e 1B88     		ldrh	r3, [r3]
 1192 0130 181C     		mov	r0, r3
 1193 0132 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1194 0136 19E0     		b	.L111
 1195              	.L115:
 479:.\main.c      ****                     }
 480:.\main.c      ****                     else
 481:.\main.c      ****                     {
 482:.\main.c      ****                         //throw error
 483:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 1196              		.loc 1 483 0
 1197 0138 324B     		ldr	r3, .L130+8
 1198 013a 181C     		mov	r0, r3
 1199 013c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1200 0140 14E0     		b	.L111
 1201              	.L112:
 484:.\main.c      ****                     }
 485:.\main.c      ****                 }
 486:.\main.c      ****             }
 487:.\main.c      ****             else
 488:.\main.c      ****             {
 489:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1202              		.loc 1 489 0
 1203 0142 3B1C     		mov	r3, r7
 1204 0144 1A88     		ldrh	r2, [r3]
 1205 0146 FA23     		mov	r3, #250
 1206 0148 DB00     		lsl	r3, r3, #3
 1207 014a 9A42     		cmp	r2, r3
 1208 014c 0AD8     		bhi	.L116
 1209              		.loc 1 489 0 is_stmt 0 discriminator 1
 1210 014e 3B1C     		mov	r3, r7
 1211 0150 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 31


 1212 0152 304B     		ldr	r3, .L130+24
 1213 0154 9A42     		cmp	r2, r3
 1214 0156 05D9     		bls	.L116
 490:.\main.c      ****                 {
 491:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 1215              		.loc 1 491 0 is_stmt 1
 1216 0158 3B1C     		mov	r3, r7
 1217 015a 1B88     		ldrh	r3, [r3]
 1218 015c 181C     		mov	r0, r3
 1219 015e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1220 0162 03E0     		b	.L111
 1221              	.L116:
 492:.\main.c      ****                 }
 493:.\main.c      ****                 else
 494:.\main.c      ****                 {
 495:.\main.c      ****                     //throw error
 496:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1222              		.loc 1 496 0
 1223 0164 274B     		ldr	r3, .L130+8
 1224 0166 181C     		mov	r0, r3
 1225 0168 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1226              	.L111:
 497:.\main.c      ****                 }
 498:.\main.c      ****             }
 499:.\main.c      ****             
 500:.\main.c      ****             fin_exec++;
 1227              		.loc 1 500 0
 1228 016c 2B4B     		ldr	r3, .L130+32
 1229 016e 1B78     		ldrb	r3, [r3]
 1230 0170 0133     		add	r3, r3, #1
 1231 0172 DAB2     		uxtb	r2, r3
 1232 0174 294B     		ldr	r3, .L130+32
 1233 0176 1A70     		strb	r2, [r3]
 501:.\main.c      ****             break;
 1234              		.loc 1 501 0
 1235 0178 0FE0     		b	.L96
 1236              	.L101:
 502:.\main.c      ****             
 503:.\main.c      ****         case shldr_wait:
 504:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 1237              		.loc 1 504 0
 1238 017a 3B1D     		add	r3, r7, #4
 1239 017c 1B88     		ldrh	r3, [r3]
 1240 017e 002B     		cmp	r3, #0
 1241 0180 04D0     		beq	.L117
 1242              		.loc 1 504 0 is_stmt 0 discriminator 1
 1243 0182 3B1D     		add	r3, r7, #4
 1244 0184 1A88     		ldrh	r2, [r3]
 1245 0186 244B     		ldr	r3, .L130+28
 1246 0188 9A42     		cmp	r2, r3
 1247 018a 04D9     		bls	.L118
 1248              	.L117:
 505:.\main.c      ****             {
 506:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 1249              		.loc 1 506 0 is_stmt 1
 1250 018c 1D4B     		ldr	r3, .L130+8
 1251 018e 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 32


 1252 0190 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 507:.\main.c      ****             }
 508:.\main.c      ****             break;
 1253              		.loc 1 508 0
 1254 0194 01E0     		b	.L96
 1255              	.L118:
 1256 0196 00E0     		b	.L96
 1257              	.L129:
 424:.\main.c      ****             break;
 1258              		.loc 1 424 0
 1259 0198 C046     		mov	r8, r8
 1260              	.L96:
 509:.\main.c      ****     }
 510:.\main.c      ****     
 511:.\main.c      ****     switch(shoulder_state){ //transitions
 1261              		.loc 1 511 0
 1262 019a 184B     		ldr	r3, .L130
 1263 019c 1B78     		ldrb	r3, [r3]
 1264 019e 012B     		cmp	r3, #1
 1265 01a0 0CD0     		beq	.L120
 1266 01a2 02DC     		bgt	.L121
 1267 01a4 002B     		cmp	r3, #0
 1268 01a6 05D0     		beq	.L122
 1269 01a8 24E0     		b	.L95
 1270              	.L121:
 1271 01aa 022B     		cmp	r3, #2
 1272 01ac 0AD0     		beq	.L123
 1273 01ae 032B     		cmp	r3, #3
 1274 01b0 14D0     		beq	.L124
 1275 01b2 1FE0     		b	.L95
 1276              	.L122:
 512:.\main.c      ****         case shldr_start:
 513:.\main.c      ****             shoulder_state = shldr_init;
 1277              		.loc 1 513 0
 1278 01b4 114B     		ldr	r3, .L130
 1279 01b6 0122     		mov	r2, #1
 1280 01b8 1A70     		strb	r2, [r3]
 514:.\main.c      ****             break;
 1281              		.loc 1 514 0
 1282 01ba 1BE0     		b	.L95
 1283              	.L120:
 515:.\main.c      ****         
 516:.\main.c      ****         case shldr_init:
 517:.\main.c      ****             shoulder_state = shldr_wait;
 1284              		.loc 1 517 0
 1285 01bc 0F4B     		ldr	r3, .L130
 1286 01be 0322     		mov	r2, #3
 1287 01c0 1A70     		strb	r2, [r3]
 518:.\main.c      ****             break;
 1288              		.loc 1 518 0
 1289 01c2 17E0     		b	.L95
 1290              	.L123:
 519:.\main.c      ****         
 520:.\main.c      ****         case shldr_execute:
 521:.\main.c      ****             if(new_pack)
 1291              		.loc 1 521 0
 1292 01c4 164B     		ldr	r3, .L130+36
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 33


 1293 01c6 1B78     		ldrb	r3, [r3]
 1294 01c8 002B     		cmp	r3, #0
 1295 01ca 03D0     		beq	.L125
 522:.\main.c      ****             {
 523:.\main.c      ****                 shoulder_state = shldr_execute;
 1296              		.loc 1 523 0
 1297 01cc 0B4B     		ldr	r3, .L130
 1298 01ce 0222     		mov	r2, #2
 1299 01d0 1A70     		strb	r2, [r3]
 524:.\main.c      ****             }
 525:.\main.c      ****             else
 526:.\main.c      ****             {
 527:.\main.c      ****                 shoulder_state = shldr_wait;
 528:.\main.c      ****             }
 529:.\main.c      ****             break;
 1300              		.loc 1 529 0
 1301 01d2 0FE0     		b	.L95
 1302              	.L125:
 527:.\main.c      ****                 shoulder_state = shldr_wait;
 1303              		.loc 1 527 0
 1304 01d4 094B     		ldr	r3, .L130
 1305 01d6 0322     		mov	r2, #3
 1306 01d8 1A70     		strb	r2, [r3]
 1307              		.loc 1 529 0
 1308 01da 0BE0     		b	.L95
 1309              	.L124:
 530:.\main.c      ****         
 531:.\main.c      ****         case shldr_wait:
 532:.\main.c      ****             if(new_pack)
 1310              		.loc 1 532 0
 1311 01dc 104B     		ldr	r3, .L130+36
 1312 01de 1B78     		ldrb	r3, [r3]
 1313 01e0 002B     		cmp	r3, #0
 1314 01e2 03D0     		beq	.L127
 533:.\main.c      ****             {
 534:.\main.c      ****                 shoulder_state = shldr_execute;
 1315              		.loc 1 534 0
 1316 01e4 054B     		ldr	r3, .L130
 1317 01e6 0222     		mov	r2, #2
 1318 01e8 1A70     		strb	r2, [r3]
 1319 01ea 02E0     		b	.L128
 1320              	.L127:
 535:.\main.c      ****             }
 536:.\main.c      ****             else
 537:.\main.c      ****             {
 538:.\main.c      ****                 shoulder_state = shldr_wait; 
 1321              		.loc 1 538 0
 1322 01ec 034B     		ldr	r3, .L130
 1323 01ee 0322     		mov	r2, #3
 1324 01f0 1A70     		strb	r2, [r3]
 1325              	.L128:
 539:.\main.c      ****             }
 540:.\main.c      ****             break;
 1326              		.loc 1 540 0
 1327 01f2 C046     		mov	r8, r8
 1328              	.L95:
 541:.\main.c      ****     }    
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 34


 542:.\main.c      **** }
 1329              		.loc 1 542 0
 1330 01f4 BD46     		mov	sp, r7
 1331 01f6 03B0     		add	sp, sp, #12
 1332              		@ sp needed
 1333 01f8 90BD     		pop	{r4, r7, pc}
 1334              	.L131:
 1335 01fa C046     		.align	2
 1336              	.L130:
 1337 01fc 00000000 		.word	shoulder_state
 1338 0200 00000000 		.word	shoulder_array
 1339 0204 DC050000 		.word	1500
 1340 0208 00000000 		.word	shldr_arr_cspot
 1341 020c 00000000 		.word	data_array
 1342 0210 DB050000 		.word	1499
 1343 0214 E7030000 		.word	999
 1344 0218 FFF90000 		.word	63999
 1345 021c 00000000 		.word	fin_exec
 1346 0220 00000000 		.word	new_pack
 1347              		.cfi_endproc
 1348              	.LFE44:
 1349              		.size	shoulder, .-shoulder
 1350              		.comm	baseAzimuth_state,1,1
 1351              		.section	.text.baseAzimuth,"ax",%progbits
 1352              		.align	2
 1353              		.global	baseAzimuth
 1354              		.code	16
 1355              		.thumb_func
 1356              		.type	baseAzimuth, %function
 1357              	baseAzimuth:
 1358              	.LFB45:
 543:.\main.c      **** 
 544:.\main.c      **** //control the turret
 545:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 546:.\main.c      **** void baseAzimuth()
 547:.\main.c      **** { 
 1359              		.loc 1 547 0
 1360              		.cfi_startproc
 1361 0000 90B5     		push	{r4, r7, lr}
 1362              		.cfi_def_cfa_offset 12
 1363              		.cfi_offset 4, -12
 1364              		.cfi_offset 7, -8
 1365              		.cfi_offset 14, -4
 1366 0002 83B0     		sub	sp, sp, #12
 1367              		.cfi_def_cfa_offset 24
 1368 0004 00AF     		add	r7, sp, #0
 1369              		.cfi_def_cfa_register 7
 548:.\main.c      ****     //take instruction from data_array
 549:.\main.c      ****     //smooth input
 550:.\main.c      ****     //actuate the turret using PWM
 551:.\main.c      ****     uint8 i;
 552:.\main.c      ****     uint16 avg;
 553:.\main.c      ****     uint16 command;
 554:.\main.c      ****     
 555:.\main.c      ****     switch(baseAzimuth_state){ //actions
 1370              		.loc 1 555 0
 1371 0006 4C4B     		ldr	r3, .L157
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 35


 1372 0008 1B78     		ldrb	r3, [r3]
 1373 000a 012B     		cmp	r3, #1
 1374 000c 03D0     		beq	.L134
 1375 000e 61DD     		ble	.L156
 1376 0010 022B     		cmp	r3, #2
 1377 0012 17D0     		beq	.L137
 556:.\main.c      ****         case BA_start:
 557:.\main.c      ****             break;
 558:.\main.c      **** 
 559:.\main.c      ****         case BA_init:
 560:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 561:.\main.c      ****             {
 562:.\main.c      ****                 baseAz_array[i] = 1500;
 563:.\main.c      ****             }
 564:.\main.c      ****             BA_arr_cspot = 0;
 565:.\main.c      ****             break;
 566:.\main.c      **** 
 567:.\main.c      ****         case BA_execute:
 568:.\main.c      ****             command = (((data_array[BA_BYTE_1] << 8) | data_array[BA_BYTE_2])/2) + 1500;
 569:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 570:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 571:.\main.c      ****             {
 572:.\main.c      ****                 BA_arr_cspot++;
 573:.\main.c      ****             }
 574:.\main.c      ****             else
 575:.\main.c      ****             {
 576:.\main.c      ****                 BA_arr_cspot = 0;
 577:.\main.c      ****             }
 578:.\main.c      ****             
 579:.\main.c      **** //            if(command >= 1000 && command < 1100)
 580:.\main.c      **** //            {
 581:.\main.c      **** //                if(BA_arr_cspot != 0)
 582:.\main.c      **** //                {
 583:.\main.c      **** //                    if(baseAz_array[BA_arr_cspot - 1] >= 1020)
 584:.\main.c      **** //                    {
 585:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 20);
 586:.\main.c      **** //                    }
 587:.\main.c      **** //                    else
 588:.\main.c      **** //                    {
 589:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 1000;
 590:.\main.c      **** //                    }
 591:.\main.c      **** //                    
 592:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 593:.\main.c      **** //                    {
 594:.\main.c      **** //                        BA_arr_cspot++;
 595:.\main.c      **** //                    }
 596:.\main.c      **** //                    else
 597:.\main.c      **** //                    {
 598:.\main.c      **** //                        BA_arr_cspot = 0;
 599:.\main.c      **** //                    }
 600:.\main.c      **** //                }
 601:.\main.c      **** //                else if(BA_arr_cspot == 0)
 602:.\main.c      **** //                {
 603:.\main.c      **** //                    if(baseAz_array[BA_ARR_SIZE - 1] >= 1020)
 604:.\main.c      **** //                    {
 605:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 20);
 606:.\main.c      **** //                    }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 36


 607:.\main.c      **** //                    else
 608:.\main.c      **** //                    {
 609:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 1000;
 610:.\main.c      **** //                    }
 611:.\main.c      **** //                    
 612:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 613:.\main.c      **** //                    {
 614:.\main.c      **** //                        BA_arr_cspot++;
 615:.\main.c      **** //                    }
 616:.\main.c      **** //                    else
 617:.\main.c      **** //                    {
 618:.\main.c      **** //                        BA_arr_cspot = 0;
 619:.\main.c      **** //                    }
 620:.\main.c      **** //                }
 621:.\main.c      **** //                else
 622:.\main.c      **** //                {
 623:.\main.c      **** //                    BA_arr_cspot = 0;
 624:.\main.c      **** //                }
 625:.\main.c      **** //            }
 626:.\main.c      **** //            else if(command >= 1100 && command < 1300)
 627:.\main.c      **** //            {
 628:.\main.c      **** //                if(BA_arr_cspot != 0)
 629:.\main.c      **** //                {
 630:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 10);
 631:.\main.c      **** //                    
 632:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 633:.\main.c      **** //                    {
 634:.\main.c      **** //                        BA_arr_cspot++;
 635:.\main.c      **** //                    }
 636:.\main.c      **** //                    else
 637:.\main.c      **** //                    {
 638:.\main.c      **** //                        BA_arr_cspot = 0;
 639:.\main.c      **** //                    }
 640:.\main.c      **** //                }
 641:.\main.c      **** //                else if(BA_arr_cspot == 0)
 642:.\main.c      **** //                {
 643:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 10);
 644:.\main.c      **** //                   
 645:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 646:.\main.c      **** //                    {
 647:.\main.c      **** //                        BA_arr_cspot++;
 648:.\main.c      **** //                    }
 649:.\main.c      **** //                    else
 650:.\main.c      **** //                    {
 651:.\main.c      **** //                        BA_arr_cspot = 0;
 652:.\main.c      **** //                    }
 653:.\main.c      **** //                }
 654:.\main.c      **** //                else
 655:.\main.c      **** //                {
 656:.\main.c      **** //                    BA_arr_cspot = 0;   
 657:.\main.c      **** //                }    
 658:.\main.c      **** //            }
 659:.\main.c      **** //            else if(command >= 1300 && command < 1490)
 660:.\main.c      **** //            {
 661:.\main.c      **** //                if(BA_arr_cspot != 0)
 662:.\main.c      **** //                {
 663:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 5);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 37


 664:.\main.c      **** //                    
 665:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 666:.\main.c      **** //                    {
 667:.\main.c      **** //                        BA_arr_cspot++;
 668:.\main.c      **** //                    }
 669:.\main.c      **** //                    else
 670:.\main.c      **** //                    {
 671:.\main.c      **** //                        BA_arr_cspot = 0;
 672:.\main.c      **** //                    }
 673:.\main.c      **** //                }
 674:.\main.c      **** //                else if(BA_arr_cspot == 0)
 675:.\main.c      **** //                {
 676:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 5);
 677:.\main.c      **** //                   
 678:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 679:.\main.c      **** //                    {
 680:.\main.c      **** //                        BA_arr_cspot++;
 681:.\main.c      **** //                    }
 682:.\main.c      **** //                    else
 683:.\main.c      **** //                    {
 684:.\main.c      **** //                        BA_arr_cspot = 0;
 685:.\main.c      **** //                    }
 686:.\main.c      **** //                }
 687:.\main.c      **** //                else
 688:.\main.c      **** //                {
 689:.\main.c      **** //                    BA_arr_cspot = 0;   
 690:.\main.c      **** //                }    
 691:.\main.c      **** //            }
 692:.\main.c      **** //            else if(command > 1510 && command <= 1700)
 693:.\main.c      **** //            {
 694:.\main.c      **** //                if(BA_arr_cspot != 0)
 695:.\main.c      **** //                {
 696:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 5);
 697:.\main.c      **** //                    
 698:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 699:.\main.c      **** //                    {
 700:.\main.c      **** //                        BA_arr_cspot++;
 701:.\main.c      **** //                    }
 702:.\main.c      **** //                    else
 703:.\main.c      **** //                    {
 704:.\main.c      **** //                        BA_arr_cspot = 0;
 705:.\main.c      **** //                    }
 706:.\main.c      **** //                }
 707:.\main.c      **** //                else if(BA_arr_cspot == 0)
 708:.\main.c      **** //                {
 709:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 5);
 710:.\main.c      **** //                   
 711:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 712:.\main.c      **** //                    {
 713:.\main.c      **** //                        BA_arr_cspot++;
 714:.\main.c      **** //                    }
 715:.\main.c      **** //                    else
 716:.\main.c      **** //                    {
 717:.\main.c      **** //                        BA_arr_cspot = 0;
 718:.\main.c      **** //                    }
 719:.\main.c      **** //                }
 720:.\main.c      **** //                else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 38


 721:.\main.c      **** //                {
 722:.\main.c      **** //                    BA_arr_cspot = 0;   
 723:.\main.c      **** //                }    
 724:.\main.c      **** //            }
 725:.\main.c      **** //            else if(command > 1700 && command <= 1900)
 726:.\main.c      **** //            {
 727:.\main.c      **** //                if(BA_arr_cspot != 0)
 728:.\main.c      **** //                {
 729:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 10);
 730:.\main.c      **** //                    
 731:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 732:.\main.c      **** //                    {
 733:.\main.c      **** //                        BA_arr_cspot++;
 734:.\main.c      **** //                    }
 735:.\main.c      **** //                    else
 736:.\main.c      **** //                    {
 737:.\main.c      **** //                        BA_arr_cspot = 0;
 738:.\main.c      **** //                    }
 739:.\main.c      **** //                }
 740:.\main.c      **** //                else if(BA_arr_cspot == 0)
 741:.\main.c      **** //                {
 742:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 10);
 743:.\main.c      **** //                   
 744:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 745:.\main.c      **** //                    {
 746:.\main.c      **** //                        BA_arr_cspot++;
 747:.\main.c      **** //                    }
 748:.\main.c      **** //                    else
 749:.\main.c      **** //                    {
 750:.\main.c      **** //                        BA_arr_cspot = 0;
 751:.\main.c      **** //                    }
 752:.\main.c      **** //                }
 753:.\main.c      **** //                else
 754:.\main.c      **** //                {
 755:.\main.c      **** //                    BA_arr_cspot = 0;   
 756:.\main.c      **** //                }
 757:.\main.c      **** //            }
 758:.\main.c      **** //            else if(command > 1900 && command <= 2000)
 759:.\main.c      **** //            {
 760:.\main.c      **** //                if(BA_arr_cspot != 0)
 761:.\main.c      **** //                {
 762:.\main.c      **** //                    if(baseAz_array[BA_arr_cspot - 1] <= 1980)
 763:.\main.c      **** //                    {
 764:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 20);
 765:.\main.c      **** //                    }
 766:.\main.c      **** //                    else
 767:.\main.c      **** //                    {
 768:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 2000;
 769:.\main.c      **** //                    }
 770:.\main.c      **** //                    
 771:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 772:.\main.c      **** //                    {
 773:.\main.c      **** //                        BA_arr_cspot++;
 774:.\main.c      **** //                    }
 775:.\main.c      **** //                    else
 776:.\main.c      **** //                    {
 777:.\main.c      **** //                        BA_arr_cspot = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 39


 778:.\main.c      **** //                    }
 779:.\main.c      **** //                }
 780:.\main.c      **** //                else if(BA_arr_cspot == 0)
 781:.\main.c      **** //                {
 782:.\main.c      **** //                    if(baseAz_array[BA_ARR_SIZE - 1] <= 1980)
 783:.\main.c      **** //                    {
 784:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 20);
 785:.\main.c      **** //                    }
 786:.\main.c      **** //                    else
 787:.\main.c      **** //                    {
 788:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 2000;
 789:.\main.c      **** //                    }
 790:.\main.c      **** //                    
 791:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 792:.\main.c      **** //                    {
 793:.\main.c      **** //                        BA_arr_cspot++;
 794:.\main.c      **** //                    }
 795:.\main.c      **** //                    else
 796:.\main.c      **** //                    {
 797:.\main.c      **** //                        BA_arr_cspot = 0;
 798:.\main.c      **** //                    }
 799:.\main.c      **** //                }
 800:.\main.c      **** //                else
 801:.\main.c      **** //                {
 802:.\main.c      **** //                    BA_arr_cspot = 0;
 803:.\main.c      **** //                }
 804:.\main.c      **** //            }
 805:.\main.c      **** //            else if(command <= 1510 && command >= 1490)
 806:.\main.c      **** //            {
 807:.\main.c      **** //                if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 808:.\main.c      **** //                {
 809:.\main.c      **** //                    BA_arr_cspot++;
 810:.\main.c      **** //                }
 811:.\main.c      **** //                else
 812:.\main.c      **** //                {
 813:.\main.c      **** //                    BA_arr_cspot = 0;
 814:.\main.c      **** //                }
 815:.\main.c      **** //            }
 816:.\main.c      **** //            else
 817:.\main.c      **** //            {
 818:.\main.c      **** //                //throw error
 819:.\main.c      **** //                if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 820:.\main.c      **** //                {
 821:.\main.c      **** //                    BA_arr_cspot++;
 822:.\main.c      **** //                }
 823:.\main.c      **** //                else
 824:.\main.c      **** //                {
 825:.\main.c      **** //                    BA_arr_cspot = 0;
 826:.\main.c      **** //                }
 827:.\main.c      **** //            }
 828:.\main.c      ****             
 829:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 830:.\main.c      ****             
 831:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 832:.\main.c      ****             {
 833:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 834:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 40


 835:.\main.c      ****             else
 836:.\main.c      ****             {
 837:.\main.c      ****                 //throw error
 838:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 839:.\main.c      ****             }
 840:.\main.c      ****             fin_exec++;
 841:.\main.c      ****             break;
 842:.\main.c      ****             
 843:.\main.c      ****         case BA_wait:
 844:.\main.c      ****             break;
 1378              		.loc 1 844 0
 1379 0014 5FE0     		b	.L133
 1380              	.L134:
 560:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1381              		.loc 1 560 0
 1382 0016 FB1D     		add	r3, r7, #7
 1383 0018 0022     		mov	r2, #0
 1384 001a 1A70     		strb	r2, [r3]
 1385 001c 0AE0     		b	.L139
 1386              	.L140:
 562:.\main.c      ****                 baseAz_array[i] = 1500;
 1387              		.loc 1 562 0 discriminator 2
 1388 001e FB1D     		add	r3, r7, #7
 1389 0020 1A78     		ldrb	r2, [r3]
 1390 0022 464B     		ldr	r3, .L157+4
 1391 0024 5200     		lsl	r2, r2, #1
 1392 0026 4649     		ldr	r1, .L157+8
 1393 0028 D152     		strh	r1, [r2, r3]
 560:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1394              		.loc 1 560 0 discriminator 2
 1395 002a FB1D     		add	r3, r7, #7
 1396 002c 1A78     		ldrb	r2, [r3]
 1397 002e FB1D     		add	r3, r7, #7
 1398 0030 0132     		add	r2, r2, #1
 1399 0032 1A70     		strb	r2, [r3]
 1400              	.L139:
 560:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1401              		.loc 1 560 0 is_stmt 0 discriminator 1
 1402 0034 FB1D     		add	r3, r7, #7
 1403 0036 1B78     		ldrb	r3, [r3]
 1404 0038 132B     		cmp	r3, #19
 1405 003a F0D9     		bls	.L140
 564:.\main.c      ****             BA_arr_cspot = 0;
 1406              		.loc 1 564 0 is_stmt 1
 1407 003c 414B     		ldr	r3, .L157+12
 1408 003e 0022     		mov	r2, #0
 1409 0040 1A70     		strb	r2, [r3]
 565:.\main.c      ****             break;
 1410              		.loc 1 565 0
 1411 0042 48E0     		b	.L133
 1412              	.L137:
 568:.\main.c      ****             command = (((data_array[BA_BYTE_1] << 8) | data_array[BA_BYTE_2])/2) + 1500;
 1413              		.loc 1 568 0
 1414 0044 404B     		ldr	r3, .L157+16
 1415 0046 1B79     		ldrb	r3, [r3, #4]
 1416 0048 1A02     		lsl	r2, r3, #8
 1417 004a 3F4B     		ldr	r3, .L157+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 41


 1418 004c 5B79     		ldrb	r3, [r3, #5]
 1419 004e 1343     		orr	r3, r2
 1420 0050 00D5     		bpl	.L141
 1421 0052 0133     		add	r3, r3, #1
 1422              	.L141:
 1423 0054 5B10     		asr	r3, r3, #1
 1424 0056 9AB2     		uxth	r2, r3
 1425 0058 3B1D     		add	r3, r7, #4
 1426 005a 3949     		ldr	r1, .L157+8
 1427 005c 5218     		add	r2, r2, r1
 1428 005e 1A80     		strh	r2, [r3]
 569:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 1429              		.loc 1 569 0
 1430 0060 384B     		ldr	r3, .L157+12
 1431 0062 1B78     		ldrb	r3, [r3]
 1432 0064 1A1C     		mov	r2, r3
 1433 0066 354B     		ldr	r3, .L157+4
 1434 0068 5200     		lsl	r2, r2, #1
 1435 006a 391D     		add	r1, r7, #4
 1436 006c 0988     		ldrh	r1, [r1]
 1437 006e D152     		strh	r1, [r2, r3]
 570:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 1438              		.loc 1 570 0
 1439 0070 344B     		ldr	r3, .L157+12
 1440 0072 1B78     		ldrb	r3, [r3]
 1441 0074 122B     		cmp	r3, #18
 1442 0076 06D8     		bhi	.L142
 572:.\main.c      ****                 BA_arr_cspot++;
 1443              		.loc 1 572 0
 1444 0078 324B     		ldr	r3, .L157+12
 1445 007a 1B78     		ldrb	r3, [r3]
 1446 007c 0133     		add	r3, r3, #1
 1447 007e DAB2     		uxtb	r2, r3
 1448 0080 304B     		ldr	r3, .L157+12
 1449 0082 1A70     		strb	r2, [r3]
 1450 0084 02E0     		b	.L143
 1451              	.L142:
 576:.\main.c      ****                 BA_arr_cspot = 0;
 1452              		.loc 1 576 0
 1453 0086 2F4B     		ldr	r3, .L157+12
 1454 0088 0022     		mov	r2, #0
 1455 008a 1A70     		strb	r2, [r3]
 1456              	.L143:
 829:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 1457              		.loc 1 829 0
 1458 008c BC1C     		add	r4, r7, #2
 1459 008e 2B4B     		ldr	r3, .L157+4
 1460 0090 181C     		mov	r0, r3
 1461 0092 1421     		mov	r1, #20
 1462 0094 FFF7FEFF 		bl	average
 1463 0098 031C     		mov	r3, r0
 1464 009a 2380     		strh	r3, [r4]
 831:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1465              		.loc 1 831 0
 1466 009c BB1C     		add	r3, r7, #2
 1467 009e 1A88     		ldrh	r2, [r3]
 1468 00a0 FA23     		mov	r3, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 42


 1469 00a2 DB00     		lsl	r3, r3, #3
 1470 00a4 9A42     		cmp	r2, r3
 1471 00a6 0AD8     		bhi	.L144
 831:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1472              		.loc 1 831 0 is_stmt 0 discriminator 1
 1473 00a8 BB1C     		add	r3, r7, #2
 1474 00aa 1A88     		ldrh	r2, [r3]
 1475 00ac 274B     		ldr	r3, .L157+20
 1476 00ae 9A42     		cmp	r2, r3
 1477 00b0 05D9     		bls	.L144
 833:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 1478              		.loc 1 833 0 is_stmt 1
 1479 00b2 BB1C     		add	r3, r7, #2
 1480 00b4 1B88     		ldrh	r3, [r3]
 1481 00b6 181C     		mov	r0, r3
 1482 00b8 FFF7FEFF 		bl	BA_PWM_WriteCompare
 1483 00bc 03E0     		b	.L145
 1484              	.L144:
 838:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 1485              		.loc 1 838 0
 1486 00be 204B     		ldr	r3, .L157+8
 1487 00c0 181C     		mov	r0, r3
 1488 00c2 FFF7FEFF 		bl	BA_PWM_WriteCompare
 1489              	.L145:
 840:.\main.c      ****             fin_exec++;
 1490              		.loc 1 840 0
 1491 00c6 224B     		ldr	r3, .L157+24
 1492 00c8 1B78     		ldrb	r3, [r3]
 1493 00ca 0133     		add	r3, r3, #1
 1494 00cc DAB2     		uxtb	r2, r3
 1495 00ce 204B     		ldr	r3, .L157+24
 1496 00d0 1A70     		strb	r2, [r3]
 841:.\main.c      ****             break;
 1497              		.loc 1 841 0
 1498 00d2 00E0     		b	.L133
 1499              	.L156:
 557:.\main.c      ****             break;
 1500              		.loc 1 557 0
 1501 00d4 C046     		mov	r8, r8
 1502              	.L133:
 845:.\main.c      ****     }
 846:.\main.c      ****     
 847:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 1503              		.loc 1 847 0
 1504 00d6 184B     		ldr	r3, .L157
 1505 00d8 1B78     		ldrb	r3, [r3]
 1506 00da 012B     		cmp	r3, #1
 1507 00dc 0CD0     		beq	.L147
 1508 00de 02DC     		bgt	.L148
 1509 00e0 002B     		cmp	r3, #0
 1510 00e2 05D0     		beq	.L149
 1511 00e4 24E0     		b	.L132
 1512              	.L148:
 1513 00e6 022B     		cmp	r3, #2
 1514 00e8 0AD0     		beq	.L150
 1515 00ea 032B     		cmp	r3, #3
 1516 00ec 14D0     		beq	.L151
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 43


 1517 00ee 1FE0     		b	.L132
 1518              	.L149:
 848:.\main.c      ****         case BA_start:
 849:.\main.c      ****             baseAzimuth_state = BA_init;
 1519              		.loc 1 849 0
 1520 00f0 114B     		ldr	r3, .L157
 1521 00f2 0122     		mov	r2, #1
 1522 00f4 1A70     		strb	r2, [r3]
 850:.\main.c      ****             break;
 1523              		.loc 1 850 0
 1524 00f6 1BE0     		b	.L132
 1525              	.L147:
 851:.\main.c      ****         
 852:.\main.c      ****         case BA_init:
 853:.\main.c      ****             baseAzimuth_state = BA_wait;
 1526              		.loc 1 853 0
 1527 00f8 0F4B     		ldr	r3, .L157
 1528 00fa 0322     		mov	r2, #3
 1529 00fc 1A70     		strb	r2, [r3]
 854:.\main.c      ****             break;
 1530              		.loc 1 854 0
 1531 00fe 17E0     		b	.L132
 1532              	.L150:
 855:.\main.c      ****         
 856:.\main.c      ****         case BA_execute:
 857:.\main.c      ****             if(new_pack)
 1533              		.loc 1 857 0
 1534 0100 144B     		ldr	r3, .L157+28
 1535 0102 1B78     		ldrb	r3, [r3]
 1536 0104 002B     		cmp	r3, #0
 1537 0106 03D0     		beq	.L152
 858:.\main.c      ****             {
 859:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1538              		.loc 1 859 0
 1539 0108 0B4B     		ldr	r3, .L157
 1540 010a 0222     		mov	r2, #2
 1541 010c 1A70     		strb	r2, [r3]
 860:.\main.c      ****             }
 861:.\main.c      ****             else
 862:.\main.c      ****             {
 863:.\main.c      ****                 baseAzimuth_state = BA_wait;
 864:.\main.c      ****             }
 865:.\main.c      ****             break;
 1542              		.loc 1 865 0
 1543 010e 0FE0     		b	.L132
 1544              	.L152:
 863:.\main.c      ****                 baseAzimuth_state = BA_wait;
 1545              		.loc 1 863 0
 1546 0110 094B     		ldr	r3, .L157
 1547 0112 0322     		mov	r2, #3
 1548 0114 1A70     		strb	r2, [r3]
 1549              		.loc 1 865 0
 1550 0116 0BE0     		b	.L132
 1551              	.L151:
 866:.\main.c      ****         
 867:.\main.c      ****         case BA_wait:
 868:.\main.c      ****             if(new_pack)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 44


 1552              		.loc 1 868 0
 1553 0118 0E4B     		ldr	r3, .L157+28
 1554 011a 1B78     		ldrb	r3, [r3]
 1555 011c 002B     		cmp	r3, #0
 1556 011e 03D0     		beq	.L154
 869:.\main.c      ****             {
 870:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1557              		.loc 1 870 0
 1558 0120 054B     		ldr	r3, .L157
 1559 0122 0222     		mov	r2, #2
 1560 0124 1A70     		strb	r2, [r3]
 1561 0126 02E0     		b	.L155
 1562              	.L154:
 871:.\main.c      ****             }
 872:.\main.c      ****             else
 873:.\main.c      ****             {
 874:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 1563              		.loc 1 874 0
 1564 0128 034B     		ldr	r3, .L157
 1565 012a 0322     		mov	r2, #3
 1566 012c 1A70     		strb	r2, [r3]
 1567              	.L155:
 875:.\main.c      ****             }
 876:.\main.c      ****             break;
 1568              		.loc 1 876 0
 1569 012e C046     		mov	r8, r8
 1570              	.L132:
 877:.\main.c      ****     }    
 878:.\main.c      **** }
 1571              		.loc 1 878 0
 1572 0130 BD46     		mov	sp, r7
 1573 0132 03B0     		add	sp, sp, #12
 1574              		@ sp needed
 1575 0134 90BD     		pop	{r4, r7, pc}
 1576              	.L158:
 1577 0136 C046     		.align	2
 1578              	.L157:
 1579 0138 00000000 		.word	baseAzimuth_state
 1580 013c 00000000 		.word	baseAz_array
 1581 0140 DC050000 		.word	1500
 1582 0144 00000000 		.word	BA_arr_cspot
 1583 0148 00000000 		.word	data_array
 1584 014c E7030000 		.word	999
 1585 0150 00000000 		.word	fin_exec
 1586 0154 00000000 		.word	new_pack
 1587              		.cfi_endproc
 1588              	.LFE45:
 1589              		.size	baseAzimuth, .-baseAzimuth
 1590              		.section	.text.main,"ax",%progbits
 1591              		.align	2
 1592              		.global	main
 1593              		.code	16
 1594              		.thumb_func
 1595              		.type	main, %function
 1596              	main:
 1597              	.LFB46:
 879:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 45


 880:.\main.c      **** int main()
 881:.\main.c      **** {  
 1598              		.loc 1 881 0
 1599              		.cfi_startproc
 1600 0000 80B5     		push	{r7, lr}
 1601              		.cfi_def_cfa_offset 8
 1602              		.cfi_offset 7, -8
 1603              		.cfi_offset 14, -4
 1604 0002 82B0     		sub	sp, sp, #8
 1605              		.cfi_def_cfa_offset 16
 1606 0004 00AF     		add	r7, sp, #0
 1607              		.cfi_def_cfa_register 7
 882:.\main.c      ****     
 883:.\main.c      ****     
 884:.\main.c      ****     //Define variables
 885:.\main.c      ****     time_t t;
 886:.\main.c      ****     uint8 counter;
 887:.\main.c      ****     int direction = 0;
 1608              		.loc 1 887 0
 1609 0006 0023     		mov	r3, #0
 1610 0008 7B60     		str	r3, [r7, #4]
 888:.\main.c      ****     
 889:.\main.c      ****     //start all of our components
 890:.\main.c      ****     Clock_pwm_Start();
 1611              		.loc 1 890 0
 1612 000a FFF7FEFF 		bl	Clock_pwm_Start
 891:.\main.c      ****     Clock_counter_Start();
 1613              		.loc 1 891 0
 1614 000e FFF7FEFF 		bl	Clock_counter_Start
 892:.\main.c      ****     
 893:.\main.c      ****     UART_1_Start();
 1615              		.loc 1 893 0
 1616 0012 FFF7FEFF 		bl	UART_1_Start
 894:.\main.c      ****     
 895:.\main.c      ****     SHLDR_PWM_Start();
 1617              		.loc 1 895 0
 1618 0016 FFF7FEFF 		bl	SHLDR_PWM_Start
 896:.\main.c      ****     BA_PWM_Start();
 1619              		.loc 1 896 0
 1620 001a FFF7FEFF 		bl	BA_PWM_Start
 897:.\main.c      ****     ELBW_PWM_Start();
 1621              		.loc 1 897 0
 1622 001e FFF7FEFF 		bl	ELBW_PWM_Start
 898:.\main.c      ****     
 899:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 1623              		.loc 1 899 0
 1624 0022 254B     		ldr	r3, .L165
 1625 0024 0420     		mov	r0, #4
 1626 0026 0121     		mov	r1, #1
 1627 0028 1A1C     		mov	r2, r3
 1628 002a FFF7FEFF 		bl	wiznetInit
 900:.\main.c      ****     
 901:.\main.c      ****     ELBW_PWM_WriteCompare(1500); //Initialize our motor drivers
 1629              		.loc 1 901 0
 1630 002e 234B     		ldr	r3, .L165+4
 1631 0030 181C     		mov	r0, r3
 1632 0032 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 46


 902:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 1633              		.loc 1 902 0
 1634 0036 214B     		ldr	r3, .L165+4
 1635 0038 181C     		mov	r0, r3
 1636 003a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 903:.\main.c      ****     CyDelay(10000);
 1637              		.loc 1 903 0
 1638 003e 204B     		ldr	r3, .L165+8
 1639 0040 181C     		mov	r0, r3
 1640 0042 FFF7FEFF 		bl	CyDelay
 904:.\main.c      ****    
 905:.\main.c      ****     ADC_Start();
 1641              		.loc 1 905 0
 1642 0046 FFF7FEFF 		bl	ADC_Start
 906:.\main.c      ****     ADC_StartConvert();
 1643              		.loc 1 906 0
 1644 004a FFF7FEFF 		bl	ADC_StartConvert
 907:.\main.c      ****     
 908:.\main.c      ****     //helps for generating random arrays
 909:.\main.c      ****     srand((unsigned) time(&t));
 1645              		.loc 1 909 0
 1646 004e 3B1C     		mov	r3, r7
 1647 0050 181C     		mov	r0, r3
 1648 0052 FFF7FEFF 		bl	time
 1649 0056 031C     		mov	r3, r0
 1650 0058 181C     		mov	r0, r3
 1651 005a FFF7FEFF 		bl	srand
 910:.\main.c      ****     
 911:.\main.c      ****     CyGlobalIntEnable;
 1652              		.loc 1 911 0
 1653              	@ 911 ".\main.c" 1
 1654 005e 62B6     		CPSIE   i
 1655              	@ 0 "" 2
 912:.\main.c      ****     isr_1_StartEx(timer_isr);
 1656              		.loc 1 912 0
 1657              		.code	16
 1658 0060 184B     		ldr	r3, .L165+12
 1659 0062 181C     		mov	r0, r3
 1660 0064 FFF7FEFF 		bl	isr_1_StartEx
 913:.\main.c      ****     Timer_1_Start();
 1661              		.loc 1 913 0
 1662 0068 FFF7FEFF 		bl	Timer_1_Start
 1663              	.L163:
 914:.\main.c      ****     
 915:.\main.c      ****     for(;;)
 916:.\main.c      ****     {
 917:.\main.c      ****         //check addresses
 918:.\main.c      ****         //TODO get the address bytes from Steve
 919:.\main.c      ****         
 920:.\main.c      ****         if(!WIZ_INT_Read())
 1664              		.loc 1 920 0
 1665 006c FFF7FEFF 		bl	WIZ_INT_Read
 1666 0070 031C     		mov	r3, r0
 1667 0072 002B     		cmp	r3, #0
 1668 0074 09D1     		bne	.L160
 921:.\main.c      ****         {
 922:.\main.c      ****             wiznetClearInterrupts();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 47


 1669              		.loc 1 922 0
 1670 0076 FFF7FEFF 		bl	wiznetClearInterrupts
 923:.\main.c      ****             fill_data_array();
 1671              		.loc 1 923 0
 1672 007a FFF7FEFF 		bl	fill_data_array
 924:.\main.c      ****             new_pack = 1;
 1673              		.loc 1 924 0
 1674 007e 124B     		ldr	r3, .L165+16
 1675 0080 0122     		mov	r2, #1
 1676 0082 1A70     		strb	r2, [r3]
 925:.\main.c      ****             fin_exec = 0;
 1677              		.loc 1 925 0
 1678 0084 114B     		ldr	r3, .L165+20
 1679 0086 0022     		mov	r2, #0
 1680 0088 1A70     		strb	r2, [r3]
 1681              	.L160:
 926:.\main.c      ****         }
 927:.\main.c      ****         
 928:.\main.c      ****         baseAzimuth();
 1682              		.loc 1 928 0
 1683 008a FFF7FEFF 		bl	baseAzimuth
 929:.\main.c      ****         shoulder();
 1684              		.loc 1 929 0
 1685 008e FFF7FEFF 		bl	shoulder
 930:.\main.c      ****         elbow();
 1686              		.loc 1 930 0
 1687 0092 FFF7FEFF 		bl	elbow
 931:.\main.c      **** //        wristTilt();
 932:.\main.c      **** //        wristRotate();
 933:.\main.c      **** 
 934:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1688              		.loc 1 934 0
 1689 0096 0D4B     		ldr	r3, .L165+20
 1690 0098 1B78     		ldrb	r3, [r3]
 1691 009a 032B     		cmp	r3, #3
 1692 009c 03D1     		bne	.L161
 935:.\main.c      ****         {
 936:.\main.c      ****             new_pack = 0;
 1693              		.loc 1 936 0
 1694 009e 0A4B     		ldr	r3, .L165+16
 1695 00a0 0022     		mov	r2, #0
 1696 00a2 1A70     		strb	r2, [r3]
 937:.\main.c      ****         }
 938:.\main.c      ****         
 939:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 1697              		.loc 1 939 0
 1698 00a4 FFE7     		b	.L164
 1699              	.L161:
 1700              	.L164:
 1701 00a6 C046     		mov	r8, r8
 1702              	.L162:
 1703              		.loc 1 939 0 is_stmt 0 discriminator 1
 1704 00a8 094B     		ldr	r3, .L165+24
 1705 00aa 1B78     		ldrb	r3, [r3]
 1706 00ac 002B     		cmp	r3, #0
 1707 00ae FBD0     		beq	.L162
 940:.\main.c      ****         timerFlag = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 48


 1708              		.loc 1 940 0 is_stmt 1
 1709 00b0 074B     		ldr	r3, .L165+24
 1710 00b2 0022     		mov	r2, #0
 1711 00b4 1A70     		strb	r2, [r3]
 941:.\main.c      ****         
 942:.\main.c      **** //        counter++;
 943:.\main.c      **** //        
 944:.\main.c      **** //        if(counter == 20)
 945:.\main.c      **** //        {
 946:.\main.c      **** //            uint16 feedback1 = ADC_GetResult16(2);
 947:.\main.c      **** //            int16 forward = 1000;
 948:.\main.c      **** //            int16 backward = -1000;
 949:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 950:.\main.c      **** //            {
 951:.\main.c      **** ////                int16 random_number = rand()%2001 - 1000;
 952:.\main.c      **** ////                test_array[i] = random_number >> 8;
 953:.\main.c      **** ////                test_array[i+1] = random_number & 0x00FF;
 954:.\main.c      **** ////                if((second_counter%2) == 0)
 955:.\main.c      **** ////                {
 956:.\main.c      **** ////                    test_array[i] = ;
 957:.\main.c      **** ////                }
 958:.\main.c      **** //                if (feedback1 > 500)
 959:.\main.c      **** //                {
 960:.\main.c      **** //                    test_array[i] = forward >> 8;
 961:.\main.c      **** //                    test_array[i+1] = forward & 0x00FF;
 962:.\main.c      **** //                }
 963:.\main.c      **** //                else if (feedback1 < 500)
 964:.\main.c      **** //                {
 965:.\main.c      **** //                    test_array[i] = backward >> 8;
 966:.\main.c      **** //                    test_array[i+1] = backward & 0x00FF;
 967:.\main.c      **** //                }
 968:.\main.c      **** //                else
 969:.\main.c      **** //                {
 970:.\main.c      **** //                    test_array[i] = 0;
 971:.\main.c      **** //                    test_array[i+1] = 0;
 972:.\main.c      **** //                }
 973:.\main.c      **** //                
 974:.\main.c      **** //            }
 975:.\main.c      **** //            counter = 0;
 976:.\main.c      **** //            wiznet = 1;
 977:.\main.c      **** //        }
 978:.\main.c      **** //        
 979:.\main.c      **** ////            //Potential solution to how we will want to send feedback
 980:.\main.c      **** ////            feedback_count++;
 981:.\main.c      **** ////            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 982:.\main.c      **** ////            {                                        //time through the full set of instruction
 983:.\main.c      **** ////                send_feedback();
 984:.\main.c      **** ////            }
 985:.\main.c      ****     }
 1712              		.loc 1 985 0
 1713 00b6 D9E7     		b	.L163
 1714              	.L166:
 1715              		.align	2
 1716              	.L165:
 1717 00b8 87690000 		.word	27015
 1718 00bc DC050000 		.word	1500
 1719 00c0 10270000 		.word	10000
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 49


 1720 00c4 00000000 		.word	timer_isr
 1721 00c8 00000000 		.word	new_pack
 1722 00cc 00000000 		.word	fin_exec
 1723 00d0 00000000 		.word	timerFlag
 1724              		.cfi_endproc
 1725              	.LFE46:
 1726              		.size	main, .-main
 1727              		.text
 1728              	.Letext0:
 1729              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1730              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1731              		.section	.debug_info,"",%progbits
 1732              	.Ldebug_info0:
 1733 0000 F5050000 		.4byte	0x5f5
 1734 0004 0400     		.2byte	0x4
 1735 0006 00000000 		.4byte	.Ldebug_abbrev0
 1736 000a 04       		.byte	0x4
 1737 000b 01       		.uleb128 0x1
 1738 000c F8030000 		.4byte	.LASF86
 1739 0010 01       		.byte	0x1
 1740 0011 D0030000 		.4byte	.LASF87
 1741 0015 C5020000 		.4byte	.LASF88
 1742 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1743 001d 00000000 		.4byte	0
 1744 0021 00000000 		.4byte	.Ldebug_line0
 1745 0025 02       		.uleb128 0x2
 1746 0026 01       		.byte	0x1
 1747 0027 06       		.byte	0x6
 1748 0028 3F010000 		.4byte	.LASF0
 1749 002c 02       		.uleb128 0x2
 1750 002d 01       		.byte	0x1
 1751 002e 08       		.byte	0x8
 1752 002f D9010000 		.4byte	.LASF1
 1753 0033 02       		.uleb128 0x2
 1754 0034 02       		.byte	0x2
 1755 0035 05       		.byte	0x5
 1756 0036 3C000000 		.4byte	.LASF2
 1757 003a 02       		.uleb128 0x2
 1758 003b 02       		.byte	0x2
 1759 003c 07       		.byte	0x7
 1760 003d 83020000 		.4byte	.LASF3
 1761 0041 02       		.uleb128 0x2
 1762 0042 04       		.byte	0x4
 1763 0043 05       		.byte	0x5
 1764 0044 84010000 		.4byte	.LASF4
 1765 0048 02       		.uleb128 0x2
 1766 0049 04       		.byte	0x4
 1767 004a 07       		.byte	0x7
 1768 004b 66020000 		.4byte	.LASF5
 1769 004f 02       		.uleb128 0x2
 1770 0050 08       		.byte	0x8
 1771 0051 05       		.byte	0x5
 1772 0052 97000000 		.4byte	.LASF6
 1773 0056 02       		.uleb128 0x2
 1774 0057 08       		.byte	0x8
 1775 0058 07       		.byte	0x7
 1776 0059 42020000 		.4byte	.LASF7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 50


 1777 005d 03       		.uleb128 0x3
 1778 005e 04       		.byte	0x4
 1779 005f 05       		.byte	0x5
 1780 0060 696E7400 		.ascii	"int\000"
 1781 0064 02       		.uleb128 0x2
 1782 0065 04       		.byte	0x4
 1783 0066 07       		.byte	0x7
 1784 0067 59020000 		.4byte	.LASF8
 1785 006b 04       		.uleb128 0x4
 1786 006c C0010000 		.4byte	.LASF9
 1787 0070 02       		.byte	0x2
 1788 0071 A1       		.byte	0xa1
 1789 0072 2C000000 		.4byte	0x2c
 1790 0076 04       		.uleb128 0x4
 1791 0077 FC000000 		.4byte	.LASF10
 1792 007b 02       		.byte	0x2
 1793 007c A2       		.byte	0xa2
 1794 007d 3A000000 		.4byte	0x3a
 1795 0081 04       		.uleb128 0x4
 1796 0082 69030000 		.4byte	.LASF11
 1797 0086 02       		.byte	0x2
 1798 0087 A3       		.byte	0xa3
 1799 0088 48000000 		.4byte	0x48
 1800 008c 04       		.uleb128 0x4
 1801 008d 39010000 		.4byte	.LASF12
 1802 0091 02       		.byte	0x2
 1803 0092 A5       		.byte	0xa5
 1804 0093 33000000 		.4byte	0x33
 1805 0097 02       		.uleb128 0x2
 1806 0098 04       		.byte	0x4
 1807 0099 04       		.byte	0x4
 1808 009a 4B010000 		.4byte	.LASF13
 1809 009e 02       		.uleb128 0x2
 1810 009f 08       		.byte	0x8
 1811 00a0 04       		.byte	0x4
 1812 00a1 82030000 		.4byte	.LASF14
 1813 00a5 02       		.uleb128 0x2
 1814 00a6 01       		.byte	0x1
 1815 00a7 08       		.byte	0x8
 1816 00a8 7F010000 		.4byte	.LASF15
 1817 00ac 02       		.uleb128 0x2
 1818 00ad 04       		.byte	0x4
 1819 00ae 07       		.byte	0x7
 1820 00af 53000000 		.4byte	.LASF16
 1821 00b3 05       		.uleb128 0x5
 1822 00b4 04       		.byte	0x4
 1823 00b5 A5000000 		.4byte	0xa5
 1824 00b9 04       		.uleb128 0x4
 1825 00ba 89030000 		.4byte	.LASF17
 1826 00be 03       		.byte	0x3
 1827 00bf 7A       		.byte	0x7a
 1828 00c0 41000000 		.4byte	0x41
 1829 00c4 06       		.uleb128 0x6
 1830 00c5 96020000 		.4byte	.LASF22
 1831 00c9 01       		.byte	0x1
 1832 00ca 01       		.byte	0x1
 1833 00cb 8F       		.byte	0x8f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 51


 1834 00cc E9000000 		.4byte	0xe9
 1835 00d0 07       		.uleb128 0x7
 1836 00d1 B6010000 		.4byte	.LASF18
 1837 00d5 00       		.sleb128 0
 1838 00d6 07       		.uleb128 0x7
 1839 00d7 21000000 		.4byte	.LASF19
 1840 00db 01       		.sleb128 1
 1841 00dc 07       		.uleb128 0x7
 1842 00dd 70030000 		.4byte	.LASF20
 1843 00e1 02       		.sleb128 2
 1844 00e2 07       		.uleb128 0x7
 1845 00e3 11020000 		.4byte	.LASF21
 1846 00e7 03       		.sleb128 3
 1847 00e8 00       		.byte	0
 1848 00e9 06       		.uleb128 0x6
 1849 00ea 67000000 		.4byte	.LASF23
 1850 00ee 01       		.byte	0x1
 1851 00ef 01       		.byte	0x1
 1852 00f0 C0       		.byte	0xc0
 1853 00f1 0E010000 		.4byte	0x10e
 1854 00f5 07       		.uleb128 0x7
 1855 00f6 EC030000 		.4byte	.LASF24
 1856 00fa 00       		.sleb128 0
 1857 00fb 07       		.uleb128 0x7
 1858 00fc 46000000 		.4byte	.LASF25
 1859 0100 01       		.sleb128 1
 1860 0101 07       		.uleb128 0x7
 1861 0102 33020000 		.4byte	.LASF26
 1862 0106 02       		.sleb128 2
 1863 0107 07       		.uleb128 0x7
 1864 0108 B1040000 		.4byte	.LASF27
 1865 010c 03       		.sleb128 3
 1866 010d 00       		.byte	0
 1867 010e 08       		.uleb128 0x8
 1868 010f B0020000 		.4byte	.LASF28
 1869 0113 01       		.byte	0x1
 1870 0114 01       		.byte	0x1
 1871 0115 0E01     		.2byte	0x10e
 1872 0117 34010000 		.4byte	0x134
 1873 011b 07       		.uleb128 0x7
 1874 011c 51010000 		.4byte	.LASF29
 1875 0120 00       		.sleb128 0
 1876 0121 07       		.uleb128 0x7
 1877 0122 1F020000 		.4byte	.LASF30
 1878 0126 01       		.sleb128 1
 1879 0127 07       		.uleb128 0x7
 1880 0128 A4040000 		.4byte	.LASF31
 1881 012c 02       		.sleb128 2
 1882 012d 07       		.uleb128 0x7
 1883 012e 7F040000 		.4byte	.LASF32
 1884 0132 03       		.sleb128 3
 1885 0133 00       		.byte	0
 1886 0134 08       		.uleb128 0x8
 1887 0135 C4000000 		.4byte	.LASF33
 1888 0139 01       		.byte	0x1
 1889 013a 01       		.byte	0x1
 1890 013b 9A01     		.2byte	0x19a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 52


 1891 013d 5A010000 		.4byte	0x15a
 1892 0141 07       		.uleb128 0x7
 1893 0142 81000000 		.4byte	.LASF34
 1894 0146 00       		.sleb128 0
 1895 0147 07       		.uleb128 0x7
 1896 0148 16000000 		.4byte	.LASF35
 1897 014c 01       		.sleb128 1
 1898 014d 07       		.uleb128 0x7
 1899 014e B6000000 		.4byte	.LASF36
 1900 0152 02       		.sleb128 2
 1901 0153 07       		.uleb128 0x7
 1902 0154 78020000 		.4byte	.LASF37
 1903 0158 03       		.sleb128 3
 1904 0159 00       		.byte	0
 1905 015a 08       		.uleb128 0x8
 1906 015b 8D010000 		.4byte	.LASF38
 1907 015f 01       		.byte	0x1
 1908 0160 01       		.byte	0x1
 1909 0161 2102     		.2byte	0x221
 1910 0163 80010000 		.4byte	0x180
 1911 0167 07       		.uleb128 0x7
 1912 0168 0D000000 		.4byte	.LASF39
 1913 016c 00       		.sleb128 0
 1914 016d 07       		.uleb128 0x7
 1915 016e AE000000 		.4byte	.LASF40
 1916 0172 01       		.sleb128 1
 1917 0173 07       		.uleb128 0x7
 1918 0174 5C000000 		.4byte	.LASF41
 1919 0178 02       		.sleb128 2
 1920 0179 07       		.uleb128 0x7
 1921 017a 31010000 		.4byte	.LASF42
 1922 017e 03       		.sleb128 3
 1923 017f 00       		.byte	0
 1924 0180 09       		.uleb128 0x9
 1925 0181 D9030000 		.4byte	.LASF43
 1926 0185 01       		.byte	0x1
 1927 0186 47       		.byte	0x47
 1928 0187 00000000 		.4byte	.LFB34
 1929 018b 28000000 		.4byte	.LFE34-.LFB34
 1930 018f 01       		.uleb128 0x1
 1931 0190 9C       		.byte	0x9c
 1932 0191 A4010000 		.4byte	0x1a4
 1933 0195 0A       		.uleb128 0xa
 1934 0196 E7010000 		.4byte	.LASF45
 1935 019a 01       		.byte	0x1
 1936 019b 49       		.byte	0x49
 1937 019c 81000000 		.4byte	0x81
 1938 01a0 02       		.uleb128 0x2
 1939 01a1 91       		.byte	0x91
 1940 01a2 74       		.sleb128 -12
 1941 01a3 00       		.byte	0
 1942 01a4 09       		.uleb128 0x9
 1943 01a5 BD020000 		.4byte	.LASF44
 1944 01a9 01       		.byte	0x1
 1945 01aa 60       		.byte	0x60
 1946 01ab 00000000 		.4byte	.LFB35
 1947 01af 62000000 		.4byte	.LFE35-.LFB35
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 53


 1948 01b3 01       		.uleb128 0x1
 1949 01b4 9C       		.byte	0x9c
 1950 01b5 EA010000 		.4byte	0x1ea
 1951 01b9 0B       		.uleb128 0xb
 1952 01ba 7300     		.ascii	"s\000"
 1953 01bc 01       		.byte	0x1
 1954 01bd 60       		.byte	0x60
 1955 01be B3000000 		.4byte	0xb3
 1956 01c2 02       		.uleb128 0x2
 1957 01c3 91       		.byte	0x91
 1958 01c4 64       		.sleb128 -28
 1959 01c5 0C       		.uleb128 0xc
 1960 01c6 6900     		.ascii	"i\000"
 1961 01c8 01       		.byte	0x1
 1962 01c9 62       		.byte	0x62
 1963 01ca 5D000000 		.4byte	0x5d
 1964 01ce 02       		.uleb128 0x2
 1965 01cf 91       		.byte	0x91
 1966 01d0 74       		.sleb128 -12
 1967 01d1 0C       		.uleb128 0xc
 1968 01d2 6A00     		.ascii	"j\000"
 1969 01d4 01       		.byte	0x1
 1970 01d5 62       		.byte	0x62
 1971 01d6 5D000000 		.4byte	0x5d
 1972 01da 02       		.uleb128 0x2
 1973 01db 91       		.byte	0x91
 1974 01dc 70       		.sleb128 -16
 1975 01dd 0C       		.uleb128 0xc
 1976 01de 6300     		.ascii	"c\000"
 1977 01e0 01       		.byte	0x1
 1978 01e1 63       		.byte	0x63
 1979 01e2 A5000000 		.4byte	0xa5
 1980 01e6 02       		.uleb128 0x2
 1981 01e7 91       		.byte	0x91
 1982 01e8 6F       		.sleb128 -17
 1983 01e9 00       		.byte	0
 1984 01ea 09       		.uleb128 0x9
 1985 01eb C6010000 		.4byte	.LASF46
 1986 01ef 01       		.byte	0x1
 1987 01f0 6C       		.byte	0x6c
 1988 01f1 00000000 		.4byte	.LFB36
 1989 01f5 7C000000 		.4byte	.LFE36-.LFB36
 1990 01f9 01       		.uleb128 0x1
 1991 01fa 9C       		.byte	0x9c
 1992 01fb 32020000 		.4byte	0x232
 1993 01ff 0B       		.uleb128 0xb
 1994 0200 6E00     		.ascii	"n\000"
 1995 0202 01       		.byte	0x1
 1996 0203 6C       		.byte	0x6c
 1997 0204 5D000000 		.4byte	0x5d
 1998 0208 02       		.uleb128 0x2
 1999 0209 91       		.byte	0x91
 2000 020a 64       		.sleb128 -28
 2001 020b 0B       		.uleb128 0xb
 2002 020c 7300     		.ascii	"s\000"
 2003 020e 01       		.byte	0x1
 2004 020f 6C       		.byte	0x6c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 54


 2005 0210 B3000000 		.4byte	0xb3
 2006 0214 02       		.uleb128 0x2
 2007 0215 91       		.byte	0x91
 2008 0216 60       		.sleb128 -32
 2009 0217 0C       		.uleb128 0xc
 2010 0218 6900     		.ascii	"i\000"
 2011 021a 01       		.byte	0x1
 2012 021b 6E       		.byte	0x6e
 2013 021c 5D000000 		.4byte	0x5d
 2014 0220 02       		.uleb128 0x2
 2015 0221 91       		.byte	0x91
 2016 0222 6C       		.sleb128 -20
 2017 0223 0A       		.uleb128 0xa
 2018 0224 7D030000 		.4byte	.LASF47
 2019 0228 01       		.byte	0x1
 2020 0229 6E       		.byte	0x6e
 2021 022a 5D000000 		.4byte	0x5d
 2022 022e 02       		.uleb128 0x2
 2023 022f 91       		.byte	0x91
 2024 0230 68       		.sleb128 -24
 2025 0231 00       		.byte	0
 2026 0232 0D       		.uleb128 0xd
 2027 0233 A8030000 		.4byte	.LASF54
 2028 0237 01       		.byte	0x1
 2029 0238 7E       		.byte	0x7e
 2030 0239 76000000 		.4byte	0x76
 2031 023d 00000000 		.4byte	.LFB37
 2032 0241 28000000 		.4byte	.LFE37-.LFB37
 2033 0245 01       		.uleb128 0x1
 2034 0246 9C       		.byte	0x9c
 2035 0247 68020000 		.4byte	0x268
 2036 024b 0E       		.uleb128 0xe
 2037 024c 35030000 		.4byte	.LASF48
 2038 0250 01       		.byte	0x1
 2039 0251 7E       		.byte	0x7e
 2040 0252 81000000 		.4byte	0x81
 2041 0256 02       		.uleb128 0x2
 2042 0257 91       		.byte	0x91
 2043 0258 6C       		.sleb128 -20
 2044 0259 0A       		.uleb128 0xa
 2045 025a A7020000 		.4byte	.LASF49
 2046 025e 01       		.byte	0x1
 2047 025f 7F       		.byte	0x7f
 2048 0260 76000000 		.4byte	0x76
 2049 0264 02       		.uleb128 0x2
 2050 0265 91       		.byte	0x91
 2051 0266 76       		.sleb128 -10
 2052 0267 00       		.byte	0
 2053 0268 0F       		.uleb128 0xf
 2054 0269 2C000000 		.4byte	.LASF50
 2055 026d 01       		.byte	0x1
 2056 026e 83       		.byte	0x83
 2057 026f 00000000 		.4byte	.LFB38
 2058 0273 18000000 		.4byte	.LFE38-.LFB38
 2059 0277 01       		.uleb128 0x1
 2060 0278 9C       		.byte	0x9c
 2061 0279 10       		.uleb128 0x10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 55


 2062 027a 75010000 		.4byte	.LASF51
 2063 027e 01       		.byte	0x1
 2064 027f 91       		.byte	0x91
 2065 0280 00000000 		.4byte	.LFB39
 2066 0284 48000000 		.4byte	.LFE39-.LFB39
 2067 0288 01       		.uleb128 0x1
 2068 0289 9C       		.byte	0x9c
 2069 028a 10       		.uleb128 0x10
 2070 028b 12010000 		.4byte	.LASF52
 2071 028f 01       		.byte	0x1
 2072 0290 C2       		.byte	0xc2
 2073 0291 00000000 		.4byte	.LFB40
 2074 0295 48000000 		.4byte	.LFE40-.LFB40
 2075 0299 01       		.uleb128 0x1
 2076 029a 9C       		.byte	0x9c
 2077 029b 10       		.uleb128 0x10
 2078 029c CB010000 		.4byte	.LASF53
 2079 02a0 01       		.byte	0x1
 2080 02a1 F1       		.byte	0xf1
 2081 02a2 00000000 		.4byte	.LFB41
 2082 02a6 08000000 		.4byte	.LFE41-.LFB41
 2083 02aa 01       		.uleb128 0x1
 2084 02ab 9C       		.byte	0x9c
 2085 02ac 0D       		.uleb128 0xd
 2086 02ad 89040000 		.4byte	.LASF55
 2087 02b1 01       		.byte	0x1
 2088 02b2 FB       		.byte	0xfb
 2089 02b3 76000000 		.4byte	0x76
 2090 02b7 00000000 		.4byte	.LFB42
 2091 02bb 78000000 		.4byte	.LFE42-.LFB42
 2092 02bf 01       		.uleb128 0x1
 2093 02c0 9C       		.byte	0x9c
 2094 02c1 0A030000 		.4byte	0x30a
 2095 02c5 0E       		.uleb128 0xe
 2096 02c6 90030000 		.4byte	.LASF56
 2097 02ca 01       		.byte	0x1
 2098 02cb FB       		.byte	0xfb
 2099 02cc 0A030000 		.4byte	0x30a
 2100 02d0 02       		.uleb128 0x2
 2101 02d1 91       		.byte	0x91
 2102 02d2 64       		.sleb128 -28
 2103 02d3 0E       		.uleb128 0xe
 2104 02d4 29020000 		.4byte	.LASF57
 2105 02d8 01       		.byte	0x1
 2106 02d9 FB       		.byte	0xfb
 2107 02da 6B000000 		.4byte	0x6b
 2108 02de 02       		.uleb128 0x2
 2109 02df 91       		.byte	0x91
 2110 02e0 63       		.sleb128 -29
 2111 02e1 0C       		.uleb128 0xc
 2112 02e2 6900     		.ascii	"i\000"
 2113 02e4 01       		.byte	0x1
 2114 02e5 FD       		.byte	0xfd
 2115 02e6 6B000000 		.4byte	0x6b
 2116 02ea 02       		.uleb128 0x2
 2117 02eb 91       		.byte	0x91
 2118 02ec 77       		.sleb128 -9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 56


 2119 02ed 0C       		.uleb128 0xc
 2120 02ee 73756D00 		.ascii	"sum\000"
 2121 02f2 01       		.byte	0x1
 2122 02f3 FE       		.byte	0xfe
 2123 02f4 81000000 		.4byte	0x81
 2124 02f8 02       		.uleb128 0x2
 2125 02f9 91       		.byte	0x91
 2126 02fa 70       		.sleb128 -16
 2127 02fb 0C       		.uleb128 0xc
 2128 02fc 61766700 		.ascii	"avg\000"
 2129 0300 01       		.byte	0x1
 2130 0301 FF       		.byte	0xff
 2131 0302 76000000 		.4byte	0x76
 2132 0306 02       		.uleb128 0x2
 2133 0307 91       		.byte	0x91
 2134 0308 6E       		.sleb128 -18
 2135 0309 00       		.byte	0
 2136 030a 05       		.uleb128 0x5
 2137 030b 04       		.byte	0x4
 2138 030c 76000000 		.4byte	0x76
 2139 0310 11       		.uleb128 0x11
 2140 0311 F6000000 		.4byte	.LASF60
 2141 0315 01       		.byte	0x1
 2142 0316 0F01     		.2byte	0x10f
 2143 0318 00000000 		.4byte	.LFB43
 2144 031c 74020000 		.4byte	.LFE43-.LFB43
 2145 0320 01       		.uleb128 0x1
 2146 0321 9C       		.byte	0x9c
 2147 0322 7A030000 		.4byte	0x37a
 2148 0326 12       		.uleb128 0x12
 2149 0327 6900     		.ascii	"i\000"
 2150 0329 01       		.byte	0x1
 2151 032a 1501     		.2byte	0x115
 2152 032c 6B000000 		.4byte	0x6b
 2153 0330 02       		.uleb128 0x2
 2154 0331 91       		.byte	0x91
 2155 0332 6F       		.sleb128 -17
 2156 0333 12       		.uleb128 0x12
 2157 0334 61766700 		.ascii	"avg\000"
 2158 0338 01       		.byte	0x1
 2159 0339 1601     		.2byte	0x116
 2160 033b 76000000 		.4byte	0x76
 2161 033f 02       		.uleb128 0x2
 2162 0340 91       		.byte	0x91
 2163 0341 68       		.sleb128 -24
 2164 0342 13       		.uleb128 0x13
 2165 0343 9C040000 		.4byte	.LASF58
 2166 0347 01       		.byte	0x1
 2167 0348 1701     		.2byte	0x117
 2168 034a 76000000 		.4byte	0x76
 2169 034e 02       		.uleb128 0x2
 2170 034f 91       		.byte	0x91
 2171 0350 6A       		.sleb128 -22
 2172 0351 13       		.uleb128 0x13
 2173 0352 A7020000 		.4byte	.LASF49
 2174 0356 01       		.byte	0x1
 2175 0357 1801     		.2byte	0x118
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 57


 2176 0359 76000000 		.4byte	0x76
 2177 035d 02       		.uleb128 0x2
 2178 035e 91       		.byte	0x91
 2179 035f 6C       		.sleb128 -20
 2180 0360 14       		.uleb128 0x14
 2181 0361 2C000000 		.4byte	.LBB2
 2182 0365 BE010000 		.4byte	.LBE2-.LBB2
 2183 0369 13       		.uleb128 0x13
 2184 036a 59030000 		.4byte	.LASF59
 2185 036e 01       		.byte	0x1
 2186 036f 3501     		.2byte	0x135
 2187 0371 7A030000 		.4byte	0x37a
 2188 0375 02       		.uleb128 0x2
 2189 0376 91       		.byte	0x91
 2190 0377 54       		.sleb128 -44
 2191 0378 00       		.byte	0
 2192 0379 00       		.byte	0
 2193 037a 15       		.uleb128 0x15
 2194 037b A5000000 		.4byte	0xa5
 2195 037f 8A030000 		.4byte	0x38a
 2196 0383 16       		.uleb128 0x16
 2197 0384 AC000000 		.4byte	0xac
 2198 0388 13       		.byte	0x13
 2199 0389 00       		.byte	0
 2200 038a 11       		.uleb128 0x11
 2201 038b 60030000 		.4byte	.LASF61
 2202 038f 01       		.byte	0x1
 2203 0390 9B01     		.2byte	0x19b
 2204 0392 00000000 		.4byte	.LFB44
 2205 0396 24020000 		.4byte	.LFE44-.LFB44
 2206 039a 01       		.uleb128 0x1
 2207 039b 9C       		.byte	0x9c
 2208 039c DB030000 		.4byte	0x3db
 2209 03a0 12       		.uleb128 0x12
 2210 03a1 6900     		.ascii	"i\000"
 2211 03a3 01       		.byte	0x1
 2212 03a4 A101     		.2byte	0x1a1
 2213 03a6 6B000000 		.4byte	0x6b
 2214 03aa 02       		.uleb128 0x2
 2215 03ab 91       		.byte	0x91
 2216 03ac 6F       		.sleb128 -17
 2217 03ad 12       		.uleb128 0x12
 2218 03ae 61766700 		.ascii	"avg\000"
 2219 03b2 01       		.byte	0x1
 2220 03b3 A201     		.2byte	0x1a2
 2221 03b5 76000000 		.4byte	0x76
 2222 03b9 02       		.uleb128 0x2
 2223 03ba 91       		.byte	0x91
 2224 03bb 68       		.sleb128 -24
 2225 03bc 13       		.uleb128 0x13
 2226 03bd 9C040000 		.4byte	.LASF58
 2227 03c1 01       		.byte	0x1
 2228 03c2 A301     		.2byte	0x1a3
 2229 03c4 76000000 		.4byte	0x76
 2230 03c8 02       		.uleb128 0x2
 2231 03c9 91       		.byte	0x91
 2232 03ca 6A       		.sleb128 -22
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 58


 2233 03cb 13       		.uleb128 0x13
 2234 03cc A7020000 		.4byte	.LASF49
 2235 03d0 01       		.byte	0x1
 2236 03d1 A401     		.2byte	0x1a4
 2237 03d3 76000000 		.4byte	0x76
 2238 03d7 02       		.uleb128 0x2
 2239 03d8 91       		.byte	0x91
 2240 03d9 6C       		.sleb128 -20
 2241 03da 00       		.byte	0
 2242 03db 11       		.uleb128 0x11
 2243 03dc 69010000 		.4byte	.LASF62
 2244 03e0 01       		.byte	0x1
 2245 03e1 2202     		.2byte	0x222
 2246 03e3 00000000 		.4byte	.LFB45
 2247 03e7 58010000 		.4byte	.LFE45-.LFB45
 2248 03eb 01       		.uleb128 0x1
 2249 03ec 9C       		.byte	0x9c
 2250 03ed 1D040000 		.4byte	0x41d
 2251 03f1 12       		.uleb128 0x12
 2252 03f2 6900     		.ascii	"i\000"
 2253 03f4 01       		.byte	0x1
 2254 03f5 2702     		.2byte	0x227
 2255 03f7 6B000000 		.4byte	0x6b
 2256 03fb 02       		.uleb128 0x2
 2257 03fc 91       		.byte	0x91
 2258 03fd 6F       		.sleb128 -17
 2259 03fe 12       		.uleb128 0x12
 2260 03ff 61766700 		.ascii	"avg\000"
 2261 0403 01       		.byte	0x1
 2262 0404 2802     		.2byte	0x228
 2263 0406 76000000 		.4byte	0x76
 2264 040a 02       		.uleb128 0x2
 2265 040b 91       		.byte	0x91
 2266 040c 6A       		.sleb128 -22
 2267 040d 13       		.uleb128 0x13
 2268 040e 9C040000 		.4byte	.LASF58
 2269 0412 01       		.byte	0x1
 2270 0413 2902     		.2byte	0x229
 2271 0415 76000000 		.4byte	0x76
 2272 0419 02       		.uleb128 0x2
 2273 041a 91       		.byte	0x91
 2274 041b 6C       		.sleb128 -20
 2275 041c 00       		.byte	0
 2276 041d 17       		.uleb128 0x17
 2277 041e 24030000 		.4byte	.LASF63
 2278 0422 01       		.byte	0x1
 2279 0423 7003     		.2byte	0x370
 2280 0425 5D000000 		.4byte	0x5d
 2281 0429 00000000 		.4byte	.LFB46
 2282 042d D4000000 		.4byte	.LFE46-.LFB46
 2283 0431 01       		.uleb128 0x1
 2284 0432 9C       		.byte	0x9c
 2285 0433 60040000 		.4byte	0x460
 2286 0437 12       		.uleb128 0x12
 2287 0438 7400     		.ascii	"t\000"
 2288 043a 01       		.byte	0x1
 2289 043b 7503     		.2byte	0x375
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 59


 2290 043d B9000000 		.4byte	0xb9
 2291 0441 02       		.uleb128 0x2
 2292 0442 91       		.byte	0x91
 2293 0443 70       		.sleb128 -16
 2294 0444 18       		.uleb128 0x18
 2295 0445 EF010000 		.4byte	.LASF89
 2296 0449 01       		.byte	0x1
 2297 044a 7603     		.2byte	0x376
 2298 044c 6B000000 		.4byte	0x6b
 2299 0450 13       		.uleb128 0x13
 2300 0451 8D000000 		.4byte	.LASF64
 2301 0455 01       		.byte	0x1
 2302 0456 7703     		.2byte	0x377
 2303 0458 5D000000 		.4byte	0x5d
 2304 045c 02       		.uleb128 0x2
 2305 045d 91       		.byte	0x91
 2306 045e 74       		.sleb128 -12
 2307 045f 00       		.byte	0
 2308 0460 15       		.uleb128 0x15
 2309 0461 6B000000 		.4byte	0x6b
 2310 0465 70040000 		.4byte	0x470
 2311 0469 16       		.uleb128 0x16
 2312 046a AC000000 		.4byte	0xac
 2313 046e 0D       		.byte	0xd
 2314 046f 00       		.byte	0
 2315 0470 19       		.uleb128 0x19
 2316 0471 91040000 		.4byte	.LASF65
 2317 0475 01       		.byte	0x1
 2318 0476 22       		.byte	0x22
 2319 0477 60040000 		.4byte	0x460
 2320 047b 05       		.uleb128 0x5
 2321 047c 03       		.byte	0x3
 2322 047d 00000000 		.4byte	data_array
 2323 0481 19       		.uleb128 0x19
 2324 0482 7A000000 		.4byte	.LASF66
 2325 0486 01       		.byte	0x1
 2326 0487 24       		.byte	0x24
 2327 0488 6B000000 		.4byte	0x6b
 2328 048c 05       		.uleb128 0x5
 2329 048d 03       		.byte	0x3
 2330 048e 00000000 		.4byte	wiznet
 2331 0492 19       		.uleb128 0x19
 2332 0493 E3030000 		.4byte	.LASF67
 2333 0497 01       		.byte	0x1
 2334 0498 25       		.byte	0x25
 2335 0499 6B000000 		.4byte	0x6b
 2336 049d 05       		.uleb128 0x5
 2337 049e 03       		.byte	0x3
 2338 049f 00000000 		.4byte	new_pack
 2339 04a3 19       		.uleb128 0x19
 2340 04a4 A0010000 		.4byte	.LASF68
 2341 04a8 01       		.byte	0x1
 2342 04a9 28       		.byte	0x28
 2343 04aa 6B000000 		.4byte	0x6b
 2344 04ae 05       		.uleb128 0x5
 2345 04af 03       		.byte	0x3
 2346 04b0 00000000 		.4byte	fin_exec
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 60


 2347 04b4 15       		.uleb128 0x15
 2348 04b5 8C000000 		.4byte	0x8c
 2349 04b9 C4040000 		.4byte	0x4c4
 2350 04bd 16       		.uleb128 0x16
 2351 04be AC000000 		.4byte	0xac
 2352 04c2 09       		.byte	0x9
 2353 04c3 00       		.byte	0
 2354 04c4 19       		.uleb128 0x19
 2355 04c5 06020000 		.4byte	.LASF69
 2356 04c9 01       		.byte	0x1
 2357 04ca 2B       		.byte	0x2b
 2358 04cb B4040000 		.4byte	0x4b4
 2359 04cf 05       		.uleb128 0x5
 2360 04d0 03       		.byte	0x3
 2361 04d1 00000000 		.4byte	test_array
 2362 04d5 19       		.uleb128 0x19
 2363 04d6 03010000 		.4byte	.LASF70
 2364 04da 01       		.byte	0x1
 2365 04db 2E       		.byte	0x2e
 2366 04dc 6B000000 		.4byte	0x6b
 2367 04e0 05       		.uleb128 0x5
 2368 04e1 03       		.byte	0x3
 2369 04e2 00000000 		.4byte	elbw_arr_cspot
 2370 04e6 15       		.uleb128 0x15
 2371 04e7 76000000 		.4byte	0x76
 2372 04eb F6040000 		.4byte	0x4f6
 2373 04ef 16       		.uleb128 0x16
 2374 04f0 AC000000 		.4byte	0xac
 2375 04f4 13       		.byte	0x13
 2376 04f5 00       		.byte	0
 2377 04f6 19       		.uleb128 0x19
 2378 04f7 29030000 		.4byte	.LASF71
 2379 04fb 01       		.byte	0x1
 2380 04fc 2F       		.byte	0x2f
 2381 04fd E6040000 		.4byte	0x4e6
 2382 0501 05       		.uleb128 0x5
 2383 0502 03       		.byte	0x3
 2384 0503 00000000 		.4byte	elbow_array
 2385 0507 19       		.uleb128 0x19
 2386 0508 B4030000 		.4byte	.LASF72
 2387 050c 01       		.byte	0x1
 2388 050d 32       		.byte	0x32
 2389 050e 6B000000 		.4byte	0x6b
 2390 0512 05       		.uleb128 0x5
 2391 0513 03       		.byte	0x3
 2392 0514 00000000 		.4byte	shldr_arr_cspot
 2393 0518 19       		.uleb128 0x19
 2394 0519 4A030000 		.4byte	.LASF73
 2395 051d 01       		.byte	0x1
 2396 051e 33       		.byte	0x33
 2397 051f E6040000 		.4byte	0x4e6
 2398 0523 05       		.uleb128 0x5
 2399 0524 03       		.byte	0x3
 2400 0525 00000000 		.4byte	shoulder_array
 2401 0529 19       		.uleb128 0x19
 2402 052a A9010000 		.4byte	.LASF74
 2403 052e 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 61


 2404 052f 36       		.byte	0x36
 2405 0530 6B000000 		.4byte	0x6b
 2406 0534 05       		.uleb128 0x5
 2407 0535 03       		.byte	0x3
 2408 0536 00000000 		.4byte	BA_arr_cspot
 2409 053a 19       		.uleb128 0x19
 2410 053b 3D030000 		.4byte	.LASF75
 2411 053f 01       		.byte	0x1
 2412 0540 37       		.byte	0x37
 2413 0541 E6040000 		.4byte	0x4e6
 2414 0545 05       		.uleb128 0x5
 2415 0546 03       		.byte	0x3
 2416 0547 00000000 		.4byte	baseAz_array
 2417 054b 19       		.uleb128 0x19
 2418 054c 5C010000 		.4byte	.LASF76
 2419 0550 01       		.byte	0x1
 2420 0551 3A       		.byte	0x3a
 2421 0552 6B000000 		.4byte	0x6b
 2422 0556 05       		.uleb128 0x5
 2423 0557 03       		.byte	0x3
 2424 0558 00000000 		.4byte	WT_arr_cspot
 2425 055c 19       		.uleb128 0x19
 2426 055d 1E010000 		.4byte	.LASF77
 2427 0561 01       		.byte	0x1
 2428 0562 3B       		.byte	0x3b
 2429 0563 E6040000 		.4byte	0x4e6
 2430 0567 05       		.uleb128 0x5
 2431 0568 03       		.byte	0x3
 2432 0569 00000000 		.4byte	WT_array
 2433 056d 19       		.uleb128 0x19
 2434 056e 00000000 		.4byte	.LASF78
 2435 0572 01       		.byte	0x1
 2436 0573 3E       		.byte	0x3e
 2437 0574 6B000000 		.4byte	0x6b
 2438 0578 05       		.uleb128 0x5
 2439 0579 03       		.byte	0x3
 2440 057a 00000000 		.4byte	WR_arr_cspot
 2441 057e 19       		.uleb128 0x19
 2442 057f A5000000 		.4byte	.LASF79
 2443 0583 01       		.byte	0x1
 2444 0584 3F       		.byte	0x3f
 2445 0585 E6040000 		.4byte	0x4e6
 2446 0589 05       		.uleb128 0x5
 2447 058a 03       		.byte	0x3
 2448 058b 00000000 		.4byte	WR_array
 2449 058f 19       		.uleb128 0x19
 2450 0590 27010000 		.4byte	.LASF80
 2451 0594 01       		.byte	0x1
 2452 0595 42       		.byte	0x42
 2453 0596 6B000000 		.4byte	0x6b
 2454 059a 05       		.uleb128 0x5
 2455 059b 03       		.byte	0x3
 2456 059c 00000000 		.4byte	timerFlag
 2457 05a0 19       		.uleb128 0x19
 2458 05a1 E6000000 		.4byte	.LASF81
 2459 05a5 01       		.byte	0x1
 2460 05a6 8F       		.byte	0x8f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 62


 2461 05a7 C4000000 		.4byte	0xc4
 2462 05ab 05       		.uleb128 0x5
 2463 05ac 03       		.byte	0x3
 2464 05ad 00000000 		.4byte	wristTilt_state
 2465 05b1 19       		.uleb128 0x19
 2466 05b2 96030000 		.4byte	.LASF82
 2467 05b6 01       		.byte	0x1
 2468 05b7 C0       		.byte	0xc0
 2469 05b8 E9000000 		.4byte	0xe9
 2470 05bc 05       		.uleb128 0x5
 2471 05bd 03       		.byte	0x3
 2472 05be 00000000 		.4byte	wristRotate_state
 2473 05c2 1A       		.uleb128 0x1a
 2474 05c3 C4030000 		.4byte	.LASF83
 2475 05c7 01       		.byte	0x1
 2476 05c8 0E01     		.2byte	0x10e
 2477 05ca 0E010000 		.4byte	0x10e
 2478 05ce 05       		.uleb128 0x5
 2479 05cf 03       		.byte	0x3
 2480 05d0 00000000 		.4byte	elbow_state
 2481 05d4 1A       		.uleb128 0x1a
 2482 05d5 F7010000 		.4byte	.LASF84
 2483 05d9 01       		.byte	0x1
 2484 05da 9A01     		.2byte	0x19a
 2485 05dc 34010000 		.4byte	0x134
 2486 05e0 05       		.uleb128 0x5
 2487 05e1 03       		.byte	0x3
 2488 05e2 00000000 		.4byte	shoulder_state
 2489 05e6 1A       		.uleb128 0x1a
 2490 05e7 D4000000 		.4byte	.LASF85
 2491 05eb 01       		.byte	0x1
 2492 05ec 2102     		.2byte	0x221
 2493 05ee 5A010000 		.4byte	0x15a
 2494 05f2 05       		.uleb128 0x5
 2495 05f3 03       		.byte	0x3
 2496 05f4 00000000 		.4byte	baseAzimuth_state
 2497 05f8 00       		.byte	0
 2498              		.section	.debug_abbrev,"",%progbits
 2499              	.Ldebug_abbrev0:
 2500 0000 01       		.uleb128 0x1
 2501 0001 11       		.uleb128 0x11
 2502 0002 01       		.byte	0x1
 2503 0003 25       		.uleb128 0x25
 2504 0004 0E       		.uleb128 0xe
 2505 0005 13       		.uleb128 0x13
 2506 0006 0B       		.uleb128 0xb
 2507 0007 03       		.uleb128 0x3
 2508 0008 0E       		.uleb128 0xe
 2509 0009 1B       		.uleb128 0x1b
 2510 000a 0E       		.uleb128 0xe
 2511 000b 55       		.uleb128 0x55
 2512 000c 17       		.uleb128 0x17
 2513 000d 11       		.uleb128 0x11
 2514 000e 01       		.uleb128 0x1
 2515 000f 10       		.uleb128 0x10
 2516 0010 17       		.uleb128 0x17
 2517 0011 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 63


 2518 0012 00       		.byte	0
 2519 0013 02       		.uleb128 0x2
 2520 0014 24       		.uleb128 0x24
 2521 0015 00       		.byte	0
 2522 0016 0B       		.uleb128 0xb
 2523 0017 0B       		.uleb128 0xb
 2524 0018 3E       		.uleb128 0x3e
 2525 0019 0B       		.uleb128 0xb
 2526 001a 03       		.uleb128 0x3
 2527 001b 0E       		.uleb128 0xe
 2528 001c 00       		.byte	0
 2529 001d 00       		.byte	0
 2530 001e 03       		.uleb128 0x3
 2531 001f 24       		.uleb128 0x24
 2532 0020 00       		.byte	0
 2533 0021 0B       		.uleb128 0xb
 2534 0022 0B       		.uleb128 0xb
 2535 0023 3E       		.uleb128 0x3e
 2536 0024 0B       		.uleb128 0xb
 2537 0025 03       		.uleb128 0x3
 2538 0026 08       		.uleb128 0x8
 2539 0027 00       		.byte	0
 2540 0028 00       		.byte	0
 2541 0029 04       		.uleb128 0x4
 2542 002a 16       		.uleb128 0x16
 2543 002b 00       		.byte	0
 2544 002c 03       		.uleb128 0x3
 2545 002d 0E       		.uleb128 0xe
 2546 002e 3A       		.uleb128 0x3a
 2547 002f 0B       		.uleb128 0xb
 2548 0030 3B       		.uleb128 0x3b
 2549 0031 0B       		.uleb128 0xb
 2550 0032 49       		.uleb128 0x49
 2551 0033 13       		.uleb128 0x13
 2552 0034 00       		.byte	0
 2553 0035 00       		.byte	0
 2554 0036 05       		.uleb128 0x5
 2555 0037 0F       		.uleb128 0xf
 2556 0038 00       		.byte	0
 2557 0039 0B       		.uleb128 0xb
 2558 003a 0B       		.uleb128 0xb
 2559 003b 49       		.uleb128 0x49
 2560 003c 13       		.uleb128 0x13
 2561 003d 00       		.byte	0
 2562 003e 00       		.byte	0
 2563 003f 06       		.uleb128 0x6
 2564 0040 04       		.uleb128 0x4
 2565 0041 01       		.byte	0x1
 2566 0042 03       		.uleb128 0x3
 2567 0043 0E       		.uleb128 0xe
 2568 0044 0B       		.uleb128 0xb
 2569 0045 0B       		.uleb128 0xb
 2570 0046 3A       		.uleb128 0x3a
 2571 0047 0B       		.uleb128 0xb
 2572 0048 3B       		.uleb128 0x3b
 2573 0049 0B       		.uleb128 0xb
 2574 004a 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 64


 2575 004b 13       		.uleb128 0x13
 2576 004c 00       		.byte	0
 2577 004d 00       		.byte	0
 2578 004e 07       		.uleb128 0x7
 2579 004f 28       		.uleb128 0x28
 2580 0050 00       		.byte	0
 2581 0051 03       		.uleb128 0x3
 2582 0052 0E       		.uleb128 0xe
 2583 0053 1C       		.uleb128 0x1c
 2584 0054 0D       		.uleb128 0xd
 2585 0055 00       		.byte	0
 2586 0056 00       		.byte	0
 2587 0057 08       		.uleb128 0x8
 2588 0058 04       		.uleb128 0x4
 2589 0059 01       		.byte	0x1
 2590 005a 03       		.uleb128 0x3
 2591 005b 0E       		.uleb128 0xe
 2592 005c 0B       		.uleb128 0xb
 2593 005d 0B       		.uleb128 0xb
 2594 005e 3A       		.uleb128 0x3a
 2595 005f 0B       		.uleb128 0xb
 2596 0060 3B       		.uleb128 0x3b
 2597 0061 05       		.uleb128 0x5
 2598 0062 01       		.uleb128 0x1
 2599 0063 13       		.uleb128 0x13
 2600 0064 00       		.byte	0
 2601 0065 00       		.byte	0
 2602 0066 09       		.uleb128 0x9
 2603 0067 2E       		.uleb128 0x2e
 2604 0068 01       		.byte	0x1
 2605 0069 3F       		.uleb128 0x3f
 2606 006a 19       		.uleb128 0x19
 2607 006b 03       		.uleb128 0x3
 2608 006c 0E       		.uleb128 0xe
 2609 006d 3A       		.uleb128 0x3a
 2610 006e 0B       		.uleb128 0xb
 2611 006f 3B       		.uleb128 0x3b
 2612 0070 0B       		.uleb128 0xb
 2613 0071 27       		.uleb128 0x27
 2614 0072 19       		.uleb128 0x19
 2615 0073 11       		.uleb128 0x11
 2616 0074 01       		.uleb128 0x1
 2617 0075 12       		.uleb128 0x12
 2618 0076 06       		.uleb128 0x6
 2619 0077 40       		.uleb128 0x40
 2620 0078 18       		.uleb128 0x18
 2621 0079 9642     		.uleb128 0x2116
 2622 007b 19       		.uleb128 0x19
 2623 007c 01       		.uleb128 0x1
 2624 007d 13       		.uleb128 0x13
 2625 007e 00       		.byte	0
 2626 007f 00       		.byte	0
 2627 0080 0A       		.uleb128 0xa
 2628 0081 34       		.uleb128 0x34
 2629 0082 00       		.byte	0
 2630 0083 03       		.uleb128 0x3
 2631 0084 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 65


 2632 0085 3A       		.uleb128 0x3a
 2633 0086 0B       		.uleb128 0xb
 2634 0087 3B       		.uleb128 0x3b
 2635 0088 0B       		.uleb128 0xb
 2636 0089 49       		.uleb128 0x49
 2637 008a 13       		.uleb128 0x13
 2638 008b 02       		.uleb128 0x2
 2639 008c 18       		.uleb128 0x18
 2640 008d 00       		.byte	0
 2641 008e 00       		.byte	0
 2642 008f 0B       		.uleb128 0xb
 2643 0090 05       		.uleb128 0x5
 2644 0091 00       		.byte	0
 2645 0092 03       		.uleb128 0x3
 2646 0093 08       		.uleb128 0x8
 2647 0094 3A       		.uleb128 0x3a
 2648 0095 0B       		.uleb128 0xb
 2649 0096 3B       		.uleb128 0x3b
 2650 0097 0B       		.uleb128 0xb
 2651 0098 49       		.uleb128 0x49
 2652 0099 13       		.uleb128 0x13
 2653 009a 02       		.uleb128 0x2
 2654 009b 18       		.uleb128 0x18
 2655 009c 00       		.byte	0
 2656 009d 00       		.byte	0
 2657 009e 0C       		.uleb128 0xc
 2658 009f 34       		.uleb128 0x34
 2659 00a0 00       		.byte	0
 2660 00a1 03       		.uleb128 0x3
 2661 00a2 08       		.uleb128 0x8
 2662 00a3 3A       		.uleb128 0x3a
 2663 00a4 0B       		.uleb128 0xb
 2664 00a5 3B       		.uleb128 0x3b
 2665 00a6 0B       		.uleb128 0xb
 2666 00a7 49       		.uleb128 0x49
 2667 00a8 13       		.uleb128 0x13
 2668 00a9 02       		.uleb128 0x2
 2669 00aa 18       		.uleb128 0x18
 2670 00ab 00       		.byte	0
 2671 00ac 00       		.byte	0
 2672 00ad 0D       		.uleb128 0xd
 2673 00ae 2E       		.uleb128 0x2e
 2674 00af 01       		.byte	0x1
 2675 00b0 3F       		.uleb128 0x3f
 2676 00b1 19       		.uleb128 0x19
 2677 00b2 03       		.uleb128 0x3
 2678 00b3 0E       		.uleb128 0xe
 2679 00b4 3A       		.uleb128 0x3a
 2680 00b5 0B       		.uleb128 0xb
 2681 00b6 3B       		.uleb128 0x3b
 2682 00b7 0B       		.uleb128 0xb
 2683 00b8 27       		.uleb128 0x27
 2684 00b9 19       		.uleb128 0x19
 2685 00ba 49       		.uleb128 0x49
 2686 00bb 13       		.uleb128 0x13
 2687 00bc 11       		.uleb128 0x11
 2688 00bd 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 66


 2689 00be 12       		.uleb128 0x12
 2690 00bf 06       		.uleb128 0x6
 2691 00c0 40       		.uleb128 0x40
 2692 00c1 18       		.uleb128 0x18
 2693 00c2 9642     		.uleb128 0x2116
 2694 00c4 19       		.uleb128 0x19
 2695 00c5 01       		.uleb128 0x1
 2696 00c6 13       		.uleb128 0x13
 2697 00c7 00       		.byte	0
 2698 00c8 00       		.byte	0
 2699 00c9 0E       		.uleb128 0xe
 2700 00ca 05       		.uleb128 0x5
 2701 00cb 00       		.byte	0
 2702 00cc 03       		.uleb128 0x3
 2703 00cd 0E       		.uleb128 0xe
 2704 00ce 3A       		.uleb128 0x3a
 2705 00cf 0B       		.uleb128 0xb
 2706 00d0 3B       		.uleb128 0x3b
 2707 00d1 0B       		.uleb128 0xb
 2708 00d2 49       		.uleb128 0x49
 2709 00d3 13       		.uleb128 0x13
 2710 00d4 02       		.uleb128 0x2
 2711 00d5 18       		.uleb128 0x18
 2712 00d6 00       		.byte	0
 2713 00d7 00       		.byte	0
 2714 00d8 0F       		.uleb128 0xf
 2715 00d9 2E       		.uleb128 0x2e
 2716 00da 00       		.byte	0
 2717 00db 3F       		.uleb128 0x3f
 2718 00dc 19       		.uleb128 0x19
 2719 00dd 03       		.uleb128 0x3
 2720 00de 0E       		.uleb128 0xe
 2721 00df 3A       		.uleb128 0x3a
 2722 00e0 0B       		.uleb128 0xb
 2723 00e1 3B       		.uleb128 0x3b
 2724 00e2 0B       		.uleb128 0xb
 2725 00e3 11       		.uleb128 0x11
 2726 00e4 01       		.uleb128 0x1
 2727 00e5 12       		.uleb128 0x12
 2728 00e6 06       		.uleb128 0x6
 2729 00e7 40       		.uleb128 0x40
 2730 00e8 18       		.uleb128 0x18
 2731 00e9 9642     		.uleb128 0x2116
 2732 00eb 19       		.uleb128 0x19
 2733 00ec 00       		.byte	0
 2734 00ed 00       		.byte	0
 2735 00ee 10       		.uleb128 0x10
 2736 00ef 2E       		.uleb128 0x2e
 2737 00f0 00       		.byte	0
 2738 00f1 3F       		.uleb128 0x3f
 2739 00f2 19       		.uleb128 0x19
 2740 00f3 03       		.uleb128 0x3
 2741 00f4 0E       		.uleb128 0xe
 2742 00f5 3A       		.uleb128 0x3a
 2743 00f6 0B       		.uleb128 0xb
 2744 00f7 3B       		.uleb128 0x3b
 2745 00f8 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 67


 2746 00f9 11       		.uleb128 0x11
 2747 00fa 01       		.uleb128 0x1
 2748 00fb 12       		.uleb128 0x12
 2749 00fc 06       		.uleb128 0x6
 2750 00fd 40       		.uleb128 0x40
 2751 00fe 18       		.uleb128 0x18
 2752 00ff 9742     		.uleb128 0x2117
 2753 0101 19       		.uleb128 0x19
 2754 0102 00       		.byte	0
 2755 0103 00       		.byte	0
 2756 0104 11       		.uleb128 0x11
 2757 0105 2E       		.uleb128 0x2e
 2758 0106 01       		.byte	0x1
 2759 0107 3F       		.uleb128 0x3f
 2760 0108 19       		.uleb128 0x19
 2761 0109 03       		.uleb128 0x3
 2762 010a 0E       		.uleb128 0xe
 2763 010b 3A       		.uleb128 0x3a
 2764 010c 0B       		.uleb128 0xb
 2765 010d 3B       		.uleb128 0x3b
 2766 010e 05       		.uleb128 0x5
 2767 010f 11       		.uleb128 0x11
 2768 0110 01       		.uleb128 0x1
 2769 0111 12       		.uleb128 0x12
 2770 0112 06       		.uleb128 0x6
 2771 0113 40       		.uleb128 0x40
 2772 0114 18       		.uleb128 0x18
 2773 0115 9642     		.uleb128 0x2116
 2774 0117 19       		.uleb128 0x19
 2775 0118 01       		.uleb128 0x1
 2776 0119 13       		.uleb128 0x13
 2777 011a 00       		.byte	0
 2778 011b 00       		.byte	0
 2779 011c 12       		.uleb128 0x12
 2780 011d 34       		.uleb128 0x34
 2781 011e 00       		.byte	0
 2782 011f 03       		.uleb128 0x3
 2783 0120 08       		.uleb128 0x8
 2784 0121 3A       		.uleb128 0x3a
 2785 0122 0B       		.uleb128 0xb
 2786 0123 3B       		.uleb128 0x3b
 2787 0124 05       		.uleb128 0x5
 2788 0125 49       		.uleb128 0x49
 2789 0126 13       		.uleb128 0x13
 2790 0127 02       		.uleb128 0x2
 2791 0128 18       		.uleb128 0x18
 2792 0129 00       		.byte	0
 2793 012a 00       		.byte	0
 2794 012b 13       		.uleb128 0x13
 2795 012c 34       		.uleb128 0x34
 2796 012d 00       		.byte	0
 2797 012e 03       		.uleb128 0x3
 2798 012f 0E       		.uleb128 0xe
 2799 0130 3A       		.uleb128 0x3a
 2800 0131 0B       		.uleb128 0xb
 2801 0132 3B       		.uleb128 0x3b
 2802 0133 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 68


 2803 0134 49       		.uleb128 0x49
 2804 0135 13       		.uleb128 0x13
 2805 0136 02       		.uleb128 0x2
 2806 0137 18       		.uleb128 0x18
 2807 0138 00       		.byte	0
 2808 0139 00       		.byte	0
 2809 013a 14       		.uleb128 0x14
 2810 013b 0B       		.uleb128 0xb
 2811 013c 01       		.byte	0x1
 2812 013d 11       		.uleb128 0x11
 2813 013e 01       		.uleb128 0x1
 2814 013f 12       		.uleb128 0x12
 2815 0140 06       		.uleb128 0x6
 2816 0141 00       		.byte	0
 2817 0142 00       		.byte	0
 2818 0143 15       		.uleb128 0x15
 2819 0144 01       		.uleb128 0x1
 2820 0145 01       		.byte	0x1
 2821 0146 49       		.uleb128 0x49
 2822 0147 13       		.uleb128 0x13
 2823 0148 01       		.uleb128 0x1
 2824 0149 13       		.uleb128 0x13
 2825 014a 00       		.byte	0
 2826 014b 00       		.byte	0
 2827 014c 16       		.uleb128 0x16
 2828 014d 21       		.uleb128 0x21
 2829 014e 00       		.byte	0
 2830 014f 49       		.uleb128 0x49
 2831 0150 13       		.uleb128 0x13
 2832 0151 2F       		.uleb128 0x2f
 2833 0152 0B       		.uleb128 0xb
 2834 0153 00       		.byte	0
 2835 0154 00       		.byte	0
 2836 0155 17       		.uleb128 0x17
 2837 0156 2E       		.uleb128 0x2e
 2838 0157 01       		.byte	0x1
 2839 0158 3F       		.uleb128 0x3f
 2840 0159 19       		.uleb128 0x19
 2841 015a 03       		.uleb128 0x3
 2842 015b 0E       		.uleb128 0xe
 2843 015c 3A       		.uleb128 0x3a
 2844 015d 0B       		.uleb128 0xb
 2845 015e 3B       		.uleb128 0x3b
 2846 015f 05       		.uleb128 0x5
 2847 0160 49       		.uleb128 0x49
 2848 0161 13       		.uleb128 0x13
 2849 0162 11       		.uleb128 0x11
 2850 0163 01       		.uleb128 0x1
 2851 0164 12       		.uleb128 0x12
 2852 0165 06       		.uleb128 0x6
 2853 0166 40       		.uleb128 0x40
 2854 0167 18       		.uleb128 0x18
 2855 0168 9642     		.uleb128 0x2116
 2856 016a 19       		.uleb128 0x19
 2857 016b 01       		.uleb128 0x1
 2858 016c 13       		.uleb128 0x13
 2859 016d 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 69


 2860 016e 00       		.byte	0
 2861 016f 18       		.uleb128 0x18
 2862 0170 34       		.uleb128 0x34
 2863 0171 00       		.byte	0
 2864 0172 03       		.uleb128 0x3
 2865 0173 0E       		.uleb128 0xe
 2866 0174 3A       		.uleb128 0x3a
 2867 0175 0B       		.uleb128 0xb
 2868 0176 3B       		.uleb128 0x3b
 2869 0177 05       		.uleb128 0x5
 2870 0178 49       		.uleb128 0x49
 2871 0179 13       		.uleb128 0x13
 2872 017a 00       		.byte	0
 2873 017b 00       		.byte	0
 2874 017c 19       		.uleb128 0x19
 2875 017d 34       		.uleb128 0x34
 2876 017e 00       		.byte	0
 2877 017f 03       		.uleb128 0x3
 2878 0180 0E       		.uleb128 0xe
 2879 0181 3A       		.uleb128 0x3a
 2880 0182 0B       		.uleb128 0xb
 2881 0183 3B       		.uleb128 0x3b
 2882 0184 0B       		.uleb128 0xb
 2883 0185 49       		.uleb128 0x49
 2884 0186 13       		.uleb128 0x13
 2885 0187 3F       		.uleb128 0x3f
 2886 0188 19       		.uleb128 0x19
 2887 0189 02       		.uleb128 0x2
 2888 018a 18       		.uleb128 0x18
 2889 018b 00       		.byte	0
 2890 018c 00       		.byte	0
 2891 018d 1A       		.uleb128 0x1a
 2892 018e 34       		.uleb128 0x34
 2893 018f 00       		.byte	0
 2894 0190 03       		.uleb128 0x3
 2895 0191 0E       		.uleb128 0xe
 2896 0192 3A       		.uleb128 0x3a
 2897 0193 0B       		.uleb128 0xb
 2898 0194 3B       		.uleb128 0x3b
 2899 0195 05       		.uleb128 0x5
 2900 0196 49       		.uleb128 0x49
 2901 0197 13       		.uleb128 0x13
 2902 0198 3F       		.uleb128 0x3f
 2903 0199 19       		.uleb128 0x19
 2904 019a 02       		.uleb128 0x2
 2905 019b 18       		.uleb128 0x18
 2906 019c 00       		.byte	0
 2907 019d 00       		.byte	0
 2908 019e 00       		.byte	0
 2909              		.section	.debug_aranges,"",%progbits
 2910 0000 7C000000 		.4byte	0x7c
 2911 0004 0200     		.2byte	0x2
 2912 0006 00000000 		.4byte	.Ldebug_info0
 2913 000a 04       		.byte	0x4
 2914 000b 00       		.byte	0
 2915 000c 0000     		.2byte	0
 2916 000e 0000     		.2byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 70


 2917 0010 00000000 		.4byte	.LFB34
 2918 0014 28000000 		.4byte	.LFE34-.LFB34
 2919 0018 00000000 		.4byte	.LFB35
 2920 001c 62000000 		.4byte	.LFE35-.LFB35
 2921 0020 00000000 		.4byte	.LFB36
 2922 0024 7C000000 		.4byte	.LFE36-.LFB36
 2923 0028 00000000 		.4byte	.LFB37
 2924 002c 28000000 		.4byte	.LFE37-.LFB37
 2925 0030 00000000 		.4byte	.LFB38
 2926 0034 18000000 		.4byte	.LFE38-.LFB38
 2927 0038 00000000 		.4byte	.LFB39
 2928 003c 48000000 		.4byte	.LFE39-.LFB39
 2929 0040 00000000 		.4byte	.LFB40
 2930 0044 48000000 		.4byte	.LFE40-.LFB40
 2931 0048 00000000 		.4byte	.LFB41
 2932 004c 08000000 		.4byte	.LFE41-.LFB41
 2933 0050 00000000 		.4byte	.LFB42
 2934 0054 78000000 		.4byte	.LFE42-.LFB42
 2935 0058 00000000 		.4byte	.LFB43
 2936 005c 74020000 		.4byte	.LFE43-.LFB43
 2937 0060 00000000 		.4byte	.LFB44
 2938 0064 24020000 		.4byte	.LFE44-.LFB44
 2939 0068 00000000 		.4byte	.LFB45
 2940 006c 58010000 		.4byte	.LFE45-.LFB45
 2941 0070 00000000 		.4byte	.LFB46
 2942 0074 D4000000 		.4byte	.LFE46-.LFB46
 2943 0078 00000000 		.4byte	0
 2944 007c 00000000 		.4byte	0
 2945              		.section	.debug_ranges,"",%progbits
 2946              	.Ldebug_ranges0:
 2947 0000 00000000 		.4byte	.LFB34
 2948 0004 28000000 		.4byte	.LFE34
 2949 0008 00000000 		.4byte	.LFB35
 2950 000c 62000000 		.4byte	.LFE35
 2951 0010 00000000 		.4byte	.LFB36
 2952 0014 7C000000 		.4byte	.LFE36
 2953 0018 00000000 		.4byte	.LFB37
 2954 001c 28000000 		.4byte	.LFE37
 2955 0020 00000000 		.4byte	.LFB38
 2956 0024 18000000 		.4byte	.LFE38
 2957 0028 00000000 		.4byte	.LFB39
 2958 002c 48000000 		.4byte	.LFE39
 2959 0030 00000000 		.4byte	.LFB40
 2960 0034 48000000 		.4byte	.LFE40
 2961 0038 00000000 		.4byte	.LFB41
 2962 003c 08000000 		.4byte	.LFE41
 2963 0040 00000000 		.4byte	.LFB42
 2964 0044 78000000 		.4byte	.LFE42
 2965 0048 00000000 		.4byte	.LFB43
 2966 004c 74020000 		.4byte	.LFE43
 2967 0050 00000000 		.4byte	.LFB44
 2968 0054 24020000 		.4byte	.LFE44
 2969 0058 00000000 		.4byte	.LFB45
 2970 005c 58010000 		.4byte	.LFE45
 2971 0060 00000000 		.4byte	.LFB46
 2972 0064 D4000000 		.4byte	.LFE46
 2973 0068 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 71


 2974 006c 00000000 		.4byte	0
 2975              		.section	.debug_line,"",%progbits
 2976              	.Ldebug_line0:
 2977 0000 36030000 		.section	.debug_str,"MS",%progbits,1
 2977      0200BF00 
 2977      00000201 
 2977      FB0E0D00 
 2977      01010101 
 2978              	.LASF78:
 2979 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 2979      72725F63 
 2979      73706F74 
 2979      00
 2980              	.LASF39:
 2981 000d 42415F73 		.ascii	"BA_start\000"
 2981      74617274 
 2981      00
 2982              	.LASF35:
 2983 0016 73686C64 		.ascii	"shldr_init\000"
 2983      725F696E 
 2983      697400
 2984              	.LASF19:
 2985 0021 74696C74 		.ascii	"tilt_start\000"
 2985      5F737461 
 2985      727400
 2986              	.LASF50:
 2987 002c 66696C6C 		.ascii	"fill_data_array\000"
 2987      5F646174 
 2987      615F6172 
 2987      72617900 
 2988              	.LASF2:
 2989 003c 73686F72 		.ascii	"short int\000"
 2989      7420696E 
 2989      7400
 2990              	.LASF25:
 2991 0046 726F7461 		.ascii	"rotate_start\000"
 2991      74655F73 
 2991      74617274 
 2991      00
 2992              	.LASF16:
 2993 0053 73697A65 		.ascii	"sizetype\000"
 2993      74797065 
 2993      00
 2994              	.LASF41:
 2995 005c 42415F65 		.ascii	"BA_execute\000"
 2995      78656375 
 2995      746500
 2996              	.LASF23:
 2997 0067 77726973 		.ascii	"wristRotate_states\000"
 2997      74526F74 
 2997      6174655F 
 2997      73746174 
 2997      657300
 2998              	.LASF66:
 2999 007a 77697A6E 		.ascii	"wiznet\000"
 2999      657400
 3000              	.LASF34:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 72


 3001 0081 73686C64 		.ascii	"shldr_start\000"
 3001      725F7374 
 3001      61727400 
 3002              	.LASF64:
 3003 008d 64697265 		.ascii	"direction\000"
 3003      6374696F 
 3003      6E00
 3004              	.LASF6:
 3005 0097 6C6F6E67 		.ascii	"long long int\000"
 3005      206C6F6E 
 3005      6720696E 
 3005      7400
 3006              	.LASF79:
 3007 00a5 57525F61 		.ascii	"WR_array\000"
 3007      72726179 
 3007      00
 3008              	.LASF40:
 3009 00ae 42415F69 		.ascii	"BA_init\000"
 3009      6E697400 
 3010              	.LASF36:
 3011 00b6 73686C64 		.ascii	"shldr_execute\000"
 3011      725F6578 
 3011      65637574 
 3011      6500
 3012              	.LASF33:
 3013 00c4 73686F75 		.ascii	"shoulder_states\000"
 3013      6C646572 
 3013      5F737461 
 3013      74657300 
 3014              	.LASF85:
 3015 00d4 62617365 		.ascii	"baseAzimuth_state\000"
 3015      417A696D 
 3015      7574685F 
 3015      73746174 
 3015      6500
 3016              	.LASF81:
 3017 00e6 77726973 		.ascii	"wristTilt_state\000"
 3017      7454696C 
 3017      745F7374 
 3017      61746500 
 3018              	.LASF60:
 3019 00f6 656C626F 		.ascii	"elbow\000"
 3019      7700
 3020              	.LASF10:
 3021 00fc 75696E74 		.ascii	"uint16\000"
 3021      313600
 3022              	.LASF70:
 3023 0103 656C6277 		.ascii	"elbw_arr_cspot\000"
 3023      5F617272 
 3023      5F637370 
 3023      6F7400
 3024              	.LASF52:
 3025 0112 77726973 		.ascii	"wristRotate\000"
 3025      74526F74 
 3025      61746500 
 3026              	.LASF77:
 3027 011e 57545F61 		.ascii	"WT_array\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 73


 3027      72726179 
 3027      00
 3028              	.LASF80:
 3029 0127 74696D65 		.ascii	"timerFlag\000"
 3029      72466C61 
 3029      6700
 3030              	.LASF42:
 3031 0131 42415F77 		.ascii	"BA_wait\000"
 3031      61697400 
 3032              	.LASF12:
 3033 0139 696E7431 		.ascii	"int16\000"
 3033      3600
 3034              	.LASF0:
 3035 013f 7369676E 		.ascii	"signed char\000"
 3035      65642063 
 3035      68617200 
 3036              	.LASF13:
 3037 014b 666C6F61 		.ascii	"float\000"
 3037      7400
 3038              	.LASF29:
 3039 0151 656C6277 		.ascii	"elbw_start\000"
 3039      5F737461 
 3039      727400
 3040              	.LASF76:
 3041 015c 57545F61 		.ascii	"WT_arr_cspot\000"
 3041      72725F63 
 3041      73706F74 
 3041      00
 3042              	.LASF62:
 3043 0169 62617365 		.ascii	"baseAzimuth\000"
 3043      417A696D 
 3043      75746800 
 3044              	.LASF51:
 3045 0175 77726973 		.ascii	"wristTilt\000"
 3045      7454696C 
 3045      7400
 3046              	.LASF15:
 3047 017f 63686172 		.ascii	"char\000"
 3047      00
 3048              	.LASF4:
 3049 0184 6C6F6E67 		.ascii	"long int\000"
 3049      20696E74 
 3049      00
 3050              	.LASF38:
 3051 018d 62617365 		.ascii	"baseAzimuth_states\000"
 3051      417A696D 
 3051      7574685F 
 3051      73746174 
 3051      657300
 3052              	.LASF68:
 3053 01a0 66696E5F 		.ascii	"fin_exec\000"
 3053      65786563 
 3053      00
 3054              	.LASF74:
 3055 01a9 42415F61 		.ascii	"BA_arr_cspot\000"
 3055      72725F63 
 3055      73706F74 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 74


 3055      00
 3056              	.LASF18:
 3057 01b6 74696C74 		.ascii	"tilt_init\000"
 3057      5F696E69 
 3057      7400
 3058              	.LASF9:
 3059 01c0 75696E74 		.ascii	"uint8\000"
 3059      3800
 3060              	.LASF46:
 3061 01c6 69746F61 		.ascii	"itoa\000"
 3061      00
 3062              	.LASF53:
 3063 01cb 73656E64 		.ascii	"send_feedback\000"
 3063      5F666565 
 3063      64626163 
 3063      6B00
 3064              	.LASF1:
 3065 01d9 756E7369 		.ascii	"unsigned char\000"
 3065      676E6564 
 3065      20636861 
 3065      7200
 3066              	.LASF45:
 3067 01e7 6973725F 		.ascii	"isr_var\000"
 3067      76617200 
 3068              	.LASF89:
 3069 01ef 636F756E 		.ascii	"counter\000"
 3069      74657200 
 3070              	.LASF84:
 3071 01f7 73686F75 		.ascii	"shoulder_state\000"
 3071      6C646572 
 3071      5F737461 
 3071      746500
 3072              	.LASF69:
 3073 0206 74657374 		.ascii	"test_array\000"
 3073      5F617272 
 3073      617900
 3074              	.LASF21:
 3075 0211 74696C74 		.ascii	"tilt_feedback\000"
 3075      5F666565 
 3075      64626163 
 3075      6B00
 3076              	.LASF30:
 3077 021f 656C6277 		.ascii	"elbw_init\000"
 3077      5F696E69 
 3077      7400
 3078              	.LASF57:
 3079 0229 6E756D5F 		.ascii	"num_items\000"
 3079      6974656D 
 3079      7300
 3080              	.LASF26:
 3081 0233 726F7461 		.ascii	"rotate_control\000"
 3081      74655F63 
 3081      6F6E7472 
 3081      6F6C00
 3082              	.LASF7:
 3083 0242 6C6F6E67 		.ascii	"long long unsigned int\000"
 3083      206C6F6E 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 75


 3083      6720756E 
 3083      7369676E 
 3083      65642069 
 3084              	.LASF8:
 3085 0259 756E7369 		.ascii	"unsigned int\000"
 3085      676E6564 
 3085      20696E74 
 3085      00
 3086              	.LASF5:
 3087 0266 6C6F6E67 		.ascii	"long unsigned int\000"
 3087      20756E73 
 3087      69676E65 
 3087      6420696E 
 3087      7400
 3088              	.LASF37:
 3089 0278 73686C64 		.ascii	"shldr_wait\000"
 3089      725F7761 
 3089      697400
 3090              	.LASF3:
 3091 0283 73686F72 		.ascii	"short unsigned int\000"
 3091      7420756E 
 3091      7369676E 
 3091      65642069 
 3091      6E7400
 3092              	.LASF22:
 3093 0296 77726973 		.ascii	"wristTilt_states\000"
 3093      7454696C 
 3093      745F7374 
 3093      61746573 
 3093      00
 3094              	.LASF49:
 3095 02a7 66656564 		.ascii	"feedback\000"
 3095      6261636B 
 3095      00
 3096              	.LASF28:
 3097 02b0 656C626F 		.ascii	"elbow_states\000"
 3097      775F7374 
 3097      61746573 
 3097      00
 3098              	.LASF44:
 3099 02bd 72657665 		.ascii	"reverse\000"
 3099      72736500 
 3100              	.LASF88:
 3101 02c5 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 3101      73657273 
 3101      5C53616D 
 3101      75656C5C 
 3101      446F6375 
 3102 02f3 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 3102      5C61726D 
 3102      5F636F6E 
 3102      74726F6C 
 3102      6C65725F 
 3103 0323 00       		.ascii	"\000"
 3104              	.LASF63:
 3105 0324 6D61696E 		.ascii	"main\000"
 3105      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 76


 3106              	.LASF71:
 3107 0329 656C626F 		.ascii	"elbow_array\000"
 3107      775F6172 
 3107      72617900 
 3108              	.LASF48:
 3109 0335 6368616E 		.ascii	"channel\000"
 3109      6E656C00 
 3110              	.LASF75:
 3111 033d 62617365 		.ascii	"baseAz_array\000"
 3111      417A5F61 
 3111      72726179 
 3111      00
 3112              	.LASF73:
 3113 034a 73686F75 		.ascii	"shoulder_array\000"
 3113      6C646572 
 3113      5F617272 
 3113      617900
 3114              	.LASF59:
 3115 0359 62756666 		.ascii	"buffer\000"
 3115      657200
 3116              	.LASF61:
 3117 0360 73686F75 		.ascii	"shoulder\000"
 3117      6C646572 
 3117      00
 3118              	.LASF11:
 3119 0369 75696E74 		.ascii	"uint32\000"
 3119      333200
 3120              	.LASF20:
 3121 0370 74696C74 		.ascii	"tilt_control\000"
 3121      5F636F6E 
 3121      74726F6C 
 3121      00
 3122              	.LASF47:
 3123 037d 7369676E 		.ascii	"sign\000"
 3123      00
 3124              	.LASF14:
 3125 0382 646F7562 		.ascii	"double\000"
 3125      6C6500
 3126              	.LASF17:
 3127 0389 74696D65 		.ascii	"time_t\000"
 3127      5F7400
 3128              	.LASF56:
 3129 0390 61727261 		.ascii	"array\000"
 3129      7900
 3130              	.LASF82:
 3131 0396 77726973 		.ascii	"wristRotate_state\000"
 3131      74526F74 
 3131      6174655F 
 3131      73746174 
 3131      6500
 3132              	.LASF54:
 3133 03a8 706F7446 		.ascii	"potFeedback\000"
 3133      65656462 
 3133      61636B00 
 3134              	.LASF72:
 3135 03b4 73686C64 		.ascii	"shldr_arr_cspot\000"
 3135      725F6172 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 77


 3135      725F6373 
 3135      706F7400 
 3136              	.LASF83:
 3137 03c4 656C626F 		.ascii	"elbow_state\000"
 3137      775F7374 
 3137      61746500 
 3138              	.LASF87:
 3139 03d0 2E5C6D61 		.ascii	".\\main.c\000"
 3139      696E2E63 
 3139      00
 3140              	.LASF43:
 3141 03d9 74696D65 		.ascii	"timer_isr\000"
 3141      725F6973 
 3141      7200
 3142              	.LASF67:
 3143 03e3 6E65775F 		.ascii	"new_pack\000"
 3143      7061636B 
 3143      00
 3144              	.LASF24:
 3145 03ec 726F7461 		.ascii	"rotate_init\000"
 3145      74655F69 
 3145      6E697400 
 3146              	.LASF86:
 3147 03f8 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3147      4320342E 
 3147      382E3420 
 3147      32303134 
 3147      30353236 
 3148 042b 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3148      20726576 
 3148      6973696F 
 3148      6E203231 
 3148      31333538 
 3149 045e 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 3149      74643D67 
 3149      6E753939 
 3149      202D6666 
 3149      756E6374 
 3150              	.LASF32:
 3151 047f 656C6277 		.ascii	"elbw_wait\000"
 3151      5F776169 
 3151      7400
 3152              	.LASF55:
 3153 0489 61766572 		.ascii	"average\000"
 3153      61676500 
 3154              	.LASF65:
 3155 0491 64617461 		.ascii	"data_array\000"
 3155      5F617272 
 3155      617900
 3156              	.LASF58:
 3157 049c 636F6D6D 		.ascii	"command\000"
 3157      616E6400 
 3158              	.LASF31:
 3159 04a4 656C6277 		.ascii	"elbw_execute\000"
 3159      5F657865 
 3159      63757465 
 3159      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccVYHXz7.s 			page 78


 3160              	.LASF27:
 3161 04b1 726F7461 		.ascii	"rotate_feedback\000"
 3161      74655F66 
 3161      65656462 
 3161      61636B00 
 3162              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

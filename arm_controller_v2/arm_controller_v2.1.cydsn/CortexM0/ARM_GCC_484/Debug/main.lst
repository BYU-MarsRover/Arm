ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	WT_arr_cspot,1,1
  29              		.comm	WT_array,40,4
  30              		.comm	WR_arr_cspot,1,1
  31              		.comm	WR_array,40,4
  32              		.comm	timerFlag,1,1
  33              		.section	.text.timer_isr,"ax",%progbits
  34              		.align	2
  35              		.global	timer_isr
  36              		.code	16
  37              		.thumb_func
  38              		.type	timer_isr, %function
  39              	timer_isr:
  40              	.LFB33:
  41              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** #define ELBOW_UPPER_BOUND 1000
  12:.\main.c      **** #define ELBOW_LOWER_BOUND 100
  13:.\main.c      **** #define SHOULDER_UPPER_BOUND 64000
  14:.\main.c      **** #define SHOULDER_LOWER_BOUND 0
  15:.\main.c      **** #define SHOULDER_POT 0
  16:.\main.c      **** #define ELBOW_POT 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 2


  17:.\main.c      **** 
  18:.\main.c      **** #define BA_BYTE_1 4
  19:.\main.c      **** #define BA_BYTE_2 5
  20:.\main.c      **** #define SHLDR_BYTE_1 6
  21:.\main.c      **** #define SHLDR_BYTE_2 7
  22:.\main.c      **** #define ELBW_BYTE_1 8
  23:.\main.c      **** #define ELBW_BYTE_2 9
  24:.\main.c      **** #define WT_BYTE_1 10
  25:.\main.c      **** #define WR_BYTE_2 11
  26:.\main.c      **** 
  27:.\main.c      **** #define DATA_ARRAY_SIZE 14
  28:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  29:.\main.c      **** 
  30:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  31:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  32:.\main.c      **** 
  33:.\main.c      **** #define NUM_OF_SM 3
  34:.\main.c      **** uint8 fin_exec; //counts
  35:.\main.c      **** 
  36:.\main.c      **** #define TEST_ARRAY_SIZE 10
  37:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  38:.\main.c      **** 
  39:.\main.c      **** #define ELBW_ARR_SIZE 20
  40:.\main.c      **** uint8 elbw_arr_cspot;
  41:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  42:.\main.c      **** 
  43:.\main.c      **** #define SHLDR_ARR_SIZE 20
  44:.\main.c      **** uint8 shldr_arr_cspot;
  45:.\main.c      **** uint16 shoulder_array[SHLDR_ARR_SIZE];
  46:.\main.c      **** 
  47:.\main.c      **** #define BA_ARR_SIZE 20
  48:.\main.c      **** uint8 BA_arr_cspot;
  49:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  50:.\main.c      **** 
  51:.\main.c      **** #define WT_ARR_SIZE 20  //for wristTilt
  52:.\main.c      **** uint8 WT_arr_cspot;
  53:.\main.c      **** uint16 WT_array[WT_ARR_SIZE];
  54:.\main.c      **** 
  55:.\main.c      **** #define WR_ARR_SIZE 20  //for wristRotate
  56:.\main.c      **** uint8 WR_arr_cspot;
  57:.\main.c      **** uint16 WR_array[WR_ARR_SIZE];
  58:.\main.c      **** 
  59:.\main.c      **** //uint16 feedback_count;
  60:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  61:.\main.c      **** 
  62:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  63:.\main.c      **** ///set to the time of the longest path for our code
  64:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  65:.\main.c      **** CY_ISR(timer_isr)
  66:.\main.c      **** {
  42              		.loc 1 66 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 3


  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  67:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  52              		.loc 1 67 0
  53 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  54 000a 031C     		mov	r3, r0
  55 000c 7B60     		str	r3, [r7, #4]
  68:.\main.c      ****     timerFlag = 1;
  56              		.loc 1 68 0
  57 000e 054B     		ldr	r3, .L2
  58 0010 0122     		mov	r2, #1
  59 0012 1A70     		strb	r2, [r3]
  69:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  60              		.loc 1 69 0
  61 0014 7B68     		ldr	r3, [r7, #4]
  62 0016 181C     		mov	r0, r3
  63 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  70:.\main.c      **** }
  64              		.loc 1 70 0
  65 001c BD46     		mov	sp, r7
  66 001e 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              	.L3:
  70 0022 C046     		.align	2
  71              	.L2:
  72 0024 00000000 		.word	timerFlag
  73              		.cfi_endproc
  74              	.LFE33:
  75              		.size	timer_isr, .-timer_isr
  76              		.section	.text.reverse,"ax",%progbits
  77              		.align	2
  78              		.global	reverse
  79              		.code	16
  80              		.thumb_func
  81              		.type	reverse, %function
  82              	reverse:
  83              	.LFB34:
  71:.\main.c      **** 
  72:.\main.c      **** 
  73:.\main.c      **** //Funtion declarations/definitions
  74:.\main.c      **** //TODO do we need to make a header for good practice?
  75:.\main.c      **** 
  76:.\main.c      **** //---------------------------------------------------
  77:.\main.c      **** //    Function stubs for the header
  78:.\main.c      **** //---------------------------------------------------
  79:.\main.c      **** void fill_data_array();
  80:.\main.c      **** void baseAzimuth();
  81:.\main.c      **** void shoulder();
  82:.\main.c      **** void elbow();
  83:.\main.c      **** void wristTilt();
  84:.\main.c      **** void wristRotate();
  85:.\main.c      **** void send_feedback();
  86:.\main.c      **** uint16 potFeedback();
  87:.\main.c      **** //--------------------------------------------------- END Function Stubs
  88:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 4


  89:.\main.c      **** // function to convert int to string
  90:.\main.c      **** void reverse(char s[])
  91:.\main.c      ****  {
  84              		.loc 1 91 0
  85              		.cfi_startproc
  86 0000 80B5     		push	{r7, lr}
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 86B0     		sub	sp, sp, #24
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  94 0006 7860     		str	r0, [r7, #4]
  92:.\main.c      ****      int i, j;
  93:.\main.c      ****      char c;
  94:.\main.c      ****  
  95:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  95              		.loc 1 95 0
  96 0008 0023     		mov	r3, #0
  97 000a 7B61     		str	r3, [r7, #20]
  98 000c 7B68     		ldr	r3, [r7, #4]
  99 000e 181C     		mov	r0, r3
 100 0010 FFF7FEFF 		bl	strlen
 101 0014 031C     		mov	r3, r0
 102 0016 013B     		sub	r3, r3, #1
 103 0018 3B61     		str	r3, [r7, #16]
 104 001a 1BE0     		b	.L5
 105              	.L6:
  96:.\main.c      ****          c = s[i];
 106              		.loc 1 96 0 discriminator 2
 107 001c 7B69     		ldr	r3, [r7, #20]
 108 001e 7A68     		ldr	r2, [r7, #4]
 109 0020 D218     		add	r2, r2, r3
 110 0022 3B1C     		mov	r3, r7
 111 0024 0F33     		add	r3, r3, #15
 112 0026 1278     		ldrb	r2, [r2]
 113 0028 1A70     		strb	r2, [r3]
  97:.\main.c      ****          s[i] = s[j];
 114              		.loc 1 97 0 discriminator 2
 115 002a 7B69     		ldr	r3, [r7, #20]
 116 002c 7A68     		ldr	r2, [r7, #4]
 117 002e D318     		add	r3, r2, r3
 118 0030 3A69     		ldr	r2, [r7, #16]
 119 0032 7968     		ldr	r1, [r7, #4]
 120 0034 8A18     		add	r2, r1, r2
 121 0036 1278     		ldrb	r2, [r2]
 122 0038 1A70     		strb	r2, [r3]
  98:.\main.c      ****          s[j] = c;
 123              		.loc 1 98 0 discriminator 2
 124 003a 3B69     		ldr	r3, [r7, #16]
 125 003c 7A68     		ldr	r2, [r7, #4]
 126 003e D318     		add	r3, r2, r3
 127 0040 3A1C     		mov	r2, r7
 128 0042 0F32     		add	r2, r2, #15
 129 0044 1278     		ldrb	r2, [r2]
 130 0046 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 5


  95:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 131              		.loc 1 95 0 discriminator 2
 132 0048 7B69     		ldr	r3, [r7, #20]
 133 004a 0133     		add	r3, r3, #1
 134 004c 7B61     		str	r3, [r7, #20]
 135 004e 3B69     		ldr	r3, [r7, #16]
 136 0050 013B     		sub	r3, r3, #1
 137 0052 3B61     		str	r3, [r7, #16]
 138              	.L5:
  95:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 139              		.loc 1 95 0 is_stmt 0 discriminator 1
 140 0054 7A69     		ldr	r2, [r7, #20]
 141 0056 3B69     		ldr	r3, [r7, #16]
 142 0058 9A42     		cmp	r2, r3
 143 005a DFDB     		blt	.L6
  99:.\main.c      ****      }
 100:.\main.c      ****  }
 144              		.loc 1 100 0 is_stmt 1
 145 005c BD46     		mov	sp, r7
 146 005e 06B0     		add	sp, sp, #24
 147              		@ sp needed
 148 0060 80BD     		pop	{r7, pc}
 149              		.cfi_endproc
 150              	.LFE34:
 151              		.size	reverse, .-reverse
 152              		.global	__aeabi_idivmod
 153              		.global	__aeabi_idiv
 154              		.section	.text.itoa,"ax",%progbits
 155              		.align	2
 156              		.global	itoa
 157              		.code	16
 158              		.thumb_func
 159              		.type	itoa, %function
 160              	itoa:
 161              	.LFB35:
 101:.\main.c      **** /* itoa:  convert n to characters in s */
 102:.\main.c      ****  void itoa(int n, char s[])
 103:.\main.c      ****  {
 162              		.loc 1 103 0
 163              		.cfi_startproc
 164 0000 90B5     		push	{r4, r7, lr}
 165              		.cfi_def_cfa_offset 12
 166              		.cfi_offset 4, -12
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 85B0     		sub	sp, sp, #20
 170              		.cfi_def_cfa_offset 32
 171 0004 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 174 0008 3960     		str	r1, [r7]
 104:.\main.c      ****      int i, sign;
 105:.\main.c      ****  
 106:.\main.c      ****      if ((sign = n) < 0)  /* record sign */
 175              		.loc 1 106 0
 176 000a 7B68     		ldr	r3, [r7, #4]
 177 000c BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 6


 178 000e BB68     		ldr	r3, [r7, #8]
 179 0010 002B     		cmp	r3, #0
 180 0012 02DA     		bge	.L8
 107:.\main.c      ****          n = -n;          /* make n positive */
 181              		.loc 1 107 0
 182 0014 7B68     		ldr	r3, [r7, #4]
 183 0016 5B42     		neg	r3, r3
 184 0018 7B60     		str	r3, [r7, #4]
 185              	.L8:
 108:.\main.c      ****      i = 0;
 186              		.loc 1 108 0
 187 001a 0023     		mov	r3, #0
 188 001c FB60     		str	r3, [r7, #12]
 189              	.L9:
 109:.\main.c      ****      do {       /* generate digits in reverse order */
 110:.\main.c      ****          s[i++] = n % 10 + '0';   /* get next digit */
 190              		.loc 1 110 0 discriminator 1
 191 001e FB68     		ldr	r3, [r7, #12]
 192 0020 5A1C     		add	r2, r3, #1
 193 0022 FA60     		str	r2, [r7, #12]
 194 0024 3A68     		ldr	r2, [r7]
 195 0026 D418     		add	r4, r2, r3
 196 0028 7B68     		ldr	r3, [r7, #4]
 197 002a 181C     		mov	r0, r3
 198 002c 0A21     		mov	r1, #10
 199 002e FFF7FEFF 		bl	__aeabi_idivmod
 200 0032 0B1C     		mov	r3, r1
 201 0034 DBB2     		uxtb	r3, r3
 202 0036 3033     		add	r3, r3, #48
 203 0038 DBB2     		uxtb	r3, r3
 204 003a 2370     		strb	r3, [r4]
 111:.\main.c      ****      } while ((n /= 10) > 0);     /* delete it */
 205              		.loc 1 111 0 discriminator 1
 206 003c 7B68     		ldr	r3, [r7, #4]
 207 003e 181C     		mov	r0, r3
 208 0040 0A21     		mov	r1, #10
 209 0042 FFF7FEFF 		bl	__aeabi_idiv
 210 0046 031C     		mov	r3, r0
 211 0048 7B60     		str	r3, [r7, #4]
 212 004a 7B68     		ldr	r3, [r7, #4]
 213 004c 002B     		cmp	r3, #0
 214 004e E6DC     		bgt	.L9
 112:.\main.c      ****      if (sign < 0)
 215              		.loc 1 112 0
 216 0050 BB68     		ldr	r3, [r7, #8]
 217 0052 002B     		cmp	r3, #0
 218 0054 06DA     		bge	.L10
 113:.\main.c      ****          s[i++] = '-';
 219              		.loc 1 113 0
 220 0056 FB68     		ldr	r3, [r7, #12]
 221 0058 5A1C     		add	r2, r3, #1
 222 005a FA60     		str	r2, [r7, #12]
 223 005c 3A68     		ldr	r2, [r7]
 224 005e D318     		add	r3, r2, r3
 225 0060 2D22     		mov	r2, #45
 226 0062 1A70     		strb	r2, [r3]
 227              	.L10:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 7


 114:.\main.c      ****      s[i] = '\0';
 228              		.loc 1 114 0
 229 0064 FB68     		ldr	r3, [r7, #12]
 230 0066 3A68     		ldr	r2, [r7]
 231 0068 D318     		add	r3, r2, r3
 232 006a 0022     		mov	r2, #0
 233 006c 1A70     		strb	r2, [r3]
 115:.\main.c      ****      reverse(s);
 234              		.loc 1 115 0
 235 006e 3B68     		ldr	r3, [r7]
 236 0070 181C     		mov	r0, r3
 237 0072 FFF7FEFF 		bl	reverse
 116:.\main.c      ****  }
 238              		.loc 1 116 0
 239 0076 BD46     		mov	sp, r7
 240 0078 05B0     		add	sp, sp, #20
 241              		@ sp needed
 242 007a 90BD     		pop	{r4, r7, pc}
 243              		.cfi_endproc
 244              	.LFE35:
 245              		.size	itoa, .-itoa
 246              		.section	.text.potFeedback,"ax",%progbits
 247              		.align	2
 248              		.global	potFeedback
 249              		.code	16
 250              		.thumb_func
 251              		.type	potFeedback, %function
 252              	potFeedback:
 253              	.LFB36:
 117:.\main.c      **** 
 118:.\main.c      **** 
 119:.\main.c      **** 
 120:.\main.c      **** uint16 potFeedback(uint32 channel){
 254              		.loc 1 120 0
 255              		.cfi_startproc
 256 0000 80B5     		push	{r7, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 7, -8
 259              		.cfi_offset 14, -4
 260 0002 84B0     		sub	sp, sp, #16
 261              		.cfi_def_cfa_offset 24
 262 0004 00AF     		add	r7, sp, #0
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 121:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 265              		.loc 1 121 0
 266 0008 7B68     		ldr	r3, [r7, #4]
 267 000a 181C     		mov	r0, r3
 268 000c FFF7FEFF 		bl	ADC_GetResult16
 269 0010 031C     		mov	r3, r0
 270 0012 1A1C     		mov	r2, r3
 271 0014 3B1C     		mov	r3, r7
 272 0016 0E33     		add	r3, r3, #14
 273 0018 1A80     		strh	r2, [r3]
 122:.\main.c      ****     return feedback;
 274              		.loc 1 122 0
 275 001a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 8


 276 001c 0E33     		add	r3, r3, #14
 277 001e 1B88     		ldrh	r3, [r3]
 123:.\main.c      **** }
 278              		.loc 1 123 0
 279 0020 181C     		mov	r0, r3
 280 0022 BD46     		mov	sp, r7
 281 0024 04B0     		add	sp, sp, #16
 282              		@ sp needed
 283 0026 80BD     		pop	{r7, pc}
 284              		.cfi_endproc
 285              	.LFE36:
 286              		.size	potFeedback, .-potFeedback
 287              		.section	.text.fill_data_array,"ax",%progbits
 288              		.align	2
 289              		.global	fill_data_array
 290              		.code	16
 291              		.thumb_func
 292              		.type	fill_data_array, %function
 293              	fill_data_array:
 294              	.LFB37:
 124:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 125:.\main.c      **** void fill_data_array()
 126:.\main.c      **** {
 295              		.loc 1 126 0
 296              		.cfi_startproc
 297 0000 80B5     		push	{r7, lr}
 298              		.cfi_def_cfa_offset 8
 299              		.cfi_offset 7, -8
 300              		.cfi_offset 14, -4
 301 0002 82B0     		sub	sp, sp, #8
 302              		.cfi_def_cfa_offset 16
 303 0004 00AF     		add	r7, sp, #0
 304              		.cfi_def_cfa_register 7
 127:.\main.c      ****     uint8 i = 0;
 305              		.loc 1 127 0
 306 0006 FB1D     		add	r3, r7, #7
 307 0008 0022     		mov	r2, #0
 308 000a 1A70     		strb	r2, [r3]
 128:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 309              		.loc 1 128 0
 310 000c FB1D     		add	r3, r7, #7
 311 000e 0022     		mov	r2, #0
 312 0010 1A70     		strb	r2, [r3]
 313 0012 0FE0     		b	.L14
 314              	.L15:
 129:.\main.c      ****     {
 130:.\main.c      ****         data_array[i] = test_array[i];
 315              		.loc 1 130 0 discriminator 2
 316 0014 FB1D     		add	r3, r7, #7
 317 0016 1A78     		ldrb	r2, [r3]
 318 0018 FB1D     		add	r3, r7, #7
 319 001a 1978     		ldrb	r1, [r3]
 320 001c 094B     		ldr	r3, .L16
 321 001e 4900     		lsl	r1, r1, #1
 322 0020 CB5A     		ldrh	r3, [r1, r3]
 323 0022 99B2     		uxth	r1, r3
 324 0024 084B     		ldr	r3, .L16+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 9


 325 0026 5200     		lsl	r2, r2, #1
 326 0028 D152     		strh	r1, [r2, r3]
 128:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 327              		.loc 1 128 0 discriminator 2
 328 002a FB1D     		add	r3, r7, #7
 329 002c 1A78     		ldrb	r2, [r3]
 330 002e FB1D     		add	r3, r7, #7
 331 0030 0132     		add	r2, r2, #1
 332 0032 1A70     		strb	r2, [r3]
 333              	.L14:
 128:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 334              		.loc 1 128 0 is_stmt 0 discriminator 1
 335 0034 FB1D     		add	r3, r7, #7
 336 0036 1B78     		ldrb	r3, [r3]
 337 0038 092B     		cmp	r3, #9
 338 003a EBD9     		bls	.L15
 131:.\main.c      ****     }
 132:.\main.c      **** }
 339              		.loc 1 132 0 is_stmt 1
 340 003c BD46     		mov	sp, r7
 341 003e 02B0     		add	sp, sp, #8
 342              		@ sp needed
 343 0040 80BD     		pop	{r7, pc}
 344              	.L17:
 345 0042 C046     		.align	2
 346              	.L16:
 347 0044 00000000 		.word	test_array
 348 0048 00000000 		.word	data_array
 349              		.cfi_endproc
 350              	.LFE37:
 351              		.size	fill_data_array, .-fill_data_array
 352              		.comm	wristTilt_state,1,1
 353              		.section	.text.wristTilt,"ax",%progbits
 354              		.align	2
 355              		.global	wristTilt
 356              		.code	16
 357              		.thumb_func
 358              		.type	wristTilt, %function
 359              	wristTilt:
 360              	.LFB38:
 133:.\main.c      **** 
 134:.\main.c      **** 
 135:.\main.c      **** 
 136:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 137:.\main.c      **** //control the tilting motion of the wrist
 138:.\main.c      **** void wristTilt()
 139:.\main.c      **** {
 361              		.loc 1 139 0
 362              		.cfi_startproc
 363 0000 80B5     		push	{r7, lr}
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 7, -8
 366              		.cfi_offset 14, -4
 367 0002 00AF     		add	r7, sp, #0
 368              		.cfi_def_cfa_register 7
 140:.\main.c      ****     // Overview
 141:.\main.c      ****     //take instruction from data_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 10


 142:.\main.c      ****     //smooth input
 143:.\main.c      ****     //actuate the tilting using UART
 144:.\main.c      ****     //get feedback
 145:.\main.c      **** 
 146:.\main.c      ****     //-------------------------- 
 147:.\main.c      ****     // Dynamixel Servo specific
 148:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 149:.\main.c      ****     // TODO: Set the desired position
 150:.\main.c      **** 
 151:.\main.c      ****     //--------------------------
 152:.\main.c      ****     // State machine
 153:.\main.c      ****     
 154:.\main.c      ****         // Action
 155:.\main.c      ****     switch(wristTilt_state)
 369              		.loc 1 155 0
 370 0004 0F4B     		ldr	r3, .L34
 371 0006 1B78     		ldrb	r3, [r3]
 372 0008 012B     		cmp	r3, #1
 373 000a 06D0     		beq	.L31
 374 000c 07DC     		bgt	.L32
 375 000e 002B     		cmp	r3, #0
 376 0010 06D1     		bne	.L19
 156:.\main.c      ****     {
 157:.\main.c      ****         case tilt_init:
 158:.\main.c      ****             wristTilt_state = tilt_start;
 377              		.loc 1 158 0
 378 0012 0C4B     		ldr	r3, .L34
 379 0014 0122     		mov	r2, #1
 380 0016 1A70     		strb	r2, [r3]
 159:.\main.c      ****             break;
 381              		.loc 1 159 0
 382 0018 02E0     		b	.L19
 383              	.L31:
 160:.\main.c      ****         case tilt_start:
 161:.\main.c      ****             // Set the torque - this is a one time thing
 162:.\main.c      ****             // Set the speed - I think this is a one time thing
 163:.\main.c      ****             break;
 384              		.loc 1 163 0
 385 001a C046     		mov	r8, r8
 386 001c 00E0     		b	.L19
 387              	.L32:
 164:.\main.c      ****         case tilt_control:
 165:.\main.c      ****             break;
 388              		.loc 1 165 0
 389 001e C046     		mov	r8, r8
 390              	.L19:
 166:.\main.c      ****         case tilt_feedback:
 167:.\main.c      ****             break;
 168:.\main.c      ****     }
 169:.\main.c      ****         // Transistion
 170:.\main.c      ****     switch(wristTilt_state)
 391              		.loc 1 170 0
 392 0020 084B     		ldr	r3, .L34
 393 0022 1B78     		ldrb	r3, [r3]
 394 0024 012B     		cmp	r3, #1
 395 0026 06D0     		beq	.L26
 396 0028 09DC     		bgt	.L33
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 11


 397 002a 002B     		cmp	r3, #0
 398 002c 08D1     		bne	.L18
 171:.\main.c      ****     {
 172:.\main.c      ****         case tilt_init:
 173:.\main.c      ****             wristTilt_state = tilt_start;
 399              		.loc 1 173 0
 400 002e 054B     		ldr	r3, .L34
 401 0030 0122     		mov	r2, #1
 402 0032 1A70     		strb	r2, [r3]
 174:.\main.c      ****             break;
 403              		.loc 1 174 0
 404 0034 04E0     		b	.L18
 405              	.L26:
 175:.\main.c      ****         case tilt_start:
 176:.\main.c      ****             wristTilt_state = tilt_control;
 406              		.loc 1 176 0
 407 0036 034B     		ldr	r3, .L34
 408 0038 0222     		mov	r2, #2
 409 003a 1A70     		strb	r2, [r3]
 177:.\main.c      ****             break;
 410              		.loc 1 177 0
 411 003c 00E0     		b	.L18
 412              	.L33:
 178:.\main.c      ****         case tilt_control:
 179:.\main.c      ****             break;
 413              		.loc 1 179 0
 414 003e C046     		mov	r8, r8
 415              	.L18:
 180:.\main.c      ****         case tilt_feedback:
 181:.\main.c      ****             break;
 182:.\main.c      ****     }
 183:.\main.c      **** }
 416              		.loc 1 183 0
 417 0040 BD46     		mov	sp, r7
 418              		@ sp needed
 419 0042 80BD     		pop	{r7, pc}
 420              	.L35:
 421              		.align	2
 422              	.L34:
 423 0044 00000000 		.word	wristTilt_state
 424              		.cfi_endproc
 425              	.LFE38:
 426              		.size	wristTilt, .-wristTilt
 427              		.comm	wristRotate_state,1,1
 428              		.section	.text.wristRotate,"ax",%progbits
 429              		.align	2
 430              		.global	wristRotate
 431              		.code	16
 432              		.thumb_func
 433              		.type	wristRotate, %function
 434              	wristRotate:
 435              	.LFB39:
 184:.\main.c      **** 
 185:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 186:.\main.c      **** //control the rotating motion of the wrist
 187:.\main.c      **** void wristRotate()
 188:.\main.c      **** {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 12


 436              		.loc 1 188 0
 437              		.cfi_startproc
 438 0000 80B5     		push	{r7, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 00AF     		add	r7, sp, #0
 443              		.cfi_def_cfa_register 7
 189:.\main.c      ****     //Overview
 190:.\main.c      ****     //take instruction from data_array
 191:.\main.c      ****     //smooth input
 192:.\main.c      ****     //actuate the tilting using UART
 193:.\main.c      ****     //get feedback
 194:.\main.c      **** 
 195:.\main.c      ****     //-------------------------- 
 196:.\main.c      ****     // Dynamixel Servo specific
 197:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 198:.\main.c      ****     // TODO: Set the desired position
 199:.\main.c      **** 
 200:.\main.c      ****     //--------------------------
 201:.\main.c      ****     // State machine
 202:.\main.c      ****     
 203:.\main.c      ****         // Action
 204:.\main.c      ****     switch(wristRotate_state)
 444              		.loc 1 204 0
 445 0004 0F4B     		ldr	r3, .L52
 446 0006 1B78     		ldrb	r3, [r3]
 447 0008 012B     		cmp	r3, #1
 448 000a 06D0     		beq	.L49
 449 000c 07DC     		bgt	.L50
 450 000e 002B     		cmp	r3, #0
 451 0010 06D1     		bne	.L37
 205:.\main.c      ****     {
 206:.\main.c      ****         case rotate_init:
 207:.\main.c      ****             wristRotate_state = rotate_start;
 452              		.loc 1 207 0
 453 0012 0C4B     		ldr	r3, .L52
 454 0014 0122     		mov	r2, #1
 455 0016 1A70     		strb	r2, [r3]
 208:.\main.c      ****             break;
 456              		.loc 1 208 0
 457 0018 02E0     		b	.L37
 458              	.L49:
 209:.\main.c      ****         case rotate_start:
 210:.\main.c      ****             // Set the torque - this is a one time thing
 211:.\main.c      ****             // Set the speed - I think this is a one time thing
 212:.\main.c      ****             break;
 459              		.loc 1 212 0
 460 001a C046     		mov	r8, r8
 461 001c 00E0     		b	.L37
 462              	.L50:
 213:.\main.c      ****         case rotate_control:
 214:.\main.c      ****             break;
 463              		.loc 1 214 0
 464 001e C046     		mov	r8, r8
 465              	.L37:
 215:.\main.c      ****         case rotate_feedback:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 13


 216:.\main.c      ****             break;
 217:.\main.c      ****     }
 218:.\main.c      ****         // Transistion
 219:.\main.c      ****     switch(wristRotate_state)
 466              		.loc 1 219 0
 467 0020 084B     		ldr	r3, .L52
 468 0022 1B78     		ldrb	r3, [r3]
 469 0024 012B     		cmp	r3, #1
 470 0026 06D0     		beq	.L44
 471 0028 09DC     		bgt	.L51
 472 002a 002B     		cmp	r3, #0
 473 002c 08D1     		bne	.L36
 220:.\main.c      ****     {
 221:.\main.c      ****         case rotate_init:
 222:.\main.c      ****             wristRotate_state = rotate_start;
 474              		.loc 1 222 0
 475 002e 054B     		ldr	r3, .L52
 476 0030 0122     		mov	r2, #1
 477 0032 1A70     		strb	r2, [r3]
 223:.\main.c      ****             break;
 478              		.loc 1 223 0
 479 0034 04E0     		b	.L36
 480              	.L44:
 224:.\main.c      ****         case rotate_start:
 225:.\main.c      ****             wristRotate_state = rotate_control;
 481              		.loc 1 225 0
 482 0036 034B     		ldr	r3, .L52
 483 0038 0222     		mov	r2, #2
 484 003a 1A70     		strb	r2, [r3]
 226:.\main.c      ****             break;
 485              		.loc 1 226 0
 486 003c 00E0     		b	.L36
 487              	.L51:
 227:.\main.c      ****         case rotate_control:
 228:.\main.c      ****             break;
 488              		.loc 1 228 0
 489 003e C046     		mov	r8, r8
 490              	.L36:
 229:.\main.c      ****         case rotate_feedback:
 230:.\main.c      ****             break;
 231:.\main.c      ****     }
 232:.\main.c      **** }
 491              		.loc 1 232 0
 492 0040 BD46     		mov	sp, r7
 493              		@ sp needed
 494 0042 80BD     		pop	{r7, pc}
 495              	.L53:
 496              		.align	2
 497              	.L52:
 498 0044 00000000 		.word	wristRotate_state
 499              		.cfi_endproc
 500              	.LFE39:
 501              		.size	wristRotate, .-wristRotate
 502              		.section	.text.send_feedback,"ax",%progbits
 503              		.align	2
 504              		.global	send_feedback
 505              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 14


 506              		.thumb_func
 507              		.type	send_feedback, %function
 508              	send_feedback:
 509              	.LFB40:
 233:.\main.c      **** 
 234:.\main.c      **** void send_feedback()
 235:.\main.c      **** {
 510              		.loc 1 235 0
 511              		.cfi_startproc
 512 0000 80B5     		push	{r7, lr}
 513              		.cfi_def_cfa_offset 8
 514              		.cfi_offset 7, -8
 515              		.cfi_offset 14, -4
 516 0002 00AF     		add	r7, sp, #0
 517              		.cfi_def_cfa_register 7
 236:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 237:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 238:.\main.c      ****     //TODO define system state
 239:.\main.c      ****     //send packet via serial to wiznet
 240:.\main.c      **** }
 518              		.loc 1 240 0
 519 0004 BD46     		mov	sp, r7
 520              		@ sp needed
 521 0006 80BD     		pop	{r7, pc}
 522              		.cfi_endproc
 523              	.LFE40:
 524              		.size	send_feedback, .-send_feedback
 525              		.global	__aeabi_uidiv
 526              		.section	.text.average,"ax",%progbits
 527              		.align	2
 528              		.global	average
 529              		.code	16
 530              		.thumb_func
 531              		.type	average, %function
 532              	average:
 533              	.LFB41:
 241:.\main.c      **** 
 242:.\main.c      **** 
 243:.\main.c      **** //Average function to be used in smoothing our input
 244:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 245:.\main.c      **** {
 534              		.loc 1 245 0
 535              		.cfi_startproc
 536 0000 80B5     		push	{r7, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 7, -8
 539              		.cfi_offset 14, -4
 540 0002 86B0     		sub	sp, sp, #24
 541              		.cfi_def_cfa_offset 32
 542 0004 00AF     		add	r7, sp, #0
 543              		.cfi_def_cfa_register 7
 544 0006 7860     		str	r0, [r7, #4]
 545 0008 0A1C     		mov	r2, r1
 546 000a FB1C     		add	r3, r7, #3
 547 000c 1A70     		strb	r2, [r3]
 246:.\main.c      ****     uint8 i;
 247:.\main.c      ****     uint32 sum = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 15


 548              		.loc 1 247 0
 549 000e 0023     		mov	r3, #0
 550 0010 3B61     		str	r3, [r7, #16]
 248:.\main.c      ****     uint16 avg = 0;
 551              		.loc 1 248 0
 552 0012 3B1C     		mov	r3, r7
 553 0014 0E33     		add	r3, r3, #14
 554 0016 0022     		mov	r2, #0
 555 0018 1A80     		strh	r2, [r3]
 249:.\main.c      ****     
 250:.\main.c      ****     for(i = 0; i < num_items; i++)
 556              		.loc 1 250 0
 557 001a 3B1C     		mov	r3, r7
 558 001c 1733     		add	r3, r3, #23
 559 001e 0022     		mov	r2, #0
 560 0020 1A70     		strb	r2, [r3]
 561 0022 10E0     		b	.L56
 562              	.L57:
 251:.\main.c      ****     {
 252:.\main.c      ****         sum += array[i];
 563              		.loc 1 252 0 discriminator 2
 564 0024 3B1C     		mov	r3, r7
 565 0026 1733     		add	r3, r3, #23
 566 0028 1B78     		ldrb	r3, [r3]
 567 002a 5B00     		lsl	r3, r3, #1
 568 002c 7A68     		ldr	r2, [r7, #4]
 569 002e D318     		add	r3, r2, r3
 570 0030 1B88     		ldrh	r3, [r3]
 571 0032 3A69     		ldr	r2, [r7, #16]
 572 0034 D318     		add	r3, r2, r3
 573 0036 3B61     		str	r3, [r7, #16]
 250:.\main.c      ****     for(i = 0; i < num_items; i++)
 574              		.loc 1 250 0 discriminator 2
 575 0038 3B1C     		mov	r3, r7
 576 003a 1733     		add	r3, r3, #23
 577 003c 1A78     		ldrb	r2, [r3]
 578 003e 3B1C     		mov	r3, r7
 579 0040 1733     		add	r3, r3, #23
 580 0042 0132     		add	r2, r2, #1
 581 0044 1A70     		strb	r2, [r3]
 582              	.L56:
 250:.\main.c      ****     for(i = 0; i < num_items; i++)
 583              		.loc 1 250 0 is_stmt 0 discriminator 1
 584 0046 3A1C     		mov	r2, r7
 585 0048 1732     		add	r2, r2, #23
 586 004a FB1C     		add	r3, r7, #3
 587 004c 1278     		ldrb	r2, [r2]
 588 004e 1B78     		ldrb	r3, [r3]
 589 0050 9A42     		cmp	r2, r3
 590 0052 E7D3     		bcc	.L57
 253:.\main.c      ****     }
 254:.\main.c      ****     
 255:.\main.c      ****     avg = sum/num_items;
 591              		.loc 1 255 0 is_stmt 1
 592 0054 FB1C     		add	r3, r7, #3
 593 0056 1B78     		ldrb	r3, [r3]
 594 0058 3869     		ldr	r0, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 16


 595 005a 191C     		mov	r1, r3
 596 005c FFF7FEFF 		bl	__aeabi_uidiv
 597 0060 031C     		mov	r3, r0
 598 0062 1A1C     		mov	r2, r3
 599 0064 3B1C     		mov	r3, r7
 600 0066 0E33     		add	r3, r3, #14
 601 0068 1A80     		strh	r2, [r3]
 256:.\main.c      ****     
 257:.\main.c      ****     return avg;
 602              		.loc 1 257 0
 603 006a 3B1C     		mov	r3, r7
 604 006c 0E33     		add	r3, r3, #14
 605 006e 1B88     		ldrh	r3, [r3]
 258:.\main.c      **** }
 606              		.loc 1 258 0
 607 0070 181C     		mov	r0, r3
 608 0072 BD46     		mov	sp, r7
 609 0074 06B0     		add	sp, sp, #24
 610              		@ sp needed
 611 0076 80BD     		pop	{r7, pc}
 612              		.cfi_endproc
 613              	.LFE41:
 614              		.size	average, .-average
 615              		.comm	elbow_state,1,1
 616              		.section	.rodata
 617              		.align	2
 618              	.LC9:
 619 0000 0D0A00   		.ascii	"\015\012\000"
 620 0003 00       		.section	.text.elbow,"ax",%progbits
 621              		.align	2
 622              		.global	elbow
 623              		.code	16
 624              		.thumb_func
 625              		.type	elbow, %function
 626              	elbow:
 627              	.LFB42:
 259:.\main.c      **** 
 260:.\main.c      **** 
 261:.\main.c      **** //control the elbow
 262:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 263:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 264:.\main.c      **** void elbow()
 265:.\main.c      **** { 
 628              		.loc 1 265 0
 629              		.cfi_startproc
 630 0000 90B5     		push	{r4, r7, lr}
 631              		.cfi_def_cfa_offset 12
 632              		.cfi_offset 4, -12
 633              		.cfi_offset 7, -8
 634              		.cfi_offset 14, -4
 635 0002 89B0     		sub	sp, sp, #36
 636              		.cfi_def_cfa_offset 48
 637 0004 00AF     		add	r7, sp, #0
 638              		.cfi_def_cfa_register 7
 266:.\main.c      ****     //take instruction from data_array
 267:.\main.c      ****     //smooth input
 268:.\main.c      ****     //actuate the elbow using PWM
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 17


 269:.\main.c      ****     //get feedback
 270:.\main.c      ****     uint8 i;
 271:.\main.c      ****     uint16 avg;
 272:.\main.c      ****     uint16 command;
 273:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 639              		.loc 1 273 0
 640 0006 3C1C     		mov	r4, r7
 641 0008 1C34     		add	r4, r4, #28
 642 000a 0120     		mov	r0, #1
 643 000c FFF7FEFF 		bl	potFeedback
 644 0010 031C     		mov	r3, r0
 645 0012 2380     		strh	r3, [r4]
 274:.\main.c      ****     
 275:.\main.c      ****     switch(elbow_state){ //actions
 646              		.loc 1 275 0
 647 0014 8D4B     		ldr	r3, .L95
 648 0016 1B78     		ldrb	r3, [r3]
 649 0018 012B     		cmp	r3, #1
 650 001a 07D0     		beq	.L61
 651 001c 00DC     		bgt	.LCB548
 652 001e E3E0     		b	.L94	@long jump
 653              	.LCB548:
 654 0020 022B     		cmp	r3, #2
 655 0022 1FD0     		beq	.L64
 656 0024 032B     		cmp	r3, #3
 657 0026 00D1     		bne	.LCB552
 658 0028 CDE0     		b	.L65	@long jump
 659              	.LCB552:
 660 002a DEE0     		b	.L60
 661              	.L61:
 662              	.LBB2:
 276:.\main.c      ****         case elbw_start:
 277:.\main.c      ****             break;
 278:.\main.c      **** 
 279:.\main.c      ****         case elbw_init:
 280:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 663              		.loc 1 280 0
 664 002c 3B1C     		mov	r3, r7
 665 002e 1F33     		add	r3, r3, #31
 666 0030 0022     		mov	r2, #0
 667 0032 1A70     		strb	r2, [r3]
 668 0034 0DE0     		b	.L67
 669              	.L68:
 281:.\main.c      ****             {
 282:.\main.c      ****                 elbow_array[i] = 1500;
 670              		.loc 1 282 0 discriminator 2
 671 0036 3B1C     		mov	r3, r7
 672 0038 1F33     		add	r3, r3, #31
 673 003a 1A78     		ldrb	r2, [r3]
 674 003c 844B     		ldr	r3, .L95+4
 675 003e 5200     		lsl	r2, r2, #1
 676 0040 8449     		ldr	r1, .L95+8
 677 0042 D152     		strh	r1, [r2, r3]
 280:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 678              		.loc 1 280 0 discriminator 2
 679 0044 3B1C     		mov	r3, r7
 680 0046 1F33     		add	r3, r3, #31
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 18


 681 0048 1A78     		ldrb	r2, [r3]
 682 004a 3B1C     		mov	r3, r7
 683 004c 1F33     		add	r3, r3, #31
 684 004e 0132     		add	r2, r2, #1
 685 0050 1A70     		strb	r2, [r3]
 686              	.L67:
 280:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 687              		.loc 1 280 0 is_stmt 0 discriminator 1
 688 0052 3B1C     		mov	r3, r7
 689 0054 1F33     		add	r3, r3, #31
 690 0056 1B78     		ldrb	r3, [r3]
 691 0058 132B     		cmp	r3, #19
 692 005a ECD9     		bls	.L68
 283:.\main.c      ****             }
 284:.\main.c      ****             elbw_arr_cspot = 0;
 693              		.loc 1 284 0 is_stmt 1
 694 005c 7E4B     		ldr	r3, .L95+12
 695 005e 0022     		mov	r2, #0
 696 0060 1A70     		strb	r2, [r3]
 285:.\main.c      ****             break;
 697              		.loc 1 285 0
 698 0062 C2E0     		b	.L60
 699              	.L64:
 286:.\main.c      **** 
 287:.\main.c      ****         case elbw_execute:
 288:.\main.c      ****             command = (((data_array[ELBW_BYTE_1] << 8) | data_array[ELBW_BYTE_2])/2) + 1500;
 700              		.loc 1 288 0
 701 0064 7D4B     		ldr	r3, .L95+16
 702 0066 1B8A     		ldrh	r3, [r3, #16]
 703 0068 1A02     		lsl	r2, r3, #8
 704 006a 7C4B     		ldr	r3, .L95+16
 705 006c 5B8A     		ldrh	r3, [r3, #18]
 706 006e 1343     		orr	r3, r2
 707 0070 00D5     		bpl	.L69
 708 0072 0133     		add	r3, r3, #1
 709              	.L69:
 710 0074 5B10     		asr	r3, r3, #1
 711 0076 9AB2     		uxth	r2, r3
 712 0078 3B1C     		mov	r3, r7
 713 007a 1A33     		add	r3, r3, #26
 714 007c 7549     		ldr	r1, .L95+8
 715 007e 5218     		add	r2, r2, r1
 716 0080 1A80     		strh	r2, [r3]
 289:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 717              		.loc 1 289 0
 718 0082 754B     		ldr	r3, .L95+12
 719 0084 1B78     		ldrb	r3, [r3]
 720 0086 1A1C     		mov	r2, r3
 721 0088 714B     		ldr	r3, .L95+4
 722 008a 5200     		lsl	r2, r2, #1
 723 008c 391C     		mov	r1, r7
 724 008e 1A31     		add	r1, r1, #26
 725 0090 0988     		ldrh	r1, [r1]
 726 0092 D152     		strh	r1, [r2, r3]
 290:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 727              		.loc 1 290 0
 728 0094 704B     		ldr	r3, .L95+12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 19


 729 0096 1B78     		ldrb	r3, [r3]
 730 0098 122B     		cmp	r3, #18
 731 009a 06D8     		bhi	.L70
 291:.\main.c      ****             {
 292:.\main.c      ****                 elbw_arr_cspot++;
 732              		.loc 1 292 0
 733 009c 6E4B     		ldr	r3, .L95+12
 734 009e 1B78     		ldrb	r3, [r3]
 735 00a0 0133     		add	r3, r3, #1
 736 00a2 DAB2     		uxtb	r2, r3
 737 00a4 6C4B     		ldr	r3, .L95+12
 738 00a6 1A70     		strb	r2, [r3]
 739 00a8 02E0     		b	.L71
 740              	.L70:
 293:.\main.c      ****             }
 294:.\main.c      ****             else
 295:.\main.c      ****             {
 296:.\main.c      ****                 elbw_arr_cspot = 0;
 741              		.loc 1 296 0
 742 00aa 6B4B     		ldr	r3, .L95+12
 743 00ac 0022     		mov	r2, #0
 744 00ae 1A70     		strb	r2, [r3]
 745              	.L71:
 297:.\main.c      ****             }
 298:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 746              		.loc 1 298 0
 747 00b0 3C1C     		mov	r4, r7
 748 00b2 1834     		add	r4, r4, #24
 749 00b4 664B     		ldr	r3, .L95+4
 750 00b6 181C     		mov	r0, r3
 751 00b8 1421     		mov	r1, #20
 752 00ba FFF7FEFF 		bl	average
 753 00be 031C     		mov	r3, r0
 754 00c0 2380     		strh	r3, [r4]
 299:.\main.c      ****            
 300:.\main.c      ****             //uint16 feedback = potFeedback(ELBOW_POT);
 301:.\main.c      ****             //TODO make sure reading from correct pots
 302:.\main.c      ****             char buffer[20];
 303:.\main.c      ****             
 304:.\main.c      ****             itoa(avg, buffer);
 755              		.loc 1 304 0
 756 00c2 3B1C     		mov	r3, r7
 757 00c4 1833     		add	r3, r3, #24
 758 00c6 1A88     		ldrh	r2, [r3]
 759 00c8 3B1D     		add	r3, r7, #4
 760 00ca 101C     		mov	r0, r2
 761 00cc 191C     		mov	r1, r3
 762 00ce FFF7FEFF 		bl	itoa
 305:.\main.c      ****             
 306:.\main.c      ****             UART_1_UartPutString(buffer);      
 763              		.loc 1 306 0
 764 00d2 3B1D     		add	r3, r7, #4
 765 00d4 181C     		mov	r0, r3
 766 00d6 FFF7FEFF 		bl	UART_1_UartPutString
 307:.\main.c      ****             UART_1_UartPutString("\r\n");      
 767              		.loc 1 307 0
 768 00da 614B     		ldr	r3, .L95+20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 20


 769 00dc 181C     		mov	r0, r3
 770 00de FFF7FEFF 		bl	UART_1_UartPutString
 308:.\main.c      ****             
 309:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 771              		.loc 1 309 0
 772 00e2 3B1C     		mov	r3, r7
 773 00e4 1C33     		add	r3, r3, #28
 774 00e6 1B88     		ldrh	r3, [r3]
 775 00e8 642B     		cmp	r3, #100
 776 00ea 23D8     		bhi	.L72
 310:.\main.c      ****             {
 311:.\main.c      ****                 if (avg < 1500)
 777              		.loc 1 311 0
 778 00ec 3B1C     		mov	r3, r7
 779 00ee 1833     		add	r3, r3, #24
 780 00f0 1A88     		ldrh	r2, [r3]
 781 00f2 5C4B     		ldr	r3, .L95+24
 782 00f4 9A42     		cmp	r2, r3
 783 00f6 04D8     		bhi	.L73
 312:.\main.c      ****                 {
 313:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 784              		.loc 1 313 0
 785 00f8 564B     		ldr	r3, .L95+8
 786 00fa 181C     		mov	r0, r3
 787 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 788 0100 5AE0     		b	.L76
 789              	.L73:
 314:.\main.c      ****                 }
 315:.\main.c      ****                 else
 316:.\main.c      ****                 {
 317:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 790              		.loc 1 317 0
 791 0102 3B1C     		mov	r3, r7
 792 0104 1833     		add	r3, r3, #24
 793 0106 1A88     		ldrh	r2, [r3]
 794 0108 FA23     		mov	r3, #250
 795 010a DB00     		lsl	r3, r3, #3
 796 010c 9A42     		cmp	r2, r3
 797 010e 0CD8     		bhi	.L75
 798              		.loc 1 317 0 is_stmt 0 discriminator 1
 799 0110 3B1C     		mov	r3, r7
 800 0112 1833     		add	r3, r3, #24
 801 0114 1A88     		ldrh	r2, [r3]
 802 0116 544B     		ldr	r3, .L95+28
 803 0118 9A42     		cmp	r2, r3
 804 011a 06D9     		bls	.L75
 318:.\main.c      ****                     {
 319:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 805              		.loc 1 319 0 is_stmt 1
 806 011c 3B1C     		mov	r3, r7
 807 011e 1833     		add	r3, r3, #24
 808 0120 1B88     		ldrh	r3, [r3]
 809 0122 181C     		mov	r0, r3
 810 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 811 0128 46E0     		b	.L76
 812              	.L75:
 320:.\main.c      ****                     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 21


 321:.\main.c      ****                     else
 322:.\main.c      ****                     {
 323:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 813              		.loc 1 323 0
 814 012a 4A4B     		ldr	r3, .L95+8
 815 012c 181C     		mov	r0, r3
 816 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 817 0132 41E0     		b	.L76
 818              	.L72:
 324:.\main.c      ****                     }
 325:.\main.c      ****                 }
 326:.\main.c      ****             }
 327:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 819              		.loc 1 327 0
 820 0134 3B1C     		mov	r3, r7
 821 0136 1C33     		add	r3, r3, #28
 822 0138 1A88     		ldrh	r2, [r3]
 823 013a 4B4B     		ldr	r3, .L95+28
 824 013c 9A42     		cmp	r2, r3
 825 013e 23D9     		bls	.L77
 328:.\main.c      ****             {
 329:.\main.c      ****                 if(avg > 1500)
 826              		.loc 1 329 0
 827 0140 3B1C     		mov	r3, r7
 828 0142 1833     		add	r3, r3, #24
 829 0144 1A88     		ldrh	r2, [r3]
 830 0146 434B     		ldr	r3, .L95+8
 831 0148 9A42     		cmp	r2, r3
 832 014a 04D9     		bls	.L78
 330:.\main.c      ****                 {
 331:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 833              		.loc 1 331 0
 834 014c 414B     		ldr	r3, .L95+8
 835 014e 181C     		mov	r0, r3
 836 0150 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 837 0154 30E0     		b	.L76
 838              	.L78:
 332:.\main.c      ****                 }
 333:.\main.c      ****                 else
 334:.\main.c      ****                 {
 335:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 839              		.loc 1 335 0
 840 0156 3B1C     		mov	r3, r7
 841 0158 1833     		add	r3, r3, #24
 842 015a 1A88     		ldrh	r2, [r3]
 843 015c FA23     		mov	r3, #250
 844 015e DB00     		lsl	r3, r3, #3
 845 0160 9A42     		cmp	r2, r3
 846 0162 0CD8     		bhi	.L80
 847              		.loc 1 335 0 is_stmt 0 discriminator 1
 848 0164 3B1C     		mov	r3, r7
 849 0166 1833     		add	r3, r3, #24
 850 0168 1A88     		ldrh	r2, [r3]
 851 016a 3F4B     		ldr	r3, .L95+28
 852 016c 9A42     		cmp	r2, r3
 853 016e 06D9     		bls	.L80
 336:.\main.c      ****                     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 22


 337:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 854              		.loc 1 337 0 is_stmt 1
 855 0170 3B1C     		mov	r3, r7
 856 0172 1833     		add	r3, r3, #24
 857 0174 1B88     		ldrh	r3, [r3]
 858 0176 181C     		mov	r0, r3
 859 0178 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 860 017c 1CE0     		b	.L76
 861              	.L80:
 338:.\main.c      ****                     }
 339:.\main.c      ****                     else
 340:.\main.c      ****                     {
 341:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 862              		.loc 1 341 0
 863 017e 354B     		ldr	r3, .L95+8
 864 0180 181C     		mov	r0, r3
 865 0182 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 866 0186 17E0     		b	.L76
 867              	.L77:
 342:.\main.c      ****                     }
 343:.\main.c      ****                 }
 344:.\main.c      ****             }
 345:.\main.c      ****             else
 346:.\main.c      ****             {
 347:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 868              		.loc 1 347 0
 869 0188 3B1C     		mov	r3, r7
 870 018a 1833     		add	r3, r3, #24
 871 018c 1A88     		ldrh	r2, [r3]
 872 018e FA23     		mov	r3, #250
 873 0190 DB00     		lsl	r3, r3, #3
 874 0192 9A42     		cmp	r2, r3
 875 0194 0CD8     		bhi	.L81
 876              		.loc 1 347 0 is_stmt 0 discriminator 1
 877 0196 3B1C     		mov	r3, r7
 878 0198 1833     		add	r3, r3, #24
 879 019a 1A88     		ldrh	r2, [r3]
 880 019c 324B     		ldr	r3, .L95+28
 881 019e 9A42     		cmp	r2, r3
 882 01a0 06D9     		bls	.L81
 348:.\main.c      ****                 {
 349:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 883              		.loc 1 349 0 is_stmt 1
 884 01a2 3B1C     		mov	r3, r7
 885 01a4 1833     		add	r3, r3, #24
 886 01a6 1B88     		ldrh	r3, [r3]
 887 01a8 181C     		mov	r0, r3
 888 01aa FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 889 01ae 03E0     		b	.L76
 890              	.L81:
 350:.\main.c      ****                 }
 351:.\main.c      ****                 else
 352:.\main.c      ****                 {
 353:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 891              		.loc 1 353 0
 892 01b0 284B     		ldr	r3, .L95+8
 893 01b2 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 23


 894 01b4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 895              	.L76:
 354:.\main.c      ****                 }
 355:.\main.c      ****             }
 356:.\main.c      ****             
 357:.\main.c      ****             fin_exec++;
 896              		.loc 1 357 0
 897 01b8 2C4B     		ldr	r3, .L95+32
 898 01ba 1B78     		ldrb	r3, [r3]
 899 01bc 0133     		add	r3, r3, #1
 900 01be DAB2     		uxtb	r2, r3
 901 01c0 2A4B     		ldr	r3, .L95+32
 902 01c2 1A70     		strb	r2, [r3]
 358:.\main.c      ****             break;
 903              		.loc 1 358 0
 904 01c4 11E0     		b	.L60
 905              	.L65:
 359:.\main.c      ****             
 360:.\main.c      ****         case elbw_wait:
 361:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 906              		.loc 1 361 0
 907 01c6 3B1C     		mov	r3, r7
 908 01c8 1C33     		add	r3, r3, #28
 909 01ca 1B88     		ldrh	r3, [r3]
 910 01cc 642B     		cmp	r3, #100
 911 01ce 05D9     		bls	.L82
 912              		.loc 1 361 0 is_stmt 0 discriminator 1
 913 01d0 3B1C     		mov	r3, r7
 914 01d2 1C33     		add	r3, r3, #28
 915 01d4 1A88     		ldrh	r2, [r3]
 916 01d6 244B     		ldr	r3, .L95+28
 917 01d8 9A42     		cmp	r2, r3
 918 01da 03D9     		bls	.L83
 919              	.L82:
 362:.\main.c      ****             {
 363:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 920              		.loc 1 363 0 is_stmt 1
 921 01dc 1D4B     		ldr	r3, .L95+8
 922 01de 181C     		mov	r0, r3
 923 01e0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 924              	.L83:
 364:.\main.c      ****             }
 365:.\main.c      ****             break;
 925              		.loc 1 365 0
 926 01e4 C046     		mov	r8, r8
 927 01e6 00E0     		b	.L60
 928              	.L94:
 277:.\main.c      ****             break;
 929              		.loc 1 277 0
 930 01e8 C046     		mov	r8, r8
 931              	.L60:
 932              	.LBE2:
 366:.\main.c      ****     }
 367:.\main.c      ****     
 368:.\main.c      ****     switch(elbow_state){ //transitions
 933              		.loc 1 368 0
 934 01ea 184B     		ldr	r3, .L95
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 24


 935 01ec 1B78     		ldrb	r3, [r3]
 936 01ee 012B     		cmp	r3, #1
 937 01f0 0CD0     		beq	.L85
 938 01f2 02DC     		bgt	.L86
 939 01f4 002B     		cmp	r3, #0
 940 01f6 05D0     		beq	.L87
 941 01f8 24E0     		b	.L59
 942              	.L86:
 943 01fa 022B     		cmp	r3, #2
 944 01fc 0AD0     		beq	.L88
 945 01fe 032B     		cmp	r3, #3
 946 0200 14D0     		beq	.L89
 947 0202 1FE0     		b	.L59
 948              	.L87:
 369:.\main.c      ****         case elbw_start:
 370:.\main.c      ****             elbow_state = elbw_init;
 949              		.loc 1 370 0
 950 0204 114B     		ldr	r3, .L95
 951 0206 0122     		mov	r2, #1
 952 0208 1A70     		strb	r2, [r3]
 371:.\main.c      ****             break;
 953              		.loc 1 371 0
 954 020a 1BE0     		b	.L59
 955              	.L85:
 372:.\main.c      ****         
 373:.\main.c      ****         case elbw_init:
 374:.\main.c      ****             elbow_state = elbw_wait;
 956              		.loc 1 374 0
 957 020c 0F4B     		ldr	r3, .L95
 958 020e 0322     		mov	r2, #3
 959 0210 1A70     		strb	r2, [r3]
 375:.\main.c      ****             break;
 960              		.loc 1 375 0
 961 0212 17E0     		b	.L59
 962              	.L88:
 376:.\main.c      ****         
 377:.\main.c      ****         case elbw_execute:
 378:.\main.c      ****             if(new_pack)
 963              		.loc 1 378 0
 964 0214 164B     		ldr	r3, .L95+36
 965 0216 1B78     		ldrb	r3, [r3]
 966 0218 002B     		cmp	r3, #0
 967 021a 03D0     		beq	.L90
 379:.\main.c      ****             {
 380:.\main.c      ****                 elbow_state = elbw_execute;
 968              		.loc 1 380 0
 969 021c 0B4B     		ldr	r3, .L95
 970 021e 0222     		mov	r2, #2
 971 0220 1A70     		strb	r2, [r3]
 381:.\main.c      ****             }
 382:.\main.c      ****             else
 383:.\main.c      ****             {
 384:.\main.c      ****                 elbow_state = elbw_wait;
 385:.\main.c      ****             }
 386:.\main.c      ****             break;
 972              		.loc 1 386 0
 973 0222 0FE0     		b	.L59
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 25


 974              	.L90:
 384:.\main.c      ****                 elbow_state = elbw_wait;
 975              		.loc 1 384 0
 976 0224 094B     		ldr	r3, .L95
 977 0226 0322     		mov	r2, #3
 978 0228 1A70     		strb	r2, [r3]
 979              		.loc 1 386 0
 980 022a 0BE0     		b	.L59
 981              	.L89:
 387:.\main.c      ****         
 388:.\main.c      ****         case elbw_wait:
 389:.\main.c      ****             if(new_pack)
 982              		.loc 1 389 0
 983 022c 104B     		ldr	r3, .L95+36
 984 022e 1B78     		ldrb	r3, [r3]
 985 0230 002B     		cmp	r3, #0
 986 0232 03D0     		beq	.L92
 390:.\main.c      ****             {
 391:.\main.c      ****                 elbow_state = elbw_execute;
 987              		.loc 1 391 0
 988 0234 054B     		ldr	r3, .L95
 989 0236 0222     		mov	r2, #2
 990 0238 1A70     		strb	r2, [r3]
 991 023a 02E0     		b	.L93
 992              	.L92:
 392:.\main.c      ****             }
 393:.\main.c      ****             else
 394:.\main.c      ****             {
 395:.\main.c      ****                 elbow_state = elbw_wait; 
 993              		.loc 1 395 0
 994 023c 034B     		ldr	r3, .L95
 995 023e 0322     		mov	r2, #3
 996 0240 1A70     		strb	r2, [r3]
 997              	.L93:
 396:.\main.c      ****             }
 397:.\main.c      ****             break;
 998              		.loc 1 397 0
 999 0242 C046     		mov	r8, r8
 1000              	.L59:
 398:.\main.c      ****     }    
 399:.\main.c      **** }
 1001              		.loc 1 399 0
 1002 0244 BD46     		mov	sp, r7
 1003 0246 09B0     		add	sp, sp, #36
 1004              		@ sp needed
 1005 0248 90BD     		pop	{r4, r7, pc}
 1006              	.L96:
 1007 024a C046     		.align	2
 1008              	.L95:
 1009 024c 00000000 		.word	elbow_state
 1010 0250 00000000 		.word	elbow_array
 1011 0254 DC050000 		.word	1500
 1012 0258 00000000 		.word	elbw_arr_cspot
 1013 025c 00000000 		.word	data_array
 1014 0260 00000000 		.word	.LC9
 1015 0264 DB050000 		.word	1499
 1016 0268 E7030000 		.word	999
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 26


 1017 026c 00000000 		.word	fin_exec
 1018 0270 00000000 		.word	new_pack
 1019              		.cfi_endproc
 1020              	.LFE42:
 1021              		.size	elbow, .-elbow
 1022              		.comm	shoulder_state,1,1
 1023              		.section	.text.shoulder,"ax",%progbits
 1024              		.align	2
 1025              		.global	shoulder
 1026              		.code	16
 1027              		.thumb_func
 1028              		.type	shoulder, %function
 1029              	shoulder:
 1030              	.LFB43:
 400:.\main.c      **** 
 401:.\main.c      **** //control the shoulder
 402:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 403:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 404:.\main.c      **** void shoulder()
 405:.\main.c      **** { 
 1031              		.loc 1 405 0
 1032              		.cfi_startproc
 1033 0000 90B5     		push	{r4, r7, lr}
 1034              		.cfi_def_cfa_offset 12
 1035              		.cfi_offset 4, -12
 1036              		.cfi_offset 7, -8
 1037              		.cfi_offset 14, -4
 1038 0002 83B0     		sub	sp, sp, #12
 1039              		.cfi_def_cfa_offset 24
 1040 0004 00AF     		add	r7, sp, #0
 1041              		.cfi_def_cfa_register 7
 406:.\main.c      ****     //take instruction from data_array
 407:.\main.c      ****     //smooth input
 408:.\main.c      ****     //actuate the shoulder using PWM
 409:.\main.c      ****     //get feedback
 410:.\main.c      ****     uint8 i;
 411:.\main.c      ****     uint16 avg;
 412:.\main.c      ****     uint16 command;
 413:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 1042              		.loc 1 413 0
 1043 0006 3C1D     		add	r4, r7, #4
 1044 0008 0020     		mov	r0, #0
 1045 000a FFF7FEFF 		bl	potFeedback
 1046 000e 031C     		mov	r3, r0
 1047 0010 2380     		strh	r3, [r4]
 414:.\main.c      ****     
 415:.\main.c      ****     switch(shoulder_state){ //actions
 1048              		.loc 1 415 0
 1049 0012 7A4B     		ldr	r3, .L132
 1050 0014 1B78     		ldrb	r3, [r3]
 1051 0016 012B     		cmp	r3, #1
 1052 0018 07D0     		beq	.L99
 1053 001a 00DC     		bgt	.LCB938
 1054 001c BCE0     		b	.L131	@long jump
 1055              	.LCB938:
 1056 001e 022B     		cmp	r3, #2
 1057 0020 1AD0     		beq	.L102
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 27


 1058 0022 032B     		cmp	r3, #3
 1059 0024 00D1     		bne	.LCB942
 1060 0026 A8E0     		b	.L103	@long jump
 1061              	.LCB942:
 1062 0028 B7E0     		b	.L98
 1063              	.L99:
 416:.\main.c      ****         case shldr_start:
 417:.\main.c      ****             break;
 418:.\main.c      **** 
 419:.\main.c      ****         case shldr_init:
 420:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1064              		.loc 1 420 0
 1065 002a FB1D     		add	r3, r7, #7
 1066 002c 0022     		mov	r2, #0
 1067 002e 1A70     		strb	r2, [r3]
 1068 0030 0AE0     		b	.L104
 1069              	.L105:
 421:.\main.c      ****             {
 422:.\main.c      ****                 shoulder_array[i] = 1500;
 1070              		.loc 1 422 0 discriminator 2
 1071 0032 FB1D     		add	r3, r7, #7
 1072 0034 1A78     		ldrb	r2, [r3]
 1073 0036 724B     		ldr	r3, .L132+4
 1074 0038 5200     		lsl	r2, r2, #1
 1075 003a 7249     		ldr	r1, .L132+8
 1076 003c D152     		strh	r1, [r2, r3]
 420:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1077              		.loc 1 420 0 discriminator 2
 1078 003e FB1D     		add	r3, r7, #7
 1079 0040 1A78     		ldrb	r2, [r3]
 1080 0042 FB1D     		add	r3, r7, #7
 1081 0044 0132     		add	r2, r2, #1
 1082 0046 1A70     		strb	r2, [r3]
 1083              	.L104:
 420:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1084              		.loc 1 420 0 is_stmt 0 discriminator 1
 1085 0048 FB1D     		add	r3, r7, #7
 1086 004a 1B78     		ldrb	r3, [r3]
 1087 004c 132B     		cmp	r3, #19
 1088 004e F0D9     		bls	.L105
 423:.\main.c      ****             }
 424:.\main.c      ****             shldr_arr_cspot = 0;
 1089              		.loc 1 424 0 is_stmt 1
 1090 0050 6D4B     		ldr	r3, .L132+12
 1091 0052 0022     		mov	r2, #0
 1092 0054 1A70     		strb	r2, [r3]
 425:.\main.c      ****             break;
 1093              		.loc 1 425 0
 1094 0056 A0E0     		b	.L98
 1095              	.L102:
 426:.\main.c      **** 
 427:.\main.c      ****         case shldr_execute:
 428:.\main.c      ****             command = (((data_array[SHLDR_BYTE_1] << 8) | data_array[SHLDR_BYTE_2])/2) + 1500;
 1096              		.loc 1 428 0
 1097 0058 6C4B     		ldr	r3, .L132+16
 1098 005a 9B89     		ldrh	r3, [r3, #12]
 1099 005c 1A02     		lsl	r2, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 28


 1100 005e 6B4B     		ldr	r3, .L132+16
 1101 0060 DB89     		ldrh	r3, [r3, #14]
 1102 0062 1343     		orr	r3, r2
 1103 0064 00D5     		bpl	.L106
 1104 0066 0133     		add	r3, r3, #1
 1105              	.L106:
 1106 0068 5B10     		asr	r3, r3, #1
 1107 006a 9AB2     		uxth	r2, r3
 1108 006c BB1C     		add	r3, r7, #2
 1109 006e 6549     		ldr	r1, .L132+8
 1110 0070 5218     		add	r2, r2, r1
 1111 0072 1A80     		strh	r2, [r3]
 429:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;
 1112              		.loc 1 429 0
 1113 0074 644B     		ldr	r3, .L132+12
 1114 0076 1B78     		ldrb	r3, [r3]
 1115 0078 1A1C     		mov	r2, r3
 1116 007a 614B     		ldr	r3, .L132+4
 1117 007c 5200     		lsl	r2, r2, #1
 1118 007e B91C     		add	r1, r7, #2
 1119 0080 0988     		ldrh	r1, [r1]
 1120 0082 D152     		strh	r1, [r2, r3]
 430:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 1121              		.loc 1 430 0
 1122 0084 604B     		ldr	r3, .L132+12
 1123 0086 1B78     		ldrb	r3, [r3]
 1124 0088 122B     		cmp	r3, #18
 1125 008a 06D8     		bhi	.L107
 431:.\main.c      ****             {
 432:.\main.c      ****                 shldr_arr_cspot++;
 1126              		.loc 1 432 0
 1127 008c 5E4B     		ldr	r3, .L132+12
 1128 008e 1B78     		ldrb	r3, [r3]
 1129 0090 0133     		add	r3, r3, #1
 1130 0092 DAB2     		uxtb	r2, r3
 1131 0094 5C4B     		ldr	r3, .L132+12
 1132 0096 1A70     		strb	r2, [r3]
 1133 0098 02E0     		b	.L108
 1134              	.L107:
 433:.\main.c      ****             }
 434:.\main.c      ****             else
 435:.\main.c      ****             {
 436:.\main.c      ****                 shldr_arr_cspot = 0;
 1135              		.loc 1 436 0
 1136 009a 5B4B     		ldr	r3, .L132+12
 1137 009c 0022     		mov	r2, #0
 1138 009e 1A70     		strb	r2, [r3]
 1139              	.L108:
 437:.\main.c      ****             }
 438:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 1140              		.loc 1 438 0
 1141 00a0 3C1C     		mov	r4, r7
 1142 00a2 574B     		ldr	r3, .L132+4
 1143 00a4 181C     		mov	r0, r3
 1144 00a6 1421     		mov	r1, #20
 1145 00a8 FFF7FEFF 		bl	average
 1146 00ac 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 29


 1147 00ae 2380     		strh	r3, [r4]
 439:.\main.c      ****            
 440:.\main.c      ****             //uint16 feedback = potFeedback(SHOULDER_POT);
 441:.\main.c      ****             
 442:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 1148              		.loc 1 442 0
 1149 00b0 3B1D     		add	r3, r7, #4
 1150 00b2 1B88     		ldrh	r3, [r3]
 1151 00b4 002B     		cmp	r3, #0
 1152 00b6 1FD1     		bne	.L109
 443:.\main.c      ****             {
 444:.\main.c      ****                 if (avg < 1500)
 1153              		.loc 1 444 0
 1154 00b8 3B1C     		mov	r3, r7
 1155 00ba 1A88     		ldrh	r2, [r3]
 1156 00bc 544B     		ldr	r3, .L132+20
 1157 00be 9A42     		cmp	r2, r3
 1158 00c0 04D8     		bhi	.L110
 445:.\main.c      ****                 {
 446:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1159              		.loc 1 446 0
 1160 00c2 504B     		ldr	r3, .L132+8
 1161 00c4 181C     		mov	r0, r3
 1162 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1163 00ca 4FE0     		b	.L113
 1164              	.L110:
 447:.\main.c      ****                 }
 448:.\main.c      ****                 else
 449:.\main.c      ****                 {
 450:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1165              		.loc 1 450 0
 1166 00cc 3B1C     		mov	r3, r7
 1167 00ce 1A88     		ldrh	r2, [r3]
 1168 00d0 FA23     		mov	r3, #250
 1169 00d2 DB00     		lsl	r3, r3, #3
 1170 00d4 9A42     		cmp	r2, r3
 1171 00d6 0AD8     		bhi	.L112
 1172              		.loc 1 450 0 is_stmt 0 discriminator 1
 1173 00d8 3B1C     		mov	r3, r7
 1174 00da 1A88     		ldrh	r2, [r3]
 1175 00dc 4D4B     		ldr	r3, .L132+24
 1176 00de 9A42     		cmp	r2, r3
 1177 00e0 05D9     		bls	.L112
 451:.\main.c      ****                     {
 452:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1178              		.loc 1 452 0 is_stmt 1
 1179 00e2 3B1C     		mov	r3, r7
 1180 00e4 1B88     		ldrh	r3, [r3]
 1181 00e6 181C     		mov	r0, r3
 1182 00e8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1183 00ec 3EE0     		b	.L113
 1184              	.L112:
 453:.\main.c      ****                     }
 454:.\main.c      ****                     else
 455:.\main.c      ****                     {
 456:.\main.c      ****                         //throw error
 457:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 30


 1185              		.loc 1 457 0
 1186 00ee 454B     		ldr	r3, .L132+8
 1187 00f0 181C     		mov	r0, r3
 1188 00f2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1189 00f6 39E0     		b	.L113
 1190              	.L109:
 458:.\main.c      ****                     }
 459:.\main.c      ****                 }
 460:.\main.c      ****             }
 461:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 1191              		.loc 1 461 0
 1192 00f8 3B1D     		add	r3, r7, #4
 1193 00fa 1A88     		ldrh	r2, [r3]
 1194 00fc 464B     		ldr	r3, .L132+28
 1195 00fe 9A42     		cmp	r2, r3
 1196 0100 1FD9     		bls	.L114
 462:.\main.c      ****             {
 463:.\main.c      ****                 if(avg > 1500)
 1197              		.loc 1 463 0
 1198 0102 3B1C     		mov	r3, r7
 1199 0104 1A88     		ldrh	r2, [r3]
 1200 0106 3F4B     		ldr	r3, .L132+8
 1201 0108 9A42     		cmp	r2, r3
 1202 010a 04D9     		bls	.L115
 464:.\main.c      ****                 {
 465:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1203              		.loc 1 465 0
 1204 010c 3D4B     		ldr	r3, .L132+8
 1205 010e 181C     		mov	r0, r3
 1206 0110 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1207 0114 2AE0     		b	.L113
 1208              	.L115:
 466:.\main.c      ****                 }
 467:.\main.c      ****                 else
 468:.\main.c      ****                 {
 469:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1209              		.loc 1 469 0
 1210 0116 3B1C     		mov	r3, r7
 1211 0118 1A88     		ldrh	r2, [r3]
 1212 011a FA23     		mov	r3, #250
 1213 011c DB00     		lsl	r3, r3, #3
 1214 011e 9A42     		cmp	r2, r3
 1215 0120 0AD8     		bhi	.L117
 1216              		.loc 1 469 0 is_stmt 0 discriminator 1
 1217 0122 3B1C     		mov	r3, r7
 1218 0124 1A88     		ldrh	r2, [r3]
 1219 0126 3B4B     		ldr	r3, .L132+24
 1220 0128 9A42     		cmp	r2, r3
 1221 012a 05D9     		bls	.L117
 470:.\main.c      ****                     {
 471:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1222              		.loc 1 471 0 is_stmt 1
 1223 012c 3B1C     		mov	r3, r7
 1224 012e 1B88     		ldrh	r3, [r3]
 1225 0130 181C     		mov	r0, r3
 1226 0132 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1227 0136 19E0     		b	.L113
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 31


 1228              	.L117:
 472:.\main.c      ****                     }
 473:.\main.c      ****                     else
 474:.\main.c      ****                     {
 475:.\main.c      ****                         //throw error
 476:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 1229              		.loc 1 476 0
 1230 0138 324B     		ldr	r3, .L132+8
 1231 013a 181C     		mov	r0, r3
 1232 013c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1233 0140 14E0     		b	.L113
 1234              	.L114:
 477:.\main.c      ****                     }
 478:.\main.c      ****                 }
 479:.\main.c      ****             }
 480:.\main.c      ****             else
 481:.\main.c      ****             {
 482:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1235              		.loc 1 482 0
 1236 0142 3B1C     		mov	r3, r7
 1237 0144 1A88     		ldrh	r2, [r3]
 1238 0146 FA23     		mov	r3, #250
 1239 0148 DB00     		lsl	r3, r3, #3
 1240 014a 9A42     		cmp	r2, r3
 1241 014c 0AD8     		bhi	.L118
 1242              		.loc 1 482 0 is_stmt 0 discriminator 1
 1243 014e 3B1C     		mov	r3, r7
 1244 0150 1A88     		ldrh	r2, [r3]
 1245 0152 304B     		ldr	r3, .L132+24
 1246 0154 9A42     		cmp	r2, r3
 1247 0156 05D9     		bls	.L118
 483:.\main.c      ****                 {
 484:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 1248              		.loc 1 484 0 is_stmt 1
 1249 0158 3B1C     		mov	r3, r7
 1250 015a 1B88     		ldrh	r3, [r3]
 1251 015c 181C     		mov	r0, r3
 1252 015e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1253 0162 03E0     		b	.L113
 1254              	.L118:
 485:.\main.c      ****                 }
 486:.\main.c      ****                 else
 487:.\main.c      ****                 {
 488:.\main.c      ****                     //throw error
 489:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1255              		.loc 1 489 0
 1256 0164 274B     		ldr	r3, .L132+8
 1257 0166 181C     		mov	r0, r3
 1258 0168 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1259              	.L113:
 490:.\main.c      ****                 }
 491:.\main.c      ****             }
 492:.\main.c      ****             
 493:.\main.c      ****             fin_exec++;
 1260              		.loc 1 493 0
 1261 016c 2B4B     		ldr	r3, .L132+32
 1262 016e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 32


 1263 0170 0133     		add	r3, r3, #1
 1264 0172 DAB2     		uxtb	r2, r3
 1265 0174 294B     		ldr	r3, .L132+32
 1266 0176 1A70     		strb	r2, [r3]
 494:.\main.c      ****             break;
 1267              		.loc 1 494 0
 1268 0178 0FE0     		b	.L98
 1269              	.L103:
 495:.\main.c      ****             
 496:.\main.c      ****         case shldr_wait:
 497:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 1270              		.loc 1 497 0
 1271 017a 3B1D     		add	r3, r7, #4
 1272 017c 1B88     		ldrh	r3, [r3]
 1273 017e 002B     		cmp	r3, #0
 1274 0180 04D0     		beq	.L119
 1275              		.loc 1 497 0 is_stmt 0 discriminator 1
 1276 0182 3B1D     		add	r3, r7, #4
 1277 0184 1A88     		ldrh	r2, [r3]
 1278 0186 244B     		ldr	r3, .L132+28
 1279 0188 9A42     		cmp	r2, r3
 1280 018a 04D9     		bls	.L120
 1281              	.L119:
 498:.\main.c      ****             {
 499:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 1282              		.loc 1 499 0 is_stmt 1
 1283 018c 1D4B     		ldr	r3, .L132+8
 1284 018e 181C     		mov	r0, r3
 1285 0190 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 500:.\main.c      ****             }
 501:.\main.c      ****             break;
 1286              		.loc 1 501 0
 1287 0194 01E0     		b	.L98
 1288              	.L120:
 1289 0196 00E0     		b	.L98
 1290              	.L131:
 417:.\main.c      ****             break;
 1291              		.loc 1 417 0
 1292 0198 C046     		mov	r8, r8
 1293              	.L98:
 502:.\main.c      ****     }
 503:.\main.c      ****     
 504:.\main.c      ****     switch(shoulder_state){ //transitions
 1294              		.loc 1 504 0
 1295 019a 184B     		ldr	r3, .L132
 1296 019c 1B78     		ldrb	r3, [r3]
 1297 019e 012B     		cmp	r3, #1
 1298 01a0 0CD0     		beq	.L122
 1299 01a2 02DC     		bgt	.L123
 1300 01a4 002B     		cmp	r3, #0
 1301 01a6 05D0     		beq	.L124
 1302 01a8 24E0     		b	.L97
 1303              	.L123:
 1304 01aa 022B     		cmp	r3, #2
 1305 01ac 0AD0     		beq	.L125
 1306 01ae 032B     		cmp	r3, #3
 1307 01b0 14D0     		beq	.L126
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 33


 1308 01b2 1FE0     		b	.L97
 1309              	.L124:
 505:.\main.c      ****         case shldr_start:
 506:.\main.c      ****             shoulder_state = shldr_init;
 1310              		.loc 1 506 0
 1311 01b4 114B     		ldr	r3, .L132
 1312 01b6 0122     		mov	r2, #1
 1313 01b8 1A70     		strb	r2, [r3]
 507:.\main.c      ****             break;
 1314              		.loc 1 507 0
 1315 01ba 1BE0     		b	.L97
 1316              	.L122:
 508:.\main.c      ****         
 509:.\main.c      ****         case shldr_init:
 510:.\main.c      ****             shoulder_state = shldr_wait;
 1317              		.loc 1 510 0
 1318 01bc 0F4B     		ldr	r3, .L132
 1319 01be 0322     		mov	r2, #3
 1320 01c0 1A70     		strb	r2, [r3]
 511:.\main.c      ****             break;
 1321              		.loc 1 511 0
 1322 01c2 17E0     		b	.L97
 1323              	.L125:
 512:.\main.c      ****         
 513:.\main.c      ****         case shldr_execute:
 514:.\main.c      ****             if(new_pack)
 1324              		.loc 1 514 0
 1325 01c4 164B     		ldr	r3, .L132+36
 1326 01c6 1B78     		ldrb	r3, [r3]
 1327 01c8 002B     		cmp	r3, #0
 1328 01ca 03D0     		beq	.L127
 515:.\main.c      ****             {
 516:.\main.c      ****                 shoulder_state = shldr_execute;
 1329              		.loc 1 516 0
 1330 01cc 0B4B     		ldr	r3, .L132
 1331 01ce 0222     		mov	r2, #2
 1332 01d0 1A70     		strb	r2, [r3]
 517:.\main.c      ****             }
 518:.\main.c      ****             else
 519:.\main.c      ****             {
 520:.\main.c      ****                 shoulder_state = shldr_wait;
 521:.\main.c      ****             }
 522:.\main.c      ****             break;
 1333              		.loc 1 522 0
 1334 01d2 0FE0     		b	.L97
 1335              	.L127:
 520:.\main.c      ****                 shoulder_state = shldr_wait;
 1336              		.loc 1 520 0
 1337 01d4 094B     		ldr	r3, .L132
 1338 01d6 0322     		mov	r2, #3
 1339 01d8 1A70     		strb	r2, [r3]
 1340              		.loc 1 522 0
 1341 01da 0BE0     		b	.L97
 1342              	.L126:
 523:.\main.c      ****         
 524:.\main.c      ****         case shldr_wait:
 525:.\main.c      ****             if(new_pack)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 34


 1343              		.loc 1 525 0
 1344 01dc 104B     		ldr	r3, .L132+36
 1345 01de 1B78     		ldrb	r3, [r3]
 1346 01e0 002B     		cmp	r3, #0
 1347 01e2 03D0     		beq	.L129
 526:.\main.c      ****             {
 527:.\main.c      ****                 shoulder_state = shldr_execute;
 1348              		.loc 1 527 0
 1349 01e4 054B     		ldr	r3, .L132
 1350 01e6 0222     		mov	r2, #2
 1351 01e8 1A70     		strb	r2, [r3]
 1352 01ea 02E0     		b	.L130
 1353              	.L129:
 528:.\main.c      ****             }
 529:.\main.c      ****             else
 530:.\main.c      ****             {
 531:.\main.c      ****                 shoulder_state = shldr_wait; 
 1354              		.loc 1 531 0
 1355 01ec 034B     		ldr	r3, .L132
 1356 01ee 0322     		mov	r2, #3
 1357 01f0 1A70     		strb	r2, [r3]
 1358              	.L130:
 532:.\main.c      ****             }
 533:.\main.c      ****             break;
 1359              		.loc 1 533 0
 1360 01f2 C046     		mov	r8, r8
 1361              	.L97:
 534:.\main.c      ****     }    
 535:.\main.c      **** }
 1362              		.loc 1 535 0
 1363 01f4 BD46     		mov	sp, r7
 1364 01f6 03B0     		add	sp, sp, #12
 1365              		@ sp needed
 1366 01f8 90BD     		pop	{r4, r7, pc}
 1367              	.L133:
 1368 01fa C046     		.align	2
 1369              	.L132:
 1370 01fc 00000000 		.word	shoulder_state
 1371 0200 00000000 		.word	shoulder_array
 1372 0204 DC050000 		.word	1500
 1373 0208 00000000 		.word	shldr_arr_cspot
 1374 020c 00000000 		.word	data_array
 1375 0210 DB050000 		.word	1499
 1376 0214 E7030000 		.word	999
 1377 0218 FFF90000 		.word	63999
 1378 021c 00000000 		.word	fin_exec
 1379 0220 00000000 		.word	new_pack
 1380              		.cfi_endproc
 1381              	.LFE43:
 1382              		.size	shoulder, .-shoulder
 1383              		.comm	baseAzimuth_state,1,1
 1384              		.section	.text.baseAzimuth,"ax",%progbits
 1385              		.align	2
 1386              		.global	baseAzimuth
 1387              		.code	16
 1388              		.thumb_func
 1389              		.type	baseAzimuth, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 35


 1390              	baseAzimuth:
 1391              	.LFB44:
 536:.\main.c      **** 
 537:.\main.c      **** //control the turret
 538:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 539:.\main.c      **** void baseAzimuth()
 540:.\main.c      **** { 
 1392              		.loc 1 540 0
 1393              		.cfi_startproc
 1394 0000 90B5     		push	{r4, r7, lr}
 1395              		.cfi_def_cfa_offset 12
 1396              		.cfi_offset 4, -12
 1397              		.cfi_offset 7, -8
 1398              		.cfi_offset 14, -4
 1399 0002 83B0     		sub	sp, sp, #12
 1400              		.cfi_def_cfa_offset 24
 1401 0004 00AF     		add	r7, sp, #0
 1402              		.cfi_def_cfa_register 7
 541:.\main.c      ****     //take instruction from data_array
 542:.\main.c      ****     //smooth input
 543:.\main.c      ****     //actuate the turret using PWM
 544:.\main.c      ****     uint8 i;
 545:.\main.c      ****     uint16 avg;
 546:.\main.c      ****     uint16 command;
 547:.\main.c      ****     
 548:.\main.c      ****     switch(baseAzimuth_state){ //actions
 1403              		.loc 1 548 0
 1404 0006 4C4B     		ldr	r3, .L159
 1405 0008 1B78     		ldrb	r3, [r3]
 1406 000a 012B     		cmp	r3, #1
 1407 000c 03D0     		beq	.L136
 1408 000e 61DD     		ble	.L158
 1409 0010 022B     		cmp	r3, #2
 1410 0012 17D0     		beq	.L139
 549:.\main.c      ****         case BA_start:
 550:.\main.c      ****             break;
 551:.\main.c      **** 
 552:.\main.c      ****         case BA_init:
 553:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 554:.\main.c      ****             {
 555:.\main.c      ****                 baseAz_array[i] = 1500;
 556:.\main.c      ****             }
 557:.\main.c      ****             BA_arr_cspot = 0;
 558:.\main.c      ****             break;
 559:.\main.c      **** 
 560:.\main.c      ****         case BA_execute:
 561:.\main.c      ****             command = (((data_array[BA_BYTE_1] << 8) | data_array[BA_BYTE_2])/2) + 1500;
 562:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 563:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 564:.\main.c      ****             {
 565:.\main.c      ****                 BA_arr_cspot++;
 566:.\main.c      ****             }
 567:.\main.c      ****             else
 568:.\main.c      ****             {
 569:.\main.c      ****                 BA_arr_cspot = 0;
 570:.\main.c      ****             }
 571:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 36


 572:.\main.c      **** //            if(command >= 1000 && command < 1100)
 573:.\main.c      **** //            {
 574:.\main.c      **** //                if(BA_arr_cspot != 0)
 575:.\main.c      **** //                {
 576:.\main.c      **** //                    if(baseAz_array[BA_arr_cspot - 1] >= 1020)
 577:.\main.c      **** //                    {
 578:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 20);
 579:.\main.c      **** //                    }
 580:.\main.c      **** //                    else
 581:.\main.c      **** //                    {
 582:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 1000;
 583:.\main.c      **** //                    }
 584:.\main.c      **** //                    
 585:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 586:.\main.c      **** //                    {
 587:.\main.c      **** //                        BA_arr_cspot++;
 588:.\main.c      **** //                    }
 589:.\main.c      **** //                    else
 590:.\main.c      **** //                    {
 591:.\main.c      **** //                        BA_arr_cspot = 0;
 592:.\main.c      **** //                    }
 593:.\main.c      **** //                }
 594:.\main.c      **** //                else if(BA_arr_cspot == 0)
 595:.\main.c      **** //                {
 596:.\main.c      **** //                    if(baseAz_array[BA_ARR_SIZE - 1] >= 1020)
 597:.\main.c      **** //                    {
 598:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 20);
 599:.\main.c      **** //                    }
 600:.\main.c      **** //                    else
 601:.\main.c      **** //                    {
 602:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 1000;
 603:.\main.c      **** //                    }
 604:.\main.c      **** //                    
 605:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 606:.\main.c      **** //                    {
 607:.\main.c      **** //                        BA_arr_cspot++;
 608:.\main.c      **** //                    }
 609:.\main.c      **** //                    else
 610:.\main.c      **** //                    {
 611:.\main.c      **** //                        BA_arr_cspot = 0;
 612:.\main.c      **** //                    }
 613:.\main.c      **** //                }
 614:.\main.c      **** //                else
 615:.\main.c      **** //                {
 616:.\main.c      **** //                    BA_arr_cspot = 0;
 617:.\main.c      **** //                }
 618:.\main.c      **** //            }
 619:.\main.c      **** //            else if(command >= 1100 && command < 1300)
 620:.\main.c      **** //            {
 621:.\main.c      **** //                if(BA_arr_cspot != 0)
 622:.\main.c      **** //                {
 623:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 10);
 624:.\main.c      **** //                    
 625:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 626:.\main.c      **** //                    {
 627:.\main.c      **** //                        BA_arr_cspot++;
 628:.\main.c      **** //                    }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 37


 629:.\main.c      **** //                    else
 630:.\main.c      **** //                    {
 631:.\main.c      **** //                        BA_arr_cspot = 0;
 632:.\main.c      **** //                    }
 633:.\main.c      **** //                }
 634:.\main.c      **** //                else if(BA_arr_cspot == 0)
 635:.\main.c      **** //                {
 636:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 10);
 637:.\main.c      **** //                   
 638:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 639:.\main.c      **** //                    {
 640:.\main.c      **** //                        BA_arr_cspot++;
 641:.\main.c      **** //                    }
 642:.\main.c      **** //                    else
 643:.\main.c      **** //                    {
 644:.\main.c      **** //                        BA_arr_cspot = 0;
 645:.\main.c      **** //                    }
 646:.\main.c      **** //                }
 647:.\main.c      **** //                else
 648:.\main.c      **** //                {
 649:.\main.c      **** //                    BA_arr_cspot = 0;   
 650:.\main.c      **** //                }    
 651:.\main.c      **** //            }
 652:.\main.c      **** //            else if(command >= 1300 && command < 1490)
 653:.\main.c      **** //            {
 654:.\main.c      **** //                if(BA_arr_cspot != 0)
 655:.\main.c      **** //                {
 656:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] - 5);
 657:.\main.c      **** //                    
 658:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 659:.\main.c      **** //                    {
 660:.\main.c      **** //                        BA_arr_cspot++;
 661:.\main.c      **** //                    }
 662:.\main.c      **** //                    else
 663:.\main.c      **** //                    {
 664:.\main.c      **** //                        BA_arr_cspot = 0;
 665:.\main.c      **** //                    }
 666:.\main.c      **** //                }
 667:.\main.c      **** //                else if(BA_arr_cspot == 0)
 668:.\main.c      **** //                {
 669:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] - 5);
 670:.\main.c      **** //                   
 671:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 672:.\main.c      **** //                    {
 673:.\main.c      **** //                        BA_arr_cspot++;
 674:.\main.c      **** //                    }
 675:.\main.c      **** //                    else
 676:.\main.c      **** //                    {
 677:.\main.c      **** //                        BA_arr_cspot = 0;
 678:.\main.c      **** //                    }
 679:.\main.c      **** //                }
 680:.\main.c      **** //                else
 681:.\main.c      **** //                {
 682:.\main.c      **** //                    BA_arr_cspot = 0;   
 683:.\main.c      **** //                }    
 684:.\main.c      **** //            }
 685:.\main.c      **** //            else if(command > 1510 && command <= 1700)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 38


 686:.\main.c      **** //            {
 687:.\main.c      **** //                if(BA_arr_cspot != 0)
 688:.\main.c      **** //                {
 689:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 5);
 690:.\main.c      **** //                    
 691:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 692:.\main.c      **** //                    {
 693:.\main.c      **** //                        BA_arr_cspot++;
 694:.\main.c      **** //                    }
 695:.\main.c      **** //                    else
 696:.\main.c      **** //                    {
 697:.\main.c      **** //                        BA_arr_cspot = 0;
 698:.\main.c      **** //                    }
 699:.\main.c      **** //                }
 700:.\main.c      **** //                else if(BA_arr_cspot == 0)
 701:.\main.c      **** //                {
 702:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 5);
 703:.\main.c      **** //                   
 704:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 705:.\main.c      **** //                    {
 706:.\main.c      **** //                        BA_arr_cspot++;
 707:.\main.c      **** //                    }
 708:.\main.c      **** //                    else
 709:.\main.c      **** //                    {
 710:.\main.c      **** //                        BA_arr_cspot = 0;
 711:.\main.c      **** //                    }
 712:.\main.c      **** //                }
 713:.\main.c      **** //                else
 714:.\main.c      **** //                {
 715:.\main.c      **** //                    BA_arr_cspot = 0;   
 716:.\main.c      **** //                }    
 717:.\main.c      **** //            }
 718:.\main.c      **** //            else if(command > 1700 && command <= 1900)
 719:.\main.c      **** //            {
 720:.\main.c      **** //                if(BA_arr_cspot != 0)
 721:.\main.c      **** //                {
 722:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 10);
 723:.\main.c      **** //                    
 724:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 725:.\main.c      **** //                    {
 726:.\main.c      **** //                        BA_arr_cspot++;
 727:.\main.c      **** //                    }
 728:.\main.c      **** //                    else
 729:.\main.c      **** //                    {
 730:.\main.c      **** //                        BA_arr_cspot = 0;
 731:.\main.c      **** //                    }
 732:.\main.c      **** //                }
 733:.\main.c      **** //                else if(BA_arr_cspot == 0)
 734:.\main.c      **** //                {
 735:.\main.c      **** //                    baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 10);
 736:.\main.c      **** //                   
 737:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 738:.\main.c      **** //                    {
 739:.\main.c      **** //                        BA_arr_cspot++;
 740:.\main.c      **** //                    }
 741:.\main.c      **** //                    else
 742:.\main.c      **** //                    {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 39


 743:.\main.c      **** //                        BA_arr_cspot = 0;
 744:.\main.c      **** //                    }
 745:.\main.c      **** //                }
 746:.\main.c      **** //                else
 747:.\main.c      **** //                {
 748:.\main.c      **** //                    BA_arr_cspot = 0;   
 749:.\main.c      **** //                }
 750:.\main.c      **** //            }
 751:.\main.c      **** //            else if(command > 1900 && command <= 2000)
 752:.\main.c      **** //            {
 753:.\main.c      **** //                if(BA_arr_cspot != 0)
 754:.\main.c      **** //                {
 755:.\main.c      **** //                    if(baseAz_array[BA_arr_cspot - 1] <= 1980)
 756:.\main.c      **** //                    {
 757:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_arr_cspot - 1] + 20);
 758:.\main.c      **** //                    }
 759:.\main.c      **** //                    else
 760:.\main.c      **** //                    {
 761:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 2000;
 762:.\main.c      **** //                    }
 763:.\main.c      **** //                    
 764:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 765:.\main.c      **** //                    {
 766:.\main.c      **** //                        BA_arr_cspot++;
 767:.\main.c      **** //                    }
 768:.\main.c      **** //                    else
 769:.\main.c      **** //                    {
 770:.\main.c      **** //                        BA_arr_cspot = 0;
 771:.\main.c      **** //                    }
 772:.\main.c      **** //                }
 773:.\main.c      **** //                else if(BA_arr_cspot == 0)
 774:.\main.c      **** //                {
 775:.\main.c      **** //                    if(baseAz_array[BA_ARR_SIZE - 1] <= 1980)
 776:.\main.c      **** //                    {
 777:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = (baseAz_array[BA_ARR_SIZE - 1] + 20);
 778:.\main.c      **** //                    }
 779:.\main.c      **** //                    else
 780:.\main.c      **** //                    {
 781:.\main.c      **** //                        baseAz_array[BA_arr_cspot] = 2000;
 782:.\main.c      **** //                    }
 783:.\main.c      **** //                    
 784:.\main.c      **** //                    if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 785:.\main.c      **** //                    {
 786:.\main.c      **** //                        BA_arr_cspot++;
 787:.\main.c      **** //                    }
 788:.\main.c      **** //                    else
 789:.\main.c      **** //                    {
 790:.\main.c      **** //                        BA_arr_cspot = 0;
 791:.\main.c      **** //                    }
 792:.\main.c      **** //                }
 793:.\main.c      **** //                else
 794:.\main.c      **** //                {
 795:.\main.c      **** //                    BA_arr_cspot = 0;
 796:.\main.c      **** //                }
 797:.\main.c      **** //            }
 798:.\main.c      **** //            else if(command <= 1510 && command >= 1490)
 799:.\main.c      **** //            {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 40


 800:.\main.c      **** //                if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 801:.\main.c      **** //                {
 802:.\main.c      **** //                    BA_arr_cspot++;
 803:.\main.c      **** //                }
 804:.\main.c      **** //                else
 805:.\main.c      **** //                {
 806:.\main.c      **** //                    BA_arr_cspot = 0;
 807:.\main.c      **** //                }
 808:.\main.c      **** //            }
 809:.\main.c      **** //            else
 810:.\main.c      **** //            {
 811:.\main.c      **** //                //throw error
 812:.\main.c      **** //                if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 813:.\main.c      **** //                {
 814:.\main.c      **** //                    BA_arr_cspot++;
 815:.\main.c      **** //                }
 816:.\main.c      **** //                else
 817:.\main.c      **** //                {
 818:.\main.c      **** //                    BA_arr_cspot = 0;
 819:.\main.c      **** //                }
 820:.\main.c      **** //            }
 821:.\main.c      ****             
 822:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 823:.\main.c      ****             
 824:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 825:.\main.c      ****             {
 826:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 827:.\main.c      ****             }
 828:.\main.c      ****             else
 829:.\main.c      ****             {
 830:.\main.c      ****                 //throw error
 831:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 832:.\main.c      ****             }
 833:.\main.c      ****             fin_exec++;
 834:.\main.c      ****             break;
 835:.\main.c      ****             
 836:.\main.c      ****         case BA_wait:
 837:.\main.c      ****             break;
 1411              		.loc 1 837 0
 1412 0014 5FE0     		b	.L135
 1413              	.L136:
 553:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1414              		.loc 1 553 0
 1415 0016 FB1D     		add	r3, r7, #7
 1416 0018 0022     		mov	r2, #0
 1417 001a 1A70     		strb	r2, [r3]
 1418 001c 0AE0     		b	.L141
 1419              	.L142:
 555:.\main.c      ****                 baseAz_array[i] = 1500;
 1420              		.loc 1 555 0 discriminator 2
 1421 001e FB1D     		add	r3, r7, #7
 1422 0020 1A78     		ldrb	r2, [r3]
 1423 0022 464B     		ldr	r3, .L159+4
 1424 0024 5200     		lsl	r2, r2, #1
 1425 0026 4649     		ldr	r1, .L159+8
 1426 0028 D152     		strh	r1, [r2, r3]
 553:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 41


 1427              		.loc 1 553 0 discriminator 2
 1428 002a FB1D     		add	r3, r7, #7
 1429 002c 1A78     		ldrb	r2, [r3]
 1430 002e FB1D     		add	r3, r7, #7
 1431 0030 0132     		add	r2, r2, #1
 1432 0032 1A70     		strb	r2, [r3]
 1433              	.L141:
 553:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1434              		.loc 1 553 0 is_stmt 0 discriminator 1
 1435 0034 FB1D     		add	r3, r7, #7
 1436 0036 1B78     		ldrb	r3, [r3]
 1437 0038 132B     		cmp	r3, #19
 1438 003a F0D9     		bls	.L142
 557:.\main.c      ****             BA_arr_cspot = 0;
 1439              		.loc 1 557 0 is_stmt 1
 1440 003c 414B     		ldr	r3, .L159+12
 1441 003e 0022     		mov	r2, #0
 1442 0040 1A70     		strb	r2, [r3]
 558:.\main.c      ****             break;
 1443              		.loc 1 558 0
 1444 0042 48E0     		b	.L135
 1445              	.L139:
 561:.\main.c      ****             command = (((data_array[BA_BYTE_1] << 8) | data_array[BA_BYTE_2])/2) + 1500;
 1446              		.loc 1 561 0
 1447 0044 404B     		ldr	r3, .L159+16
 1448 0046 1B89     		ldrh	r3, [r3, #8]
 1449 0048 1A02     		lsl	r2, r3, #8
 1450 004a 3F4B     		ldr	r3, .L159+16
 1451 004c 5B89     		ldrh	r3, [r3, #10]
 1452 004e 1343     		orr	r3, r2
 1453 0050 00D5     		bpl	.L143
 1454 0052 0133     		add	r3, r3, #1
 1455              	.L143:
 1456 0054 5B10     		asr	r3, r3, #1
 1457 0056 9AB2     		uxth	r2, r3
 1458 0058 3B1D     		add	r3, r7, #4
 1459 005a 3949     		ldr	r1, .L159+8
 1460 005c 5218     		add	r2, r2, r1
 1461 005e 1A80     		strh	r2, [r3]
 562:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 1462              		.loc 1 562 0
 1463 0060 384B     		ldr	r3, .L159+12
 1464 0062 1B78     		ldrb	r3, [r3]
 1465 0064 1A1C     		mov	r2, r3
 1466 0066 354B     		ldr	r3, .L159+4
 1467 0068 5200     		lsl	r2, r2, #1
 1468 006a 391D     		add	r1, r7, #4
 1469 006c 0988     		ldrh	r1, [r1]
 1470 006e D152     		strh	r1, [r2, r3]
 563:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 1471              		.loc 1 563 0
 1472 0070 344B     		ldr	r3, .L159+12
 1473 0072 1B78     		ldrb	r3, [r3]
 1474 0074 122B     		cmp	r3, #18
 1475 0076 06D8     		bhi	.L144
 565:.\main.c      ****                 BA_arr_cspot++;
 1476              		.loc 1 565 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 42


 1477 0078 324B     		ldr	r3, .L159+12
 1478 007a 1B78     		ldrb	r3, [r3]
 1479 007c 0133     		add	r3, r3, #1
 1480 007e DAB2     		uxtb	r2, r3
 1481 0080 304B     		ldr	r3, .L159+12
 1482 0082 1A70     		strb	r2, [r3]
 1483 0084 02E0     		b	.L145
 1484              	.L144:
 569:.\main.c      ****                 BA_arr_cspot = 0;
 1485              		.loc 1 569 0
 1486 0086 2F4B     		ldr	r3, .L159+12
 1487 0088 0022     		mov	r2, #0
 1488 008a 1A70     		strb	r2, [r3]
 1489              	.L145:
 822:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 1490              		.loc 1 822 0
 1491 008c BC1C     		add	r4, r7, #2
 1492 008e 2B4B     		ldr	r3, .L159+4
 1493 0090 181C     		mov	r0, r3
 1494 0092 1421     		mov	r1, #20
 1495 0094 FFF7FEFF 		bl	average
 1496 0098 031C     		mov	r3, r0
 1497 009a 2380     		strh	r3, [r4]
 824:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1498              		.loc 1 824 0
 1499 009c BB1C     		add	r3, r7, #2
 1500 009e 1A88     		ldrh	r2, [r3]
 1501 00a0 FA23     		mov	r3, #250
 1502 00a2 DB00     		lsl	r3, r3, #3
 1503 00a4 9A42     		cmp	r2, r3
 1504 00a6 0AD8     		bhi	.L146
 824:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1505              		.loc 1 824 0 is_stmt 0 discriminator 1
 1506 00a8 BB1C     		add	r3, r7, #2
 1507 00aa 1A88     		ldrh	r2, [r3]
 1508 00ac 274B     		ldr	r3, .L159+20
 1509 00ae 9A42     		cmp	r2, r3
 1510 00b0 05D9     		bls	.L146
 826:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 1511              		.loc 1 826 0 is_stmt 1
 1512 00b2 BB1C     		add	r3, r7, #2
 1513 00b4 1B88     		ldrh	r3, [r3]
 1514 00b6 181C     		mov	r0, r3
 1515 00b8 FFF7FEFF 		bl	BA_PWM_WriteCompare
 1516 00bc 03E0     		b	.L147
 1517              	.L146:
 831:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 1518              		.loc 1 831 0
 1519 00be 204B     		ldr	r3, .L159+8
 1520 00c0 181C     		mov	r0, r3
 1521 00c2 FFF7FEFF 		bl	BA_PWM_WriteCompare
 1522              	.L147:
 833:.\main.c      ****             fin_exec++;
 1523              		.loc 1 833 0
 1524 00c6 224B     		ldr	r3, .L159+24
 1525 00c8 1B78     		ldrb	r3, [r3]
 1526 00ca 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 43


 1527 00cc DAB2     		uxtb	r2, r3
 1528 00ce 204B     		ldr	r3, .L159+24
 1529 00d0 1A70     		strb	r2, [r3]
 834:.\main.c      ****             break;
 1530              		.loc 1 834 0
 1531 00d2 00E0     		b	.L135
 1532              	.L158:
 550:.\main.c      ****             break;
 1533              		.loc 1 550 0
 1534 00d4 C046     		mov	r8, r8
 1535              	.L135:
 838:.\main.c      ****     }
 839:.\main.c      ****     
 840:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 1536              		.loc 1 840 0
 1537 00d6 184B     		ldr	r3, .L159
 1538 00d8 1B78     		ldrb	r3, [r3]
 1539 00da 012B     		cmp	r3, #1
 1540 00dc 0CD0     		beq	.L149
 1541 00de 02DC     		bgt	.L150
 1542 00e0 002B     		cmp	r3, #0
 1543 00e2 05D0     		beq	.L151
 1544 00e4 24E0     		b	.L134
 1545              	.L150:
 1546 00e6 022B     		cmp	r3, #2
 1547 00e8 0AD0     		beq	.L152
 1548 00ea 032B     		cmp	r3, #3
 1549 00ec 14D0     		beq	.L153
 1550 00ee 1FE0     		b	.L134
 1551              	.L151:
 841:.\main.c      ****         case BA_start:
 842:.\main.c      ****             baseAzimuth_state = BA_init;
 1552              		.loc 1 842 0
 1553 00f0 114B     		ldr	r3, .L159
 1554 00f2 0122     		mov	r2, #1
 1555 00f4 1A70     		strb	r2, [r3]
 843:.\main.c      ****             break;
 1556              		.loc 1 843 0
 1557 00f6 1BE0     		b	.L134
 1558              	.L149:
 844:.\main.c      ****         
 845:.\main.c      ****         case BA_init:
 846:.\main.c      ****             baseAzimuth_state = BA_wait;
 1559              		.loc 1 846 0
 1560 00f8 0F4B     		ldr	r3, .L159
 1561 00fa 0322     		mov	r2, #3
 1562 00fc 1A70     		strb	r2, [r3]
 847:.\main.c      ****             break;
 1563              		.loc 1 847 0
 1564 00fe 17E0     		b	.L134
 1565              	.L152:
 848:.\main.c      ****         
 849:.\main.c      ****         case BA_execute:
 850:.\main.c      ****             if(new_pack)
 1566              		.loc 1 850 0
 1567 0100 144B     		ldr	r3, .L159+28
 1568 0102 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 44


 1569 0104 002B     		cmp	r3, #0
 1570 0106 03D0     		beq	.L154
 851:.\main.c      ****             {
 852:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1571              		.loc 1 852 0
 1572 0108 0B4B     		ldr	r3, .L159
 1573 010a 0222     		mov	r2, #2
 1574 010c 1A70     		strb	r2, [r3]
 853:.\main.c      ****             }
 854:.\main.c      ****             else
 855:.\main.c      ****             {
 856:.\main.c      ****                 baseAzimuth_state = BA_wait;
 857:.\main.c      ****             }
 858:.\main.c      ****             break;
 1575              		.loc 1 858 0
 1576 010e 0FE0     		b	.L134
 1577              	.L154:
 856:.\main.c      ****                 baseAzimuth_state = BA_wait;
 1578              		.loc 1 856 0
 1579 0110 094B     		ldr	r3, .L159
 1580 0112 0322     		mov	r2, #3
 1581 0114 1A70     		strb	r2, [r3]
 1582              		.loc 1 858 0
 1583 0116 0BE0     		b	.L134
 1584              	.L153:
 859:.\main.c      ****         
 860:.\main.c      ****         case BA_wait:
 861:.\main.c      ****             if(new_pack)
 1585              		.loc 1 861 0
 1586 0118 0E4B     		ldr	r3, .L159+28
 1587 011a 1B78     		ldrb	r3, [r3]
 1588 011c 002B     		cmp	r3, #0
 1589 011e 03D0     		beq	.L156
 862:.\main.c      ****             {
 863:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1590              		.loc 1 863 0
 1591 0120 054B     		ldr	r3, .L159
 1592 0122 0222     		mov	r2, #2
 1593 0124 1A70     		strb	r2, [r3]
 1594 0126 02E0     		b	.L157
 1595              	.L156:
 864:.\main.c      ****             }
 865:.\main.c      ****             else
 866:.\main.c      ****             {
 867:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 1596              		.loc 1 867 0
 1597 0128 034B     		ldr	r3, .L159
 1598 012a 0322     		mov	r2, #3
 1599 012c 1A70     		strb	r2, [r3]
 1600              	.L157:
 868:.\main.c      ****             }
 869:.\main.c      ****             break;
 1601              		.loc 1 869 0
 1602 012e C046     		mov	r8, r8
 1603              	.L134:
 870:.\main.c      ****     }    
 871:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 45


 1604              		.loc 1 871 0
 1605 0130 BD46     		mov	sp, r7
 1606 0132 03B0     		add	sp, sp, #12
 1607              		@ sp needed
 1608 0134 90BD     		pop	{r4, r7, pc}
 1609              	.L160:
 1610 0136 C046     		.align	2
 1611              	.L159:
 1612 0138 00000000 		.word	baseAzimuth_state
 1613 013c 00000000 		.word	baseAz_array
 1614 0140 DC050000 		.word	1500
 1615 0144 00000000 		.word	BA_arr_cspot
 1616 0148 00000000 		.word	data_array
 1617 014c E7030000 		.word	999
 1618 0150 00000000 		.word	fin_exec
 1619 0154 00000000 		.word	new_pack
 1620              		.cfi_endproc
 1621              	.LFE44:
 1622              		.size	baseAzimuth, .-baseAzimuth
 1623              		.section	.text.main,"ax",%progbits
 1624              		.align	2
 1625              		.global	main
 1626              		.code	16
 1627              		.thumb_func
 1628              		.type	main, %function
 1629              	main:
 1630              	.LFB45:
 872:.\main.c      **** 
 873:.\main.c      **** int main()
 874:.\main.c      **** {  
 1631              		.loc 1 874 0
 1632              		.cfi_startproc
 1633 0000 80B5     		push	{r7, lr}
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 7, -8
 1636              		.cfi_offset 14, -4
 1637 0002 86B0     		sub	sp, sp, #24
 1638              		.cfi_def_cfa_offset 32
 1639 0004 00AF     		add	r7, sp, #0
 1640              		.cfi_def_cfa_register 7
 875:.\main.c      ****     CyGlobalIntEnable;
 1641              		.loc 1 875 0
 1642              	@ 875 ".\main.c" 1
 1643 0006 62B6     		CPSIE   i
 1644              	@ 0 "" 2
 876:.\main.c      ****     
 877:.\main.c      ****     //Define variables
 878:.\main.c      ****     time_t t;
 879:.\main.c      ****     uint8 counter;
 880:.\main.c      ****     int direction = 0;
 1645              		.loc 1 880 0
 1646              		.code	16
 1647 0008 0023     		mov	r3, #0
 1648 000a FB60     		str	r3, [r7, #12]
 881:.\main.c      ****     
 882:.\main.c      ****     //start all of our components
 883:.\main.c      ****     Clock_pwm_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 46


 1649              		.loc 1 883 0
 1650 000c FFF7FEFF 		bl	Clock_pwm_Start
 884:.\main.c      ****     Clock_counter_Start();
 1651              		.loc 1 884 0
 1652 0010 FFF7FEFF 		bl	Clock_counter_Start
 885:.\main.c      ****     
 886:.\main.c      ****     UART_1_Start();
 1653              		.loc 1 886 0
 1654 0014 FFF7FEFF 		bl	UART_1_Start
 887:.\main.c      ****     
 888:.\main.c      ****     SHLDR_PWM_Start();
 1655              		.loc 1 888 0
 1656 0018 FFF7FEFF 		bl	SHLDR_PWM_Start
 889:.\main.c      ****     BA_PWM_Start();
 1657              		.loc 1 889 0
 1658 001c FFF7FEFF 		bl	BA_PWM_Start
 890:.\main.c      ****     ELBW_PWM_Start();
 1659              		.loc 1 890 0
 1660 0020 FFF7FEFF 		bl	ELBW_PWM_Start
 891:.\main.c      ****     
 892:.\main.c      ****     ELBW_PWM_WriteCompare(1500); //Initialize our motor drivers
 1661              		.loc 1 892 0
 1662 0024 584B     		ldr	r3, .L173
 1663 0026 181C     		mov	r0, r3
 1664 0028 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 893:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 1665              		.loc 1 893 0
 1666 002c 564B     		ldr	r3, .L173
 1667 002e 181C     		mov	r0, r3
 1668 0030 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 894:.\main.c      ****     CyDelay(10000);
 1669              		.loc 1 894 0
 1670 0034 554B     		ldr	r3, .L173+4
 1671 0036 181C     		mov	r0, r3
 1672 0038 FFF7FEFF 		bl	CyDelay
 895:.\main.c      ****    
 896:.\main.c      ****     Timer_1_Start();
 1673              		.loc 1 896 0
 1674 003c FFF7FEFF 		bl	Timer_1_Start
 897:.\main.c      ****     
 898:.\main.c      ****     ADC_Start();
 1675              		.loc 1 898 0
 1676 0040 FFF7FEFF 		bl	ADC_Start
 899:.\main.c      ****     ADC_StartConvert();
 1677              		.loc 1 899 0
 1678 0044 FFF7FEFF 		bl	ADC_StartConvert
 900:.\main.c      ****     
 901:.\main.c      ****     isr_1_StartEx(timer_isr);
 1679              		.loc 1 901 0
 1680 0048 514B     		ldr	r3, .L173+8
 1681 004a 181C     		mov	r0, r3
 1682 004c FFF7FEFF 		bl	isr_1_StartEx
 902:.\main.c      **** 
 903:.\main.c      ****     //helps for generating random arrays
 904:.\main.c      ****     srand((unsigned) time(&t));
 1683              		.loc 1 904 0
 1684 0050 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 47


 1685 0052 181C     		mov	r0, r3
 1686 0054 FFF7FEFF 		bl	time
 1687 0058 031C     		mov	r3, r0
 1688 005a 181C     		mov	r0, r3
 1689 005c FFF7FEFF 		bl	srand
 1690              	.L171:
 905:.\main.c      ****     
 906:.\main.c      ****     for(;;)
 907:.\main.c      ****     {
 908:.\main.c      ****         //check addresses
 909:.\main.c      ****         //TODO get the address bytes from Steve
 910:.\main.c      ****         
 911:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1691              		.loc 1 911 0
 1692 0060 4C4B     		ldr	r3, .L173+12
 1693 0062 1B78     		ldrb	r3, [r3]
 1694 0064 002B     		cmp	r3, #0
 1695 0066 07D0     		beq	.L162
 912:.\main.c      ****         {
 913:.\main.c      ****             fill_data_array();
 1696              		.loc 1 913 0
 1697 0068 FFF7FEFF 		bl	fill_data_array
 914:.\main.c      ****             new_pack = 1;
 1698              		.loc 1 914 0
 1699 006c 4A4B     		ldr	r3, .L173+16
 1700 006e 0122     		mov	r2, #1
 1701 0070 1A70     		strb	r2, [r3]
 915:.\main.c      ****             fin_exec = 0;
 1702              		.loc 1 915 0
 1703 0072 4A4B     		ldr	r3, .L173+20
 1704 0074 0022     		mov	r2, #0
 1705 0076 1A70     		strb	r2, [r3]
 1706              	.L162:
 916:.\main.c      ****         }
 917:.\main.c      ****         
 918:.\main.c      ****         baseAzimuth();
 1707              		.loc 1 918 0
 1708 0078 FFF7FEFF 		bl	baseAzimuth
 919:.\main.c      ****         shoulder();
 1709              		.loc 1 919 0
 1710 007c FFF7FEFF 		bl	shoulder
 920:.\main.c      ****         elbow();
 1711              		.loc 1 920 0
 1712 0080 FFF7FEFF 		bl	elbow
 921:.\main.c      **** //        wristTilt();
 922:.\main.c      **** //        wristRotate();
 923:.\main.c      **** 
 924:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1713              		.loc 1 924 0
 1714 0084 454B     		ldr	r3, .L173+20
 1715 0086 1B78     		ldrb	r3, [r3]
 1716 0088 032B     		cmp	r3, #3
 1717 008a 03D1     		bne	.L163
 925:.\main.c      ****         {
 926:.\main.c      ****             new_pack = 0;
 1718              		.loc 1 926 0
 1719 008c 424B     		ldr	r3, .L173+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 48


 1720 008e 0022     		mov	r2, #0
 1721 0090 1A70     		strb	r2, [r3]
 927:.\main.c      ****         }
 928:.\main.c      ****         
 929:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 1722              		.loc 1 929 0
 1723 0092 FFE7     		b	.L172
 1724              	.L163:
 1725              	.L172:
 1726 0094 C046     		mov	r8, r8
 1727              	.L164:
 1728              		.loc 1 929 0 is_stmt 0 discriminator 1
 1729 0096 424B     		ldr	r3, .L173+24
 1730 0098 1B78     		ldrb	r3, [r3]
 1731 009a 002B     		cmp	r3, #0
 1732 009c FBD0     		beq	.L164
 930:.\main.c      ****         timerFlag = 0;
 1733              		.loc 1 930 0 is_stmt 1
 1734 009e 404B     		ldr	r3, .L173+24
 1735 00a0 0022     		mov	r2, #0
 1736 00a2 1A70     		strb	r2, [r3]
 931:.\main.c      ****         
 932:.\main.c      ****         counter++;
 1737              		.loc 1 932 0
 1738 00a4 3B1C     		mov	r3, r7
 1739 00a6 1733     		add	r3, r3, #23
 1740 00a8 1A78     		ldrb	r2, [r3]
 1741 00aa 3B1C     		mov	r3, r7
 1742 00ac 1733     		add	r3, r3, #23
 1743 00ae 0132     		add	r2, r2, #1
 1744 00b0 1A70     		strb	r2, [r3]
 933:.\main.c      ****         
 934:.\main.c      ****         if(counter == 20)
 1745              		.loc 1 934 0
 1746 00b2 3B1C     		mov	r3, r7
 1747 00b4 1733     		add	r3, r3, #23
 1748 00b6 1B78     		ldrb	r3, [r3]
 1749 00b8 142B     		cmp	r3, #20
 1750 00ba 63D1     		bne	.L165
 1751              	.LBB3:
 935:.\main.c      ****         {
 936:.\main.c      ****             uint16 feedback1 = ADC_GetResult16(2);
 1752              		.loc 1 936 0
 1753 00bc 0220     		mov	r0, #2
 1754 00be FFF7FEFF 		bl	ADC_GetResult16
 1755 00c2 031C     		mov	r3, r0
 1756 00c4 1A1C     		mov	r2, r3
 1757 00c6 3B1C     		mov	r3, r7
 1758 00c8 0A33     		add	r3, r3, #10
 1759 00ca 1A80     		strh	r2, [r3]
 937:.\main.c      ****             int16 forward = 1000;
 1760              		.loc 1 937 0
 1761 00cc 3B1C     		mov	r3, r7
 1762 00ce 0833     		add	r3, r3, #8
 1763 00d0 FA22     		mov	r2, #250
 1764 00d2 9200     		lsl	r2, r2, #2
 1765 00d4 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 49


 938:.\main.c      ****             int16 backward = -1000;
 1766              		.loc 1 938 0
 1767 00d6 BB1D     		add	r3, r7, #6
 1768 00d8 324A     		ldr	r2, .L173+28
 1769 00da 1A80     		strh	r2, [r3]
 1770              	.LBB4:
 939:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1771              		.loc 1 939 0
 1772 00dc 0023     		mov	r3, #0
 1773 00de 3B61     		str	r3, [r7, #16]
 1774 00e0 45E0     		b	.L166
 1775              	.L170:
 940:.\main.c      ****             {
 941:.\main.c      **** //                int16 random_number = rand()%2001 - 1000;
 942:.\main.c      **** //                test_array[i] = random_number >> 8;
 943:.\main.c      **** //                test_array[i+1] = random_number & 0x00FF;
 944:.\main.c      **** //                if((second_counter%2) == 0)
 945:.\main.c      **** //                {
 946:.\main.c      **** //                    test_array[i] = ;
 947:.\main.c      **** //                }
 948:.\main.c      ****                 if (feedback1 > 500)
 1776              		.loc 1 948 0
 1777 00e2 3B1C     		mov	r3, r7
 1778 00e4 0A33     		add	r3, r3, #10
 1779 00e6 1A88     		ldrh	r2, [r3]
 1780 00e8 FA23     		mov	r3, #250
 1781 00ea 5B00     		lsl	r3, r3, #1
 1782 00ec 9A42     		cmp	r2, r3
 1783 00ee 15D9     		bls	.L167
 949:.\main.c      ****                 {
 950:.\main.c      ****                     test_array[i] = forward >> 8;
 1784              		.loc 1 950 0
 1785 00f0 3B1C     		mov	r3, r7
 1786 00f2 0833     		add	r3, r3, #8
 1787 00f4 0022     		mov	r2, #0
 1788 00f6 9B5E     		ldrsh	r3, [r3, r2]
 1789 00f8 1B12     		asr	r3, r3, #8
 1790 00fa 99B2     		uxth	r1, r3
 1791 00fc 2A4B     		ldr	r3, .L173+32
 1792 00fe 3A69     		ldr	r2, [r7, #16]
 1793 0100 5200     		lsl	r2, r2, #1
 1794 0102 D152     		strh	r1, [r2, r3]
 951:.\main.c      ****                     test_array[i+1] = forward & 0x00FF;
 1795              		.loc 1 951 0
 1796 0104 3B69     		ldr	r3, [r7, #16]
 1797 0106 5A1C     		add	r2, r3, #1
 1798 0108 3B1C     		mov	r3, r7
 1799 010a 0833     		add	r3, r3, #8
 1800 010c 1988     		ldrh	r1, [r3]
 1801 010e FF23     		mov	r3, #255
 1802 0110 0B40     		and	r3, r1
 1803 0112 99B2     		uxth	r1, r3
 1804 0114 244B     		ldr	r3, .L173+32
 1805 0116 5200     		lsl	r2, r2, #1
 1806 0118 D152     		strh	r1, [r2, r3]
 1807 011a 25E0     		b	.L168
 1808              	.L167:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 50


 952:.\main.c      ****                 }
 953:.\main.c      ****                 else if (feedback1 < 500)
 1809              		.loc 1 953 0
 1810 011c 3B1C     		mov	r3, r7
 1811 011e 0A33     		add	r3, r3, #10
 1812 0120 1A88     		ldrh	r2, [r3]
 1813 0122 F423     		mov	r3, #244
 1814 0124 FF33     		add	r3, r3, #255
 1815 0126 9A42     		cmp	r2, r3
 1816 0128 13D8     		bhi	.L169
 954:.\main.c      ****                 {
 955:.\main.c      ****                     test_array[i] = backward >> 8;
 1817              		.loc 1 955 0
 1818 012a BB1D     		add	r3, r7, #6
 1819 012c 0022     		mov	r2, #0
 1820 012e 9B5E     		ldrsh	r3, [r3, r2]
 1821 0130 1B12     		asr	r3, r3, #8
 1822 0132 99B2     		uxth	r1, r3
 1823 0134 1C4B     		ldr	r3, .L173+32
 1824 0136 3A69     		ldr	r2, [r7, #16]
 1825 0138 5200     		lsl	r2, r2, #1
 1826 013a D152     		strh	r1, [r2, r3]
 956:.\main.c      ****                     test_array[i+1] = backward & 0x00FF;
 1827              		.loc 1 956 0
 1828 013c 3B69     		ldr	r3, [r7, #16]
 1829 013e 5A1C     		add	r2, r3, #1
 1830 0140 BB1D     		add	r3, r7, #6
 1831 0142 1988     		ldrh	r1, [r3]
 1832 0144 FF23     		mov	r3, #255
 1833 0146 0B40     		and	r3, r1
 1834 0148 99B2     		uxth	r1, r3
 1835 014a 174B     		ldr	r3, .L173+32
 1836 014c 5200     		lsl	r2, r2, #1
 1837 014e D152     		strh	r1, [r2, r3]
 1838 0150 0AE0     		b	.L168
 1839              	.L169:
 957:.\main.c      ****                 }
 958:.\main.c      ****                 else
 959:.\main.c      ****                 {
 960:.\main.c      ****                     test_array[i] = 0;
 1840              		.loc 1 960 0
 1841 0152 154B     		ldr	r3, .L173+32
 1842 0154 3A69     		ldr	r2, [r7, #16]
 1843 0156 5200     		lsl	r2, r2, #1
 1844 0158 0021     		mov	r1, #0
 1845 015a D152     		strh	r1, [r2, r3]
 961:.\main.c      ****                     test_array[i+1] = 0;
 1846              		.loc 1 961 0
 1847 015c 3B69     		ldr	r3, [r7, #16]
 1848 015e 5A1C     		add	r2, r3, #1
 1849 0160 114B     		ldr	r3, .L173+32
 1850 0162 5200     		lsl	r2, r2, #1
 1851 0164 0021     		mov	r1, #0
 1852 0166 D152     		strh	r1, [r2, r3]
 1853              	.L168:
 939:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1854              		.loc 1 939 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 51


 1855 0168 3B69     		ldr	r3, [r7, #16]
 1856 016a 0233     		add	r3, r3, #2
 1857 016c 3B61     		str	r3, [r7, #16]
 1858              	.L166:
 939:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1859              		.loc 1 939 0 is_stmt 0 discriminator 1
 1860 016e 3B69     		ldr	r3, [r7, #16]
 1861 0170 092B     		cmp	r3, #9
 1862 0172 B6DD     		ble	.L170
 1863              	.LBE4:
 962:.\main.c      ****                 }
 963:.\main.c      ****                 
 964:.\main.c      ****             }
 965:.\main.c      ****             counter = 0;
 1864              		.loc 1 965 0 is_stmt 1
 1865 0174 3B1C     		mov	r3, r7
 1866 0176 1733     		add	r3, r3, #23
 1867 0178 0022     		mov	r2, #0
 1868 017a 1A70     		strb	r2, [r3]
 966:.\main.c      ****             wiznet = 1;
 1869              		.loc 1 966 0
 1870 017c 054B     		ldr	r3, .L173+12
 1871 017e 0122     		mov	r2, #1
 1872 0180 1A70     		strb	r2, [r3]
 1873              	.LBE3:
 967:.\main.c      ****         }
 968:.\main.c      ****         
 969:.\main.c      **** //            //Potential solution to how we will want to send feedback
 970:.\main.c      **** //            feedback_count++;
 971:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 972:.\main.c      **** //            {                                        //time through the full set of instructions
 973:.\main.c      **** //                send_feedback();
 974:.\main.c      **** //            }
 975:.\main.c      ****     }
 1874              		.loc 1 975 0
 1875 0182 6DE7     		b	.L171
 1876              	.L165:
 1877 0184 6CE7     		b	.L171
 1878              	.L174:
 1879 0186 C046     		.align	2
 1880              	.L173:
 1881 0188 DC050000 		.word	1500
 1882 018c 10270000 		.word	10000
 1883 0190 00000000 		.word	timer_isr
 1884 0194 00000000 		.word	wiznet
 1885 0198 00000000 		.word	new_pack
 1886 019c 00000000 		.word	fin_exec
 1887 01a0 00000000 		.word	timerFlag
 1888 01a4 18FCFFFF 		.word	-1000
 1889 01a8 00000000 		.word	test_array
 1890              		.cfi_endproc
 1891              	.LFE45:
 1892              		.size	main, .-main
 1893              		.text
 1894              	.Letext0:
 1895              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1896              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 52


 1897              		.section	.debug_info,"",%progbits
 1898              	.Ldebug_info0:
 1899 0000 57060000 		.4byte	0x657
 1900 0004 0400     		.2byte	0x4
 1901 0006 00000000 		.4byte	.Ldebug_abbrev0
 1902 000a 04       		.byte	0x4
 1903 000b 01       		.uleb128 0x1
 1904 000c 13040000 		.4byte	.LASF90
 1905 0010 01       		.byte	0x1
 1906 0011 E4030000 		.4byte	.LASF91
 1907 0015 D7020000 		.4byte	.LASF92
 1908 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1909 001d 00000000 		.4byte	0
 1910 0021 00000000 		.4byte	.Ldebug_line0
 1911 0025 02       		.uleb128 0x2
 1912 0026 01       		.byte	0x1
 1913 0027 06       		.byte	0x6
 1914 0028 3F010000 		.4byte	.LASF0
 1915 002c 02       		.uleb128 0x2
 1916 002d 01       		.byte	0x1
 1917 002e 08       		.byte	0x8
 1918 002f E2010000 		.4byte	.LASF1
 1919 0033 02       		.uleb128 0x2
 1920 0034 02       		.byte	0x2
 1921 0035 05       		.byte	0x5
 1922 0036 3C000000 		.4byte	.LASF2
 1923 003a 02       		.uleb128 0x2
 1924 003b 02       		.byte	0x2
 1925 003c 07       		.byte	0x7
 1926 003d 95020000 		.4byte	.LASF3
 1927 0041 02       		.uleb128 0x2
 1928 0042 04       		.byte	0x4
 1929 0043 05       		.byte	0x5
 1930 0044 84010000 		.4byte	.LASF4
 1931 0048 02       		.uleb128 0x2
 1932 0049 04       		.byte	0x4
 1933 004a 07       		.byte	0x7
 1934 004b 6F020000 		.4byte	.LASF5
 1935 004f 02       		.uleb128 0x2
 1936 0050 08       		.byte	0x8
 1937 0051 05       		.byte	0x5
 1938 0052 97000000 		.4byte	.LASF6
 1939 0056 02       		.uleb128 0x2
 1940 0057 08       		.byte	0x8
 1941 0058 07       		.byte	0x7
 1942 0059 4B020000 		.4byte	.LASF7
 1943 005d 03       		.uleb128 0x3
 1944 005e 04       		.byte	0x4
 1945 005f 05       		.byte	0x5
 1946 0060 696E7400 		.ascii	"int\000"
 1947 0064 02       		.uleb128 0x2
 1948 0065 04       		.byte	0x4
 1949 0066 07       		.byte	0x7
 1950 0067 62020000 		.4byte	.LASF8
 1951 006b 04       		.uleb128 0x4
 1952 006c C1010000 		.4byte	.LASF9
 1953 0070 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 53


 1954 0071 A1       		.byte	0xa1
 1955 0072 2C000000 		.4byte	0x2c
 1956 0076 04       		.uleb128 0x4
 1957 0077 FC000000 		.4byte	.LASF10
 1958 007b 02       		.byte	0x2
 1959 007c A2       		.byte	0xa2
 1960 007d 3A000000 		.4byte	0x3a
 1961 0081 04       		.uleb128 0x4
 1962 0082 7B030000 		.4byte	.LASF11
 1963 0086 02       		.byte	0x2
 1964 0087 A3       		.byte	0xa3
 1965 0088 48000000 		.4byte	0x48
 1966 008c 04       		.uleb128 0x4
 1967 008d 39010000 		.4byte	.LASF12
 1968 0091 02       		.byte	0x2
 1969 0092 A5       		.byte	0xa5
 1970 0093 33000000 		.4byte	0x33
 1971 0097 02       		.uleb128 0x2
 1972 0098 04       		.byte	0x4
 1973 0099 04       		.byte	0x4
 1974 009a 4B010000 		.4byte	.LASF13
 1975 009e 02       		.uleb128 0x2
 1976 009f 08       		.byte	0x8
 1977 00a0 04       		.byte	0x4
 1978 00a1 ED030000 		.4byte	.LASF14
 1979 00a5 02       		.uleb128 0x2
 1980 00a6 01       		.byte	0x1
 1981 00a7 08       		.byte	0x8
 1982 00a8 7F010000 		.4byte	.LASF15
 1983 00ac 02       		.uleb128 0x2
 1984 00ad 04       		.byte	0x4
 1985 00ae 07       		.byte	0x7
 1986 00af 53000000 		.4byte	.LASF16
 1987 00b3 05       		.uleb128 0x5
 1988 00b4 04       		.byte	0x4
 1989 00b5 A5000000 		.4byte	0xa5
 1990 00b9 04       		.uleb128 0x4
 1991 00ba 9D030000 		.4byte	.LASF17
 1992 00be 03       		.byte	0x3
 1993 00bf 7A       		.byte	0x7a
 1994 00c0 41000000 		.4byte	0x41
 1995 00c4 06       		.uleb128 0x6
 1996 00c5 A8020000 		.4byte	.LASF22
 1997 00c9 01       		.byte	0x1
 1998 00ca 01       		.byte	0x1
 1999 00cb 88       		.byte	0x88
 2000 00cc E9000000 		.4byte	0xe9
 2001 00d0 07       		.uleb128 0x7
 2002 00d1 B7010000 		.4byte	.LASF18
 2003 00d5 00       		.sleb128 0
 2004 00d6 07       		.uleb128 0x7
 2005 00d7 21000000 		.4byte	.LASF19
 2006 00db 01       		.sleb128 1
 2007 00dc 07       		.uleb128 0x7
 2008 00dd 82030000 		.4byte	.LASF20
 2009 00e1 02       		.sleb128 2
 2010 00e2 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 54


 2011 00e3 1A020000 		.4byte	.LASF21
 2012 00e7 03       		.sleb128 3
 2013 00e8 00       		.byte	0
 2014 00e9 06       		.uleb128 0x6
 2015 00ea 67000000 		.4byte	.LASF23
 2016 00ee 01       		.byte	0x1
 2017 00ef 01       		.byte	0x1
 2018 00f0 B9       		.byte	0xb9
 2019 00f1 0E010000 		.4byte	0x10e
 2020 00f5 07       		.uleb128 0x7
 2021 00f6 07040000 		.4byte	.LASF24
 2022 00fa 00       		.sleb128 0
 2023 00fb 07       		.uleb128 0x7
 2024 00fc 46000000 		.4byte	.LASF25
 2025 0100 01       		.sleb128 1
 2026 0101 07       		.uleb128 0x7
 2027 0102 3C020000 		.4byte	.LASF26
 2028 0106 02       		.sleb128 2
 2029 0107 07       		.uleb128 0x7
 2030 0108 CC040000 		.4byte	.LASF27
 2031 010c 03       		.sleb128 3
 2032 010d 00       		.byte	0
 2033 010e 08       		.uleb128 0x8
 2034 010f C2020000 		.4byte	.LASF28
 2035 0113 01       		.byte	0x1
 2036 0114 01       		.byte	0x1
 2037 0115 0701     		.2byte	0x107
 2038 0117 34010000 		.4byte	0x134
 2039 011b 07       		.uleb128 0x7
 2040 011c 51010000 		.4byte	.LASF29
 2041 0120 00       		.sleb128 0
 2042 0121 07       		.uleb128 0x7
 2043 0122 28020000 		.4byte	.LASF30
 2044 0126 01       		.sleb128 1
 2045 0127 07       		.uleb128 0x7
 2046 0128 BF040000 		.4byte	.LASF31
 2047 012c 02       		.sleb128 2
 2048 012d 07       		.uleb128 0x7
 2049 012e 9A040000 		.4byte	.LASF32
 2050 0132 03       		.sleb128 3
 2051 0133 00       		.byte	0
 2052 0134 08       		.uleb128 0x8
 2053 0135 C4000000 		.4byte	.LASF33
 2054 0139 01       		.byte	0x1
 2055 013a 01       		.byte	0x1
 2056 013b 9301     		.2byte	0x193
 2057 013d 5A010000 		.4byte	0x15a
 2058 0141 07       		.uleb128 0x7
 2059 0142 81000000 		.4byte	.LASF34
 2060 0146 00       		.sleb128 0
 2061 0147 07       		.uleb128 0x7
 2062 0148 16000000 		.4byte	.LASF35
 2063 014c 01       		.sleb128 1
 2064 014d 07       		.uleb128 0x7
 2065 014e B6000000 		.4byte	.LASF36
 2066 0152 02       		.sleb128 2
 2067 0153 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 55


 2068 0154 8A020000 		.4byte	.LASF37
 2069 0158 03       		.sleb128 3
 2070 0159 00       		.byte	0
 2071 015a 08       		.uleb128 0x8
 2072 015b 8D010000 		.4byte	.LASF38
 2073 015f 01       		.byte	0x1
 2074 0160 01       		.byte	0x1
 2075 0161 1A02     		.2byte	0x21a
 2076 0163 80010000 		.4byte	0x180
 2077 0167 07       		.uleb128 0x7
 2078 0168 0D000000 		.4byte	.LASF39
 2079 016c 00       		.sleb128 0
 2080 016d 07       		.uleb128 0x7
 2081 016e AE000000 		.4byte	.LASF40
 2082 0172 01       		.sleb128 1
 2083 0173 07       		.uleb128 0x7
 2084 0174 5C000000 		.4byte	.LASF41
 2085 0178 02       		.sleb128 2
 2086 0179 07       		.uleb128 0x7
 2087 017a 31010000 		.4byte	.LASF42
 2088 017e 03       		.sleb128 3
 2089 017f 00       		.byte	0
 2090 0180 09       		.uleb128 0x9
 2091 0181 F4030000 		.4byte	.LASF43
 2092 0185 01       		.byte	0x1
 2093 0186 41       		.byte	0x41
 2094 0187 00000000 		.4byte	.LFB33
 2095 018b 28000000 		.4byte	.LFE33-.LFB33
 2096 018f 01       		.uleb128 0x1
 2097 0190 9C       		.byte	0x9c
 2098 0191 A4010000 		.4byte	0x1a4
 2099 0195 0A       		.uleb128 0xa
 2100 0196 F0010000 		.4byte	.LASF45
 2101 019a 01       		.byte	0x1
 2102 019b 43       		.byte	0x43
 2103 019c 81000000 		.4byte	0x81
 2104 01a0 02       		.uleb128 0x2
 2105 01a1 91       		.byte	0x91
 2106 01a2 74       		.sleb128 -12
 2107 01a3 00       		.byte	0
 2108 01a4 09       		.uleb128 0x9
 2109 01a5 CF020000 		.4byte	.LASF44
 2110 01a9 01       		.byte	0x1
 2111 01aa 5A       		.byte	0x5a
 2112 01ab 00000000 		.4byte	.LFB34
 2113 01af 62000000 		.4byte	.LFE34-.LFB34
 2114 01b3 01       		.uleb128 0x1
 2115 01b4 9C       		.byte	0x9c
 2116 01b5 EA010000 		.4byte	0x1ea
 2117 01b9 0B       		.uleb128 0xb
 2118 01ba 7300     		.ascii	"s\000"
 2119 01bc 01       		.byte	0x1
 2120 01bd 5A       		.byte	0x5a
 2121 01be B3000000 		.4byte	0xb3
 2122 01c2 02       		.uleb128 0x2
 2123 01c3 91       		.byte	0x91
 2124 01c4 64       		.sleb128 -28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 56


 2125 01c5 0C       		.uleb128 0xc
 2126 01c6 6900     		.ascii	"i\000"
 2127 01c8 01       		.byte	0x1
 2128 01c9 5C       		.byte	0x5c
 2129 01ca 5D000000 		.4byte	0x5d
 2130 01ce 02       		.uleb128 0x2
 2131 01cf 91       		.byte	0x91
 2132 01d0 74       		.sleb128 -12
 2133 01d1 0C       		.uleb128 0xc
 2134 01d2 6A00     		.ascii	"j\000"
 2135 01d4 01       		.byte	0x1
 2136 01d5 5C       		.byte	0x5c
 2137 01d6 5D000000 		.4byte	0x5d
 2138 01da 02       		.uleb128 0x2
 2139 01db 91       		.byte	0x91
 2140 01dc 70       		.sleb128 -16
 2141 01dd 0C       		.uleb128 0xc
 2142 01de 6300     		.ascii	"c\000"
 2143 01e0 01       		.byte	0x1
 2144 01e1 5D       		.byte	0x5d
 2145 01e2 A5000000 		.4byte	0xa5
 2146 01e6 02       		.uleb128 0x2
 2147 01e7 91       		.byte	0x91
 2148 01e8 6F       		.sleb128 -17
 2149 01e9 00       		.byte	0
 2150 01ea 09       		.uleb128 0x9
 2151 01eb CF010000 		.4byte	.LASF46
 2152 01ef 01       		.byte	0x1
 2153 01f0 66       		.byte	0x66
 2154 01f1 00000000 		.4byte	.LFB35
 2155 01f5 7C000000 		.4byte	.LFE35-.LFB35
 2156 01f9 01       		.uleb128 0x1
 2157 01fa 9C       		.byte	0x9c
 2158 01fb 32020000 		.4byte	0x232
 2159 01ff 0B       		.uleb128 0xb
 2160 0200 6E00     		.ascii	"n\000"
 2161 0202 01       		.byte	0x1
 2162 0203 66       		.byte	0x66
 2163 0204 5D000000 		.4byte	0x5d
 2164 0208 02       		.uleb128 0x2
 2165 0209 91       		.byte	0x91
 2166 020a 64       		.sleb128 -28
 2167 020b 0B       		.uleb128 0xb
 2168 020c 7300     		.ascii	"s\000"
 2169 020e 01       		.byte	0x1
 2170 020f 66       		.byte	0x66
 2171 0210 B3000000 		.4byte	0xb3
 2172 0214 02       		.uleb128 0x2
 2173 0215 91       		.byte	0x91
 2174 0216 60       		.sleb128 -32
 2175 0217 0C       		.uleb128 0xc
 2176 0218 6900     		.ascii	"i\000"
 2177 021a 01       		.byte	0x1
 2178 021b 68       		.byte	0x68
 2179 021c 5D000000 		.4byte	0x5d
 2180 0220 02       		.uleb128 0x2
 2181 0221 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 57


 2182 0222 6C       		.sleb128 -20
 2183 0223 0A       		.uleb128 0xa
 2184 0224 8F030000 		.4byte	.LASF47
 2185 0228 01       		.byte	0x1
 2186 0229 68       		.byte	0x68
 2187 022a 5D000000 		.4byte	0x5d
 2188 022e 02       		.uleb128 0x2
 2189 022f 91       		.byte	0x91
 2190 0230 68       		.sleb128 -24
 2191 0231 00       		.byte	0
 2192 0232 0D       		.uleb128 0xd
 2193 0233 BC030000 		.4byte	.LASF53
 2194 0237 01       		.byte	0x1
 2195 0238 78       		.byte	0x78
 2196 0239 76000000 		.4byte	0x76
 2197 023d 00000000 		.4byte	.LFB36
 2198 0241 28000000 		.4byte	.LFE36-.LFB36
 2199 0245 01       		.uleb128 0x1
 2200 0246 9C       		.byte	0x9c
 2201 0247 68020000 		.4byte	0x268
 2202 024b 0E       		.uleb128 0xe
 2203 024c 47030000 		.4byte	.LASF48
 2204 0250 01       		.byte	0x1
 2205 0251 78       		.byte	0x78
 2206 0252 81000000 		.4byte	0x81
 2207 0256 02       		.uleb128 0x2
 2208 0257 91       		.byte	0x91
 2209 0258 6C       		.sleb128 -20
 2210 0259 0A       		.uleb128 0xa
 2211 025a B9020000 		.4byte	.LASF49
 2212 025e 01       		.byte	0x1
 2213 025f 79       		.byte	0x79
 2214 0260 76000000 		.4byte	0x76
 2215 0264 02       		.uleb128 0x2
 2216 0265 91       		.byte	0x91
 2217 0266 76       		.sleb128 -10
 2218 0267 00       		.byte	0
 2219 0268 0F       		.uleb128 0xf
 2220 0269 2C000000 		.4byte	.LASF57
 2221 026d 01       		.byte	0x1
 2222 026e 7D       		.byte	0x7d
 2223 026f 00000000 		.4byte	.LFB37
 2224 0273 4C000000 		.4byte	.LFE37-.LFB37
 2225 0277 01       		.uleb128 0x1
 2226 0278 9C       		.byte	0x9c
 2227 0279 8A020000 		.4byte	0x28a
 2228 027d 0C       		.uleb128 0xc
 2229 027e 6900     		.ascii	"i\000"
 2230 0280 01       		.byte	0x1
 2231 0281 7F       		.byte	0x7f
 2232 0282 6B000000 		.4byte	0x6b
 2233 0286 02       		.uleb128 0x2
 2234 0287 91       		.byte	0x91
 2235 0288 77       		.sleb128 -9
 2236 0289 00       		.byte	0
 2237 028a 10       		.uleb128 0x10
 2238 028b 75010000 		.4byte	.LASF50
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 58


 2239 028f 01       		.byte	0x1
 2240 0290 8A       		.byte	0x8a
 2241 0291 00000000 		.4byte	.LFB38
 2242 0295 48000000 		.4byte	.LFE38-.LFB38
 2243 0299 01       		.uleb128 0x1
 2244 029a 9C       		.byte	0x9c
 2245 029b 10       		.uleb128 0x10
 2246 029c 12010000 		.4byte	.LASF51
 2247 02a0 01       		.byte	0x1
 2248 02a1 BB       		.byte	0xbb
 2249 02a2 00000000 		.4byte	.LFB39
 2250 02a6 48000000 		.4byte	.LFE39-.LFB39
 2251 02aa 01       		.uleb128 0x1
 2252 02ab 9C       		.byte	0x9c
 2253 02ac 10       		.uleb128 0x10
 2254 02ad D4010000 		.4byte	.LASF52
 2255 02b1 01       		.byte	0x1
 2256 02b2 EA       		.byte	0xea
 2257 02b3 00000000 		.4byte	.LFB40
 2258 02b7 08000000 		.4byte	.LFE40-.LFB40
 2259 02bb 01       		.uleb128 0x1
 2260 02bc 9C       		.byte	0x9c
 2261 02bd 0D       		.uleb128 0xd
 2262 02be A4040000 		.4byte	.LASF54
 2263 02c2 01       		.byte	0x1
 2264 02c3 F4       		.byte	0xf4
 2265 02c4 76000000 		.4byte	0x76
 2266 02c8 00000000 		.4byte	.LFB41
 2267 02cc 78000000 		.4byte	.LFE41-.LFB41
 2268 02d0 01       		.uleb128 0x1
 2269 02d1 9C       		.byte	0x9c
 2270 02d2 1B030000 		.4byte	0x31b
 2271 02d6 0E       		.uleb128 0xe
 2272 02d7 A4030000 		.4byte	.LASF55
 2273 02db 01       		.byte	0x1
 2274 02dc F4       		.byte	0xf4
 2275 02dd 1B030000 		.4byte	0x31b
 2276 02e1 02       		.uleb128 0x2
 2277 02e2 91       		.byte	0x91
 2278 02e3 64       		.sleb128 -28
 2279 02e4 0E       		.uleb128 0xe
 2280 02e5 32020000 		.4byte	.LASF56
 2281 02e9 01       		.byte	0x1
 2282 02ea F4       		.byte	0xf4
 2283 02eb 6B000000 		.4byte	0x6b
 2284 02ef 02       		.uleb128 0x2
 2285 02f0 91       		.byte	0x91
 2286 02f1 63       		.sleb128 -29
 2287 02f2 0C       		.uleb128 0xc
 2288 02f3 6900     		.ascii	"i\000"
 2289 02f5 01       		.byte	0x1
 2290 02f6 F6       		.byte	0xf6
 2291 02f7 6B000000 		.4byte	0x6b
 2292 02fb 02       		.uleb128 0x2
 2293 02fc 91       		.byte	0x91
 2294 02fd 77       		.sleb128 -9
 2295 02fe 0C       		.uleb128 0xc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 59


 2296 02ff 73756D00 		.ascii	"sum\000"
 2297 0303 01       		.byte	0x1
 2298 0304 F7       		.byte	0xf7
 2299 0305 81000000 		.4byte	0x81
 2300 0309 02       		.uleb128 0x2
 2301 030a 91       		.byte	0x91
 2302 030b 70       		.sleb128 -16
 2303 030c 0C       		.uleb128 0xc
 2304 030d 61766700 		.ascii	"avg\000"
 2305 0311 01       		.byte	0x1
 2306 0312 F8       		.byte	0xf8
 2307 0313 76000000 		.4byte	0x76
 2308 0317 02       		.uleb128 0x2
 2309 0318 91       		.byte	0x91
 2310 0319 6E       		.sleb128 -18
 2311 031a 00       		.byte	0
 2312 031b 05       		.uleb128 0x5
 2313 031c 04       		.byte	0x4
 2314 031d 76000000 		.4byte	0x76
 2315 0321 11       		.uleb128 0x11
 2316 0322 F6000000 		.4byte	.LASF58
 2317 0326 01       		.byte	0x1
 2318 0327 0801     		.2byte	0x108
 2319 0329 00000000 		.4byte	.LFB42
 2320 032d 74020000 		.4byte	.LFE42-.LFB42
 2321 0331 01       		.uleb128 0x1
 2322 0332 9C       		.byte	0x9c
 2323 0333 8B030000 		.4byte	0x38b
 2324 0337 12       		.uleb128 0x12
 2325 0338 6900     		.ascii	"i\000"
 2326 033a 01       		.byte	0x1
 2327 033b 0E01     		.2byte	0x10e
 2328 033d 6B000000 		.4byte	0x6b
 2329 0341 02       		.uleb128 0x2
 2330 0342 91       		.byte	0x91
 2331 0343 6F       		.sleb128 -17
 2332 0344 12       		.uleb128 0x12
 2333 0345 61766700 		.ascii	"avg\000"
 2334 0349 01       		.byte	0x1
 2335 034a 0F01     		.2byte	0x10f
 2336 034c 76000000 		.4byte	0x76
 2337 0350 02       		.uleb128 0x2
 2338 0351 91       		.byte	0x91
 2339 0352 68       		.sleb128 -24
 2340 0353 13       		.uleb128 0x13
 2341 0354 B7040000 		.4byte	.LASF59
 2342 0358 01       		.byte	0x1
 2343 0359 1001     		.2byte	0x110
 2344 035b 76000000 		.4byte	0x76
 2345 035f 02       		.uleb128 0x2
 2346 0360 91       		.byte	0x91
 2347 0361 6A       		.sleb128 -22
 2348 0362 13       		.uleb128 0x13
 2349 0363 B9020000 		.4byte	.LASF49
 2350 0367 01       		.byte	0x1
 2351 0368 1101     		.2byte	0x111
 2352 036a 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 60


 2353 036e 02       		.uleb128 0x2
 2354 036f 91       		.byte	0x91
 2355 0370 6C       		.sleb128 -20
 2356 0371 14       		.uleb128 0x14
 2357 0372 2C000000 		.4byte	.LBB2
 2358 0376 BE010000 		.4byte	.LBE2-.LBB2
 2359 037a 13       		.uleb128 0x13
 2360 037b 6B030000 		.4byte	.LASF60
 2361 037f 01       		.byte	0x1
 2362 0380 2E01     		.2byte	0x12e
 2363 0382 8B030000 		.4byte	0x38b
 2364 0386 02       		.uleb128 0x2
 2365 0387 91       		.byte	0x91
 2366 0388 54       		.sleb128 -44
 2367 0389 00       		.byte	0
 2368 038a 00       		.byte	0
 2369 038b 15       		.uleb128 0x15
 2370 038c A5000000 		.4byte	0xa5
 2371 0390 9B030000 		.4byte	0x39b
 2372 0394 16       		.uleb128 0x16
 2373 0395 AC000000 		.4byte	0xac
 2374 0399 13       		.byte	0x13
 2375 039a 00       		.byte	0
 2376 039b 11       		.uleb128 0x11
 2377 039c 72030000 		.4byte	.LASF61
 2378 03a0 01       		.byte	0x1
 2379 03a1 9401     		.2byte	0x194
 2380 03a3 00000000 		.4byte	.LFB43
 2381 03a7 24020000 		.4byte	.LFE43-.LFB43
 2382 03ab 01       		.uleb128 0x1
 2383 03ac 9C       		.byte	0x9c
 2384 03ad EC030000 		.4byte	0x3ec
 2385 03b1 12       		.uleb128 0x12
 2386 03b2 6900     		.ascii	"i\000"
 2387 03b4 01       		.byte	0x1
 2388 03b5 9A01     		.2byte	0x19a
 2389 03b7 6B000000 		.4byte	0x6b
 2390 03bb 02       		.uleb128 0x2
 2391 03bc 91       		.byte	0x91
 2392 03bd 6F       		.sleb128 -17
 2393 03be 12       		.uleb128 0x12
 2394 03bf 61766700 		.ascii	"avg\000"
 2395 03c3 01       		.byte	0x1
 2396 03c4 9B01     		.2byte	0x19b
 2397 03c6 76000000 		.4byte	0x76
 2398 03ca 02       		.uleb128 0x2
 2399 03cb 91       		.byte	0x91
 2400 03cc 68       		.sleb128 -24
 2401 03cd 13       		.uleb128 0x13
 2402 03ce B7040000 		.4byte	.LASF59
 2403 03d2 01       		.byte	0x1
 2404 03d3 9C01     		.2byte	0x19c
 2405 03d5 76000000 		.4byte	0x76
 2406 03d9 02       		.uleb128 0x2
 2407 03da 91       		.byte	0x91
 2408 03db 6A       		.sleb128 -22
 2409 03dc 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 61


 2410 03dd B9020000 		.4byte	.LASF49
 2411 03e1 01       		.byte	0x1
 2412 03e2 9D01     		.2byte	0x19d
 2413 03e4 76000000 		.4byte	0x76
 2414 03e8 02       		.uleb128 0x2
 2415 03e9 91       		.byte	0x91
 2416 03ea 6C       		.sleb128 -20
 2417 03eb 00       		.byte	0
 2418 03ec 11       		.uleb128 0x11
 2419 03ed 69010000 		.4byte	.LASF62
 2420 03f1 01       		.byte	0x1
 2421 03f2 1B02     		.2byte	0x21b
 2422 03f4 00000000 		.4byte	.LFB44
 2423 03f8 58010000 		.4byte	.LFE44-.LFB44
 2424 03fc 01       		.uleb128 0x1
 2425 03fd 9C       		.byte	0x9c
 2426 03fe 2E040000 		.4byte	0x42e
 2427 0402 12       		.uleb128 0x12
 2428 0403 6900     		.ascii	"i\000"
 2429 0405 01       		.byte	0x1
 2430 0406 2002     		.2byte	0x220
 2431 0408 6B000000 		.4byte	0x6b
 2432 040c 02       		.uleb128 0x2
 2433 040d 91       		.byte	0x91
 2434 040e 6F       		.sleb128 -17
 2435 040f 12       		.uleb128 0x12
 2436 0410 61766700 		.ascii	"avg\000"
 2437 0414 01       		.byte	0x1
 2438 0415 2102     		.2byte	0x221
 2439 0417 76000000 		.4byte	0x76
 2440 041b 02       		.uleb128 0x2
 2441 041c 91       		.byte	0x91
 2442 041d 6A       		.sleb128 -22
 2443 041e 13       		.uleb128 0x13
 2444 041f B7040000 		.4byte	.LASF59
 2445 0423 01       		.byte	0x1
 2446 0424 2202     		.2byte	0x222
 2447 0426 76000000 		.4byte	0x76
 2448 042a 02       		.uleb128 0x2
 2449 042b 91       		.byte	0x91
 2450 042c 6C       		.sleb128 -20
 2451 042d 00       		.byte	0
 2452 042e 17       		.uleb128 0x17
 2453 042f 36030000 		.4byte	.LASF63
 2454 0433 01       		.byte	0x1
 2455 0434 6903     		.2byte	0x369
 2456 0436 5D000000 		.4byte	0x5d
 2457 043a 00000000 		.4byte	.LFB45
 2458 043e AC010000 		.4byte	.LFE45-.LFB45
 2459 0442 01       		.uleb128 0x1
 2460 0443 9C       		.byte	0x9c
 2461 0444 C2040000 		.4byte	0x4c2
 2462 0448 12       		.uleb128 0x12
 2463 0449 7400     		.ascii	"t\000"
 2464 044b 01       		.byte	0x1
 2465 044c 6E03     		.2byte	0x36e
 2466 044e B9000000 		.4byte	0xb9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 62


 2467 0452 02       		.uleb128 0x2
 2468 0453 91       		.byte	0x91
 2469 0454 60       		.sleb128 -32
 2470 0455 13       		.uleb128 0x13
 2471 0456 F8010000 		.4byte	.LASF64
 2472 045a 01       		.byte	0x1
 2473 045b 6F03     		.2byte	0x36f
 2474 045d 6B000000 		.4byte	0x6b
 2475 0461 02       		.uleb128 0x2
 2476 0462 91       		.byte	0x91
 2477 0463 77       		.sleb128 -9
 2478 0464 13       		.uleb128 0x13
 2479 0465 8D000000 		.4byte	.LASF65
 2480 0469 01       		.byte	0x1
 2481 046a 7003     		.2byte	0x370
 2482 046c 5D000000 		.4byte	0x5d
 2483 0470 02       		.uleb128 0x2
 2484 0471 91       		.byte	0x91
 2485 0472 6C       		.sleb128 -20
 2486 0473 14       		.uleb128 0x14
 2487 0474 BC000000 		.4byte	.LBB3
 2488 0478 C6000000 		.4byte	.LBE3-.LBB3
 2489 047c 13       		.uleb128 0x13
 2490 047d A0010000 		.4byte	.LASF66
 2491 0481 01       		.byte	0x1
 2492 0482 A803     		.2byte	0x3a8
 2493 0484 76000000 		.4byte	0x76
 2494 0488 02       		.uleb128 0x2
 2495 0489 91       		.byte	0x91
 2496 048a 6A       		.sleb128 -22
 2497 048b 13       		.uleb128 0x13
 2498 048c C7010000 		.4byte	.LASF67
 2499 0490 01       		.byte	0x1
 2500 0491 A903     		.2byte	0x3a9
 2501 0493 8C000000 		.4byte	0x8c
 2502 0497 02       		.uleb128 0x2
 2503 0498 91       		.byte	0x91
 2504 0499 68       		.sleb128 -24
 2505 049a 13       		.uleb128 0x13
 2506 049b 94030000 		.4byte	.LASF68
 2507 049f 01       		.byte	0x1
 2508 04a0 AA03     		.2byte	0x3aa
 2509 04a2 8C000000 		.4byte	0x8c
 2510 04a6 02       		.uleb128 0x2
 2511 04a7 91       		.byte	0x91
 2512 04a8 66       		.sleb128 -26
 2513 04a9 14       		.uleb128 0x14
 2514 04aa DC000000 		.4byte	.LBB4
 2515 04ae 98000000 		.4byte	.LBE4-.LBB4
 2516 04b2 12       		.uleb128 0x12
 2517 04b3 6900     		.ascii	"i\000"
 2518 04b5 01       		.byte	0x1
 2519 04b6 AB03     		.2byte	0x3ab
 2520 04b8 5D000000 		.4byte	0x5d
 2521 04bc 02       		.uleb128 0x2
 2522 04bd 91       		.byte	0x91
 2523 04be 70       		.sleb128 -16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 63


 2524 04bf 00       		.byte	0
 2525 04c0 00       		.byte	0
 2526 04c1 00       		.byte	0
 2527 04c2 15       		.uleb128 0x15
 2528 04c3 76000000 		.4byte	0x76
 2529 04c7 D2040000 		.4byte	0x4d2
 2530 04cb 16       		.uleb128 0x16
 2531 04cc AC000000 		.4byte	0xac
 2532 04d0 0D       		.byte	0xd
 2533 04d1 00       		.byte	0
 2534 04d2 18       		.uleb128 0x18
 2535 04d3 AC040000 		.4byte	.LASF69
 2536 04d7 01       		.byte	0x1
 2537 04d8 1C       		.byte	0x1c
 2538 04d9 C2040000 		.4byte	0x4c2
 2539 04dd 05       		.uleb128 0x5
 2540 04de 03       		.byte	0x3
 2541 04df 00000000 		.4byte	data_array
 2542 04e3 18       		.uleb128 0x18
 2543 04e4 7A000000 		.4byte	.LASF70
 2544 04e8 01       		.byte	0x1
 2545 04e9 1E       		.byte	0x1e
 2546 04ea 6B000000 		.4byte	0x6b
 2547 04ee 05       		.uleb128 0x5
 2548 04ef 03       		.byte	0x3
 2549 04f0 00000000 		.4byte	wiznet
 2550 04f4 18       		.uleb128 0x18
 2551 04f5 FE030000 		.4byte	.LASF71
 2552 04f9 01       		.byte	0x1
 2553 04fa 1F       		.byte	0x1f
 2554 04fb 6B000000 		.4byte	0x6b
 2555 04ff 05       		.uleb128 0x5
 2556 0500 03       		.byte	0x3
 2557 0501 00000000 		.4byte	new_pack
 2558 0505 18       		.uleb128 0x18
 2559 0506 81020000 		.4byte	.LASF72
 2560 050a 01       		.byte	0x1
 2561 050b 22       		.byte	0x22
 2562 050c 6B000000 		.4byte	0x6b
 2563 0510 05       		.uleb128 0x5
 2564 0511 03       		.byte	0x3
 2565 0512 00000000 		.4byte	fin_exec
 2566 0516 15       		.uleb128 0x15
 2567 0517 8C000000 		.4byte	0x8c
 2568 051b 26050000 		.4byte	0x526
 2569 051f 16       		.uleb128 0x16
 2570 0520 AC000000 		.4byte	0xac
 2571 0524 09       		.byte	0x9
 2572 0525 00       		.byte	0
 2573 0526 18       		.uleb128 0x18
 2574 0527 0F020000 		.4byte	.LASF73
 2575 052b 01       		.byte	0x1
 2576 052c 25       		.byte	0x25
 2577 052d 16050000 		.4byte	0x516
 2578 0531 05       		.uleb128 0x5
 2579 0532 03       		.byte	0x3
 2580 0533 00000000 		.4byte	test_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 64


 2581 0537 18       		.uleb128 0x18
 2582 0538 03010000 		.4byte	.LASF74
 2583 053c 01       		.byte	0x1
 2584 053d 28       		.byte	0x28
 2585 053e 6B000000 		.4byte	0x6b
 2586 0542 05       		.uleb128 0x5
 2587 0543 03       		.byte	0x3
 2588 0544 00000000 		.4byte	elbw_arr_cspot
 2589 0548 15       		.uleb128 0x15
 2590 0549 76000000 		.4byte	0x76
 2591 054d 58050000 		.4byte	0x558
 2592 0551 16       		.uleb128 0x16
 2593 0552 AC000000 		.4byte	0xac
 2594 0556 13       		.byte	0x13
 2595 0557 00       		.byte	0
 2596 0558 18       		.uleb128 0x18
 2597 0559 3B030000 		.4byte	.LASF75
 2598 055d 01       		.byte	0x1
 2599 055e 29       		.byte	0x29
 2600 055f 48050000 		.4byte	0x548
 2601 0563 05       		.uleb128 0x5
 2602 0564 03       		.byte	0x3
 2603 0565 00000000 		.4byte	elbow_array
 2604 0569 18       		.uleb128 0x18
 2605 056a C8030000 		.4byte	.LASF76
 2606 056e 01       		.byte	0x1
 2607 056f 2C       		.byte	0x2c
 2608 0570 6B000000 		.4byte	0x6b
 2609 0574 05       		.uleb128 0x5
 2610 0575 03       		.byte	0x3
 2611 0576 00000000 		.4byte	shldr_arr_cspot
 2612 057a 18       		.uleb128 0x18
 2613 057b 5C030000 		.4byte	.LASF77
 2614 057f 01       		.byte	0x1
 2615 0580 2D       		.byte	0x2d
 2616 0581 48050000 		.4byte	0x548
 2617 0585 05       		.uleb128 0x5
 2618 0586 03       		.byte	0x3
 2619 0587 00000000 		.4byte	shoulder_array
 2620 058b 18       		.uleb128 0x18
 2621 058c AA010000 		.4byte	.LASF78
 2622 0590 01       		.byte	0x1
 2623 0591 30       		.byte	0x30
 2624 0592 6B000000 		.4byte	0x6b
 2625 0596 05       		.uleb128 0x5
 2626 0597 03       		.byte	0x3
 2627 0598 00000000 		.4byte	BA_arr_cspot
 2628 059c 18       		.uleb128 0x18
 2629 059d 4F030000 		.4byte	.LASF79
 2630 05a1 01       		.byte	0x1
 2631 05a2 31       		.byte	0x31
 2632 05a3 48050000 		.4byte	0x548
 2633 05a7 05       		.uleb128 0x5
 2634 05a8 03       		.byte	0x3
 2635 05a9 00000000 		.4byte	baseAz_array
 2636 05ad 18       		.uleb128 0x18
 2637 05ae 5C010000 		.4byte	.LASF80
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 65


 2638 05b2 01       		.byte	0x1
 2639 05b3 34       		.byte	0x34
 2640 05b4 6B000000 		.4byte	0x6b
 2641 05b8 05       		.uleb128 0x5
 2642 05b9 03       		.byte	0x3
 2643 05ba 00000000 		.4byte	WT_arr_cspot
 2644 05be 18       		.uleb128 0x18
 2645 05bf 1E010000 		.4byte	.LASF81
 2646 05c3 01       		.byte	0x1
 2647 05c4 35       		.byte	0x35
 2648 05c5 48050000 		.4byte	0x548
 2649 05c9 05       		.uleb128 0x5
 2650 05ca 03       		.byte	0x3
 2651 05cb 00000000 		.4byte	WT_array
 2652 05cf 18       		.uleb128 0x18
 2653 05d0 00000000 		.4byte	.LASF82
 2654 05d4 01       		.byte	0x1
 2655 05d5 38       		.byte	0x38
 2656 05d6 6B000000 		.4byte	0x6b
 2657 05da 05       		.uleb128 0x5
 2658 05db 03       		.byte	0x3
 2659 05dc 00000000 		.4byte	WR_arr_cspot
 2660 05e0 18       		.uleb128 0x18
 2661 05e1 A5000000 		.4byte	.LASF83
 2662 05e5 01       		.byte	0x1
 2663 05e6 39       		.byte	0x39
 2664 05e7 48050000 		.4byte	0x548
 2665 05eb 05       		.uleb128 0x5
 2666 05ec 03       		.byte	0x3
 2667 05ed 00000000 		.4byte	WR_array
 2668 05f1 18       		.uleb128 0x18
 2669 05f2 27010000 		.4byte	.LASF84
 2670 05f6 01       		.byte	0x1
 2671 05f7 3C       		.byte	0x3c
 2672 05f8 6B000000 		.4byte	0x6b
 2673 05fc 05       		.uleb128 0x5
 2674 05fd 03       		.byte	0x3
 2675 05fe 00000000 		.4byte	timerFlag
 2676 0602 18       		.uleb128 0x18
 2677 0603 E6000000 		.4byte	.LASF85
 2678 0607 01       		.byte	0x1
 2679 0608 88       		.byte	0x88
 2680 0609 C4000000 		.4byte	0xc4
 2681 060d 05       		.uleb128 0x5
 2682 060e 03       		.byte	0x3
 2683 060f 00000000 		.4byte	wristTilt_state
 2684 0613 18       		.uleb128 0x18
 2685 0614 AA030000 		.4byte	.LASF86
 2686 0618 01       		.byte	0x1
 2687 0619 B9       		.byte	0xb9
 2688 061a E9000000 		.4byte	0xe9
 2689 061e 05       		.uleb128 0x5
 2690 061f 03       		.byte	0x3
 2691 0620 00000000 		.4byte	wristRotate_state
 2692 0624 19       		.uleb128 0x19
 2693 0625 D8030000 		.4byte	.LASF87
 2694 0629 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 66


 2695 062a 0701     		.2byte	0x107
 2696 062c 0E010000 		.4byte	0x10e
 2697 0630 05       		.uleb128 0x5
 2698 0631 03       		.byte	0x3
 2699 0632 00000000 		.4byte	elbow_state
 2700 0636 19       		.uleb128 0x19
 2701 0637 00020000 		.4byte	.LASF88
 2702 063b 01       		.byte	0x1
 2703 063c 9301     		.2byte	0x193
 2704 063e 34010000 		.4byte	0x134
 2705 0642 05       		.uleb128 0x5
 2706 0643 03       		.byte	0x3
 2707 0644 00000000 		.4byte	shoulder_state
 2708 0648 19       		.uleb128 0x19
 2709 0649 D4000000 		.4byte	.LASF89
 2710 064d 01       		.byte	0x1
 2711 064e 1A02     		.2byte	0x21a
 2712 0650 5A010000 		.4byte	0x15a
 2713 0654 05       		.uleb128 0x5
 2714 0655 03       		.byte	0x3
 2715 0656 00000000 		.4byte	baseAzimuth_state
 2716 065a 00       		.byte	0
 2717              		.section	.debug_abbrev,"",%progbits
 2718              	.Ldebug_abbrev0:
 2719 0000 01       		.uleb128 0x1
 2720 0001 11       		.uleb128 0x11
 2721 0002 01       		.byte	0x1
 2722 0003 25       		.uleb128 0x25
 2723 0004 0E       		.uleb128 0xe
 2724 0005 13       		.uleb128 0x13
 2725 0006 0B       		.uleb128 0xb
 2726 0007 03       		.uleb128 0x3
 2727 0008 0E       		.uleb128 0xe
 2728 0009 1B       		.uleb128 0x1b
 2729 000a 0E       		.uleb128 0xe
 2730 000b 55       		.uleb128 0x55
 2731 000c 17       		.uleb128 0x17
 2732 000d 11       		.uleb128 0x11
 2733 000e 01       		.uleb128 0x1
 2734 000f 10       		.uleb128 0x10
 2735 0010 17       		.uleb128 0x17
 2736 0011 00       		.byte	0
 2737 0012 00       		.byte	0
 2738 0013 02       		.uleb128 0x2
 2739 0014 24       		.uleb128 0x24
 2740 0015 00       		.byte	0
 2741 0016 0B       		.uleb128 0xb
 2742 0017 0B       		.uleb128 0xb
 2743 0018 3E       		.uleb128 0x3e
 2744 0019 0B       		.uleb128 0xb
 2745 001a 03       		.uleb128 0x3
 2746 001b 0E       		.uleb128 0xe
 2747 001c 00       		.byte	0
 2748 001d 00       		.byte	0
 2749 001e 03       		.uleb128 0x3
 2750 001f 24       		.uleb128 0x24
 2751 0020 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 67


 2752 0021 0B       		.uleb128 0xb
 2753 0022 0B       		.uleb128 0xb
 2754 0023 3E       		.uleb128 0x3e
 2755 0024 0B       		.uleb128 0xb
 2756 0025 03       		.uleb128 0x3
 2757 0026 08       		.uleb128 0x8
 2758 0027 00       		.byte	0
 2759 0028 00       		.byte	0
 2760 0029 04       		.uleb128 0x4
 2761 002a 16       		.uleb128 0x16
 2762 002b 00       		.byte	0
 2763 002c 03       		.uleb128 0x3
 2764 002d 0E       		.uleb128 0xe
 2765 002e 3A       		.uleb128 0x3a
 2766 002f 0B       		.uleb128 0xb
 2767 0030 3B       		.uleb128 0x3b
 2768 0031 0B       		.uleb128 0xb
 2769 0032 49       		.uleb128 0x49
 2770 0033 13       		.uleb128 0x13
 2771 0034 00       		.byte	0
 2772 0035 00       		.byte	0
 2773 0036 05       		.uleb128 0x5
 2774 0037 0F       		.uleb128 0xf
 2775 0038 00       		.byte	0
 2776 0039 0B       		.uleb128 0xb
 2777 003a 0B       		.uleb128 0xb
 2778 003b 49       		.uleb128 0x49
 2779 003c 13       		.uleb128 0x13
 2780 003d 00       		.byte	0
 2781 003e 00       		.byte	0
 2782 003f 06       		.uleb128 0x6
 2783 0040 04       		.uleb128 0x4
 2784 0041 01       		.byte	0x1
 2785 0042 03       		.uleb128 0x3
 2786 0043 0E       		.uleb128 0xe
 2787 0044 0B       		.uleb128 0xb
 2788 0045 0B       		.uleb128 0xb
 2789 0046 3A       		.uleb128 0x3a
 2790 0047 0B       		.uleb128 0xb
 2791 0048 3B       		.uleb128 0x3b
 2792 0049 0B       		.uleb128 0xb
 2793 004a 01       		.uleb128 0x1
 2794 004b 13       		.uleb128 0x13
 2795 004c 00       		.byte	0
 2796 004d 00       		.byte	0
 2797 004e 07       		.uleb128 0x7
 2798 004f 28       		.uleb128 0x28
 2799 0050 00       		.byte	0
 2800 0051 03       		.uleb128 0x3
 2801 0052 0E       		.uleb128 0xe
 2802 0053 1C       		.uleb128 0x1c
 2803 0054 0D       		.uleb128 0xd
 2804 0055 00       		.byte	0
 2805 0056 00       		.byte	0
 2806 0057 08       		.uleb128 0x8
 2807 0058 04       		.uleb128 0x4
 2808 0059 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 68


 2809 005a 03       		.uleb128 0x3
 2810 005b 0E       		.uleb128 0xe
 2811 005c 0B       		.uleb128 0xb
 2812 005d 0B       		.uleb128 0xb
 2813 005e 3A       		.uleb128 0x3a
 2814 005f 0B       		.uleb128 0xb
 2815 0060 3B       		.uleb128 0x3b
 2816 0061 05       		.uleb128 0x5
 2817 0062 01       		.uleb128 0x1
 2818 0063 13       		.uleb128 0x13
 2819 0064 00       		.byte	0
 2820 0065 00       		.byte	0
 2821 0066 09       		.uleb128 0x9
 2822 0067 2E       		.uleb128 0x2e
 2823 0068 01       		.byte	0x1
 2824 0069 3F       		.uleb128 0x3f
 2825 006a 19       		.uleb128 0x19
 2826 006b 03       		.uleb128 0x3
 2827 006c 0E       		.uleb128 0xe
 2828 006d 3A       		.uleb128 0x3a
 2829 006e 0B       		.uleb128 0xb
 2830 006f 3B       		.uleb128 0x3b
 2831 0070 0B       		.uleb128 0xb
 2832 0071 27       		.uleb128 0x27
 2833 0072 19       		.uleb128 0x19
 2834 0073 11       		.uleb128 0x11
 2835 0074 01       		.uleb128 0x1
 2836 0075 12       		.uleb128 0x12
 2837 0076 06       		.uleb128 0x6
 2838 0077 40       		.uleb128 0x40
 2839 0078 18       		.uleb128 0x18
 2840 0079 9642     		.uleb128 0x2116
 2841 007b 19       		.uleb128 0x19
 2842 007c 01       		.uleb128 0x1
 2843 007d 13       		.uleb128 0x13
 2844 007e 00       		.byte	0
 2845 007f 00       		.byte	0
 2846 0080 0A       		.uleb128 0xa
 2847 0081 34       		.uleb128 0x34
 2848 0082 00       		.byte	0
 2849 0083 03       		.uleb128 0x3
 2850 0084 0E       		.uleb128 0xe
 2851 0085 3A       		.uleb128 0x3a
 2852 0086 0B       		.uleb128 0xb
 2853 0087 3B       		.uleb128 0x3b
 2854 0088 0B       		.uleb128 0xb
 2855 0089 49       		.uleb128 0x49
 2856 008a 13       		.uleb128 0x13
 2857 008b 02       		.uleb128 0x2
 2858 008c 18       		.uleb128 0x18
 2859 008d 00       		.byte	0
 2860 008e 00       		.byte	0
 2861 008f 0B       		.uleb128 0xb
 2862 0090 05       		.uleb128 0x5
 2863 0091 00       		.byte	0
 2864 0092 03       		.uleb128 0x3
 2865 0093 08       		.uleb128 0x8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 69


 2866 0094 3A       		.uleb128 0x3a
 2867 0095 0B       		.uleb128 0xb
 2868 0096 3B       		.uleb128 0x3b
 2869 0097 0B       		.uleb128 0xb
 2870 0098 49       		.uleb128 0x49
 2871 0099 13       		.uleb128 0x13
 2872 009a 02       		.uleb128 0x2
 2873 009b 18       		.uleb128 0x18
 2874 009c 00       		.byte	0
 2875 009d 00       		.byte	0
 2876 009e 0C       		.uleb128 0xc
 2877 009f 34       		.uleb128 0x34
 2878 00a0 00       		.byte	0
 2879 00a1 03       		.uleb128 0x3
 2880 00a2 08       		.uleb128 0x8
 2881 00a3 3A       		.uleb128 0x3a
 2882 00a4 0B       		.uleb128 0xb
 2883 00a5 3B       		.uleb128 0x3b
 2884 00a6 0B       		.uleb128 0xb
 2885 00a7 49       		.uleb128 0x49
 2886 00a8 13       		.uleb128 0x13
 2887 00a9 02       		.uleb128 0x2
 2888 00aa 18       		.uleb128 0x18
 2889 00ab 00       		.byte	0
 2890 00ac 00       		.byte	0
 2891 00ad 0D       		.uleb128 0xd
 2892 00ae 2E       		.uleb128 0x2e
 2893 00af 01       		.byte	0x1
 2894 00b0 3F       		.uleb128 0x3f
 2895 00b1 19       		.uleb128 0x19
 2896 00b2 03       		.uleb128 0x3
 2897 00b3 0E       		.uleb128 0xe
 2898 00b4 3A       		.uleb128 0x3a
 2899 00b5 0B       		.uleb128 0xb
 2900 00b6 3B       		.uleb128 0x3b
 2901 00b7 0B       		.uleb128 0xb
 2902 00b8 27       		.uleb128 0x27
 2903 00b9 19       		.uleb128 0x19
 2904 00ba 49       		.uleb128 0x49
 2905 00bb 13       		.uleb128 0x13
 2906 00bc 11       		.uleb128 0x11
 2907 00bd 01       		.uleb128 0x1
 2908 00be 12       		.uleb128 0x12
 2909 00bf 06       		.uleb128 0x6
 2910 00c0 40       		.uleb128 0x40
 2911 00c1 18       		.uleb128 0x18
 2912 00c2 9642     		.uleb128 0x2116
 2913 00c4 19       		.uleb128 0x19
 2914 00c5 01       		.uleb128 0x1
 2915 00c6 13       		.uleb128 0x13
 2916 00c7 00       		.byte	0
 2917 00c8 00       		.byte	0
 2918 00c9 0E       		.uleb128 0xe
 2919 00ca 05       		.uleb128 0x5
 2920 00cb 00       		.byte	0
 2921 00cc 03       		.uleb128 0x3
 2922 00cd 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 70


 2923 00ce 3A       		.uleb128 0x3a
 2924 00cf 0B       		.uleb128 0xb
 2925 00d0 3B       		.uleb128 0x3b
 2926 00d1 0B       		.uleb128 0xb
 2927 00d2 49       		.uleb128 0x49
 2928 00d3 13       		.uleb128 0x13
 2929 00d4 02       		.uleb128 0x2
 2930 00d5 18       		.uleb128 0x18
 2931 00d6 00       		.byte	0
 2932 00d7 00       		.byte	0
 2933 00d8 0F       		.uleb128 0xf
 2934 00d9 2E       		.uleb128 0x2e
 2935 00da 01       		.byte	0x1
 2936 00db 3F       		.uleb128 0x3f
 2937 00dc 19       		.uleb128 0x19
 2938 00dd 03       		.uleb128 0x3
 2939 00de 0E       		.uleb128 0xe
 2940 00df 3A       		.uleb128 0x3a
 2941 00e0 0B       		.uleb128 0xb
 2942 00e1 3B       		.uleb128 0x3b
 2943 00e2 0B       		.uleb128 0xb
 2944 00e3 11       		.uleb128 0x11
 2945 00e4 01       		.uleb128 0x1
 2946 00e5 12       		.uleb128 0x12
 2947 00e6 06       		.uleb128 0x6
 2948 00e7 40       		.uleb128 0x40
 2949 00e8 18       		.uleb128 0x18
 2950 00e9 9742     		.uleb128 0x2117
 2951 00eb 19       		.uleb128 0x19
 2952 00ec 01       		.uleb128 0x1
 2953 00ed 13       		.uleb128 0x13
 2954 00ee 00       		.byte	0
 2955 00ef 00       		.byte	0
 2956 00f0 10       		.uleb128 0x10
 2957 00f1 2E       		.uleb128 0x2e
 2958 00f2 00       		.byte	0
 2959 00f3 3F       		.uleb128 0x3f
 2960 00f4 19       		.uleb128 0x19
 2961 00f5 03       		.uleb128 0x3
 2962 00f6 0E       		.uleb128 0xe
 2963 00f7 3A       		.uleb128 0x3a
 2964 00f8 0B       		.uleb128 0xb
 2965 00f9 3B       		.uleb128 0x3b
 2966 00fa 0B       		.uleb128 0xb
 2967 00fb 11       		.uleb128 0x11
 2968 00fc 01       		.uleb128 0x1
 2969 00fd 12       		.uleb128 0x12
 2970 00fe 06       		.uleb128 0x6
 2971 00ff 40       		.uleb128 0x40
 2972 0100 18       		.uleb128 0x18
 2973 0101 9742     		.uleb128 0x2117
 2974 0103 19       		.uleb128 0x19
 2975 0104 00       		.byte	0
 2976 0105 00       		.byte	0
 2977 0106 11       		.uleb128 0x11
 2978 0107 2E       		.uleb128 0x2e
 2979 0108 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 71


 2980 0109 3F       		.uleb128 0x3f
 2981 010a 19       		.uleb128 0x19
 2982 010b 03       		.uleb128 0x3
 2983 010c 0E       		.uleb128 0xe
 2984 010d 3A       		.uleb128 0x3a
 2985 010e 0B       		.uleb128 0xb
 2986 010f 3B       		.uleb128 0x3b
 2987 0110 05       		.uleb128 0x5
 2988 0111 11       		.uleb128 0x11
 2989 0112 01       		.uleb128 0x1
 2990 0113 12       		.uleb128 0x12
 2991 0114 06       		.uleb128 0x6
 2992 0115 40       		.uleb128 0x40
 2993 0116 18       		.uleb128 0x18
 2994 0117 9642     		.uleb128 0x2116
 2995 0119 19       		.uleb128 0x19
 2996 011a 01       		.uleb128 0x1
 2997 011b 13       		.uleb128 0x13
 2998 011c 00       		.byte	0
 2999 011d 00       		.byte	0
 3000 011e 12       		.uleb128 0x12
 3001 011f 34       		.uleb128 0x34
 3002 0120 00       		.byte	0
 3003 0121 03       		.uleb128 0x3
 3004 0122 08       		.uleb128 0x8
 3005 0123 3A       		.uleb128 0x3a
 3006 0124 0B       		.uleb128 0xb
 3007 0125 3B       		.uleb128 0x3b
 3008 0126 05       		.uleb128 0x5
 3009 0127 49       		.uleb128 0x49
 3010 0128 13       		.uleb128 0x13
 3011 0129 02       		.uleb128 0x2
 3012 012a 18       		.uleb128 0x18
 3013 012b 00       		.byte	0
 3014 012c 00       		.byte	0
 3015 012d 13       		.uleb128 0x13
 3016 012e 34       		.uleb128 0x34
 3017 012f 00       		.byte	0
 3018 0130 03       		.uleb128 0x3
 3019 0131 0E       		.uleb128 0xe
 3020 0132 3A       		.uleb128 0x3a
 3021 0133 0B       		.uleb128 0xb
 3022 0134 3B       		.uleb128 0x3b
 3023 0135 05       		.uleb128 0x5
 3024 0136 49       		.uleb128 0x49
 3025 0137 13       		.uleb128 0x13
 3026 0138 02       		.uleb128 0x2
 3027 0139 18       		.uleb128 0x18
 3028 013a 00       		.byte	0
 3029 013b 00       		.byte	0
 3030 013c 14       		.uleb128 0x14
 3031 013d 0B       		.uleb128 0xb
 3032 013e 01       		.byte	0x1
 3033 013f 11       		.uleb128 0x11
 3034 0140 01       		.uleb128 0x1
 3035 0141 12       		.uleb128 0x12
 3036 0142 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 72


 3037 0143 00       		.byte	0
 3038 0144 00       		.byte	0
 3039 0145 15       		.uleb128 0x15
 3040 0146 01       		.uleb128 0x1
 3041 0147 01       		.byte	0x1
 3042 0148 49       		.uleb128 0x49
 3043 0149 13       		.uleb128 0x13
 3044 014a 01       		.uleb128 0x1
 3045 014b 13       		.uleb128 0x13
 3046 014c 00       		.byte	0
 3047 014d 00       		.byte	0
 3048 014e 16       		.uleb128 0x16
 3049 014f 21       		.uleb128 0x21
 3050 0150 00       		.byte	0
 3051 0151 49       		.uleb128 0x49
 3052 0152 13       		.uleb128 0x13
 3053 0153 2F       		.uleb128 0x2f
 3054 0154 0B       		.uleb128 0xb
 3055 0155 00       		.byte	0
 3056 0156 00       		.byte	0
 3057 0157 17       		.uleb128 0x17
 3058 0158 2E       		.uleb128 0x2e
 3059 0159 01       		.byte	0x1
 3060 015a 3F       		.uleb128 0x3f
 3061 015b 19       		.uleb128 0x19
 3062 015c 03       		.uleb128 0x3
 3063 015d 0E       		.uleb128 0xe
 3064 015e 3A       		.uleb128 0x3a
 3065 015f 0B       		.uleb128 0xb
 3066 0160 3B       		.uleb128 0x3b
 3067 0161 05       		.uleb128 0x5
 3068 0162 49       		.uleb128 0x49
 3069 0163 13       		.uleb128 0x13
 3070 0164 11       		.uleb128 0x11
 3071 0165 01       		.uleb128 0x1
 3072 0166 12       		.uleb128 0x12
 3073 0167 06       		.uleb128 0x6
 3074 0168 40       		.uleb128 0x40
 3075 0169 18       		.uleb128 0x18
 3076 016a 9642     		.uleb128 0x2116
 3077 016c 19       		.uleb128 0x19
 3078 016d 01       		.uleb128 0x1
 3079 016e 13       		.uleb128 0x13
 3080 016f 00       		.byte	0
 3081 0170 00       		.byte	0
 3082 0171 18       		.uleb128 0x18
 3083 0172 34       		.uleb128 0x34
 3084 0173 00       		.byte	0
 3085 0174 03       		.uleb128 0x3
 3086 0175 0E       		.uleb128 0xe
 3087 0176 3A       		.uleb128 0x3a
 3088 0177 0B       		.uleb128 0xb
 3089 0178 3B       		.uleb128 0x3b
 3090 0179 0B       		.uleb128 0xb
 3091 017a 49       		.uleb128 0x49
 3092 017b 13       		.uleb128 0x13
 3093 017c 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 73


 3094 017d 19       		.uleb128 0x19
 3095 017e 02       		.uleb128 0x2
 3096 017f 18       		.uleb128 0x18
 3097 0180 00       		.byte	0
 3098 0181 00       		.byte	0
 3099 0182 19       		.uleb128 0x19
 3100 0183 34       		.uleb128 0x34
 3101 0184 00       		.byte	0
 3102 0185 03       		.uleb128 0x3
 3103 0186 0E       		.uleb128 0xe
 3104 0187 3A       		.uleb128 0x3a
 3105 0188 0B       		.uleb128 0xb
 3106 0189 3B       		.uleb128 0x3b
 3107 018a 05       		.uleb128 0x5
 3108 018b 49       		.uleb128 0x49
 3109 018c 13       		.uleb128 0x13
 3110 018d 3F       		.uleb128 0x3f
 3111 018e 19       		.uleb128 0x19
 3112 018f 02       		.uleb128 0x2
 3113 0190 18       		.uleb128 0x18
 3114 0191 00       		.byte	0
 3115 0192 00       		.byte	0
 3116 0193 00       		.byte	0
 3117              		.section	.debug_aranges,"",%progbits
 3118 0000 7C000000 		.4byte	0x7c
 3119 0004 0200     		.2byte	0x2
 3120 0006 00000000 		.4byte	.Ldebug_info0
 3121 000a 04       		.byte	0x4
 3122 000b 00       		.byte	0
 3123 000c 0000     		.2byte	0
 3124 000e 0000     		.2byte	0
 3125 0010 00000000 		.4byte	.LFB33
 3126 0014 28000000 		.4byte	.LFE33-.LFB33
 3127 0018 00000000 		.4byte	.LFB34
 3128 001c 62000000 		.4byte	.LFE34-.LFB34
 3129 0020 00000000 		.4byte	.LFB35
 3130 0024 7C000000 		.4byte	.LFE35-.LFB35
 3131 0028 00000000 		.4byte	.LFB36
 3132 002c 28000000 		.4byte	.LFE36-.LFB36
 3133 0030 00000000 		.4byte	.LFB37
 3134 0034 4C000000 		.4byte	.LFE37-.LFB37
 3135 0038 00000000 		.4byte	.LFB38
 3136 003c 48000000 		.4byte	.LFE38-.LFB38
 3137 0040 00000000 		.4byte	.LFB39
 3138 0044 48000000 		.4byte	.LFE39-.LFB39
 3139 0048 00000000 		.4byte	.LFB40
 3140 004c 08000000 		.4byte	.LFE40-.LFB40
 3141 0050 00000000 		.4byte	.LFB41
 3142 0054 78000000 		.4byte	.LFE41-.LFB41
 3143 0058 00000000 		.4byte	.LFB42
 3144 005c 74020000 		.4byte	.LFE42-.LFB42
 3145 0060 00000000 		.4byte	.LFB43
 3146 0064 24020000 		.4byte	.LFE43-.LFB43
 3147 0068 00000000 		.4byte	.LFB44
 3148 006c 58010000 		.4byte	.LFE44-.LFB44
 3149 0070 00000000 		.4byte	.LFB45
 3150 0074 AC010000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 74


 3151 0078 00000000 		.4byte	0
 3152 007c 00000000 		.4byte	0
 3153              		.section	.debug_ranges,"",%progbits
 3154              	.Ldebug_ranges0:
 3155 0000 00000000 		.4byte	.LFB33
 3156 0004 28000000 		.4byte	.LFE33
 3157 0008 00000000 		.4byte	.LFB34
 3158 000c 62000000 		.4byte	.LFE34
 3159 0010 00000000 		.4byte	.LFB35
 3160 0014 7C000000 		.4byte	.LFE35
 3161 0018 00000000 		.4byte	.LFB36
 3162 001c 28000000 		.4byte	.LFE36
 3163 0020 00000000 		.4byte	.LFB37
 3164 0024 4C000000 		.4byte	.LFE37
 3165 0028 00000000 		.4byte	.LFB38
 3166 002c 48000000 		.4byte	.LFE38
 3167 0030 00000000 		.4byte	.LFB39
 3168 0034 48000000 		.4byte	.LFE39
 3169 0038 00000000 		.4byte	.LFB40
 3170 003c 08000000 		.4byte	.LFE40
 3171 0040 00000000 		.4byte	.LFB41
 3172 0044 78000000 		.4byte	.LFE41
 3173 0048 00000000 		.4byte	.LFB42
 3174 004c 74020000 		.4byte	.LFE42
 3175 0050 00000000 		.4byte	.LFB43
 3176 0054 24020000 		.4byte	.LFE43
 3177 0058 00000000 		.4byte	.LFB44
 3178 005c 58010000 		.4byte	.LFE44
 3179 0060 00000000 		.4byte	.LFB45
 3180 0064 AC010000 		.4byte	.LFE45
 3181 0068 00000000 		.4byte	0
 3182 006c 00000000 		.4byte	0
 3183              		.section	.debug_line,"",%progbits
 3184              	.Ldebug_line0:
 3185 0000 64030000 		.section	.debug_str,"MS",%progbits,1
 3185      0200BF00 
 3185      00000201 
 3185      FB0E0D00 
 3185      01010101 
 3186              	.LASF82:
 3187 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 3187      72725F63 
 3187      73706F74 
 3187      00
 3188              	.LASF39:
 3189 000d 42415F73 		.ascii	"BA_start\000"
 3189      74617274 
 3189      00
 3190              	.LASF35:
 3191 0016 73686C64 		.ascii	"shldr_init\000"
 3191      725F696E 
 3191      697400
 3192              	.LASF19:
 3193 0021 74696C74 		.ascii	"tilt_start\000"
 3193      5F737461 
 3193      727400
 3194              	.LASF57:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 75


 3195 002c 66696C6C 		.ascii	"fill_data_array\000"
 3195      5F646174 
 3195      615F6172 
 3195      72617900 
 3196              	.LASF2:
 3197 003c 73686F72 		.ascii	"short int\000"
 3197      7420696E 
 3197      7400
 3198              	.LASF25:
 3199 0046 726F7461 		.ascii	"rotate_start\000"
 3199      74655F73 
 3199      74617274 
 3199      00
 3200              	.LASF16:
 3201 0053 73697A65 		.ascii	"sizetype\000"
 3201      74797065 
 3201      00
 3202              	.LASF41:
 3203 005c 42415F65 		.ascii	"BA_execute\000"
 3203      78656375 
 3203      746500
 3204              	.LASF23:
 3205 0067 77726973 		.ascii	"wristRotate_states\000"
 3205      74526F74 
 3205      6174655F 
 3205      73746174 
 3205      657300
 3206              	.LASF70:
 3207 007a 77697A6E 		.ascii	"wiznet\000"
 3207      657400
 3208              	.LASF34:
 3209 0081 73686C64 		.ascii	"shldr_start\000"
 3209      725F7374 
 3209      61727400 
 3210              	.LASF65:
 3211 008d 64697265 		.ascii	"direction\000"
 3211      6374696F 
 3211      6E00
 3212              	.LASF6:
 3213 0097 6C6F6E67 		.ascii	"long long int\000"
 3213      206C6F6E 
 3213      6720696E 
 3213      7400
 3214              	.LASF83:
 3215 00a5 57525F61 		.ascii	"WR_array\000"
 3215      72726179 
 3215      00
 3216              	.LASF40:
 3217 00ae 42415F69 		.ascii	"BA_init\000"
 3217      6E697400 
 3218              	.LASF36:
 3219 00b6 73686C64 		.ascii	"shldr_execute\000"
 3219      725F6578 
 3219      65637574 
 3219      6500
 3220              	.LASF33:
 3221 00c4 73686F75 		.ascii	"shoulder_states\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 76


 3221      6C646572 
 3221      5F737461 
 3221      74657300 
 3222              	.LASF89:
 3223 00d4 62617365 		.ascii	"baseAzimuth_state\000"
 3223      417A696D 
 3223      7574685F 
 3223      73746174 
 3223      6500
 3224              	.LASF85:
 3225 00e6 77726973 		.ascii	"wristTilt_state\000"
 3225      7454696C 
 3225      745F7374 
 3225      61746500 
 3226              	.LASF58:
 3227 00f6 656C626F 		.ascii	"elbow\000"
 3227      7700
 3228              	.LASF10:
 3229 00fc 75696E74 		.ascii	"uint16\000"
 3229      313600
 3230              	.LASF74:
 3231 0103 656C6277 		.ascii	"elbw_arr_cspot\000"
 3231      5F617272 
 3231      5F637370 
 3231      6F7400
 3232              	.LASF51:
 3233 0112 77726973 		.ascii	"wristRotate\000"
 3233      74526F74 
 3233      61746500 
 3234              	.LASF81:
 3235 011e 57545F61 		.ascii	"WT_array\000"
 3235      72726179 
 3235      00
 3236              	.LASF84:
 3237 0127 74696D65 		.ascii	"timerFlag\000"
 3237      72466C61 
 3237      6700
 3238              	.LASF42:
 3239 0131 42415F77 		.ascii	"BA_wait\000"
 3239      61697400 
 3240              	.LASF12:
 3241 0139 696E7431 		.ascii	"int16\000"
 3241      3600
 3242              	.LASF0:
 3243 013f 7369676E 		.ascii	"signed char\000"
 3243      65642063 
 3243      68617200 
 3244              	.LASF13:
 3245 014b 666C6F61 		.ascii	"float\000"
 3245      7400
 3246              	.LASF29:
 3247 0151 656C6277 		.ascii	"elbw_start\000"
 3247      5F737461 
 3247      727400
 3248              	.LASF80:
 3249 015c 57545F61 		.ascii	"WT_arr_cspot\000"
 3249      72725F63 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 77


 3249      73706F74 
 3249      00
 3250              	.LASF62:
 3251 0169 62617365 		.ascii	"baseAzimuth\000"
 3251      417A696D 
 3251      75746800 
 3252              	.LASF50:
 3253 0175 77726973 		.ascii	"wristTilt\000"
 3253      7454696C 
 3253      7400
 3254              	.LASF15:
 3255 017f 63686172 		.ascii	"char\000"
 3255      00
 3256              	.LASF4:
 3257 0184 6C6F6E67 		.ascii	"long int\000"
 3257      20696E74 
 3257      00
 3258              	.LASF38:
 3259 018d 62617365 		.ascii	"baseAzimuth_states\000"
 3259      417A696D 
 3259      7574685F 
 3259      73746174 
 3259      657300
 3260              	.LASF66:
 3261 01a0 66656564 		.ascii	"feedback1\000"
 3261      6261636B 
 3261      3100
 3262              	.LASF78:
 3263 01aa 42415F61 		.ascii	"BA_arr_cspot\000"
 3263      72725F63 
 3263      73706F74 
 3263      00
 3264              	.LASF18:
 3265 01b7 74696C74 		.ascii	"tilt_init\000"
 3265      5F696E69 
 3265      7400
 3266              	.LASF9:
 3267 01c1 75696E74 		.ascii	"uint8\000"
 3267      3800
 3268              	.LASF67:
 3269 01c7 666F7277 		.ascii	"forward\000"
 3269      61726400 
 3270              	.LASF46:
 3271 01cf 69746F61 		.ascii	"itoa\000"
 3271      00
 3272              	.LASF52:
 3273 01d4 73656E64 		.ascii	"send_feedback\000"
 3273      5F666565 
 3273      64626163 
 3273      6B00
 3274              	.LASF1:
 3275 01e2 756E7369 		.ascii	"unsigned char\000"
 3275      676E6564 
 3275      20636861 
 3275      7200
 3276              	.LASF45:
 3277 01f0 6973725F 		.ascii	"isr_var\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 78


 3277      76617200 
 3278              	.LASF64:
 3279 01f8 636F756E 		.ascii	"counter\000"
 3279      74657200 
 3280              	.LASF88:
 3281 0200 73686F75 		.ascii	"shoulder_state\000"
 3281      6C646572 
 3281      5F737461 
 3281      746500
 3282              	.LASF73:
 3283 020f 74657374 		.ascii	"test_array\000"
 3283      5F617272 
 3283      617900
 3284              	.LASF21:
 3285 021a 74696C74 		.ascii	"tilt_feedback\000"
 3285      5F666565 
 3285      64626163 
 3285      6B00
 3286              	.LASF30:
 3287 0228 656C6277 		.ascii	"elbw_init\000"
 3287      5F696E69 
 3287      7400
 3288              	.LASF56:
 3289 0232 6E756D5F 		.ascii	"num_items\000"
 3289      6974656D 
 3289      7300
 3290              	.LASF26:
 3291 023c 726F7461 		.ascii	"rotate_control\000"
 3291      74655F63 
 3291      6F6E7472 
 3291      6F6C00
 3292              	.LASF7:
 3293 024b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3293      206C6F6E 
 3293      6720756E 
 3293      7369676E 
 3293      65642069 
 3294              	.LASF8:
 3295 0262 756E7369 		.ascii	"unsigned int\000"
 3295      676E6564 
 3295      20696E74 
 3295      00
 3296              	.LASF5:
 3297 026f 6C6F6E67 		.ascii	"long unsigned int\000"
 3297      20756E73 
 3297      69676E65 
 3297      6420696E 
 3297      7400
 3298              	.LASF72:
 3299 0281 66696E5F 		.ascii	"fin_exec\000"
 3299      65786563 
 3299      00
 3300              	.LASF37:
 3301 028a 73686C64 		.ascii	"shldr_wait\000"
 3301      725F7761 
 3301      697400
 3302              	.LASF3:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 79


 3303 0295 73686F72 		.ascii	"short unsigned int\000"
 3303      7420756E 
 3303      7369676E 
 3303      65642069 
 3303      6E7400
 3304              	.LASF22:
 3305 02a8 77726973 		.ascii	"wristTilt_states\000"
 3305      7454696C 
 3305      745F7374 
 3305      61746573 
 3305      00
 3306              	.LASF49:
 3307 02b9 66656564 		.ascii	"feedback\000"
 3307      6261636B 
 3307      00
 3308              	.LASF28:
 3309 02c2 656C626F 		.ascii	"elbow_states\000"
 3309      775F7374 
 3309      61746573 
 3309      00
 3310              	.LASF44:
 3311 02cf 72657665 		.ascii	"reverse\000"
 3311      72736500 
 3312              	.LASF92:
 3313 02d7 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 3313      73657273 
 3313      5C53616D 
 3313      75656C5C 
 3313      446F6375 
 3314 0305 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 3314      5C61726D 
 3314      5F636F6E 
 3314      74726F6C 
 3314      6C65725F 
 3315 0335 00       		.ascii	"\000"
 3316              	.LASF63:
 3317 0336 6D61696E 		.ascii	"main\000"
 3317      00
 3318              	.LASF75:
 3319 033b 656C626F 		.ascii	"elbow_array\000"
 3319      775F6172 
 3319      72617900 
 3320              	.LASF48:
 3321 0347 6368616E 		.ascii	"channel\000"
 3321      6E656C00 
 3322              	.LASF79:
 3323 034f 62617365 		.ascii	"baseAz_array\000"
 3323      417A5F61 
 3323      72726179 
 3323      00
 3324              	.LASF77:
 3325 035c 73686F75 		.ascii	"shoulder_array\000"
 3325      6C646572 
 3325      5F617272 
 3325      617900
 3326              	.LASF60:
 3327 036b 62756666 		.ascii	"buffer\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 80


 3327      657200
 3328              	.LASF61:
 3329 0372 73686F75 		.ascii	"shoulder\000"
 3329      6C646572 
 3329      00
 3330              	.LASF11:
 3331 037b 75696E74 		.ascii	"uint32\000"
 3331      333200
 3332              	.LASF20:
 3333 0382 74696C74 		.ascii	"tilt_control\000"
 3333      5F636F6E 
 3333      74726F6C 
 3333      00
 3334              	.LASF47:
 3335 038f 7369676E 		.ascii	"sign\000"
 3335      00
 3336              	.LASF68:
 3337 0394 6261636B 		.ascii	"backward\000"
 3337      77617264 
 3337      00
 3338              	.LASF17:
 3339 039d 74696D65 		.ascii	"time_t\000"
 3339      5F7400
 3340              	.LASF55:
 3341 03a4 61727261 		.ascii	"array\000"
 3341      7900
 3342              	.LASF86:
 3343 03aa 77726973 		.ascii	"wristRotate_state\000"
 3343      74526F74 
 3343      6174655F 
 3343      73746174 
 3343      6500
 3344              	.LASF53:
 3345 03bc 706F7446 		.ascii	"potFeedback\000"
 3345      65656462 
 3345      61636B00 
 3346              	.LASF76:
 3347 03c8 73686C64 		.ascii	"shldr_arr_cspot\000"
 3347      725F6172 
 3347      725F6373 
 3347      706F7400 
 3348              	.LASF87:
 3349 03d8 656C626F 		.ascii	"elbow_state\000"
 3349      775F7374 
 3349      61746500 
 3350              	.LASF91:
 3351 03e4 2E5C6D61 		.ascii	".\\main.c\000"
 3351      696E2E63 
 3351      00
 3352              	.LASF14:
 3353 03ed 646F7562 		.ascii	"double\000"
 3353      6C6500
 3354              	.LASF43:
 3355 03f4 74696D65 		.ascii	"timer_isr\000"
 3355      725F6973 
 3355      7200
 3356              	.LASF71:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc10g1t1.s 			page 81


 3357 03fe 6E65775F 		.ascii	"new_pack\000"
 3357      7061636B 
 3357      00
 3358              	.LASF24:
 3359 0407 726F7461 		.ascii	"rotate_init\000"
 3359      74655F69 
 3359      6E697400 
 3360              	.LASF90:
 3361 0413 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3361      4320342E 
 3361      382E3420 
 3361      32303134 
 3361      30353236 
 3362 0446 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3362      20726576 
 3362      6973696F 
 3362      6E203231 
 3362      31333538 
 3363 0479 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 3363      74643D67 
 3363      6E753939 
 3363      202D6666 
 3363      756E6374 
 3364              	.LASF32:
 3365 049a 656C6277 		.ascii	"elbw_wait\000"
 3365      5F776169 
 3365      7400
 3366              	.LASF54:
 3367 04a4 61766572 		.ascii	"average\000"
 3367      61676500 
 3368              	.LASF69:
 3369 04ac 64617461 		.ascii	"data_array\000"
 3369      5F617272 
 3369      617900
 3370              	.LASF59:
 3371 04b7 636F6D6D 		.ascii	"command\000"
 3371      616E6400 
 3372              	.LASF31:
 3373 04bf 656C6277 		.ascii	"elbw_execute\000"
 3373      5F657865 
 3373      63757465 
 3373      00
 3374              	.LASF27:
 3375 04cc 726F7461 		.ascii	"rotate_feedback\000"
 3375      74655F66 
 3375      65656462 
 3375      61636B00 
 3376              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

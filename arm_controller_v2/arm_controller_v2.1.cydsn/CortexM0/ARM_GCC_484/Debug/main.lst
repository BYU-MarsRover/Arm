ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	feedback_array,14,4
  44              		.comm	wiznet,1,1
  45              		.comm	test_array,22,4
  46              		.global	WT_FLAG
  47              		.bss
  48              		.type	WT_FLAG, %object
  49              		.size	WT_FLAG, 1
  50              	WT_FLAG:
  51 0000 00       		.space	1
  52              		.global	WR_FLAG
  53              		.type	WR_FLAG, %object
  54              		.size	WR_FLAG, 1
  55              	WR_FLAG:
  56 0001 00       		.space	1
  57              		.global	ELBOW_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 2


  58              		.type	ELBOW_FLAG, %object
  59              		.size	ELBOW_FLAG, 1
  60              	ELBOW_FLAG:
  61 0002 00       		.space	1
  62              		.global	SHOULDER_FLAG
  63              		.type	SHOULDER_FLAG, %object
  64              		.size	SHOULDER_FLAG, 1
  65              	SHOULDER_FLAG:
  66 0003 00       		.space	1
  67              		.global	BA_FLAG
  68              		.type	BA_FLAG, %object
  69              		.size	BA_FLAG, 1
  70              	BA_FLAG:
  71 0004 00       		.space	1
  72              		.global	EFFECTOR_FLAG
  73              		.type	EFFECTOR_FLAG, %object
  74              		.size	EFFECTOR_FLAG, 1
  75              	EFFECTOR_FLAG:
  76 0005 00       		.space	1
  77              		.global	PH_FLAG
  78              		.type	PH_FLAG, %object
  79              		.size	PH_FLAG, 1
  80              	PH_FLAG:
  81 0006 00       		.space	1
  82              		.global	dropped_packets
  83 0007 00       		.align	1
  84              		.type	dropped_packets, %object
  85              		.size	dropped_packets, 2
  86              	dropped_packets:
  87 0008 0000     		.space	2
  88              		.global	fail_safe_errors
  89              		.align	1
  90              		.type	fail_safe_errors, %object
  91              		.size	fail_safe_errors, 2
  92              	fail_safe_errors:
  93 000a 0000     		.space	2
  94              		.global	shldr_errors
  95              		.align	1
  96              		.type	shldr_errors, %object
  97              		.size	shldr_errors, 2
  98              	shldr_errors:
  99 000c 0000     		.space	2
 100              		.global	elbw_errors
 101              		.align	1
 102              		.type	elbw_errors, %object
 103              		.size	elbw_errors, 2
 104              	elbw_errors:
 105 000e 0000     		.space	2
 106              		.global	BA_errors
 107              		.align	1
 108              		.type	BA_errors, %object
 109              		.size	BA_errors, 2
 110              	BA_errors:
 111 0010 0000     		.space	2
 112              		.global	WT_errors
 113              		.align	1
 114              		.type	WT_errors, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 3


 115              		.size	WT_errors, 2
 116              	WT_errors:
 117 0012 0000     		.space	2
 118              		.global	WR_errors
 119              		.align	1
 120              		.type	WR_errors, %object
 121              		.size	WR_errors, 2
 122              	WR_errors:
 123 0014 0000     		.space	2
 124              		.global	eff_errors
 125              		.align	1
 126              		.type	eff_errors, %object
 127              		.size	eff_errors, 2
 128              	eff_errors:
 129 0016 0000     		.space	2
 130              		.comm	timerFlag,1,1
 131              		.section	.text.timer_isr,"ax",%progbits
 132              		.align	2
 133              		.global	timer_isr
 134              		.code	16
 135              		.thumb_func
 136              		.type	timer_isr, %function
 137              	timer_isr:
 138              	.LFB34:
 139              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 140              		.loc 1 11 0
 141              		.cfi_startproc
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 82B0     		sub	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 150              		.loc 1 12 0
 151 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 152 000a 031C     		mov	r3, r0
 153 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 154              		.loc 1 13 0
 155 000e 054B     		ldr	r3, .L2
 156 0010 0122     		mov	r2, #1
 157 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 4


 158              		.loc 1 14 0
 159 0014 7B68     		ldr	r3, [r7, #4]
 160 0016 181C     		mov	r0, r3
 161 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 162              		.loc 1 15 0
 163 001c BD46     		mov	sp, r7
 164 001e 02B0     		add	sp, sp, #8
 165              		@ sp needed
 166 0020 80BD     		pop	{r7, pc}
 167              	.L3:
 168 0022 C046     		.align	2
 169              	.L2:
 170 0024 00000000 		.word	timerFlag
 171              		.cfi_endproc
 172              	.LFE34:
 173              		.size	timer_isr, .-timer_isr
 174              		.global	__aeabi_idiv
 175              		.section	.text.CalibrationElbow,"ax",%progbits
 176              		.align	2
 177              		.global	CalibrationElbow
 178              		.code	16
 179              		.thumb_func
 180              		.type	CalibrationElbow, %function
 181              	CalibrationElbow:
 182              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 5


  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 183              		.loc 1 48 0
 184              		.cfi_startproc
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 86B0     		sub	sp, sp, #24
 190              		.cfi_def_cfa_offset 32
 191 0004 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 193 0006 021C     		mov	r2, r0
 194 0008 BB1D     		add	r3, r7, #6
 195 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 196              		.loc 1 49 0
 197 000c 3B1C     		mov	r3, r7
 198 000e 1133     		add	r3, r3, #17
 199 0010 0322     		mov	r2, #3
 200 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 201              		.loc 1 56 0
 202 0014 3B1C     		mov	r3, r7
 203 0016 1733     		add	r3, r3, #23
 204 0018 0022     		mov	r2, #0
 205 001a 1A70     		strb	r2, [r3]
 206 001c 3B1C     		mov	r3, r7
 207 001e 1233     		add	r3, r3, #18
 208 0020 0022     		mov	r2, #0
 209 0022 1A80     		strh	r2, [r3]
 210 0024 70E0     		b	.L5
 211              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Test stop switch
  59:.\main.c      ****         LED_Write(0);
 212              		.loc 1 59 0
 213 0026 0020     		mov	r0, #0
 214 0028 FFF7FEFF 		bl	LED_Write
  60:.\main.c      ****         
  61:.\main.c      ****         // Move till stop switch presses down
  62:.\main.c      ****         if(velocity < 1500)
 215              		.loc 1 62 0
 216 002c BB1D     		add	r3, r7, #6
 217 002e 1A88     		ldrh	r2, [r3]
 218 0030 554B     		ldr	r3, .L18
 219 0032 9A42     		cmp	r2, r3
 220 0034 0BD8     		bhi	.L6
  63:.\main.c      ****         {
  64:.\main.c      ****             while(stop_elb_dn_Read())
 221              		.loc 1 64 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 6


 222 0036 04E0     		b	.L7
 223              	.L8:
  65:.\main.c      ****             {
  66:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 224              		.loc 1 66 0
 225 0038 BB1D     		add	r3, r7, #6
 226 003a 1B88     		ldrh	r3, [r3]
 227 003c 181C     		mov	r0, r3
 228 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 229              	.L7:
  64:.\main.c      ****             while(stop_elb_dn_Read())
 230              		.loc 1 64 0 discriminator 1
 231 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 232 0046 031C     		mov	r3, r0
 233 0048 002B     		cmp	r3, #0
 234 004a F5D1     		bne	.L8
 235 004c 15E0     		b	.L9
 236              	.L6:
  67:.\main.c      ****             }
  68:.\main.c      ****         }
  69:.\main.c      ****         else if(velocity > 1500)
 237              		.loc 1 69 0
 238 004e BB1D     		add	r3, r7, #6
 239 0050 1A88     		ldrh	r2, [r3]
 240 0052 4E4B     		ldr	r3, .L18+4
 241 0054 9A42     		cmp	r2, r3
 242 0056 0BD9     		bls	.L10
  70:.\main.c      ****         {
  71:.\main.c      ****             while(stop_elb_up_Read())
 243              		.loc 1 71 0
 244 0058 04E0     		b	.L11
 245              	.L12:
  72:.\main.c      ****             {
  73:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 246              		.loc 1 73 0
 247 005a BB1D     		add	r3, r7, #6
 248 005c 1B88     		ldrh	r3, [r3]
 249 005e 181C     		mov	r0, r3
 250 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 251              	.L11:
  71:.\main.c      ****             while(stop_elb_up_Read())
 252              		.loc 1 71 0 discriminator 1
 253 0064 FFF7FEFF 		bl	stop_elb_up_Read
 254 0068 031C     		mov	r3, r0
 255 006a 002B     		cmp	r3, #0
 256 006c F5D1     		bne	.L12
 257 006e 04E0     		b	.L9
 258              	.L10:
  74:.\main.c      ****             }
  75:.\main.c      ****         }
  76:.\main.c      ****         else
  77:.\main.c      ****         {
  78:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 259              		.loc 1 78 0
 260 0070 BB1D     		add	r3, r7, #6
 261 0072 1B88     		ldrh	r3, [r3]
 262 0074 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 7


 263 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 264              	.L9:
  79:.\main.c      ****             //LED_Write(1);
  80:.\main.c      ****         }
  81:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 265              		.loc 1 81 0
 266 007a 444B     		ldr	r3, .L18+4
 267 007c 181C     		mov	r0, r3
 268 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  82:.\main.c      ****         LED_Write(1);
 269              		.loc 1 82 0
 270 0082 0120     		mov	r0, #1
 271 0084 FFF7FEFF 		bl	LED_Write
  83:.\main.c      ****         CyDelay(1000);
 272              		.loc 1 83 0
 273 0088 FA23     		mov	r3, #250
 274 008a 9B00     		lsl	r3, r3, #2
 275 008c 181C     		mov	r0, r3
 276 008e FFF7FEFF 		bl	CyDelay
  84:.\main.c      ****         
  85:.\main.c      ****         channel = ELBOW_POT;
 277              		.loc 1 85 0
 278 0092 0123     		mov	r3, #1
 279 0094 FB60     		str	r3, [r7, #12]
  86:.\main.c      ****         
  87:.\main.c      ****         // Add the value to average
  88:.\main.c      ****         average+=potFeedback(channel);
 280              		.loc 1 88 0
 281 0096 FB68     		ldr	r3, [r7, #12]
 282 0098 181C     		mov	r0, r3
 283 009a FFF7FEFF 		bl	potFeedback
 284 009e 031C     		mov	r3, r0
 285 00a0 191C     		mov	r1, r3
 286 00a2 3B1C     		mov	r3, r7
 287 00a4 1233     		add	r3, r3, #18
 288 00a6 3A1C     		mov	r2, r7
 289 00a8 1232     		add	r2, r2, #18
 290 00aa 1288     		ldrh	r2, [r2]
 291 00ac 8A18     		add	r2, r1, r2
 292 00ae 1A80     		strh	r2, [r3]
  89:.\main.c      ****  
  90:.\main.c      **** 		// Move away for 2 seconds
  91:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  92:.\main.c      ****         difference = 1500-velocity;
 293              		.loc 1 92 0
 294 00b0 BB1D     		add	r3, r7, #6
 295 00b2 1B88     		ldrh	r3, [r3]
 296 00b4 354A     		ldr	r2, .L18+4
 297 00b6 D31A     		sub	r3, r2, r3
 298 00b8 9AB2     		uxth	r2, r3
 299 00ba 3B1C     		mov	r3, r7
 300 00bc 0A33     		add	r3, r3, #10
 301 00be 1A80     		strh	r2, [r3]
  93:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 302              		.loc 1 93 0
 303 00c0 3B1C     		mov	r3, r7
 304 00c2 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 8


 305 00c4 1B88     		ldrh	r3, [r3]
 306 00c6 314A     		ldr	r2, .L18+4
 307 00c8 9B18     		add	r3, r3, r2
 308 00ca 9BB2     		uxth	r3, r3
 309 00cc 181C     		mov	r0, r3
 310 00ce FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  94:.\main.c      ****         LED_Write(0); 
 311              		.loc 1 94 0
 312 00d2 0020     		mov	r0, #0
 313 00d4 FFF7FEFF 		bl	LED_Write
  95:.\main.c      ****         CyDelay(1000);
 314              		.loc 1 95 0
 315 00d8 FA23     		mov	r3, #250
 316 00da 9B00     		lsl	r3, r3, #2
 317 00dc 181C     		mov	r0, r3
 318 00de FFF7FEFF 		bl	CyDelay
  96:.\main.c      ****  
  97:.\main.c      **** 		// Stop moving
  98:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 319              		.loc 1 98 0
 320 00e2 2A4B     		ldr	r3, .L18+4
 321 00e4 181C     		mov	r0, r3
 322 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  99:.\main.c      ****         LED_Write(1); 
 323              		.loc 1 99 0
 324 00ea 0120     		mov	r0, #1
 325 00ec FFF7FEFF 		bl	LED_Write
 100:.\main.c      ****         CyDelay(1000);
 326              		.loc 1 100 0
 327 00f0 FA23     		mov	r3, #250
 328 00f2 9B00     		lsl	r3, r3, #2
 329 00f4 181C     		mov	r0, r3
 330 00f6 FFF7FEFF 		bl	CyDelay
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 331              		.loc 1 56 0
 332 00fa 3B1C     		mov	r3, r7
 333 00fc 1733     		add	r3, r3, #23
 334 00fe 1A78     		ldrb	r2, [r3]
 335 0100 3B1C     		mov	r3, r7
 336 0102 1733     		add	r3, r3, #23
 337 0104 0132     		add	r2, r2, #1
 338 0106 1A70     		strb	r2, [r3]
 339              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 340              		.loc 1 56 0 is_stmt 0 discriminator 1
 341 0108 3A1C     		mov	r2, r7
 342 010a 1732     		add	r2, r2, #23
 343 010c 3B1C     		mov	r3, r7
 344 010e 1133     		add	r3, r3, #17
 345 0110 1278     		ldrb	r2, [r2]
 346 0112 1B78     		ldrb	r3, [r3]
 347 0114 9A42     		cmp	r2, r3
 348 0116 00D2     		bcs	.LCB191
 349 0118 85E7     		b	.L13	@long jump
 350              	.LCB191:
 101:.\main.c      **** 	}
 102:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 9


 103:.\main.c      ****     if(velocity > 1500)
 351              		.loc 1 103 0 is_stmt 1
 352 011a BB1D     		add	r3, r7, #6
 353 011c 1A88     		ldrh	r2, [r3]
 354 011e 1B4B     		ldr	r3, .L18+4
 355 0120 9A42     		cmp	r2, r3
 356 0122 10D9     		bls	.L14
 104:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 357              		.loc 1 104 0
 358 0124 3B1C     		mov	r3, r7
 359 0126 1233     		add	r3, r3, #18
 360 0128 1A88     		ldrh	r2, [r3]
 361 012a 3B1C     		mov	r3, r7
 362 012c 1133     		add	r3, r3, #17
 363 012e 1B78     		ldrb	r3, [r3]
 364 0130 101C     		mov	r0, r2
 365 0132 191C     		mov	r1, r3
 366 0134 FFF7FEFF 		bl	__aeabi_idiv
 367 0138 031C     		mov	r3, r0
 368 013a 9AB2     		uxth	r2, r3
 369 013c 3B1C     		mov	r3, r7
 370 013e 1433     		add	r3, r3, #20
 371 0140 143A     		sub	r2, r2, #20
 372 0142 1A80     		strh	r2, [r3]
 373 0144 18E0     		b	.L15
 374              	.L14:
 105:.\main.c      ****     else if(velocity < 1500)
 375              		.loc 1 105 0
 376 0146 BB1D     		add	r3, r7, #6
 377 0148 1A88     		ldrh	r2, [r3]
 378 014a 0F4B     		ldr	r3, .L18
 379 014c 9A42     		cmp	r2, r3
 380 014e 10D8     		bhi	.L16
 106:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 381              		.loc 1 106 0
 382 0150 3B1C     		mov	r3, r7
 383 0152 1233     		add	r3, r3, #18
 384 0154 1A88     		ldrh	r2, [r3]
 385 0156 3B1C     		mov	r3, r7
 386 0158 1133     		add	r3, r3, #17
 387 015a 1B78     		ldrb	r3, [r3]
 388 015c 101C     		mov	r0, r2
 389 015e 191C     		mov	r1, r3
 390 0160 FFF7FEFF 		bl	__aeabi_idiv
 391 0164 031C     		mov	r3, r0
 392 0166 9AB2     		uxth	r2, r3
 393 0168 3B1C     		mov	r3, r7
 394 016a 1433     		add	r3, r3, #20
 395 016c 1432     		add	r2, r2, #20
 396 016e 1A80     		strh	r2, [r3]
 397 0170 02E0     		b	.L15
 398              	.L16:
 107:.\main.c      ****     else // velocity == 1500
 108:.\main.c      ****         LED_Write(1); 
 399              		.loc 1 108 0
 400 0172 0120     		mov	r0, #1
 401 0174 FFF7FEFF 		bl	LED_Write
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 10


 402              	.L15:
 109:.\main.c      ****  
 110:.\main.c      **** 	return bound;
 403              		.loc 1 110 0
 404 0178 3B1C     		mov	r3, r7
 405 017a 1433     		add	r3, r3, #20
 406 017c 1B88     		ldrh	r3, [r3]
 111:.\main.c      **** }
 407              		.loc 1 111 0
 408 017e 181C     		mov	r0, r3
 409 0180 BD46     		mov	sp, r7
 410 0182 06B0     		add	sp, sp, #24
 411              		@ sp needed
 412 0184 80BD     		pop	{r7, pc}
 413              	.L19:
 414 0186 C046     		.align	2
 415              	.L18:
 416 0188 DB050000 		.word	1499
 417 018c DC050000 		.word	1500
 418              		.cfi_endproc
 419              	.LFE35:
 420              		.size	CalibrationElbow, .-CalibrationElbow
 421              		.section	.text.CalibrationShoulder,"ax",%progbits
 422              		.align	2
 423              		.global	CalibrationShoulder
 424              		.code	16
 425              		.thumb_func
 426              		.type	CalibrationShoulder, %function
 427              	CalibrationShoulder:
 428              	.LFB36:
 112:.\main.c      **** 
 113:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 114:.\main.c      **** {
 429              		.loc 1 114 0
 430              		.cfi_startproc
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 86B0     		sub	sp, sp, #24
 436              		.cfi_def_cfa_offset 32
 437 0004 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 439 0006 021C     		mov	r2, r0
 440 0008 BB1D     		add	r3, r7, #6
 441 000a 1A80     		strh	r2, [r3]
 115:.\main.c      **** 	uint8 	CYCLES = 3;
 442              		.loc 1 115 0
 443 000c 3B1C     		mov	r3, r7
 444 000e 1133     		add	r3, r3, #17
 445 0010 0322     		mov	r2, #3
 446 0012 1A70     		strb	r2, [r3]
 116:.\main.c      **** 	uint8 	i;
 117:.\main.c      **** 	uint16 	bound;
 118:.\main.c      **** 	uint16 	average;
 119:.\main.c      ****     uint32  channel;
 120:.\main.c      ****     int16 difference;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 11


 121:.\main.c      ****  
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 447              		.loc 1 122 0
 448 0014 3B1C     		mov	r3, r7
 449 0016 1733     		add	r3, r3, #23
 450 0018 0022     		mov	r2, #0
 451 001a 1A70     		strb	r2, [r3]
 452 001c 3B1C     		mov	r3, r7
 453 001e 1233     		add	r3, r3, #18
 454 0020 0022     		mov	r2, #0
 455 0022 1A80     		strh	r2, [r3]
 456 0024 70E0     		b	.L21
 457              	.L29:
 123:.\main.c      **** 	{
 124:.\main.c      ****         LED_Write(0);
 458              		.loc 1 124 0
 459 0026 0020     		mov	r0, #0
 460 0028 FFF7FEFF 		bl	LED_Write
 125:.\main.c      **** 		// Move till stop switch presses down
 126:.\main.c      ****         if(velocity < 1500)
 461              		.loc 1 126 0
 462 002c BB1D     		add	r3, r7, #6
 463 002e 1A88     		ldrh	r2, [r3]
 464 0030 554B     		ldr	r3, .L34
 465 0032 9A42     		cmp	r2, r3
 466 0034 0BD8     		bhi	.L22
 127:.\main.c      ****         {
 128:.\main.c      ****             while(stop_shdr_dn_Read())
 467              		.loc 1 128 0
 468 0036 04E0     		b	.L23
 469              	.L24:
 129:.\main.c      ****             {
 130:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 470              		.loc 1 130 0
 471 0038 BB1D     		add	r3, r7, #6
 472 003a 1B88     		ldrh	r3, [r3]
 473 003c 181C     		mov	r0, r3
 474 003e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 475              	.L23:
 128:.\main.c      ****             while(stop_shdr_dn_Read())
 476              		.loc 1 128 0 discriminator 1
 477 0042 FFF7FEFF 		bl	stop_shdr_dn_Read
 478 0046 031C     		mov	r3, r0
 479 0048 002B     		cmp	r3, #0
 480 004a F5D1     		bne	.L24
 481 004c 15E0     		b	.L25
 482              	.L22:
 131:.\main.c      ****             }
 132:.\main.c      ****         }
 133:.\main.c      ****         else if(velocity > 1500)
 483              		.loc 1 133 0
 484 004e BB1D     		add	r3, r7, #6
 485 0050 1A88     		ldrh	r2, [r3]
 486 0052 4E4B     		ldr	r3, .L34+4
 487 0054 9A42     		cmp	r2, r3
 488 0056 0BD9     		bls	.L26
 134:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 12


 135:.\main.c      ****             while(stop_shdr_up_Read())
 489              		.loc 1 135 0
 490 0058 04E0     		b	.L27
 491              	.L28:
 136:.\main.c      ****             {
 137:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 492              		.loc 1 137 0
 493 005a BB1D     		add	r3, r7, #6
 494 005c 1B88     		ldrh	r3, [r3]
 495 005e 181C     		mov	r0, r3
 496 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 497              	.L27:
 135:.\main.c      ****             while(stop_shdr_up_Read())
 498              		.loc 1 135 0 discriminator 1
 499 0064 FFF7FEFF 		bl	stop_shdr_up_Read
 500 0068 031C     		mov	r3, r0
 501 006a 002B     		cmp	r3, #0
 502 006c F5D1     		bne	.L28
 503 006e 04E0     		b	.L25
 504              	.L26:
 138:.\main.c      ****             }
 139:.\main.c      ****         }
 140:.\main.c      ****         else
 141:.\main.c      ****         {
 142:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 505              		.loc 1 142 0
 506 0070 BB1D     		add	r3, r7, #6
 507 0072 1B88     		ldrh	r3, [r3]
 508 0074 181C     		mov	r0, r3
 509 0076 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 510              	.L25:
 143:.\main.c      ****             //LED_Write(1);
 144:.\main.c      ****         }
 145:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 511              		.loc 1 145 0
 512 007a 444B     		ldr	r3, .L34+4
 513 007c 181C     		mov	r0, r3
 514 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 146:.\main.c      ****         LED_Write(1); 
 515              		.loc 1 146 0
 516 0082 0120     		mov	r0, #1
 517 0084 FFF7FEFF 		bl	LED_Write
 147:.\main.c      ****         CyDelay(1000);
 518              		.loc 1 147 0
 519 0088 FA23     		mov	r3, #250
 520 008a 9B00     		lsl	r3, r3, #2
 521 008c 181C     		mov	r0, r3
 522 008e FFF7FEFF 		bl	CyDelay
 148:.\main.c      ****         
 149:.\main.c      ****         channel = SHOULDER_POT;
 523              		.loc 1 149 0
 524 0092 0023     		mov	r3, #0
 525 0094 FB60     		str	r3, [r7, #12]
 150:.\main.c      ****  
 151:.\main.c      **** 		// Add the value to average
 152:.\main.c      ****         average+=potFeedback(channel);
 526              		.loc 1 152 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 13


 527 0096 FB68     		ldr	r3, [r7, #12]
 528 0098 181C     		mov	r0, r3
 529 009a FFF7FEFF 		bl	potFeedback
 530 009e 031C     		mov	r3, r0
 531 00a0 191C     		mov	r1, r3
 532 00a2 3B1C     		mov	r3, r7
 533 00a4 1233     		add	r3, r3, #18
 534 00a6 3A1C     		mov	r2, r7
 535 00a8 1232     		add	r2, r2, #18
 536 00aa 1288     		ldrh	r2, [r2]
 537 00ac 8A18     		add	r2, r1, r2
 538 00ae 1A80     		strh	r2, [r3]
 153:.\main.c      ****  
 154:.\main.c      **** 		// Move away for 2 seconds
 155:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 156:.\main.c      ****         difference = 1500-velocity;
 539              		.loc 1 156 0
 540 00b0 BB1D     		add	r3, r7, #6
 541 00b2 1B88     		ldrh	r3, [r3]
 542 00b4 354A     		ldr	r2, .L34+4
 543 00b6 D31A     		sub	r3, r2, r3
 544 00b8 9AB2     		uxth	r2, r3
 545 00ba 3B1C     		mov	r3, r7
 546 00bc 0A33     		add	r3, r3, #10
 547 00be 1A80     		strh	r2, [r3]
 157:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 548              		.loc 1 157 0
 549 00c0 3B1C     		mov	r3, r7
 550 00c2 0A33     		add	r3, r3, #10
 551 00c4 1B88     		ldrh	r3, [r3]
 552 00c6 314A     		ldr	r2, .L34+4
 553 00c8 9B18     		add	r3, r3, r2
 554 00ca 9BB2     		uxth	r3, r3
 555 00cc 181C     		mov	r0, r3
 556 00ce FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 158:.\main.c      ****         LED_Write(0); 
 557              		.loc 1 158 0
 558 00d2 0020     		mov	r0, #0
 559 00d4 FFF7FEFF 		bl	LED_Write
 159:.\main.c      ****         CyDelay(1000);
 560              		.loc 1 159 0
 561 00d8 FA23     		mov	r3, #250
 562 00da 9B00     		lsl	r3, r3, #2
 563 00dc 181C     		mov	r0, r3
 564 00de FFF7FEFF 		bl	CyDelay
 160:.\main.c      ****  
 161:.\main.c      **** 		// Stop moving
 162:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 565              		.loc 1 162 0
 566 00e2 2A4B     		ldr	r3, .L34+4
 567 00e4 181C     		mov	r0, r3
 568 00e6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 163:.\main.c      ****         LED_Write(1); 
 569              		.loc 1 163 0
 570 00ea 0120     		mov	r0, #1
 571 00ec FFF7FEFF 		bl	LED_Write
 164:.\main.c      ****         CyDelay(1000);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 14


 572              		.loc 1 164 0
 573 00f0 FA23     		mov	r3, #250
 574 00f2 9B00     		lsl	r3, r3, #2
 575 00f4 181C     		mov	r0, r3
 576 00f6 FFF7FEFF 		bl	CyDelay
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 577              		.loc 1 122 0
 578 00fa 3B1C     		mov	r3, r7
 579 00fc 1733     		add	r3, r3, #23
 580 00fe 1A78     		ldrb	r2, [r3]
 581 0100 3B1C     		mov	r3, r7
 582 0102 1733     		add	r3, r3, #23
 583 0104 0132     		add	r2, r2, #1
 584 0106 1A70     		strb	r2, [r3]
 585              	.L21:
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 586              		.loc 1 122 0 is_stmt 0 discriminator 1
 587 0108 3A1C     		mov	r2, r7
 588 010a 1732     		add	r2, r2, #23
 589 010c 3B1C     		mov	r3, r7
 590 010e 1133     		add	r3, r3, #17
 591 0110 1278     		ldrb	r2, [r2]
 592 0112 1B78     		ldrb	r3, [r3]
 593 0114 9A42     		cmp	r2, r3
 594 0116 00D2     		bcs	.LCB420
 595 0118 85E7     		b	.L29	@long jump
 596              	.LCB420:
 165:.\main.c      **** 	}
 166:.\main.c      ****  
 167:.\main.c      **** 	if(velocity > 1500)
 597              		.loc 1 167 0 is_stmt 1
 598 011a BB1D     		add	r3, r7, #6
 599 011c 1A88     		ldrh	r2, [r3]
 600 011e 1B4B     		ldr	r3, .L34+4
 601 0120 9A42     		cmp	r2, r3
 602 0122 10D9     		bls	.L30
 168:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 603              		.loc 1 168 0
 604 0124 3B1C     		mov	r3, r7
 605 0126 1233     		add	r3, r3, #18
 606 0128 1A88     		ldrh	r2, [r3]
 607 012a 3B1C     		mov	r3, r7
 608 012c 1133     		add	r3, r3, #17
 609 012e 1B78     		ldrb	r3, [r3]
 610 0130 101C     		mov	r0, r2
 611 0132 191C     		mov	r1, r3
 612 0134 FFF7FEFF 		bl	__aeabi_idiv
 613 0138 031C     		mov	r3, r0
 614 013a 9AB2     		uxth	r2, r3
 615 013c 3B1C     		mov	r3, r7
 616 013e 1433     		add	r3, r3, #20
 617 0140 143A     		sub	r2, r2, #20
 618 0142 1A80     		strh	r2, [r3]
 619 0144 18E0     		b	.L31
 620              	.L30:
 169:.\main.c      ****     else if(velocity < 1500)
 621              		.loc 1 169 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 15


 622 0146 BB1D     		add	r3, r7, #6
 623 0148 1A88     		ldrh	r2, [r3]
 624 014a 0F4B     		ldr	r3, .L34
 625 014c 9A42     		cmp	r2, r3
 626 014e 10D8     		bhi	.L32
 170:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 627              		.loc 1 170 0
 628 0150 3B1C     		mov	r3, r7
 629 0152 1233     		add	r3, r3, #18
 630 0154 1A88     		ldrh	r2, [r3]
 631 0156 3B1C     		mov	r3, r7
 632 0158 1133     		add	r3, r3, #17
 633 015a 1B78     		ldrb	r3, [r3]
 634 015c 101C     		mov	r0, r2
 635 015e 191C     		mov	r1, r3
 636 0160 FFF7FEFF 		bl	__aeabi_idiv
 637 0164 031C     		mov	r3, r0
 638 0166 9AB2     		uxth	r2, r3
 639 0168 3B1C     		mov	r3, r7
 640 016a 1433     		add	r3, r3, #20
 641 016c 1432     		add	r2, r2, #20
 642 016e 1A80     		strh	r2, [r3]
 643 0170 02E0     		b	.L31
 644              	.L32:
 171:.\main.c      ****     else // velocity == 1500
 172:.\main.c      ****         LED_Write(1); 
 645              		.loc 1 172 0
 646 0172 0120     		mov	r0, #1
 647 0174 FFF7FEFF 		bl	LED_Write
 648              	.L31:
 173:.\main.c      ****  
 174:.\main.c      **** 	return bound;
 649              		.loc 1 174 0
 650 0178 3B1C     		mov	r3, r7
 651 017a 1433     		add	r3, r3, #20
 652 017c 1B88     		ldrh	r3, [r3]
 175:.\main.c      **** }
 653              		.loc 1 175 0
 654 017e 181C     		mov	r0, r3
 655 0180 BD46     		mov	sp, r7
 656 0182 06B0     		add	sp, sp, #24
 657              		@ sp needed
 658 0184 80BD     		pop	{r7, pc}
 659              	.L35:
 660 0186 C046     		.align	2
 661              	.L34:
 662 0188 DB050000 		.word	1499
 663 018c DC050000 		.word	1500
 664              		.cfi_endproc
 665              	.LFE36:
 666              		.size	CalibrationShoulder, .-CalibrationShoulder
 667              		.global	__aeabi_uidiv
 668              		.section	.text.average,"ax",%progbits
 669              		.align	2
 670              		.global	average
 671              		.code	16
 672              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 16


 673              		.type	average, %function
 674              	average:
 675              	.LFB37:
 176:.\main.c      **** 
 177:.\main.c      **** //Average function to be used in smoothing our input
 178:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 179:.\main.c      **** {
 676              		.loc 1 179 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 86B0     		sub	sp, sp, #24
 683              		.cfi_def_cfa_offset 32
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 687 0008 0A1C     		mov	r2, r1
 688 000a FB1C     		add	r3, r7, #3
 689 000c 1A70     		strb	r2, [r3]
 180:.\main.c      ****     uint8 i;
 181:.\main.c      ****     uint32 sum = 0;
 690              		.loc 1 181 0
 691 000e 0023     		mov	r3, #0
 692 0010 3B61     		str	r3, [r7, #16]
 182:.\main.c      ****     uint16 avg = 0;
 693              		.loc 1 182 0
 694 0012 3B1C     		mov	r3, r7
 695 0014 0E33     		add	r3, r3, #14
 696 0016 0022     		mov	r2, #0
 697 0018 1A80     		strh	r2, [r3]
 183:.\main.c      ****     
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 698              		.loc 1 184 0
 699 001a 3B1C     		mov	r3, r7
 700 001c 1733     		add	r3, r3, #23
 701 001e 0022     		mov	r2, #0
 702 0020 1A70     		strb	r2, [r3]
 703 0022 10E0     		b	.L37
 704              	.L38:
 185:.\main.c      ****     {
 186:.\main.c      ****         sum += av_array[i];
 705              		.loc 1 186 0 discriminator 2
 706 0024 3B1C     		mov	r3, r7
 707 0026 1733     		add	r3, r3, #23
 708 0028 1B78     		ldrb	r3, [r3]
 709 002a 5B00     		lsl	r3, r3, #1
 710 002c 7A68     		ldr	r2, [r7, #4]
 711 002e D318     		add	r3, r2, r3
 712 0030 1B88     		ldrh	r3, [r3]
 713 0032 3A69     		ldr	r2, [r7, #16]
 714 0034 D318     		add	r3, r2, r3
 715 0036 3B61     		str	r3, [r7, #16]
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 716              		.loc 1 184 0 discriminator 2
 717 0038 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 17


 718 003a 1733     		add	r3, r3, #23
 719 003c 1A78     		ldrb	r2, [r3]
 720 003e 3B1C     		mov	r3, r7
 721 0040 1733     		add	r3, r3, #23
 722 0042 0132     		add	r2, r2, #1
 723 0044 1A70     		strb	r2, [r3]
 724              	.L37:
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 725              		.loc 1 184 0 is_stmt 0 discriminator 1
 726 0046 3A1C     		mov	r2, r7
 727 0048 1732     		add	r2, r2, #23
 728 004a FB1C     		add	r3, r7, #3
 729 004c 1278     		ldrb	r2, [r2]
 730 004e 1B78     		ldrb	r3, [r3]
 731 0050 9A42     		cmp	r2, r3
 732 0052 E7D3     		bcc	.L38
 187:.\main.c      ****     }
 188:.\main.c      ****     
 189:.\main.c      ****     avg = sum/num_items;
 733              		.loc 1 189 0 is_stmt 1
 734 0054 FB1C     		add	r3, r7, #3
 735 0056 1B78     		ldrb	r3, [r3]
 736 0058 3869     		ldr	r0, [r7, #16]
 737 005a 191C     		mov	r1, r3
 738 005c FFF7FEFF 		bl	__aeabi_uidiv
 739 0060 031C     		mov	r3, r0
 740 0062 1A1C     		mov	r2, r3
 741 0064 3B1C     		mov	r3, r7
 742 0066 0E33     		add	r3, r3, #14
 743 0068 1A80     		strh	r2, [r3]
 190:.\main.c      ****     
 191:.\main.c      ****     return avg;
 744              		.loc 1 191 0
 745 006a 3B1C     		mov	r3, r7
 746 006c 0E33     		add	r3, r3, #14
 747 006e 1B88     		ldrh	r3, [r3]
 192:.\main.c      **** }
 748              		.loc 1 192 0
 749 0070 181C     		mov	r0, r3
 750 0072 BD46     		mov	sp, r7
 751 0074 06B0     		add	sp, sp, #24
 752              		@ sp needed
 753 0076 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE37:
 756              		.size	average, .-average
 757              		.section	.text.maintain_array,"ax",%progbits
 758              		.align	2
 759              		.global	maintain_array
 760              		.code	16
 761              		.thumb_func
 762              		.type	maintain_array, %function
 763              	maintain_array:
 764              	.LFB38:
 193:.\main.c      **** 
 194:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 195:.\main.c      **** {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 18


 765              		.loc 1 195 0
 766              		.cfi_startproc
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 0A1C     		mov	r2, r1
 776 0008 FB1D     		add	r3, r7, #7
 777 000a 011C     		add	r1, r0, #0
 778 000c 1970     		strb	r1, [r3]
 779 000e BB1D     		add	r3, r7, #6
 780 0010 1A70     		strb	r2, [r3]
 196:.\main.c      ****     if(cpos < (SIZE - 1))
 781              		.loc 1 196 0
 782 0012 FB1D     		add	r3, r7, #7
 783 0014 1A78     		ldrb	r2, [r3]
 784 0016 BB1D     		add	r3, r7, #6
 785 0018 1B78     		ldrb	r3, [r3]
 786 001a 013B     		sub	r3, r3, #1
 787 001c 9A42     		cmp	r2, r3
 788 001e 05DA     		bge	.L41
 197:.\main.c      ****     {
 198:.\main.c      ****         cpos++;
 789              		.loc 1 198 0
 790 0020 FB1D     		add	r3, r7, #7
 791 0022 1A78     		ldrb	r2, [r3]
 792 0024 FB1D     		add	r3, r7, #7
 793 0026 0132     		add	r2, r2, #1
 794 0028 1A70     		strb	r2, [r3]
 795 002a 02E0     		b	.L42
 796              	.L41:
 199:.\main.c      ****     }
 200:.\main.c      ****     else
 201:.\main.c      ****     {
 202:.\main.c      ****         cpos = 0;
 797              		.loc 1 202 0
 798 002c FB1D     		add	r3, r7, #7
 799 002e 0022     		mov	r2, #0
 800 0030 1A70     		strb	r2, [r3]
 801              	.L42:
 203:.\main.c      ****     }
 204:.\main.c      ****     return cpos;
 802              		.loc 1 204 0
 803 0032 FB1D     		add	r3, r7, #7
 804 0034 1B78     		ldrb	r3, [r3]
 205:.\main.c      **** }
 805              		.loc 1 205 0
 806 0036 181C     		mov	r0, r3
 807 0038 BD46     		mov	sp, r7
 808 003a 02B0     		add	sp, sp, #8
 809              		@ sp needed
 810 003c 80BD     		pop	{r7, pc}
 811              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 19


 812              	.LFE38:
 813              		.size	maintain_array, .-maintain_array
 814 003e C046     		.section	.text.check_update,"ax",%progbits
 815              		.align	2
 816              		.global	check_update
 817              		.code	16
 818              		.thumb_func
 819              		.type	check_update, %function
 820              	check_update:
 821              	.LFB39:
 206:.\main.c      **** 
 207:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 208:.\main.c      **** {
 822              		.loc 1 208 0
 823              		.cfi_startproc
 824 0000 80B5     		push	{r7, lr}
 825              		.cfi_def_cfa_offset 8
 826              		.cfi_offset 7, -8
 827              		.cfi_offset 14, -4
 828 0002 86B0     		sub	sp, sp, #24
 829              		.cfi_def_cfa_offset 32
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 F860     		str	r0, [r7, #12]
 833 0008 7B60     		str	r3, [r7, #4]
 834 000a 3B1C     		mov	r3, r7
 835 000c 0B33     		add	r3, r3, #11
 836 000e 1970     		strb	r1, [r3]
 837 0010 3B1C     		mov	r3, r7
 838 0012 0A33     		add	r3, r3, #10
 839 0014 1A70     		strb	r2, [r3]
 209:.\main.c      ****     uint8 index;
 210:.\main.c      ****     if(arr_pos != 0)
 840              		.loc 1 210 0
 841 0016 3B1C     		mov	r3, r7
 842 0018 0B33     		add	r3, r3, #11
 843 001a 1B78     		ldrb	r3, [r3]
 844 001c 002B     		cmp	r3, #0
 845 001e 07D0     		beq	.L45
 211:.\main.c      ****     {
 212:.\main.c      ****         index = arr_pos - 1;
 846              		.loc 1 212 0
 847 0020 3B1C     		mov	r3, r7
 848 0022 1733     		add	r3, r3, #23
 849 0024 3A1C     		mov	r2, r7
 850 0026 0B32     		add	r2, r2, #11
 851 0028 1278     		ldrb	r2, [r2]
 852 002a 013A     		sub	r2, r2, #1
 853 002c 1A70     		strb	r2, [r3]
 854 002e 06E0     		b	.L46
 855              	.L45:
 213:.\main.c      ****     }
 214:.\main.c      ****     else
 215:.\main.c      ****     {
 216:.\main.c      ****         index = size - 1;
 856              		.loc 1 216 0
 857 0030 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 20


 858 0032 1733     		add	r3, r3, #23
 859 0034 3A1C     		mov	r2, r7
 860 0036 0A32     		add	r2, r2, #10
 861 0038 1278     		ldrb	r2, [r2]
 862 003a 013A     		sub	r2, r2, #1
 863 003c 1A70     		strb	r2, [r3]
 864              	.L46:
 217:.\main.c      ****     }
 218:.\main.c      ****     
 219:.\main.c      ****     if(change < 0)
 865              		.loc 1 219 0
 866 003e 7B68     		ldr	r3, [r7, #4]
 867 0040 002B     		cmp	r3, #0
 868 0042 2ADA     		bge	.L47
 220:.\main.c      ****     {
 221:.\main.c      ****         if(array[index] >= (1000 - change))
 869              		.loc 1 221 0
 870 0044 3B1C     		mov	r3, r7
 871 0046 1733     		add	r3, r3, #23
 872 0048 1B78     		ldrb	r3, [r3]
 873 004a 5B00     		lsl	r3, r3, #1
 874 004c FA68     		ldr	r2, [r7, #12]
 875 004e D318     		add	r3, r2, r3
 876 0050 1B88     		ldrh	r3, [r3]
 877 0052 1A1C     		mov	r2, r3
 878 0054 7B68     		ldr	r3, [r7, #4]
 879 0056 FA21     		mov	r1, #250
 880 0058 8900     		lsl	r1, r1, #2
 881 005a CB1A     		sub	r3, r1, r3
 882 005c 9A42     		cmp	r2, r3
 883 005e 12DB     		blt	.L48
 222:.\main.c      ****         {
 223:.\main.c      ****             array[arr_pos] = (array[index] + change);
 884              		.loc 1 223 0
 885 0060 3B1C     		mov	r3, r7
 886 0062 0B33     		add	r3, r3, #11
 887 0064 1B78     		ldrb	r3, [r3]
 888 0066 5B00     		lsl	r3, r3, #1
 889 0068 FA68     		ldr	r2, [r7, #12]
 890 006a D318     		add	r3, r2, r3
 891 006c 3A1C     		mov	r2, r7
 892 006e 1732     		add	r2, r2, #23
 893 0070 1278     		ldrb	r2, [r2]
 894 0072 5200     		lsl	r2, r2, #1
 895 0074 F968     		ldr	r1, [r7, #12]
 896 0076 8A18     		add	r2, r1, r2
 897 0078 1188     		ldrh	r1, [r2]
 898 007a 7A68     		ldr	r2, [r7, #4]
 899 007c 92B2     		uxth	r2, r2
 900 007e 8A18     		add	r2, r1, r2
 901 0080 92B2     		uxth	r2, r2
 902 0082 1A80     		strh	r2, [r3]
 903 0084 33E0     		b	.L50
 904              	.L48:
 224:.\main.c      ****         }
 225:.\main.c      ****         else
 226:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 21


 227:.\main.c      ****             array[arr_pos] = 1000;
 905              		.loc 1 227 0
 906 0086 3B1C     		mov	r3, r7
 907 0088 0B33     		add	r3, r3, #11
 908 008a 1B78     		ldrb	r3, [r3]
 909 008c 5B00     		lsl	r3, r3, #1
 910 008e FA68     		ldr	r2, [r7, #12]
 911 0090 D318     		add	r3, r2, r3
 912 0092 FA22     		mov	r2, #250
 913 0094 9200     		lsl	r2, r2, #2
 914 0096 1A80     		strh	r2, [r3]
 915 0098 29E0     		b	.L50
 916              	.L47:
 228:.\main.c      ****         }
 229:.\main.c      ****     }
 230:.\main.c      ****     else
 231:.\main.c      ****     {
 232:.\main.c      ****         if(array[index] <= (2000 - change))
 917              		.loc 1 232 0
 918 009a 3B1C     		mov	r3, r7
 919 009c 1733     		add	r3, r3, #23
 920 009e 1B78     		ldrb	r3, [r3]
 921 00a0 5B00     		lsl	r3, r3, #1
 922 00a2 FA68     		ldr	r2, [r7, #12]
 923 00a4 D318     		add	r3, r2, r3
 924 00a6 1B88     		ldrh	r3, [r3]
 925 00a8 1A1C     		mov	r2, r3
 926 00aa 7B68     		ldr	r3, [r7, #4]
 927 00ac FA21     		mov	r1, #250
 928 00ae C900     		lsl	r1, r1, #3
 929 00b0 CB1A     		sub	r3, r1, r3
 930 00b2 9A42     		cmp	r2, r3
 931 00b4 12DC     		bgt	.L51
 233:.\main.c      ****         {
 234:.\main.c      ****             array[arr_pos] = (array[index] + change);
 932              		.loc 1 234 0
 933 00b6 3B1C     		mov	r3, r7
 934 00b8 0B33     		add	r3, r3, #11
 935 00ba 1B78     		ldrb	r3, [r3]
 936 00bc 5B00     		lsl	r3, r3, #1
 937 00be FA68     		ldr	r2, [r7, #12]
 938 00c0 D318     		add	r3, r2, r3
 939 00c2 3A1C     		mov	r2, r7
 940 00c4 1732     		add	r2, r2, #23
 941 00c6 1278     		ldrb	r2, [r2]
 942 00c8 5200     		lsl	r2, r2, #1
 943 00ca F968     		ldr	r1, [r7, #12]
 944 00cc 8A18     		add	r2, r1, r2
 945 00ce 1188     		ldrh	r1, [r2]
 946 00d0 7A68     		ldr	r2, [r7, #4]
 947 00d2 92B2     		uxth	r2, r2
 948 00d4 8A18     		add	r2, r1, r2
 949 00d6 92B2     		uxth	r2, r2
 950 00d8 1A80     		strh	r2, [r3]
 951 00da 08E0     		b	.L50
 952              	.L51:
 235:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 22


 236:.\main.c      ****         else
 237:.\main.c      ****         {
 238:.\main.c      ****             array[arr_pos] = 2000;
 953              		.loc 1 238 0
 954 00dc 3B1C     		mov	r3, r7
 955 00de 0B33     		add	r3, r3, #11
 956 00e0 1B78     		ldrb	r3, [r3]
 957 00e2 5B00     		lsl	r3, r3, #1
 958 00e4 FA68     		ldr	r2, [r7, #12]
 959 00e6 D318     		add	r3, r2, r3
 960 00e8 FA22     		mov	r2, #250
 961 00ea D200     		lsl	r2, r2, #3
 962 00ec 1A80     		strh	r2, [r3]
 963              	.L50:
 239:.\main.c      ****         }
 240:.\main.c      ****     }
 241:.\main.c      ****     
 242:.\main.c      ****     return maintain_array(arr_pos, size);
 964              		.loc 1 242 0
 965 00ee 3B1C     		mov	r3, r7
 966 00f0 0B33     		add	r3, r3, #11
 967 00f2 1A78     		ldrb	r2, [r3]
 968 00f4 3B1C     		mov	r3, r7
 969 00f6 0A33     		add	r3, r3, #10
 970 00f8 1B78     		ldrb	r3, [r3]
 971 00fa 101C     		mov	r0, r2
 972 00fc 191C     		mov	r1, r3
 973 00fe FFF7FEFF 		bl	maintain_array
 974 0102 031C     		mov	r3, r0
 243:.\main.c      **** }
 975              		.loc 1 243 0
 976 0104 181C     		mov	r0, r3
 977 0106 BD46     		mov	sp, r7
 978 0108 06B0     		add	sp, sp, #24
 979              		@ sp needed
 980 010a 80BD     		pop	{r7, pc}
 981              		.cfi_endproc
 982              	.LFE39:
 983              		.size	check_update, .-check_update
 984              		.section	.text.pos_to_vel,"ax",%progbits
 985              		.align	2
 986              		.global	pos_to_vel
 987              		.code	16
 988              		.thumb_func
 989              		.type	pos_to_vel, %function
 990              	pos_to_vel:
 991              	.LFB40:
 244:.\main.c      **** 
 245:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 246:.\main.c      **** {
 992              		.loc 1 246 0
 993              		.cfi_startproc
 994 0000 90B5     		push	{r4, r7, lr}
 995              		.cfi_def_cfa_offset 12
 996              		.cfi_offset 4, -12
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 23


 999 0002 83B0     		sub	sp, sp, #12
 1000              		.cfi_def_cfa_offset 24
 1001 0004 00AF     		add	r7, sp, #0
 1002              		.cfi_def_cfa_register 7
 1003 0006 3960     		str	r1, [r7]
 1004 0008 111C     		mov	r1, r2
 1005 000a 1A1C     		mov	r2, r3
 1006 000c FB1D     		add	r3, r7, #7
 1007 000e 1870     		strb	r0, [r3]
 1008 0010 BB1D     		add	r3, r7, #6
 1009 0012 1970     		strb	r1, [r3]
 1010 0014 3B1D     		add	r3, r7, #4
 1011 0016 1A80     		strh	r2, [r3]
 247:.\main.c      ****     if(command >= 1000 && command < 1125)
 1012              		.loc 1 247 0
 1013 0018 3B1D     		add	r3, r7, #4
 1014 001a 1A88     		ldrh	r2, [r3]
 1015 001c 724B     		ldr	r3, .L65
 1016 001e 9A42     		cmp	r2, r3
 1017 0020 11D9     		bls	.L54
 1018              		.loc 1 247 0 is_stmt 0 discriminator 1
 1019 0022 3B1D     		add	r3, r7, #4
 1020 0024 1A88     		ldrh	r2, [r3]
 1021 0026 714B     		ldr	r3, .L65+4
 1022 0028 9A42     		cmp	r2, r3
 1023 002a 0CD8     		bhi	.L54
 248:.\main.c      ****     {
 249:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 1024              		.loc 1 249 0 is_stmt 1
 1025 002c FC1D     		add	r4, r7, #7
 1026 002e 3868     		ldr	r0, [r7]
 1027 0030 FB1D     		add	r3, r7, #7
 1028 0032 1978     		ldrb	r1, [r3]
 1029 0034 BB1D     		add	r3, r7, #6
 1030 0036 1A78     		ldrb	r2, [r3]
 1031 0038 6423     		mov	r3, #100
 1032 003a 5B42     		neg	r3, r3
 1033 003c FFF7FEFF 		bl	check_update
 1034 0040 031C     		mov	r3, r0
 1035 0042 2370     		strb	r3, [r4]
 1036 0044 CAE0     		b	.L55
 1037              	.L54:
 250:.\main.c      ****     }
 251:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1038              		.loc 1 251 0
 1039 0046 3B1D     		add	r3, r7, #4
 1040 0048 1A88     		ldrh	r2, [r3]
 1041 004a 684B     		ldr	r3, .L65+4
 1042 004c 9A42     		cmp	r2, r3
 1043 004e 11D9     		bls	.L56
 1044              		.loc 1 251 0 is_stmt 0 discriminator 1
 1045 0050 3B1D     		add	r3, r7, #4
 1046 0052 1A88     		ldrh	r2, [r3]
 1047 0054 664B     		ldr	r3, .L65+8
 1048 0056 9A42     		cmp	r2, r3
 1049 0058 0CD8     		bhi	.L56
 252:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 24


 253:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1050              		.loc 1 253 0 is_stmt 1
 1051 005a FC1D     		add	r4, r7, #7
 1052 005c 3868     		ldr	r0, [r7]
 1053 005e FB1D     		add	r3, r7, #7
 1054 0060 1978     		ldrb	r1, [r3]
 1055 0062 BB1D     		add	r3, r7, #6
 1056 0064 1A78     		ldrb	r2, [r3]
 1057 0066 3223     		mov	r3, #50
 1058 0068 5B42     		neg	r3, r3
 1059 006a FFF7FEFF 		bl	check_update
 1060 006e 031C     		mov	r3, r0
 1061 0070 2370     		strb	r3, [r4]
 1062 0072 B3E0     		b	.L55
 1063              	.L56:
 254:.\main.c      ****     }
 255:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1064              		.loc 1 255 0
 1065 0074 3B1D     		add	r3, r7, #4
 1066 0076 1A88     		ldrh	r2, [r3]
 1067 0078 5D4B     		ldr	r3, .L65+8
 1068 007a 9A42     		cmp	r2, r3
 1069 007c 11D9     		bls	.L57
 1070              		.loc 1 255 0 is_stmt 0 discriminator 1
 1071 007e 3B1D     		add	r3, r7, #4
 1072 0080 1A88     		ldrh	r2, [r3]
 1073 0082 5C4B     		ldr	r3, .L65+12
 1074 0084 9A42     		cmp	r2, r3
 1075 0086 0CD8     		bhi	.L57
 256:.\main.c      ****     {
 257:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 1076              		.loc 1 257 0 is_stmt 1
 1077 0088 FC1D     		add	r4, r7, #7
 1078 008a 3868     		ldr	r0, [r7]
 1079 008c FB1D     		add	r3, r7, #7
 1080 008e 1978     		ldrb	r1, [r3]
 1081 0090 BB1D     		add	r3, r7, #6
 1082 0092 1A78     		ldrb	r2, [r3]
 1083 0094 0A23     		mov	r3, #10
 1084 0096 5B42     		neg	r3, r3
 1085 0098 FFF7FEFF 		bl	check_update
 1086 009c 031C     		mov	r3, r0
 1087 009e 2370     		strb	r3, [r4]
 1088 00a0 9CE0     		b	.L55
 1089              	.L57:
 258:.\main.c      ****     }
 259:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1090              		.loc 1 259 0
 1091 00a2 3B1D     		add	r3, r7, #4
 1092 00a4 1A88     		ldrh	r2, [r3]
 1093 00a6 534B     		ldr	r3, .L65+12
 1094 00a8 9A42     		cmp	r2, r3
 1095 00aa 11D9     		bls	.L58
 1096              		.loc 1 259 0 is_stmt 0 discriminator 1
 1097 00ac 3B1D     		add	r3, r7, #4
 1098 00ae 1A88     		ldrh	r2, [r3]
 1099 00b0 514B     		ldr	r3, .L65+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 25


 1100 00b2 9A42     		cmp	r2, r3
 1101 00b4 0CD8     		bhi	.L58
 260:.\main.c      ****     {
 261:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1102              		.loc 1 261 0 is_stmt 1
 1103 00b6 FC1D     		add	r4, r7, #7
 1104 00b8 3868     		ldr	r0, [r7]
 1105 00ba FB1D     		add	r3, r7, #7
 1106 00bc 1978     		ldrb	r1, [r3]
 1107 00be BB1D     		add	r3, r7, #6
 1108 00c0 1A78     		ldrb	r2, [r3]
 1109 00c2 0523     		mov	r3, #5
 1110 00c4 5B42     		neg	r3, r3
 1111 00c6 FFF7FEFF 		bl	check_update
 1112 00ca 031C     		mov	r3, r0
 1113 00cc 2370     		strb	r3, [r4]
 1114 00ce 85E0     		b	.L55
 1115              	.L58:
 262:.\main.c      ****     }
 263:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1116              		.loc 1 263 0
 1117 00d0 3B1D     		add	r3, r7, #4
 1118 00d2 1A88     		ldrh	r2, [r3]
 1119 00d4 494B     		ldr	r3, .L65+20
 1120 00d6 9A42     		cmp	r2, r3
 1121 00d8 10D8     		bhi	.L59
 1122              		.loc 1 263 0 is_stmt 0 discriminator 1
 1123 00da 3B1D     		add	r3, r7, #4
 1124 00dc 1A88     		ldrh	r2, [r3]
 1125 00de 464B     		ldr	r3, .L65+16
 1126 00e0 9A42     		cmp	r2, r3
 1127 00e2 0BD9     		bls	.L59
 264:.\main.c      ****     {
 265:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1128              		.loc 1 265 0 is_stmt 1
 1129 00e4 FC1D     		add	r4, r7, #7
 1130 00e6 FB1D     		add	r3, r7, #7
 1131 00e8 1A78     		ldrb	r2, [r3]
 1132 00ea BB1D     		add	r3, r7, #6
 1133 00ec 1B78     		ldrb	r3, [r3]
 1134 00ee 101C     		mov	r0, r2
 1135 00f0 191C     		mov	r1, r3
 1136 00f2 FFF7FEFF 		bl	maintain_array
 1137 00f6 031C     		mov	r3, r0
 1138 00f8 2370     		strb	r3, [r4]
 1139 00fa 6FE0     		b	.L55
 1140              	.L59:
 266:.\main.c      ****     }
 267:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1141              		.loc 1 267 0
 1142 00fc 3B1D     		add	r3, r7, #4
 1143 00fe 1A88     		ldrh	r2, [r3]
 1144 0100 3E4B     		ldr	r3, .L65+20
 1145 0102 9A42     		cmp	r2, r3
 1146 0104 13D9     		bls	.L60
 1147              		.loc 1 267 0 is_stmt 0 discriminator 1
 1148 0106 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 26


 1149 0108 1A88     		ldrh	r2, [r3]
 1150 010a 3D4B     		ldr	r3, .L65+24
 1151 010c 9A42     		cmp	r2, r3
 1152 010e 0ED8     		bhi	.L60
 268:.\main.c      ****     {
 269:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1153              		.loc 1 269 0 is_stmt 1
 1154 0110 FC1D     		add	r4, r7, #7
 1155 0112 3968     		ldr	r1, [r7]
 1156 0114 FB1D     		add	r3, r7, #7
 1157 0116 1A78     		ldrb	r2, [r3]
 1158 0118 BB1D     		add	r3, r7, #6
 1159 011a 1B78     		ldrb	r3, [r3]
 1160 011c 081C     		mov	r0, r1
 1161 011e 111C     		mov	r1, r2
 1162 0120 1A1C     		mov	r2, r3
 1163 0122 0523     		mov	r3, #5
 1164 0124 FFF7FEFF 		bl	check_update
 1165 0128 031C     		mov	r3, r0
 1166 012a 2370     		strb	r3, [r4]
 1167 012c 56E0     		b	.L55
 1168              	.L60:
 270:.\main.c      ****     }
 271:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1169              		.loc 1 271 0
 1170 012e 3B1D     		add	r3, r7, #4
 1171 0130 1A88     		ldrh	r2, [r3]
 1172 0132 334B     		ldr	r3, .L65+24
 1173 0134 9A42     		cmp	r2, r3
 1174 0136 13D9     		bls	.L61
 1175              		.loc 1 271 0 is_stmt 0 discriminator 1
 1176 0138 3B1D     		add	r3, r7, #4
 1177 013a 1A88     		ldrh	r2, [r3]
 1178 013c 314B     		ldr	r3, .L65+28
 1179 013e 9A42     		cmp	r2, r3
 1180 0140 0ED8     		bhi	.L61
 272:.\main.c      ****     {
 273:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1181              		.loc 1 273 0 is_stmt 1
 1182 0142 FC1D     		add	r4, r7, #7
 1183 0144 3968     		ldr	r1, [r7]
 1184 0146 FB1D     		add	r3, r7, #7
 1185 0148 1A78     		ldrb	r2, [r3]
 1186 014a BB1D     		add	r3, r7, #6
 1187 014c 1B78     		ldrb	r3, [r3]
 1188 014e 081C     		mov	r0, r1
 1189 0150 111C     		mov	r1, r2
 1190 0152 1A1C     		mov	r2, r3
 1191 0154 0A23     		mov	r3, #10
 1192 0156 FFF7FEFF 		bl	check_update
 1193 015a 031C     		mov	r3, r0
 1194 015c 2370     		strb	r3, [r4]
 1195 015e 3DE0     		b	.L55
 1196              	.L61:
 274:.\main.c      ****     }
 275:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1197              		.loc 1 275 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 27


 1198 0160 3B1D     		add	r3, r7, #4
 1199 0162 1A88     		ldrh	r2, [r3]
 1200 0164 274B     		ldr	r3, .L65+28
 1201 0166 9A42     		cmp	r2, r3
 1202 0168 13D9     		bls	.L62
 1203              		.loc 1 275 0 is_stmt 0 discriminator 1
 1204 016a 3B1D     		add	r3, r7, #4
 1205 016c 1A88     		ldrh	r2, [r3]
 1206 016e 264B     		ldr	r3, .L65+32
 1207 0170 9A42     		cmp	r2, r3
 1208 0172 0ED8     		bhi	.L62
 276:.\main.c      ****     {
 277:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1209              		.loc 1 277 0 is_stmt 1
 1210 0174 FC1D     		add	r4, r7, #7
 1211 0176 3968     		ldr	r1, [r7]
 1212 0178 FB1D     		add	r3, r7, #7
 1213 017a 1A78     		ldrb	r2, [r3]
 1214 017c BB1D     		add	r3, r7, #6
 1215 017e 1B78     		ldrb	r3, [r3]
 1216 0180 081C     		mov	r0, r1
 1217 0182 111C     		mov	r1, r2
 1218 0184 1A1C     		mov	r2, r3
 1219 0186 3223     		mov	r3, #50
 1220 0188 FFF7FEFF 		bl	check_update
 1221 018c 031C     		mov	r3, r0
 1222 018e 2370     		strb	r3, [r4]
 1223 0190 24E0     		b	.L55
 1224              	.L62:
 278:.\main.c      ****     }
 279:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1225              		.loc 1 279 0
 1226 0192 3B1D     		add	r3, r7, #4
 1227 0194 1A88     		ldrh	r2, [r3]
 1228 0196 1C4B     		ldr	r3, .L65+32
 1229 0198 9A42     		cmp	r2, r3
 1230 019a 14D9     		bls	.L63
 1231              		.loc 1 279 0 is_stmt 0 discriminator 1
 1232 019c 3B1D     		add	r3, r7, #4
 1233 019e 1A88     		ldrh	r2, [r3]
 1234 01a0 FA23     		mov	r3, #250
 1235 01a2 DB00     		lsl	r3, r3, #3
 1236 01a4 9A42     		cmp	r2, r3
 1237 01a6 0ED8     		bhi	.L63
 280:.\main.c      ****     {
 281:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1238              		.loc 1 281 0 is_stmt 1
 1239 01a8 FC1D     		add	r4, r7, #7
 1240 01aa 3968     		ldr	r1, [r7]
 1241 01ac FB1D     		add	r3, r7, #7
 1242 01ae 1A78     		ldrb	r2, [r3]
 1243 01b0 BB1D     		add	r3, r7, #6
 1244 01b2 1B78     		ldrb	r3, [r3]
 1245 01b4 081C     		mov	r0, r1
 1246 01b6 111C     		mov	r1, r2
 1247 01b8 1A1C     		mov	r2, r3
 1248 01ba 6423     		mov	r3, #100
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 28


 1249 01bc FFF7FEFF 		bl	check_update
 1250 01c0 031C     		mov	r3, r0
 1251 01c2 2370     		strb	r3, [r4]
 1252 01c4 0AE0     		b	.L55
 1253              	.L63:
 282:.\main.c      ****     }
 283:.\main.c      ****     else
 284:.\main.c      ****     {
 285:.\main.c      ****         //throw error
 286:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1254              		.loc 1 286 0
 1255 01c6 FC1D     		add	r4, r7, #7
 1256 01c8 FB1D     		add	r3, r7, #7
 1257 01ca 1A78     		ldrb	r2, [r3]
 1258 01cc BB1D     		add	r3, r7, #6
 1259 01ce 1B78     		ldrb	r3, [r3]
 1260 01d0 101C     		mov	r0, r2
 1261 01d2 191C     		mov	r1, r3
 1262 01d4 FFF7FEFF 		bl	maintain_array
 1263 01d8 031C     		mov	r3, r0
 1264 01da 2370     		strb	r3, [r4]
 1265              	.L55:
 287:.\main.c      ****     }
 288:.\main.c      ****     return cur_pos;
 1266              		.loc 1 288 0
 1267 01dc FB1D     		add	r3, r7, #7
 1268 01de 1B78     		ldrb	r3, [r3]
 289:.\main.c      **** }
 1269              		.loc 1 289 0
 1270 01e0 181C     		mov	r0, r3
 1271 01e2 BD46     		mov	sp, r7
 1272 01e4 03B0     		add	sp, sp, #12
 1273              		@ sp needed
 1274 01e6 90BD     		pop	{r4, r7, pc}
 1275              	.L66:
 1276              		.align	2
 1277              	.L65:
 1278 01e8 E7030000 		.word	999
 1279 01ec 64040000 		.word	1124
 1280 01f0 E1040000 		.word	1249
 1281 01f4 5E050000 		.word	1374
 1282 01f8 D1050000 		.word	1489
 1283 01fc E6050000 		.word	1510
 1284 0200 59060000 		.word	1625
 1285 0204 D6060000 		.word	1750
 1286 0208 53070000 		.word	1875
 1287              		.cfi_endproc
 1288              	.LFE40:
 1289              		.size	pos_to_vel, .-pos_to_vel
 1290              		.section	.text.make_command,"ax",%progbits
 1291              		.align	2
 1292              		.global	make_command
 1293              		.code	16
 1294              		.thumb_func
 1295              		.type	make_command, %function
 1296              	make_command:
 1297              	.LFB41:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 29


 290:.\main.c      **** 
 291:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 292:.\main.c      **** {
 1298              		.loc 1 292 0
 1299              		.cfi_startproc
 1300 0000 80B5     		push	{r7, lr}
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 84B0     		sub	sp, sp, #16
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              		.cfi_def_cfa_register 7
 1308 0006 7860     		str	r0, [r7, #4]
 1309 0008 FB1C     		add	r3, r7, #3
 1310 000a 1970     		strb	r1, [r3]
 1311 000c BB1C     		add	r3, r7, #2
 1312 000e 1A70     		strb	r2, [r3]
 293:.\main.c      ****     uint16 command;
 294:.\main.c      ****     int16 temp1;
 295:.\main.c      ****     int16 temp2;
 296:.\main.c      ****     int16 temp3;
 297:.\main.c      ****     
 298:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1313              		.loc 1 298 0
 1314 0010 FB1C     		add	r3, r7, #3
 1315 0012 1B78     		ldrb	r3, [r3]
 1316 0014 7A68     		ldr	r2, [r7, #4]
 1317 0016 D318     		add	r3, r2, r3
 1318 0018 1B78     		ldrb	r3, [r3]
 1319 001a 5BB2     		sxtb	r3, r3
 1320 001c 1A02     		lsl	r2, r3, #8
 1321 001e 3B1C     		mov	r3, r7
 1322 0020 0E33     		add	r3, r3, #14
 1323 0022 1A80     		strh	r2, [r3]
 299:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1324              		.loc 1 299 0
 1325 0024 BB1C     		add	r3, r7, #2
 1326 0026 1B78     		ldrb	r3, [r3]
 1327 0028 7A68     		ldr	r2, [r7, #4]
 1328 002a D318     		add	r3, r2, r3
 1329 002c 1B78     		ldrb	r3, [r3]
 1330 002e 5BB2     		sxtb	r3, r3
 1331 0030 9AB2     		uxth	r2, r3
 1332 0032 3B1C     		mov	r3, r7
 1333 0034 0C33     		add	r3, r3, #12
 1334 0036 111C     		add	r1, r2, #0
 1335 0038 FF22     		mov	r2, #255
 1336 003a 0A40     		and	r2, r1
 1337 003c 1A80     		strh	r2, [r3]
 300:.\main.c      ****     temp3 = temp1 | temp2;
 1338              		.loc 1 300 0
 1339 003e 3B1C     		mov	r3, r7
 1340 0040 0A33     		add	r3, r3, #10
 1341 0042 391C     		mov	r1, r7
 1342 0044 0E31     		add	r1, r1, #14
 1343 0046 3A1C     		mov	r2, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 30


 1344 0048 0C32     		add	r2, r2, #12
 1345 004a 0988     		ldrh	r1, [r1]
 1346 004c 1288     		ldrh	r2, [r2]
 1347 004e 0A43     		orr	r2, r1
 1348 0050 1A80     		strh	r2, [r3]
 301:.\main.c      ****     command = (temp3/2) + 1500;
 1349              		.loc 1 301 0
 1350 0052 3B1C     		mov	r3, r7
 1351 0054 0A33     		add	r3, r3, #10
 1352 0056 0021     		mov	r1, #0
 1353 0058 5B5E     		ldrsh	r3, [r3, r1]
 1354 005a 002B     		cmp	r3, #0
 1355 005c 00DA     		bge	.L68
 1356 005e 0133     		add	r3, r3, #1
 1357              	.L68:
 1358 0060 5B10     		asr	r3, r3, #1
 1359 0062 9BB2     		uxth	r3, r3
 1360 0064 9AB2     		uxth	r2, r3
 1361 0066 3B1C     		mov	r3, r7
 1362 0068 0833     		add	r3, r3, #8
 1363 006a 0549     		ldr	r1, .L70
 1364 006c 5218     		add	r2, r2, r1
 1365 006e 1A80     		strh	r2, [r3]
 302:.\main.c      ****     return command;
 1366              		.loc 1 302 0
 1367 0070 3B1C     		mov	r3, r7
 1368 0072 0833     		add	r3, r3, #8
 1369 0074 1B88     		ldrh	r3, [r3]
 303:.\main.c      **** }
 1370              		.loc 1 303 0
 1371 0076 181C     		mov	r0, r3
 1372 0078 BD46     		mov	sp, r7
 1373 007a 04B0     		add	sp, sp, #16
 1374              		@ sp needed
 1375 007c 80BD     		pop	{r7, pc}
 1376              	.L71:
 1377 007e C046     		.align	2
 1378              	.L70:
 1379 0080 DC050000 		.word	1500
 1380              		.cfi_endproc
 1381              	.LFE41:
 1382              		.size	make_command, .-make_command
 1383              		.section	.text.potFeedback,"ax",%progbits
 1384              		.align	2
 1385              		.global	potFeedback
 1386              		.code	16
 1387              		.thumb_func
 1388              		.type	potFeedback, %function
 1389              	potFeedback:
 1390              	.LFB42:
 304:.\main.c      **** 
 305:.\main.c      **** uint16 potFeedback(uint32 channel)
 306:.\main.c      **** {
 1391              		.loc 1 306 0
 1392              		.cfi_startproc
 1393 0000 80B5     		push	{r7, lr}
 1394              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 31


 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397 0002 84B0     		sub	sp, sp, #16
 1398              		.cfi_def_cfa_offset 24
 1399 0004 00AF     		add	r7, sp, #0
 1400              		.cfi_def_cfa_register 7
 1401 0006 7860     		str	r0, [r7, #4]
 307:.\main.c      ****     //TODO: uncomment this section
 308:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1402              		.loc 1 308 0
 1403 0008 7B68     		ldr	r3, [r7, #4]
 1404 000a 181C     		mov	r0, r3
 1405 000c FFF7FEFF 		bl	ADC_GetResult16
 1406 0010 031C     		mov	r3, r0
 1407 0012 1A1C     		mov	r2, r3
 1408 0014 3B1C     		mov	r3, r7
 1409 0016 0E33     		add	r3, r3, #14
 1410 0018 1A80     		strh	r2, [r3]
 309:.\main.c      ****     //uint16 feedback = 500;
 310:.\main.c      ****     return feedback;
 1411              		.loc 1 310 0
 1412 001a 3B1C     		mov	r3, r7
 1413 001c 0E33     		add	r3, r3, #14
 1414 001e 1B88     		ldrh	r3, [r3]
 311:.\main.c      **** }
 1415              		.loc 1 311 0
 1416 0020 181C     		mov	r0, r3
 1417 0022 BD46     		mov	sp, r7
 1418 0024 04B0     		add	sp, sp, #16
 1419              		@ sp needed
 1420 0026 80BD     		pop	{r7, pc}
 1421              		.cfi_endproc
 1422              	.LFE42:
 1423              		.size	potFeedback, .-potFeedback
 1424              		.section	.text.send_packet,"ax",%progbits
 1425              		.align	2
 1426              		.global	send_packet
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	send_packet, %function
 1430              	send_packet:
 1431              	.LFB43:
 312:.\main.c      **** 
 313:.\main.c      **** void send_packet(uint8 heart_beat)
 314:.\main.c      **** {
 1432              		.loc 1 314 0
 1433              		.cfi_startproc
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 82B0     		sub	sp, sp, #8
 1439              		.cfi_def_cfa_offset 16
 1440 0004 00AF     		add	r7, sp, #0
 1441              		.cfi_def_cfa_register 7
 1442 0006 021C     		mov	r2, r0
 1443 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 32


 1444 000a 1A70     		strb	r2, [r3]
 315:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 316:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 317:.\main.c      ****     //TODO define system state
 318:.\main.c      ****     //send packet via serial to wiznet
 319:.\main.c      ****     
 320:.\main.c      ****     if(heart_beat){
 1445              		.loc 1 320 0
 1446 000c FB1D     		add	r3, r7, #7
 1447 000e 1B78     		ldrb	r3, [r3]
 1448 0010 002B     		cmp	r3, #0
 1449 0012 32D0     		beq	.L75
 321:.\main.c      ****         feedback_array[0] = 7;
 1450              		.loc 1 321 0
 1451 0014 3A4B     		ldr	r3, .L78
 1452 0016 0722     		mov	r2, #7
 1453 0018 1A70     		strb	r2, [r3]
 322:.\main.c      ****         feedback_array[1] = 7;
 1454              		.loc 1 322 0
 1455 001a 394B     		ldr	r3, .L78
 1456 001c 0722     		mov	r2, #7
 1457 001e 5A70     		strb	r2, [r3, #1]
 323:.\main.c      ****         feedback_array[2] = 7;
 1458              		.loc 1 323 0
 1459 0020 374B     		ldr	r3, .L78
 1460 0022 0722     		mov	r2, #7
 1461 0024 9A70     		strb	r2, [r3, #2]
 324:.\main.c      ****         feedback_array[3] = 7;
 1462              		.loc 1 324 0
 1463 0026 364B     		ldr	r3, .L78
 1464 0028 0722     		mov	r2, #7
 1465 002a DA70     		strb	r2, [r3, #3]
 325:.\main.c      ****         feedback_array[4] = 7;
 1466              		.loc 1 325 0
 1467 002c 344B     		ldr	r3, .L78
 1468 002e 0722     		mov	r2, #7
 1469 0030 1A71     		strb	r2, [r3, #4]
 326:.\main.c      ****         feedback_array[5] = 7;
 1470              		.loc 1 326 0
 1471 0032 334B     		ldr	r3, .L78
 1472 0034 0722     		mov	r2, #7
 1473 0036 5A71     		strb	r2, [r3, #5]
 327:.\main.c      ****         feedback_array[6] = 7;
 1474              		.loc 1 327 0
 1475 0038 314B     		ldr	r3, .L78
 1476 003a 0722     		mov	r2, #7
 1477 003c 9A71     		strb	r2, [r3, #6]
 328:.\main.c      ****         feedback_array[7] = 7;
 1478              		.loc 1 328 0
 1479 003e 304B     		ldr	r3, .L78
 1480 0040 0722     		mov	r2, #7
 1481 0042 DA71     		strb	r2, [r3, #7]
 329:.\main.c      ****         feedback_array[8] = 7;
 1482              		.loc 1 329 0
 1483 0044 2E4B     		ldr	r3, .L78
 1484 0046 0722     		mov	r2, #7
 1485 0048 1A72     		strb	r2, [r3, #8]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 33


 330:.\main.c      ****         feedback_array[9] = 7;
 1486              		.loc 1 330 0
 1487 004a 2D4B     		ldr	r3, .L78
 1488 004c 0722     		mov	r2, #7
 1489 004e 5A72     		strb	r2, [r3, #9]
 331:.\main.c      ****         feedback_array[10] = 7;
 1490              		.loc 1 331 0
 1491 0050 2B4B     		ldr	r3, .L78
 1492 0052 0722     		mov	r2, #7
 1493 0054 9A72     		strb	r2, [r3, #10]
 332:.\main.c      ****         feedback_array[11] = 7;
 1494              		.loc 1 332 0
 1495 0056 2A4B     		ldr	r3, .L78
 1496 0058 0722     		mov	r2, #7
 1497 005a DA72     		strb	r2, [r3, #11]
 333:.\main.c      ****         feedback_array[12] = 7;
 1498              		.loc 1 333 0
 1499 005c 284B     		ldr	r3, .L78
 1500 005e 0722     		mov	r2, #7
 1501 0060 1A73     		strb	r2, [r3, #12]
 334:.\main.c      ****         feedback_array[13] = 0xee;
 1502              		.loc 1 334 0
 1503 0062 274B     		ldr	r3, .L78
 1504 0064 EE22     		mov	r2, #238
 1505 0066 5A73     		strb	r2, [r3, #13]
 335:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1506              		.loc 1 335 0
 1507 0068 254B     		ldr	r3, .L78
 1508 006a 181C     		mov	r0, r3
 1509 006c 0E21     		mov	r1, #14
 1510 006e FFF7FEFF 		bl	wiznetWriteUdpFrame
 336:.\main.c      ****         LED_Write(1);
 1511              		.loc 1 336 0
 1512 0072 0120     		mov	r0, #1
 1513 0074 FFF7FEFF 		bl	LED_Write
 1514 0078 31E0     		b	.L76
 1515              	.L75:
 337:.\main.c      ****     }
 338:.\main.c      ****     else{
 339:.\main.c      ****         feedback_array[0] = 7;      // ph value
 1516              		.loc 1 339 0
 1517 007a 214B     		ldr	r3, .L78
 1518 007c 0722     		mov	r2, #7
 1519 007e 1A70     		strb	r2, [r3]
 340:.\main.c      ****         feedback_array[1] = 7;      // humidity
 1520              		.loc 1 340 0
 1521 0080 1F4B     		ldr	r3, .L78
 1522 0082 0722     		mov	r2, #7
 1523 0084 5A70     		strb	r2, [r3, #1]
 341:.\main.c      ****         feedback_array[2] = 7;      // wrist rotate temperature
 1524              		.loc 1 341 0
 1525 0086 1E4B     		ldr	r3, .L78
 1526 0088 0722     		mov	r2, #7
 1527 008a 9A70     		strb	r2, [r3, #2]
 342:.\main.c      ****         feedback_array[3] = 7;      // wrist rotate position
 1528              		.loc 1 342 0
 1529 008c 1C4B     		ldr	r3, .L78
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 34


 1530 008e 0722     		mov	r2, #7
 1531 0090 DA70     		strb	r2, [r3, #3]
 343:.\main.c      ****         feedback_array[4] = 7;      // wrist rotate error status
 1532              		.loc 1 343 0
 1533 0092 1B4B     		ldr	r3, .L78
 1534 0094 0722     		mov	r2, #7
 1535 0096 1A71     		strb	r2, [r3, #4]
 344:.\main.c      ****         feedback_array[5] = 7;      // wrist tilt temperature
 1536              		.loc 1 344 0
 1537 0098 194B     		ldr	r3, .L78
 1538 009a 0722     		mov	r2, #7
 1539 009c 5A71     		strb	r2, [r3, #5]
 345:.\main.c      ****         feedback_array[6] = 7;      // wrist tilt position
 1540              		.loc 1 345 0
 1541 009e 184B     		ldr	r3, .L78
 1542 00a0 0722     		mov	r2, #7
 1543 00a2 9A71     		strb	r2, [r3, #6]
 346:.\main.c      ****         feedback_array[7] = 7;      // wrist tilt error statue
 1544              		.loc 1 346 0
 1545 00a4 164B     		ldr	r3, .L78
 1546 00a6 0722     		mov	r2, #7
 1547 00a8 DA71     		strb	r2, [r3, #7]
 347:.\main.c      ****         feedback_array[8] = 7;      // elbow stop switch count
 1548              		.loc 1 347 0
 1549 00aa 154B     		ldr	r3, .L78
 1550 00ac 0722     		mov	r2, #7
 1551 00ae 1A72     		strb	r2, [r3, #8]
 348:.\main.c      ****         feedback_array[9] = 7;      // elbow pot value
 1552              		.loc 1 348 0
 1553 00b0 134B     		ldr	r3, .L78
 1554 00b2 0722     		mov	r2, #7
 1555 00b4 5A72     		strb	r2, [r3, #9]
 349:.\main.c      ****         feedback_array[10] = 7;      // shoulder stop swtich count
 1556              		.loc 1 349 0
 1557 00b6 124B     		ldr	r3, .L78
 1558 00b8 0722     		mov	r2, #7
 1559 00ba 9A72     		strb	r2, [r3, #10]
 350:.\main.c      ****         feedback_array[11] = 7;      // shoulder pot value
 1560              		.loc 1 350 0
 1561 00bc 104B     		ldr	r3, .L78
 1562 00be 0722     		mov	r2, #7
 1563 00c0 DA72     		strb	r2, [r3, #11]
 351:.\main.c      ****         feedback_array[12] = 7;      // turret error status
 1564              		.loc 1 351 0
 1565 00c2 0F4B     		ldr	r3, .L78
 1566 00c4 0722     		mov	r2, #7
 1567 00c6 1A73     		strb	r2, [r3, #12]
 352:.\main.c      ****         feedback_array[13] = 0xff;       
 1568              		.loc 1 352 0
 1569 00c8 0D4B     		ldr	r3, .L78
 1570 00ca FF22     		mov	r2, #255
 1571 00cc 5A73     		strb	r2, [r3, #13]
 353:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1572              		.loc 1 353 0
 1573 00ce 0C4B     		ldr	r3, .L78
 1574 00d0 181C     		mov	r0, r3
 1575 00d2 0E21     		mov	r1, #14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 35


 1576 00d4 FFF7FEFF 		bl	wiznetWriteUdpFrame
 354:.\main.c      ****         LED_Write(1);
 1577              		.loc 1 354 0
 1578 00d8 0120     		mov	r0, #1
 1579 00da FFF7FEFF 		bl	LED_Write
 1580              	.L76:
 355:.\main.c      ****     }
 356:.\main.c      ****     wiznetSend();
 1581              		.loc 1 356 0
 1582 00de FFF7FEFF 		bl	wiznetSend
 357:.\main.c      ****     while(WIZ_INT_Read() == 1);
 1583              		.loc 1 357 0
 1584 00e2 C046     		mov	r8, r8
 1585              	.L77:
 1586              		.loc 1 357 0 is_stmt 0 discriminator 1
 1587 00e4 FFF7FEFF 		bl	WIZ_INT_Read
 1588 00e8 031C     		mov	r3, r0
 1589 00ea 012B     		cmp	r3, #1
 1590 00ec FAD0     		beq	.L77
 358:.\main.c      ****     wiznetClearInterrupts();
 1591              		.loc 1 358 0 is_stmt 1
 1592 00ee FFF7FEFF 		bl	wiznetClearInterrupts
 359:.\main.c      ****     LED_Write(0);    
 1593              		.loc 1 359 0
 1594 00f2 0020     		mov	r0, #0
 1595 00f4 FFF7FEFF 		bl	LED_Write
 360:.\main.c      **** }
 1596              		.loc 1 360 0
 1597 00f8 BD46     		mov	sp, r7
 1598 00fa 02B0     		add	sp, sp, #8
 1599              		@ sp needed
 1600 00fc 80BD     		pop	{r7, pc}
 1601              	.L79:
 1602 00fe C046     		.align	2
 1603              	.L78:
 1604 0100 00000000 		.word	feedback_array
 1605              		.cfi_endproc
 1606              	.LFE43:
 1607              		.size	send_packet, .-send_packet
 1608              		.section	.text.fill_data_array,"ax",%progbits
 1609              		.align	2
 1610              		.global	fill_data_array
 1611              		.code	16
 1612              		.thumb_func
 1613              		.type	fill_data_array, %function
 1614              	fill_data_array:
 1615              	.LFB44:
 361:.\main.c      **** 
 362:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 363:.\main.c      **** void fill_data_array()
 364:.\main.c      **** {
 1616              		.loc 1 364 0
 1617              		.cfi_startproc
 1618 0000 80B5     		push	{r7, lr}
 1619              		.cfi_def_cfa_offset 8
 1620              		.cfi_offset 7, -8
 1621              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 36


 1622 0002 00AF     		add	r7, sp, #0
 1623              		.cfi_def_cfa_register 7
 365:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1624              		.loc 1 365 0
 1625 0004 034B     		ldr	r3, .L81
 1626 0006 181C     		mov	r0, r3
 1627 0008 1621     		mov	r1, #22
 1628 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 366:.\main.c      **** //    uint8 i = 0;
 367:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 368:.\main.c      **** //    {
 369:.\main.c      **** //        data_array[i] = test_array[i];
 370:.\main.c      **** //    }
 371:.\main.c      **** }
 1629              		.loc 1 371 0
 1630 000e BD46     		mov	sp, r7
 1631              		@ sp needed
 1632 0010 80BD     		pop	{r7, pc}
 1633              	.L82:
 1634 0012 C046     		.align	2
 1635              	.L81:
 1636 0014 00000000 		.word	data_array
 1637              		.cfi_endproc
 1638              	.LFE44:
 1639              		.size	fill_data_array, .-fill_data_array
 1640              		.section	.text.ServoGoalPosition,"ax",%progbits
 1641              		.align	2
 1642              		.global	ServoGoalPosition
 1643              		.code	16
 1644              		.thumb_func
 1645              		.type	ServoGoalPosition, %function
 1646              	ServoGoalPosition:
 1647              	.LFB45:
 372:.\main.c      **** 
 373:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 374:.\main.c      **** {
 1648              		.loc 1 374 0
 1649              		.cfi_startproc
 1650 0000 80B5     		push	{r7, lr}
 1651              		.cfi_def_cfa_offset 8
 1652              		.cfi_offset 7, -8
 1653              		.cfi_offset 14, -4
 1654 0002 86B0     		sub	sp, sp, #24
 1655              		.cfi_def_cfa_offset 32
 1656 0004 00AF     		add	r7, sp, #0
 1657              		.cfi_def_cfa_register 7
 1658 0006 0A1C     		mov	r2, r1
 1659 0008 FB1D     		add	r3, r7, #7
 1660 000a 011C     		add	r1, r0, #0
 1661 000c 1970     		strb	r1, [r3]
 1662 000e 3B1D     		add	r3, r7, #4
 1663 0010 1A80     		strh	r2, [r3]
 375:.\main.c      ****     uint8 array[9];
 376:.\main.c      ****     
 377:.\main.c      ****     array[0] = 0xFF;
 1664              		.loc 1 377 0
 1665 0012 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 37


 1666 0014 0C33     		add	r3, r3, #12
 1667 0016 FF22     		mov	r2, #255
 1668 0018 1A70     		strb	r2, [r3]
 378:.\main.c      ****     array[1] = 0xFF;
 1669              		.loc 1 378 0
 1670 001a 3B1C     		mov	r3, r7
 1671 001c 0C33     		add	r3, r3, #12
 1672 001e FF22     		mov	r2, #255
 1673 0020 5A70     		strb	r2, [r3, #1]
 379:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1674              		.loc 1 379 0
 1675 0022 3B1C     		mov	r3, r7
 1676 0024 0C33     		add	r3, r3, #12
 1677 0026 FA1D     		add	r2, r7, #7
 1678 0028 1278     		ldrb	r2, [r2]
 1679 002a 9A70     		strb	r2, [r3, #2]
 380:.\main.c      ****     array[3] = 0x05;
 1680              		.loc 1 380 0
 1681 002c 3B1C     		mov	r3, r7
 1682 002e 0C33     		add	r3, r3, #12
 1683 0030 0522     		mov	r2, #5
 1684 0032 DA70     		strb	r2, [r3, #3]
 381:.\main.c      ****     array[4] = 0x03; //write instruction
 1685              		.loc 1 381 0
 1686 0034 3B1C     		mov	r3, r7
 1687 0036 0C33     		add	r3, r3, #12
 1688 0038 0322     		mov	r2, #3
 1689 003a 1A71     		strb	r2, [r3, #4]
 382:.\main.c      ****     array[5] = 0x1E;
 1690              		.loc 1 382 0
 1691 003c 3B1C     		mov	r3, r7
 1692 003e 0C33     		add	r3, r3, #12
 1693 0040 1E22     		mov	r2, #30
 1694 0042 5A71     		strb	r2, [r3, #5]
 383:.\main.c      ****     array[6] = position;
 1695              		.loc 1 383 0
 1696 0044 3B1D     		add	r3, r7, #4
 1697 0046 1B88     		ldrh	r3, [r3]
 1698 0048 DAB2     		uxtb	r2, r3
 1699 004a 3B1C     		mov	r3, r7
 1700 004c 0C33     		add	r3, r3, #12
 1701 004e 9A71     		strb	r2, [r3, #6]
 384:.\main.c      ****     array[7] = position >> 8;
 1702              		.loc 1 384 0
 1703 0050 3B1D     		add	r3, r7, #4
 1704 0052 1B88     		ldrh	r3, [r3]
 1705 0054 1B0A     		lsr	r3, r3, #8
 1706 0056 9BB2     		uxth	r3, r3
 1707 0058 DAB2     		uxtb	r2, r3
 1708 005a 3B1C     		mov	r3, r7
 1709 005c 0C33     		add	r3, r3, #12
 1710 005e DA71     		strb	r2, [r3, #7]
 385:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1711              		.loc 1 385 0
 1712 0060 3B1C     		mov	r3, r7
 1713 0062 0C33     		add	r3, r3, #12
 1714 0064 9A79     		ldrb	r2, [r3, #6]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 38


 1715 0066 FB1D     		add	r3, r7, #7
 1716 0068 1B78     		ldrb	r3, [r3]
 1717 006a D318     		add	r3, r2, r3
 1718 006c DAB2     		uxtb	r2, r3
 1719 006e 3B1C     		mov	r3, r7
 1720 0070 0C33     		add	r3, r3, #12
 1721 0072 DB79     		ldrb	r3, [r3, #7]
 1722 0074 D318     		add	r3, r2, r3
 1723 0076 DBB2     		uxtb	r3, r3
 1724 0078 2633     		add	r3, r3, #38
 1725 007a DBB2     		uxtb	r3, r3
 1726 007c DB43     		mvn	r3, r3
 1727 007e DAB2     		uxtb	r2, r3
 1728 0080 3B1C     		mov	r3, r7
 1729 0082 0C33     		add	r3, r3, #12
 1730 0084 1A72     		strb	r2, [r3, #8]
 386:.\main.c      ****     
 387:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1731              		.loc 1 387 0
 1732 0086 3B1C     		mov	r3, r7
 1733 0088 0C33     		add	r3, r3, #12
 1734 008a 181C     		mov	r0, r3
 1735 008c 0921     		mov	r1, #9
 1736 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 388:.\main.c      **** }
 1737              		.loc 1 388 0
 1738 0092 BD46     		mov	sp, r7
 1739 0094 06B0     		add	sp, sp, #24
 1740              		@ sp needed
 1741 0096 80BD     		pop	{r7, pc}
 1742              		.cfi_endproc
 1743              	.LFE45:
 1744              		.size	ServoGoalPosition, .-ServoGoalPosition
 1745              		.section	.text.SetServoTorque,"ax",%progbits
 1746              		.align	2
 1747              		.global	SetServoTorque
 1748              		.code	16
 1749              		.thumb_func
 1750              		.type	SetServoTorque, %function
 1751              	SetServoTorque:
 1752              	.LFB46:
 389:.\main.c      **** 
 390:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 391:.\main.c      **** {
 1753              		.loc 1 391 0
 1754              		.cfi_startproc
 1755 0000 80B5     		push	{r7, lr}
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 86B0     		sub	sp, sp, #24
 1760              		.cfi_def_cfa_offset 32
 1761 0004 00AF     		add	r7, sp, #0
 1762              		.cfi_def_cfa_register 7
 1763 0006 0A1C     		mov	r2, r1
 1764 0008 FB1D     		add	r3, r7, #7
 1765 000a 011C     		add	r1, r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 39


 1766 000c 1970     		strb	r1, [r3]
 1767 000e 3B1D     		add	r3, r7, #4
 1768 0010 1A80     		strh	r2, [r3]
 392:.\main.c      ****     uint8 array[9];
 393:.\main.c      ****     
 394:.\main.c      ****     array[0] = 0xFF;
 1769              		.loc 1 394 0
 1770 0012 3B1C     		mov	r3, r7
 1771 0014 0C33     		add	r3, r3, #12
 1772 0016 FF22     		mov	r2, #255
 1773 0018 1A70     		strb	r2, [r3]
 395:.\main.c      ****     array[1] = 0xFF;
 1774              		.loc 1 395 0
 1775 001a 3B1C     		mov	r3, r7
 1776 001c 0C33     		add	r3, r3, #12
 1777 001e FF22     		mov	r2, #255
 1778 0020 5A70     		strb	r2, [r3, #1]
 396:.\main.c      ****     array[2] = servoID; 
 1779              		.loc 1 396 0
 1780 0022 3B1C     		mov	r3, r7
 1781 0024 0C33     		add	r3, r3, #12
 1782 0026 FA1D     		add	r2, r7, #7
 1783 0028 1278     		ldrb	r2, [r2]
 1784 002a 9A70     		strb	r2, [r3, #2]
 397:.\main.c      ****     array[3] = 0x05;
 1785              		.loc 1 397 0
 1786 002c 3B1C     		mov	r3, r7
 1787 002e 0C33     		add	r3, r3, #12
 1788 0030 0522     		mov	r2, #5
 1789 0032 DA70     		strb	r2, [r3, #3]
 398:.\main.c      ****     array[4] = 0x03; //write instruction
 1790              		.loc 1 398 0
 1791 0034 3B1C     		mov	r3, r7
 1792 0036 0C33     		add	r3, r3, #12
 1793 0038 0322     		mov	r2, #3
 1794 003a 1A71     		strb	r2, [r3, #4]
 399:.\main.c      ****     array[5] = 0x0E;
 1795              		.loc 1 399 0
 1796 003c 3B1C     		mov	r3, r7
 1797 003e 0C33     		add	r3, r3, #12
 1798 0040 0E22     		mov	r2, #14
 1799 0042 5A71     		strb	r2, [r3, #5]
 400:.\main.c      ****     array[6] = torque;
 1800              		.loc 1 400 0
 1801 0044 3B1D     		add	r3, r7, #4
 1802 0046 1B88     		ldrh	r3, [r3]
 1803 0048 DAB2     		uxtb	r2, r3
 1804 004a 3B1C     		mov	r3, r7
 1805 004c 0C33     		add	r3, r3, #12
 1806 004e 9A71     		strb	r2, [r3, #6]
 401:.\main.c      ****     array[7] = torque >> 8;
 1807              		.loc 1 401 0
 1808 0050 3B1D     		add	r3, r7, #4
 1809 0052 1B88     		ldrh	r3, [r3]
 1810 0054 1B0A     		lsr	r3, r3, #8
 1811 0056 9BB2     		uxth	r3, r3
 1812 0058 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 40


 1813 005a 3B1C     		mov	r3, r7
 1814 005c 0C33     		add	r3, r3, #12
 1815 005e DA71     		strb	r2, [r3, #7]
 402:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1816              		.loc 1 402 0
 1817 0060 3B1C     		mov	r3, r7
 1818 0062 0C33     		add	r3, r3, #12
 1819 0064 9A79     		ldrb	r2, [r3, #6]
 1820 0066 FB1D     		add	r3, r7, #7
 1821 0068 1B78     		ldrb	r3, [r3]
 1822 006a D318     		add	r3, r2, r3
 1823 006c DAB2     		uxtb	r2, r3
 1824 006e 3B1C     		mov	r3, r7
 1825 0070 0C33     		add	r3, r3, #12
 1826 0072 DB79     		ldrb	r3, [r3, #7]
 1827 0074 D318     		add	r3, r2, r3
 1828 0076 DBB2     		uxtb	r3, r3
 1829 0078 1633     		add	r3, r3, #22
 1830 007a DBB2     		uxtb	r3, r3
 1831 007c DB43     		mvn	r3, r3
 1832 007e DAB2     		uxtb	r2, r3
 1833 0080 3B1C     		mov	r3, r7
 1834 0082 0C33     		add	r3, r3, #12
 1835 0084 1A72     		strb	r2, [r3, #8]
 403:.\main.c      ****     
 404:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1836              		.loc 1 404 0
 1837 0086 3B1C     		mov	r3, r7
 1838 0088 0C33     		add	r3, r3, #12
 1839 008a 181C     		mov	r0, r3
 1840 008c 0921     		mov	r1, #9
 1841 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 405:.\main.c      ****     
 406:.\main.c      **** }    
 1842              		.loc 1 406 0
 1843 0092 BD46     		mov	sp, r7
 1844 0094 06B0     		add	sp, sp, #24
 1845              		@ sp needed
 1846 0096 80BD     		pop	{r7, pc}
 1847              		.cfi_endproc
 1848              	.LFE46:
 1849              		.size	SetServoTorque, .-SetServoTorque
 1850              		.section	.text.ServoSpeed,"ax",%progbits
 1851              		.align	2
 1852              		.global	ServoSpeed
 1853              		.code	16
 1854              		.thumb_func
 1855              		.type	ServoSpeed, %function
 1856              	ServoSpeed:
 1857              	.LFB47:
 407:.\main.c      **** 
 408:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 409:.\main.c      **** {
 1858              		.loc 1 409 0
 1859              		.cfi_startproc
 1860 0000 80B5     		push	{r7, lr}
 1861              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 41


 1862              		.cfi_offset 7, -8
 1863              		.cfi_offset 14, -4
 1864 0002 86B0     		sub	sp, sp, #24
 1865              		.cfi_def_cfa_offset 32
 1866 0004 00AF     		add	r7, sp, #0
 1867              		.cfi_def_cfa_register 7
 1868 0006 0A1C     		mov	r2, r1
 1869 0008 FB1D     		add	r3, r7, #7
 1870 000a 011C     		add	r1, r0, #0
 1871 000c 1970     		strb	r1, [r3]
 1872 000e 3B1D     		add	r3, r7, #4
 1873 0010 1A80     		strh	r2, [r3]
 410:.\main.c      ****     uint8 array[9];
 411:.\main.c      ****     
 412:.\main.c      ****     array[0] = 0xFF;
 1874              		.loc 1 412 0
 1875 0012 3B1C     		mov	r3, r7
 1876 0014 0C33     		add	r3, r3, #12
 1877 0016 FF22     		mov	r2, #255
 1878 0018 1A70     		strb	r2, [r3]
 413:.\main.c      ****     array[1] = 0xFF;
 1879              		.loc 1 413 0
 1880 001a 3B1C     		mov	r3, r7
 1881 001c 0C33     		add	r3, r3, #12
 1882 001e FF22     		mov	r2, #255
 1883 0020 5A70     		strb	r2, [r3, #1]
 414:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1884              		.loc 1 414 0
 1885 0022 3B1C     		mov	r3, r7
 1886 0024 0C33     		add	r3, r3, #12
 1887 0026 FA1D     		add	r2, r7, #7
 1888 0028 1278     		ldrb	r2, [r2]
 1889 002a 9A70     		strb	r2, [r3, #2]
 415:.\main.c      ****     array[3] = 0x05;
 1890              		.loc 1 415 0
 1891 002c 3B1C     		mov	r3, r7
 1892 002e 0C33     		add	r3, r3, #12
 1893 0030 0522     		mov	r2, #5
 1894 0032 DA70     		strb	r2, [r3, #3]
 416:.\main.c      ****     array[4] = 0x03; //write instruction
 1895              		.loc 1 416 0
 1896 0034 3B1C     		mov	r3, r7
 1897 0036 0C33     		add	r3, r3, #12
 1898 0038 0322     		mov	r2, #3
 1899 003a 1A71     		strb	r2, [r3, #4]
 417:.\main.c      ****     array[5] = 0x20;
 1900              		.loc 1 417 0
 1901 003c 3B1C     		mov	r3, r7
 1902 003e 0C33     		add	r3, r3, #12
 1903 0040 2022     		mov	r2, #32
 1904 0042 5A71     		strb	r2, [r3, #5]
 418:.\main.c      ****     array[6] = speed;
 1905              		.loc 1 418 0
 1906 0044 3B1D     		add	r3, r7, #4
 1907 0046 1B88     		ldrh	r3, [r3]
 1908 0048 DAB2     		uxtb	r2, r3
 1909 004a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 42


 1910 004c 0C33     		add	r3, r3, #12
 1911 004e 9A71     		strb	r2, [r3, #6]
 419:.\main.c      ****     array[7] = speed >> 8;
 1912              		.loc 1 419 0
 1913 0050 3B1D     		add	r3, r7, #4
 1914 0052 1B88     		ldrh	r3, [r3]
 1915 0054 1B0A     		lsr	r3, r3, #8
 1916 0056 9BB2     		uxth	r3, r3
 1917 0058 DAB2     		uxtb	r2, r3
 1918 005a 3B1C     		mov	r3, r7
 1919 005c 0C33     		add	r3, r3, #12
 1920 005e DA71     		strb	r2, [r3, #7]
 420:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1921              		.loc 1 420 0
 1922 0060 3B1C     		mov	r3, r7
 1923 0062 0C33     		add	r3, r3, #12
 1924 0064 9A79     		ldrb	r2, [r3, #6]
 1925 0066 FB1D     		add	r3, r7, #7
 1926 0068 1B78     		ldrb	r3, [r3]
 1927 006a D318     		add	r3, r2, r3
 1928 006c DAB2     		uxtb	r2, r3
 1929 006e 3B1C     		mov	r3, r7
 1930 0070 0C33     		add	r3, r3, #12
 1931 0072 DB79     		ldrb	r3, [r3, #7]
 1932 0074 D318     		add	r3, r2, r3
 1933 0076 DBB2     		uxtb	r3, r3
 1934 0078 2833     		add	r3, r3, #40
 1935 007a DBB2     		uxtb	r3, r3
 1936 007c DB43     		mvn	r3, r3
 1937 007e DAB2     		uxtb	r2, r3
 1938 0080 3B1C     		mov	r3, r7
 1939 0082 0C33     		add	r3, r3, #12
 1940 0084 1A72     		strb	r2, [r3, #8]
 421:.\main.c      ****     
 422:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1941              		.loc 1 422 0
 1942 0086 3B1C     		mov	r3, r7
 1943 0088 0C33     		add	r3, r3, #12
 1944 008a 181C     		mov	r0, r3
 1945 008c 0921     		mov	r1, #9
 1946 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 423:.\main.c      ****     
 424:.\main.c      **** }
 1947              		.loc 1 424 0
 1948 0092 BD46     		mov	sp, r7
 1949 0094 06B0     		add	sp, sp, #24
 1950              		@ sp needed
 1951 0096 80BD     		pop	{r7, pc}
 1952              		.cfi_endproc
 1953              	.LFE47:
 1954              		.size	ServoSpeed, .-ServoSpeed
 1955              		.comm	wristTilt_state,1,1
 1956              		.section	.text.wristTilt,"ax",%progbits
 1957              		.align	2
 1958              		.global	wristTilt
 1959              		.code	16
 1960              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 43


 1961              		.type	wristTilt, %function
 1962              	wristTilt:
 1963              	.LFB48:
 425:.\main.c      **** 
 426:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 427:.\main.c      **** //control the tilting motion of the wrist
 428:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 429:.\main.c      **** {
 1964              		.loc 1 429 0
 1965              		.cfi_startproc
 1966 0000 90B5     		push	{r4, r7, lr}
 1967              		.cfi_def_cfa_offset 12
 1968              		.cfi_offset 4, -12
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 85B0     		sub	sp, sp, #20
 1972              		.cfi_def_cfa_offset 32
 1973 0004 00AF     		add	r7, sp, #0
 1974              		.cfi_def_cfa_register 7
 1975 0006 021C     		mov	r2, r0
 1976 0008 3960     		str	r1, [r7]
 1977 000a FB1D     		add	r3, r7, #7
 1978 000c 1A70     		strb	r2, [r3]
 430:.\main.c      ****     // Overview
 431:.\main.c      ****     //take instruction from data_array
 432:.\main.c      ****     //smooth input
 433:.\main.c      ****     //actuate the tilting using UART
 434:.\main.c      ****     //get feedback
 435:.\main.c      **** 
 436:.\main.c      ****     //-------------------------- 
 437:.\main.c      ****     // Dynamixel Servo specific
 438:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 439:.\main.c      ****     // TODO: Set the desired position
 440:.\main.c      **** 
 441:.\main.c      ****     //--------------------------
 442:.\main.c      ****     // State machine
 443:.\main.c      ****     
 444:.\main.c      ****     uint8 i;
 445:.\main.c      ****     uint16 avg;
 446:.\main.c      ****     uint16 command;
 447:.\main.c      ****     
 448:.\main.c      ****     switch(wristTilt_state){ //actions
 1979              		.loc 1 448 0
 1980 000e 524B     		ldr	r3, .L112
 1981 0010 1B78     		ldrb	r3, [r3]
 1982 0012 012B     		cmp	r3, #1
 1983 0014 03D0     		beq	.L88
 1984 0016 6BDD     		ble	.L110
 1985 0018 022B     		cmp	r3, #2
 1986 001a 22D0     		beq	.L91
 449:.\main.c      ****         case tilt_start:
 450:.\main.c      ****             break;
 451:.\main.c      **** 
 452:.\main.c      ****         case tilt_init:
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 454:.\main.c      ****             {
 455:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 44


 456:.\main.c      ****             }
 457:.\main.c      ****             WT_arr_cspot = 0;
 458:.\main.c      ****             
 459:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 460:.\main.c      ****             break;
 461:.\main.c      **** 
 462:.\main.c      ****         case tilt_control:
 463:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 464:.\main.c      ****             
 465:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 466:.\main.c      ****             
 467:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 468:.\main.c      ****             {
 469:.\main.c      ****                 WT_arr_cspot++;
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 WT_arr_cspot = 0;
 474:.\main.c      ****             }
 475:.\main.c      ****             
 476:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 477:.\main.c      ****             
 478:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 479:.\main.c      ****             
 480:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 481:.\main.c      ****             {
 482:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 483:.\main.c      ****             }
 484:.\main.c      ****             else
 485:.\main.c      ****             {
 486:.\main.c      ****                 //throw error
 487:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 488:.\main.c      ****             }
 489:.\main.c      ****             WT_FLAG = 0;
 490:.\main.c      ****             break;
 491:.\main.c      ****             
 492:.\main.c      ****         case tilt_wait:
 493:.\main.c      ****             break;
 1987              		.loc 1 493 0
 1988 001c 69E0     		b	.L87
 1989              	.L88:
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1990              		.loc 1 453 0
 1991 001e 3B1C     		mov	r3, r7
 1992 0020 0F33     		add	r3, r3, #15
 1993 0022 0022     		mov	r2, #0
 1994 0024 1A70     		strb	r2, [r3]
 1995 0026 0EE0     		b	.L93
 1996              	.L94:
 455:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1997              		.loc 1 455 0 discriminator 2
 1998 0028 3B1C     		mov	r3, r7
 1999 002a 0F33     		add	r3, r3, #15
 2000 002c 1B78     		ldrb	r3, [r3]
 2001 002e 5B00     		lsl	r3, r3, #1
 2002 0030 3A68     		ldr	r2, [r7]
 2003 0032 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 45


 2004 0034 494A     		ldr	r2, .L112+4
 2005 0036 1A80     		strh	r2, [r3]
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2006              		.loc 1 453 0 discriminator 2
 2007 0038 3B1C     		mov	r3, r7
 2008 003a 0F33     		add	r3, r3, #15
 2009 003c 1A78     		ldrb	r2, [r3]
 2010 003e 3B1C     		mov	r3, r7
 2011 0040 0F33     		add	r3, r3, #15
 2012 0042 0132     		add	r2, r2, #1
 2013 0044 1A70     		strb	r2, [r3]
 2014              	.L93:
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2015              		.loc 1 453 0 is_stmt 0 discriminator 1
 2016 0046 3B1C     		mov	r3, r7
 2017 0048 0F33     		add	r3, r3, #15
 2018 004a 1B78     		ldrb	r3, [r3]
 2019 004c 132B     		cmp	r3, #19
 2020 004e EBD9     		bls	.L94
 457:.\main.c      ****             WT_arr_cspot = 0;
 2021              		.loc 1 457 0 is_stmt 1
 2022 0050 FB1D     		add	r3, r7, #7
 2023 0052 0022     		mov	r2, #0
 2024 0054 1A70     		strb	r2, [r3]
 459:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 2025              		.loc 1 459 0
 2026 0056 414B     		ldr	r3, .L112+4
 2027 0058 0220     		mov	r0, #2
 2028 005a 191C     		mov	r1, r3
 2029 005c FFF7FEFF 		bl	ServoGoalPosition
 460:.\main.c      ****             break;
 2030              		.loc 1 460 0
 2031 0060 47E0     		b	.L87
 2032              	.L91:
 463:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 2033              		.loc 1 463 0
 2034 0062 3C1C     		mov	r4, r7
 2035 0064 0C34     		add	r4, r4, #12
 2036 0066 3E4B     		ldr	r3, .L112+8
 2037 0068 181C     		mov	r0, r3
 2038 006a 1021     		mov	r1, #16
 2039 006c 1122     		mov	r2, #17
 2040 006e FFF7FEFF 		bl	make_command
 2041 0072 031C     		mov	r3, r0
 2042 0074 2380     		strh	r3, [r4]
 465:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 2043              		.loc 1 465 0
 2044 0076 FB1D     		add	r3, r7, #7
 2045 0078 1B78     		ldrb	r3, [r3]
 2046 007a 5B00     		lsl	r3, r3, #1
 2047 007c 3A68     		ldr	r2, [r7]
 2048 007e D318     		add	r3, r2, r3
 2049 0080 3A1C     		mov	r2, r7
 2050 0082 0C32     		add	r2, r2, #12
 2051 0084 1288     		ldrh	r2, [r2]
 2052 0086 1A80     		strh	r2, [r3]
 467:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 46


 2053              		.loc 1 467 0
 2054 0088 FB1D     		add	r3, r7, #7
 2055 008a 1B78     		ldrb	r3, [r3]
 2056 008c 122B     		cmp	r3, #18
 2057 008e 05D8     		bhi	.L95
 469:.\main.c      ****                 WT_arr_cspot++;
 2058              		.loc 1 469 0
 2059 0090 FB1D     		add	r3, r7, #7
 2060 0092 1A78     		ldrb	r2, [r3]
 2061 0094 FB1D     		add	r3, r7, #7
 2062 0096 0132     		add	r2, r2, #1
 2063 0098 1A70     		strb	r2, [r3]
 2064 009a 02E0     		b	.L96
 2065              	.L95:
 473:.\main.c      ****                 WT_arr_cspot = 0;
 2066              		.loc 1 473 0
 2067 009c FB1D     		add	r3, r7, #7
 2068 009e 0022     		mov	r2, #0
 2069 00a0 1A70     		strb	r2, [r3]
 2070              	.L96:
 478:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 2071              		.loc 1 478 0
 2072 00a2 3C1C     		mov	r4, r7
 2073 00a4 0A34     		add	r4, r4, #10
 2074 00a6 3B68     		ldr	r3, [r7]
 2075 00a8 181C     		mov	r0, r3
 2076 00aa 1421     		mov	r1, #20
 2077 00ac FFF7FEFF 		bl	average
 2078 00b0 031C     		mov	r3, r0
 2079 00b2 2380     		strh	r3, [r4]
 480:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2080              		.loc 1 480 0
 2081 00b4 3B1C     		mov	r3, r7
 2082 00b6 0A33     		add	r3, r3, #10
 2083 00b8 1A88     		ldrh	r2, [r3]
 2084 00ba FA23     		mov	r3, #250
 2085 00bc DB00     		lsl	r3, r3, #3
 2086 00be 9A42     		cmp	r2, r3
 2087 00c0 0DD8     		bhi	.L97
 480:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2088              		.loc 1 480 0 is_stmt 0 discriminator 1
 2089 00c2 3B1C     		mov	r3, r7
 2090 00c4 0A33     		add	r3, r3, #10
 2091 00c6 1A88     		ldrh	r2, [r3]
 2092 00c8 264B     		ldr	r3, .L112+12
 2093 00ca 9A42     		cmp	r2, r3
 2094 00cc 07D9     		bls	.L97
 482:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 2095              		.loc 1 482 0 is_stmt 1
 2096 00ce 3B1C     		mov	r3, r7
 2097 00d0 0A33     		add	r3, r3, #10
 2098 00d2 1B88     		ldrh	r3, [r3]
 2099 00d4 0220     		mov	r0, #2
 2100 00d6 191C     		mov	r1, r3
 2101 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2102 00dc 04E0     		b	.L98
 2103              	.L97:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 47


 487:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 2104              		.loc 1 487 0
 2105 00de 1F4B     		ldr	r3, .L112+4
 2106 00e0 0220     		mov	r0, #2
 2107 00e2 191C     		mov	r1, r3
 2108 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2109              	.L98:
 489:.\main.c      ****             WT_FLAG = 0;
 2110              		.loc 1 489 0
 2111 00e8 1F4B     		ldr	r3, .L112+16
 2112 00ea 0022     		mov	r2, #0
 2113 00ec 1A70     		strb	r2, [r3]
 490:.\main.c      ****             break;
 2114              		.loc 1 490 0
 2115 00ee 00E0     		b	.L87
 2116              	.L110:
 450:.\main.c      ****             break;
 2117              		.loc 1 450 0
 2118 00f0 C046     		mov	r8, r8
 2119              	.L87:
 494:.\main.c      ****     }
 495:.\main.c      ****     
 496:.\main.c      ****     switch(wristTilt_state){ //transitions
 2120              		.loc 1 496 0
 2121 00f2 194B     		ldr	r3, .L112
 2122 00f4 1B78     		ldrb	r3, [r3]
 2123 00f6 012B     		cmp	r3, #1
 2124 00f8 0CD0     		beq	.L100
 2125 00fa 02DC     		bgt	.L101
 2126 00fc 002B     		cmp	r3, #0
 2127 00fe 05D0     		beq	.L102
 2128 0100 24E0     		b	.L99
 2129              	.L101:
 2130 0102 022B     		cmp	r3, #2
 2131 0104 0AD0     		beq	.L103
 2132 0106 032B     		cmp	r3, #3
 2133 0108 14D0     		beq	.L104
 2134 010a 1FE0     		b	.L99
 2135              	.L102:
 497:.\main.c      ****         case tilt_start:
 498:.\main.c      ****             wristTilt_state = tilt_init;
 2136              		.loc 1 498 0
 2137 010c 124B     		ldr	r3, .L112
 2138 010e 0122     		mov	r2, #1
 2139 0110 1A70     		strb	r2, [r3]
 499:.\main.c      ****             break;
 2140              		.loc 1 499 0
 2141 0112 1BE0     		b	.L99
 2142              	.L100:
 500:.\main.c      ****         
 501:.\main.c      ****         case tilt_init:
 502:.\main.c      ****             wristTilt_state = tilt_wait;
 2143              		.loc 1 502 0
 2144 0114 104B     		ldr	r3, .L112
 2145 0116 0322     		mov	r2, #3
 2146 0118 1A70     		strb	r2, [r3]
 503:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 48


 2147              		.loc 1 503 0
 2148 011a 17E0     		b	.L99
 2149              	.L103:
 504:.\main.c      ****         
 505:.\main.c      ****         case tilt_control:
 506:.\main.c      ****             if(WT_FLAG)
 2150              		.loc 1 506 0
 2151 011c 124B     		ldr	r3, .L112+16
 2152 011e 1B78     		ldrb	r3, [r3]
 2153 0120 002B     		cmp	r3, #0
 2154 0122 03D0     		beq	.L105
 507:.\main.c      ****             {
 508:.\main.c      ****                 wristTilt_state = tilt_control;
 2155              		.loc 1 508 0
 2156 0124 0C4B     		ldr	r3, .L112
 2157 0126 0222     		mov	r2, #2
 2158 0128 1A70     		strb	r2, [r3]
 509:.\main.c      ****             }
 510:.\main.c      ****             else
 511:.\main.c      ****             {
 512:.\main.c      ****                 wristTilt_state = tilt_wait;
 513:.\main.c      ****             }
 514:.\main.c      ****             break;
 2159              		.loc 1 514 0
 2160 012a 0FE0     		b	.L99
 2161              	.L105:
 512:.\main.c      ****                 wristTilt_state = tilt_wait;
 2162              		.loc 1 512 0
 2163 012c 0A4B     		ldr	r3, .L112
 2164 012e 0322     		mov	r2, #3
 2165 0130 1A70     		strb	r2, [r3]
 2166              		.loc 1 514 0
 2167 0132 0BE0     		b	.L99
 2168              	.L104:
 515:.\main.c      ****         
 516:.\main.c      ****         case tilt_wait:
 517:.\main.c      ****             if(WT_FLAG)
 2169              		.loc 1 517 0
 2170 0134 0C4B     		ldr	r3, .L112+16
 2171 0136 1B78     		ldrb	r3, [r3]
 2172 0138 002B     		cmp	r3, #0
 2173 013a 03D0     		beq	.L107
 518:.\main.c      ****             {
 519:.\main.c      ****                 wristTilt_state = tilt_control;
 2174              		.loc 1 519 0
 2175 013c 064B     		ldr	r3, .L112
 2176 013e 0222     		mov	r2, #2
 2177 0140 1A70     		strb	r2, [r3]
 520:.\main.c      ****             }
 521:.\main.c      ****             else
 522:.\main.c      ****             {
 523:.\main.c      ****                 wristTilt_state = tilt_wait; 
 524:.\main.c      ****             }
 525:.\main.c      ****             break;
 2178              		.loc 1 525 0
 2179 0142 02E0     		b	.L111
 2180              	.L107:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 49


 523:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2181              		.loc 1 523 0
 2182 0144 044B     		ldr	r3, .L112
 2183 0146 0322     		mov	r2, #3
 2184 0148 1A70     		strb	r2, [r3]
 2185              	.L111:
 2186              		.loc 1 525 0
 2187 014a C046     		mov	r8, r8
 2188              	.L99:
 526:.\main.c      ****     }  
 527:.\main.c      ****     return WT_arr_cspot;
 2189              		.loc 1 527 0
 2190 014c FB1D     		add	r3, r7, #7
 2191 014e 1B78     		ldrb	r3, [r3]
 528:.\main.c      **** }
 2192              		.loc 1 528 0
 2193 0150 181C     		mov	r0, r3
 2194 0152 BD46     		mov	sp, r7
 2195 0154 05B0     		add	sp, sp, #20
 2196              		@ sp needed
 2197 0156 90BD     		pop	{r4, r7, pc}
 2198              	.L113:
 2199              		.align	2
 2200              	.L112:
 2201 0158 00000000 		.word	wristTilt_state
 2202 015c DC050000 		.word	1500
 2203 0160 00000000 		.word	data_array
 2204 0164 E7030000 		.word	999
 2205 0168 00000000 		.word	WT_FLAG
 2206              		.cfi_endproc
 2207              	.LFE48:
 2208              		.size	wristTilt, .-wristTilt
 2209              		.comm	wristRotate_state,1,1
 2210              		.section	.text.wristRotate,"ax",%progbits
 2211              		.align	2
 2212              		.global	wristRotate
 2213              		.code	16
 2214              		.thumb_func
 2215              		.type	wristRotate, %function
 2216              	wristRotate:
 2217              	.LFB49:
 529:.\main.c      **** 
 530:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 531:.\main.c      **** //control the rotating motion of the wrist
 532:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 533:.\main.c      **** {
 2218              		.loc 1 533 0
 2219              		.cfi_startproc
 2220 0000 90B5     		push	{r4, r7, lr}
 2221              		.cfi_def_cfa_offset 12
 2222              		.cfi_offset 4, -12
 2223              		.cfi_offset 7, -8
 2224              		.cfi_offset 14, -4
 2225 0002 85B0     		sub	sp, sp, #20
 2226              		.cfi_def_cfa_offset 32
 2227 0004 00AF     		add	r7, sp, #0
 2228              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 50


 2229 0006 021C     		mov	r2, r0
 2230 0008 3960     		str	r1, [r7]
 2231 000a FB1D     		add	r3, r7, #7
 2232 000c 1A70     		strb	r2, [r3]
 534:.\main.c      ****     //Overview
 535:.\main.c      ****     //take instruction from data_array
 536:.\main.c      ****     //smooth input
 537:.\main.c      ****     //actuate the tilting using UART
 538:.\main.c      ****     //get feedback
 539:.\main.c      **** 
 540:.\main.c      ****     //-------------------------- 
 541:.\main.c      ****     // Dynamixel Servo specific
 542:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 543:.\main.c      ****     // TODO: Set the desired position
 544:.\main.c      **** 
 545:.\main.c      ****     //--------------------------
 546:.\main.c      ****     // State machine
 547:.\main.c      ****     
 548:.\main.c      ****     uint8 i;
 549:.\main.c      ****     uint16 avg;
 550:.\main.c      ****     uint16 command;
 551:.\main.c      ****     
 552:.\main.c      ****     switch(wristRotate_state){ //actions
 2233              		.loc 1 552 0
 2234 000e 524B     		ldr	r3, .L140
 2235 0010 1B78     		ldrb	r3, [r3]
 2236 0012 012B     		cmp	r3, #1
 2237 0014 03D0     		beq	.L116
 2238 0016 6BDD     		ble	.L138
 2239 0018 022B     		cmp	r3, #2
 2240 001a 22D0     		beq	.L119
 553:.\main.c      ****         case rotate_start:
 554:.\main.c      ****             break;
 555:.\main.c      **** 
 556:.\main.c      ****         case rotate_init:
 557:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 558:.\main.c      ****             {
 559:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 560:.\main.c      ****             }
 561:.\main.c      ****             WR_arr_cspot = 0;
 562:.\main.c      ****             
 563:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 564:.\main.c      ****             break;
 565:.\main.c      **** 
 566:.\main.c      ****         case rotate_control:
 567:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 568:.\main.c      ****             
 569:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 570:.\main.c      ****             
 571:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 572:.\main.c      ****             {
 573:.\main.c      ****                 WR_arr_cspot++;
 574:.\main.c      ****             }
 575:.\main.c      ****             else
 576:.\main.c      ****             {
 577:.\main.c      ****                 WR_arr_cspot = 0;
 578:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 51


 579:.\main.c      ****             
 580:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 581:.\main.c      ****             
 582:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 583:.\main.c      ****             
 584:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 585:.\main.c      ****             {
 586:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 587:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 588:.\main.c      ****             }
 589:.\main.c      ****             else
 590:.\main.c      ****             {
 591:.\main.c      ****                 //throw error
 592:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 593:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 594:.\main.c      ****             }
 595:.\main.c      ****             WR_FLAG = 0;
 596:.\main.c      ****             break;
 597:.\main.c      ****             
 598:.\main.c      ****         case rotate_wait:
 599:.\main.c      ****             break;
 2241              		.loc 1 599 0
 2242 001c 69E0     		b	.L115
 2243              	.L116:
 557:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2244              		.loc 1 557 0
 2245 001e 3B1C     		mov	r3, r7
 2246 0020 0F33     		add	r3, r3, #15
 2247 0022 0022     		mov	r2, #0
 2248 0024 1A70     		strb	r2, [r3]
 2249 0026 0EE0     		b	.L121
 2250              	.L122:
 559:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2251              		.loc 1 559 0 discriminator 2
 2252 0028 3B1C     		mov	r3, r7
 2253 002a 0F33     		add	r3, r3, #15
 2254 002c 1B78     		ldrb	r3, [r3]
 2255 002e 5B00     		lsl	r3, r3, #1
 2256 0030 3A68     		ldr	r2, [r7]
 2257 0032 D318     		add	r3, r2, r3
 2258 0034 494A     		ldr	r2, .L140+4
 2259 0036 1A80     		strh	r2, [r3]
 557:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2260              		.loc 1 557 0 discriminator 2
 2261 0038 3B1C     		mov	r3, r7
 2262 003a 0F33     		add	r3, r3, #15
 2263 003c 1A78     		ldrb	r2, [r3]
 2264 003e 3B1C     		mov	r3, r7
 2265 0040 0F33     		add	r3, r3, #15
 2266 0042 0132     		add	r2, r2, #1
 2267 0044 1A70     		strb	r2, [r3]
 2268              	.L121:
 557:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2269              		.loc 1 557 0 is_stmt 0 discriminator 1
 2270 0046 3B1C     		mov	r3, r7
 2271 0048 0F33     		add	r3, r3, #15
 2272 004a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 52


 2273 004c 132B     		cmp	r3, #19
 2274 004e EBD9     		bls	.L122
 561:.\main.c      ****             WR_arr_cspot = 0;
 2275              		.loc 1 561 0 is_stmt 1
 2276 0050 FB1D     		add	r3, r7, #7
 2277 0052 0022     		mov	r2, #0
 2278 0054 1A70     		strb	r2, [r3]
 563:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2279              		.loc 1 563 0
 2280 0056 414B     		ldr	r3, .L140+4
 2281 0058 0120     		mov	r0, #1
 2282 005a 191C     		mov	r1, r3
 2283 005c FFF7FEFF 		bl	ServoGoalPosition
 564:.\main.c      ****             break;
 2284              		.loc 1 564 0
 2285 0060 47E0     		b	.L115
 2286              	.L119:
 567:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2287              		.loc 1 567 0
 2288 0062 3C1C     		mov	r4, r7
 2289 0064 0C34     		add	r4, r4, #12
 2290 0066 3E4B     		ldr	r3, .L140+8
 2291 0068 181C     		mov	r0, r3
 2292 006a 1221     		mov	r1, #18
 2293 006c 1322     		mov	r2, #19
 2294 006e FFF7FEFF 		bl	make_command
 2295 0072 031C     		mov	r3, r0
 2296 0074 2380     		strh	r3, [r4]
 569:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2297              		.loc 1 569 0
 2298 0076 FB1D     		add	r3, r7, #7
 2299 0078 1B78     		ldrb	r3, [r3]
 2300 007a 5B00     		lsl	r3, r3, #1
 2301 007c 3A68     		ldr	r2, [r7]
 2302 007e D318     		add	r3, r2, r3
 2303 0080 3A1C     		mov	r2, r7
 2304 0082 0C32     		add	r2, r2, #12
 2305 0084 1288     		ldrh	r2, [r2]
 2306 0086 1A80     		strh	r2, [r3]
 571:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2307              		.loc 1 571 0
 2308 0088 FB1D     		add	r3, r7, #7
 2309 008a 1B78     		ldrb	r3, [r3]
 2310 008c 122B     		cmp	r3, #18
 2311 008e 05D8     		bhi	.L123
 573:.\main.c      ****                 WR_arr_cspot++;
 2312              		.loc 1 573 0
 2313 0090 FB1D     		add	r3, r7, #7
 2314 0092 1A78     		ldrb	r2, [r3]
 2315 0094 FB1D     		add	r3, r7, #7
 2316 0096 0132     		add	r2, r2, #1
 2317 0098 1A70     		strb	r2, [r3]
 2318 009a 02E0     		b	.L124
 2319              	.L123:
 577:.\main.c      ****                 WR_arr_cspot = 0;
 2320              		.loc 1 577 0
 2321 009c FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 53


 2322 009e 0022     		mov	r2, #0
 2323 00a0 1A70     		strb	r2, [r3]
 2324              	.L124:
 582:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2325              		.loc 1 582 0
 2326 00a2 3C1C     		mov	r4, r7
 2327 00a4 0A34     		add	r4, r4, #10
 2328 00a6 3B68     		ldr	r3, [r7]
 2329 00a8 181C     		mov	r0, r3
 2330 00aa 1421     		mov	r1, #20
 2331 00ac FFF7FEFF 		bl	average
 2332 00b0 031C     		mov	r3, r0
 2333 00b2 2380     		strh	r3, [r4]
 584:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2334              		.loc 1 584 0
 2335 00b4 3B1C     		mov	r3, r7
 2336 00b6 0A33     		add	r3, r3, #10
 2337 00b8 1A88     		ldrh	r2, [r3]
 2338 00ba FA23     		mov	r3, #250
 2339 00bc DB00     		lsl	r3, r3, #3
 2340 00be 9A42     		cmp	r2, r3
 2341 00c0 0DD8     		bhi	.L125
 584:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2342              		.loc 1 584 0 is_stmt 0 discriminator 1
 2343 00c2 3B1C     		mov	r3, r7
 2344 00c4 0A33     		add	r3, r3, #10
 2345 00c6 1A88     		ldrh	r2, [r3]
 2346 00c8 264B     		ldr	r3, .L140+12
 2347 00ca 9A42     		cmp	r2, r3
 2348 00cc 07D9     		bls	.L125
 587:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2349              		.loc 1 587 0 is_stmt 1
 2350 00ce 3B1C     		mov	r3, r7
 2351 00d0 0A33     		add	r3, r3, #10
 2352 00d2 1B88     		ldrh	r3, [r3]
 2353 00d4 0120     		mov	r0, #1
 2354 00d6 191C     		mov	r1, r3
 2355 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2356 00dc 04E0     		b	.L126
 2357              	.L125:
 593:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2358              		.loc 1 593 0
 2359 00de 1F4B     		ldr	r3, .L140+4
 2360 00e0 0120     		mov	r0, #1
 2361 00e2 191C     		mov	r1, r3
 2362 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2363              	.L126:
 595:.\main.c      ****             WR_FLAG = 0;
 2364              		.loc 1 595 0
 2365 00e8 1F4B     		ldr	r3, .L140+16
 2366 00ea 0022     		mov	r2, #0
 2367 00ec 1A70     		strb	r2, [r3]
 596:.\main.c      ****             break;
 2368              		.loc 1 596 0
 2369 00ee 00E0     		b	.L115
 2370              	.L138:
 554:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 54


 2371              		.loc 1 554 0
 2372 00f0 C046     		mov	r8, r8
 2373              	.L115:
 600:.\main.c      ****     }
 601:.\main.c      ****     
 602:.\main.c      ****     switch(wristRotate_state){ //transitions
 2374              		.loc 1 602 0
 2375 00f2 194B     		ldr	r3, .L140
 2376 00f4 1B78     		ldrb	r3, [r3]
 2377 00f6 012B     		cmp	r3, #1
 2378 00f8 0CD0     		beq	.L128
 2379 00fa 02DC     		bgt	.L129
 2380 00fc 002B     		cmp	r3, #0
 2381 00fe 05D0     		beq	.L130
 2382 0100 24E0     		b	.L127
 2383              	.L129:
 2384 0102 022B     		cmp	r3, #2
 2385 0104 0AD0     		beq	.L131
 2386 0106 032B     		cmp	r3, #3
 2387 0108 14D0     		beq	.L132
 2388 010a 1FE0     		b	.L127
 2389              	.L130:
 603:.\main.c      ****         case rotate_start:
 604:.\main.c      ****             wristRotate_state = rotate_init;
 2390              		.loc 1 604 0
 2391 010c 124B     		ldr	r3, .L140
 2392 010e 0122     		mov	r2, #1
 2393 0110 1A70     		strb	r2, [r3]
 605:.\main.c      ****             break;
 2394              		.loc 1 605 0
 2395 0112 1BE0     		b	.L127
 2396              	.L128:
 606:.\main.c      ****         
 607:.\main.c      ****         case rotate_init:
 608:.\main.c      ****             wristRotate_state = rotate_wait;
 2397              		.loc 1 608 0
 2398 0114 104B     		ldr	r3, .L140
 2399 0116 0322     		mov	r2, #3
 2400 0118 1A70     		strb	r2, [r3]
 609:.\main.c      ****             break;
 2401              		.loc 1 609 0
 2402 011a 17E0     		b	.L127
 2403              	.L131:
 610:.\main.c      ****         
 611:.\main.c      ****         case rotate_control:
 612:.\main.c      ****             if(WR_FLAG)
 2404              		.loc 1 612 0
 2405 011c 124B     		ldr	r3, .L140+16
 2406 011e 1B78     		ldrb	r3, [r3]
 2407 0120 002B     		cmp	r3, #0
 2408 0122 03D0     		beq	.L133
 613:.\main.c      ****             {
 614:.\main.c      ****                 wristRotate_state = rotate_control;
 2409              		.loc 1 614 0
 2410 0124 0C4B     		ldr	r3, .L140
 2411 0126 0222     		mov	r2, #2
 2412 0128 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 55


 615:.\main.c      ****             }
 616:.\main.c      ****             else
 617:.\main.c      ****             {
 618:.\main.c      ****                 wristRotate_state = rotate_wait;
 619:.\main.c      ****             }
 620:.\main.c      ****             break;
 2413              		.loc 1 620 0
 2414 012a 0FE0     		b	.L127
 2415              	.L133:
 618:.\main.c      ****                 wristRotate_state = rotate_wait;
 2416              		.loc 1 618 0
 2417 012c 0A4B     		ldr	r3, .L140
 2418 012e 0322     		mov	r2, #3
 2419 0130 1A70     		strb	r2, [r3]
 2420              		.loc 1 620 0
 2421 0132 0BE0     		b	.L127
 2422              	.L132:
 621:.\main.c      ****         
 622:.\main.c      ****         case rotate_wait:
 623:.\main.c      ****             if(WR_FLAG)
 2423              		.loc 1 623 0
 2424 0134 0C4B     		ldr	r3, .L140+16
 2425 0136 1B78     		ldrb	r3, [r3]
 2426 0138 002B     		cmp	r3, #0
 2427 013a 03D0     		beq	.L135
 624:.\main.c      ****             {
 625:.\main.c      ****                 wristRotate_state = rotate_control;
 2428              		.loc 1 625 0
 2429 013c 064B     		ldr	r3, .L140
 2430 013e 0222     		mov	r2, #2
 2431 0140 1A70     		strb	r2, [r3]
 626:.\main.c      ****             }
 627:.\main.c      ****             else
 628:.\main.c      ****             {
 629:.\main.c      ****                 wristRotate_state = rotate_wait;
 630:.\main.c      ****             }
 631:.\main.c      ****             break;
 2432              		.loc 1 631 0
 2433 0142 02E0     		b	.L139
 2434              	.L135:
 629:.\main.c      ****                 wristRotate_state = rotate_wait;
 2435              		.loc 1 629 0
 2436 0144 044B     		ldr	r3, .L140
 2437 0146 0322     		mov	r2, #3
 2438 0148 1A70     		strb	r2, [r3]
 2439              	.L139:
 2440              		.loc 1 631 0
 2441 014a C046     		mov	r8, r8
 2442              	.L127:
 632:.\main.c      ****     }  
 633:.\main.c      ****     return WR_arr_cspot;
 2443              		.loc 1 633 0
 2444 014c FB1D     		add	r3, r7, #7
 2445 014e 1B78     		ldrb	r3, [r3]
 634:.\main.c      **** }
 2446              		.loc 1 634 0
 2447 0150 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 56


 2448 0152 BD46     		mov	sp, r7
 2449 0154 05B0     		add	sp, sp, #20
 2450              		@ sp needed
 2451 0156 90BD     		pop	{r4, r7, pc}
 2452              	.L141:
 2453              		.align	2
 2454              	.L140:
 2455 0158 00000000 		.word	wristRotate_state
 2456 015c DC050000 		.word	1500
 2457 0160 00000000 		.word	data_array
 2458 0164 E7030000 		.word	999
 2459 0168 00000000 		.word	WR_FLAG
 2460              		.cfi_endproc
 2461              	.LFE49:
 2462              		.size	wristRotate, .-wristRotate
 2463              		.comm	elbow_state,1,1
 2464              		.section	.text.elbow,"ax",%progbits
 2465              		.align	2
 2466              		.global	elbow
 2467              		.code	16
 2468              		.thumb_func
 2469              		.type	elbow, %function
 2470              	elbow:
 2471              	.LFB50:
 635:.\main.c      **** 
 636:.\main.c      **** //control the elbow
 637:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 638:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 639:.\main.c      **** { 
 2472              		.loc 1 639 0
 2473              		.cfi_startproc
 2474 0000 90B5     		push	{r4, r7, lr}
 2475              		.cfi_def_cfa_offset 12
 2476              		.cfi_offset 4, -12
 2477              		.cfi_offset 7, -8
 2478              		.cfi_offset 14, -4
 2479 0002 85B0     		sub	sp, sp, #20
 2480              		.cfi_def_cfa_offset 32
 2481 0004 00AF     		add	r7, sp, #0
 2482              		.cfi_def_cfa_register 7
 2483 0006 021C     		mov	r2, r0
 2484 0008 3960     		str	r1, [r7]
 2485 000a FB1D     		add	r3, r7, #7
 2486 000c 1A70     		strb	r2, [r3]
 640:.\main.c      ****     //take instruction from data_array
 641:.\main.c      ****     //smooth input
 642:.\main.c      ****     //actuate the elbow using PWM
 643:.\main.c      ****     //get feedback
 644:.\main.c      ****     uint8 i;
 645:.\main.c      ****     uint16 avg;
 646:.\main.c      ****     uint16 command;
 647:.\main.c      ****     
 648:.\main.c      ****     //TODO: make sure reading from correct pots
 649:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2487              		.loc 1 649 0
 2488 000e 3C1C     		mov	r4, r7
 2489 0010 0C34     		add	r4, r4, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 57


 2490 0012 0120     		mov	r0, #1
 2491 0014 FFF7FEFF 		bl	potFeedback
 2492 0018 031C     		mov	r3, r0
 2493 001a 2380     		strh	r3, [r4]
 650:.\main.c      ****     
 651:.\main.c      ****     switch(elbow_state){ //actions
 2494              		.loc 1 651 0
 2495 001c BB4B     		ldr	r3, .L189
 2496 001e 1B78     		ldrb	r3, [r3]
 2497 0020 012B     		cmp	r3, #1
 2498 0022 07D0     		beq	.L144
 2499 0024 00DC     		bgt	.LCB2177
 2500 0026 47E1     		b	.L187	@long jump
 2501              	.LCB2177:
 2502 0028 022B     		cmp	r3, #2
 2503 002a 24D0     		beq	.L147
 2504 002c 032B     		cmp	r3, #3
 2505 002e 00D1     		bne	.LCB2181
 2506 0030 2EE1     		b	.L148	@long jump
 2507              	.LCB2181:
 2508 0032 42E1     		b	.L143
 2509              	.L144:
 652:.\main.c      ****         case elbw_start:
 653:.\main.c      ****             break;
 654:.\main.c      **** 
 655:.\main.c      ****         case elbw_init:
 656:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2510              		.loc 1 656 0
 2511 0034 3B1C     		mov	r3, r7
 2512 0036 0F33     		add	r3, r3, #15
 2513 0038 0022     		mov	r2, #0
 2514 003a 1A70     		strb	r2, [r3]
 2515 003c 0EE0     		b	.L149
 2516              	.L150:
 657:.\main.c      ****             {
 658:.\main.c      ****                 elbow_array[i] = 1500;
 2517              		.loc 1 658 0 discriminator 2
 2518 003e 3B1C     		mov	r3, r7
 2519 0040 0F33     		add	r3, r3, #15
 2520 0042 1B78     		ldrb	r3, [r3]
 2521 0044 5B00     		lsl	r3, r3, #1
 2522 0046 3A68     		ldr	r2, [r7]
 2523 0048 D318     		add	r3, r2, r3
 2524 004a B14A     		ldr	r2, .L189+4
 2525 004c 1A80     		strh	r2, [r3]
 656:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2526              		.loc 1 656 0 discriminator 2
 2527 004e 3B1C     		mov	r3, r7
 2528 0050 0F33     		add	r3, r3, #15
 2529 0052 1A78     		ldrb	r2, [r3]
 2530 0054 3B1C     		mov	r3, r7
 2531 0056 0F33     		add	r3, r3, #15
 2532 0058 0132     		add	r2, r2, #1
 2533 005a 1A70     		strb	r2, [r3]
 2534              	.L149:
 656:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2535              		.loc 1 656 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 58


 2536 005c 3B1C     		mov	r3, r7
 2537 005e 0F33     		add	r3, r3, #15
 2538 0060 1B78     		ldrb	r3, [r3]
 2539 0062 132B     		cmp	r3, #19
 2540 0064 EBD9     		bls	.L150
 659:.\main.c      ****             }
 660:.\main.c      ****             elbw_arr_cspot = 0;
 2541              		.loc 1 660 0 is_stmt 1
 2542 0066 FB1D     		add	r3, r7, #7
 2543 0068 0022     		mov	r2, #0
 2544 006a 1A70     		strb	r2, [r3]
 661:.\main.c      ****             
 662:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2545              		.loc 1 662 0
 2546 006c A84B     		ldr	r3, .L189+4
 2547 006e 181C     		mov	r0, r3
 2548 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 663:.\main.c      ****             break;
 2549              		.loc 1 663 0
 2550 0074 21E1     		b	.L143
 2551              	.L147:
 664:.\main.c      **** 
 665:.\main.c      ****         case elbw_execute:
 666:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2552              		.loc 1 666 0
 2553 0076 3C1C     		mov	r4, r7
 2554 0078 0A34     		add	r4, r4, #10
 2555 007a A64B     		ldr	r3, .L189+8
 2556 007c 181C     		mov	r0, r3
 2557 007e 0E21     		mov	r1, #14
 2558 0080 0F22     		mov	r2, #15
 2559 0082 FFF7FEFF 		bl	make_command
 2560 0086 031C     		mov	r3, r0
 2561 0088 2380     		strh	r3, [r4]
 667:.\main.c      ****             
 668:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2562              		.loc 1 668 0
 2563 008a FB1D     		add	r3, r7, #7
 2564 008c 1B78     		ldrb	r3, [r3]
 2565 008e 5B00     		lsl	r3, r3, #1
 2566 0090 3A68     		ldr	r2, [r7]
 2567 0092 D318     		add	r3, r2, r3
 2568 0094 3A1C     		mov	r2, r7
 2569 0096 0A32     		add	r2, r2, #10
 2570 0098 1288     		ldrh	r2, [r2]
 2571 009a 1A80     		strh	r2, [r3]
 669:.\main.c      ****             
 670:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2572              		.loc 1 670 0
 2573 009c FB1D     		add	r3, r7, #7
 2574 009e 1B78     		ldrb	r3, [r3]
 2575 00a0 122B     		cmp	r3, #18
 2576 00a2 05D8     		bhi	.L151
 671:.\main.c      ****             {
 672:.\main.c      ****                 elbw_arr_cspot++;
 2577              		.loc 1 672 0
 2578 00a4 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 59


 2579 00a6 1A78     		ldrb	r2, [r3]
 2580 00a8 FB1D     		add	r3, r7, #7
 2581 00aa 0132     		add	r2, r2, #1
 2582 00ac 1A70     		strb	r2, [r3]
 2583 00ae 02E0     		b	.L152
 2584              	.L151:
 673:.\main.c      ****             }
 674:.\main.c      ****             else
 675:.\main.c      ****             {
 676:.\main.c      ****                 elbw_arr_cspot = 0;
 2585              		.loc 1 676 0
 2586 00b0 FB1D     		add	r3, r7, #7
 2587 00b2 0022     		mov	r2, #0
 2588 00b4 1A70     		strb	r2, [r3]
 2589              	.L152:
 677:.\main.c      ****             }
 678:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2590              		.loc 1 678 0
 2591 00b6 3C1C     		mov	r4, r7
 2592 00b8 0834     		add	r4, r4, #8
 2593 00ba 3B68     		ldr	r3, [r7]
 2594 00bc 181C     		mov	r0, r3
 2595 00be 1421     		mov	r1, #20
 2596 00c0 FFF7FEFF 		bl	average
 2597 00c4 031C     		mov	r3, r0
 2598 00c6 2380     		strh	r3, [r4]
 679:.\main.c      ****             
 680:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2599              		.loc 1 680 0
 2600 00c8 FFF7FEFF 		bl	stop_elb_dn_Read
 2601 00cc 031C     		mov	r3, r0
 2602 00ce 002B     		cmp	r3, #0
 2603 00d0 05D0     		beq	.L153
 2604              		.loc 1 680 0 is_stmt 0 discriminator 1
 2605 00d2 FFF7FEFF 		bl	stop_elb_up_Read
 2606 00d6 031C     		mov	r3, r0
 2607 00d8 002B     		cmp	r3, #0
 2608 00da 00D0     		beq	.LCB2277
 2609 00dc 6FE0     		b	.L154	@long jump
 2610              	.LCB2277:
 2611              	.L153:
 681:.\main.c      ****             {
 682:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2612              		.loc 1 682 0 is_stmt 1
 2613 00de 3B1C     		mov	r3, r7
 2614 00e0 0C33     		add	r3, r3, #12
 2615 00e2 1A88     		ldrh	r2, [r3]
 2616 00e4 8C4B     		ldr	r3, .L189+12
 2617 00e6 1B68     		ldr	r3, [r3]
 2618 00e8 9A42     		cmp	r2, r3
 2619 00ea 23D8     		bhi	.L155
 683:.\main.c      ****                 {
 684:.\main.c      ****                     if (avg < 1500)
 2620              		.loc 1 684 0
 2621 00ec 3B1C     		mov	r3, r7
 2622 00ee 0833     		add	r3, r3, #8
 2623 00f0 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 60


 2624 00f2 8A4B     		ldr	r3, .L189+16
 2625 00f4 9A42     		cmp	r2, r3
 2626 00f6 04D8     		bhi	.L156
 685:.\main.c      ****                     {
 686:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2627              		.loc 1 686 0
 2628 00f8 854B     		ldr	r3, .L189+4
 2629 00fa 181C     		mov	r0, r3
 2630 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2631 0100 5CE0     		b	.L159
 2632              	.L156:
 687:.\main.c      ****                     }
 688:.\main.c      ****                     else
 689:.\main.c      ****                     {
 690:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2633              		.loc 1 690 0
 2634 0102 3B1C     		mov	r3, r7
 2635 0104 0833     		add	r3, r3, #8
 2636 0106 1A88     		ldrh	r2, [r3]
 2637 0108 FA23     		mov	r3, #250
 2638 010a DB00     		lsl	r3, r3, #3
 2639 010c 9A42     		cmp	r2, r3
 2640 010e 0CD8     		bhi	.L158
 2641              		.loc 1 690 0 is_stmt 0 discriminator 1
 2642 0110 3B1C     		mov	r3, r7
 2643 0112 0833     		add	r3, r3, #8
 2644 0114 1A88     		ldrh	r2, [r3]
 2645 0116 824B     		ldr	r3, .L189+20
 2646 0118 9A42     		cmp	r2, r3
 2647 011a 06D9     		bls	.L158
 691:.\main.c      ****                         {
 692:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2648              		.loc 1 692 0 is_stmt 1
 2649 011c 3B1C     		mov	r3, r7
 2650 011e 0833     		add	r3, r3, #8
 2651 0120 1B88     		ldrh	r3, [r3]
 2652 0122 181C     		mov	r0, r3
 2653 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2654 0128 48E0     		b	.L159
 2655              	.L158:
 693:.\main.c      ****                         }
 694:.\main.c      ****                         else
 695:.\main.c      ****                         {
 696:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2656              		.loc 1 696 0
 2657 012a 794B     		ldr	r3, .L189+4
 2658 012c 181C     		mov	r0, r3
 2659 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2660 0132 43E0     		b	.L159
 2661              	.L155:
 697:.\main.c      ****                         }
 698:.\main.c      ****                     }
 699:.\main.c      ****                 }
 700:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND) // upper bound checking, only move away is 
 2662              		.loc 1 700 0
 2663 0134 3B1C     		mov	r3, r7
 2664 0136 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 61


 2665 0138 1A88     		ldrh	r2, [r3]
 2666 013a 7A4B     		ldr	r3, .L189+24
 2667 013c 1B68     		ldr	r3, [r3]
 2668 013e 9A42     		cmp	r2, r3
 2669 0140 23D3     		bcc	.L160
 701:.\main.c      ****                 {
 702:.\main.c      ****                     if(avg > 1500)
 2670              		.loc 1 702 0
 2671 0142 3B1C     		mov	r3, r7
 2672 0144 0833     		add	r3, r3, #8
 2673 0146 1A88     		ldrh	r2, [r3]
 2674 0148 714B     		ldr	r3, .L189+4
 2675 014a 9A42     		cmp	r2, r3
 2676 014c 04D9     		bls	.L161
 703:.\main.c      ****                     {
 704:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2677              		.loc 1 704 0
 2678 014e 704B     		ldr	r3, .L189+4
 2679 0150 181C     		mov	r0, r3
 2680 0152 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2681 0156 31E0     		b	.L159
 2682              	.L161:
 705:.\main.c      ****                     }
 706:.\main.c      ****                     else
 707:.\main.c      ****                     {
 708:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2683              		.loc 1 708 0
 2684 0158 3B1C     		mov	r3, r7
 2685 015a 0833     		add	r3, r3, #8
 2686 015c 1A88     		ldrh	r2, [r3]
 2687 015e FA23     		mov	r3, #250
 2688 0160 DB00     		lsl	r3, r3, #3
 2689 0162 9A42     		cmp	r2, r3
 2690 0164 0CD8     		bhi	.L163
 2691              		.loc 1 708 0 is_stmt 0 discriminator 1
 2692 0166 3B1C     		mov	r3, r7
 2693 0168 0833     		add	r3, r3, #8
 2694 016a 1A88     		ldrh	r2, [r3]
 2695 016c 6C4B     		ldr	r3, .L189+20
 2696 016e 9A42     		cmp	r2, r3
 2697 0170 06D9     		bls	.L163
 709:.\main.c      ****                         {
 710:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2698              		.loc 1 710 0 is_stmt 1
 2699 0172 3B1C     		mov	r3, r7
 2700 0174 0833     		add	r3, r3, #8
 2701 0176 1B88     		ldrh	r3, [r3]
 2702 0178 181C     		mov	r0, r3
 2703 017a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2704 017e 1DE0     		b	.L159
 2705              	.L163:
 711:.\main.c      ****                         }
 712:.\main.c      ****                         else
 713:.\main.c      ****                         {
 714:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2706              		.loc 1 714 0
 2707 0180 634B     		ldr	r3, .L189+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 62


 2708 0182 181C     		mov	r0, r3
 2709 0184 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2710 0188 18E0     		b	.L159
 2711              	.L160:
 715:.\main.c      ****                         }
 716:.\main.c      ****                     }
 717:.\main.c      ****                 }
 718:.\main.c      ****                 else
 719:.\main.c      ****                 {
 720:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2712              		.loc 1 720 0
 2713 018a 3B1C     		mov	r3, r7
 2714 018c 0833     		add	r3, r3, #8
 2715 018e 1A88     		ldrh	r2, [r3]
 2716 0190 FA23     		mov	r3, #250
 2717 0192 DB00     		lsl	r3, r3, #3
 2718 0194 9A42     		cmp	r2, r3
 2719 0196 0CD8     		bhi	.L164
 2720              		.loc 1 720 0 is_stmt 0 discriminator 1
 2721 0198 3B1C     		mov	r3, r7
 2722 019a 0833     		add	r3, r3, #8
 2723 019c 1A88     		ldrh	r2, [r3]
 2724 019e 604B     		ldr	r3, .L189+20
 2725 01a0 9A42     		cmp	r2, r3
 2726 01a2 06D9     		bls	.L164
 721:.\main.c      ****                     {
 722:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2727              		.loc 1 722 0 is_stmt 1
 2728 01a4 3B1C     		mov	r3, r7
 2729 01a6 0833     		add	r3, r3, #8
 2730 01a8 1B88     		ldrh	r3, [r3]
 2731 01aa 181C     		mov	r0, r3
 2732 01ac FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2733 01b0 04E0     		b	.L159
 2734              	.L164:
 723:.\main.c      ****                     }
 724:.\main.c      ****                     else
 725:.\main.c      ****                     {
 726:.\main.c      ****                         ELBW_PWM_WriteCompare(NEUTRAL);
 2735              		.loc 1 726 0
 2736 01b2 574B     		ldr	r3, .L189+4
 2737 01b4 181C     		mov	r0, r3
 2738 01b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 682:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2739              		.loc 1 682 0
 2740 01ba 65E0     		b	.L165
 2741              	.L159:
 2742 01bc 64E0     		b	.L165
 2743              	.L154:
 727:.\main.c      ****                     }
 728:.\main.c      ****                 }
 729:.\main.c      ****             }
 730:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 731:.\main.c      ****             {
 732:.\main.c      ****                 if(!stop_elb_dn_Read()){
 2744              		.loc 1 732 0
 2745 01be FFF7FEFF 		bl	stop_elb_dn_Read
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 63


 2746 01c2 031C     		mov	r3, r0
 2747 01c4 002B     		cmp	r3, #0
 2748 01c6 2BD1     		bne	.L166
 733:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) + BOUND_OFFSET;
 2749              		.loc 1 733 0
 2750 01c8 0120     		mov	r0, #1
 2751 01ca FFF7FEFF 		bl	potFeedback
 2752 01ce 031C     		mov	r3, r0
 2753 01d0 1433     		add	r3, r3, #20
 2754 01d2 1A1C     		mov	r2, r3
 2755 01d4 504B     		ldr	r3, .L189+12
 2756 01d6 1A60     		str	r2, [r3]
 734:.\main.c      ****                     if (avg < 1500)
 2757              		.loc 1 734 0
 2758 01d8 3B1C     		mov	r3, r7
 2759 01da 0833     		add	r3, r3, #8
 2760 01dc 1A88     		ldrh	r2, [r3]
 2761 01de 4F4B     		ldr	r3, .L189+16
 2762 01e0 9A42     		cmp	r2, r3
 2763 01e2 04D8     		bhi	.L167
 735:.\main.c      ****                     {
 736:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2764              		.loc 1 736 0
 2765 01e4 4A4B     		ldr	r3, .L189+4
 2766 01e6 181C     		mov	r0, r3
 2767 01e8 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2768 01ec 4CE0     		b	.L165
 2769              	.L167:
 737:.\main.c      ****                     }
 738:.\main.c      ****                     else
 739:.\main.c      ****                     {
 740:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2770              		.loc 1 740 0
 2771 01ee 3B1C     		mov	r3, r7
 2772 01f0 0833     		add	r3, r3, #8
 2773 01f2 1A88     		ldrh	r2, [r3]
 2774 01f4 FA23     		mov	r3, #250
 2775 01f6 DB00     		lsl	r3, r3, #3
 2776 01f8 9A42     		cmp	r2, r3
 2777 01fa 0CD8     		bhi	.L169
 2778              		.loc 1 740 0 is_stmt 0 discriminator 1
 2779 01fc 3B1C     		mov	r3, r7
 2780 01fe 0833     		add	r3, r3, #8
 2781 0200 1A88     		ldrh	r2, [r3]
 2782 0202 474B     		ldr	r3, .L189+20
 2783 0204 9A42     		cmp	r2, r3
 2784 0206 06D9     		bls	.L169
 741:.\main.c      ****                         {
 742:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2785              		.loc 1 742 0 is_stmt 1
 2786 0208 3B1C     		mov	r3, r7
 2787 020a 0833     		add	r3, r3, #8
 2788 020c 1B88     		ldrh	r3, [r3]
 2789 020e 181C     		mov	r0, r3
 2790 0210 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2791 0214 38E0     		b	.L165
 2792              	.L169:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 64


 743:.\main.c      ****                         }
 744:.\main.c      ****                         else
 745:.\main.c      ****                         {
 746:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2793              		.loc 1 746 0
 2794 0216 3E4B     		ldr	r3, .L189+4
 2795 0218 181C     		mov	r0, r3
 2796 021a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2797 021e 33E0     		b	.L165
 2798              	.L166:
 747:.\main.c      ****                         }
 748:.\main.c      ****                     }
 749:.\main.c      ****                 }
 750:.\main.c      ****                 else if(!stop_elb_up_Read()){
 2799              		.loc 1 750 0
 2800 0220 FFF7FEFF 		bl	stop_elb_up_Read
 2801 0224 031C     		mov	r3, r0
 2802 0226 002B     		cmp	r3, #0
 2803 0228 2BD1     		bne	.L170
 751:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) - BOUND_OFFSET;
 2804              		.loc 1 751 0
 2805 022a 0120     		mov	r0, #1
 2806 022c FFF7FEFF 		bl	potFeedback
 2807 0230 031C     		mov	r3, r0
 2808 0232 143B     		sub	r3, r3, #20
 2809 0234 1A1C     		mov	r2, r3
 2810 0236 3B4B     		ldr	r3, .L189+24
 2811 0238 1A60     		str	r2, [r3]
 752:.\main.c      ****                     if(avg > 1500)
 2812              		.loc 1 752 0
 2813 023a 3B1C     		mov	r3, r7
 2814 023c 0833     		add	r3, r3, #8
 2815 023e 1A88     		ldrh	r2, [r3]
 2816 0240 334B     		ldr	r3, .L189+4
 2817 0242 9A42     		cmp	r2, r3
 2818 0244 04D9     		bls	.L171
 753:.\main.c      ****                     {
 754:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2819              		.loc 1 754 0
 2820 0246 324B     		ldr	r3, .L189+4
 2821 0248 181C     		mov	r0, r3
 2822 024a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2823 024e 1BE0     		b	.L165
 2824              	.L171:
 755:.\main.c      ****                     }
 756:.\main.c      ****                     else
 757:.\main.c      ****                     {
 758:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2825              		.loc 1 758 0
 2826 0250 3B1C     		mov	r3, r7
 2827 0252 0833     		add	r3, r3, #8
 2828 0254 1A88     		ldrh	r2, [r3]
 2829 0256 FA23     		mov	r3, #250
 2830 0258 DB00     		lsl	r3, r3, #3
 2831 025a 9A42     		cmp	r2, r3
 2832 025c 0CD8     		bhi	.L173
 2833              		.loc 1 758 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 65


 2834 025e 3B1C     		mov	r3, r7
 2835 0260 0833     		add	r3, r3, #8
 2836 0262 1A88     		ldrh	r2, [r3]
 2837 0264 2E4B     		ldr	r3, .L189+20
 2838 0266 9A42     		cmp	r2, r3
 2839 0268 06D9     		bls	.L173
 759:.\main.c      ****                         {
 760:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2840              		.loc 1 760 0 is_stmt 1
 2841 026a 3B1C     		mov	r3, r7
 2842 026c 0833     		add	r3, r3, #8
 2843 026e 1B88     		ldrh	r3, [r3]
 2844 0270 181C     		mov	r0, r3
 2845 0272 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2846 0276 07E0     		b	.L165
 2847              	.L173:
 761:.\main.c      ****                         }
 762:.\main.c      ****                         else
 763:.\main.c      ****                         {
 764:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2848              		.loc 1 764 0
 2849 0278 254B     		ldr	r3, .L189+4
 2850 027a 181C     		mov	r0, r3
 2851 027c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2852 0280 02E0     		b	.L165
 2853              	.L170:
 765:.\main.c      ****                         }
 766:.\main.c      ****                     }
 767:.\main.c      ****                 }
 768:.\main.c      ****                 else{
 769:.\main.c      ****                     LED_Write(1);
 2854              		.loc 1 769 0
 2855 0282 0120     		mov	r0, #1
 2856 0284 FFF7FEFF 		bl	LED_Write
 2857              	.L165:
 770:.\main.c      ****                 }
 771:.\main.c      ****             }
 772:.\main.c      ****             ELBOW_FLAG = 0;
 2858              		.loc 1 772 0
 2859 0288 274B     		ldr	r3, .L189+28
 2860 028a 0022     		mov	r2, #0
 2861 028c 1A70     		strb	r2, [r3]
 773:.\main.c      ****             break;
 2862              		.loc 1 773 0
 2863 028e 14E0     		b	.L143
 2864              	.L148:
 774:.\main.c      ****             
 775:.\main.c      ****         case elbw_wait:
 776:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2865              		.loc 1 776 0
 2866 0290 3B1C     		mov	r3, r7
 2867 0292 0C33     		add	r3, r3, #12
 2868 0294 1A88     		ldrh	r2, [r3]
 2869 0296 204B     		ldr	r3, .L189+12
 2870 0298 1B68     		ldr	r3, [r3]
 2871 029a 9A42     		cmp	r2, r3
 2872 029c 06D9     		bls	.L174
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 66


 2873              		.loc 1 776 0 is_stmt 0 discriminator 1
 2874 029e 3B1C     		mov	r3, r7
 2875 02a0 0C33     		add	r3, r3, #12
 2876 02a2 1A88     		ldrh	r2, [r3]
 2877 02a4 1F4B     		ldr	r3, .L189+24
 2878 02a6 1B68     		ldr	r3, [r3]
 2879 02a8 9A42     		cmp	r2, r3
 2880 02aa 04D3     		bcc	.L175
 2881              	.L174:
 777:.\main.c      ****             {
 778:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2882              		.loc 1 778 0 is_stmt 1
 2883 02ac 184B     		ldr	r3, .L189+4
 2884 02ae 181C     		mov	r0, r3
 2885 02b0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 779:.\main.c      ****             }
 780:.\main.c      ****             break;
 2886              		.loc 1 780 0
 2887 02b4 01E0     		b	.L143
 2888              	.L175:
 2889 02b6 00E0     		b	.L143
 2890              	.L187:
 653:.\main.c      ****             break;
 2891              		.loc 1 653 0
 2892 02b8 C046     		mov	r8, r8
 2893              	.L143:
 781:.\main.c      ****     }
 782:.\main.c      ****     
 783:.\main.c      ****     switch(elbow_state){ //transitions
 2894              		.loc 1 783 0
 2895 02ba 144B     		ldr	r3, .L189
 2896 02bc 1B78     		ldrb	r3, [r3]
 2897 02be 012B     		cmp	r3, #1
 2898 02c0 0CD0     		beq	.L177
 2899 02c2 02DC     		bgt	.L178
 2900 02c4 002B     		cmp	r3, #0
 2901 02c6 05D0     		beq	.L179
 2902 02c8 34E0     		b	.L176
 2903              	.L178:
 2904 02ca 022B     		cmp	r3, #2
 2905 02cc 0AD0     		beq	.L180
 2906 02ce 032B     		cmp	r3, #3
 2907 02d0 14D0     		beq	.L181
 2908 02d2 2FE0     		b	.L176
 2909              	.L179:
 784:.\main.c      ****         case elbw_start:
 785:.\main.c      ****             elbow_state = elbw_init;
 2910              		.loc 1 785 0
 2911 02d4 0D4B     		ldr	r3, .L189
 2912 02d6 0122     		mov	r2, #1
 2913 02d8 1A70     		strb	r2, [r3]
 786:.\main.c      ****             break;
 2914              		.loc 1 786 0
 2915 02da 2BE0     		b	.L176
 2916              	.L177:
 787:.\main.c      ****         
 788:.\main.c      ****         case elbw_init:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 67


 789:.\main.c      ****             elbow_state = elbw_wait;
 2917              		.loc 1 789 0
 2918 02dc 0B4B     		ldr	r3, .L189
 2919 02de 0322     		mov	r2, #3
 2920 02e0 1A70     		strb	r2, [r3]
 790:.\main.c      ****             break;
 2921              		.loc 1 790 0
 2922 02e2 27E0     		b	.L176
 2923              	.L180:
 791:.\main.c      ****         
 792:.\main.c      ****         case elbw_execute:
 793:.\main.c      ****             if(ELBOW_FLAG)
 2924              		.loc 1 793 0
 2925 02e4 104B     		ldr	r3, .L189+28
 2926 02e6 1B78     		ldrb	r3, [r3]
 2927 02e8 002B     		cmp	r3, #0
 2928 02ea 03D0     		beq	.L182
 794:.\main.c      ****             {
 795:.\main.c      ****                 elbow_state = elbw_execute;
 2929              		.loc 1 795 0
 2930 02ec 074B     		ldr	r3, .L189
 2931 02ee 0222     		mov	r2, #2
 2932 02f0 1A70     		strb	r2, [r3]
 796:.\main.c      ****             }
 797:.\main.c      ****             else
 798:.\main.c      ****             {
 799:.\main.c      ****                 elbow_state = elbw_wait;
 800:.\main.c      ****             }
 801:.\main.c      ****             break;
 2933              		.loc 1 801 0
 2934 02f2 1FE0     		b	.L176
 2935              	.L182:
 799:.\main.c      ****                 elbow_state = elbw_wait;
 2936              		.loc 1 799 0
 2937 02f4 054B     		ldr	r3, .L189
 2938 02f6 0322     		mov	r2, #3
 2939 02f8 1A70     		strb	r2, [r3]
 2940              		.loc 1 801 0
 2941 02fa 1BE0     		b	.L176
 2942              	.L181:
 802:.\main.c      ****         
 803:.\main.c      ****         case elbw_wait:
 804:.\main.c      ****             if(ELBOW_FLAG)
 2943              		.loc 1 804 0
 2944 02fc 0A4B     		ldr	r3, .L189+28
 2945 02fe 1B78     		ldrb	r3, [r3]
 2946 0300 002B     		cmp	r3, #0
 2947 0302 13D0     		beq	.L184
 805:.\main.c      ****             {
 806:.\main.c      ****                 elbow_state = elbw_execute;
 2948              		.loc 1 806 0
 2949 0304 014B     		ldr	r3, .L189
 2950 0306 0222     		mov	r2, #2
 2951 0308 1A70     		strb	r2, [r3]
 807:.\main.c      ****             }
 808:.\main.c      ****             else
 809:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 68


 810:.\main.c      ****                 elbow_state = elbw_wait; 
 811:.\main.c      ****             }
 812:.\main.c      ****             break;
 2952              		.loc 1 812 0
 2953 030a 12E0     		b	.L188
 2954              	.L190:
 2955              		.align	2
 2956              	.L189:
 2957 030c 00000000 		.word	elbow_state
 2958 0310 DC050000 		.word	1500
 2959 0314 00000000 		.word	data_array
 2960 0318 00000000 		.word	ELBOW_LOWER_BOUND
 2961 031c DB050000 		.word	1499
 2962 0320 E7030000 		.word	999
 2963 0324 00000000 		.word	ELBOW_UPPER_BOUND
 2964 0328 00000000 		.word	ELBOW_FLAG
 2965              	.L184:
 810:.\main.c      ****                 elbow_state = elbw_wait; 
 2966              		.loc 1 810 0
 2967 032c 044B     		ldr	r3, .L191
 2968 032e 0322     		mov	r2, #3
 2969 0330 1A70     		strb	r2, [r3]
 2970              	.L188:
 2971              		.loc 1 812 0
 2972 0332 C046     		mov	r8, r8
 2973              	.L176:
 813:.\main.c      ****     }  
 814:.\main.c      ****     return elbw_arr_cspot;
 2974              		.loc 1 814 0
 2975 0334 FB1D     		add	r3, r7, #7
 2976 0336 1B78     		ldrb	r3, [r3]
 815:.\main.c      **** }
 2977              		.loc 1 815 0
 2978 0338 181C     		mov	r0, r3
 2979 033a BD46     		mov	sp, r7
 2980 033c 05B0     		add	sp, sp, #20
 2981              		@ sp needed
 2982 033e 90BD     		pop	{r4, r7, pc}
 2983              	.L192:
 2984              		.align	2
 2985              	.L191:
 2986 0340 00000000 		.word	elbow_state
 2987              		.cfi_endproc
 2988              	.LFE50:
 2989              		.size	elbow, .-elbow
 2990              		.comm	shoulder_state,1,1
 2991              		.section	.text.shoulder,"ax",%progbits
 2992              		.align	2
 2993              		.global	shoulder
 2994              		.code	16
 2995              		.thumb_func
 2996              		.type	shoulder, %function
 2997              	shoulder:
 2998              	.LFB51:
 816:.\main.c      **** 
 817:.\main.c      **** //control the shoulder
 818:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 69


 819:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 820:.\main.c      **** { 
 2999              		.loc 1 820 0
 3000              		.cfi_startproc
 3001 0000 90B5     		push	{r4, r7, lr}
 3002              		.cfi_def_cfa_offset 12
 3003              		.cfi_offset 4, -12
 3004              		.cfi_offset 7, -8
 3005              		.cfi_offset 14, -4
 3006 0002 85B0     		sub	sp, sp, #20
 3007              		.cfi_def_cfa_offset 32
 3008 0004 00AF     		add	r7, sp, #0
 3009              		.cfi_def_cfa_register 7
 3010 0006 021C     		mov	r2, r0
 3011 0008 3960     		str	r1, [r7]
 3012 000a FB1D     		add	r3, r7, #7
 3013 000c 1A70     		strb	r2, [r3]
 821:.\main.c      ****     //take instruction from data_array
 822:.\main.c      ****     //smooth input
 823:.\main.c      ****     //actuate the shoulder using PWM
 824:.\main.c      ****     //get feedback
 825:.\main.c      ****     uint8 i;
 826:.\main.c      ****     uint16 avg;
 827:.\main.c      ****     uint16 command;
 828:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 3014              		.loc 1 828 0
 3015 000e 3C1C     		mov	r4, r7
 3016 0010 0C34     		add	r4, r4, #12
 3017 0012 0020     		mov	r0, #0
 3018 0014 FFF7FEFF 		bl	potFeedback
 3019 0018 031C     		mov	r3, r0
 3020 001a 2380     		strh	r3, [r4]
 829:.\main.c      ****     
 830:.\main.c      ****     switch(shoulder_state){ //actions
 3021              		.loc 1 830 0
 3022 001c BB4B     		ldr	r3, .L240
 3023 001e 1B78     		ldrb	r3, [r3]
 3024 0020 012B     		cmp	r3, #1
 3025 0022 07D0     		beq	.L195
 3026 0024 00DC     		bgt	.LCB2688
 3027 0026 47E1     		b	.L238	@long jump
 3028              	.LCB2688:
 3029 0028 022B     		cmp	r3, #2
 3030 002a 24D0     		beq	.L198
 3031 002c 032B     		cmp	r3, #3
 3032 002e 00D1     		bne	.LCB2692
 3033 0030 2EE1     		b	.L199	@long jump
 3034              	.LCB2692:
 3035 0032 42E1     		b	.L194
 3036              	.L195:
 831:.\main.c      ****         case shldr_start:
 832:.\main.c      ****             break;
 833:.\main.c      **** 
 834:.\main.c      ****         case shldr_init:
 835:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3037              		.loc 1 835 0
 3038 0034 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 70


 3039 0036 0F33     		add	r3, r3, #15
 3040 0038 0022     		mov	r2, #0
 3041 003a 1A70     		strb	r2, [r3]
 3042 003c 0EE0     		b	.L200
 3043              	.L201:
 836:.\main.c      ****             {
 837:.\main.c      ****                 shoulder_array[i] = 1500;
 3044              		.loc 1 837 0 discriminator 2
 3045 003e 3B1C     		mov	r3, r7
 3046 0040 0F33     		add	r3, r3, #15
 3047 0042 1B78     		ldrb	r3, [r3]
 3048 0044 5B00     		lsl	r3, r3, #1
 3049 0046 3A68     		ldr	r2, [r7]
 3050 0048 D318     		add	r3, r2, r3
 3051 004a B14A     		ldr	r2, .L240+4
 3052 004c 1A80     		strh	r2, [r3]
 835:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3053              		.loc 1 835 0 discriminator 2
 3054 004e 3B1C     		mov	r3, r7
 3055 0050 0F33     		add	r3, r3, #15
 3056 0052 1A78     		ldrb	r2, [r3]
 3057 0054 3B1C     		mov	r3, r7
 3058 0056 0F33     		add	r3, r3, #15
 3059 0058 0132     		add	r2, r2, #1
 3060 005a 1A70     		strb	r2, [r3]
 3061              	.L200:
 835:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3062              		.loc 1 835 0 is_stmt 0 discriminator 1
 3063 005c 3B1C     		mov	r3, r7
 3064 005e 0F33     		add	r3, r3, #15
 3065 0060 1B78     		ldrb	r3, [r3]
 3066 0062 132B     		cmp	r3, #19
 3067 0064 EBD9     		bls	.L201
 838:.\main.c      ****             }
 839:.\main.c      ****             shldr_arr_cspot = 0;
 3068              		.loc 1 839 0 is_stmt 1
 3069 0066 FB1D     		add	r3, r7, #7
 3070 0068 0022     		mov	r2, #0
 3071 006a 1A70     		strb	r2, [r3]
 840:.\main.c      ****                         
 841:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 3072              		.loc 1 841 0
 3073 006c A84B     		ldr	r3, .L240+4
 3074 006e 181C     		mov	r0, r3
 3075 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 842:.\main.c      ****             break;
 3076              		.loc 1 842 0
 3077 0074 21E1     		b	.L194
 3078              	.L198:
 843:.\main.c      **** 
 844:.\main.c      ****         case shldr_execute:
 845:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 3079              		.loc 1 845 0
 3080 0076 3C1C     		mov	r4, r7
 3081 0078 0A34     		add	r4, r4, #10
 3082 007a A64B     		ldr	r3, .L240+8
 3083 007c 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 71


 3084 007e 0C21     		mov	r1, #12
 3085 0080 0D22     		mov	r2, #13
 3086 0082 FFF7FEFF 		bl	make_command
 3087 0086 031C     		mov	r3, r0
 3088 0088 2380     		strh	r3, [r4]
 846:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 3089              		.loc 1 846 0
 3090 008a FB1D     		add	r3, r7, #7
 3091 008c 1B78     		ldrb	r3, [r3]
 3092 008e 5B00     		lsl	r3, r3, #1
 3093 0090 3A68     		ldr	r2, [r7]
 3094 0092 D318     		add	r3, r2, r3
 3095 0094 3A1C     		mov	r2, r7
 3096 0096 0A32     		add	r2, r2, #10
 3097 0098 1288     		ldrh	r2, [r2]
 3098 009a 1A80     		strh	r2, [r3]
 847:.\main.c      ****         
 848:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 3099              		.loc 1 848 0
 3100 009c FB1D     		add	r3, r7, #7
 3101 009e 1B78     		ldrb	r3, [r3]
 3102 00a0 122B     		cmp	r3, #18
 3103 00a2 05D8     		bhi	.L202
 849:.\main.c      ****             {
 850:.\main.c      ****                 shldr_arr_cspot++;
 3104              		.loc 1 850 0
 3105 00a4 FB1D     		add	r3, r7, #7
 3106 00a6 1A78     		ldrb	r2, [r3]
 3107 00a8 FB1D     		add	r3, r7, #7
 3108 00aa 0132     		add	r2, r2, #1
 3109 00ac 1A70     		strb	r2, [r3]
 3110 00ae 02E0     		b	.L203
 3111              	.L202:
 851:.\main.c      ****             }
 852:.\main.c      ****             else
 853:.\main.c      ****             {
 854:.\main.c      ****                 shldr_arr_cspot = 0;
 3112              		.loc 1 854 0
 3113 00b0 FB1D     		add	r3, r7, #7
 3114 00b2 0022     		mov	r2, #0
 3115 00b4 1A70     		strb	r2, [r3]
 3116              	.L203:
 855:.\main.c      ****             }
 856:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 3117              		.loc 1 856 0
 3118 00b6 3C1C     		mov	r4, r7
 3119 00b8 0834     		add	r4, r4, #8
 3120 00ba 3B68     		ldr	r3, [r7]
 3121 00bc 181C     		mov	r0, r3
 3122 00be 1421     		mov	r1, #20
 3123 00c0 FFF7FEFF 		bl	average
 3124 00c4 031C     		mov	r3, r0
 3125 00c6 2380     		strh	r3, [r4]
 857:.\main.c      ****             
 858:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 3126              		.loc 1 858 0
 3127 00c8 FFF7FEFF 		bl	stop_shdr_dn_Read
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 72


 3128 00cc 031C     		mov	r3, r0
 3129 00ce 002B     		cmp	r3, #0
 3130 00d0 05D0     		beq	.L204
 3131              		.loc 1 858 0 is_stmt 0 discriminator 1
 3132 00d2 FFF7FEFF 		bl	stop_shdr_up_Read
 3133 00d6 031C     		mov	r3, r0
 3134 00d8 002B     		cmp	r3, #0
 3135 00da 00D0     		beq	.LCB2788
 3136 00dc 6FE0     		b	.L205	@long jump
 3137              	.LCB2788:
 3138              	.L204:
 859:.\main.c      ****             {
 860:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3139              		.loc 1 860 0 is_stmt 1
 3140 00de 3B1C     		mov	r3, r7
 3141 00e0 0C33     		add	r3, r3, #12
 3142 00e2 1A88     		ldrh	r2, [r3]
 3143 00e4 8C4B     		ldr	r3, .L240+12
 3144 00e6 1B68     		ldr	r3, [r3]
 3145 00e8 9A42     		cmp	r2, r3
 3146 00ea 23D8     		bhi	.L206
 861:.\main.c      ****                 {
 862:.\main.c      ****                     if (avg < 1500)
 3147              		.loc 1 862 0
 3148 00ec 3B1C     		mov	r3, r7
 3149 00ee 0833     		add	r3, r3, #8
 3150 00f0 1A88     		ldrh	r2, [r3]
 3151 00f2 8A4B     		ldr	r3, .L240+16
 3152 00f4 9A42     		cmp	r2, r3
 3153 00f6 04D8     		bhi	.L207
 863:.\main.c      ****                     {
 864:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3154              		.loc 1 864 0
 3155 00f8 854B     		ldr	r3, .L240+4
 3156 00fa 181C     		mov	r0, r3
 3157 00fc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3158 0100 5CE0     		b	.L210
 3159              	.L207:
 865:.\main.c      ****                     }
 866:.\main.c      ****                     else
 867:.\main.c      ****                     {
 868:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3160              		.loc 1 868 0
 3161 0102 3B1C     		mov	r3, r7
 3162 0104 0833     		add	r3, r3, #8
 3163 0106 1A88     		ldrh	r2, [r3]
 3164 0108 FA23     		mov	r3, #250
 3165 010a DB00     		lsl	r3, r3, #3
 3166 010c 9A42     		cmp	r2, r3
 3167 010e 0CD8     		bhi	.L209
 3168              		.loc 1 868 0 is_stmt 0 discriminator 1
 3169 0110 3B1C     		mov	r3, r7
 3170 0112 0833     		add	r3, r3, #8
 3171 0114 1A88     		ldrh	r2, [r3]
 3172 0116 824B     		ldr	r3, .L240+20
 3173 0118 9A42     		cmp	r2, r3
 3174 011a 06D9     		bls	.L209
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 73


 869:.\main.c      ****                         {
 870:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3175              		.loc 1 870 0 is_stmt 1
 3176 011c 3B1C     		mov	r3, r7
 3177 011e 0833     		add	r3, r3, #8
 3178 0120 1B88     		ldrh	r3, [r3]
 3179 0122 181C     		mov	r0, r3
 3180 0124 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3181 0128 48E0     		b	.L210
 3182              	.L209:
 871:.\main.c      ****                         }
 872:.\main.c      ****                         else
 873:.\main.c      ****                         {
 874:.\main.c      ****                             //throw error
 875:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3183              		.loc 1 875 0
 3184 012a 794B     		ldr	r3, .L240+4
 3185 012c 181C     		mov	r0, r3
 3186 012e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3187 0132 43E0     		b	.L210
 3188              	.L206:
 876:.\main.c      ****                         }
 877:.\main.c      ****                     }
 878:.\main.c      ****                 }
 879:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 3189              		.loc 1 879 0
 3190 0134 3B1C     		mov	r3, r7
 3191 0136 0C33     		add	r3, r3, #12
 3192 0138 1A88     		ldrh	r2, [r3]
 3193 013a 7A4B     		ldr	r3, .L240+24
 3194 013c 1B68     		ldr	r3, [r3]
 3195 013e 9A42     		cmp	r2, r3
 3196 0140 23D3     		bcc	.L211
 880:.\main.c      ****                 {
 881:.\main.c      ****                     if(avg > 1500)
 3197              		.loc 1 881 0
 3198 0142 3B1C     		mov	r3, r7
 3199 0144 0833     		add	r3, r3, #8
 3200 0146 1A88     		ldrh	r2, [r3]
 3201 0148 714B     		ldr	r3, .L240+4
 3202 014a 9A42     		cmp	r2, r3
 3203 014c 04D9     		bls	.L212
 882:.\main.c      ****                     {
 883:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3204              		.loc 1 883 0
 3205 014e 704B     		ldr	r3, .L240+4
 3206 0150 181C     		mov	r0, r3
 3207 0152 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3208 0156 31E0     		b	.L210
 3209              	.L212:
 884:.\main.c      ****                     }
 885:.\main.c      ****                     else
 886:.\main.c      ****                     {
 887:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3210              		.loc 1 887 0
 3211 0158 3B1C     		mov	r3, r7
 3212 015a 0833     		add	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 74


 3213 015c 1A88     		ldrh	r2, [r3]
 3214 015e FA23     		mov	r3, #250
 3215 0160 DB00     		lsl	r3, r3, #3
 3216 0162 9A42     		cmp	r2, r3
 3217 0164 0CD8     		bhi	.L214
 3218              		.loc 1 887 0 is_stmt 0 discriminator 1
 3219 0166 3B1C     		mov	r3, r7
 3220 0168 0833     		add	r3, r3, #8
 3221 016a 1A88     		ldrh	r2, [r3]
 3222 016c 6C4B     		ldr	r3, .L240+20
 3223 016e 9A42     		cmp	r2, r3
 3224 0170 06D9     		bls	.L214
 888:.\main.c      ****                         {
 889:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3225              		.loc 1 889 0 is_stmt 1
 3226 0172 3B1C     		mov	r3, r7
 3227 0174 0833     		add	r3, r3, #8
 3228 0176 1B88     		ldrh	r3, [r3]
 3229 0178 181C     		mov	r0, r3
 3230 017a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3231 017e 1DE0     		b	.L210
 3232              	.L214:
 890:.\main.c      ****                         }
 891:.\main.c      ****                         else
 892:.\main.c      ****                         {
 893:.\main.c      ****                             //throw error
 894:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3233              		.loc 1 894 0
 3234 0180 634B     		ldr	r3, .L240+4
 3235 0182 181C     		mov	r0, r3
 3236 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3237 0188 18E0     		b	.L210
 3238              	.L211:
 895:.\main.c      ****                         }
 896:.\main.c      ****                     }
 897:.\main.c      ****                 }
 898:.\main.c      ****                 else
 899:.\main.c      ****                 {
 900:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3239              		.loc 1 900 0
 3240 018a 3B1C     		mov	r3, r7
 3241 018c 0833     		add	r3, r3, #8
 3242 018e 1A88     		ldrh	r2, [r3]
 3243 0190 FA23     		mov	r3, #250
 3244 0192 DB00     		lsl	r3, r3, #3
 3245 0194 9A42     		cmp	r2, r3
 3246 0196 0CD8     		bhi	.L215
 3247              		.loc 1 900 0 is_stmt 0 discriminator 1
 3248 0198 3B1C     		mov	r3, r7
 3249 019a 0833     		add	r3, r3, #8
 3250 019c 1A88     		ldrh	r2, [r3]
 3251 019e 604B     		ldr	r3, .L240+20
 3252 01a0 9A42     		cmp	r2, r3
 3253 01a2 06D9     		bls	.L215
 901:.\main.c      ****                     {
 902:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3254              		.loc 1 902 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 75


 3255 01a4 3B1C     		mov	r3, r7
 3256 01a6 0833     		add	r3, r3, #8
 3257 01a8 1B88     		ldrh	r3, [r3]
 3258 01aa 181C     		mov	r0, r3
 3259 01ac FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3260 01b0 04E0     		b	.L210
 3261              	.L215:
 903:.\main.c      ****                     }
 904:.\main.c      ****                     else
 905:.\main.c      ****                     {
 906:.\main.c      ****                         //throw error
 907:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3262              		.loc 1 907 0
 3263 01b2 574B     		ldr	r3, .L240+4
 3264 01b4 181C     		mov	r0, r3
 3265 01b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 860:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3266              		.loc 1 860 0
 3267 01ba 65E0     		b	.L216
 3268              	.L210:
 3269 01bc 64E0     		b	.L216
 3270              	.L205:
 908:.\main.c      ****                     }
 909:.\main.c      ****                 }
 910:.\main.c      ****             }
 911:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 912:.\main.c      ****             {
 913:.\main.c      ****                 if(!stop_elb_dn_Read()){
 3271              		.loc 1 913 0
 3272 01be FFF7FEFF 		bl	stop_elb_dn_Read
 3273 01c2 031C     		mov	r3, r0
 3274 01c4 002B     		cmp	r3, #0
 3275 01c6 2BD1     		bne	.L217
 914:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) + BOUND_OFFSET;
 3276              		.loc 1 914 0
 3277 01c8 0020     		mov	r0, #0
 3278 01ca FFF7FEFF 		bl	potFeedback
 3279 01ce 031C     		mov	r3, r0
 3280 01d0 1433     		add	r3, r3, #20
 3281 01d2 1A1C     		mov	r2, r3
 3282 01d4 504B     		ldr	r3, .L240+12
 3283 01d6 1A60     		str	r2, [r3]
 915:.\main.c      ****                     if (avg < 1500)
 3284              		.loc 1 915 0
 3285 01d8 3B1C     		mov	r3, r7
 3286 01da 0833     		add	r3, r3, #8
 3287 01dc 1A88     		ldrh	r2, [r3]
 3288 01de 4F4B     		ldr	r3, .L240+16
 3289 01e0 9A42     		cmp	r2, r3
 3290 01e2 04D8     		bhi	.L218
 916:.\main.c      ****                     {
 917:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3291              		.loc 1 917 0
 3292 01e4 4A4B     		ldr	r3, .L240+4
 3293 01e6 181C     		mov	r0, r3
 3294 01e8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3295 01ec 4CE0     		b	.L216
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 76


 3296              	.L218:
 918:.\main.c      ****                     }
 919:.\main.c      ****                     else
 920:.\main.c      ****                     {
 921:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3297              		.loc 1 921 0
 3298 01ee 3B1C     		mov	r3, r7
 3299 01f0 0833     		add	r3, r3, #8
 3300 01f2 1A88     		ldrh	r2, [r3]
 3301 01f4 FA23     		mov	r3, #250
 3302 01f6 DB00     		lsl	r3, r3, #3
 3303 01f8 9A42     		cmp	r2, r3
 3304 01fa 0CD8     		bhi	.L220
 3305              		.loc 1 921 0 is_stmt 0 discriminator 1
 3306 01fc 3B1C     		mov	r3, r7
 3307 01fe 0833     		add	r3, r3, #8
 3308 0200 1A88     		ldrh	r2, [r3]
 3309 0202 474B     		ldr	r3, .L240+20
 3310 0204 9A42     		cmp	r2, r3
 3311 0206 06D9     		bls	.L220
 922:.\main.c      ****                         {
 923:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3312              		.loc 1 923 0 is_stmt 1
 3313 0208 3B1C     		mov	r3, r7
 3314 020a 0833     		add	r3, r3, #8
 3315 020c 1B88     		ldrh	r3, [r3]
 3316 020e 181C     		mov	r0, r3
 3317 0210 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3318 0214 38E0     		b	.L216
 3319              	.L220:
 924:.\main.c      ****                         }
 925:.\main.c      ****                         else
 926:.\main.c      ****                         {
 927:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3320              		.loc 1 927 0
 3321 0216 3E4B     		ldr	r3, .L240+4
 3322 0218 181C     		mov	r0, r3
 3323 021a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3324 021e 33E0     		b	.L216
 3325              	.L217:
 928:.\main.c      ****                         }
 929:.\main.c      ****                     }
 930:.\main.c      ****                 }
 931:.\main.c      ****                 else if(!stop_elb_up_Read()){
 3326              		.loc 1 931 0
 3327 0220 FFF7FEFF 		bl	stop_elb_up_Read
 3328 0224 031C     		mov	r3, r0
 3329 0226 002B     		cmp	r3, #0
 3330 0228 2BD1     		bne	.L221
 932:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) - BOUND_OFFSET;
 3331              		.loc 1 932 0
 3332 022a 0020     		mov	r0, #0
 3333 022c FFF7FEFF 		bl	potFeedback
 3334 0230 031C     		mov	r3, r0
 3335 0232 143B     		sub	r3, r3, #20
 3336 0234 1A1C     		mov	r2, r3
 3337 0236 3B4B     		ldr	r3, .L240+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 77


 3338 0238 1A60     		str	r2, [r3]
 933:.\main.c      ****                     if(avg > 1500)
 3339              		.loc 1 933 0
 3340 023a 3B1C     		mov	r3, r7
 3341 023c 0833     		add	r3, r3, #8
 3342 023e 1A88     		ldrh	r2, [r3]
 3343 0240 334B     		ldr	r3, .L240+4
 3344 0242 9A42     		cmp	r2, r3
 3345 0244 04D9     		bls	.L222
 934:.\main.c      ****                     {
 935:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3346              		.loc 1 935 0
 3347 0246 324B     		ldr	r3, .L240+4
 3348 0248 181C     		mov	r0, r3
 3349 024a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3350 024e 1BE0     		b	.L216
 3351              	.L222:
 936:.\main.c      ****                     }
 937:.\main.c      ****                     else
 938:.\main.c      ****                     {
 939:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3352              		.loc 1 939 0
 3353 0250 3B1C     		mov	r3, r7
 3354 0252 0833     		add	r3, r3, #8
 3355 0254 1A88     		ldrh	r2, [r3]
 3356 0256 FA23     		mov	r3, #250
 3357 0258 DB00     		lsl	r3, r3, #3
 3358 025a 9A42     		cmp	r2, r3
 3359 025c 0CD8     		bhi	.L224
 3360              		.loc 1 939 0 is_stmt 0 discriminator 1
 3361 025e 3B1C     		mov	r3, r7
 3362 0260 0833     		add	r3, r3, #8
 3363 0262 1A88     		ldrh	r2, [r3]
 3364 0264 2E4B     		ldr	r3, .L240+20
 3365 0266 9A42     		cmp	r2, r3
 3366 0268 06D9     		bls	.L224
 940:.\main.c      ****                         {
 941:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3367              		.loc 1 941 0 is_stmt 1
 3368 026a 3B1C     		mov	r3, r7
 3369 026c 0833     		add	r3, r3, #8
 3370 026e 1B88     		ldrh	r3, [r3]
 3371 0270 181C     		mov	r0, r3
 3372 0272 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3373 0276 07E0     		b	.L216
 3374              	.L224:
 942:.\main.c      ****                         }
 943:.\main.c      ****                         else
 944:.\main.c      ****                         {
 945:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3375              		.loc 1 945 0
 3376 0278 254B     		ldr	r3, .L240+4
 3377 027a 181C     		mov	r0, r3
 3378 027c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3379 0280 02E0     		b	.L216
 3380              	.L221:
 946:.\main.c      ****                         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 78


 947:.\main.c      ****                     }
 948:.\main.c      ****                 }
 949:.\main.c      ****                 else{
 950:.\main.c      ****                     LED_Write(1);
 3381              		.loc 1 950 0
 3382 0282 0120     		mov	r0, #1
 3383 0284 FFF7FEFF 		bl	LED_Write
 3384              	.L216:
 951:.\main.c      ****                 }
 952:.\main.c      ****             }
 953:.\main.c      ****             SHOULDER_FLAG = 0;
 3385              		.loc 1 953 0
 3386 0288 274B     		ldr	r3, .L240+28
 3387 028a 0022     		mov	r2, #0
 3388 028c 1A70     		strb	r2, [r3]
 954:.\main.c      ****             break;
 3389              		.loc 1 954 0
 3390 028e 14E0     		b	.L194
 3391              	.L199:
 955:.\main.c      ****             
 956:.\main.c      ****         case shldr_wait:
 957:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3392              		.loc 1 957 0
 3393 0290 3B1C     		mov	r3, r7
 3394 0292 0C33     		add	r3, r3, #12
 3395 0294 1A88     		ldrh	r2, [r3]
 3396 0296 204B     		ldr	r3, .L240+12
 3397 0298 1B68     		ldr	r3, [r3]
 3398 029a 9A42     		cmp	r2, r3
 3399 029c 06D9     		bls	.L225
 3400              		.loc 1 957 0 is_stmt 0 discriminator 1
 3401 029e 3B1C     		mov	r3, r7
 3402 02a0 0C33     		add	r3, r3, #12
 3403 02a2 1A88     		ldrh	r2, [r3]
 3404 02a4 1F4B     		ldr	r3, .L240+24
 3405 02a6 1B68     		ldr	r3, [r3]
 3406 02a8 9A42     		cmp	r2, r3
 3407 02aa 04D3     		bcc	.L226
 3408              	.L225:
 958:.\main.c      ****             {
 959:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3409              		.loc 1 959 0 is_stmt 1
 3410 02ac 184B     		ldr	r3, .L240+4
 3411 02ae 181C     		mov	r0, r3
 3412 02b0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 960:.\main.c      ****             }
 961:.\main.c      ****             break;
 3413              		.loc 1 961 0
 3414 02b4 01E0     		b	.L194
 3415              	.L226:
 3416 02b6 00E0     		b	.L194
 3417              	.L238:
 832:.\main.c      ****             break;
 3418              		.loc 1 832 0
 3419 02b8 C046     		mov	r8, r8
 3420              	.L194:
 962:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 79


 963:.\main.c      ****     
 964:.\main.c      ****     switch(shoulder_state){ //transitions
 3421              		.loc 1 964 0
 3422 02ba 144B     		ldr	r3, .L240
 3423 02bc 1B78     		ldrb	r3, [r3]
 3424 02be 012B     		cmp	r3, #1
 3425 02c0 0CD0     		beq	.L228
 3426 02c2 02DC     		bgt	.L229
 3427 02c4 002B     		cmp	r3, #0
 3428 02c6 05D0     		beq	.L230
 3429 02c8 34E0     		b	.L227
 3430              	.L229:
 3431 02ca 022B     		cmp	r3, #2
 3432 02cc 0AD0     		beq	.L231
 3433 02ce 032B     		cmp	r3, #3
 3434 02d0 14D0     		beq	.L232
 3435 02d2 2FE0     		b	.L227
 3436              	.L230:
 965:.\main.c      ****         case shldr_start:
 966:.\main.c      ****             shoulder_state = shldr_init;
 3437              		.loc 1 966 0
 3438 02d4 0D4B     		ldr	r3, .L240
 3439 02d6 0122     		mov	r2, #1
 3440 02d8 1A70     		strb	r2, [r3]
 967:.\main.c      ****             break;
 3441              		.loc 1 967 0
 3442 02da 2BE0     		b	.L227
 3443              	.L228:
 968:.\main.c      ****         
 969:.\main.c      ****         case shldr_init:
 970:.\main.c      ****             shoulder_state = shldr_wait;
 3444              		.loc 1 970 0
 3445 02dc 0B4B     		ldr	r3, .L240
 3446 02de 0322     		mov	r2, #3
 3447 02e0 1A70     		strb	r2, [r3]
 971:.\main.c      ****             break;
 3448              		.loc 1 971 0
 3449 02e2 27E0     		b	.L227
 3450              	.L231:
 972:.\main.c      ****         
 973:.\main.c      ****         case shldr_execute:
 974:.\main.c      ****             if(SHOULDER_FLAG)
 3451              		.loc 1 974 0
 3452 02e4 104B     		ldr	r3, .L240+28
 3453 02e6 1B78     		ldrb	r3, [r3]
 3454 02e8 002B     		cmp	r3, #0
 3455 02ea 03D0     		beq	.L233
 975:.\main.c      ****             {
 976:.\main.c      ****                 shoulder_state = shldr_execute;
 3456              		.loc 1 976 0
 3457 02ec 074B     		ldr	r3, .L240
 3458 02ee 0222     		mov	r2, #2
 3459 02f0 1A70     		strb	r2, [r3]
 977:.\main.c      ****             }
 978:.\main.c      ****             else
 979:.\main.c      ****             {
 980:.\main.c      ****                 shoulder_state = shldr_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 80


 981:.\main.c      ****             }
 982:.\main.c      ****             break;
 3460              		.loc 1 982 0
 3461 02f2 1FE0     		b	.L227
 3462              	.L233:
 980:.\main.c      ****                 shoulder_state = shldr_wait;
 3463              		.loc 1 980 0
 3464 02f4 054B     		ldr	r3, .L240
 3465 02f6 0322     		mov	r2, #3
 3466 02f8 1A70     		strb	r2, [r3]
 3467              		.loc 1 982 0
 3468 02fa 1BE0     		b	.L227
 3469              	.L232:
 983:.\main.c      ****         
 984:.\main.c      ****         case shldr_wait:
 985:.\main.c      ****             if(SHOULDER_FLAG)
 3470              		.loc 1 985 0
 3471 02fc 0A4B     		ldr	r3, .L240+28
 3472 02fe 1B78     		ldrb	r3, [r3]
 3473 0300 002B     		cmp	r3, #0
 3474 0302 13D0     		beq	.L235
 986:.\main.c      ****             {
 987:.\main.c      ****                 shoulder_state = shldr_execute;
 3475              		.loc 1 987 0
 3476 0304 014B     		ldr	r3, .L240
 3477 0306 0222     		mov	r2, #2
 3478 0308 1A70     		strb	r2, [r3]
 988:.\main.c      ****             }
 989:.\main.c      ****             else
 990:.\main.c      ****             {
 991:.\main.c      ****                 shoulder_state = shldr_wait; 
 992:.\main.c      ****             }
 993:.\main.c      ****             break;
 3479              		.loc 1 993 0
 3480 030a 12E0     		b	.L239
 3481              	.L241:
 3482              		.align	2
 3483              	.L240:
 3484 030c 00000000 		.word	shoulder_state
 3485 0310 DC050000 		.word	1500
 3486 0314 00000000 		.word	data_array
 3487 0318 00000000 		.word	SHOULDER_LOWER_BOUND
 3488 031c DB050000 		.word	1499
 3489 0320 E7030000 		.word	999
 3490 0324 00000000 		.word	SHOULDER_UPPER_BOUND
 3491 0328 00000000 		.word	SHOULDER_FLAG
 3492              	.L235:
 991:.\main.c      ****                 shoulder_state = shldr_wait; 
 3493              		.loc 1 991 0
 3494 032c 044B     		ldr	r3, .L242
 3495 032e 0322     		mov	r2, #3
 3496 0330 1A70     		strb	r2, [r3]
 3497              	.L239:
 3498              		.loc 1 993 0
 3499 0332 C046     		mov	r8, r8
 3500              	.L227:
 994:.\main.c      ****     }  
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 81


 995:.\main.c      ****     return shldr_arr_cspot;
 3501              		.loc 1 995 0
 3502 0334 FB1D     		add	r3, r7, #7
 3503 0336 1B78     		ldrb	r3, [r3]
 996:.\main.c      **** }
 3504              		.loc 1 996 0
 3505 0338 181C     		mov	r0, r3
 3506 033a BD46     		mov	sp, r7
 3507 033c 05B0     		add	sp, sp, #20
 3508              		@ sp needed
 3509 033e 90BD     		pop	{r4, r7, pc}
 3510              	.L243:
 3511              		.align	2
 3512              	.L242:
 3513 0340 00000000 		.word	shoulder_state
 3514              		.cfi_endproc
 3515              	.LFE51:
 3516              		.size	shoulder, .-shoulder
 3517              		.comm	baseAzimuth_state,1,1
 3518              		.section	.text.baseAzimuth,"ax",%progbits
 3519              		.align	2
 3520              		.global	baseAzimuth
 3521              		.code	16
 3522              		.thumb_func
 3523              		.type	baseAzimuth, %function
 3524              	baseAzimuth:
 3525              	.LFB52:
 997:.\main.c      **** 
 998:.\main.c      **** //control the turret
 999:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
1000:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
1001:.\main.c      **** { 
 3526              		.loc 1 1001 0
 3527              		.cfi_startproc
 3528 0000 90B5     		push	{r4, r7, lr}
 3529              		.cfi_def_cfa_offset 12
 3530              		.cfi_offset 4, -12
 3531              		.cfi_offset 7, -8
 3532              		.cfi_offset 14, -4
 3533 0002 85B0     		sub	sp, sp, #20
 3534              		.cfi_def_cfa_offset 32
 3535 0004 00AF     		add	r7, sp, #0
 3536              		.cfi_def_cfa_register 7
 3537 0006 021C     		mov	r2, r0
 3538 0008 3960     		str	r1, [r7]
 3539 000a FB1D     		add	r3, r7, #7
 3540 000c 1A70     		strb	r2, [r3]
1002:.\main.c      ****     //take instruction from data_array
1003:.\main.c      ****     //smooth input
1004:.\main.c      ****     //actuate the turret using PWM
1005:.\main.c      ****     uint8 i;
1006:.\main.c      ****     uint16 avg;
1007:.\main.c      ****     uint16 command;
1008:.\main.c      ****     
1009:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3541              		.loc 1 1009 0
 3542 000e 4E4B     		ldr	r3, .L268
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 82


 3543 0010 1B78     		ldrb	r3, [r3]
 3544 0012 012B     		cmp	r3, #1
 3545 0014 03D0     		beq	.L246
 3546 0016 63DD     		ble	.L266
 3547 0018 022B     		cmp	r3, #2
 3548 001a 21D0     		beq	.L249
1010:.\main.c      ****         case BA_start:
1011:.\main.c      ****             break;
1012:.\main.c      **** 
1013:.\main.c      ****         case BA_init:
1014:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
1015:.\main.c      ****             {
1016:.\main.c      ****                 baseAz_array[i] = 1500;
1017:.\main.c      ****             }
1018:.\main.c      ****             BA_arr_cspot = 0;
1019:.\main.c      ****             
1020:.\main.c      ****             BA_PWM_WriteCompare(1500);
1021:.\main.c      ****             break;
1022:.\main.c      **** 
1023:.\main.c      ****         case BA_execute:
1024:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
1025:.\main.c      ****             
1026:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
1027:.\main.c      **** //            
1028:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
1029:.\main.c      **** //            {
1030:.\main.c      **** //                BA_arr_cspot++;
1031:.\main.c      **** //            }
1032:.\main.c      **** //            else
1033:.\main.c      **** //            {
1034:.\main.c      **** //                BA_arr_cspot = 0;
1035:.\main.c      **** //            }
1036:.\main.c      ****             
1037:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
1038:.\main.c      ****             
1039:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
1040:.\main.c      ****             
1041:.\main.c      **** //            if(avg == 1000 || avg == 2000)
1042:.\main.c      **** //            {
1043:.\main.c      **** //
1044:.\main.c      **** //                temp_val = temp_val*(-1);
1045:.\main.c      **** //            }
1046:.\main.c      ****             
1047:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
1048:.\main.c      ****             {
1049:.\main.c      ****                 BA_PWM_WriteCompare(avg);
1050:.\main.c      ****             }
1051:.\main.c      ****             else
1052:.\main.c      ****             {
1053:.\main.c      ****                 LED_Write(1);
1054:.\main.c      **** 
1055:.\main.c      ****                 //throw error
1056:.\main.c      ****                 BA_PWM_WriteCompare(1500);
1057:.\main.c      ****             }
1058:.\main.c      ****             BA_FLAG = 0;
1059:.\main.c      ****             break;
1060:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 83


1061:.\main.c      ****         case BA_wait:
1062:.\main.c      ****             break;
 3549              		.loc 1 1062 0
 3550 001c 61E0     		b	.L245
 3551              	.L246:
1014:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3552              		.loc 1 1014 0
 3553 001e 3B1C     		mov	r3, r7
 3554 0020 0F33     		add	r3, r3, #15
 3555 0022 0022     		mov	r2, #0
 3556 0024 1A70     		strb	r2, [r3]
 3557 0026 0EE0     		b	.L251
 3558              	.L252:
1016:.\main.c      ****                 baseAz_array[i] = 1500;
 3559              		.loc 1 1016 0 discriminator 2
 3560 0028 3B1C     		mov	r3, r7
 3561 002a 0F33     		add	r3, r3, #15
 3562 002c 1B78     		ldrb	r3, [r3]
 3563 002e 5B00     		lsl	r3, r3, #1
 3564 0030 3A68     		ldr	r2, [r7]
 3565 0032 D318     		add	r3, r2, r3
 3566 0034 454A     		ldr	r2, .L268+4
 3567 0036 1A80     		strh	r2, [r3]
1014:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3568              		.loc 1 1014 0 discriminator 2
 3569 0038 3B1C     		mov	r3, r7
 3570 003a 0F33     		add	r3, r3, #15
 3571 003c 1A78     		ldrb	r2, [r3]
 3572 003e 3B1C     		mov	r3, r7
 3573 0040 0F33     		add	r3, r3, #15
 3574 0042 0132     		add	r2, r2, #1
 3575 0044 1A70     		strb	r2, [r3]
 3576              	.L251:
1014:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3577              		.loc 1 1014 0 is_stmt 0 discriminator 1
 3578 0046 3B1C     		mov	r3, r7
 3579 0048 0F33     		add	r3, r3, #15
 3580 004a 1B78     		ldrb	r3, [r3]
 3581 004c 132B     		cmp	r3, #19
 3582 004e EBD9     		bls	.L252
1018:.\main.c      ****             BA_arr_cspot = 0;
 3583              		.loc 1 1018 0 is_stmt 1
 3584 0050 FB1D     		add	r3, r7, #7
 3585 0052 0022     		mov	r2, #0
 3586 0054 1A70     		strb	r2, [r3]
1020:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3587              		.loc 1 1020 0
 3588 0056 3D4B     		ldr	r3, .L268+4
 3589 0058 181C     		mov	r0, r3
 3590 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
1021:.\main.c      ****             break;
 3591              		.loc 1 1021 0
 3592 005e 40E0     		b	.L245
 3593              	.L249:
1024:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3594              		.loc 1 1024 0
 3595 0060 3C1C     		mov	r4, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 84


 3596 0062 0C34     		add	r4, r4, #12
 3597 0064 3A4B     		ldr	r3, .L268+8
 3598 0066 181C     		mov	r0, r3
 3599 0068 0A21     		mov	r1, #10
 3600 006a 0B22     		mov	r2, #11
 3601 006c FFF7FEFF 		bl	make_command
 3602 0070 031C     		mov	r3, r0
 3603 0072 2380     		strh	r3, [r4]
1037:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3604              		.loc 1 1037 0
 3605 0074 FC1D     		add	r4, r7, #7
 3606 0076 FB1D     		add	r3, r7, #7
 3607 0078 1978     		ldrb	r1, [r3]
 3608 007a 3A68     		ldr	r2, [r7]
 3609 007c 3B1C     		mov	r3, r7
 3610 007e 0C33     		add	r3, r3, #12
 3611 0080 1B88     		ldrh	r3, [r3]
 3612 0082 081C     		mov	r0, r1
 3613 0084 111C     		mov	r1, r2
 3614 0086 1422     		mov	r2, #20
 3615 0088 FFF7FEFF 		bl	pos_to_vel
 3616 008c 031C     		mov	r3, r0
 3617 008e 2370     		strb	r3, [r4]
1039:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3618              		.loc 1 1039 0
 3619 0090 3C1C     		mov	r4, r7
 3620 0092 0A34     		add	r4, r4, #10
 3621 0094 3B68     		ldr	r3, [r7]
 3622 0096 181C     		mov	r0, r3
 3623 0098 1421     		mov	r1, #20
 3624 009a FFF7FEFF 		bl	average
 3625 009e 031C     		mov	r3, r0
 3626 00a0 2380     		strh	r3, [r4]
1047:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3627              		.loc 1 1047 0
 3628 00a2 3B1C     		mov	r3, r7
 3629 00a4 0A33     		add	r3, r3, #10
 3630 00a6 1A88     		ldrh	r2, [r3]
 3631 00a8 FA23     		mov	r3, #250
 3632 00aa DB00     		lsl	r3, r3, #3
 3633 00ac 9A42     		cmp	r2, r3
 3634 00ae 0CD8     		bhi	.L253
1047:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3635              		.loc 1 1047 0 is_stmt 0 discriminator 1
 3636 00b0 3B1C     		mov	r3, r7
 3637 00b2 0A33     		add	r3, r3, #10
 3638 00b4 1A88     		ldrh	r2, [r3]
 3639 00b6 274B     		ldr	r3, .L268+12
 3640 00b8 9A42     		cmp	r2, r3
 3641 00ba 06D9     		bls	.L253
1049:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3642              		.loc 1 1049 0 is_stmt 1
 3643 00bc 3B1C     		mov	r3, r7
 3644 00be 0A33     		add	r3, r3, #10
 3645 00c0 1B88     		ldrh	r3, [r3]
 3646 00c2 181C     		mov	r0, r3
 3647 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 85


 3648 00c8 06E0     		b	.L254
 3649              	.L253:
1053:.\main.c      ****                 LED_Write(1);
 3650              		.loc 1 1053 0
 3651 00ca 0120     		mov	r0, #1
 3652 00cc FFF7FEFF 		bl	LED_Write
1056:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3653              		.loc 1 1056 0
 3654 00d0 1E4B     		ldr	r3, .L268+4
 3655 00d2 181C     		mov	r0, r3
 3656 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3657              	.L254:
1058:.\main.c      ****             BA_FLAG = 0;
 3658              		.loc 1 1058 0
 3659 00d8 1F4B     		ldr	r3, .L268+16
 3660 00da 0022     		mov	r2, #0
 3661 00dc 1A70     		strb	r2, [r3]
1059:.\main.c      ****             break;
 3662              		.loc 1 1059 0
 3663 00de 00E0     		b	.L245
 3664              	.L266:
1011:.\main.c      ****             break;
 3665              		.loc 1 1011 0
 3666 00e0 C046     		mov	r8, r8
 3667              	.L245:
1063:.\main.c      ****     }
1064:.\main.c      ****     
1065:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3668              		.loc 1 1065 0
 3669 00e2 194B     		ldr	r3, .L268
 3670 00e4 1B78     		ldrb	r3, [r3]
 3671 00e6 012B     		cmp	r3, #1
 3672 00e8 0CD0     		beq	.L256
 3673 00ea 02DC     		bgt	.L257
 3674 00ec 002B     		cmp	r3, #0
 3675 00ee 05D0     		beq	.L258
 3676 00f0 24E0     		b	.L255
 3677              	.L257:
 3678 00f2 022B     		cmp	r3, #2
 3679 00f4 0AD0     		beq	.L259
 3680 00f6 032B     		cmp	r3, #3
 3681 00f8 14D0     		beq	.L260
 3682 00fa 1FE0     		b	.L255
 3683              	.L258:
1066:.\main.c      ****         case BA_start:
1067:.\main.c      ****             baseAzimuth_state = BA_init;
 3684              		.loc 1 1067 0
 3685 00fc 124B     		ldr	r3, .L268
 3686 00fe 0122     		mov	r2, #1
 3687 0100 1A70     		strb	r2, [r3]
1068:.\main.c      ****             break;
 3688              		.loc 1 1068 0
 3689 0102 1BE0     		b	.L255
 3690              	.L256:
1069:.\main.c      ****         
1070:.\main.c      ****         case BA_init:
1071:.\main.c      ****             baseAzimuth_state = BA_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 86


 3691              		.loc 1 1071 0
 3692 0104 104B     		ldr	r3, .L268
 3693 0106 0322     		mov	r2, #3
 3694 0108 1A70     		strb	r2, [r3]
1072:.\main.c      ****             break;
 3695              		.loc 1 1072 0
 3696 010a 17E0     		b	.L255
 3697              	.L259:
1073:.\main.c      ****         
1074:.\main.c      ****         case BA_execute:
1075:.\main.c      ****             if(BA_FLAG)
 3698              		.loc 1 1075 0
 3699 010c 124B     		ldr	r3, .L268+16
 3700 010e 1B78     		ldrb	r3, [r3]
 3701 0110 002B     		cmp	r3, #0
 3702 0112 03D0     		beq	.L261
1076:.\main.c      ****             {
1077:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3703              		.loc 1 1077 0
 3704 0114 0C4B     		ldr	r3, .L268
 3705 0116 0222     		mov	r2, #2
 3706 0118 1A70     		strb	r2, [r3]
1078:.\main.c      ****             }
1079:.\main.c      ****             else
1080:.\main.c      ****             {
1081:.\main.c      ****                 baseAzimuth_state = BA_wait;
1082:.\main.c      ****             }
1083:.\main.c      ****             break;
 3707              		.loc 1 1083 0
 3708 011a 0FE0     		b	.L255
 3709              	.L261:
1081:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3710              		.loc 1 1081 0
 3711 011c 0A4B     		ldr	r3, .L268
 3712 011e 0322     		mov	r2, #3
 3713 0120 1A70     		strb	r2, [r3]
 3714              		.loc 1 1083 0
 3715 0122 0BE0     		b	.L255
 3716              	.L260:
1084:.\main.c      ****         
1085:.\main.c      ****         case BA_wait:
1086:.\main.c      ****             if(BA_FLAG)
 3717              		.loc 1 1086 0
 3718 0124 0C4B     		ldr	r3, .L268+16
 3719 0126 1B78     		ldrb	r3, [r3]
 3720 0128 002B     		cmp	r3, #0
 3721 012a 03D0     		beq	.L263
1087:.\main.c      ****             {
1088:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3722              		.loc 1 1088 0
 3723 012c 064B     		ldr	r3, .L268
 3724 012e 0222     		mov	r2, #2
 3725 0130 1A70     		strb	r2, [r3]
1089:.\main.c      ****             }
1090:.\main.c      ****             else
1091:.\main.c      ****             {
1092:.\main.c      ****                 baseAzimuth_state = BA_wait; 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 87


1093:.\main.c      ****             }
1094:.\main.c      ****             break;
 3726              		.loc 1 1094 0
 3727 0132 02E0     		b	.L267
 3728              	.L263:
1092:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3729              		.loc 1 1092 0
 3730 0134 044B     		ldr	r3, .L268
 3731 0136 0322     		mov	r2, #3
 3732 0138 1A70     		strb	r2, [r3]
 3733              	.L267:
 3734              		.loc 1 1094 0
 3735 013a C046     		mov	r8, r8
 3736              	.L255:
1095:.\main.c      ****     }  
1096:.\main.c      ****     return BA_arr_cspot;
 3737              		.loc 1 1096 0
 3738 013c FB1D     		add	r3, r7, #7
 3739 013e 1B78     		ldrb	r3, [r3]
1097:.\main.c      **** }
 3740              		.loc 1 1097 0
 3741 0140 181C     		mov	r0, r3
 3742 0142 BD46     		mov	sp, r7
 3743 0144 05B0     		add	sp, sp, #20
 3744              		@ sp needed
 3745 0146 90BD     		pop	{r4, r7, pc}
 3746              	.L269:
 3747              		.align	2
 3748              	.L268:
 3749 0148 00000000 		.word	baseAzimuth_state
 3750 014c DC050000 		.word	1500
 3751 0150 00000000 		.word	data_array
 3752 0154 E7030000 		.word	999
 3753 0158 00000000 		.word	BA_FLAG
 3754              		.cfi_endproc
 3755              	.LFE52:
 3756              		.size	baseAzimuth, .-baseAzimuth
 3757              		.comm	effector_state,1,1
 3758              		.section	.text.effector,"ax",%progbits
 3759              		.align	2
 3760              		.global	effector
 3761              		.code	16
 3762              		.thumb_func
 3763              		.type	effector, %function
 3764              	effector:
 3765              	.LFB53:
1098:.\main.c      **** 
1099:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
1100:.\main.c      **** void effector()
1101:.\main.c      **** {
 3766              		.loc 1 1101 0
 3767              		.cfi_startproc
 3768 0000 90B5     		push	{r4, r7, lr}
 3769              		.cfi_def_cfa_offset 12
 3770              		.cfi_offset 4, -12
 3771              		.cfi_offset 7, -8
 3772              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 88


 3773 0002 83B0     		sub	sp, sp, #12
 3774              		.cfi_def_cfa_offset 24
 3775 0004 00AF     		add	r7, sp, #0
 3776              		.cfi_def_cfa_register 7
1102:.\main.c      ****     uint16 command;
1103:.\main.c      **** 
1104:.\main.c      ****     switch(effector_state){ //actions
 3777              		.loc 1 1104 0
 3778 0006 304B     		ldr	r3, .L290
 3779 0008 1B78     		ldrb	r3, [r3]
 3780 000a 012B     		cmp	r3, #1
 3781 000c 03D0     		beq	.L272
 3782 000e 29DD     		ble	.L289
 3783 0010 022B     		cmp	r3, #2
 3784 0012 05D0     		beq	.L275
1105:.\main.c      ****         case shldr_start:
1106:.\main.c      ****             break;
1107:.\main.c      **** 
1108:.\main.c      ****         case eff_init:           
1109:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
1110:.\main.c      ****            break;
1111:.\main.c      **** 
1112:.\main.c      ****         case eff_execute:
1113:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
1114:.\main.c      **** 
1115:.\main.c      ****             if(command <= 2000 && command >= 1000)
1116:.\main.c      ****             {
1117:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
1118:.\main.c      ****             }
1119:.\main.c      ****             else
1120:.\main.c      ****             {
1121:.\main.c      ****                 //throw error
1122:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
1123:.\main.c      ****             }
1124:.\main.c      ****             
1125:.\main.c      ****             EFFECTOR_FLAG = 0;
1126:.\main.c      ****             break;
1127:.\main.c      ****             
1128:.\main.c      ****         case eff_wait:
1129:.\main.c      ****             break;
 3785              		.loc 1 1129 0
 3786 0014 27E0     		b	.L271
 3787              	.L272:
1109:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3788              		.loc 1 1109 0
 3789 0016 2D4B     		ldr	r3, .L290+4
 3790 0018 181C     		mov	r0, r3
 3791 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1110:.\main.c      ****            break;
 3792              		.loc 1 1110 0
 3793 001e 22E0     		b	.L271
 3794              	.L275:
1113:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3795              		.loc 1 1113 0
 3796 0020 BC1D     		add	r4, r7, #6
 3797 0022 2B4B     		ldr	r3, .L290+8
 3798 0024 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 89


 3799 0026 1421     		mov	r1, #20
 3800 0028 1522     		mov	r2, #21
 3801 002a FFF7FEFF 		bl	make_command
 3802 002e 031C     		mov	r3, r0
 3803 0030 2380     		strh	r3, [r4]
1115:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3804              		.loc 1 1115 0
 3805 0032 BB1D     		add	r3, r7, #6
 3806 0034 1A88     		ldrh	r2, [r3]
 3807 0036 FA23     		mov	r3, #250
 3808 0038 DB00     		lsl	r3, r3, #3
 3809 003a 9A42     		cmp	r2, r3
 3810 003c 0AD8     		bhi	.L277
1115:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3811              		.loc 1 1115 0 is_stmt 0 discriminator 1
 3812 003e BB1D     		add	r3, r7, #6
 3813 0040 1A88     		ldrh	r2, [r3]
 3814 0042 244B     		ldr	r3, .L290+12
 3815 0044 9A42     		cmp	r2, r3
 3816 0046 05D9     		bls	.L277
1117:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3817              		.loc 1 1117 0 is_stmt 1
 3818 0048 BB1D     		add	r3, r7, #6
 3819 004a 1B88     		ldrh	r3, [r3]
 3820 004c 181C     		mov	r0, r3
 3821 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3822 0052 03E0     		b	.L278
 3823              	.L277:
1122:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3824              		.loc 1 1122 0
 3825 0054 1D4B     		ldr	r3, .L290+4
 3826 0056 181C     		mov	r0, r3
 3827 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3828              	.L278:
1125:.\main.c      ****             EFFECTOR_FLAG = 0;
 3829              		.loc 1 1125 0
 3830 005c 1E4B     		ldr	r3, .L290+16
 3831 005e 0022     		mov	r2, #0
 3832 0060 1A70     		strb	r2, [r3]
1126:.\main.c      ****             break;
 3833              		.loc 1 1126 0
 3834 0062 00E0     		b	.L271
 3835              	.L289:
1106:.\main.c      ****             break;
 3836              		.loc 1 1106 0
 3837 0064 C046     		mov	r8, r8
 3838              	.L271:
1130:.\main.c      ****     }
1131:.\main.c      ****     
1132:.\main.c      ****     switch(effector_state){ //transitions
 3839              		.loc 1 1132 0
 3840 0066 184B     		ldr	r3, .L290
 3841 0068 1B78     		ldrb	r3, [r3]
 3842 006a 012B     		cmp	r3, #1
 3843 006c 0CD0     		beq	.L280
 3844 006e 02DC     		bgt	.L281
 3845 0070 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 90


 3846 0072 05D0     		beq	.L282
 3847 0074 24E0     		b	.L270
 3848              	.L281:
 3849 0076 022B     		cmp	r3, #2
 3850 0078 0AD0     		beq	.L283
 3851 007a 032B     		cmp	r3, #3
 3852 007c 14D0     		beq	.L284
 3853 007e 1FE0     		b	.L270
 3854              	.L282:
1133:.\main.c      ****         case eff_start:
1134:.\main.c      ****             effector_state = eff_init;
 3855              		.loc 1 1134 0
 3856 0080 114B     		ldr	r3, .L290
 3857 0082 0122     		mov	r2, #1
 3858 0084 1A70     		strb	r2, [r3]
1135:.\main.c      ****             break;
 3859              		.loc 1 1135 0
 3860 0086 1BE0     		b	.L270
 3861              	.L280:
1136:.\main.c      ****         
1137:.\main.c      ****         case eff_init:
1138:.\main.c      ****             effector_state = eff_wait;
 3862              		.loc 1 1138 0
 3863 0088 0F4B     		ldr	r3, .L290
 3864 008a 0322     		mov	r2, #3
 3865 008c 1A70     		strb	r2, [r3]
1139:.\main.c      ****             break;
 3866              		.loc 1 1139 0
 3867 008e 17E0     		b	.L270
 3868              	.L283:
1140:.\main.c      ****         
1141:.\main.c      ****         case eff_execute:
1142:.\main.c      ****             if(EFFECTOR_FLAG)
 3869              		.loc 1 1142 0
 3870 0090 114B     		ldr	r3, .L290+16
 3871 0092 1B78     		ldrb	r3, [r3]
 3872 0094 002B     		cmp	r3, #0
 3873 0096 03D0     		beq	.L285
1143:.\main.c      ****             {
1144:.\main.c      ****                 effector_state = eff_execute;
 3874              		.loc 1 1144 0
 3875 0098 0B4B     		ldr	r3, .L290
 3876 009a 0222     		mov	r2, #2
 3877 009c 1A70     		strb	r2, [r3]
1145:.\main.c      ****             }
1146:.\main.c      ****             else
1147:.\main.c      ****             {
1148:.\main.c      ****                 effector_state = eff_wait;
1149:.\main.c      ****             }
1150:.\main.c      ****             break;
 3878              		.loc 1 1150 0
 3879 009e 0FE0     		b	.L270
 3880              	.L285:
1148:.\main.c      ****                 effector_state = eff_wait;
 3881              		.loc 1 1148 0
 3882 00a0 094B     		ldr	r3, .L290
 3883 00a2 0322     		mov	r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 91


 3884 00a4 1A70     		strb	r2, [r3]
 3885              		.loc 1 1150 0
 3886 00a6 0BE0     		b	.L270
 3887              	.L284:
1151:.\main.c      ****         
1152:.\main.c      ****         case eff_wait:
1153:.\main.c      ****             if(EFFECTOR_FLAG)
 3888              		.loc 1 1153 0
 3889 00a8 0B4B     		ldr	r3, .L290+16
 3890 00aa 1B78     		ldrb	r3, [r3]
 3891 00ac 002B     		cmp	r3, #0
 3892 00ae 03D0     		beq	.L287
1154:.\main.c      ****             {
1155:.\main.c      ****                 effector_state = eff_execute;
 3893              		.loc 1 1155 0
 3894 00b0 054B     		ldr	r3, .L290
 3895 00b2 0222     		mov	r2, #2
 3896 00b4 1A70     		strb	r2, [r3]
 3897 00b6 02E0     		b	.L288
 3898              	.L287:
1156:.\main.c      ****             }
1157:.\main.c      ****             else
1158:.\main.c      ****             {
1159:.\main.c      ****                 effector_state = eff_wait; 
 3899              		.loc 1 1159 0
 3900 00b8 034B     		ldr	r3, .L290
 3901 00ba 0322     		mov	r2, #3
 3902 00bc 1A70     		strb	r2, [r3]
 3903              	.L288:
1160:.\main.c      ****             }
1161:.\main.c      ****             break;
 3904              		.loc 1 1161 0
 3905 00be C046     		mov	r8, r8
 3906              	.L270:
1162:.\main.c      ****     }    
1163:.\main.c      **** }
 3907              		.loc 1 1163 0
 3908 00c0 BD46     		mov	sp, r7
 3909 00c2 03B0     		add	sp, sp, #12
 3910              		@ sp needed
 3911 00c4 90BD     		pop	{r4, r7, pc}
 3912              	.L291:
 3913 00c6 C046     		.align	2
 3914              	.L290:
 3915 00c8 00000000 		.word	effector_state
 3916 00cc DC050000 		.word	1500
 3917 00d0 00000000 		.word	data_array
 3918 00d4 E7030000 		.word	999
 3919 00d8 00000000 		.word	EFFECTOR_FLAG
 3920              		.cfi_endproc
 3921              	.LFE53:
 3922              		.size	effector, .-effector
 3923              		.comm	phSensor_state,1,1
 3924              		.section	.text.phSensor,"ax",%progbits
 3925              		.align	2
 3926              		.global	phSensor
 3927              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 92


 3928              		.thumb_func
 3929              		.type	phSensor, %function
 3930              	phSensor:
 3931              	.LFB54:
1164:.\main.c      **** 
1165:.\main.c      **** enum phSensor_states {ph_start, ph_init, ph_execute, ph_wait} phSensor_state;
1166:.\main.c      **** void phSensor()
1167:.\main.c      **** {
 3932              		.loc 1 1167 0
 3933              		.cfi_startproc
 3934 0000 80B5     		push	{r7, lr}
 3935              		.cfi_def_cfa_offset 8
 3936              		.cfi_offset 7, -8
 3937              		.cfi_offset 14, -4
 3938 0002 00AF     		add	r7, sp, #0
 3939              		.cfi_def_cfa_register 7
1168:.\main.c      ****     switch(phSensor_state)
 3940              		.loc 1 1168 0
 3941 0004 1F4B     		ldr	r3, .L312
 3942 0006 1B78     		ldrb	r3, [r3]
 3943 0008 012B     		cmp	r3, #1
 3944 000a 06D0     		beq	.L309
 3945 000c 07DD     		ble	.L310
 3946 000e 022B     		cmp	r3, #2
 3947 0010 07D1     		bne	.L311
1169:.\main.c      ****     { //actions
1170:.\main.c      ****         case ph_start:
1171:.\main.c      ****             // Do nothing
1172:.\main.c      ****             break;
1173:.\main.c      **** 
1174:.\main.c      ****         case ph_init:           
1175:.\main.c      ****            // TODO: Add initialization code. might not need
1176:.\main.c      ****            break;
1177:.\main.c      **** 
1178:.\main.c      ****         case ph_execute:
1179:.\main.c      ****             // TODO:  Call Marshalls code for phSensor
1180:.\main.c      ****             PH_FLAG = 0;
 3948              		.loc 1 1180 0
 3949 0012 1D4B     		ldr	r3, .L312+4
 3950 0014 0022     		mov	r2, #0
 3951 0016 1A70     		strb	r2, [r3]
1181:.\main.c      ****             break;
 3952              		.loc 1 1181 0
 3953 0018 04E0     		b	.L293
 3954              	.L309:
1176:.\main.c      ****            break;
 3955              		.loc 1 1176 0
 3956 001a C046     		mov	r8, r8
 3957 001c 02E0     		b	.L293
 3958              	.L310:
1172:.\main.c      ****             break;
 3959              		.loc 1 1172 0
 3960 001e C046     		mov	r8, r8
 3961 0020 00E0     		b	.L293
 3962              	.L311:
1182:.\main.c      ****             
1183:.\main.c      ****         case ph_wait:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 93


1184:.\main.c      ****             break;
 3963              		.loc 1 1184 0
 3964 0022 C046     		mov	r8, r8
 3965              	.L293:
1185:.\main.c      ****     }
1186:.\main.c      ****     
1187:.\main.c      ****     switch(phSensor_state)
 3966              		.loc 1 1187 0
 3967 0024 174B     		ldr	r3, .L312
 3968 0026 1B78     		ldrb	r3, [r3]
 3969 0028 012B     		cmp	r3, #1
 3970 002a 0CD0     		beq	.L300
 3971 002c 02DC     		bgt	.L301
 3972 002e 002B     		cmp	r3, #0
 3973 0030 05D0     		beq	.L302
 3974 0032 24E0     		b	.L292
 3975              	.L301:
 3976 0034 022B     		cmp	r3, #2
 3977 0036 0AD0     		beq	.L303
 3978 0038 032B     		cmp	r3, #3
 3979 003a 14D0     		beq	.L304
 3980 003c 1FE0     		b	.L292
 3981              	.L302:
1188:.\main.c      ****     { //transitions
1189:.\main.c      ****         case ph_start:
1190:.\main.c      ****             phSensor_state = ph_init;
 3982              		.loc 1 1190 0
 3983 003e 114B     		ldr	r3, .L312
 3984 0040 0122     		mov	r2, #1
 3985 0042 1A70     		strb	r2, [r3]
1191:.\main.c      ****             break;
 3986              		.loc 1 1191 0
 3987 0044 1BE0     		b	.L292
 3988              	.L300:
1192:.\main.c      ****         
1193:.\main.c      ****         case ph_init:
1194:.\main.c      ****             phSensor_state = ph_wait;
 3989              		.loc 1 1194 0
 3990 0046 0F4B     		ldr	r3, .L312
 3991 0048 0322     		mov	r2, #3
 3992 004a 1A70     		strb	r2, [r3]
1195:.\main.c      ****             break;
 3993              		.loc 1 1195 0
 3994 004c 17E0     		b	.L292
 3995              	.L303:
1196:.\main.c      ****         
1197:.\main.c      ****         case ph_execute:
1198:.\main.c      ****             if(PH_FLAG)
 3996              		.loc 1 1198 0
 3997 004e 0E4B     		ldr	r3, .L312+4
 3998 0050 1B78     		ldrb	r3, [r3]
 3999 0052 002B     		cmp	r3, #0
 4000 0054 03D0     		beq	.L305
1199:.\main.c      ****                 phSensor_state = ph_execute;
 4001              		.loc 1 1199 0
 4002 0056 0B4B     		ldr	r3, .L312
 4003 0058 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 94


 4004 005a 1A70     		strb	r2, [r3]
1200:.\main.c      ****             else
1201:.\main.c      ****                 phSensor_state = ph_wait;
1202:.\main.c      ****             break;
 4005              		.loc 1 1202 0
 4006 005c 0FE0     		b	.L292
 4007              	.L305:
1201:.\main.c      ****                 phSensor_state = ph_wait;
 4008              		.loc 1 1201 0
 4009 005e 094B     		ldr	r3, .L312
 4010 0060 0322     		mov	r2, #3
 4011 0062 1A70     		strb	r2, [r3]
 4012              		.loc 1 1202 0
 4013 0064 0BE0     		b	.L292
 4014              	.L304:
1203:.\main.c      ****         
1204:.\main.c      ****         case ph_wait:
1205:.\main.c      ****             if(PH_FLAG)
 4015              		.loc 1 1205 0
 4016 0066 084B     		ldr	r3, .L312+4
 4017 0068 1B78     		ldrb	r3, [r3]
 4018 006a 002B     		cmp	r3, #0
 4019 006c 03D0     		beq	.L307
1206:.\main.c      ****                 phSensor_state = ph_execute;
 4020              		.loc 1 1206 0
 4021 006e 054B     		ldr	r3, .L312
 4022 0070 0222     		mov	r2, #2
 4023 0072 1A70     		strb	r2, [r3]
 4024 0074 02E0     		b	.L308
 4025              	.L307:
1207:.\main.c      ****             else
1208:.\main.c      ****                 phSensor_state = ph_wait; 
 4026              		.loc 1 1208 0
 4027 0076 034B     		ldr	r3, .L312
 4028 0078 0322     		mov	r2, #3
 4029 007a 1A70     		strb	r2, [r3]
 4030              	.L308:
1209:.\main.c      ****             break;
 4031              		.loc 1 1209 0
 4032 007c C046     		mov	r8, r8
 4033              	.L292:
1210:.\main.c      ****     }    
1211:.\main.c      **** }
 4034              		.loc 1 1211 0
 4035 007e BD46     		mov	sp, r7
 4036              		@ sp needed
 4037 0080 80BD     		pop	{r7, pc}
 4038              	.L313:
 4039 0082 C046     		.align	2
 4040              	.L312:
 4041 0084 00000000 		.word	phSensor_state
 4042 0088 00000000 		.word	PH_FLAG
 4043              		.cfi_endproc
 4044              	.LFE54:
 4045              		.size	phSensor, .-phSensor
 4046              		.section	.text.initialize,"ax",%progbits
 4047              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 95


 4048              		.global	initialize
 4049              		.code	16
 4050              		.thumb_func
 4051              		.type	initialize, %function
 4052              	initialize:
 4053              	.LFB55:
1212:.\main.c      **** 
1213:.\main.c      **** //Initialization function for the program
1214:.\main.c      **** void initialize()
1215:.\main.c      **** {
 4054              		.loc 1 1215 0
 4055              		.cfi_startproc
 4056 0000 80B5     		push	{r7, lr}
 4057              		.cfi_def_cfa_offset 8
 4058              		.cfi_offset 7, -8
 4059              		.cfi_offset 14, -4
 4060 0002 82B0     		sub	sp, sp, #8
 4061              		.cfi_def_cfa_offset 16
 4062 0004 00AF     		add	r7, sp, #0
 4063              		.cfi_def_cfa_register 7
1216:.\main.c      ****     //initialize the wiznet
1217:.\main.c      ****     WIZ_RST_Write(0);
 4064              		.loc 1 1217 0
 4065 0006 0020     		mov	r0, #0
 4066 0008 FFF7FEFF 		bl	WIZ_RST_Write
1218:.\main.c      ****     CyDelay(10);
 4067              		.loc 1 1218 0
 4068 000c 0A20     		mov	r0, #10
 4069 000e FFF7FEFF 		bl	CyDelay
1219:.\main.c      ****     WIZ_RST_Write(1);
 4070              		.loc 1 1219 0
 4071 0012 0120     		mov	r0, #1
 4072 0014 FFF7FEFF 		bl	WIZ_RST_Write
1220:.\main.c      ****     WIZ_SS_Write(1);
 4073              		.loc 1 1220 0
 4074 0018 0120     		mov	r0, #1
 4075 001a FFF7FEFF 		bl	WIZ_SS_Write
 4076              	.LBB2:
1221:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4077              		.loc 1 1221 0
 4078 001e FB1D     		add	r3, r7, #7
 4079 0020 0022     		mov	r2, #0
 4080 0022 1A70     		strb	r2, [r3]
 4081 0024 0DE0     		b	.L315
 4082              	.L318:
1222:.\main.c      ****     {
1223:.\main.c      ****         if(WIZ_RDY_Read())
 4083              		.loc 1 1223 0
 4084 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 4085 002a 031C     		mov	r3, r0
 4086 002c 002B     		cmp	r3, #0
 4087 002e 00D0     		beq	.L316
1224:.\main.c      ****         {
1225:.\main.c      ****             break;
 4088              		.loc 1 1225 0
 4089 0030 0BE0     		b	.L317
 4090              	.L316:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 96


1226:.\main.c      ****         }
1227:.\main.c      ****         else
1228:.\main.c      ****         {
1229:.\main.c      ****             CyDelay(4);
 4091              		.loc 1 1229 0
 4092 0032 0420     		mov	r0, #4
 4093 0034 FFF7FEFF 		bl	CyDelay
1221:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4094              		.loc 1 1221 0
 4095 0038 FB1D     		add	r3, r7, #7
 4096 003a 1A78     		ldrb	r2, [r3]
 4097 003c FB1D     		add	r3, r7, #7
 4098 003e 0132     		add	r2, r2, #1
 4099 0040 1A70     		strb	r2, [r3]
 4100              	.L315:
1221:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4101              		.loc 1 1221 0 is_stmt 0 discriminator 1
 4102 0042 FB1D     		add	r3, r7, #7
 4103 0044 1B78     		ldrb	r3, [r3]
 4104 0046 632B     		cmp	r3, #99
 4105 0048 EDD9     		bls	.L318
 4106              	.L317:
 4107              	.LBE2:
1230:.\main.c      ****         }
1231:.\main.c      ****     }
1232:.\main.c      ****     
1233:.\main.c      ****     //Initialize state variables
1234:.\main.c      ****     baseAzimuth_state = BA_start;
 4108              		.loc 1 1234 0 is_stmt 1
 4109 004a 3F4B     		ldr	r3, .L321
 4110 004c 0022     		mov	r2, #0
 4111 004e 1A70     		strb	r2, [r3]
1235:.\main.c      ****     wristTilt_state = tilt_start;
 4112              		.loc 1 1235 0
 4113 0050 3E4B     		ldr	r3, .L321+4
 4114 0052 0022     		mov	r2, #0
 4115 0054 1A70     		strb	r2, [r3]
1236:.\main.c      ****     wristRotate_state = rotate_start;
 4116              		.loc 1 1236 0
 4117 0056 3E4B     		ldr	r3, .L321+8
 4118 0058 0022     		mov	r2, #0
 4119 005a 1A70     		strb	r2, [r3]
1237:.\main.c      ****     shoulder_state = shldr_start;
 4120              		.loc 1 1237 0
 4121 005c 3D4B     		ldr	r3, .L321+12
 4122 005e 0022     		mov	r2, #0
 4123 0060 1A70     		strb	r2, [r3]
1238:.\main.c      ****     elbow_state = elbw_start;
 4124              		.loc 1 1238 0
 4125 0062 3D4B     		ldr	r3, .L321+16
 4126 0064 0022     		mov	r2, #0
 4127 0066 1A70     		strb	r2, [r3]
1239:.\main.c      ****     effector_state = eff_start;
 4128              		.loc 1 1239 0
 4129 0068 3C4B     		ldr	r3, .L321+20
 4130 006a 0022     		mov	r2, #0
 4131 006c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 97


 4132              	.LBB3:
1240:.\main.c      ****     
1241:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4133              		.loc 1 1241 0
 4134 006e 0023     		mov	r3, #0
 4135 0070 3B60     		str	r3, [r7]
 4136 0072 07E0     		b	.L319
 4137              	.L320:
1242:.\main.c      ****         feedback_array[i] = 0;   
 4138              		.loc 1 1242 0 discriminator 2
 4139 0074 3A4A     		ldr	r2, .L321+24
 4140 0076 3B68     		ldr	r3, [r7]
 4141 0078 D318     		add	r3, r2, r3
 4142 007a 0022     		mov	r2, #0
 4143 007c 1A70     		strb	r2, [r3]
1241:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4144              		.loc 1 1241 0 discriminator 2
 4145 007e 3B68     		ldr	r3, [r7]
 4146 0080 0133     		add	r3, r3, #1
 4147 0082 3B60     		str	r3, [r7]
 4148              	.L319:
1241:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4149              		.loc 1 1241 0 is_stmt 0 discriminator 1
 4150 0084 3B68     		ldr	r3, [r7]
 4151 0086 0D2B     		cmp	r3, #13
 4152 0088 F4DD     		ble	.L320
 4153              	.LBE3:
1243:.\main.c      ****     }
1244:.\main.c      ****     
1245:.\main.c      ****     //start all of our components
1246:.\main.c      ****     SPIM_1_Start();
 4154              		.loc 1 1246 0 is_stmt 1
 4155 008a FFF7FEFF 		bl	SPIM_1_Start
1247:.\main.c      ****     Clock_pwm_Start();
 4156              		.loc 1 1247 0
 4157 008e FFF7FEFF 		bl	Clock_pwm_Start
1248:.\main.c      ****     Clock_counter_Start();
 4158              		.loc 1 1248 0
 4159 0092 FFF7FEFF 		bl	Clock_counter_Start
1249:.\main.c      ****     UART_1_Start();
 4160              		.loc 1 1249 0
 4161 0096 FFF7FEFF 		bl	UART_1_Start
1250:.\main.c      ****     SHLDR_PWM_Start();
 4162              		.loc 1 1250 0
 4163 009a FFF7FEFF 		bl	SHLDR_PWM_Start
1251:.\main.c      ****     BA_PWM_Start();
 4164              		.loc 1 1251 0
 4165 009e FFF7FEFF 		bl	BA_PWM_Start
1252:.\main.c      ****     ELBW_PWM_Start();
 4166              		.loc 1 1252 0
 4167 00a2 FFF7FEFF 		bl	ELBW_PWM_Start
1253:.\main.c      ****     EFFECTOR_PWM_Start();
 4168              		.loc 1 1253 0
 4169 00a6 FFF7FEFF 		bl	EFFECTOR_PWM_Start
1254:.\main.c      ****     ADC_Start();
 4170              		.loc 1 1254 0
 4171 00aa FFF7FEFF 		bl	ADC_Start
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 98


1255:.\main.c      ****     ADC_StartConvert();
 4172              		.loc 1 1255 0
 4173 00ae FFF7FEFF 		bl	ADC_StartConvert
1256:.\main.c      ****     
1257:.\main.c      ****     //uint8_t test_byte;
1258:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 4174              		.loc 1 1258 0
 4175 00b2 2C4B     		ldr	r3, .L321+28
 4176 00b4 0420     		mov	r0, #4
 4177 00b6 0121     		mov	r1, #1
 4178 00b8 1A1C     		mov	r2, r3
 4179 00ba FFF7FEFF 		bl	wiznetInit
1259:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1260:.\main.c      ****     
1261:.\main.c      ****     //Initialize the dynamixels
1262:.\main.c      ****     ServoSpeed(0xFE, 100);
 4180              		.loc 1 1262 0
 4181 00be FE20     		mov	r0, #254
 4182 00c0 6421     		mov	r1, #100
 4183 00c2 FFF7FEFF 		bl	ServoSpeed
1263:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 4184              		.loc 1 1263 0
 4185 00c6 284B     		ldr	r3, .L321+32
 4186 00c8 FE20     		mov	r0, #254
 4187 00ca 191C     		mov	r1, r3
 4188 00cc FFF7FEFF 		bl	SetServoTorque
1264:.\main.c      ****     
1265:.\main.c      ****     LED_Write(1);
 4189              		.loc 1 1265 0
 4190 00d0 0120     		mov	r0, #1
 4191 00d2 FFF7FEFF 		bl	LED_Write
1266:.\main.c      ****     //Initialize our motor drivers
1267:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 4192              		.loc 1 1267 0
 4193 00d6 254B     		ldr	r3, .L321+36
 4194 00d8 181C     		mov	r0, r3
 4195 00da FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1268:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 4196              		.loc 1 1268 0
 4197 00de 234B     		ldr	r3, .L321+36
 4198 00e0 181C     		mov	r0, r3
 4199 00e2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1269:.\main.c      ****     CyDelay(3000);
 4200              		.loc 1 1269 0
 4201 00e6 224B     		ldr	r3, .L321+40
 4202 00e8 181C     		mov	r0, r3
 4203 00ea FFF7FEFF 		bl	CyDelay
1270:.\main.c      ****     LED_Write(0);
 4204              		.loc 1 1270 0
 4205 00ee 0020     		mov	r0, #0
 4206 00f0 FFF7FEFF 		bl	LED_Write
1271:.\main.c      ****     
1272:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1273:.\main.c      ****     SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
 4207              		.loc 1 1273 0
 4208 00f4 1F4B     		ldr	r3, .L321+44
 4209 00f6 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 99


 4210 00f8 FFF7FEFF 		bl	CalibrationShoulder
 4211 00fc 031C     		mov	r3, r0
 4212 00fe 1A1C     		mov	r2, r3
 4213 0100 1D4B     		ldr	r3, .L321+48
 4214 0102 1A60     		str	r2, [r3]
1274:.\main.c      ****     SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
 4215              		.loc 1 1274 0
 4216 0104 1D4B     		ldr	r3, .L321+52
 4217 0106 181C     		mov	r0, r3
 4218 0108 FFF7FEFF 		bl	CalibrationShoulder
 4219 010c 031C     		mov	r3, r0
 4220 010e 1A1C     		mov	r2, r3
 4221 0110 1B4B     		ldr	r3, .L321+56
 4222 0112 1A60     		str	r2, [r3]
1275:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 4223              		.loc 1 1275 0
 4224 0114 174B     		ldr	r3, .L321+44
 4225 0116 181C     		mov	r0, r3
 4226 0118 FFF7FEFF 		bl	CalibrationElbow
 4227 011c 031C     		mov	r3, r0
 4228 011e 1A1C     		mov	r2, r3
 4229 0120 184B     		ldr	r3, .L321+60
 4230 0122 1A60     		str	r2, [r3]
1276:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 4231              		.loc 1 1276 0
 4232 0124 154B     		ldr	r3, .L321+52
 4233 0126 181C     		mov	r0, r3
 4234 0128 FFF7FEFF 		bl	CalibrationElbow
 4235 012c 031C     		mov	r3, r0
 4236 012e 1A1C     		mov	r2, r3
 4237 0130 154B     		ldr	r3, .L321+64
 4238 0132 1A60     		str	r2, [r3]
1277:.\main.c      ****     
1278:.\main.c      ****     //helps for generating random arrays
1279:.\main.c      ****     //srand((unsigned) time(&t));
1280:.\main.c      ****     
1281:.\main.c      ****     CyGlobalIntEnable;
 4239              		.loc 1 1281 0
 4240              	@ 1281 ".\main.c" 1
 4241 0134 62B6     		CPSIE   i
 4242              	@ 0 "" 2
1282:.\main.c      ****     isr_1_StartEx(timer_isr);
 4243              		.loc 1 1282 0
 4244              		.code	16
 4245 0136 154B     		ldr	r3, .L321+68
 4246 0138 181C     		mov	r0, r3
 4247 013a FFF7FEFF 		bl	isr_1_StartEx
1283:.\main.c      ****     Timer_1_Start();
 4248              		.loc 1 1283 0
 4249 013e FFF7FEFF 		bl	Timer_1_Start
1284:.\main.c      ****     
1285:.\main.c      ****     //UART_TEST_Start();
1286:.\main.c      ****     
1287:.\main.c      **** }
 4250              		.loc 1 1287 0
 4251 0142 BD46     		mov	sp, r7
 4252 0144 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 100


 4253              		@ sp needed
 4254 0146 80BD     		pop	{r7, pc}
 4255              	.L322:
 4256              		.align	2
 4257              	.L321:
 4258 0148 00000000 		.word	baseAzimuth_state
 4259 014c 00000000 		.word	wristTilt_state
 4260 0150 00000000 		.word	wristRotate_state
 4261 0154 00000000 		.word	shoulder_state
 4262 0158 00000000 		.word	elbow_state
 4263 015c 00000000 		.word	effector_state
 4264 0160 00000000 		.word	feedback_array
 4265 0164 87690000 		.word	27015
 4266 0168 FF030000 		.word	1023
 4267 016c DC050000 		.word	1500
 4268 0170 B80B0000 		.word	3000
 4269 0174 A4060000 		.word	1700
 4270 0178 00000000 		.word	SHOULDER_UPPER_BOUND
 4271 017c 14050000 		.word	1300
 4272 0180 00000000 		.word	SHOULDER_LOWER_BOUND
 4273 0184 00000000 		.word	ELBOW_UPPER_BOUND
 4274 0188 00000000 		.word	ELBOW_LOWER_BOUND
 4275 018c 00000000 		.word	timer_isr
 4276              		.cfi_endproc
 4277              	.LFE55:
 4278              		.size	initialize, .-initialize
 4279              		.section	.text.main,"ax",%progbits
 4280              		.align	2
 4281              		.global	main
 4282              		.code	16
 4283              		.thumb_func
 4284              		.type	main, %function
 4285              	main:
 4286              	.LFB56:
1288:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1289:.\main.c      **** int main()
1290:.\main.c      **** {  
 4287              		.loc 1 1290 0
 4288              		.cfi_startproc
 4289 0000 90B5     		push	{r4, r7, lr}
 4290              		.cfi_def_cfa_offset 12
 4291              		.cfi_offset 4, -12
 4292              		.cfi_offset 7, -8
 4293              		.cfi_offset 14, -4
 4294 0002 B7B0     		sub	sp, sp, #220
 4295              		.cfi_def_cfa_offset 232
 4296 0004 00AF     		add	r7, sp, #0
 4297              		.cfi_def_cfa_register 7
1291:.\main.c      ****     //Define variables
1292:.\main.c      ****     //for testing
1293:.\main.c      **** //    time_t t; 
1294:.\main.c      **** //    char time_array[8];
1295:.\main.c      **** //    uint8 counter;
1296:.\main.c      **** //    int direction = 0;
1297:.\main.c      ****     
1298:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1299:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 101


1300:.\main.c      ****     uint8 BA_cspot;
1301:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1302:.\main.c      ****     uint8 shldr_cspot;
1303:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1304:.\main.c      ****     uint8 elbw_cspot;
1305:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1306:.\main.c      ****     uint8 WT_cspot;
1307:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1308:.\main.c      ****     uint8 WR_cspot;
1309:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1310:.\main.c      ****     
1311:.\main.c      ****     //for testing
1312:.\main.c      **** //    int increasing = 1;
1313:.\main.c      **** //    int first_count;
1314:.\main.c      **** //    int second_count;
1315:.\main.c      **** //    int temp_code_time;
1316:.\main.c      **** //    int code_time = 0;
1317:.\main.c      ****     
1318:.\main.c      ****     
1319:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4298              		.loc 1 1319 0
 4299 0006 3B1C     		mov	r3, r7
 4300 0008 D233     		add	r3, r3, #210
 4301 000a 0022     		mov	r2, #0
 4302 000c 1A70     		strb	r2, [r3]
1320:.\main.c      ****     int16 temp_val = 1500; 
 4303              		.loc 1 1320 0
 4304 000e 3B1C     		mov	r3, r7
 4305 0010 CA33     		add	r3, r3, #202
 4306 0012 624A     		ldr	r2, .L335
 4307 0014 1A80     		strh	r2, [r3]
1321:.\main.c      ****     
1322:.\main.c      ****     initialize();
 4308              		.loc 1 1322 0
 4309 0016 FFF7FEFF 		bl	initialize
 4310              	.L333:
1323:.\main.c      **** //    uint8 i;
1324:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1325:.\main.c      **** //    {
1326:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1327:.\main.c      **** //    }
1328:.\main.c      **** 
1329:.\main.c      ****     for(;;)
1330:.\main.c      ****     {
1331:.\main.c      ****         //UART_TEST_UartPutChar(31);
1332:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1333:.\main.c      ****         
1334:.\main.c      ****         if(stop_elb_dn_Read())
 4311              		.loc 1 1334 0
 4312 001a FFF7FEFF 		bl	stop_elb_dn_Read
 4313 001e 031C     		mov	r3, r0
 4314 0020 002B     		cmp	r3, #0
 4315 0022 03D0     		beq	.L324
1335:.\main.c      ****         {
1336:.\main.c      ****             LED_Write(1);
 4316              		.loc 1 1336 0
 4317 0024 0120     		mov	r0, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 102


 4318 0026 FFF7FEFF 		bl	LED_Write
 4319 002a 02E0     		b	.L325
 4320              	.L324:
1337:.\main.c      ****         }
1338:.\main.c      ****         else
1339:.\main.c      ****         {
1340:.\main.c      ****             LED_Write(0);
 4321              		.loc 1 1340 0
 4322 002c 0020     		mov	r0, #0
 4323 002e FFF7FEFF 		bl	LED_Write
 4324              	.L325:
1341:.\main.c      ****         }
1342:.\main.c      ****         
1343:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4325              		.loc 1 1343 0
 4326 0032 FFF7FEFF 		bl	WIZ_INT_Read
 4327 0036 031C     		mov	r3, r0
 4328 0038 002B     		cmp	r3, #0
 4329 003a 20D1     		bne	.L326
1344:.\main.c      ****         {
1345:.\main.c      ****             wiznetClearInterrupts();
 4330              		.loc 1 1345 0
 4331 003c FFF7FEFF 		bl	wiznetClearInterrupts
1346:.\main.c      ****             fill_data_array();
 4332              		.loc 1 1346 0
 4333 0040 FFF7FEFF 		bl	fill_data_array
1347:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1348:.\main.c      ****             BA_FLAG = 1;
 4334              		.loc 1 1348 0
 4335 0044 564B     		ldr	r3, .L335+4
 4336 0046 0122     		mov	r2, #1
 4337 0048 1A70     		strb	r2, [r3]
1349:.\main.c      ****             WR_FLAG = 1;
 4338              		.loc 1 1349 0
 4339 004a 564B     		ldr	r3, .L335+8
 4340 004c 0122     		mov	r2, #1
 4341 004e 1A70     		strb	r2, [r3]
1350:.\main.c      ****             WT_FLAG = 1;
 4342              		.loc 1 1350 0
 4343 0050 554B     		ldr	r3, .L335+12
 4344 0052 0122     		mov	r2, #1
 4345 0054 1A70     		strb	r2, [r3]
1351:.\main.c      ****             SHOULDER_FLAG = 1;
 4346              		.loc 1 1351 0
 4347 0056 554B     		ldr	r3, .L335+16
 4348 0058 0122     		mov	r2, #1
 4349 005a 1A70     		strb	r2, [r3]
1352:.\main.c      ****             ELBOW_FLAG = 1;
 4350              		.loc 1 1352 0
 4351 005c 544B     		ldr	r3, .L335+20
 4352 005e 0122     		mov	r2, #1
 4353 0060 1A70     		strb	r2, [r3]
1353:.\main.c      ****             EFFECTOR_FLAG = 1;
 4354              		.loc 1 1353 0
 4355 0062 544B     		ldr	r3, .L335+24
 4356 0064 0122     		mov	r2, #1
 4357 0066 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 103


1354:.\main.c      ****             PH_FLAG = 1;
 4358              		.loc 1 1354 0
 4359 0068 534B     		ldr	r3, .L335+28
 4360 006a 0122     		mov	r2, #1
 4361 006c 1A70     		strb	r2, [r3]
1355:.\main.c      ****             fs_count = 0;
 4362              		.loc 1 1355 0
 4363 006e 3B1C     		mov	r3, r7
 4364 0070 D233     		add	r3, r3, #210
 4365 0072 0022     		mov	r2, #0
 4366 0074 1A70     		strb	r2, [r3]
1356:.\main.c      ****             send_packet(1);
 4367              		.loc 1 1356 0
 4368 0076 0120     		mov	r0, #1
 4369 0078 FFF7FEFF 		bl	send_packet
 4370 007c 06E0     		b	.L327
 4371              	.L326:
1357:.\main.c      ****             //wiznet = 0; //for testing
1358:.\main.c      ****         }
1359:.\main.c      ****         else
1360:.\main.c      ****         {
1361:.\main.c      ****             fs_count += 1;
 4372              		.loc 1 1361 0
 4373 007e 3B1C     		mov	r3, r7
 4374 0080 D233     		add	r3, r3, #210
 4375 0082 3A1C     		mov	r2, r7
 4376 0084 D232     		add	r2, r2, #210
 4377 0086 1278     		ldrb	r2, [r2]
 4378 0088 0132     		add	r2, r2, #1
 4379 008a 1A70     		strb	r2, [r3]
 4380              	.L327:
1362:.\main.c      ****         }
1363:.\main.c      ****         
1364:.\main.c      ****         if(fs_count >= 50)
 4381              		.loc 1 1364 0
 4382 008c 3B1C     		mov	r3, r7
 4383 008e D233     		add	r3, r3, #210
 4384 0090 1B78     		ldrb	r3, [r3]
 4385 0092 312B     		cmp	r3, #49
 4386 0094 2CD9     		bls	.L328
1365:.\main.c      ****         {
1366:.\main.c      ****             temp_val = 1500;
 4387              		.loc 1 1366 0
 4388 0096 3B1C     		mov	r3, r7
 4389 0098 CA33     		add	r3, r3, #202
 4390 009a 404A     		ldr	r2, .L335
 4391 009c 1A80     		strh	r2, [r3]
 4392              	.LBB4:
1367:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4393              		.loc 1 1367 0
 4394 009e 0023     		mov	r3, #0
 4395 00a0 CC20     		mov	r0, #204
 4396 00a2 C019     		add	r0, r0, r7
 4397 00a4 0360     		str	r3, [r0]
 4398 00a6 1DE0     		b	.L329
 4399              	.L330:
1368:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 104


1369:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4400              		.loc 1 1369 0 discriminator 2
 4401 00a8 3B1C     		mov	r3, r7
 4402 00aa CA33     		add	r3, r3, #202
 4403 00ac 0022     		mov	r2, #0
 4404 00ae 9B5E     		ldrsh	r3, [r3, r2]
 4405 00b0 1B12     		asr	r3, r3, #8
 4406 00b2 9BB2     		uxth	r3, r3
 4407 00b4 DAB2     		uxtb	r2, r3
 4408 00b6 4149     		ldr	r1, .L335+32
 4409 00b8 CC20     		mov	r0, #204
 4410 00ba C019     		add	r0, r0, r7
 4411 00bc 0368     		ldr	r3, [r0]
 4412 00be CB18     		add	r3, r1, r3
 4413 00c0 1A70     		strb	r2, [r3]
1370:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4414              		.loc 1 1370 0 discriminator 2
 4415 00c2 CC22     		mov	r2, #204
 4416 00c4 D219     		add	r2, r2, r7
 4417 00c6 1368     		ldr	r3, [r2]
 4418 00c8 0133     		add	r3, r3, #1
 4419 00ca 3A1C     		mov	r2, r7
 4420 00cc CA32     		add	r2, r2, #202
 4421 00ce 1288     		ldrh	r2, [r2]
 4422 00d0 D1B2     		uxtb	r1, r2
 4423 00d2 3A4A     		ldr	r2, .L335+32
 4424 00d4 D154     		strb	r1, [r2, r3]
1367:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4425              		.loc 1 1367 0 discriminator 2
 4426 00d6 CC20     		mov	r0, #204
 4427 00d8 C019     		add	r0, r0, r7
 4428 00da 0368     		ldr	r3, [r0]
 4429 00dc 0233     		add	r3, r3, #2
 4430 00de CC22     		mov	r2, #204
 4431 00e0 D219     		add	r2, r2, r7
 4432 00e2 1360     		str	r3, [r2]
 4433              	.L329:
1367:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4434              		.loc 1 1367 0 is_stmt 0 discriminator 1
 4435 00e4 CC20     		mov	r0, #204
 4436 00e6 C019     		add	r0, r0, r7
 4437 00e8 0368     		ldr	r3, [r0]
 4438 00ea 152B     		cmp	r3, #21
 4439 00ec DCDD     		ble	.L330
 4440              	.LBE4:
1371:.\main.c      ****             }
1372:.\main.c      ****         }
1373:.\main.c      ****         else
1374:.\main.c      ****         {
1375:.\main.c      ****         
1376:.\main.c      ****         //if(wiznet gives a complete packet)
1377:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1378:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1379:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1380:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1381:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1382:.\main.c      ****             effector();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 105


1383:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
1384:.\main.c      ****             send_packet(0); //send feedback onece every tick
1385:.\main.c      ****         }
1386:.\main.c      **** 
1387:.\main.c      **** //        else{dropped_packets++}
1388:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1389:.\main.c      **** //        LED_Write(0);
1390:.\main.c      **** //        temp_code_time = second_count - first_count;
1391:.\main.c      **** //        if(temp_code_time > code_time)
1392:.\main.c      **** //        {
1393:.\main.c      **** //            code_time = temp_code_time;
1394:.\main.c      **** //            itoa(code_time, time_array);
1395:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1396:.\main.c      **** //        }
1397:.\main.c      ****         
1398:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4441              		.loc 1 1398 0 is_stmt 1
 4442 00ee 4AE0     		b	.L334
 4443              	.L328:
1377:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4444              		.loc 1 1377 0
 4445 00f0 3C1C     		mov	r4, r7
 4446 00f2 D734     		add	r4, r4, #215
 4447 00f4 3B1C     		mov	r3, r7
 4448 00f6 D733     		add	r3, r3, #215
 4449 00f8 1A78     		ldrb	r2, [r3]
 4450 00fa 3B1C     		mov	r3, r7
 4451 00fc A033     		add	r3, r3, #160
 4452 00fe 101C     		mov	r0, r2
 4453 0100 191C     		mov	r1, r3
 4454 0102 FFF7FEFF 		bl	baseAzimuth
 4455 0106 031C     		mov	r3, r0
 4456 0108 2370     		strb	r3, [r4]
1378:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4457              		.loc 1 1378 0
 4458 010a 3C1C     		mov	r4, r7
 4459 010c D634     		add	r4, r4, #214
 4460 010e 3B1C     		mov	r3, r7
 4461 0110 D633     		add	r3, r3, #214
 4462 0112 1A78     		ldrb	r2, [r3]
 4463 0114 3B1C     		mov	r3, r7
 4464 0116 7833     		add	r3, r3, #120
 4465 0118 101C     		mov	r0, r2
 4466 011a 191C     		mov	r1, r3
 4467 011c FFF7FEFF 		bl	shoulder
 4468 0120 031C     		mov	r3, r0
 4469 0122 2370     		strb	r3, [r4]
1379:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4470              		.loc 1 1379 0
 4471 0124 3C1C     		mov	r4, r7
 4472 0126 D534     		add	r4, r4, #213
 4473 0128 3B1C     		mov	r3, r7
 4474 012a D533     		add	r3, r3, #213
 4475 012c 1A78     		ldrb	r2, [r3]
 4476 012e 3B1C     		mov	r3, r7
 4477 0130 5033     		add	r3, r3, #80
 4478 0132 101C     		mov	r0, r2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 106


 4479 0134 191C     		mov	r1, r3
 4480 0136 FFF7FEFF 		bl	elbow
 4481 013a 031C     		mov	r3, r0
 4482 013c 2370     		strb	r3, [r4]
1380:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4483              		.loc 1 1380 0
 4484 013e 3C1C     		mov	r4, r7
 4485 0140 D434     		add	r4, r4, #212
 4486 0142 3B1C     		mov	r3, r7
 4487 0144 D433     		add	r3, r3, #212
 4488 0146 1A78     		ldrb	r2, [r3]
 4489 0148 3B1C     		mov	r3, r7
 4490 014a 2833     		add	r3, r3, #40
 4491 014c 101C     		mov	r0, r2
 4492 014e 191C     		mov	r1, r3
 4493 0150 FFF7FEFF 		bl	wristTilt
 4494 0154 031C     		mov	r3, r0
 4495 0156 2370     		strb	r3, [r4]
1381:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4496              		.loc 1 1381 0
 4497 0158 3C1C     		mov	r4, r7
 4498 015a D334     		add	r4, r4, #211
 4499 015c 3B1C     		mov	r3, r7
 4500 015e D333     		add	r3, r3, #211
 4501 0160 1A78     		ldrb	r2, [r3]
 4502 0162 3B1C     		mov	r3, r7
 4503 0164 101C     		mov	r0, r2
 4504 0166 191C     		mov	r1, r3
 4505 0168 FFF7FEFF 		bl	wristRotate
 4506 016c 031C     		mov	r3, r0
 4507 016e 2370     		strb	r3, [r4]
1382:.\main.c      ****             effector();
 4508              		.loc 1 1382 0
 4509 0170 FFF7FEFF 		bl	effector
1383:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
 4510              		.loc 1 1383 0
 4511 0174 124B     		ldr	r3, .L335+36
 4512 0176 5B78     		ldrb	r3, [r3, #1]
 4513 0178 0133     		add	r3, r3, #1
 4514 017a DAB2     		uxtb	r2, r3
 4515 017c 104B     		ldr	r3, .L335+36
 4516 017e 5A70     		strb	r2, [r3, #1]
1384:.\main.c      ****             send_packet(0); //send feedback onece every tick
 4517              		.loc 1 1384 0
 4518 0180 0020     		mov	r0, #0
 4519 0182 FFF7FEFF 		bl	send_packet
 4520              	.L334:
 4521              		.loc 1 1398 0
 4522 0186 C046     		mov	r8, r8
 4523              	.L332:
 4524              		.loc 1 1398 0 is_stmt 0 discriminator 1
 4525 0188 0E4B     		ldr	r3, .L335+40
 4526 018a 1B78     		ldrb	r3, [r3]
 4527 018c DBB2     		uxtb	r3, r3
 4528 018e 002B     		cmp	r3, #0
 4529 0190 FAD0     		beq	.L332
1399:.\main.c      ****         timerFlag = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 107


 4530              		.loc 1 1399 0 is_stmt 1
 4531 0192 0C4B     		ldr	r3, .L335+40
 4532 0194 0022     		mov	r2, #0
 4533 0196 1A70     		strb	r2, [r3]
1400:.\main.c      ****     
1401:.\main.c      ****         
1402:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1403:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1404:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1405:.\main.c      **** //        counter++;
1406:.\main.c      **** //        
1407:.\main.c      **** //        if(counter == 50)
1408:.\main.c      **** //        {
1409:.\main.c      **** //        
1410:.\main.c      **** //            if(increasing)
1411:.\main.c      **** //            {
1412:.\main.c      **** //                temp_val += 100;
1413:.\main.c      **** //                if(temp_val == 1000)
1414:.\main.c      **** //                {
1415:.\main.c      **** //                    increasing = 0;
1416:.\main.c      **** //                }
1417:.\main.c      **** //            }
1418:.\main.c      **** //            else
1419:.\main.c      **** //            {
1420:.\main.c      **** //                temp_val -= 100;
1421:.\main.c      **** //                if(temp_val == -1000)
1422:.\main.c      **** //                {
1423:.\main.c      **** //                    increasing = 1;   
1424:.\main.c      **** //                }
1425:.\main.c      **** //            }
1426:.\main.c      **** //            
1427:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1428:.\main.c      **** //            //int16 forward = 1000;
1429:.\main.c      **** //            //int16 backward = -1000;
1430:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1431:.\main.c      **** //            {
1432:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1433:.\main.c      **** //                //test_array[i] = random_number >> 8;
1434:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1435:.\main.c      **** //                test_array[i] = temp_val >> 8;
1436:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1437:.\main.c      **** //            }
1438:.\main.c      **** ////            counter = 0;
1439:.\main.c      **** //            wiznet = 1;
1440:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 4534              		.loc 1 1440 0
 4535 0198 3FE7     		b	.L333
 4536              	.L336:
 4537 019a C046     		.align	2
 4538              	.L335:
 4539 019c DC050000 		.word	1500
 4540 01a0 00000000 		.word	BA_FLAG
 4541 01a4 00000000 		.word	WR_FLAG
 4542 01a8 00000000 		.word	WT_FLAG
 4543 01ac 00000000 		.word	SHOULDER_FLAG
 4544 01b0 00000000 		.word	ELBOW_FLAG
 4545 01b4 00000000 		.word	EFFECTOR_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 108


 4546 01b8 00000000 		.word	PH_FLAG
 4547 01bc 00000000 		.word	data_array
 4548 01c0 00000000 		.word	feedback_array
 4549 01c4 00000000 		.word	timerFlag
 4550              		.cfi_endproc
 4551              	.LFE56:
 4552              		.size	main, .-main
 4553              		.text
 4554              	.Letext0:
 4555              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4556              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4557              		.file 4 ".\\Generated_Source\\PSoC4/cytypes.h"
 4558              		.file 5 ".\\main.h"
 4559              		.section	.debug_info,"",%progbits
 4560              	.Ldebug_info0:
 4561 0000 DF0B0000 		.4byte	0xbdf
 4562 0004 0400     		.2byte	0x4
 4563 0006 00000000 		.4byte	.Ldebug_abbrev0
 4564 000a 04       		.byte	0x4
 4565 000b 01       		.uleb128 0x1
 4566 000c EE050000 		.4byte	.LASF159
 4567 0010 01       		.byte	0x1
 4568 0011 B3070000 		.4byte	.LASF160
 4569 0015 FA060000 		.4byte	.LASF161
 4570 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4571 001d 00000000 		.4byte	0
 4572 0021 00000000 		.4byte	.Ldebug_line0
 4573 0025 02       		.uleb128 0x2
 4574 0026 01       		.byte	0x1
 4575 0027 06       		.byte	0x6
 4576 0028 91060000 		.4byte	.LASF0
 4577 002c 03       		.uleb128 0x3
 4578 002d CE040000 		.4byte	.LASF9
 4579 0031 02       		.byte	0x2
 4580 0032 1C       		.byte	0x1c
 4581 0033 37000000 		.4byte	0x37
 4582 0037 02       		.uleb128 0x2
 4583 0038 01       		.byte	0x1
 4584 0039 08       		.byte	0x8
 4585 003a 7B050000 		.4byte	.LASF1
 4586 003e 02       		.uleb128 0x2
 4587 003f 02       		.byte	0x2
 4588 0040 05       		.byte	0x5
 4589 0041 4D040000 		.4byte	.LASF2
 4590 0045 02       		.uleb128 0x2
 4591 0046 02       		.byte	0x2
 4592 0047 07       		.byte	0x7
 4593 0048 BF060000 		.4byte	.LASF3
 4594 004c 02       		.uleb128 0x2
 4595 004d 04       		.byte	0x4
 4596 004e 05       		.byte	0x5
 4597 004f 72040000 		.4byte	.LASF4
 4598 0053 02       		.uleb128 0x2
 4599 0054 04       		.byte	0x4
 4600 0055 07       		.byte	0x7
 4601 0056 17050000 		.4byte	.LASF5
 4602 005a 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 109


 4603 005b 08       		.byte	0x8
 4604 005c 05       		.byte	0x5
 4605 005d D5020000 		.4byte	.LASF6
 4606 0061 02       		.uleb128 0x2
 4607 0062 08       		.byte	0x8
 4608 0063 07       		.byte	0x7
 4609 0064 78010000 		.4byte	.LASF7
 4610 0068 04       		.uleb128 0x4
 4611 0069 04       		.byte	0x4
 4612 006a 05       		.byte	0x5
 4613 006b 696E7400 		.ascii	"int\000"
 4614 006f 02       		.uleb128 0x2
 4615 0070 04       		.byte	0x4
 4616 0071 07       		.byte	0x7
 4617 0072 80000000 		.4byte	.LASF8
 4618 0076 03       		.uleb128 0x3
 4619 0077 AB020000 		.4byte	.LASF10
 4620 007b 03       		.byte	0x3
 4621 007c 2A       		.byte	0x2a
 4622 007d 2C000000 		.4byte	0x2c
 4623 0081 03       		.uleb128 0x3
 4624 0082 5E070000 		.4byte	.LASF11
 4625 0086 04       		.byte	0x4
 4626 0087 A1       		.byte	0xa1
 4627 0088 37000000 		.4byte	0x37
 4628 008c 03       		.uleb128 0x3
 4629 008d 80020000 		.4byte	.LASF12
 4630 0091 04       		.byte	0x4
 4631 0092 A2       		.byte	0xa2
 4632 0093 45000000 		.4byte	0x45
 4633 0097 03       		.uleb128 0x3
 4634 0098 78030000 		.4byte	.LASF13
 4635 009c 04       		.byte	0x4
 4636 009d A3       		.byte	0xa3
 4637 009e 53000000 		.4byte	0x53
 4638 00a2 03       		.uleb128 0x3
 4639 00a3 8E020000 		.4byte	.LASF14
 4640 00a7 04       		.byte	0x4
 4641 00a8 A4       		.byte	0xa4
 4642 00a9 25000000 		.4byte	0x25
 4643 00ad 03       		.uleb128 0x3
 4644 00ae A0000000 		.4byte	.LASF15
 4645 00b2 04       		.byte	0x4
 4646 00b3 A5       		.byte	0xa5
 4647 00b4 3E000000 		.4byte	0x3e
 4648 00b8 02       		.uleb128 0x2
 4649 00b9 04       		.byte	0x4
 4650 00ba 04       		.byte	0x4
 4651 00bb 52010000 		.4byte	.LASF16
 4652 00bf 02       		.uleb128 0x2
 4653 00c0 08       		.byte	0x8
 4654 00c1 04       		.byte	0x4
 4655 00c2 64070000 		.4byte	.LASF17
 4656 00c6 02       		.uleb128 0x2
 4657 00c7 01       		.byte	0x1
 4658 00c8 08       		.byte	0x8
 4659 00c9 7B020000 		.4byte	.LASF18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 110


 4660 00cd 05       		.uleb128 0x5
 4661 00ce 81000000 		.4byte	0x81
 4662 00d2 02       		.uleb128 0x2
 4663 00d3 04       		.byte	0x4
 4664 00d4 07       		.byte	0x7
 4665 00d5 0E050000 		.4byte	.LASF19
 4666 00d9 06       		.uleb128 0x6
 4667 00da B6040000 		.4byte	.LASF24
 4668 00de 01       		.byte	0x1
 4669 00df 01       		.byte	0x1
 4670 00e0 AA01     		.2byte	0x1aa
 4671 00e2 FF000000 		.4byte	0xff
 4672 00e6 07       		.uleb128 0x7
 4673 00e7 1A010000 		.4byte	.LASF20
 4674 00eb 00       		.sleb128 0
 4675 00ec 07       		.uleb128 0x7
 4676 00ed 0C000000 		.4byte	.LASF21
 4677 00f1 01       		.sleb128 1
 4678 00f2 07       		.uleb128 0x7
 4679 00f3 7B040000 		.4byte	.LASF22
 4680 00f7 02       		.sleb128 2
 4681 00f8 07       		.uleb128 0x7
 4682 00f9 4B070000 		.4byte	.LASF23
 4683 00fd 03       		.sleb128 3
 4684 00fe 00       		.byte	0
 4685 00ff 06       		.uleb128 0x6
 4686 0100 14030000 		.4byte	.LASF25
 4687 0104 01       		.byte	0x1
 4688 0105 01       		.byte	0x1
 4689 0106 1202     		.2byte	0x212
 4690 0108 25010000 		.4byte	0x125
 4691 010c 07       		.uleb128 0x7
 4692 010d F8000000 		.4byte	.LASF26
 4693 0111 00       		.sleb128 0
 4694 0112 07       		.uleb128 0x7
 4695 0113 E2050000 		.4byte	.LASF27
 4696 0117 01       		.sleb128 1
 4697 0118 07       		.uleb128 0x7
 4698 0119 35040000 		.4byte	.LASF28
 4699 011d 02       		.sleb128 2
 4700 011e 07       		.uleb128 0x7
 4701 011f 43050000 		.4byte	.LASF29
 4702 0123 03       		.sleb128 3
 4703 0124 00       		.byte	0
 4704 0125 06       		.uleb128 0x6
 4705 0126 61000000 		.4byte	.LASF30
 4706 012a 01       		.byte	0x1
 4707 012b 01       		.byte	0x1
 4708 012c 7D02     		.2byte	0x27d
 4709 012e 4B010000 		.4byte	0x14b
 4710 0132 07       		.uleb128 0x7
 4711 0133 B8030000 		.4byte	.LASF31
 4712 0137 00       		.sleb128 0
 4713 0138 07       		.uleb128 0x7
 4714 0139 BC070000 		.4byte	.LASF32
 4715 013d 01       		.sleb128 1
 4716 013e 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 111


 4717 013f 29050000 		.4byte	.LASF33
 4718 0143 02       		.sleb128 2
 4719 0144 07       		.uleb128 0x7
 4720 0145 D2060000 		.4byte	.LASF34
 4721 0149 03       		.sleb128 3
 4722 014a 00       		.byte	0
 4723 014b 06       		.uleb128 0x6
 4724 014c EB020000 		.4byte	.LASF35
 4725 0150 01       		.byte	0x1
 4726 0151 01       		.byte	0x1
 4727 0152 3203     		.2byte	0x332
 4728 0154 71010000 		.4byte	0x171
 4729 0158 07       		.uleb128 0x7
 4730 0159 64050000 		.4byte	.LASF36
 4731 015d 00       		.sleb128 0
 4732 015e 07       		.uleb128 0x7
 4733 015f BB020000 		.4byte	.LASF37
 4734 0163 01       		.sleb128 1
 4735 0164 07       		.uleb128 0x7
 4736 0165 BA050000 		.4byte	.LASF38
 4737 0169 02       		.sleb128 2
 4738 016a 07       		.uleb128 0x7
 4739 016b 45020000 		.4byte	.LASF39
 4740 016f 03       		.sleb128 3
 4741 0170 00       		.byte	0
 4742 0171 06       		.uleb128 0x6
 4743 0172 8D000000 		.4byte	.LASF40
 4744 0176 01       		.byte	0x1
 4745 0177 01       		.byte	0x1
 4746 0178 E703     		.2byte	0x3e7
 4747 017a 97010000 		.4byte	0x197
 4748 017e 07       		.uleb128 0x7
 4749 017f C2000000 		.4byte	.LASF41
 4750 0183 00       		.sleb128 0
 4751 0184 07       		.uleb128 0x7
 4752 0185 58010000 		.4byte	.LASF42
 4753 0189 01       		.sleb128 1
 4754 018a 07       		.uleb128 0x7
 4755 018b 56000000 		.4byte	.LASF43
 4756 018f 02       		.sleb128 2
 4757 0190 07       		.uleb128 0x7
 4758 0191 AE040000 		.4byte	.LASF44
 4759 0195 03       		.sleb128 3
 4760 0196 00       		.byte	0
 4761 0197 06       		.uleb128 0x6
 4762 0198 53030000 		.4byte	.LASF45
 4763 019c 01       		.byte	0x1
 4764 019d 01       		.byte	0x1
 4765 019e 4B04     		.2byte	0x44b
 4766 01a0 BD010000 		.4byte	0x1bd
 4767 01a4 07       		.uleb128 0x7
 4768 01a5 04020000 		.4byte	.LASF46
 4769 01a9 00       		.sleb128 0
 4770 01aa 07       		.uleb128 0x7
 4771 01ab A5050000 		.4byte	.LASF47
 4772 01af 01       		.sleb128 1
 4773 01b0 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 112


 4774 01b1 B4010000 		.4byte	.LASF48
 4775 01b5 02       		.sleb128 2
 4776 01b6 07       		.uleb128 0x7
 4777 01b7 F0040000 		.4byte	.LASF49
 4778 01bb 03       		.sleb128 3
 4779 01bc 00       		.byte	0
 4780 01bd 06       		.uleb128 0x6
 4781 01be 50020000 		.4byte	.LASF50
 4782 01c2 01       		.byte	0x1
 4783 01c3 01       		.byte	0x1
 4784 01c4 8D04     		.2byte	0x48d
 4785 01c6 E3010000 		.4byte	0x1e3
 4786 01ca 07       		.uleb128 0x7
 4787 01cb 4A030000 		.4byte	.LASF51
 4788 01cf 00       		.sleb128 0
 4789 01d0 07       		.uleb128 0x7
 4790 01d1 76070000 		.4byte	.LASF52
 4791 01d5 01       		.sleb128 1
 4792 01d6 07       		.uleb128 0x7
 4793 01d7 B7000000 		.4byte	.LASF53
 4794 01db 02       		.sleb128 2
 4795 01dc 07       		.uleb128 0x7
 4796 01dd DA050000 		.4byte	.LASF54
 4797 01e1 03       		.sleb128 3
 4798 01e2 00       		.byte	0
 4799 01e3 08       		.uleb128 0x8
 4800 01e4 88040000 		.4byte	.LASF88
 4801 01e8 01       		.byte	0x1
 4802 01e9 0A       		.byte	0xa
 4803 01ea 00000000 		.4byte	.LFB34
 4804 01ee 28000000 		.4byte	.LFE34-.LFB34
 4805 01f2 01       		.uleb128 0x1
 4806 01f3 9C       		.byte	0x9c
 4807 01f4 07020000 		.4byte	0x207
 4808 01f8 09       		.uleb128 0x9
 4809 01f9 86070000 		.4byte	.LASF55
 4810 01fd 01       		.byte	0x1
 4811 01fe 0C       		.byte	0xc
 4812 01ff 97000000 		.4byte	0x97
 4813 0203 02       		.uleb128 0x2
 4814 0204 91       		.byte	0x91
 4815 0205 74       		.sleb128 -12
 4816 0206 00       		.byte	0
 4817 0207 0A       		.uleb128 0xa
 4818 0208 A6000000 		.4byte	.LASF61
 4819 020c 01       		.byte	0x1
 4820 020d 2F       		.byte	0x2f
 4821 020e 8C000000 		.4byte	0x8c
 4822 0212 00000000 		.4byte	.LFB35
 4823 0216 90010000 		.4byte	.LFE35-.LFB35
 4824 021a 01       		.uleb128 0x1
 4825 021b 9C       		.byte	0x9c
 4826 021c 81020000 		.4byte	0x281
 4827 0220 0B       		.uleb128 0xb
 4828 0221 F9040000 		.4byte	.LASF63
 4829 0225 01       		.byte	0x1
 4830 0226 2F       		.byte	0x2f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 113


 4831 0227 8C000000 		.4byte	0x8c
 4832 022b 02       		.uleb128 0x2
 4833 022c 91       		.byte	0x91
 4834 022d 66       		.sleb128 -26
 4835 022e 09       		.uleb128 0x9
 4836 022f A4020000 		.4byte	.LASF56
 4837 0233 01       		.byte	0x1
 4838 0234 31       		.byte	0x31
 4839 0235 81000000 		.4byte	0x81
 4840 0239 02       		.uleb128 0x2
 4841 023a 91       		.byte	0x91
 4842 023b 71       		.sleb128 -15
 4843 023c 0C       		.uleb128 0xc
 4844 023d 6900     		.ascii	"i\000"
 4845 023f 01       		.byte	0x1
 4846 0240 32       		.byte	0x32
 4847 0241 81000000 		.4byte	0x81
 4848 0245 02       		.uleb128 0x2
 4849 0246 91       		.byte	0x91
 4850 0247 77       		.sleb128 -9
 4851 0248 09       		.uleb128 0x9
 4852 0249 72030000 		.4byte	.LASF57
 4853 024d 01       		.byte	0x1
 4854 024e 33       		.byte	0x33
 4855 024f 8C000000 		.4byte	0x8c
 4856 0253 02       		.uleb128 0x2
 4857 0254 91       		.byte	0x91
 4858 0255 74       		.sleb128 -12
 4859 0256 09       		.uleb128 0x9
 4860 0257 B7060000 		.4byte	.LASF58
 4861 025b 01       		.byte	0x1
 4862 025c 34       		.byte	0x34
 4863 025d 8C000000 		.4byte	0x8c
 4864 0261 02       		.uleb128 0x2
 4865 0262 91       		.byte	0x91
 4866 0263 72       		.sleb128 -14
 4867 0264 09       		.uleb128 0x9
 4868 0265 09040000 		.4byte	.LASF59
 4869 0269 01       		.byte	0x1
 4870 026a 35       		.byte	0x35
 4871 026b 97000000 		.4byte	0x97
 4872 026f 02       		.uleb128 0x2
 4873 0270 91       		.byte	0x91
 4874 0271 6C       		.sleb128 -20
 4875 0272 09       		.uleb128 0x9
 4876 0273 7D060000 		.4byte	.LASF60
 4877 0277 01       		.byte	0x1
 4878 0278 36       		.byte	0x36
 4879 0279 AD000000 		.4byte	0xad
 4880 027d 02       		.uleb128 0x2
 4881 027e 91       		.byte	0x91
 4882 027f 6A       		.sleb128 -22
 4883 0280 00       		.byte	0
 4884 0281 0A       		.uleb128 0xa
 4885 0282 23020000 		.4byte	.LASF62
 4886 0286 01       		.byte	0x1
 4887 0287 71       		.byte	0x71
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 114


 4888 0288 8C000000 		.4byte	0x8c
 4889 028c 00000000 		.4byte	.LFB36
 4890 0290 90010000 		.4byte	.LFE36-.LFB36
 4891 0294 01       		.uleb128 0x1
 4892 0295 9C       		.byte	0x9c
 4893 0296 FB020000 		.4byte	0x2fb
 4894 029a 0B       		.uleb128 0xb
 4895 029b F9040000 		.4byte	.LASF63
 4896 029f 01       		.byte	0x1
 4897 02a0 71       		.byte	0x71
 4898 02a1 8C000000 		.4byte	0x8c
 4899 02a5 02       		.uleb128 0x2
 4900 02a6 91       		.byte	0x91
 4901 02a7 66       		.sleb128 -26
 4902 02a8 09       		.uleb128 0x9
 4903 02a9 A4020000 		.4byte	.LASF56
 4904 02ad 01       		.byte	0x1
 4905 02ae 73       		.byte	0x73
 4906 02af 81000000 		.4byte	0x81
 4907 02b3 02       		.uleb128 0x2
 4908 02b4 91       		.byte	0x91
 4909 02b5 71       		.sleb128 -15
 4910 02b6 0C       		.uleb128 0xc
 4911 02b7 6900     		.ascii	"i\000"
 4912 02b9 01       		.byte	0x1
 4913 02ba 74       		.byte	0x74
 4914 02bb 81000000 		.4byte	0x81
 4915 02bf 02       		.uleb128 0x2
 4916 02c0 91       		.byte	0x91
 4917 02c1 77       		.sleb128 -9
 4918 02c2 09       		.uleb128 0x9
 4919 02c3 72030000 		.4byte	.LASF57
 4920 02c7 01       		.byte	0x1
 4921 02c8 75       		.byte	0x75
 4922 02c9 8C000000 		.4byte	0x8c
 4923 02cd 02       		.uleb128 0x2
 4924 02ce 91       		.byte	0x91
 4925 02cf 74       		.sleb128 -12
 4926 02d0 09       		.uleb128 0x9
 4927 02d1 B7060000 		.4byte	.LASF58
 4928 02d5 01       		.byte	0x1
 4929 02d6 76       		.byte	0x76
 4930 02d7 8C000000 		.4byte	0x8c
 4931 02db 02       		.uleb128 0x2
 4932 02dc 91       		.byte	0x91
 4933 02dd 72       		.sleb128 -14
 4934 02de 09       		.uleb128 0x9
 4935 02df 09040000 		.4byte	.LASF59
 4936 02e3 01       		.byte	0x1
 4937 02e4 77       		.byte	0x77
 4938 02e5 97000000 		.4byte	0x97
 4939 02e9 02       		.uleb128 0x2
 4940 02ea 91       		.byte	0x91
 4941 02eb 6C       		.sleb128 -20
 4942 02ec 09       		.uleb128 0x9
 4943 02ed 7D060000 		.4byte	.LASF60
 4944 02f1 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 115


 4945 02f2 78       		.byte	0x78
 4946 02f3 AD000000 		.4byte	0xad
 4947 02f7 02       		.uleb128 0x2
 4948 02f8 91       		.byte	0x91
 4949 02f9 6A       		.sleb128 -22
 4950 02fa 00       		.byte	0
 4951 02fb 0A       		.uleb128 0xa
 4952 02fc B7060000 		.4byte	.LASF58
 4953 0300 01       		.byte	0x1
 4954 0301 B2       		.byte	0xb2
 4955 0302 8C000000 		.4byte	0x8c
 4956 0306 00000000 		.4byte	.LFB37
 4957 030a 78000000 		.4byte	.LFE37-.LFB37
 4958 030e 01       		.uleb128 0x1
 4959 030f 9C       		.byte	0x9c
 4960 0310 59030000 		.4byte	0x359
 4961 0314 0B       		.uleb128 0xb
 4962 0315 69040000 		.4byte	.LASF64
 4963 0319 01       		.byte	0x1
 4964 031a B2       		.byte	0xb2
 4965 031b 59030000 		.4byte	0x359
 4966 031f 02       		.uleb128 0x2
 4967 0320 91       		.byte	0x91
 4968 0321 64       		.sleb128 -28
 4969 0322 0B       		.uleb128 0xb
 4970 0323 16000000 		.4byte	.LASF65
 4971 0327 01       		.byte	0x1
 4972 0328 B2       		.byte	0xb2
 4973 0329 81000000 		.4byte	0x81
 4974 032d 02       		.uleb128 0x2
 4975 032e 91       		.byte	0x91
 4976 032f 63       		.sleb128 -29
 4977 0330 0C       		.uleb128 0xc
 4978 0331 6900     		.ascii	"i\000"
 4979 0333 01       		.byte	0x1
 4980 0334 B4       		.byte	0xb4
 4981 0335 81000000 		.4byte	0x81
 4982 0339 02       		.uleb128 0x2
 4983 033a 91       		.byte	0x91
 4984 033b 77       		.sleb128 -9
 4985 033c 0C       		.uleb128 0xc
 4986 033d 73756D00 		.ascii	"sum\000"
 4987 0341 01       		.byte	0x1
 4988 0342 B5       		.byte	0xb5
 4989 0343 97000000 		.4byte	0x97
 4990 0347 02       		.uleb128 0x2
 4991 0348 91       		.byte	0x91
 4992 0349 70       		.sleb128 -16
 4993 034a 0C       		.uleb128 0xc
 4994 034b 61766700 		.ascii	"avg\000"
 4995 034f 01       		.byte	0x1
 4996 0350 B6       		.byte	0xb6
 4997 0351 8C000000 		.4byte	0x8c
 4998 0355 02       		.uleb128 0x2
 4999 0356 91       		.byte	0x91
 5000 0357 6E       		.sleb128 -18
 5001 0358 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 116


 5002 0359 0D       		.uleb128 0xd
 5003 035a 04       		.byte	0x4
 5004 035b 8C000000 		.4byte	0x8c
 5005 035f 0E       		.uleb128 0xe
 5006 0360 DA000000 		.4byte	.LASF66
 5007 0364 01       		.byte	0x1
 5008 0365 C2       		.byte	0xc2
 5009 0366 81000000 		.4byte	0x81
 5010 036a 00000000 		.4byte	.LFB38
 5011 036e 3E000000 		.4byte	.LFE38-.LFB38
 5012 0372 01       		.uleb128 0x1
 5013 0373 9C       		.byte	0x9c
 5014 0374 95030000 		.4byte	0x395
 5015 0378 0B       		.uleb128 0xb
 5016 0379 FB020000 		.4byte	.LASF67
 5017 037d 01       		.byte	0x1
 5018 037e C2       		.byte	0xc2
 5019 037f 81000000 		.4byte	0x81
 5020 0383 02       		.uleb128 0x2
 5021 0384 91       		.byte	0x91
 5022 0385 77       		.sleb128 -9
 5023 0386 0B       		.uleb128 0xb
 5024 0387 40020000 		.4byte	.LASF68
 5025 038b 01       		.byte	0x1
 5026 038c C2       		.byte	0xc2
 5027 038d 81000000 		.4byte	0x81
 5028 0391 02       		.uleb128 0x2
 5029 0392 91       		.byte	0x91
 5030 0393 76       		.sleb128 -10
 5031 0394 00       		.byte	0
 5032 0395 0A       		.uleb128 0xa
 5033 0396 D8040000 		.4byte	.LASF69
 5034 039a 01       		.byte	0x1
 5035 039b CF       		.byte	0xcf
 5036 039c 81000000 		.4byte	0x81
 5037 03a0 00000000 		.4byte	.LFB39
 5038 03a4 0C010000 		.4byte	.LFE39-.LFB39
 5039 03a8 01       		.uleb128 0x1
 5040 03a9 9C       		.byte	0x9c
 5041 03aa F5030000 		.4byte	0x3f5
 5042 03ae 0B       		.uleb128 0xb
 5043 03af D3030000 		.4byte	.LASF70
 5044 03b3 01       		.byte	0x1
 5045 03b4 CF       		.byte	0xcf
 5046 03b5 59030000 		.4byte	0x359
 5047 03b9 02       		.uleb128 0x2
 5048 03ba 91       		.byte	0x91
 5049 03bb 6C       		.sleb128 -20
 5050 03bc 0B       		.uleb128 0xb
 5051 03bd B3020000 		.4byte	.LASF71
 5052 03c1 01       		.byte	0x1
 5053 03c2 CF       		.byte	0xcf
 5054 03c3 81000000 		.4byte	0x81
 5055 03c7 02       		.uleb128 0x2
 5056 03c8 91       		.byte	0x91
 5057 03c9 6B       		.sleb128 -21
 5058 03ca 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 117


 5059 03cb 25010000 		.4byte	.LASF72
 5060 03cf 01       		.byte	0x1
 5061 03d0 CF       		.byte	0xcf
 5062 03d1 81000000 		.4byte	0x81
 5063 03d5 02       		.uleb128 0x2
 5064 03d6 91       		.byte	0x91
 5065 03d7 6A       		.sleb128 -22
 5066 03d8 0B       		.uleb128 0xb
 5067 03d9 02040000 		.4byte	.LASF73
 5068 03dd 01       		.byte	0x1
 5069 03de CF       		.byte	0xcf
 5070 03df 68000000 		.4byte	0x68
 5071 03e3 02       		.uleb128 0x2
 5072 03e4 91       		.byte	0x91
 5073 03e5 64       		.sleb128 -28
 5074 03e6 09       		.uleb128 0x9
 5075 03e7 60010000 		.4byte	.LASF74
 5076 03eb 01       		.byte	0x1
 5077 03ec D1       		.byte	0xd1
 5078 03ed 81000000 		.4byte	0x81
 5079 03f1 02       		.uleb128 0x2
 5080 03f2 91       		.byte	0x91
 5081 03f3 77       		.sleb128 -9
 5082 03f4 00       		.byte	0
 5083 03f5 0A       		.uleb128 0xa
 5084 03f6 3B010000 		.4byte	.LASF75
 5085 03fa 01       		.byte	0x1
 5086 03fb F5       		.byte	0xf5
 5087 03fc 81000000 		.4byte	0x81
 5088 0400 00000000 		.4byte	.LFB40
 5089 0404 0C020000 		.4byte	.LFE40-.LFB40
 5090 0408 01       		.uleb128 0x1
 5091 0409 9C       		.byte	0x9c
 5092 040a 47040000 		.4byte	0x447
 5093 040e 0B       		.uleb128 0xb
 5094 040f 6B020000 		.4byte	.LASF76
 5095 0413 01       		.byte	0x1
 5096 0414 F5       		.byte	0xf5
 5097 0415 81000000 		.4byte	0x81
 5098 0419 02       		.uleb128 0x2
 5099 041a 91       		.byte	0x91
 5100 041b 6F       		.sleb128 -17
 5101 041c 0B       		.uleb128 0xb
 5102 041d D3030000 		.4byte	.LASF70
 5103 0421 01       		.byte	0x1
 5104 0422 F5       		.byte	0xf5
 5105 0423 59030000 		.4byte	0x359
 5106 0427 02       		.uleb128 0x2
 5107 0428 91       		.byte	0x91
 5108 0429 68       		.sleb128 -24
 5109 042a 0B       		.uleb128 0xb
 5110 042b 1D040000 		.4byte	.LASF77
 5111 042f 01       		.byte	0x1
 5112 0430 F5       		.byte	0xf5
 5113 0431 81000000 		.4byte	0x81
 5114 0435 02       		.uleb128 0x2
 5115 0436 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 118


 5116 0437 6E       		.sleb128 -18
 5117 0438 0B       		.uleb128 0xb
 5118 0439 75060000 		.4byte	.LASF78
 5119 043d 01       		.byte	0x1
 5120 043e F5       		.byte	0xf5
 5121 043f 8C000000 		.4byte	0x8c
 5122 0443 02       		.uleb128 0x2
 5123 0444 91       		.byte	0x91
 5124 0445 6C       		.sleb128 -20
 5125 0446 00       		.byte	0
 5126 0447 0F       		.uleb128 0xf
 5127 0448 93030000 		.4byte	.LASF79
 5128 044c 01       		.byte	0x1
 5129 044d 2301     		.2byte	0x123
 5130 044f 8C000000 		.4byte	0x8c
 5131 0453 00000000 		.4byte	.LFB41
 5132 0457 84000000 		.4byte	.LFE41-.LFB41
 5133 045b 01       		.uleb128 0x1
 5134 045c 9C       		.byte	0x9c
 5135 045d CB040000 		.4byte	0x4cb
 5136 0461 10       		.uleb128 0x10
 5137 0462 70050000 		.4byte	.LASF80
 5138 0466 01       		.byte	0x1
 5139 0467 2301     		.2byte	0x123
 5140 0469 CB040000 		.4byte	0x4cb
 5141 046d 02       		.uleb128 0x2
 5142 046e 91       		.byte	0x91
 5143 046f 6C       		.sleb128 -20
 5144 0470 10       		.uleb128 0x10
 5145 0471 C0010000 		.4byte	.LASF81
 5146 0475 01       		.byte	0x1
 5147 0476 2301     		.2byte	0x123
 5148 0478 81000000 		.4byte	0x81
 5149 047c 02       		.uleb128 0x2
 5150 047d 91       		.byte	0x91
 5151 047e 6B       		.sleb128 -21
 5152 047f 10       		.uleb128 0x10
 5153 0480 C6010000 		.4byte	.LASF82
 5154 0484 01       		.byte	0x1
 5155 0485 2301     		.2byte	0x123
 5156 0487 81000000 		.4byte	0x81
 5157 048b 02       		.uleb128 0x2
 5158 048c 91       		.byte	0x91
 5159 048d 6A       		.sleb128 -22
 5160 048e 11       		.uleb128 0x11
 5161 048f 75060000 		.4byte	.LASF78
 5162 0493 01       		.byte	0x1
 5163 0494 2501     		.2byte	0x125
 5164 0496 8C000000 		.4byte	0x8c
 5165 049a 02       		.uleb128 0x2
 5166 049b 91       		.byte	0x91
 5167 049c 70       		.sleb128 -16
 5168 049d 11       		.uleb128 0x11
 5169 049e E1010000 		.4byte	.LASF83
 5170 04a2 01       		.byte	0x1
 5171 04a3 2601     		.2byte	0x126
 5172 04a5 AD000000 		.4byte	0xad
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 119


 5173 04a9 02       		.uleb128 0x2
 5174 04aa 91       		.byte	0x91
 5175 04ab 76       		.sleb128 -10
 5176 04ac 11       		.uleb128 0x11
 5177 04ad E7010000 		.4byte	.LASF84
 5178 04b1 01       		.byte	0x1
 5179 04b2 2701     		.2byte	0x127
 5180 04b4 AD000000 		.4byte	0xad
 5181 04b8 02       		.uleb128 0x2
 5182 04b9 91       		.byte	0x91
 5183 04ba 74       		.sleb128 -12
 5184 04bb 11       		.uleb128 0x11
 5185 04bc ED010000 		.4byte	.LASF85
 5186 04c0 01       		.byte	0x1
 5187 04c1 2801     		.2byte	0x128
 5188 04c3 AD000000 		.4byte	0xad
 5189 04c7 02       		.uleb128 0x2
 5190 04c8 91       		.byte	0x91
 5191 04c9 72       		.sleb128 -14
 5192 04ca 00       		.byte	0
 5193 04cb 0D       		.uleb128 0xd
 5194 04cc 04       		.byte	0x4
 5195 04cd A2000000 		.4byte	0xa2
 5196 04d1 12       		.uleb128 0x12
 5197 04d2 11040000 		.4byte	.LASF86
 5198 04d6 01       		.byte	0x1
 5199 04d7 3101     		.2byte	0x131
 5200 04d9 8C000000 		.4byte	0x8c
 5201 04dd 00000000 		.4byte	.LFB42
 5202 04e1 28000000 		.4byte	.LFE42-.LFB42
 5203 04e5 01       		.uleb128 0x1
 5204 04e6 9C       		.byte	0x9c
 5205 04e7 0A050000 		.4byte	0x50a
 5206 04eb 10       		.uleb128 0x10
 5207 04ec 09040000 		.4byte	.LASF59
 5208 04f0 01       		.byte	0x1
 5209 04f1 3101     		.2byte	0x131
 5210 04f3 97000000 		.4byte	0x97
 5211 04f7 02       		.uleb128 0x2
 5212 04f8 91       		.byte	0x91
 5213 04f9 6C       		.sleb128 -20
 5214 04fa 11       		.uleb128 0x11
 5215 04fb 93020000 		.4byte	.LASF87
 5216 04ff 01       		.byte	0x1
 5217 0500 3401     		.2byte	0x134
 5218 0502 8C000000 		.4byte	0x8c
 5219 0506 02       		.uleb128 0x2
 5220 0507 91       		.byte	0x91
 5221 0508 76       		.sleb128 -10
 5222 0509 00       		.byte	0
 5223 050a 13       		.uleb128 0x13
 5224 050b F6030000 		.4byte	.LASF89
 5225 050f 01       		.byte	0x1
 5226 0510 3901     		.2byte	0x139
 5227 0512 00000000 		.4byte	.LFB43
 5228 0516 04010000 		.4byte	.LFE43-.LFB43
 5229 051a 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 120


 5230 051b 9C       		.byte	0x9c
 5231 051c 30050000 		.4byte	0x530
 5232 0520 10       		.uleb128 0x10
 5233 0521 9D060000 		.4byte	.LASF90
 5234 0525 01       		.byte	0x1
 5235 0526 3901     		.2byte	0x139
 5236 0528 81000000 		.4byte	0x81
 5237 052c 02       		.uleb128 0x2
 5238 052d 91       		.byte	0x91
 5239 052e 77       		.sleb128 -9
 5240 052f 00       		.byte	0
 5241 0530 14       		.uleb128 0x14
 5242 0531 89050000 		.4byte	.LASF113
 5243 0535 01       		.byte	0x1
 5244 0536 6B01     		.2byte	0x16b
 5245 0538 00000000 		.4byte	.LFB44
 5246 053c 18000000 		.4byte	.LFE44-.LFB44
 5247 0540 01       		.uleb128 0x1
 5248 0541 9C       		.byte	0x9c
 5249 0542 13       		.uleb128 0x13
 5250 0543 8F010000 		.4byte	.LASF91
 5251 0547 01       		.byte	0x1
 5252 0548 7501     		.2byte	0x175
 5253 054a 00000000 		.4byte	.LFB45
 5254 054e 98000000 		.4byte	.LFE45-.LFB45
 5255 0552 01       		.uleb128 0x1
 5256 0553 9C       		.byte	0x9c
 5257 0554 86050000 		.4byte	0x586
 5258 0558 10       		.uleb128 0x10
 5259 0559 7E070000 		.4byte	.LASF92
 5260 055d 01       		.byte	0x1
 5261 055e 7501     		.2byte	0x175
 5262 0560 81000000 		.4byte	0x81
 5263 0564 02       		.uleb128 0x2
 5264 0565 91       		.byte	0x91
 5265 0566 67       		.sleb128 -25
 5266 0567 10       		.uleb128 0x10
 5267 0568 AA070000 		.4byte	.LASF93
 5268 056c 01       		.byte	0x1
 5269 056d 7501     		.2byte	0x175
 5270 056f 8C000000 		.4byte	0x8c
 5271 0573 02       		.uleb128 0x2
 5272 0574 91       		.byte	0x91
 5273 0575 64       		.sleb128 -28
 5274 0576 11       		.uleb128 0x11
 5275 0577 D3030000 		.4byte	.LASF70
 5276 057b 01       		.byte	0x1
 5277 057c 7701     		.2byte	0x177
 5278 057e 86050000 		.4byte	0x586
 5279 0582 02       		.uleb128 0x2
 5280 0583 91       		.byte	0x91
 5281 0584 6C       		.sleb128 -20
 5282 0585 00       		.byte	0
 5283 0586 15       		.uleb128 0x15
 5284 0587 81000000 		.4byte	0x81
 5285 058b 96050000 		.4byte	0x596
 5286 058f 16       		.uleb128 0x16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 121


 5287 0590 D2000000 		.4byte	0xd2
 5288 0594 08       		.byte	0x8
 5289 0595 00       		.byte	0
 5290 0596 13       		.uleb128 0x13
 5291 0597 9B070000 		.4byte	.LASF94
 5292 059b 01       		.byte	0x1
 5293 059c 8601     		.2byte	0x186
 5294 059e 00000000 		.4byte	.LFB46
 5295 05a2 98000000 		.4byte	.LFE46-.LFB46
 5296 05a6 01       		.uleb128 0x1
 5297 05a7 9C       		.byte	0x9c
 5298 05a8 DA050000 		.4byte	0x5da
 5299 05ac 10       		.uleb128 0x10
 5300 05ad 7E070000 		.4byte	.LASF92
 5301 05b1 01       		.byte	0x1
 5302 05b2 8601     		.2byte	0x186
 5303 05b4 81000000 		.4byte	0x81
 5304 05b8 02       		.uleb128 0x2
 5305 05b9 91       		.byte	0x91
 5306 05ba 67       		.sleb128 -25
 5307 05bb 10       		.uleb128 0x10
 5308 05bc 87020000 		.4byte	.LASF95
 5309 05c0 01       		.byte	0x1
 5310 05c1 8601     		.2byte	0x186
 5311 05c3 8C000000 		.4byte	0x8c
 5312 05c7 02       		.uleb128 0x2
 5313 05c8 91       		.byte	0x91
 5314 05c9 64       		.sleb128 -28
 5315 05ca 11       		.uleb128 0x11
 5316 05cb D3030000 		.4byte	.LASF70
 5317 05cf 01       		.byte	0x1
 5318 05d0 8801     		.2byte	0x188
 5319 05d2 86050000 		.4byte	0x586
 5320 05d6 02       		.uleb128 0x2
 5321 05d7 91       		.byte	0x91
 5322 05d8 6C       		.sleb128 -20
 5323 05d9 00       		.byte	0
 5324 05da 13       		.uleb128 0x13
 5325 05db E5040000 		.4byte	.LASF96
 5326 05df 01       		.byte	0x1
 5327 05e0 9801     		.2byte	0x198
 5328 05e2 00000000 		.4byte	.LFB47
 5329 05e6 98000000 		.4byte	.LFE47-.LFB47
 5330 05ea 01       		.uleb128 0x1
 5331 05eb 9C       		.byte	0x9c
 5332 05ec 1E060000 		.4byte	0x61e
 5333 05f0 10       		.uleb128 0x10
 5334 05f1 7E070000 		.4byte	.LASF92
 5335 05f5 01       		.byte	0x1
 5336 05f6 9801     		.2byte	0x198
 5337 05f8 81000000 		.4byte	0x81
 5338 05fc 02       		.uleb128 0x2
 5339 05fd 91       		.byte	0x91
 5340 05fe 67       		.sleb128 -25
 5341 05ff 10       		.uleb128 0x10
 5342 0600 05010000 		.4byte	.LASF97
 5343 0604 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 122


 5344 0605 9801     		.2byte	0x198
 5345 0607 8C000000 		.4byte	0x8c
 5346 060b 02       		.uleb128 0x2
 5347 060c 91       		.byte	0x91
 5348 060d 64       		.sleb128 -28
 5349 060e 11       		.uleb128 0x11
 5350 060f D3030000 		.4byte	.LASF70
 5351 0613 01       		.byte	0x1
 5352 0614 9A01     		.2byte	0x19a
 5353 0616 86050000 		.4byte	0x586
 5354 061a 02       		.uleb128 0x2
 5355 061b 91       		.byte	0x91
 5356 061c 6C       		.sleb128 -20
 5357 061d 00       		.byte	0
 5358 061e 12       		.uleb128 0x12
 5359 061f A0030000 		.4byte	.LASF98
 5360 0623 01       		.byte	0x1
 5361 0624 AC01     		.2byte	0x1ac
 5362 0626 81000000 		.4byte	0x81
 5363 062a 00000000 		.4byte	.LFB48
 5364 062e 6C010000 		.4byte	.LFE48-.LFB48
 5365 0632 01       		.uleb128 0x1
 5366 0633 9C       		.byte	0x9c
 5367 0634 82060000 		.4byte	0x682
 5368 0638 10       		.uleb128 0x10
 5369 0639 28040000 		.4byte	.LASF99
 5370 063d 01       		.byte	0x1
 5371 063e AC01     		.2byte	0x1ac
 5372 0640 81000000 		.4byte	0x81
 5373 0644 02       		.uleb128 0x2
 5374 0645 91       		.byte	0x91
 5375 0646 67       		.sleb128 -25
 5376 0647 10       		.uleb128 0x10
 5377 0648 6E000000 		.4byte	.LASF100
 5378 064c 01       		.byte	0x1
 5379 064d AC01     		.2byte	0x1ac
 5380 064f 59030000 		.4byte	0x359
 5381 0653 02       		.uleb128 0x2
 5382 0654 91       		.byte	0x91
 5383 0655 60       		.sleb128 -32
 5384 0656 17       		.uleb128 0x17
 5385 0657 6900     		.ascii	"i\000"
 5386 0659 01       		.byte	0x1
 5387 065a BC01     		.2byte	0x1bc
 5388 065c 81000000 		.4byte	0x81
 5389 0660 02       		.uleb128 0x2
 5390 0661 91       		.byte	0x91
 5391 0662 6F       		.sleb128 -17
 5392 0663 17       		.uleb128 0x17
 5393 0664 61766700 		.ascii	"avg\000"
 5394 0668 01       		.byte	0x1
 5395 0669 BD01     		.2byte	0x1bd
 5396 066b 8C000000 		.4byte	0x8c
 5397 066f 02       		.uleb128 0x2
 5398 0670 91       		.byte	0x91
 5399 0671 6A       		.sleb128 -22
 5400 0672 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 123


 5401 0673 75060000 		.4byte	.LASF78
 5402 0677 01       		.byte	0x1
 5403 0678 BE01     		.2byte	0x1be
 5404 067a 8C000000 		.4byte	0x8c
 5405 067e 02       		.uleb128 0x2
 5406 067f 91       		.byte	0x91
 5407 0680 6C       		.sleb128 -20
 5408 0681 00       		.byte	0
 5409 0682 12       		.uleb128 0x12
 5410 0683 99050000 		.4byte	.LASF101
 5411 0687 01       		.byte	0x1
 5412 0688 1402     		.2byte	0x214
 5413 068a 81000000 		.4byte	0x81
 5414 068e 00000000 		.4byte	.LFB49
 5415 0692 6C010000 		.4byte	.LFE49-.LFB49
 5416 0696 01       		.uleb128 0x1
 5417 0697 9C       		.byte	0x9c
 5418 0698 E6060000 		.4byte	0x6e6
 5419 069c 10       		.uleb128 0x10
 5420 069d 49000000 		.4byte	.LASF102
 5421 06a1 01       		.byte	0x1
 5422 06a2 1402     		.2byte	0x214
 5423 06a4 81000000 		.4byte	0x81
 5424 06a8 02       		.uleb128 0x2
 5425 06a9 91       		.byte	0x91
 5426 06aa 67       		.sleb128 -25
 5427 06ab 10       		.uleb128 0x10
 5428 06ac 55070000 		.4byte	.LASF103
 5429 06b0 01       		.byte	0x1
 5430 06b1 1402     		.2byte	0x214
 5431 06b3 59030000 		.4byte	0x359
 5432 06b7 02       		.uleb128 0x2
 5433 06b8 91       		.byte	0x91
 5434 06b9 60       		.sleb128 -32
 5435 06ba 17       		.uleb128 0x17
 5436 06bb 6900     		.ascii	"i\000"
 5437 06bd 01       		.byte	0x1
 5438 06be 2402     		.2byte	0x224
 5439 06c0 81000000 		.4byte	0x81
 5440 06c4 02       		.uleb128 0x2
 5441 06c5 91       		.byte	0x91
 5442 06c6 6F       		.sleb128 -17
 5443 06c7 17       		.uleb128 0x17
 5444 06c8 61766700 		.ascii	"avg\000"
 5445 06cc 01       		.byte	0x1
 5446 06cd 2502     		.2byte	0x225
 5447 06cf 8C000000 		.4byte	0x8c
 5448 06d3 02       		.uleb128 0x2
 5449 06d4 91       		.byte	0x91
 5450 06d5 6A       		.sleb128 -22
 5451 06d6 11       		.uleb128 0x11
 5452 06d7 75060000 		.4byte	.LASF78
 5453 06db 01       		.byte	0x1
 5454 06dc 2602     		.2byte	0x226
 5455 06de 8C000000 		.4byte	0x8c
 5456 06e2 02       		.uleb128 0x2
 5457 06e3 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 124


 5458 06e4 6C       		.sleb128 -20
 5459 06e5 00       		.byte	0
 5460 06e6 12       		.uleb128 0x12
 5461 06e7 FE010000 		.4byte	.LASF104
 5462 06eb 01       		.byte	0x1
 5463 06ec 7E02     		.2byte	0x27e
 5464 06ee 81000000 		.4byte	0x81
 5465 06f2 00000000 		.4byte	.LFB50
 5466 06f6 44030000 		.4byte	.LFE50-.LFB50
 5467 06fa 01       		.uleb128 0x1
 5468 06fb 9C       		.byte	0x9c
 5469 06fc 59070000 		.4byte	0x759
 5470 0700 10       		.uleb128 0x10
 5471 0701 0B010000 		.4byte	.LASF105
 5472 0705 01       		.byte	0x1
 5473 0706 7E02     		.2byte	0x27e
 5474 0708 81000000 		.4byte	0x81
 5475 070c 02       		.uleb128 0x2
 5476 070d 91       		.byte	0x91
 5477 070e 67       		.sleb128 -25
 5478 070f 10       		.uleb128 0x10
 5479 0710 AE050000 		.4byte	.LASF106
 5480 0714 01       		.byte	0x1
 5481 0715 7E02     		.2byte	0x27e
 5482 0717 59030000 		.4byte	0x359
 5483 071b 02       		.uleb128 0x2
 5484 071c 91       		.byte	0x91
 5485 071d 60       		.sleb128 -32
 5486 071e 17       		.uleb128 0x17
 5487 071f 6900     		.ascii	"i\000"
 5488 0721 01       		.byte	0x1
 5489 0722 8402     		.2byte	0x284
 5490 0724 81000000 		.4byte	0x81
 5491 0728 02       		.uleb128 0x2
 5492 0729 91       		.byte	0x91
 5493 072a 6F       		.sleb128 -17
 5494 072b 17       		.uleb128 0x17
 5495 072c 61766700 		.ascii	"avg\000"
 5496 0730 01       		.byte	0x1
 5497 0731 8502     		.2byte	0x285
 5498 0733 8C000000 		.4byte	0x8c
 5499 0737 02       		.uleb128 0x2
 5500 0738 91       		.byte	0x91
 5501 0739 68       		.sleb128 -24
 5502 073a 11       		.uleb128 0x11
 5503 073b 75060000 		.4byte	.LASF78
 5504 073f 01       		.byte	0x1
 5505 0740 8602     		.2byte	0x286
 5506 0742 8C000000 		.4byte	0x8c
 5507 0746 02       		.uleb128 0x2
 5508 0747 91       		.byte	0x91
 5509 0748 6A       		.sleb128 -22
 5510 0749 11       		.uleb128 0x11
 5511 074a 93020000 		.4byte	.LASF87
 5512 074e 01       		.byte	0x1
 5513 074f 8902     		.2byte	0x289
 5514 0751 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 125


 5515 0755 02       		.uleb128 0x2
 5516 0756 91       		.byte	0x91
 5517 0757 6C       		.sleb128 -20
 5518 0758 00       		.byte	0
 5519 0759 12       		.uleb128 0x12
 5520 075a AB010000 		.4byte	.LASF107
 5521 075e 01       		.byte	0x1
 5522 075f 3303     		.2byte	0x333
 5523 0761 81000000 		.4byte	0x81
 5524 0765 00000000 		.4byte	.LFB51
 5525 0769 44030000 		.4byte	.LFE51-.LFB51
 5526 076d 01       		.uleb128 0x1
 5527 076e 9C       		.byte	0x9c
 5528 076f CC070000 		.4byte	0x7cc
 5529 0773 10       		.uleb128 0x10
 5530 0774 D9030000 		.4byte	.LASF108
 5531 0778 01       		.byte	0x1
 5532 0779 3303     		.2byte	0x333
 5533 077b 81000000 		.4byte	0x81
 5534 077f 02       		.uleb128 0x2
 5535 0780 91       		.byte	0x91
 5536 0781 67       		.sleb128 -25
 5537 0782 10       		.uleb128 0x10
 5538 0783 CB000000 		.4byte	.LASF109
 5539 0787 01       		.byte	0x1
 5540 0788 3303     		.2byte	0x333
 5541 078a 59030000 		.4byte	0x359
 5542 078e 02       		.uleb128 0x2
 5543 078f 91       		.byte	0x91
 5544 0790 60       		.sleb128 -32
 5545 0791 17       		.uleb128 0x17
 5546 0792 6900     		.ascii	"i\000"
 5547 0794 01       		.byte	0x1
 5548 0795 3903     		.2byte	0x339
 5549 0797 81000000 		.4byte	0x81
 5550 079b 02       		.uleb128 0x2
 5551 079c 91       		.byte	0x91
 5552 079d 6F       		.sleb128 -17
 5553 079e 17       		.uleb128 0x17
 5554 079f 61766700 		.ascii	"avg\000"
 5555 07a3 01       		.byte	0x1
 5556 07a4 3A03     		.2byte	0x33a
 5557 07a6 8C000000 		.4byte	0x8c
 5558 07aa 02       		.uleb128 0x2
 5559 07ab 91       		.byte	0x91
 5560 07ac 68       		.sleb128 -24
 5561 07ad 11       		.uleb128 0x11
 5562 07ae 75060000 		.4byte	.LASF78
 5563 07b2 01       		.byte	0x1
 5564 07b3 3B03     		.2byte	0x33b
 5565 07b5 8C000000 		.4byte	0x8c
 5566 07b9 02       		.uleb128 0x2
 5567 07ba 91       		.byte	0x91
 5568 07bb 6A       		.sleb128 -22
 5569 07bc 11       		.uleb128 0x11
 5570 07bd 93020000 		.4byte	.LASF87
 5571 07c1 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 126


 5572 07c2 3C03     		.2byte	0x33c
 5573 07c4 8C000000 		.4byte	0x8c
 5574 07c8 02       		.uleb128 0x2
 5575 07c9 91       		.byte	0x91
 5576 07ca 6C       		.sleb128 -20
 5577 07cb 00       		.byte	0
 5578 07cc 12       		.uleb128 0x12
 5579 07cd 00000000 		.4byte	.LASF110
 5580 07d1 01       		.byte	0x1
 5581 07d2 E803     		.2byte	0x3e8
 5582 07d4 81000000 		.4byte	0x81
 5583 07d8 00000000 		.4byte	.LFB52
 5584 07dc 5C010000 		.4byte	.LFE52-.LFB52
 5585 07e0 01       		.uleb128 0x1
 5586 07e1 9C       		.byte	0x9c
 5587 07e2 30080000 		.4byte	0x830
 5588 07e6 10       		.uleb128 0x10
 5589 07e7 E9030000 		.4byte	.LASF111
 5590 07eb 01       		.byte	0x1
 5591 07ec E803     		.2byte	0x3e8
 5592 07ee 81000000 		.4byte	0x81
 5593 07f2 02       		.uleb128 0x2
 5594 07f3 91       		.byte	0x91
 5595 07f4 67       		.sleb128 -25
 5596 07f5 10       		.uleb128 0x10
 5597 07f6 36050000 		.4byte	.LASF112
 5598 07fa 01       		.byte	0x1
 5599 07fb E803     		.2byte	0x3e8
 5600 07fd 59030000 		.4byte	0x359
 5601 0801 02       		.uleb128 0x2
 5602 0802 91       		.byte	0x91
 5603 0803 60       		.sleb128 -32
 5604 0804 17       		.uleb128 0x17
 5605 0805 6900     		.ascii	"i\000"
 5606 0807 01       		.byte	0x1
 5607 0808 ED03     		.2byte	0x3ed
 5608 080a 81000000 		.4byte	0x81
 5609 080e 02       		.uleb128 0x2
 5610 080f 91       		.byte	0x91
 5611 0810 6F       		.sleb128 -17
 5612 0811 17       		.uleb128 0x17
 5613 0812 61766700 		.ascii	"avg\000"
 5614 0816 01       		.byte	0x1
 5615 0817 EE03     		.2byte	0x3ee
 5616 0819 8C000000 		.4byte	0x8c
 5617 081d 02       		.uleb128 0x2
 5618 081e 91       		.byte	0x91
 5619 081f 6A       		.sleb128 -22
 5620 0820 11       		.uleb128 0x11
 5621 0821 75060000 		.4byte	.LASF78
 5622 0825 01       		.byte	0x1
 5623 0826 EF03     		.2byte	0x3ef
 5624 0828 8C000000 		.4byte	0x8c
 5625 082c 02       		.uleb128 0x2
 5626 082d 91       		.byte	0x91
 5627 082e 6C       		.sleb128 -20
 5628 082f 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 127


 5629 0830 18       		.uleb128 0x18
 5630 0831 77000000 		.4byte	.LASF115
 5631 0835 01       		.byte	0x1
 5632 0836 4C04     		.2byte	0x44c
 5633 0838 00000000 		.4byte	.LFB53
 5634 083c DC000000 		.4byte	.LFE53-.LFB53
 5635 0840 01       		.uleb128 0x1
 5636 0841 9C       		.byte	0x9c
 5637 0842 56080000 		.4byte	0x856
 5638 0846 11       		.uleb128 0x11
 5639 0847 75060000 		.4byte	.LASF78
 5640 084b 01       		.byte	0x1
 5641 084c 4E04     		.2byte	0x44e
 5642 084e 8C000000 		.4byte	0x8c
 5643 0852 02       		.uleb128 0x2
 5644 0853 91       		.byte	0x91
 5645 0854 6E       		.sleb128 -18
 5646 0855 00       		.byte	0
 5647 0856 19       		.uleb128 0x19
 5648 0857 44040000 		.4byte	.LASF114
 5649 085b 01       		.byte	0x1
 5650 085c 8E04     		.2byte	0x48e
 5651 085e 00000000 		.4byte	.LFB54
 5652 0862 8C000000 		.4byte	.LFE54-.LFB54
 5653 0866 01       		.uleb128 0x1
 5654 0867 9C       		.byte	0x9c
 5655 0868 18       		.uleb128 0x18
 5656 0869 F3010000 		.4byte	.LASF116
 5657 086d 01       		.byte	0x1
 5658 086e BE04     		.2byte	0x4be
 5659 0870 00000000 		.4byte	.LFB55
 5660 0874 90010000 		.4byte	.LFE55-.LFB55
 5661 0878 01       		.uleb128 0x1
 5662 0879 9C       		.byte	0x9c
 5663 087a B1080000 		.4byte	0x8b1
 5664 087e 1A       		.uleb128 0x1a
 5665 087f 1E000000 		.4byte	.LBB2
 5666 0883 2C000000 		.4byte	.LBE2-.LBB2
 5667 0887 99080000 		.4byte	0x899
 5668 088b 17       		.uleb128 0x17
 5669 088c 6A00     		.ascii	"j\000"
 5670 088e 01       		.byte	0x1
 5671 088f C504     		.2byte	0x4c5
 5672 0891 81000000 		.4byte	0x81
 5673 0895 02       		.uleb128 0x2
 5674 0896 91       		.byte	0x91
 5675 0897 77       		.sleb128 -9
 5676 0898 00       		.byte	0
 5677 0899 1B       		.uleb128 0x1b
 5678 089a 6E000000 		.4byte	.LBB3
 5679 089e 1C000000 		.4byte	.LBE3-.LBB3
 5680 08a2 17       		.uleb128 0x17
 5681 08a3 6900     		.ascii	"i\000"
 5682 08a5 01       		.byte	0x1
 5683 08a6 D904     		.2byte	0x4d9
 5684 08a8 68000000 		.4byte	0x68
 5685 08ac 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 128


 5686 08ad 91       		.byte	0x91
 5687 08ae 70       		.sleb128 -16
 5688 08af 00       		.byte	0
 5689 08b0 00       		.byte	0
 5690 08b1 1C       		.uleb128 0x1c
 5691 08b2 EC060000 		.4byte	.LASF117
 5692 08b6 01       		.byte	0x1
 5693 08b7 0905     		.2byte	0x509
 5694 08b9 68000000 		.4byte	0x68
 5695 08bd 00000000 		.4byte	.LFB56
 5696 08c1 C8010000 		.4byte	.LFE56-.LFB56
 5697 08c5 01       		.uleb128 0x1
 5698 08c6 9C       		.byte	0x9c
 5699 08c7 9C090000 		.4byte	0x99c
 5700 08cb 11       		.uleb128 0x11
 5701 08cc 2B000000 		.4byte	.LASF118
 5702 08d0 01       		.byte	0x1
 5703 08d1 1405     		.2byte	0x514
 5704 08d3 81000000 		.4byte	0x81
 5705 08d7 02       		.uleb128 0x2
 5706 08d8 91       		.byte	0x91
 5707 08d9 6F       		.sleb128 -17
 5708 08da 11       		.uleb128 0x11
 5709 08db F1060000 		.4byte	.LASF119
 5710 08df 01       		.byte	0x1
 5711 08e0 1505     		.2byte	0x515
 5712 08e2 9C090000 		.4byte	0x99c
 5713 08e6 03       		.uleb128 0x3
 5714 08e7 91       		.byte	0x91
 5715 08e8 B87F     		.sleb128 -72
 5716 08ea 11       		.uleb128 0x11
 5717 08eb 7F030000 		.4byte	.LASF120
 5718 08ef 01       		.byte	0x1
 5719 08f0 1605     		.2byte	0x516
 5720 08f2 81000000 		.4byte	0x81
 5721 08f6 02       		.uleb128 0x2
 5722 08f7 91       		.byte	0x91
 5723 08f8 6E       		.sleb128 -18
 5724 08f9 11       		.uleb128 0x11
 5725 08fa 02050000 		.4byte	.LASF121
 5726 08fe 01       		.byte	0x1
 5727 08ff 1705     		.2byte	0x517
 5728 0901 9C090000 		.4byte	0x99c
 5729 0905 03       		.uleb128 0x3
 5730 0906 91       		.byte	0x91
 5731 0907 907F     		.sleb128 -112
 5732 0909 11       		.uleb128 0x11
 5733 090a 0E020000 		.4byte	.LASF122
 5734 090e 01       		.byte	0x1
 5735 090f 1805     		.2byte	0x518
 5736 0911 81000000 		.4byte	0x81
 5737 0915 02       		.uleb128 0x2
 5738 0916 91       		.byte	0x91
 5739 0917 6D       		.sleb128 -19
 5740 0918 11       		.uleb128 0x11
 5741 0919 09030000 		.4byte	.LASF123
 5742 091d 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 129


 5743 091e 1905     		.2byte	0x519
 5744 0920 9C090000 		.4byte	0x99c
 5745 0924 03       		.uleb128 0x3
 5746 0925 91       		.byte	0x91
 5747 0926 E87E     		.sleb128 -152
 5748 0928 11       		.uleb128 0x11
 5749 0929 40000000 		.4byte	.LASF124
 5750 092d 01       		.byte	0x1
 5751 092e 1A05     		.2byte	0x51a
 5752 0930 81000000 		.4byte	0x81
 5753 0934 02       		.uleb128 0x2
 5754 0935 91       		.byte	0x91
 5755 0936 6C       		.sleb128 -20
 5756 0937 11       		.uleb128 0x11
 5757 0938 6E000000 		.4byte	.LASF100
 5758 093c 01       		.byte	0x1
 5759 093d 1B05     		.2byte	0x51b
 5760 093f 9C090000 		.4byte	0x99c
 5761 0943 03       		.uleb128 0x3
 5762 0944 91       		.byte	0x91
 5763 0945 C07E     		.sleb128 -192
 5764 0947 11       		.uleb128 0x11
 5765 0948 00030000 		.4byte	.LASF125
 5766 094c 01       		.byte	0x1
 5767 094d 1C05     		.2byte	0x51c
 5768 094f 81000000 		.4byte	0x81
 5769 0953 02       		.uleb128 0x2
 5770 0954 91       		.byte	0x91
 5771 0955 6B       		.sleb128 -21
 5772 0956 11       		.uleb128 0x11
 5773 0957 55070000 		.4byte	.LASF103
 5774 095b 01       		.byte	0x1
 5775 095c 1D05     		.2byte	0x51d
 5776 095e 9C090000 		.4byte	0x99c
 5777 0962 03       		.uleb128 0x3
 5778 0963 91       		.byte	0x91
 5779 0964 987E     		.sleb128 -232
 5780 0966 11       		.uleb128 0x11
 5781 0967 37020000 		.4byte	.LASF126
 5782 096b 01       		.byte	0x1
 5783 096c 2705     		.2byte	0x527
 5784 096e 81000000 		.4byte	0x81
 5785 0972 02       		.uleb128 0x2
 5786 0973 91       		.byte	0x91
 5787 0974 6A       		.sleb128 -22
 5788 0975 11       		.uleb128 0x11
 5789 0976 88060000 		.4byte	.LASF127
 5790 097a 01       		.byte	0x1
 5791 097b 2805     		.2byte	0x528
 5792 097d AD000000 		.4byte	0xad
 5793 0981 02       		.uleb128 0x2
 5794 0982 91       		.byte	0x91
 5795 0983 62       		.sleb128 -30
 5796 0984 1B       		.uleb128 0x1b
 5797 0985 9E000000 		.4byte	.LBB4
 5798 0989 50000000 		.4byte	.LBE4-.LBB4
 5799 098d 17       		.uleb128 0x17
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 130


 5800 098e 6900     		.ascii	"i\000"
 5801 0990 01       		.byte	0x1
 5802 0991 5705     		.2byte	0x557
 5803 0993 68000000 		.4byte	0x68
 5804 0997 02       		.uleb128 0x2
 5805 0998 91       		.byte	0x91
 5806 0999 64       		.sleb128 -28
 5807 099a 00       		.byte	0
 5808 099b 00       		.byte	0
 5809 099c 15       		.uleb128 0x15
 5810 099d 8C000000 		.4byte	0x8c
 5811 09a1 AC090000 		.4byte	0x9ac
 5812 09a5 16       		.uleb128 0x16
 5813 09a6 D2000000 		.4byte	0xd2
 5814 09aa 13       		.byte	0x13
 5815 09ab 00       		.byte	0
 5816 09ac 1D       		.uleb128 0x1d
 5817 09ad C8050000 		.4byte	.LASF128
 5818 09b1 05       		.byte	0x5
 5819 09b2 19       		.byte	0x19
 5820 09b3 97000000 		.4byte	0x97
 5821 09b7 05       		.uleb128 0x5
 5822 09b8 03       		.byte	0x3
 5823 09b9 00000000 		.4byte	ELBOW_UPPER_BOUND
 5824 09bd 1D       		.uleb128 0x1d
 5825 09be 66010000 		.4byte	.LASF129
 5826 09c2 05       		.byte	0x5
 5827 09c3 1B       		.byte	0x1b
 5828 09c4 97000000 		.4byte	0x97
 5829 09c8 05       		.uleb128 0x5
 5830 09c9 03       		.byte	0x3
 5831 09ca 00000000 		.4byte	ELBOW_LOWER_BOUND
 5832 09ce 1D       		.uleb128 0x1d
 5833 09cf 35030000 		.4byte	.LASF130
 5834 09d3 05       		.byte	0x5
 5835 09d4 1D       		.byte	0x1d
 5836 09d5 97000000 		.4byte	0x97
 5837 09d9 05       		.uleb128 0x5
 5838 09da 03       		.byte	0x3
 5839 09db 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5840 09df 1D       		.uleb128 0x1d
 5841 09e0 4F050000 		.4byte	.LASF131
 5842 09e4 05       		.byte	0x5
 5843 09e5 1F       		.byte	0x1f
 5844 09e6 97000000 		.4byte	0x97
 5845 09ea 05       		.uleb128 0x5
 5846 09eb 03       		.byte	0x3
 5847 09ec 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5848 09f0 15       		.uleb128 0x15
 5849 09f1 A2000000 		.4byte	0xa2
 5850 09f5 000A0000 		.4byte	0xa00
 5851 09f9 16       		.uleb128 0x16
 5852 09fa D2000000 		.4byte	0xd2
 5853 09fe 15       		.byte	0x15
 5854 09ff 00       		.byte	0
 5855 0a00 1D       		.uleb128 0x1d
 5856 0a01 60020000 		.4byte	.LASF132
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 131


 5857 0a05 05       		.byte	0x5
 5858 0a06 38       		.byte	0x38
 5859 0a07 F0090000 		.4byte	0x9f0
 5860 0a0b 05       		.uleb128 0x5
 5861 0a0c 03       		.byte	0x3
 5862 0a0d 00000000 		.4byte	data_array
 5863 0a11 15       		.uleb128 0x15
 5864 0a12 76000000 		.4byte	0x76
 5865 0a16 210A0000 		.4byte	0xa21
 5866 0a1a 16       		.uleb128 0x16
 5867 0a1b D2000000 		.4byte	0xd2
 5868 0a1f 0D       		.byte	0xd
 5869 0a20 00       		.byte	0
 5870 0a21 1D       		.uleb128 0x1d
 5871 0a22 C6020000 		.4byte	.LASF133
 5872 0a26 05       		.byte	0x5
 5873 0a27 3B       		.byte	0x3b
 5874 0a28 110A0000 		.4byte	0xa11
 5875 0a2c 05       		.uleb128 0x5
 5876 0a2d 03       		.byte	0x3
 5877 0a2e 00000000 		.4byte	feedback_array
 5878 0a32 1D       		.uleb128 0x1d
 5879 0a33 C7040000 		.4byte	.LASF134
 5880 0a37 05       		.byte	0x5
 5881 0a38 3E       		.byte	0x3e
 5882 0a39 81000000 		.4byte	0x81
 5883 0a3d 05       		.uleb128 0x5
 5884 0a3e 03       		.byte	0x3
 5885 0a3f 00000000 		.4byte	wiznet
 5886 0a43 1D       		.uleb128 0x1d
 5887 0a44 20000000 		.4byte	.LASF135
 5888 0a48 05       		.byte	0x5
 5889 0a49 42       		.byte	0x42
 5890 0a4a F0090000 		.4byte	0x9f0
 5891 0a4e 05       		.uleb128 0x5
 5892 0a4f 03       		.byte	0x3
 5893 0a50 00000000 		.4byte	test_array
 5894 0a54 1D       		.uleb128 0x1d
 5895 0a55 8B030000 		.4byte	.LASF136
 5896 0a59 05       		.byte	0x5
 5897 0a5a 4B       		.byte	0x4b
 5898 0a5b 81000000 		.4byte	0x81
 5899 0a5f 05       		.uleb128 0x5
 5900 0a60 03       		.byte	0x3
 5901 0a61 00000000 		.4byte	WT_FLAG
 5902 0a65 1D       		.uleb128 0x1d
 5903 0a66 73020000 		.4byte	.LASF137
 5904 0a6a 05       		.byte	0x5
 5905 0a6b 4C       		.byte	0x4c
 5906 0a6c 81000000 		.4byte	0x81
 5907 0a70 05       		.uleb128 0x5
 5908 0a71 03       		.byte	0x3
 5909 0a72 00000000 		.4byte	WR_FLAG
 5910 0a76 1D       		.uleb128 0x1d
 5911 0a77 6B070000 		.4byte	.LASF138
 5912 0a7b 05       		.byte	0x5
 5913 0a7c 4D       		.byte	0x4d
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 132


 5914 0a7d 81000000 		.4byte	0x81
 5915 0a81 05       		.uleb128 0x5
 5916 0a82 03       		.byte	0x3
 5917 0a83 00000000 		.4byte	ELBOW_FLAG
 5918 0a87 1D       		.uleb128 0x1d
 5919 0a88 AA030000 		.4byte	.LASF139
 5920 0a8c 05       		.byte	0x5
 5921 0a8d 4E       		.byte	0x4e
 5922 0a8e 81000000 		.4byte	0x81
 5923 0a92 05       		.uleb128 0x5
 5924 0a93 03       		.byte	0x3
 5925 0a94 00000000 		.4byte	SHOULDER_FLAG
 5926 0a98 1D       		.uleb128 0x1d
 5927 0a99 9C020000 		.4byte	.LASF140
 5928 0a9d 05       		.byte	0x5
 5929 0a9e 4F       		.byte	0x4f
 5930 0a9f 81000000 		.4byte	0x81
 5931 0aa3 05       		.uleb128 0x5
 5932 0aa4 03       		.byte	0x3
 5933 0aa5 00000000 		.4byte	BA_FLAG
 5934 0aa9 1D       		.uleb128 0x1d
 5935 0aaa 27030000 		.4byte	.LASF141
 5936 0aae 05       		.byte	0x5
 5937 0aaf 50       		.byte	0x50
 5938 0ab0 81000000 		.4byte	0x81
 5939 0ab4 05       		.uleb128 0x5
 5940 0ab5 03       		.byte	0x3
 5941 0ab6 00000000 		.4byte	EFFECTOR_FLAG
 5942 0aba 1D       		.uleb128 0x1d
 5943 0abb E3020000 		.4byte	.LASF142
 5944 0abf 05       		.byte	0x5
 5945 0ac0 51       		.byte	0x51
 5946 0ac1 81000000 		.4byte	0x81
 5947 0ac5 05       		.uleb128 0x5
 5948 0ac6 03       		.byte	0x3
 5949 0ac7 00000000 		.4byte	PH_FLAG
 5950 0acb 1D       		.uleb128 0x1d
 5951 0acc DC060000 		.4byte	.LASF143
 5952 0ad0 05       		.byte	0x5
 5953 0ad1 54       		.byte	0x54
 5954 0ad2 8C000000 		.4byte	0x8c
 5955 0ad6 05       		.uleb128 0x5
 5956 0ad7 03       		.byte	0x3
 5957 0ad8 00000000 		.4byte	dropped_packets
 5958 0adc 1D       		.uleb128 0x1d
 5959 0add 2A010000 		.4byte	.LASF144
 5960 0ae1 05       		.byte	0x5
 5961 0ae2 55       		.byte	0x55
 5962 0ae3 8C000000 		.4byte	0x8c
 5963 0ae7 05       		.uleb128 0x5
 5964 0ae8 03       		.byte	0x3
 5965 0ae9 00000000 		.4byte	fail_safe_errors
 5966 0aed 1D       		.uleb128 0x1d
 5967 0aee 8E070000 		.4byte	.LASF145
 5968 0af2 05       		.byte	0x5
 5969 0af3 56       		.byte	0x56
 5970 0af4 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 133


 5971 0af8 05       		.uleb128 0x5
 5972 0af9 03       		.byte	0x3
 5973 0afa 00000000 		.4byte	shldr_errors
 5974 0afe 1D       		.uleb128 0x1d
 5975 0aff 34000000 		.4byte	.LASF146
 5976 0b03 05       		.byte	0x5
 5977 0b04 57       		.byte	0x57
 5978 0b05 8C000000 		.4byte	0x8c
 5979 0b09 05       		.uleb128 0x5
 5980 0b0a 03       		.byte	0x3
 5981 0b0b 00000000 		.4byte	elbw_errors
 5982 0b0f 1D       		.uleb128 0x1d
 5983 0b10 19020000 		.4byte	.LASF147
 5984 0b14 05       		.byte	0x5
 5985 0b15 58       		.byte	0x58
 5986 0b16 8C000000 		.4byte	0x8c
 5987 0b1a 05       		.uleb128 0x5
 5988 0b1b 03       		.byte	0x3
 5989 0b1c 00000000 		.4byte	BA_errors
 5990 0b20 1D       		.uleb128 0x1d
 5991 0b21 CC010000 		.4byte	.LASF148
 5992 0b25 05       		.byte	0x5
 5993 0b26 59       		.byte	0x59
 5994 0b27 8C000000 		.4byte	0x8c
 5995 0b2b 05       		.uleb128 0x5
 5996 0b2c 03       		.byte	0x3
 5997 0b2d 00000000 		.4byte	WT_errors
 5998 0b31 1D       		.uleb128 0x1d
 5999 0b32 92040000 		.4byte	.LASF149
 6000 0b36 05       		.byte	0x5
 6001 0b37 5A       		.byte	0x5a
 6002 0b38 8C000000 		.4byte	0x8c
 6003 0b3c 05       		.uleb128 0x5
 6004 0b3d 03       		.byte	0x3
 6005 0b3e 00000000 		.4byte	WR_errors
 6006 0b42 1D       		.uleb128 0x1d
 6007 0b43 D6010000 		.4byte	.LASF150
 6008 0b47 05       		.byte	0x5
 6009 0b48 5B       		.byte	0x5b
 6010 0b49 8C000000 		.4byte	0x8c
 6011 0b4d 05       		.uleb128 0x5
 6012 0b4e 03       		.byte	0x3
 6013 0b4f 00000000 		.4byte	eff_errors
 6014 0b53 1D       		.uleb128 0x1d
 6015 0b54 A1010000 		.4byte	.LASF151
 6016 0b58 05       		.byte	0x5
 6017 0b59 5D       		.byte	0x5d
 6018 0b5a CD000000 		.4byte	0xcd
 6019 0b5e 05       		.uleb128 0x5
 6020 0b5f 03       		.byte	0x3
 6021 0b60 00000000 		.4byte	timerFlag
 6022 0b64 1E       		.uleb128 0x1e
 6023 0b65 C3030000 		.4byte	.LASF152
 6024 0b69 01       		.byte	0x1
 6025 0b6a AA01     		.2byte	0x1aa
 6026 0b6c D9000000 		.4byte	0xd9
 6027 0b70 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 134


 6028 0b71 03       		.byte	0x3
 6029 0b72 00000000 		.4byte	wristTilt_state
 6030 0b76 1E       		.uleb128 0x1e
 6031 0b77 9C040000 		.4byte	.LASF153
 6032 0b7b 01       		.byte	0x1
 6033 0b7c 1202     		.2byte	0x212
 6034 0b7e FF000000 		.4byte	0xff
 6035 0b82 05       		.uleb128 0x5
 6036 0b83 03       		.byte	0x3
 6037 0b84 00000000 		.4byte	wristRotate_state
 6038 0b88 1E       		.uleb128 0x1e
 6039 0b89 46010000 		.4byte	.LASF154
 6040 0b8d 01       		.byte	0x1
 6041 0b8e 7D02     		.2byte	0x27d
 6042 0b90 25010000 		.4byte	0x125
 6043 0b94 05       		.uleb128 0x5
 6044 0b95 03       		.byte	0x3
 6045 0b96 00000000 		.4byte	elbow_state
 6046 0b9a 1E       		.uleb128 0x1e
 6047 0b9b E9000000 		.4byte	.LASF155
 6048 0b9f 01       		.byte	0x1
 6049 0ba0 3203     		.2byte	0x332
 6050 0ba2 4B010000 		.4byte	0x14b
 6051 0ba6 05       		.uleb128 0x5
 6052 0ba7 03       		.byte	0x3
 6053 0ba8 00000000 		.4byte	shoulder_state
 6054 0bac 1E       		.uleb128 0x1e
 6055 0bad 57040000 		.4byte	.LASF156
 6056 0bb1 01       		.byte	0x1
 6057 0bb2 E703     		.2byte	0x3e7
 6058 0bb4 71010000 		.4byte	0x171
 6059 0bb8 05       		.uleb128 0x5
 6060 0bb9 03       		.byte	0x3
 6061 0bba 00000000 		.4byte	baseAzimuth_state
 6062 0bbe 1E       		.uleb128 0x1e
 6063 0bbf 63030000 		.4byte	.LASF157
 6064 0bc3 01       		.byte	0x1
 6065 0bc4 4B04     		.2byte	0x44b
 6066 0bc6 97010000 		.4byte	0x197
 6067 0bca 05       		.uleb128 0x5
 6068 0bcb 03       		.byte	0x3
 6069 0bcc 00000000 		.4byte	effector_state
 6070 0bd0 1E       		.uleb128 0x1e
 6071 0bd1 A8060000 		.4byte	.LASF158
 6072 0bd5 01       		.byte	0x1
 6073 0bd6 8D04     		.2byte	0x48d
 6074 0bd8 BD010000 		.4byte	0x1bd
 6075 0bdc 05       		.uleb128 0x5
 6076 0bdd 03       		.byte	0x3
 6077 0bde 00000000 		.4byte	phSensor_state
 6078 0be2 00       		.byte	0
 6079              		.section	.debug_abbrev,"",%progbits
 6080              	.Ldebug_abbrev0:
 6081 0000 01       		.uleb128 0x1
 6082 0001 11       		.uleb128 0x11
 6083 0002 01       		.byte	0x1
 6084 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 135


 6085 0004 0E       		.uleb128 0xe
 6086 0005 13       		.uleb128 0x13
 6087 0006 0B       		.uleb128 0xb
 6088 0007 03       		.uleb128 0x3
 6089 0008 0E       		.uleb128 0xe
 6090 0009 1B       		.uleb128 0x1b
 6091 000a 0E       		.uleb128 0xe
 6092 000b 55       		.uleb128 0x55
 6093 000c 17       		.uleb128 0x17
 6094 000d 11       		.uleb128 0x11
 6095 000e 01       		.uleb128 0x1
 6096 000f 10       		.uleb128 0x10
 6097 0010 17       		.uleb128 0x17
 6098 0011 00       		.byte	0
 6099 0012 00       		.byte	0
 6100 0013 02       		.uleb128 0x2
 6101 0014 24       		.uleb128 0x24
 6102 0015 00       		.byte	0
 6103 0016 0B       		.uleb128 0xb
 6104 0017 0B       		.uleb128 0xb
 6105 0018 3E       		.uleb128 0x3e
 6106 0019 0B       		.uleb128 0xb
 6107 001a 03       		.uleb128 0x3
 6108 001b 0E       		.uleb128 0xe
 6109 001c 00       		.byte	0
 6110 001d 00       		.byte	0
 6111 001e 03       		.uleb128 0x3
 6112 001f 16       		.uleb128 0x16
 6113 0020 00       		.byte	0
 6114 0021 03       		.uleb128 0x3
 6115 0022 0E       		.uleb128 0xe
 6116 0023 3A       		.uleb128 0x3a
 6117 0024 0B       		.uleb128 0xb
 6118 0025 3B       		.uleb128 0x3b
 6119 0026 0B       		.uleb128 0xb
 6120 0027 49       		.uleb128 0x49
 6121 0028 13       		.uleb128 0x13
 6122 0029 00       		.byte	0
 6123 002a 00       		.byte	0
 6124 002b 04       		.uleb128 0x4
 6125 002c 24       		.uleb128 0x24
 6126 002d 00       		.byte	0
 6127 002e 0B       		.uleb128 0xb
 6128 002f 0B       		.uleb128 0xb
 6129 0030 3E       		.uleb128 0x3e
 6130 0031 0B       		.uleb128 0xb
 6131 0032 03       		.uleb128 0x3
 6132 0033 08       		.uleb128 0x8
 6133 0034 00       		.byte	0
 6134 0035 00       		.byte	0
 6135 0036 05       		.uleb128 0x5
 6136 0037 35       		.uleb128 0x35
 6137 0038 00       		.byte	0
 6138 0039 49       		.uleb128 0x49
 6139 003a 13       		.uleb128 0x13
 6140 003b 00       		.byte	0
 6141 003c 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 136


 6142 003d 06       		.uleb128 0x6
 6143 003e 04       		.uleb128 0x4
 6144 003f 01       		.byte	0x1
 6145 0040 03       		.uleb128 0x3
 6146 0041 0E       		.uleb128 0xe
 6147 0042 0B       		.uleb128 0xb
 6148 0043 0B       		.uleb128 0xb
 6149 0044 3A       		.uleb128 0x3a
 6150 0045 0B       		.uleb128 0xb
 6151 0046 3B       		.uleb128 0x3b
 6152 0047 05       		.uleb128 0x5
 6153 0048 01       		.uleb128 0x1
 6154 0049 13       		.uleb128 0x13
 6155 004a 00       		.byte	0
 6156 004b 00       		.byte	0
 6157 004c 07       		.uleb128 0x7
 6158 004d 28       		.uleb128 0x28
 6159 004e 00       		.byte	0
 6160 004f 03       		.uleb128 0x3
 6161 0050 0E       		.uleb128 0xe
 6162 0051 1C       		.uleb128 0x1c
 6163 0052 0D       		.uleb128 0xd
 6164 0053 00       		.byte	0
 6165 0054 00       		.byte	0
 6166 0055 08       		.uleb128 0x8
 6167 0056 2E       		.uleb128 0x2e
 6168 0057 01       		.byte	0x1
 6169 0058 3F       		.uleb128 0x3f
 6170 0059 19       		.uleb128 0x19
 6171 005a 03       		.uleb128 0x3
 6172 005b 0E       		.uleb128 0xe
 6173 005c 3A       		.uleb128 0x3a
 6174 005d 0B       		.uleb128 0xb
 6175 005e 3B       		.uleb128 0x3b
 6176 005f 0B       		.uleb128 0xb
 6177 0060 27       		.uleb128 0x27
 6178 0061 19       		.uleb128 0x19
 6179 0062 11       		.uleb128 0x11
 6180 0063 01       		.uleb128 0x1
 6181 0064 12       		.uleb128 0x12
 6182 0065 06       		.uleb128 0x6
 6183 0066 40       		.uleb128 0x40
 6184 0067 18       		.uleb128 0x18
 6185 0068 9642     		.uleb128 0x2116
 6186 006a 19       		.uleb128 0x19
 6187 006b 01       		.uleb128 0x1
 6188 006c 13       		.uleb128 0x13
 6189 006d 00       		.byte	0
 6190 006e 00       		.byte	0
 6191 006f 09       		.uleb128 0x9
 6192 0070 34       		.uleb128 0x34
 6193 0071 00       		.byte	0
 6194 0072 03       		.uleb128 0x3
 6195 0073 0E       		.uleb128 0xe
 6196 0074 3A       		.uleb128 0x3a
 6197 0075 0B       		.uleb128 0xb
 6198 0076 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 137


 6199 0077 0B       		.uleb128 0xb
 6200 0078 49       		.uleb128 0x49
 6201 0079 13       		.uleb128 0x13
 6202 007a 02       		.uleb128 0x2
 6203 007b 18       		.uleb128 0x18
 6204 007c 00       		.byte	0
 6205 007d 00       		.byte	0
 6206 007e 0A       		.uleb128 0xa
 6207 007f 2E       		.uleb128 0x2e
 6208 0080 01       		.byte	0x1
 6209 0081 3F       		.uleb128 0x3f
 6210 0082 19       		.uleb128 0x19
 6211 0083 03       		.uleb128 0x3
 6212 0084 0E       		.uleb128 0xe
 6213 0085 3A       		.uleb128 0x3a
 6214 0086 0B       		.uleb128 0xb
 6215 0087 3B       		.uleb128 0x3b
 6216 0088 0B       		.uleb128 0xb
 6217 0089 27       		.uleb128 0x27
 6218 008a 19       		.uleb128 0x19
 6219 008b 49       		.uleb128 0x49
 6220 008c 13       		.uleb128 0x13
 6221 008d 11       		.uleb128 0x11
 6222 008e 01       		.uleb128 0x1
 6223 008f 12       		.uleb128 0x12
 6224 0090 06       		.uleb128 0x6
 6225 0091 40       		.uleb128 0x40
 6226 0092 18       		.uleb128 0x18
 6227 0093 9642     		.uleb128 0x2116
 6228 0095 19       		.uleb128 0x19
 6229 0096 01       		.uleb128 0x1
 6230 0097 13       		.uleb128 0x13
 6231 0098 00       		.byte	0
 6232 0099 00       		.byte	0
 6233 009a 0B       		.uleb128 0xb
 6234 009b 05       		.uleb128 0x5
 6235 009c 00       		.byte	0
 6236 009d 03       		.uleb128 0x3
 6237 009e 0E       		.uleb128 0xe
 6238 009f 3A       		.uleb128 0x3a
 6239 00a0 0B       		.uleb128 0xb
 6240 00a1 3B       		.uleb128 0x3b
 6241 00a2 0B       		.uleb128 0xb
 6242 00a3 49       		.uleb128 0x49
 6243 00a4 13       		.uleb128 0x13
 6244 00a5 02       		.uleb128 0x2
 6245 00a6 18       		.uleb128 0x18
 6246 00a7 00       		.byte	0
 6247 00a8 00       		.byte	0
 6248 00a9 0C       		.uleb128 0xc
 6249 00aa 34       		.uleb128 0x34
 6250 00ab 00       		.byte	0
 6251 00ac 03       		.uleb128 0x3
 6252 00ad 08       		.uleb128 0x8
 6253 00ae 3A       		.uleb128 0x3a
 6254 00af 0B       		.uleb128 0xb
 6255 00b0 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 138


 6256 00b1 0B       		.uleb128 0xb
 6257 00b2 49       		.uleb128 0x49
 6258 00b3 13       		.uleb128 0x13
 6259 00b4 02       		.uleb128 0x2
 6260 00b5 18       		.uleb128 0x18
 6261 00b6 00       		.byte	0
 6262 00b7 00       		.byte	0
 6263 00b8 0D       		.uleb128 0xd
 6264 00b9 0F       		.uleb128 0xf
 6265 00ba 00       		.byte	0
 6266 00bb 0B       		.uleb128 0xb
 6267 00bc 0B       		.uleb128 0xb
 6268 00bd 49       		.uleb128 0x49
 6269 00be 13       		.uleb128 0x13
 6270 00bf 00       		.byte	0
 6271 00c0 00       		.byte	0
 6272 00c1 0E       		.uleb128 0xe
 6273 00c2 2E       		.uleb128 0x2e
 6274 00c3 01       		.byte	0x1
 6275 00c4 3F       		.uleb128 0x3f
 6276 00c5 19       		.uleb128 0x19
 6277 00c6 03       		.uleb128 0x3
 6278 00c7 0E       		.uleb128 0xe
 6279 00c8 3A       		.uleb128 0x3a
 6280 00c9 0B       		.uleb128 0xb
 6281 00ca 3B       		.uleb128 0x3b
 6282 00cb 0B       		.uleb128 0xb
 6283 00cc 27       		.uleb128 0x27
 6284 00cd 19       		.uleb128 0x19
 6285 00ce 49       		.uleb128 0x49
 6286 00cf 13       		.uleb128 0x13
 6287 00d0 11       		.uleb128 0x11
 6288 00d1 01       		.uleb128 0x1
 6289 00d2 12       		.uleb128 0x12
 6290 00d3 06       		.uleb128 0x6
 6291 00d4 40       		.uleb128 0x40
 6292 00d5 18       		.uleb128 0x18
 6293 00d6 9742     		.uleb128 0x2117
 6294 00d8 19       		.uleb128 0x19
 6295 00d9 01       		.uleb128 0x1
 6296 00da 13       		.uleb128 0x13
 6297 00db 00       		.byte	0
 6298 00dc 00       		.byte	0
 6299 00dd 0F       		.uleb128 0xf
 6300 00de 2E       		.uleb128 0x2e
 6301 00df 01       		.byte	0x1
 6302 00e0 3F       		.uleb128 0x3f
 6303 00e1 19       		.uleb128 0x19
 6304 00e2 03       		.uleb128 0x3
 6305 00e3 0E       		.uleb128 0xe
 6306 00e4 3A       		.uleb128 0x3a
 6307 00e5 0B       		.uleb128 0xb
 6308 00e6 3B       		.uleb128 0x3b
 6309 00e7 05       		.uleb128 0x5
 6310 00e8 27       		.uleb128 0x27
 6311 00e9 19       		.uleb128 0x19
 6312 00ea 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 139


 6313 00eb 13       		.uleb128 0x13
 6314 00ec 11       		.uleb128 0x11
 6315 00ed 01       		.uleb128 0x1
 6316 00ee 12       		.uleb128 0x12
 6317 00ef 06       		.uleb128 0x6
 6318 00f0 40       		.uleb128 0x40
 6319 00f1 18       		.uleb128 0x18
 6320 00f2 9742     		.uleb128 0x2117
 6321 00f4 19       		.uleb128 0x19
 6322 00f5 01       		.uleb128 0x1
 6323 00f6 13       		.uleb128 0x13
 6324 00f7 00       		.byte	0
 6325 00f8 00       		.byte	0
 6326 00f9 10       		.uleb128 0x10
 6327 00fa 05       		.uleb128 0x5
 6328 00fb 00       		.byte	0
 6329 00fc 03       		.uleb128 0x3
 6330 00fd 0E       		.uleb128 0xe
 6331 00fe 3A       		.uleb128 0x3a
 6332 00ff 0B       		.uleb128 0xb
 6333 0100 3B       		.uleb128 0x3b
 6334 0101 05       		.uleb128 0x5
 6335 0102 49       		.uleb128 0x49
 6336 0103 13       		.uleb128 0x13
 6337 0104 02       		.uleb128 0x2
 6338 0105 18       		.uleb128 0x18
 6339 0106 00       		.byte	0
 6340 0107 00       		.byte	0
 6341 0108 11       		.uleb128 0x11
 6342 0109 34       		.uleb128 0x34
 6343 010a 00       		.byte	0
 6344 010b 03       		.uleb128 0x3
 6345 010c 0E       		.uleb128 0xe
 6346 010d 3A       		.uleb128 0x3a
 6347 010e 0B       		.uleb128 0xb
 6348 010f 3B       		.uleb128 0x3b
 6349 0110 05       		.uleb128 0x5
 6350 0111 49       		.uleb128 0x49
 6351 0112 13       		.uleb128 0x13
 6352 0113 02       		.uleb128 0x2
 6353 0114 18       		.uleb128 0x18
 6354 0115 00       		.byte	0
 6355 0116 00       		.byte	0
 6356 0117 12       		.uleb128 0x12
 6357 0118 2E       		.uleb128 0x2e
 6358 0119 01       		.byte	0x1
 6359 011a 3F       		.uleb128 0x3f
 6360 011b 19       		.uleb128 0x19
 6361 011c 03       		.uleb128 0x3
 6362 011d 0E       		.uleb128 0xe
 6363 011e 3A       		.uleb128 0x3a
 6364 011f 0B       		.uleb128 0xb
 6365 0120 3B       		.uleb128 0x3b
 6366 0121 05       		.uleb128 0x5
 6367 0122 27       		.uleb128 0x27
 6368 0123 19       		.uleb128 0x19
 6369 0124 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 140


 6370 0125 13       		.uleb128 0x13
 6371 0126 11       		.uleb128 0x11
 6372 0127 01       		.uleb128 0x1
 6373 0128 12       		.uleb128 0x12
 6374 0129 06       		.uleb128 0x6
 6375 012a 40       		.uleb128 0x40
 6376 012b 18       		.uleb128 0x18
 6377 012c 9642     		.uleb128 0x2116
 6378 012e 19       		.uleb128 0x19
 6379 012f 01       		.uleb128 0x1
 6380 0130 13       		.uleb128 0x13
 6381 0131 00       		.byte	0
 6382 0132 00       		.byte	0
 6383 0133 13       		.uleb128 0x13
 6384 0134 2E       		.uleb128 0x2e
 6385 0135 01       		.byte	0x1
 6386 0136 3F       		.uleb128 0x3f
 6387 0137 19       		.uleb128 0x19
 6388 0138 03       		.uleb128 0x3
 6389 0139 0E       		.uleb128 0xe
 6390 013a 3A       		.uleb128 0x3a
 6391 013b 0B       		.uleb128 0xb
 6392 013c 3B       		.uleb128 0x3b
 6393 013d 05       		.uleb128 0x5
 6394 013e 27       		.uleb128 0x27
 6395 013f 19       		.uleb128 0x19
 6396 0140 11       		.uleb128 0x11
 6397 0141 01       		.uleb128 0x1
 6398 0142 12       		.uleb128 0x12
 6399 0143 06       		.uleb128 0x6
 6400 0144 40       		.uleb128 0x40
 6401 0145 18       		.uleb128 0x18
 6402 0146 9642     		.uleb128 0x2116
 6403 0148 19       		.uleb128 0x19
 6404 0149 01       		.uleb128 0x1
 6405 014a 13       		.uleb128 0x13
 6406 014b 00       		.byte	0
 6407 014c 00       		.byte	0
 6408 014d 14       		.uleb128 0x14
 6409 014e 2E       		.uleb128 0x2e
 6410 014f 00       		.byte	0
 6411 0150 3F       		.uleb128 0x3f
 6412 0151 19       		.uleb128 0x19
 6413 0152 03       		.uleb128 0x3
 6414 0153 0E       		.uleb128 0xe
 6415 0154 3A       		.uleb128 0x3a
 6416 0155 0B       		.uleb128 0xb
 6417 0156 3B       		.uleb128 0x3b
 6418 0157 05       		.uleb128 0x5
 6419 0158 11       		.uleb128 0x11
 6420 0159 01       		.uleb128 0x1
 6421 015a 12       		.uleb128 0x12
 6422 015b 06       		.uleb128 0x6
 6423 015c 40       		.uleb128 0x40
 6424 015d 18       		.uleb128 0x18
 6425 015e 9642     		.uleb128 0x2116
 6426 0160 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 141


 6427 0161 00       		.byte	0
 6428 0162 00       		.byte	0
 6429 0163 15       		.uleb128 0x15
 6430 0164 01       		.uleb128 0x1
 6431 0165 01       		.byte	0x1
 6432 0166 49       		.uleb128 0x49
 6433 0167 13       		.uleb128 0x13
 6434 0168 01       		.uleb128 0x1
 6435 0169 13       		.uleb128 0x13
 6436 016a 00       		.byte	0
 6437 016b 00       		.byte	0
 6438 016c 16       		.uleb128 0x16
 6439 016d 21       		.uleb128 0x21
 6440 016e 00       		.byte	0
 6441 016f 49       		.uleb128 0x49
 6442 0170 13       		.uleb128 0x13
 6443 0171 2F       		.uleb128 0x2f
 6444 0172 0B       		.uleb128 0xb
 6445 0173 00       		.byte	0
 6446 0174 00       		.byte	0
 6447 0175 17       		.uleb128 0x17
 6448 0176 34       		.uleb128 0x34
 6449 0177 00       		.byte	0
 6450 0178 03       		.uleb128 0x3
 6451 0179 08       		.uleb128 0x8
 6452 017a 3A       		.uleb128 0x3a
 6453 017b 0B       		.uleb128 0xb
 6454 017c 3B       		.uleb128 0x3b
 6455 017d 05       		.uleb128 0x5
 6456 017e 49       		.uleb128 0x49
 6457 017f 13       		.uleb128 0x13
 6458 0180 02       		.uleb128 0x2
 6459 0181 18       		.uleb128 0x18
 6460 0182 00       		.byte	0
 6461 0183 00       		.byte	0
 6462 0184 18       		.uleb128 0x18
 6463 0185 2E       		.uleb128 0x2e
 6464 0186 01       		.byte	0x1
 6465 0187 3F       		.uleb128 0x3f
 6466 0188 19       		.uleb128 0x19
 6467 0189 03       		.uleb128 0x3
 6468 018a 0E       		.uleb128 0xe
 6469 018b 3A       		.uleb128 0x3a
 6470 018c 0B       		.uleb128 0xb
 6471 018d 3B       		.uleb128 0x3b
 6472 018e 05       		.uleb128 0x5
 6473 018f 11       		.uleb128 0x11
 6474 0190 01       		.uleb128 0x1
 6475 0191 12       		.uleb128 0x12
 6476 0192 06       		.uleb128 0x6
 6477 0193 40       		.uleb128 0x40
 6478 0194 18       		.uleb128 0x18
 6479 0195 9642     		.uleb128 0x2116
 6480 0197 19       		.uleb128 0x19
 6481 0198 01       		.uleb128 0x1
 6482 0199 13       		.uleb128 0x13
 6483 019a 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 142


 6484 019b 00       		.byte	0
 6485 019c 19       		.uleb128 0x19
 6486 019d 2E       		.uleb128 0x2e
 6487 019e 00       		.byte	0
 6488 019f 3F       		.uleb128 0x3f
 6489 01a0 19       		.uleb128 0x19
 6490 01a1 03       		.uleb128 0x3
 6491 01a2 0E       		.uleb128 0xe
 6492 01a3 3A       		.uleb128 0x3a
 6493 01a4 0B       		.uleb128 0xb
 6494 01a5 3B       		.uleb128 0x3b
 6495 01a6 05       		.uleb128 0x5
 6496 01a7 11       		.uleb128 0x11
 6497 01a8 01       		.uleb128 0x1
 6498 01a9 12       		.uleb128 0x12
 6499 01aa 06       		.uleb128 0x6
 6500 01ab 40       		.uleb128 0x40
 6501 01ac 18       		.uleb128 0x18
 6502 01ad 9742     		.uleb128 0x2117
 6503 01af 19       		.uleb128 0x19
 6504 01b0 00       		.byte	0
 6505 01b1 00       		.byte	0
 6506 01b2 1A       		.uleb128 0x1a
 6507 01b3 0B       		.uleb128 0xb
 6508 01b4 01       		.byte	0x1
 6509 01b5 11       		.uleb128 0x11
 6510 01b6 01       		.uleb128 0x1
 6511 01b7 12       		.uleb128 0x12
 6512 01b8 06       		.uleb128 0x6
 6513 01b9 01       		.uleb128 0x1
 6514 01ba 13       		.uleb128 0x13
 6515 01bb 00       		.byte	0
 6516 01bc 00       		.byte	0
 6517 01bd 1B       		.uleb128 0x1b
 6518 01be 0B       		.uleb128 0xb
 6519 01bf 01       		.byte	0x1
 6520 01c0 11       		.uleb128 0x11
 6521 01c1 01       		.uleb128 0x1
 6522 01c2 12       		.uleb128 0x12
 6523 01c3 06       		.uleb128 0x6
 6524 01c4 00       		.byte	0
 6525 01c5 00       		.byte	0
 6526 01c6 1C       		.uleb128 0x1c
 6527 01c7 2E       		.uleb128 0x2e
 6528 01c8 01       		.byte	0x1
 6529 01c9 3F       		.uleb128 0x3f
 6530 01ca 19       		.uleb128 0x19
 6531 01cb 03       		.uleb128 0x3
 6532 01cc 0E       		.uleb128 0xe
 6533 01cd 3A       		.uleb128 0x3a
 6534 01ce 0B       		.uleb128 0xb
 6535 01cf 3B       		.uleb128 0x3b
 6536 01d0 05       		.uleb128 0x5
 6537 01d1 49       		.uleb128 0x49
 6538 01d2 13       		.uleb128 0x13
 6539 01d3 11       		.uleb128 0x11
 6540 01d4 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 143


 6541 01d5 12       		.uleb128 0x12
 6542 01d6 06       		.uleb128 0x6
 6543 01d7 40       		.uleb128 0x40
 6544 01d8 18       		.uleb128 0x18
 6545 01d9 9642     		.uleb128 0x2116
 6546 01db 19       		.uleb128 0x19
 6547 01dc 01       		.uleb128 0x1
 6548 01dd 13       		.uleb128 0x13
 6549 01de 00       		.byte	0
 6550 01df 00       		.byte	0
 6551 01e0 1D       		.uleb128 0x1d
 6552 01e1 34       		.uleb128 0x34
 6553 01e2 00       		.byte	0
 6554 01e3 03       		.uleb128 0x3
 6555 01e4 0E       		.uleb128 0xe
 6556 01e5 3A       		.uleb128 0x3a
 6557 01e6 0B       		.uleb128 0xb
 6558 01e7 3B       		.uleb128 0x3b
 6559 01e8 0B       		.uleb128 0xb
 6560 01e9 49       		.uleb128 0x49
 6561 01ea 13       		.uleb128 0x13
 6562 01eb 3F       		.uleb128 0x3f
 6563 01ec 19       		.uleb128 0x19
 6564 01ed 02       		.uleb128 0x2
 6565 01ee 18       		.uleb128 0x18
 6566 01ef 00       		.byte	0
 6567 01f0 00       		.byte	0
 6568 01f1 1E       		.uleb128 0x1e
 6569 01f2 34       		.uleb128 0x34
 6570 01f3 00       		.byte	0
 6571 01f4 03       		.uleb128 0x3
 6572 01f5 0E       		.uleb128 0xe
 6573 01f6 3A       		.uleb128 0x3a
 6574 01f7 0B       		.uleb128 0xb
 6575 01f8 3B       		.uleb128 0x3b
 6576 01f9 05       		.uleb128 0x5
 6577 01fa 49       		.uleb128 0x49
 6578 01fb 13       		.uleb128 0x13
 6579 01fc 3F       		.uleb128 0x3f
 6580 01fd 19       		.uleb128 0x19
 6581 01fe 02       		.uleb128 0x2
 6582 01ff 18       		.uleb128 0x18
 6583 0200 00       		.byte	0
 6584 0201 00       		.byte	0
 6585 0202 00       		.byte	0
 6586              		.section	.debug_aranges,"",%progbits
 6587 0000 CC000000 		.4byte	0xcc
 6588 0004 0200     		.2byte	0x2
 6589 0006 00000000 		.4byte	.Ldebug_info0
 6590 000a 04       		.byte	0x4
 6591 000b 00       		.byte	0
 6592 000c 0000     		.2byte	0
 6593 000e 0000     		.2byte	0
 6594 0010 00000000 		.4byte	.LFB34
 6595 0014 28000000 		.4byte	.LFE34-.LFB34
 6596 0018 00000000 		.4byte	.LFB35
 6597 001c 90010000 		.4byte	.LFE35-.LFB35
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 144


 6598 0020 00000000 		.4byte	.LFB36
 6599 0024 90010000 		.4byte	.LFE36-.LFB36
 6600 0028 00000000 		.4byte	.LFB37
 6601 002c 78000000 		.4byte	.LFE37-.LFB37
 6602 0030 00000000 		.4byte	.LFB38
 6603 0034 3E000000 		.4byte	.LFE38-.LFB38
 6604 0038 00000000 		.4byte	.LFB39
 6605 003c 0C010000 		.4byte	.LFE39-.LFB39
 6606 0040 00000000 		.4byte	.LFB40
 6607 0044 0C020000 		.4byte	.LFE40-.LFB40
 6608 0048 00000000 		.4byte	.LFB41
 6609 004c 84000000 		.4byte	.LFE41-.LFB41
 6610 0050 00000000 		.4byte	.LFB42
 6611 0054 28000000 		.4byte	.LFE42-.LFB42
 6612 0058 00000000 		.4byte	.LFB43
 6613 005c 04010000 		.4byte	.LFE43-.LFB43
 6614 0060 00000000 		.4byte	.LFB44
 6615 0064 18000000 		.4byte	.LFE44-.LFB44
 6616 0068 00000000 		.4byte	.LFB45
 6617 006c 98000000 		.4byte	.LFE45-.LFB45
 6618 0070 00000000 		.4byte	.LFB46
 6619 0074 98000000 		.4byte	.LFE46-.LFB46
 6620 0078 00000000 		.4byte	.LFB47
 6621 007c 98000000 		.4byte	.LFE47-.LFB47
 6622 0080 00000000 		.4byte	.LFB48
 6623 0084 6C010000 		.4byte	.LFE48-.LFB48
 6624 0088 00000000 		.4byte	.LFB49
 6625 008c 6C010000 		.4byte	.LFE49-.LFB49
 6626 0090 00000000 		.4byte	.LFB50
 6627 0094 44030000 		.4byte	.LFE50-.LFB50
 6628 0098 00000000 		.4byte	.LFB51
 6629 009c 44030000 		.4byte	.LFE51-.LFB51
 6630 00a0 00000000 		.4byte	.LFB52
 6631 00a4 5C010000 		.4byte	.LFE52-.LFB52
 6632 00a8 00000000 		.4byte	.LFB53
 6633 00ac DC000000 		.4byte	.LFE53-.LFB53
 6634 00b0 00000000 		.4byte	.LFB54
 6635 00b4 8C000000 		.4byte	.LFE54-.LFB54
 6636 00b8 00000000 		.4byte	.LFB55
 6637 00bc 90010000 		.4byte	.LFE55-.LFB55
 6638 00c0 00000000 		.4byte	.LFB56
 6639 00c4 C8010000 		.4byte	.LFE56-.LFB56
 6640 00c8 00000000 		.4byte	0
 6641 00cc 00000000 		.4byte	0
 6642              		.section	.debug_ranges,"",%progbits
 6643              	.Ldebug_ranges0:
 6644 0000 00000000 		.4byte	.LFB34
 6645 0004 28000000 		.4byte	.LFE34
 6646 0008 00000000 		.4byte	.LFB35
 6647 000c 90010000 		.4byte	.LFE35
 6648 0010 00000000 		.4byte	.LFB36
 6649 0014 90010000 		.4byte	.LFE36
 6650 0018 00000000 		.4byte	.LFB37
 6651 001c 78000000 		.4byte	.LFE37
 6652 0020 00000000 		.4byte	.LFB38
 6653 0024 3E000000 		.4byte	.LFE38
 6654 0028 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 145


 6655 002c 0C010000 		.4byte	.LFE39
 6656 0030 00000000 		.4byte	.LFB40
 6657 0034 0C020000 		.4byte	.LFE40
 6658 0038 00000000 		.4byte	.LFB41
 6659 003c 84000000 		.4byte	.LFE41
 6660 0040 00000000 		.4byte	.LFB42
 6661 0044 28000000 		.4byte	.LFE42
 6662 0048 00000000 		.4byte	.LFB43
 6663 004c 04010000 		.4byte	.LFE43
 6664 0050 00000000 		.4byte	.LFB44
 6665 0054 18000000 		.4byte	.LFE44
 6666 0058 00000000 		.4byte	.LFB45
 6667 005c 98000000 		.4byte	.LFE45
 6668 0060 00000000 		.4byte	.LFB46
 6669 0064 98000000 		.4byte	.LFE46
 6670 0068 00000000 		.4byte	.LFB47
 6671 006c 98000000 		.4byte	.LFE47
 6672 0070 00000000 		.4byte	.LFB48
 6673 0074 6C010000 		.4byte	.LFE48
 6674 0078 00000000 		.4byte	.LFB49
 6675 007c 6C010000 		.4byte	.LFE49
 6676 0080 00000000 		.4byte	.LFB50
 6677 0084 44030000 		.4byte	.LFE50
 6678 0088 00000000 		.4byte	.LFB51
 6679 008c 44030000 		.4byte	.LFE51
 6680 0090 00000000 		.4byte	.LFB52
 6681 0094 5C010000 		.4byte	.LFE52
 6682 0098 00000000 		.4byte	.LFB53
 6683 009c DC000000 		.4byte	.LFE53
 6684 00a0 00000000 		.4byte	.LFB54
 6685 00a4 8C000000 		.4byte	.LFE54
 6686 00a8 00000000 		.4byte	.LFB55
 6687 00ac 90010000 		.4byte	.LFE55
 6688 00b0 00000000 		.4byte	.LFB56
 6689 00b4 C8010000 		.4byte	.LFE56
 6690 00b8 00000000 		.4byte	0
 6691 00bc 00000000 		.4byte	0
 6692              		.section	.debug_line,"",%progbits
 6693              	.Ldebug_line0:
 6694 0000 CB060000 		.section	.debug_str,"MS",%progbits,1
 6694      02004F01 
 6694      00000201 
 6694      FB0E0D00 
 6694      01010101 
 6695              	.LASF110:
 6696 0000 62617365 		.ascii	"baseAzimuth\000"
 6696      417A696D 
 6696      75746800 
 6697              	.LASF21:
 6698 000c 74696C74 		.ascii	"tilt_init\000"
 6698      5F696E69 
 6698      7400
 6699              	.LASF65:
 6700 0016 6E756D5F 		.ascii	"num_items\000"
 6700      6974656D 
 6700      7300
 6701              	.LASF135:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 146


 6702 0020 74657374 		.ascii	"test_array\000"
 6702      5F617272 
 6702      617900
 6703              	.LASF118:
 6704 002b 42415F63 		.ascii	"BA_cspot\000"
 6704      73706F74 
 6704      00
 6705              	.LASF146:
 6706 0034 656C6277 		.ascii	"elbw_errors\000"
 6706      5F657272 
 6706      6F727300 
 6707              	.LASF124:
 6708 0040 57545F63 		.ascii	"WT_cspot\000"
 6708      73706F74 
 6708      00
 6709              	.LASF102:
 6710 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6710      72725F63 
 6710      73706F74 
 6710      00
 6711              	.LASF43:
 6712 0056 42415F65 		.ascii	"BA_execute\000"
 6712      78656375 
 6712      746500
 6713              	.LASF30:
 6714 0061 656C626F 		.ascii	"elbow_states\000"
 6714      775F7374 
 6714      61746573 
 6714      00
 6715              	.LASF100:
 6716 006e 57545F61 		.ascii	"WT_array\000"
 6716      72726179 
 6716      00
 6717              	.LASF115:
 6718 0077 65666665 		.ascii	"effector\000"
 6718      63746F72 
 6718      00
 6719              	.LASF8:
 6720 0080 756E7369 		.ascii	"unsigned int\000"
 6720      676E6564 
 6720      20696E74 
 6720      00
 6721              	.LASF40:
 6722 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6722      417A696D 
 6722      7574685F 
 6722      73746174 
 6722      657300
 6723              	.LASF15:
 6724 00a0 696E7431 		.ascii	"int16\000"
 6724      3600
 6725              	.LASF61:
 6726 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 6726      62726174 
 6726      696F6E45 
 6726      6C626F77 
 6726      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 147


 6727              	.LASF53:
 6728 00b7 70685F65 		.ascii	"ph_execute\000"
 6728      78656375 
 6728      746500
 6729              	.LASF41:
 6730 00c2 42415F73 		.ascii	"BA_start\000"
 6730      74617274 
 6730      00
 6731              	.LASF109:
 6732 00cb 73686F75 		.ascii	"shoulder_array\000"
 6732      6C646572 
 6732      5F617272 
 6732      617900
 6733              	.LASF66:
 6734 00da 6D61696E 		.ascii	"maintain_array\000"
 6734      7461696E 
 6734      5F617272 
 6734      617900
 6735              	.LASF155:
 6736 00e9 73686F75 		.ascii	"shoulder_state\000"
 6736      6C646572 
 6736      5F737461 
 6736      746500
 6737              	.LASF26:
 6738 00f8 726F7461 		.ascii	"rotate_start\000"
 6738      74655F73 
 6738      74617274 
 6738      00
 6739              	.LASF97:
 6740 0105 73706565 		.ascii	"speed\000"
 6740      6400
 6741              	.LASF105:
 6742 010b 656C6277 		.ascii	"elbw_arr_cspot\000"
 6742      5F617272 
 6742      5F637370 
 6742      6F7400
 6743              	.LASF20:
 6744 011a 74696C74 		.ascii	"tilt_start\000"
 6744      5F737461 
 6744      727400
 6745              	.LASF72:
 6746 0125 73697A65 		.ascii	"size\000"
 6746      00
 6747              	.LASF144:
 6748 012a 6661696C 		.ascii	"fail_safe_errors\000"
 6748      5F736166 
 6748      655F6572 
 6748      726F7273 
 6748      00
 6749              	.LASF75:
 6750 013b 706F735F 		.ascii	"pos_to_vel\000"
 6750      746F5F76 
 6750      656C00
 6751              	.LASF154:
 6752 0146 656C626F 		.ascii	"elbow_state\000"
 6752      775F7374 
 6752      61746500 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 148


 6753              	.LASF16:
 6754 0152 666C6F61 		.ascii	"float\000"
 6754      7400
 6755              	.LASF42:
 6756 0158 42415F69 		.ascii	"BA_init\000"
 6756      6E697400 
 6757              	.LASF74:
 6758 0160 696E6465 		.ascii	"index\000"
 6758      7800
 6759              	.LASF129:
 6760 0166 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6760      575F4C4F 
 6760      5745525F 
 6760      424F554E 
 6760      4400
 6761              	.LASF7:
 6762 0178 6C6F6E67 		.ascii	"long long unsigned int\000"
 6762      206C6F6E 
 6762      6720756E 
 6762      7369676E 
 6762      65642069 
 6763              	.LASF91:
 6764 018f 53657276 		.ascii	"ServoGoalPosition\000"
 6764      6F476F61 
 6764      6C506F73 
 6764      6974696F 
 6764      6E00
 6765              	.LASF151:
 6766 01a1 74696D65 		.ascii	"timerFlag\000"
 6766      72466C61 
 6766      6700
 6767              	.LASF107:
 6768 01ab 73686F75 		.ascii	"shoulder\000"
 6768      6C646572 
 6768      00
 6769              	.LASF48:
 6770 01b4 6566665F 		.ascii	"eff_execute\000"
 6770      65786563 
 6770      75746500 
 6771              	.LASF81:
 6772 01c0 62797465 		.ascii	"byte1\000"
 6772      3100
 6773              	.LASF82:
 6774 01c6 62797465 		.ascii	"byte2\000"
 6774      3200
 6775              	.LASF148:
 6776 01cc 57545F65 		.ascii	"WT_errors\000"
 6776      72726F72 
 6776      7300
 6777              	.LASF150:
 6778 01d6 6566665F 		.ascii	"eff_errors\000"
 6778      6572726F 
 6778      727300
 6779              	.LASF83:
 6780 01e1 74656D70 		.ascii	"temp1\000"
 6780      3100
 6781              	.LASF84:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 149


 6782 01e7 74656D70 		.ascii	"temp2\000"
 6782      3200
 6783              	.LASF85:
 6784 01ed 74656D70 		.ascii	"temp3\000"
 6784      3300
 6785              	.LASF116:
 6786 01f3 696E6974 		.ascii	"initialize\000"
 6786      69616C69 
 6786      7A6500
 6787              	.LASF104:
 6788 01fe 656C626F 		.ascii	"elbow\000"
 6788      7700
 6789              	.LASF46:
 6790 0204 6566665F 		.ascii	"eff_start\000"
 6790      73746172 
 6790      7400
 6791              	.LASF122:
 6792 020e 656C6277 		.ascii	"elbw_cspot\000"
 6792      5F637370 
 6792      6F7400
 6793              	.LASF147:
 6794 0219 42415F65 		.ascii	"BA_errors\000"
 6794      72726F72 
 6794      7300
 6795              	.LASF62:
 6796 0223 43616C69 		.ascii	"CalibrationShoulder\000"
 6796      62726174 
 6796      696F6E53 
 6796      686F756C 
 6796      64657200 
 6797              	.LASF126:
 6798 0237 66735F63 		.ascii	"fs_count\000"
 6798      6F756E74 
 6798      00
 6799              	.LASF68:
 6800 0240 53495A45 		.ascii	"SIZE\000"
 6800      00
 6801              	.LASF39:
 6802 0245 73686C64 		.ascii	"shldr_wait\000"
 6802      725F7761 
 6802      697400
 6803              	.LASF50:
 6804 0250 70685365 		.ascii	"phSensor_states\000"
 6804      6E736F72 
 6804      5F737461 
 6804      74657300 
 6805              	.LASF132:
 6806 0260 64617461 		.ascii	"data_array\000"
 6806      5F617272 
 6806      617900
 6807              	.LASF76:
 6808 026b 6375725F 		.ascii	"cur_pos\000"
 6808      706F7300 
 6809              	.LASF137:
 6810 0273 57525F46 		.ascii	"WR_FLAG\000"
 6810      4C414700 
 6811              	.LASF18:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 150


 6812 027b 63686172 		.ascii	"char\000"
 6812      00
 6813              	.LASF12:
 6814 0280 75696E74 		.ascii	"uint16\000"
 6814      313600
 6815              	.LASF95:
 6816 0287 746F7271 		.ascii	"torque\000"
 6816      756500
 6817              	.LASF14:
 6818 028e 696E7438 		.ascii	"int8\000"
 6818      00
 6819              	.LASF87:
 6820 0293 66656564 		.ascii	"feedback\000"
 6820      6261636B 
 6820      00
 6821              	.LASF140:
 6822 029c 42415F46 		.ascii	"BA_FLAG\000"
 6822      4C414700 
 6823              	.LASF56:
 6824 02a4 4359434C 		.ascii	"CYCLES\000"
 6824      455300
 6825              	.LASF10:
 6826 02ab 75696E74 		.ascii	"uint8_t\000"
 6826      385F7400 
 6827              	.LASF71:
 6828 02b3 6172725F 		.ascii	"arr_pos\000"
 6828      706F7300 
 6829              	.LASF37:
 6830 02bb 73686C64 		.ascii	"shldr_init\000"
 6830      725F696E 
 6830      697400
 6831              	.LASF133:
 6832 02c6 66656564 		.ascii	"feedback_array\000"
 6832      6261636B 
 6832      5F617272 
 6832      617900
 6833              	.LASF6:
 6834 02d5 6C6F6E67 		.ascii	"long long int\000"
 6834      206C6F6E 
 6834      6720696E 
 6834      7400
 6835              	.LASF142:
 6836 02e3 50485F46 		.ascii	"PH_FLAG\000"
 6836      4C414700 
 6837              	.LASF35:
 6838 02eb 73686F75 		.ascii	"shoulder_states\000"
 6838      6C646572 
 6838      5F737461 
 6838      74657300 
 6839              	.LASF67:
 6840 02fb 63706F73 		.ascii	"cpos\000"
 6840      00
 6841              	.LASF125:
 6842 0300 57525F63 		.ascii	"WR_cspot\000"
 6842      73706F74 
 6842      00
 6843              	.LASF123:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 151


 6844 0309 656C6277 		.ascii	"elbw_array\000"
 6844      5F617272 
 6844      617900
 6845              	.LASF25:
 6846 0314 77726973 		.ascii	"wristRotate_states\000"
 6846      74526F74 
 6846      6174655F 
 6846      73746174 
 6846      657300
 6847              	.LASF141:
 6848 0327 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6848      43544F52 
 6848      5F464C41 
 6848      4700
 6849              	.LASF130:
 6850 0335 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6850      4C444552 
 6850      5F555050 
 6850      45525F42 
 6850      4F554E44 
 6851              	.LASF51:
 6852 034a 70685F73 		.ascii	"ph_start\000"
 6852      74617274 
 6852      00
 6853              	.LASF45:
 6854 0353 65666665 		.ascii	"effector_states\000"
 6854      63746F72 
 6854      5F737461 
 6854      74657300 
 6855              	.LASF157:
 6856 0363 65666665 		.ascii	"effector_state\000"
 6856      63746F72 
 6856      5F737461 
 6856      746500
 6857              	.LASF57:
 6858 0372 626F756E 		.ascii	"bound\000"
 6858      6400
 6859              	.LASF13:
 6860 0378 75696E74 		.ascii	"uint32\000"
 6860      333200
 6861              	.LASF120:
 6862 037f 73686C64 		.ascii	"shldr_cspot\000"
 6862      725F6373 
 6862      706F7400 
 6863              	.LASF136:
 6864 038b 57545F46 		.ascii	"WT_FLAG\000"
 6864      4C414700 
 6865              	.LASF79:
 6866 0393 6D616B65 		.ascii	"make_command\000"
 6866      5F636F6D 
 6866      6D616E64 
 6866      00
 6867              	.LASF98:
 6868 03a0 77726973 		.ascii	"wristTilt\000"
 6868      7454696C 
 6868      7400
 6869              	.LASF139:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 152


 6870 03aa 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6870      4C444552 
 6870      5F464C41 
 6870      4700
 6871              	.LASF31:
 6872 03b8 656C6277 		.ascii	"elbw_start\000"
 6872      5F737461 
 6872      727400
 6873              	.LASF152:
 6874 03c3 77726973 		.ascii	"wristTilt_state\000"
 6874      7454696C 
 6874      745F7374 
 6874      61746500 
 6875              	.LASF70:
 6876 03d3 61727261 		.ascii	"array\000"
 6876      7900
 6877              	.LASF108:
 6878 03d9 73686C64 		.ascii	"shldr_arr_cspot\000"
 6878      725F6172 
 6878      725F6373 
 6878      706F7400 
 6879              	.LASF111:
 6880 03e9 42415F61 		.ascii	"BA_arr_cspot\000"
 6880      72725F63 
 6880      73706F74 
 6880      00
 6881              	.LASF89:
 6882 03f6 73656E64 		.ascii	"send_packet\000"
 6882      5F706163 
 6882      6B657400 
 6883              	.LASF73:
 6884 0402 6368616E 		.ascii	"change\000"
 6884      676500
 6885              	.LASF59:
 6886 0409 6368616E 		.ascii	"channel\000"
 6886      6E656C00 
 6887              	.LASF86:
 6888 0411 706F7446 		.ascii	"potFeedback\000"
 6888      65656462 
 6888      61636B00 
 6889              	.LASF77:
 6890 041d 41525241 		.ascii	"ARRAY_SIZE\000"
 6890      595F5349 
 6890      5A4500
 6891              	.LASF99:
 6892 0428 57545F61 		.ascii	"WT_arr_cspot\000"
 6892      72725F63 
 6892      73706F74 
 6892      00
 6893              	.LASF28:
 6894 0435 726F7461 		.ascii	"rotate_control\000"
 6894      74655F63 
 6894      6F6E7472 
 6894      6F6C00
 6895              	.LASF114:
 6896 0444 70685365 		.ascii	"phSensor\000"
 6896      6E736F72 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 153


 6896      00
 6897              	.LASF2:
 6898 044d 73686F72 		.ascii	"short int\000"
 6898      7420696E 
 6898      7400
 6899              	.LASF156:
 6900 0457 62617365 		.ascii	"baseAzimuth_state\000"
 6900      417A696D 
 6900      7574685F 
 6900      73746174 
 6900      6500
 6901              	.LASF64:
 6902 0469 61765F61 		.ascii	"av_array\000"
 6902      72726179 
 6902      00
 6903              	.LASF4:
 6904 0472 6C6F6E67 		.ascii	"long int\000"
 6904      20696E74 
 6904      00
 6905              	.LASF22:
 6906 047b 74696C74 		.ascii	"tilt_control\000"
 6906      5F636F6E 
 6906      74726F6C 
 6906      00
 6907              	.LASF88:
 6908 0488 74696D65 		.ascii	"timer_isr\000"
 6908      725F6973 
 6908      7200
 6909              	.LASF149:
 6910 0492 57525F65 		.ascii	"WR_errors\000"
 6910      72726F72 
 6910      7300
 6911              	.LASF153:
 6912 049c 77726973 		.ascii	"wristRotate_state\000"
 6912      74526F74 
 6912      6174655F 
 6912      73746174 
 6912      6500
 6913              	.LASF44:
 6914 04ae 42415F77 		.ascii	"BA_wait\000"
 6914      61697400 
 6915              	.LASF24:
 6916 04b6 77726973 		.ascii	"wristTilt_states\000"
 6916      7454696C 
 6916      745F7374 
 6916      61746573 
 6916      00
 6917              	.LASF134:
 6918 04c7 77697A6E 		.ascii	"wiznet\000"
 6918      657400
 6919              	.LASF9:
 6920 04ce 5F5F7569 		.ascii	"__uint8_t\000"
 6920      6E74385F 
 6920      7400
 6921              	.LASF69:
 6922 04d8 63686563 		.ascii	"check_update\000"
 6922      6B5F7570 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 154


 6922      64617465 
 6922      00
 6923              	.LASF96:
 6924 04e5 53657276 		.ascii	"ServoSpeed\000"
 6924      6F537065 
 6924      656400
 6925              	.LASF49:
 6926 04f0 6566665F 		.ascii	"eff_wait\000"
 6926      77616974 
 6926      00
 6927              	.LASF63:
 6928 04f9 76656C6F 		.ascii	"velocity\000"
 6928      63697479 
 6928      00
 6929              	.LASF121:
 6930 0502 73686C64 		.ascii	"shldr_array\000"
 6930      725F6172 
 6930      72617900 
 6931              	.LASF19:
 6932 050e 73697A65 		.ascii	"sizetype\000"
 6932      74797065 
 6932      00
 6933              	.LASF5:
 6934 0517 6C6F6E67 		.ascii	"long unsigned int\000"
 6934      20756E73 
 6934      69676E65 
 6934      6420696E 
 6934      7400
 6935              	.LASF33:
 6936 0529 656C6277 		.ascii	"elbw_execute\000"
 6936      5F657865 
 6936      63757465 
 6936      00
 6937              	.LASF112:
 6938 0536 62617365 		.ascii	"baseAz_array\000"
 6938      417A5F61 
 6938      72726179 
 6938      00
 6939              	.LASF29:
 6940 0543 726F7461 		.ascii	"rotate_wait\000"
 6940      74655F77 
 6940      61697400 
 6941              	.LASF131:
 6942 054f 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6942      4C444552 
 6942      5F4C4F57 
 6942      45525F42 
 6942      4F554E44 
 6943              	.LASF36:
 6944 0564 73686C64 		.ascii	"shldr_start\000"
 6944      725F7374 
 6944      61727400 
 6945              	.LASF80:
 6946 0570 696E666F 		.ascii	"info_array\000"
 6946      5F617272 
 6946      617900
 6947              	.LASF1:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 155


 6948 057b 756E7369 		.ascii	"unsigned char\000"
 6948      676E6564 
 6948      20636861 
 6948      7200
 6949              	.LASF113:
 6950 0589 66696C6C 		.ascii	"fill_data_array\000"
 6950      5F646174 
 6950      615F6172 
 6950      72617900 
 6951              	.LASF101:
 6952 0599 77726973 		.ascii	"wristRotate\000"
 6952      74526F74 
 6952      61746500 
 6953              	.LASF47:
 6954 05a5 6566665F 		.ascii	"eff_init\000"
 6954      696E6974 
 6954      00
 6955              	.LASF106:
 6956 05ae 656C626F 		.ascii	"elbow_array\000"
 6956      775F6172 
 6956      72617900 
 6957              	.LASF38:
 6958 05ba 73686C64 		.ascii	"shldr_execute\000"
 6958      725F6578 
 6958      65637574 
 6958      6500
 6959              	.LASF128:
 6960 05c8 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6960      575F5550 
 6960      5045525F 
 6960      424F554E 
 6960      4400
 6961              	.LASF54:
 6962 05da 70685F77 		.ascii	"ph_wait\000"
 6962      61697400 
 6963              	.LASF27:
 6964 05e2 726F7461 		.ascii	"rotate_init\000"
 6964      74655F69 
 6964      6E697400 
 6965              	.LASF159:
 6966 05ee 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6966      4320342E 
 6966      382E3420 
 6966      32303134 
 6966      30353236 
 6967 0621 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6967      20726576 
 6967      6973696F 
 6967      6E203231 
 6967      31333538 
 6968 0654 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6968      74643D67 
 6968      6E753939 
 6968      202D6666 
 6968      756E6374 
 6969              	.LASF78:
 6970 0675 636F6D6D 		.ascii	"command\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 156


 6970      616E6400 
 6971              	.LASF60:
 6972 067d 64696666 		.ascii	"difference\000"
 6972      6572656E 
 6972      636500
 6973              	.LASF127:
 6974 0688 74656D70 		.ascii	"temp_val\000"
 6974      5F76616C 
 6974      00
 6975              	.LASF0:
 6976 0691 7369676E 		.ascii	"signed char\000"
 6976      65642063 
 6976      68617200 
 6977              	.LASF90:
 6978 069d 68656172 		.ascii	"heart_beat\000"
 6978      745F6265 
 6978      617400
 6979              	.LASF158:
 6980 06a8 70685365 		.ascii	"phSensor_state\000"
 6980      6E736F72 
 6980      5F737461 
 6980      746500
 6981              	.LASF58:
 6982 06b7 61766572 		.ascii	"average\000"
 6982      61676500 
 6983              	.LASF3:
 6984 06bf 73686F72 		.ascii	"short unsigned int\000"
 6984      7420756E 
 6984      7369676E 
 6984      65642069 
 6984      6E7400
 6985              	.LASF34:
 6986 06d2 656C6277 		.ascii	"elbw_wait\000"
 6986      5F776169 
 6986      7400
 6987              	.LASF143:
 6988 06dc 64726F70 		.ascii	"dropped_packets\000"
 6988      7065645F 
 6988      7061636B 
 6988      65747300 
 6989              	.LASF117:
 6990 06ec 6D61696E 		.ascii	"main\000"
 6990      00
 6991              	.LASF119:
 6992 06f1 42415F61 		.ascii	"BA_array\000"
 6992      72726179 
 6992      00
 6993              	.LASF161:
 6994 06fa 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 6994      73657273 
 6994      5C53616D 
 6994      75656C5C 
 6994      446F6375 
 6995 0727 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 6995      65725F76 
 6995      325C6172 
 6995      6D5F636F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNxazKe.s 			page 157


 6995      6E74726F 
 6996              	.LASF23:
 6997 074b 74696C74 		.ascii	"tilt_wait\000"
 6997      5F776169 
 6997      7400
 6998              	.LASF103:
 6999 0755 57525F61 		.ascii	"WR_array\000"
 6999      72726179 
 6999      00
 7000              	.LASF11:
 7001 075e 75696E74 		.ascii	"uint8\000"
 7001      3800
 7002              	.LASF17:
 7003 0764 646F7562 		.ascii	"double\000"
 7003      6C6500
 7004              	.LASF138:
 7005 076b 454C424F 		.ascii	"ELBOW_FLAG\000"
 7005      575F464C 
 7005      414700
 7006              	.LASF52:
 7007 0776 70685F69 		.ascii	"ph_init\000"
 7007      6E697400 
 7008              	.LASF92:
 7009 077e 73657276 		.ascii	"servoID\000"
 7009      6F494400 
 7010              	.LASF55:
 7011 0786 6973725F 		.ascii	"isr_var\000"
 7011      76617200 
 7012              	.LASF145:
 7013 078e 73686C64 		.ascii	"shldr_errors\000"
 7013      725F6572 
 7013      726F7273 
 7013      00
 7014              	.LASF94:
 7015 079b 53657453 		.ascii	"SetServoTorque\000"
 7015      6572766F 
 7015      546F7271 
 7015      756500
 7016              	.LASF93:
 7017 07aa 706F7369 		.ascii	"position\000"
 7017      74696F6E 
 7017      00
 7018              	.LASF160:
 7019 07b3 2E5C6D61 		.ascii	".\\main.c\000"
 7019      696E2E63 
 7019      00
 7020              	.LASF32:
 7021 07bc 656C6277 		.ascii	"elbw_init\000"
 7021      5F696E69 
 7021      7400
 7022              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

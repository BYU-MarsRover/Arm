ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ServoGoalPosition,"ax",%progbits
  18              		.align	2
  19              		.global	ServoGoalPosition
  20              		.code	16
  21              		.thumb_func
  22              		.type	ServoGoalPosition, %function
  23              	ServoGoalPosition:
  24              	.LFB34:
  25              		.file 1 ".\\dynamixel.h"
   1:.\dynamixel.h **** /* ========================================
   2:.\dynamixel.h ****  * BYU Mars Rover 2015
   3:.\dynamixel.h ****  * Author: Sam Bury
   4:.\dynamixel.h ****  * ========================================
   5:.\dynamixel.h **** */
   6:.\dynamixel.h **** #ifndef DYNAMIXEL_H
   7:.\dynamixel.h **** #define DYNAMIXEL_H
   8:.\dynamixel.h **** 
   9:.\dynamixel.h ****     #include <project.h>
  10:.\dynamixel.h ****     
  11:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position);
  12:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque);
  13:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed);
  14:.\dynamixel.h **** 
  15:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position)
  16:.\dynamixel.h ****     {
  26              		.loc 1 16 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 86B0     		sub	sp, sp, #24
  33              		.cfi_def_cfa_offset 32
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 0A1C     		mov	r2, r1
  37 0008 FB1D     		add	r3, r7, #7
  38 000a 011C     		add	r1, r0, #0
  39 000c 1970     		strb	r1, [r3]
  40 000e 3B1D     		add	r3, r7, #4
  41 0010 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 2


  17:.\dynamixel.h ****         uint8 array[9];
  18:.\dynamixel.h ****         
  19:.\dynamixel.h ****         array[0] = 0xFF;
  42              		.loc 1 19 0
  43 0012 3B1C     		mov	r3, r7
  44 0014 0C33     		add	r3, r3, #12
  45 0016 FF22     		mov	r2, #255
  46 0018 1A70     		strb	r2, [r3]
  20:.\dynamixel.h ****         array[1] = 0xFF;
  47              		.loc 1 20 0
  48 001a 3B1C     		mov	r3, r7
  49 001c 0C33     		add	r3, r3, #12
  50 001e FF22     		mov	r2, #255
  51 0020 5A70     		strb	r2, [r3, #1]
  21:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
  52              		.loc 1 21 0
  53 0022 3B1C     		mov	r3, r7
  54 0024 0C33     		add	r3, r3, #12
  55 0026 FA1D     		add	r2, r7, #7
  56 0028 1278     		ldrb	r2, [r2]
  57 002a 9A70     		strb	r2, [r3, #2]
  22:.\dynamixel.h ****         array[3] = 0x05;
  58              		.loc 1 22 0
  59 002c 3B1C     		mov	r3, r7
  60 002e 0C33     		add	r3, r3, #12
  61 0030 0522     		mov	r2, #5
  62 0032 DA70     		strb	r2, [r3, #3]
  23:.\dynamixel.h ****         array[4] = 0x03; //write instruction
  63              		.loc 1 23 0
  64 0034 3B1C     		mov	r3, r7
  65 0036 0C33     		add	r3, r3, #12
  66 0038 0322     		mov	r2, #3
  67 003a 1A71     		strb	r2, [r3, #4]
  24:.\dynamixel.h ****         array[5] = 0x1E;
  68              		.loc 1 24 0
  69 003c 3B1C     		mov	r3, r7
  70 003e 0C33     		add	r3, r3, #12
  71 0040 1E22     		mov	r2, #30
  72 0042 5A71     		strb	r2, [r3, #5]
  25:.\dynamixel.h ****         array[6] = position;
  73              		.loc 1 25 0
  74 0044 3B1D     		add	r3, r7, #4
  75 0046 1B88     		ldrh	r3, [r3]
  76 0048 DAB2     		uxtb	r2, r3
  77 004a 3B1C     		mov	r3, r7
  78 004c 0C33     		add	r3, r3, #12
  79 004e 9A71     		strb	r2, [r3, #6]
  26:.\dynamixel.h ****         array[7] = position >> 8;
  80              		.loc 1 26 0
  81 0050 3B1D     		add	r3, r7, #4
  82 0052 1B88     		ldrh	r3, [r3]
  83 0054 1B0A     		lsr	r3, r3, #8
  84 0056 9BB2     		uxth	r3, r3
  85 0058 DAB2     		uxtb	r2, r3
  86 005a 3B1C     		mov	r3, r7
  87 005c 0C33     		add	r3, r3, #12
  88 005e DA71     		strb	r2, [r3, #7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 3


  27:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
  89              		.loc 1 27 0
  90 0060 3B1C     		mov	r3, r7
  91 0062 0C33     		add	r3, r3, #12
  92 0064 9A79     		ldrb	r2, [r3, #6]
  93 0066 FB1D     		add	r3, r7, #7
  94 0068 1B78     		ldrb	r3, [r3]
  95 006a D318     		add	r3, r2, r3
  96 006c DAB2     		uxtb	r2, r3
  97 006e 3B1C     		mov	r3, r7
  98 0070 0C33     		add	r3, r3, #12
  99 0072 DB79     		ldrb	r3, [r3, #7]
 100 0074 D318     		add	r3, r2, r3
 101 0076 DBB2     		uxtb	r3, r3
 102 0078 2633     		add	r3, r3, #38
 103 007a DBB2     		uxtb	r3, r3
 104 007c DB43     		mvn	r3, r3
 105 007e DAB2     		uxtb	r2, r3
 106 0080 3B1C     		mov	r3, r7
 107 0082 0C33     		add	r3, r3, #12
 108 0084 1A72     		strb	r2, [r3, #8]
  28:.\dynamixel.h ****         
  29:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 109              		.loc 1 29 0
 110 0086 3B1C     		mov	r3, r7
 111 0088 0C33     		add	r3, r3, #12
 112 008a 181C     		mov	r0, r3
 113 008c 0921     		mov	r1, #9
 114 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  30:.\dynamixel.h ****     }
 115              		.loc 1 30 0
 116 0092 BD46     		mov	sp, r7
 117 0094 06B0     		add	sp, sp, #24
 118              		@ sp needed
 119 0096 80BD     		pop	{r7, pc}
 120              		.cfi_endproc
 121              	.LFE34:
 122              		.size	ServoGoalPosition, .-ServoGoalPosition
 123              		.section	.text.SetServoTorque,"ax",%progbits
 124              		.align	2
 125              		.global	SetServoTorque
 126              		.code	16
 127              		.thumb_func
 128              		.type	SetServoTorque, %function
 129              	SetServoTorque:
 130              	.LFB35:
  31:.\dynamixel.h **** 
  32:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque)
  33:.\dynamixel.h ****     {
 131              		.loc 1 33 0
 132              		.cfi_startproc
 133 0000 80B5     		push	{r7, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 7, -8
 136              		.cfi_offset 14, -4
 137 0002 86B0     		sub	sp, sp, #24
 138              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 4


 139 0004 00AF     		add	r7, sp, #0
 140              		.cfi_def_cfa_register 7
 141 0006 0A1C     		mov	r2, r1
 142 0008 FB1D     		add	r3, r7, #7
 143 000a 011C     		add	r1, r0, #0
 144 000c 1970     		strb	r1, [r3]
 145 000e 3B1D     		add	r3, r7, #4
 146 0010 1A80     		strh	r2, [r3]
  34:.\dynamixel.h ****         uint8 array[9];
  35:.\dynamixel.h ****         
  36:.\dynamixel.h ****         array[0] = 0xFF;
 147              		.loc 1 36 0
 148 0012 3B1C     		mov	r3, r7
 149 0014 0C33     		add	r3, r3, #12
 150 0016 FF22     		mov	r2, #255
 151 0018 1A70     		strb	r2, [r3]
  37:.\dynamixel.h ****         array[1] = 0xFF;
 152              		.loc 1 37 0
 153 001a 3B1C     		mov	r3, r7
 154 001c 0C33     		add	r3, r3, #12
 155 001e FF22     		mov	r2, #255
 156 0020 5A70     		strb	r2, [r3, #1]
  38:.\dynamixel.h ****         array[2] = servoID; 
 157              		.loc 1 38 0
 158 0022 3B1C     		mov	r3, r7
 159 0024 0C33     		add	r3, r3, #12
 160 0026 FA1D     		add	r2, r7, #7
 161 0028 1278     		ldrb	r2, [r2]
 162 002a 9A70     		strb	r2, [r3, #2]
  39:.\dynamixel.h ****         array[3] = 0x05;
 163              		.loc 1 39 0
 164 002c 3B1C     		mov	r3, r7
 165 002e 0C33     		add	r3, r3, #12
 166 0030 0522     		mov	r2, #5
 167 0032 DA70     		strb	r2, [r3, #3]
  40:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 168              		.loc 1 40 0
 169 0034 3B1C     		mov	r3, r7
 170 0036 0C33     		add	r3, r3, #12
 171 0038 0322     		mov	r2, #3
 172 003a 1A71     		strb	r2, [r3, #4]
  41:.\dynamixel.h ****         array[5] = 0x0E;
 173              		.loc 1 41 0
 174 003c 3B1C     		mov	r3, r7
 175 003e 0C33     		add	r3, r3, #12
 176 0040 0E22     		mov	r2, #14
 177 0042 5A71     		strb	r2, [r3, #5]
  42:.\dynamixel.h ****         array[6] = torque;
 178              		.loc 1 42 0
 179 0044 3B1D     		add	r3, r7, #4
 180 0046 1B88     		ldrh	r3, [r3]
 181 0048 DAB2     		uxtb	r2, r3
 182 004a 3B1C     		mov	r3, r7
 183 004c 0C33     		add	r3, r3, #12
 184 004e 9A71     		strb	r2, [r3, #6]
  43:.\dynamixel.h ****         array[7] = torque >> 8;
 185              		.loc 1 43 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 5


 186 0050 3B1D     		add	r3, r7, #4
 187 0052 1B88     		ldrh	r3, [r3]
 188 0054 1B0A     		lsr	r3, r3, #8
 189 0056 9BB2     		uxth	r3, r3
 190 0058 DAB2     		uxtb	r2, r3
 191 005a 3B1C     		mov	r3, r7
 192 005c 0C33     		add	r3, r3, #12
 193 005e DA71     		strb	r2, [r3, #7]
  44:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 194              		.loc 1 44 0
 195 0060 3B1C     		mov	r3, r7
 196 0062 0C33     		add	r3, r3, #12
 197 0064 9A79     		ldrb	r2, [r3, #6]
 198 0066 FB1D     		add	r3, r7, #7
 199 0068 1B78     		ldrb	r3, [r3]
 200 006a D318     		add	r3, r2, r3
 201 006c DAB2     		uxtb	r2, r3
 202 006e 3B1C     		mov	r3, r7
 203 0070 0C33     		add	r3, r3, #12
 204 0072 DB79     		ldrb	r3, [r3, #7]
 205 0074 D318     		add	r3, r2, r3
 206 0076 DBB2     		uxtb	r3, r3
 207 0078 1633     		add	r3, r3, #22
 208 007a DBB2     		uxtb	r3, r3
 209 007c DB43     		mvn	r3, r3
 210 007e DAB2     		uxtb	r2, r3
 211 0080 3B1C     		mov	r3, r7
 212 0082 0C33     		add	r3, r3, #12
 213 0084 1A72     		strb	r2, [r3, #8]
  45:.\dynamixel.h ****         
  46:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);
 214              		.loc 1 46 0
 215 0086 3B1C     		mov	r3, r7
 216 0088 0C33     		add	r3, r3, #12
 217 008a 181C     		mov	r0, r3
 218 008c 0921     		mov	r1, #9
 219 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  47:.\dynamixel.h ****     }    
 220              		.loc 1 47 0
 221 0092 BD46     		mov	sp, r7
 222 0094 06B0     		add	sp, sp, #24
 223              		@ sp needed
 224 0096 80BD     		pop	{r7, pc}
 225              		.cfi_endproc
 226              	.LFE35:
 227              		.size	SetServoTorque, .-SetServoTorque
 228              		.section	.text.ServoSpeed,"ax",%progbits
 229              		.align	2
 230              		.global	ServoSpeed
 231              		.code	16
 232              		.thumb_func
 233              		.type	ServoSpeed, %function
 234              	ServoSpeed:
 235              	.LFB36:
  48:.\dynamixel.h **** 
  49:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed)
  50:.\dynamixel.h ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 6


 236              		.loc 1 50 0
 237              		.cfi_startproc
 238 0000 80B5     		push	{r7, lr}
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 86B0     		sub	sp, sp, #24
 243              		.cfi_def_cfa_offset 32
 244 0004 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 246 0006 0A1C     		mov	r2, r1
 247 0008 FB1D     		add	r3, r7, #7
 248 000a 011C     		add	r1, r0, #0
 249 000c 1970     		strb	r1, [r3]
 250 000e 3B1D     		add	r3, r7, #4
 251 0010 1A80     		strh	r2, [r3]
  51:.\dynamixel.h ****         uint8 array[9];
  52:.\dynamixel.h ****         
  53:.\dynamixel.h ****         array[0] = 0xFF;
 252              		.loc 1 53 0
 253 0012 3B1C     		mov	r3, r7
 254 0014 0C33     		add	r3, r3, #12
 255 0016 FF22     		mov	r2, #255
 256 0018 1A70     		strb	r2, [r3]
  54:.\dynamixel.h ****         array[1] = 0xFF;
 257              		.loc 1 54 0
 258 001a 3B1C     		mov	r3, r7
 259 001c 0C33     		add	r3, r3, #12
 260 001e FF22     		mov	r2, #255
 261 0020 5A70     		strb	r2, [r3, #1]
  55:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 262              		.loc 1 55 0
 263 0022 3B1C     		mov	r3, r7
 264 0024 0C33     		add	r3, r3, #12
 265 0026 FA1D     		add	r2, r7, #7
 266 0028 1278     		ldrb	r2, [r2]
 267 002a 9A70     		strb	r2, [r3, #2]
  56:.\dynamixel.h ****         array[3] = 0x05;
 268              		.loc 1 56 0
 269 002c 3B1C     		mov	r3, r7
 270 002e 0C33     		add	r3, r3, #12
 271 0030 0522     		mov	r2, #5
 272 0032 DA70     		strb	r2, [r3, #3]
  57:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 273              		.loc 1 57 0
 274 0034 3B1C     		mov	r3, r7
 275 0036 0C33     		add	r3, r3, #12
 276 0038 0322     		mov	r2, #3
 277 003a 1A71     		strb	r2, [r3, #4]
  58:.\dynamixel.h ****         array[5] = 0x20;
 278              		.loc 1 58 0
 279 003c 3B1C     		mov	r3, r7
 280 003e 0C33     		add	r3, r3, #12
 281 0040 2022     		mov	r2, #32
 282 0042 5A71     		strb	r2, [r3, #5]
  59:.\dynamixel.h ****         array[6] = speed;
 283              		.loc 1 59 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 7


 284 0044 3B1D     		add	r3, r7, #4
 285 0046 1B88     		ldrh	r3, [r3]
 286 0048 DAB2     		uxtb	r2, r3
 287 004a 3B1C     		mov	r3, r7
 288 004c 0C33     		add	r3, r3, #12
 289 004e 9A71     		strb	r2, [r3, #6]
  60:.\dynamixel.h ****         array[7] = speed >> 8;
 290              		.loc 1 60 0
 291 0050 3B1D     		add	r3, r7, #4
 292 0052 1B88     		ldrh	r3, [r3]
 293 0054 1B0A     		lsr	r3, r3, #8
 294 0056 9BB2     		uxth	r3, r3
 295 0058 DAB2     		uxtb	r2, r3
 296 005a 3B1C     		mov	r3, r7
 297 005c 0C33     		add	r3, r3, #12
 298 005e DA71     		strb	r2, [r3, #7]
  61:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 299              		.loc 1 61 0
 300 0060 3B1C     		mov	r3, r7
 301 0062 0C33     		add	r3, r3, #12
 302 0064 9A79     		ldrb	r2, [r3, #6]
 303 0066 FB1D     		add	r3, r7, #7
 304 0068 1B78     		ldrb	r3, [r3]
 305 006a D318     		add	r3, r2, r3
 306 006c DAB2     		uxtb	r2, r3
 307 006e 3B1C     		mov	r3, r7
 308 0070 0C33     		add	r3, r3, #12
 309 0072 DB79     		ldrb	r3, [r3, #7]
 310 0074 D318     		add	r3, r2, r3
 311 0076 DBB2     		uxtb	r3, r3
 312 0078 2833     		add	r3, r3, #40
 313 007a DBB2     		uxtb	r3, r3
 314 007c DB43     		mvn	r3, r3
 315 007e DAB2     		uxtb	r2, r3
 316 0080 3B1C     		mov	r3, r7
 317 0082 0C33     		add	r3, r3, #12
 318 0084 1A72     		strb	r2, [r3, #8]
  62:.\dynamixel.h ****         
  63:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 319              		.loc 1 63 0
 320 0086 3B1C     		mov	r3, r7
 321 0088 0C33     		add	r3, r3, #12
 322 008a 181C     		mov	r0, r3
 323 008c 0921     		mov	r1, #9
 324 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  64:.\dynamixel.h ****     }
 325              		.loc 1 64 0
 326 0092 BD46     		mov	sp, r7
 327 0094 06B0     		add	sp, sp, #24
 328              		@ sp needed
 329 0096 80BD     		pop	{r7, pc}
 330              		.cfi_endproc
 331              	.LFE36:
 332              		.size	ServoSpeed, .-ServoSpeed
 333              		.global	ELBOW_UPPER_BOUND
 334              		.data
 335              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 8


 336              		.type	ELBOW_UPPER_BOUND, %object
 337              		.size	ELBOW_UPPER_BOUND, 4
 338              	ELBOW_UPPER_BOUND:
 339 0000 E8030000 		.word	1000
 340              		.global	ELBOW_LOWER_BOUND
 341              		.align	2
 342              		.type	ELBOW_LOWER_BOUND, %object
 343              		.size	ELBOW_LOWER_BOUND, 4
 344              	ELBOW_LOWER_BOUND:
 345 0004 64000000 		.word	100
 346              		.global	SHOULDER_UPPER_BOUND
 347              		.align	2
 348              		.type	SHOULDER_UPPER_BOUND, %object
 349              		.size	SHOULDER_UPPER_BOUND, 4
 350              	SHOULDER_UPPER_BOUND:
 351 0008 20030000 		.word	800
 352              		.global	SHOULDER_LOWER_BOUND
 353              		.align	2
 354              		.type	SHOULDER_LOWER_BOUND, %object
 355              		.size	SHOULDER_LOWER_BOUND, 4
 356              	SHOULDER_LOWER_BOUND:
 357 000c 18010000 		.word	280
 358              		.global	NEUTRAL
 359              		.align	1
 360              		.type	NEUTRAL, %object
 361              		.size	NEUTRAL, 2
 362              	NEUTRAL:
 363 0010 DC05     		.short	1500
 364              		.comm	data_array,22,4
 365              		.comm	feedback_array,14,4
 366              		.comm	heartbeat_array,14,4
 367              		.comm	HEARTBEAT_FLAG,1,1
 368              		.comm	wiznet,1,1
 369              		.comm	test_array,22,4
 370              		.global	WT_feedback_flag
 371 0012 0000     		.bss
 372              		.type	WT_feedback_flag, %object
 373              		.size	WT_feedback_flag, 1
 374              	WT_feedback_flag:
 375 0000 00       		.space	1
 376              		.global	WR_feedback_flag
 377              		.type	WR_feedback_flag, %object
 378              		.size	WR_feedback_flag, 1
 379              	WR_feedback_flag:
 380 0001 00       		.space	1
 381              		.global	WR_feedback
 382              		.align	1
 383              		.type	WR_feedback, %object
 384              		.size	WR_feedback, 2
 385              	WR_feedback:
 386 0002 0000     		.space	2
 387              		.global	WT_FLAG
 388              		.type	WT_FLAG, %object
 389              		.size	WT_FLAG, 1
 390              	WT_FLAG:
 391 0004 00       		.space	1
 392              		.global	WR_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 9


 393              		.type	WR_FLAG, %object
 394              		.size	WR_FLAG, 1
 395              	WR_FLAG:
 396 0005 00       		.space	1
 397              		.global	ELBOW_FLAG
 398              		.type	ELBOW_FLAG, %object
 399              		.size	ELBOW_FLAG, 1
 400              	ELBOW_FLAG:
 401 0006 00       		.space	1
 402              		.global	SHOULDER_FLAG
 403              		.type	SHOULDER_FLAG, %object
 404              		.size	SHOULDER_FLAG, 1
 405              	SHOULDER_FLAG:
 406 0007 00       		.space	1
 407              		.global	BA_FLAG
 408              		.type	BA_FLAG, %object
 409              		.size	BA_FLAG, 1
 410              	BA_FLAG:
 411 0008 00       		.space	1
 412              		.global	EFFECTOR_FLAG
 413              		.type	EFFECTOR_FLAG, %object
 414              		.size	EFFECTOR_FLAG, 1
 415              	EFFECTOR_FLAG:
 416 0009 00       		.space	1
 417              		.global	ARD_FLAG
 418              		.type	ARD_FLAG, %object
 419              		.size	ARD_FLAG, 1
 420              	ARD_FLAG:
 421 000a 00       		.space	1
 422              		.global	Time_Out_flag
 423              		.type	Time_Out_flag, %object
 424              		.size	Time_Out_flag, 1
 425              	Time_Out_flag:
 426 000b 00       		.space	1
 427              		.global	Time_count
 428              		.type	Time_count, %object
 429              		.size	Time_count, 1
 430              	Time_count:
 431 000c 00       		.space	1
 432              		.global	dropped_packets
 433 000d 00       		.align	1
 434              		.type	dropped_packets, %object
 435              		.size	dropped_packets, 2
 436              	dropped_packets:
 437 000e 0000     		.space	2
 438              		.global	fail_safe_errors
 439              		.align	1
 440              		.type	fail_safe_errors, %object
 441              		.size	fail_safe_errors, 2
 442              	fail_safe_errors:
 443 0010 0000     		.space	2
 444              		.global	shldr_errors
 445              		.align	1
 446              		.type	shldr_errors, %object
 447              		.size	shldr_errors, 2
 448              	shldr_errors:
 449 0012 0000     		.space	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 10


 450              		.global	elbw_errors
 451              		.align	1
 452              		.type	elbw_errors, %object
 453              		.size	elbw_errors, 2
 454              	elbw_errors:
 455 0014 0000     		.space	2
 456              		.global	BA_errors
 457              		.align	1
 458              		.type	BA_errors, %object
 459              		.size	BA_errors, 2
 460              	BA_errors:
 461 0016 0000     		.space	2
 462              		.global	WT_errors
 463              		.align	1
 464              		.type	WT_errors, %object
 465              		.size	WT_errors, 2
 466              	WT_errors:
 467 0018 0000     		.space	2
 468              		.global	WR_errors
 469              		.align	1
 470              		.type	WR_errors, %object
 471              		.size	WR_errors, 2
 472              	WR_errors:
 473 001a 0000     		.space	2
 474              		.global	eff_errors
 475              		.align	1
 476              		.type	eff_errors, %object
 477              		.size	eff_errors, 2
 478              	eff_errors:
 479 001c 0000     		.space	2
 480              		.comm	timerFlag,1,1
 481              		.comm	latest_command,2,2
 482              		.comm	latest_WR_command,2,2
 483              		.comm	latest_WT_command,2,2
 484              		.section	.text.timer_isr,"ax",%progbits
 485              		.align	2
 486              		.global	timer_isr
 487              		.code	16
 488              		.thumb_func
 489              		.type	timer_isr, %function
 490              	timer_isr:
 491              	.LFB37:
 492              		.file 2 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 493              		.loc 2 11 0
 494              		.cfi_startproc
 495 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 11


 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 82B0     		sub	sp, sp, #8
 500              		.cfi_def_cfa_offset 16
 501 0004 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 503              		.loc 2 12 0
 504 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 505 000a 031C     		mov	r3, r0
 506 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 507              		.loc 2 13 0
 508 000e 054B     		ldr	r3, .L5
 509 0010 0122     		mov	r2, #1
 510 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 511              		.loc 2 14 0
 512 0014 7B68     		ldr	r3, [r7, #4]
 513 0016 181C     		mov	r0, r3
 514 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 515              		.loc 2 15 0
 516 001c BD46     		mov	sp, r7
 517 001e 02B0     		add	sp, sp, #8
 518              		@ sp needed
 519 0020 80BD     		pop	{r7, pc}
 520              	.L6:
 521 0022 C046     		.align	2
 522              	.L5:
 523 0024 00000000 		.word	timerFlag
 524              		.cfi_endproc
 525              	.LFE37:
 526              		.size	timer_isr, .-timer_isr
 527              		.global	__aeabi_idiv
 528              		.section	.text.CalibrationElbow,"ax",%progbits
 529              		.align	2
 530              		.global	CalibrationElbow
 531              		.code	16
 532              		.thumb_func
 533              		.type	CalibrationElbow, %function
 534              	CalibrationElbow:
 535              	.LFB38:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  19:.\main.c      **** {
 536              		.loc 2 19 0
 537              		.cfi_startproc
 538 0000 80B5     		push	{r7, lr}
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 7, -8
 541              		.cfi_offset 14, -4
 542 0002 86B0     		sub	sp, sp, #24
 543              		.cfi_def_cfa_offset 32
 544 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 12


 545              		.cfi_def_cfa_register 7
 546 0006 021C     		mov	r2, r0
 547 0008 BB1D     		add	r3, r7, #6
 548 000a 1A80     		strh	r2, [r3]
  20:.\main.c      ****     uint8 	CYCLES = 3;
 549              		.loc 2 20 0
 550 000c 3B1C     		mov	r3, r7
 551 000e 1133     		add	r3, r3, #17
 552 0010 0322     		mov	r2, #3
 553 0012 1A70     		strb	r2, [r3]
  21:.\main.c      **** 	uint8 	i;
  22:.\main.c      **** 	uint16 	bound;
  23:.\main.c      **** 	uint16 	average;
  24:.\main.c      ****     uint32  channel;
  25:.\main.c      ****     int16   difference;
  26:.\main.c      ****  
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 554              		.loc 2 27 0
 555 0014 3B1C     		mov	r3, r7
 556 0016 1733     		add	r3, r3, #23
 557 0018 0022     		mov	r2, #0
 558 001a 1A70     		strb	r2, [r3]
 559 001c 3B1C     		mov	r3, r7
 560 001e 1233     		add	r3, r3, #18
 561 0020 0022     		mov	r2, #0
 562 0022 1A80     		strh	r2, [r3]
 563 0024 6AE0     		b	.L8
 564              	.L16:
  28:.\main.c      **** 	{
  29:.\main.c      ****         // Move till stop switch presses down
  30:.\main.c      ****         if(velocity < NEUTRAL)
 565              		.loc 2 30 0
 566 0026 564B     		ldr	r3, .L21
 567 0028 1B88     		ldrh	r3, [r3]
 568 002a BA1D     		add	r2, r7, #6
 569 002c 1288     		ldrh	r2, [r2]
 570 002e 9A42     		cmp	r2, r3
 571 0030 0BD2     		bcs	.L9
  31:.\main.c      ****         {
  32:.\main.c      ****             while(stop_elb_dn_Read())
 572              		.loc 2 32 0
 573 0032 04E0     		b	.L10
 574              	.L11:
  33:.\main.c      ****             {
  34:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 575              		.loc 2 34 0
 576 0034 BB1D     		add	r3, r7, #6
 577 0036 1B88     		ldrh	r3, [r3]
 578 0038 181C     		mov	r0, r3
 579 003a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 580              	.L10:
  32:.\main.c      ****             while(stop_elb_dn_Read())
 581              		.loc 2 32 0 discriminator 1
 582 003e FFF7FEFF 		bl	stop_elb_dn_Read
 583 0042 031C     		mov	r3, r0
 584 0044 002B     		cmp	r3, #0
 585 0046 F5D1     		bne	.L11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 13


 586 0048 16E0     		b	.L12
 587              	.L9:
  35:.\main.c      ****             }
  36:.\main.c      ****         }
  37:.\main.c      ****         else if(velocity > NEUTRAL)
 588              		.loc 2 37 0
 589 004a 4D4B     		ldr	r3, .L21
 590 004c 1B88     		ldrh	r3, [r3]
 591 004e BA1D     		add	r2, r7, #6
 592 0050 1288     		ldrh	r2, [r2]
 593 0052 9A42     		cmp	r2, r3
 594 0054 0BD9     		bls	.L13
  38:.\main.c      ****         {
  39:.\main.c      ****             while(stop_elb_up_Read())
 595              		.loc 2 39 0
 596 0056 04E0     		b	.L14
 597              	.L15:
  40:.\main.c      ****             {
  41:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 598              		.loc 2 41 0
 599 0058 BB1D     		add	r3, r7, #6
 600 005a 1B88     		ldrh	r3, [r3]
 601 005c 181C     		mov	r0, r3
 602 005e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 603              	.L14:
  39:.\main.c      ****             while(stop_elb_up_Read())
 604              		.loc 2 39 0 discriminator 1
 605 0062 FFF7FEFF 		bl	stop_elb_up_Read
 606 0066 031C     		mov	r3, r0
 607 0068 002B     		cmp	r3, #0
 608 006a F5D1     		bne	.L15
 609 006c 04E0     		b	.L12
 610              	.L13:
  42:.\main.c      ****             }
  43:.\main.c      ****         }
  44:.\main.c      ****         else
  45:.\main.c      ****         {
  46:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 611              		.loc 2 46 0
 612 006e BB1D     		add	r3, r7, #6
 613 0070 1B88     		ldrh	r3, [r3]
 614 0072 181C     		mov	r0, r3
 615 0074 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 616              	.L12:
  47:.\main.c      ****         }
  48:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 617              		.loc 2 48 0
 618 0078 414B     		ldr	r3, .L21
 619 007a 1B88     		ldrh	r3, [r3]
 620 007c 181C     		mov	r0, r3
 621 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  49:.\main.c      ****         
  50:.\main.c      ****         CyDelay(1000);
 622              		.loc 2 50 0
 623 0082 FA23     		mov	r3, #250
 624 0084 9B00     		lsl	r3, r3, #2
 625 0086 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 14


 626 0088 FFF7FEFF 		bl	CyDelay
  51:.\main.c      ****         
  52:.\main.c      ****         channel = ELBOW_POT;
 627              		.loc 2 52 0
 628 008c 0123     		mov	r3, #1
 629 008e FB60     		str	r3, [r7, #12]
  53:.\main.c      ****         
  54:.\main.c      ****         // Add the value to average
  55:.\main.c      ****         average+=potFeedback(channel);
 630              		.loc 2 55 0
 631 0090 FB68     		ldr	r3, [r7, #12]
 632 0092 181C     		mov	r0, r3
 633 0094 FFF7FEFF 		bl	potFeedback
 634 0098 031C     		mov	r3, r0
 635 009a 191C     		mov	r1, r3
 636 009c 3B1C     		mov	r3, r7
 637 009e 1233     		add	r3, r3, #18
 638 00a0 3A1C     		mov	r2, r7
 639 00a2 1232     		add	r2, r2, #18
 640 00a4 1288     		ldrh	r2, [r2]
 641 00a6 8A18     		add	r2, r1, r2
 642 00a8 1A80     		strh	r2, [r3]
  56:.\main.c      ****  
  57:.\main.c      **** 		// Move away for 2 seconds
  58:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  59:.\main.c      ****         difference = NEUTRAL-velocity;
 643              		.loc 2 59 0
 644 00aa 354B     		ldr	r3, .L21
 645 00ac 1A88     		ldrh	r2, [r3]
 646 00ae BB1D     		add	r3, r7, #6
 647 00b0 1B88     		ldrh	r3, [r3]
 648 00b2 D31A     		sub	r3, r2, r3
 649 00b4 9AB2     		uxth	r2, r3
 650 00b6 3B1C     		mov	r3, r7
 651 00b8 0A33     		add	r3, r3, #10
 652 00ba 1A80     		strh	r2, [r3]
  60:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(NEUTRAL + difference));
 653              		.loc 2 60 0
 654 00bc 304B     		ldr	r3, .L21
 655 00be 1A88     		ldrh	r2, [r3]
 656 00c0 3B1C     		mov	r3, r7
 657 00c2 0A33     		add	r3, r3, #10
 658 00c4 1B88     		ldrh	r3, [r3]
 659 00c6 D318     		add	r3, r2, r3
 660 00c8 9BB2     		uxth	r3, r3
 661 00ca 181C     		mov	r0, r3
 662 00cc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  61:.\main.c      ****         
  62:.\main.c      ****         CyDelay(1000);
 663              		.loc 2 62 0
 664 00d0 FA23     		mov	r3, #250
 665 00d2 9B00     		lsl	r3, r3, #2
 666 00d4 181C     		mov	r0, r3
 667 00d6 FFF7FEFF 		bl	CyDelay
  63:.\main.c      ****  
  64:.\main.c      **** 		// Stop moving
  65:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 15


 668              		.loc 2 65 0
 669 00da 294B     		ldr	r3, .L21
 670 00dc 1B88     		ldrh	r3, [r3]
 671 00de 181C     		mov	r0, r3
 672 00e0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  66:.\main.c      ****          
  67:.\main.c      ****         CyDelay(1000);
 673              		.loc 2 67 0
 674 00e4 FA23     		mov	r3, #250
 675 00e6 9B00     		lsl	r3, r3, #2
 676 00e8 181C     		mov	r0, r3
 677 00ea FFF7FEFF 		bl	CyDelay
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 678              		.loc 2 27 0
 679 00ee 3B1C     		mov	r3, r7
 680 00f0 1733     		add	r3, r3, #23
 681 00f2 1A78     		ldrb	r2, [r3]
 682 00f4 3B1C     		mov	r3, r7
 683 00f6 1733     		add	r3, r3, #23
 684 00f8 0132     		add	r2, r2, #1
 685 00fa 1A70     		strb	r2, [r3]
 686              	.L8:
  27:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 687              		.loc 2 27 0 is_stmt 0 discriminator 1
 688 00fc 3A1C     		mov	r2, r7
 689 00fe 1732     		add	r2, r2, #23
 690 0100 3B1C     		mov	r3, r7
 691 0102 1133     		add	r3, r3, #17
 692 0104 1278     		ldrb	r2, [r2]
 693 0106 1B78     		ldrb	r3, [r3]
 694 0108 9A42     		cmp	r2, r3
 695 010a 00D2     		bcs	.LCB459
 696 010c 8BE7     		b	.L16	@long jump
 697              	.LCB459:
  68:.\main.c      **** 	}
  69:.\main.c      ****     
  70:.\main.c      ****     if(velocity > NEUTRAL)
 698              		.loc 2 70 0 is_stmt 1
 699 010e 1C4B     		ldr	r3, .L21
 700 0110 1B88     		ldrh	r3, [r3]
 701 0112 BA1D     		add	r2, r7, #6
 702 0114 1288     		ldrh	r2, [r2]
 703 0116 9A42     		cmp	r2, r3
 704 0118 10D9     		bls	.L17
  71:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 705              		.loc 2 71 0
 706 011a 3B1C     		mov	r3, r7
 707 011c 1233     		add	r3, r3, #18
 708 011e 1A88     		ldrh	r2, [r3]
 709 0120 3B1C     		mov	r3, r7
 710 0122 1133     		add	r3, r3, #17
 711 0124 1B78     		ldrb	r3, [r3]
 712 0126 101C     		mov	r0, r2
 713 0128 191C     		mov	r1, r3
 714 012a FFF7FEFF 		bl	__aeabi_idiv
 715 012e 031C     		mov	r3, r0
 716 0130 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 16


 717 0132 3B1C     		mov	r3, r7
 718 0134 1433     		add	r3, r3, #20
 719 0136 143A     		sub	r2, r2, #20
 720 0138 1A80     		strh	r2, [r3]
 721 013a 19E0     		b	.L18
 722              	.L17:
  72:.\main.c      ****     else if(velocity < NEUTRAL)
 723              		.loc 2 72 0
 724 013c 104B     		ldr	r3, .L21
 725 013e 1B88     		ldrh	r3, [r3]
 726 0140 BA1D     		add	r2, r7, #6
 727 0142 1288     		ldrh	r2, [r2]
 728 0144 9A42     		cmp	r2, r3
 729 0146 10D2     		bcs	.L19
  73:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 730              		.loc 2 73 0
 731 0148 3B1C     		mov	r3, r7
 732 014a 1233     		add	r3, r3, #18
 733 014c 1A88     		ldrh	r2, [r3]
 734 014e 3B1C     		mov	r3, r7
 735 0150 1133     		add	r3, r3, #17
 736 0152 1B78     		ldrb	r3, [r3]
 737 0154 101C     		mov	r0, r2
 738 0156 191C     		mov	r1, r3
 739 0158 FFF7FEFF 		bl	__aeabi_idiv
 740 015c 031C     		mov	r3, r0
 741 015e 9AB2     		uxth	r2, r3
 742 0160 3B1C     		mov	r3, r7
 743 0162 1433     		add	r3, r3, #20
 744 0164 1432     		add	r2, r2, #20
 745 0166 1A80     		strh	r2, [r3]
 746 0168 02E0     		b	.L18
 747              	.L19:
  74:.\main.c      ****     else // velocity == NEUTRAL
  75:.\main.c      ****        LED_Write(0);
 748              		.loc 2 75 0
 749 016a 0020     		mov	r0, #0
 750 016c FFF7FEFF 		bl	LED_Write
 751              	.L18:
  76:.\main.c      ****  
  77:.\main.c      **** 	return bound;
 752              		.loc 2 77 0
 753 0170 3B1C     		mov	r3, r7
 754 0172 1433     		add	r3, r3, #20
 755 0174 1B88     		ldrh	r3, [r3]
  78:.\main.c      **** }
 756              		.loc 2 78 0
 757 0176 181C     		mov	r0, r3
 758 0178 BD46     		mov	sp, r7
 759 017a 06B0     		add	sp, sp, #24
 760              		@ sp needed
 761 017c 80BD     		pop	{r7, pc}
 762              	.L22:
 763 017e C046     		.align	2
 764              	.L21:
 765 0180 00000000 		.word	NEUTRAL
 766              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 17


 767              	.LFE38:
 768              		.size	CalibrationElbow, .-CalibrationElbow
 769              		.section	.text.CalibrationShoulder,"ax",%progbits
 770              		.align	2
 771              		.global	CalibrationShoulder
 772              		.code	16
 773              		.thumb_func
 774              		.type	CalibrationShoulder, %function
 775              	CalibrationShoulder:
 776              	.LFB39:
  79:.\main.c      **** 
  80:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
  81:.\main.c      **** {
 777              		.loc 2 81 0
 778              		.cfi_startproc
 779 0000 80B5     		push	{r7, lr}
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0002 86B0     		sub	sp, sp, #24
 784              		.cfi_def_cfa_offset 32
 785 0004 00AF     		add	r7, sp, #0
 786              		.cfi_def_cfa_register 7
 787 0006 021C     		mov	r2, r0
 788 0008 BB1D     		add	r3, r7, #6
 789 000a 1A80     		strh	r2, [r3]
  82:.\main.c      **** 	uint8 	CYCLES = 3;
 790              		.loc 2 82 0
 791 000c 3B1C     		mov	r3, r7
 792 000e 1133     		add	r3, r3, #17
 793 0010 0322     		mov	r2, #3
 794 0012 1A70     		strb	r2, [r3]
  83:.\main.c      **** 	uint8 	i;
  84:.\main.c      **** 	uint16 	bound;
  85:.\main.c      **** 	uint16 	average;
  86:.\main.c      ****     uint32  channel;
  87:.\main.c      ****     int16 difference;
  88:.\main.c      ****  
  89:.\main.c      ****     //LED_Write(0);
  90:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 795              		.loc 2 90 0
 796 0014 3B1C     		mov	r3, r7
 797 0016 1733     		add	r3, r3, #23
 798 0018 0022     		mov	r2, #0
 799 001a 1A70     		strb	r2, [r3]
 800 001c 3B1C     		mov	r3, r7
 801 001e 1233     		add	r3, r3, #18
 802 0020 0022     		mov	r2, #0
 803 0022 1A80     		strh	r2, [r3]
 804 0024 6AE0     		b	.L24
 805              	.L32:
  91:.\main.c      **** 	{
  92:.\main.c      **** 		// Move till stop switch presses down
  93:.\main.c      ****         if(velocity < NEUTRAL)
 806              		.loc 2 93 0
 807 0026 564B     		ldr	r3, .L37
 808 0028 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 18


 809 002a BA1D     		add	r2, r7, #6
 810 002c 1288     		ldrh	r2, [r2]
 811 002e 9A42     		cmp	r2, r3
 812 0030 0BD2     		bcs	.L25
  94:.\main.c      ****         {
  95:.\main.c      ****             while(stop_shdr_dn_Read())
 813              		.loc 2 95 0
 814 0032 04E0     		b	.L26
 815              	.L27:
  96:.\main.c      ****             {
  97:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 816              		.loc 2 97 0
 817 0034 BB1D     		add	r3, r7, #6
 818 0036 1B88     		ldrh	r3, [r3]
 819 0038 181C     		mov	r0, r3
 820 003a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 821              	.L26:
  95:.\main.c      ****             while(stop_shdr_dn_Read())
 822              		.loc 2 95 0 discriminator 1
 823 003e FFF7FEFF 		bl	stop_shdr_dn_Read
 824 0042 031C     		mov	r3, r0
 825 0044 002B     		cmp	r3, #0
 826 0046 F5D1     		bne	.L27
 827 0048 16E0     		b	.L28
 828              	.L25:
  98:.\main.c      ****             }
  99:.\main.c      ****         }
 100:.\main.c      ****         else if(velocity > NEUTRAL)
 829              		.loc 2 100 0
 830 004a 4D4B     		ldr	r3, .L37
 831 004c 1B88     		ldrh	r3, [r3]
 832 004e BA1D     		add	r2, r7, #6
 833 0050 1288     		ldrh	r2, [r2]
 834 0052 9A42     		cmp	r2, r3
 835 0054 0BD9     		bls	.L29
 101:.\main.c      ****         {
 102:.\main.c      ****             while(stop_shdr_up_Read())
 836              		.loc 2 102 0
 837 0056 04E0     		b	.L30
 838              	.L31:
 103:.\main.c      ****             {
 104:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 839              		.loc 2 104 0
 840 0058 BB1D     		add	r3, r7, #6
 841 005a 1B88     		ldrh	r3, [r3]
 842 005c 181C     		mov	r0, r3
 843 005e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 844              	.L30:
 102:.\main.c      ****             while(stop_shdr_up_Read())
 845              		.loc 2 102 0 discriminator 1
 846 0062 FFF7FEFF 		bl	stop_shdr_up_Read
 847 0066 031C     		mov	r3, r0
 848 0068 002B     		cmp	r3, #0
 849 006a F5D1     		bne	.L31
 850 006c 04E0     		b	.L28
 851              	.L29:
 105:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 19


 106:.\main.c      ****         }
 107:.\main.c      ****         else
 108:.\main.c      ****         {
 109:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 852              		.loc 2 109 0
 853 006e BB1D     		add	r3, r7, #6
 854 0070 1B88     		ldrh	r3, [r3]
 855 0072 181C     		mov	r0, r3
 856 0074 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 857              	.L28:
 110:.\main.c      ****         }
 111:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 858              		.loc 2 111 0
 859 0078 414B     		ldr	r3, .L37
 860 007a 1B88     		ldrh	r3, [r3]
 861 007c 181C     		mov	r0, r3
 862 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 112:.\main.c      ****          
 113:.\main.c      ****         CyDelay(1000);
 863              		.loc 2 113 0
 864 0082 FA23     		mov	r3, #250
 865 0084 9B00     		lsl	r3, r3, #2
 866 0086 181C     		mov	r0, r3
 867 0088 FFF7FEFF 		bl	CyDelay
 114:.\main.c      ****         
 115:.\main.c      ****         channel = SHOULDER_POT;
 868              		.loc 2 115 0
 869 008c 0023     		mov	r3, #0
 870 008e FB60     		str	r3, [r7, #12]
 116:.\main.c      ****  
 117:.\main.c      **** 		// Add the value to average
 118:.\main.c      ****         average+=potFeedback(channel);
 871              		.loc 2 118 0
 872 0090 FB68     		ldr	r3, [r7, #12]
 873 0092 181C     		mov	r0, r3
 874 0094 FFF7FEFF 		bl	potFeedback
 875 0098 031C     		mov	r3, r0
 876 009a 191C     		mov	r1, r3
 877 009c 3B1C     		mov	r3, r7
 878 009e 1233     		add	r3, r3, #18
 879 00a0 3A1C     		mov	r2, r7
 880 00a2 1232     		add	r2, r2, #18
 881 00a4 1288     		ldrh	r2, [r2]
 882 00a6 8A18     		add	r2, r1, r2
 883 00a8 1A80     		strh	r2, [r3]
 119:.\main.c      ****  
 120:.\main.c      **** 		// Move away for 2 seconds
 121:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 122:.\main.c      ****         difference = NEUTRAL-velocity;
 884              		.loc 2 122 0
 885 00aa 354B     		ldr	r3, .L37
 886 00ac 1A88     		ldrh	r2, [r3]
 887 00ae BB1D     		add	r3, r7, #6
 888 00b0 1B88     		ldrh	r3, [r3]
 889 00b2 D31A     		sub	r3, r2, r3
 890 00b4 9AB2     		uxth	r2, r3
 891 00b6 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 20


 892 00b8 0A33     		add	r3, r3, #10
 893 00ba 1A80     		strh	r2, [r3]
 123:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(NEUTRAL + difference));
 894              		.loc 2 123 0
 895 00bc 304B     		ldr	r3, .L37
 896 00be 1A88     		ldrh	r2, [r3]
 897 00c0 3B1C     		mov	r3, r7
 898 00c2 0A33     		add	r3, r3, #10
 899 00c4 1B88     		ldrh	r3, [r3]
 900 00c6 D318     		add	r3, r2, r3
 901 00c8 9BB2     		uxth	r3, r3
 902 00ca 181C     		mov	r0, r3
 903 00cc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 124:.\main.c      ****          
 125:.\main.c      ****         CyDelay(1000);
 904              		.loc 2 125 0
 905 00d0 FA23     		mov	r3, #250
 906 00d2 9B00     		lsl	r3, r3, #2
 907 00d4 181C     		mov	r0, r3
 908 00d6 FFF7FEFF 		bl	CyDelay
 126:.\main.c      ****  
 127:.\main.c      **** 		// Stop moving
 128:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 909              		.loc 2 128 0
 910 00da 294B     		ldr	r3, .L37
 911 00dc 1B88     		ldrh	r3, [r3]
 912 00de 181C     		mov	r0, r3
 913 00e0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 129:.\main.c      ****          
 130:.\main.c      ****         CyDelay(1000);
 914              		.loc 2 130 0
 915 00e4 FA23     		mov	r3, #250
 916 00e6 9B00     		lsl	r3, r3, #2
 917 00e8 181C     		mov	r0, r3
 918 00ea FFF7FEFF 		bl	CyDelay
  90:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 919              		.loc 2 90 0
 920 00ee 3B1C     		mov	r3, r7
 921 00f0 1733     		add	r3, r3, #23
 922 00f2 1A78     		ldrb	r2, [r3]
 923 00f4 3B1C     		mov	r3, r7
 924 00f6 1733     		add	r3, r3, #23
 925 00f8 0132     		add	r2, r2, #1
 926 00fa 1A70     		strb	r2, [r3]
 927              	.L24:
  90:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 928              		.loc 2 90 0 is_stmt 0 discriminator 1
 929 00fc 3A1C     		mov	r2, r7
 930 00fe 1732     		add	r2, r2, #23
 931 0100 3B1C     		mov	r3, r7
 932 0102 1133     		add	r3, r3, #17
 933 0104 1278     		ldrb	r2, [r2]
 934 0106 1B78     		ldrb	r3, [r3]
 935 0108 9A42     		cmp	r2, r3
 936 010a 00D2     		bcs	.LCB687
 937 010c 8BE7     		b	.L32	@long jump
 938              	.LCB687:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 21


 131:.\main.c      **** 	}
 132:.\main.c      ****  
 133:.\main.c      **** 	if(velocity > NEUTRAL)
 939              		.loc 2 133 0 is_stmt 1
 940 010e 1C4B     		ldr	r3, .L37
 941 0110 1B88     		ldrh	r3, [r3]
 942 0112 BA1D     		add	r2, r7, #6
 943 0114 1288     		ldrh	r2, [r2]
 944 0116 9A42     		cmp	r2, r3
 945 0118 10D9     		bls	.L33
 134:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 946              		.loc 2 134 0
 947 011a 3B1C     		mov	r3, r7
 948 011c 1233     		add	r3, r3, #18
 949 011e 1A88     		ldrh	r2, [r3]
 950 0120 3B1C     		mov	r3, r7
 951 0122 1133     		add	r3, r3, #17
 952 0124 1B78     		ldrb	r3, [r3]
 953 0126 101C     		mov	r0, r2
 954 0128 191C     		mov	r1, r3
 955 012a FFF7FEFF 		bl	__aeabi_idiv
 956 012e 031C     		mov	r3, r0
 957 0130 9AB2     		uxth	r2, r3
 958 0132 3B1C     		mov	r3, r7
 959 0134 1433     		add	r3, r3, #20
 960 0136 143A     		sub	r2, r2, #20
 961 0138 1A80     		strh	r2, [r3]
 962 013a 19E0     		b	.L34
 963              	.L33:
 135:.\main.c      ****     else if(velocity < NEUTRAL)
 964              		.loc 2 135 0
 965 013c 104B     		ldr	r3, .L37
 966 013e 1B88     		ldrh	r3, [r3]
 967 0140 BA1D     		add	r2, r7, #6
 968 0142 1288     		ldrh	r2, [r2]
 969 0144 9A42     		cmp	r2, r3
 970 0146 10D2     		bcs	.L35
 136:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 971              		.loc 2 136 0
 972 0148 3B1C     		mov	r3, r7
 973 014a 1233     		add	r3, r3, #18
 974 014c 1A88     		ldrh	r2, [r3]
 975 014e 3B1C     		mov	r3, r7
 976 0150 1133     		add	r3, r3, #17
 977 0152 1B78     		ldrb	r3, [r3]
 978 0154 101C     		mov	r0, r2
 979 0156 191C     		mov	r1, r3
 980 0158 FFF7FEFF 		bl	__aeabi_idiv
 981 015c 031C     		mov	r3, r0
 982 015e 9AB2     		uxth	r2, r3
 983 0160 3B1C     		mov	r3, r7
 984 0162 1433     		add	r3, r3, #20
 985 0164 1432     		add	r2, r2, #20
 986 0166 1A80     		strh	r2, [r3]
 987 0168 02E0     		b	.L34
 988              	.L35:
 137:.\main.c      ****     else // velocity == NEUTRAL
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 22


 138:.\main.c      ****         LED_Write(0); 
 989              		.loc 2 138 0
 990 016a 0020     		mov	r0, #0
 991 016c FFF7FEFF 		bl	LED_Write
 992              	.L34:
 139:.\main.c      ****  
 140:.\main.c      **** 	return bound;
 993              		.loc 2 140 0
 994 0170 3B1C     		mov	r3, r7
 995 0172 1433     		add	r3, r3, #20
 996 0174 1B88     		ldrh	r3, [r3]
 141:.\main.c      **** }
 997              		.loc 2 141 0
 998 0176 181C     		mov	r0, r3
 999 0178 BD46     		mov	sp, r7
 1000 017a 06B0     		add	sp, sp, #24
 1001              		@ sp needed
 1002 017c 80BD     		pop	{r7, pc}
 1003              	.L38:
 1004 017e C046     		.align	2
 1005              	.L37:
 1006 0180 00000000 		.word	NEUTRAL
 1007              		.cfi_endproc
 1008              	.LFE39:
 1009              		.size	CalibrationShoulder, .-CalibrationShoulder
 1010              		.global	__aeabi_uidiv
 1011              		.section	.text.average,"ax",%progbits
 1012              		.align	2
 1013              		.global	average
 1014              		.code	16
 1015              		.thumb_func
 1016              		.type	average, %function
 1017              	average:
 1018              	.LFB40:
 142:.\main.c      **** 
 143:.\main.c      **** //Average function to be used in smoothing our input
 144:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 145:.\main.c      **** {
 1019              		.loc 2 145 0
 1020              		.cfi_startproc
 1021 0000 80B5     		push	{r7, lr}
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 86B0     		sub	sp, sp, #24
 1026              		.cfi_def_cfa_offset 32
 1027 0004 00AF     		add	r7, sp, #0
 1028              		.cfi_def_cfa_register 7
 1029 0006 7860     		str	r0, [r7, #4]
 1030 0008 0A1C     		mov	r2, r1
 1031 000a FB1C     		add	r3, r7, #3
 1032 000c 1A70     		strb	r2, [r3]
 146:.\main.c      ****     uint8 i;
 147:.\main.c      ****     uint32 sum = 0;
 1033              		.loc 2 147 0
 1034 000e 0023     		mov	r3, #0
 1035 0010 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 23


 148:.\main.c      ****     uint16 avg = 0;
 1036              		.loc 2 148 0
 1037 0012 3B1C     		mov	r3, r7
 1038 0014 0E33     		add	r3, r3, #14
 1039 0016 0022     		mov	r2, #0
 1040 0018 1A80     		strh	r2, [r3]
 149:.\main.c      ****     
 150:.\main.c      ****     for(i = 0; i < num_items; i++)
 1041              		.loc 2 150 0
 1042 001a 3B1C     		mov	r3, r7
 1043 001c 1733     		add	r3, r3, #23
 1044 001e 0022     		mov	r2, #0
 1045 0020 1A70     		strb	r2, [r3]
 1046 0022 10E0     		b	.L40
 1047              	.L41:
 151:.\main.c      ****     {
 152:.\main.c      ****         sum += av_array[i];
 1048              		.loc 2 152 0 discriminator 2
 1049 0024 3B1C     		mov	r3, r7
 1050 0026 1733     		add	r3, r3, #23
 1051 0028 1B78     		ldrb	r3, [r3]
 1052 002a 5B00     		lsl	r3, r3, #1
 1053 002c 7A68     		ldr	r2, [r7, #4]
 1054 002e D318     		add	r3, r2, r3
 1055 0030 1B88     		ldrh	r3, [r3]
 1056 0032 3A69     		ldr	r2, [r7, #16]
 1057 0034 D318     		add	r3, r2, r3
 1058 0036 3B61     		str	r3, [r7, #16]
 150:.\main.c      ****     for(i = 0; i < num_items; i++)
 1059              		.loc 2 150 0 discriminator 2
 1060 0038 3B1C     		mov	r3, r7
 1061 003a 1733     		add	r3, r3, #23
 1062 003c 1A78     		ldrb	r2, [r3]
 1063 003e 3B1C     		mov	r3, r7
 1064 0040 1733     		add	r3, r3, #23
 1065 0042 0132     		add	r2, r2, #1
 1066 0044 1A70     		strb	r2, [r3]
 1067              	.L40:
 150:.\main.c      ****     for(i = 0; i < num_items; i++)
 1068              		.loc 2 150 0 is_stmt 0 discriminator 1
 1069 0046 3A1C     		mov	r2, r7
 1070 0048 1732     		add	r2, r2, #23
 1071 004a FB1C     		add	r3, r7, #3
 1072 004c 1278     		ldrb	r2, [r2]
 1073 004e 1B78     		ldrb	r3, [r3]
 1074 0050 9A42     		cmp	r2, r3
 1075 0052 E7D3     		bcc	.L41
 153:.\main.c      ****     }
 154:.\main.c      ****     
 155:.\main.c      ****     avg = sum/num_items;
 1076              		.loc 2 155 0 is_stmt 1
 1077 0054 FB1C     		add	r3, r7, #3
 1078 0056 1B78     		ldrb	r3, [r3]
 1079 0058 3869     		ldr	r0, [r7, #16]
 1080 005a 191C     		mov	r1, r3
 1081 005c FFF7FEFF 		bl	__aeabi_uidiv
 1082 0060 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 24


 1083 0062 1A1C     		mov	r2, r3
 1084 0064 3B1C     		mov	r3, r7
 1085 0066 0E33     		add	r3, r3, #14
 1086 0068 1A80     		strh	r2, [r3]
 156:.\main.c      ****     
 157:.\main.c      ****     return avg;
 1087              		.loc 2 157 0
 1088 006a 3B1C     		mov	r3, r7
 1089 006c 0E33     		add	r3, r3, #14
 1090 006e 1B88     		ldrh	r3, [r3]
 158:.\main.c      **** }
 1091              		.loc 2 158 0
 1092 0070 181C     		mov	r0, r3
 1093 0072 BD46     		mov	sp, r7
 1094 0074 06B0     		add	sp, sp, #24
 1095              		@ sp needed
 1096 0076 80BD     		pop	{r7, pc}
 1097              		.cfi_endproc
 1098              	.LFE40:
 1099              		.size	average, .-average
 1100              		.section	.text.maintain_array,"ax",%progbits
 1101              		.align	2
 1102              		.global	maintain_array
 1103              		.code	16
 1104              		.thumb_func
 1105              		.type	maintain_array, %function
 1106              	maintain_array:
 1107              	.LFB41:
 159:.\main.c      **** 
 160:.\main.c      **** void maintain_array(uint8* cpos, uint8 SIZE)
 161:.\main.c      **** {
 1108              		.loc 2 161 0
 1109              		.cfi_startproc
 1110 0000 80B5     		push	{r7, lr}
 1111              		.cfi_def_cfa_offset 8
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114 0002 82B0     		sub	sp, sp, #8
 1115              		.cfi_def_cfa_offset 16
 1116 0004 00AF     		add	r7, sp, #0
 1117              		.cfi_def_cfa_register 7
 1118 0006 7860     		str	r0, [r7, #4]
 1119 0008 0A1C     		mov	r2, r1
 1120 000a FB1C     		add	r3, r7, #3
 1121 000c 1A70     		strb	r2, [r3]
 162:.\main.c      ****     if(*cpos < (SIZE - 1))
 1122              		.loc 2 162 0
 1123 000e 7B68     		ldr	r3, [r7, #4]
 1124 0010 1B78     		ldrb	r3, [r3]
 1125 0012 1A1C     		mov	r2, r3
 1126 0014 FB1C     		add	r3, r7, #3
 1127 0016 1B78     		ldrb	r3, [r3]
 1128 0018 013B     		sub	r3, r3, #1
 1129 001a 9A42     		cmp	r2, r3
 1130 001c 06DA     		bge	.L44
 163:.\main.c      ****     {
 164:.\main.c      ****         *cpos+=1;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 25


 1131              		.loc 2 164 0
 1132 001e 7B68     		ldr	r3, [r7, #4]
 1133 0020 1B78     		ldrb	r3, [r3]
 1134 0022 0133     		add	r3, r3, #1
 1135 0024 DAB2     		uxtb	r2, r3
 1136 0026 7B68     		ldr	r3, [r7, #4]
 1137 0028 1A70     		strb	r2, [r3]
 1138 002a 02E0     		b	.L43
 1139              	.L44:
 165:.\main.c      ****     }
 166:.\main.c      ****     else
 167:.\main.c      ****     {
 168:.\main.c      ****         *cpos = 0;
 1140              		.loc 2 168 0
 1141 002c 7B68     		ldr	r3, [r7, #4]
 1142 002e 0022     		mov	r2, #0
 1143 0030 1A70     		strb	r2, [r3]
 1144              	.L43:
 169:.\main.c      ****     }
 170:.\main.c      ****     //return *cpos;
 171:.\main.c      **** }
 1145              		.loc 2 171 0
 1146 0032 BD46     		mov	sp, r7
 1147 0034 02B0     		add	sp, sp, #8
 1148              		@ sp needed
 1149 0036 80BD     		pop	{r7, pc}
 1150              		.cfi_endproc
 1151              	.LFE41:
 1152              		.size	maintain_array, .-maintain_array
 1153              		.section	.text.check_update,"ax",%progbits
 1154              		.align	2
 1155              		.global	check_update
 1156              		.code	16
 1157              		.thumb_func
 1158              		.type	check_update, %function
 1159              	check_update:
 1160              	.LFB42:
 172:.\main.c      **** 
 173:.\main.c      **** void check_update(uint16* array, uint8* arr_pos, uint8 size, int change)
 174:.\main.c      **** {
 1161              		.loc 2 174 0
 1162              		.cfi_startproc
 1163 0000 80B5     		push	{r7, lr}
 1164              		.cfi_def_cfa_offset 8
 1165              		.cfi_offset 7, -8
 1166              		.cfi_offset 14, -4
 1167 0002 86B0     		sub	sp, sp, #24
 1168              		.cfi_def_cfa_offset 32
 1169 0004 00AF     		add	r7, sp, #0
 1170              		.cfi_def_cfa_register 7
 1171 0006 F860     		str	r0, [r7, #12]
 1172 0008 B960     		str	r1, [r7, #8]
 1173 000a 3B60     		str	r3, [r7]
 1174 000c FB1D     		add	r3, r7, #7
 1175 000e 1A70     		strb	r2, [r3]
 175:.\main.c      ****     uint8 index;
 176:.\main.c      ****     if(*arr_pos != 0)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 26


 1176              		.loc 2 176 0
 1177 0010 BB68     		ldr	r3, [r7, #8]
 1178 0012 1B78     		ldrb	r3, [r3]
 1179 0014 002B     		cmp	r3, #0
 1180 0016 06D0     		beq	.L47
 177:.\main.c      ****     {
 178:.\main.c      ****         index = *arr_pos - 1;
 1181              		.loc 2 178 0
 1182 0018 BB68     		ldr	r3, [r7, #8]
 1183 001a 1A78     		ldrb	r2, [r3]
 1184 001c 3B1C     		mov	r3, r7
 1185 001e 1733     		add	r3, r3, #23
 1186 0020 013A     		sub	r2, r2, #1
 1187 0022 1A70     		strb	r2, [r3]
 1188 0024 05E0     		b	.L48
 1189              	.L47:
 179:.\main.c      ****     }
 180:.\main.c      ****     else
 181:.\main.c      ****     {
 182:.\main.c      ****         index = size - 1;
 1190              		.loc 2 182 0
 1191 0026 3B1C     		mov	r3, r7
 1192 0028 1733     		add	r3, r3, #23
 1193 002a FA1D     		add	r2, r7, #7
 1194 002c 1278     		ldrb	r2, [r2]
 1195 002e 013A     		sub	r2, r2, #1
 1196 0030 1A70     		strb	r2, [r3]
 1197              	.L48:
 183:.\main.c      ****     }
 184:.\main.c      ****     
 185:.\main.c      ****     if(change < 0)
 1198              		.loc 2 185 0
 1199 0032 3B68     		ldr	r3, [r7]
 1200 0034 002B     		cmp	r3, #0
 1201 0036 28DA     		bge	.L49
 186:.\main.c      ****     {
 187:.\main.c      ****         if(array[index] >= (1000 - change))
 1202              		.loc 2 187 0
 1203 0038 3B1C     		mov	r3, r7
 1204 003a 1733     		add	r3, r3, #23
 1205 003c 1B78     		ldrb	r3, [r3]
 1206 003e 5B00     		lsl	r3, r3, #1
 1207 0040 FA68     		ldr	r2, [r7, #12]
 1208 0042 D318     		add	r3, r2, r3
 1209 0044 1B88     		ldrh	r3, [r3]
 1210 0046 1A1C     		mov	r2, r3
 1211 0048 3B68     		ldr	r3, [r7]
 1212 004a FA21     		mov	r1, #250
 1213 004c 8900     		lsl	r1, r1, #2
 1214 004e CB1A     		sub	r3, r1, r3
 1215 0050 9A42     		cmp	r2, r3
 1216 0052 11DB     		blt	.L50
 188:.\main.c      ****         {
 189:.\main.c      ****             array[*arr_pos] = (array[index] + change);
 1217              		.loc 2 189 0
 1218 0054 BB68     		ldr	r3, [r7, #8]
 1219 0056 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 27


 1220 0058 5B00     		lsl	r3, r3, #1
 1221 005a FA68     		ldr	r2, [r7, #12]
 1222 005c D318     		add	r3, r2, r3
 1223 005e 3A1C     		mov	r2, r7
 1224 0060 1732     		add	r2, r2, #23
 1225 0062 1278     		ldrb	r2, [r2]
 1226 0064 5200     		lsl	r2, r2, #1
 1227 0066 F968     		ldr	r1, [r7, #12]
 1228 0068 8A18     		add	r2, r1, r2
 1229 006a 1188     		ldrh	r1, [r2]
 1230 006c 3A68     		ldr	r2, [r7]
 1231 006e 92B2     		uxth	r2, r2
 1232 0070 8A18     		add	r2, r1, r2
 1233 0072 92B2     		uxth	r2, r2
 1234 0074 1A80     		strh	r2, [r3]
 1235 0076 30E0     		b	.L52
 1236              	.L50:
 190:.\main.c      ****         }
 191:.\main.c      ****         else
 192:.\main.c      ****         {
 193:.\main.c      ****             array[*arr_pos] = 1000;
 1237              		.loc 2 193 0
 1238 0078 BB68     		ldr	r3, [r7, #8]
 1239 007a 1B78     		ldrb	r3, [r3]
 1240 007c 5B00     		lsl	r3, r3, #1
 1241 007e FA68     		ldr	r2, [r7, #12]
 1242 0080 D318     		add	r3, r2, r3
 1243 0082 FA22     		mov	r2, #250
 1244 0084 9200     		lsl	r2, r2, #2
 1245 0086 1A80     		strh	r2, [r3]
 1246 0088 27E0     		b	.L52
 1247              	.L49:
 194:.\main.c      ****         }
 195:.\main.c      ****     }
 196:.\main.c      ****     else
 197:.\main.c      ****     {
 198:.\main.c      ****         if(array[index] <= (2000 - change))
 1248              		.loc 2 198 0
 1249 008a 3B1C     		mov	r3, r7
 1250 008c 1733     		add	r3, r3, #23
 1251 008e 1B78     		ldrb	r3, [r3]
 1252 0090 5B00     		lsl	r3, r3, #1
 1253 0092 FA68     		ldr	r2, [r7, #12]
 1254 0094 D318     		add	r3, r2, r3
 1255 0096 1B88     		ldrh	r3, [r3]
 1256 0098 1A1C     		mov	r2, r3
 1257 009a 3B68     		ldr	r3, [r7]
 1258 009c FA21     		mov	r1, #250
 1259 009e C900     		lsl	r1, r1, #3
 1260 00a0 CB1A     		sub	r3, r1, r3
 1261 00a2 9A42     		cmp	r2, r3
 1262 00a4 11DC     		bgt	.L53
 199:.\main.c      ****         {
 200:.\main.c      ****             array[*arr_pos] = (array[index] + change);
 1263              		.loc 2 200 0
 1264 00a6 BB68     		ldr	r3, [r7, #8]
 1265 00a8 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 28


 1266 00aa 5B00     		lsl	r3, r3, #1
 1267 00ac FA68     		ldr	r2, [r7, #12]
 1268 00ae D318     		add	r3, r2, r3
 1269 00b0 3A1C     		mov	r2, r7
 1270 00b2 1732     		add	r2, r2, #23
 1271 00b4 1278     		ldrb	r2, [r2]
 1272 00b6 5200     		lsl	r2, r2, #1
 1273 00b8 F968     		ldr	r1, [r7, #12]
 1274 00ba 8A18     		add	r2, r1, r2
 1275 00bc 1188     		ldrh	r1, [r2]
 1276 00be 3A68     		ldr	r2, [r7]
 1277 00c0 92B2     		uxth	r2, r2
 1278 00c2 8A18     		add	r2, r1, r2
 1279 00c4 92B2     		uxth	r2, r2
 1280 00c6 1A80     		strh	r2, [r3]
 1281 00c8 07E0     		b	.L52
 1282              	.L53:
 201:.\main.c      ****         }
 202:.\main.c      ****         else
 203:.\main.c      ****         {
 204:.\main.c      ****             array[*arr_pos] = 2000;
 1283              		.loc 2 204 0
 1284 00ca BB68     		ldr	r3, [r7, #8]
 1285 00cc 1B78     		ldrb	r3, [r3]
 1286 00ce 5B00     		lsl	r3, r3, #1
 1287 00d0 FA68     		ldr	r2, [r7, #12]
 1288 00d2 D318     		add	r3, r2, r3
 1289 00d4 FA22     		mov	r2, #250
 1290 00d6 D200     		lsl	r2, r2, #3
 1291 00d8 1A80     		strh	r2, [r3]
 1292              	.L52:
 205:.\main.c      ****         }
 206:.\main.c      ****     }
 207:.\main.c      ****     maintain_array(arr_pos, size);
 1293              		.loc 2 207 0
 1294 00da BA68     		ldr	r2, [r7, #8]
 1295 00dc FB1D     		add	r3, r7, #7
 1296 00de 1B78     		ldrb	r3, [r3]
 1297 00e0 101C     		mov	r0, r2
 1298 00e2 191C     		mov	r1, r3
 1299 00e4 FFF7FEFF 		bl	maintain_array
 208:.\main.c      **** }
 1300              		.loc 2 208 0
 1301 00e8 BD46     		mov	sp, r7
 1302 00ea 06B0     		add	sp, sp, #24
 1303              		@ sp needed
 1304 00ec 80BD     		pop	{r7, pc}
 1305              		.cfi_endproc
 1306              	.LFE42:
 1307              		.size	check_update, .-check_update
 1308 00ee C046     		.section	.text.pos_to_vel,"ax",%progbits
 1309              		.align	2
 1310              		.global	pos_to_vel
 1311              		.code	16
 1312              		.thumb_func
 1313              		.type	pos_to_vel, %function
 1314              	pos_to_vel:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 29


 1315              	.LFB43:
 209:.\main.c      **** 
 210:.\main.c      **** void pos_to_vel(uint8* cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 211:.\main.c      **** {
 1316              		.loc 2 211 0
 1317              		.cfi_startproc
 1318 0000 80B5     		push	{r7, lr}
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 84B0     		sub	sp, sp, #16
 1323              		.cfi_def_cfa_offset 24
 1324 0004 00AF     		add	r7, sp, #0
 1325              		.cfi_def_cfa_register 7
 1326 0006 F860     		str	r0, [r7, #12]
 1327 0008 B960     		str	r1, [r7, #8]
 1328 000a 111C     		mov	r1, r2
 1329 000c 1A1C     		mov	r2, r3
 1330 000e FB1D     		add	r3, r7, #7
 1331 0010 1970     		strb	r1, [r3]
 1332 0012 3B1D     		add	r3, r7, #4
 1333 0014 1A80     		strh	r2, [r3]
 212:.\main.c      ****     if(command >= 1000 && command < 1125)
 1334              		.loc 2 212 0
 1335 0016 3B1D     		add	r3, r7, #4
 1336 0018 1A88     		ldrh	r2, [r3]
 1337 001a 5D4B     		ldr	r3, .L65
 1338 001c 9A42     		cmp	r2, r3
 1339 001e 0DD9     		bls	.L55
 1340              		.loc 2 212 0 is_stmt 0 discriminator 1
 1341 0020 3B1D     		add	r3, r7, #4
 1342 0022 1A88     		ldrh	r2, [r3]
 1343 0024 5B4B     		ldr	r3, .L65+4
 1344 0026 9A42     		cmp	r2, r3
 1345 0028 08D8     		bhi	.L55
 213:.\main.c      ****     {
 214:.\main.c      ****          check_update(array, cur_pos, ARRAY_SIZE, -8);
 1346              		.loc 2 214 0 is_stmt 1
 1347 002a B868     		ldr	r0, [r7, #8]
 1348 002c F968     		ldr	r1, [r7, #12]
 1349 002e FB1D     		add	r3, r7, #7
 1350 0030 1A78     		ldrb	r2, [r3]
 1351 0032 0823     		mov	r3, #8
 1352 0034 5B42     		neg	r3, r3
 1353 0036 FFF7FEFF 		bl	check_update
 1354 003a A6E0     		b	.L54
 1355              	.L55:
 215:.\main.c      ****     }
 216:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1356              		.loc 2 216 0
 1357 003c 3B1D     		add	r3, r7, #4
 1358 003e 1A88     		ldrh	r2, [r3]
 1359 0040 544B     		ldr	r3, .L65+4
 1360 0042 9A42     		cmp	r2, r3
 1361 0044 0DD9     		bls	.L57
 1362              		.loc 2 216 0 is_stmt 0 discriminator 1
 1363 0046 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 30


 1364 0048 1A88     		ldrh	r2, [r3]
 1365 004a 534B     		ldr	r3, .L65+8
 1366 004c 9A42     		cmp	r2, r3
 1367 004e 08D8     		bhi	.L57
 217:.\main.c      ****     {
 218:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, -4);  
 1368              		.loc 2 218 0 is_stmt 1
 1369 0050 B868     		ldr	r0, [r7, #8]
 1370 0052 F968     		ldr	r1, [r7, #12]
 1371 0054 FB1D     		add	r3, r7, #7
 1372 0056 1A78     		ldrb	r2, [r3]
 1373 0058 0423     		mov	r3, #4
 1374 005a 5B42     		neg	r3, r3
 1375 005c FFF7FEFF 		bl	check_update
 1376 0060 93E0     		b	.L54
 1377              	.L57:
 219:.\main.c      ****     }
 220:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1378              		.loc 2 220 0
 1379 0062 3B1D     		add	r3, r7, #4
 1380 0064 1A88     		ldrh	r2, [r3]
 1381 0066 4C4B     		ldr	r3, .L65+8
 1382 0068 9A42     		cmp	r2, r3
 1383 006a 0DD9     		bls	.L58
 1384              		.loc 2 220 0 is_stmt 0 discriminator 1
 1385 006c 3B1D     		add	r3, r7, #4
 1386 006e 1A88     		ldrh	r2, [r3]
 1387 0070 4A4B     		ldr	r3, .L65+12
 1388 0072 9A42     		cmp	r2, r3
 1389 0074 08D8     		bhi	.L58
 221:.\main.c      ****     {
 222:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, -2);
 1390              		.loc 2 222 0 is_stmt 1
 1391 0076 B868     		ldr	r0, [r7, #8]
 1392 0078 F968     		ldr	r1, [r7, #12]
 1393 007a FB1D     		add	r3, r7, #7
 1394 007c 1A78     		ldrb	r2, [r3]
 1395 007e 0223     		mov	r3, #2
 1396 0080 5B42     		neg	r3, r3
 1397 0082 FFF7FEFF 		bl	check_update
 1398 0086 80E0     		b	.L54
 1399              	.L58:
 223:.\main.c      ****     }
 224:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1400              		.loc 2 224 0
 1401 0088 3B1D     		add	r3, r7, #4
 1402 008a 1A88     		ldrh	r2, [r3]
 1403 008c 434B     		ldr	r3, .L65+12
 1404 008e 9A42     		cmp	r2, r3
 1405 0090 0DD9     		bls	.L59
 1406              		.loc 2 224 0 is_stmt 0 discriminator 1
 1407 0092 3B1D     		add	r3, r7, #4
 1408 0094 1A88     		ldrh	r2, [r3]
 1409 0096 424B     		ldr	r3, .L65+16
 1410 0098 9A42     		cmp	r2, r3
 1411 009a 08D8     		bhi	.L59
 225:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 31


 226:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, -1);
 1412              		.loc 2 226 0 is_stmt 1
 1413 009c B868     		ldr	r0, [r7, #8]
 1414 009e F968     		ldr	r1, [r7, #12]
 1415 00a0 FB1D     		add	r3, r7, #7
 1416 00a2 1A78     		ldrb	r2, [r3]
 1417 00a4 0123     		mov	r3, #1
 1418 00a6 5B42     		neg	r3, r3
 1419 00a8 FFF7FEFF 		bl	check_update
 1420 00ac 6DE0     		b	.L54
 1421              	.L59:
 227:.\main.c      ****     }
 228:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1422              		.loc 2 228 0
 1423 00ae 3B1D     		add	r3, r7, #4
 1424 00b0 1A88     		ldrh	r2, [r3]
 1425 00b2 3C4B     		ldr	r3, .L65+20
 1426 00b4 9A42     		cmp	r2, r3
 1427 00b6 0CD8     		bhi	.L60
 1428              		.loc 2 228 0 is_stmt 0 discriminator 1
 1429 00b8 3B1D     		add	r3, r7, #4
 1430 00ba 1A88     		ldrh	r2, [r3]
 1431 00bc 384B     		ldr	r3, .L65+16
 1432 00be 9A42     		cmp	r2, r3
 1433 00c0 07D9     		bls	.L60
 229:.\main.c      ****     {
 230:.\main.c      ****         maintain_array(cur_pos, ARRAY_SIZE);
 1434              		.loc 2 230 0 is_stmt 1
 1435 00c2 FA68     		ldr	r2, [r7, #12]
 1436 00c4 FB1D     		add	r3, r7, #7
 1437 00c6 1B78     		ldrb	r3, [r3]
 1438 00c8 101C     		mov	r0, r2
 1439 00ca 191C     		mov	r1, r3
 1440 00cc FFF7FEFF 		bl	maintain_array
 1441 00d0 5BE0     		b	.L54
 1442              	.L60:
 231:.\main.c      ****     }
 232:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1443              		.loc 2 232 0
 1444 00d2 3B1D     		add	r3, r7, #4
 1445 00d4 1A88     		ldrh	r2, [r3]
 1446 00d6 334B     		ldr	r3, .L65+20
 1447 00d8 9A42     		cmp	r2, r3
 1448 00da 0FD9     		bls	.L61
 1449              		.loc 2 232 0 is_stmt 0 discriminator 1
 1450 00dc 3B1D     		add	r3, r7, #4
 1451 00de 1A88     		ldrh	r2, [r3]
 1452 00e0 314B     		ldr	r3, .L65+24
 1453 00e2 9A42     		cmp	r2, r3
 1454 00e4 0AD8     		bhi	.L61
 233:.\main.c      ****     {
 234:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, 1);
 1455              		.loc 2 234 0 is_stmt 1
 1456 00e6 B968     		ldr	r1, [r7, #8]
 1457 00e8 FA68     		ldr	r2, [r7, #12]
 1458 00ea FB1D     		add	r3, r7, #7
 1459 00ec 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 32


 1460 00ee 081C     		mov	r0, r1
 1461 00f0 111C     		mov	r1, r2
 1462 00f2 1A1C     		mov	r2, r3
 1463 00f4 0123     		mov	r3, #1
 1464 00f6 FFF7FEFF 		bl	check_update
 1465 00fa 46E0     		b	.L54
 1466              	.L61:
 235:.\main.c      ****     }
 236:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1467              		.loc 2 236 0
 1468 00fc 3B1D     		add	r3, r7, #4
 1469 00fe 1A88     		ldrh	r2, [r3]
 1470 0100 294B     		ldr	r3, .L65+24
 1471 0102 9A42     		cmp	r2, r3
 1472 0104 0FD9     		bls	.L62
 1473              		.loc 2 236 0 is_stmt 0 discriminator 1
 1474 0106 3B1D     		add	r3, r7, #4
 1475 0108 1A88     		ldrh	r2, [r3]
 1476 010a 284B     		ldr	r3, .L65+28
 1477 010c 9A42     		cmp	r2, r3
 1478 010e 0AD8     		bhi	.L62
 237:.\main.c      ****     {
 238:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, 2);
 1479              		.loc 2 238 0 is_stmt 1
 1480 0110 B968     		ldr	r1, [r7, #8]
 1481 0112 FA68     		ldr	r2, [r7, #12]
 1482 0114 FB1D     		add	r3, r7, #7
 1483 0116 1B78     		ldrb	r3, [r3]
 1484 0118 081C     		mov	r0, r1
 1485 011a 111C     		mov	r1, r2
 1486 011c 1A1C     		mov	r2, r3
 1487 011e 0223     		mov	r3, #2
 1488 0120 FFF7FEFF 		bl	check_update
 1489 0124 31E0     		b	.L54
 1490              	.L62:
 239:.\main.c      ****     }
 240:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1491              		.loc 2 240 0
 1492 0126 3B1D     		add	r3, r7, #4
 1493 0128 1A88     		ldrh	r2, [r3]
 1494 012a 204B     		ldr	r3, .L65+28
 1495 012c 9A42     		cmp	r2, r3
 1496 012e 0FD9     		bls	.L63
 1497              		.loc 2 240 0 is_stmt 0 discriminator 1
 1498 0130 3B1D     		add	r3, r7, #4
 1499 0132 1A88     		ldrh	r2, [r3]
 1500 0134 1E4B     		ldr	r3, .L65+32
 1501 0136 9A42     		cmp	r2, r3
 1502 0138 0AD8     		bhi	.L63
 241:.\main.c      ****     {
 242:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, 4);
 1503              		.loc 2 242 0 is_stmt 1
 1504 013a B968     		ldr	r1, [r7, #8]
 1505 013c FA68     		ldr	r2, [r7, #12]
 1506 013e FB1D     		add	r3, r7, #7
 1507 0140 1B78     		ldrb	r3, [r3]
 1508 0142 081C     		mov	r0, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 33


 1509 0144 111C     		mov	r1, r2
 1510 0146 1A1C     		mov	r2, r3
 1511 0148 0423     		mov	r3, #4
 1512 014a FFF7FEFF 		bl	check_update
 1513 014e 1CE0     		b	.L54
 1514              	.L63:
 243:.\main.c      ****     }
 244:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1515              		.loc 2 244 0
 1516 0150 3B1D     		add	r3, r7, #4
 1517 0152 1A88     		ldrh	r2, [r3]
 1518 0154 164B     		ldr	r3, .L65+32
 1519 0156 9A42     		cmp	r2, r3
 1520 0158 10D9     		bls	.L64
 1521              		.loc 2 244 0 is_stmt 0 discriminator 1
 1522 015a 3B1D     		add	r3, r7, #4
 1523 015c 1A88     		ldrh	r2, [r3]
 1524 015e FA23     		mov	r3, #250
 1525 0160 DB00     		lsl	r3, r3, #3
 1526 0162 9A42     		cmp	r2, r3
 1527 0164 0AD8     		bhi	.L64
 245:.\main.c      ****     {
 246:.\main.c      ****         check_update(array, cur_pos, ARRAY_SIZE, 8);
 1528              		.loc 2 246 0 is_stmt 1
 1529 0166 B968     		ldr	r1, [r7, #8]
 1530 0168 FA68     		ldr	r2, [r7, #12]
 1531 016a FB1D     		add	r3, r7, #7
 1532 016c 1B78     		ldrb	r3, [r3]
 1533 016e 081C     		mov	r0, r1
 1534 0170 111C     		mov	r1, r2
 1535 0172 1A1C     		mov	r2, r3
 1536 0174 0823     		mov	r3, #8
 1537 0176 FFF7FEFF 		bl	check_update
 1538 017a 06E0     		b	.L54
 1539              	.L64:
 247:.\main.c      ****     }
 248:.\main.c      ****     else
 249:.\main.c      ****     {
 250:.\main.c      ****         //increment error variable
 251:.\main.c      ****         maintain_array(cur_pos, ARRAY_SIZE);
 1540              		.loc 2 251 0
 1541 017c FA68     		ldr	r2, [r7, #12]
 1542 017e FB1D     		add	r3, r7, #7
 1543 0180 1B78     		ldrb	r3, [r3]
 1544 0182 101C     		mov	r0, r2
 1545 0184 191C     		mov	r1, r3
 1546 0186 FFF7FEFF 		bl	maintain_array
 1547              	.L54:
 252:.\main.c      ****     }
 253:.\main.c      ****     //return *cur_pos;
 254:.\main.c      ****     //*cur_pos = 
 255:.\main.c      **** }
 1548              		.loc 2 255 0
 1549 018a BD46     		mov	sp, r7
 1550 018c 04B0     		add	sp, sp, #16
 1551              		@ sp needed
 1552 018e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 34


 1553              	.L66:
 1554              		.align	2
 1555              	.L65:
 1556 0190 E7030000 		.word	999
 1557 0194 64040000 		.word	1124
 1558 0198 E1040000 		.word	1249
 1559 019c 5E050000 		.word	1374
 1560 01a0 D1050000 		.word	1489
 1561 01a4 E6050000 		.word	1510
 1562 01a8 59060000 		.word	1625
 1563 01ac D6060000 		.word	1750
 1564 01b0 53070000 		.word	1875
 1565              		.cfi_endproc
 1566              	.LFE43:
 1567              		.size	pos_to_vel, .-pos_to_vel
 1568              		.section	.text.simple_pos_to_vel,"ax",%progbits
 1569              		.align	2
 1570              		.global	simple_pos_to_vel
 1571              		.code	16
 1572              		.thumb_func
 1573              		.type	simple_pos_to_vel, %function
 1574              	simple_pos_to_vel:
 1575              	.LFB44:
 256:.\main.c      **** 
 257:.\main.c      **** 
 258:.\main.c      **** //TODO: set bounds checking
 259:.\main.c      **** uint16 simple_pos_to_vel(uint16 new_command, uint16 recent_command)
 260:.\main.c      **** {
 1576              		.loc 2 260 0
 1577              		.cfi_startproc
 1578 0000 80B5     		push	{r7, lr}
 1579              		.cfi_def_cfa_offset 8
 1580              		.cfi_offset 7, -8
 1581              		.cfi_offset 14, -4
 1582 0002 84B0     		sub	sp, sp, #16
 1583              		.cfi_def_cfa_offset 24
 1584 0004 00AF     		add	r7, sp, #0
 1585              		.cfi_def_cfa_register 7
 1586 0006 0A1C     		mov	r2, r1
 1587 0008 BB1D     		add	r3, r7, #6
 1588 000a 011C     		add	r1, r0, #0
 1589 000c 1980     		strh	r1, [r3]
 1590 000e 3B1D     		add	r3, r7, #4
 1591 0010 1A80     		strh	r2, [r3]
 261:.\main.c      ****     uint16 cur_command;
 262:.\main.c      ****     
 263:.\main.c      ****     if(new_command >= 1000 && new_command < 1250)
 1592              		.loc 2 263 0
 1593 0012 BB1D     		add	r3, r7, #6
 1594 0014 1A88     		ldrh	r2, [r3]
 1595 0016 2F4B     		ldr	r3, .L75
 1596 0018 9A42     		cmp	r2, r3
 1597 001a 0BD9     		bls	.L68
 1598              		.loc 2 263 0 is_stmt 0 discriminator 1
 1599 001c BB1D     		add	r3, r7, #6
 1600 001e 1A88     		ldrh	r2, [r3]
 1601 0020 2D4B     		ldr	r3, .L75+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 35


 1602 0022 9A42     		cmp	r2, r3
 1603 0024 06D8     		bhi	.L68
 264:.\main.c      ****     {
 265:.\main.c      ****         cur_command = recent_command - 2;
 1604              		.loc 2 265 0 is_stmt 1
 1605 0026 3B1C     		mov	r3, r7
 1606 0028 0E33     		add	r3, r3, #14
 1607 002a 3A1D     		add	r2, r7, #4
 1608 002c 1288     		ldrh	r2, [r2]
 1609 002e 023A     		sub	r2, r2, #2
 1610 0030 1A80     		strh	r2, [r3]
 1611 0032 47E0     		b	.L69
 1612              	.L68:
 266:.\main.c      ****     }
 267:.\main.c      ****     else if(new_command >= 1250 && new_command < 1375)
 1613              		.loc 2 267 0
 1614 0034 BB1D     		add	r3, r7, #6
 1615 0036 1A88     		ldrh	r2, [r3]
 1616 0038 274B     		ldr	r3, .L75+4
 1617 003a 9A42     		cmp	r2, r3
 1618 003c 0BD9     		bls	.L70
 1619              		.loc 2 267 0 is_stmt 0 discriminator 1
 1620 003e BB1D     		add	r3, r7, #6
 1621 0040 1A88     		ldrh	r2, [r3]
 1622 0042 264B     		ldr	r3, .L75+8
 1623 0044 9A42     		cmp	r2, r3
 1624 0046 06D8     		bhi	.L70
 268:.\main.c      ****     {
 269:.\main.c      ****         cur_command = recent_command - 1;    
 1625              		.loc 2 269 0 is_stmt 1
 1626 0048 3B1C     		mov	r3, r7
 1627 004a 0E33     		add	r3, r3, #14
 1628 004c 3A1D     		add	r2, r7, #4
 1629 004e 1288     		ldrh	r2, [r2]
 1630 0050 013A     		sub	r2, r2, #1
 1631 0052 1A80     		strh	r2, [r3]
 1632 0054 36E0     		b	.L69
 1633              	.L70:
 270:.\main.c      ****     }
 271:.\main.c      ****     else if(new_command <= 1625 && new_command >= 1375)
 1634              		.loc 2 271 0
 1635 0056 BB1D     		add	r3, r7, #6
 1636 0058 1A88     		ldrh	r2, [r3]
 1637 005a 214B     		ldr	r3, .L75+12
 1638 005c 9A42     		cmp	r2, r3
 1639 005e 0AD8     		bhi	.L71
 1640              		.loc 2 271 0 is_stmt 0 discriminator 1
 1641 0060 BB1D     		add	r3, r7, #6
 1642 0062 1A88     		ldrh	r2, [r3]
 1643 0064 1D4B     		ldr	r3, .L75+8
 1644 0066 9A42     		cmp	r2, r3
 1645 0068 05D9     		bls	.L71
 272:.\main.c      ****     {
 273:.\main.c      ****         cur_command = recent_command;
 1646              		.loc 2 273 0 is_stmt 1
 1647 006a 3B1C     		mov	r3, r7
 1648 006c 0E33     		add	r3, r3, #14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 36


 1649 006e 3A1D     		add	r2, r7, #4
 1650 0070 1288     		ldrh	r2, [r2]
 1651 0072 1A80     		strh	r2, [r3]
 1652 0074 26E0     		b	.L69
 1653              	.L71:
 274:.\main.c      ****     }
 275:.\main.c      ****     else if(new_command > 1625 && new_command <= 1750)
 1654              		.loc 2 275 0
 1655 0076 BB1D     		add	r3, r7, #6
 1656 0078 1A88     		ldrh	r2, [r3]
 1657 007a 194B     		ldr	r3, .L75+12
 1658 007c 9A42     		cmp	r2, r3
 1659 007e 0BD9     		bls	.L72
 1660              		.loc 2 275 0 is_stmt 0 discriminator 1
 1661 0080 BB1D     		add	r3, r7, #6
 1662 0082 1A88     		ldrh	r2, [r3]
 1663 0084 174B     		ldr	r3, .L75+16
 1664 0086 9A42     		cmp	r2, r3
 1665 0088 06D8     		bhi	.L72
 276:.\main.c      ****     {
 277:.\main.c      ****         cur_command = recent_command + 1;
 1666              		.loc 2 277 0 is_stmt 1
 1667 008a 3B1C     		mov	r3, r7
 1668 008c 0E33     		add	r3, r3, #14
 1669 008e 3A1D     		add	r2, r7, #4
 1670 0090 1288     		ldrh	r2, [r2]
 1671 0092 0132     		add	r2, r2, #1
 1672 0094 1A80     		strh	r2, [r3]
 1673 0096 15E0     		b	.L69
 1674              	.L72:
 278:.\main.c      ****     }
 279:.\main.c      ****     else if(new_command > 1750 && new_command <= 2000)
 1675              		.loc 2 279 0
 1676 0098 BB1D     		add	r3, r7, #6
 1677 009a 1A88     		ldrh	r2, [r3]
 1678 009c 114B     		ldr	r3, .L75+16
 1679 009e 9A42     		cmp	r2, r3
 1680 00a0 0CD9     		bls	.L73
 1681              		.loc 2 279 0 is_stmt 0 discriminator 1
 1682 00a2 BB1D     		add	r3, r7, #6
 1683 00a4 1A88     		ldrh	r2, [r3]
 1684 00a6 FA23     		mov	r3, #250
 1685 00a8 DB00     		lsl	r3, r3, #3
 1686 00aa 9A42     		cmp	r2, r3
 1687 00ac 06D8     		bhi	.L73
 280:.\main.c      ****     {
 281:.\main.c      ****         cur_command = recent_command + 2;
 1688              		.loc 2 281 0 is_stmt 1
 1689 00ae 3B1C     		mov	r3, r7
 1690 00b0 0E33     		add	r3, r3, #14
 1691 00b2 3A1D     		add	r2, r7, #4
 1692 00b4 1288     		ldrh	r2, [r2]
 1693 00b6 0232     		add	r2, r2, #2
 1694 00b8 1A80     		strh	r2, [r3]
 1695 00ba 03E0     		b	.L69
 1696              	.L73:
 282:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 37


 283:.\main.c      ****     else
 284:.\main.c      ****     {
 285:.\main.c      ****         //increment error variable
 286:.\main.c      ****         cur_command = 1500;
 1697              		.loc 2 286 0
 1698 00bc 3B1C     		mov	r3, r7
 1699 00be 0E33     		add	r3, r3, #14
 1700 00c0 094A     		ldr	r2, .L75+20
 1701 00c2 1A80     		strh	r2, [r3]
 1702              	.L69:
 287:.\main.c      ****     }
 288:.\main.c      ****     return cur_command;
 1703              		.loc 2 288 0
 1704 00c4 3B1C     		mov	r3, r7
 1705 00c6 0E33     		add	r3, r3, #14
 1706 00c8 1B88     		ldrh	r3, [r3]
 289:.\main.c      **** }
 1707              		.loc 2 289 0
 1708 00ca 181C     		mov	r0, r3
 1709 00cc BD46     		mov	sp, r7
 1710 00ce 04B0     		add	sp, sp, #16
 1711              		@ sp needed
 1712 00d0 80BD     		pop	{r7, pc}
 1713              	.L76:
 1714 00d2 C046     		.align	2
 1715              	.L75:
 1716 00d4 E7030000 		.word	999
 1717 00d8 E1040000 		.word	1249
 1718 00dc 5E050000 		.word	1374
 1719 00e0 59060000 		.word	1625
 1720 00e4 D6060000 		.word	1750
 1721 00e8 DC050000 		.word	1500
 1722              		.cfi_endproc
 1723              	.LFE44:
 1724              		.size	simple_pos_to_vel, .-simple_pos_to_vel
 1725              		.section	.text.WT_pos_to_vel,"ax",%progbits
 1726              		.align	2
 1727              		.global	WT_pos_to_vel
 1728              		.code	16
 1729              		.thumb_func
 1730              		.type	WT_pos_to_vel, %function
 1731              	WT_pos_to_vel:
 1732              	.LFB45:
 290:.\main.c      **** 
 291:.\main.c      **** uint16 WT_pos_to_vel(uint16 new_command, uint16 recent_command)
 292:.\main.c      **** {
 1733              		.loc 2 292 0
 1734              		.cfi_startproc
 1735 0000 80B5     		push	{r7, lr}
 1736              		.cfi_def_cfa_offset 8
 1737              		.cfi_offset 7, -8
 1738              		.cfi_offset 14, -4
 1739 0002 84B0     		sub	sp, sp, #16
 1740              		.cfi_def_cfa_offset 24
 1741 0004 00AF     		add	r7, sp, #0
 1742              		.cfi_def_cfa_register 7
 1743 0006 0A1C     		mov	r2, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 38


 1744 0008 BB1D     		add	r3, r7, #6
 1745 000a 011C     		add	r1, r0, #0
 1746 000c 1980     		strh	r1, [r3]
 1747 000e 3B1D     		add	r3, r7, #4
 1748 0010 1A80     		strh	r2, [r3]
 293:.\main.c      ****     uint16 cur_command;
 294:.\main.c      ****     
 295:.\main.c      ****     if(new_command >= 1024 && new_command < 2000)
 1749              		.loc 2 295 0
 1750 0012 BB1D     		add	r3, r7, #6
 1751 0014 1A88     		ldrh	r2, [r3]
 1752 0016 1F4B     		ldr	r3, .L83
 1753 0018 9A42     		cmp	r2, r3
 1754 001a 0BD9     		bls	.L78
 1755              		.loc 2 295 0 is_stmt 0 discriminator 1
 1756 001c BB1D     		add	r3, r7, #6
 1757 001e 1A88     		ldrh	r2, [r3]
 1758 0020 1D4B     		ldr	r3, .L83+4
 1759 0022 9A42     		cmp	r2, r3
 1760 0024 06D8     		bhi	.L78
 296:.\main.c      ****     {
 297:.\main.c      ****         cur_command = recent_command - 2;
 1761              		.loc 2 297 0 is_stmt 1
 1762 0026 3B1C     		mov	r3, r7
 1763 0028 0E33     		add	r3, r3, #14
 1764 002a 3A1D     		add	r2, r7, #4
 1765 002c 1288     		ldrh	r2, [r2]
 1766 002e 023A     		sub	r2, r2, #2
 1767 0030 1A80     		strh	r2, [r3]
 1768 0032 28E0     		b	.L79
 1769              	.L78:
 298:.\main.c      ****     }
 299:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 1770              		.loc 2 299 0
 1771 0034 BB1D     		add	r3, r7, #6
 1772 0036 1A88     		ldrh	r2, [r3]
 1773 0038 8323     		mov	r3, #131
 1774 003a 1B01     		lsl	r3, r3, #4
 1775 003c 9A42     		cmp	r2, r3
 1776 003e 0AD8     		bhi	.L80
 1777              		.loc 2 299 0 is_stmt 0 discriminator 1
 1778 0040 BB1D     		add	r3, r7, #6
 1779 0042 1A88     		ldrh	r2, [r3]
 1780 0044 144B     		ldr	r3, .L83+4
 1781 0046 9A42     		cmp	r2, r3
 1782 0048 05D9     		bls	.L80
 300:.\main.c      ****     {
 301:.\main.c      ****         cur_command = recent_command;
 1783              		.loc 2 301 0 is_stmt 1
 1784 004a 3B1C     		mov	r3, r7
 1785 004c 0E33     		add	r3, r3, #14
 1786 004e 3A1D     		add	r2, r7, #4
 1787 0050 1288     		ldrh	r2, [r2]
 1788 0052 1A80     		strh	r2, [r3]
 1789 0054 17E0     		b	.L79
 1790              	.L80:
 302:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 39


 303:.\main.c      ****     else if(new_command > 2096 && new_command <= 3072)
 1791              		.loc 2 303 0
 1792 0056 BB1D     		add	r3, r7, #6
 1793 0058 1A88     		ldrh	r2, [r3]
 1794 005a 8323     		mov	r3, #131
 1795 005c 1B01     		lsl	r3, r3, #4
 1796 005e 9A42     		cmp	r2, r3
 1797 0060 0CD9     		bls	.L81
 1798              		.loc 2 303 0 is_stmt 0 discriminator 1
 1799 0062 BB1D     		add	r3, r7, #6
 1800 0064 1A88     		ldrh	r2, [r3]
 1801 0066 C023     		mov	r3, #192
 1802 0068 1B01     		lsl	r3, r3, #4
 1803 006a 9A42     		cmp	r2, r3
 1804 006c 06D8     		bhi	.L81
 304:.\main.c      ****     {
 305:.\main.c      ****         cur_command = recent_command + 2;
 1805              		.loc 2 305 0 is_stmt 1
 1806 006e 3B1C     		mov	r3, r7
 1807 0070 0E33     		add	r3, r3, #14
 1808 0072 3A1D     		add	r2, r7, #4
 1809 0074 1288     		ldrh	r2, [r2]
 1810 0076 0232     		add	r2, r2, #2
 1811 0078 1A80     		strh	r2, [r3]
 1812 007a 04E0     		b	.L79
 1813              	.L81:
 306:.\main.c      ****     }
 307:.\main.c      ****     else
 308:.\main.c      ****     {
 309:.\main.c      ****         //increment error variable
 310:.\main.c      ****         cur_command = 2048;
 1814              		.loc 2 310 0
 1815 007c 3B1C     		mov	r3, r7
 1816 007e 0E33     		add	r3, r3, #14
 1817 0080 8022     		mov	r2, #128
 1818 0082 1201     		lsl	r2, r2, #4
 1819 0084 1A80     		strh	r2, [r3]
 1820              	.L79:
 311:.\main.c      ****     }
 312:.\main.c      ****     return cur_command;
 1821              		.loc 2 312 0
 1822 0086 3B1C     		mov	r3, r7
 1823 0088 0E33     		add	r3, r3, #14
 1824 008a 1B88     		ldrh	r3, [r3]
 313:.\main.c      **** }
 1825              		.loc 2 313 0
 1826 008c 181C     		mov	r0, r3
 1827 008e BD46     		mov	sp, r7
 1828 0090 04B0     		add	sp, sp, #16
 1829              		@ sp needed
 1830 0092 80BD     		pop	{r7, pc}
 1831              	.L84:
 1832              		.align	2
 1833              	.L83:
 1834 0094 FF030000 		.word	1023
 1835 0098 CF070000 		.word	1999
 1836              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 40


 1837              	.LFE45:
 1838              		.size	WT_pos_to_vel, .-WT_pos_to_vel
 1839              		.section	.text.WR_pos_to_vel,"ax",%progbits
 1840              		.align	2
 1841              		.global	WR_pos_to_vel
 1842              		.code	16
 1843              		.thumb_func
 1844              		.type	WR_pos_to_vel, %function
 1845              	WR_pos_to_vel:
 1846              	.LFB46:
 314:.\main.c      **** 
 315:.\main.c      **** uint16 WR_pos_to_vel(uint16 new_command, uint16 recent_command)
 316:.\main.c      **** {
 1847              		.loc 2 316 0
 1848              		.cfi_startproc
 1849 0000 80B5     		push	{r7, lr}
 1850              		.cfi_def_cfa_offset 8
 1851              		.cfi_offset 7, -8
 1852              		.cfi_offset 14, -4
 1853 0002 84B0     		sub	sp, sp, #16
 1854              		.cfi_def_cfa_offset 24
 1855 0004 00AF     		add	r7, sp, #0
 1856              		.cfi_def_cfa_register 7
 1857 0006 0A1C     		mov	r2, r1
 1858 0008 BB1D     		add	r3, r7, #6
 1859 000a 011C     		add	r1, r0, #0
 1860 000c 1980     		strh	r1, [r3]
 1861 000e 3B1D     		add	r3, r7, #4
 1862 0010 1A80     		strh	r2, [r3]
 317:.\main.c      ****     uint16 cur_command;
 318:.\main.c      ****     
 319:.\main.c      ****     if(new_command >= 0 && new_command < 2000)
 1863              		.loc 2 319 0
 1864 0012 BB1D     		add	r3, r7, #6
 1865 0014 1A88     		ldrh	r2, [r3]
 1866 0016 1C4B     		ldr	r3, .L91
 1867 0018 9A42     		cmp	r2, r3
 1868 001a 06D8     		bhi	.L86
 320:.\main.c      ****     {
 321:.\main.c      ****         cur_command = recent_command - 2;
 1869              		.loc 2 321 0
 1870 001c 3B1C     		mov	r3, r7
 1871 001e 0E33     		add	r3, r3, #14
 1872 0020 3A1D     		add	r2, r7, #4
 1873 0022 1288     		ldrh	r2, [r2]
 1874 0024 023A     		sub	r2, r2, #2
 1875 0026 1A80     		strh	r2, [r3]
 1876 0028 27E0     		b	.L87
 1877              	.L86:
 322:.\main.c      ****     }
 323:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 1878              		.loc 2 323 0
 1879 002a BB1D     		add	r3, r7, #6
 1880 002c 1A88     		ldrh	r2, [r3]
 1881 002e 8323     		mov	r3, #131
 1882 0030 1B01     		lsl	r3, r3, #4
 1883 0032 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 41


 1884 0034 0AD8     		bhi	.L88
 1885              		.loc 2 323 0 is_stmt 0 discriminator 1
 1886 0036 BB1D     		add	r3, r7, #6
 1887 0038 1A88     		ldrh	r2, [r3]
 1888 003a 134B     		ldr	r3, .L91
 1889 003c 9A42     		cmp	r2, r3
 1890 003e 05D9     		bls	.L88
 324:.\main.c      ****     {
 325:.\main.c      ****         cur_command = recent_command;
 1891              		.loc 2 325 0 is_stmt 1
 1892 0040 3B1C     		mov	r3, r7
 1893 0042 0E33     		add	r3, r3, #14
 1894 0044 3A1D     		add	r2, r7, #4
 1895 0046 1288     		ldrh	r2, [r2]
 1896 0048 1A80     		strh	r2, [r3]
 1897 004a 16E0     		b	.L87
 1898              	.L88:
 326:.\main.c      ****     }
 327:.\main.c      ****     else if(new_command > 2096 && new_command <= 4095)
 1899              		.loc 2 327 0
 1900 004c BB1D     		add	r3, r7, #6
 1901 004e 1A88     		ldrh	r2, [r3]
 1902 0050 8323     		mov	r3, #131
 1903 0052 1B01     		lsl	r3, r3, #4
 1904 0054 9A42     		cmp	r2, r3
 1905 0056 0BD9     		bls	.L89
 1906              		.loc 2 327 0 is_stmt 0 discriminator 1
 1907 0058 BB1D     		add	r3, r7, #6
 1908 005a 1A88     		ldrh	r2, [r3]
 1909 005c 0B4B     		ldr	r3, .L91+4
 1910 005e 9A42     		cmp	r2, r3
 1911 0060 06D8     		bhi	.L89
 328:.\main.c      ****     {
 329:.\main.c      ****         cur_command = recent_command + 2;
 1912              		.loc 2 329 0 is_stmt 1
 1913 0062 3B1C     		mov	r3, r7
 1914 0064 0E33     		add	r3, r3, #14
 1915 0066 3A1D     		add	r2, r7, #4
 1916 0068 1288     		ldrh	r2, [r2]
 1917 006a 0232     		add	r2, r2, #2
 1918 006c 1A80     		strh	r2, [r3]
 1919 006e 04E0     		b	.L87
 1920              	.L89:
 330:.\main.c      ****     }
 331:.\main.c      ****     else
 332:.\main.c      ****     {
 333:.\main.c      ****         //increment error variable
 334:.\main.c      ****         cur_command = 2048;
 1921              		.loc 2 334 0
 1922 0070 3B1C     		mov	r3, r7
 1923 0072 0E33     		add	r3, r3, #14
 1924 0074 8022     		mov	r2, #128
 1925 0076 1201     		lsl	r2, r2, #4
 1926 0078 1A80     		strh	r2, [r3]
 1927              	.L87:
 335:.\main.c      ****     }
 336:.\main.c      ****     return cur_command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 42


 1928              		.loc 2 336 0
 1929 007a 3B1C     		mov	r3, r7
 1930 007c 0E33     		add	r3, r3, #14
 1931 007e 1B88     		ldrh	r3, [r3]
 337:.\main.c      **** }
 1932              		.loc 2 337 0
 1933 0080 181C     		mov	r0, r3
 1934 0082 BD46     		mov	sp, r7
 1935 0084 04B0     		add	sp, sp, #16
 1936              		@ sp needed
 1937 0086 80BD     		pop	{r7, pc}
 1938              	.L92:
 1939              		.align	2
 1940              	.L91:
 1941 0088 CF070000 		.word	1999
 1942 008c FF0F0000 		.word	4095
 1943              		.cfi_endproc
 1944              	.LFE46:
 1945              		.size	WR_pos_to_vel, .-WR_pos_to_vel
 1946              		.section	.text.make_command,"ax",%progbits
 1947              		.align	2
 1948              		.global	make_command
 1949              		.code	16
 1950              		.thumb_func
 1951              		.type	make_command, %function
 1952              	make_command:
 1953              	.LFB47:
 338:.\main.c      **** 
 339:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 340:.\main.c      **** {
 1954              		.loc 2 340 0
 1955              		.cfi_startproc
 1956 0000 80B5     		push	{r7, lr}
 1957              		.cfi_def_cfa_offset 8
 1958              		.cfi_offset 7, -8
 1959              		.cfi_offset 14, -4
 1960 0002 84B0     		sub	sp, sp, #16
 1961              		.cfi_def_cfa_offset 24
 1962 0004 00AF     		add	r7, sp, #0
 1963              		.cfi_def_cfa_register 7
 1964 0006 7860     		str	r0, [r7, #4]
 1965 0008 FB1C     		add	r3, r7, #3
 1966 000a 1970     		strb	r1, [r3]
 1967 000c BB1C     		add	r3, r7, #2
 1968 000e 1A70     		strb	r2, [r3]
 341:.\main.c      ****     uint16 command;
 342:.\main.c      ****     int16 temp1;
 343:.\main.c      ****     int16 temp2;
 344:.\main.c      ****     int16 temp3;
 345:.\main.c      ****     
 346:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1969              		.loc 2 346 0
 1970 0010 FB1C     		add	r3, r7, #3
 1971 0012 1B78     		ldrb	r3, [r3]
 1972 0014 7A68     		ldr	r2, [r7, #4]
 1973 0016 D318     		add	r3, r2, r3
 1974 0018 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 43


 1975 001a 5BB2     		sxtb	r3, r3
 1976 001c 1A02     		lsl	r2, r3, #8
 1977 001e 3B1C     		mov	r3, r7
 1978 0020 0E33     		add	r3, r3, #14
 1979 0022 1A80     		strh	r2, [r3]
 347:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1980              		.loc 2 347 0
 1981 0024 BB1C     		add	r3, r7, #2
 1982 0026 1B78     		ldrb	r3, [r3]
 1983 0028 7A68     		ldr	r2, [r7, #4]
 1984 002a D318     		add	r3, r2, r3
 1985 002c 1B78     		ldrb	r3, [r3]
 1986 002e 5BB2     		sxtb	r3, r3
 1987 0030 9AB2     		uxth	r2, r3
 1988 0032 3B1C     		mov	r3, r7
 1989 0034 0C33     		add	r3, r3, #12
 1990 0036 111C     		add	r1, r2, #0
 1991 0038 FF22     		mov	r2, #255
 1992 003a 0A40     		and	r2, r1
 1993 003c 1A80     		strh	r2, [r3]
 348:.\main.c      ****     temp3 = temp1 | temp2;
 1994              		.loc 2 348 0
 1995 003e 3B1C     		mov	r3, r7
 1996 0040 0A33     		add	r3, r3, #10
 1997 0042 391C     		mov	r1, r7
 1998 0044 0E31     		add	r1, r1, #14
 1999 0046 3A1C     		mov	r2, r7
 2000 0048 0C32     		add	r2, r2, #12
 2001 004a 0988     		ldrh	r1, [r1]
 2002 004c 1288     		ldrh	r2, [r2]
 2003 004e 0A43     		orr	r2, r1
 2004 0050 1A80     		strh	r2, [r3]
 349:.\main.c      ****     command = (temp3/2) + 1500;
 2005              		.loc 2 349 0
 2006 0052 3B1C     		mov	r3, r7
 2007 0054 0A33     		add	r3, r3, #10
 2008 0056 0021     		mov	r1, #0
 2009 0058 5B5E     		ldrsh	r3, [r3, r1]
 2010 005a 002B     		cmp	r3, #0
 2011 005c 00DA     		bge	.L94
 2012 005e 0133     		add	r3, r3, #1
 2013              	.L94:
 2014 0060 5B10     		asr	r3, r3, #1
 2015 0062 9BB2     		uxth	r3, r3
 2016 0064 9AB2     		uxth	r2, r3
 2017 0066 3B1C     		mov	r3, r7
 2018 0068 0833     		add	r3, r3, #8
 2019 006a 0549     		ldr	r1, .L96
 2020 006c 5218     		add	r2, r2, r1
 2021 006e 1A80     		strh	r2, [r3]
 350:.\main.c      ****     return command;
 2022              		.loc 2 350 0
 2023 0070 3B1C     		mov	r3, r7
 2024 0072 0833     		add	r3, r3, #8
 2025 0074 1B88     		ldrh	r3, [r3]
 351:.\main.c      **** }
 2026              		.loc 2 351 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 44


 2027 0076 181C     		mov	r0, r3
 2028 0078 BD46     		mov	sp, r7
 2029 007a 04B0     		add	sp, sp, #16
 2030              		@ sp needed
 2031 007c 80BD     		pop	{r7, pc}
 2032              	.L97:
 2033 007e C046     		.align	2
 2034              	.L96:
 2035 0080 DC050000 		.word	1500
 2036              		.cfi_endproc
 2037              	.LFE47:
 2038              		.size	make_command, .-make_command
 2039              		.section	.text.make_wristRotate_command,"ax",%progbits
 2040              		.align	2
 2041              		.global	make_wristRotate_command
 2042              		.code	16
 2043              		.thumb_func
 2044              		.type	make_wristRotate_command, %function
 2045              	make_wristRotate_command:
 2046              	.LFB48:
 352:.\main.c      **** 
 353:.\main.c      **** uint16 make_wristRotate_command(int8* info_array, uint8 byte1, uint8 byte2)
 354:.\main.c      **** {
 2047              		.loc 2 354 0
 2048              		.cfi_startproc
 2049 0000 80B5     		push	{r7, lr}
 2050              		.cfi_def_cfa_offset 8
 2051              		.cfi_offset 7, -8
 2052              		.cfi_offset 14, -4
 2053 0002 84B0     		sub	sp, sp, #16
 2054              		.cfi_def_cfa_offset 24
 2055 0004 00AF     		add	r7, sp, #0
 2056              		.cfi_def_cfa_register 7
 2057 0006 7860     		str	r0, [r7, #4]
 2058 0008 FB1C     		add	r3, r7, #3
 2059 000a 1970     		strb	r1, [r3]
 2060 000c BB1C     		add	r3, r7, #2
 2061 000e 1A70     		strb	r2, [r3]
 355:.\main.c      ****     uint16 command;
 356:.\main.c      ****     int16 temp1;
 357:.\main.c      ****     int16 temp2;
 358:.\main.c      ****     int16 temp3;
 359:.\main.c      ****     
 360:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 2062              		.loc 2 360 0
 2063 0010 FB1C     		add	r3, r7, #3
 2064 0012 1B78     		ldrb	r3, [r3]
 2065 0014 7A68     		ldr	r2, [r7, #4]
 2066 0016 D318     		add	r3, r2, r3
 2067 0018 1B78     		ldrb	r3, [r3]
 2068 001a 5BB2     		sxtb	r3, r3
 2069 001c 1A02     		lsl	r2, r3, #8
 2070 001e 3B1C     		mov	r3, r7
 2071 0020 0E33     		add	r3, r3, #14
 2072 0022 1A80     		strh	r2, [r3]
 361:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 2073              		.loc 2 361 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 45


 2074 0024 BB1C     		add	r3, r7, #2
 2075 0026 1B78     		ldrb	r3, [r3]
 2076 0028 7A68     		ldr	r2, [r7, #4]
 2077 002a D318     		add	r3, r2, r3
 2078 002c 1B78     		ldrb	r3, [r3]
 2079 002e 5BB2     		sxtb	r3, r3
 2080 0030 9AB2     		uxth	r2, r3
 2081 0032 3B1C     		mov	r3, r7
 2082 0034 0C33     		add	r3, r3, #12
 2083 0036 111C     		add	r1, r2, #0
 2084 0038 FF22     		mov	r2, #255
 2085 003a 0A40     		and	r2, r1
 2086 003c 1A80     		strh	r2, [r3]
 362:.\main.c      ****     temp3 = temp1 | temp2;
 2087              		.loc 2 362 0
 2088 003e 3B1C     		mov	r3, r7
 2089 0040 0A33     		add	r3, r3, #10
 2090 0042 391C     		mov	r1, r7
 2091 0044 0E31     		add	r1, r1, #14
 2092 0046 3A1C     		mov	r2, r7
 2093 0048 0C32     		add	r2, r2, #12
 2094 004a 0988     		ldrh	r1, [r1]
 2095 004c 1288     		ldrh	r2, [r2]
 2096 004e 0A43     		orr	r2, r1
 2097 0050 1A80     		strh	r2, [r3]
 363:.\main.c      ****     command = (2*temp3) + 2048;
 2098              		.loc 2 363 0
 2099 0052 3B1C     		mov	r3, r7
 2100 0054 0A33     		add	r3, r3, #10
 2101 0056 0022     		mov	r2, #0
 2102 0058 9B5E     		ldrsh	r3, [r3, r2]
 2103 005a 8022     		mov	r2, #128
 2104 005c D200     		lsl	r2, r2, #3
 2105 005e 9B18     		add	r3, r3, r2
 2106 0060 9BB2     		uxth	r3, r3
 2107 0062 3A1C     		mov	r2, r7
 2108 0064 0832     		add	r2, r2, #8
 2109 0066 DB18     		add	r3, r3, r3
 2110 0068 1380     		strh	r3, [r2]
 364:.\main.c      ****     return command;
 2111              		.loc 2 364 0
 2112 006a 3B1C     		mov	r3, r7
 2113 006c 0833     		add	r3, r3, #8
 2114 006e 1B88     		ldrh	r3, [r3]
 365:.\main.c      **** }
 2115              		.loc 2 365 0
 2116 0070 181C     		mov	r0, r3
 2117 0072 BD46     		mov	sp, r7
 2118 0074 04B0     		add	sp, sp, #16
 2119              		@ sp needed
 2120 0076 80BD     		pop	{r7, pc}
 2121              		.cfi_endproc
 2122              	.LFE48:
 2123              		.size	make_wristRotate_command, .-make_wristRotate_command
 2124              		.section	.text.make_wristTilt_command,"ax",%progbits
 2125              		.align	2
 2126              		.global	make_wristTilt_command
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 46


 2127              		.code	16
 2128              		.thumb_func
 2129              		.type	make_wristTilt_command, %function
 2130              	make_wristTilt_command:
 2131              	.LFB49:
 366:.\main.c      **** 
 367:.\main.c      **** uint16 make_wristTilt_command(int8* info_array, uint8 byte1, uint8 byte2)
 368:.\main.c      **** {
 2132              		.loc 2 368 0
 2133              		.cfi_startproc
 2134 0000 80B5     		push	{r7, lr}
 2135              		.cfi_def_cfa_offset 8
 2136              		.cfi_offset 7, -8
 2137              		.cfi_offset 14, -4
 2138 0002 84B0     		sub	sp, sp, #16
 2139              		.cfi_def_cfa_offset 24
 2140 0004 00AF     		add	r7, sp, #0
 2141              		.cfi_def_cfa_register 7
 2142 0006 7860     		str	r0, [r7, #4]
 2143 0008 FB1C     		add	r3, r7, #3
 2144 000a 1970     		strb	r1, [r3]
 2145 000c BB1C     		add	r3, r7, #2
 2146 000e 1A70     		strb	r2, [r3]
 369:.\main.c      ****     uint16 command;
 370:.\main.c      ****     int16 temp1;
 371:.\main.c      ****     int16 temp2;
 372:.\main.c      ****     int16 temp3;
 373:.\main.c      ****     
 374:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 2147              		.loc 2 374 0
 2148 0010 FB1C     		add	r3, r7, #3
 2149 0012 1B78     		ldrb	r3, [r3]
 2150 0014 7A68     		ldr	r2, [r7, #4]
 2151 0016 D318     		add	r3, r2, r3
 2152 0018 1B78     		ldrb	r3, [r3]
 2153 001a 5BB2     		sxtb	r3, r3
 2154 001c 1A02     		lsl	r2, r3, #8
 2155 001e 3B1C     		mov	r3, r7
 2156 0020 0E33     		add	r3, r3, #14
 2157 0022 1A80     		strh	r2, [r3]
 375:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 2158              		.loc 2 375 0
 2159 0024 BB1C     		add	r3, r7, #2
 2160 0026 1B78     		ldrb	r3, [r3]
 2161 0028 7A68     		ldr	r2, [r7, #4]
 2162 002a D318     		add	r3, r2, r3
 2163 002c 1B78     		ldrb	r3, [r3]
 2164 002e 5BB2     		sxtb	r3, r3
 2165 0030 9AB2     		uxth	r2, r3
 2166 0032 3B1C     		mov	r3, r7
 2167 0034 0C33     		add	r3, r3, #12
 2168 0036 111C     		add	r1, r2, #0
 2169 0038 FF22     		mov	r2, #255
 2170 003a 0A40     		and	r2, r1
 2171 003c 1A80     		strh	r2, [r3]
 376:.\main.c      ****     temp3 = temp1 | temp2;
 2172              		.loc 2 376 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 47


 2173 003e 3B1C     		mov	r3, r7
 2174 0040 0A33     		add	r3, r3, #10
 2175 0042 391C     		mov	r1, r7
 2176 0044 0E31     		add	r1, r1, #14
 2177 0046 3A1C     		mov	r2, r7
 2178 0048 0C32     		add	r2, r2, #12
 2179 004a 0988     		ldrh	r1, [r1]
 2180 004c 1288     		ldrh	r2, [r2]
 2181 004e 0A43     		orr	r2, r1
 2182 0050 1A80     		strh	r2, [r3]
 377:.\main.c      ****     command = temp3 + 2048;
 2183              		.loc 2 377 0
 2184 0052 3B1C     		mov	r3, r7
 2185 0054 0A33     		add	r3, r3, #10
 2186 0056 1A88     		ldrh	r2, [r3]
 2187 0058 3B1C     		mov	r3, r7
 2188 005a 0833     		add	r3, r3, #8
 2189 005c 8021     		mov	r1, #128
 2190 005e 0901     		lsl	r1, r1, #4
 2191 0060 5218     		add	r2, r2, r1
 2192 0062 1A80     		strh	r2, [r3]
 378:.\main.c      ****     return command;
 2193              		.loc 2 378 0
 2194 0064 3B1C     		mov	r3, r7
 2195 0066 0833     		add	r3, r3, #8
 2196 0068 1B88     		ldrh	r3, [r3]
 379:.\main.c      **** }
 2197              		.loc 2 379 0
 2198 006a 181C     		mov	r0, r3
 2199 006c BD46     		mov	sp, r7
 2200 006e 04B0     		add	sp, sp, #16
 2201              		@ sp needed
 2202 0070 80BD     		pop	{r7, pc}
 2203              		.cfi_endproc
 2204              	.LFE49:
 2205              		.size	make_wristTilt_command, .-make_wristTilt_command
 2206 0072 C046     		.section	.text.potFeedback,"ax",%progbits
 2207              		.align	2
 2208              		.global	potFeedback
 2209              		.code	16
 2210              		.thumb_func
 2211              		.type	potFeedback, %function
 2212              	potFeedback:
 2213              	.LFB50:
 380:.\main.c      **** 
 381:.\main.c      **** uint16 potFeedback(uint32 channel)
 382:.\main.c      **** {
 2214              		.loc 2 382 0
 2215              		.cfi_startproc
 2216 0000 80B5     		push	{r7, lr}
 2217              		.cfi_def_cfa_offset 8
 2218              		.cfi_offset 7, -8
 2219              		.cfi_offset 14, -4
 2220 0002 84B0     		sub	sp, sp, #16
 2221              		.cfi_def_cfa_offset 24
 2222 0004 00AF     		add	r7, sp, #0
 2223              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 48


 2224 0006 7860     		str	r0, [r7, #4]
 383:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 2225              		.loc 2 383 0
 2226 0008 7B68     		ldr	r3, [r7, #4]
 2227 000a 181C     		mov	r0, r3
 2228 000c FFF7FEFF 		bl	ADC_GetResult16
 2229 0010 031C     		mov	r3, r0
 2230 0012 1A1C     		mov	r2, r3
 2231 0014 3B1C     		mov	r3, r7
 2232 0016 0E33     		add	r3, r3, #14
 2233 0018 1A80     		strh	r2, [r3]
 384:.\main.c      ****     return feedback;
 2234              		.loc 2 384 0
 2235 001a 3B1C     		mov	r3, r7
 2236 001c 0E33     		add	r3, r3, #14
 2237 001e 1B88     		ldrh	r3, [r3]
 385:.\main.c      **** }
 2238              		.loc 2 385 0
 2239 0020 181C     		mov	r0, r3
 2240 0022 BD46     		mov	sp, r7
 2241 0024 04B0     		add	sp, sp, #16
 2242              		@ sp needed
 2243 0026 80BD     		pop	{r7, pc}
 2244              		.cfi_endproc
 2245              	.LFE50:
 2246              		.size	potFeedback, .-potFeedback
 2247              		.comm	send_packet_state,1,1
 2248              		.section	.text.send_packet,"ax",%progbits
 2249              		.align	2
 2250              		.global	send_packet
 2251              		.code	16
 2252              		.thumb_func
 2253              		.type	send_packet, %function
 2254              	send_packet:
 2255              	.LFB51:
 386:.\main.c      **** 
 387:.\main.c      **** enum send_packet_states {send_start, send_init, send_feedback, send_heartbeat, send_wait} send_pack
 388:.\main.c      **** void send_packet()
 389:.\main.c      **** {
 2256              		.loc 2 389 0
 2257              		.cfi_startproc
 2258 0000 80B5     		push	{r7, lr}
 2259              		.cfi_def_cfa_offset 8
 2260              		.cfi_offset 7, -8
 2261              		.cfi_offset 14, -4
 2262 0002 00AF     		add	r7, sp, #0
 2263              		.cfi_def_cfa_register 7
 390:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 391:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 392:.\main.c      ****     //TODO define system state
 393:.\main.c      ****     //send packet via serial to wiznet
 394:.\main.c      ****     
 395:.\main.c      ****     switch(send_packet_state)
 2264              		.loc 2 395 0
 2265 0004 5B4B     		ldr	r3, .L125
 2266 0006 1B78     		ldrb	r3, [r3]
 2267 0008 042B     		cmp	r3, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 49


 2268 000a 6CD8     		bhi	.L105
 2269 000c 9A00     		lsl	r2, r3, #2
 2270 000e 5A4B     		ldr	r3, .L125+4
 2271 0010 D318     		add	r3, r2, r3
 2272 0012 1B68     		ldr	r3, [r3]
 2273 0014 9F46     		mov	pc, r3
 2274              		.section	.rodata
 2275              		.align	2
 2276              	.L107:
 2277 0000 EE000000 		.word	.L124
 2278 0004 16000000 		.word	.L108
 2279 0008 C0000000 		.word	.L109
 2280 000c D0000000 		.word	.L110
 2281 0010 EE000000 		.word	.L124
 2282              		.section	.text.send_packet
 2283              	.L108:
 396:.\main.c      ****     {
 397:.\main.c      ****         case send_start:
 398:.\main.c      ****             break;
 399:.\main.c      ****         
 400:.\main.c      ****         case send_init:
 401:.\main.c      ****             feedback_array[0] = 7;
 2284              		.loc 2 401 0
 2285 0016 594B     		ldr	r3, .L125+8
 2286 0018 0722     		mov	r2, #7
 2287 001a 1A70     		strb	r2, [r3]
 402:.\main.c      ****             feedback_array[1] = 7;
 2288              		.loc 2 402 0
 2289 001c 574B     		ldr	r3, .L125+8
 2290 001e 0722     		mov	r2, #7
 2291 0020 5A70     		strb	r2, [r3, #1]
 403:.\main.c      ****             feedback_array[2] = 7;
 2292              		.loc 2 403 0
 2293 0022 564B     		ldr	r3, .L125+8
 2294 0024 0722     		mov	r2, #7
 2295 0026 9A70     		strb	r2, [r3, #2]
 404:.\main.c      ****             feedback_array[3] = 7;
 2296              		.loc 2 404 0
 2297 0028 544B     		ldr	r3, .L125+8
 2298 002a 0722     		mov	r2, #7
 2299 002c DA70     		strb	r2, [r3, #3]
 405:.\main.c      ****             feedback_array[4] = 7;
 2300              		.loc 2 405 0
 2301 002e 534B     		ldr	r3, .L125+8
 2302 0030 0722     		mov	r2, #7
 2303 0032 1A71     		strb	r2, [r3, #4]
 406:.\main.c      ****             feedback_array[5] = 7;
 2304              		.loc 2 406 0
 2305 0034 514B     		ldr	r3, .L125+8
 2306 0036 0722     		mov	r2, #7
 2307 0038 5A71     		strb	r2, [r3, #5]
 407:.\main.c      ****             feedback_array[6] = 7;
 2308              		.loc 2 407 0
 2309 003a 504B     		ldr	r3, .L125+8
 2310 003c 0722     		mov	r2, #7
 2311 003e 9A71     		strb	r2, [r3, #6]
 408:.\main.c      ****             feedback_array[7] = 7;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 50


 2312              		.loc 2 408 0
 2313 0040 4E4B     		ldr	r3, .L125+8
 2314 0042 0722     		mov	r2, #7
 2315 0044 DA71     		strb	r2, [r3, #7]
 409:.\main.c      ****             feedback_array[8] = 7;
 2316              		.loc 2 409 0
 2317 0046 4D4B     		ldr	r3, .L125+8
 2318 0048 0722     		mov	r2, #7
 2319 004a 1A72     		strb	r2, [r3, #8]
 410:.\main.c      ****             feedback_array[9] = 7;
 2320              		.loc 2 410 0
 2321 004c 4B4B     		ldr	r3, .L125+8
 2322 004e 0722     		mov	r2, #7
 2323 0050 5A72     		strb	r2, [r3, #9]
 411:.\main.c      ****             feedback_array[10] = 7;
 2324              		.loc 2 411 0
 2325 0052 4A4B     		ldr	r3, .L125+8
 2326 0054 0722     		mov	r2, #7
 2327 0056 9A72     		strb	r2, [r3, #10]
 412:.\main.c      ****             feedback_array[11] = 7;
 2328              		.loc 2 412 0
 2329 0058 484B     		ldr	r3, .L125+8
 2330 005a 0722     		mov	r2, #7
 2331 005c DA72     		strb	r2, [r3, #11]
 413:.\main.c      ****             feedback_array[12] = 7;
 2332              		.loc 2 413 0
 2333 005e 474B     		ldr	r3, .L125+8
 2334 0060 0722     		mov	r2, #7
 2335 0062 1A73     		strb	r2, [r3, #12]
 414:.\main.c      ****             feedback_array[13] = 0xee;
 2336              		.loc 2 414 0
 2337 0064 454B     		ldr	r3, .L125+8
 2338 0066 EE22     		mov	r2, #238
 2339 0068 5A73     		strb	r2, [r3, #13]
 415:.\main.c      ****             
 416:.\main.c      ****             heartbeat_array[0] = 7;
 2340              		.loc 2 416 0
 2341 006a 454B     		ldr	r3, .L125+12
 2342 006c 0722     		mov	r2, #7
 2343 006e 1A70     		strb	r2, [r3]
 417:.\main.c      ****             heartbeat_array[1] = 7;
 2344              		.loc 2 417 0
 2345 0070 434B     		ldr	r3, .L125+12
 2346 0072 0722     		mov	r2, #7
 2347 0074 5A70     		strb	r2, [r3, #1]
 418:.\main.c      ****             heartbeat_array[2] = 7;
 2348              		.loc 2 418 0
 2349 0076 424B     		ldr	r3, .L125+12
 2350 0078 0722     		mov	r2, #7
 2351 007a 9A70     		strb	r2, [r3, #2]
 419:.\main.c      ****             heartbeat_array[3] = 7;
 2352              		.loc 2 419 0
 2353 007c 404B     		ldr	r3, .L125+12
 2354 007e 0722     		mov	r2, #7
 2355 0080 DA70     		strb	r2, [r3, #3]
 420:.\main.c      ****             heartbeat_array[4] = 7;
 2356              		.loc 2 420 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 51


 2357 0082 3F4B     		ldr	r3, .L125+12
 2358 0084 0722     		mov	r2, #7
 2359 0086 1A71     		strb	r2, [r3, #4]
 421:.\main.c      ****             heartbeat_array[5] = 7;
 2360              		.loc 2 421 0
 2361 0088 3D4B     		ldr	r3, .L125+12
 2362 008a 0722     		mov	r2, #7
 2363 008c 5A71     		strb	r2, [r3, #5]
 422:.\main.c      ****             heartbeat_array[6] = 7;
 2364              		.loc 2 422 0
 2365 008e 3C4B     		ldr	r3, .L125+12
 2366 0090 0722     		mov	r2, #7
 2367 0092 9A71     		strb	r2, [r3, #6]
 423:.\main.c      ****             heartbeat_array[7] = 7;
 2368              		.loc 2 423 0
 2369 0094 3A4B     		ldr	r3, .L125+12
 2370 0096 0722     		mov	r2, #7
 2371 0098 DA71     		strb	r2, [r3, #7]
 424:.\main.c      ****             heartbeat_array[8] = 7;
 2372              		.loc 2 424 0
 2373 009a 394B     		ldr	r3, .L125+12
 2374 009c 0722     		mov	r2, #7
 2375 009e 1A72     		strb	r2, [r3, #8]
 425:.\main.c      ****             heartbeat_array[9] = 7;
 2376              		.loc 2 425 0
 2377 00a0 374B     		ldr	r3, .L125+12
 2378 00a2 0722     		mov	r2, #7
 2379 00a4 5A72     		strb	r2, [r3, #9]
 426:.\main.c      ****             heartbeat_array[10] = 7;
 2380              		.loc 2 426 0
 2381 00a6 364B     		ldr	r3, .L125+12
 2382 00a8 0722     		mov	r2, #7
 2383 00aa 9A72     		strb	r2, [r3, #10]
 427:.\main.c      ****             heartbeat_array[11] = 7;
 2384              		.loc 2 427 0
 2385 00ac 344B     		ldr	r3, .L125+12
 2386 00ae 0722     		mov	r2, #7
 2387 00b0 DA72     		strb	r2, [r3, #11]
 428:.\main.c      ****             heartbeat_array[12] = 7;
 2388              		.loc 2 428 0
 2389 00b2 334B     		ldr	r3, .L125+12
 2390 00b4 0722     		mov	r2, #7
 2391 00b6 1A73     		strb	r2, [r3, #12]
 429:.\main.c      ****             heartbeat_array[13] = 0xee;
 2392              		.loc 2 429 0
 2393 00b8 314B     		ldr	r3, .L125+12
 2394 00ba EE22     		mov	r2, #238
 2395 00bc 5A73     		strb	r2, [r3, #13]
 430:.\main.c      ****             break;
 2396              		.loc 2 430 0
 2397 00be 17E0     		b	.L112
 2398              	.L109:
 431:.\main.c      ****         
 432:.\main.c      ****         case send_feedback:
 433:.\main.c      ****             wiznetWriteUdpFrame(feedback_array, SEND_ARRAY_SIZE);
 2399              		.loc 2 433 0
 2400 00c0 2E4B     		ldr	r3, .L125+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 52


 2401 00c2 181C     		mov	r0, r3
 2402 00c4 0E21     		mov	r1, #14
 2403 00c6 FFF7FEFF 		bl	wiznetWriteUdpFrame
 434:.\main.c      ****             wiznetSend();
 2404              		.loc 2 434 0
 2405 00ca FFF7FEFF 		bl	wiznetSend
 435:.\main.c      ****             break;
 2406              		.loc 2 435 0
 2407 00ce 0FE0     		b	.L112
 2408              	.L110:
 436:.\main.c      ****         
 437:.\main.c      ****         case send_heartbeat:
 438:.\main.c      ****             wiznetWriteUdpFrame(heartbeat_array, SEND_ARRAY_SIZE);
 2409              		.loc 2 438 0
 2410 00d0 2B4B     		ldr	r3, .L125+12
 2411 00d2 181C     		mov	r0, r3
 2412 00d4 0E21     		mov	r1, #14
 2413 00d6 FFF7FEFF 		bl	wiznetWriteUdpFrame
 439:.\main.c      ****             wiznetSend();
 2414              		.loc 2 439 0
 2415 00da FFF7FEFF 		bl	wiznetSend
 440:.\main.c      ****             HEARTBEAT_FLAG = 0;
 2416              		.loc 2 440 0
 2417 00de 294B     		ldr	r3, .L125+16
 2418 00e0 0022     		mov	r2, #0
 2419 00e2 1A70     		strb	r2, [r3]
 441:.\main.c      ****             break;
 2420              		.loc 2 441 0
 2421 00e4 04E0     		b	.L112
 2422              	.L105:
 442:.\main.c      ****         
 443:.\main.c      ****         case send_wait:
 444:.\main.c      ****             break;
 445:.\main.c      ****         
 446:.\main.c      ****         default:
 447:.\main.c      ****             send_packet_state = send_start;
 2423              		.loc 2 447 0
 2424 00e6 234B     		ldr	r3, .L125
 2425 00e8 0022     		mov	r2, #0
 2426 00ea 1A70     		strb	r2, [r3]
 448:.\main.c      ****             break;
 2427              		.loc 2 448 0
 2428 00ec 00E0     		b	.L112
 2429              	.L124:
 444:.\main.c      ****             break;
 2430              		.loc 2 444 0
 2431 00ee C046     		mov	r8, r8
 2432              	.L112:
 449:.\main.c      ****     }
 450:.\main.c      ****     
 451:.\main.c      ****     switch(send_packet_state)
 2433              		.loc 2 451 0
 2434 00f0 204B     		ldr	r3, .L125
 2435 00f2 1B78     		ldrb	r3, [r3]
 2436 00f4 042B     		cmp	r3, #4
 2437 00f6 37D8     		bhi	.L113
 2438 00f8 9A00     		lsl	r2, r3, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 53


 2439 00fa 234B     		ldr	r3, .L125+20
 2440 00fc D318     		add	r3, r2, r3
 2441 00fe 1B68     		ldr	r3, [r3]
 2442 0100 9F46     		mov	pc, r3
 2443              		.section	.rodata
 2444              		.align	2
 2445              	.L115:
 2446 0014 02010000 		.word	.L114
 2447 0018 0A010000 		.word	.L116
 2448 001c 12010000 		.word	.L117
 2449 0020 1A010000 		.word	.L118
 2450 0024 22010000 		.word	.L119
 2451              		.section	.text.send_packet
 2452              	.L114:
 452:.\main.c      ****     {
 453:.\main.c      ****         case send_start:
 454:.\main.c      ****             send_packet_state = send_init;
 2453              		.loc 2 454 0
 2454 0102 1C4B     		ldr	r3, .L125
 2455 0104 0122     		mov	r2, #1
 2456 0106 1A70     		strb	r2, [r3]
 455:.\main.c      ****             break;
 2457              		.loc 2 455 0
 2458 0108 32E0     		b	.L104
 2459              	.L116:
 456:.\main.c      ****         
 457:.\main.c      ****         case send_init:
 458:.\main.c      ****             send_packet_state = send_heartbeat;
 2460              		.loc 2 458 0
 2461 010a 1A4B     		ldr	r3, .L125
 2462 010c 0322     		mov	r2, #3
 2463 010e 1A70     		strb	r2, [r3]
 459:.\main.c      ****             break;
 2464              		.loc 2 459 0
 2465 0110 2EE0     		b	.L104
 2466              	.L117:
 460:.\main.c      ****         
 461:.\main.c      ****         case send_feedback:
 462:.\main.c      ****             send_packet_state = send_wait;            
 2467              		.loc 2 462 0
 2468 0112 184B     		ldr	r3, .L125
 2469 0114 0422     		mov	r2, #4
 2470 0116 1A70     		strb	r2, [r3]
 463:.\main.c      ****             break;
 2471              		.loc 2 463 0
 2472 0118 2AE0     		b	.L104
 2473              	.L118:
 464:.\main.c      ****         
 465:.\main.c      ****         case send_heartbeat:
 466:.\main.c      ****             send_packet_state = send_wait;
 2474              		.loc 2 466 0
 2475 011a 164B     		ldr	r3, .L125
 2476 011c 0422     		mov	r2, #4
 2477 011e 1A70     		strb	r2, [r3]
 467:.\main.c      ****             break;
 2478              		.loc 2 467 0
 2479 0120 26E0     		b	.L104
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 54


 2480              	.L119:
 468:.\main.c      ****         
 469:.\main.c      ****         case send_wait:
 470:.\main.c      ****             if(HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 2481              		.loc 2 470 0
 2482 0122 184B     		ldr	r3, .L125+16
 2483 0124 1B78     		ldrb	r3, [r3]
 2484 0126 002B     		cmp	r3, #0
 2485 0128 0AD0     		beq	.L121
 2486              		.loc 2 470 0 is_stmt 0 discriminator 1
 2487 012a FFF7FEFF 		bl	WIZ_INT_Read
 2488 012e 031C     		mov	r3, r0
 2489 0130 002B     		cmp	r3, #0
 2490 0132 05D1     		bne	.L121
 471:.\main.c      ****             {
 472:.\main.c      ****                 wiznetClearInterrupts();    
 2491              		.loc 2 472 0 is_stmt 1
 2492 0134 FFF7FEFF 		bl	wiznetClearInterrupts
 473:.\main.c      ****                 send_packet_state = send_heartbeat;
 2493              		.loc 2 473 0
 2494 0138 0E4B     		ldr	r3, .L125
 2495 013a 0322     		mov	r2, #3
 2496 013c 1A70     		strb	r2, [r3]
 2497 013e 12E0     		b	.L122
 2498              	.L121:
 474:.\main.c      ****             }
 475:.\main.c      ****             else if(!HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 2499              		.loc 2 475 0
 2500 0140 104B     		ldr	r3, .L125+16
 2501 0142 1B78     		ldrb	r3, [r3]
 2502 0144 002B     		cmp	r3, #0
 2503 0146 0AD1     		bne	.L123
 2504              		.loc 2 475 0 is_stmt 0 discriminator 1
 2505 0148 FFF7FEFF 		bl	WIZ_INT_Read
 2506 014c 031C     		mov	r3, r0
 2507 014e 002B     		cmp	r3, #0
 2508 0150 05D1     		bne	.L123
 476:.\main.c      ****             {
 477:.\main.c      ****                 wiznetClearInterrupts();    
 2509              		.loc 2 477 0 is_stmt 1
 2510 0152 FFF7FEFF 		bl	wiznetClearInterrupts
 478:.\main.c      ****                 send_packet_state = send_feedback;
 2511              		.loc 2 478 0
 2512 0156 074B     		ldr	r3, .L125
 2513 0158 0222     		mov	r2, #2
 2514 015a 1A70     		strb	r2, [r3]
 2515 015c 03E0     		b	.L122
 2516              	.L123:
 479:.\main.c      ****             }
 480:.\main.c      ****             else
 481:.\main.c      ****             {
 482:.\main.c      ****                 send_packet_state = send_wait;
 2517              		.loc 2 482 0
 2518 015e 054B     		ldr	r3, .L125
 2519 0160 0422     		mov	r2, #4
 2520 0162 1A70     		strb	r2, [r3]
 483:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 55


 484:.\main.c      ****             break;
 2521              		.loc 2 484 0
 2522 0164 04E0     		b	.L104
 2523              	.L122:
 2524 0166 03E0     		b	.L104
 2525              	.L113:
 485:.\main.c      **** 
 486:.\main.c      ****         default:
 487:.\main.c      ****             send_packet_state = send_start;
 2526              		.loc 2 487 0
 2527 0168 024B     		ldr	r3, .L125
 2528 016a 0022     		mov	r2, #0
 2529 016c 1A70     		strb	r2, [r3]
 488:.\main.c      ****             break;
 2530              		.loc 2 488 0
 2531 016e C046     		mov	r8, r8
 2532              	.L104:
 489:.\main.c      ****     }    
 490:.\main.c      **** }
 2533              		.loc 2 490 0
 2534 0170 BD46     		mov	sp, r7
 2535              		@ sp needed
 2536 0172 80BD     		pop	{r7, pc}
 2537              	.L126:
 2538              		.align	2
 2539              	.L125:
 2540 0174 00000000 		.word	send_packet_state
 2541 0178 00000000 		.word	.L107
 2542 017c 00000000 		.word	feedback_array
 2543 0180 00000000 		.word	heartbeat_array
 2544 0184 00000000 		.word	HEARTBEAT_FLAG
 2545 0188 14000000 		.word	.L115
 2546              		.cfi_endproc
 2547              	.LFE51:
 2548              		.size	send_packet, .-send_packet
 2549              		.section	.text.fill_data_array,"ax",%progbits
 2550              		.align	2
 2551              		.global	fill_data_array
 2552              		.code	16
 2553              		.thumb_func
 2554              		.type	fill_data_array, %function
 2555              	fill_data_array:
 2556              	.LFB52:
 491:.\main.c      **** 
 492:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 493:.\main.c      **** void fill_data_array()
 494:.\main.c      **** {
 2557              		.loc 2 494 0
 2558              		.cfi_startproc
 2559 0000 80B5     		push	{r7, lr}
 2560              		.cfi_def_cfa_offset 8
 2561              		.cfi_offset 7, -8
 2562              		.cfi_offset 14, -4
 2563 0002 00AF     		add	r7, sp, #0
 2564              		.cfi_def_cfa_register 7
 495:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 2565              		.loc 2 495 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 56


 2566 0004 034B     		ldr	r3, .L128
 2567 0006 181C     		mov	r0, r3
 2568 0008 1621     		mov	r1, #22
 2569 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 496:.\main.c      **** }
 2570              		.loc 2 496 0
 2571 000e BD46     		mov	sp, r7
 2572              		@ sp needed
 2573 0010 80BD     		pop	{r7, pc}
 2574              	.L129:
 2575 0012 C046     		.align	2
 2576              	.L128:
 2577 0014 00000000 		.word	data_array
 2578              		.cfi_endproc
 2579              	.LFE52:
 2580              		.size	fill_data_array, .-fill_data_array
 2581              		.comm	wristTilt_state,1,1
 2582              		.section	.text.wristTilt,"ax",%progbits
 2583              		.align	2
 2584              		.global	wristTilt
 2585              		.code	16
 2586              		.thumb_func
 2587              		.type	wristTilt, %function
 2588              	wristTilt:
 2589              	.LFB53:
 497:.\main.c      **** 
 498:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 499:.\main.c      **** //control the tilting motion of the wrist
 500:.\main.c      **** //uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 501:.\main.c      **** void wristTilt()
 502:.\main.c      **** {
 2590              		.loc 2 502 0
 2591              		.cfi_startproc
 2592 0000 90B5     		push	{r4, r7, lr}
 2593              		.cfi_def_cfa_offset 12
 2594              		.cfi_offset 4, -12
 2595              		.cfi_offset 7, -8
 2596              		.cfi_offset 14, -4
 2597 0002 83B0     		sub	sp, sp, #12
 2598              		.cfi_def_cfa_offset 24
 2599 0004 00AF     		add	r7, sp, #0
 2600              		.cfi_def_cfa_register 7
 503:.\main.c      ****     // Overview
 504:.\main.c      ****     //take instruction from data_array
 505:.\main.c      ****     //smooth input
 506:.\main.c      ****     //actuate the tilting using UART
 507:.\main.c      ****     //get feedback
 508:.\main.c      **** 
 509:.\main.c      ****     //-------------------------- 
 510:.\main.c      ****     // Dynamixel Servo specific
 511:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 512:.\main.c      ****     // TODO: Set the desired position
 513:.\main.c      **** 
 514:.\main.c      ****     //--------------------------
 515:.\main.c      ****     // State machine
 516:.\main.c      ****     
 517:.\main.c      ****     uint8 i;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 57


 518:.\main.c      ****     uint16 avg;
 519:.\main.c      ****     uint16 command;
 520:.\main.c      ****     
 521:.\main.c      ****     switch(wristTilt_state){ //actions
 2601              		.loc 2 521 0
 2602 0006 394B     		ldr	r3, .L151
 2603 0008 1B78     		ldrb	r3, [r3]
 2604 000a 012B     		cmp	r3, #1
 2605 000c 08D0     		beq	.L132
 2606 000e 02DC     		bgt	.L133
 2607 0010 002B     		cmp	r3, #0
 2608 0012 33D0     		beq	.L149
 2609 0014 2EE0     		b	.L131
 2610              	.L133:
 2611 0016 022B     		cmp	r3, #2
 2612 0018 0DD0     		beq	.L135
 2613 001a 032B     		cmp	r3, #3
 2614 001c 30D0     		beq	.L150
 2615 001e 29E0     		b	.L131
 2616              	.L132:
 522:.\main.c      ****         case tilt_start:
 523:.\main.c      ****             break;
 524:.\main.c      **** 
 525:.\main.c      ****         case tilt_init:
 526:.\main.c      **** //            for(i = 0; i < WT_ARR_SIZE; i++)
 527:.\main.c      **** //            {
 528:.\main.c      **** //                WT_array[i] = 1500; //TODO: make sure this is the neutral value
 529:.\main.c      **** //            }
 530:.\main.c      **** //            WT_arr_cspot = 0;
 531:.\main.c      ****             
 532:.\main.c      ****             ServoGoalPosition(0x02, 2048);
 2617              		.loc 2 532 0
 2618 0020 8023     		mov	r3, #128
 2619 0022 1B01     		lsl	r3, r3, #4
 2620 0024 0220     		mov	r0, #2
 2621 0026 191C     		mov	r1, r3
 2622 0028 FFF7FEFF 		bl	ServoGoalPosition
 533:.\main.c      ****             latest_WT_command = 2048;
 2623              		.loc 2 533 0
 2624 002c 304B     		ldr	r3, .L151+4
 2625 002e 8022     		mov	r2, #128
 2626 0030 1201     		lsl	r2, r2, #4
 2627 0032 1A80     		strh	r2, [r3]
 534:.\main.c      ****             break;
 2628              		.loc 2 534 0
 2629 0034 25E0     		b	.L137
 2630              	.L135:
 535:.\main.c      **** 
 536:.\main.c      ****         case tilt_control:
 537:.\main.c      ****             command = make_wristTilt_command(data_array, WT_BYTE_1, WT_BYTE_2);
 2631              		.loc 2 537 0
 2632 0036 BC1D     		add	r4, r7, #6
 2633 0038 2E4B     		ldr	r3, .L151+8
 2634 003a 181C     		mov	r0, r3
 2635 003c 1021     		mov	r1, #16
 2636 003e 1122     		mov	r2, #17
 2637 0040 FFF7FEFF 		bl	make_wristTilt_command
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 58


 2638 0044 031C     		mov	r3, r0
 2639 0046 2380     		strh	r3, [r4]
 538:.\main.c      ****             
 539:.\main.c      ****             //WT_array[WT_arr_cspot] = command;
 540:.\main.c      ****             
 541:.\main.c      ****             //maintain_array(WT_arr_cspot,WT_ARR_SIZE);
 542:.\main.c      ****             
 543:.\main.c      ****             latest_WT_command = WT_pos_to_vel(command, latest_WT_command);
 2640              		.loc 2 543 0
 2641 0048 294B     		ldr	r3, .L151+4
 2642 004a 1B88     		ldrh	r3, [r3]
 2643 004c BA1D     		add	r2, r7, #6
 2644 004e 1288     		ldrh	r2, [r2]
 2645 0050 101C     		mov	r0, r2
 2646 0052 191C     		mov	r1, r3
 2647 0054 FFF7FEFF 		bl	WT_pos_to_vel
 2648 0058 031C     		mov	r3, r0
 2649 005a 1A1C     		mov	r2, r3
 2650 005c 244B     		ldr	r3, .L151+4
 2651 005e 1A80     		strh	r2, [r3]
 544:.\main.c      ****             
 545:.\main.c      ****             //avg = average(WT_array, WT_ARR_SIZE);
 546:.\main.c      ****             
 547:.\main.c      ****             ServoGoalPosition(0x02, latest_WT_command);
 2652              		.loc 2 547 0
 2653 0060 234B     		ldr	r3, .L151+4
 2654 0062 1B88     		ldrh	r3, [r3]
 2655 0064 0220     		mov	r0, #2
 2656 0066 191C     		mov	r1, r3
 2657 0068 FFF7FEFF 		bl	ServoGoalPosition
 548:.\main.c      ****             
 549:.\main.c      **** //            if(avg <= 2000 && avg >= 1000)
 550:.\main.c      **** //            {
 551:.\main.c      **** //                ServoGoalPosition(0x02, avg);
 552:.\main.c      **** //            }
 553:.\main.c      **** //            else
 554:.\main.c      **** //            {
 555:.\main.c      **** //                //increment error variable
 556:.\main.c      **** //                ServoGoalPosition(0x02, 2048); //TODO: write a neutral value
 557:.\main.c      **** //            }
 558:.\main.c      ****             WT_FLAG = 0;
 2658              		.loc 2 558 0
 2659 006c 224B     		ldr	r3, .L151+12
 2660 006e 0022     		mov	r2, #0
 2661 0070 1A70     		strb	r2, [r3]
 559:.\main.c      ****             break;
 2662              		.loc 2 559 0
 2663 0072 06E0     		b	.L137
 2664              	.L131:
 560:.\main.c      ****             
 561:.\main.c      ****         case tilt_wait:
 562:.\main.c      ****             break;
 563:.\main.c      ****                         
 564:.\main.c      ****         default:
 565:.\main.c      ****             wristTilt_state = tilt_start;
 2665              		.loc 2 565 0
 2666 0074 1D4B     		ldr	r3, .L151
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 59


 2667 0076 0022     		mov	r2, #0
 2668 0078 1A70     		strb	r2, [r3]
 566:.\main.c      ****             break;
 2669              		.loc 2 566 0
 2670 007a 02E0     		b	.L137
 2671              	.L149:
 523:.\main.c      ****             break;
 2672              		.loc 2 523 0
 2673 007c C046     		mov	r8, r8
 2674 007e 00E0     		b	.L137
 2675              	.L150:
 562:.\main.c      ****             break;
 2676              		.loc 2 562 0
 2677 0080 C046     		mov	r8, r8
 2678              	.L137:
 567:.\main.c      ****     }
 568:.\main.c      ****     
 569:.\main.c      ****     switch(wristTilt_state){ //transitions
 2679              		.loc 2 569 0
 2680 0082 1A4B     		ldr	r3, .L151
 2681 0084 1B78     		ldrb	r3, [r3]
 2682 0086 012B     		cmp	r3, #1
 2683 0088 0CD0     		beq	.L139
 2684 008a 02DC     		bgt	.L140
 2685 008c 002B     		cmp	r3, #0
 2686 008e 05D0     		beq	.L141
 2687 0090 24E0     		b	.L138
 2688              	.L140:
 2689 0092 022B     		cmp	r3, #2
 2690 0094 0AD0     		beq	.L142
 2691 0096 032B     		cmp	r3, #3
 2692 0098 14D0     		beq	.L143
 2693 009a 1FE0     		b	.L138
 2694              	.L141:
 570:.\main.c      ****         case tilt_start:
 571:.\main.c      ****             wristTilt_state = tilt_init;
 2695              		.loc 2 571 0
 2696 009c 134B     		ldr	r3, .L151
 2697 009e 0122     		mov	r2, #1
 2698 00a0 1A70     		strb	r2, [r3]
 572:.\main.c      ****             break;
 2699              		.loc 2 572 0
 2700 00a2 1FE0     		b	.L130
 2701              	.L139:
 573:.\main.c      ****         
 574:.\main.c      ****         case tilt_init:
 575:.\main.c      ****             wristTilt_state = tilt_wait;
 2702              		.loc 2 575 0
 2703 00a4 114B     		ldr	r3, .L151
 2704 00a6 0322     		mov	r2, #3
 2705 00a8 1A70     		strb	r2, [r3]
 576:.\main.c      ****             break;
 2706              		.loc 2 576 0
 2707 00aa 1BE0     		b	.L130
 2708              	.L142:
 577:.\main.c      ****         
 578:.\main.c      ****         case tilt_control:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 60


 579:.\main.c      ****             if(WT_FLAG)
 2709              		.loc 2 579 0
 2710 00ac 124B     		ldr	r3, .L151+12
 2711 00ae 1B78     		ldrb	r3, [r3]
 2712 00b0 002B     		cmp	r3, #0
 2713 00b2 03D0     		beq	.L145
 580:.\main.c      ****             {
 581:.\main.c      ****                 wristTilt_state = tilt_control;
 2714              		.loc 2 581 0
 2715 00b4 0D4B     		ldr	r3, .L151
 2716 00b6 0222     		mov	r2, #2
 2717 00b8 1A70     		strb	r2, [r3]
 582:.\main.c      ****             }
 583:.\main.c      ****             else
 584:.\main.c      ****             {
 585:.\main.c      ****                 wristTilt_state = tilt_wait;
 586:.\main.c      ****             }
 587:.\main.c      ****             break;
 2718              		.loc 2 587 0
 2719 00ba 13E0     		b	.L130
 2720              	.L145:
 585:.\main.c      ****                 wristTilt_state = tilt_wait;
 2721              		.loc 2 585 0
 2722 00bc 0B4B     		ldr	r3, .L151
 2723 00be 0322     		mov	r2, #3
 2724 00c0 1A70     		strb	r2, [r3]
 2725              		.loc 2 587 0
 2726 00c2 0FE0     		b	.L130
 2727              	.L143:
 588:.\main.c      ****         
 589:.\main.c      ****         case tilt_wait:
 590:.\main.c      ****             if(WT_FLAG)
 2728              		.loc 2 590 0
 2729 00c4 0C4B     		ldr	r3, .L151+12
 2730 00c6 1B78     		ldrb	r3, [r3]
 2731 00c8 002B     		cmp	r3, #0
 2732 00ca 03D0     		beq	.L147
 591:.\main.c      ****             {
 592:.\main.c      ****                 wristTilt_state = tilt_control;
 2733              		.loc 2 592 0
 2734 00cc 074B     		ldr	r3, .L151
 2735 00ce 0222     		mov	r2, #2
 2736 00d0 1A70     		strb	r2, [r3]
 593:.\main.c      ****             }
 594:.\main.c      ****             else
 595:.\main.c      ****             {
 596:.\main.c      ****                 wristTilt_state = tilt_wait; 
 597:.\main.c      ****             }
 598:.\main.c      ****             break;
 2737              		.loc 2 598 0
 2738 00d2 07E0     		b	.L130
 2739              	.L147:
 596:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2740              		.loc 2 596 0
 2741 00d4 054B     		ldr	r3, .L151
 2742 00d6 0322     		mov	r2, #3
 2743 00d8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 61


 2744              		.loc 2 598 0
 2745 00da 03E0     		b	.L130
 2746              	.L138:
 599:.\main.c      ****             
 600:.\main.c      ****         default:
 601:.\main.c      ****             wristTilt_state = tilt_start;
 2747              		.loc 2 601 0
 2748 00dc 034B     		ldr	r3, .L151
 2749 00de 0022     		mov	r2, #0
 2750 00e0 1A70     		strb	r2, [r3]
 602:.\main.c      ****             break;
 2751              		.loc 2 602 0
 2752 00e2 C046     		mov	r8, r8
 2753              	.L130:
 603:.\main.c      ****     }  
 604:.\main.c      ****     //return WT_arr_cspot;
 605:.\main.c      **** }
 2754              		.loc 2 605 0
 2755 00e4 BD46     		mov	sp, r7
 2756 00e6 03B0     		add	sp, sp, #12
 2757              		@ sp needed
 2758 00e8 90BD     		pop	{r4, r7, pc}
 2759              	.L152:
 2760 00ea C046     		.align	2
 2761              	.L151:
 2762 00ec 00000000 		.word	wristTilt_state
 2763 00f0 00000000 		.word	latest_WT_command
 2764 00f4 00000000 		.word	data_array
 2765 00f8 00000000 		.word	WT_FLAG
 2766              		.cfi_endproc
 2767              	.LFE53:
 2768              		.size	wristTilt, .-wristTilt
 2769              		.comm	wristRotate_state,1,1
 2770              		.section	.text.wristRotate,"ax",%progbits
 2771              		.align	2
 2772              		.global	wristRotate
 2773              		.code	16
 2774              		.thumb_func
 2775              		.type	wristRotate, %function
 2776              	wristRotate:
 2777              	.LFB54:
 606:.\main.c      **** 
 607:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait , rotate_feedback} 
 608:.\main.c      **** //control the rotating motion of the wrist
 609:.\main.c      **** //uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 610:.\main.c      **** void wristRotate()
 611:.\main.c      **** {
 2778              		.loc 2 611 0
 2779              		.cfi_startproc
 2780 0000 90B5     		push	{r4, r7, lr}
 2781              		.cfi_def_cfa_offset 12
 2782              		.cfi_offset 4, -12
 2783              		.cfi_offset 7, -8
 2784              		.cfi_offset 14, -4
 2785 0002 83B0     		sub	sp, sp, #12
 2786              		.cfi_def_cfa_offset 24
 2787 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 62


 2788              		.cfi_def_cfa_register 7
 612:.\main.c      ****     //Overview
 613:.\main.c      ****     //take instruction from data_array
 614:.\main.c      ****     //smooth input
 615:.\main.c      ****     //actuate the tilting using UART
 616:.\main.c      ****     //get feedback
 617:.\main.c      **** 
 618:.\main.c      ****     //-------------------------- 
 619:.\main.c      ****     // Dynamixel Servo specific
 620:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 621:.\main.c      ****     // TODO: Set the desired position
 622:.\main.c      **** 
 623:.\main.c      ****     //--------------------------
 624:.\main.c      ****     // State machine
 625:.\main.c      ****     
 626:.\main.c      ****     uint8 i;
 627:.\main.c      ****     uint16 avg;
 628:.\main.c      ****     uint16 command;
 629:.\main.c      ****     
 630:.\main.c      ****     switch(wristRotate_state){ //actions
 2789              		.loc 2 630 0
 2790 0006 364B     		ldr	r3, .L175
 2791 0008 1B78     		ldrb	r3, [r3]
 2792 000a 042B     		cmp	r3, #4
 2793 000c 2ED8     		bhi	.L154
 2794 000e 9A00     		lsl	r2, r3, #2
 2795 0010 344B     		ldr	r3, .L175+4
 2796 0012 D318     		add	r3, r2, r3
 2797 0014 1B68     		ldr	r3, [r3]
 2798 0016 9F46     		mov	pc, r3
 2799              		.section	.rodata
 2800              		.align	2
 2801              	.L156:
 2802 0028 74000000 		.word	.L174
 2803 002c 18000000 		.word	.L157
 2804 0030 2E000000 		.word	.L158
 2805 0034 74000000 		.word	.L174
 2806 0038 74000000 		.word	.L174
 2807              		.section	.text.wristRotate
 2808              	.L157:
 631:.\main.c      ****         case rotate_start:
 632:.\main.c      ****             break;
 633:.\main.c      **** 
 634:.\main.c      ****         case rotate_init:
 635:.\main.c      **** //            for(i = 0; i < WR_ARR_SIZE; i++)
 636:.\main.c      **** //            {
 637:.\main.c      **** //                WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 638:.\main.c      **** //            }
 639:.\main.c      **** //            WR_arr_cspot = 0;
 640:.\main.c      ****             //TODO: check id
 641:.\main.c      ****             ServoGoalPosition(0x01, 2048); //TODO: Make sure this is the neutral value
 2809              		.loc 2 641 0
 2810 0018 8023     		mov	r3, #128
 2811 001a 1B01     		lsl	r3, r3, #4
 2812 001c 0120     		mov	r0, #1
 2813 001e 191C     		mov	r1, r3
 2814 0020 FFF7FEFF 		bl	ServoGoalPosition
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 63


 642:.\main.c      ****             latest_WR_command = 2048;
 2815              		.loc 2 642 0
 2816 0024 304B     		ldr	r3, .L175+8
 2817 0026 8022     		mov	r2, #128
 2818 0028 1201     		lsl	r2, r2, #4
 2819 002a 1A80     		strh	r2, [r3]
 643:.\main.c      ****             break;
 2820              		.loc 2 643 0
 2821 002c 23E0     		b	.L161
 2822              	.L158:
 644:.\main.c      **** 
 645:.\main.c      ****         case rotate_control:
 646:.\main.c      ****             command = make_wristRotate_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2823              		.loc 2 646 0
 2824 002e BC1D     		add	r4, r7, #6
 2825 0030 2E4B     		ldr	r3, .L175+12
 2826 0032 181C     		mov	r0, r3
 2827 0034 1221     		mov	r1, #18
 2828 0036 1322     		mov	r2, #19
 2829 0038 FFF7FEFF 		bl	make_wristRotate_command
 2830 003c 031C     		mov	r3, r0
 2831 003e 2380     		strh	r3, [r4]
 647:.\main.c      ****             
 648:.\main.c      ****             //WR_array[WR_arr_cspot] = command;
 649:.\main.c      ****             
 650:.\main.c      ****             //maintain_array(WR_arr_cspot,WR_ARR_SIZE);
 651:.\main.c      ****             
 652:.\main.c      ****             latest_WR_command = WR_pos_to_vel(command,latest_WR_command);
 2832              		.loc 2 652 0
 2833 0040 294B     		ldr	r3, .L175+8
 2834 0042 1B88     		ldrh	r3, [r3]
 2835 0044 BA1D     		add	r2, r7, #6
 2836 0046 1288     		ldrh	r2, [r2]
 2837 0048 101C     		mov	r0, r2
 2838 004a 191C     		mov	r1, r3
 2839 004c FFF7FEFF 		bl	WR_pos_to_vel
 2840 0050 031C     		mov	r3, r0
 2841 0052 1A1C     		mov	r2, r3
 2842 0054 244B     		ldr	r3, .L175+8
 2843 0056 1A80     		strh	r2, [r3]
 653:.\main.c      ****             
 654:.\main.c      ****             ServoGoalPosition(0x01, latest_WR_command);
 2844              		.loc 2 654 0
 2845 0058 234B     		ldr	r3, .L175+8
 2846 005a 1B88     		ldrh	r3, [r3]
 2847 005c 0120     		mov	r0, #1
 2848 005e 191C     		mov	r1, r3
 2849 0060 FFF7FEFF 		bl	ServoGoalPosition
 655:.\main.c      ****             
 656:.\main.c      ****             //avg = average(WR_array, WR_ARR_SIZE);
 657:.\main.c      ****             
 658:.\main.c      **** //            if(avg <= 2000 && avg >= 1000)
 659:.\main.c      **** //            {
 660:.\main.c      **** //                //TODO: maybe scale avg between 0 and 3000
 661:.\main.c      **** //                ServoGoalPosition(0x01, avg);
 662:.\main.c      **** //                WR_feedback_flag = 1;
 663:.\main.c      **** //                //bi-dir sel
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 64


 664:.\main.c      **** //            }
 665:.\main.c      **** //            else
 666:.\main.c      **** //            {
 667:.\main.c      **** //                //increment error variable
 668:.\main.c      **** //                //TODO: if we scale, change the "neutral" value
 669:.\main.c      **** //                ServoGoalPosition(0x01, 1500);
 670:.\main.c      **** //            }
 671:.\main.c      ****             WR_FLAG = 0;//thinking about using pin 22/23 to implement bi-dir select line
 2850              		.loc 2 671 0
 2851 0064 224B     		ldr	r3, .L175+16
 2852 0066 0022     		mov	r2, #0
 2853 0068 1A70     		strb	r2, [r3]
 672:.\main.c      ****             break;
 2854              		.loc 2 672 0
 2855 006a 04E0     		b	.L161
 2856              	.L154:
 673:.\main.c      ****             
 674:.\main.c      ****         case rotate_wait:
 675:.\main.c      ****             break;
 676:.\main.c      ****             
 677:.\main.c      ****         case rotate_feedback:
 678:.\main.c      **** //            WR_feedback = Wrist_UART_SpiUartReadRxData();
 679:.\main.c      **** //            if(WR_feedback == 0)
 680:.\main.c      **** //            {
 681:.\main.c      **** //                Time_count++;
 682:.\main.c      **** //            }
 683:.\main.c      **** //            else{
 684:.\main.c      **** //                WR_feedback_flag = 0;
 685:.\main.c      **** //            }
 686:.\main.c      ****             break;
 687:.\main.c      ****         default:
 688:.\main.c      ****             wristRotate_state = rotate_start;
 2857              		.loc 2 688 0
 2858 006c 1C4B     		ldr	r3, .L175
 2859 006e 0022     		mov	r2, #0
 2860 0070 1A70     		strb	r2, [r3]
 689:.\main.c      ****             break;
 2861              		.loc 2 689 0
 2862 0072 00E0     		b	.L161
 2863              	.L174:
 686:.\main.c      ****             break;
 2864              		.loc 2 686 0
 2865 0074 C046     		mov	r8, r8
 2866              	.L161:
 690:.\main.c      ****     }
 691:.\main.c      ****     
 692:.\main.c      ****     switch(wristRotate_state){ //transitions
 2867              		.loc 2 692 0
 2868 0076 1A4B     		ldr	r3, .L175
 2869 0078 1B78     		ldrb	r3, [r3]
 2870 007a 042B     		cmp	r3, #4
 2871 007c 28D8     		bhi	.L162
 2872 007e 9A00     		lsl	r2, r3, #2
 2873 0080 1C4B     		ldr	r3, .L175+20
 2874 0082 D318     		add	r3, r2, r3
 2875 0084 1B68     		ldr	r3, [r3]
 2876 0086 9F46     		mov	pc, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 65


 2877              		.section	.rodata
 2878              		.align	2
 2879              	.L164:
 2880 003c 88000000 		.word	.L163
 2881 0040 90000000 		.word	.L165
 2882 0044 98000000 		.word	.L166
 2883 0048 B0000000 		.word	.L167
 2884 004c C8000000 		.word	.L168
 2885              		.section	.text.wristRotate
 2886              	.L163:
 693:.\main.c      ****         case rotate_start:
 694:.\main.c      ****             wristRotate_state = rotate_init;
 2887              		.loc 2 694 0
 2888 0088 154B     		ldr	r3, .L175
 2889 008a 0122     		mov	r2, #1
 2890 008c 1A70     		strb	r2, [r3]
 695:.\main.c      ****             break;
 2891              		.loc 2 695 0
 2892 008e 23E0     		b	.L153
 2893              	.L165:
 696:.\main.c      ****         
 697:.\main.c      ****         case rotate_init:
 698:.\main.c      ****             wristRotate_state = rotate_wait;
 2894              		.loc 2 698 0
 2895 0090 134B     		ldr	r3, .L175
 2896 0092 0322     		mov	r2, #3
 2897 0094 1A70     		strb	r2, [r3]
 699:.\main.c      ****             break;
 2898              		.loc 2 699 0
 2899 0096 1FE0     		b	.L153
 2900              	.L166:
 700:.\main.c      ****         
 701:.\main.c      ****         case rotate_control:
 702:.\main.c      ****             if(WR_FLAG)
 2901              		.loc 2 702 0
 2902 0098 154B     		ldr	r3, .L175+16
 2903 009a 1B78     		ldrb	r3, [r3]
 2904 009c 002B     		cmp	r3, #0
 2905 009e 03D0     		beq	.L170
 703:.\main.c      ****             {
 704:.\main.c      ****                 wristRotate_state = rotate_control;
 2906              		.loc 2 704 0
 2907 00a0 0F4B     		ldr	r3, .L175
 2908 00a2 0222     		mov	r2, #2
 2909 00a4 1A70     		strb	r2, [r3]
 705:.\main.c      ****             }
 706:.\main.c      ****             else
 707:.\main.c      ****             {
 708:.\main.c      ****                 wristRotate_state = rotate_wait;
 709:.\main.c      ****             }//thinking about using pin 22/23 to implement bi-dir select line
 710:.\main.c      ****             break;
 2910              		.loc 2 710 0
 2911 00a6 17E0     		b	.L153
 2912              	.L170:
 708:.\main.c      ****                 wristRotate_state = rotate_wait;
 2913              		.loc 2 708 0
 2914 00a8 0D4B     		ldr	r3, .L175
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 66


 2915 00aa 0322     		mov	r2, #3
 2916 00ac 1A70     		strb	r2, [r3]
 2917              		.loc 2 710 0
 2918 00ae 13E0     		b	.L153
 2919              	.L167:
 711:.\main.c      ****         
 712:.\main.c      ****         case rotate_wait:
 713:.\main.c      ****             if(WR_FLAG)
 2920              		.loc 2 713 0
 2921 00b0 0F4B     		ldr	r3, .L175+16
 2922 00b2 1B78     		ldrb	r3, [r3]
 2923 00b4 002B     		cmp	r3, #0
 2924 00b6 03D0     		beq	.L172
 714:.\main.c      ****             {
 715:.\main.c      ****                 wristRotate_state = rotate_control;
 2925              		.loc 2 715 0
 2926 00b8 094B     		ldr	r3, .L175
 2927 00ba 0222     		mov	r2, #2
 2928 00bc 1A70     		strb	r2, [r3]
 716:.\main.c      ****             }
 717:.\main.c      ****             else
 718:.\main.c      ****             {
 719:.\main.c      ****                 wristRotate_state = rotate_wait;
 720:.\main.c      ****             }
 721:.\main.c      ****             break;
 2929              		.loc 2 721 0
 2930 00be 0BE0     		b	.L153
 2931              	.L172:
 719:.\main.c      ****                 wristRotate_state = rotate_wait;
 2932              		.loc 2 719 0
 2933 00c0 074B     		ldr	r3, .L175
 2934 00c2 0322     		mov	r2, #3
 2935 00c4 1A70     		strb	r2, [r3]
 2936              		.loc 2 721 0
 2937 00c6 07E0     		b	.L153
 2938              	.L168:
 722:.\main.c      ****         case rotate_feedback:
 723:.\main.c      **** //            if(Time_count>=6||WR_feedback_flag==0)
 724:.\main.c      **** //            {
 725:.\main.c      **** //                wristRotate_state = rotate_wait;
 726:.\main.c      **** //            }//thinking about using pin 22/23 to implement bi-dir select line
 727:.\main.c      **** //            else{
 728:.\main.c      **** //                wristRotate_state = rotate_feedback;
 729:.\main.c      **** //            }
 730:.\main.c      ****             wristRotate_state = rotate_wait;
 2939              		.loc 2 730 0
 2940 00c8 054B     		ldr	r3, .L175
 2941 00ca 0322     		mov	r2, #3
 2942 00cc 1A70     		strb	r2, [r3]
 731:.\main.c      ****             break;
 2943              		.loc 2 731 0
 2944 00ce 03E0     		b	.L153
 2945              	.L162:
 732:.\main.c      ****             
 733:.\main.c      ****         default:
 734:.\main.c      ****             wristRotate_state = rotate_start;
 2946              		.loc 2 734 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 67


 2947 00d0 034B     		ldr	r3, .L175
 2948 00d2 0022     		mov	r2, #0
 2949 00d4 1A70     		strb	r2, [r3]
 735:.\main.c      ****             break;
 2950              		.loc 2 735 0
 2951 00d6 C046     		mov	r8, r8
 2952              	.L153:
 736:.\main.c      ****     }  
 737:.\main.c      ****     //return WR_arr_cspot;
 738:.\main.c      **** }
 2953              		.loc 2 738 0
 2954 00d8 BD46     		mov	sp, r7
 2955 00da 03B0     		add	sp, sp, #12
 2956              		@ sp needed
 2957 00dc 90BD     		pop	{r4, r7, pc}
 2958              	.L176:
 2959 00de C046     		.align	2
 2960              	.L175:
 2961 00e0 00000000 		.word	wristRotate_state
 2962 00e4 28000000 		.word	.L156
 2963 00e8 00000000 		.word	latest_WR_command
 2964 00ec 00000000 		.word	data_array
 2965 00f0 00000000 		.word	WR_FLAG
 2966 00f4 3C000000 		.word	.L164
 2967              		.cfi_endproc
 2968              	.LFE54:
 2969              		.size	wristRotate, .-wristRotate
 2970              		.comm	elbow_state,1,1
 2971              		.section	.text.elbow,"ax",%progbits
 2972              		.align	2
 2973              		.global	elbow
 2974              		.code	16
 2975              		.thumb_func
 2976              		.type	elbow, %function
 2977              	elbow:
 2978              	.LFB55:
 739:.\main.c      **** 
 740:.\main.c      **** //control the elbow
 741:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 742:.\main.c      **** //void elbow(uint8* elbw_arr_cspot, uint16* elbow_array)
 743:.\main.c      **** void elbow()
 744:.\main.c      **** { 
 2979              		.loc 2 744 0
 2980              		.cfi_startproc
 2981 0000 90B5     		push	{r4, r7, lr}
 2982              		.cfi_def_cfa_offset 12
 2983              		.cfi_offset 4, -12
 2984              		.cfi_offset 7, -8
 2985              		.cfi_offset 14, -4
 2986 0002 83B0     		sub	sp, sp, #12
 2987              		.cfi_def_cfa_offset 24
 2988 0004 00AF     		add	r7, sp, #0
 2989              		.cfi_def_cfa_register 7
 745:.\main.c      ****     //take instruction from data_array
 746:.\main.c      ****     //smooth input
 747:.\main.c      ****     //actuate the elbow using PWM
 748:.\main.c      ****     //get feedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 68


 749:.\main.c      ****     uint8 i;
 750:.\main.c      ****     uint16 avg;
 751:.\main.c      ****     uint16 command;
 752:.\main.c      ****     
 753:.\main.c      ****     //uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 754:.\main.c      ****     
 755:.\main.c      ****     switch(elbow_state){ //actions
 2990              		.loc 2 755 0
 2991 0006 3B4B     		ldr	r3, .L200
 2992 0008 1B78     		ldrb	r3, [r3]
 2993 000a 012B     		cmp	r3, #1
 2994 000c 08D0     		beq	.L179
 2995 000e 02DC     		bgt	.L180
 2996 0010 002B     		cmp	r3, #0
 2997 0012 38D0     		beq	.L198
 2998 0014 33E0     		b	.L178
 2999              	.L180:
 3000 0016 022B     		cmp	r3, #2
 3001 0018 08D0     		beq	.L182
 3002 001a 032B     		cmp	r3, #3
 3003 001c 35D0     		beq	.L199
 3004 001e 2EE0     		b	.L178
 3005              	.L179:
 756:.\main.c      ****         case elbw_start:
 757:.\main.c      ****             break;
 758:.\main.c      **** 
 759:.\main.c      ****         case elbw_init:
 760:.\main.c      **** //            for(i = 0; i < ELBW_ARR_SIZE; i++)
 761:.\main.c      **** //            {
 762:.\main.c      **** //                elbow_array[i] = NEUTRAL;
 763:.\main.c      **** //            }
 764:.\main.c      **** //            *elbw_arr_cspot = 0;
 765:.\main.c      ****             
 766:.\main.c      ****             ELBW_PWM_WriteCompare(NEUTRAL);
 3006              		.loc 2 766 0
 3007 0020 354B     		ldr	r3, .L200+4
 3008 0022 1B88     		ldrh	r3, [r3]
 3009 0024 181C     		mov	r0, r3
 3010 0026 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 767:.\main.c      ****             break;
 3011              		.loc 2 767 0
 3012 002a 2FE0     		b	.L184
 3013              	.L182:
 768:.\main.c      **** 
 769:.\main.c      ****         case elbw_execute:
 770:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 3014              		.loc 2 770 0
 3015 002c BC1D     		add	r4, r7, #6
 3016 002e 334B     		ldr	r3, .L200+8
 3017 0030 181C     		mov	r0, r3
 3018 0032 0E21     		mov	r1, #14
 3019 0034 0F22     		mov	r2, #15
 3020 0036 FFF7FEFF 		bl	make_command
 3021 003a 031C     		mov	r3, r0
 3022 003c 2380     		strh	r3, [r4]
 771:.\main.c      ****             
 772:.\main.c      ****             //elbow_array[*elbw_arr_cspot] = command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 69


 773:.\main.c      ****             
 774:.\main.c      ****             //maintain_array(elbw_arr_cspot,ELBW_ARR_SIZE);
 775:.\main.c      ****             
 776:.\main.c      ****             //avg = average(elbow_array, ELBW_ARR_SIZE);   
 777:.\main.c      ****             
 778:.\main.c      **** //            if(stop_elb_dn_Read() && stop_elb_up_Read()) //<-- Changed to && from ||
 779:.\main.c      **** //            {
 780:.\main.c      **** //                if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is al
 781:.\main.c      **** //                {
 782:.\main.c      **** //                    if (avg < NEUTRAL)
 783:.\main.c      **** //                    {
 784:.\main.c      **** //                        ELBW_PWM_WriteCompare(NEUTRAL);
 785:.\main.c      **** //                    }
 786:.\main.c      **** //                    else
 787:.\main.c      **** //                    {
 788:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
 789:.\main.c      **** //                        {
 790:.\main.c      **** //                            ELBW_PWM_WriteCompare(avg);
 791:.\main.c      **** //                        }
 792:.\main.c      **** //                        else
 793:.\main.c      **** //                        {
 794:.\main.c      **** //                            //LED_Write(1);
 795:.\main.c      **** //                            ELBW_PWM_WriteCompare(NEUTRAL);
 796:.\main.c      **** //                        }
 797:.\main.c      **** //                    }
 798:.\main.c      **** //                }
 799:.\main.c      **** //                else if (feedback >= ELBOW_UPPER_BOUND) // upper bound checking, only move away i
 800:.\main.c      **** //                {
 801:.\main.c      **** //                    if(avg > NEUTRAL)
 802:.\main.c      **** //                    {
 803:.\main.c      **** //                        ELBW_PWM_WriteCompare(NEUTRAL);
 804:.\main.c      **** //                    }
 805:.\main.c      **** //                    else
 806:.\main.c      **** //                    {
 807:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
 808:.\main.c      **** //                        {
 809:.\main.c      **** //                            ELBW_PWM_WriteCompare(avg);
 810:.\main.c      **** //                        }
 811:.\main.c      **** //                        else
 812:.\main.c      **** //                        {
 813:.\main.c      **** //                            //LED_Write(1);
 814:.\main.c      **** //                            ELBW_PWM_WriteCompare(NEUTRAL);
 815:.\main.c      **** //                        }
 816:.\main.c      **** //                    }
 817:.\main.c      **** //                }
 818:.\main.c      **** //                else
 819:.\main.c      **** //                {
 820:.\main.c      **** //                    if(avg <= 2000 && avg >= 1000)
 821:.\main.c      **** //                    {
 822:.\main.c      **** //                        ELBW_PWM_WriteCompare(avg);
 823:.\main.c      **** //                    }
 824:.\main.c      **** //                    else
 825:.\main.c      **** //                    {
 826:.\main.c      **** //                        //LED_Write(1);
 827:.\main.c      **** //                        ELBW_PWM_WriteCompare(NEUTRAL);
 828:.\main.c      **** //                    }
 829:.\main.c      **** //                }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 70


 830:.\main.c      **** //            }
 831:.\main.c      **** //            else // One of the stop switches was presses, shouldn't happen but just in case
 832:.\main.c      **** //            {
 833:.\main.c      **** //                if(!stop_elb_dn_Read()){
 834:.\main.c      **** //                    ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) + BOUND_OFFSET;
 835:.\main.c      **** //                    if (avg < NEUTRAL)
 836:.\main.c      **** //                    {
 837:.\main.c      **** //                        ELBW_PWM_WriteCompare(NEUTRAL);
 838:.\main.c      **** //                    }
 839:.\main.c      **** //                    else
 840:.\main.c      **** //                    {
 841:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
 842:.\main.c      **** //                        {
 843:.\main.c      **** //                            ELBW_PWM_WriteCompare(avg);
 844:.\main.c      **** //                        }
 845:.\main.c      **** //                        else
 846:.\main.c      **** //                        {
 847:.\main.c      **** //                            //LED_Write(1);
 848:.\main.c      **** //                            ELBW_PWM_WriteCompare(NEUTRAL);
 849:.\main.c      **** //                        }
 850:.\main.c      **** //                    }
 851:.\main.c      **** //                }
 852:.\main.c      **** //                else if(!stop_elb_up_Read())
 853:.\main.c      **** //                {
 854:.\main.c      **** //                    ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) - BOUND_OFFSET;
 855:.\main.c      **** //                    if(avg > NEUTRAL)
 856:.\main.c      **** //                    {
 857:.\main.c      **** //                        ELBW_PWM_WriteCompare(NEUTRAL);
 858:.\main.c      **** //                    }
 859:.\main.c      **** //                    else
 860:.\main.c      **** //                    {
 861:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
 862:.\main.c      **** //                        {
 863:.\main.c      **** //                            ELBW_PWM_WriteCompare(avg);
 864:.\main.c      **** //                        }
 865:.\main.c      **** //                        else
 866:.\main.c      **** //                        {
 867:.\main.c      **** //                            //increment error variable
 868:.\main.c      **** //                            //LED_Write(1);
 869:.\main.c      **** //                            ELBW_PWM_WriteCompare(NEUTRAL);
 870:.\main.c      **** //                        }
 871:.\main.c      **** //                    }
 872:.\main.c      **** //                }
 873:.\main.c      **** //                else
 874:.\main.c      **** //                {
 875:.\main.c      **** //                    //LED_Write(0);
 876:.\main.c      **** //                    ELBW_PWM_WriteCompare(NEUTRAL);
 877:.\main.c      **** //                }
 878:.\main.c      **** //            }
 879:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3023              		.loc 2 879 0
 3024 003e BB1D     		add	r3, r7, #6
 3025 0040 1A88     		ldrh	r2, [r3]
 3026 0042 FA23     		mov	r3, #250
 3027 0044 DB00     		lsl	r3, r3, #3
 3028 0046 9A42     		cmp	r2, r3
 3029 0048 0DD8     		bhi	.L185
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 71


 3030              		.loc 2 879 0 is_stmt 0 discriminator 1
 3031 004a BB1D     		add	r3, r7, #6
 3032 004c 1A88     		ldrh	r2, [r3]
 3033 004e 2C4B     		ldr	r3, .L200+12
 3034 0050 9A42     		cmp	r2, r3
 3035 0052 08D9     		bls	.L185
 880:.\main.c      ****             {
 881:.\main.c      ****                 LED_Write(0);
 3036              		.loc 2 881 0 is_stmt 1
 3037 0054 0020     		mov	r0, #0
 3038 0056 FFF7FEFF 		bl	LED_Write
 882:.\main.c      ****                 ELBW_PWM_WriteCompare(command);
 3039              		.loc 2 882 0
 3040 005a BB1D     		add	r3, r7, #6
 3041 005c 1B88     		ldrh	r3, [r3]
 3042 005e 181C     		mov	r0, r3
 3043 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 3044 0064 07E0     		b	.L186
 3045              	.L185:
 883:.\main.c      ****             }
 884:.\main.c      ****             else
 885:.\main.c      ****             {
 886:.\main.c      ****                 //increment error variable
 887:.\main.c      ****                 LED_Write(1);
 3046              		.loc 2 887 0
 3047 0066 0120     		mov	r0, #1
 3048 0068 FFF7FEFF 		bl	LED_Write
 888:.\main.c      ****                 ELBW_PWM_WriteCompare(NEUTRAL);
 3049              		.loc 2 888 0
 3050 006c 224B     		ldr	r3, .L200+4
 3051 006e 1B88     		ldrh	r3, [r3]
 3052 0070 181C     		mov	r0, r3
 3053 0072 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 3054              	.L186:
 889:.\main.c      ****             }
 890:.\main.c      ****             ELBOW_FLAG = 0;
 3055              		.loc 2 890 0
 3056 0076 234B     		ldr	r3, .L200+16
 3057 0078 0022     		mov	r2, #0
 3058 007a 1A70     		strb	r2, [r3]
 891:.\main.c      ****             break;
 3059              		.loc 2 891 0
 3060 007c 06E0     		b	.L184
 3061              	.L178:
 892:.\main.c      ****             
 893:.\main.c      ****         case elbw_wait:
 894:.\main.c      **** //            if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 895:.\main.c      **** //            {
 896:.\main.c      **** //                ELBW_PWM_WriteCompare(NEUTRAL);
 897:.\main.c      **** //                //LED_Write(1);
 898:.\main.c      **** //            }
 899:.\main.c      ****             break;
 900:.\main.c      ****                         
 901:.\main.c      ****         default:
 902:.\main.c      ****             elbow_state = elbw_start;
 3062              		.loc 2 902 0
 3063 007e 1D4B     		ldr	r3, .L200
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 72


 3064 0080 0022     		mov	r2, #0
 3065 0082 1A70     		strb	r2, [r3]
 903:.\main.c      ****             break;
 3066              		.loc 2 903 0
 3067 0084 02E0     		b	.L184
 3068              	.L198:
 757:.\main.c      ****             break;
 3069              		.loc 2 757 0
 3070 0086 C046     		mov	r8, r8
 3071 0088 00E0     		b	.L184
 3072              	.L199:
 899:.\main.c      ****             break;
 3073              		.loc 2 899 0
 3074 008a C046     		mov	r8, r8
 3075              	.L184:
 904:.\main.c      ****     }
 905:.\main.c      ****     
 906:.\main.c      ****     switch(elbow_state){ //transitions
 3076              		.loc 2 906 0
 3077 008c 194B     		ldr	r3, .L200
 3078 008e 1B78     		ldrb	r3, [r3]
 3079 0090 012B     		cmp	r3, #1
 3080 0092 0CD0     		beq	.L188
 3081 0094 02DC     		bgt	.L189
 3082 0096 002B     		cmp	r3, #0
 3083 0098 05D0     		beq	.L190
 3084 009a 24E0     		b	.L187
 3085              	.L189:
 3086 009c 022B     		cmp	r3, #2
 3087 009e 0AD0     		beq	.L191
 3088 00a0 032B     		cmp	r3, #3
 3089 00a2 14D0     		beq	.L192
 3090 00a4 1FE0     		b	.L187
 3091              	.L190:
 907:.\main.c      ****         case elbw_start:
 908:.\main.c      ****             elbow_state = elbw_init;
 3092              		.loc 2 908 0
 3093 00a6 134B     		ldr	r3, .L200
 3094 00a8 0122     		mov	r2, #1
 3095 00aa 1A70     		strb	r2, [r3]
 909:.\main.c      ****             break;
 3096              		.loc 2 909 0
 3097 00ac 1FE0     		b	.L177
 3098              	.L188:
 910:.\main.c      ****         
 911:.\main.c      ****         case elbw_init:
 912:.\main.c      ****             elbow_state = elbw_wait;
 3099              		.loc 2 912 0
 3100 00ae 114B     		ldr	r3, .L200
 3101 00b0 0322     		mov	r2, #3
 3102 00b2 1A70     		strb	r2, [r3]
 913:.\main.c      ****             break;
 3103              		.loc 2 913 0
 3104 00b4 1BE0     		b	.L177
 3105              	.L191:
 914:.\main.c      ****         
 915:.\main.c      ****         case elbw_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 73


 916:.\main.c      ****             if(ELBOW_FLAG)
 3106              		.loc 2 916 0
 3107 00b6 134B     		ldr	r3, .L200+16
 3108 00b8 1B78     		ldrb	r3, [r3]
 3109 00ba 002B     		cmp	r3, #0
 3110 00bc 03D0     		beq	.L194
 917:.\main.c      ****             {
 918:.\main.c      ****                 elbow_state = elbw_execute;
 3111              		.loc 2 918 0
 3112 00be 0D4B     		ldr	r3, .L200
 3113 00c0 0222     		mov	r2, #2
 3114 00c2 1A70     		strb	r2, [r3]
 919:.\main.c      ****             }
 920:.\main.c      ****             else
 921:.\main.c      ****             {
 922:.\main.c      ****                 elbow_state = elbw_wait;
 923:.\main.c      ****             }
 924:.\main.c      ****             break;
 3115              		.loc 2 924 0
 3116 00c4 13E0     		b	.L177
 3117              	.L194:
 922:.\main.c      ****                 elbow_state = elbw_wait;
 3118              		.loc 2 922 0
 3119 00c6 0B4B     		ldr	r3, .L200
 3120 00c8 0322     		mov	r2, #3
 3121 00ca 1A70     		strb	r2, [r3]
 3122              		.loc 2 924 0
 3123 00cc 0FE0     		b	.L177
 3124              	.L192:
 925:.\main.c      ****         
 926:.\main.c      ****         case elbw_wait:
 927:.\main.c      ****             if(ELBOW_FLAG)
 3125              		.loc 2 927 0
 3126 00ce 0D4B     		ldr	r3, .L200+16
 3127 00d0 1B78     		ldrb	r3, [r3]
 3128 00d2 002B     		cmp	r3, #0
 3129 00d4 03D0     		beq	.L196
 928:.\main.c      ****             {
 929:.\main.c      ****                 elbow_state = elbw_execute;
 3130              		.loc 2 929 0
 3131 00d6 074B     		ldr	r3, .L200
 3132 00d8 0222     		mov	r2, #2
 3133 00da 1A70     		strb	r2, [r3]
 930:.\main.c      ****             }
 931:.\main.c      ****             else
 932:.\main.c      ****             {
 933:.\main.c      ****                 elbow_state = elbw_wait; 
 934:.\main.c      ****             }
 935:.\main.c      ****             break;
 3134              		.loc 2 935 0
 3135 00dc 07E0     		b	.L177
 3136              	.L196:
 933:.\main.c      ****                 elbow_state = elbw_wait; 
 3137              		.loc 2 933 0
 3138 00de 054B     		ldr	r3, .L200
 3139 00e0 0322     		mov	r2, #3
 3140 00e2 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 74


 3141              		.loc 2 935 0
 3142 00e4 03E0     		b	.L177
 3143              	.L187:
 936:.\main.c      ****             
 937:.\main.c      ****         default:
 938:.\main.c      ****             elbow_state = elbw_start;
 3144              		.loc 2 938 0
 3145 00e6 034B     		ldr	r3, .L200
 3146 00e8 0022     		mov	r2, #0
 3147 00ea 1A70     		strb	r2, [r3]
 939:.\main.c      ****             break;
 3148              		.loc 2 939 0
 3149 00ec C046     		mov	r8, r8
 3150              	.L177:
 940:.\main.c      ****     }
 941:.\main.c      **** }
 3151              		.loc 2 941 0
 3152 00ee BD46     		mov	sp, r7
 3153 00f0 03B0     		add	sp, sp, #12
 3154              		@ sp needed
 3155 00f2 90BD     		pop	{r4, r7, pc}
 3156              	.L201:
 3157              		.align	2
 3158              	.L200:
 3159 00f4 00000000 		.word	elbow_state
 3160 00f8 00000000 		.word	NEUTRAL
 3161 00fc 00000000 		.word	data_array
 3162 0100 E7030000 		.word	999
 3163 0104 00000000 		.word	ELBOW_FLAG
 3164              		.cfi_endproc
 3165              	.LFE55:
 3166              		.size	elbow, .-elbow
 3167              		.comm	shoulder_state,1,1
 3168              		.section	.text.shoulder,"ax",%progbits
 3169              		.align	2
 3170              		.global	shoulder
 3171              		.code	16
 3172              		.thumb_func
 3173              		.type	shoulder, %function
 3174              	shoulder:
 3175              	.LFB56:
 942:.\main.c      **** 
 943:.\main.c      **** //control the shoulder
 944:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 945:.\main.c      **** //void shoulder(uint8* shldr_arr_cspot, uint16* shoulder_array)
 946:.\main.c      **** void shoulder()
 947:.\main.c      **** { 
 3176              		.loc 2 947 0
 3177              		.cfi_startproc
 3178 0000 90B5     		push	{r4, r7, lr}
 3179              		.cfi_def_cfa_offset 12
 3180              		.cfi_offset 4, -12
 3181              		.cfi_offset 7, -8
 3182              		.cfi_offset 14, -4
 3183 0002 83B0     		sub	sp, sp, #12
 3184              		.cfi_def_cfa_offset 24
 3185 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 75


 3186              		.cfi_def_cfa_register 7
 948:.\main.c      ****     //take instruction from data_array
 949:.\main.c      ****     //smooth input
 950:.\main.c      ****     //actuate the shoulder using PWM
 951:.\main.c      ****     //get feedback
 952:.\main.c      ****     uint8 i;
 953:.\main.c      ****     uint16 avg;
 954:.\main.c      ****     uint16 command;
 955:.\main.c      ****     
 956:.\main.c      ****     //uint16 feedback = potFeedback(SHOULDER_POT);
 957:.\main.c      ****     
 958:.\main.c      ****     switch(shoulder_state){ //actions
 3187              		.loc 2 958 0
 3188 0006 3B4B     		ldr	r3, .L225
 3189 0008 1B78     		ldrb	r3, [r3]
 3190 000a 012B     		cmp	r3, #1
 3191 000c 08D0     		beq	.L204
 3192 000e 02DC     		bgt	.L205
 3193 0010 002B     		cmp	r3, #0
 3194 0012 38D0     		beq	.L223
 3195 0014 33E0     		b	.L203
 3196              	.L205:
 3197 0016 022B     		cmp	r3, #2
 3198 0018 08D0     		beq	.L207
 3199 001a 032B     		cmp	r3, #3
 3200 001c 35D0     		beq	.L224
 3201 001e 2EE0     		b	.L203
 3202              	.L204:
 959:.\main.c      ****         case shldr_start:
 960:.\main.c      ****             break;
 961:.\main.c      **** 
 962:.\main.c      ****         case shldr_init:
 963:.\main.c      **** //            for(i = 0; i < SHLDR_ARR_SIZE; i++)
 964:.\main.c      **** //            {
 965:.\main.c      **** //                shoulder_array[i] = NEUTRAL;
 966:.\main.c      **** //            }
 967:.\main.c      **** //            *shldr_arr_cspot = 0;
 968:.\main.c      ****                         
 969:.\main.c      ****             SHLDR_PWM_WriteCompare(NEUTRAL);
 3203              		.loc 2 969 0
 3204 0020 354B     		ldr	r3, .L225+4
 3205 0022 1B88     		ldrh	r3, [r3]
 3206 0024 181C     		mov	r0, r3
 3207 0026 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 970:.\main.c      ****             break;
 3208              		.loc 2 970 0
 3209 002a 2FE0     		b	.L209
 3210              	.L207:
 971:.\main.c      **** 
 972:.\main.c      ****         case shldr_execute:
 973:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 3211              		.loc 2 973 0
 3212 002c BC1D     		add	r4, r7, #6
 3213 002e 334B     		ldr	r3, .L225+8
 3214 0030 181C     		mov	r0, r3
 3215 0032 0C21     		mov	r1, #12
 3216 0034 0D22     		mov	r2, #13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 76


 3217 0036 FFF7FEFF 		bl	make_command
 3218 003a 031C     		mov	r3, r0
 3219 003c 2380     		strh	r3, [r4]
 974:.\main.c      ****             //shoulder_array[*shldr_arr_cspot] = command;    
 975:.\main.c      ****         
 976:.\main.c      ****             //maintain_array(shldr_arr_cspot, SHLDR_ARR_SIZE);
 977:.\main.c      ****             
 978:.\main.c      ****             //avg = average(shoulder_array, SHLDR_ARR_SIZE);
 979:.\main.c      ****             
 980:.\main.c      **** //            if(stop_shdr_dn_Read() && stop_shdr_up_Read()) //<-- Changed to && from ||
 981:.\main.c      **** //            {
 982:.\main.c      **** //                if(feedback <= SHOULDER_LOWER_BOUND)
 983:.\main.c      **** //                {
 984:.\main.c      **** //                    if (avg < NEUTRAL)
 985:.\main.c      **** //                    {
 986:.\main.c      **** //                        SHLDR_PWM_WriteCompare(NEUTRAL);
 987:.\main.c      **** //                    }
 988:.\main.c      **** //                    else
 989:.\main.c      **** //                    {
 990:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
 991:.\main.c      **** //                        {
 992:.\main.c      **** //                            SHLDR_PWM_WriteCompare(avg);
 993:.\main.c      **** //                        }
 994:.\main.c      **** //                        else
 995:.\main.c      **** //                        {
 996:.\main.c      **** //                            //increment error variable
 997:.\main.c      **** //                            //LED_Write(1);
 998:.\main.c      **** //                            SHLDR_PWM_WriteCompare(NEUTRAL);
 999:.\main.c      **** //                        }
1000:.\main.c      **** //                    }
1001:.\main.c      **** //                }
1002:.\main.c      **** //                else if (feedback >= SHOULDER_UPPER_BOUND)
1003:.\main.c      **** //                {
1004:.\main.c      **** //                    if(avg > NEUTRAL)
1005:.\main.c      **** //                    {
1006:.\main.c      **** //                        SHLDR_PWM_WriteCompare(NEUTRAL);
1007:.\main.c      **** //                    }
1008:.\main.c      **** //                    else
1009:.\main.c      **** //                    {
1010:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
1011:.\main.c      **** //                        {
1012:.\main.c      **** //                            SHLDR_PWM_WriteCompare(avg);
1013:.\main.c      **** //                        }
1014:.\main.c      **** //                        else
1015:.\main.c      **** //                        {
1016:.\main.c      **** //                            //throw error
1017:.\main.c      **** //                            //LED_Write(1);
1018:.\main.c      **** //                            SHLDR_PWM_WriteCompare(NEUTRAL);
1019:.\main.c      **** //                        }
1020:.\main.c      **** //                    }
1021:.\main.c      **** //                }
1022:.\main.c      **** //                else
1023:.\main.c      **** //                {
1024:.\main.c      **** //                    if(avg <= 2000 && avg >= 1000)
1025:.\main.c      **** //                    {
1026:.\main.c      **** //                        SHLDR_PWM_WriteCompare(avg);
1027:.\main.c      **** //                    }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 77


1028:.\main.c      **** //                    else
1029:.\main.c      **** //                    {
1030:.\main.c      **** //                        //throw error
1031:.\main.c      **** //                        //LED_Write(1);
1032:.\main.c      **** //                        SHLDR_PWM_WriteCompare(NEUTRAL);
1033:.\main.c      **** //                    }
1034:.\main.c      **** //                }
1035:.\main.c      **** //            }
1036:.\main.c      **** //            else // One of the stop switches was presses, shouldn't happen but just in case
1037:.\main.c      **** //            {
1038:.\main.c      **** //                if(!stop_elb_dn_Read()){
1039:.\main.c      **** //                    SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) + BOUND_OFFSET;
1040:.\main.c      **** //                    if (avg < NEUTRAL)
1041:.\main.c      **** //                    {
1042:.\main.c      **** //                        SHLDR_PWM_WriteCompare(NEUTRAL);
1043:.\main.c      **** //                    }
1044:.\main.c      **** //                    else
1045:.\main.c      **** //                    {
1046:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
1047:.\main.c      **** //                        {
1048:.\main.c      **** //                            SHLDR_PWM_WriteCompare(avg);
1049:.\main.c      **** //                        }
1050:.\main.c      **** //                        else
1051:.\main.c      **** //                        {
1052:.\main.c      **** //                            //LED_Write(1);
1053:.\main.c      **** //                            SHLDR_PWM_WriteCompare(NEUTRAL);
1054:.\main.c      **** //                        }
1055:.\main.c      **** //                    }
1056:.\main.c      **** //                }
1057:.\main.c      **** //                else if(!stop_elb_up_Read()){
1058:.\main.c      **** //                    SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) - BOUND_OFFSET;
1059:.\main.c      **** //                    if(avg > NEUTRAL)
1060:.\main.c      **** //                    {
1061:.\main.c      **** //                        SHLDR_PWM_WriteCompare(NEUTRAL);
1062:.\main.c      **** //                    }
1063:.\main.c      **** //                    else
1064:.\main.c      **** //                    {
1065:.\main.c      **** //                        if(avg <= 2000 && avg >= 1000)
1066:.\main.c      **** //                        {
1067:.\main.c      **** //                            SHLDR_PWM_WriteCompare(avg);
1068:.\main.c      **** //                        }
1069:.\main.c      **** //                        else
1070:.\main.c      **** //                        {
1071:.\main.c      **** //                            //LED_Write(1);
1072:.\main.c      **** //                            SHLDR_PWM_WriteCompare(NEUTRAL);
1073:.\main.c      **** //                        }
1074:.\main.c      **** //                    }
1075:.\main.c      **** //                }
1076:.\main.c      **** //                else
1077:.\main.c      **** //                {
1078:.\main.c      **** //                    //LED_Write(0);
1079:.\main.c      **** //                    SHLDR_PWM_WriteCompare(NEUTRAL);
1080:.\main.c      **** //                }
1081:.\main.c      **** //            }
1082:.\main.c      ****             if(command <= 2000 && command >= 1000) //changed from avg
 3220              		.loc 2 1082 0
 3221 003e BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 78


 3222 0040 1A88     		ldrh	r2, [r3]
 3223 0042 FA23     		mov	r3, #250
 3224 0044 DB00     		lsl	r3, r3, #3
 3225 0046 9A42     		cmp	r2, r3
 3226 0048 0DD8     		bhi	.L210
 3227              		.loc 2 1082 0 is_stmt 0 discriminator 1
 3228 004a BB1D     		add	r3, r7, #6
 3229 004c 1A88     		ldrh	r2, [r3]
 3230 004e 2C4B     		ldr	r3, .L225+12
 3231 0050 9A42     		cmp	r2, r3
 3232 0052 08D9     		bls	.L210
1083:.\main.c      ****             {
1084:.\main.c      ****                 LED_Write(0);
 3233              		.loc 2 1084 0 is_stmt 1
 3234 0054 0020     		mov	r0, #0
 3235 0056 FFF7FEFF 		bl	LED_Write
1085:.\main.c      ****                 //SHLDR_PWM_WriteCompare(avg);
1086:.\main.c      ****                 SHLDR_PWM_WriteCompare(command);
 3236              		.loc 2 1086 0
 3237 005a BB1D     		add	r3, r7, #6
 3238 005c 1B88     		ldrh	r3, [r3]
 3239 005e 181C     		mov	r0, r3
 3240 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3241 0064 07E0     		b	.L211
 3242              	.L210:
1087:.\main.c      ****             }
1088:.\main.c      ****             else
1089:.\main.c      ****             {
1090:.\main.c      ****                 LED_Write(1);
 3243              		.loc 2 1090 0
 3244 0066 0120     		mov	r0, #1
 3245 0068 FFF7FEFF 		bl	LED_Write
1091:.\main.c      ****                 SHLDR_PWM_WriteCompare(NEUTRAL);
 3246              		.loc 2 1091 0
 3247 006c 224B     		ldr	r3, .L225+4
 3248 006e 1B88     		ldrh	r3, [r3]
 3249 0070 181C     		mov	r0, r3
 3250 0072 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3251              	.L211:
1092:.\main.c      ****             }
1093:.\main.c      ****             SHOULDER_FLAG = 0;
 3252              		.loc 2 1093 0
 3253 0076 234B     		ldr	r3, .L225+16
 3254 0078 0022     		mov	r2, #0
 3255 007a 1A70     		strb	r2, [r3]
1094:.\main.c      ****             break;
 3256              		.loc 2 1094 0
 3257 007c 06E0     		b	.L209
 3258              	.L203:
1095:.\main.c      ****             
1096:.\main.c      ****         case shldr_wait:
1097:.\main.c      **** //            if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
1098:.\main.c      **** //            {
1099:.\main.c      **** //                SHLDR_PWM_WriteCompare(NEUTRAL);
1100:.\main.c      **** //                //LED_Write(1);
1101:.\main.c      **** //            }
1102:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 79


1103:.\main.c      ****                         
1104:.\main.c      ****         default:
1105:.\main.c      ****             shoulder_state = shldr_start;
 3259              		.loc 2 1105 0
 3260 007e 1D4B     		ldr	r3, .L225
 3261 0080 0022     		mov	r2, #0
 3262 0082 1A70     		strb	r2, [r3]
1106:.\main.c      ****             break;
 3263              		.loc 2 1106 0
 3264 0084 02E0     		b	.L209
 3265              	.L223:
 960:.\main.c      ****             break;
 3266              		.loc 2 960 0
 3267 0086 C046     		mov	r8, r8
 3268 0088 00E0     		b	.L209
 3269              	.L224:
1102:.\main.c      ****             break;
 3270              		.loc 2 1102 0
 3271 008a C046     		mov	r8, r8
 3272              	.L209:
1107:.\main.c      ****     }
1108:.\main.c      ****     
1109:.\main.c      ****     switch(shoulder_state){ //transitions
 3273              		.loc 2 1109 0
 3274 008c 194B     		ldr	r3, .L225
 3275 008e 1B78     		ldrb	r3, [r3]
 3276 0090 012B     		cmp	r3, #1
 3277 0092 0CD0     		beq	.L213
 3278 0094 02DC     		bgt	.L214
 3279 0096 002B     		cmp	r3, #0
 3280 0098 05D0     		beq	.L215
 3281 009a 24E0     		b	.L212
 3282              	.L214:
 3283 009c 022B     		cmp	r3, #2
 3284 009e 0AD0     		beq	.L216
 3285 00a0 032B     		cmp	r3, #3
 3286 00a2 14D0     		beq	.L217
 3287 00a4 1FE0     		b	.L212
 3288              	.L215:
1110:.\main.c      ****         case shldr_start:
1111:.\main.c      ****             shoulder_state = shldr_init;
 3289              		.loc 2 1111 0
 3290 00a6 134B     		ldr	r3, .L225
 3291 00a8 0122     		mov	r2, #1
 3292 00aa 1A70     		strb	r2, [r3]
1112:.\main.c      ****             break;
 3293              		.loc 2 1112 0
 3294 00ac 1FE0     		b	.L202
 3295              	.L213:
1113:.\main.c      ****         
1114:.\main.c      ****         case shldr_init:
1115:.\main.c      ****             shoulder_state = shldr_wait;
 3296              		.loc 2 1115 0
 3297 00ae 114B     		ldr	r3, .L225
 3298 00b0 0322     		mov	r2, #3
 3299 00b2 1A70     		strb	r2, [r3]
1116:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 80


 3300              		.loc 2 1116 0
 3301 00b4 1BE0     		b	.L202
 3302              	.L216:
1117:.\main.c      ****         
1118:.\main.c      ****         case shldr_execute:
1119:.\main.c      ****             if(SHOULDER_FLAG)
 3303              		.loc 2 1119 0
 3304 00b6 134B     		ldr	r3, .L225+16
 3305 00b8 1B78     		ldrb	r3, [r3]
 3306 00ba 002B     		cmp	r3, #0
 3307 00bc 03D0     		beq	.L219
1120:.\main.c      ****             {
1121:.\main.c      ****                 shoulder_state = shldr_execute;
 3308              		.loc 2 1121 0
 3309 00be 0D4B     		ldr	r3, .L225
 3310 00c0 0222     		mov	r2, #2
 3311 00c2 1A70     		strb	r2, [r3]
1122:.\main.c      ****             }
1123:.\main.c      ****             else
1124:.\main.c      ****             {
1125:.\main.c      ****                 shoulder_state = shldr_wait;
1126:.\main.c      ****             }
1127:.\main.c      ****             break;
 3312              		.loc 2 1127 0
 3313 00c4 13E0     		b	.L202
 3314              	.L219:
1125:.\main.c      ****                 shoulder_state = shldr_wait;
 3315              		.loc 2 1125 0
 3316 00c6 0B4B     		ldr	r3, .L225
 3317 00c8 0322     		mov	r2, #3
 3318 00ca 1A70     		strb	r2, [r3]
 3319              		.loc 2 1127 0
 3320 00cc 0FE0     		b	.L202
 3321              	.L217:
1128:.\main.c      ****         
1129:.\main.c      ****         case shldr_wait:
1130:.\main.c      ****             if(SHOULDER_FLAG)
 3322              		.loc 2 1130 0
 3323 00ce 0D4B     		ldr	r3, .L225+16
 3324 00d0 1B78     		ldrb	r3, [r3]
 3325 00d2 002B     		cmp	r3, #0
 3326 00d4 03D0     		beq	.L221
1131:.\main.c      ****             {
1132:.\main.c      ****                 shoulder_state = shldr_execute;
 3327              		.loc 2 1132 0
 3328 00d6 074B     		ldr	r3, .L225
 3329 00d8 0222     		mov	r2, #2
 3330 00da 1A70     		strb	r2, [r3]
1133:.\main.c      ****             }
1134:.\main.c      ****             else
1135:.\main.c      ****             {
1136:.\main.c      ****                 shoulder_state = shldr_wait; 
1137:.\main.c      ****             }
1138:.\main.c      ****             break;
 3331              		.loc 2 1138 0
 3332 00dc 07E0     		b	.L202
 3333              	.L221:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 81


1136:.\main.c      ****                 shoulder_state = shldr_wait; 
 3334              		.loc 2 1136 0
 3335 00de 054B     		ldr	r3, .L225
 3336 00e0 0322     		mov	r2, #3
 3337 00e2 1A70     		strb	r2, [r3]
 3338              		.loc 2 1138 0
 3339 00e4 03E0     		b	.L202
 3340              	.L212:
1139:.\main.c      ****             
1140:.\main.c      ****         default:
1141:.\main.c      ****             shoulder_state = shldr_start;
 3341              		.loc 2 1141 0
 3342 00e6 034B     		ldr	r3, .L225
 3343 00e8 0022     		mov	r2, #0
 3344 00ea 1A70     		strb	r2, [r3]
1142:.\main.c      ****             break;
 3345              		.loc 2 1142 0
 3346 00ec C046     		mov	r8, r8
 3347              	.L202:
1143:.\main.c      ****     }  
1144:.\main.c      **** }
 3348              		.loc 2 1144 0
 3349 00ee BD46     		mov	sp, r7
 3350 00f0 03B0     		add	sp, sp, #12
 3351              		@ sp needed
 3352 00f2 90BD     		pop	{r4, r7, pc}
 3353              	.L226:
 3354              		.align	2
 3355              	.L225:
 3356 00f4 00000000 		.word	shoulder_state
 3357 00f8 00000000 		.word	NEUTRAL
 3358 00fc 00000000 		.word	data_array
 3359 0100 E7030000 		.word	999
 3360 0104 00000000 		.word	SHOULDER_FLAG
 3361              		.cfi_endproc
 3362              	.LFE56:
 3363              		.size	shoulder, .-shoulder
 3364              		.comm	baseAzimuth_state,1,1
 3365              		.section	.text.baseAzimuth,"ax",%progbits
 3366              		.align	2
 3367              		.global	baseAzimuth
 3368              		.code	16
 3369              		.thumb_func
 3370              		.type	baseAzimuth, %function
 3371              	baseAzimuth:
 3372              	.LFB57:
1145:.\main.c      **** 
1146:.\main.c      **** //control the turret
1147:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
1148:.\main.c      **** //void baseAzimuth(uint8* BA_arr_cspot, uint16* BA_array)
1149:.\main.c      **** void baseAzimuth()
1150:.\main.c      **** { 
 3373              		.loc 2 1150 0
 3374              		.cfi_startproc
 3375 0000 90B5     		push	{r4, r7, lr}
 3376              		.cfi_def_cfa_offset 12
 3377              		.cfi_offset 4, -12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 82


 3378              		.cfi_offset 7, -8
 3379              		.cfi_offset 14, -4
 3380 0002 83B0     		sub	sp, sp, #12
 3381              		.cfi_def_cfa_offset 24
 3382 0004 00AF     		add	r7, sp, #0
 3383              		.cfi_def_cfa_register 7
1151:.\main.c      ****     //take instruction from data_array
1152:.\main.c      ****     //smooth input
1153:.\main.c      ****     //actuate the turret using PWM
1154:.\main.c      ****     uint8 i;
1155:.\main.c      ****     uint16 avg;
1156:.\main.c      ****     uint16 newest_command;
1157:.\main.c      ****     
1158:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3384              		.loc 2 1158 0
 3385 0006 434B     		ldr	r3, .L250
 3386 0008 1B78     		ldrb	r3, [r3]
 3387 000a 012B     		cmp	r3, #1
 3388 000c 08D0     		beq	.L229
 3389 000e 02DC     		bgt	.L230
 3390 0010 002B     		cmp	r3, #0
 3391 0012 47D0     		beq	.L248
 3392 0014 42E0     		b	.L228
 3393              	.L230:
 3394 0016 022B     		cmp	r3, #2
 3395 0018 0BD0     		beq	.L232
 3396 001a 032B     		cmp	r3, #3
 3397 001c 44D0     		beq	.L249
 3398 001e 3DE0     		b	.L228
 3399              	.L229:
1159:.\main.c      ****         case BA_start:
1160:.\main.c      ****             break;
1161:.\main.c      **** 
1162:.\main.c      ****         case BA_init:
1163:.\main.c      **** //            for(i = 0; i < BA_ARR_SIZE; i++)
1164:.\main.c      **** //            {
1165:.\main.c      **** //                BA_array[i] = NEUTRAL;
1166:.\main.c      **** //            }
1167:.\main.c      **** //            *BA_arr_cspot = 0;
1168:.\main.c      ****             
1169:.\main.c      ****             BA_PWM_WriteCompare(NEUTRAL);
 3400              		.loc 2 1169 0
 3401 0020 3D4B     		ldr	r3, .L250+4
 3402 0022 1B88     		ldrh	r3, [r3]
 3403 0024 181C     		mov	r0, r3
 3404 0026 FFF7FEFF 		bl	BA_PWM_WriteCompare
1170:.\main.c      ****             latest_command = 1500;
 3405              		.loc 2 1170 0
 3406 002a 3C4B     		ldr	r3, .L250+8
 3407 002c 3C4A     		ldr	r2, .L250+12
 3408 002e 1A80     		strh	r2, [r3]
1171:.\main.c      ****             break;
 3409              		.loc 2 1171 0
 3410 0030 3BE0     		b	.L234
 3411              	.L232:
1172:.\main.c      **** 
1173:.\main.c      ****         case BA_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 83


1174:.\main.c      ****             newest_command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3412              		.loc 2 1174 0
 3413 0032 BC1D     		add	r4, r7, #6
 3414 0034 3B4B     		ldr	r3, .L250+16
 3415 0036 181C     		mov	r0, r3
 3416 0038 0A21     		mov	r1, #10
 3417 003a 0B22     		mov	r2, #11
 3418 003c FFF7FEFF 		bl	make_command
 3419 0040 031C     		mov	r3, r0
 3420 0042 2380     		strh	r3, [r4]
1175:.\main.c      **** 
1176:.\main.c      ****             //pos_to_vel(BA_arr_cspot, BA_array, BA_ARR_SIZE, command);
1177:.\main.c      ****             
1178:.\main.c      ****             latest_command = simple_pos_to_vel(newest_command, latest_command);
 3421              		.loc 2 1178 0
 3422 0044 354B     		ldr	r3, .L250+8
 3423 0046 1B88     		ldrh	r3, [r3]
 3424 0048 BA1D     		add	r2, r7, #6
 3425 004a 1288     		ldrh	r2, [r2]
 3426 004c 101C     		mov	r0, r2
 3427 004e 191C     		mov	r1, r3
 3428 0050 FFF7FEFF 		bl	simple_pos_to_vel
 3429 0054 031C     		mov	r3, r0
 3430 0056 1A1C     		mov	r2, r3
 3431 0058 304B     		ldr	r3, .L250+8
 3432 005a 1A80     		strh	r2, [r3]
1179:.\main.c      ****             
1180:.\main.c      ****             //avg = average(BA_array, BA_ARR_SIZE);
1181:.\main.c      **** 
1182:.\main.c      ****             if(latest_command <= 2000 && latest_command >= 1000)
 3433              		.loc 2 1182 0
 3434 005c 2F4B     		ldr	r3, .L250+8
 3435 005e 1A88     		ldrh	r2, [r3]
 3436 0060 FA23     		mov	r3, #250
 3437 0062 DB00     		lsl	r3, r3, #3
 3438 0064 9A42     		cmp	r2, r3
 3439 0066 0DD8     		bhi	.L235
 3440              		.loc 2 1182 0 is_stmt 0 discriminator 1
 3441 0068 2C4B     		ldr	r3, .L250+8
 3442 006a 1A88     		ldrh	r2, [r3]
 3443 006c 2E4B     		ldr	r3, .L250+20
 3444 006e 9A42     		cmp	r2, r3
 3445 0070 08D9     		bls	.L235
1183:.\main.c      ****             {
1184:.\main.c      ****                 BA_PWM_WriteCompare(latest_command);
 3446              		.loc 2 1184 0 is_stmt 1
 3447 0072 2A4B     		ldr	r3, .L250+8
 3448 0074 1B88     		ldrh	r3, [r3]
 3449 0076 181C     		mov	r0, r3
 3450 0078 FFF7FEFF 		bl	BA_PWM_WriteCompare
1185:.\main.c      ****                 LED_Write(0);
 3451              		.loc 2 1185 0
 3452 007c 0020     		mov	r0, #0
 3453 007e FFF7FEFF 		bl	LED_Write
 3454 0082 07E0     		b	.L236
 3455              	.L235:
1186:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 84


1187:.\main.c      ****             else
1188:.\main.c      ****             {
1189:.\main.c      ****                 LED_Write(1);
 3456              		.loc 2 1189 0
 3457 0084 0120     		mov	r0, #1
 3458 0086 FFF7FEFF 		bl	LED_Write
1190:.\main.c      ****                 //increment error variable
1191:.\main.c      ****                 BA_PWM_WriteCompare(NEUTRAL);
 3459              		.loc 2 1191 0
 3460 008a 234B     		ldr	r3, .L250+4
 3461 008c 1B88     		ldrh	r3, [r3]
 3462 008e 181C     		mov	r0, r3
 3463 0090 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3464              	.L236:
1192:.\main.c      ****             }
1193:.\main.c      ****             BA_FLAG = 0;
 3465              		.loc 2 1193 0
 3466 0094 254B     		ldr	r3, .L250+24
 3467 0096 0022     		mov	r2, #0
 3468 0098 1A70     		strb	r2, [r3]
1194:.\main.c      ****             break;
 3469              		.loc 2 1194 0
 3470 009a 06E0     		b	.L234
 3471              	.L228:
1195:.\main.c      ****             
1196:.\main.c      ****         case BA_wait:
1197:.\main.c      ****             break;
1198:.\main.c      ****             
1199:.\main.c      ****         default:
1200:.\main.c      ****             baseAzimuth_state = BA_start;
 3472              		.loc 2 1200 0
 3473 009c 1D4B     		ldr	r3, .L250
 3474 009e 0022     		mov	r2, #0
 3475 00a0 1A70     		strb	r2, [r3]
1201:.\main.c      ****             break;
 3476              		.loc 2 1201 0
 3477 00a2 02E0     		b	.L234
 3478              	.L248:
1160:.\main.c      ****             break;
 3479              		.loc 2 1160 0
 3480 00a4 C046     		mov	r8, r8
 3481 00a6 00E0     		b	.L234
 3482              	.L249:
1197:.\main.c      ****             break;
 3483              		.loc 2 1197 0
 3484 00a8 C046     		mov	r8, r8
 3485              	.L234:
1202:.\main.c      ****     }
1203:.\main.c      ****     
1204:.\main.c      ****     switch(baseAzimuth_state)
 3486              		.loc 2 1204 0
 3487 00aa 1A4B     		ldr	r3, .L250
 3488 00ac 1B78     		ldrb	r3, [r3]
 3489 00ae 012B     		cmp	r3, #1
 3490 00b0 0CD0     		beq	.L238
 3491 00b2 02DC     		bgt	.L239
 3492 00b4 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 85


 3493 00b6 05D0     		beq	.L240
 3494 00b8 24E0     		b	.L237
 3495              	.L239:
 3496 00ba 022B     		cmp	r3, #2
 3497 00bc 0AD0     		beq	.L241
 3498 00be 032B     		cmp	r3, #3
 3499 00c0 14D0     		beq	.L242
 3500 00c2 1FE0     		b	.L237
 3501              	.L240:
1205:.\main.c      ****     { //transitions
1206:.\main.c      ****         case BA_start:
1207:.\main.c      ****             baseAzimuth_state = BA_init;
 3502              		.loc 2 1207 0
 3503 00c4 134B     		ldr	r3, .L250
 3504 00c6 0122     		mov	r2, #1
 3505 00c8 1A70     		strb	r2, [r3]
1208:.\main.c      ****             break;
 3506              		.loc 2 1208 0
 3507 00ca 1FE0     		b	.L227
 3508              	.L238:
1209:.\main.c      ****         
1210:.\main.c      ****         case BA_init:
1211:.\main.c      ****             baseAzimuth_state = BA_wait;
 3509              		.loc 2 1211 0
 3510 00cc 114B     		ldr	r3, .L250
 3511 00ce 0322     		mov	r2, #3
 3512 00d0 1A70     		strb	r2, [r3]
1212:.\main.c      ****             break;
 3513              		.loc 2 1212 0
 3514 00d2 1BE0     		b	.L227
 3515              	.L241:
1213:.\main.c      ****         
1214:.\main.c      ****         case BA_execute:
1215:.\main.c      ****             if(BA_FLAG)
 3516              		.loc 2 1215 0
 3517 00d4 154B     		ldr	r3, .L250+24
 3518 00d6 1B78     		ldrb	r3, [r3]
 3519 00d8 002B     		cmp	r3, #0
 3520 00da 03D0     		beq	.L244
1216:.\main.c      ****             {
1217:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3521              		.loc 2 1217 0
 3522 00dc 0D4B     		ldr	r3, .L250
 3523 00de 0222     		mov	r2, #2
 3524 00e0 1A70     		strb	r2, [r3]
1218:.\main.c      ****             }
1219:.\main.c      ****             else
1220:.\main.c      ****             {
1221:.\main.c      ****                 baseAzimuth_state = BA_wait;
1222:.\main.c      ****             }
1223:.\main.c      ****             break;
 3525              		.loc 2 1223 0
 3526 00e2 13E0     		b	.L227
 3527              	.L244:
1221:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3528              		.loc 2 1221 0
 3529 00e4 0B4B     		ldr	r3, .L250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 86


 3530 00e6 0322     		mov	r2, #3
 3531 00e8 1A70     		strb	r2, [r3]
 3532              		.loc 2 1223 0
 3533 00ea 0FE0     		b	.L227
 3534              	.L242:
1224:.\main.c      ****         
1225:.\main.c      ****         case BA_wait:
1226:.\main.c      ****             if(BA_FLAG)
 3535              		.loc 2 1226 0
 3536 00ec 0F4B     		ldr	r3, .L250+24
 3537 00ee 1B78     		ldrb	r3, [r3]
 3538 00f0 002B     		cmp	r3, #0
 3539 00f2 03D0     		beq	.L246
1227:.\main.c      ****             {
1228:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3540              		.loc 2 1228 0
 3541 00f4 074B     		ldr	r3, .L250
 3542 00f6 0222     		mov	r2, #2
 3543 00f8 1A70     		strb	r2, [r3]
1229:.\main.c      ****             }
1230:.\main.c      ****             else
1231:.\main.c      ****             {
1232:.\main.c      ****                 baseAzimuth_state = BA_wait; 
1233:.\main.c      ****             }
1234:.\main.c      ****             break;
 3544              		.loc 2 1234 0
 3545 00fa 07E0     		b	.L227
 3546              	.L246:
1232:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3547              		.loc 2 1232 0
 3548 00fc 054B     		ldr	r3, .L250
 3549 00fe 0322     		mov	r2, #3
 3550 0100 1A70     		strb	r2, [r3]
 3551              		.loc 2 1234 0
 3552 0102 03E0     		b	.L227
 3553              	.L237:
1235:.\main.c      ****             
1236:.\main.c      ****         default:
1237:.\main.c      ****             baseAzimuth_state = BA_start;
 3554              		.loc 2 1237 0
 3555 0104 034B     		ldr	r3, .L250
 3556 0106 0022     		mov	r2, #0
 3557 0108 1A70     		strb	r2, [r3]
1238:.\main.c      ****             break;
 3558              		.loc 2 1238 0
 3559 010a C046     		mov	r8, r8
 3560              	.L227:
1239:.\main.c      ****     }
1240:.\main.c      **** }
 3561              		.loc 2 1240 0
 3562 010c BD46     		mov	sp, r7
 3563 010e 03B0     		add	sp, sp, #12
 3564              		@ sp needed
 3565 0110 90BD     		pop	{r4, r7, pc}
 3566              	.L251:
 3567 0112 C046     		.align	2
 3568              	.L250:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 87


 3569 0114 00000000 		.word	baseAzimuth_state
 3570 0118 00000000 		.word	NEUTRAL
 3571 011c 00000000 		.word	latest_command
 3572 0120 DC050000 		.word	1500
 3573 0124 00000000 		.word	data_array
 3574 0128 E7030000 		.word	999
 3575 012c 00000000 		.word	BA_FLAG
 3576              		.cfi_endproc
 3577              	.LFE57:
 3578              		.size	baseAzimuth, .-baseAzimuth
 3579              		.comm	effector_state,1,1
 3580              		.section	.text.effector,"ax",%progbits
 3581              		.align	2
 3582              		.global	effector
 3583              		.code	16
 3584              		.thumb_func
 3585              		.type	effector, %function
 3586              	effector:
 3587              	.LFB58:
1241:.\main.c      **** 
1242:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
1243:.\main.c      **** void effector()
1244:.\main.c      **** {
 3588              		.loc 2 1244 0
 3589              		.cfi_startproc
 3590 0000 90B5     		push	{r4, r7, lr}
 3591              		.cfi_def_cfa_offset 12
 3592              		.cfi_offset 4, -12
 3593              		.cfi_offset 7, -8
 3594              		.cfi_offset 14, -4
 3595 0002 83B0     		sub	sp, sp, #12
 3596              		.cfi_def_cfa_offset 24
 3597 0004 00AF     		add	r7, sp, #0
 3598              		.cfi_def_cfa_register 7
1245:.\main.c      ****     uint16 command;
1246:.\main.c      **** 
1247:.\main.c      ****     switch(effector_state){ //actions
 3599              		.loc 2 1247 0
 3600 0006 384B     		ldr	r3, .L275
 3601 0008 1B78     		ldrb	r3, [r3]
 3602 000a 012B     		cmp	r3, #1
 3603 000c 08D0     		beq	.L254
 3604 000e 02DC     		bgt	.L255
 3605 0010 002B     		cmp	r3, #0
 3606 0012 32D0     		beq	.L273
 3607 0014 2DE0     		b	.L253
 3608              	.L255:
 3609 0016 022B     		cmp	r3, #2
 3610 0018 08D0     		beq	.L257
 3611 001a 032B     		cmp	r3, #3
 3612 001c 2FD0     		beq	.L274
 3613 001e 28E0     		b	.L253
 3614              	.L254:
1248:.\main.c      ****         case eff_start:
1249:.\main.c      ****             break;
1250:.\main.c      **** 
1251:.\main.c      ****         case eff_init:           
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 88


1252:.\main.c      ****            EFFECTOR_PWM_WriteCompare(NEUTRAL);
 3615              		.loc 2 1252 0
 3616 0020 324B     		ldr	r3, .L275+4
 3617 0022 1B88     		ldrh	r3, [r3]
 3618 0024 181C     		mov	r0, r3
 3619 0026 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1253:.\main.c      ****            break;
 3620              		.loc 2 1253 0
 3621 002a 29E0     		b	.L259
 3622              	.L257:
1254:.\main.c      **** 
1255:.\main.c      ****         case eff_execute:
1256:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);
 3623              		.loc 2 1256 0
 3624 002c BC1D     		add	r4, r7, #6
 3625 002e 304B     		ldr	r3, .L275+8
 3626 0030 181C     		mov	r0, r3
 3627 0032 1421     		mov	r1, #20
 3628 0034 1522     		mov	r2, #21
 3629 0036 FFF7FEFF 		bl	make_command
 3630 003a 031C     		mov	r3, r0
 3631 003c 2380     		strh	r3, [r4]
1257:.\main.c      **** 
1258:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3632              		.loc 2 1258 0
 3633 003e BB1D     		add	r3, r7, #6
 3634 0040 1A88     		ldrh	r2, [r3]
 3635 0042 FA23     		mov	r3, #250
 3636 0044 DB00     		lsl	r3, r3, #3
 3637 0046 9A42     		cmp	r2, r3
 3638 0048 0AD8     		bhi	.L260
 3639              		.loc 2 1258 0 is_stmt 0 discriminator 1
 3640 004a BB1D     		add	r3, r7, #6
 3641 004c 1A88     		ldrh	r2, [r3]
 3642 004e 294B     		ldr	r3, .L275+12
 3643 0050 9A42     		cmp	r2, r3
 3644 0052 05D9     		bls	.L260
1259:.\main.c      ****             {
1260:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3645              		.loc 2 1260 0 is_stmt 1
 3646 0054 BB1D     		add	r3, r7, #6
 3647 0056 1B88     		ldrh	r3, [r3]
 3648 0058 181C     		mov	r0, r3
 3649 005a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3650 005e 04E0     		b	.L261
 3651              	.L260:
1261:.\main.c      ****             }
1262:.\main.c      ****             else
1263:.\main.c      ****             {
1264:.\main.c      **** //                //increment error variable
1265:.\main.c      **** //                int8 temp_1 = data_array[EFF_BYTE_1];
1266:.\main.c      **** //                int8 temp_2 = data_array[EFF_BYTE_2];
1267:.\main.c      **** //                int8 temp_3 = 0xfc;
1268:.\main.c      **** //                int8 temp_4 = 0x18;
1269:.\main.c      **** //                LED_Write(1);
1270:.\main.c      **** //                
1271:.\main.c      **** //                if((temp_1 == temp_3)&&(temp_2 == temp_4))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 89


1272:.\main.c      **** //                {
1273:.\main.c      **** //                    EFFECTOR_PWM_WriteCompare(1000);   
1274:.\main.c      **** //                }
1275:.\main.c      **** //                else
1276:.\main.c      **** //                {
1277:.\main.c      **** //                    EFFECTOR_PWM_WriteCompare(NEUTRAL);
1278:.\main.c      **** //                }
1279:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(1000);
 3652              		.loc 2 1279 0
 3653 0060 FA23     		mov	r3, #250
 3654 0062 9B00     		lsl	r3, r3, #2
 3655 0064 181C     		mov	r0, r3
 3656 0066 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3657              	.L261:
1280:.\main.c      ****             }
1281:.\main.c      ****             
1282:.\main.c      ****             EFFECTOR_FLAG = 0;
 3658              		.loc 2 1282 0
 3659 006a 234B     		ldr	r3, .L275+16
 3660 006c 0022     		mov	r2, #0
 3661 006e 1A70     		strb	r2, [r3]
1283:.\main.c      ****             break;
 3662              		.loc 2 1283 0
 3663 0070 06E0     		b	.L259
 3664              	.L253:
1284:.\main.c      ****             
1285:.\main.c      ****         case eff_wait:
1286:.\main.c      ****             break;
1287:.\main.c      ****         
1288:.\main.c      ****         default:
1289:.\main.c      ****             effector_state = eff_start;
 3665              		.loc 2 1289 0
 3666 0072 1D4B     		ldr	r3, .L275
 3667 0074 0022     		mov	r2, #0
 3668 0076 1A70     		strb	r2, [r3]
1290:.\main.c      ****             break;
 3669              		.loc 2 1290 0
 3670 0078 02E0     		b	.L259
 3671              	.L273:
1249:.\main.c      ****             break;
 3672              		.loc 2 1249 0
 3673 007a C046     		mov	r8, r8
 3674 007c 00E0     		b	.L259
 3675              	.L274:
1286:.\main.c      ****             break;
 3676              		.loc 2 1286 0
 3677 007e C046     		mov	r8, r8
 3678              	.L259:
1291:.\main.c      ****     }
1292:.\main.c      ****     
1293:.\main.c      ****     switch(effector_state){ //transitions
 3679              		.loc 2 1293 0
 3680 0080 194B     		ldr	r3, .L275
 3681 0082 1B78     		ldrb	r3, [r3]
 3682 0084 012B     		cmp	r3, #1
 3683 0086 0CD0     		beq	.L263
 3684 0088 02DC     		bgt	.L264
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 90


 3685 008a 002B     		cmp	r3, #0
 3686 008c 05D0     		beq	.L265
 3687 008e 24E0     		b	.L262
 3688              	.L264:
 3689 0090 022B     		cmp	r3, #2
 3690 0092 0AD0     		beq	.L266
 3691 0094 032B     		cmp	r3, #3
 3692 0096 14D0     		beq	.L267
 3693 0098 1FE0     		b	.L262
 3694              	.L265:
1294:.\main.c      ****         case eff_start:
1295:.\main.c      ****             effector_state = eff_init;
 3695              		.loc 2 1295 0
 3696 009a 134B     		ldr	r3, .L275
 3697 009c 0122     		mov	r2, #1
 3698 009e 1A70     		strb	r2, [r3]
1296:.\main.c      ****             break;
 3699              		.loc 2 1296 0
 3700 00a0 1FE0     		b	.L252
 3701              	.L263:
1297:.\main.c      ****         
1298:.\main.c      ****         case eff_init:
1299:.\main.c      ****             effector_state = eff_wait;
 3702              		.loc 2 1299 0
 3703 00a2 114B     		ldr	r3, .L275
 3704 00a4 0322     		mov	r2, #3
 3705 00a6 1A70     		strb	r2, [r3]
1300:.\main.c      ****             break;
 3706              		.loc 2 1300 0
 3707 00a8 1BE0     		b	.L252
 3708              	.L266:
1301:.\main.c      ****         
1302:.\main.c      ****         case eff_execute:
1303:.\main.c      ****             if(EFFECTOR_FLAG)
 3709              		.loc 2 1303 0
 3710 00aa 134B     		ldr	r3, .L275+16
 3711 00ac 1B78     		ldrb	r3, [r3]
 3712 00ae 002B     		cmp	r3, #0
 3713 00b0 03D0     		beq	.L269
1304:.\main.c      ****             {
1305:.\main.c      ****                 effector_state = eff_execute;
 3714              		.loc 2 1305 0
 3715 00b2 0D4B     		ldr	r3, .L275
 3716 00b4 0222     		mov	r2, #2
 3717 00b6 1A70     		strb	r2, [r3]
1306:.\main.c      ****             }
1307:.\main.c      ****             else
1308:.\main.c      ****             {
1309:.\main.c      ****                 effector_state = eff_wait;
1310:.\main.c      ****             }
1311:.\main.c      ****             break;
 3718              		.loc 2 1311 0
 3719 00b8 13E0     		b	.L252
 3720              	.L269:
1309:.\main.c      ****                 effector_state = eff_wait;
 3721              		.loc 2 1309 0
 3722 00ba 0B4B     		ldr	r3, .L275
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 91


 3723 00bc 0322     		mov	r2, #3
 3724 00be 1A70     		strb	r2, [r3]
 3725              		.loc 2 1311 0
 3726 00c0 0FE0     		b	.L252
 3727              	.L267:
1312:.\main.c      ****         
1313:.\main.c      ****         case eff_wait:
1314:.\main.c      ****             if(EFFECTOR_FLAG)
 3728              		.loc 2 1314 0
 3729 00c2 0D4B     		ldr	r3, .L275+16
 3730 00c4 1B78     		ldrb	r3, [r3]
 3731 00c6 002B     		cmp	r3, #0
 3732 00c8 03D0     		beq	.L271
1315:.\main.c      ****             {
1316:.\main.c      ****                 effector_state = eff_execute;
 3733              		.loc 2 1316 0
 3734 00ca 074B     		ldr	r3, .L275
 3735 00cc 0222     		mov	r2, #2
 3736 00ce 1A70     		strb	r2, [r3]
1317:.\main.c      ****             }
1318:.\main.c      ****             else
1319:.\main.c      ****             {
1320:.\main.c      ****                 effector_state = eff_wait; 
1321:.\main.c      ****             }
1322:.\main.c      ****             break;
 3737              		.loc 2 1322 0
 3738 00d0 07E0     		b	.L252
 3739              	.L271:
1320:.\main.c      ****                 effector_state = eff_wait; 
 3740              		.loc 2 1320 0
 3741 00d2 054B     		ldr	r3, .L275
 3742 00d4 0322     		mov	r2, #3
 3743 00d6 1A70     		strb	r2, [r3]
 3744              		.loc 2 1322 0
 3745 00d8 03E0     		b	.L252
 3746              	.L262:
1323:.\main.c      ****         
1324:.\main.c      ****         default:
1325:.\main.c      ****             effector_state = eff_start;
 3747              		.loc 2 1325 0
 3748 00da 034B     		ldr	r3, .L275
 3749 00dc 0022     		mov	r2, #0
 3750 00de 1A70     		strb	r2, [r3]
1326:.\main.c      ****             break;
 3751              		.loc 2 1326 0
 3752 00e0 C046     		mov	r8, r8
 3753              	.L252:
1327:.\main.c      ****     }    
1328:.\main.c      **** }
 3754              		.loc 2 1328 0
 3755 00e2 BD46     		mov	sp, r7
 3756 00e4 03B0     		add	sp, sp, #12
 3757              		@ sp needed
 3758 00e6 90BD     		pop	{r4, r7, pc}
 3759              	.L276:
 3760              		.align	2
 3761              	.L275:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 92


 3762 00e8 00000000 		.word	effector_state
 3763 00ec 00000000 		.word	NEUTRAL
 3764 00f0 00000000 		.word	data_array
 3765 00f4 E7030000 		.word	999
 3766 00f8 00000000 		.word	EFFECTOR_FLAG
 3767              		.cfi_endproc
 3768              	.LFE58:
 3769              		.size	effector, .-effector
 3770              		.comm	arduino_state,1,1
 3771              		.section	.text.arduino,"ax",%progbits
 3772              		.align	2
 3773              		.global	arduino
 3774              		.code	16
 3775              		.thumb_func
 3776              		.type	arduino, %function
 3777              	arduino:
 3778              	.LFB59:
1329:.\main.c      **** 
1330:.\main.c      **** enum arduino_states {ard_start, ard_init, ard_wait, ard_read, ard_write} arduino_state;
1331:.\main.c      **** void arduino()
1332:.\main.c      **** {
 3779              		.loc 2 1332 0
 3780              		.cfi_startproc
 3781 0000 80B5     		push	{r7, lr}
 3782              		.cfi_def_cfa_offset 8
 3783              		.cfi_offset 7, -8
 3784              		.cfi_offset 14, -4
 3785 0002 82B0     		sub	sp, sp, #8
 3786              		.cfi_def_cfa_offset 16
 3787 0004 00AF     		add	r7, sp, #0
 3788              		.cfi_def_cfa_register 7
1333:.\main.c      ****     uint8 video_mux;
1334:.\main.c      ****     uint8 laser;
1335:.\main.c      ****     uint8 pack_for_rover;
1336:.\main.c      ****     uint8 ARD_ARRAY_SIZE = 12;
 3789              		.loc 2 1336 0
 3790 0006 FB1C     		add	r3, r7, #3
 3791 0008 0C22     		mov	r2, #12
 3792 000a 1A70     		strb	r2, [r3]
1337:.\main.c      ****     
1338:.\main.c      ****     switch(arduino_state) //state actions
 3793              		.loc 2 1338 0
 3794 000c 3C4B     		ldr	r3, .L301
 3795 000e 1B78     		ldrb	r3, [r3]
 3796 0010 042B     		cmp	r3, #4
 3797 0012 3BD8     		bhi	.L278
 3798 0014 9A00     		lsl	r2, r3, #2
 3799 0016 3B4B     		ldr	r3, .L301+4
 3800 0018 D318     		add	r3, r2, r3
 3801 001a 1B68     		ldr	r3, [r3]
 3802 001c 9F46     		mov	pc, r3
 3803              		.section	.rodata
 3804              		.align	2
 3805              	.L280:
 3806 0050 94000000 		.word	.L300
 3807 0054 1E000000 		.word	.L281
 3808 0058 94000000 		.word	.L300
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 93


 3809 005c 44000000 		.word	.L283
 3810 0060 6C000000 		.word	.L284
 3811              		.section	.text.arduino
 3812              	.L281:
1339:.\main.c      ****     {
1340:.\main.c      ****         case ard_start:
1341:.\main.c      ****             break;
1342:.\main.c      ****         
1343:.\main.c      ****         case ard_init:
1344:.\main.c      ****             video_mux = 0x01;
 3813              		.loc 2 1344 0
 3814 001e BB1C     		add	r3, r7, #2
 3815 0020 0122     		mov	r2, #1
 3816 0022 1A70     		strb	r2, [r3]
1345:.\main.c      ****             laser = 0x00;
 3817              		.loc 2 1345 0
 3818 0024 7B1C     		add	r3, r7, #1
 3819 0026 0022     		mov	r2, #0
 3820 0028 1A70     		strb	r2, [r3]
1346:.\main.c      ****             pack_for_rover = video_mux | laser;
 3821              		.loc 2 1346 0
 3822 002a 3B1C     		mov	r3, r7
 3823 002c B91C     		add	r1, r7, #2
 3824 002e 7A1C     		add	r2, r7, #1
 3825 0030 0978     		ldrb	r1, [r1]
 3826 0032 1278     		ldrb	r2, [r2]
 3827 0034 0A43     		orr	r2, r1
 3828 0036 1A70     		strb	r2, [r3]
1347:.\main.c      ****             //write initial video, laser enable
1348:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 3829              		.loc 2 1348 0
 3830 0038 3B1C     		mov	r3, r7
 3831 003a 1B78     		ldrb	r3, [r3]
 3832 003c 181C     		mov	r0, r3
 3833 003e FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
1349:.\main.c      ****             break;
 3834              		.loc 2 1349 0
 3835 0042 28E0     		b	.L285
 3836              	.L283:
 3837              	.LBB2:
1350:.\main.c      ****         
1351:.\main.c      ****         case ard_wait:
1352:.\main.c      ****             break;
1353:.\main.c      ****         
1354:.\main.c      ****         case ard_read:
1355:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 3838              		.loc 2 1355 0
 3839 0044 0023     		mov	r3, #0
 3840 0046 7B60     		str	r3, [r7, #4]
 3841 0048 0AE0     		b	.L286
 3842              	.L287:
1356:.\main.c      ****             {
1357:.\main.c      ****               feedback_array[i] = Arduino_UART_UartGetByte();
 3843              		.loc 2 1357 0 discriminator 2
 3844 004a FFF7FEFF 		bl	Arduino_UART_UartGetByte
 3845 004e 031C     		mov	r3, r0
 3846 0050 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 94


 3847 0052 2D49     		ldr	r1, .L301+8
 3848 0054 7B68     		ldr	r3, [r7, #4]
 3849 0056 CB18     		add	r3, r1, r3
 3850 0058 1A70     		strb	r2, [r3]
1355:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 3851              		.loc 2 1355 0 discriminator 2
 3852 005a 7B68     		ldr	r3, [r7, #4]
 3853 005c 0133     		add	r3, r3, #1
 3854 005e 7B60     		str	r3, [r7, #4]
 3855              	.L286:
1355:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 3856              		.loc 2 1355 0 is_stmt 0 discriminator 1
 3857 0060 FB1C     		add	r3, r7, #3
 3858 0062 1A78     		ldrb	r2, [r3]
 3859 0064 7B68     		ldr	r3, [r7, #4]
 3860 0066 9A42     		cmp	r2, r3
 3861 0068 EFDC     		bgt	.L287
 3862              	.LBE2:
1358:.\main.c      ****             }
1359:.\main.c      ****             break;
 3863              		.loc 2 1359 0 is_stmt 1
 3864 006a 14E0     		b	.L285
 3865              	.L284:
1360:.\main.c      ****         
1361:.\main.c      ****         case ard_write:
1362:.\main.c      ****             //write laser
1363:.\main.c      ****             //write video
1364:.\main.c      ****             //video_mux = data_array[ARD_BYTE_1];
1365:.\main.c      ****             //laser = data_array[ARD_BYTE_2];
1366:.\main.c      ****             
1367:.\main.c      ****             pack_for_rover = video_mux | laser;
 3866              		.loc 2 1367 0
 3867 006c 3B1C     		mov	r3, r7
 3868 006e B91C     		add	r1, r7, #2
 3869 0070 7A1C     		add	r2, r7, #1
 3870 0072 0978     		ldrb	r1, [r1]
 3871 0074 1278     		ldrb	r2, [r2]
 3872 0076 0A43     		orr	r2, r1
 3873 0078 1A70     		strb	r2, [r3]
1368:.\main.c      ****             
1369:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 3874              		.loc 2 1369 0
 3875 007a 3B1C     		mov	r3, r7
 3876 007c 1B78     		ldrb	r3, [r3]
 3877 007e 181C     		mov	r0, r3
 3878 0080 FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
1370:.\main.c      ****             
1371:.\main.c      ****             //pass exactly what was sent to me by basestation
1372:.\main.c      ****             ARD_FLAG = 0;
 3879              		.loc 2 1372 0
 3880 0084 214B     		ldr	r3, .L301+12
 3881 0086 0022     		mov	r2, #0
 3882 0088 1A70     		strb	r2, [r3]
1373:.\main.c      ****             break;
 3883              		.loc 2 1373 0
 3884 008a 04E0     		b	.L285
 3885              	.L278:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 95


1374:.\main.c      ****         
1375:.\main.c      ****         default:
1376:.\main.c      ****             arduino_state = ard_start;
 3886              		.loc 2 1376 0
 3887 008c 1C4B     		ldr	r3, .L301
 3888 008e 0022     		mov	r2, #0
 3889 0090 1A70     		strb	r2, [r3]
1377:.\main.c      ****             break;
 3890              		.loc 2 1377 0
 3891 0092 00E0     		b	.L285
 3892              	.L300:
1341:.\main.c      ****             break;
 3893              		.loc 2 1341 0
 3894 0094 C046     		mov	r8, r8
 3895              	.L285:
1378:.\main.c      ****     }
1379:.\main.c      ****     switch(arduino_state) //state transitions
 3896              		.loc 2 1379 0
 3897 0096 1A4B     		ldr	r3, .L301
 3898 0098 1B78     		ldrb	r3, [r3]
 3899 009a 042B     		cmp	r3, #4
 3900 009c 28D8     		bhi	.L288
 3901 009e 9A00     		lsl	r2, r3, #2
 3902 00a0 1B4B     		ldr	r3, .L301+16
 3903 00a2 D318     		add	r3, r2, r3
 3904 00a4 1B68     		ldr	r3, [r3]
 3905 00a6 9F46     		mov	pc, r3
 3906              		.section	.rodata
 3907              		.align	2
 3908              	.L290:
 3909 0064 A8000000 		.word	.L289
 3910 0068 B0000000 		.word	.L291
 3911 006c B8000000 		.word	.L292
 3912 0070 C0000000 		.word	.L293
 3913 0074 D8000000 		.word	.L294
 3914              		.section	.text.arduino
 3915              	.L289:
1380:.\main.c      ****     {
1381:.\main.c      ****         case ard_start:
1382:.\main.c      ****             arduino_state = ard_init;
 3916              		.loc 2 1382 0
 3917 00a8 154B     		ldr	r3, .L301
 3918 00aa 0122     		mov	r2, #1
 3919 00ac 1A70     		strb	r2, [r3]
1383:.\main.c      ****             break;
 3920              		.loc 2 1383 0
 3921 00ae 23E0     		b	.L277
 3922              	.L291:
1384:.\main.c      ****         
1385:.\main.c      ****         case ard_init:
1386:.\main.c      ****             arduino_state = ard_wait;
 3923              		.loc 2 1386 0
 3924 00b0 134B     		ldr	r3, .L301
 3925 00b2 0222     		mov	r2, #2
 3926 00b4 1A70     		strb	r2, [r3]
1387:.\main.c      ****             break;
 3927              		.loc 2 1387 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 96


 3928 00b6 1FE0     		b	.L277
 3929              	.L292:
1388:.\main.c      ****         
1389:.\main.c      ****         case ard_wait:
1390:.\main.c      ****             arduino_state = ard_read;
 3930              		.loc 2 1390 0
 3931 00b8 114B     		ldr	r3, .L301
 3932 00ba 0322     		mov	r2, #3
 3933 00bc 1A70     		strb	r2, [r3]
1391:.\main.c      ****             break;
 3934              		.loc 2 1391 0
 3935 00be 1BE0     		b	.L277
 3936              	.L293:
1392:.\main.c      ****         
1393:.\main.c      ****         case ard_read:
1394:.\main.c      ****             if(ARD_FLAG)
 3937              		.loc 2 1394 0
 3938 00c0 124B     		ldr	r3, .L301+12
 3939 00c2 1B78     		ldrb	r3, [r3]
 3940 00c4 002B     		cmp	r3, #0
 3941 00c6 03D0     		beq	.L296
1395:.\main.c      ****             {
1396:.\main.c      ****                 arduino_state = ard_write;
 3942              		.loc 2 1396 0
 3943 00c8 0D4B     		ldr	r3, .L301
 3944 00ca 0422     		mov	r2, #4
 3945 00cc 1A70     		strb	r2, [r3]
1397:.\main.c      ****             }
1398:.\main.c      ****             else
1399:.\main.c      ****             {
1400:.\main.c      ****                 arduino_state = ard_wait;
1401:.\main.c      ****             }
1402:.\main.c      ****             break;
 3946              		.loc 2 1402 0
 3947 00ce 13E0     		b	.L277
 3948              	.L296:
1400:.\main.c      ****                 arduino_state = ard_wait;
 3949              		.loc 2 1400 0
 3950 00d0 0B4B     		ldr	r3, .L301
 3951 00d2 0222     		mov	r2, #2
 3952 00d4 1A70     		strb	r2, [r3]
 3953              		.loc 2 1402 0
 3954 00d6 0FE0     		b	.L277
 3955              	.L294:
1403:.\main.c      ****             
1404:.\main.c      ****         case ard_write:
1405:.\main.c      ****             if(ARD_FLAG)
 3956              		.loc 2 1405 0
 3957 00d8 0C4B     		ldr	r3, .L301+12
 3958 00da 1B78     		ldrb	r3, [r3]
 3959 00dc 002B     		cmp	r3, #0
 3960 00de 03D0     		beq	.L298
1406:.\main.c      ****             {
1407:.\main.c      ****                 arduino_state = ard_write;
 3961              		.loc 2 1407 0
 3962 00e0 074B     		ldr	r3, .L301
 3963 00e2 0422     		mov	r2, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 97


 3964 00e4 1A70     		strb	r2, [r3]
1408:.\main.c      ****             }
1409:.\main.c      ****             else
1410:.\main.c      ****             {
1411:.\main.c      ****                 arduino_state = ard_wait;
1412:.\main.c      ****             }
1413:.\main.c      ****             break;
 3965              		.loc 2 1413 0
 3966 00e6 07E0     		b	.L277
 3967              	.L298:
1411:.\main.c      ****                 arduino_state = ard_wait;
 3968              		.loc 2 1411 0
 3969 00e8 054B     		ldr	r3, .L301
 3970 00ea 0222     		mov	r2, #2
 3971 00ec 1A70     		strb	r2, [r3]
 3972              		.loc 2 1413 0
 3973 00ee 03E0     		b	.L277
 3974              	.L288:
1414:.\main.c      ****             
1415:.\main.c      ****         default:
1416:.\main.c      ****             arduino_state = ard_start;
 3975              		.loc 2 1416 0
 3976 00f0 034B     		ldr	r3, .L301
 3977 00f2 0022     		mov	r2, #0
 3978 00f4 1A70     		strb	r2, [r3]
1417:.\main.c      ****             break;
 3979              		.loc 2 1417 0
 3980 00f6 C046     		mov	r8, r8
 3981              	.L277:
1418:.\main.c      ****     }   
1419:.\main.c      **** }
 3982              		.loc 2 1419 0
 3983 00f8 BD46     		mov	sp, r7
 3984 00fa 02B0     		add	sp, sp, #8
 3985              		@ sp needed
 3986 00fc 80BD     		pop	{r7, pc}
 3987              	.L302:
 3988 00fe C046     		.align	2
 3989              	.L301:
 3990 0100 00000000 		.word	arduino_state
 3991 0104 50000000 		.word	.L280
 3992 0108 00000000 		.word	feedback_array
 3993 010c 00000000 		.word	ARD_FLAG
 3994 0110 64000000 		.word	.L290
 3995              		.cfi_endproc
 3996              	.LFE59:
 3997              		.size	arduino, .-arduino
 3998              		.section	.text.initialize,"ax",%progbits
 3999              		.align	2
 4000              		.global	initialize
 4001              		.code	16
 4002              		.thumb_func
 4003              		.type	initialize, %function
 4004              	initialize:
 4005              	.LFB60:
1420:.\main.c      **** 
1421:.\main.c      **** //Initialization function for the program
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 98


1422:.\main.c      **** void initialize()
1423:.\main.c      **** {
 4006              		.loc 2 1423 0
 4007              		.cfi_startproc
 4008 0000 80B5     		push	{r7, lr}
 4009              		.cfi_def_cfa_offset 8
 4010              		.cfi_offset 7, -8
 4011              		.cfi_offset 14, -4
 4012 0002 82B0     		sub	sp, sp, #8
 4013              		.cfi_def_cfa_offset 16
 4014 0004 00AF     		add	r7, sp, #0
 4015              		.cfi_def_cfa_register 7
1424:.\main.c      ****     //initialize the wiznet
1425:.\main.c      ****     WIZ_RST_Write(0);
 4016              		.loc 2 1425 0
 4017 0006 0020     		mov	r0, #0
 4018 0008 FFF7FEFF 		bl	WIZ_RST_Write
1426:.\main.c      ****     CyDelay(10);
 4019              		.loc 2 1426 0
 4020 000c 0A20     		mov	r0, #10
 4021 000e FFF7FEFF 		bl	CyDelay
1427:.\main.c      ****     WIZ_RST_Write(1);
 4022              		.loc 2 1427 0
 4023 0012 0120     		mov	r0, #1
 4024 0014 FFF7FEFF 		bl	WIZ_RST_Write
1428:.\main.c      ****     WIZ_SS_Write(1);
 4025              		.loc 2 1428 0
 4026 0018 0120     		mov	r0, #1
 4027 001a FFF7FEFF 		bl	WIZ_SS_Write
 4028              	.LBB3:
1429:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4029              		.loc 2 1429 0
 4030 001e FB1D     		add	r3, r7, #7
 4031 0020 0022     		mov	r2, #0
 4032 0022 1A70     		strb	r2, [r3]
 4033 0024 0DE0     		b	.L304
 4034              	.L307:
1430:.\main.c      ****     {
1431:.\main.c      ****         if(WIZ_RDY_Read())
 4035              		.loc 2 1431 0
 4036 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 4037 002a 031C     		mov	r3, r0
 4038 002c 002B     		cmp	r3, #0
 4039 002e 00D0     		beq	.L305
1432:.\main.c      ****         {
1433:.\main.c      ****             break;
 4040              		.loc 2 1433 0
 4041 0030 0BE0     		b	.L306
 4042              	.L305:
1434:.\main.c      ****         }
1435:.\main.c      ****         else
1436:.\main.c      ****         {
1437:.\main.c      ****             CyDelay(4);
 4043              		.loc 2 1437 0
 4044 0032 0420     		mov	r0, #4
 4045 0034 FFF7FEFF 		bl	CyDelay
1429:.\main.c      ****     for(uint8 j=0; j<100; j++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 99


 4046              		.loc 2 1429 0
 4047 0038 FB1D     		add	r3, r7, #7
 4048 003a 1A78     		ldrb	r2, [r3]
 4049 003c FB1D     		add	r3, r7, #7
 4050 003e 0132     		add	r2, r2, #1
 4051 0040 1A70     		strb	r2, [r3]
 4052              	.L304:
1429:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4053              		.loc 2 1429 0 is_stmt 0 discriminator 1
 4054 0042 FB1D     		add	r3, r7, #7
 4055 0044 1B78     		ldrb	r3, [r3]
 4056 0046 632B     		cmp	r3, #99
 4057 0048 EDD9     		bls	.L307
 4058              	.L306:
 4059              	.LBE3:
1438:.\main.c      ****         }
1439:.\main.c      ****     }
1440:.\main.c      ****     
1441:.\main.c      ****     //Initialize state variables
1442:.\main.c      ****     baseAzimuth_state = BA_start;
 4060              		.loc 2 1442 0 is_stmt 1
 4061 004a 274B     		ldr	r3, .L308
 4062 004c 0022     		mov	r2, #0
 4063 004e 1A70     		strb	r2, [r3]
1443:.\main.c      ****     wristTilt_state = tilt_start;
 4064              		.loc 2 1443 0
 4065 0050 264B     		ldr	r3, .L308+4
 4066 0052 0022     		mov	r2, #0
 4067 0054 1A70     		strb	r2, [r3]
1444:.\main.c      ****     wristRotate_state = rotate_start;
 4068              		.loc 2 1444 0
 4069 0056 264B     		ldr	r3, .L308+8
 4070 0058 0022     		mov	r2, #0
 4071 005a 1A70     		strb	r2, [r3]
1445:.\main.c      ****     shoulder_state = shldr_start;
 4072              		.loc 2 1445 0
 4073 005c 254B     		ldr	r3, .L308+12
 4074 005e 0022     		mov	r2, #0
 4075 0060 1A70     		strb	r2, [r3]
1446:.\main.c      ****     elbow_state = elbw_start;
 4076              		.loc 2 1446 0
 4077 0062 254B     		ldr	r3, .L308+16
 4078 0064 0022     		mov	r2, #0
 4079 0066 1A70     		strb	r2, [r3]
1447:.\main.c      ****     effector_state = eff_start;
 4080              		.loc 2 1447 0
 4081 0068 244B     		ldr	r3, .L308+20
 4082 006a 0022     		mov	r2, #0
 4083 006c 1A70     		strb	r2, [r3]
1448:.\main.c      ****     //arduino_state = ard_start;
1449:.\main.c      ****     //send_packet_state = send_start;
1450:.\main.c      ****     
1451:.\main.c      ****     //start all of our components
1452:.\main.c      ****     SPIM_1_Start();
 4084              		.loc 2 1452 0
 4085 006e FFF7FEFF 		bl	SPIM_1_Start
1453:.\main.c      ****     Clock_pwm_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 100


 4086              		.loc 2 1453 0
 4087 0072 FFF7FEFF 		bl	Clock_pwm_Start
1454:.\main.c      ****     Clock_counter_Start();
 4088              		.loc 2 1454 0
 4089 0076 FFF7FEFF 		bl	Clock_counter_Start
1455:.\main.c      ****     Wrist_UART_Start();
 4090              		.loc 2 1455 0
 4091 007a FFF7FEFF 		bl	Wrist_UART_Start
1456:.\main.c      ****     SHLDR_PWM_Start();
 4092              		.loc 2 1456 0
 4093 007e FFF7FEFF 		bl	SHLDR_PWM_Start
1457:.\main.c      ****     BA_PWM_Start();
 4094              		.loc 2 1457 0
 4095 0082 FFF7FEFF 		bl	BA_PWM_Start
1458:.\main.c      ****     ELBW_PWM_Start();
 4096              		.loc 2 1458 0
 4097 0086 FFF7FEFF 		bl	ELBW_PWM_Start
1459:.\main.c      ****     EFFECTOR_PWM_Start();
 4098              		.loc 2 1459 0
 4099 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
1460:.\main.c      ****     //ADC_Start();
1461:.\main.c      ****     //ADC_StartConvert();
1462:.\main.c      ****     //Arduino_UART_Start();
1463:.\main.c      ****     
1464:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 4100              		.loc 2 1464 0
 4101 008e 1C4B     		ldr	r3, .L308+24
 4102 0090 0420     		mov	r0, #4
 4103 0092 8221     		mov	r1, #130
 4104 0094 1A1C     		mov	r2, r3
 4105 0096 FFF7FEFF 		bl	wiznetInit
1465:.\main.c      ****     
1466:.\main.c      ****     //Initialize the dynamixels <-- Will do this on the computer
1467:.\main.c      ****     ServoSpeed(0xFE, 100);
 4106              		.loc 2 1467 0
 4107 009a FE20     		mov	r0, #254
 4108 009c 6421     		mov	r1, #100
 4109 009e FFF7FEFF 		bl	ServoSpeed
1468:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 4110              		.loc 2 1468 0
 4111 00a2 184B     		ldr	r3, .L308+28
 4112 00a4 FE20     		mov	r0, #254
 4113 00a6 191C     		mov	r1, r3
 4114 00a8 FFF7FEFF 		bl	SetServoTorque
1469:.\main.c      ****     
1470:.\main.c      ****     //Initialize our motor drivers
1471:.\main.c      ****     ELBW_PWM_WriteCompare(NEUTRAL); 
 4115              		.loc 2 1471 0
 4116 00ac 164B     		ldr	r3, .L308+32
 4117 00ae 1B88     		ldrh	r3, [r3]
 4118 00b0 181C     		mov	r0, r3
 4119 00b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1472:.\main.c      ****     SHLDR_PWM_WriteCompare(NEUTRAL);
 4120              		.loc 2 1472 0
 4121 00b6 144B     		ldr	r3, .L308+32
 4122 00b8 1B88     		ldrh	r3, [r3]
 4123 00ba 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 101


 4124 00bc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1473:.\main.c      ****     EFFECTOR_PWM_WriteCompare(NEUTRAL);
 4125              		.loc 2 1473 0
 4126 00c0 114B     		ldr	r3, .L308+32
 4127 00c2 1B88     		ldrh	r3, [r3]
 4128 00c4 181C     		mov	r0, r3
 4129 00c6 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1474:.\main.c      ****     CyDelay(3000);
 4130              		.loc 2 1474 0
 4131 00ca 104B     		ldr	r3, .L308+36
 4132 00cc 181C     		mov	r0, r3
 4133 00ce FFF7FEFF 		bl	CyDelay
1475:.\main.c      ****     
1476:.\main.c      ****     //initial calibration funtions for elbow and shoulder pots
1477:.\main.c      **** //    SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
1478:.\main.c      **** //    SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
1479:.\main.c      **** //    SHLDR_PWM_WriteCompare(1700);
1480:.\main.c      **** //    CyDelay(5000);
1481:.\main.c      **** //    SHLDR_PWM_WriteCompare(NEUTRAL);
1482:.\main.c      **** //    
1483:.\main.c      **** //    ELBOW_UPPER_BOUND = CalibrationElbow(1700);
1484:.\main.c      **** //    ELBOW_LOWER_BOUND = CalibrationElbow(1300);
1485:.\main.c      **** //    ELBW_PWM_WriteCompare(1700);
1486:.\main.c      **** //    CyDelay(2000);
1487:.\main.c      **** //    ELBW_PWM_WriteCompare(NEUTRAL);
1488:.\main.c      ****     
1489:.\main.c      ****     //ISR stuff
1490:.\main.c      ****     CyGlobalIntEnable;
 4134              		.loc 2 1490 0
 4135              	@ 1490 ".\main.c" 1
 4136 00d2 62B6     		CPSIE   i
 4137              	@ 0 "" 2
1491:.\main.c      ****     isr_1_StartEx(timer_isr);
 4138              		.loc 2 1491 0
 4139              		.code	16
 4140 00d4 0E4B     		ldr	r3, .L308+40
 4141 00d6 181C     		mov	r0, r3
 4142 00d8 FFF7FEFF 		bl	isr_1_StartEx
1492:.\main.c      ****     Timer_1_Start();    
 4143              		.loc 2 1492 0
 4144 00dc FFF7FEFF 		bl	Timer_1_Start
1493:.\main.c      **** }
 4145              		.loc 2 1493 0
 4146 00e0 BD46     		mov	sp, r7
 4147 00e2 02B0     		add	sp, sp, #8
 4148              		@ sp needed
 4149 00e4 80BD     		pop	{r7, pc}
 4150              	.L309:
 4151 00e6 C046     		.align	2
 4152              	.L308:
 4153 00e8 00000000 		.word	baseAzimuth_state
 4154 00ec 00000000 		.word	wristTilt_state
 4155 00f0 00000000 		.word	wristRotate_state
 4156 00f4 00000000 		.word	shoulder_state
 4157 00f8 00000000 		.word	elbow_state
 4158 00fc 00000000 		.word	effector_state
 4159 0100 87690000 		.word	27015
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 102


 4160 0104 FF030000 		.word	1023
 4161 0108 00000000 		.word	NEUTRAL
 4162 010c B80B0000 		.word	3000
 4163 0110 00000000 		.word	timer_isr
 4164              		.cfi_endproc
 4165              	.LFE60:
 4166              		.size	initialize, .-initialize
 4167              		.section	.text.main,"ax",%progbits
 4168              		.align	2
 4169              		.global	main
 4170              		.code	16
 4171              		.thumb_func
 4172              		.type	main, %function
 4173              	main:
 4174              	.LFB61:
1494:.\main.c      **** int main()
1495:.\main.c      **** {  
 4175              		.loc 2 1495 0
 4176              		.cfi_startproc
 4177 0000 80B5     		push	{r7, lr}
 4178              		.cfi_def_cfa_offset 8
 4179              		.cfi_offset 7, -8
 4180              		.cfi_offset 14, -4
 4181 0002 84B0     		sub	sp, sp, #16
 4182              		.cfi_def_cfa_offset 24
 4183 0004 00AF     		add	r7, sp, #0
 4184              		.cfi_def_cfa_register 7
1496:.\main.c      ****     //Define variables
1497:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1498:.\main.c      **** //    uint8 BA_cspot;
1499:.\main.c      **** //    uint16 BA_array[BA_ARR_SIZE];
1500:.\main.c      **** //    uint8 shldr_cspot;
1501:.\main.c      **** //    uint16 shldr_array[SHLDR_ARR_SIZE];
1502:.\main.c      **** //    uint8 elbw_cspot;
1503:.\main.c      **** //    uint16 elbw_array[ELBW_ARR_SIZE];
1504:.\main.c      ****     //uint8 WT_cspot;
1505:.\main.c      ****     //uint16 WT_array[WT_ARR_SIZE];
1506:.\main.c      ****     //uint8 WR_cspot;
1507:.\main.c      ****     //uint16 WR_array[WR_ARR_SIZE];
1508:.\main.c      ****     
1509:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4185              		.loc 2 1509 0
 4186 0006 3B1C     		mov	r3, r7
 4187 0008 0F33     		add	r3, r3, #15
 4188 000a 0022     		mov	r2, #0
 4189 000c 1A70     		strb	r2, [r3]
1510:.\main.c      ****     int16 temp_val = NEUTRAL;
 4190              		.loc 2 1510 0
 4191 000e 334B     		ldr	r3, .L320
 4192 0010 1A88     		ldrh	r2, [r3]
 4193 0012 BB1D     		add	r3, r7, #6
 4194 0014 1A80     		strh	r2, [r3]
1511:.\main.c      ****     
1512:.\main.c      ****     initialize();
 4195              		.loc 2 1512 0
 4196 0016 FFF7FEFF 		bl	initialize
 4197              	.L318:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 103


1513:.\main.c      **** 
1514:.\main.c      ****     for(;;)
1515:.\main.c      ****     {   
1516:.\main.c      ****         //LED_Write(0);
1517:.\main.c      ****         
1518:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4198              		.loc 2 1518 0
 4199 001a FFF7FEFF 		bl	WIZ_INT_Read
 4200 001e 031C     		mov	r3, r0
 4201 0020 002B     		cmp	r3, #0
 4202 0022 1AD1     		bne	.L311
1519:.\main.c      ****         {
1520:.\main.c      ****             wiznetClearInterrupts();
 4203              		.loc 2 1520 0
 4204 0024 FFF7FEFF 		bl	wiznetClearInterrupts
1521:.\main.c      ****             fill_data_array();
 4205              		.loc 2 1521 0
 4206 0028 FFF7FEFF 		bl	fill_data_array
1522:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1523:.\main.c      ****             BA_FLAG = 1;
 4207              		.loc 2 1523 0
 4208 002c 2C4B     		ldr	r3, .L320+4
 4209 002e 0122     		mov	r2, #1
 4210 0030 1A70     		strb	r2, [r3]
1524:.\main.c      ****             WR_FLAG = 1;
 4211              		.loc 2 1524 0
 4212 0032 2C4B     		ldr	r3, .L320+8
 4213 0034 0122     		mov	r2, #1
 4214 0036 1A70     		strb	r2, [r3]
1525:.\main.c      ****             WT_FLAG = 1;
 4215              		.loc 2 1525 0
 4216 0038 2B4B     		ldr	r3, .L320+12
 4217 003a 0122     		mov	r2, #1
 4218 003c 1A70     		strb	r2, [r3]
1526:.\main.c      ****             SHOULDER_FLAG = 1;
 4219              		.loc 2 1526 0
 4220 003e 2B4B     		ldr	r3, .L320+16
 4221 0040 0122     		mov	r2, #1
 4222 0042 1A70     		strb	r2, [r3]
1527:.\main.c      ****             ELBOW_FLAG = 1;
 4223              		.loc 2 1527 0
 4224 0044 2A4B     		ldr	r3, .L320+20
 4225 0046 0122     		mov	r2, #1
 4226 0048 1A70     		strb	r2, [r3]
1528:.\main.c      ****             EFFECTOR_FLAG = 1;
 4227              		.loc 2 1528 0
 4228 004a 2A4B     		ldr	r3, .L320+24
 4229 004c 0122     		mov	r2, #1
 4230 004e 1A70     		strb	r2, [r3]
1529:.\main.c      ****             //ARD_FLAG = 1;
1530:.\main.c      ****             fs_count = 0;
 4231              		.loc 2 1530 0
 4232 0050 3B1C     		mov	r3, r7
 4233 0052 0F33     		add	r3, r3, #15
 4234 0054 0022     		mov	r2, #0
 4235 0056 1A70     		strb	r2, [r3]
 4236 0058 06E0     		b	.L312
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 104


 4237              	.L311:
1531:.\main.c      ****             //HEARTBEAT_FLAG = 1;
1532:.\main.c      ****             //send_packet(); //send heartbeat
1533:.\main.c      ****             //wiznet = 0; //for testing
1534:.\main.c      ****             //LED_Write(0);
1535:.\main.c      ****         }
1536:.\main.c      ****         else
1537:.\main.c      ****         {
1538:.\main.c      ****             fs_count += 1;
 4238              		.loc 2 1538 0
 4239 005a 3B1C     		mov	r3, r7
 4240 005c 0F33     		add	r3, r3, #15
 4241 005e 3A1C     		mov	r2, r7
 4242 0060 0F32     		add	r2, r2, #15
 4243 0062 1278     		ldrb	r2, [r2]
 4244 0064 0132     		add	r2, r2, #1
 4245 0066 1A70     		strb	r2, [r3]
 4246              	.L312:
1539:.\main.c      ****         }
1540:.\main.c      ****         
1541:.\main.c      ****         if(fs_count >= 50)
 4247              		.loc 2 1541 0
 4248 0068 3B1C     		mov	r3, r7
 4249 006a 0F33     		add	r3, r3, #15
 4250 006c 1B78     		ldrb	r3, [r3]
 4251 006e 312B     		cmp	r3, #49
 4252 0070 1ED9     		bls	.L313
1542:.\main.c      ****         {
1543:.\main.c      ****             //LED_Write(1);
1544:.\main.c      ****             temp_val = NEUTRAL;
 4253              		.loc 2 1544 0
 4254 0072 1A4B     		ldr	r3, .L320
 4255 0074 1A88     		ldrh	r2, [r3]
 4256 0076 BB1D     		add	r3, r7, #6
 4257 0078 1A80     		strh	r2, [r3]
 4258              	.LBB4:
1545:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4259              		.loc 2 1545 0
 4260 007a 0023     		mov	r3, #0
 4261 007c BB60     		str	r3, [r7, #8]
 4262 007e 13E0     		b	.L314
 4263              	.L315:
1546:.\main.c      ****             {
1547:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4264              		.loc 2 1547 0 discriminator 2
 4265 0080 BB1D     		add	r3, r7, #6
 4266 0082 0022     		mov	r2, #0
 4267 0084 9B5E     		ldrsh	r3, [r3, r2]
 4268 0086 1B12     		asr	r3, r3, #8
 4269 0088 9BB2     		uxth	r3, r3
 4270 008a DAB2     		uxtb	r2, r3
 4271 008c 1A49     		ldr	r1, .L320+28
 4272 008e BB68     		ldr	r3, [r7, #8]
 4273 0090 CB18     		add	r3, r1, r3
 4274 0092 1A70     		strb	r2, [r3]
1548:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4275              		.loc 2 1548 0 discriminator 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 105


 4276 0094 BB68     		ldr	r3, [r7, #8]
 4277 0096 0133     		add	r3, r3, #1
 4278 0098 BA1D     		add	r2, r7, #6
 4279 009a 1288     		ldrh	r2, [r2]
 4280 009c D1B2     		uxtb	r1, r2
 4281 009e 164A     		ldr	r2, .L320+28
 4282 00a0 D154     		strb	r1, [r2, r3]
1545:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4283              		.loc 2 1545 0 discriminator 2
 4284 00a2 BB68     		ldr	r3, [r7, #8]
 4285 00a4 0233     		add	r3, r3, #2
 4286 00a6 BB60     		str	r3, [r7, #8]
 4287              	.L314:
1545:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4288              		.loc 2 1545 0 is_stmt 0 discriminator 1
 4289 00a8 BB68     		ldr	r3, [r7, #8]
 4290 00aa 152B     		cmp	r3, #21
 4291 00ac E8DD     		ble	.L315
 4292              	.LBE4:
1549:.\main.c      ****             }
1550:.\main.c      ****         }
1551:.\main.c      ****         else
1552:.\main.c      ****         {
1553:.\main.c      ****         
1554:.\main.c      ****         //if(wiznet gives a complete packet)
1555:.\main.c      ****             //BA_cspot = baseAzimuth(BA_cspot, BA_array);
1556:.\main.c      ****             //shldr_cspot = shoulder(shldr_cspot, shldr_array);
1557:.\main.c      ****             //elbw_cspot = elbow(elbw_cspot, elbw_array);
1558:.\main.c      **** //            baseAzimuth(&BA_cspot, BA_array);
1559:.\main.c      **** //            shoulder(&shldr_cspot, shldr_array);
1560:.\main.c      **** //            elbow(&elbw_cspot, elbw_array);
1561:.\main.c      ****             
1562:.\main.c      ****             baseAzimuth();
1563:.\main.c      ****             shoulder();
1564:.\main.c      ****             elbow();
1565:.\main.c      ****             effector();
1566:.\main.c      ****             wristTilt();
1567:.\main.c      ****             wristRotate();
1568:.\main.c      ****             
1569:.\main.c      ****             //WT_cspot = wristTilt(WT_cspot, WT_array);
1570:.\main.c      ****             //WR_cspot = wristRotate(WR_cspot, WR_array);
1571:.\main.c      ****             //arduino();
1572:.\main.c      ****             //feedback_array[1] = (feedback_array[1] + 1);
1573:.\main.c      ****             //send_packet(); //send feedback once every tick
1574:.\main.c      ****             
1575:.\main.c      ****         //else{dropped_packets++}
1576:.\main.c      ****         }
1577:.\main.c      ****         
1578:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4293              		.loc 2 1578 0 is_stmt 1
 4294 00ae 0BE0     		b	.L319
 4295              	.L313:
1562:.\main.c      ****             baseAzimuth();
 4296              		.loc 2 1562 0
 4297 00b0 FFF7FEFF 		bl	baseAzimuth
1563:.\main.c      ****             shoulder();
 4298              		.loc 2 1563 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 106


 4299 00b4 FFF7FEFF 		bl	shoulder
1564:.\main.c      ****             elbow();
 4300              		.loc 2 1564 0
 4301 00b8 FFF7FEFF 		bl	elbow
1565:.\main.c      ****             effector();
 4302              		.loc 2 1565 0
 4303 00bc FFF7FEFF 		bl	effector
1566:.\main.c      ****             wristTilt();
 4304              		.loc 2 1566 0
 4305 00c0 FFF7FEFF 		bl	wristTilt
1567:.\main.c      ****             wristRotate();
 4306              		.loc 2 1567 0
 4307 00c4 FFF7FEFF 		bl	wristRotate
 4308              	.L319:
 4309              		.loc 2 1578 0
 4310 00c8 C046     		mov	r8, r8
 4311              	.L317:
 4312              		.loc 2 1578 0 is_stmt 0 discriminator 1
 4313 00ca 0C4B     		ldr	r3, .L320+32
 4314 00cc 1B78     		ldrb	r3, [r3]
 4315 00ce DBB2     		uxtb	r3, r3
 4316 00d0 002B     		cmp	r3, #0
 4317 00d2 FAD0     		beq	.L317
1579:.\main.c      ****         timerFlag = 0;
 4318              		.loc 2 1579 0 is_stmt 1
 4319 00d4 094B     		ldr	r3, .L320+32
 4320 00d6 0022     		mov	r2, #0
 4321 00d8 1A70     		strb	r2, [r3]
1580:.\main.c      ****     } 
 4322              		.loc 2 1580 0
 4323 00da 9EE7     		b	.L318
 4324              	.L321:
 4325              		.align	2
 4326              	.L320:
 4327 00dc 00000000 		.word	NEUTRAL
 4328 00e0 00000000 		.word	BA_FLAG
 4329 00e4 00000000 		.word	WR_FLAG
 4330 00e8 00000000 		.word	WT_FLAG
 4331 00ec 00000000 		.word	SHOULDER_FLAG
 4332 00f0 00000000 		.word	ELBOW_FLAG
 4333 00f4 00000000 		.word	EFFECTOR_FLAG
 4334 00f8 00000000 		.word	data_array
 4335 00fc 00000000 		.word	timerFlag
 4336              		.cfi_endproc
 4337              	.LFE61:
 4338              		.size	main, .-main
 4339              		.text
 4340              	.Letext0:
 4341              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4342              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4343              		.file 5 ".\\Generated_Source\\PSoC4/cytypes.h"
 4344              		.file 6 ".\\main.h"
 4345              		.section	.debug_info,"",%progbits
 4346              	.Ldebug_info0:
 4347 0000 4A0D0000 		.4byte	0xd4a
 4348 0004 0400     		.2byte	0x4
 4349 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 107


 4350 000a 04       		.byte	0x4
 4351 000b 01       		.uleb128 0x1
 4352 000c 21070000 		.4byte	.LASF173
 4353 0010 01       		.byte	0x1
 4354 0011 B3080000 		.4byte	.LASF174
 4355 0015 FA070000 		.4byte	.LASF175
 4356 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4357 001d 00000000 		.4byte	0
 4358 0021 00000000 		.4byte	.Ldebug_line0
 4359 0025 02       		.uleb128 0x2
 4360 0026 01       		.byte	0x1
 4361 0027 06       		.byte	0x6
 4362 0028 C4070000 		.4byte	.LASF0
 4363 002c 03       		.uleb128 0x3
 4364 002d CD050000 		.4byte	.LASF9
 4365 0031 03       		.byte	0x3
 4366 0032 1C       		.byte	0x1c
 4367 0033 37000000 		.4byte	0x37
 4368 0037 02       		.uleb128 0x2
 4369 0038 01       		.byte	0x1
 4370 0039 08       		.byte	0x8
 4371 003a 8E060000 		.4byte	.LASF1
 4372 003e 02       		.uleb128 0x2
 4373 003f 02       		.byte	0x2
 4374 0040 05       		.byte	0x5
 4375 0041 1A050000 		.4byte	.LASF2
 4376 0045 02       		.uleb128 0x2
 4377 0046 02       		.byte	0x2
 4378 0047 07       		.byte	0x7
 4379 0048 D8070000 		.4byte	.LASF3
 4380 004c 02       		.uleb128 0x2
 4381 004d 04       		.byte	0x4
 4382 004e 05       		.byte	0x5
 4383 004f 4E050000 		.4byte	.LASF4
 4384 0053 02       		.uleb128 0x2
 4385 0054 04       		.byte	0x4
 4386 0055 07       		.byte	0x7
 4387 0056 30060000 		.4byte	.LASF5
 4388 005a 02       		.uleb128 0x2
 4389 005b 08       		.byte	0x8
 4390 005c 05       		.byte	0x5
 4391 005d 70030000 		.4byte	.LASF6
 4392 0061 02       		.uleb128 0x2
 4393 0062 08       		.byte	0x8
 4394 0063 07       		.byte	0x7
 4395 0064 AB010000 		.4byte	.LASF7
 4396 0068 04       		.uleb128 0x4
 4397 0069 04       		.byte	0x4
 4398 006a 05       		.byte	0x5
 4399 006b 696E7400 		.ascii	"int\000"
 4400 006f 02       		.uleb128 0x2
 4401 0070 04       		.byte	0x4
 4402 0071 07       		.byte	0x7
 4403 0072 8D000000 		.4byte	.LASF8
 4404 0076 03       		.uleb128 0x3
 4405 0077 35030000 		.4byte	.LASF10
 4406 007b 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 108


 4407 007c 2A       		.byte	0x2a
 4408 007d 2C000000 		.4byte	0x2c
 4409 0081 03       		.uleb128 0x3
 4410 0082 55080000 		.4byte	.LASF11
 4411 0086 05       		.byte	0x5
 4412 0087 A1       		.byte	0xa1
 4413 0088 37000000 		.4byte	0x37
 4414 008c 03       		.uleb128 0x3
 4415 008d F1020000 		.4byte	.LASF12
 4416 0091 05       		.byte	0x5
 4417 0092 A2       		.byte	0xa2
 4418 0093 45000000 		.4byte	0x45
 4419 0097 03       		.uleb128 0x3
 4420 0098 2C040000 		.4byte	.LASF13
 4421 009c 05       		.byte	0x5
 4422 009d A3       		.byte	0xa3
 4423 009e 53000000 		.4byte	0x53
 4424 00a2 03       		.uleb128 0x3
 4425 00a3 FF020000 		.4byte	.LASF14
 4426 00a7 05       		.byte	0x5
 4427 00a8 A4       		.byte	0xa4
 4428 00a9 25000000 		.4byte	0x25
 4429 00ad 03       		.uleb128 0x3
 4430 00ae BC000000 		.4byte	.LASF15
 4431 00b2 05       		.byte	0x5
 4432 00b3 A5       		.byte	0xa5
 4433 00b4 3E000000 		.4byte	0x3e
 4434 00b8 02       		.uleb128 0x2
 4435 00b9 04       		.byte	0x4
 4436 00ba 04       		.byte	0x4
 4437 00bb 67010000 		.4byte	.LASF16
 4438 00bf 02       		.uleb128 0x2
 4439 00c0 08       		.byte	0x8
 4440 00c1 04       		.byte	0x4
 4441 00c2 5B080000 		.4byte	.LASF17
 4442 00c6 02       		.uleb128 0x2
 4443 00c7 01       		.byte	0x1
 4444 00c8 08       		.byte	0x8
 4445 00c9 DD020000 		.4byte	.LASF18
 4446 00cd 05       		.uleb128 0x5
 4447 00ce 81000000 		.4byte	0x81
 4448 00d2 02       		.uleb128 0x2
 4449 00d3 04       		.byte	0x4
 4450 00d4 07       		.byte	0x7
 4451 00d5 27060000 		.4byte	.LASF19
 4452 00d9 06       		.uleb128 0x6
 4453 00da 04       		.byte	0x4
 4454 00db 81000000 		.4byte	0x81
 4455 00df 07       		.uleb128 0x7
 4456 00e0 4F060000 		.4byte	.LASF25
 4457 00e4 01       		.byte	0x1
 4458 00e5 02       		.byte	0x2
 4459 00e6 8301     		.2byte	0x183
 4460 00e8 0B010000 		.4byte	0x10b
 4461 00ec 08       		.uleb128 0x8
 4462 00ed 02040000 		.4byte	.LASF20
 4463 00f1 00       		.sleb128 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 109


 4464 00f2 08       		.uleb128 0x8
 4465 00f3 10050000 		.4byte	.LASF21
 4466 00f7 01       		.sleb128 1
 4467 00f8 08       		.uleb128 0x8
 4468 00f9 19060000 		.4byte	.LASF22
 4469 00fd 02       		.sleb128 2
 4470 00fe 08       		.uleb128 0x8
 4471 00ff FF010000 		.4byte	.LASF23
 4472 0103 03       		.sleb128 3
 4473 0104 08       		.uleb128 0x8
 4474 0105 3B040000 		.4byte	.LASF24
 4475 0109 04       		.sleb128 4
 4476 010a 00       		.byte	0
 4477 010b 07       		.uleb128 0x7
 4478 010c 9B050000 		.4byte	.LASF26
 4479 0110 01       		.byte	0x1
 4480 0111 02       		.byte	0x2
 4481 0112 F201     		.2byte	0x1f2
 4482 0114 31010000 		.4byte	0x131
 4483 0118 08       		.uleb128 0x8
 4484 0119 2F010000 		.4byte	.LASF27
 4485 011d 00       		.sleb128 0
 4486 011e 08       		.uleb128 0x8
 4487 011f 0C000000 		.4byte	.LASF28
 4488 0123 01       		.sleb128 1
 4489 0124 08       		.uleb128 0x8
 4490 0125 57050000 		.4byte	.LASF29
 4491 0129 02       		.sleb128 2
 4492 012a 08       		.uleb128 0x8
 4493 012b 4B080000 		.4byte	.LASF30
 4494 012f 03       		.sleb128 3
 4495 0130 00       		.byte	0
 4496 0131 07       		.uleb128 0x7
 4497 0132 BC030000 		.4byte	.LASF31
 4498 0136 01       		.byte	0x1
 4499 0137 02       		.byte	0x2
 4500 0138 5F02     		.2byte	0x25f
 4501 013a 5D010000 		.4byte	0x15d
 4502 013e 08       		.uleb128 0x8
 4503 013f 0A010000 		.4byte	.LASF32
 4504 0143 00       		.sleb128 0
 4505 0144 08       		.uleb128 0x8
 4506 0145 15070000 		.4byte	.LASF33
 4507 0149 01       		.sleb128 1
 4508 014a 08       		.uleb128 0x8
 4509 014b 01050000 		.4byte	.LASF34
 4510 014f 02       		.sleb128 2
 4511 0150 08       		.uleb128 0x8
 4512 0151 E4050000 		.4byte	.LASF35
 4513 0155 03       		.sleb128 3
 4514 0156 08       		.uleb128 0x8
 4515 0157 16000000 		.4byte	.LASF36
 4516 015b 04       		.sleb128 4
 4517 015c 00       		.byte	0
 4518 015d 07       		.uleb128 0x7
 4519 015e 6D000000 		.4byte	.LASF37
 4520 0162 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 110


 4521 0163 02       		.byte	0x2
 4522 0164 E502     		.2byte	0x2e5
 4523 0166 83010000 		.4byte	0x183
 4524 016a 08       		.uleb128 0x8
 4525 016b 6A040000 		.4byte	.LASF38
 4526 016f 00       		.sleb128 0
 4527 0170 08       		.uleb128 0x8
 4528 0171 BC080000 		.4byte	.LASF39
 4529 0175 01       		.sleb128 1
 4530 0176 08       		.uleb128 0x8
 4531 0177 42060000 		.4byte	.LASF40
 4532 017b 02       		.sleb128 2
 4533 017c 08       		.uleb128 0x8
 4534 017d EB070000 		.4byte	.LASF41
 4535 0181 03       		.sleb128 3
 4536 0182 00       		.byte	0
 4537 0183 07       		.uleb128 0x7
 4538 0184 7E030000 		.4byte	.LASF42
 4539 0188 01       		.byte	0x1
 4540 0189 02       		.byte	0x2
 4541 018a B003     		.2byte	0x3b0
 4542 018c A9010000 		.4byte	0x1a9
 4543 0190 08       		.uleb128 0x8
 4544 0191 77060000 		.4byte	.LASF43
 4545 0195 00       		.sleb128 0
 4546 0196 08       		.uleb128 0x8
 4547 0197 45030000 		.4byte	.LASF44
 4548 019b 01       		.sleb128 1
 4549 019c 08       		.uleb128 0x8
 4550 019d EC060000 		.4byte	.LASF45
 4551 01a1 02       		.sleb128 2
 4552 01a2 08       		.uleb128 0x8
 4553 01a3 92020000 		.4byte	.LASF46
 4554 01a7 03       		.sleb128 3
 4555 01a8 00       		.byte	0
 4556 01a9 07       		.uleb128 0x7
 4557 01aa A9000000 		.4byte	.LASF47
 4558 01ae 01       		.byte	0x1
 4559 01af 02       		.byte	0x2
 4560 01b0 7B04     		.2byte	0x47b
 4561 01b2 CF010000 		.4byte	0x1cf
 4562 01b6 08       		.uleb128 0x8
 4563 01b7 E3000000 		.4byte	.LASF48
 4564 01bb 00       		.sleb128 0
 4565 01bc 08       		.uleb128 0x8
 4566 01bd 6D010000 		.4byte	.LASF49
 4567 01c1 01       		.sleb128 1
 4568 01c2 08       		.uleb128 0x8
 4569 01c3 62000000 		.4byte	.LASF50
 4570 01c7 02       		.sleb128 2
 4571 01c8 08       		.uleb128 0x8
 4572 01c9 93050000 		.4byte	.LASF51
 4573 01cd 03       		.sleb128 3
 4574 01ce 00       		.byte	0
 4575 01cf 07       		.uleb128 0x7
 4576 01d0 F2030000 		.4byte	.LASF52
 4577 01d4 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 111


 4578 01d5 02       		.byte	0x2
 4579 01d6 DA04     		.2byte	0x4da
 4580 01d8 F5010000 		.4byte	0x1f5
 4581 01dc 08       		.uleb128 0x8
 4582 01dd 3C020000 		.4byte	.LASF53
 4583 01e1 00       		.sleb128 0
 4584 01e2 08       		.uleb128 0x8
 4585 01e3 E3060000 		.4byte	.LASF54
 4586 01e7 01       		.sleb128 1
 4587 01e8 08       		.uleb128 0x8
 4588 01e9 E7010000 		.4byte	.LASF55
 4589 01ed 02       		.sleb128 2
 4590 01ee 08       		.uleb128 0x8
 4591 01ef FB050000 		.4byte	.LASF56
 4592 01f3 03       		.sleb128 3
 4593 01f4 00       		.byte	0
 4594 01f5 07       		.uleb128 0x7
 4595 01f6 75020000 		.4byte	.LASF57
 4596 01fa 01       		.byte	0x1
 4597 01fb 02       		.byte	0x2
 4598 01fc 3205     		.2byte	0x532
 4599 01fe 21020000 		.4byte	0x221
 4600 0202 08       		.uleb128 0x8
 4601 0203 2B030000 		.4byte	.LASF58
 4602 0207 00       		.sleb128 0
 4603 0208 08       		.uleb128 0x8
 4604 0209 6D080000 		.4byte	.LASF59
 4605 020d 01       		.sleb128 1
 4606 020e 08       		.uleb128 0x8
 4607 020f 0C070000 		.4byte	.LASF60
 4608 0213 02       		.sleb128 2
 4609 0214 08       		.uleb128 0x8
 4610 0215 3B000000 		.4byte	.LASF61
 4611 0219 03       		.sleb128 3
 4612 021a 08       		.uleb128 0x8
 4613 021b 25010000 		.4byte	.LASF62
 4614 021f 04       		.sleb128 4
 4615 0220 00       		.byte	0
 4616 0221 09       		.uleb128 0x9
 4617 0222 C2010000 		.4byte	.LASF65
 4618 0226 01       		.byte	0x1
 4619 0227 0F       		.byte	0xf
 4620 0228 00000000 		.4byte	.LFB34
 4621 022c 98000000 		.4byte	.LFE34-.LFB34
 4622 0230 01       		.uleb128 0x1
 4623 0231 9C       		.byte	0x9c
 4624 0232 61020000 		.4byte	0x261
 4625 0236 0A       		.uleb128 0xa
 4626 0237 76080000 		.4byte	.LASF63
 4627 023b 01       		.byte	0x1
 4628 023c 0F       		.byte	0xf
 4629 023d 81000000 		.4byte	0x81
 4630 0241 02       		.uleb128 0x2
 4631 0242 91       		.byte	0x91
 4632 0243 67       		.sleb128 -25
 4633 0244 0A       		.uleb128 0xa
 4634 0245 A2080000 		.4byte	.LASF64
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 112


 4635 0249 01       		.byte	0x1
 4636 024a 0F       		.byte	0xf
 4637 024b 8C000000 		.4byte	0x8c
 4638 024f 02       		.uleb128 0x2
 4639 0250 91       		.byte	0x91
 4640 0251 64       		.sleb128 -28
 4641 0252 0B       		.uleb128 0xb
 4642 0253 97040000 		.4byte	.LASF68
 4643 0257 01       		.byte	0x1
 4644 0258 11       		.byte	0x11
 4645 0259 61020000 		.4byte	0x261
 4646 025d 02       		.uleb128 0x2
 4647 025e 91       		.byte	0x91
 4648 025f 6C       		.sleb128 -20
 4649 0260 00       		.byte	0
 4650 0261 0C       		.uleb128 0xc
 4651 0262 81000000 		.4byte	0x81
 4652 0266 71020000 		.4byte	0x271
 4653 026a 0D       		.uleb128 0xd
 4654 026b D2000000 		.4byte	0xd2
 4655 026f 08       		.byte	0x8
 4656 0270 00       		.byte	0
 4657 0271 09       		.uleb128 0x9
 4658 0272 93080000 		.4byte	.LASF66
 4659 0276 01       		.byte	0x1
 4660 0277 20       		.byte	0x20
 4661 0278 00000000 		.4byte	.LFB35
 4662 027c 98000000 		.4byte	.LFE35-.LFB35
 4663 0280 01       		.uleb128 0x1
 4664 0281 9C       		.byte	0x9c
 4665 0282 B1020000 		.4byte	0x2b1
 4666 0286 0A       		.uleb128 0xa
 4667 0287 76080000 		.4byte	.LASF63
 4668 028b 01       		.byte	0x1
 4669 028c 20       		.byte	0x20
 4670 028d 81000000 		.4byte	0x81
 4671 0291 02       		.uleb128 0x2
 4672 0292 91       		.byte	0x91
 4673 0293 67       		.sleb128 -25
 4674 0294 0A       		.uleb128 0xa
 4675 0295 F8020000 		.4byte	.LASF67
 4676 0299 01       		.byte	0x1
 4677 029a 20       		.byte	0x20
 4678 029b 8C000000 		.4byte	0x8c
 4679 029f 02       		.uleb128 0x2
 4680 02a0 91       		.byte	0x91
 4681 02a1 64       		.sleb128 -28
 4682 02a2 0B       		.uleb128 0xb
 4683 02a3 97040000 		.4byte	.LASF68
 4684 02a7 01       		.byte	0x1
 4685 02a8 22       		.byte	0x22
 4686 02a9 61020000 		.4byte	0x261
 4687 02ad 02       		.uleb128 0x2
 4688 02ae 91       		.byte	0x91
 4689 02af 6C       		.sleb128 -20
 4690 02b0 00       		.byte	0
 4691 02b1 09       		.uleb128 0x9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 113


 4692 02b2 F0050000 		.4byte	.LASF69
 4693 02b6 01       		.byte	0x1
 4694 02b7 31       		.byte	0x31
 4695 02b8 00000000 		.4byte	.LFB36
 4696 02bc 98000000 		.4byte	.LFE36-.LFB36
 4697 02c0 01       		.uleb128 0x1
 4698 02c1 9C       		.byte	0x9c
 4699 02c2 F1020000 		.4byte	0x2f1
 4700 02c6 0A       		.uleb128 0xa
 4701 02c7 76080000 		.4byte	.LASF63
 4702 02cb 01       		.byte	0x1
 4703 02cc 31       		.byte	0x31
 4704 02cd 81000000 		.4byte	0x81
 4705 02d1 02       		.uleb128 0x2
 4706 02d2 91       		.byte	0x91
 4707 02d3 67       		.sleb128 -25
 4708 02d4 0A       		.uleb128 0xa
 4709 02d5 17010000 		.4byte	.LASF70
 4710 02d9 01       		.byte	0x1
 4711 02da 31       		.byte	0x31
 4712 02db 8C000000 		.4byte	0x8c
 4713 02df 02       		.uleb128 0x2
 4714 02e0 91       		.byte	0x91
 4715 02e1 64       		.sleb128 -28
 4716 02e2 0B       		.uleb128 0xb
 4717 02e3 97040000 		.4byte	.LASF68
 4718 02e7 01       		.byte	0x1
 4719 02e8 33       		.byte	0x33
 4720 02e9 61020000 		.4byte	0x261
 4721 02ed 02       		.uleb128 0x2
 4722 02ee 91       		.byte	0x91
 4723 02ef 6C       		.sleb128 -20
 4724 02f0 00       		.byte	0
 4725 02f1 09       		.uleb128 0x9
 4726 02f2 64050000 		.4byte	.LASF71
 4727 02f6 02       		.byte	0x2
 4728 02f7 0A       		.byte	0xa
 4729 02f8 00000000 		.4byte	.LFB37
 4730 02fc 28000000 		.4byte	.LFE37-.LFB37
 4731 0300 01       		.uleb128 0x1
 4732 0301 9C       		.byte	0x9c
 4733 0302 15030000 		.4byte	0x315
 4734 0306 0B       		.uleb128 0xb
 4735 0307 7E080000 		.4byte	.LASF72
 4736 030b 02       		.byte	0x2
 4737 030c 0C       		.byte	0xc
 4738 030d 97000000 		.4byte	0x97
 4739 0311 02       		.uleb128 0x2
 4740 0312 91       		.byte	0x91
 4741 0313 74       		.sleb128 -12
 4742 0314 00       		.byte	0
 4743 0315 0E       		.uleb128 0xe
 4744 0316 C2000000 		.4byte	.LASF79
 4745 031a 02       		.byte	0x2
 4746 031b 12       		.byte	0x12
 4747 031c 8C000000 		.4byte	0x8c
 4748 0320 00000000 		.4byte	.LFB38
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 114


 4749 0324 84010000 		.4byte	.LFE38-.LFB38
 4750 0328 01       		.uleb128 0x1
 4751 0329 9C       		.byte	0x9c
 4752 032a 8F030000 		.4byte	0x38f
 4753 032e 0A       		.uleb128 0xa
 4754 032f 10060000 		.4byte	.LASF73
 4755 0333 02       		.byte	0x2
 4756 0334 12       		.byte	0x12
 4757 0335 8C000000 		.4byte	0x8c
 4758 0339 02       		.uleb128 0x2
 4759 033a 91       		.byte	0x91
 4760 033b 66       		.sleb128 -26
 4761 033c 0B       		.uleb128 0xb
 4762 033d 24030000 		.4byte	.LASF74
 4763 0341 02       		.byte	0x2
 4764 0342 14       		.byte	0x14
 4765 0343 81000000 		.4byte	0x81
 4766 0347 02       		.uleb128 0x2
 4767 0348 91       		.byte	0x91
 4768 0349 71       		.sleb128 -15
 4769 034a 0F       		.uleb128 0xf
 4770 034b 6900     		.ascii	"i\000"
 4771 034d 02       		.byte	0x2
 4772 034e 15       		.byte	0x15
 4773 034f 81000000 		.4byte	0x81
 4774 0353 02       		.uleb128 0x2
 4775 0354 91       		.byte	0x91
 4776 0355 77       		.sleb128 -9
 4777 0356 0B       		.uleb128 0xb
 4778 0357 1C040000 		.4byte	.LASF75
 4779 035b 02       		.byte	0x2
 4780 035c 16       		.byte	0x16
 4781 035d 8C000000 		.4byte	0x8c
 4782 0361 02       		.uleb128 0x2
 4783 0362 91       		.byte	0x91
 4784 0363 74       		.sleb128 -12
 4785 0364 0B       		.uleb128 0xb
 4786 0365 D0070000 		.4byte	.LASF76
 4787 0369 02       		.byte	0x2
 4788 036a 17       		.byte	0x17
 4789 036b 8C000000 		.4byte	0x8c
 4790 036f 02       		.uleb128 0x2
 4791 0370 91       		.byte	0x91
 4792 0371 72       		.sleb128 -14
 4793 0372 0B       		.uleb128 0xb
 4794 0373 D3040000 		.4byte	.LASF77
 4795 0377 02       		.byte	0x2
 4796 0378 18       		.byte	0x18
 4797 0379 97000000 		.4byte	0x97
 4798 037d 02       		.uleb128 0x2
 4799 037e 91       		.byte	0x91
 4800 037f 6C       		.sleb128 -20
 4801 0380 0B       		.uleb128 0xb
 4802 0381 B0070000 		.4byte	.LASF78
 4803 0385 02       		.byte	0x2
 4804 0386 19       		.byte	0x19
 4805 0387 AD000000 		.4byte	0xad
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 115


 4806 038b 02       		.uleb128 0x2
 4807 038c 91       		.byte	0x91
 4808 038d 6A       		.sleb128 -22
 4809 038e 00       		.byte	0
 4810 038f 0E       		.uleb128 0xe
 4811 0390 61020000 		.4byte	.LASF80
 4812 0394 02       		.byte	0x2
 4813 0395 50       		.byte	0x50
 4814 0396 8C000000 		.4byte	0x8c
 4815 039a 00000000 		.4byte	.LFB39
 4816 039e 84010000 		.4byte	.LFE39-.LFB39
 4817 03a2 01       		.uleb128 0x1
 4818 03a3 9C       		.byte	0x9c
 4819 03a4 09040000 		.4byte	0x409
 4820 03a8 0A       		.uleb128 0xa
 4821 03a9 10060000 		.4byte	.LASF73
 4822 03ad 02       		.byte	0x2
 4823 03ae 50       		.byte	0x50
 4824 03af 8C000000 		.4byte	0x8c
 4825 03b3 02       		.uleb128 0x2
 4826 03b4 91       		.byte	0x91
 4827 03b5 66       		.sleb128 -26
 4828 03b6 0B       		.uleb128 0xb
 4829 03b7 24030000 		.4byte	.LASF74
 4830 03bb 02       		.byte	0x2
 4831 03bc 52       		.byte	0x52
 4832 03bd 81000000 		.4byte	0x81
 4833 03c1 02       		.uleb128 0x2
 4834 03c2 91       		.byte	0x91
 4835 03c3 71       		.sleb128 -15
 4836 03c4 0F       		.uleb128 0xf
 4837 03c5 6900     		.ascii	"i\000"
 4838 03c7 02       		.byte	0x2
 4839 03c8 53       		.byte	0x53
 4840 03c9 81000000 		.4byte	0x81
 4841 03cd 02       		.uleb128 0x2
 4842 03ce 91       		.byte	0x91
 4843 03cf 77       		.sleb128 -9
 4844 03d0 0B       		.uleb128 0xb
 4845 03d1 1C040000 		.4byte	.LASF75
 4846 03d5 02       		.byte	0x2
 4847 03d6 54       		.byte	0x54
 4848 03d7 8C000000 		.4byte	0x8c
 4849 03db 02       		.uleb128 0x2
 4850 03dc 91       		.byte	0x91
 4851 03dd 74       		.sleb128 -12
 4852 03de 0B       		.uleb128 0xb
 4853 03df D0070000 		.4byte	.LASF76
 4854 03e3 02       		.byte	0x2
 4855 03e4 55       		.byte	0x55
 4856 03e5 8C000000 		.4byte	0x8c
 4857 03e9 02       		.uleb128 0x2
 4858 03ea 91       		.byte	0x91
 4859 03eb 72       		.sleb128 -14
 4860 03ec 0B       		.uleb128 0xb
 4861 03ed D3040000 		.4byte	.LASF77
 4862 03f1 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 116


 4863 03f2 56       		.byte	0x56
 4864 03f3 97000000 		.4byte	0x97
 4865 03f7 02       		.uleb128 0x2
 4866 03f8 91       		.byte	0x91
 4867 03f9 6C       		.sleb128 -20
 4868 03fa 0B       		.uleb128 0xb
 4869 03fb B0070000 		.4byte	.LASF78
 4870 03ff 02       		.byte	0x2
 4871 0400 57       		.byte	0x57
 4872 0401 AD000000 		.4byte	0xad
 4873 0405 02       		.uleb128 0x2
 4874 0406 91       		.byte	0x91
 4875 0407 6A       		.sleb128 -22
 4876 0408 00       		.byte	0
 4877 0409 0E       		.uleb128 0xe
 4878 040a D0070000 		.4byte	.LASF76
 4879 040e 02       		.byte	0x2
 4880 040f 90       		.byte	0x90
 4881 0410 8C000000 		.4byte	0x8c
 4882 0414 00000000 		.4byte	.LFB40
 4883 0418 78000000 		.4byte	.LFE40-.LFB40
 4884 041c 01       		.uleb128 0x1
 4885 041d 9C       		.byte	0x9c
 4886 041e 67040000 		.4byte	0x467
 4887 0422 0A       		.uleb128 0xa
 4888 0423 36050000 		.4byte	.LASF81
 4889 0427 02       		.byte	0x2
 4890 0428 90       		.byte	0x90
 4891 0429 67040000 		.4byte	0x467
 4892 042d 02       		.uleb128 0x2
 4893 042e 91       		.byte	0x91
 4894 042f 64       		.sleb128 -28
 4895 0430 0A       		.uleb128 0xa
 4896 0431 26000000 		.4byte	.LASF82
 4897 0435 02       		.byte	0x2
 4898 0436 90       		.byte	0x90
 4899 0437 81000000 		.4byte	0x81
 4900 043b 02       		.uleb128 0x2
 4901 043c 91       		.byte	0x91
 4902 043d 63       		.sleb128 -29
 4903 043e 0F       		.uleb128 0xf
 4904 043f 6900     		.ascii	"i\000"
 4905 0441 02       		.byte	0x2
 4906 0442 92       		.byte	0x92
 4907 0443 81000000 		.4byte	0x81
 4908 0447 02       		.uleb128 0x2
 4909 0448 91       		.byte	0x91
 4910 0449 77       		.sleb128 -9
 4911 044a 0F       		.uleb128 0xf
 4912 044b 73756D00 		.ascii	"sum\000"
 4913 044f 02       		.byte	0x2
 4914 0450 93       		.byte	0x93
 4915 0451 97000000 		.4byte	0x97
 4916 0455 02       		.uleb128 0x2
 4917 0456 91       		.byte	0x91
 4918 0457 70       		.sleb128 -16
 4919 0458 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 117


 4920 0459 61766700 		.ascii	"avg\000"
 4921 045d 02       		.byte	0x2
 4922 045e 94       		.byte	0x94
 4923 045f 8C000000 		.4byte	0x8c
 4924 0463 02       		.uleb128 0x2
 4925 0464 91       		.byte	0x91
 4926 0465 6E       		.sleb128 -18
 4927 0466 00       		.byte	0
 4928 0467 06       		.uleb128 0x6
 4929 0468 04       		.byte	0x4
 4930 0469 8C000000 		.4byte	0x8c
 4931 046d 10       		.uleb128 0x10
 4932 046e EC000000 		.4byte	.LASF83
 4933 0472 02       		.byte	0x2
 4934 0473 A0       		.byte	0xa0
 4935 0474 00000000 		.4byte	.LFB41
 4936 0478 38000000 		.4byte	.LFE41-.LFB41
 4937 047c 01       		.uleb128 0x1
 4938 047d 9C       		.byte	0x9c
 4939 047e 9F040000 		.4byte	0x49f
 4940 0482 0A       		.uleb128 0xa
 4941 0483 A0030000 		.4byte	.LASF84
 4942 0487 02       		.byte	0x2
 4943 0488 A0       		.byte	0xa0
 4944 0489 D9000000 		.4byte	0xd9
 4945 048d 02       		.uleb128 0x2
 4946 048e 91       		.byte	0x91
 4947 048f 74       		.sleb128 -12
 4948 0490 0A       		.uleb128 0xa
 4949 0491 8D020000 		.4byte	.LASF85
 4950 0495 02       		.byte	0x2
 4951 0496 A0       		.byte	0xa0
 4952 0497 81000000 		.4byte	0x81
 4953 049b 02       		.uleb128 0x2
 4954 049c 91       		.byte	0x91
 4955 049d 73       		.sleb128 -13
 4956 049e 00       		.byte	0
 4957 049f 09       		.uleb128 0x9
 4958 04a0 D7050000 		.4byte	.LASF86
 4959 04a4 02       		.byte	0x2
 4960 04a5 AD       		.byte	0xad
 4961 04a6 00000000 		.4byte	.LFB42
 4962 04aa EE000000 		.4byte	.LFE42-.LFB42
 4963 04ae 01       		.uleb128 0x1
 4964 04af 9C       		.byte	0x9c
 4965 04b0 FB040000 		.4byte	0x4fb
 4966 04b4 0A       		.uleb128 0xa
 4967 04b5 97040000 		.4byte	.LASF68
 4968 04b9 02       		.byte	0x2
 4969 04ba AD       		.byte	0xad
 4970 04bb 67040000 		.4byte	0x467
 4971 04bf 02       		.uleb128 0x2
 4972 04c0 91       		.byte	0x91
 4973 04c1 6C       		.sleb128 -20
 4974 04c2 0A       		.uleb128 0xa
 4975 04c3 3D030000 		.4byte	.LASF87
 4976 04c7 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 118


 4977 04c8 AD       		.byte	0xad
 4978 04c9 D9000000 		.4byte	0xd9
 4979 04cd 02       		.uleb128 0x2
 4980 04ce 91       		.byte	0x91
 4981 04cf 68       		.sleb128 -24
 4982 04d0 0A       		.uleb128 0xa
 4983 04d1 3A010000 		.4byte	.LASF88
 4984 04d5 02       		.byte	0x2
 4985 04d6 AD       		.byte	0xad
 4986 04d7 81000000 		.4byte	0x81
 4987 04db 02       		.uleb128 0x2
 4988 04dc 91       		.byte	0x91
 4989 04dd 67       		.sleb128 -25
 4990 04de 0A       		.uleb128 0xa
 4991 04df BD040000 		.4byte	.LASF89
 4992 04e3 02       		.byte	0x2
 4993 04e4 AD       		.byte	0xad
 4994 04e5 68000000 		.4byte	0x68
 4995 04e9 02       		.uleb128 0x2
 4996 04ea 91       		.byte	0x91
 4997 04eb 60       		.sleb128 -32
 4998 04ec 0B       		.uleb128 0xb
 4999 04ed 93010000 		.4byte	.LASF90
 5000 04f1 02       		.byte	0x2
 5001 04f2 AF       		.byte	0xaf
 5002 04f3 81000000 		.4byte	0x81
 5003 04f7 02       		.uleb128 0x2
 5004 04f8 91       		.byte	0x91
 5005 04f9 77       		.sleb128 -9
 5006 04fa 00       		.byte	0
 5007 04fb 09       		.uleb128 0x9
 5008 04fc 50010000 		.4byte	.LASF91
 5009 0500 02       		.byte	0x2
 5010 0501 D2       		.byte	0xd2
 5011 0502 00000000 		.4byte	.LFB43
 5012 0506 B4010000 		.4byte	.LFE43-.LFB43
 5013 050a 01       		.uleb128 0x1
 5014 050b 9C       		.byte	0x9c
 5015 050c 49050000 		.4byte	0x549
 5016 0510 0A       		.uleb128 0xa
 5017 0511 B6020000 		.4byte	.LASF92
 5018 0515 02       		.byte	0x2
 5019 0516 D2       		.byte	0xd2
 5020 0517 D9000000 		.4byte	0xd9
 5021 051b 02       		.uleb128 0x2
 5022 051c 91       		.byte	0x91
 5023 051d 74       		.sleb128 -12
 5024 051e 0A       		.uleb128 0xa
 5025 051f 97040000 		.4byte	.LASF68
 5026 0523 02       		.byte	0x2
 5027 0524 D2       		.byte	0xd2
 5028 0525 67040000 		.4byte	0x467
 5029 0529 02       		.uleb128 0x2
 5030 052a 91       		.byte	0x91
 5031 052b 70       		.sleb128 -16
 5032 052c 0A       		.uleb128 0xa
 5033 052d F6040000 		.4byte	.LASF93
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 119


 5034 0531 02       		.byte	0x2
 5035 0532 D2       		.byte	0xd2
 5036 0533 81000000 		.4byte	0x81
 5037 0537 02       		.uleb128 0x2
 5038 0538 91       		.byte	0x91
 5039 0539 6F       		.sleb128 -17
 5040 053a 0A       		.uleb128 0xa
 5041 053b A8070000 		.4byte	.LASF94
 5042 053f 02       		.byte	0x2
 5043 0540 D2       		.byte	0xd2
 5044 0541 8C000000 		.4byte	0x8c
 5045 0545 02       		.uleb128 0x2
 5046 0546 91       		.byte	0x91
 5047 0547 6C       		.sleb128 -20
 5048 0548 00       		.byte	0
 5049 0549 11       		.uleb128 0x11
 5050 054a 8E030000 		.4byte	.LASF95
 5051 054e 02       		.byte	0x2
 5052 054f 0301     		.2byte	0x103
 5053 0551 8C000000 		.4byte	0x8c
 5054 0555 00000000 		.4byte	.LFB44
 5055 0559 EC000000 		.4byte	.LFE44-.LFB44
 5056 055d 01       		.uleb128 0x1
 5057 055e 9C       		.byte	0x9c
 5058 055f 91050000 		.4byte	0x591
 5059 0563 12       		.uleb128 0x12
 5060 0564 0D030000 		.4byte	.LASF96
 5061 0568 02       		.byte	0x2
 5062 0569 0301     		.2byte	0x103
 5063 056b 8C000000 		.4byte	0x8c
 5064 056f 02       		.uleb128 0x2
 5065 0570 91       		.byte	0x91
 5066 0571 6E       		.sleb128 -18
 5067 0572 12       		.uleb128 0x12
 5068 0573 E2020000 		.4byte	.LASF97
 5069 0577 02       		.byte	0x2
 5070 0578 0301     		.2byte	0x103
 5071 057a 8C000000 		.4byte	0x8c
 5072 057e 02       		.uleb128 0x2
 5073 057f 91       		.byte	0x91
 5074 0580 6C       		.sleb128 -20
 5075 0581 13       		.uleb128 0x13
 5076 0582 AC050000 		.4byte	.LASF98
 5077 0586 02       		.byte	0x2
 5078 0587 0501     		.2byte	0x105
 5079 0589 8C000000 		.4byte	0x8c
 5080 058d 02       		.uleb128 0x2
 5081 058e 91       		.byte	0x91
 5082 058f 76       		.sleb128 -10
 5083 0590 00       		.byte	0
 5084 0591 11       		.uleb128 0x11
 5085 0592 9D020000 		.4byte	.LASF99
 5086 0596 02       		.byte	0x2
 5087 0597 2301     		.2byte	0x123
 5088 0599 8C000000 		.4byte	0x8c
 5089 059d 00000000 		.4byte	.LFB45
 5090 05a1 9C000000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 120


 5091 05a5 01       		.uleb128 0x1
 5092 05a6 9C       		.byte	0x9c
 5093 05a7 D9050000 		.4byte	0x5d9
 5094 05ab 12       		.uleb128 0x12
 5095 05ac 0D030000 		.4byte	.LASF96
 5096 05b0 02       		.byte	0x2
 5097 05b1 2301     		.2byte	0x123
 5098 05b3 8C000000 		.4byte	0x8c
 5099 05b7 02       		.uleb128 0x2
 5100 05b8 91       		.byte	0x91
 5101 05b9 6E       		.sleb128 -18
 5102 05ba 12       		.uleb128 0x12
 5103 05bb E2020000 		.4byte	.LASF97
 5104 05bf 02       		.byte	0x2
 5105 05c0 2301     		.2byte	0x123
 5106 05c2 8C000000 		.4byte	0x8c
 5107 05c6 02       		.uleb128 0x2
 5108 05c7 91       		.byte	0x91
 5109 05c8 6C       		.sleb128 -20
 5110 05c9 13       		.uleb128 0x13
 5111 05ca AC050000 		.4byte	.LASF98
 5112 05ce 02       		.byte	0x2
 5113 05cf 2501     		.2byte	0x125
 5114 05d1 8C000000 		.4byte	0x8c
 5115 05d5 02       		.uleb128 0x2
 5116 05d6 91       		.byte	0x91
 5117 05d7 76       		.sleb128 -10
 5118 05d8 00       		.byte	0
 5119 05d9 11       		.uleb128 0x11
 5120 05da B8050000 		.4byte	.LASF100
 5121 05de 02       		.byte	0x2
 5122 05df 3B01     		.2byte	0x13b
 5123 05e1 8C000000 		.4byte	0x8c
 5124 05e5 00000000 		.4byte	.LFB46
 5125 05e9 90000000 		.4byte	.LFE46-.LFB46
 5126 05ed 01       		.uleb128 0x1
 5127 05ee 9C       		.byte	0x9c
 5128 05ef 21060000 		.4byte	0x621
 5129 05f3 12       		.uleb128 0x12
 5130 05f4 0D030000 		.4byte	.LASF96
 5131 05f8 02       		.byte	0x2
 5132 05f9 3B01     		.2byte	0x13b
 5133 05fb 8C000000 		.4byte	0x8c
 5134 05ff 02       		.uleb128 0x2
 5135 0600 91       		.byte	0x91
 5136 0601 6E       		.sleb128 -18
 5137 0602 12       		.uleb128 0x12
 5138 0603 E2020000 		.4byte	.LASF97
 5139 0607 02       		.byte	0x2
 5140 0608 3B01     		.2byte	0x13b
 5141 060a 8C000000 		.4byte	0x8c
 5142 060e 02       		.uleb128 0x2
 5143 060f 91       		.byte	0x91
 5144 0610 6C       		.sleb128 -20
 5145 0611 13       		.uleb128 0x13
 5146 0612 AC050000 		.4byte	.LASF98
 5147 0616 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 121


 5148 0617 3D01     		.2byte	0x13d
 5149 0619 8C000000 		.4byte	0x8c
 5150 061d 02       		.uleb128 0x2
 5151 061e 91       		.byte	0x91
 5152 061f 76       		.sleb128 -10
 5153 0620 00       		.byte	0
 5154 0621 11       		.uleb128 0x11
 5155 0622 45040000 		.4byte	.LASF101
 5156 0626 02       		.byte	0x2
 5157 0627 5301     		.2byte	0x153
 5158 0629 8C000000 		.4byte	0x8c
 5159 062d 00000000 		.4byte	.LFB47
 5160 0631 84000000 		.4byte	.LFE47-.LFB47
 5161 0635 01       		.uleb128 0x1
 5162 0636 9C       		.byte	0x9c
 5163 0637 A5060000 		.4byte	0x6a5
 5164 063b 12       		.uleb128 0x12
 5165 063c 83060000 		.4byte	.LASF102
 5166 0640 02       		.byte	0x2
 5167 0641 5301     		.2byte	0x153
 5168 0643 A5060000 		.4byte	0x6a5
 5169 0647 02       		.uleb128 0x2
 5170 0648 91       		.byte	0x91
 5171 0649 6C       		.sleb128 -20
 5172 064a 12       		.uleb128 0x12
 5173 064b F3010000 		.4byte	.LASF103
 5174 064f 02       		.byte	0x2
 5175 0650 5301     		.2byte	0x153
 5176 0652 81000000 		.4byte	0x81
 5177 0656 02       		.uleb128 0x2
 5178 0657 91       		.byte	0x91
 5179 0658 6B       		.sleb128 -21
 5180 0659 12       		.uleb128 0x12
 5181 065a F9010000 		.4byte	.LASF104
 5182 065e 02       		.byte	0x2
 5183 065f 5301     		.2byte	0x153
 5184 0661 81000000 		.4byte	0x81
 5185 0665 02       		.uleb128 0x2
 5186 0666 91       		.byte	0x91
 5187 0667 6A       		.sleb128 -22
 5188 0668 13       		.uleb128 0x13
 5189 0669 A8070000 		.4byte	.LASF94
 5190 066d 02       		.byte	0x2
 5191 066e 5501     		.2byte	0x155
 5192 0670 8C000000 		.4byte	0x8c
 5193 0674 02       		.uleb128 0x2
 5194 0675 91       		.byte	0x91
 5195 0676 70       		.sleb128 -16
 5196 0677 13       		.uleb128 0x13
 5197 0678 19020000 		.4byte	.LASF105
 5198 067c 02       		.byte	0x2
 5199 067d 5601     		.2byte	0x156
 5200 067f AD000000 		.4byte	0xad
 5201 0683 02       		.uleb128 0x2
 5202 0684 91       		.byte	0x91
 5203 0685 76       		.sleb128 -10
 5204 0686 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 122


 5205 0687 1F020000 		.4byte	.LASF106
 5206 068b 02       		.byte	0x2
 5207 068c 5701     		.2byte	0x157
 5208 068e AD000000 		.4byte	0xad
 5209 0692 02       		.uleb128 0x2
 5210 0693 91       		.byte	0x91
 5211 0694 74       		.sleb128 -12
 5212 0695 13       		.uleb128 0x13
 5213 0696 25020000 		.4byte	.LASF107
 5214 069a 02       		.byte	0x2
 5215 069b 5801     		.2byte	0x158
 5216 069d AD000000 		.4byte	0xad
 5217 06a1 02       		.uleb128 0x2
 5218 06a2 91       		.byte	0x91
 5219 06a3 72       		.sleb128 -14
 5220 06a4 00       		.byte	0
 5221 06a5 06       		.uleb128 0x6
 5222 06a6 04       		.byte	0x4
 5223 06a7 A2000000 		.4byte	0xa2
 5224 06ab 11       		.uleb128 0x11
 5225 06ac CA060000 		.4byte	.LASF108
 5226 06b0 02       		.byte	0x2
 5227 06b1 6101     		.2byte	0x161
 5228 06b3 8C000000 		.4byte	0x8c
 5229 06b7 00000000 		.4byte	.LFB48
 5230 06bb 78000000 		.4byte	.LFE48-.LFB48
 5231 06bf 01       		.uleb128 0x1
 5232 06c0 9C       		.byte	0x9c
 5233 06c1 2F070000 		.4byte	0x72f
 5234 06c5 12       		.uleb128 0x12
 5235 06c6 83060000 		.4byte	.LASF102
 5236 06ca 02       		.byte	0x2
 5237 06cb 6101     		.2byte	0x161
 5238 06cd A5060000 		.4byte	0x6a5
 5239 06d1 02       		.uleb128 0x2
 5240 06d2 91       		.byte	0x91
 5241 06d3 6C       		.sleb128 -20
 5242 06d4 12       		.uleb128 0x12
 5243 06d5 F3010000 		.4byte	.LASF103
 5244 06d9 02       		.byte	0x2
 5245 06da 6101     		.2byte	0x161
 5246 06dc 81000000 		.4byte	0x81
 5247 06e0 02       		.uleb128 0x2
 5248 06e1 91       		.byte	0x91
 5249 06e2 6B       		.sleb128 -21
 5250 06e3 12       		.uleb128 0x12
 5251 06e4 F9010000 		.4byte	.LASF104
 5252 06e8 02       		.byte	0x2
 5253 06e9 6101     		.2byte	0x161
 5254 06eb 81000000 		.4byte	0x81
 5255 06ef 02       		.uleb128 0x2
 5256 06f0 91       		.byte	0x91
 5257 06f1 6A       		.sleb128 -22
 5258 06f2 13       		.uleb128 0x13
 5259 06f3 A8070000 		.4byte	.LASF94
 5260 06f7 02       		.byte	0x2
 5261 06f8 6301     		.2byte	0x163
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 123


 5262 06fa 8C000000 		.4byte	0x8c
 5263 06fe 02       		.uleb128 0x2
 5264 06ff 91       		.byte	0x91
 5265 0700 70       		.sleb128 -16
 5266 0701 13       		.uleb128 0x13
 5267 0702 19020000 		.4byte	.LASF105
 5268 0706 02       		.byte	0x2
 5269 0707 6401     		.2byte	0x164
 5270 0709 AD000000 		.4byte	0xad
 5271 070d 02       		.uleb128 0x2
 5272 070e 91       		.byte	0x91
 5273 070f 76       		.sleb128 -10
 5274 0710 13       		.uleb128 0x13
 5275 0711 1F020000 		.4byte	.LASF106
 5276 0715 02       		.byte	0x2
 5277 0716 6501     		.2byte	0x165
 5278 0718 AD000000 		.4byte	0xad
 5279 071c 02       		.uleb128 0x2
 5280 071d 91       		.byte	0x91
 5281 071e 74       		.sleb128 -12
 5282 071f 13       		.uleb128 0x13
 5283 0720 25020000 		.4byte	.LASF107
 5284 0724 02       		.byte	0x2
 5285 0725 6601     		.2byte	0x166
 5286 0727 AD000000 		.4byte	0xad
 5287 072b 02       		.uleb128 0x2
 5288 072c 91       		.byte	0x91
 5289 072d 72       		.sleb128 -14
 5290 072e 00       		.byte	0
 5291 072f 11       		.uleb128 0x11
 5292 0730 C6020000 		.4byte	.LASF109
 5293 0734 02       		.byte	0x2
 5294 0735 6F01     		.2byte	0x16f
 5295 0737 8C000000 		.4byte	0x8c
 5296 073b 00000000 		.4byte	.LFB49
 5297 073f 72000000 		.4byte	.LFE49-.LFB49
 5298 0743 01       		.uleb128 0x1
 5299 0744 9C       		.byte	0x9c
 5300 0745 B3070000 		.4byte	0x7b3
 5301 0749 12       		.uleb128 0x12
 5302 074a 83060000 		.4byte	.LASF102
 5303 074e 02       		.byte	0x2
 5304 074f 6F01     		.2byte	0x16f
 5305 0751 A5060000 		.4byte	0x6a5
 5306 0755 02       		.uleb128 0x2
 5307 0756 91       		.byte	0x91
 5308 0757 6C       		.sleb128 -20
 5309 0758 12       		.uleb128 0x12
 5310 0759 F3010000 		.4byte	.LASF103
 5311 075d 02       		.byte	0x2
 5312 075e 6F01     		.2byte	0x16f
 5313 0760 81000000 		.4byte	0x81
 5314 0764 02       		.uleb128 0x2
 5315 0765 91       		.byte	0x91
 5316 0766 6B       		.sleb128 -21
 5317 0767 12       		.uleb128 0x12
 5318 0768 F9010000 		.4byte	.LASF104
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 124


 5319 076c 02       		.byte	0x2
 5320 076d 6F01     		.2byte	0x16f
 5321 076f 81000000 		.4byte	0x81
 5322 0773 02       		.uleb128 0x2
 5323 0774 91       		.byte	0x91
 5324 0775 6A       		.sleb128 -22
 5325 0776 13       		.uleb128 0x13
 5326 0777 A8070000 		.4byte	.LASF94
 5327 077b 02       		.byte	0x2
 5328 077c 7101     		.2byte	0x171
 5329 077e 8C000000 		.4byte	0x8c
 5330 0782 02       		.uleb128 0x2
 5331 0783 91       		.byte	0x91
 5332 0784 70       		.sleb128 -16
 5333 0785 13       		.uleb128 0x13
 5334 0786 19020000 		.4byte	.LASF105
 5335 078a 02       		.byte	0x2
 5336 078b 7201     		.2byte	0x172
 5337 078d AD000000 		.4byte	0xad
 5338 0791 02       		.uleb128 0x2
 5339 0792 91       		.byte	0x91
 5340 0793 76       		.sleb128 -10
 5341 0794 13       		.uleb128 0x13
 5342 0795 1F020000 		.4byte	.LASF106
 5343 0799 02       		.byte	0x2
 5344 079a 7301     		.2byte	0x173
 5345 079c AD000000 		.4byte	0xad
 5346 07a0 02       		.uleb128 0x2
 5347 07a1 91       		.byte	0x91
 5348 07a2 74       		.sleb128 -12
 5349 07a3 13       		.uleb128 0x13
 5350 07a4 25020000 		.4byte	.LASF107
 5351 07a8 02       		.byte	0x2
 5352 07a9 7401     		.2byte	0x174
 5353 07ab AD000000 		.4byte	0xad
 5354 07af 02       		.uleb128 0x2
 5355 07b0 91       		.byte	0x91
 5356 07b1 72       		.sleb128 -14
 5357 07b2 00       		.byte	0
 5358 07b3 14       		.uleb128 0x14
 5359 07b4 EA040000 		.4byte	.LASF110
 5360 07b8 02       		.byte	0x2
 5361 07b9 7D01     		.2byte	0x17d
 5362 07bb 8C000000 		.4byte	0x8c
 5363 07bf 00000000 		.4byte	.LFB50
 5364 07c3 28000000 		.4byte	.LFE50-.LFB50
 5365 07c7 01       		.uleb128 0x1
 5366 07c8 9C       		.byte	0x9c
 5367 07c9 EC070000 		.4byte	0x7ec
 5368 07cd 12       		.uleb128 0x12
 5369 07ce D3040000 		.4byte	.LASF77
 5370 07d2 02       		.byte	0x2
 5371 07d3 7D01     		.2byte	0x17d
 5372 07d5 97000000 		.4byte	0x97
 5373 07d9 02       		.uleb128 0x2
 5374 07da 91       		.byte	0x91
 5375 07db 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 125


 5376 07dc 13       		.uleb128 0x13
 5377 07dd 04030000 		.4byte	.LASF111
 5378 07e1 02       		.byte	0x2
 5379 07e2 7F01     		.2byte	0x17f
 5380 07e4 8C000000 		.4byte	0x8c
 5381 07e8 02       		.uleb128 0x2
 5382 07e9 91       		.byte	0x91
 5383 07ea 76       		.sleb128 -10
 5384 07eb 00       		.byte	0
 5385 07ec 15       		.uleb128 0x15
 5386 07ed B1040000 		.4byte	.LASF112
 5387 07f1 02       		.byte	0x2
 5388 07f2 8401     		.2byte	0x184
 5389 07f4 00000000 		.4byte	.LFB51
 5390 07f8 8C010000 		.4byte	.LFE51-.LFB51
 5391 07fc 01       		.uleb128 0x1
 5392 07fd 9C       		.byte	0x9c
 5393 07fe 15       		.uleb128 0x15
 5394 07ff AE060000 		.4byte	.LASF113
 5395 0803 02       		.byte	0x2
 5396 0804 ED01     		.2byte	0x1ed
 5397 0806 00000000 		.4byte	.LFB52
 5398 080a 18000000 		.4byte	.LFE52-.LFB52
 5399 080e 01       		.uleb128 0x1
 5400 080f 9C       		.byte	0x9c
 5401 0810 16       		.uleb128 0x16
 5402 0811 52040000 		.4byte	.LASF114
 5403 0815 02       		.byte	0x2
 5404 0816 F501     		.2byte	0x1f5
 5405 0818 00000000 		.4byte	.LFB53
 5406 081c FC000000 		.4byte	.LFE53-.LFB53
 5407 0820 01       		.uleb128 0x1
 5408 0821 9C       		.byte	0x9c
 5409 0822 4C080000 		.4byte	0x84c
 5410 0826 17       		.uleb128 0x17
 5411 0827 6900     		.ascii	"i\000"
 5412 0829 02       		.byte	0x2
 5413 082a 0502     		.2byte	0x205
 5414 082c 81000000 		.4byte	0x81
 5415 0830 17       		.uleb128 0x17
 5416 0831 61766700 		.ascii	"avg\000"
 5417 0835 02       		.byte	0x2
 5418 0836 0602     		.2byte	0x206
 5419 0838 8C000000 		.4byte	0x8c
 5420 083c 13       		.uleb128 0x13
 5421 083d A8070000 		.4byte	.LASF94
 5422 0841 02       		.byte	0x2
 5423 0842 0702     		.2byte	0x207
 5424 0844 8C000000 		.4byte	0x8c
 5425 0848 02       		.uleb128 0x2
 5426 0849 91       		.byte	0x91
 5427 084a 6E       		.sleb128 -18
 5428 084b 00       		.byte	0
 5429 084c 16       		.uleb128 0x16
 5430 084d BE060000 		.4byte	.LASF115
 5431 0851 02       		.byte	0x2
 5432 0852 6202     		.2byte	0x262
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 126


 5433 0854 00000000 		.4byte	.LFB54
 5434 0858 F8000000 		.4byte	.LFE54-.LFB54
 5435 085c 01       		.uleb128 0x1
 5436 085d 9C       		.byte	0x9c
 5437 085e 88080000 		.4byte	0x888
 5438 0862 17       		.uleb128 0x17
 5439 0863 6900     		.ascii	"i\000"
 5440 0865 02       		.byte	0x2
 5441 0866 7202     		.2byte	0x272
 5442 0868 81000000 		.4byte	0x81
 5443 086c 17       		.uleb128 0x17
 5444 086d 61766700 		.ascii	"avg\000"
 5445 0871 02       		.byte	0x2
 5446 0872 7302     		.2byte	0x273
 5447 0874 8C000000 		.4byte	0x8c
 5448 0878 13       		.uleb128 0x13
 5449 0879 A8070000 		.4byte	.LASF94
 5450 087d 02       		.byte	0x2
 5451 087e 7402     		.2byte	0x274
 5452 0880 8C000000 		.4byte	0x8c
 5453 0884 02       		.uleb128 0x2
 5454 0885 91       		.byte	0x91
 5455 0886 6E       		.sleb128 -18
 5456 0887 00       		.byte	0
 5457 0888 16       		.uleb128 0x16
 5458 0889 36020000 		.4byte	.LASF116
 5459 088d 02       		.byte	0x2
 5460 088e E702     		.2byte	0x2e7
 5461 0890 00000000 		.4byte	.LFB55
 5462 0894 08010000 		.4byte	.LFE55-.LFB55
 5463 0898 01       		.uleb128 0x1
 5464 0899 9C       		.byte	0x9c
 5465 089a C4080000 		.4byte	0x8c4
 5466 089e 17       		.uleb128 0x17
 5467 089f 6900     		.ascii	"i\000"
 5468 08a1 02       		.byte	0x2
 5469 08a2 ED02     		.2byte	0x2ed
 5470 08a4 81000000 		.4byte	0x81
 5471 08a8 17       		.uleb128 0x17
 5472 08a9 61766700 		.ascii	"avg\000"
 5473 08ad 02       		.byte	0x2
 5474 08ae EE02     		.2byte	0x2ee
 5475 08b0 8C000000 		.4byte	0x8c
 5476 08b4 13       		.uleb128 0x13
 5477 08b5 A8070000 		.4byte	.LASF94
 5478 08b9 02       		.byte	0x2
 5479 08ba EF02     		.2byte	0x2ef
 5480 08bc 8C000000 		.4byte	0x8c
 5481 08c0 02       		.uleb128 0x2
 5482 08c1 91       		.byte	0x91
 5483 08c2 6E       		.sleb128 -18
 5484 08c3 00       		.byte	0
 5485 08c4 16       		.uleb128 0x16
 5486 08c5 DE010000 		.4byte	.LASF117
 5487 08c9 02       		.byte	0x2
 5488 08ca B203     		.2byte	0x3b2
 5489 08cc 00000000 		.4byte	.LFB56
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 127


 5490 08d0 08010000 		.4byte	.LFE56-.LFB56
 5491 08d4 01       		.uleb128 0x1
 5492 08d5 9C       		.byte	0x9c
 5493 08d6 00090000 		.4byte	0x900
 5494 08da 17       		.uleb128 0x17
 5495 08db 6900     		.ascii	"i\000"
 5496 08dd 02       		.byte	0x2
 5497 08de B803     		.2byte	0x3b8
 5498 08e0 81000000 		.4byte	0x81
 5499 08e4 17       		.uleb128 0x17
 5500 08e5 61766700 		.ascii	"avg\000"
 5501 08e9 02       		.byte	0x2
 5502 08ea B903     		.2byte	0x3b9
 5503 08ec 8C000000 		.4byte	0x8c
 5504 08f0 13       		.uleb128 0x13
 5505 08f1 A8070000 		.4byte	.LASF94
 5506 08f5 02       		.byte	0x2
 5507 08f6 BA03     		.2byte	0x3ba
 5508 08f8 8C000000 		.4byte	0x8c
 5509 08fc 02       		.uleb128 0x2
 5510 08fd 91       		.byte	0x91
 5511 08fe 6E       		.sleb128 -18
 5512 08ff 00       		.byte	0
 5513 0900 16       		.uleb128 0x16
 5514 0901 00000000 		.4byte	.LASF118
 5515 0905 02       		.byte	0x2
 5516 0906 7D04     		.2byte	0x47d
 5517 0908 00000000 		.4byte	.LFB57
 5518 090c 30010000 		.4byte	.LFE57-.LFB57
 5519 0910 01       		.uleb128 0x1
 5520 0911 9C       		.byte	0x9c
 5521 0912 3C090000 		.4byte	0x93c
 5522 0916 17       		.uleb128 0x17
 5523 0917 6900     		.ascii	"i\000"
 5524 0919 02       		.byte	0x2
 5525 091a 8204     		.2byte	0x482
 5526 091c 81000000 		.4byte	0x81
 5527 0920 17       		.uleb128 0x17
 5528 0921 61766700 		.ascii	"avg\000"
 5529 0925 02       		.byte	0x2
 5530 0926 8304     		.2byte	0x483
 5531 0928 8C000000 		.4byte	0x8c
 5532 092c 13       		.uleb128 0x13
 5533 092d 9A000000 		.4byte	.LASF119
 5534 0931 02       		.byte	0x2
 5535 0932 8404     		.2byte	0x484
 5536 0934 8C000000 		.4byte	0x8c
 5537 0938 02       		.uleb128 0x2
 5538 0939 91       		.byte	0x91
 5539 093a 6E       		.sleb128 -18
 5540 093b 00       		.byte	0
 5541 093c 16       		.uleb128 0x16
 5542 093d 84000000 		.4byte	.LASF120
 5543 0941 02       		.byte	0x2
 5544 0942 DB04     		.2byte	0x4db
 5545 0944 00000000 		.4byte	.LFB58
 5546 0948 FC000000 		.4byte	.LFE58-.LFB58
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 128


 5547 094c 01       		.uleb128 0x1
 5548 094d 9C       		.byte	0x9c
 5549 094e 62090000 		.4byte	0x962
 5550 0952 13       		.uleb128 0x13
 5551 0953 A8070000 		.4byte	.LASF94
 5552 0957 02       		.byte	0x2
 5553 0958 DD04     		.2byte	0x4dd
 5554 095a 8C000000 		.4byte	0x8c
 5555 095e 02       		.uleb128 0x2
 5556 095f 91       		.byte	0x91
 5557 0960 6E       		.sleb128 -18
 5558 0961 00       		.byte	0
 5559 0962 16       		.uleb128 0x16
 5560 0963 1D010000 		.4byte	.LASF121
 5561 0967 02       		.byte	0x2
 5562 0968 3305     		.2byte	0x533
 5563 096a 00000000 		.4byte	.LFB59
 5564 096e 14010000 		.4byte	.LFE59-.LFB59
 5565 0972 01       		.uleb128 0x1
 5566 0973 9C       		.byte	0x9c
 5567 0974 CC090000 		.4byte	0x9cc
 5568 0978 13       		.uleb128 0x13
 5569 0979 7A000000 		.4byte	.LASF122
 5570 097d 02       		.byte	0x2
 5571 097e 3505     		.2byte	0x535
 5572 0980 81000000 		.4byte	0x81
 5573 0984 02       		.uleb128 0x2
 5574 0985 91       		.byte	0x91
 5575 0986 72       		.sleb128 -14
 5576 0987 13       		.uleb128 0x13
 5577 0988 9D040000 		.4byte	.LASF123
 5578 098c 02       		.byte	0x2
 5579 098d 3605     		.2byte	0x536
 5580 098f 81000000 		.4byte	0x81
 5581 0993 02       		.uleb128 0x2
 5582 0994 91       		.byte	0x91
 5583 0995 71       		.sleb128 -15
 5584 0996 13       		.uleb128 0x13
 5585 0997 AD030000 		.4byte	.LASF124
 5586 099b 02       		.byte	0x2
 5587 099c 3705     		.2byte	0x537
 5588 099e 81000000 		.4byte	0x81
 5589 09a2 02       		.uleb128 0x2
 5590 09a3 91       		.byte	0x91
 5591 09a4 70       		.sleb128 -16
 5592 09a5 13       		.uleb128 0x13
 5593 09a6 DB040000 		.4byte	.LASF125
 5594 09aa 02       		.byte	0x2
 5595 09ab 3805     		.2byte	0x538
 5596 09ad 81000000 		.4byte	0x81
 5597 09b1 02       		.uleb128 0x2
 5598 09b2 91       		.byte	0x91
 5599 09b3 73       		.sleb128 -13
 5600 09b4 18       		.uleb128 0x18
 5601 09b5 44000000 		.4byte	.LBB2
 5602 09b9 26000000 		.4byte	.LBE2-.LBB2
 5603 09bd 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 129


 5604 09be 6900     		.ascii	"i\000"
 5605 09c0 02       		.byte	0x2
 5606 09c1 4B05     		.2byte	0x54b
 5607 09c3 68000000 		.4byte	0x68
 5608 09c7 02       		.uleb128 0x2
 5609 09c8 91       		.byte	0x91
 5610 09c9 74       		.sleb128 -12
 5611 09ca 00       		.byte	0
 5612 09cb 00       		.byte	0
 5613 09cc 16       		.uleb128 0x16
 5614 09cd 2B020000 		.4byte	.LASF126
 5615 09d1 02       		.byte	0x2
 5616 09d2 8E05     		.2byte	0x58e
 5617 09d4 00000000 		.4byte	.LFB60
 5618 09d8 14010000 		.4byte	.LFE60-.LFB60
 5619 09dc 01       		.uleb128 0x1
 5620 09dd 9C       		.byte	0x9c
 5621 09de FA090000 		.4byte	0x9fa
 5622 09e2 18       		.uleb128 0x18
 5623 09e3 1E000000 		.4byte	.LBB3
 5624 09e7 2C000000 		.4byte	.LBE3-.LBB3
 5625 09eb 19       		.uleb128 0x19
 5626 09ec 6A00     		.ascii	"j\000"
 5627 09ee 02       		.byte	0x2
 5628 09ef 9505     		.2byte	0x595
 5629 09f1 81000000 		.4byte	0x81
 5630 09f5 02       		.uleb128 0x2
 5631 09f6 91       		.byte	0x91
 5632 09f7 77       		.sleb128 -9
 5633 09f8 00       		.byte	0
 5634 09f9 00       		.byte	0
 5635 09fa 1A       		.uleb128 0x1a
 5636 09fb F5070000 		.4byte	.LASF127
 5637 09ff 02       		.byte	0x2
 5638 0a00 D605     		.2byte	0x5d6
 5639 0a02 68000000 		.4byte	0x68
 5640 0a06 00000000 		.4byte	.LFB61
 5641 0a0a 00010000 		.4byte	.LFE61-.LFB61
 5642 0a0e 01       		.uleb128 0x1
 5643 0a0f 9C       		.byte	0x9c
 5644 0a10 4A0A0000 		.4byte	0xa4a
 5645 0a14 13       		.uleb128 0x13
 5646 0a15 84020000 		.4byte	.LASF128
 5647 0a19 02       		.byte	0x2
 5648 0a1a E505     		.2byte	0x5e5
 5649 0a1c 81000000 		.4byte	0x81
 5650 0a20 02       		.uleb128 0x2
 5651 0a21 91       		.byte	0x91
 5652 0a22 77       		.sleb128 -9
 5653 0a23 13       		.uleb128 0x13
 5654 0a24 BB070000 		.4byte	.LASF129
 5655 0a28 02       		.byte	0x2
 5656 0a29 E605     		.2byte	0x5e6
 5657 0a2b AD000000 		.4byte	0xad
 5658 0a2f 02       		.uleb128 0x2
 5659 0a30 91       		.byte	0x91
 5660 0a31 6E       		.sleb128 -18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 130


 5661 0a32 18       		.uleb128 0x18
 5662 0a33 7A000000 		.4byte	.LBB4
 5663 0a37 34000000 		.4byte	.LBE4-.LBB4
 5664 0a3b 19       		.uleb128 0x19
 5665 0a3c 6900     		.ascii	"i\000"
 5666 0a3e 02       		.byte	0x2
 5667 0a3f 0906     		.2byte	0x609
 5668 0a41 68000000 		.4byte	0x68
 5669 0a45 02       		.uleb128 0x2
 5670 0a46 91       		.byte	0x91
 5671 0a47 70       		.sleb128 -16
 5672 0a48 00       		.byte	0
 5673 0a49 00       		.byte	0
 5674 0a4a 1B       		.uleb128 0x1b
 5675 0a4b FA060000 		.4byte	.LASF130
 5676 0a4f 06       		.byte	0x6
 5677 0a50 18       		.byte	0x18
 5678 0a51 97000000 		.4byte	0x97
 5679 0a55 05       		.uleb128 0x5
 5680 0a56 03       		.byte	0x3
 5681 0a57 00000000 		.4byte	ELBOW_UPPER_BOUND
 5682 0a5b 1B       		.uleb128 0x1b
 5683 0a5c 99010000 		.4byte	.LASF131
 5684 0a60 06       		.byte	0x6
 5685 0a61 19       		.byte	0x19
 5686 0a62 97000000 		.4byte	0x97
 5687 0a66 05       		.uleb128 0x5
 5688 0a67 03       		.byte	0x3
 5689 0a68 00000000 		.4byte	ELBOW_LOWER_BOUND
 5690 0a6c 1B       		.uleb128 0x1b
 5691 0a6d DD030000 		.4byte	.LASF132
 5692 0a71 06       		.byte	0x6
 5693 0a72 1A       		.byte	0x1a
 5694 0a73 97000000 		.4byte	0x97
 5695 0a77 05       		.uleb128 0x5
 5696 0a78 03       		.byte	0x3
 5697 0a79 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5698 0a7d 1B       		.uleb128 0x1b
 5699 0a7e 62060000 		.4byte	.LASF133
 5700 0a82 06       		.byte	0x6
 5701 0a83 1B       		.byte	0x1b
 5702 0a84 97000000 		.4byte	0x97
 5703 0a88 05       		.uleb128 0x5
 5704 0a89 03       		.byte	0x3
 5705 0a8a 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5706 0a8e 1B       		.uleb128 0x1b
 5707 0a8f A5030000 		.4byte	.LASF134
 5708 0a93 06       		.byte	0x6
 5709 0a94 32       		.byte	0x32
 5710 0a95 8C000000 		.4byte	0x8c
 5711 0a99 05       		.uleb128 0x5
 5712 0a9a 03       		.byte	0x3
 5713 0a9b 00000000 		.4byte	NEUTRAL
 5714 0a9f 0C       		.uleb128 0xc
 5715 0aa0 A2000000 		.4byte	0xa2
 5716 0aa4 AF0A0000 		.4byte	0xaaf
 5717 0aa8 0D       		.uleb128 0xd
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 131


 5718 0aa9 D2000000 		.4byte	0xd2
 5719 0aad 15       		.byte	0x15
 5720 0aae 00       		.byte	0
 5721 0aaf 1B       		.uleb128 0x1b
 5722 0ab0 AB020000 		.4byte	.LASF135
 5723 0ab4 06       		.byte	0x6
 5724 0ab5 36       		.byte	0x36
 5725 0ab6 9F0A0000 		.4byte	0xa9f
 5726 0aba 05       		.uleb128 0x5
 5727 0abb 03       		.byte	0x3
 5728 0abc 00000000 		.4byte	data_array
 5729 0ac0 0C       		.uleb128 0xc
 5730 0ac1 76000000 		.4byte	0x76
 5731 0ac5 D00A0000 		.4byte	0xad0
 5732 0ac9 0D       		.uleb128 0xd
 5733 0aca D2000000 		.4byte	0xd2
 5734 0ace 0D       		.byte	0xd
 5735 0acf 00       		.byte	0
 5736 0ad0 1B       		.uleb128 0x1b
 5737 0ad1 50030000 		.4byte	.LASF136
 5738 0ad5 06       		.byte	0x6
 5739 0ad6 39       		.byte	0x39
 5740 0ad7 C00A0000 		.4byte	0xac0
 5741 0adb 05       		.uleb128 0x5
 5742 0adc 03       		.byte	0x3
 5743 0add 00000000 		.4byte	feedback_array
 5744 0ae1 1B       		.uleb128 0x1b
 5745 0ae2 75010000 		.4byte	.LASF137
 5746 0ae6 06       		.byte	0x6
 5747 0ae7 3A       		.byte	0x3a
 5748 0ae8 C00A0000 		.4byte	0xac0
 5749 0aec 05       		.uleb128 0x5
 5750 0aed 03       		.byte	0x3
 5751 0aee 00000000 		.4byte	heartbeat_array
 5752 0af2 1B       		.uleb128 0x1b
 5753 0af3 C4040000 		.4byte	.LASF138
 5754 0af7 06       		.byte	0x6
 5755 0af8 3B       		.byte	0x3b
 5756 0af9 81000000 		.4byte	0x81
 5757 0afd 05       		.uleb128 0x5
 5758 0afe 03       		.byte	0x3
 5759 0aff 00000000 		.4byte	HEARTBEAT_FLAG
 5760 0b03 1B       		.uleb128 0x1b
 5761 0b04 C6050000 		.4byte	.LASF139
 5762 0b08 06       		.byte	0x6
 5763 0b09 3E       		.byte	0x3e
 5764 0b0a 81000000 		.4byte	0x81
 5765 0b0e 05       		.uleb128 0x5
 5766 0b0f 03       		.byte	0x3
 5767 0b10 00000000 		.4byte	wiznet
 5768 0b14 1B       		.uleb128 0x1b
 5769 0b15 30000000 		.4byte	.LASF140
 5770 0b19 06       		.byte	0x6
 5771 0b1a 42       		.byte	0x42
 5772 0b1b 9F0A0000 		.4byte	0xa9f
 5773 0b1f 05       		.uleb128 0x5
 5774 0b20 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 132


 5775 0b21 00000000 		.4byte	test_array
 5776 0b25 1B       		.uleb128 0x1b
 5777 0b26 50020000 		.4byte	.LASF141
 5778 0b2a 06       		.byte	0x6
 5779 0b2b 4B       		.byte	0x4b
 5780 0b2c 81000000 		.4byte	0x81
 5781 0b30 05       		.uleb128 0x5
 5782 0b31 03       		.byte	0x3
 5783 0b32 00000000 		.4byte	WT_feedback_flag
 5784 0b36 1B       		.uleb128 0x1b
 5785 0b37 5F030000 		.4byte	.LASF142
 5786 0b3b 06       		.byte	0x6
 5787 0b3c 4C       		.byte	0x4c
 5788 0b3d 81000000 		.4byte	0x81
 5789 0b41 05       		.uleb128 0x5
 5790 0b42 03       		.byte	0x3
 5791 0b43 00000000 		.4byte	WR_feedback_flag
 5792 0b47 1B       		.uleb128 0x1b
 5793 0b48 04060000 		.4byte	.LASF143
 5794 0b4c 06       		.byte	0x6
 5795 0b4d 4D       		.byte	0x4d
 5796 0b4e 8C000000 		.4byte	0x8c
 5797 0b52 05       		.uleb128 0x5
 5798 0b53 03       		.byte	0x3
 5799 0b54 00000000 		.4byte	WR_feedback
 5800 0b58 1B       		.uleb128 0x1b
 5801 0b59 33040000 		.4byte	.LASF144
 5802 0b5d 06       		.byte	0x6
 5803 0b5e 4E       		.byte	0x4e
 5804 0b5f 81000000 		.4byte	0x81
 5805 0b63 05       		.uleb128 0x5
 5806 0b64 03       		.byte	0x3
 5807 0b65 00000000 		.4byte	WT_FLAG
 5808 0b69 1B       		.uleb128 0x1b
 5809 0b6a BE020000 		.4byte	.LASF145
 5810 0b6e 06       		.byte	0x6
 5811 0b6f 4F       		.byte	0x4f
 5812 0b70 81000000 		.4byte	0x81
 5813 0b74 05       		.uleb128 0x5
 5814 0b75 03       		.byte	0x3
 5815 0b76 00000000 		.4byte	WR_FLAG
 5816 0b7a 1B       		.uleb128 0x1b
 5817 0b7b 62080000 		.4byte	.LASF146
 5818 0b7f 06       		.byte	0x6
 5819 0b80 50       		.byte	0x50
 5820 0b81 81000000 		.4byte	0x81
 5821 0b85 05       		.uleb128 0x5
 5822 0b86 03       		.byte	0x3
 5823 0b87 00000000 		.4byte	ELBOW_FLAG
 5824 0b8b 1B       		.uleb128 0x1b
 5825 0b8c 5C040000 		.4byte	.LASF147
 5826 0b90 06       		.byte	0x6
 5827 0b91 51       		.byte	0x51
 5828 0b92 81000000 		.4byte	0x81
 5829 0b96 05       		.uleb128 0x5
 5830 0b97 03       		.byte	0x3
 5831 0b98 00000000 		.4byte	SHOULDER_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 133


 5832 0b9c 1B       		.uleb128 0x1b
 5833 0b9d AB080000 		.4byte	.LASF148
 5834 0ba1 06       		.byte	0x6
 5835 0ba2 52       		.byte	0x52
 5836 0ba3 81000000 		.4byte	0x81
 5837 0ba7 05       		.uleb128 0x5
 5838 0ba8 03       		.byte	0x3
 5839 0ba9 00000000 		.4byte	BA_FLAG
 5840 0bad 1B       		.uleb128 0x1b
 5841 0bae CF030000 		.4byte	.LASF149
 5842 0bb2 06       		.byte	0x6
 5843 0bb3 53       		.byte	0x53
 5844 0bb4 81000000 		.4byte	0x81
 5845 0bb8 05       		.uleb128 0x5
 5846 0bb9 03       		.byte	0x3
 5847 0bba 00000000 		.4byte	EFFECTOR_FLAG
 5848 0bbe 1B       		.uleb128 0x1b
 5849 0bbf 6E050000 		.4byte	.LASF150
 5850 0bc3 06       		.byte	0x6
 5851 0bc4 54       		.byte	0x54
 5852 0bc5 81000000 		.4byte	0x81
 5853 0bc9 05       		.uleb128 0x5
 5854 0bca 03       		.byte	0x3
 5855 0bcb 00000000 		.4byte	ARD_FLAG
 5856 0bcf 1B       		.uleb128 0x1b
 5857 0bd0 A3040000 		.4byte	.LASF151
 5858 0bd4 06       		.byte	0x6
 5859 0bd5 56       		.byte	0x56
 5860 0bd6 81000000 		.4byte	0x81
 5861 0bda 05       		.uleb128 0x5
 5862 0bdb 03       		.byte	0x3
 5863 0bdc 00000000 		.4byte	Time_Out_flag
 5864 0be0 1B       		.uleb128 0x1b
 5865 0be1 19030000 		.4byte	.LASF152
 5866 0be5 06       		.byte	0x6
 5867 0be6 57       		.byte	0x57
 5868 0be7 81000000 		.4byte	0x81
 5869 0beb 05       		.uleb128 0x5
 5870 0bec 03       		.byte	0x3
 5871 0bed 00000000 		.4byte	Time_count
 5872 0bf1 1B       		.uleb128 0x1b
 5873 0bf2 D3000000 		.4byte	.LASF153
 5874 0bf6 06       		.byte	0x6
 5875 0bf7 59       		.byte	0x59
 5876 0bf8 8C000000 		.4byte	0x8c
 5877 0bfc 05       		.uleb128 0x5
 5878 0bfd 03       		.byte	0x3
 5879 0bfe 00000000 		.4byte	dropped_packets
 5880 0c02 1B       		.uleb128 0x1b
 5881 0c03 3F010000 		.4byte	.LASF154
 5882 0c07 06       		.byte	0x6
 5883 0c08 5A       		.byte	0x5a
 5884 0c09 8C000000 		.4byte	0x8c
 5885 0c0d 05       		.uleb128 0x5
 5886 0c0e 03       		.byte	0x3
 5887 0c0f 00000000 		.4byte	fail_safe_errors
 5888 0c13 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 134


 5889 0c14 86080000 		.4byte	.LASF155
 5890 0c18 06       		.byte	0x6
 5891 0c19 5B       		.byte	0x5b
 5892 0c1a 8C000000 		.4byte	0x8c
 5893 0c1e 05       		.uleb128 0x5
 5894 0c1f 03       		.byte	0x3
 5895 0c20 00000000 		.4byte	shldr_errors
 5896 0c24 1B       		.uleb128 0x1b
 5897 0c25 44000000 		.4byte	.LASF156
 5898 0c29 06       		.byte	0x6
 5899 0c2a 5C       		.byte	0x5c
 5900 0c2b 8C000000 		.4byte	0x8c
 5901 0c2f 05       		.uleb128 0x5
 5902 0c30 03       		.byte	0x3
 5903 0c31 00000000 		.4byte	elbw_errors
 5904 0c35 1B       		.uleb128 0x1b
 5905 0c36 46020000 		.4byte	.LASF157
 5906 0c3a 06       		.byte	0x6
 5907 0c3b 5D       		.byte	0x5d
 5908 0c3c 8C000000 		.4byte	0x8c
 5909 0c40 05       		.uleb128 0x5
 5910 0c41 03       		.byte	0x3
 5911 0c42 00000000 		.4byte	BA_errors
 5912 0c46 1B       		.uleb128 0x1b
 5913 0c47 22040000 		.4byte	.LASF158
 5914 0c4b 06       		.byte	0x6
 5915 0c4c 5E       		.byte	0x5e
 5916 0c4d 8C000000 		.4byte	0x8c
 5917 0c51 05       		.uleb128 0x5
 5918 0c52 03       		.byte	0x3
 5919 0c53 00000000 		.4byte	WT_errors
 5920 0c57 1B       		.uleb128 0x1b
 5921 0c58 77050000 		.4byte	.LASF159
 5922 0c5c 06       		.byte	0x6
 5923 0c5d 5F       		.byte	0x5f
 5924 0c5e 8C000000 		.4byte	0x8c
 5925 0c62 05       		.uleb128 0x5
 5926 0c63 03       		.byte	0x3
 5927 0c64 00000000 		.4byte	WR_errors
 5928 0c68 1B       		.uleb128 0x1b
 5929 0c69 0E020000 		.4byte	.LASF160
 5930 0c6d 06       		.byte	0x6
 5931 0c6e 60       		.byte	0x60
 5932 0c6f 8C000000 		.4byte	0x8c
 5933 0c73 05       		.uleb128 0x5
 5934 0c74 03       		.byte	0x3
 5935 0c75 00000000 		.4byte	eff_errors
 5936 0c79 1B       		.uleb128 0x1b
 5937 0c7a D4010000 		.4byte	.LASF161
 5938 0c7e 06       		.byte	0x6
 5939 0c7f 62       		.byte	0x62
 5940 0c80 CD000000 		.4byte	0xcd
 5941 0c84 05       		.uleb128 0x5
 5942 0c85 03       		.byte	0x3
 5943 0c86 00000000 		.4byte	timerFlag
 5944 0c8a 1B       		.uleb128 0x1b
 5945 0c8b 3F050000 		.4byte	.LASF162
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 135


 5946 0c8f 06       		.byte	0x6
 5947 0c90 71       		.byte	0x71
 5948 0c91 8C000000 		.4byte	0x8c
 5949 0c95 05       		.uleb128 0x5
 5950 0c96 03       		.byte	0x3
 5951 0c97 00000000 		.4byte	latest_command
 5952 0c9b 1B       		.uleb128 0x1b
 5953 0c9c 50000000 		.4byte	.LASF163
 5954 0ca0 06       		.byte	0x6
 5955 0ca1 75       		.byte	0x75
 5956 0ca2 8C000000 		.4byte	0x8c
 5957 0ca6 05       		.uleb128 0x5
 5958 0ca7 03       		.byte	0x3
 5959 0ca8 00000000 		.4byte	latest_WR_command
 5960 0cac 1B       		.uleb128 0x1b
 5961 0cad 75040000 		.4byte	.LASF164
 5962 0cb1 06       		.byte	0x6
 5963 0cb2 76       		.byte	0x76
 5964 0cb3 8C000000 		.4byte	0x8c
 5965 0cb7 05       		.uleb128 0x5
 5966 0cb8 03       		.byte	0x3
 5967 0cb9 00000000 		.4byte	latest_WT_command
 5968 0cbd 1C       		.uleb128 0x1c
 5969 0cbe 9C060000 		.4byte	.LASF165
 5970 0cc2 02       		.byte	0x2
 5971 0cc3 8301     		.2byte	0x183
 5972 0cc5 DF000000 		.4byte	0xdf
 5973 0cc9 05       		.uleb128 0x5
 5974 0cca 03       		.byte	0x3
 5975 0ccb 00000000 		.4byte	send_packet_state
 5976 0ccf 1C       		.uleb128 0x1c
 5977 0cd0 87040000 		.4byte	.LASF166
 5978 0cd4 02       		.byte	0x2
 5979 0cd5 F201     		.2byte	0x1f2
 5980 0cd7 0B010000 		.4byte	0x10b
 5981 0cdb 05       		.uleb128 0x5
 5982 0cdc 03       		.byte	0x3
 5983 0cdd 00000000 		.4byte	wristTilt_state
 5984 0ce1 1C       		.uleb128 0x1c
 5985 0ce2 81050000 		.4byte	.LASF167
 5986 0ce6 02       		.byte	0x2
 5987 0ce7 5F02     		.2byte	0x25f
 5988 0ce9 31010000 		.4byte	0x131
 5989 0ced 05       		.uleb128 0x5
 5990 0cee 03       		.byte	0x3
 5991 0cef 00000000 		.4byte	wristRotate_state
 5992 0cf3 1C       		.uleb128 0x1c
 5993 0cf4 5B010000 		.4byte	.LASF168
 5994 0cf8 02       		.byte	0x2
 5995 0cf9 E502     		.2byte	0x2e5
 5996 0cfb 5D010000 		.4byte	0x15d
 5997 0cff 05       		.uleb128 0x5
 5998 0d00 03       		.byte	0x3
 5999 0d01 00000000 		.4byte	elbow_state
 6000 0d05 1C       		.uleb128 0x1c
 6001 0d06 FB000000 		.4byte	.LASF169
 6002 0d0a 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 136


 6003 0d0b B003     		.2byte	0x3b0
 6004 0d0d 83010000 		.4byte	0x183
 6005 0d11 05       		.uleb128 0x5
 6006 0d12 03       		.byte	0x3
 6007 0d13 00000000 		.4byte	shoulder_state
 6008 0d17 1C       		.uleb128 0x1c
 6009 0d18 24050000 		.4byte	.LASF170
 6010 0d1c 02       		.byte	0x2
 6011 0d1d 7B04     		.2byte	0x47b
 6012 0d1f A9010000 		.4byte	0x1a9
 6013 0d23 05       		.uleb128 0x5
 6014 0d24 03       		.byte	0x3
 6015 0d25 00000000 		.4byte	baseAzimuth_state
 6016 0d29 1C       		.uleb128 0x1c
 6017 0d2a 0D040000 		.4byte	.LASF171
 6018 0d2e 02       		.byte	0x2
 6019 0d2f DA04     		.2byte	0x4da
 6020 0d31 CF010000 		.4byte	0x1cf
 6021 0d35 05       		.uleb128 0x5
 6022 0d36 03       		.byte	0x3
 6023 0d37 00000000 		.4byte	effector_state
 6024 0d3b 1C       		.uleb128 0x1c
 6025 0d3c 85010000 		.4byte	.LASF172
 6026 0d40 02       		.byte	0x2
 6027 0d41 3205     		.2byte	0x532
 6028 0d43 F5010000 		.4byte	0x1f5
 6029 0d47 05       		.uleb128 0x5
 6030 0d48 03       		.byte	0x3
 6031 0d49 00000000 		.4byte	arduino_state
 6032 0d4d 00       		.byte	0
 6033              		.section	.debug_abbrev,"",%progbits
 6034              	.Ldebug_abbrev0:
 6035 0000 01       		.uleb128 0x1
 6036 0001 11       		.uleb128 0x11
 6037 0002 01       		.byte	0x1
 6038 0003 25       		.uleb128 0x25
 6039 0004 0E       		.uleb128 0xe
 6040 0005 13       		.uleb128 0x13
 6041 0006 0B       		.uleb128 0xb
 6042 0007 03       		.uleb128 0x3
 6043 0008 0E       		.uleb128 0xe
 6044 0009 1B       		.uleb128 0x1b
 6045 000a 0E       		.uleb128 0xe
 6046 000b 55       		.uleb128 0x55
 6047 000c 17       		.uleb128 0x17
 6048 000d 11       		.uleb128 0x11
 6049 000e 01       		.uleb128 0x1
 6050 000f 10       		.uleb128 0x10
 6051 0010 17       		.uleb128 0x17
 6052 0011 00       		.byte	0
 6053 0012 00       		.byte	0
 6054 0013 02       		.uleb128 0x2
 6055 0014 24       		.uleb128 0x24
 6056 0015 00       		.byte	0
 6057 0016 0B       		.uleb128 0xb
 6058 0017 0B       		.uleb128 0xb
 6059 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 137


 6060 0019 0B       		.uleb128 0xb
 6061 001a 03       		.uleb128 0x3
 6062 001b 0E       		.uleb128 0xe
 6063 001c 00       		.byte	0
 6064 001d 00       		.byte	0
 6065 001e 03       		.uleb128 0x3
 6066 001f 16       		.uleb128 0x16
 6067 0020 00       		.byte	0
 6068 0021 03       		.uleb128 0x3
 6069 0022 0E       		.uleb128 0xe
 6070 0023 3A       		.uleb128 0x3a
 6071 0024 0B       		.uleb128 0xb
 6072 0025 3B       		.uleb128 0x3b
 6073 0026 0B       		.uleb128 0xb
 6074 0027 49       		.uleb128 0x49
 6075 0028 13       		.uleb128 0x13
 6076 0029 00       		.byte	0
 6077 002a 00       		.byte	0
 6078 002b 04       		.uleb128 0x4
 6079 002c 24       		.uleb128 0x24
 6080 002d 00       		.byte	0
 6081 002e 0B       		.uleb128 0xb
 6082 002f 0B       		.uleb128 0xb
 6083 0030 3E       		.uleb128 0x3e
 6084 0031 0B       		.uleb128 0xb
 6085 0032 03       		.uleb128 0x3
 6086 0033 08       		.uleb128 0x8
 6087 0034 00       		.byte	0
 6088 0035 00       		.byte	0
 6089 0036 05       		.uleb128 0x5
 6090 0037 35       		.uleb128 0x35
 6091 0038 00       		.byte	0
 6092 0039 49       		.uleb128 0x49
 6093 003a 13       		.uleb128 0x13
 6094 003b 00       		.byte	0
 6095 003c 00       		.byte	0
 6096 003d 06       		.uleb128 0x6
 6097 003e 0F       		.uleb128 0xf
 6098 003f 00       		.byte	0
 6099 0040 0B       		.uleb128 0xb
 6100 0041 0B       		.uleb128 0xb
 6101 0042 49       		.uleb128 0x49
 6102 0043 13       		.uleb128 0x13
 6103 0044 00       		.byte	0
 6104 0045 00       		.byte	0
 6105 0046 07       		.uleb128 0x7
 6106 0047 04       		.uleb128 0x4
 6107 0048 01       		.byte	0x1
 6108 0049 03       		.uleb128 0x3
 6109 004a 0E       		.uleb128 0xe
 6110 004b 0B       		.uleb128 0xb
 6111 004c 0B       		.uleb128 0xb
 6112 004d 3A       		.uleb128 0x3a
 6113 004e 0B       		.uleb128 0xb
 6114 004f 3B       		.uleb128 0x3b
 6115 0050 05       		.uleb128 0x5
 6116 0051 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 138


 6117 0052 13       		.uleb128 0x13
 6118 0053 00       		.byte	0
 6119 0054 00       		.byte	0
 6120 0055 08       		.uleb128 0x8
 6121 0056 28       		.uleb128 0x28
 6122 0057 00       		.byte	0
 6123 0058 03       		.uleb128 0x3
 6124 0059 0E       		.uleb128 0xe
 6125 005a 1C       		.uleb128 0x1c
 6126 005b 0D       		.uleb128 0xd
 6127 005c 00       		.byte	0
 6128 005d 00       		.byte	0
 6129 005e 09       		.uleb128 0x9
 6130 005f 2E       		.uleb128 0x2e
 6131 0060 01       		.byte	0x1
 6132 0061 3F       		.uleb128 0x3f
 6133 0062 19       		.uleb128 0x19
 6134 0063 03       		.uleb128 0x3
 6135 0064 0E       		.uleb128 0xe
 6136 0065 3A       		.uleb128 0x3a
 6137 0066 0B       		.uleb128 0xb
 6138 0067 3B       		.uleb128 0x3b
 6139 0068 0B       		.uleb128 0xb
 6140 0069 27       		.uleb128 0x27
 6141 006a 19       		.uleb128 0x19
 6142 006b 11       		.uleb128 0x11
 6143 006c 01       		.uleb128 0x1
 6144 006d 12       		.uleb128 0x12
 6145 006e 06       		.uleb128 0x6
 6146 006f 40       		.uleb128 0x40
 6147 0070 18       		.uleb128 0x18
 6148 0071 9642     		.uleb128 0x2116
 6149 0073 19       		.uleb128 0x19
 6150 0074 01       		.uleb128 0x1
 6151 0075 13       		.uleb128 0x13
 6152 0076 00       		.byte	0
 6153 0077 00       		.byte	0
 6154 0078 0A       		.uleb128 0xa
 6155 0079 05       		.uleb128 0x5
 6156 007a 00       		.byte	0
 6157 007b 03       		.uleb128 0x3
 6158 007c 0E       		.uleb128 0xe
 6159 007d 3A       		.uleb128 0x3a
 6160 007e 0B       		.uleb128 0xb
 6161 007f 3B       		.uleb128 0x3b
 6162 0080 0B       		.uleb128 0xb
 6163 0081 49       		.uleb128 0x49
 6164 0082 13       		.uleb128 0x13
 6165 0083 02       		.uleb128 0x2
 6166 0084 18       		.uleb128 0x18
 6167 0085 00       		.byte	0
 6168 0086 00       		.byte	0
 6169 0087 0B       		.uleb128 0xb
 6170 0088 34       		.uleb128 0x34
 6171 0089 00       		.byte	0
 6172 008a 03       		.uleb128 0x3
 6173 008b 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 139


 6174 008c 3A       		.uleb128 0x3a
 6175 008d 0B       		.uleb128 0xb
 6176 008e 3B       		.uleb128 0x3b
 6177 008f 0B       		.uleb128 0xb
 6178 0090 49       		.uleb128 0x49
 6179 0091 13       		.uleb128 0x13
 6180 0092 02       		.uleb128 0x2
 6181 0093 18       		.uleb128 0x18
 6182 0094 00       		.byte	0
 6183 0095 00       		.byte	0
 6184 0096 0C       		.uleb128 0xc
 6185 0097 01       		.uleb128 0x1
 6186 0098 01       		.byte	0x1
 6187 0099 49       		.uleb128 0x49
 6188 009a 13       		.uleb128 0x13
 6189 009b 01       		.uleb128 0x1
 6190 009c 13       		.uleb128 0x13
 6191 009d 00       		.byte	0
 6192 009e 00       		.byte	0
 6193 009f 0D       		.uleb128 0xd
 6194 00a0 21       		.uleb128 0x21
 6195 00a1 00       		.byte	0
 6196 00a2 49       		.uleb128 0x49
 6197 00a3 13       		.uleb128 0x13
 6198 00a4 2F       		.uleb128 0x2f
 6199 00a5 0B       		.uleb128 0xb
 6200 00a6 00       		.byte	0
 6201 00a7 00       		.byte	0
 6202 00a8 0E       		.uleb128 0xe
 6203 00a9 2E       		.uleb128 0x2e
 6204 00aa 01       		.byte	0x1
 6205 00ab 3F       		.uleb128 0x3f
 6206 00ac 19       		.uleb128 0x19
 6207 00ad 03       		.uleb128 0x3
 6208 00ae 0E       		.uleb128 0xe
 6209 00af 3A       		.uleb128 0x3a
 6210 00b0 0B       		.uleb128 0xb
 6211 00b1 3B       		.uleb128 0x3b
 6212 00b2 0B       		.uleb128 0xb
 6213 00b3 27       		.uleb128 0x27
 6214 00b4 19       		.uleb128 0x19
 6215 00b5 49       		.uleb128 0x49
 6216 00b6 13       		.uleb128 0x13
 6217 00b7 11       		.uleb128 0x11
 6218 00b8 01       		.uleb128 0x1
 6219 00b9 12       		.uleb128 0x12
 6220 00ba 06       		.uleb128 0x6
 6221 00bb 40       		.uleb128 0x40
 6222 00bc 18       		.uleb128 0x18
 6223 00bd 9642     		.uleb128 0x2116
 6224 00bf 19       		.uleb128 0x19
 6225 00c0 01       		.uleb128 0x1
 6226 00c1 13       		.uleb128 0x13
 6227 00c2 00       		.byte	0
 6228 00c3 00       		.byte	0
 6229 00c4 0F       		.uleb128 0xf
 6230 00c5 34       		.uleb128 0x34
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 140


 6231 00c6 00       		.byte	0
 6232 00c7 03       		.uleb128 0x3
 6233 00c8 08       		.uleb128 0x8
 6234 00c9 3A       		.uleb128 0x3a
 6235 00ca 0B       		.uleb128 0xb
 6236 00cb 3B       		.uleb128 0x3b
 6237 00cc 0B       		.uleb128 0xb
 6238 00cd 49       		.uleb128 0x49
 6239 00ce 13       		.uleb128 0x13
 6240 00cf 02       		.uleb128 0x2
 6241 00d0 18       		.uleb128 0x18
 6242 00d1 00       		.byte	0
 6243 00d2 00       		.byte	0
 6244 00d3 10       		.uleb128 0x10
 6245 00d4 2E       		.uleb128 0x2e
 6246 00d5 01       		.byte	0x1
 6247 00d6 3F       		.uleb128 0x3f
 6248 00d7 19       		.uleb128 0x19
 6249 00d8 03       		.uleb128 0x3
 6250 00d9 0E       		.uleb128 0xe
 6251 00da 3A       		.uleb128 0x3a
 6252 00db 0B       		.uleb128 0xb
 6253 00dc 3B       		.uleb128 0x3b
 6254 00dd 0B       		.uleb128 0xb
 6255 00de 27       		.uleb128 0x27
 6256 00df 19       		.uleb128 0x19
 6257 00e0 11       		.uleb128 0x11
 6258 00e1 01       		.uleb128 0x1
 6259 00e2 12       		.uleb128 0x12
 6260 00e3 06       		.uleb128 0x6
 6261 00e4 40       		.uleb128 0x40
 6262 00e5 18       		.uleb128 0x18
 6263 00e6 9742     		.uleb128 0x2117
 6264 00e8 19       		.uleb128 0x19
 6265 00e9 01       		.uleb128 0x1
 6266 00ea 13       		.uleb128 0x13
 6267 00eb 00       		.byte	0
 6268 00ec 00       		.byte	0
 6269 00ed 11       		.uleb128 0x11
 6270 00ee 2E       		.uleb128 0x2e
 6271 00ef 01       		.byte	0x1
 6272 00f0 3F       		.uleb128 0x3f
 6273 00f1 19       		.uleb128 0x19
 6274 00f2 03       		.uleb128 0x3
 6275 00f3 0E       		.uleb128 0xe
 6276 00f4 3A       		.uleb128 0x3a
 6277 00f5 0B       		.uleb128 0xb
 6278 00f6 3B       		.uleb128 0x3b
 6279 00f7 05       		.uleb128 0x5
 6280 00f8 27       		.uleb128 0x27
 6281 00f9 19       		.uleb128 0x19
 6282 00fa 49       		.uleb128 0x49
 6283 00fb 13       		.uleb128 0x13
 6284 00fc 11       		.uleb128 0x11
 6285 00fd 01       		.uleb128 0x1
 6286 00fe 12       		.uleb128 0x12
 6287 00ff 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 141


 6288 0100 40       		.uleb128 0x40
 6289 0101 18       		.uleb128 0x18
 6290 0102 9742     		.uleb128 0x2117
 6291 0104 19       		.uleb128 0x19
 6292 0105 01       		.uleb128 0x1
 6293 0106 13       		.uleb128 0x13
 6294 0107 00       		.byte	0
 6295 0108 00       		.byte	0
 6296 0109 12       		.uleb128 0x12
 6297 010a 05       		.uleb128 0x5
 6298 010b 00       		.byte	0
 6299 010c 03       		.uleb128 0x3
 6300 010d 0E       		.uleb128 0xe
 6301 010e 3A       		.uleb128 0x3a
 6302 010f 0B       		.uleb128 0xb
 6303 0110 3B       		.uleb128 0x3b
 6304 0111 05       		.uleb128 0x5
 6305 0112 49       		.uleb128 0x49
 6306 0113 13       		.uleb128 0x13
 6307 0114 02       		.uleb128 0x2
 6308 0115 18       		.uleb128 0x18
 6309 0116 00       		.byte	0
 6310 0117 00       		.byte	0
 6311 0118 13       		.uleb128 0x13
 6312 0119 34       		.uleb128 0x34
 6313 011a 00       		.byte	0
 6314 011b 03       		.uleb128 0x3
 6315 011c 0E       		.uleb128 0xe
 6316 011d 3A       		.uleb128 0x3a
 6317 011e 0B       		.uleb128 0xb
 6318 011f 3B       		.uleb128 0x3b
 6319 0120 05       		.uleb128 0x5
 6320 0121 49       		.uleb128 0x49
 6321 0122 13       		.uleb128 0x13
 6322 0123 02       		.uleb128 0x2
 6323 0124 18       		.uleb128 0x18
 6324 0125 00       		.byte	0
 6325 0126 00       		.byte	0
 6326 0127 14       		.uleb128 0x14
 6327 0128 2E       		.uleb128 0x2e
 6328 0129 01       		.byte	0x1
 6329 012a 3F       		.uleb128 0x3f
 6330 012b 19       		.uleb128 0x19
 6331 012c 03       		.uleb128 0x3
 6332 012d 0E       		.uleb128 0xe
 6333 012e 3A       		.uleb128 0x3a
 6334 012f 0B       		.uleb128 0xb
 6335 0130 3B       		.uleb128 0x3b
 6336 0131 05       		.uleb128 0x5
 6337 0132 27       		.uleb128 0x27
 6338 0133 19       		.uleb128 0x19
 6339 0134 49       		.uleb128 0x49
 6340 0135 13       		.uleb128 0x13
 6341 0136 11       		.uleb128 0x11
 6342 0137 01       		.uleb128 0x1
 6343 0138 12       		.uleb128 0x12
 6344 0139 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 142


 6345 013a 40       		.uleb128 0x40
 6346 013b 18       		.uleb128 0x18
 6347 013c 9642     		.uleb128 0x2116
 6348 013e 19       		.uleb128 0x19
 6349 013f 01       		.uleb128 0x1
 6350 0140 13       		.uleb128 0x13
 6351 0141 00       		.byte	0
 6352 0142 00       		.byte	0
 6353 0143 15       		.uleb128 0x15
 6354 0144 2E       		.uleb128 0x2e
 6355 0145 00       		.byte	0
 6356 0146 3F       		.uleb128 0x3f
 6357 0147 19       		.uleb128 0x19
 6358 0148 03       		.uleb128 0x3
 6359 0149 0E       		.uleb128 0xe
 6360 014a 3A       		.uleb128 0x3a
 6361 014b 0B       		.uleb128 0xb
 6362 014c 3B       		.uleb128 0x3b
 6363 014d 05       		.uleb128 0x5
 6364 014e 11       		.uleb128 0x11
 6365 014f 01       		.uleb128 0x1
 6366 0150 12       		.uleb128 0x12
 6367 0151 06       		.uleb128 0x6
 6368 0152 40       		.uleb128 0x40
 6369 0153 18       		.uleb128 0x18
 6370 0154 9642     		.uleb128 0x2116
 6371 0156 19       		.uleb128 0x19
 6372 0157 00       		.byte	0
 6373 0158 00       		.byte	0
 6374 0159 16       		.uleb128 0x16
 6375 015a 2E       		.uleb128 0x2e
 6376 015b 01       		.byte	0x1
 6377 015c 3F       		.uleb128 0x3f
 6378 015d 19       		.uleb128 0x19
 6379 015e 03       		.uleb128 0x3
 6380 015f 0E       		.uleb128 0xe
 6381 0160 3A       		.uleb128 0x3a
 6382 0161 0B       		.uleb128 0xb
 6383 0162 3B       		.uleb128 0x3b
 6384 0163 05       		.uleb128 0x5
 6385 0164 11       		.uleb128 0x11
 6386 0165 01       		.uleb128 0x1
 6387 0166 12       		.uleb128 0x12
 6388 0167 06       		.uleb128 0x6
 6389 0168 40       		.uleb128 0x40
 6390 0169 18       		.uleb128 0x18
 6391 016a 9642     		.uleb128 0x2116
 6392 016c 19       		.uleb128 0x19
 6393 016d 01       		.uleb128 0x1
 6394 016e 13       		.uleb128 0x13
 6395 016f 00       		.byte	0
 6396 0170 00       		.byte	0
 6397 0171 17       		.uleb128 0x17
 6398 0172 34       		.uleb128 0x34
 6399 0173 00       		.byte	0
 6400 0174 03       		.uleb128 0x3
 6401 0175 08       		.uleb128 0x8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 143


 6402 0176 3A       		.uleb128 0x3a
 6403 0177 0B       		.uleb128 0xb
 6404 0178 3B       		.uleb128 0x3b
 6405 0179 05       		.uleb128 0x5
 6406 017a 49       		.uleb128 0x49
 6407 017b 13       		.uleb128 0x13
 6408 017c 00       		.byte	0
 6409 017d 00       		.byte	0
 6410 017e 18       		.uleb128 0x18
 6411 017f 0B       		.uleb128 0xb
 6412 0180 01       		.byte	0x1
 6413 0181 11       		.uleb128 0x11
 6414 0182 01       		.uleb128 0x1
 6415 0183 12       		.uleb128 0x12
 6416 0184 06       		.uleb128 0x6
 6417 0185 00       		.byte	0
 6418 0186 00       		.byte	0
 6419 0187 19       		.uleb128 0x19
 6420 0188 34       		.uleb128 0x34
 6421 0189 00       		.byte	0
 6422 018a 03       		.uleb128 0x3
 6423 018b 08       		.uleb128 0x8
 6424 018c 3A       		.uleb128 0x3a
 6425 018d 0B       		.uleb128 0xb
 6426 018e 3B       		.uleb128 0x3b
 6427 018f 05       		.uleb128 0x5
 6428 0190 49       		.uleb128 0x49
 6429 0191 13       		.uleb128 0x13
 6430 0192 02       		.uleb128 0x2
 6431 0193 18       		.uleb128 0x18
 6432 0194 00       		.byte	0
 6433 0195 00       		.byte	0
 6434 0196 1A       		.uleb128 0x1a
 6435 0197 2E       		.uleb128 0x2e
 6436 0198 01       		.byte	0x1
 6437 0199 3F       		.uleb128 0x3f
 6438 019a 19       		.uleb128 0x19
 6439 019b 03       		.uleb128 0x3
 6440 019c 0E       		.uleb128 0xe
 6441 019d 3A       		.uleb128 0x3a
 6442 019e 0B       		.uleb128 0xb
 6443 019f 3B       		.uleb128 0x3b
 6444 01a0 05       		.uleb128 0x5
 6445 01a1 49       		.uleb128 0x49
 6446 01a2 13       		.uleb128 0x13
 6447 01a3 11       		.uleb128 0x11
 6448 01a4 01       		.uleb128 0x1
 6449 01a5 12       		.uleb128 0x12
 6450 01a6 06       		.uleb128 0x6
 6451 01a7 40       		.uleb128 0x40
 6452 01a8 18       		.uleb128 0x18
 6453 01a9 9642     		.uleb128 0x2116
 6454 01ab 19       		.uleb128 0x19
 6455 01ac 01       		.uleb128 0x1
 6456 01ad 13       		.uleb128 0x13
 6457 01ae 00       		.byte	0
 6458 01af 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 144


 6459 01b0 1B       		.uleb128 0x1b
 6460 01b1 34       		.uleb128 0x34
 6461 01b2 00       		.byte	0
 6462 01b3 03       		.uleb128 0x3
 6463 01b4 0E       		.uleb128 0xe
 6464 01b5 3A       		.uleb128 0x3a
 6465 01b6 0B       		.uleb128 0xb
 6466 01b7 3B       		.uleb128 0x3b
 6467 01b8 0B       		.uleb128 0xb
 6468 01b9 49       		.uleb128 0x49
 6469 01ba 13       		.uleb128 0x13
 6470 01bb 3F       		.uleb128 0x3f
 6471 01bc 19       		.uleb128 0x19
 6472 01bd 02       		.uleb128 0x2
 6473 01be 18       		.uleb128 0x18
 6474 01bf 00       		.byte	0
 6475 01c0 00       		.byte	0
 6476 01c1 1C       		.uleb128 0x1c
 6477 01c2 34       		.uleb128 0x34
 6478 01c3 00       		.byte	0
 6479 01c4 03       		.uleb128 0x3
 6480 01c5 0E       		.uleb128 0xe
 6481 01c6 3A       		.uleb128 0x3a
 6482 01c7 0B       		.uleb128 0xb
 6483 01c8 3B       		.uleb128 0x3b
 6484 01c9 05       		.uleb128 0x5
 6485 01ca 49       		.uleb128 0x49
 6486 01cb 13       		.uleb128 0x13
 6487 01cc 3F       		.uleb128 0x3f
 6488 01cd 19       		.uleb128 0x19
 6489 01ce 02       		.uleb128 0x2
 6490 01cf 18       		.uleb128 0x18
 6491 01d0 00       		.byte	0
 6492 01d1 00       		.byte	0
 6493 01d2 00       		.byte	0
 6494              		.section	.debug_aranges,"",%progbits
 6495 0000 F4000000 		.4byte	0xf4
 6496 0004 0200     		.2byte	0x2
 6497 0006 00000000 		.4byte	.Ldebug_info0
 6498 000a 04       		.byte	0x4
 6499 000b 00       		.byte	0
 6500 000c 0000     		.2byte	0
 6501 000e 0000     		.2byte	0
 6502 0010 00000000 		.4byte	.LFB34
 6503 0014 98000000 		.4byte	.LFE34-.LFB34
 6504 0018 00000000 		.4byte	.LFB35
 6505 001c 98000000 		.4byte	.LFE35-.LFB35
 6506 0020 00000000 		.4byte	.LFB36
 6507 0024 98000000 		.4byte	.LFE36-.LFB36
 6508 0028 00000000 		.4byte	.LFB37
 6509 002c 28000000 		.4byte	.LFE37-.LFB37
 6510 0030 00000000 		.4byte	.LFB38
 6511 0034 84010000 		.4byte	.LFE38-.LFB38
 6512 0038 00000000 		.4byte	.LFB39
 6513 003c 84010000 		.4byte	.LFE39-.LFB39
 6514 0040 00000000 		.4byte	.LFB40
 6515 0044 78000000 		.4byte	.LFE40-.LFB40
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 145


 6516 0048 00000000 		.4byte	.LFB41
 6517 004c 38000000 		.4byte	.LFE41-.LFB41
 6518 0050 00000000 		.4byte	.LFB42
 6519 0054 EE000000 		.4byte	.LFE42-.LFB42
 6520 0058 00000000 		.4byte	.LFB43
 6521 005c B4010000 		.4byte	.LFE43-.LFB43
 6522 0060 00000000 		.4byte	.LFB44
 6523 0064 EC000000 		.4byte	.LFE44-.LFB44
 6524 0068 00000000 		.4byte	.LFB45
 6525 006c 9C000000 		.4byte	.LFE45-.LFB45
 6526 0070 00000000 		.4byte	.LFB46
 6527 0074 90000000 		.4byte	.LFE46-.LFB46
 6528 0078 00000000 		.4byte	.LFB47
 6529 007c 84000000 		.4byte	.LFE47-.LFB47
 6530 0080 00000000 		.4byte	.LFB48
 6531 0084 78000000 		.4byte	.LFE48-.LFB48
 6532 0088 00000000 		.4byte	.LFB49
 6533 008c 72000000 		.4byte	.LFE49-.LFB49
 6534 0090 00000000 		.4byte	.LFB50
 6535 0094 28000000 		.4byte	.LFE50-.LFB50
 6536 0098 00000000 		.4byte	.LFB51
 6537 009c 8C010000 		.4byte	.LFE51-.LFB51
 6538 00a0 00000000 		.4byte	.LFB52
 6539 00a4 18000000 		.4byte	.LFE52-.LFB52
 6540 00a8 00000000 		.4byte	.LFB53
 6541 00ac FC000000 		.4byte	.LFE53-.LFB53
 6542 00b0 00000000 		.4byte	.LFB54
 6543 00b4 F8000000 		.4byte	.LFE54-.LFB54
 6544 00b8 00000000 		.4byte	.LFB55
 6545 00bc 08010000 		.4byte	.LFE55-.LFB55
 6546 00c0 00000000 		.4byte	.LFB56
 6547 00c4 08010000 		.4byte	.LFE56-.LFB56
 6548 00c8 00000000 		.4byte	.LFB57
 6549 00cc 30010000 		.4byte	.LFE57-.LFB57
 6550 00d0 00000000 		.4byte	.LFB58
 6551 00d4 FC000000 		.4byte	.LFE58-.LFB58
 6552 00d8 00000000 		.4byte	.LFB59
 6553 00dc 14010000 		.4byte	.LFE59-.LFB59
 6554 00e0 00000000 		.4byte	.LFB60
 6555 00e4 14010000 		.4byte	.LFE60-.LFB60
 6556 00e8 00000000 		.4byte	.LFB61
 6557 00ec 00010000 		.4byte	.LFE61-.LFB61
 6558 00f0 00000000 		.4byte	0
 6559 00f4 00000000 		.4byte	0
 6560              		.section	.debug_ranges,"",%progbits
 6561              	.Ldebug_ranges0:
 6562 0000 00000000 		.4byte	.LFB34
 6563 0004 98000000 		.4byte	.LFE34
 6564 0008 00000000 		.4byte	.LFB35
 6565 000c 98000000 		.4byte	.LFE35
 6566 0010 00000000 		.4byte	.LFB36
 6567 0014 98000000 		.4byte	.LFE36
 6568 0018 00000000 		.4byte	.LFB37
 6569 001c 28000000 		.4byte	.LFE37
 6570 0020 00000000 		.4byte	.LFB38
 6571 0024 84010000 		.4byte	.LFE38
 6572 0028 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 146


 6573 002c 84010000 		.4byte	.LFE39
 6574 0030 00000000 		.4byte	.LFB40
 6575 0034 78000000 		.4byte	.LFE40
 6576 0038 00000000 		.4byte	.LFB41
 6577 003c 38000000 		.4byte	.LFE41
 6578 0040 00000000 		.4byte	.LFB42
 6579 0044 EE000000 		.4byte	.LFE42
 6580 0048 00000000 		.4byte	.LFB43
 6581 004c B4010000 		.4byte	.LFE43
 6582 0050 00000000 		.4byte	.LFB44
 6583 0054 EC000000 		.4byte	.LFE44
 6584 0058 00000000 		.4byte	.LFB45
 6585 005c 9C000000 		.4byte	.LFE45
 6586 0060 00000000 		.4byte	.LFB46
 6587 0064 90000000 		.4byte	.LFE46
 6588 0068 00000000 		.4byte	.LFB47
 6589 006c 84000000 		.4byte	.LFE47
 6590 0070 00000000 		.4byte	.LFB48
 6591 0074 78000000 		.4byte	.LFE48
 6592 0078 00000000 		.4byte	.LFB49
 6593 007c 72000000 		.4byte	.LFE49
 6594 0080 00000000 		.4byte	.LFB50
 6595 0084 28000000 		.4byte	.LFE50
 6596 0088 00000000 		.4byte	.LFB51
 6597 008c 8C010000 		.4byte	.LFE51
 6598 0090 00000000 		.4byte	.LFB52
 6599 0094 18000000 		.4byte	.LFE52
 6600 0098 00000000 		.4byte	.LFB53
 6601 009c FC000000 		.4byte	.LFE53
 6602 00a0 00000000 		.4byte	.LFB54
 6603 00a4 F8000000 		.4byte	.LFE54
 6604 00a8 00000000 		.4byte	.LFB55
 6605 00ac 08010000 		.4byte	.LFE55
 6606 00b0 00000000 		.4byte	.LFB56
 6607 00b4 08010000 		.4byte	.LFE56
 6608 00b8 00000000 		.4byte	.LFB57
 6609 00bc 30010000 		.4byte	.LFE57
 6610 00c0 00000000 		.4byte	.LFB58
 6611 00c4 FC000000 		.4byte	.LFE58
 6612 00c8 00000000 		.4byte	.LFB59
 6613 00cc 14010000 		.4byte	.LFE59
 6614 00d0 00000000 		.4byte	.LFB60
 6615 00d4 14010000 		.4byte	.LFE60
 6616 00d8 00000000 		.4byte	.LFB61
 6617 00dc 00010000 		.4byte	.LFE61
 6618 00e0 00000000 		.4byte	0
 6619 00e4 00000000 		.4byte	0
 6620              		.section	.debug_line,"",%progbits
 6621              	.Ldebug_line0:
 6622 0000 E3060000 		.section	.debug_str,"MS",%progbits,1
 6622      02006001 
 6622      00000201 
 6622      FB0E0D00 
 6622      01010101 
 6623              	.LASF118:
 6624 0000 62617365 		.ascii	"baseAzimuth\000"
 6624      417A696D 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 147


 6624      75746800 
 6625              	.LASF28:
 6626 000c 74696C74 		.ascii	"tilt_init\000"
 6626      5F696E69 
 6626      7400
 6627              	.LASF36:
 6628 0016 726F7461 		.ascii	"rotate_feedback\000"
 6628      74655F66 
 6628      65656462 
 6628      61636B00 
 6629              	.LASF82:
 6630 0026 6E756D5F 		.ascii	"num_items\000"
 6630      6974656D 
 6630      7300
 6631              	.LASF140:
 6632 0030 74657374 		.ascii	"test_array\000"
 6632      5F617272 
 6632      617900
 6633              	.LASF61:
 6634 003b 6172645F 		.ascii	"ard_read\000"
 6634      72656164 
 6634      00
 6635              	.LASF156:
 6636 0044 656C6277 		.ascii	"elbw_errors\000"
 6636      5F657272 
 6636      6F727300 
 6637              	.LASF163:
 6638 0050 6C617465 		.ascii	"latest_WR_command\000"
 6638      73745F57 
 6638      525F636F 
 6638      6D6D616E 
 6638      6400
 6639              	.LASF50:
 6640 0062 42415F65 		.ascii	"BA_execute\000"
 6640      78656375 
 6640      746500
 6641              	.LASF37:
 6642 006d 656C626F 		.ascii	"elbow_states\000"
 6642      775F7374 
 6642      61746573 
 6642      00
 6643              	.LASF122:
 6644 007a 76696465 		.ascii	"video_mux\000"
 6644      6F5F6D75 
 6644      7800
 6645              	.LASF120:
 6646 0084 65666665 		.ascii	"effector\000"
 6646      63746F72 
 6646      00
 6647              	.LASF8:
 6648 008d 756E7369 		.ascii	"unsigned int\000"
 6648      676E6564 
 6648      20696E74 
 6648      00
 6649              	.LASF119:
 6650 009a 6E657765 		.ascii	"newest_command\000"
 6650      73745F63 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 148


 6650      6F6D6D61 
 6650      6E6400
 6651              	.LASF47:
 6652 00a9 62617365 		.ascii	"baseAzimuth_states\000"
 6652      417A696D 
 6652      7574685F 
 6652      73746174 
 6652      657300
 6653              	.LASF15:
 6654 00bc 696E7431 		.ascii	"int16\000"
 6654      3600
 6655              	.LASF79:
 6656 00c2 43616C69 		.ascii	"CalibrationElbow\000"
 6656      62726174 
 6656      696F6E45 
 6656      6C626F77 
 6656      00
 6657              	.LASF153:
 6658 00d3 64726F70 		.ascii	"dropped_packets\000"
 6658      7065645F 
 6658      7061636B 
 6658      65747300 
 6659              	.LASF48:
 6660 00e3 42415F73 		.ascii	"BA_start\000"
 6660      74617274 
 6660      00
 6661              	.LASF83:
 6662 00ec 6D61696E 		.ascii	"maintain_array\000"
 6662      7461696E 
 6662      5F617272 
 6662      617900
 6663              	.LASF169:
 6664 00fb 73686F75 		.ascii	"shoulder_state\000"
 6664      6C646572 
 6664      5F737461 
 6664      746500
 6665              	.LASF32:
 6666 010a 726F7461 		.ascii	"rotate_start\000"
 6666      74655F73 
 6666      74617274 
 6666      00
 6667              	.LASF70:
 6668 0117 73706565 		.ascii	"speed\000"
 6668      6400
 6669              	.LASF121:
 6670 011d 61726475 		.ascii	"arduino\000"
 6670      696E6F00 
 6671              	.LASF62:
 6672 0125 6172645F 		.ascii	"ard_write\000"
 6672      77726974 
 6672      6500
 6673              	.LASF27:
 6674 012f 74696C74 		.ascii	"tilt_start\000"
 6674      5F737461 
 6674      727400
 6675              	.LASF88:
 6676 013a 73697A65 		.ascii	"size\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 149


 6676      00
 6677              	.LASF154:
 6678 013f 6661696C 		.ascii	"fail_safe_errors\000"
 6678      5F736166 
 6678      655F6572 
 6678      726F7273 
 6678      00
 6679              	.LASF91:
 6680 0150 706F735F 		.ascii	"pos_to_vel\000"
 6680      746F5F76 
 6680      656C00
 6681              	.LASF168:
 6682 015b 656C626F 		.ascii	"elbow_state\000"
 6682      775F7374 
 6682      61746500 
 6683              	.LASF16:
 6684 0167 666C6F61 		.ascii	"float\000"
 6684      7400
 6685              	.LASF49:
 6686 016d 42415F69 		.ascii	"BA_init\000"
 6686      6E697400 
 6687              	.LASF137:
 6688 0175 68656172 		.ascii	"heartbeat_array\000"
 6688      74626561 
 6688      745F6172 
 6688      72617900 
 6689              	.LASF172:
 6690 0185 61726475 		.ascii	"arduino_state\000"
 6690      696E6F5F 
 6690      73746174 
 6690      6500
 6691              	.LASF90:
 6692 0193 696E6465 		.ascii	"index\000"
 6692      7800
 6693              	.LASF131:
 6694 0199 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6694      575F4C4F 
 6694      5745525F 
 6694      424F554E 
 6694      4400
 6695              	.LASF7:
 6696 01ab 6C6F6E67 		.ascii	"long long unsigned int\000"
 6696      206C6F6E 
 6696      6720756E 
 6696      7369676E 
 6696      65642069 
 6697              	.LASF65:
 6698 01c2 53657276 		.ascii	"ServoGoalPosition\000"
 6698      6F476F61 
 6698      6C506F73 
 6698      6974696F 
 6698      6E00
 6699              	.LASF161:
 6700 01d4 74696D65 		.ascii	"timerFlag\000"
 6700      72466C61 
 6700      6700
 6701              	.LASF117:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 150


 6702 01de 73686F75 		.ascii	"shoulder\000"
 6702      6C646572 
 6702      00
 6703              	.LASF55:
 6704 01e7 6566665F 		.ascii	"eff_execute\000"
 6704      65786563 
 6704      75746500 
 6705              	.LASF103:
 6706 01f3 62797465 		.ascii	"byte1\000"
 6706      3100
 6707              	.LASF104:
 6708 01f9 62797465 		.ascii	"byte2\000"
 6708      3200
 6709              	.LASF23:
 6710 01ff 73656E64 		.ascii	"send_heartbeat\000"
 6710      5F686561 
 6710      72746265 
 6710      617400
 6711              	.LASF160:
 6712 020e 6566665F 		.ascii	"eff_errors\000"
 6712      6572726F 
 6712      727300
 6713              	.LASF105:
 6714 0219 74656D70 		.ascii	"temp1\000"
 6714      3100
 6715              	.LASF106:
 6716 021f 74656D70 		.ascii	"temp2\000"
 6716      3200
 6717              	.LASF107:
 6718 0225 74656D70 		.ascii	"temp3\000"
 6718      3300
 6719              	.LASF126:
 6720 022b 696E6974 		.ascii	"initialize\000"
 6720      69616C69 
 6720      7A6500
 6721              	.LASF116:
 6722 0236 656C626F 		.ascii	"elbow\000"
 6722      7700
 6723              	.LASF53:
 6724 023c 6566665F 		.ascii	"eff_start\000"
 6724      73746172 
 6724      7400
 6725              	.LASF157:
 6726 0246 42415F65 		.ascii	"BA_errors\000"
 6726      72726F72 
 6726      7300
 6727              	.LASF141:
 6728 0250 57545F66 		.ascii	"WT_feedback_flag\000"
 6728      65656462 
 6728      61636B5F 
 6728      666C6167 
 6728      00
 6729              	.LASF80:
 6730 0261 43616C69 		.ascii	"CalibrationShoulder\000"
 6730      62726174 
 6730      696F6E53 
 6730      686F756C 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 151


 6730      64657200 
 6731              	.LASF57:
 6732 0275 61726475 		.ascii	"arduino_states\000"
 6732      696E6F5F 
 6732      73746174 
 6732      657300
 6733              	.LASF128:
 6734 0284 66735F63 		.ascii	"fs_count\000"
 6734      6F756E74 
 6734      00
 6735              	.LASF85:
 6736 028d 53495A45 		.ascii	"SIZE\000"
 6736      00
 6737              	.LASF46:
 6738 0292 73686C64 		.ascii	"shldr_wait\000"
 6738      725F7761 
 6738      697400
 6739              	.LASF99:
 6740 029d 57545F70 		.ascii	"WT_pos_to_vel\000"
 6740      6F735F74 
 6740      6F5F7665 
 6740      6C00
 6741              	.LASF135:
 6742 02ab 64617461 		.ascii	"data_array\000"
 6742      5F617272 
 6742      617900
 6743              	.LASF92:
 6744 02b6 6375725F 		.ascii	"cur_pos\000"
 6744      706F7300 
 6745              	.LASF145:
 6746 02be 57525F46 		.ascii	"WR_FLAG\000"
 6746      4C414700 
 6747              	.LASF109:
 6748 02c6 6D616B65 		.ascii	"make_wristTilt_command\000"
 6748      5F777269 
 6748      73745469 
 6748      6C745F63 
 6748      6F6D6D61 
 6749              	.LASF18:
 6750 02dd 63686172 		.ascii	"char\000"
 6750      00
 6751              	.LASF97:
 6752 02e2 72656365 		.ascii	"recent_command\000"
 6752      6E745F63 
 6752      6F6D6D61 
 6752      6E6400
 6753              	.LASF12:
 6754 02f1 75696E74 		.ascii	"uint16\000"
 6754      313600
 6755              	.LASF67:
 6756 02f8 746F7271 		.ascii	"torque\000"
 6756      756500
 6757              	.LASF14:
 6758 02ff 696E7438 		.ascii	"int8\000"
 6758      00
 6759              	.LASF111:
 6760 0304 66656564 		.ascii	"feedback\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 152


 6760      6261636B 
 6760      00
 6761              	.LASF96:
 6762 030d 6E65775F 		.ascii	"new_command\000"
 6762      636F6D6D 
 6762      616E6400 
 6763              	.LASF152:
 6764 0319 54696D65 		.ascii	"Time_count\000"
 6764      5F636F75 
 6764      6E7400
 6765              	.LASF74:
 6766 0324 4359434C 		.ascii	"CYCLES\000"
 6766      455300
 6767              	.LASF58:
 6768 032b 6172645F 		.ascii	"ard_start\000"
 6768      73746172 
 6768      7400
 6769              	.LASF10:
 6770 0335 75696E74 		.ascii	"uint8_t\000"
 6770      385F7400 
 6771              	.LASF87:
 6772 033d 6172725F 		.ascii	"arr_pos\000"
 6772      706F7300 
 6773              	.LASF44:
 6774 0345 73686C64 		.ascii	"shldr_init\000"
 6774      725F696E 
 6774      697400
 6775              	.LASF136:
 6776 0350 66656564 		.ascii	"feedback_array\000"
 6776      6261636B 
 6776      5F617272 
 6776      617900
 6777              	.LASF142:
 6778 035f 57525F66 		.ascii	"WR_feedback_flag\000"
 6778      65656462 
 6778      61636B5F 
 6778      666C6167 
 6778      00
 6779              	.LASF6:
 6780 0370 6C6F6E67 		.ascii	"long long int\000"
 6780      206C6F6E 
 6780      6720696E 
 6780      7400
 6781              	.LASF42:
 6782 037e 73686F75 		.ascii	"shoulder_states\000"
 6782      6C646572 
 6782      5F737461 
 6782      74657300 
 6783              	.LASF95:
 6784 038e 73696D70 		.ascii	"simple_pos_to_vel\000"
 6784      6C655F70 
 6784      6F735F74 
 6784      6F5F7665 
 6784      6C00
 6785              	.LASF84:
 6786 03a0 63706F73 		.ascii	"cpos\000"
 6786      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 153


 6787              	.LASF134:
 6788 03a5 4E455554 		.ascii	"NEUTRAL\000"
 6788      52414C00 
 6789              	.LASF124:
 6790 03ad 7061636B 		.ascii	"pack_for_rover\000"
 6790      5F666F72 
 6790      5F726F76 
 6790      657200
 6791              	.LASF31:
 6792 03bc 77726973 		.ascii	"wristRotate_states\000"
 6792      74526F74 
 6792      6174655F 
 6792      73746174 
 6792      657300
 6793              	.LASF149:
 6794 03cf 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6794      43544F52 
 6794      5F464C41 
 6794      4700
 6795              	.LASF132:
 6796 03dd 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6796      4C444552 
 6796      5F555050 
 6796      45525F42 
 6796      4F554E44 
 6797              	.LASF52:
 6798 03f2 65666665 		.ascii	"effector_states\000"
 6798      63746F72 
 6798      5F737461 
 6798      74657300 
 6799              	.LASF20:
 6800 0402 73656E64 		.ascii	"send_start\000"
 6800      5F737461 
 6800      727400
 6801              	.LASF171:
 6802 040d 65666665 		.ascii	"effector_state\000"
 6802      63746F72 
 6802      5F737461 
 6802      746500
 6803              	.LASF75:
 6804 041c 626F756E 		.ascii	"bound\000"
 6804      6400
 6805              	.LASF158:
 6806 0422 57545F65 		.ascii	"WT_errors\000"
 6806      72726F72 
 6806      7300
 6807              	.LASF13:
 6808 042c 75696E74 		.ascii	"uint32\000"
 6808      333200
 6809              	.LASF144:
 6810 0433 57545F46 		.ascii	"WT_FLAG\000"
 6810      4C414700 
 6811              	.LASF24:
 6812 043b 73656E64 		.ascii	"send_wait\000"
 6812      5F776169 
 6812      7400
 6813              	.LASF101:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 154


 6814 0445 6D616B65 		.ascii	"make_command\000"
 6814      5F636F6D 
 6814      6D616E64 
 6814      00
 6815              	.LASF114:
 6816 0452 77726973 		.ascii	"wristTilt\000"
 6816      7454696C 
 6816      7400
 6817              	.LASF147:
 6818 045c 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6818      4C444552 
 6818      5F464C41 
 6818      4700
 6819              	.LASF38:
 6820 046a 656C6277 		.ascii	"elbw_start\000"
 6820      5F737461 
 6820      727400
 6821              	.LASF164:
 6822 0475 6C617465 		.ascii	"latest_WT_command\000"
 6822      73745F57 
 6822      545F636F 
 6822      6D6D616E 
 6822      6400
 6823              	.LASF166:
 6824 0487 77726973 		.ascii	"wristTilt_state\000"
 6824      7454696C 
 6824      745F7374 
 6824      61746500 
 6825              	.LASF68:
 6826 0497 61727261 		.ascii	"array\000"
 6826      7900
 6827              	.LASF123:
 6828 049d 6C617365 		.ascii	"laser\000"
 6828      7200
 6829              	.LASF151:
 6830 04a3 54696D65 		.ascii	"Time_Out_flag\000"
 6830      5F4F7574 
 6830      5F666C61 
 6830      6700
 6831              	.LASF112:
 6832 04b1 73656E64 		.ascii	"send_packet\000"
 6832      5F706163 
 6832      6B657400 
 6833              	.LASF89:
 6834 04bd 6368616E 		.ascii	"change\000"
 6834      676500
 6835              	.LASF138:
 6836 04c4 48454152 		.ascii	"HEARTBEAT_FLAG\000"
 6836      54424541 
 6836      545F464C 
 6836      414700
 6837              	.LASF77:
 6838 04d3 6368616E 		.ascii	"channel\000"
 6838      6E656C00 
 6839              	.LASF125:
 6840 04db 4152445F 		.ascii	"ARD_ARRAY_SIZE\000"
 6840      41525241 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 155


 6840      595F5349 
 6840      5A4500
 6841              	.LASF110:
 6842 04ea 706F7446 		.ascii	"potFeedback\000"
 6842      65656462 
 6842      61636B00 
 6843              	.LASF93:
 6844 04f6 41525241 		.ascii	"ARRAY_SIZE\000"
 6844      595F5349 
 6844      5A4500
 6845              	.LASF34:
 6846 0501 726F7461 		.ascii	"rotate_control\000"
 6846      74655F63 
 6846      6F6E7472 
 6846      6F6C00
 6847              	.LASF21:
 6848 0510 73656E64 		.ascii	"send_init\000"
 6848      5F696E69 
 6848      7400
 6849              	.LASF2:
 6850 051a 73686F72 		.ascii	"short int\000"
 6850      7420696E 
 6850      7400
 6851              	.LASF170:
 6852 0524 62617365 		.ascii	"baseAzimuth_state\000"
 6852      417A696D 
 6852      7574685F 
 6852      73746174 
 6852      6500
 6853              	.LASF81:
 6854 0536 61765F61 		.ascii	"av_array\000"
 6854      72726179 
 6854      00
 6855              	.LASF162:
 6856 053f 6C617465 		.ascii	"latest_command\000"
 6856      73745F63 
 6856      6F6D6D61 
 6856      6E6400
 6857              	.LASF4:
 6858 054e 6C6F6E67 		.ascii	"long int\000"
 6858      20696E74 
 6858      00
 6859              	.LASF29:
 6860 0557 74696C74 		.ascii	"tilt_control\000"
 6860      5F636F6E 
 6860      74726F6C 
 6860      00
 6861              	.LASF71:
 6862 0564 74696D65 		.ascii	"timer_isr\000"
 6862      725F6973 
 6862      7200
 6863              	.LASF150:
 6864 056e 4152445F 		.ascii	"ARD_FLAG\000"
 6864      464C4147 
 6864      00
 6865              	.LASF159:
 6866 0577 57525F65 		.ascii	"WR_errors\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 156


 6866      72726F72 
 6866      7300
 6867              	.LASF167:
 6868 0581 77726973 		.ascii	"wristRotate_state\000"
 6868      74526F74 
 6868      6174655F 
 6868      73746174 
 6868      6500
 6869              	.LASF51:
 6870 0593 42415F77 		.ascii	"BA_wait\000"
 6870      61697400 
 6871              	.LASF26:
 6872 059b 77726973 		.ascii	"wristTilt_states\000"
 6872      7454696C 
 6872      745F7374 
 6872      61746573 
 6872      00
 6873              	.LASF98:
 6874 05ac 6375725F 		.ascii	"cur_command\000"
 6874      636F6D6D 
 6874      616E6400 
 6875              	.LASF100:
 6876 05b8 57525F70 		.ascii	"WR_pos_to_vel\000"
 6876      6F735F74 
 6876      6F5F7665 
 6876      6C00
 6877              	.LASF139:
 6878 05c6 77697A6E 		.ascii	"wiznet\000"
 6878      657400
 6879              	.LASF9:
 6880 05cd 5F5F7569 		.ascii	"__uint8_t\000"
 6880      6E74385F 
 6880      7400
 6881              	.LASF86:
 6882 05d7 63686563 		.ascii	"check_update\000"
 6882      6B5F7570 
 6882      64617465 
 6882      00
 6883              	.LASF35:
 6884 05e4 726F7461 		.ascii	"rotate_wait\000"
 6884      74655F77 
 6884      61697400 
 6885              	.LASF69:
 6886 05f0 53657276 		.ascii	"ServoSpeed\000"
 6886      6F537065 
 6886      656400
 6887              	.LASF56:
 6888 05fb 6566665F 		.ascii	"eff_wait\000"
 6888      77616974 
 6888      00
 6889              	.LASF143:
 6890 0604 57525F66 		.ascii	"WR_feedback\000"
 6890      65656462 
 6890      61636B00 
 6891              	.LASF73:
 6892 0610 76656C6F 		.ascii	"velocity\000"
 6892      63697479 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 157


 6892      00
 6893              	.LASF22:
 6894 0619 73656E64 		.ascii	"send_feedback\000"
 6894      5F666565 
 6894      64626163 
 6894      6B00
 6895              	.LASF19:
 6896 0627 73697A65 		.ascii	"sizetype\000"
 6896      74797065 
 6896      00
 6897              	.LASF5:
 6898 0630 6C6F6E67 		.ascii	"long unsigned int\000"
 6898      20756E73 
 6898      69676E65 
 6898      6420696E 
 6898      7400
 6899              	.LASF40:
 6900 0642 656C6277 		.ascii	"elbw_execute\000"
 6900      5F657865 
 6900      63757465 
 6900      00
 6901              	.LASF25:
 6902 064f 73656E64 		.ascii	"send_packet_states\000"
 6902      5F706163 
 6902      6B65745F 
 6902      73746174 
 6902      657300
 6903              	.LASF133:
 6904 0662 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6904      4C444552 
 6904      5F4C4F57 
 6904      45525F42 
 6904      4F554E44 
 6905              	.LASF43:
 6906 0677 73686C64 		.ascii	"shldr_start\000"
 6906      725F7374 
 6906      61727400 
 6907              	.LASF102:
 6908 0683 696E666F 		.ascii	"info_array\000"
 6908      5F617272 
 6908      617900
 6909              	.LASF1:
 6910 068e 756E7369 		.ascii	"unsigned char\000"
 6910      676E6564 
 6910      20636861 
 6910      7200
 6911              	.LASF165:
 6912 069c 73656E64 		.ascii	"send_packet_state\000"
 6912      5F706163 
 6912      6B65745F 
 6912      73746174 
 6912      6500
 6913              	.LASF113:
 6914 06ae 66696C6C 		.ascii	"fill_data_array\000"
 6914      5F646174 
 6914      615F6172 
 6914      72617900 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 158


 6915              	.LASF115:
 6916 06be 77726973 		.ascii	"wristRotate\000"
 6916      74526F74 
 6916      61746500 
 6917              	.LASF108:
 6918 06ca 6D616B65 		.ascii	"make_wristRotate_command\000"
 6918      5F777269 
 6918      7374526F 
 6918      74617465 
 6918      5F636F6D 
 6919              	.LASF54:
 6920 06e3 6566665F 		.ascii	"eff_init\000"
 6920      696E6974 
 6920      00
 6921              	.LASF45:
 6922 06ec 73686C64 		.ascii	"shldr_execute\000"
 6922      725F6578 
 6922      65637574 
 6922      6500
 6923              	.LASF130:
 6924 06fa 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6924      575F5550 
 6924      5045525F 
 6924      424F554E 
 6924      4400
 6925              	.LASF60:
 6926 070c 6172645F 		.ascii	"ard_wait\000"
 6926      77616974 
 6926      00
 6927              	.LASF33:
 6928 0715 726F7461 		.ascii	"rotate_init\000"
 6928      74655F69 
 6928      6E697400 
 6929              	.LASF173:
 6930 0721 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6930      4320342E 
 6930      382E3420 
 6930      32303134 
 6930      30353236 
 6931 0754 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6931      20726576 
 6931      6973696F 
 6931      6E203231 
 6931      31333538 
 6932 0787 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6932      74643D67 
 6932      6E753939 
 6932      202D6666 
 6932      756E6374 
 6933              	.LASF94:
 6934 07a8 636F6D6D 		.ascii	"command\000"
 6934      616E6400 
 6935              	.LASF78:
 6936 07b0 64696666 		.ascii	"difference\000"
 6936      6572656E 
 6936      636500
 6937              	.LASF129:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 159


 6938 07bb 74656D70 		.ascii	"temp_val\000"
 6938      5F76616C 
 6938      00
 6939              	.LASF0:
 6940 07c4 7369676E 		.ascii	"signed char\000"
 6940      65642063 
 6940      68617200 
 6941              	.LASF76:
 6942 07d0 61766572 		.ascii	"average\000"
 6942      61676500 
 6943              	.LASF3:
 6944 07d8 73686F72 		.ascii	"short unsigned int\000"
 6944      7420756E 
 6944      7369676E 
 6944      65642069 
 6944      6E7400
 6945              	.LASF41:
 6946 07eb 656C6277 		.ascii	"elbw_wait\000"
 6946      5F776169 
 6946      7400
 6947              	.LASF127:
 6948 07f5 6D61696E 		.ascii	"main\000"
 6948      00
 6949              	.LASF175:
 6950 07fa 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 6950      73657273 
 6950      5C53616D 
 6950      75656C5C 
 6950      446F6375 
 6951 0827 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 6951      65725F76 
 6951      325C6172 
 6951      6D5F636F 
 6951      6E74726F 
 6952              	.LASF30:
 6953 084b 74696C74 		.ascii	"tilt_wait\000"
 6953      5F776169 
 6953      7400
 6954              	.LASF11:
 6955 0855 75696E74 		.ascii	"uint8\000"
 6955      3800
 6956              	.LASF17:
 6957 085b 646F7562 		.ascii	"double\000"
 6957      6C6500
 6958              	.LASF146:
 6959 0862 454C424F 		.ascii	"ELBOW_FLAG\000"
 6959      575F464C 
 6959      414700
 6960              	.LASF59:
 6961 086d 6172645F 		.ascii	"ard_init\000"
 6961      696E6974 
 6961      00
 6962              	.LASF63:
 6963 0876 73657276 		.ascii	"servoID\000"
 6963      6F494400 
 6964              	.LASF72:
 6965 087e 6973725F 		.ascii	"isr_var\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccNd47Sh.s 			page 160


 6965      76617200 
 6966              	.LASF155:
 6967 0886 73686C64 		.ascii	"shldr_errors\000"
 6967      725F6572 
 6967      726F7273 
 6967      00
 6968              	.LASF66:
 6969 0893 53657453 		.ascii	"SetServoTorque\000"
 6969      6572766F 
 6969      546F7271 
 6969      756500
 6970              	.LASF64:
 6971 08a2 706F7369 		.ascii	"position\000"
 6971      74696F6E 
 6971      00
 6972              	.LASF148:
 6973 08ab 42415F46 		.ascii	"BA_FLAG\000"
 6973      4C414700 
 6974              	.LASF174:
 6975 08b3 2E5C6D61 		.ascii	".\\main.c\000"
 6975      696E2E63 
 6975      00
 6976              	.LASF39:
 6977 08bc 656C6277 		.ascii	"elbw_init\000"
 6977      5F696E69 
 6977      7400
 6978              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

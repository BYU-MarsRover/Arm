ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,22,4
  18              		.comm	wiznet,1,1
  19              		.comm	test_array,22,4
  20              		.comm	elbw_arr_cspot,1,1
  21              		.comm	elbow_array,40,4
  22              		.comm	shldr_arr_cspot,1,1
  23              		.comm	shoulder_array,40,4
  24              		.comm	WT_arr_cspot,1,1
  25              		.comm	WT_array,40,4
  26              		.comm	WR_arr_cspot,1,1
  27              		.comm	WR_array,40,4
  28              		.global	WT_FLAG
  29              		.bss
  30              		.type	WT_FLAG, %object
  31              		.size	WT_FLAG, 1
  32              	WT_FLAG:
  33 0000 00       		.space	1
  34              		.global	WR_FLAG
  35              		.type	WR_FLAG, %object
  36              		.size	WR_FLAG, 1
  37              	WR_FLAG:
  38 0001 00       		.space	1
  39              		.global	ELBOW_FLAG
  40              		.type	ELBOW_FLAG, %object
  41              		.size	ELBOW_FLAG, 1
  42              	ELBOW_FLAG:
  43 0002 00       		.space	1
  44              		.global	SHOULDER_FLAG
  45              		.type	SHOULDER_FLAG, %object
  46              		.size	SHOULDER_FLAG, 1
  47              	SHOULDER_FLAG:
  48 0003 00       		.space	1
  49              		.global	BA_FLAG
  50              		.type	BA_FLAG, %object
  51              		.size	BA_FLAG, 1
  52              	BA_FLAG:
  53 0004 00       		.space	1
  54              		.global	temp_val
  55              		.data
  56              		.align	1
  57              		.type	temp_val, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 2


  58              		.size	temp_val, 2
  59              	temp_val:
  60 0000 0CFE     		.short	-500
  61              		.comm	timerFlag,1,1
  62              		.section	.text.timer_isr,"ax",%progbits
  63              		.align	2
  64              		.global	timer_isr
  65              		.code	16
  66              		.thumb_func
  67              		.type	timer_isr, %function
  68              	timer_isr:
  69              	.LFB34:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
  71              		.loc 1 11 0
  72              		.cfi_startproc
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 82B0     		sub	sp, sp, #8
  78              		.cfi_def_cfa_offset 16
  79 0004 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  81              		.loc 1 12 0
  82 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  83 000a 031C     		mov	r3, r0
  84 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
  85              		.loc 1 13 0
  86 000e 054B     		ldr	r3, .L2
  87 0010 0122     		mov	r2, #1
  88 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  89              		.loc 1 14 0
  90 0014 7B68     		ldr	r3, [r7, #4]
  91 0016 181C     		mov	r0, r3
  92 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
  93              		.loc 1 15 0
  94 001c BD46     		mov	sp, r7
  95 001e 02B0     		add	sp, sp, #8
  96              		@ sp needed
  97 0020 80BD     		pop	{r7, pc}
  98              	.L3:
  99 0022 C046     		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 3


 100              	.L2:
 101 0024 00000000 		.word	timerFlag
 102              		.cfi_endproc
 103              	.LFE34:
 104              		.size	timer_isr, .-timer_isr
 105              		.global	__aeabi_uidiv
 106              		.section	.text.average,"ax",%progbits
 107              		.align	2
 108              		.global	average
 109              		.code	16
 110              		.thumb_func
 111              		.type	average, %function
 112              	average:
 113              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
 114              		.loc 1 51 0
 115              		.cfi_startproc
 116 0000 80B5     		push	{r7, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 4


 121              		.cfi_def_cfa_offset 32
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 124 0006 7860     		str	r0, [r7, #4]
 125 0008 0A1C     		mov	r2, r1
 126 000a FB1C     		add	r3, r7, #3
 127 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
 128              		.loc 1 53 0
 129 000e 0023     		mov	r3, #0
 130 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 131              		.loc 1 54 0
 132 0012 3B1C     		mov	r3, r7
 133 0014 0E33     		add	r3, r3, #14
 134 0016 0022     		mov	r2, #0
 135 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 136              		.loc 1 56 0
 137 001a 3B1C     		mov	r3, r7
 138 001c 1733     		add	r3, r3, #23
 139 001e 0022     		mov	r2, #0
 140 0020 1A70     		strb	r2, [r3]
 141 0022 10E0     		b	.L5
 142              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
 143              		.loc 1 58 0 discriminator 2
 144 0024 3B1C     		mov	r3, r7
 145 0026 1733     		add	r3, r3, #23
 146 0028 1B78     		ldrb	r3, [r3]
 147 002a 5B00     		lsl	r3, r3, #1
 148 002c 7A68     		ldr	r2, [r7, #4]
 149 002e D318     		add	r3, r2, r3
 150 0030 1B88     		ldrh	r3, [r3]
 151 0032 3A69     		ldr	r2, [r7, #16]
 152 0034 D318     		add	r3, r2, r3
 153 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 154              		.loc 1 56 0 discriminator 2
 155 0038 3B1C     		mov	r3, r7
 156 003a 1733     		add	r3, r3, #23
 157 003c 1A78     		ldrb	r2, [r3]
 158 003e 3B1C     		mov	r3, r7
 159 0040 1733     		add	r3, r3, #23
 160 0042 0132     		add	r2, r2, #1
 161 0044 1A70     		strb	r2, [r3]
 162              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 163              		.loc 1 56 0 is_stmt 0 discriminator 1
 164 0046 3A1C     		mov	r2, r7
 165 0048 1732     		add	r2, r2, #23
 166 004a FB1C     		add	r3, r7, #3
 167 004c 1278     		ldrb	r2, [r2]
 168 004e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 5


 169 0050 9A42     		cmp	r2, r3
 170 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
 171              		.loc 1 61 0 is_stmt 1
 172 0054 FB1C     		add	r3, r7, #3
 173 0056 1B78     		ldrb	r3, [r3]
 174 0058 3869     		ldr	r0, [r7, #16]
 175 005a 191C     		mov	r1, r3
 176 005c FFF7FEFF 		bl	__aeabi_uidiv
 177 0060 031C     		mov	r3, r0
 178 0062 1A1C     		mov	r2, r3
 179 0064 3B1C     		mov	r3, r7
 180 0066 0E33     		add	r3, r3, #14
 181 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 182              		.loc 1 63 0
 183 006a 3B1C     		mov	r3, r7
 184 006c 0E33     		add	r3, r3, #14
 185 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 186              		.loc 1 64 0
 187 0070 181C     		mov	r0, r3
 188 0072 BD46     		mov	sp, r7
 189 0074 06B0     		add	sp, sp, #24
 190              		@ sp needed
 191 0076 80BD     		pop	{r7, pc}
 192              		.cfi_endproc
 193              	.LFE35:
 194              		.size	average, .-average
 195              		.section	.text.maintain_array,"ax",%progbits
 196              		.align	2
 197              		.global	maintain_array
 198              		.code	16
 199              		.thumb_func
 200              		.type	maintain_array, %function
 201              	maintain_array:
 202              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
  67:.\main.c      **** {
 203              		.loc 1 67 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 82B0     		sub	sp, sp, #8
 210              		.cfi_def_cfa_offset 16
 211 0004 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 213 0006 0A1C     		mov	r2, r1
 214 0008 FB1D     		add	r3, r7, #7
 215 000a 011C     		add	r1, r0, #0
 216 000c 1970     		strb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 6


 217 000e BB1D     		add	r3, r7, #6
 218 0010 1A70     		strb	r2, [r3]
  68:.\main.c      ****     if(cpos < (SIZE - 1))
 219              		.loc 1 68 0
 220 0012 FB1D     		add	r3, r7, #7
 221 0014 1A78     		ldrb	r2, [r3]
 222 0016 BB1D     		add	r3, r7, #6
 223 0018 1B78     		ldrb	r3, [r3]
 224 001a 013B     		sub	r3, r3, #1
 225 001c 9A42     		cmp	r2, r3
 226 001e 05DA     		bge	.L9
  69:.\main.c      ****     {
  70:.\main.c      ****         cpos++;
 227              		.loc 1 70 0
 228 0020 FB1D     		add	r3, r7, #7
 229 0022 1A78     		ldrb	r2, [r3]
 230 0024 FB1D     		add	r3, r7, #7
 231 0026 0132     		add	r2, r2, #1
 232 0028 1A70     		strb	r2, [r3]
 233 002a 02E0     		b	.L10
 234              	.L9:
  71:.\main.c      ****     }
  72:.\main.c      ****     else
  73:.\main.c      ****     {
  74:.\main.c      ****         cpos = 0;
 235              		.loc 1 74 0
 236 002c FB1D     		add	r3, r7, #7
 237 002e 0022     		mov	r2, #0
 238 0030 1A70     		strb	r2, [r3]
 239              	.L10:
  75:.\main.c      ****     }
  76:.\main.c      ****     return cpos;
 240              		.loc 1 76 0
 241 0032 FB1D     		add	r3, r7, #7
 242 0034 1B78     		ldrb	r3, [r3]
  77:.\main.c      **** }
 243              		.loc 1 77 0
 244 0036 181C     		mov	r0, r3
 245 0038 BD46     		mov	sp, r7
 246 003a 02B0     		add	sp, sp, #8
 247              		@ sp needed
 248 003c 80BD     		pop	{r7, pc}
 249              		.cfi_endproc
 250              	.LFE36:
 251              		.size	maintain_array, .-maintain_array
 252 003e C046     		.section	.text.check_update,"ax",%progbits
 253              		.align	2
 254              		.global	check_update
 255              		.code	16
 256              		.thumb_func
 257              		.type	check_update, %function
 258              	check_update:
 259              	.LFB37:
  78:.\main.c      **** 
  79:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
  80:.\main.c      **** {
 260              		.loc 1 80 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 7


 261              		.cfi_startproc
 262 0000 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 86B0     		sub	sp, sp, #24
 267              		.cfi_def_cfa_offset 32
 268 0004 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 270 0006 F860     		str	r0, [r7, #12]
 271 0008 7B60     		str	r3, [r7, #4]
 272 000a 3B1C     		mov	r3, r7
 273 000c 0B33     		add	r3, r3, #11
 274 000e 1970     		strb	r1, [r3]
 275 0010 3B1C     		mov	r3, r7
 276 0012 0A33     		add	r3, r3, #10
 277 0014 1A70     		strb	r2, [r3]
  81:.\main.c      ****     uint8 index;
  82:.\main.c      ****     if(arr_pos != 0)
 278              		.loc 1 82 0
 279 0016 3B1C     		mov	r3, r7
 280 0018 0B33     		add	r3, r3, #11
 281 001a 1B78     		ldrb	r3, [r3]
 282 001c 002B     		cmp	r3, #0
 283 001e 07D0     		beq	.L13
  83:.\main.c      ****     {
  84:.\main.c      ****         index = arr_pos - 1;
 284              		.loc 1 84 0
 285 0020 3B1C     		mov	r3, r7
 286 0022 1733     		add	r3, r3, #23
 287 0024 3A1C     		mov	r2, r7
 288 0026 0B32     		add	r2, r2, #11
 289 0028 1278     		ldrb	r2, [r2]
 290 002a 013A     		sub	r2, r2, #1
 291 002c 1A70     		strb	r2, [r3]
 292 002e 06E0     		b	.L14
 293              	.L13:
  85:.\main.c      ****     }
  86:.\main.c      ****     else
  87:.\main.c      ****     {
  88:.\main.c      ****         index = size - 1;
 294              		.loc 1 88 0
 295 0030 3B1C     		mov	r3, r7
 296 0032 1733     		add	r3, r3, #23
 297 0034 3A1C     		mov	r2, r7
 298 0036 0A32     		add	r2, r2, #10
 299 0038 1278     		ldrb	r2, [r2]
 300 003a 013A     		sub	r2, r2, #1
 301 003c 1A70     		strb	r2, [r3]
 302              	.L14:
  89:.\main.c      ****     }
  90:.\main.c      ****     
  91:.\main.c      ****     if(change < 0)
 303              		.loc 1 91 0
 304 003e 7B68     		ldr	r3, [r7, #4]
 305 0040 002B     		cmp	r3, #0
 306 0042 2ADA     		bge	.L15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 8


  92:.\main.c      ****     {
  93:.\main.c      ****         if(array[index] >= (1000 - change))
 307              		.loc 1 93 0
 308 0044 3B1C     		mov	r3, r7
 309 0046 1733     		add	r3, r3, #23
 310 0048 1B78     		ldrb	r3, [r3]
 311 004a 5B00     		lsl	r3, r3, #1
 312 004c FA68     		ldr	r2, [r7, #12]
 313 004e D318     		add	r3, r2, r3
 314 0050 1B88     		ldrh	r3, [r3]
 315 0052 1A1C     		mov	r2, r3
 316 0054 7B68     		ldr	r3, [r7, #4]
 317 0056 FA21     		mov	r1, #250
 318 0058 8900     		lsl	r1, r1, #2
 319 005a CB1A     		sub	r3, r1, r3
 320 005c 9A42     		cmp	r2, r3
 321 005e 12DB     		blt	.L16
  94:.\main.c      ****         {
  95:.\main.c      ****             array[arr_pos] = (array[index] + change);
 322              		.loc 1 95 0
 323 0060 3B1C     		mov	r3, r7
 324 0062 0B33     		add	r3, r3, #11
 325 0064 1B78     		ldrb	r3, [r3]
 326 0066 5B00     		lsl	r3, r3, #1
 327 0068 FA68     		ldr	r2, [r7, #12]
 328 006a D318     		add	r3, r2, r3
 329 006c 3A1C     		mov	r2, r7
 330 006e 1732     		add	r2, r2, #23
 331 0070 1278     		ldrb	r2, [r2]
 332 0072 5200     		lsl	r2, r2, #1
 333 0074 F968     		ldr	r1, [r7, #12]
 334 0076 8A18     		add	r2, r1, r2
 335 0078 1188     		ldrh	r1, [r2]
 336 007a 7A68     		ldr	r2, [r7, #4]
 337 007c 92B2     		uxth	r2, r2
 338 007e 8A18     		add	r2, r1, r2
 339 0080 92B2     		uxth	r2, r2
 340 0082 1A80     		strh	r2, [r3]
 341 0084 33E0     		b	.L18
 342              	.L16:
  96:.\main.c      ****         }
  97:.\main.c      ****         else
  98:.\main.c      ****         {
  99:.\main.c      ****             array[arr_pos] = 1000;
 343              		.loc 1 99 0
 344 0086 3B1C     		mov	r3, r7
 345 0088 0B33     		add	r3, r3, #11
 346 008a 1B78     		ldrb	r3, [r3]
 347 008c 5B00     		lsl	r3, r3, #1
 348 008e FA68     		ldr	r2, [r7, #12]
 349 0090 D318     		add	r3, r2, r3
 350 0092 FA22     		mov	r2, #250
 351 0094 9200     		lsl	r2, r2, #2
 352 0096 1A80     		strh	r2, [r3]
 353 0098 29E0     		b	.L18
 354              	.L15:
 100:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 9


 101:.\main.c      ****     }
 102:.\main.c      ****     else
 103:.\main.c      ****     {
 104:.\main.c      ****         if(array[index] <= (2000 - change))
 355              		.loc 1 104 0
 356 009a 3B1C     		mov	r3, r7
 357 009c 1733     		add	r3, r3, #23
 358 009e 1B78     		ldrb	r3, [r3]
 359 00a0 5B00     		lsl	r3, r3, #1
 360 00a2 FA68     		ldr	r2, [r7, #12]
 361 00a4 D318     		add	r3, r2, r3
 362 00a6 1B88     		ldrh	r3, [r3]
 363 00a8 1A1C     		mov	r2, r3
 364 00aa 7B68     		ldr	r3, [r7, #4]
 365 00ac FA21     		mov	r1, #250
 366 00ae C900     		lsl	r1, r1, #3
 367 00b0 CB1A     		sub	r3, r1, r3
 368 00b2 9A42     		cmp	r2, r3
 369 00b4 12DC     		bgt	.L19
 105:.\main.c      ****         {
 106:.\main.c      ****             array[arr_pos] = (array[index] + change);
 370              		.loc 1 106 0
 371 00b6 3B1C     		mov	r3, r7
 372 00b8 0B33     		add	r3, r3, #11
 373 00ba 1B78     		ldrb	r3, [r3]
 374 00bc 5B00     		lsl	r3, r3, #1
 375 00be FA68     		ldr	r2, [r7, #12]
 376 00c0 D318     		add	r3, r2, r3
 377 00c2 3A1C     		mov	r2, r7
 378 00c4 1732     		add	r2, r2, #23
 379 00c6 1278     		ldrb	r2, [r2]
 380 00c8 5200     		lsl	r2, r2, #1
 381 00ca F968     		ldr	r1, [r7, #12]
 382 00cc 8A18     		add	r2, r1, r2
 383 00ce 1188     		ldrh	r1, [r2]
 384 00d0 7A68     		ldr	r2, [r7, #4]
 385 00d2 92B2     		uxth	r2, r2
 386 00d4 8A18     		add	r2, r1, r2
 387 00d6 92B2     		uxth	r2, r2
 388 00d8 1A80     		strh	r2, [r3]
 389 00da 08E0     		b	.L18
 390              	.L19:
 107:.\main.c      ****         }
 108:.\main.c      ****         else
 109:.\main.c      ****         {
 110:.\main.c      ****             array[arr_pos] = 2000;
 391              		.loc 1 110 0
 392 00dc 3B1C     		mov	r3, r7
 393 00de 0B33     		add	r3, r3, #11
 394 00e0 1B78     		ldrb	r3, [r3]
 395 00e2 5B00     		lsl	r3, r3, #1
 396 00e4 FA68     		ldr	r2, [r7, #12]
 397 00e6 D318     		add	r3, r2, r3
 398 00e8 FA22     		mov	r2, #250
 399 00ea D200     		lsl	r2, r2, #3
 400 00ec 1A80     		strh	r2, [r3]
 401              	.L18:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 10


 111:.\main.c      ****         }
 112:.\main.c      ****     }
 113:.\main.c      ****     
 114:.\main.c      ****     return maintain_array(arr_pos, size);
 402              		.loc 1 114 0
 403 00ee 3B1C     		mov	r3, r7
 404 00f0 0B33     		add	r3, r3, #11
 405 00f2 1A78     		ldrb	r2, [r3]
 406 00f4 3B1C     		mov	r3, r7
 407 00f6 0A33     		add	r3, r3, #10
 408 00f8 1B78     		ldrb	r3, [r3]
 409 00fa 101C     		mov	r0, r2
 410 00fc 191C     		mov	r1, r3
 411 00fe FFF7FEFF 		bl	maintain_array
 412 0102 031C     		mov	r3, r0
 115:.\main.c      **** }
 413              		.loc 1 115 0
 414 0104 181C     		mov	r0, r3
 415 0106 BD46     		mov	sp, r7
 416 0108 06B0     		add	sp, sp, #24
 417              		@ sp needed
 418 010a 80BD     		pop	{r7, pc}
 419              		.cfi_endproc
 420              	.LFE37:
 421              		.size	check_update, .-check_update
 422              		.section	.text.pos_to_vel,"ax",%progbits
 423              		.align	2
 424              		.global	pos_to_vel
 425              		.code	16
 426              		.thumb_func
 427              		.type	pos_to_vel, %function
 428              	pos_to_vel:
 429              	.LFB38:
 116:.\main.c      **** 
 117:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 118:.\main.c      **** {
 430              		.loc 1 118 0
 431              		.cfi_startproc
 432 0000 90B5     		push	{r4, r7, lr}
 433              		.cfi_def_cfa_offset 12
 434              		.cfi_offset 4, -12
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              		.cfi_def_cfa_offset 24
 439 0004 00AF     		add	r7, sp, #0
 440              		.cfi_def_cfa_register 7
 441 0006 3960     		str	r1, [r7]
 442 0008 111C     		mov	r1, r2
 443 000a 1A1C     		mov	r2, r3
 444 000c FB1D     		add	r3, r7, #7
 445 000e 1870     		strb	r0, [r3]
 446 0010 BB1D     		add	r3, r7, #6
 447 0012 1970     		strb	r1, [r3]
 448 0014 3B1D     		add	r3, r7, #4
 449 0016 1A80     		strh	r2, [r3]
 119:.\main.c      ****     if(command >= 1000 && command < 1125)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 11


 450              		.loc 1 119 0
 451 0018 3B1D     		add	r3, r7, #4
 452 001a 1A88     		ldrh	r2, [r3]
 453 001c 724B     		ldr	r3, .L33
 454 001e 9A42     		cmp	r2, r3
 455 0020 11D9     		bls	.L22
 456              		.loc 1 119 0 is_stmt 0 discriminator 1
 457 0022 3B1D     		add	r3, r7, #4
 458 0024 1A88     		ldrh	r2, [r3]
 459 0026 714B     		ldr	r3, .L33+4
 460 0028 9A42     		cmp	r2, r3
 461 002a 0CD8     		bhi	.L22
 120:.\main.c      ****     {
 121:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 462              		.loc 1 121 0 is_stmt 1
 463 002c FC1D     		add	r4, r7, #7
 464 002e 3868     		ldr	r0, [r7]
 465 0030 FB1D     		add	r3, r7, #7
 466 0032 1978     		ldrb	r1, [r3]
 467 0034 BB1D     		add	r3, r7, #6
 468 0036 1A78     		ldrb	r2, [r3]
 469 0038 6423     		mov	r3, #100
 470 003a 5B42     		neg	r3, r3
 471 003c FFF7FEFF 		bl	check_update
 472 0040 031C     		mov	r3, r0
 473 0042 2370     		strb	r3, [r4]
 474 0044 CAE0     		b	.L23
 475              	.L22:
 122:.\main.c      ****     }
 123:.\main.c      ****     else if(command >= 1125 && command < 1250)
 476              		.loc 1 123 0
 477 0046 3B1D     		add	r3, r7, #4
 478 0048 1A88     		ldrh	r2, [r3]
 479 004a 684B     		ldr	r3, .L33+4
 480 004c 9A42     		cmp	r2, r3
 481 004e 11D9     		bls	.L24
 482              		.loc 1 123 0 is_stmt 0 discriminator 1
 483 0050 3B1D     		add	r3, r7, #4
 484 0052 1A88     		ldrh	r2, [r3]
 485 0054 664B     		ldr	r3, .L33+8
 486 0056 9A42     		cmp	r2, r3
 487 0058 0CD8     		bhi	.L24
 124:.\main.c      ****     {
 125:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -75);  
 488              		.loc 1 125 0 is_stmt 1
 489 005a FC1D     		add	r4, r7, #7
 490 005c 3868     		ldr	r0, [r7]
 491 005e FB1D     		add	r3, r7, #7
 492 0060 1978     		ldrb	r1, [r3]
 493 0062 BB1D     		add	r3, r7, #6
 494 0064 1A78     		ldrb	r2, [r3]
 495 0066 4B23     		mov	r3, #75
 496 0068 5B42     		neg	r3, r3
 497 006a FFF7FEFF 		bl	check_update
 498 006e 031C     		mov	r3, r0
 499 0070 2370     		strb	r3, [r4]
 500 0072 B3E0     		b	.L23
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 12


 501              	.L24:
 126:.\main.c      ****     }
 127:.\main.c      ****     else if(command >= 1250 && command < 1375)
 502              		.loc 1 127 0
 503 0074 3B1D     		add	r3, r7, #4
 504 0076 1A88     		ldrh	r2, [r3]
 505 0078 5D4B     		ldr	r3, .L33+8
 506 007a 9A42     		cmp	r2, r3
 507 007c 11D9     		bls	.L25
 508              		.loc 1 127 0 is_stmt 0 discriminator 1
 509 007e 3B1D     		add	r3, r7, #4
 510 0080 1A88     		ldrh	r2, [r3]
 511 0082 5C4B     		ldr	r3, .L33+12
 512 0084 9A42     		cmp	r2, r3
 513 0086 0CD8     		bhi	.L25
 128:.\main.c      ****     {
 129:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);
 514              		.loc 1 129 0 is_stmt 1
 515 0088 FC1D     		add	r4, r7, #7
 516 008a 3868     		ldr	r0, [r7]
 517 008c FB1D     		add	r3, r7, #7
 518 008e 1978     		ldrb	r1, [r3]
 519 0090 BB1D     		add	r3, r7, #6
 520 0092 1A78     		ldrb	r2, [r3]
 521 0094 3223     		mov	r3, #50
 522 0096 5B42     		neg	r3, r3
 523 0098 FFF7FEFF 		bl	check_update
 524 009c 031C     		mov	r3, r0
 525 009e 2370     		strb	r3, [r4]
 526 00a0 9CE0     		b	.L23
 527              	.L25:
 130:.\main.c      ****     }
 131:.\main.c      ****     else if(command >= 1375 && command < 1490)
 528              		.loc 1 131 0
 529 00a2 3B1D     		add	r3, r7, #4
 530 00a4 1A88     		ldrh	r2, [r3]
 531 00a6 534B     		ldr	r3, .L33+12
 532 00a8 9A42     		cmp	r2, r3
 533 00aa 11D9     		bls	.L26
 534              		.loc 1 131 0 is_stmt 0 discriminator 1
 535 00ac 3B1D     		add	r3, r7, #4
 536 00ae 1A88     		ldrh	r2, [r3]
 537 00b0 514B     		ldr	r3, .L33+16
 538 00b2 9A42     		cmp	r2, r3
 539 00b4 0CD8     		bhi	.L26
 132:.\main.c      ****     {
 133:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -25);
 540              		.loc 1 133 0 is_stmt 1
 541 00b6 FC1D     		add	r4, r7, #7
 542 00b8 3868     		ldr	r0, [r7]
 543 00ba FB1D     		add	r3, r7, #7
 544 00bc 1978     		ldrb	r1, [r3]
 545 00be BB1D     		add	r3, r7, #6
 546 00c0 1A78     		ldrb	r2, [r3]
 547 00c2 1923     		mov	r3, #25
 548 00c4 5B42     		neg	r3, r3
 549 00c6 FFF7FEFF 		bl	check_update
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 13


 550 00ca 031C     		mov	r3, r0
 551 00cc 2370     		strb	r3, [r4]
 552 00ce 85E0     		b	.L23
 553              	.L26:
 134:.\main.c      ****     }
 135:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 554              		.loc 1 135 0
 555 00d0 3B1D     		add	r3, r7, #4
 556 00d2 1A88     		ldrh	r2, [r3]
 557 00d4 494B     		ldr	r3, .L33+20
 558 00d6 9A42     		cmp	r2, r3
 559 00d8 10D8     		bhi	.L27
 560              		.loc 1 135 0 is_stmt 0 discriminator 1
 561 00da 3B1D     		add	r3, r7, #4
 562 00dc 1A88     		ldrh	r2, [r3]
 563 00de 464B     		ldr	r3, .L33+16
 564 00e0 9A42     		cmp	r2, r3
 565 00e2 0BD9     		bls	.L27
 136:.\main.c      ****     {
 137:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 566              		.loc 1 137 0 is_stmt 1
 567 00e4 FC1D     		add	r4, r7, #7
 568 00e6 FB1D     		add	r3, r7, #7
 569 00e8 1A78     		ldrb	r2, [r3]
 570 00ea BB1D     		add	r3, r7, #6
 571 00ec 1B78     		ldrb	r3, [r3]
 572 00ee 101C     		mov	r0, r2
 573 00f0 191C     		mov	r1, r3
 574 00f2 FFF7FEFF 		bl	maintain_array
 575 00f6 031C     		mov	r3, r0
 576 00f8 2370     		strb	r3, [r4]
 577 00fa 6FE0     		b	.L23
 578              	.L27:
 138:.\main.c      ****     }
 139:.\main.c      ****     else if(command > 1510 && command <= 1625)
 579              		.loc 1 139 0
 580 00fc 3B1D     		add	r3, r7, #4
 581 00fe 1A88     		ldrh	r2, [r3]
 582 0100 3E4B     		ldr	r3, .L33+20
 583 0102 9A42     		cmp	r2, r3
 584 0104 13D9     		bls	.L28
 585              		.loc 1 139 0 is_stmt 0 discriminator 1
 586 0106 3B1D     		add	r3, r7, #4
 587 0108 1A88     		ldrh	r2, [r3]
 588 010a 3D4B     		ldr	r3, .L33+24
 589 010c 9A42     		cmp	r2, r3
 590 010e 0ED8     		bhi	.L28
 140:.\main.c      ****     {
 141:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 25);
 591              		.loc 1 141 0 is_stmt 1
 592 0110 FC1D     		add	r4, r7, #7
 593 0112 3968     		ldr	r1, [r7]
 594 0114 FB1D     		add	r3, r7, #7
 595 0116 1A78     		ldrb	r2, [r3]
 596 0118 BB1D     		add	r3, r7, #6
 597 011a 1B78     		ldrb	r3, [r3]
 598 011c 081C     		mov	r0, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 14


 599 011e 111C     		mov	r1, r2
 600 0120 1A1C     		mov	r2, r3
 601 0122 1923     		mov	r3, #25
 602 0124 FFF7FEFF 		bl	check_update
 603 0128 031C     		mov	r3, r0
 604 012a 2370     		strb	r3, [r4]
 605 012c 56E0     		b	.L23
 606              	.L28:
 142:.\main.c      ****     }
 143:.\main.c      ****     else if(command > 1625 && command <= 1750)
 607              		.loc 1 143 0
 608 012e 3B1D     		add	r3, r7, #4
 609 0130 1A88     		ldrh	r2, [r3]
 610 0132 334B     		ldr	r3, .L33+24
 611 0134 9A42     		cmp	r2, r3
 612 0136 13D9     		bls	.L29
 613              		.loc 1 143 0 is_stmt 0 discriminator 1
 614 0138 3B1D     		add	r3, r7, #4
 615 013a 1A88     		ldrh	r2, [r3]
 616 013c 314B     		ldr	r3, .L33+28
 617 013e 9A42     		cmp	r2, r3
 618 0140 0ED8     		bhi	.L29
 144:.\main.c      ****     {
 145:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 619              		.loc 1 145 0 is_stmt 1
 620 0142 FC1D     		add	r4, r7, #7
 621 0144 3968     		ldr	r1, [r7]
 622 0146 FB1D     		add	r3, r7, #7
 623 0148 1A78     		ldrb	r2, [r3]
 624 014a BB1D     		add	r3, r7, #6
 625 014c 1B78     		ldrb	r3, [r3]
 626 014e 081C     		mov	r0, r1
 627 0150 111C     		mov	r1, r2
 628 0152 1A1C     		mov	r2, r3
 629 0154 3223     		mov	r3, #50
 630 0156 FFF7FEFF 		bl	check_update
 631 015a 031C     		mov	r3, r0
 632 015c 2370     		strb	r3, [r4]
 633 015e 3DE0     		b	.L23
 634              	.L29:
 146:.\main.c      ****     }
 147:.\main.c      ****     else if(command > 1750 && command <= 1875)
 635              		.loc 1 147 0
 636 0160 3B1D     		add	r3, r7, #4
 637 0162 1A88     		ldrh	r2, [r3]
 638 0164 274B     		ldr	r3, .L33+28
 639 0166 9A42     		cmp	r2, r3
 640 0168 13D9     		bls	.L30
 641              		.loc 1 147 0 is_stmt 0 discriminator 1
 642 016a 3B1D     		add	r3, r7, #4
 643 016c 1A88     		ldrh	r2, [r3]
 644 016e 264B     		ldr	r3, .L33+32
 645 0170 9A42     		cmp	r2, r3
 646 0172 0ED8     		bhi	.L30
 148:.\main.c      ****     {
 149:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 75);
 647              		.loc 1 149 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 15


 648 0174 FC1D     		add	r4, r7, #7
 649 0176 3968     		ldr	r1, [r7]
 650 0178 FB1D     		add	r3, r7, #7
 651 017a 1A78     		ldrb	r2, [r3]
 652 017c BB1D     		add	r3, r7, #6
 653 017e 1B78     		ldrb	r3, [r3]
 654 0180 081C     		mov	r0, r1
 655 0182 111C     		mov	r1, r2
 656 0184 1A1C     		mov	r2, r3
 657 0186 4B23     		mov	r3, #75
 658 0188 FFF7FEFF 		bl	check_update
 659 018c 031C     		mov	r3, r0
 660 018e 2370     		strb	r3, [r4]
 661 0190 24E0     		b	.L23
 662              	.L30:
 150:.\main.c      ****     }
 151:.\main.c      ****     else if(command > 1875 && command <= 2000)
 663              		.loc 1 151 0
 664 0192 3B1D     		add	r3, r7, #4
 665 0194 1A88     		ldrh	r2, [r3]
 666 0196 1C4B     		ldr	r3, .L33+32
 667 0198 9A42     		cmp	r2, r3
 668 019a 14D9     		bls	.L31
 669              		.loc 1 151 0 is_stmt 0 discriminator 1
 670 019c 3B1D     		add	r3, r7, #4
 671 019e 1A88     		ldrh	r2, [r3]
 672 01a0 FA23     		mov	r3, #250
 673 01a2 DB00     		lsl	r3, r3, #3
 674 01a4 9A42     		cmp	r2, r3
 675 01a6 0ED8     		bhi	.L31
 152:.\main.c      ****     {
 153:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 676              		.loc 1 153 0 is_stmt 1
 677 01a8 FC1D     		add	r4, r7, #7
 678 01aa 3968     		ldr	r1, [r7]
 679 01ac FB1D     		add	r3, r7, #7
 680 01ae 1A78     		ldrb	r2, [r3]
 681 01b0 BB1D     		add	r3, r7, #6
 682 01b2 1B78     		ldrb	r3, [r3]
 683 01b4 081C     		mov	r0, r1
 684 01b6 111C     		mov	r1, r2
 685 01b8 1A1C     		mov	r2, r3
 686 01ba 6423     		mov	r3, #100
 687 01bc FFF7FEFF 		bl	check_update
 688 01c0 031C     		mov	r3, r0
 689 01c2 2370     		strb	r3, [r4]
 690 01c4 0AE0     		b	.L23
 691              	.L31:
 154:.\main.c      ****     }
 155:.\main.c      ****     else
 156:.\main.c      ****     {
 157:.\main.c      ****         //throw error
 158:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 692              		.loc 1 158 0
 693 01c6 FC1D     		add	r4, r7, #7
 694 01c8 FB1D     		add	r3, r7, #7
 695 01ca 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 16


 696 01cc BB1D     		add	r3, r7, #6
 697 01ce 1B78     		ldrb	r3, [r3]
 698 01d0 101C     		mov	r0, r2
 699 01d2 191C     		mov	r1, r3
 700 01d4 FFF7FEFF 		bl	maintain_array
 701 01d8 031C     		mov	r3, r0
 702 01da 2370     		strb	r3, [r4]
 703              	.L23:
 159:.\main.c      ****     }
 160:.\main.c      ****     return cur_pos;
 704              		.loc 1 160 0
 705 01dc FB1D     		add	r3, r7, #7
 706 01de 1B78     		ldrb	r3, [r3]
 161:.\main.c      **** }
 707              		.loc 1 161 0
 708 01e0 181C     		mov	r0, r3
 709 01e2 BD46     		mov	sp, r7
 710 01e4 03B0     		add	sp, sp, #12
 711              		@ sp needed
 712 01e6 90BD     		pop	{r4, r7, pc}
 713              	.L34:
 714              		.align	2
 715              	.L33:
 716 01e8 E7030000 		.word	999
 717 01ec 64040000 		.word	1124
 718 01f0 E1040000 		.word	1249
 719 01f4 5E050000 		.word	1374
 720 01f8 D1050000 		.word	1489
 721 01fc E6050000 		.word	1510
 722 0200 59060000 		.word	1625
 723 0204 D6060000 		.word	1750
 724 0208 53070000 		.word	1875
 725              		.cfi_endproc
 726              	.LFE38:
 727              		.size	pos_to_vel, .-pos_to_vel
 728              		.section	.text.make_command,"ax",%progbits
 729              		.align	2
 730              		.global	make_command
 731              		.code	16
 732              		.thumb_func
 733              		.type	make_command, %function
 734              	make_command:
 735              	.LFB39:
 162:.\main.c      **** 
 163:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 164:.\main.c      **** {
 736              		.loc 1 164 0
 737              		.cfi_startproc
 738 0000 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 84B0     		sub	sp, sp, #16
 743              		.cfi_def_cfa_offset 24
 744 0004 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 17


 747 0008 FB1C     		add	r3, r7, #3
 748 000a 1970     		strb	r1, [r3]
 749 000c BB1C     		add	r3, r7, #2
 750 000e 1A70     		strb	r2, [r3]
 165:.\main.c      ****     uint16 command;
 166:.\main.c      ****     int16 temp1;
 167:.\main.c      ****     int16 temp2;
 168:.\main.c      ****     int16 temp3;
 169:.\main.c      ****     
 170:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 751              		.loc 1 170 0
 752 0010 FB1C     		add	r3, r7, #3
 753 0012 1B78     		ldrb	r3, [r3]
 754 0014 7A68     		ldr	r2, [r7, #4]
 755 0016 D318     		add	r3, r2, r3
 756 0018 1B78     		ldrb	r3, [r3]
 757 001a 5BB2     		sxtb	r3, r3
 758 001c 1A02     		lsl	r2, r3, #8
 759 001e 3B1C     		mov	r3, r7
 760 0020 0E33     		add	r3, r3, #14
 761 0022 1A80     		strh	r2, [r3]
 171:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 762              		.loc 1 171 0
 763 0024 BB1C     		add	r3, r7, #2
 764 0026 1B78     		ldrb	r3, [r3]
 765 0028 7A68     		ldr	r2, [r7, #4]
 766 002a D318     		add	r3, r2, r3
 767 002c 1B78     		ldrb	r3, [r3]
 768 002e 5BB2     		sxtb	r3, r3
 769 0030 9AB2     		uxth	r2, r3
 770 0032 3B1C     		mov	r3, r7
 771 0034 0C33     		add	r3, r3, #12
 772 0036 111C     		add	r1, r2, #0
 773 0038 FF22     		mov	r2, #255
 774 003a 0A40     		and	r2, r1
 775 003c 1A80     		strh	r2, [r3]
 172:.\main.c      ****     temp3 = temp1 | temp2;
 776              		.loc 1 172 0
 777 003e 3B1C     		mov	r3, r7
 778 0040 0A33     		add	r3, r3, #10
 779 0042 391C     		mov	r1, r7
 780 0044 0E31     		add	r1, r1, #14
 781 0046 3A1C     		mov	r2, r7
 782 0048 0C32     		add	r2, r2, #12
 783 004a 0988     		ldrh	r1, [r1]
 784 004c 1288     		ldrh	r2, [r2]
 785 004e 0A43     		orr	r2, r1
 786 0050 1A80     		strh	r2, [r3]
 173:.\main.c      ****     command = (temp3/2) + 1500;
 787              		.loc 1 173 0
 788 0052 3B1C     		mov	r3, r7
 789 0054 0A33     		add	r3, r3, #10
 790 0056 0021     		mov	r1, #0
 791 0058 5B5E     		ldrsh	r3, [r3, r1]
 792 005a 002B     		cmp	r3, #0
 793 005c 00DA     		bge	.L36
 794 005e 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 18


 795              	.L36:
 796 0060 5B10     		asr	r3, r3, #1
 797 0062 9BB2     		uxth	r3, r3
 798 0064 9AB2     		uxth	r2, r3
 799 0066 3B1C     		mov	r3, r7
 800 0068 0833     		add	r3, r3, #8
 801 006a 0549     		ldr	r1, .L38
 802 006c 5218     		add	r2, r2, r1
 803 006e 1A80     		strh	r2, [r3]
 174:.\main.c      ****     return command;
 804              		.loc 1 174 0
 805 0070 3B1C     		mov	r3, r7
 806 0072 0833     		add	r3, r3, #8
 807 0074 1B88     		ldrh	r3, [r3]
 175:.\main.c      **** }
 808              		.loc 1 175 0
 809 0076 181C     		mov	r0, r3
 810 0078 BD46     		mov	sp, r7
 811 007a 04B0     		add	sp, sp, #16
 812              		@ sp needed
 813 007c 80BD     		pop	{r7, pc}
 814              	.L39:
 815 007e C046     		.align	2
 816              	.L38:
 817 0080 DC050000 		.word	1500
 818              		.cfi_endproc
 819              	.LFE39:
 820              		.size	make_command, .-make_command
 821              		.section	.text.potFeedback,"ax",%progbits
 822              		.align	2
 823              		.global	potFeedback
 824              		.code	16
 825              		.thumb_func
 826              		.type	potFeedback, %function
 827              	potFeedback:
 828              	.LFB40:
 176:.\main.c      **** 
 177:.\main.c      **** uint16 potFeedback(uint32 channel)
 178:.\main.c      **** {
 829              		.loc 1 178 0
 830              		.cfi_startproc
 831 0000 80B5     		push	{r7, lr}
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 0002 84B0     		sub	sp, sp, #16
 836              		.cfi_def_cfa_offset 24
 837 0004 00AF     		add	r7, sp, #0
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 179:.\main.c      ****     //TODO: uncomment this section
 180:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 181:.\main.c      ****     uint16 feedback = 500;
 840              		.loc 1 181 0
 841 0008 3B1C     		mov	r3, r7
 842 000a 0E33     		add	r3, r3, #14
 843 000c FA22     		mov	r2, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 19


 844 000e 5200     		lsl	r2, r2, #1
 845 0010 1A80     		strh	r2, [r3]
 182:.\main.c      ****     return feedback;
 846              		.loc 1 182 0
 847 0012 3B1C     		mov	r3, r7
 848 0014 0E33     		add	r3, r3, #14
 849 0016 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 850              		.loc 1 183 0
 851 0018 181C     		mov	r0, r3
 852 001a BD46     		mov	sp, r7
 853 001c 04B0     		add	sp, sp, #16
 854              		@ sp needed
 855 001e 80BD     		pop	{r7, pc}
 856              		.cfi_endproc
 857              	.LFE40:
 858              		.size	potFeedback, .-potFeedback
 859              		.section	.text.send_feedback,"ax",%progbits
 860              		.align	2
 861              		.global	send_feedback
 862              		.code	16
 863              		.thumb_func
 864              		.type	send_feedback, %function
 865              	send_feedback:
 866              	.LFB41:
 184:.\main.c      **** 
 185:.\main.c      **** void send_feedback()
 186:.\main.c      **** {
 867              		.loc 1 186 0
 868              		.cfi_startproc
 869 0000 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 00AF     		add	r7, sp, #0
 874              		.cfi_def_cfa_register 7
 187:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 188:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 189:.\main.c      ****     //TODO define system state
 190:.\main.c      ****     //send packet via serial to wiznet
 191:.\main.c      **** }
 875              		.loc 1 191 0
 876 0004 BD46     		mov	sp, r7
 877              		@ sp needed
 878 0006 80BD     		pop	{r7, pc}
 879              		.cfi_endproc
 880              	.LFE41:
 881              		.size	send_feedback, .-send_feedback
 882              		.section	.text.fill_data_array,"ax",%progbits
 883              		.align	2
 884              		.global	fill_data_array
 885              		.code	16
 886              		.thumb_func
 887              		.type	fill_data_array, %function
 888              	fill_data_array:
 889              	.LFB42:
 192:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 20


 193:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 194:.\main.c      **** void fill_data_array()
 195:.\main.c      **** {
 890              		.loc 1 195 0
 891              		.cfi_startproc
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 82B0     		sub	sp, sp, #8
 897              		.cfi_def_cfa_offset 16
 898 0004 00AF     		add	r7, sp, #0
 899              		.cfi_def_cfa_register 7
 196:.\main.c      ****     //wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 197:.\main.c      ****     uint8 i = 0;
 900              		.loc 1 197 0
 901 0006 FB1D     		add	r3, r7, #7
 902 0008 0022     		mov	r2, #0
 903 000a 1A70     		strb	r2, [r3]
 198:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 904              		.loc 1 198 0
 905 000c FB1D     		add	r3, r7, #7
 906 000e 0022     		mov	r2, #0
 907 0010 1A70     		strb	r2, [r3]
 908 0012 0CE0     		b	.L44
 909              	.L45:
 199:.\main.c      ****     {
 200:.\main.c      ****         data_array[i] = test_array[i];
 910              		.loc 1 200 0 discriminator 2
 911 0014 FB1D     		add	r3, r7, #7
 912 0016 1B78     		ldrb	r3, [r3]
 913 0018 FA1D     		add	r2, r7, #7
 914 001a 1278     		ldrb	r2, [r2]
 915 001c 0749     		ldr	r1, .L46
 916 001e 895C     		ldrb	r1, [r1, r2]
 917 0020 074A     		ldr	r2, .L46+4
 918 0022 D154     		strb	r1, [r2, r3]
 198:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 919              		.loc 1 198 0 discriminator 2
 920 0024 FB1D     		add	r3, r7, #7
 921 0026 1A78     		ldrb	r2, [r3]
 922 0028 FB1D     		add	r3, r7, #7
 923 002a 0132     		add	r2, r2, #1
 924 002c 1A70     		strb	r2, [r3]
 925              	.L44:
 198:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 926              		.loc 1 198 0 is_stmt 0 discriminator 1
 927 002e FB1D     		add	r3, r7, #7
 928 0030 1B78     		ldrb	r3, [r3]
 929 0032 152B     		cmp	r3, #21
 930 0034 EED9     		bls	.L45
 201:.\main.c      ****     }
 202:.\main.c      **** }
 931              		.loc 1 202 0 is_stmt 1
 932 0036 BD46     		mov	sp, r7
 933 0038 02B0     		add	sp, sp, #8
 934              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 21


 935 003a 80BD     		pop	{r7, pc}
 936              	.L47:
 937              		.align	2
 938              	.L46:
 939 003c 00000000 		.word	test_array
 940 0040 00000000 		.word	data_array
 941              		.cfi_endproc
 942              	.LFE42:
 943              		.size	fill_data_array, .-fill_data_array
 944              		.section	.text.ServoGoalPosition,"ax",%progbits
 945              		.align	2
 946              		.global	ServoGoalPosition
 947              		.code	16
 948              		.thumb_func
 949              		.type	ServoGoalPosition, %function
 950              	ServoGoalPosition:
 951              	.LFB43:
 203:.\main.c      **** 
 204:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 205:.\main.c      **** {
 952              		.loc 1 205 0
 953              		.cfi_startproc
 954 0000 80B5     		push	{r7, lr}
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 7, -8
 957              		.cfi_offset 14, -4
 958 0002 86B0     		sub	sp, sp, #24
 959              		.cfi_def_cfa_offset 32
 960 0004 00AF     		add	r7, sp, #0
 961              		.cfi_def_cfa_register 7
 962 0006 0A1C     		mov	r2, r1
 963 0008 FB1D     		add	r3, r7, #7
 964 000a 011C     		add	r1, r0, #0
 965 000c 1970     		strb	r1, [r3]
 966 000e 3B1D     		add	r3, r7, #4
 967 0010 1A80     		strh	r2, [r3]
 206:.\main.c      ****     uint8 array[9];
 207:.\main.c      ****     
 208:.\main.c      ****     array[0] = 0xFF;
 968              		.loc 1 208 0
 969 0012 3B1C     		mov	r3, r7
 970 0014 0C33     		add	r3, r3, #12
 971 0016 FF22     		mov	r2, #255
 972 0018 1A70     		strb	r2, [r3]
 209:.\main.c      ****     array[1] = 0xFF;
 973              		.loc 1 209 0
 974 001a 3B1C     		mov	r3, r7
 975 001c 0C33     		add	r3, r3, #12
 976 001e FF22     		mov	r2, #255
 977 0020 5A70     		strb	r2, [r3, #1]
 210:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 978              		.loc 1 210 0
 979 0022 3B1C     		mov	r3, r7
 980 0024 0C33     		add	r3, r3, #12
 981 0026 FA1D     		add	r2, r7, #7
 982 0028 1278     		ldrb	r2, [r2]
 983 002a 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 22


 211:.\main.c      ****     array[3] = 0x05;
 984              		.loc 1 211 0
 985 002c 3B1C     		mov	r3, r7
 986 002e 0C33     		add	r3, r3, #12
 987 0030 0522     		mov	r2, #5
 988 0032 DA70     		strb	r2, [r3, #3]
 212:.\main.c      ****     array[4] = 0x03; //write instruction
 989              		.loc 1 212 0
 990 0034 3B1C     		mov	r3, r7
 991 0036 0C33     		add	r3, r3, #12
 992 0038 0322     		mov	r2, #3
 993 003a 1A71     		strb	r2, [r3, #4]
 213:.\main.c      ****     array[5] = 0x1E;
 994              		.loc 1 213 0
 995 003c 3B1C     		mov	r3, r7
 996 003e 0C33     		add	r3, r3, #12
 997 0040 1E22     		mov	r2, #30
 998 0042 5A71     		strb	r2, [r3, #5]
 214:.\main.c      ****     array[6] = position;
 999              		.loc 1 214 0
 1000 0044 3B1D     		add	r3, r7, #4
 1001 0046 1B88     		ldrh	r3, [r3]
 1002 0048 DAB2     		uxtb	r2, r3
 1003 004a 3B1C     		mov	r3, r7
 1004 004c 0C33     		add	r3, r3, #12
 1005 004e 9A71     		strb	r2, [r3, #6]
 215:.\main.c      ****     array[7] = position >> 8;
 1006              		.loc 1 215 0
 1007 0050 3B1D     		add	r3, r7, #4
 1008 0052 1B88     		ldrh	r3, [r3]
 1009 0054 1B0A     		lsr	r3, r3, #8
 1010 0056 9BB2     		uxth	r3, r3
 1011 0058 DAB2     		uxtb	r2, r3
 1012 005a 3B1C     		mov	r3, r7
 1013 005c 0C33     		add	r3, r3, #12
 1014 005e DA71     		strb	r2, [r3, #7]
 216:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1015              		.loc 1 216 0
 1016 0060 3B1C     		mov	r3, r7
 1017 0062 0C33     		add	r3, r3, #12
 1018 0064 9A79     		ldrb	r2, [r3, #6]
 1019 0066 FB1D     		add	r3, r7, #7
 1020 0068 1B78     		ldrb	r3, [r3]
 1021 006a D318     		add	r3, r2, r3
 1022 006c DAB2     		uxtb	r2, r3
 1023 006e 3B1C     		mov	r3, r7
 1024 0070 0C33     		add	r3, r3, #12
 1025 0072 DB79     		ldrb	r3, [r3, #7]
 1026 0074 D318     		add	r3, r2, r3
 1027 0076 DBB2     		uxtb	r3, r3
 1028 0078 2633     		add	r3, r3, #38
 1029 007a DBB2     		uxtb	r3, r3
 1030 007c DB43     		mvn	r3, r3
 1031 007e DAB2     		uxtb	r2, r3
 1032 0080 3B1C     		mov	r3, r7
 1033 0082 0C33     		add	r3, r3, #12
 1034 0084 1A72     		strb	r2, [r3, #8]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 23


 217:.\main.c      ****     
 218:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1035              		.loc 1 218 0
 1036 0086 3B1C     		mov	r3, r7
 1037 0088 0C33     		add	r3, r3, #12
 1038 008a 181C     		mov	r0, r3
 1039 008c 0921     		mov	r1, #9
 1040 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 219:.\main.c      **** }
 1041              		.loc 1 219 0
 1042 0092 BD46     		mov	sp, r7
 1043 0094 06B0     		add	sp, sp, #24
 1044              		@ sp needed
 1045 0096 80BD     		pop	{r7, pc}
 1046              		.cfi_endproc
 1047              	.LFE43:
 1048              		.size	ServoGoalPosition, .-ServoGoalPosition
 1049              		.section	.text.SetServoTorque,"ax",%progbits
 1050              		.align	2
 1051              		.global	SetServoTorque
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	SetServoTorque, %function
 1055              	SetServoTorque:
 1056              	.LFB44:
 220:.\main.c      **** 
 221:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 222:.\main.c      **** {
 1057              		.loc 1 222 0
 1058              		.cfi_startproc
 1059 0000 80B5     		push	{r7, lr}
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 86B0     		sub	sp, sp, #24
 1064              		.cfi_def_cfa_offset 32
 1065 0004 00AF     		add	r7, sp, #0
 1066              		.cfi_def_cfa_register 7
 1067 0006 0A1C     		mov	r2, r1
 1068 0008 FB1D     		add	r3, r7, #7
 1069 000a 011C     		add	r1, r0, #0
 1070 000c 1970     		strb	r1, [r3]
 1071 000e 3B1D     		add	r3, r7, #4
 1072 0010 1A80     		strh	r2, [r3]
 223:.\main.c      ****     uint8 array[9];
 224:.\main.c      ****     
 225:.\main.c      ****     array[0] = 0xFF;
 1073              		.loc 1 225 0
 1074 0012 3B1C     		mov	r3, r7
 1075 0014 0C33     		add	r3, r3, #12
 1076 0016 FF22     		mov	r2, #255
 1077 0018 1A70     		strb	r2, [r3]
 226:.\main.c      ****     array[1] = 0xFF;
 1078              		.loc 1 226 0
 1079 001a 3B1C     		mov	r3, r7
 1080 001c 0C33     		add	r3, r3, #12
 1081 001e FF22     		mov	r2, #255
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 24


 1082 0020 5A70     		strb	r2, [r3, #1]
 227:.\main.c      ****     array[2] = servoID; 
 1083              		.loc 1 227 0
 1084 0022 3B1C     		mov	r3, r7
 1085 0024 0C33     		add	r3, r3, #12
 1086 0026 FA1D     		add	r2, r7, #7
 1087 0028 1278     		ldrb	r2, [r2]
 1088 002a 9A70     		strb	r2, [r3, #2]
 228:.\main.c      ****     array[3] = 0x05;
 1089              		.loc 1 228 0
 1090 002c 3B1C     		mov	r3, r7
 1091 002e 0C33     		add	r3, r3, #12
 1092 0030 0522     		mov	r2, #5
 1093 0032 DA70     		strb	r2, [r3, #3]
 229:.\main.c      ****     array[4] = 0x03; //write instruction
 1094              		.loc 1 229 0
 1095 0034 3B1C     		mov	r3, r7
 1096 0036 0C33     		add	r3, r3, #12
 1097 0038 0322     		mov	r2, #3
 1098 003a 1A71     		strb	r2, [r3, #4]
 230:.\main.c      ****     array[5] = 0x0E;
 1099              		.loc 1 230 0
 1100 003c 3B1C     		mov	r3, r7
 1101 003e 0C33     		add	r3, r3, #12
 1102 0040 0E22     		mov	r2, #14
 1103 0042 5A71     		strb	r2, [r3, #5]
 231:.\main.c      ****     array[6] = torque;
 1104              		.loc 1 231 0
 1105 0044 3B1D     		add	r3, r7, #4
 1106 0046 1B88     		ldrh	r3, [r3]
 1107 0048 DAB2     		uxtb	r2, r3
 1108 004a 3B1C     		mov	r3, r7
 1109 004c 0C33     		add	r3, r3, #12
 1110 004e 9A71     		strb	r2, [r3, #6]
 232:.\main.c      ****     array[7] = torque >> 8;
 1111              		.loc 1 232 0
 1112 0050 3B1D     		add	r3, r7, #4
 1113 0052 1B88     		ldrh	r3, [r3]
 1114 0054 1B0A     		lsr	r3, r3, #8
 1115 0056 9BB2     		uxth	r3, r3
 1116 0058 DAB2     		uxtb	r2, r3
 1117 005a 3B1C     		mov	r3, r7
 1118 005c 0C33     		add	r3, r3, #12
 1119 005e DA71     		strb	r2, [r3, #7]
 233:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1120              		.loc 1 233 0
 1121 0060 3B1C     		mov	r3, r7
 1122 0062 0C33     		add	r3, r3, #12
 1123 0064 9A79     		ldrb	r2, [r3, #6]
 1124 0066 FB1D     		add	r3, r7, #7
 1125 0068 1B78     		ldrb	r3, [r3]
 1126 006a D318     		add	r3, r2, r3
 1127 006c DAB2     		uxtb	r2, r3
 1128 006e 3B1C     		mov	r3, r7
 1129 0070 0C33     		add	r3, r3, #12
 1130 0072 DB79     		ldrb	r3, [r3, #7]
 1131 0074 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 25


 1132 0076 DBB2     		uxtb	r3, r3
 1133 0078 1633     		add	r3, r3, #22
 1134 007a DBB2     		uxtb	r3, r3
 1135 007c DB43     		mvn	r3, r3
 1136 007e DAB2     		uxtb	r2, r3
 1137 0080 3B1C     		mov	r3, r7
 1138 0082 0C33     		add	r3, r3, #12
 1139 0084 1A72     		strb	r2, [r3, #8]
 234:.\main.c      ****     
 235:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1140              		.loc 1 235 0
 1141 0086 3B1C     		mov	r3, r7
 1142 0088 0C33     		add	r3, r3, #12
 1143 008a 181C     		mov	r0, r3
 1144 008c 0921     		mov	r1, #9
 1145 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 236:.\main.c      ****     
 237:.\main.c      **** }    
 1146              		.loc 1 237 0
 1147 0092 BD46     		mov	sp, r7
 1148 0094 06B0     		add	sp, sp, #24
 1149              		@ sp needed
 1150 0096 80BD     		pop	{r7, pc}
 1151              		.cfi_endproc
 1152              	.LFE44:
 1153              		.size	SetServoTorque, .-SetServoTorque
 1154              		.section	.text.ServoSpeed,"ax",%progbits
 1155              		.align	2
 1156              		.global	ServoSpeed
 1157              		.code	16
 1158              		.thumb_func
 1159              		.type	ServoSpeed, %function
 1160              	ServoSpeed:
 1161              	.LFB45:
 238:.\main.c      **** 
 239:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 240:.\main.c      **** {
 1162              		.loc 1 240 0
 1163              		.cfi_startproc
 1164 0000 80B5     		push	{r7, lr}
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
 1168 0002 86B0     		sub	sp, sp, #24
 1169              		.cfi_def_cfa_offset 32
 1170 0004 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 1172 0006 0A1C     		mov	r2, r1
 1173 0008 FB1D     		add	r3, r7, #7
 1174 000a 011C     		add	r1, r0, #0
 1175 000c 1970     		strb	r1, [r3]
 1176 000e 3B1D     		add	r3, r7, #4
 1177 0010 1A80     		strh	r2, [r3]
 241:.\main.c      ****     uint8 array[9];
 242:.\main.c      ****     
 243:.\main.c      ****     array[0] = 0xFF;
 1178              		.loc 1 243 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 26


 1179 0012 3B1C     		mov	r3, r7
 1180 0014 0C33     		add	r3, r3, #12
 1181 0016 FF22     		mov	r2, #255
 1182 0018 1A70     		strb	r2, [r3]
 244:.\main.c      ****     array[1] = 0xFF;
 1183              		.loc 1 244 0
 1184 001a 3B1C     		mov	r3, r7
 1185 001c 0C33     		add	r3, r3, #12
 1186 001e FF22     		mov	r2, #255
 1187 0020 5A70     		strb	r2, [r3, #1]
 245:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1188              		.loc 1 245 0
 1189 0022 3B1C     		mov	r3, r7
 1190 0024 0C33     		add	r3, r3, #12
 1191 0026 FA1D     		add	r2, r7, #7
 1192 0028 1278     		ldrb	r2, [r2]
 1193 002a 9A70     		strb	r2, [r3, #2]
 246:.\main.c      ****     array[3] = 0x05;
 1194              		.loc 1 246 0
 1195 002c 3B1C     		mov	r3, r7
 1196 002e 0C33     		add	r3, r3, #12
 1197 0030 0522     		mov	r2, #5
 1198 0032 DA70     		strb	r2, [r3, #3]
 247:.\main.c      ****     array[4] = 0x03; //write instruction
 1199              		.loc 1 247 0
 1200 0034 3B1C     		mov	r3, r7
 1201 0036 0C33     		add	r3, r3, #12
 1202 0038 0322     		mov	r2, #3
 1203 003a 1A71     		strb	r2, [r3, #4]
 248:.\main.c      ****     array[5] = 0x20;
 1204              		.loc 1 248 0
 1205 003c 3B1C     		mov	r3, r7
 1206 003e 0C33     		add	r3, r3, #12
 1207 0040 2022     		mov	r2, #32
 1208 0042 5A71     		strb	r2, [r3, #5]
 249:.\main.c      ****     array[6] = speed;
 1209              		.loc 1 249 0
 1210 0044 3B1D     		add	r3, r7, #4
 1211 0046 1B88     		ldrh	r3, [r3]
 1212 0048 DAB2     		uxtb	r2, r3
 1213 004a 3B1C     		mov	r3, r7
 1214 004c 0C33     		add	r3, r3, #12
 1215 004e 9A71     		strb	r2, [r3, #6]
 250:.\main.c      ****     array[7] = speed >> 8;
 1216              		.loc 1 250 0
 1217 0050 3B1D     		add	r3, r7, #4
 1218 0052 1B88     		ldrh	r3, [r3]
 1219 0054 1B0A     		lsr	r3, r3, #8
 1220 0056 9BB2     		uxth	r3, r3
 1221 0058 DAB2     		uxtb	r2, r3
 1222 005a 3B1C     		mov	r3, r7
 1223 005c 0C33     		add	r3, r3, #12
 1224 005e DA71     		strb	r2, [r3, #7]
 251:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1225              		.loc 1 251 0
 1226 0060 3B1C     		mov	r3, r7
 1227 0062 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 27


 1228 0064 9A79     		ldrb	r2, [r3, #6]
 1229 0066 FB1D     		add	r3, r7, #7
 1230 0068 1B78     		ldrb	r3, [r3]
 1231 006a D318     		add	r3, r2, r3
 1232 006c DAB2     		uxtb	r2, r3
 1233 006e 3B1C     		mov	r3, r7
 1234 0070 0C33     		add	r3, r3, #12
 1235 0072 DB79     		ldrb	r3, [r3, #7]
 1236 0074 D318     		add	r3, r2, r3
 1237 0076 DBB2     		uxtb	r3, r3
 1238 0078 2833     		add	r3, r3, #40
 1239 007a DBB2     		uxtb	r3, r3
 1240 007c DB43     		mvn	r3, r3
 1241 007e DAB2     		uxtb	r2, r3
 1242 0080 3B1C     		mov	r3, r7
 1243 0082 0C33     		add	r3, r3, #12
 1244 0084 1A72     		strb	r2, [r3, #8]
 252:.\main.c      ****     
 253:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1245              		.loc 1 253 0
 1246 0086 3B1C     		mov	r3, r7
 1247 0088 0C33     		add	r3, r3, #12
 1248 008a 181C     		mov	r0, r3
 1249 008c 0921     		mov	r1, #9
 1250 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 254:.\main.c      ****     
 255:.\main.c      **** }
 1251              		.loc 1 255 0
 1252 0092 BD46     		mov	sp, r7
 1253 0094 06B0     		add	sp, sp, #24
 1254              		@ sp needed
 1255 0096 80BD     		pop	{r7, pc}
 1256              		.cfi_endproc
 1257              	.LFE45:
 1258              		.size	ServoSpeed, .-ServoSpeed
 1259              		.comm	wristTilt_state,1,1
 1260              		.section	.text.wristTilt,"ax",%progbits
 1261              		.align	2
 1262              		.global	wristTilt
 1263              		.code	16
 1264              		.thumb_func
 1265              		.type	wristTilt, %function
 1266              	wristTilt:
 1267              	.LFB46:
 256:.\main.c      **** 
 257:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 258:.\main.c      **** //control the tilting motion of the wrist
 259:.\main.c      **** void wristTilt()
 260:.\main.c      **** {
 1268              		.loc 1 260 0
 1269              		.cfi_startproc
 1270 0000 90B5     		push	{r4, r7, lr}
 1271              		.cfi_def_cfa_offset 12
 1272              		.cfi_offset 4, -12
 1273              		.cfi_offset 7, -8
 1274              		.cfi_offset 14, -4
 1275 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 28


 1276              		.cfi_def_cfa_offset 24
 1277 0004 00AF     		add	r7, sp, #0
 1278              		.cfi_def_cfa_register 7
 261:.\main.c      ****     // Overview
 262:.\main.c      ****     //take instruction from data_array
 263:.\main.c      ****     //smooth input
 264:.\main.c      ****     //actuate the tilting using UART
 265:.\main.c      ****     //get feedback
 266:.\main.c      **** 
 267:.\main.c      ****     //-------------------------- 
 268:.\main.c      ****     // Dynamixel Servo specific
 269:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 270:.\main.c      ****     // TODO: Set the desired position
 271:.\main.c      **** 
 272:.\main.c      ****     //--------------------------
 273:.\main.c      ****     // State machine
 274:.\main.c      ****     
 275:.\main.c      ****     uint8 i;
 276:.\main.c      ****     uint16 avg;
 277:.\main.c      ****     uint16 command;
 278:.\main.c      ****     
 279:.\main.c      ****     switch(wristTilt_state){ //actions
 1279              		.loc 1 279 0
 1280 0006 4B4B     		ldr	r3, .L75
 1281 0008 1B78     		ldrb	r3, [r3]
 1282 000a 012B     		cmp	r3, #1
 1283 000c 03D0     		beq	.L53
 1284 000e 60DD     		ble	.L74
 1285 0010 022B     		cmp	r3, #2
 1286 0012 1CD0     		beq	.L56
 280:.\main.c      ****         case tilt_start:
 281:.\main.c      ****             break;
 282:.\main.c      **** 
 283:.\main.c      ****         case tilt_init:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 285:.\main.c      ****             {
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 287:.\main.c      ****             }
 288:.\main.c      ****             WT_arr_cspot = 0;
 289:.\main.c      ****             
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 291:.\main.c      ****             break;
 292:.\main.c      **** 
 293:.\main.c      ****         case tilt_control:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 295:.\main.c      ****             
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 297:.\main.c      ****             
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 299:.\main.c      ****             {
 300:.\main.c      ****                 WT_arr_cspot++;
 301:.\main.c      ****             }
 302:.\main.c      ****             else
 303:.\main.c      ****             {
 304:.\main.c      ****                 WT_arr_cspot = 0;
 305:.\main.c      ****             }
 306:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 29


 307:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 308:.\main.c      ****             
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 310:.\main.c      ****             
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 312:.\main.c      ****             {
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 314:.\main.c      ****             }
 315:.\main.c      ****             else
 316:.\main.c      ****             {
 317:.\main.c      ****                 //throw error
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 319:.\main.c      ****             }
 320:.\main.c      ****             WT_FLAG = 0;
 321:.\main.c      ****             break;
 322:.\main.c      ****             
 323:.\main.c      ****         case tilt_wait:
 324:.\main.c      ****             break;
 1287              		.loc 1 324 0
 1288 0014 5EE0     		b	.L52
 1289              	.L53:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1290              		.loc 1 284 0
 1291 0016 FB1D     		add	r3, r7, #7
 1292 0018 0022     		mov	r2, #0
 1293 001a 1A70     		strb	r2, [r3]
 1294 001c 0AE0     		b	.L58
 1295              	.L59:
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1296              		.loc 1 286 0 discriminator 2
 1297 001e FB1D     		add	r3, r7, #7
 1298 0020 1A78     		ldrb	r2, [r3]
 1299 0022 454B     		ldr	r3, .L75+4
 1300 0024 5200     		lsl	r2, r2, #1
 1301 0026 4549     		ldr	r1, .L75+8
 1302 0028 D152     		strh	r1, [r2, r3]
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1303              		.loc 1 284 0 discriminator 2
 1304 002a FB1D     		add	r3, r7, #7
 1305 002c 1A78     		ldrb	r2, [r3]
 1306 002e FB1D     		add	r3, r7, #7
 1307 0030 0132     		add	r2, r2, #1
 1308 0032 1A70     		strb	r2, [r3]
 1309              	.L58:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1310              		.loc 1 284 0 is_stmt 0 discriminator 1
 1311 0034 FB1D     		add	r3, r7, #7
 1312 0036 1B78     		ldrb	r3, [r3]
 1313 0038 132B     		cmp	r3, #19
 1314 003a F0D9     		bls	.L59
 288:.\main.c      ****             WT_arr_cspot = 0;
 1315              		.loc 1 288 0 is_stmt 1
 1316 003c 404B     		ldr	r3, .L75+12
 1317 003e 0022     		mov	r2, #0
 1318 0040 1A70     		strb	r2, [r3]
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1319              		.loc 1 290 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 30


 1320 0042 3E4B     		ldr	r3, .L75+8
 1321 0044 0220     		mov	r0, #2
 1322 0046 191C     		mov	r1, r3
 1323 0048 FFF7FEFF 		bl	ServoGoalPosition
 291:.\main.c      ****             break;
 1324              		.loc 1 291 0
 1325 004c 42E0     		b	.L52
 1326              	.L56:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1327              		.loc 1 294 0
 1328 004e 3C1D     		add	r4, r7, #4
 1329 0050 3C4B     		ldr	r3, .L75+16
 1330 0052 181C     		mov	r0, r3
 1331 0054 1021     		mov	r1, #16
 1332 0056 1122     		mov	r2, #17
 1333 0058 FFF7FEFF 		bl	make_command
 1334 005c 031C     		mov	r3, r0
 1335 005e 2380     		strh	r3, [r4]
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1336              		.loc 1 296 0
 1337 0060 374B     		ldr	r3, .L75+12
 1338 0062 1B78     		ldrb	r3, [r3]
 1339 0064 1A1C     		mov	r2, r3
 1340 0066 344B     		ldr	r3, .L75+4
 1341 0068 5200     		lsl	r2, r2, #1
 1342 006a 391D     		add	r1, r7, #4
 1343 006c 0988     		ldrh	r1, [r1]
 1344 006e D152     		strh	r1, [r2, r3]
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1345              		.loc 1 298 0
 1346 0070 334B     		ldr	r3, .L75+12
 1347 0072 1B78     		ldrb	r3, [r3]
 1348 0074 122B     		cmp	r3, #18
 1349 0076 06D8     		bhi	.L60
 300:.\main.c      ****                 WT_arr_cspot++;
 1350              		.loc 1 300 0
 1351 0078 314B     		ldr	r3, .L75+12
 1352 007a 1B78     		ldrb	r3, [r3]
 1353 007c 0133     		add	r3, r3, #1
 1354 007e DAB2     		uxtb	r2, r3
 1355 0080 2F4B     		ldr	r3, .L75+12
 1356 0082 1A70     		strb	r2, [r3]
 1357 0084 02E0     		b	.L61
 1358              	.L60:
 304:.\main.c      ****                 WT_arr_cspot = 0;
 1359              		.loc 1 304 0
 1360 0086 2E4B     		ldr	r3, .L75+12
 1361 0088 0022     		mov	r2, #0
 1362 008a 1A70     		strb	r2, [r3]
 1363              	.L61:
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1364              		.loc 1 309 0
 1365 008c BC1C     		add	r4, r7, #2
 1366 008e 2A4B     		ldr	r3, .L75+4
 1367 0090 181C     		mov	r0, r3
 1368 0092 1421     		mov	r1, #20
 1369 0094 FFF7FEFF 		bl	average
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 31


 1370 0098 031C     		mov	r3, r0
 1371 009a 2380     		strh	r3, [r4]
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1372              		.loc 1 311 0
 1373 009c BB1C     		add	r3, r7, #2
 1374 009e 1A88     		ldrh	r2, [r3]
 1375 00a0 FA23     		mov	r3, #250
 1376 00a2 DB00     		lsl	r3, r3, #3
 1377 00a4 9A42     		cmp	r2, r3
 1378 00a6 0BD8     		bhi	.L62
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1379              		.loc 1 311 0 is_stmt 0 discriminator 1
 1380 00a8 BB1C     		add	r3, r7, #2
 1381 00aa 1A88     		ldrh	r2, [r3]
 1382 00ac 264B     		ldr	r3, .L75+20
 1383 00ae 9A42     		cmp	r2, r3
 1384 00b0 06D9     		bls	.L62
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1385              		.loc 1 313 0 is_stmt 1
 1386 00b2 BB1C     		add	r3, r7, #2
 1387 00b4 1B88     		ldrh	r3, [r3]
 1388 00b6 0220     		mov	r0, #2
 1389 00b8 191C     		mov	r1, r3
 1390 00ba FFF7FEFF 		bl	ServoGoalPosition
 1391 00be 04E0     		b	.L63
 1392              	.L62:
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1393              		.loc 1 318 0
 1394 00c0 1E4B     		ldr	r3, .L75+8
 1395 00c2 0220     		mov	r0, #2
 1396 00c4 191C     		mov	r1, r3
 1397 00c6 FFF7FEFF 		bl	ServoGoalPosition
 1398              	.L63:
 320:.\main.c      ****             WT_FLAG = 0;
 1399              		.loc 1 320 0
 1400 00ca 204B     		ldr	r3, .L75+24
 1401 00cc 0022     		mov	r2, #0
 1402 00ce 1A70     		strb	r2, [r3]
 321:.\main.c      ****             break;
 1403              		.loc 1 321 0
 1404 00d0 00E0     		b	.L52
 1405              	.L74:
 281:.\main.c      ****             break;
 1406              		.loc 1 281 0
 1407 00d2 C046     		mov	r8, r8
 1408              	.L52:
 325:.\main.c      ****     }
 326:.\main.c      ****     
 327:.\main.c      ****     switch(wristTilt_state){ //transitions
 1409              		.loc 1 327 0
 1410 00d4 174B     		ldr	r3, .L75
 1411 00d6 1B78     		ldrb	r3, [r3]
 1412 00d8 012B     		cmp	r3, #1
 1413 00da 0CD0     		beq	.L65
 1414 00dc 02DC     		bgt	.L66
 1415 00de 002B     		cmp	r3, #0
 1416 00e0 05D0     		beq	.L67
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 32


 1417 00e2 24E0     		b	.L51
 1418              	.L66:
 1419 00e4 022B     		cmp	r3, #2
 1420 00e6 0AD0     		beq	.L68
 1421 00e8 032B     		cmp	r3, #3
 1422 00ea 14D0     		beq	.L69
 1423 00ec 1FE0     		b	.L51
 1424              	.L67:
 328:.\main.c      ****         case tilt_start:
 329:.\main.c      ****             wristTilt_state = tilt_init;
 1425              		.loc 1 329 0
 1426 00ee 114B     		ldr	r3, .L75
 1427 00f0 0122     		mov	r2, #1
 1428 00f2 1A70     		strb	r2, [r3]
 330:.\main.c      ****             break;
 1429              		.loc 1 330 0
 1430 00f4 1BE0     		b	.L51
 1431              	.L65:
 331:.\main.c      ****         
 332:.\main.c      ****         case tilt_init:
 333:.\main.c      ****             wristTilt_state = tilt_wait;
 1432              		.loc 1 333 0
 1433 00f6 0F4B     		ldr	r3, .L75
 1434 00f8 0322     		mov	r2, #3
 1435 00fa 1A70     		strb	r2, [r3]
 334:.\main.c      ****             break;
 1436              		.loc 1 334 0
 1437 00fc 17E0     		b	.L51
 1438              	.L68:
 335:.\main.c      ****         
 336:.\main.c      ****         case tilt_control:
 337:.\main.c      ****             if(WT_FLAG)
 1439              		.loc 1 337 0
 1440 00fe 134B     		ldr	r3, .L75+24
 1441 0100 1B78     		ldrb	r3, [r3]
 1442 0102 002B     		cmp	r3, #0
 1443 0104 03D0     		beq	.L70
 338:.\main.c      ****             {
 339:.\main.c      ****                 wristTilt_state = tilt_control;
 1444              		.loc 1 339 0
 1445 0106 0B4B     		ldr	r3, .L75
 1446 0108 0222     		mov	r2, #2
 1447 010a 1A70     		strb	r2, [r3]
 340:.\main.c      ****             }
 341:.\main.c      ****             else
 342:.\main.c      ****             {
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 344:.\main.c      ****             }
 345:.\main.c      ****             break;
 1448              		.loc 1 345 0
 1449 010c 0FE0     		b	.L51
 1450              	.L70:
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 1451              		.loc 1 343 0
 1452 010e 094B     		ldr	r3, .L75
 1453 0110 0322     		mov	r2, #3
 1454 0112 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 33


 1455              		.loc 1 345 0
 1456 0114 0BE0     		b	.L51
 1457              	.L69:
 346:.\main.c      ****         
 347:.\main.c      ****         case tilt_wait:
 348:.\main.c      ****             if(WT_FLAG)
 1458              		.loc 1 348 0
 1459 0116 0D4B     		ldr	r3, .L75+24
 1460 0118 1B78     		ldrb	r3, [r3]
 1461 011a 002B     		cmp	r3, #0
 1462 011c 03D0     		beq	.L72
 349:.\main.c      ****             {
 350:.\main.c      ****                 wristTilt_state = tilt_control;
 1463              		.loc 1 350 0
 1464 011e 054B     		ldr	r3, .L75
 1465 0120 0222     		mov	r2, #2
 1466 0122 1A70     		strb	r2, [r3]
 1467 0124 02E0     		b	.L73
 1468              	.L72:
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1469              		.loc 1 354 0
 1470 0126 034B     		ldr	r3, .L75
 1471 0128 0322     		mov	r2, #3
 1472 012a 1A70     		strb	r2, [r3]
 1473              	.L73:
 355:.\main.c      ****             }
 356:.\main.c      ****             break;
 1474              		.loc 1 356 0
 1475 012c C046     		mov	r8, r8
 1476              	.L51:
 357:.\main.c      ****     }    
 358:.\main.c      **** }
 1477              		.loc 1 358 0
 1478 012e BD46     		mov	sp, r7
 1479 0130 03B0     		add	sp, sp, #12
 1480              		@ sp needed
 1481 0132 90BD     		pop	{r4, r7, pc}
 1482              	.L76:
 1483              		.align	2
 1484              	.L75:
 1485 0134 00000000 		.word	wristTilt_state
 1486 0138 00000000 		.word	WT_array
 1487 013c DC050000 		.word	1500
 1488 0140 00000000 		.word	WT_arr_cspot
 1489 0144 00000000 		.word	data_array
 1490 0148 E7030000 		.word	999
 1491 014c 00000000 		.word	WT_FLAG
 1492              		.cfi_endproc
 1493              	.LFE46:
 1494              		.size	wristTilt, .-wristTilt
 1495              		.comm	wristRotate_state,1,1
 1496              		.section	.text.wristRotate,"ax",%progbits
 1497              		.align	2
 1498              		.global	wristRotate
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 34


 1499              		.code	16
 1500              		.thumb_func
 1501              		.type	wristRotate, %function
 1502              	wristRotate:
 1503              	.LFB47:
 359:.\main.c      **** 
 360:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 361:.\main.c      **** //control the rotating motion of the wrist
 362:.\main.c      **** void wristRotate()
 363:.\main.c      **** {
 1504              		.loc 1 363 0
 1505              		.cfi_startproc
 1506 0000 90B5     		push	{r4, r7, lr}
 1507              		.cfi_def_cfa_offset 12
 1508              		.cfi_offset 4, -12
 1509              		.cfi_offset 7, -8
 1510              		.cfi_offset 14, -4
 1511 0002 83B0     		sub	sp, sp, #12
 1512              		.cfi_def_cfa_offset 24
 1513 0004 00AF     		add	r7, sp, #0
 1514              		.cfi_def_cfa_register 7
 364:.\main.c      ****     //Overview
 365:.\main.c      ****     //take instruction from data_array
 366:.\main.c      ****     //smooth input
 367:.\main.c      ****     //actuate the tilting using UART
 368:.\main.c      ****     //get feedback
 369:.\main.c      **** 
 370:.\main.c      ****     //-------------------------- 
 371:.\main.c      ****     // Dynamixel Servo specific
 372:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 373:.\main.c      ****     // TODO: Set the desired position
 374:.\main.c      **** 
 375:.\main.c      ****     //--------------------------
 376:.\main.c      ****     // State machine
 377:.\main.c      ****     
 378:.\main.c      ****     uint8 i;
 379:.\main.c      ****     uint16 avg;
 380:.\main.c      ****     uint16 command;
 381:.\main.c      ****     
 382:.\main.c      ****     switch(wristRotate_state){ //actions
 1515              		.loc 1 382 0
 1516 0006 4B4B     		ldr	r3, .L101
 1517 0008 1B78     		ldrb	r3, [r3]
 1518 000a 012B     		cmp	r3, #1
 1519 000c 03D0     		beq	.L79
 1520 000e 60DD     		ble	.L100
 1521 0010 022B     		cmp	r3, #2
 1522 0012 1CD0     		beq	.L82
 383:.\main.c      ****         case rotate_start:
 384:.\main.c      ****             break;
 385:.\main.c      **** 
 386:.\main.c      ****         case rotate_init:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 388:.\main.c      ****             {
 389:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 390:.\main.c      ****             }
 391:.\main.c      ****             WR_arr_cspot = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 35


 392:.\main.c      ****             
 393:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 394:.\main.c      ****             break;
 395:.\main.c      **** 
 396:.\main.c      ****         case rotate_control:
 397:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 398:.\main.c      ****             
 399:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 400:.\main.c      ****             
 401:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 402:.\main.c      ****             {
 403:.\main.c      ****                 WR_arr_cspot++;
 404:.\main.c      ****             }
 405:.\main.c      ****             else
 406:.\main.c      ****             {
 407:.\main.c      ****                 WR_arr_cspot = 0;
 408:.\main.c      ****             }
 409:.\main.c      ****             
 410:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 411:.\main.c      ****             
 412:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 413:.\main.c      ****             
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 415:.\main.c      ****             {
 416:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 417:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 418:.\main.c      ****             }
 419:.\main.c      ****             else
 420:.\main.c      ****             {
 421:.\main.c      ****                 //throw error
 422:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 423:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 424:.\main.c      ****             }
 425:.\main.c      ****             WR_FLAG = 0;
 426:.\main.c      ****             break;
 427:.\main.c      ****             
 428:.\main.c      ****         case rotate_wait:
 429:.\main.c      ****             break;
 1523              		.loc 1 429 0
 1524 0014 5EE0     		b	.L78
 1525              	.L79:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1526              		.loc 1 387 0
 1527 0016 FB1D     		add	r3, r7, #7
 1528 0018 0022     		mov	r2, #0
 1529 001a 1A70     		strb	r2, [r3]
 1530 001c 0AE0     		b	.L84
 1531              	.L85:
 389:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 1532              		.loc 1 389 0 discriminator 2
 1533 001e FB1D     		add	r3, r7, #7
 1534 0020 1A78     		ldrb	r2, [r3]
 1535 0022 454B     		ldr	r3, .L101+4
 1536 0024 5200     		lsl	r2, r2, #1
 1537 0026 4549     		ldr	r1, .L101+8
 1538 0028 D152     		strh	r1, [r2, r3]
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 36


 1539              		.loc 1 387 0 discriminator 2
 1540 002a FB1D     		add	r3, r7, #7
 1541 002c 1A78     		ldrb	r2, [r3]
 1542 002e FB1D     		add	r3, r7, #7
 1543 0030 0132     		add	r2, r2, #1
 1544 0032 1A70     		strb	r2, [r3]
 1545              	.L84:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1546              		.loc 1 387 0 is_stmt 0 discriminator 1
 1547 0034 FB1D     		add	r3, r7, #7
 1548 0036 1B78     		ldrb	r3, [r3]
 1549 0038 132B     		cmp	r3, #19
 1550 003a F0D9     		bls	.L85
 391:.\main.c      ****             WR_arr_cspot = 0;
 1551              		.loc 1 391 0 is_stmt 1
 1552 003c 404B     		ldr	r3, .L101+12
 1553 003e 0022     		mov	r2, #0
 1554 0040 1A70     		strb	r2, [r3]
 393:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 1555              		.loc 1 393 0
 1556 0042 3E4B     		ldr	r3, .L101+8
 1557 0044 0120     		mov	r0, #1
 1558 0046 191C     		mov	r1, r3
 1559 0048 FFF7FEFF 		bl	ServoGoalPosition
 394:.\main.c      ****             break;
 1560              		.loc 1 394 0
 1561 004c 42E0     		b	.L78
 1562              	.L82:
 397:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1563              		.loc 1 397 0
 1564 004e 3C1D     		add	r4, r7, #4
 1565 0050 3C4B     		ldr	r3, .L101+16
 1566 0052 181C     		mov	r0, r3
 1567 0054 1221     		mov	r1, #18
 1568 0056 1322     		mov	r2, #19
 1569 0058 FFF7FEFF 		bl	make_command
 1570 005c 031C     		mov	r3, r0
 1571 005e 2380     		strh	r3, [r4]
 399:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 1572              		.loc 1 399 0
 1573 0060 374B     		ldr	r3, .L101+12
 1574 0062 1B78     		ldrb	r3, [r3]
 1575 0064 1A1C     		mov	r2, r3
 1576 0066 344B     		ldr	r3, .L101+4
 1577 0068 5200     		lsl	r2, r2, #1
 1578 006a 391D     		add	r1, r7, #4
 1579 006c 0988     		ldrh	r1, [r1]
 1580 006e D152     		strh	r1, [r2, r3]
 401:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1581              		.loc 1 401 0
 1582 0070 334B     		ldr	r3, .L101+12
 1583 0072 1B78     		ldrb	r3, [r3]
 1584 0074 122B     		cmp	r3, #18
 1585 0076 06D8     		bhi	.L86
 403:.\main.c      ****                 WR_arr_cspot++;
 1586              		.loc 1 403 0
 1587 0078 314B     		ldr	r3, .L101+12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 37


 1588 007a 1B78     		ldrb	r3, [r3]
 1589 007c 0133     		add	r3, r3, #1
 1590 007e DAB2     		uxtb	r2, r3
 1591 0080 2F4B     		ldr	r3, .L101+12
 1592 0082 1A70     		strb	r2, [r3]
 1593 0084 02E0     		b	.L87
 1594              	.L86:
 407:.\main.c      ****                 WR_arr_cspot = 0;
 1595              		.loc 1 407 0
 1596 0086 2E4B     		ldr	r3, .L101+12
 1597 0088 0022     		mov	r2, #0
 1598 008a 1A70     		strb	r2, [r3]
 1599              	.L87:
 412:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1600              		.loc 1 412 0
 1601 008c BC1C     		add	r4, r7, #2
 1602 008e 2A4B     		ldr	r3, .L101+4
 1603 0090 181C     		mov	r0, r3
 1604 0092 1421     		mov	r1, #20
 1605 0094 FFF7FEFF 		bl	average
 1606 0098 031C     		mov	r3, r0
 1607 009a 2380     		strh	r3, [r4]
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1608              		.loc 1 414 0
 1609 009c BB1C     		add	r3, r7, #2
 1610 009e 1A88     		ldrh	r2, [r3]
 1611 00a0 FA23     		mov	r3, #250
 1612 00a2 DB00     		lsl	r3, r3, #3
 1613 00a4 9A42     		cmp	r2, r3
 1614 00a6 0BD8     		bhi	.L88
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1615              		.loc 1 414 0 is_stmt 0 discriminator 1
 1616 00a8 BB1C     		add	r3, r7, #2
 1617 00aa 1A88     		ldrh	r2, [r3]
 1618 00ac 264B     		ldr	r3, .L101+20
 1619 00ae 9A42     		cmp	r2, r3
 1620 00b0 06D9     		bls	.L88
 417:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1621              		.loc 1 417 0 is_stmt 1
 1622 00b2 BB1C     		add	r3, r7, #2
 1623 00b4 1B88     		ldrh	r3, [r3]
 1624 00b6 0120     		mov	r0, #1
 1625 00b8 191C     		mov	r1, r3
 1626 00ba FFF7FEFF 		bl	ServoGoalPosition
 1627 00be 04E0     		b	.L89
 1628              	.L88:
 423:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1629              		.loc 1 423 0
 1630 00c0 1E4B     		ldr	r3, .L101+8
 1631 00c2 0120     		mov	r0, #1
 1632 00c4 191C     		mov	r1, r3
 1633 00c6 FFF7FEFF 		bl	ServoGoalPosition
 1634              	.L89:
 425:.\main.c      ****             WR_FLAG = 0;
 1635              		.loc 1 425 0
 1636 00ca 204B     		ldr	r3, .L101+24
 1637 00cc 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 38


 1638 00ce 1A70     		strb	r2, [r3]
 426:.\main.c      ****             break;
 1639              		.loc 1 426 0
 1640 00d0 00E0     		b	.L78
 1641              	.L100:
 384:.\main.c      ****             break;
 1642              		.loc 1 384 0
 1643 00d2 C046     		mov	r8, r8
 1644              	.L78:
 430:.\main.c      ****     }
 431:.\main.c      ****     
 432:.\main.c      ****     switch(wristRotate_state){ //transitions
 1645              		.loc 1 432 0
 1646 00d4 174B     		ldr	r3, .L101
 1647 00d6 1B78     		ldrb	r3, [r3]
 1648 00d8 012B     		cmp	r3, #1
 1649 00da 0CD0     		beq	.L91
 1650 00dc 02DC     		bgt	.L92
 1651 00de 002B     		cmp	r3, #0
 1652 00e0 05D0     		beq	.L93
 1653 00e2 24E0     		b	.L77
 1654              	.L92:
 1655 00e4 022B     		cmp	r3, #2
 1656 00e6 0AD0     		beq	.L94
 1657 00e8 032B     		cmp	r3, #3
 1658 00ea 14D0     		beq	.L95
 1659 00ec 1FE0     		b	.L77
 1660              	.L93:
 433:.\main.c      ****         case rotate_start:
 434:.\main.c      ****             wristRotate_state = rotate_init;
 1661              		.loc 1 434 0
 1662 00ee 114B     		ldr	r3, .L101
 1663 00f0 0122     		mov	r2, #1
 1664 00f2 1A70     		strb	r2, [r3]
 435:.\main.c      ****             break;
 1665              		.loc 1 435 0
 1666 00f4 1BE0     		b	.L77
 1667              	.L91:
 436:.\main.c      ****         
 437:.\main.c      ****         case rotate_init:
 438:.\main.c      ****             wristRotate_state = rotate_wait;
 1668              		.loc 1 438 0
 1669 00f6 0F4B     		ldr	r3, .L101
 1670 00f8 0322     		mov	r2, #3
 1671 00fa 1A70     		strb	r2, [r3]
 439:.\main.c      ****             break;
 1672              		.loc 1 439 0
 1673 00fc 17E0     		b	.L77
 1674              	.L94:
 440:.\main.c      ****         
 441:.\main.c      ****         case rotate_control:
 442:.\main.c      ****             if(WR_FLAG)
 1675              		.loc 1 442 0
 1676 00fe 134B     		ldr	r3, .L101+24
 1677 0100 1B78     		ldrb	r3, [r3]
 1678 0102 002B     		cmp	r3, #0
 1679 0104 03D0     		beq	.L96
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 39


 443:.\main.c      ****             {
 444:.\main.c      ****                 wristRotate_state = rotate_control;
 1680              		.loc 1 444 0
 1681 0106 0B4B     		ldr	r3, .L101
 1682 0108 0222     		mov	r2, #2
 1683 010a 1A70     		strb	r2, [r3]
 445:.\main.c      ****             }
 446:.\main.c      ****             else
 447:.\main.c      ****             {
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 449:.\main.c      ****             }
 450:.\main.c      ****             break;
 1684              		.loc 1 450 0
 1685 010c 0FE0     		b	.L77
 1686              	.L96:
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 1687              		.loc 1 448 0
 1688 010e 094B     		ldr	r3, .L101
 1689 0110 0322     		mov	r2, #3
 1690 0112 1A70     		strb	r2, [r3]
 1691              		.loc 1 450 0
 1692 0114 0BE0     		b	.L77
 1693              	.L95:
 451:.\main.c      ****         
 452:.\main.c      ****         case rotate_wait:
 453:.\main.c      ****             if(WR_FLAG)
 1694              		.loc 1 453 0
 1695 0116 0D4B     		ldr	r3, .L101+24
 1696 0118 1B78     		ldrb	r3, [r3]
 1697 011a 002B     		cmp	r3, #0
 1698 011c 03D0     		beq	.L98
 454:.\main.c      ****             {
 455:.\main.c      ****                 wristRotate_state = rotate_control;
 1699              		.loc 1 455 0
 1700 011e 054B     		ldr	r3, .L101
 1701 0120 0222     		mov	r2, #2
 1702 0122 1A70     		strb	r2, [r3]
 1703 0124 02E0     		b	.L99
 1704              	.L98:
 456:.\main.c      ****             }
 457:.\main.c      ****             else
 458:.\main.c      ****             {
 459:.\main.c      ****                 wristRotate_state = rotate_wait;
 1705              		.loc 1 459 0
 1706 0126 034B     		ldr	r3, .L101
 1707 0128 0322     		mov	r2, #3
 1708 012a 1A70     		strb	r2, [r3]
 1709              	.L99:
 460:.\main.c      ****             }
 461:.\main.c      ****             break;
 1710              		.loc 1 461 0
 1711 012c C046     		mov	r8, r8
 1712              	.L77:
 462:.\main.c      ****     }    
 463:.\main.c      **** }
 1713              		.loc 1 463 0
 1714 012e BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 40


 1715 0130 03B0     		add	sp, sp, #12
 1716              		@ sp needed
 1717 0132 90BD     		pop	{r4, r7, pc}
 1718              	.L102:
 1719              		.align	2
 1720              	.L101:
 1721 0134 00000000 		.word	wristRotate_state
 1722 0138 00000000 		.word	WR_array
 1723 013c DC050000 		.word	1500
 1724 0140 00000000 		.word	WR_arr_cspot
 1725 0144 00000000 		.word	data_array
 1726 0148 E7030000 		.word	999
 1727 014c 00000000 		.word	WR_FLAG
 1728              		.cfi_endproc
 1729              	.LFE47:
 1730              		.size	wristRotate, .-wristRotate
 1731              		.comm	elbow_state,1,1
 1732              		.section	.text.elbow,"ax",%progbits
 1733              		.align	2
 1734              		.global	elbow
 1735              		.code	16
 1736              		.thumb_func
 1737              		.type	elbow, %function
 1738              	elbow:
 1739              	.LFB48:
 464:.\main.c      **** 
 465:.\main.c      **** //control the elbow
 466:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 467:.\main.c      **** void elbow()
 468:.\main.c      **** { 
 1740              		.loc 1 468 0
 1741              		.cfi_startproc
 1742 0000 90B5     		push	{r4, r7, lr}
 1743              		.cfi_def_cfa_offset 12
 1744              		.cfi_offset 4, -12
 1745              		.cfi_offset 7, -8
 1746              		.cfi_offset 14, -4
 1747 0002 83B0     		sub	sp, sp, #12
 1748              		.cfi_def_cfa_offset 24
 1749 0004 00AF     		add	r7, sp, #0
 1750              		.cfi_def_cfa_register 7
 469:.\main.c      ****     //take instruction from data_array
 470:.\main.c      ****     //smooth input
 471:.\main.c      ****     //actuate the elbow using PWM
 472:.\main.c      ****     //get feedback
 473:.\main.c      ****     uint8 i;
 474:.\main.c      ****     uint16 avg;
 475:.\main.c      ****     uint16 command;
 476:.\main.c      ****     
 477:.\main.c      ****     //TODO: make sure reading from correct pots
 478:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 1751              		.loc 1 478 0
 1752 0006 3C1D     		add	r4, r7, #4
 1753 0008 0120     		mov	r0, #1
 1754 000a FFF7FEFF 		bl	potFeedback
 1755 000e 031C     		mov	r3, r0
 1756 0010 2380     		strh	r3, [r4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 41


 479:.\main.c      ****     
 480:.\main.c      ****     switch(elbow_state){ //actions
 1757              		.loc 1 480 0
 1758 0012 784B     		ldr	r3, .L137
 1759 0014 1B78     		ldrb	r3, [r3]
 1760 0016 012B     		cmp	r3, #1
 1761 0018 07D0     		beq	.L105
 1762 001a 00DC     		bgt	.LCB1580
 1763 001c B8E0     		b	.L136	@long jump
 1764              	.LCB1580:
 1765 001e 022B     		cmp	r3, #2
 1766 0020 1ED0     		beq	.L108
 1767 0022 032B     		cmp	r3, #3
 1768 0024 00D1     		bne	.LCB1584
 1769 0026 A4E0     		b	.L109	@long jump
 1770              	.LCB1584:
 1771 0028 B3E0     		b	.L104
 1772              	.L105:
 481:.\main.c      ****         case elbw_start:
 482:.\main.c      ****             break;
 483:.\main.c      **** 
 484:.\main.c      ****         case elbw_init:
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1773              		.loc 1 485 0
 1774 002a FB1D     		add	r3, r7, #7
 1775 002c 0022     		mov	r2, #0
 1776 002e 1A70     		strb	r2, [r3]
 1777 0030 0AE0     		b	.L110
 1778              	.L111:
 486:.\main.c      ****             {
 487:.\main.c      ****                 elbow_array[i] = 1500;
 1779              		.loc 1 487 0 discriminator 2
 1780 0032 FB1D     		add	r3, r7, #7
 1781 0034 1A78     		ldrb	r2, [r3]
 1782 0036 704B     		ldr	r3, .L137+4
 1783 0038 5200     		lsl	r2, r2, #1
 1784 003a 7049     		ldr	r1, .L137+8
 1785 003c D152     		strh	r1, [r2, r3]
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1786              		.loc 1 485 0 discriminator 2
 1787 003e FB1D     		add	r3, r7, #7
 1788 0040 1A78     		ldrb	r2, [r3]
 1789 0042 FB1D     		add	r3, r7, #7
 1790 0044 0132     		add	r2, r2, #1
 1791 0046 1A70     		strb	r2, [r3]
 1792              	.L110:
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1793              		.loc 1 485 0 is_stmt 0 discriminator 1
 1794 0048 FB1D     		add	r3, r7, #7
 1795 004a 1B78     		ldrb	r3, [r3]
 1796 004c 132B     		cmp	r3, #19
 1797 004e F0D9     		bls	.L111
 488:.\main.c      ****             }
 489:.\main.c      ****             elbw_arr_cspot = 0;
 1798              		.loc 1 489 0 is_stmt 1
 1799 0050 6B4B     		ldr	r3, .L137+12
 1800 0052 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 42


 1801 0054 1A70     		strb	r2, [r3]
 490:.\main.c      ****             
 491:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 1802              		.loc 1 491 0
 1803 0056 694B     		ldr	r3, .L137+8
 1804 0058 181C     		mov	r0, r3
 1805 005a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 492:.\main.c      ****             break;
 1806              		.loc 1 492 0
 1807 005e 98E0     		b	.L104
 1808              	.L108:
 493:.\main.c      **** 
 494:.\main.c      ****         case elbw_execute:
 495:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 1809              		.loc 1 495 0
 1810 0060 BC1C     		add	r4, r7, #2
 1811 0062 684B     		ldr	r3, .L137+16
 1812 0064 181C     		mov	r0, r3
 1813 0066 0E21     		mov	r1, #14
 1814 0068 0F22     		mov	r2, #15
 1815 006a FFF7FEFF 		bl	make_command
 1816 006e 031C     		mov	r3, r0
 1817 0070 2380     		strh	r3, [r4]
 496:.\main.c      ****             
 497:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 1818              		.loc 1 497 0
 1819 0072 634B     		ldr	r3, .L137+12
 1820 0074 1B78     		ldrb	r3, [r3]
 1821 0076 1A1C     		mov	r2, r3
 1822 0078 5F4B     		ldr	r3, .L137+4
 1823 007a 5200     		lsl	r2, r2, #1
 1824 007c B91C     		add	r1, r7, #2
 1825 007e 0988     		ldrh	r1, [r1]
 1826 0080 D152     		strh	r1, [r2, r3]
 498:.\main.c      ****             
 499:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 1827              		.loc 1 499 0
 1828 0082 5F4B     		ldr	r3, .L137+12
 1829 0084 1B78     		ldrb	r3, [r3]
 1830 0086 122B     		cmp	r3, #18
 1831 0088 06D8     		bhi	.L112
 500:.\main.c      ****             {
 501:.\main.c      ****                 elbw_arr_cspot++;
 1832              		.loc 1 501 0
 1833 008a 5D4B     		ldr	r3, .L137+12
 1834 008c 1B78     		ldrb	r3, [r3]
 1835 008e 0133     		add	r3, r3, #1
 1836 0090 DAB2     		uxtb	r2, r3
 1837 0092 5B4B     		ldr	r3, .L137+12
 1838 0094 1A70     		strb	r2, [r3]
 1839 0096 02E0     		b	.L113
 1840              	.L112:
 502:.\main.c      ****             }
 503:.\main.c      ****             else
 504:.\main.c      ****             {
 505:.\main.c      ****                 elbw_arr_cspot = 0;
 1841              		.loc 1 505 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 43


 1842 0098 594B     		ldr	r3, .L137+12
 1843 009a 0022     		mov	r2, #0
 1844 009c 1A70     		strb	r2, [r3]
 1845              	.L113:
 506:.\main.c      ****             }
 507:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 1846              		.loc 1 507 0
 1847 009e 3C1C     		mov	r4, r7
 1848 00a0 554B     		ldr	r3, .L137+4
 1849 00a2 181C     		mov	r0, r3
 1850 00a4 1421     		mov	r1, #20
 1851 00a6 FFF7FEFF 		bl	average
 1852 00aa 031C     		mov	r3, r0
 1853 00ac 2380     		strh	r3, [r4]
 508:.\main.c      ****             
 509:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 1854              		.loc 1 509 0
 1855 00ae 3B1D     		add	r3, r7, #4
 1856 00b0 1B88     		ldrh	r3, [r3]
 1857 00b2 642B     		cmp	r3, #100
 1858 00b4 1FD8     		bhi	.L114
 510:.\main.c      ****             {
 511:.\main.c      ****                 if (avg < 1500)
 1859              		.loc 1 511 0
 1860 00b6 3B1C     		mov	r3, r7
 1861 00b8 1A88     		ldrh	r2, [r3]
 1862 00ba 534B     		ldr	r3, .L137+20
 1863 00bc 9A42     		cmp	r2, r3
 1864 00be 04D8     		bhi	.L115
 512:.\main.c      ****                 {
 513:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1865              		.loc 1 513 0
 1866 00c0 4E4B     		ldr	r3, .L137+8
 1867 00c2 181C     		mov	r0, r3
 1868 00c4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1869 00c8 4FE0     		b	.L118
 1870              	.L115:
 514:.\main.c      ****                 }
 515:.\main.c      ****                 else
 516:.\main.c      ****                 {
 517:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1871              		.loc 1 517 0
 1872 00ca 3B1C     		mov	r3, r7
 1873 00cc 1A88     		ldrh	r2, [r3]
 1874 00ce FA23     		mov	r3, #250
 1875 00d0 DB00     		lsl	r3, r3, #3
 1876 00d2 9A42     		cmp	r2, r3
 1877 00d4 0AD8     		bhi	.L117
 1878              		.loc 1 517 0 is_stmt 0 discriminator 1
 1879 00d6 3B1C     		mov	r3, r7
 1880 00d8 1A88     		ldrh	r2, [r3]
 1881 00da 4C4B     		ldr	r3, .L137+24
 1882 00dc 9A42     		cmp	r2, r3
 1883 00de 05D9     		bls	.L117
 518:.\main.c      ****                     {
 519:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1884              		.loc 1 519 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 44


 1885 00e0 3B1C     		mov	r3, r7
 1886 00e2 1B88     		ldrh	r3, [r3]
 1887 00e4 181C     		mov	r0, r3
 1888 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1889 00ea 3EE0     		b	.L118
 1890              	.L117:
 520:.\main.c      ****                     }
 521:.\main.c      ****                     else
 522:.\main.c      ****                     {
 523:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1891              		.loc 1 523 0
 1892 00ec 434B     		ldr	r3, .L137+8
 1893 00ee 181C     		mov	r0, r3
 1894 00f0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1895 00f4 39E0     		b	.L118
 1896              	.L114:
 524:.\main.c      ****                     }
 525:.\main.c      ****                 }
 526:.\main.c      ****             }
 527:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 1897              		.loc 1 527 0
 1898 00f6 3B1D     		add	r3, r7, #4
 1899 00f8 1A88     		ldrh	r2, [r3]
 1900 00fa 444B     		ldr	r3, .L137+24
 1901 00fc 9A42     		cmp	r2, r3
 1902 00fe 1FD9     		bls	.L119
 528:.\main.c      ****             {
 529:.\main.c      ****                 if(avg > 1500)
 1903              		.loc 1 529 0
 1904 0100 3B1C     		mov	r3, r7
 1905 0102 1A88     		ldrh	r2, [r3]
 1906 0104 3D4B     		ldr	r3, .L137+8
 1907 0106 9A42     		cmp	r2, r3
 1908 0108 04D9     		bls	.L120
 530:.\main.c      ****                 {
 531:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1909              		.loc 1 531 0
 1910 010a 3C4B     		ldr	r3, .L137+8
 1911 010c 181C     		mov	r0, r3
 1912 010e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1913 0112 2AE0     		b	.L118
 1914              	.L120:
 532:.\main.c      ****                 }
 533:.\main.c      ****                 else
 534:.\main.c      ****                 {
 535:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1915              		.loc 1 535 0
 1916 0114 3B1C     		mov	r3, r7
 1917 0116 1A88     		ldrh	r2, [r3]
 1918 0118 FA23     		mov	r3, #250
 1919 011a DB00     		lsl	r3, r3, #3
 1920 011c 9A42     		cmp	r2, r3
 1921 011e 0AD8     		bhi	.L122
 1922              		.loc 1 535 0 is_stmt 0 discriminator 1
 1923 0120 3B1C     		mov	r3, r7
 1924 0122 1A88     		ldrh	r2, [r3]
 1925 0124 394B     		ldr	r3, .L137+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 45


 1926 0126 9A42     		cmp	r2, r3
 1927 0128 05D9     		bls	.L122
 536:.\main.c      ****                     {
 537:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1928              		.loc 1 537 0 is_stmt 1
 1929 012a 3B1C     		mov	r3, r7
 1930 012c 1B88     		ldrh	r3, [r3]
 1931 012e 181C     		mov	r0, r3
 1932 0130 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1933 0134 19E0     		b	.L118
 1934              	.L122:
 538:.\main.c      ****                     }
 539:.\main.c      ****                     else
 540:.\main.c      ****                     {
 541:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1935              		.loc 1 541 0
 1936 0136 314B     		ldr	r3, .L137+8
 1937 0138 181C     		mov	r0, r3
 1938 013a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1939 013e 14E0     		b	.L118
 1940              	.L119:
 542:.\main.c      ****                     }
 543:.\main.c      ****                 }
 544:.\main.c      ****             }
 545:.\main.c      ****             else
 546:.\main.c      ****             {
 547:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1941              		.loc 1 547 0
 1942 0140 3B1C     		mov	r3, r7
 1943 0142 1A88     		ldrh	r2, [r3]
 1944 0144 FA23     		mov	r3, #250
 1945 0146 DB00     		lsl	r3, r3, #3
 1946 0148 9A42     		cmp	r2, r3
 1947 014a 0AD8     		bhi	.L123
 1948              		.loc 1 547 0 is_stmt 0 discriminator 1
 1949 014c 3B1C     		mov	r3, r7
 1950 014e 1A88     		ldrh	r2, [r3]
 1951 0150 2E4B     		ldr	r3, .L137+24
 1952 0152 9A42     		cmp	r2, r3
 1953 0154 05D9     		bls	.L123
 548:.\main.c      ****                 {
 549:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 1954              		.loc 1 549 0 is_stmt 1
 1955 0156 3B1C     		mov	r3, r7
 1956 0158 1B88     		ldrh	r3, [r3]
 1957 015a 181C     		mov	r0, r3
 1958 015c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1959 0160 03E0     		b	.L118
 1960              	.L123:
 550:.\main.c      ****                 }
 551:.\main.c      ****                 else
 552:.\main.c      ****                 {
 553:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1961              		.loc 1 553 0
 1962 0162 264B     		ldr	r3, .L137+8
 1963 0164 181C     		mov	r0, r3
 1964 0166 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 46


 1965              	.L118:
 554:.\main.c      ****                 }
 555:.\main.c      ****             }
 556:.\main.c      ****             
 557:.\main.c      ****             ELBOW_FLAG = 0;
 1966              		.loc 1 557 0
 1967 016a 294B     		ldr	r3, .L137+28
 1968 016c 0022     		mov	r2, #0
 1969 016e 1A70     		strb	r2, [r3]
 558:.\main.c      ****             break;
 1970              		.loc 1 558 0
 1971 0170 0FE0     		b	.L104
 1972              	.L109:
 559:.\main.c      ****             
 560:.\main.c      ****         case elbw_wait:
 561:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 1973              		.loc 1 561 0
 1974 0172 3B1D     		add	r3, r7, #4
 1975 0174 1B88     		ldrh	r3, [r3]
 1976 0176 642B     		cmp	r3, #100
 1977 0178 04D9     		bls	.L124
 1978              		.loc 1 561 0 is_stmt 0 discriminator 1
 1979 017a 3B1D     		add	r3, r7, #4
 1980 017c 1A88     		ldrh	r2, [r3]
 1981 017e 234B     		ldr	r3, .L137+24
 1982 0180 9A42     		cmp	r2, r3
 1983 0182 04D9     		bls	.L125
 1984              	.L124:
 562:.\main.c      ****             {
 563:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 1985              		.loc 1 563 0 is_stmt 1
 1986 0184 1D4B     		ldr	r3, .L137+8
 1987 0186 181C     		mov	r0, r3
 1988 0188 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 564:.\main.c      ****             }
 565:.\main.c      ****             break;
 1989              		.loc 1 565 0
 1990 018c 01E0     		b	.L104
 1991              	.L125:
 1992 018e 00E0     		b	.L104
 1993              	.L136:
 482:.\main.c      ****             break;
 1994              		.loc 1 482 0
 1995 0190 C046     		mov	r8, r8
 1996              	.L104:
 566:.\main.c      ****     }
 567:.\main.c      ****     
 568:.\main.c      ****     switch(elbow_state){ //transitions
 1997              		.loc 1 568 0
 1998 0192 184B     		ldr	r3, .L137
 1999 0194 1B78     		ldrb	r3, [r3]
 2000 0196 012B     		cmp	r3, #1
 2001 0198 0CD0     		beq	.L127
 2002 019a 02DC     		bgt	.L128
 2003 019c 002B     		cmp	r3, #0
 2004 019e 05D0     		beq	.L129
 2005 01a0 24E0     		b	.L103
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 47


 2006              	.L128:
 2007 01a2 022B     		cmp	r3, #2
 2008 01a4 0AD0     		beq	.L130
 2009 01a6 032B     		cmp	r3, #3
 2010 01a8 14D0     		beq	.L131
 2011 01aa 1FE0     		b	.L103
 2012              	.L129:
 569:.\main.c      ****         case elbw_start:
 570:.\main.c      ****             elbow_state = elbw_init;
 2013              		.loc 1 570 0
 2014 01ac 114B     		ldr	r3, .L137
 2015 01ae 0122     		mov	r2, #1
 2016 01b0 1A70     		strb	r2, [r3]
 571:.\main.c      ****             break;
 2017              		.loc 1 571 0
 2018 01b2 1BE0     		b	.L103
 2019              	.L127:
 572:.\main.c      ****         
 573:.\main.c      ****         case elbw_init:
 574:.\main.c      ****             elbow_state = elbw_wait;
 2020              		.loc 1 574 0
 2021 01b4 0F4B     		ldr	r3, .L137
 2022 01b6 0322     		mov	r2, #3
 2023 01b8 1A70     		strb	r2, [r3]
 575:.\main.c      ****             break;
 2024              		.loc 1 575 0
 2025 01ba 17E0     		b	.L103
 2026              	.L130:
 576:.\main.c      ****         
 577:.\main.c      ****         case elbw_execute:
 578:.\main.c      ****             if(ELBOW_FLAG)
 2027              		.loc 1 578 0
 2028 01bc 144B     		ldr	r3, .L137+28
 2029 01be 1B78     		ldrb	r3, [r3]
 2030 01c0 002B     		cmp	r3, #0
 2031 01c2 03D0     		beq	.L132
 579:.\main.c      ****             {
 580:.\main.c      ****                 elbow_state = elbw_execute;
 2032              		.loc 1 580 0
 2033 01c4 0B4B     		ldr	r3, .L137
 2034 01c6 0222     		mov	r2, #2
 2035 01c8 1A70     		strb	r2, [r3]
 581:.\main.c      ****             }
 582:.\main.c      ****             else
 583:.\main.c      ****             {
 584:.\main.c      ****                 elbow_state = elbw_wait;
 585:.\main.c      ****             }
 586:.\main.c      ****             break;
 2036              		.loc 1 586 0
 2037 01ca 0FE0     		b	.L103
 2038              	.L132:
 584:.\main.c      ****                 elbow_state = elbw_wait;
 2039              		.loc 1 584 0
 2040 01cc 094B     		ldr	r3, .L137
 2041 01ce 0322     		mov	r2, #3
 2042 01d0 1A70     		strb	r2, [r3]
 2043              		.loc 1 586 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 48


 2044 01d2 0BE0     		b	.L103
 2045              	.L131:
 587:.\main.c      ****         
 588:.\main.c      ****         case elbw_wait:
 589:.\main.c      ****             if(ELBOW_FLAG)
 2046              		.loc 1 589 0
 2047 01d4 0E4B     		ldr	r3, .L137+28
 2048 01d6 1B78     		ldrb	r3, [r3]
 2049 01d8 002B     		cmp	r3, #0
 2050 01da 03D0     		beq	.L134
 590:.\main.c      ****             {
 591:.\main.c      ****                 elbow_state = elbw_execute;
 2051              		.loc 1 591 0
 2052 01dc 054B     		ldr	r3, .L137
 2053 01de 0222     		mov	r2, #2
 2054 01e0 1A70     		strb	r2, [r3]
 2055 01e2 02E0     		b	.L135
 2056              	.L134:
 592:.\main.c      ****             }
 593:.\main.c      ****             else
 594:.\main.c      ****             {
 595:.\main.c      ****                 elbow_state = elbw_wait; 
 2057              		.loc 1 595 0
 2058 01e4 034B     		ldr	r3, .L137
 2059 01e6 0322     		mov	r2, #3
 2060 01e8 1A70     		strb	r2, [r3]
 2061              	.L135:
 596:.\main.c      ****             }
 597:.\main.c      ****             break;
 2062              		.loc 1 597 0
 2063 01ea C046     		mov	r8, r8
 2064              	.L103:
 598:.\main.c      ****     }    
 599:.\main.c      **** }
 2065              		.loc 1 599 0
 2066 01ec BD46     		mov	sp, r7
 2067 01ee 03B0     		add	sp, sp, #12
 2068              		@ sp needed
 2069 01f0 90BD     		pop	{r4, r7, pc}
 2070              	.L138:
 2071 01f2 C046     		.align	2
 2072              	.L137:
 2073 01f4 00000000 		.word	elbow_state
 2074 01f8 00000000 		.word	elbow_array
 2075 01fc DC050000 		.word	1500
 2076 0200 00000000 		.word	elbw_arr_cspot
 2077 0204 00000000 		.word	data_array
 2078 0208 DB050000 		.word	1499
 2079 020c E7030000 		.word	999
 2080 0210 00000000 		.word	ELBOW_FLAG
 2081              		.cfi_endproc
 2082              	.LFE48:
 2083              		.size	elbow, .-elbow
 2084              		.comm	shoulder_state,1,1
 2085              		.section	.text.shoulder,"ax",%progbits
 2086              		.align	2
 2087              		.global	shoulder
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 49


 2088              		.code	16
 2089              		.thumb_func
 2090              		.type	shoulder, %function
 2091              	shoulder:
 2092              	.LFB49:
 600:.\main.c      **** 
 601:.\main.c      **** //control the shoulder
 602:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 603:.\main.c      **** void shoulder()
 604:.\main.c      **** { 
 2093              		.loc 1 604 0
 2094              		.cfi_startproc
 2095 0000 90B5     		push	{r4, r7, lr}
 2096              		.cfi_def_cfa_offset 12
 2097              		.cfi_offset 4, -12
 2098              		.cfi_offset 7, -8
 2099              		.cfi_offset 14, -4
 2100 0002 83B0     		sub	sp, sp, #12
 2101              		.cfi_def_cfa_offset 24
 2102 0004 00AF     		add	r7, sp, #0
 2103              		.cfi_def_cfa_register 7
 605:.\main.c      ****     //take instruction from data_array
 606:.\main.c      ****     //smooth input
 607:.\main.c      ****     //actuate the shoulder using PWM
 608:.\main.c      ****     //get feedback
 609:.\main.c      ****     uint8 i;
 610:.\main.c      ****     uint16 avg;
 611:.\main.c      ****     uint16 command;
 612:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2104              		.loc 1 612 0
 2105 0006 3C1D     		add	r4, r7, #4
 2106 0008 0020     		mov	r0, #0
 2107 000a FFF7FEFF 		bl	potFeedback
 2108 000e 031C     		mov	r3, r0
 2109 0010 2380     		strh	r3, [r4]
 613:.\main.c      ****     
 614:.\main.c      ****     switch(shoulder_state){ //actions
 2110              		.loc 1 614 0
 2111 0012 7A4B     		ldr	r3, .L173
 2112 0014 1B78     		ldrb	r3, [r3]
 2113 0016 012B     		cmp	r3, #1
 2114 0018 07D0     		beq	.L141
 2115 001a 00DC     		bgt	.LCB1922
 2116 001c BCE0     		b	.L172	@long jump
 2117              	.LCB1922:
 2118 001e 022B     		cmp	r3, #2
 2119 0020 1ED0     		beq	.L144
 2120 0022 032B     		cmp	r3, #3
 2121 0024 00D1     		bne	.LCB1926
 2122 0026 A6E0     		b	.L145	@long jump
 2123              	.LCB1926:
 2124 0028 B7E0     		b	.L140
 2125              	.L141:
 615:.\main.c      ****         case shldr_start:
 616:.\main.c      ****             break;
 617:.\main.c      **** 
 618:.\main.c      ****         case shldr_init:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 50


 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2126              		.loc 1 619 0
 2127 002a FB1D     		add	r3, r7, #7
 2128 002c 0022     		mov	r2, #0
 2129 002e 1A70     		strb	r2, [r3]
 2130 0030 0AE0     		b	.L146
 2131              	.L147:
 620:.\main.c      ****             {
 621:.\main.c      ****                 shoulder_array[i] = 1500;
 2132              		.loc 1 621 0 discriminator 2
 2133 0032 FB1D     		add	r3, r7, #7
 2134 0034 1A78     		ldrb	r2, [r3]
 2135 0036 724B     		ldr	r3, .L173+4
 2136 0038 5200     		lsl	r2, r2, #1
 2137 003a 7249     		ldr	r1, .L173+8
 2138 003c D152     		strh	r1, [r2, r3]
 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2139              		.loc 1 619 0 discriminator 2
 2140 003e FB1D     		add	r3, r7, #7
 2141 0040 1A78     		ldrb	r2, [r3]
 2142 0042 FB1D     		add	r3, r7, #7
 2143 0044 0132     		add	r2, r2, #1
 2144 0046 1A70     		strb	r2, [r3]
 2145              	.L146:
 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2146              		.loc 1 619 0 is_stmt 0 discriminator 1
 2147 0048 FB1D     		add	r3, r7, #7
 2148 004a 1B78     		ldrb	r3, [r3]
 2149 004c 132B     		cmp	r3, #19
 2150 004e F0D9     		bls	.L147
 622:.\main.c      ****             }
 623:.\main.c      ****             shldr_arr_cspot = 0;
 2151              		.loc 1 623 0 is_stmt 1
 2152 0050 6D4B     		ldr	r3, .L173+12
 2153 0052 0022     		mov	r2, #0
 2154 0054 1A70     		strb	r2, [r3]
 624:.\main.c      ****                         
 625:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2155              		.loc 1 625 0
 2156 0056 6B4B     		ldr	r3, .L173+8
 2157 0058 181C     		mov	r0, r3
 2158 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 626:.\main.c      ****             break;
 2159              		.loc 1 626 0
 2160 005e 9CE0     		b	.L140
 2161              	.L144:
 627:.\main.c      **** 
 628:.\main.c      ****         case shldr_execute:
 629:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2162              		.loc 1 629 0
 2163 0060 BC1C     		add	r4, r7, #2
 2164 0062 6A4B     		ldr	r3, .L173+16
 2165 0064 181C     		mov	r0, r3
 2166 0066 0C21     		mov	r1, #12
 2167 0068 0D22     		mov	r2, #13
 2168 006a FFF7FEFF 		bl	make_command
 2169 006e 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 51


 2170 0070 2380     		strh	r3, [r4]
 630:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2171              		.loc 1 630 0
 2172 0072 654B     		ldr	r3, .L173+12
 2173 0074 1B78     		ldrb	r3, [r3]
 2174 0076 1A1C     		mov	r2, r3
 2175 0078 614B     		ldr	r3, .L173+4
 2176 007a 5200     		lsl	r2, r2, #1
 2177 007c B91C     		add	r1, r7, #2
 2178 007e 0988     		ldrh	r1, [r1]
 2179 0080 D152     		strh	r1, [r2, r3]
 631:.\main.c      ****         
 632:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2180              		.loc 1 632 0
 2181 0082 614B     		ldr	r3, .L173+12
 2182 0084 1B78     		ldrb	r3, [r3]
 2183 0086 122B     		cmp	r3, #18
 2184 0088 06D8     		bhi	.L148
 633:.\main.c      ****             {
 634:.\main.c      ****                 shldr_arr_cspot++;
 2185              		.loc 1 634 0
 2186 008a 5F4B     		ldr	r3, .L173+12
 2187 008c 1B78     		ldrb	r3, [r3]
 2188 008e 0133     		add	r3, r3, #1
 2189 0090 DAB2     		uxtb	r2, r3
 2190 0092 5D4B     		ldr	r3, .L173+12
 2191 0094 1A70     		strb	r2, [r3]
 2192 0096 02E0     		b	.L149
 2193              	.L148:
 635:.\main.c      ****             }
 636:.\main.c      ****             else
 637:.\main.c      ****             {
 638:.\main.c      ****                 shldr_arr_cspot = 0;
 2194              		.loc 1 638 0
 2195 0098 5B4B     		ldr	r3, .L173+12
 2196 009a 0022     		mov	r2, #0
 2197 009c 1A70     		strb	r2, [r3]
 2198              	.L149:
 639:.\main.c      ****             }
 640:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2199              		.loc 1 640 0
 2200 009e 3C1C     		mov	r4, r7
 2201 00a0 574B     		ldr	r3, .L173+4
 2202 00a2 181C     		mov	r0, r3
 2203 00a4 1421     		mov	r1, #20
 2204 00a6 FFF7FEFF 		bl	average
 2205 00aa 031C     		mov	r3, r0
 2206 00ac 2380     		strh	r3, [r4]
 641:.\main.c      ****             
 642:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2207              		.loc 1 642 0
 2208 00ae 3B1D     		add	r3, r7, #4
 2209 00b0 1A88     		ldrh	r2, [r3]
 2210 00b2 8C23     		mov	r3, #140
 2211 00b4 5B00     		lsl	r3, r3, #1
 2212 00b6 9A42     		cmp	r2, r3
 2213 00b8 1FD8     		bhi	.L150
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 52


 643:.\main.c      ****             {
 644:.\main.c      ****                 if (avg < 1500)
 2214              		.loc 1 644 0
 2215 00ba 3B1C     		mov	r3, r7
 2216 00bc 1A88     		ldrh	r2, [r3]
 2217 00be 544B     		ldr	r3, .L173+20
 2218 00c0 9A42     		cmp	r2, r3
 2219 00c2 04D8     		bhi	.L151
 645:.\main.c      ****                 {
 646:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2220              		.loc 1 646 0
 2221 00c4 4F4B     		ldr	r3, .L173+8
 2222 00c6 181C     		mov	r0, r3
 2223 00c8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2224 00cc 4FE0     		b	.L154
 2225              	.L151:
 647:.\main.c      ****                 }
 648:.\main.c      ****                 else
 649:.\main.c      ****                 {
 650:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2226              		.loc 1 650 0
 2227 00ce 3B1C     		mov	r3, r7
 2228 00d0 1A88     		ldrh	r2, [r3]
 2229 00d2 FA23     		mov	r3, #250
 2230 00d4 DB00     		lsl	r3, r3, #3
 2231 00d6 9A42     		cmp	r2, r3
 2232 00d8 0AD8     		bhi	.L153
 2233              		.loc 1 650 0 is_stmt 0 discriminator 1
 2234 00da 3B1C     		mov	r3, r7
 2235 00dc 1A88     		ldrh	r2, [r3]
 2236 00de 4D4B     		ldr	r3, .L173+24
 2237 00e0 9A42     		cmp	r2, r3
 2238 00e2 05D9     		bls	.L153
 651:.\main.c      ****                     {
 652:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2239              		.loc 1 652 0 is_stmt 1
 2240 00e4 3B1C     		mov	r3, r7
 2241 00e6 1B88     		ldrh	r3, [r3]
 2242 00e8 181C     		mov	r0, r3
 2243 00ea FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2244 00ee 3EE0     		b	.L154
 2245              	.L153:
 653:.\main.c      ****                     }
 654:.\main.c      ****                     else
 655:.\main.c      ****                     {
 656:.\main.c      ****                         //throw error
 657:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2246              		.loc 1 657 0
 2247 00f0 444B     		ldr	r3, .L173+8
 2248 00f2 181C     		mov	r0, r3
 2249 00f4 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2250 00f8 39E0     		b	.L154
 2251              	.L150:
 658:.\main.c      ****                     }
 659:.\main.c      ****                 }
 660:.\main.c      ****             }
 661:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 53


 2252              		.loc 1 661 0
 2253 00fa 3B1D     		add	r3, r7, #4
 2254 00fc 1A88     		ldrh	r2, [r3]
 2255 00fe 464B     		ldr	r3, .L173+28
 2256 0100 9A42     		cmp	r2, r3
 2257 0102 1FD9     		bls	.L155
 662:.\main.c      ****             {
 663:.\main.c      ****                 if(avg > 1500)
 2258              		.loc 1 663 0
 2259 0104 3B1C     		mov	r3, r7
 2260 0106 1A88     		ldrh	r2, [r3]
 2261 0108 3E4B     		ldr	r3, .L173+8
 2262 010a 9A42     		cmp	r2, r3
 2263 010c 04D9     		bls	.L156
 664:.\main.c      ****                 {
 665:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2264              		.loc 1 665 0
 2265 010e 3D4B     		ldr	r3, .L173+8
 2266 0110 181C     		mov	r0, r3
 2267 0112 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2268 0116 2AE0     		b	.L154
 2269              	.L156:
 666:.\main.c      ****                 }
 667:.\main.c      ****                 else
 668:.\main.c      ****                 {
 669:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2270              		.loc 1 669 0
 2271 0118 3B1C     		mov	r3, r7
 2272 011a 1A88     		ldrh	r2, [r3]
 2273 011c FA23     		mov	r3, #250
 2274 011e DB00     		lsl	r3, r3, #3
 2275 0120 9A42     		cmp	r2, r3
 2276 0122 0AD8     		bhi	.L158
 2277              		.loc 1 669 0 is_stmt 0 discriminator 1
 2278 0124 3B1C     		mov	r3, r7
 2279 0126 1A88     		ldrh	r2, [r3]
 2280 0128 3A4B     		ldr	r3, .L173+24
 2281 012a 9A42     		cmp	r2, r3
 2282 012c 05D9     		bls	.L158
 670:.\main.c      ****                     {
 671:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2283              		.loc 1 671 0 is_stmt 1
 2284 012e 3B1C     		mov	r3, r7
 2285 0130 1B88     		ldrh	r3, [r3]
 2286 0132 181C     		mov	r0, r3
 2287 0134 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2288 0138 19E0     		b	.L154
 2289              	.L158:
 672:.\main.c      ****                     }
 673:.\main.c      ****                     else
 674:.\main.c      ****                     {
 675:.\main.c      ****                         //throw error
 676:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2290              		.loc 1 676 0
 2291 013a 324B     		ldr	r3, .L173+8
 2292 013c 181C     		mov	r0, r3
 2293 013e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 54


 2294 0142 14E0     		b	.L154
 2295              	.L155:
 677:.\main.c      ****                     }
 678:.\main.c      ****                 }
 679:.\main.c      ****             }
 680:.\main.c      ****             else
 681:.\main.c      ****             {
 682:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2296              		.loc 1 682 0
 2297 0144 3B1C     		mov	r3, r7
 2298 0146 1A88     		ldrh	r2, [r3]
 2299 0148 FA23     		mov	r3, #250
 2300 014a DB00     		lsl	r3, r3, #3
 2301 014c 9A42     		cmp	r2, r3
 2302 014e 0AD8     		bhi	.L159
 2303              		.loc 1 682 0 is_stmt 0 discriminator 1
 2304 0150 3B1C     		mov	r3, r7
 2305 0152 1A88     		ldrh	r2, [r3]
 2306 0154 2F4B     		ldr	r3, .L173+24
 2307 0156 9A42     		cmp	r2, r3
 2308 0158 05D9     		bls	.L159
 683:.\main.c      ****                 {
 684:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2309              		.loc 1 684 0 is_stmt 1
 2310 015a 3B1C     		mov	r3, r7
 2311 015c 1B88     		ldrh	r3, [r3]
 2312 015e 181C     		mov	r0, r3
 2313 0160 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2314 0164 03E0     		b	.L154
 2315              	.L159:
 685:.\main.c      ****                 }
 686:.\main.c      ****                 else
 687:.\main.c      ****                 {
 688:.\main.c      ****                     //throw error
 689:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2316              		.loc 1 689 0
 2317 0166 274B     		ldr	r3, .L173+8
 2318 0168 181C     		mov	r0, r3
 2319 016a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2320              	.L154:
 690:.\main.c      ****                 }
 691:.\main.c      ****             }
 692:.\main.c      ****             SHOULDER_FLAG = 0;
 2321              		.loc 1 692 0
 2322 016e 2B4B     		ldr	r3, .L173+32
 2323 0170 0022     		mov	r2, #0
 2324 0172 1A70     		strb	r2, [r3]
 693:.\main.c      ****             break;
 2325              		.loc 1 693 0
 2326 0174 11E0     		b	.L140
 2327              	.L145:
 694:.\main.c      ****             
 695:.\main.c      ****         case shldr_wait:
 696:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2328              		.loc 1 696 0
 2329 0176 3B1D     		add	r3, r7, #4
 2330 0178 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 55


 2331 017a 8C23     		mov	r3, #140
 2332 017c 5B00     		lsl	r3, r3, #1
 2333 017e 9A42     		cmp	r2, r3
 2334 0180 04D9     		bls	.L160
 2335              		.loc 1 696 0 is_stmt 0 discriminator 1
 2336 0182 3B1D     		add	r3, r7, #4
 2337 0184 1A88     		ldrh	r2, [r3]
 2338 0186 244B     		ldr	r3, .L173+28
 2339 0188 9A42     		cmp	r2, r3
 2340 018a 04D9     		bls	.L161
 2341              	.L160:
 697:.\main.c      ****             {
 698:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2342              		.loc 1 698 0 is_stmt 1
 2343 018c 1D4B     		ldr	r3, .L173+8
 2344 018e 181C     		mov	r0, r3
 2345 0190 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 699:.\main.c      ****             }
 700:.\main.c      ****             break;
 2346              		.loc 1 700 0
 2347 0194 01E0     		b	.L140
 2348              	.L161:
 2349 0196 00E0     		b	.L140
 2350              	.L172:
 616:.\main.c      ****             break;
 2351              		.loc 1 616 0
 2352 0198 C046     		mov	r8, r8
 2353              	.L140:
 701:.\main.c      ****     }
 702:.\main.c      ****     
 703:.\main.c      ****     switch(shoulder_state){ //transitions
 2354              		.loc 1 703 0
 2355 019a 184B     		ldr	r3, .L173
 2356 019c 1B78     		ldrb	r3, [r3]
 2357 019e 012B     		cmp	r3, #1
 2358 01a0 0CD0     		beq	.L163
 2359 01a2 02DC     		bgt	.L164
 2360 01a4 002B     		cmp	r3, #0
 2361 01a6 05D0     		beq	.L165
 2362 01a8 24E0     		b	.L139
 2363              	.L164:
 2364 01aa 022B     		cmp	r3, #2
 2365 01ac 0AD0     		beq	.L166
 2366 01ae 032B     		cmp	r3, #3
 2367 01b0 14D0     		beq	.L167
 2368 01b2 1FE0     		b	.L139
 2369              	.L165:
 704:.\main.c      ****         case shldr_start:
 705:.\main.c      ****             shoulder_state = shldr_init;
 2370              		.loc 1 705 0
 2371 01b4 114B     		ldr	r3, .L173
 2372 01b6 0122     		mov	r2, #1
 2373 01b8 1A70     		strb	r2, [r3]
 706:.\main.c      ****             break;
 2374              		.loc 1 706 0
 2375 01ba 1BE0     		b	.L139
 2376              	.L163:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 56


 707:.\main.c      ****         
 708:.\main.c      ****         case shldr_init:
 709:.\main.c      ****             shoulder_state = shldr_wait;
 2377              		.loc 1 709 0
 2378 01bc 0F4B     		ldr	r3, .L173
 2379 01be 0322     		mov	r2, #3
 2380 01c0 1A70     		strb	r2, [r3]
 710:.\main.c      ****             break;
 2381              		.loc 1 710 0
 2382 01c2 17E0     		b	.L139
 2383              	.L166:
 711:.\main.c      ****         
 712:.\main.c      ****         case shldr_execute:
 713:.\main.c      ****             if(SHOULDER_FLAG)
 2384              		.loc 1 713 0
 2385 01c4 154B     		ldr	r3, .L173+32
 2386 01c6 1B78     		ldrb	r3, [r3]
 2387 01c8 002B     		cmp	r3, #0
 2388 01ca 03D0     		beq	.L168
 714:.\main.c      ****             {
 715:.\main.c      ****                 shoulder_state = shldr_execute;
 2389              		.loc 1 715 0
 2390 01cc 0B4B     		ldr	r3, .L173
 2391 01ce 0222     		mov	r2, #2
 2392 01d0 1A70     		strb	r2, [r3]
 716:.\main.c      ****             }
 717:.\main.c      ****             else
 718:.\main.c      ****             {
 719:.\main.c      ****                 shoulder_state = shldr_wait;
 720:.\main.c      ****             }
 721:.\main.c      ****             break;
 2393              		.loc 1 721 0
 2394 01d2 0FE0     		b	.L139
 2395              	.L168:
 719:.\main.c      ****                 shoulder_state = shldr_wait;
 2396              		.loc 1 719 0
 2397 01d4 094B     		ldr	r3, .L173
 2398 01d6 0322     		mov	r2, #3
 2399 01d8 1A70     		strb	r2, [r3]
 2400              		.loc 1 721 0
 2401 01da 0BE0     		b	.L139
 2402              	.L167:
 722:.\main.c      ****         
 723:.\main.c      ****         case shldr_wait:
 724:.\main.c      ****             if(SHOULDER_FLAG)
 2403              		.loc 1 724 0
 2404 01dc 0F4B     		ldr	r3, .L173+32
 2405 01de 1B78     		ldrb	r3, [r3]
 2406 01e0 002B     		cmp	r3, #0
 2407 01e2 03D0     		beq	.L170
 725:.\main.c      ****             {
 726:.\main.c      ****                 shoulder_state = shldr_execute;
 2408              		.loc 1 726 0
 2409 01e4 054B     		ldr	r3, .L173
 2410 01e6 0222     		mov	r2, #2
 2411 01e8 1A70     		strb	r2, [r3]
 2412 01ea 02E0     		b	.L171
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 57


 2413              	.L170:
 727:.\main.c      ****             }
 728:.\main.c      ****             else
 729:.\main.c      ****             {
 730:.\main.c      ****                 shoulder_state = shldr_wait; 
 2414              		.loc 1 730 0
 2415 01ec 034B     		ldr	r3, .L173
 2416 01ee 0322     		mov	r2, #3
 2417 01f0 1A70     		strb	r2, [r3]
 2418              	.L171:
 731:.\main.c      ****             }
 732:.\main.c      ****             break;
 2419              		.loc 1 732 0
 2420 01f2 C046     		mov	r8, r8
 2421              	.L139:
 733:.\main.c      ****     }    
 734:.\main.c      **** }
 2422              		.loc 1 734 0
 2423 01f4 BD46     		mov	sp, r7
 2424 01f6 03B0     		add	sp, sp, #12
 2425              		@ sp needed
 2426 01f8 90BD     		pop	{r4, r7, pc}
 2427              	.L174:
 2428 01fa C046     		.align	2
 2429              	.L173:
 2430 01fc 00000000 		.word	shoulder_state
 2431 0200 00000000 		.word	shoulder_array
 2432 0204 DC050000 		.word	1500
 2433 0208 00000000 		.word	shldr_arr_cspot
 2434 020c 00000000 		.word	data_array
 2435 0210 DB050000 		.word	1499
 2436 0214 E7030000 		.word	999
 2437 0218 1F030000 		.word	799
 2438 021c 00000000 		.word	SHOULDER_FLAG
 2439              		.cfi_endproc
 2440              	.LFE49:
 2441              		.size	shoulder, .-shoulder
 2442              		.comm	baseAzimuth_state,1,1
 2443              		.section	.text.baseAzimuth,"ax",%progbits
 2444              		.align	2
 2445              		.global	baseAzimuth
 2446              		.code	16
 2447              		.thumb_func
 2448              		.type	baseAzimuth, %function
 2449              	baseAzimuth:
 2450              	.LFB50:
 735:.\main.c      **** 
 736:.\main.c      **** //control the turret
 737:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 738:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 739:.\main.c      **** { 
 2451              		.loc 1 739 0
 2452              		.cfi_startproc
 2453 0000 90B5     		push	{r4, r7, lr}
 2454              		.cfi_def_cfa_offset 12
 2455              		.cfi_offset 4, -12
 2456              		.cfi_offset 7, -8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 58


 2457              		.cfi_offset 14, -4
 2458 0002 85B0     		sub	sp, sp, #20
 2459              		.cfi_def_cfa_offset 32
 2460 0004 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
 2462 0006 021C     		mov	r2, r0
 2463 0008 3960     		str	r1, [r7]
 2464 000a FB1D     		add	r3, r7, #7
 2465 000c 1A70     		strb	r2, [r3]
 740:.\main.c      ****     //take instruction from data_array
 741:.\main.c      ****     //smooth input
 742:.\main.c      ****     //actuate the turret using PWM
 743:.\main.c      ****     uint8 i;
 744:.\main.c      ****     uint16 avg;
 745:.\main.c      ****     uint16 command;
 746:.\main.c      ****     
 747:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2466              		.loc 1 747 0
 2467 000e 5A4B     		ldr	r3, .L201
 2468 0010 1B78     		ldrb	r3, [r3]
 2469 0012 012B     		cmp	r3, #1
 2470 0014 04D0     		beq	.L177
 2471 0016 00DC     		bgt	.LCB2268
 2472 0018 79E0     		b	.L199	@long jump
 2473              	.LCB2268:
 2474 001a 022B     		cmp	r3, #2
 2475 001c 21D0     		beq	.L180
 748:.\main.c      ****         case BA_start:
 749:.\main.c      ****             break;
 750:.\main.c      **** 
 751:.\main.c      ****         case BA_init:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 753:.\main.c      ****             {
 754:.\main.c      ****                 baseAz_array[i] = 1500;
 755:.\main.c      ****             }
 756:.\main.c      ****             BA_arr_cspot = 0;
 757:.\main.c      ****             
 758:.\main.c      ****             BA_PWM_WriteCompare(1500);
 759:.\main.c      ****             break;
 760:.\main.c      **** 
 761:.\main.c      ****         case BA_execute:
 762:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 763:.\main.c      ****             
 764:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 765:.\main.c      **** //            
 766:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 767:.\main.c      **** //            {
 768:.\main.c      **** //                BA_arr_cspot++;
 769:.\main.c      **** //            }
 770:.\main.c      **** //            else
 771:.\main.c      **** //            {
 772:.\main.c      **** //                BA_arr_cspot = 0;
 773:.\main.c      **** //            }
 774:.\main.c      ****             
 775:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 776:.\main.c      ****             
 777:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 59


 778:.\main.c      ****             
 779:.\main.c      ****             if(avg == 1000 || avg == 2000)
 780:.\main.c      ****             {
 781:.\main.c      **** 
 782:.\main.c      ****                 temp_val = temp_val*(-1);
 783:.\main.c      ****             }
 784:.\main.c      ****             
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 786:.\main.c      ****             {
 787:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 788:.\main.c      ****             }
 789:.\main.c      ****             else
 790:.\main.c      ****             {
 791:.\main.c      ****                 LED_Write(1);
 792:.\main.c      **** 
 793:.\main.c      ****                 //throw error
 794:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 795:.\main.c      ****             }
 796:.\main.c      ****             BA_FLAG = 0;
 797:.\main.c      ****             break;
 798:.\main.c      ****             
 799:.\main.c      ****         case BA_wait:
 800:.\main.c      ****             break;
 2476              		.loc 1 800 0
 2477 001e 77E0     		b	.L176
 2478              	.L177:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2479              		.loc 1 752 0
 2480 0020 3B1C     		mov	r3, r7
 2481 0022 0F33     		add	r3, r3, #15
 2482 0024 0022     		mov	r2, #0
 2483 0026 1A70     		strb	r2, [r3]
 2484 0028 0EE0     		b	.L182
 2485              	.L183:
 754:.\main.c      ****                 baseAz_array[i] = 1500;
 2486              		.loc 1 754 0 discriminator 2
 2487 002a 3B1C     		mov	r3, r7
 2488 002c 0F33     		add	r3, r3, #15
 2489 002e 1B78     		ldrb	r3, [r3]
 2490 0030 5B00     		lsl	r3, r3, #1
 2491 0032 3A68     		ldr	r2, [r7]
 2492 0034 D318     		add	r3, r2, r3
 2493 0036 514A     		ldr	r2, .L201+4
 2494 0038 1A80     		strh	r2, [r3]
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2495              		.loc 1 752 0 discriminator 2
 2496 003a 3B1C     		mov	r3, r7
 2497 003c 0F33     		add	r3, r3, #15
 2498 003e 1A78     		ldrb	r2, [r3]
 2499 0040 3B1C     		mov	r3, r7
 2500 0042 0F33     		add	r3, r3, #15
 2501 0044 0132     		add	r2, r2, #1
 2502 0046 1A70     		strb	r2, [r3]
 2503              	.L182:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2504              		.loc 1 752 0 is_stmt 0 discriminator 1
 2505 0048 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 60


 2506 004a 0F33     		add	r3, r3, #15
 2507 004c 1B78     		ldrb	r3, [r3]
 2508 004e 132B     		cmp	r3, #19
 2509 0050 EBD9     		bls	.L183
 756:.\main.c      ****             BA_arr_cspot = 0;
 2510              		.loc 1 756 0 is_stmt 1
 2511 0052 FB1D     		add	r3, r7, #7
 2512 0054 0022     		mov	r2, #0
 2513 0056 1A70     		strb	r2, [r3]
 758:.\main.c      ****             BA_PWM_WriteCompare(1500);
 2514              		.loc 1 758 0
 2515 0058 484B     		ldr	r3, .L201+4
 2516 005a 181C     		mov	r0, r3
 2517 005c FFF7FEFF 		bl	BA_PWM_WriteCompare
 759:.\main.c      ****             break;
 2518              		.loc 1 759 0
 2519 0060 56E0     		b	.L176
 2520              	.L180:
 762:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2521              		.loc 1 762 0
 2522 0062 3C1C     		mov	r4, r7
 2523 0064 0C34     		add	r4, r4, #12
 2524 0066 464B     		ldr	r3, .L201+8
 2525 0068 181C     		mov	r0, r3
 2526 006a 0A21     		mov	r1, #10
 2527 006c 0B22     		mov	r2, #11
 2528 006e FFF7FEFF 		bl	make_command
 2529 0072 031C     		mov	r3, r0
 2530 0074 2380     		strh	r3, [r4]
 775:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 2531              		.loc 1 775 0
 2532 0076 FC1D     		add	r4, r7, #7
 2533 0078 FB1D     		add	r3, r7, #7
 2534 007a 1978     		ldrb	r1, [r3]
 2535 007c 3A68     		ldr	r2, [r7]
 2536 007e 3B1C     		mov	r3, r7
 2537 0080 0C33     		add	r3, r3, #12
 2538 0082 1B88     		ldrh	r3, [r3]
 2539 0084 081C     		mov	r0, r1
 2540 0086 111C     		mov	r1, r2
 2541 0088 1422     		mov	r2, #20
 2542 008a FFF7FEFF 		bl	pos_to_vel
 2543 008e 031C     		mov	r3, r0
 2544 0090 2370     		strb	r3, [r4]
 777:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2545              		.loc 1 777 0
 2546 0092 3C1C     		mov	r4, r7
 2547 0094 0A34     		add	r4, r4, #10
 2548 0096 3B68     		ldr	r3, [r7]
 2549 0098 181C     		mov	r0, r3
 2550 009a 1421     		mov	r1, #20
 2551 009c FFF7FEFF 		bl	average
 2552 00a0 031C     		mov	r3, r0
 2553 00a2 2380     		strh	r3, [r4]
 779:.\main.c      ****             if(avg == 1000 || avg == 2000)
 2554              		.loc 1 779 0
 2555 00a4 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 61


 2556 00a6 0A33     		add	r3, r3, #10
 2557 00a8 1A88     		ldrh	r2, [r3]
 2558 00aa FA23     		mov	r3, #250
 2559 00ac 9B00     		lsl	r3, r3, #2
 2560 00ae 9A42     		cmp	r2, r3
 2561 00b0 06D0     		beq	.L184
 779:.\main.c      ****             if(avg == 1000 || avg == 2000)
 2562              		.loc 1 779 0 is_stmt 0 discriminator 1
 2563 00b2 3B1C     		mov	r3, r7
 2564 00b4 0A33     		add	r3, r3, #10
 2565 00b6 1A88     		ldrh	r2, [r3]
 2566 00b8 FA23     		mov	r3, #250
 2567 00ba DB00     		lsl	r3, r3, #3
 2568 00bc 9A42     		cmp	r2, r3
 2569 00be 07D1     		bne	.L185
 2570              	.L184:
 782:.\main.c      ****                 temp_val = temp_val*(-1);
 2571              		.loc 1 782 0 is_stmt 1
 2572 00c0 304B     		ldr	r3, .L201+12
 2573 00c2 1B88     		ldrh	r3, [r3]
 2574 00c4 9BB2     		uxth	r3, r3
 2575 00c6 5B42     		neg	r3, r3
 2576 00c8 9BB2     		uxth	r3, r3
 2577 00ca 9AB2     		uxth	r2, r3
 2578 00cc 2D4B     		ldr	r3, .L201+12
 2579 00ce 1A80     		strh	r2, [r3]
 2580              	.L185:
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2581              		.loc 1 785 0
 2582 00d0 3B1C     		mov	r3, r7
 2583 00d2 0A33     		add	r3, r3, #10
 2584 00d4 1A88     		ldrh	r2, [r3]
 2585 00d6 FA23     		mov	r3, #250
 2586 00d8 DB00     		lsl	r3, r3, #3
 2587 00da 9A42     		cmp	r2, r3
 2588 00dc 0CD8     		bhi	.L186
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2589              		.loc 1 785 0 is_stmt 0 discriminator 1
 2590 00de 3B1C     		mov	r3, r7
 2591 00e0 0A33     		add	r3, r3, #10
 2592 00e2 1A88     		ldrh	r2, [r3]
 2593 00e4 284B     		ldr	r3, .L201+16
 2594 00e6 9A42     		cmp	r2, r3
 2595 00e8 06D9     		bls	.L186
 787:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2596              		.loc 1 787 0 is_stmt 1
 2597 00ea 3B1C     		mov	r3, r7
 2598 00ec 0A33     		add	r3, r3, #10
 2599 00ee 1B88     		ldrh	r3, [r3]
 2600 00f0 181C     		mov	r0, r3
 2601 00f2 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2602 00f6 06E0     		b	.L187
 2603              	.L186:
 791:.\main.c      ****                 LED_Write(1);
 2604              		.loc 1 791 0
 2605 00f8 0120     		mov	r0, #1
 2606 00fa FFF7FEFF 		bl	LED_Write
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 62


 794:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2607              		.loc 1 794 0
 2608 00fe 1F4B     		ldr	r3, .L201+4
 2609 0100 181C     		mov	r0, r3
 2610 0102 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2611              	.L187:
 796:.\main.c      ****             BA_FLAG = 0;
 2612              		.loc 1 796 0
 2613 0106 214B     		ldr	r3, .L201+20
 2614 0108 0022     		mov	r2, #0
 2615 010a 1A70     		strb	r2, [r3]
 797:.\main.c      ****             break;
 2616              		.loc 1 797 0
 2617 010c 00E0     		b	.L176
 2618              	.L199:
 749:.\main.c      ****             break;
 2619              		.loc 1 749 0
 2620 010e C046     		mov	r8, r8
 2621              	.L176:
 801:.\main.c      ****     }
 802:.\main.c      ****     
 803:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2622              		.loc 1 803 0
 2623 0110 194B     		ldr	r3, .L201
 2624 0112 1B78     		ldrb	r3, [r3]
 2625 0114 012B     		cmp	r3, #1
 2626 0116 0CD0     		beq	.L189
 2627 0118 02DC     		bgt	.L190
 2628 011a 002B     		cmp	r3, #0
 2629 011c 05D0     		beq	.L191
 2630 011e 24E0     		b	.L188
 2631              	.L190:
 2632 0120 022B     		cmp	r3, #2
 2633 0122 0AD0     		beq	.L192
 2634 0124 032B     		cmp	r3, #3
 2635 0126 14D0     		beq	.L193
 2636 0128 1FE0     		b	.L188
 2637              	.L191:
 804:.\main.c      ****         case BA_start:
 805:.\main.c      ****             baseAzimuth_state = BA_init;
 2638              		.loc 1 805 0
 2639 012a 134B     		ldr	r3, .L201
 2640 012c 0122     		mov	r2, #1
 2641 012e 1A70     		strb	r2, [r3]
 806:.\main.c      ****             break;
 2642              		.loc 1 806 0
 2643 0130 1BE0     		b	.L188
 2644              	.L189:
 807:.\main.c      ****         
 808:.\main.c      ****         case BA_init:
 809:.\main.c      ****             baseAzimuth_state = BA_wait;
 2645              		.loc 1 809 0
 2646 0132 114B     		ldr	r3, .L201
 2647 0134 0322     		mov	r2, #3
 2648 0136 1A70     		strb	r2, [r3]
 810:.\main.c      ****             break;
 2649              		.loc 1 810 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 63


 2650 0138 17E0     		b	.L188
 2651              	.L192:
 811:.\main.c      ****         
 812:.\main.c      ****         case BA_execute:
 813:.\main.c      ****             if(BA_FLAG)
 2652              		.loc 1 813 0
 2653 013a 144B     		ldr	r3, .L201+20
 2654 013c 1B78     		ldrb	r3, [r3]
 2655 013e 002B     		cmp	r3, #0
 2656 0140 03D0     		beq	.L194
 814:.\main.c      ****             {
 815:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2657              		.loc 1 815 0
 2658 0142 0D4B     		ldr	r3, .L201
 2659 0144 0222     		mov	r2, #2
 2660 0146 1A70     		strb	r2, [r3]
 816:.\main.c      ****             }
 817:.\main.c      ****             else
 818:.\main.c      ****             {
 819:.\main.c      ****                 baseAzimuth_state = BA_wait;
 820:.\main.c      ****             }
 821:.\main.c      ****             break;
 2661              		.loc 1 821 0
 2662 0148 0FE0     		b	.L188
 2663              	.L194:
 819:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2664              		.loc 1 819 0
 2665 014a 0B4B     		ldr	r3, .L201
 2666 014c 0322     		mov	r2, #3
 2667 014e 1A70     		strb	r2, [r3]
 2668              		.loc 1 821 0
 2669 0150 0BE0     		b	.L188
 2670              	.L193:
 822:.\main.c      ****         
 823:.\main.c      ****         case BA_wait:
 824:.\main.c      ****             if(BA_FLAG)
 2671              		.loc 1 824 0
 2672 0152 0E4B     		ldr	r3, .L201+20
 2673 0154 1B78     		ldrb	r3, [r3]
 2674 0156 002B     		cmp	r3, #0
 2675 0158 03D0     		beq	.L196
 825:.\main.c      ****             {
 826:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2676              		.loc 1 826 0
 2677 015a 074B     		ldr	r3, .L201
 2678 015c 0222     		mov	r2, #2
 2679 015e 1A70     		strb	r2, [r3]
 827:.\main.c      ****             }
 828:.\main.c      ****             else
 829:.\main.c      ****             {
 830:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 831:.\main.c      ****             }
 832:.\main.c      ****             break;
 2680              		.loc 1 832 0
 2681 0160 02E0     		b	.L200
 2682              	.L196:
 830:.\main.c      ****                 baseAzimuth_state = BA_wait; 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 64


 2683              		.loc 1 830 0
 2684 0162 054B     		ldr	r3, .L201
 2685 0164 0322     		mov	r2, #3
 2686 0166 1A70     		strb	r2, [r3]
 2687              	.L200:
 2688              		.loc 1 832 0
 2689 0168 C046     		mov	r8, r8
 2690              	.L188:
 833:.\main.c      ****     }  
 834:.\main.c      ****     return BA_arr_cspot;
 2691              		.loc 1 834 0
 2692 016a FB1D     		add	r3, r7, #7
 2693 016c 1B78     		ldrb	r3, [r3]
 835:.\main.c      **** }
 2694              		.loc 1 835 0
 2695 016e 181C     		mov	r0, r3
 2696 0170 BD46     		mov	sp, r7
 2697 0172 05B0     		add	sp, sp, #20
 2698              		@ sp needed
 2699 0174 90BD     		pop	{r4, r7, pc}
 2700              	.L202:
 2701 0176 C046     		.align	2
 2702              	.L201:
 2703 0178 00000000 		.word	baseAzimuth_state
 2704 017c DC050000 		.word	1500
 2705 0180 00000000 		.word	data_array
 2706 0184 00000000 		.word	temp_val
 2707 0188 E7030000 		.word	999
 2708 018c 00000000 		.word	BA_FLAG
 2709              		.cfi_endproc
 2710              	.LFE50:
 2711              		.size	baseAzimuth, .-baseAzimuth
 2712              		.section	.text.initialize,"ax",%progbits
 2713              		.align	2
 2714              		.global	initialize
 2715              		.code	16
 2716              		.thumb_func
 2717              		.type	initialize, %function
 2718              	initialize:
 2719              	.LFB51:
 836:.\main.c      **** 
 837:.\main.c      **** //Initialization function for the program
 838:.\main.c      **** void initialize()
 839:.\main.c      **** {
 2720              		.loc 1 839 0
 2721              		.cfi_startproc
 2722 0000 80B5     		push	{r7, lr}
 2723              		.cfi_def_cfa_offset 8
 2724              		.cfi_offset 7, -8
 2725              		.cfi_offset 14, -4
 2726 0002 82B0     		sub	sp, sp, #8
 2727              		.cfi_def_cfa_offset 16
 2728 0004 00AF     		add	r7, sp, #0
 2729              		.cfi_def_cfa_register 7
 840:.\main.c      ****     WIZ_RST_Write(0);
 2730              		.loc 1 840 0
 2731 0006 0020     		mov	r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 65


 2732 0008 FFF7FEFF 		bl	WIZ_RST_Write
 841:.\main.c      ****     CyDelay(10);
 2733              		.loc 1 841 0
 2734 000c 0A20     		mov	r0, #10
 2735 000e FFF7FEFF 		bl	CyDelay
 842:.\main.c      ****     WIZ_RST_Write(1);
 2736              		.loc 1 842 0
 2737 0012 0120     		mov	r0, #1
 2738 0014 FFF7FEFF 		bl	WIZ_RST_Write
 843:.\main.c      ****     WIZ_SS_Write(1);
 2739              		.loc 1 843 0
 2740 0018 0120     		mov	r0, #1
 2741 001a FFF7FEFF 		bl	WIZ_SS_Write
 2742              	.LBB2:
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2743              		.loc 1 844 0
 2744 001e FB1D     		add	r3, r7, #7
 2745 0020 0022     		mov	r2, #0
 2746 0022 1A70     		strb	r2, [r3]
 2747 0024 0DE0     		b	.L204
 2748              	.L207:
 845:.\main.c      ****     {
 846:.\main.c      ****         if(WIZ_RDY_Read())
 2749              		.loc 1 846 0
 2750 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 2751 002a 031C     		mov	r3, r0
 2752 002c 002B     		cmp	r3, #0
 2753 002e 00D0     		beq	.L205
 847:.\main.c      ****         {
 848:.\main.c      ****             break;
 2754              		.loc 1 848 0
 2755 0030 0BE0     		b	.L206
 2756              	.L205:
 849:.\main.c      ****         }
 850:.\main.c      ****         else
 851:.\main.c      ****         {
 852:.\main.c      ****             CyDelay(4);
 2757              		.loc 1 852 0
 2758 0032 0420     		mov	r0, #4
 2759 0034 FFF7FEFF 		bl	CyDelay
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2760              		.loc 1 844 0
 2761 0038 FB1D     		add	r3, r7, #7
 2762 003a 1A78     		ldrb	r2, [r3]
 2763 003c FB1D     		add	r3, r7, #7
 2764 003e 0132     		add	r2, r2, #1
 2765 0040 1A70     		strb	r2, [r3]
 2766              	.L204:
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2767              		.loc 1 844 0 is_stmt 0 discriminator 1
 2768 0042 FB1D     		add	r3, r7, #7
 2769 0044 1B78     		ldrb	r3, [r3]
 2770 0046 632B     		cmp	r3, #99
 2771 0048 EDD9     		bls	.L207
 2772              	.L206:
 2773              	.LBE2:
 853:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 66


 854:.\main.c      ****     }
 855:.\main.c      ****     
 856:.\main.c      ****     //Initialize state variables
 857:.\main.c      ****     baseAzimuth_state = BA_start;
 2774              		.loc 1 857 0 is_stmt 1
 2775 004a 234B     		ldr	r3, .L208
 2776 004c 0022     		mov	r2, #0
 2777 004e 1A70     		strb	r2, [r3]
 858:.\main.c      ****     wristTilt_state = tilt_start;
 2778              		.loc 1 858 0
 2779 0050 224B     		ldr	r3, .L208+4
 2780 0052 0022     		mov	r2, #0
 2781 0054 1A70     		strb	r2, [r3]
 859:.\main.c      ****     wristRotate_state = rotate_start;
 2782              		.loc 1 859 0
 2783 0056 224B     		ldr	r3, .L208+8
 2784 0058 0022     		mov	r2, #0
 2785 005a 1A70     		strb	r2, [r3]
 860:.\main.c      ****     shoulder_state = shldr_start;
 2786              		.loc 1 860 0
 2787 005c 214B     		ldr	r3, .L208+12
 2788 005e 0022     		mov	r2, #0
 2789 0060 1A70     		strb	r2, [r3]
 861:.\main.c      ****     elbow_state = elbw_start;
 2790              		.loc 1 861 0
 2791 0062 214B     		ldr	r3, .L208+16
 2792 0064 0022     		mov	r2, #0
 2793 0066 1A70     		strb	r2, [r3]
 862:.\main.c      ****     
 863:.\main.c      ****     //start all of our components
 864:.\main.c      ****     //SPI_1_Start();
 865:.\main.c      ****     SPIM_1_Start();
 2794              		.loc 1 865 0
 2795 0068 FFF7FEFF 		bl	SPIM_1_Start
 866:.\main.c      ****     
 867:.\main.c      ****     Clock_pwm_Start();
 2796              		.loc 1 867 0
 2797 006c FFF7FEFF 		bl	Clock_pwm_Start
 868:.\main.c      ****     Clock_counter_Start();
 2798              		.loc 1 868 0
 2799 0070 FFF7FEFF 		bl	Clock_counter_Start
 869:.\main.c      ****     UART_1_Start();
 2800              		.loc 1 869 0
 2801 0074 FFF7FEFF 		bl	UART_1_Start
 870:.\main.c      ****     SHLDR_PWM_Start();
 2802              		.loc 1 870 0
 2803 0078 FFF7FEFF 		bl	SHLDR_PWM_Start
 871:.\main.c      ****     BA_PWM_Start();
 2804              		.loc 1 871 0
 2805 007c FFF7FEFF 		bl	BA_PWM_Start
 872:.\main.c      ****     ELBW_PWM_Start();
 2806              		.loc 1 872 0
 2807 0080 FFF7FEFF 		bl	ELBW_PWM_Start
 873:.\main.c      ****     
 874:.\main.c      ****     //uint8_t test_byte;
 875:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 2808              		.loc 1 875 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 67


 2809 0084 194B     		ldr	r3, .L208+20
 2810 0086 0420     		mov	r0, #4
 2811 0088 0121     		mov	r1, #1
 2812 008a 1A1C     		mov	r2, r3
 2813 008c FFF7FEFF 		bl	wiznetInit
 876:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
 877:.\main.c      ****     
 878:.\main.c      ****     //Initialize the dynamixels
 879:.\main.c      ****     ServoSpeed(0xFE, 100);
 2814              		.loc 1 879 0
 2815 0090 FE20     		mov	r0, #254
 2816 0092 6421     		mov	r1, #100
 2817 0094 FFF7FEFF 		bl	ServoSpeed
 880:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 2818              		.loc 1 880 0
 2819 0098 154B     		ldr	r3, .L208+24
 2820 009a FE20     		mov	r0, #254
 2821 009c 191C     		mov	r1, r3
 2822 009e FFF7FEFF 		bl	SetServoTorque
 881:.\main.c      ****     
 882:.\main.c      ****     //Initialize our motor drivers
 883:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 2823              		.loc 1 883 0
 2824 00a2 144B     		ldr	r3, .L208+28
 2825 00a4 181C     		mov	r0, r3
 2826 00a6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 884:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 2827              		.loc 1 884 0
 2828 00aa 124B     		ldr	r3, .L208+28
 2829 00ac 181C     		mov	r0, r3
 2830 00ae FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 885:.\main.c      ****     CyDelay(3000);
 2831              		.loc 1 885 0
 2832 00b2 114B     		ldr	r3, .L208+32
 2833 00b4 181C     		mov	r0, r3
 2834 00b6 FFF7FEFF 		bl	CyDelay
 886:.\main.c      ****    
 887:.\main.c      ****     ADC_Start();
 2835              		.loc 1 887 0
 2836 00ba FFF7FEFF 		bl	ADC_Start
 888:.\main.c      ****     ADC_StartConvert();
 2837              		.loc 1 888 0
 2838 00be FFF7FEFF 		bl	ADC_StartConvert
 889:.\main.c      ****     
 890:.\main.c      ****     //helps for generating random arrays
 891:.\main.c      ****     //srand((unsigned) time(&t));
 892:.\main.c      ****     
 893:.\main.c      ****     CyGlobalIntEnable;
 2839              		.loc 1 893 0
 2840              	@ 893 ".\main.c" 1
 2841 00c2 62B6     		CPSIE   i
 2842              	@ 0 "" 2
 894:.\main.c      ****     isr_1_StartEx(timer_isr);
 2843              		.loc 1 894 0
 2844              		.code	16
 2845 00c4 0D4B     		ldr	r3, .L208+36
 2846 00c6 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 68


 2847 00c8 FFF7FEFF 		bl	isr_1_StartEx
 895:.\main.c      ****     Timer_1_Start();
 2848              		.loc 1 895 0
 2849 00cc FFF7FEFF 		bl	Timer_1_Start
 896:.\main.c      ****     
 897:.\main.c      ****     //UART_TEST_Start();
 898:.\main.c      ****     
 899:.\main.c      **** }
 2850              		.loc 1 899 0
 2851 00d0 BD46     		mov	sp, r7
 2852 00d2 02B0     		add	sp, sp, #8
 2853              		@ sp needed
 2854 00d4 80BD     		pop	{r7, pc}
 2855              	.L209:
 2856 00d6 C046     		.align	2
 2857              	.L208:
 2858 00d8 00000000 		.word	baseAzimuth_state
 2859 00dc 00000000 		.word	wristTilt_state
 2860 00e0 00000000 		.word	wristRotate_state
 2861 00e4 00000000 		.word	shoulder_state
 2862 00e8 00000000 		.word	elbow_state
 2863 00ec 87690000 		.word	27015
 2864 00f0 FF030000 		.word	1023
 2865 00f4 DC050000 		.word	1500
 2866 00f8 B80B0000 		.word	3000
 2867 00fc 00000000 		.word	timer_isr
 2868              		.cfi_endproc
 2869              	.LFE51:
 2870              		.size	initialize, .-initialize
 2871              		.section	.text.main,"ax",%progbits
 2872              		.align	2
 2873              		.global	main
 2874              		.code	16
 2875              		.thumb_func
 2876              		.type	main, %function
 2877              	main:
 2878              	.LFB52:
 900:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
 901:.\main.c      **** int main()
 902:.\main.c      **** {  
 2879              		.loc 1 902 0
 2880              		.cfi_startproc
 2881 0000 90B5     		push	{r4, r7, lr}
 2882              		.cfi_def_cfa_offset 12
 2883              		.cfi_offset 4, -12
 2884              		.cfi_offset 7, -8
 2885              		.cfi_offset 14, -4
 2886 0002 93B0     		sub	sp, sp, #76
 2887              		.cfi_def_cfa_offset 88
 2888 0004 00AF     		add	r7, sp, #0
 2889              		.cfi_def_cfa_register 7
 903:.\main.c      ****     //Define variables
 904:.\main.c      ****     time_t t; //for testing
 905:.\main.c      ****     char time_array[8];
 906:.\main.c      ****     uint8 counter; //for testing
 907:.\main.c      ****     int direction = 0; //for testing
 2890              		.loc 1 907 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 69


 2891 0006 0023     		mov	r3, #0
 2892 0008 FB63     		str	r3, [r7, #60]
 908:.\main.c      ****     
 909:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
 910:.\main.c      ****     
 911:.\main.c      ****     uint8 BA_cspot;
 912:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
 913:.\main.c      ****     
 914:.\main.c      ****     
 915:.\main.c      ****     
 916:.\main.c      ****     //for testing
 917:.\main.c      ****     int increasing = 1;
 2893              		.loc 1 917 0
 2894 000a 0123     		mov	r3, #1
 2895 000c BB63     		str	r3, [r7, #56]
 918:.\main.c      ****     int first_count;
 919:.\main.c      ****     int second_count;
 920:.\main.c      ****     //uint16 dropped_packets; -- potential error variable
 921:.\main.c      ****     int temp_code_time;
 922:.\main.c      ****     int code_time = 0;
 2896              		.loc 1 922 0
 2897 000e 0023     		mov	r3, #0
 2898 0010 7B63     		str	r3, [r7, #52]
 923:.\main.c      ****     
 924:.\main.c      ****     
 925:.\main.c      ****     initialize();
 2899              		.loc 1 925 0
 2900 0012 FFF7FEFF 		bl	initialize
 2901              	.L215:
 926:.\main.c      **** //    uint8 i;
 927:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
 928:.\main.c      **** //    {
 929:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
 930:.\main.c      **** //    }
 931:.\main.c      **** 
 932:.\main.c      ****     for(;;)
 933:.\main.c      ****     {
 934:.\main.c      ****         
 935:.\main.c      ****         //UART_TEST_UartPutChar(31);
 936:.\main.c      ****         //check addresses
 937:.\main.c      ****         //TODO get the address bytes from Steve
 938:.\main.c      ****         //TODO at what point should we send feedback?
 939:.\main.c      ****         //first_count = Timer_1_ReadCounter();
 940:.\main.c      ****         
 941:.\main.c      ****         
 942:.\main.c      ****         if(wiznet)//(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 2902              		.loc 1 942 0
 2903 0016 2A4B     		ldr	r3, .L216
 2904 0018 1B78     		ldrb	r3, [r3]
 2905 001a 002B     		cmp	r3, #0
 2906 001c 13D0     		beq	.L211
 943:.\main.c      ****         {
 944:.\main.c      ****             //wiznetClearInterrupts();
 945:.\main.c      ****             fill_data_array();
 2907              		.loc 1 945 0
 2908 001e FFF7FEFF 		bl	fill_data_array
 946:.\main.c      ****             BA_FLAG = 1;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 70


 2909              		.loc 1 946 0
 2910 0022 284B     		ldr	r3, .L216+4
 2911 0024 0122     		mov	r2, #1
 2912 0026 1A70     		strb	r2, [r3]
 947:.\main.c      ****             WR_FLAG = 1;
 2913              		.loc 1 947 0
 2914 0028 274B     		ldr	r3, .L216+8
 2915 002a 0122     		mov	r2, #1
 2916 002c 1A70     		strb	r2, [r3]
 948:.\main.c      ****             WT_FLAG = 1;
 2917              		.loc 1 948 0
 2918 002e 274B     		ldr	r3, .L216+12
 2919 0030 0122     		mov	r2, #1
 2920 0032 1A70     		strb	r2, [r3]
 949:.\main.c      ****             SHOULDER_FLAG = 1;
 2921              		.loc 1 949 0
 2922 0034 264B     		ldr	r3, .L216+16
 2923 0036 0122     		mov	r2, #1
 2924 0038 1A70     		strb	r2, [r3]
 950:.\main.c      ****             ELBOW_FLAG = 1;
 2925              		.loc 1 950 0
 2926 003a 264B     		ldr	r3, .L216+20
 2927 003c 0122     		mov	r2, #1
 2928 003e 1A70     		strb	r2, [r3]
 951:.\main.c      ****             wiznet = 0; //for testing
 2929              		.loc 1 951 0
 2930 0040 1F4B     		ldr	r3, .L216
 2931 0042 0022     		mov	r2, #0
 2932 0044 1A70     		strb	r2, [r3]
 2933              	.L211:
 952:.\main.c      ****         }
 953:.\main.c      ****         
 954:.\main.c      ****         
 955:.\main.c      ****         //if(wiznet gives a complete packet)
 956:.\main.c      ****         BA_cspot = baseAzimuth(BA_cspot, BA_array);
 2934              		.loc 1 956 0
 2935 0046 3C1C     		mov	r4, r7
 2936 0048 4734     		add	r4, r4, #71
 2937 004a 3B1C     		mov	r3, r7
 2938 004c 4733     		add	r3, r3, #71
 2939 004e 1A78     		ldrb	r2, [r3]
 2940 0050 3B1D     		add	r3, r7, #4
 2941 0052 101C     		mov	r0, r2
 2942 0054 191C     		mov	r1, r3
 2943 0056 FFF7FEFF 		bl	baseAzimuth
 2944 005a 031C     		mov	r3, r0
 2945 005c 2370     		strb	r3, [r4]
 957:.\main.c      ****         shoulder();
 2946              		.loc 1 957 0
 2947 005e FFF7FEFF 		bl	shoulder
 958:.\main.c      ****         elbow();
 2948              		.loc 1 958 0
 2949 0062 FFF7FEFF 		bl	elbow
 959:.\main.c      ****         wristTilt();
 2950              		.loc 1 959 0
 2951 0066 FFF7FEFF 		bl	wristTilt
 960:.\main.c      ****         wristRotate();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 71


 2952              		.loc 1 960 0
 2953 006a FFF7FEFF 		bl	wristRotate
 961:.\main.c      ****         send_feedback();
 2954              		.loc 1 961 0
 2955 006e FFF7FEFF 		bl	send_feedback
 962:.\main.c      **** 
 963:.\main.c      ****         //else{dropped_packets++}
 964:.\main.c      ****         //second_count = Timer_1_ReadCounter();
 965:.\main.c      ****        // LED_Write(0);
 966:.\main.c      ****         //temp_code_time = second_count - first_count;
 967:.\main.c      **** //        if(temp_code_time > code_time)
 968:.\main.c      **** //        {
 969:.\main.c      **** //            code_time = temp_code_time;
 970:.\main.c      **** //            itoa(code_time, time_array);
 971:.\main.c      **** //            UART_TEST_UartPutString(time_array);
 972:.\main.c      **** //        }
 973:.\main.c      ****         
 974:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 2956              		.loc 1 974 0
 2957 0072 C046     		mov	r8, r8
 2958              	.L212:
 2959              		.loc 1 974 0 is_stmt 0 discriminator 1
 2960 0074 184B     		ldr	r3, .L216+24
 2961 0076 1B78     		ldrb	r3, [r3]
 2962 0078 DBB2     		uxtb	r3, r3
 2963 007a 002B     		cmp	r3, #0
 2964 007c FAD0     		beq	.L212
 975:.\main.c      ****         timerFlag = 0;
 2965              		.loc 1 975 0 is_stmt 1
 2966 007e 164B     		ldr	r3, .L216+24
 2967 0080 0022     		mov	r2, #0
 2968 0082 1A70     		strb	r2, [r3]
 2969              	.LBB3:
 976:.\main.c      ****     
 977:.\main.c      ****         
 978:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
 979:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
 980:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
 981:.\main.c      **** //        counter++;
 982:.\main.c      **** //        
 983:.\main.c      **** //        if(counter == 50)
 984:.\main.c      **** //        {
 985:.\main.c      **** //        
 986:.\main.c      **** //            if(increasing)
 987:.\main.c      **** //            {
 988:.\main.c      **** //                temp_val += 100;
 989:.\main.c      **** //                if(temp_val == 1000)
 990:.\main.c      **** //                {
 991:.\main.c      **** //                    increasing = 0;
 992:.\main.c      **** //                }
 993:.\main.c      **** //            }
 994:.\main.c      **** //            else
 995:.\main.c      **** //            {
 996:.\main.c      **** //                temp_val -= 100;
 997:.\main.c      **** //                if(temp_val == -1000)
 998:.\main.c      **** //                {
 999:.\main.c      **** //                    increasing = 1;   
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 72


1000:.\main.c      **** //                }
1001:.\main.c      **** //            }
1002:.\main.c      **** //            
1003:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1004:.\main.c      **** //            //int16 forward = 1000;
1005:.\main.c      **** //            //int16 backward = -1000;
1006:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2970              		.loc 1 1006 0
 2971 0084 0023     		mov	r3, #0
 2972 0086 3B64     		str	r3, [r7, #64]
 2973 0088 13E0     		b	.L213
 2974              	.L214:
1007:.\main.c      ****             {
1008:.\main.c      ****                 //int16 random_number = rand()%2001 - 1000;
1009:.\main.c      ****                 //test_array[i] = random_number >> 8;
1010:.\main.c      ****                 //test_array[i+1] = random_number & 0x00FF;
1011:.\main.c      ****                 test_array[i] = temp_val >> 8;
 2975              		.loc 1 1011 0 discriminator 2
 2976 008a 144B     		ldr	r3, .L216+28
 2977 008c 1B88     		ldrh	r3, [r3]
 2978 008e 1BB2     		sxth	r3, r3
 2979 0090 1B12     		asr	r3, r3, #8
 2980 0092 9BB2     		uxth	r3, r3
 2981 0094 DAB2     		uxtb	r2, r3
 2982 0096 1249     		ldr	r1, .L216+32
 2983 0098 3B6C     		ldr	r3, [r7, #64]
 2984 009a CB18     		add	r3, r1, r3
 2985 009c 1A70     		strb	r2, [r3]
1012:.\main.c      ****                 test_array[i+1] = temp_val & 0x00FF;
 2986              		.loc 1 1012 0 discriminator 2
 2987 009e 3B6C     		ldr	r3, [r7, #64]
 2988 00a0 0133     		add	r3, r3, #1
 2989 00a2 0E4A     		ldr	r2, .L216+28
 2990 00a4 1288     		ldrh	r2, [r2]
 2991 00a6 D1B2     		uxtb	r1, r2
 2992 00a8 0D4A     		ldr	r2, .L216+32
 2993 00aa D154     		strb	r1, [r2, r3]
1006:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2994              		.loc 1 1006 0 discriminator 2
 2995 00ac 3B6C     		ldr	r3, [r7, #64]
 2996 00ae 0233     		add	r3, r3, #2
 2997 00b0 3B64     		str	r3, [r7, #64]
 2998              	.L213:
1006:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2999              		.loc 1 1006 0 is_stmt 0 discriminator 1
 3000 00b2 3B6C     		ldr	r3, [r7, #64]
 3001 00b4 152B     		cmp	r3, #21
 3002 00b6 E8DD     		ble	.L214
 3003              	.LBE3:
1013:.\main.c      ****             }
1014:.\main.c      **** //            counter = 0;
1015:.\main.c      ****             wiznet = 1;
 3004              		.loc 1 1015 0 is_stmt 1
 3005 00b8 014B     		ldr	r3, .L216
 3006 00ba 0122     		mov	r2, #1
 3007 00bc 1A70     		strb	r2, [r3]
1016:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 73


 3008              		.loc 1 1016 0
 3009 00be AAE7     		b	.L215
 3010              	.L217:
 3011              		.align	2
 3012              	.L216:
 3013 00c0 00000000 		.word	wiznet
 3014 00c4 00000000 		.word	BA_FLAG
 3015 00c8 00000000 		.word	WR_FLAG
 3016 00cc 00000000 		.word	WT_FLAG
 3017 00d0 00000000 		.word	SHOULDER_FLAG
 3018 00d4 00000000 		.word	ELBOW_FLAG
 3019 00d8 00000000 		.word	timerFlag
 3020 00dc 00000000 		.word	temp_val
 3021 00e0 00000000 		.word	test_array
 3022              		.cfi_endproc
 3023              	.LFE52:
 3024              		.size	main, .-main
 3025              		.text
 3026              	.Letext0:
 3027              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3028              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3029              		.file 4 ".\\main.h"
 3030              		.section	.debug_info,"",%progbits
 3031              	.Ldebug_info0:
 3032 0000 FB080000 		.4byte	0x8fb
 3033 0004 0400     		.2byte	0x4
 3034 0006 00000000 		.4byte	.Ldebug_abbrev0
 3035 000a 04       		.byte	0x4
 3036 000b 01       		.uleb128 0x1
 3037 000c D7040000 		.4byte	.LASF124
 3038 0010 01       		.byte	0x1
 3039 0011 24060000 		.4byte	.LASF125
 3040 0015 B9000000 		.4byte	.LASF126
 3041 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3042 001d 00000000 		.4byte	0
 3043 0021 00000000 		.4byte	.Ldebug_line0
 3044 0025 02       		.uleb128 0x2
 3045 0026 01       		.byte	0x1
 3046 0027 06       		.byte	0x6
 3047 0028 87050000 		.4byte	.LASF0
 3048 002c 02       		.uleb128 0x2
 3049 002d 01       		.byte	0x1
 3050 002e 08       		.byte	0x8
 3051 002f 7C040000 		.4byte	.LASF1
 3052 0033 02       		.uleb128 0x2
 3053 0034 02       		.byte	0x2
 3054 0035 05       		.byte	0x5
 3055 0036 62030000 		.4byte	.LASF2
 3056 003a 02       		.uleb128 0x2
 3057 003b 02       		.byte	0x2
 3058 003c 07       		.byte	0x7
 3059 003d 9B050000 		.4byte	.LASF3
 3060 0041 02       		.uleb128 0x2
 3061 0042 04       		.byte	0x4
 3062 0043 05       		.byte	0x5
 3063 0044 87030000 		.4byte	.LASF4
 3064 0048 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 74


 3065 0049 04       		.byte	0x4
 3066 004a 07       		.byte	0x7
 3067 004b 20040000 		.4byte	.LASF5
 3068 004f 02       		.uleb128 0x2
 3069 0050 08       		.byte	0x8
 3070 0051 05       		.byte	0x5
 3071 0052 73020000 		.4byte	.LASF6
 3072 0056 02       		.uleb128 0x2
 3073 0057 08       		.byte	0x8
 3074 0058 07       		.byte	0x7
 3075 0059 70010000 		.4byte	.LASF7
 3076 005d 03       		.uleb128 0x3
 3077 005e 04       		.byte	0x4
 3078 005f 05       		.byte	0x5
 3079 0060 696E7400 		.ascii	"int\000"
 3080 0064 02       		.uleb128 0x2
 3081 0065 04       		.byte	0x4
 3082 0066 07       		.byte	0x7
 3083 0067 5D000000 		.4byte	.LASF8
 3084 006b 04       		.uleb128 0x4
 3085 006c D9050000 		.4byte	.LASF9
 3086 0070 02       		.byte	0x2
 3087 0071 A1       		.byte	0xa1
 3088 0072 2C000000 		.4byte	0x2c
 3089 0076 04       		.uleb128 0x4
 3090 0077 3D020000 		.4byte	.LASF10
 3091 007b 02       		.byte	0x2
 3092 007c A2       		.byte	0xa2
 3093 007d 3A000000 		.4byte	0x3a
 3094 0081 04       		.uleb128 0x4
 3095 0082 AE020000 		.4byte	.LASF11
 3096 0086 02       		.byte	0x2
 3097 0087 A3       		.byte	0xa3
 3098 0088 48000000 		.4byte	0x48
 3099 008c 04       		.uleb128 0x4
 3100 008d 4B020000 		.4byte	.LASF12
 3101 0091 02       		.byte	0x2
 3102 0092 A4       		.byte	0xa4
 3103 0093 25000000 		.4byte	0x25
 3104 0097 04       		.uleb128 0x4
 3105 0098 7D000000 		.4byte	.LASF13
 3106 009c 02       		.byte	0x2
 3107 009d A5       		.byte	0xa5
 3108 009e 33000000 		.4byte	0x33
 3109 00a2 02       		.uleb128 0x2
 3110 00a3 04       		.byte	0x4
 3111 00a4 04       		.byte	0x4
 3112 00a5 5C010000 		.4byte	.LASF14
 3113 00a9 02       		.uleb128 0x2
 3114 00aa 08       		.byte	0x8
 3115 00ab 04       		.byte	0x4
 3116 00ac DF050000 		.4byte	.LASF15
 3117 00b0 02       		.uleb128 0x2
 3118 00b1 01       		.byte	0x1
 3119 00b2 08       		.byte	0x8
 3120 00b3 30020000 		.4byte	.LASF16
 3121 00b7 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 75


 3122 00b8 6B000000 		.4byte	0x6b
 3123 00bc 02       		.uleb128 0x2
 3124 00bd 04       		.byte	0x4
 3125 00be 07       		.byte	0x7
 3126 00bf 17040000 		.4byte	.LASF17
 3127 00c3 06       		.uleb128 0x6
 3128 00c4 B0000000 		.4byte	0xb0
 3129 00c8 D3000000 		.4byte	0xd3
 3130 00cc 07       		.uleb128 0x7
 3131 00cd BC000000 		.4byte	0xbc
 3132 00d1 07       		.byte	0x7
 3133 00d2 00       		.byte	0
 3134 00d3 04       		.uleb128 0x4
 3135 00d4 61020000 		.4byte	.LASF18
 3136 00d8 03       		.byte	0x3
 3137 00d9 7A       		.byte	0x7a
 3138 00da 41000000 		.4byte	0x41
 3139 00de 08       		.uleb128 0x8
 3140 00df CB030000 		.4byte	.LASF24
 3141 00e3 01       		.byte	0x1
 3142 00e4 01       		.byte	0x1
 3143 00e5 0101     		.2byte	0x101
 3144 00e7 0A010000 		.4byte	0x10a
 3145 00eb 09       		.uleb128 0x9
 3146 00ec 3A010000 		.4byte	.LASF19
 3147 00f0 00       		.sleb128 0
 3148 00f1 09       		.uleb128 0x9
 3149 00f2 0C000000 		.4byte	.LASF20
 3150 00f6 01       		.sleb128 1
 3151 00f7 09       		.uleb128 0x9
 3152 00f8 90030000 		.4byte	.LASF21
 3153 00fc 02       		.sleb128 2
 3154 00fd 09       		.uleb128 0x9
 3155 00fe C6050000 		.4byte	.LASF22
 3156 0102 03       		.sleb128 3
 3157 0103 09       		.uleb128 0x9
 3158 0104 F0030000 		.4byte	.LASF23
 3159 0108 04       		.sleb128 4
 3160 0109 00       		.byte	0
 3161 010a 08       		.uleb128 0x8
 3162 010b 96020000 		.4byte	.LASF25
 3163 010f 01       		.byte	0x1
 3164 0110 01       		.byte	0x1
 3165 0111 6801     		.2byte	0x168
 3166 0113 36010000 		.4byte	0x136
 3167 0117 09       		.uleb128 0x9
 3168 0118 18010000 		.4byte	.LASF26
 3169 011c 00       		.sleb128 0
 3170 011d 09       		.uleb128 0x9
 3171 011e CB040000 		.4byte	.LASF27
 3172 0122 01       		.sleb128 1
 3173 0123 09       		.uleb128 0x9
 3174 0124 53030000 		.4byte	.LASF28
 3175 0128 02       		.sleb128 2
 3176 0129 09       		.uleb128 0x9
 3177 012a 4C040000 		.4byte	.LASF29
 3178 012e 03       		.sleb128 3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 76


 3179 012f 09       		.uleb128 0x9
 3180 0130 16000000 		.4byte	.LASF30
 3181 0134 04       		.sleb128 4
 3182 0135 00       		.byte	0
 3183 0136 08       		.uleb128 0x8
 3184 0137 47000000 		.4byte	.LASF31
 3185 013b 01       		.byte	0x1
 3186 013c 01       		.byte	0x1
 3187 013d D201     		.2byte	0x1d2
 3188 013f 5C010000 		.4byte	0x15c
 3189 0143 09       		.uleb128 0x9
 3190 0144 E2020000 		.4byte	.LASF32
 3191 0148 00       		.sleb128 0
 3192 0149 09       		.uleb128 0x9
 3193 014a 2D060000 		.4byte	.LASF33
 3194 014e 01       		.sleb128 1
 3195 014f 09       		.uleb128 0x9
 3196 0150 32040000 		.4byte	.LASF34
 3197 0154 02       		.sleb128 2
 3198 0155 09       		.uleb128 0x9
 3199 0156 AE050000 		.4byte	.LASF35
 3200 015a 03       		.sleb128 3
 3201 015b 00       		.byte	0
 3202 015c 08       		.uleb128 0x8
 3203 015d 81020000 		.4byte	.LASF36
 3204 0161 01       		.byte	0x1
 3205 0162 01       		.byte	0x1
 3206 0163 5A02     		.2byte	0x25a
 3207 0165 82010000 		.4byte	0x182
 3208 0169 09       		.uleb128 0x9
 3209 016a 65040000 		.4byte	.LASF37
 3210 016e 00       		.sleb128 0
 3211 016f 09       		.uleb128 0x9
 3212 0170 68020000 		.4byte	.LASF38
 3213 0174 01       		.sleb128 1
 3214 0175 09       		.uleb128 0x9
 3215 0176 BD040000 		.4byte	.LASF39
 3216 017a 02       		.sleb128 2
 3217 017b 09       		.uleb128 0x9
 3218 017c 0A020000 		.4byte	.LASF40
 3219 0180 03       		.sleb128 3
 3220 0181 00       		.byte	0
 3221 0182 08       		.uleb128 0x8
 3222 0183 6A000000 		.4byte	.LASF41
 3223 0187 01       		.byte	0x1
 3224 0188 01       		.byte	0x1
 3225 0189 E102     		.2byte	0x2e1
 3226 018b A8010000 		.4byte	0x1a8
 3227 018f 09       		.uleb128 0x9
 3228 0190 83000000 		.4byte	.LASF42
 3229 0194 00       		.sleb128 0
 3230 0195 09       		.uleb128 0x9
 3231 0196 62010000 		.4byte	.LASF43
 3232 019a 01       		.sleb128 1
 3233 019b 09       		.uleb128 0x9
 3234 019c 3C000000 		.4byte	.LASF44
 3235 01a0 02       		.sleb128 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 77


 3236 01a1 09       		.uleb128 0x9
 3237 01a2 B9030000 		.4byte	.LASF45
 3238 01a6 03       		.sleb128 3
 3239 01a7 00       		.byte	0
 3240 01a8 0A       		.uleb128 0xa
 3241 01a9 9D030000 		.4byte	.LASF73
 3242 01ad 01       		.byte	0x1
 3243 01ae 0A       		.byte	0xa
 3244 01af 00000000 		.4byte	.LFB34
 3245 01b3 28000000 		.4byte	.LFE34-.LFB34
 3246 01b7 01       		.uleb128 0x1
 3247 01b8 9C       		.byte	0x9c
 3248 01b9 CC010000 		.4byte	0x1cc
 3249 01bd 0B       		.uleb128 0xb
 3250 01be F9050000 		.4byte	.LASF48
 3251 01c2 01       		.byte	0x1
 3252 01c3 0C       		.byte	0xc
 3253 01c4 81000000 		.4byte	0x81
 3254 01c8 02       		.uleb128 0x2
 3255 01c9 91       		.byte	0x91
 3256 01ca 74       		.sleb128 -12
 3257 01cb 00       		.byte	0
 3258 01cc 0C       		.uleb128 0xc
 3259 01cd 93050000 		.4byte	.LASF49
 3260 01d1 01       		.byte	0x1
 3261 01d2 32       		.byte	0x32
 3262 01d3 76000000 		.4byte	0x76
 3263 01d7 00000000 		.4byte	.LFB35
 3264 01db 78000000 		.4byte	.LFE35-.LFB35
 3265 01df 01       		.uleb128 0x1
 3266 01e0 9C       		.byte	0x9c
 3267 01e1 2A020000 		.4byte	0x22a
 3268 01e5 0D       		.uleb128 0xd
 3269 01e6 7E030000 		.4byte	.LASF46
 3270 01ea 01       		.byte	0x1
 3271 01eb 32       		.byte	0x32
 3272 01ec 2A020000 		.4byte	0x22a
 3273 01f0 02       		.uleb128 0x2
 3274 01f1 91       		.byte	0x91
 3275 01f2 64       		.sleb128 -28
 3276 01f3 0D       		.uleb128 0xd
 3277 01f4 26000000 		.4byte	.LASF47
 3278 01f8 01       		.byte	0x1
 3279 01f9 32       		.byte	0x32
 3280 01fa 6B000000 		.4byte	0x6b
 3281 01fe 02       		.uleb128 0x2
 3282 01ff 91       		.byte	0x91
 3283 0200 63       		.sleb128 -29
 3284 0201 0E       		.uleb128 0xe
 3285 0202 6900     		.ascii	"i\000"
 3286 0204 01       		.byte	0x1
 3287 0205 34       		.byte	0x34
 3288 0206 6B000000 		.4byte	0x6b
 3289 020a 02       		.uleb128 0x2
 3290 020b 91       		.byte	0x91
 3291 020c 77       		.sleb128 -9
 3292 020d 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 78


 3293 020e 73756D00 		.ascii	"sum\000"
 3294 0212 01       		.byte	0x1
 3295 0213 35       		.byte	0x35
 3296 0214 81000000 		.4byte	0x81
 3297 0218 02       		.uleb128 0x2
 3298 0219 91       		.byte	0x91
 3299 021a 70       		.sleb128 -16
 3300 021b 0E       		.uleb128 0xe
 3301 021c 61766700 		.ascii	"avg\000"
 3302 0220 01       		.byte	0x1
 3303 0221 36       		.byte	0x36
 3304 0222 76000000 		.4byte	0x76
 3305 0226 02       		.uleb128 0x2
 3306 0227 91       		.byte	0x91
 3307 0228 6E       		.sleb128 -18
 3308 0229 00       		.byte	0
 3309 022a 0F       		.uleb128 0xf
 3310 022b 04       		.byte	0x4
 3311 022c 76000000 		.4byte	0x76
 3312 0230 10       		.uleb128 0x10
 3313 0231 9B000000 		.4byte	.LASF50
 3314 0235 01       		.byte	0x1
 3315 0236 42       		.byte	0x42
 3316 0237 6B000000 		.4byte	0x6b
 3317 023b 00000000 		.4byte	.LFB36
 3318 023f 3E000000 		.4byte	.LFE36-.LFB36
 3319 0243 01       		.uleb128 0x1
 3320 0244 9C       		.byte	0x9c
 3321 0245 66020000 		.4byte	0x266
 3322 0249 0D       		.uleb128 0xd
 3323 024a 91020000 		.4byte	.LASF51
 3324 024e 01       		.byte	0x1
 3325 024f 42       		.byte	0x42
 3326 0250 6B000000 		.4byte	0x6b
 3327 0254 02       		.uleb128 0x2
 3328 0255 91       		.byte	0x91
 3329 0256 77       		.sleb128 -9
 3330 0257 0D       		.uleb128 0xd
 3331 0258 05020000 		.4byte	.LASF52
 3332 025c 01       		.byte	0x1
 3333 025d 42       		.byte	0x42
 3334 025e 6B000000 		.4byte	0x6b
 3335 0262 02       		.uleb128 0x2
 3336 0263 91       		.byte	0x91
 3337 0264 76       		.sleb128 -10
 3338 0265 00       		.byte	0
 3339 0266 0C       		.uleb128 0xc
 3340 0267 E3030000 		.4byte	.LASF53
 3341 026b 01       		.byte	0x1
 3342 026c 4F       		.byte	0x4f
 3343 026d 6B000000 		.4byte	0x6b
 3344 0271 00000000 		.4byte	.LFB37
 3345 0275 0C010000 		.4byte	.LFE37-.LFB37
 3346 0279 01       		.uleb128 0x1
 3347 027a 9C       		.byte	0x9c
 3348 027b C6020000 		.4byte	0x2c6
 3349 027f 0D       		.uleb128 0xd
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 79


 3350 0280 FD020000 		.4byte	.LASF54
 3351 0284 01       		.byte	0x1
 3352 0285 4F       		.byte	0x4f
 3353 0286 2A020000 		.4byte	0x22a
 3354 028a 02       		.uleb128 0x2
 3355 028b 91       		.byte	0x91
 3356 028c 6C       		.sleb128 -20
 3357 028d 0D       		.uleb128 0xd
 3358 028e 35020000 		.4byte	.LASF55
 3359 0292 01       		.byte	0x1
 3360 0293 4F       		.byte	0x4f
 3361 0294 6B000000 		.4byte	0x6b
 3362 0298 02       		.uleb128 0x2
 3363 0299 91       		.byte	0x91
 3364 029a 6B       		.sleb128 -21
 3365 029b 0D       		.uleb128 0xd
 3366 029c A9020000 		.4byte	.LASF56
 3367 02a0 01       		.byte	0x1
 3368 02a1 4F       		.byte	0x4f
 3369 02a2 6B000000 		.4byte	0x6b
 3370 02a6 02       		.uleb128 0x2
 3371 02a7 91       		.byte	0x91
 3372 02a8 6A       		.sleb128 -22
 3373 02a9 0D       		.uleb128 0xd
 3374 02aa 20030000 		.4byte	.LASF57
 3375 02ae 01       		.byte	0x1
 3376 02af 4F       		.byte	0x4f
 3377 02b0 5D000000 		.4byte	0x5d
 3378 02b4 02       		.uleb128 0x2
 3379 02b5 91       		.byte	0x91
 3380 02b6 64       		.sleb128 -28
 3381 02b7 0B       		.uleb128 0xb
 3382 02b8 6A010000 		.4byte	.LASF58
 3383 02bc 01       		.byte	0x1
 3384 02bd 51       		.byte	0x51
 3385 02be 6B000000 		.4byte	0x6b
 3386 02c2 02       		.uleb128 0x2
 3387 02c3 91       		.byte	0x91
 3388 02c4 77       		.sleb128 -9
 3389 02c5 00       		.byte	0
 3390 02c6 0C       		.uleb128 0xc
 3391 02c7 45010000 		.4byte	.LASF59
 3392 02cb 01       		.byte	0x1
 3393 02cc 75       		.byte	0x75
 3394 02cd 6B000000 		.4byte	0x6b
 3395 02d1 00000000 		.4byte	.LFB38
 3396 02d5 0C020000 		.4byte	.LFE38-.LFB38
 3397 02d9 01       		.uleb128 0x1
 3398 02da 9C       		.byte	0x9c
 3399 02db 18030000 		.4byte	0x318
 3400 02df 0D       		.uleb128 0xd
 3401 02e0 20020000 		.4byte	.LASF60
 3402 02e4 01       		.byte	0x1
 3403 02e5 75       		.byte	0x75
 3404 02e6 6B000000 		.4byte	0x6b
 3405 02ea 02       		.uleb128 0x2
 3406 02eb 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 80


 3407 02ec 6F       		.sleb128 -17
 3408 02ed 0D       		.uleb128 0xd
 3409 02ee FD020000 		.4byte	.LASF54
 3410 02f2 01       		.byte	0x1
 3411 02f3 75       		.byte	0x75
 3412 02f4 2A020000 		.4byte	0x22a
 3413 02f8 02       		.uleb128 0x2
 3414 02f9 91       		.byte	0x91
 3415 02fa 68       		.sleb128 -24
 3416 02fb 0D       		.uleb128 0xd
 3417 02fc 3B030000 		.4byte	.LASF61
 3418 0300 01       		.byte	0x1
 3419 0301 75       		.byte	0x75
 3420 0302 6B000000 		.4byte	0x6b
 3421 0306 02       		.uleb128 0x2
 3422 0307 91       		.byte	0x91
 3423 0308 6E       		.sleb128 -18
 3424 0309 0D       		.uleb128 0xd
 3425 030a 5E050000 		.4byte	.LASF62
 3426 030e 01       		.byte	0x1
 3427 030f 75       		.byte	0x75
 3428 0310 76000000 		.4byte	0x76
 3429 0314 02       		.uleb128 0x2
 3430 0315 91       		.byte	0x91
 3431 0316 6C       		.sleb128 -20
 3432 0317 00       		.byte	0
 3433 0318 10       		.uleb128 0x10
 3434 0319 BD020000 		.4byte	.LASF63
 3435 031d 01       		.byte	0x1
 3436 031e A3       		.byte	0xa3
 3437 031f 76000000 		.4byte	0x76
 3438 0323 00000000 		.4byte	.LFB39
 3439 0327 84000000 		.4byte	.LFE39-.LFB39
 3440 032b 01       		.uleb128 0x1
 3441 032c 9C       		.byte	0x9c
 3442 032d 94030000 		.4byte	0x394
 3443 0331 0D       		.uleb128 0xd
 3444 0332 71040000 		.4byte	.LASF64
 3445 0336 01       		.byte	0x1
 3446 0337 A3       		.byte	0xa3
 3447 0338 94030000 		.4byte	0x394
 3448 033c 02       		.uleb128 0x2
 3449 033d 91       		.byte	0x91
 3450 033e 6C       		.sleb128 -20
 3451 033f 0D       		.uleb128 0xd
 3452 0340 AC010000 		.4byte	.LASF65
 3453 0344 01       		.byte	0x1
 3454 0345 A3       		.byte	0xa3
 3455 0346 6B000000 		.4byte	0x6b
 3456 034a 02       		.uleb128 0x2
 3457 034b 91       		.byte	0x91
 3458 034c 6B       		.sleb128 -21
 3459 034d 0D       		.uleb128 0xd
 3460 034e B2010000 		.4byte	.LASF66
 3461 0352 01       		.byte	0x1
 3462 0353 A3       		.byte	0xa3
 3463 0354 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 81


 3464 0358 02       		.uleb128 0x2
 3465 0359 91       		.byte	0x91
 3466 035a 6A       		.sleb128 -22
 3467 035b 0B       		.uleb128 0xb
 3468 035c 5E050000 		.4byte	.LASF62
 3469 0360 01       		.byte	0x1
 3470 0361 A5       		.byte	0xa5
 3471 0362 76000000 		.4byte	0x76
 3472 0366 02       		.uleb128 0x2
 3473 0367 91       		.byte	0x91
 3474 0368 70       		.sleb128 -16
 3475 0369 0B       		.uleb128 0xb
 3476 036a C0010000 		.4byte	.LASF67
 3477 036e 01       		.byte	0x1
 3478 036f A6       		.byte	0xa6
 3479 0370 97000000 		.4byte	0x97
 3480 0374 02       		.uleb128 0x2
 3481 0375 91       		.byte	0x91
 3482 0376 76       		.sleb128 -10
 3483 0377 0B       		.uleb128 0xb
 3484 0378 C6010000 		.4byte	.LASF68
 3485 037c 01       		.byte	0x1
 3486 037d A7       		.byte	0xa7
 3487 037e 97000000 		.4byte	0x97
 3488 0382 02       		.uleb128 0x2
 3489 0383 91       		.byte	0x91
 3490 0384 74       		.sleb128 -12
 3491 0385 0B       		.uleb128 0xb
 3492 0386 CC010000 		.4byte	.LASF69
 3493 038a 01       		.byte	0x1
 3494 038b A8       		.byte	0xa8
 3495 038c 97000000 		.4byte	0x97
 3496 0390 02       		.uleb128 0x2
 3497 0391 91       		.byte	0x91
 3498 0392 72       		.sleb128 -14
 3499 0393 00       		.byte	0
 3500 0394 0F       		.uleb128 0xf
 3501 0395 04       		.byte	0x4
 3502 0396 8C000000 		.4byte	0x8c
 3503 039a 10       		.uleb128 0x10
 3504 039b 2F030000 		.4byte	.LASF70
 3505 039f 01       		.byte	0x1
 3506 03a0 B1       		.byte	0xb1
 3507 03a1 76000000 		.4byte	0x76
 3508 03a5 00000000 		.4byte	.LFB40
 3509 03a9 20000000 		.4byte	.LFE40-.LFB40
 3510 03ad 01       		.uleb128 0x1
 3511 03ae 9C       		.byte	0x9c
 3512 03af D0030000 		.4byte	0x3d0
 3513 03b3 0D       		.uleb128 0xd
 3514 03b4 27030000 		.4byte	.LASF71
 3515 03b8 01       		.byte	0x1
 3516 03b9 B1       		.byte	0xb1
 3517 03ba 81000000 		.4byte	0x81
 3518 03be 02       		.uleb128 0x2
 3519 03bf 91       		.byte	0x91
 3520 03c0 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 82


 3521 03c1 0B       		.uleb128 0xb
 3522 03c2 50020000 		.4byte	.LASF72
 3523 03c6 01       		.byte	0x1
 3524 03c7 B5       		.byte	0xb5
 3525 03c8 76000000 		.4byte	0x76
 3526 03cc 02       		.uleb128 0x2
 3527 03cd 91       		.byte	0x91
 3528 03ce 76       		.sleb128 -10
 3529 03cf 00       		.byte	0
 3530 03d0 11       		.uleb128 0x11
 3531 03d1 09040000 		.4byte	.LASF127
 3532 03d5 01       		.byte	0x1
 3533 03d6 B9       		.byte	0xb9
 3534 03d7 00000000 		.4byte	.LFB41
 3535 03db 08000000 		.4byte	.LFE41-.LFB41
 3536 03df 01       		.uleb128 0x1
 3537 03e0 9C       		.byte	0x9c
 3538 03e1 12       		.uleb128 0x12
 3539 03e2 8A040000 		.4byte	.LASF81
 3540 03e6 01       		.byte	0x1
 3541 03e7 C2       		.byte	0xc2
 3542 03e8 00000000 		.4byte	.LFB42
 3543 03ec 44000000 		.4byte	.LFE42-.LFB42
 3544 03f0 01       		.uleb128 0x1
 3545 03f1 9C       		.byte	0x9c
 3546 03f2 03040000 		.4byte	0x403
 3547 03f6 0E       		.uleb128 0xe
 3548 03f7 6900     		.ascii	"i\000"
 3549 03f9 01       		.byte	0x1
 3550 03fa C5       		.byte	0xc5
 3551 03fb 6B000000 		.4byte	0x6b
 3552 03ff 02       		.uleb128 0x2
 3553 0400 91       		.byte	0x91
 3554 0401 77       		.sleb128 -9
 3555 0402 00       		.byte	0
 3556 0403 0A       		.uleb128 0xa
 3557 0404 87010000 		.4byte	.LASF74
 3558 0408 01       		.byte	0x1
 3559 0409 CC       		.byte	0xcc
 3560 040a 00000000 		.4byte	.LFB43
 3561 040e 98000000 		.4byte	.LFE43-.LFB43
 3562 0412 01       		.uleb128 0x1
 3563 0413 9C       		.byte	0x9c
 3564 0414 43040000 		.4byte	0x443
 3565 0418 0D       		.uleb128 0xd
 3566 0419 F1050000 		.4byte	.LASF75
 3567 041d 01       		.byte	0x1
 3568 041e CC       		.byte	0xcc
 3569 041f 6B000000 		.4byte	0x6b
 3570 0423 02       		.uleb128 0x2
 3571 0424 91       		.byte	0x91
 3572 0425 67       		.sleb128 -25
 3573 0426 0D       		.uleb128 0xd
 3574 0427 1B060000 		.4byte	.LASF76
 3575 042b 01       		.byte	0x1
 3576 042c CC       		.byte	0xcc
 3577 042d 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 83


 3578 0431 02       		.uleb128 0x2
 3579 0432 91       		.byte	0x91
 3580 0433 64       		.sleb128 -28
 3581 0434 0B       		.uleb128 0xb
 3582 0435 FD020000 		.4byte	.LASF54
 3583 0439 01       		.byte	0x1
 3584 043a CE       		.byte	0xce
 3585 043b 43040000 		.4byte	0x443
 3586 043f 02       		.uleb128 0x2
 3587 0440 91       		.byte	0x91
 3588 0441 6C       		.sleb128 -20
 3589 0442 00       		.byte	0
 3590 0443 06       		.uleb128 0x6
 3591 0444 6B000000 		.4byte	0x6b
 3592 0448 53040000 		.4byte	0x453
 3593 044c 07       		.uleb128 0x7
 3594 044d BC000000 		.4byte	0xbc
 3595 0451 08       		.byte	0x8
 3596 0452 00       		.byte	0
 3597 0453 0A       		.uleb128 0xa
 3598 0454 0C060000 		.4byte	.LASF77
 3599 0458 01       		.byte	0x1
 3600 0459 DD       		.byte	0xdd
 3601 045a 00000000 		.4byte	.LFB44
 3602 045e 98000000 		.4byte	.LFE44-.LFB44
 3603 0462 01       		.uleb128 0x1
 3604 0463 9C       		.byte	0x9c
 3605 0464 93040000 		.4byte	0x493
 3606 0468 0D       		.uleb128 0xd
 3607 0469 F1050000 		.4byte	.LASF75
 3608 046d 01       		.byte	0x1
 3609 046e DD       		.byte	0xdd
 3610 046f 6B000000 		.4byte	0x6b
 3611 0473 02       		.uleb128 0x2
 3612 0474 91       		.byte	0x91
 3613 0475 67       		.sleb128 -25
 3614 0476 0D       		.uleb128 0xd
 3615 0477 44020000 		.4byte	.LASF78
 3616 047b 01       		.byte	0x1
 3617 047c DD       		.byte	0xdd
 3618 047d 76000000 		.4byte	0x76
 3619 0481 02       		.uleb128 0x2
 3620 0482 91       		.byte	0x91
 3621 0483 64       		.sleb128 -28
 3622 0484 0B       		.uleb128 0xb
 3623 0485 FD020000 		.4byte	.LASF54
 3624 0489 01       		.byte	0x1
 3625 048a DF       		.byte	0xdf
 3626 048b 43040000 		.4byte	0x443
 3627 048f 02       		.uleb128 0x2
 3628 0490 91       		.byte	0x91
 3629 0491 6C       		.sleb128 -20
 3630 0492 00       		.byte	0
 3631 0493 0A       		.uleb128 0xa
 3632 0494 FE030000 		.4byte	.LASF79
 3633 0498 01       		.byte	0x1
 3634 0499 EF       		.byte	0xef
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 84


 3635 049a 00000000 		.4byte	.LFB45
 3636 049e 98000000 		.4byte	.LFE45-.LFB45
 3637 04a2 01       		.uleb128 0x1
 3638 04a3 9C       		.byte	0x9c
 3639 04a4 D3040000 		.4byte	0x4d3
 3640 04a8 0D       		.uleb128 0xd
 3641 04a9 F1050000 		.4byte	.LASF75
 3642 04ad 01       		.byte	0x1
 3643 04ae EF       		.byte	0xef
 3644 04af 6B000000 		.4byte	0x6b
 3645 04b3 02       		.uleb128 0x2
 3646 04b4 91       		.byte	0x91
 3647 04b5 67       		.sleb128 -25
 3648 04b6 0D       		.uleb128 0xd
 3649 04b7 25010000 		.4byte	.LASF80
 3650 04bb 01       		.byte	0x1
 3651 04bc EF       		.byte	0xef
 3652 04bd 76000000 		.4byte	0x76
 3653 04c1 02       		.uleb128 0x2
 3654 04c2 91       		.byte	0x91
 3655 04c3 64       		.sleb128 -28
 3656 04c4 0B       		.uleb128 0xb
 3657 04c5 FD020000 		.4byte	.LASF54
 3658 04c9 01       		.byte	0x1
 3659 04ca F1       		.byte	0xf1
 3660 04cb 43040000 		.4byte	0x443
 3661 04cf 02       		.uleb128 0x2
 3662 04d0 91       		.byte	0x91
 3663 04d1 6C       		.sleb128 -20
 3664 04d2 00       		.byte	0
 3665 04d3 13       		.uleb128 0x13
 3666 04d4 CA020000 		.4byte	.LASF82
 3667 04d8 01       		.byte	0x1
 3668 04d9 0301     		.2byte	0x103
 3669 04db 00000000 		.4byte	.LFB46
 3670 04df 50010000 		.4byte	.LFE46-.LFB46
 3671 04e3 01       		.uleb128 0x1
 3672 04e4 9C       		.byte	0x9c
 3673 04e5 15050000 		.4byte	0x515
 3674 04e9 14       		.uleb128 0x14
 3675 04ea 6900     		.ascii	"i\000"
 3676 04ec 01       		.byte	0x1
 3677 04ed 1301     		.2byte	0x113
 3678 04ef 6B000000 		.4byte	0x6b
 3679 04f3 02       		.uleb128 0x2
 3680 04f4 91       		.byte	0x91
 3681 04f5 6F       		.sleb128 -17
 3682 04f6 14       		.uleb128 0x14
 3683 04f7 61766700 		.ascii	"avg\000"
 3684 04fb 01       		.byte	0x1
 3685 04fc 1401     		.2byte	0x114
 3686 04fe 76000000 		.4byte	0x76
 3687 0502 02       		.uleb128 0x2
 3688 0503 91       		.byte	0x91
 3689 0504 6A       		.sleb128 -22
 3690 0505 15       		.uleb128 0x15
 3691 0506 5E050000 		.4byte	.LASF62
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 85


 3692 050a 01       		.byte	0x1
 3693 050b 1501     		.2byte	0x115
 3694 050d 76000000 		.4byte	0x76
 3695 0511 02       		.uleb128 0x2
 3696 0512 91       		.byte	0x91
 3697 0513 6C       		.sleb128 -20
 3698 0514 00       		.byte	0
 3699 0515 13       		.uleb128 0x13
 3700 0516 9A040000 		.4byte	.LASF83
 3701 051a 01       		.byte	0x1
 3702 051b 6A01     		.2byte	0x16a
 3703 051d 00000000 		.4byte	.LFB47
 3704 0521 50010000 		.4byte	.LFE47-.LFB47
 3705 0525 01       		.uleb128 0x1
 3706 0526 9C       		.byte	0x9c
 3707 0527 57050000 		.4byte	0x557
 3708 052b 14       		.uleb128 0x14
 3709 052c 6900     		.ascii	"i\000"
 3710 052e 01       		.byte	0x1
 3711 052f 7A01     		.2byte	0x17a
 3712 0531 6B000000 		.4byte	0x6b
 3713 0535 02       		.uleb128 0x2
 3714 0536 91       		.byte	0x91
 3715 0537 6F       		.sleb128 -17
 3716 0538 14       		.uleb128 0x14
 3717 0539 61766700 		.ascii	"avg\000"
 3718 053d 01       		.byte	0x1
 3719 053e 7B01     		.2byte	0x17b
 3720 0540 76000000 		.4byte	0x76
 3721 0544 02       		.uleb128 0x2
 3722 0545 91       		.byte	0x91
 3723 0546 6A       		.sleb128 -22
 3724 0547 15       		.uleb128 0x15
 3725 0548 5E050000 		.4byte	.LASF62
 3726 054c 01       		.byte	0x1
 3727 054d 7C01     		.2byte	0x17c
 3728 054f 76000000 		.4byte	0x76
 3729 0553 02       		.uleb128 0x2
 3730 0554 91       		.byte	0x91
 3731 0555 6C       		.sleb128 -20
 3732 0556 00       		.byte	0
 3733 0557 13       		.uleb128 0x13
 3734 0558 E7010000 		.4byte	.LASF84
 3735 055c 01       		.byte	0x1
 3736 055d D301     		.2byte	0x1d3
 3737 055f 00000000 		.4byte	.LFB48
 3738 0563 14020000 		.4byte	.LFE48-.LFB48
 3739 0567 01       		.uleb128 0x1
 3740 0568 9C       		.byte	0x9c
 3741 0569 A8050000 		.4byte	0x5a8
 3742 056d 14       		.uleb128 0x14
 3743 056e 6900     		.ascii	"i\000"
 3744 0570 01       		.byte	0x1
 3745 0571 D901     		.2byte	0x1d9
 3746 0573 6B000000 		.4byte	0x6b
 3747 0577 02       		.uleb128 0x2
 3748 0578 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 86


 3749 0579 6F       		.sleb128 -17
 3750 057a 14       		.uleb128 0x14
 3751 057b 61766700 		.ascii	"avg\000"
 3752 057f 01       		.byte	0x1
 3753 0580 DA01     		.2byte	0x1da
 3754 0582 76000000 		.4byte	0x76
 3755 0586 02       		.uleb128 0x2
 3756 0587 91       		.byte	0x91
 3757 0588 68       		.sleb128 -24
 3758 0589 15       		.uleb128 0x15
 3759 058a 5E050000 		.4byte	.LASF62
 3760 058e 01       		.byte	0x1
 3761 058f DB01     		.2byte	0x1db
 3762 0591 76000000 		.4byte	0x76
 3763 0595 02       		.uleb128 0x2
 3764 0596 91       		.byte	0x91
 3765 0597 6A       		.sleb128 -22
 3766 0598 15       		.uleb128 0x15
 3767 0599 50020000 		.4byte	.LASF72
 3768 059d 01       		.byte	0x1
 3769 059e DE01     		.2byte	0x1de
 3770 05a0 76000000 		.4byte	0x76
 3771 05a4 02       		.uleb128 0x2
 3772 05a5 91       		.byte	0x91
 3773 05a6 6C       		.sleb128 -20
 3774 05a7 00       		.byte	0
 3775 05a8 13       		.uleb128 0x13
 3776 05a9 A3010000 		.4byte	.LASF85
 3777 05ad 01       		.byte	0x1
 3778 05ae 5B02     		.2byte	0x25b
 3779 05b0 00000000 		.4byte	.LFB49
 3780 05b4 20020000 		.4byte	.LFE49-.LFB49
 3781 05b8 01       		.uleb128 0x1
 3782 05b9 9C       		.byte	0x9c
 3783 05ba F9050000 		.4byte	0x5f9
 3784 05be 14       		.uleb128 0x14
 3785 05bf 6900     		.ascii	"i\000"
 3786 05c1 01       		.byte	0x1
 3787 05c2 6102     		.2byte	0x261
 3788 05c4 6B000000 		.4byte	0x6b
 3789 05c8 02       		.uleb128 0x2
 3790 05c9 91       		.byte	0x91
 3791 05ca 6F       		.sleb128 -17
 3792 05cb 14       		.uleb128 0x14
 3793 05cc 61766700 		.ascii	"avg\000"
 3794 05d0 01       		.byte	0x1
 3795 05d1 6202     		.2byte	0x262
 3796 05d3 76000000 		.4byte	0x76
 3797 05d7 02       		.uleb128 0x2
 3798 05d8 91       		.byte	0x91
 3799 05d9 68       		.sleb128 -24
 3800 05da 15       		.uleb128 0x15
 3801 05db 5E050000 		.4byte	.LASF62
 3802 05df 01       		.byte	0x1
 3803 05e0 6302     		.2byte	0x263
 3804 05e2 76000000 		.4byte	0x76
 3805 05e6 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 87


 3806 05e7 91       		.byte	0x91
 3807 05e8 6A       		.sleb128 -22
 3808 05e9 15       		.uleb128 0x15
 3809 05ea 50020000 		.4byte	.LASF72
 3810 05ee 01       		.byte	0x1
 3811 05ef 6402     		.2byte	0x264
 3812 05f1 76000000 		.4byte	0x76
 3813 05f5 02       		.uleb128 0x2
 3814 05f6 91       		.byte	0x91
 3815 05f7 6C       		.sleb128 -20
 3816 05f8 00       		.byte	0
 3817 05f9 16       		.uleb128 0x16
 3818 05fa 00000000 		.4byte	.LASF86
 3819 05fe 01       		.byte	0x1
 3820 05ff E202     		.2byte	0x2e2
 3821 0601 6B000000 		.4byte	0x6b
 3822 0605 00000000 		.4byte	.LFB50
 3823 0609 90010000 		.4byte	.LFE50-.LFB50
 3824 060d 01       		.uleb128 0x1
 3825 060e 9C       		.byte	0x9c
 3826 060f 5D060000 		.4byte	0x65d
 3827 0613 17       		.uleb128 0x17
 3828 0614 13030000 		.4byte	.LASF87
 3829 0618 01       		.byte	0x1
 3830 0619 E202     		.2byte	0x2e2
 3831 061b 6B000000 		.4byte	0x6b
 3832 061f 02       		.uleb128 0x2
 3833 0620 91       		.byte	0x91
 3834 0621 67       		.sleb128 -25
 3835 0622 17       		.uleb128 0x17
 3836 0623 3F040000 		.4byte	.LASF88
 3837 0627 01       		.byte	0x1
 3838 0628 E202     		.2byte	0x2e2
 3839 062a 2A020000 		.4byte	0x22a
 3840 062e 02       		.uleb128 0x2
 3841 062f 91       		.byte	0x91
 3842 0630 60       		.sleb128 -32
 3843 0631 14       		.uleb128 0x14
 3844 0632 6900     		.ascii	"i\000"
 3845 0634 01       		.byte	0x1
 3846 0635 E702     		.2byte	0x2e7
 3847 0637 6B000000 		.4byte	0x6b
 3848 063b 02       		.uleb128 0x2
 3849 063c 91       		.byte	0x91
 3850 063d 6F       		.sleb128 -17
 3851 063e 14       		.uleb128 0x14
 3852 063f 61766700 		.ascii	"avg\000"
 3853 0643 01       		.byte	0x1
 3854 0644 E802     		.2byte	0x2e8
 3855 0646 76000000 		.4byte	0x76
 3856 064a 02       		.uleb128 0x2
 3857 064b 91       		.byte	0x91
 3858 064c 6A       		.sleb128 -22
 3859 064d 15       		.uleb128 0x15
 3860 064e 5E050000 		.4byte	.LASF62
 3861 0652 01       		.byte	0x1
 3862 0653 E902     		.2byte	0x2e9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 88


 3863 0655 76000000 		.4byte	0x76
 3864 0659 02       		.uleb128 0x2
 3865 065a 91       		.byte	0x91
 3866 065b 6C       		.sleb128 -20
 3867 065c 00       		.byte	0
 3868 065d 13       		.uleb128 0x13
 3869 065e D2010000 		.4byte	.LASF89
 3870 0662 01       		.byte	0x1
 3871 0663 4603     		.2byte	0x346
 3872 0665 00000000 		.4byte	.LFB51
 3873 0669 00010000 		.4byte	.LFE51-.LFB51
 3874 066d 01       		.uleb128 0x1
 3875 066e 9C       		.byte	0x9c
 3876 066f 8B060000 		.4byte	0x68b
 3877 0673 18       		.uleb128 0x18
 3878 0674 1E000000 		.4byte	.LBB2
 3879 0678 2C000000 		.4byte	.LBE2-.LBB2
 3880 067c 14       		.uleb128 0x14
 3881 067d 6A00     		.ascii	"j\000"
 3882 067f 01       		.byte	0x1
 3883 0680 4C03     		.2byte	0x34c
 3884 0682 6B000000 		.4byte	0x6b
 3885 0686 02       		.uleb128 0x2
 3886 0687 91       		.byte	0x91
 3887 0688 77       		.sleb128 -9
 3888 0689 00       		.byte	0
 3889 068a 00       		.byte	0
 3890 068b 19       		.uleb128 0x19
 3891 068c B8050000 		.4byte	.LASF90
 3892 0690 01       		.byte	0x1
 3893 0691 8503     		.2byte	0x385
 3894 0693 5D000000 		.4byte	0x5d
 3895 0697 00000000 		.4byte	.LFB52
 3896 069b E4000000 		.4byte	.LFE52-.LFB52
 3897 069f 01       		.uleb128 0x1
 3898 06a0 9C       		.byte	0x9c
 3899 06a1 52070000 		.4byte	0x752
 3900 06a5 1A       		.uleb128 0x1a
 3901 06a6 7400     		.ascii	"t\000"
 3902 06a8 01       		.byte	0x1
 3903 06a9 8803     		.2byte	0x388
 3904 06ab D3000000 		.4byte	0xd3
 3905 06af 15       		.uleb128 0x15
 3906 06b0 01060000 		.4byte	.LASF91
 3907 06b4 01       		.byte	0x1
 3908 06b5 8903     		.2byte	0x389
 3909 06b7 C3000000 		.4byte	0xc3
 3910 06bb 02       		.uleb128 0x2
 3911 06bc 91       		.byte	0x91
 3912 06bd 54       		.sleb128 -44
 3913 06be 1B       		.uleb128 0x1b
 3914 06bf B8010000 		.4byte	.LASF92
 3915 06c3 01       		.byte	0x1
 3916 06c4 8A03     		.2byte	0x38a
 3917 06c6 6B000000 		.4byte	0x6b
 3918 06ca 15       		.uleb128 0x15
 3919 06cb C1030000 		.4byte	.LASF93
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 89


 3920 06cf 01       		.byte	0x1
 3921 06d0 8B03     		.2byte	0x38b
 3922 06d2 5D000000 		.4byte	0x5d
 3923 06d6 02       		.uleb128 0x2
 3924 06d7 91       		.byte	0x91
 3925 06d8 64       		.sleb128 -28
 3926 06d9 15       		.uleb128 0x15
 3927 06da 66050000 		.4byte	.LASF94
 3928 06de 01       		.byte	0x1
 3929 06df 8F03     		.2byte	0x38f
 3930 06e1 6B000000 		.4byte	0x6b
 3931 06e5 02       		.uleb128 0x2
 3932 06e6 91       		.byte	0x91
 3933 06e7 6F       		.sleb128 -17
 3934 06e8 15       		.uleb128 0x15
 3935 06e9 BD050000 		.4byte	.LASF95
 3936 06ed 01       		.byte	0x1
 3937 06ee 9003     		.2byte	0x390
 3938 06f0 52070000 		.4byte	0x752
 3939 06f4 03       		.uleb128 0x3
 3940 06f5 91       		.byte	0x91
 3941 06f6 AC7F     		.sleb128 -84
 3942 06f8 15       		.uleb128 0x15
 3943 06f9 A6040000 		.4byte	.LASF96
 3944 06fd 01       		.byte	0x1
 3945 06fe 9503     		.2byte	0x395
 3946 0700 5D000000 		.4byte	0x5d
 3947 0704 02       		.uleb128 0x2
 3948 0705 91       		.byte	0x91
 3949 0706 60       		.sleb128 -32
 3950 0707 1B       		.uleb128 0x1b
 3951 0708 30000000 		.4byte	.LASF97
 3952 070c 01       		.byte	0x1
 3953 070d 9603     		.2byte	0x396
 3954 070f 5D000000 		.4byte	0x5d
 3955 0713 1B       		.uleb128 0x1b
 3956 0714 58040000 		.4byte	.LASF98
 3957 0718 01       		.byte	0x1
 3958 0719 9703     		.2byte	0x397
 3959 071b 5D000000 		.4byte	0x5d
 3960 071f 1B       		.uleb128 0x1b
 3961 0720 6F050000 		.4byte	.LASF99
 3962 0724 01       		.byte	0x1
 3963 0725 9903     		.2byte	0x399
 3964 0727 5D000000 		.4byte	0x5d
 3965 072b 15       		.uleb128 0x15
 3966 072c DD010000 		.4byte	.LASF100
 3967 0730 01       		.byte	0x1
 3968 0731 9A03     		.2byte	0x39a
 3969 0733 5D000000 		.4byte	0x5d
 3970 0737 02       		.uleb128 0x2
 3971 0738 91       		.byte	0x91
 3972 0739 5C       		.sleb128 -36
 3973 073a 18       		.uleb128 0x18
 3974 073b 84000000 		.4byte	.LBB3
 3975 073f 34000000 		.4byte	.LBE3-.LBB3
 3976 0743 14       		.uleb128 0x14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 90


 3977 0744 6900     		.ascii	"i\000"
 3978 0746 01       		.byte	0x1
 3979 0747 EE03     		.2byte	0x3ee
 3980 0749 5D000000 		.4byte	0x5d
 3981 074d 02       		.uleb128 0x2
 3982 074e 91       		.byte	0x91
 3983 074f 68       		.sleb128 -24
 3984 0750 00       		.byte	0
 3985 0751 00       		.byte	0
 3986 0752 06       		.uleb128 0x6
 3987 0753 76000000 		.4byte	0x76
 3988 0757 62070000 		.4byte	0x762
 3989 075b 07       		.uleb128 0x7
 3990 075c BC000000 		.4byte	0xbc
 3991 0760 13       		.byte	0x13
 3992 0761 00       		.byte	0
 3993 0762 06       		.uleb128 0x6
 3994 0763 8C000000 		.4byte	0x8c
 3995 0767 72070000 		.4byte	0x772
 3996 076b 07       		.uleb128 0x7
 3997 076c BC000000 		.4byte	0xbc
 3998 0770 15       		.byte	0x15
 3999 0771 00       		.byte	0
 4000 0772 1C       		.uleb128 0x1c
 4001 0773 15020000 		.4byte	.LASF101
 4002 0777 04       		.byte	0x4
 4003 0778 2D       		.byte	0x2d
 4004 0779 62070000 		.4byte	0x762
 4005 077d 05       		.uleb128 0x5
 4006 077e 03       		.byte	0x3
 4007 077f 00000000 		.4byte	data_array
 4008 0783 1C       		.uleb128 0x1c
 4009 0784 DC030000 		.4byte	.LASF102
 4010 0788 04       		.byte	0x4
 4011 0789 30       		.byte	0x30
 4012 078a 6B000000 		.4byte	0x6b
 4013 078e 05       		.uleb128 0x5
 4014 078f 03       		.byte	0x3
 4015 0790 00000000 		.4byte	wiznet
 4016 0794 1C       		.uleb128 0x1c
 4017 0795 ED010000 		.4byte	.LASF103
 4018 0799 04       		.byte	0x4
 4019 079a 34       		.byte	0x34
 4020 079b 62070000 		.4byte	0x762
 4021 079f 05       		.uleb128 0x5
 4022 07a0 03       		.byte	0x3
 4023 07a1 00000000 		.4byte	test_array
 4024 07a5 1C       		.uleb128 0x1c
 4025 07a6 2B010000 		.4byte	.LASF104
 4026 07aa 04       		.byte	0x4
 4027 07ab 37       		.byte	0x37
 4028 07ac 6B000000 		.4byte	0x6b
 4029 07b0 05       		.uleb128 0x5
 4030 07b1 03       		.byte	0x3
 4031 07b2 00000000 		.4byte	elbw_arr_cspot
 4032 07b6 1C       		.uleb128 0x1c
 4033 07b7 B1040000 		.4byte	.LASF105
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 91


 4034 07bb 04       		.byte	0x4
 4035 07bc 38       		.byte	0x38
 4036 07bd 52070000 		.4byte	0x752
 4037 07c1 05       		.uleb128 0x5
 4038 07c2 03       		.byte	0x3
 4039 07c3 00000000 		.4byte	elbow_array
 4040 07c7 1C       		.uleb128 0x1c
 4041 07c8 03030000 		.4byte	.LASF106
 4042 07cc 04       		.byte	0x4
 4043 07cd 3B       		.byte	0x3b
 4044 07ce 6B000000 		.4byte	0x6b
 4045 07d2 05       		.uleb128 0x5
 4046 07d3 03       		.byte	0x3
 4047 07d4 00000000 		.4byte	shldr_arr_cspot
 4048 07d8 1C       		.uleb128 0x1c
 4049 07d9 8C000000 		.4byte	.LASF107
 4050 07dd 04       		.byte	0x4
 4051 07de 3C       		.byte	0x3c
 4052 07df 52070000 		.4byte	0x752
 4053 07e3 05       		.uleb128 0x5
 4054 07e4 03       		.byte	0x3
 4055 07e5 00000000 		.4byte	shoulder_array
 4056 07e9 1C       		.uleb128 0x1c
 4057 07ea 46030000 		.4byte	.LASF108
 4058 07ee 04       		.byte	0x4
 4059 07ef 42       		.byte	0x42
 4060 07f0 6B000000 		.4byte	0x6b
 4061 07f4 05       		.uleb128 0x5
 4062 07f5 03       		.byte	0x3
 4063 07f6 00000000 		.4byte	WT_arr_cspot
 4064 07fa 1C       		.uleb128 0x1c
 4065 07fb 54000000 		.4byte	.LASF109
 4066 07ff 04       		.byte	0x4
 4067 0800 43       		.byte	0x43
 4068 0801 52070000 		.4byte	0x752
 4069 0805 05       		.uleb128 0x5
 4070 0806 03       		.byte	0x3
 4071 0807 00000000 		.4byte	WT_array
 4072 080b 1C       		.uleb128 0x1c
 4073 080c F8010000 		.4byte	.LASF110
 4074 0810 04       		.byte	0x4
 4075 0811 46       		.byte	0x46
 4076 0812 6B000000 		.4byte	0x6b
 4077 0816 05       		.uleb128 0x5
 4078 0817 03       		.byte	0x3
 4079 0818 00000000 		.4byte	WR_arr_cspot
 4080 081c 1C       		.uleb128 0x1c
 4081 081d D0050000 		.4byte	.LASF111
 4082 0821 04       		.byte	0x4
 4083 0822 47       		.byte	0x47
 4084 0823 52070000 		.4byte	0x752
 4085 0827 05       		.uleb128 0x5
 4086 0828 03       		.byte	0x3
 4087 0829 00000000 		.4byte	WR_array
 4088 082d 1C       		.uleb128 0x1c
 4089 082e B5020000 		.4byte	.LASF112
 4090 0832 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 92


 4091 0833 4A       		.byte	0x4a
 4092 0834 6B000000 		.4byte	0x6b
 4093 0838 05       		.uleb128 0x5
 4094 0839 03       		.byte	0x3
 4095 083a 00000000 		.4byte	WT_FLAG
 4096 083e 1C       		.uleb128 0x1c
 4097 083f 28020000 		.4byte	.LASF113
 4098 0843 04       		.byte	0x4
 4099 0844 4B       		.byte	0x4b
 4100 0845 6B000000 		.4byte	0x6b
 4101 0849 05       		.uleb128 0x5
 4102 084a 03       		.byte	0x3
 4103 084b 00000000 		.4byte	WR_FLAG
 4104 084f 1C       		.uleb128 0x1c
 4105 0850 E6050000 		.4byte	.LASF114
 4106 0854 04       		.byte	0x4
 4107 0855 4C       		.byte	0x4c
 4108 0856 6B000000 		.4byte	0x6b
 4109 085a 05       		.uleb128 0x5
 4110 085b 03       		.byte	0x3
 4111 085c 00000000 		.4byte	ELBOW_FLAG
 4112 0860 1C       		.uleb128 0x1c
 4113 0861 D4020000 		.4byte	.LASF115
 4114 0865 04       		.byte	0x4
 4115 0866 4D       		.byte	0x4d
 4116 0867 6B000000 		.4byte	0x6b
 4117 086b 05       		.uleb128 0x5
 4118 086c 03       		.byte	0x3
 4119 086d 00000000 		.4byte	SHOULDER_FLAG
 4120 0871 1C       		.uleb128 0x1c
 4121 0872 59020000 		.4byte	.LASF116
 4122 0876 04       		.byte	0x4
 4123 0877 4E       		.byte	0x4e
 4124 0878 6B000000 		.4byte	0x6b
 4125 087c 05       		.uleb128 0x5
 4126 087d 03       		.byte	0x3
 4127 087e 00000000 		.4byte	BA_FLAG
 4128 0882 1C       		.uleb128 0x1c
 4129 0883 7E050000 		.4byte	.LASF117
 4130 0887 04       		.byte	0x4
 4131 0888 50       		.byte	0x50
 4132 0889 97000000 		.4byte	0x97
 4133 088d 05       		.uleb128 0x5
 4134 088e 03       		.byte	0x3
 4135 088f 00000000 		.4byte	temp_val
 4136 0893 1C       		.uleb128 0x1c
 4137 0894 99010000 		.4byte	.LASF118
 4138 0898 04       		.byte	0x4
 4139 0899 53       		.byte	0x53
 4140 089a B7000000 		.4byte	0xb7
 4141 089e 05       		.uleb128 0x5
 4142 089f 03       		.byte	0x3
 4143 08a0 00000000 		.4byte	timerFlag
 4144 08a4 1D       		.uleb128 0x1d
 4145 08a5 ED020000 		.4byte	.LASF119
 4146 08a9 01       		.byte	0x1
 4147 08aa 0101     		.2byte	0x101
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 93


 4148 08ac DE000000 		.4byte	0xde
 4149 08b0 05       		.uleb128 0x5
 4150 08b1 03       		.byte	0x3
 4151 08b2 00000000 		.4byte	wristTilt_state
 4152 08b6 1D       		.uleb128 0x1d
 4153 08b7 A7030000 		.4byte	.LASF120
 4154 08bb 01       		.byte	0x1
 4155 08bc 6801     		.2byte	0x168
 4156 08be 0A010000 		.4byte	0x10a
 4157 08c2 05       		.uleb128 0x5
 4158 08c3 03       		.byte	0x3
 4159 08c4 00000000 		.4byte	wristRotate_state
 4160 08c8 1D       		.uleb128 0x1d
 4161 08c9 50010000 		.4byte	.LASF121
 4162 08cd 01       		.byte	0x1
 4163 08ce D201     		.2byte	0x1d2
 4164 08d0 36010000 		.4byte	0x136
 4165 08d4 05       		.uleb128 0x5
 4166 08d5 03       		.byte	0x3
 4167 08d6 00000000 		.4byte	elbow_state
 4168 08da 1D       		.uleb128 0x1d
 4169 08db AA000000 		.4byte	.LASF122
 4170 08df 01       		.byte	0x1
 4171 08e0 5A02     		.2byte	0x25a
 4172 08e2 5C010000 		.4byte	0x15c
 4173 08e6 05       		.uleb128 0x5
 4174 08e7 03       		.byte	0x3
 4175 08e8 00000000 		.4byte	shoulder_state
 4176 08ec 1D       		.uleb128 0x1d
 4177 08ed 6C030000 		.4byte	.LASF123
 4178 08f1 01       		.byte	0x1
 4179 08f2 E102     		.2byte	0x2e1
 4180 08f4 82010000 		.4byte	0x182
 4181 08f8 05       		.uleb128 0x5
 4182 08f9 03       		.byte	0x3
 4183 08fa 00000000 		.4byte	baseAzimuth_state
 4184 08fe 00       		.byte	0
 4185              		.section	.debug_abbrev,"",%progbits
 4186              	.Ldebug_abbrev0:
 4187 0000 01       		.uleb128 0x1
 4188 0001 11       		.uleb128 0x11
 4189 0002 01       		.byte	0x1
 4190 0003 25       		.uleb128 0x25
 4191 0004 0E       		.uleb128 0xe
 4192 0005 13       		.uleb128 0x13
 4193 0006 0B       		.uleb128 0xb
 4194 0007 03       		.uleb128 0x3
 4195 0008 0E       		.uleb128 0xe
 4196 0009 1B       		.uleb128 0x1b
 4197 000a 0E       		.uleb128 0xe
 4198 000b 55       		.uleb128 0x55
 4199 000c 17       		.uleb128 0x17
 4200 000d 11       		.uleb128 0x11
 4201 000e 01       		.uleb128 0x1
 4202 000f 10       		.uleb128 0x10
 4203 0010 17       		.uleb128 0x17
 4204 0011 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 94


 4205 0012 00       		.byte	0
 4206 0013 02       		.uleb128 0x2
 4207 0014 24       		.uleb128 0x24
 4208 0015 00       		.byte	0
 4209 0016 0B       		.uleb128 0xb
 4210 0017 0B       		.uleb128 0xb
 4211 0018 3E       		.uleb128 0x3e
 4212 0019 0B       		.uleb128 0xb
 4213 001a 03       		.uleb128 0x3
 4214 001b 0E       		.uleb128 0xe
 4215 001c 00       		.byte	0
 4216 001d 00       		.byte	0
 4217 001e 03       		.uleb128 0x3
 4218 001f 24       		.uleb128 0x24
 4219 0020 00       		.byte	0
 4220 0021 0B       		.uleb128 0xb
 4221 0022 0B       		.uleb128 0xb
 4222 0023 3E       		.uleb128 0x3e
 4223 0024 0B       		.uleb128 0xb
 4224 0025 03       		.uleb128 0x3
 4225 0026 08       		.uleb128 0x8
 4226 0027 00       		.byte	0
 4227 0028 00       		.byte	0
 4228 0029 04       		.uleb128 0x4
 4229 002a 16       		.uleb128 0x16
 4230 002b 00       		.byte	0
 4231 002c 03       		.uleb128 0x3
 4232 002d 0E       		.uleb128 0xe
 4233 002e 3A       		.uleb128 0x3a
 4234 002f 0B       		.uleb128 0xb
 4235 0030 3B       		.uleb128 0x3b
 4236 0031 0B       		.uleb128 0xb
 4237 0032 49       		.uleb128 0x49
 4238 0033 13       		.uleb128 0x13
 4239 0034 00       		.byte	0
 4240 0035 00       		.byte	0
 4241 0036 05       		.uleb128 0x5
 4242 0037 35       		.uleb128 0x35
 4243 0038 00       		.byte	0
 4244 0039 49       		.uleb128 0x49
 4245 003a 13       		.uleb128 0x13
 4246 003b 00       		.byte	0
 4247 003c 00       		.byte	0
 4248 003d 06       		.uleb128 0x6
 4249 003e 01       		.uleb128 0x1
 4250 003f 01       		.byte	0x1
 4251 0040 49       		.uleb128 0x49
 4252 0041 13       		.uleb128 0x13
 4253 0042 01       		.uleb128 0x1
 4254 0043 13       		.uleb128 0x13
 4255 0044 00       		.byte	0
 4256 0045 00       		.byte	0
 4257 0046 07       		.uleb128 0x7
 4258 0047 21       		.uleb128 0x21
 4259 0048 00       		.byte	0
 4260 0049 49       		.uleb128 0x49
 4261 004a 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 95


 4262 004b 2F       		.uleb128 0x2f
 4263 004c 0B       		.uleb128 0xb
 4264 004d 00       		.byte	0
 4265 004e 00       		.byte	0
 4266 004f 08       		.uleb128 0x8
 4267 0050 04       		.uleb128 0x4
 4268 0051 01       		.byte	0x1
 4269 0052 03       		.uleb128 0x3
 4270 0053 0E       		.uleb128 0xe
 4271 0054 0B       		.uleb128 0xb
 4272 0055 0B       		.uleb128 0xb
 4273 0056 3A       		.uleb128 0x3a
 4274 0057 0B       		.uleb128 0xb
 4275 0058 3B       		.uleb128 0x3b
 4276 0059 05       		.uleb128 0x5
 4277 005a 01       		.uleb128 0x1
 4278 005b 13       		.uleb128 0x13
 4279 005c 00       		.byte	0
 4280 005d 00       		.byte	0
 4281 005e 09       		.uleb128 0x9
 4282 005f 28       		.uleb128 0x28
 4283 0060 00       		.byte	0
 4284 0061 03       		.uleb128 0x3
 4285 0062 0E       		.uleb128 0xe
 4286 0063 1C       		.uleb128 0x1c
 4287 0064 0D       		.uleb128 0xd
 4288 0065 00       		.byte	0
 4289 0066 00       		.byte	0
 4290 0067 0A       		.uleb128 0xa
 4291 0068 2E       		.uleb128 0x2e
 4292 0069 01       		.byte	0x1
 4293 006a 3F       		.uleb128 0x3f
 4294 006b 19       		.uleb128 0x19
 4295 006c 03       		.uleb128 0x3
 4296 006d 0E       		.uleb128 0xe
 4297 006e 3A       		.uleb128 0x3a
 4298 006f 0B       		.uleb128 0xb
 4299 0070 3B       		.uleb128 0x3b
 4300 0071 0B       		.uleb128 0xb
 4301 0072 27       		.uleb128 0x27
 4302 0073 19       		.uleb128 0x19
 4303 0074 11       		.uleb128 0x11
 4304 0075 01       		.uleb128 0x1
 4305 0076 12       		.uleb128 0x12
 4306 0077 06       		.uleb128 0x6
 4307 0078 40       		.uleb128 0x40
 4308 0079 18       		.uleb128 0x18
 4309 007a 9642     		.uleb128 0x2116
 4310 007c 19       		.uleb128 0x19
 4311 007d 01       		.uleb128 0x1
 4312 007e 13       		.uleb128 0x13
 4313 007f 00       		.byte	0
 4314 0080 00       		.byte	0
 4315 0081 0B       		.uleb128 0xb
 4316 0082 34       		.uleb128 0x34
 4317 0083 00       		.byte	0
 4318 0084 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 96


 4319 0085 0E       		.uleb128 0xe
 4320 0086 3A       		.uleb128 0x3a
 4321 0087 0B       		.uleb128 0xb
 4322 0088 3B       		.uleb128 0x3b
 4323 0089 0B       		.uleb128 0xb
 4324 008a 49       		.uleb128 0x49
 4325 008b 13       		.uleb128 0x13
 4326 008c 02       		.uleb128 0x2
 4327 008d 18       		.uleb128 0x18
 4328 008e 00       		.byte	0
 4329 008f 00       		.byte	0
 4330 0090 0C       		.uleb128 0xc
 4331 0091 2E       		.uleb128 0x2e
 4332 0092 01       		.byte	0x1
 4333 0093 3F       		.uleb128 0x3f
 4334 0094 19       		.uleb128 0x19
 4335 0095 03       		.uleb128 0x3
 4336 0096 0E       		.uleb128 0xe
 4337 0097 3A       		.uleb128 0x3a
 4338 0098 0B       		.uleb128 0xb
 4339 0099 3B       		.uleb128 0x3b
 4340 009a 0B       		.uleb128 0xb
 4341 009b 27       		.uleb128 0x27
 4342 009c 19       		.uleb128 0x19
 4343 009d 49       		.uleb128 0x49
 4344 009e 13       		.uleb128 0x13
 4345 009f 11       		.uleb128 0x11
 4346 00a0 01       		.uleb128 0x1
 4347 00a1 12       		.uleb128 0x12
 4348 00a2 06       		.uleb128 0x6
 4349 00a3 40       		.uleb128 0x40
 4350 00a4 18       		.uleb128 0x18
 4351 00a5 9642     		.uleb128 0x2116
 4352 00a7 19       		.uleb128 0x19
 4353 00a8 01       		.uleb128 0x1
 4354 00a9 13       		.uleb128 0x13
 4355 00aa 00       		.byte	0
 4356 00ab 00       		.byte	0
 4357 00ac 0D       		.uleb128 0xd
 4358 00ad 05       		.uleb128 0x5
 4359 00ae 00       		.byte	0
 4360 00af 03       		.uleb128 0x3
 4361 00b0 0E       		.uleb128 0xe
 4362 00b1 3A       		.uleb128 0x3a
 4363 00b2 0B       		.uleb128 0xb
 4364 00b3 3B       		.uleb128 0x3b
 4365 00b4 0B       		.uleb128 0xb
 4366 00b5 49       		.uleb128 0x49
 4367 00b6 13       		.uleb128 0x13
 4368 00b7 02       		.uleb128 0x2
 4369 00b8 18       		.uleb128 0x18
 4370 00b9 00       		.byte	0
 4371 00ba 00       		.byte	0
 4372 00bb 0E       		.uleb128 0xe
 4373 00bc 34       		.uleb128 0x34
 4374 00bd 00       		.byte	0
 4375 00be 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 97


 4376 00bf 08       		.uleb128 0x8
 4377 00c0 3A       		.uleb128 0x3a
 4378 00c1 0B       		.uleb128 0xb
 4379 00c2 3B       		.uleb128 0x3b
 4380 00c3 0B       		.uleb128 0xb
 4381 00c4 49       		.uleb128 0x49
 4382 00c5 13       		.uleb128 0x13
 4383 00c6 02       		.uleb128 0x2
 4384 00c7 18       		.uleb128 0x18
 4385 00c8 00       		.byte	0
 4386 00c9 00       		.byte	0
 4387 00ca 0F       		.uleb128 0xf
 4388 00cb 0F       		.uleb128 0xf
 4389 00cc 00       		.byte	0
 4390 00cd 0B       		.uleb128 0xb
 4391 00ce 0B       		.uleb128 0xb
 4392 00cf 49       		.uleb128 0x49
 4393 00d0 13       		.uleb128 0x13
 4394 00d1 00       		.byte	0
 4395 00d2 00       		.byte	0
 4396 00d3 10       		.uleb128 0x10
 4397 00d4 2E       		.uleb128 0x2e
 4398 00d5 01       		.byte	0x1
 4399 00d6 3F       		.uleb128 0x3f
 4400 00d7 19       		.uleb128 0x19
 4401 00d8 03       		.uleb128 0x3
 4402 00d9 0E       		.uleb128 0xe
 4403 00da 3A       		.uleb128 0x3a
 4404 00db 0B       		.uleb128 0xb
 4405 00dc 3B       		.uleb128 0x3b
 4406 00dd 0B       		.uleb128 0xb
 4407 00de 27       		.uleb128 0x27
 4408 00df 19       		.uleb128 0x19
 4409 00e0 49       		.uleb128 0x49
 4410 00e1 13       		.uleb128 0x13
 4411 00e2 11       		.uleb128 0x11
 4412 00e3 01       		.uleb128 0x1
 4413 00e4 12       		.uleb128 0x12
 4414 00e5 06       		.uleb128 0x6
 4415 00e6 40       		.uleb128 0x40
 4416 00e7 18       		.uleb128 0x18
 4417 00e8 9742     		.uleb128 0x2117
 4418 00ea 19       		.uleb128 0x19
 4419 00eb 01       		.uleb128 0x1
 4420 00ec 13       		.uleb128 0x13
 4421 00ed 00       		.byte	0
 4422 00ee 00       		.byte	0
 4423 00ef 11       		.uleb128 0x11
 4424 00f0 2E       		.uleb128 0x2e
 4425 00f1 00       		.byte	0
 4426 00f2 3F       		.uleb128 0x3f
 4427 00f3 19       		.uleb128 0x19
 4428 00f4 03       		.uleb128 0x3
 4429 00f5 0E       		.uleb128 0xe
 4430 00f6 3A       		.uleb128 0x3a
 4431 00f7 0B       		.uleb128 0xb
 4432 00f8 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 98


 4433 00f9 0B       		.uleb128 0xb
 4434 00fa 11       		.uleb128 0x11
 4435 00fb 01       		.uleb128 0x1
 4436 00fc 12       		.uleb128 0x12
 4437 00fd 06       		.uleb128 0x6
 4438 00fe 40       		.uleb128 0x40
 4439 00ff 18       		.uleb128 0x18
 4440 0100 9742     		.uleb128 0x2117
 4441 0102 19       		.uleb128 0x19
 4442 0103 00       		.byte	0
 4443 0104 00       		.byte	0
 4444 0105 12       		.uleb128 0x12
 4445 0106 2E       		.uleb128 0x2e
 4446 0107 01       		.byte	0x1
 4447 0108 3F       		.uleb128 0x3f
 4448 0109 19       		.uleb128 0x19
 4449 010a 03       		.uleb128 0x3
 4450 010b 0E       		.uleb128 0xe
 4451 010c 3A       		.uleb128 0x3a
 4452 010d 0B       		.uleb128 0xb
 4453 010e 3B       		.uleb128 0x3b
 4454 010f 0B       		.uleb128 0xb
 4455 0110 11       		.uleb128 0x11
 4456 0111 01       		.uleb128 0x1
 4457 0112 12       		.uleb128 0x12
 4458 0113 06       		.uleb128 0x6
 4459 0114 40       		.uleb128 0x40
 4460 0115 18       		.uleb128 0x18
 4461 0116 9742     		.uleb128 0x2117
 4462 0118 19       		.uleb128 0x19
 4463 0119 01       		.uleb128 0x1
 4464 011a 13       		.uleb128 0x13
 4465 011b 00       		.byte	0
 4466 011c 00       		.byte	0
 4467 011d 13       		.uleb128 0x13
 4468 011e 2E       		.uleb128 0x2e
 4469 011f 01       		.byte	0x1
 4470 0120 3F       		.uleb128 0x3f
 4471 0121 19       		.uleb128 0x19
 4472 0122 03       		.uleb128 0x3
 4473 0123 0E       		.uleb128 0xe
 4474 0124 3A       		.uleb128 0x3a
 4475 0125 0B       		.uleb128 0xb
 4476 0126 3B       		.uleb128 0x3b
 4477 0127 05       		.uleb128 0x5
 4478 0128 11       		.uleb128 0x11
 4479 0129 01       		.uleb128 0x1
 4480 012a 12       		.uleb128 0x12
 4481 012b 06       		.uleb128 0x6
 4482 012c 40       		.uleb128 0x40
 4483 012d 18       		.uleb128 0x18
 4484 012e 9642     		.uleb128 0x2116
 4485 0130 19       		.uleb128 0x19
 4486 0131 01       		.uleb128 0x1
 4487 0132 13       		.uleb128 0x13
 4488 0133 00       		.byte	0
 4489 0134 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 99


 4490 0135 14       		.uleb128 0x14
 4491 0136 34       		.uleb128 0x34
 4492 0137 00       		.byte	0
 4493 0138 03       		.uleb128 0x3
 4494 0139 08       		.uleb128 0x8
 4495 013a 3A       		.uleb128 0x3a
 4496 013b 0B       		.uleb128 0xb
 4497 013c 3B       		.uleb128 0x3b
 4498 013d 05       		.uleb128 0x5
 4499 013e 49       		.uleb128 0x49
 4500 013f 13       		.uleb128 0x13
 4501 0140 02       		.uleb128 0x2
 4502 0141 18       		.uleb128 0x18
 4503 0142 00       		.byte	0
 4504 0143 00       		.byte	0
 4505 0144 15       		.uleb128 0x15
 4506 0145 34       		.uleb128 0x34
 4507 0146 00       		.byte	0
 4508 0147 03       		.uleb128 0x3
 4509 0148 0E       		.uleb128 0xe
 4510 0149 3A       		.uleb128 0x3a
 4511 014a 0B       		.uleb128 0xb
 4512 014b 3B       		.uleb128 0x3b
 4513 014c 05       		.uleb128 0x5
 4514 014d 49       		.uleb128 0x49
 4515 014e 13       		.uleb128 0x13
 4516 014f 02       		.uleb128 0x2
 4517 0150 18       		.uleb128 0x18
 4518 0151 00       		.byte	0
 4519 0152 00       		.byte	0
 4520 0153 16       		.uleb128 0x16
 4521 0154 2E       		.uleb128 0x2e
 4522 0155 01       		.byte	0x1
 4523 0156 3F       		.uleb128 0x3f
 4524 0157 19       		.uleb128 0x19
 4525 0158 03       		.uleb128 0x3
 4526 0159 0E       		.uleb128 0xe
 4527 015a 3A       		.uleb128 0x3a
 4528 015b 0B       		.uleb128 0xb
 4529 015c 3B       		.uleb128 0x3b
 4530 015d 05       		.uleb128 0x5
 4531 015e 27       		.uleb128 0x27
 4532 015f 19       		.uleb128 0x19
 4533 0160 49       		.uleb128 0x49
 4534 0161 13       		.uleb128 0x13
 4535 0162 11       		.uleb128 0x11
 4536 0163 01       		.uleb128 0x1
 4537 0164 12       		.uleb128 0x12
 4538 0165 06       		.uleb128 0x6
 4539 0166 40       		.uleb128 0x40
 4540 0167 18       		.uleb128 0x18
 4541 0168 9642     		.uleb128 0x2116
 4542 016a 19       		.uleb128 0x19
 4543 016b 01       		.uleb128 0x1
 4544 016c 13       		.uleb128 0x13
 4545 016d 00       		.byte	0
 4546 016e 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 100


 4547 016f 17       		.uleb128 0x17
 4548 0170 05       		.uleb128 0x5
 4549 0171 00       		.byte	0
 4550 0172 03       		.uleb128 0x3
 4551 0173 0E       		.uleb128 0xe
 4552 0174 3A       		.uleb128 0x3a
 4553 0175 0B       		.uleb128 0xb
 4554 0176 3B       		.uleb128 0x3b
 4555 0177 05       		.uleb128 0x5
 4556 0178 49       		.uleb128 0x49
 4557 0179 13       		.uleb128 0x13
 4558 017a 02       		.uleb128 0x2
 4559 017b 18       		.uleb128 0x18
 4560 017c 00       		.byte	0
 4561 017d 00       		.byte	0
 4562 017e 18       		.uleb128 0x18
 4563 017f 0B       		.uleb128 0xb
 4564 0180 01       		.byte	0x1
 4565 0181 11       		.uleb128 0x11
 4566 0182 01       		.uleb128 0x1
 4567 0183 12       		.uleb128 0x12
 4568 0184 06       		.uleb128 0x6
 4569 0185 00       		.byte	0
 4570 0186 00       		.byte	0
 4571 0187 19       		.uleb128 0x19
 4572 0188 2E       		.uleb128 0x2e
 4573 0189 01       		.byte	0x1
 4574 018a 3F       		.uleb128 0x3f
 4575 018b 19       		.uleb128 0x19
 4576 018c 03       		.uleb128 0x3
 4577 018d 0E       		.uleb128 0xe
 4578 018e 3A       		.uleb128 0x3a
 4579 018f 0B       		.uleb128 0xb
 4580 0190 3B       		.uleb128 0x3b
 4581 0191 05       		.uleb128 0x5
 4582 0192 49       		.uleb128 0x49
 4583 0193 13       		.uleb128 0x13
 4584 0194 11       		.uleb128 0x11
 4585 0195 01       		.uleb128 0x1
 4586 0196 12       		.uleb128 0x12
 4587 0197 06       		.uleb128 0x6
 4588 0198 40       		.uleb128 0x40
 4589 0199 18       		.uleb128 0x18
 4590 019a 9642     		.uleb128 0x2116
 4591 019c 19       		.uleb128 0x19
 4592 019d 01       		.uleb128 0x1
 4593 019e 13       		.uleb128 0x13
 4594 019f 00       		.byte	0
 4595 01a0 00       		.byte	0
 4596 01a1 1A       		.uleb128 0x1a
 4597 01a2 34       		.uleb128 0x34
 4598 01a3 00       		.byte	0
 4599 01a4 03       		.uleb128 0x3
 4600 01a5 08       		.uleb128 0x8
 4601 01a6 3A       		.uleb128 0x3a
 4602 01a7 0B       		.uleb128 0xb
 4603 01a8 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 101


 4604 01a9 05       		.uleb128 0x5
 4605 01aa 49       		.uleb128 0x49
 4606 01ab 13       		.uleb128 0x13
 4607 01ac 00       		.byte	0
 4608 01ad 00       		.byte	0
 4609 01ae 1B       		.uleb128 0x1b
 4610 01af 34       		.uleb128 0x34
 4611 01b0 00       		.byte	0
 4612 01b1 03       		.uleb128 0x3
 4613 01b2 0E       		.uleb128 0xe
 4614 01b3 3A       		.uleb128 0x3a
 4615 01b4 0B       		.uleb128 0xb
 4616 01b5 3B       		.uleb128 0x3b
 4617 01b6 05       		.uleb128 0x5
 4618 01b7 49       		.uleb128 0x49
 4619 01b8 13       		.uleb128 0x13
 4620 01b9 00       		.byte	0
 4621 01ba 00       		.byte	0
 4622 01bb 1C       		.uleb128 0x1c
 4623 01bc 34       		.uleb128 0x34
 4624 01bd 00       		.byte	0
 4625 01be 03       		.uleb128 0x3
 4626 01bf 0E       		.uleb128 0xe
 4627 01c0 3A       		.uleb128 0x3a
 4628 01c1 0B       		.uleb128 0xb
 4629 01c2 3B       		.uleb128 0x3b
 4630 01c3 0B       		.uleb128 0xb
 4631 01c4 49       		.uleb128 0x49
 4632 01c5 13       		.uleb128 0x13
 4633 01c6 3F       		.uleb128 0x3f
 4634 01c7 19       		.uleb128 0x19
 4635 01c8 02       		.uleb128 0x2
 4636 01c9 18       		.uleb128 0x18
 4637 01ca 00       		.byte	0
 4638 01cb 00       		.byte	0
 4639 01cc 1D       		.uleb128 0x1d
 4640 01cd 34       		.uleb128 0x34
 4641 01ce 00       		.byte	0
 4642 01cf 03       		.uleb128 0x3
 4643 01d0 0E       		.uleb128 0xe
 4644 01d1 3A       		.uleb128 0x3a
 4645 01d2 0B       		.uleb128 0xb
 4646 01d3 3B       		.uleb128 0x3b
 4647 01d4 05       		.uleb128 0x5
 4648 01d5 49       		.uleb128 0x49
 4649 01d6 13       		.uleb128 0x13
 4650 01d7 3F       		.uleb128 0x3f
 4651 01d8 19       		.uleb128 0x19
 4652 01d9 02       		.uleb128 0x2
 4653 01da 18       		.uleb128 0x18
 4654 01db 00       		.byte	0
 4655 01dc 00       		.byte	0
 4656 01dd 00       		.byte	0
 4657              		.section	.debug_aranges,"",%progbits
 4658 0000 AC000000 		.4byte	0xac
 4659 0004 0200     		.2byte	0x2
 4660 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 102


 4661 000a 04       		.byte	0x4
 4662 000b 00       		.byte	0
 4663 000c 0000     		.2byte	0
 4664 000e 0000     		.2byte	0
 4665 0010 00000000 		.4byte	.LFB34
 4666 0014 28000000 		.4byte	.LFE34-.LFB34
 4667 0018 00000000 		.4byte	.LFB35
 4668 001c 78000000 		.4byte	.LFE35-.LFB35
 4669 0020 00000000 		.4byte	.LFB36
 4670 0024 3E000000 		.4byte	.LFE36-.LFB36
 4671 0028 00000000 		.4byte	.LFB37
 4672 002c 0C010000 		.4byte	.LFE37-.LFB37
 4673 0030 00000000 		.4byte	.LFB38
 4674 0034 0C020000 		.4byte	.LFE38-.LFB38
 4675 0038 00000000 		.4byte	.LFB39
 4676 003c 84000000 		.4byte	.LFE39-.LFB39
 4677 0040 00000000 		.4byte	.LFB40
 4678 0044 20000000 		.4byte	.LFE40-.LFB40
 4679 0048 00000000 		.4byte	.LFB41
 4680 004c 08000000 		.4byte	.LFE41-.LFB41
 4681 0050 00000000 		.4byte	.LFB42
 4682 0054 44000000 		.4byte	.LFE42-.LFB42
 4683 0058 00000000 		.4byte	.LFB43
 4684 005c 98000000 		.4byte	.LFE43-.LFB43
 4685 0060 00000000 		.4byte	.LFB44
 4686 0064 98000000 		.4byte	.LFE44-.LFB44
 4687 0068 00000000 		.4byte	.LFB45
 4688 006c 98000000 		.4byte	.LFE45-.LFB45
 4689 0070 00000000 		.4byte	.LFB46
 4690 0074 50010000 		.4byte	.LFE46-.LFB46
 4691 0078 00000000 		.4byte	.LFB47
 4692 007c 50010000 		.4byte	.LFE47-.LFB47
 4693 0080 00000000 		.4byte	.LFB48
 4694 0084 14020000 		.4byte	.LFE48-.LFB48
 4695 0088 00000000 		.4byte	.LFB49
 4696 008c 20020000 		.4byte	.LFE49-.LFB49
 4697 0090 00000000 		.4byte	.LFB50
 4698 0094 90010000 		.4byte	.LFE50-.LFB50
 4699 0098 00000000 		.4byte	.LFB51
 4700 009c 00010000 		.4byte	.LFE51-.LFB51
 4701 00a0 00000000 		.4byte	.LFB52
 4702 00a4 E4000000 		.4byte	.LFE52-.LFB52
 4703 00a8 00000000 		.4byte	0
 4704 00ac 00000000 		.4byte	0
 4705              		.section	.debug_ranges,"",%progbits
 4706              	.Ldebug_ranges0:
 4707 0000 00000000 		.4byte	.LFB34
 4708 0004 28000000 		.4byte	.LFE34
 4709 0008 00000000 		.4byte	.LFB35
 4710 000c 78000000 		.4byte	.LFE35
 4711 0010 00000000 		.4byte	.LFB36
 4712 0014 3E000000 		.4byte	.LFE36
 4713 0018 00000000 		.4byte	.LFB37
 4714 001c 0C010000 		.4byte	.LFE37
 4715 0020 00000000 		.4byte	.LFB38
 4716 0024 0C020000 		.4byte	.LFE38
 4717 0028 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 103


 4718 002c 84000000 		.4byte	.LFE39
 4719 0030 00000000 		.4byte	.LFB40
 4720 0034 20000000 		.4byte	.LFE40
 4721 0038 00000000 		.4byte	.LFB41
 4722 003c 08000000 		.4byte	.LFE41
 4723 0040 00000000 		.4byte	.LFB42
 4724 0044 44000000 		.4byte	.LFE42
 4725 0048 00000000 		.4byte	.LFB43
 4726 004c 98000000 		.4byte	.LFE43
 4727 0050 00000000 		.4byte	.LFB44
 4728 0054 98000000 		.4byte	.LFE44
 4729 0058 00000000 		.4byte	.LFB45
 4730 005c 98000000 		.4byte	.LFE45
 4731 0060 00000000 		.4byte	.LFB46
 4732 0064 50010000 		.4byte	.LFE46
 4733 0068 00000000 		.4byte	.LFB47
 4734 006c 50010000 		.4byte	.LFE47
 4735 0070 00000000 		.4byte	.LFB48
 4736 0074 14020000 		.4byte	.LFE48
 4737 0078 00000000 		.4byte	.LFB49
 4738 007c 20020000 		.4byte	.LFE49
 4739 0080 00000000 		.4byte	.LFB50
 4740 0084 90010000 		.4byte	.LFE50
 4741 0088 00000000 		.4byte	.LFB51
 4742 008c 00010000 		.4byte	.LFE51
 4743 0090 00000000 		.4byte	.LFB52
 4744 0094 E4000000 		.4byte	.LFE52
 4745 0098 00000000 		.4byte	0
 4746 009c 00000000 		.4byte	0
 4747              		.section	.debug_line,"",%progbits
 4748              	.Ldebug_line0:
 4749 0000 C6040000 		.section	.debug_str,"MS",%progbits,1
 4749      0200CB00 
 4749      00000201 
 4749      FB0E0D00 
 4749      01010101 
 4750              	.LASF86:
 4751 0000 62617365 		.ascii	"baseAzimuth\000"
 4751      417A696D 
 4751      75746800 
 4752              	.LASF20:
 4753 000c 74696C74 		.ascii	"tilt_init\000"
 4753      5F696E69 
 4753      7400
 4754              	.LASF30:
 4755 0016 726F7461 		.ascii	"rotate_feedback\000"
 4755      74655F66 
 4755      65656462 
 4755      61636B00 
 4756              	.LASF47:
 4757 0026 6E756D5F 		.ascii	"num_items\000"
 4757      6974656D 
 4757      7300
 4758              	.LASF97:
 4759 0030 66697273 		.ascii	"first_count\000"
 4759      745F636F 
 4759      756E7400 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 104


 4760              	.LASF44:
 4761 003c 42415F65 		.ascii	"BA_execute\000"
 4761      78656375 
 4761      746500
 4762              	.LASF31:
 4763 0047 656C626F 		.ascii	"elbow_states\000"
 4763      775F7374 
 4763      61746573 
 4763      00
 4764              	.LASF109:
 4765 0054 57545F61 		.ascii	"WT_array\000"
 4765      72726179 
 4765      00
 4766              	.LASF8:
 4767 005d 756E7369 		.ascii	"unsigned int\000"
 4767      676E6564 
 4767      20696E74 
 4767      00
 4768              	.LASF41:
 4769 006a 62617365 		.ascii	"baseAzimuth_states\000"
 4769      417A696D 
 4769      7574685F 
 4769      73746174 
 4769      657300
 4770              	.LASF13:
 4771 007d 696E7431 		.ascii	"int16\000"
 4771      3600
 4772              	.LASF42:
 4773 0083 42415F73 		.ascii	"BA_start\000"
 4773      74617274 
 4773      00
 4774              	.LASF107:
 4775 008c 73686F75 		.ascii	"shoulder_array\000"
 4775      6C646572 
 4775      5F617272 
 4775      617900
 4776              	.LASF50:
 4777 009b 6D61696E 		.ascii	"maintain_array\000"
 4777      7461696E 
 4777      5F617272 
 4777      617900
 4778              	.LASF122:
 4779 00aa 73686F75 		.ascii	"shoulder_state\000"
 4779      6C646572 
 4779      5F737461 
 4779      746500
 4780              	.LASF126:
 4781 00b9 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 4781      73657273 
 4781      5C53616D 
 4781      75656C5C 
 4781      446F6375 
 4782 00e7 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 4782      5C61726D 
 4782      5F636F6E 
 4782      74726F6C 
 4782      6C65725F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 105


 4783 0117 00       		.ascii	"\000"
 4784              	.LASF26:
 4785 0118 726F7461 		.ascii	"rotate_start\000"
 4785      74655F73 
 4785      74617274 
 4785      00
 4786              	.LASF80:
 4787 0125 73706565 		.ascii	"speed\000"
 4787      6400
 4788              	.LASF104:
 4789 012b 656C6277 		.ascii	"elbw_arr_cspot\000"
 4789      5F617272 
 4789      5F637370 
 4789      6F7400
 4790              	.LASF19:
 4791 013a 74696C74 		.ascii	"tilt_start\000"
 4791      5F737461 
 4791      727400
 4792              	.LASF59:
 4793 0145 706F735F 		.ascii	"pos_to_vel\000"
 4793      746F5F76 
 4793      656C00
 4794              	.LASF121:
 4795 0150 656C626F 		.ascii	"elbow_state\000"
 4795      775F7374 
 4795      61746500 
 4796              	.LASF14:
 4797 015c 666C6F61 		.ascii	"float\000"
 4797      7400
 4798              	.LASF43:
 4799 0162 42415F69 		.ascii	"BA_init\000"
 4799      6E697400 
 4800              	.LASF58:
 4801 016a 696E6465 		.ascii	"index\000"
 4801      7800
 4802              	.LASF7:
 4803 0170 6C6F6E67 		.ascii	"long long unsigned int\000"
 4803      206C6F6E 
 4803      6720756E 
 4803      7369676E 
 4803      65642069 
 4804              	.LASF74:
 4805 0187 53657276 		.ascii	"ServoGoalPosition\000"
 4805      6F476F61 
 4805      6C506F73 
 4805      6974696F 
 4805      6E00
 4806              	.LASF118:
 4807 0199 74696D65 		.ascii	"timerFlag\000"
 4807      72466C61 
 4807      6700
 4808              	.LASF85:
 4809 01a3 73686F75 		.ascii	"shoulder\000"
 4809      6C646572 
 4809      00
 4810              	.LASF65:
 4811 01ac 62797465 		.ascii	"byte1\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 106


 4811      3100
 4812              	.LASF66:
 4813 01b2 62797465 		.ascii	"byte2\000"
 4813      3200
 4814              	.LASF92:
 4815 01b8 636F756E 		.ascii	"counter\000"
 4815      74657200 
 4816              	.LASF67:
 4817 01c0 74656D70 		.ascii	"temp1\000"
 4817      3100
 4818              	.LASF68:
 4819 01c6 74656D70 		.ascii	"temp2\000"
 4819      3200
 4820              	.LASF69:
 4821 01cc 74656D70 		.ascii	"temp3\000"
 4821      3300
 4822              	.LASF89:
 4823 01d2 696E6974 		.ascii	"initialize\000"
 4823      69616C69 
 4823      7A6500
 4824              	.LASF100:
 4825 01dd 636F6465 		.ascii	"code_time\000"
 4825      5F74696D 
 4825      6500
 4826              	.LASF84:
 4827 01e7 656C626F 		.ascii	"elbow\000"
 4827      7700
 4828              	.LASF103:
 4829 01ed 74657374 		.ascii	"test_array\000"
 4829      5F617272 
 4829      617900
 4830              	.LASF110:
 4831 01f8 57525F61 		.ascii	"WR_arr_cspot\000"
 4831      72725F63 
 4831      73706F74 
 4831      00
 4832              	.LASF52:
 4833 0205 53495A45 		.ascii	"SIZE\000"
 4833      00
 4834              	.LASF40:
 4835 020a 73686C64 		.ascii	"shldr_wait\000"
 4835      725F7761 
 4835      697400
 4836              	.LASF101:
 4837 0215 64617461 		.ascii	"data_array\000"
 4837      5F617272 
 4837      617900
 4838              	.LASF60:
 4839 0220 6375725F 		.ascii	"cur_pos\000"
 4839      706F7300 
 4840              	.LASF113:
 4841 0228 57525F46 		.ascii	"WR_FLAG\000"
 4841      4C414700 
 4842              	.LASF16:
 4843 0230 63686172 		.ascii	"char\000"
 4843      00
 4844              	.LASF55:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 107


 4845 0235 6172725F 		.ascii	"arr_pos\000"
 4845      706F7300 
 4846              	.LASF10:
 4847 023d 75696E74 		.ascii	"uint16\000"
 4847      313600
 4848              	.LASF78:
 4849 0244 746F7271 		.ascii	"torque\000"
 4849      756500
 4850              	.LASF12:
 4851 024b 696E7438 		.ascii	"int8\000"
 4851      00
 4852              	.LASF72:
 4853 0250 66656564 		.ascii	"feedback\000"
 4853      6261636B 
 4853      00
 4854              	.LASF116:
 4855 0259 42415F46 		.ascii	"BA_FLAG\000"
 4855      4C414700 
 4856              	.LASF18:
 4857 0261 74696D65 		.ascii	"time_t\000"
 4857      5F7400
 4858              	.LASF38:
 4859 0268 73686C64 		.ascii	"shldr_init\000"
 4859      725F696E 
 4859      697400
 4860              	.LASF6:
 4861 0273 6C6F6E67 		.ascii	"long long int\000"
 4861      206C6F6E 
 4861      6720696E 
 4861      7400
 4862              	.LASF36:
 4863 0281 73686F75 		.ascii	"shoulder_states\000"
 4863      6C646572 
 4863      5F737461 
 4863      74657300 
 4864              	.LASF51:
 4865 0291 63706F73 		.ascii	"cpos\000"
 4865      00
 4866              	.LASF25:
 4867 0296 77726973 		.ascii	"wristRotate_states\000"
 4867      74526F74 
 4867      6174655F 
 4867      73746174 
 4867      657300
 4868              	.LASF56:
 4869 02a9 73697A65 		.ascii	"size\000"
 4869      00
 4870              	.LASF11:
 4871 02ae 75696E74 		.ascii	"uint32\000"
 4871      333200
 4872              	.LASF112:
 4873 02b5 57545F46 		.ascii	"WT_FLAG\000"
 4873      4C414700 
 4874              	.LASF63:
 4875 02bd 6D616B65 		.ascii	"make_command\000"
 4875      5F636F6D 
 4875      6D616E64 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 108


 4875      00
 4876              	.LASF82:
 4877 02ca 77726973 		.ascii	"wristTilt\000"
 4877      7454696C 
 4877      7400
 4878              	.LASF115:
 4879 02d4 53484F55 		.ascii	"SHOULDER_FLAG\000"
 4879      4C444552 
 4879      5F464C41 
 4879      4700
 4880              	.LASF32:
 4881 02e2 656C6277 		.ascii	"elbw_start\000"
 4881      5F737461 
 4881      727400
 4882              	.LASF119:
 4883 02ed 77726973 		.ascii	"wristTilt_state\000"
 4883      7454696C 
 4883      745F7374 
 4883      61746500 
 4884              	.LASF54:
 4885 02fd 61727261 		.ascii	"array\000"
 4885      7900
 4886              	.LASF106:
 4887 0303 73686C64 		.ascii	"shldr_arr_cspot\000"
 4887      725F6172 
 4887      725F6373 
 4887      706F7400 
 4888              	.LASF87:
 4889 0313 42415F61 		.ascii	"BA_arr_cspot\000"
 4889      72725F63 
 4889      73706F74 
 4889      00
 4890              	.LASF57:
 4891 0320 6368616E 		.ascii	"change\000"
 4891      676500
 4892              	.LASF71:
 4893 0327 6368616E 		.ascii	"channel\000"
 4893      6E656C00 
 4894              	.LASF70:
 4895 032f 706F7446 		.ascii	"potFeedback\000"
 4895      65656462 
 4895      61636B00 
 4896              	.LASF61:
 4897 033b 41525241 		.ascii	"ARRAY_SIZE\000"
 4897      595F5349 
 4897      5A4500
 4898              	.LASF108:
 4899 0346 57545F61 		.ascii	"WT_arr_cspot\000"
 4899      72725F63 
 4899      73706F74 
 4899      00
 4900              	.LASF28:
 4901 0353 726F7461 		.ascii	"rotate_control\000"
 4901      74655F63 
 4901      6F6E7472 
 4901      6F6C00
 4902              	.LASF2:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 109


 4903 0362 73686F72 		.ascii	"short int\000"
 4903      7420696E 
 4903      7400
 4904              	.LASF123:
 4905 036c 62617365 		.ascii	"baseAzimuth_state\000"
 4905      417A696D 
 4905      7574685F 
 4905      73746174 
 4905      6500
 4906              	.LASF46:
 4907 037e 61765F61 		.ascii	"av_array\000"
 4907      72726179 
 4907      00
 4908              	.LASF4:
 4909 0387 6C6F6E67 		.ascii	"long int\000"
 4909      20696E74 
 4909      00
 4910              	.LASF21:
 4911 0390 74696C74 		.ascii	"tilt_control\000"
 4911      5F636F6E 
 4911      74726F6C 
 4911      00
 4912              	.LASF73:
 4913 039d 74696D65 		.ascii	"timer_isr\000"
 4913      725F6973 
 4913      7200
 4914              	.LASF120:
 4915 03a7 77726973 		.ascii	"wristRotate_state\000"
 4915      74526F74 
 4915      6174655F 
 4915      73746174 
 4915      6500
 4916              	.LASF45:
 4917 03b9 42415F77 		.ascii	"BA_wait\000"
 4917      61697400 
 4918              	.LASF93:
 4919 03c1 64697265 		.ascii	"direction\000"
 4919      6374696F 
 4919      6E00
 4920              	.LASF24:
 4921 03cb 77726973 		.ascii	"wristTilt_states\000"
 4921      7454696C 
 4921      745F7374 
 4921      61746573 
 4921      00
 4922              	.LASF102:
 4923 03dc 77697A6E 		.ascii	"wiznet\000"
 4923      657400
 4924              	.LASF53:
 4925 03e3 63686563 		.ascii	"check_update\000"
 4925      6B5F7570 
 4925      64617465 
 4925      00
 4926              	.LASF23:
 4927 03f0 74696C74 		.ascii	"tilt_feedback\000"
 4927      5F666565 
 4927      64626163 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 110


 4927      6B00
 4928              	.LASF79:
 4929 03fe 53657276 		.ascii	"ServoSpeed\000"
 4929      6F537065 
 4929      656400
 4930              	.LASF127:
 4931 0409 73656E64 		.ascii	"send_feedback\000"
 4931      5F666565 
 4931      64626163 
 4931      6B00
 4932              	.LASF17:
 4933 0417 73697A65 		.ascii	"sizetype\000"
 4933      74797065 
 4933      00
 4934              	.LASF5:
 4935 0420 6C6F6E67 		.ascii	"long unsigned int\000"
 4935      20756E73 
 4935      69676E65 
 4935      6420696E 
 4935      7400
 4936              	.LASF34:
 4937 0432 656C6277 		.ascii	"elbw_execute\000"
 4937      5F657865 
 4937      63757465 
 4937      00
 4938              	.LASF88:
 4939 043f 62617365 		.ascii	"baseAz_array\000"
 4939      417A5F61 
 4939      72726179 
 4939      00
 4940              	.LASF29:
 4941 044c 726F7461 		.ascii	"rotate_wait\000"
 4941      74655F77 
 4941      61697400 
 4942              	.LASF98:
 4943 0458 7365636F 		.ascii	"second_count\000"
 4943      6E645F63 
 4943      6F756E74 
 4943      00
 4944              	.LASF37:
 4945 0465 73686C64 		.ascii	"shldr_start\000"
 4945      725F7374 
 4945      61727400 
 4946              	.LASF64:
 4947 0471 696E666F 		.ascii	"info_array\000"
 4947      5F617272 
 4947      617900
 4948              	.LASF1:
 4949 047c 756E7369 		.ascii	"unsigned char\000"
 4949      676E6564 
 4949      20636861 
 4949      7200
 4950              	.LASF81:
 4951 048a 66696C6C 		.ascii	"fill_data_array\000"
 4951      5F646174 
 4951      615F6172 
 4951      72617900 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 111


 4952              	.LASF83:
 4953 049a 77726973 		.ascii	"wristRotate\000"
 4953      74526F74 
 4953      61746500 
 4954              	.LASF96:
 4955 04a6 696E6372 		.ascii	"increasing\000"
 4955      65617369 
 4955      6E6700
 4956              	.LASF105:
 4957 04b1 656C626F 		.ascii	"elbow_array\000"
 4957      775F6172 
 4957      72617900 
 4958              	.LASF39:
 4959 04bd 73686C64 		.ascii	"shldr_execute\000"
 4959      725F6578 
 4959      65637574 
 4959      6500
 4960              	.LASF27:
 4961 04cb 726F7461 		.ascii	"rotate_init\000"
 4961      74655F69 
 4961      6E697400 
 4962              	.LASF124:
 4963 04d7 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 4963      4320342E 
 4963      382E3420 
 4963      32303134 
 4963      30353236 
 4964 050a 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 4964      20726576 
 4964      6973696F 
 4964      6E203231 
 4964      31333538 
 4965 053d 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 4965      74643D67 
 4965      6E753939 
 4965      202D6666 
 4965      756E6374 
 4966              	.LASF62:
 4967 055e 636F6D6D 		.ascii	"command\000"
 4967      616E6400 
 4968              	.LASF94:
 4969 0566 42415F63 		.ascii	"BA_cspot\000"
 4969      73706F74 
 4969      00
 4970              	.LASF99:
 4971 056f 74656D70 		.ascii	"temp_code_time\000"
 4971      5F636F64 
 4971      655F7469 
 4971      6D6500
 4972              	.LASF117:
 4973 057e 74656D70 		.ascii	"temp_val\000"
 4973      5F76616C 
 4973      00
 4974              	.LASF0:
 4975 0587 7369676E 		.ascii	"signed char\000"
 4975      65642063 
 4975      68617200 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 112


 4976              	.LASF49:
 4977 0593 61766572 		.ascii	"average\000"
 4977      61676500 
 4978              	.LASF3:
 4979 059b 73686F72 		.ascii	"short unsigned int\000"
 4979      7420756E 
 4979      7369676E 
 4979      65642069 
 4979      6E7400
 4980              	.LASF35:
 4981 05ae 656C6277 		.ascii	"elbw_wait\000"
 4981      5F776169 
 4981      7400
 4982              	.LASF90:
 4983 05b8 6D61696E 		.ascii	"main\000"
 4983      00
 4984              	.LASF95:
 4985 05bd 42415F61 		.ascii	"BA_array\000"
 4985      72726179 
 4985      00
 4986              	.LASF22:
 4987 05c6 74696C74 		.ascii	"tilt_wait\000"
 4987      5F776169 
 4987      7400
 4988              	.LASF111:
 4989 05d0 57525F61 		.ascii	"WR_array\000"
 4989      72726179 
 4989      00
 4990              	.LASF9:
 4991 05d9 75696E74 		.ascii	"uint8\000"
 4991      3800
 4992              	.LASF15:
 4993 05df 646F7562 		.ascii	"double\000"
 4993      6C6500
 4994              	.LASF114:
 4995 05e6 454C424F 		.ascii	"ELBOW_FLAG\000"
 4995      575F464C 
 4995      414700
 4996              	.LASF75:
 4997 05f1 73657276 		.ascii	"servoID\000"
 4997      6F494400 
 4998              	.LASF48:
 4999 05f9 6973725F 		.ascii	"isr_var\000"
 4999      76617200 
 5000              	.LASF91:
 5001 0601 74696D65 		.ascii	"time_array\000"
 5001      5F617272 
 5001      617900
 5002              	.LASF77:
 5003 060c 53657453 		.ascii	"SetServoTorque\000"
 5003      6572766F 
 5003      546F7271 
 5003      756500
 5004              	.LASF76:
 5005 061b 706F7369 		.ascii	"position\000"
 5005      74696F6E 
 5005      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc7BFvkn.s 			page 113


 5006              	.LASF125:
 5007 0624 2E5C6D61 		.ascii	".\\main.c\000"
 5007      696E2E63 
 5007      00
 5008              	.LASF33:
 5009 062d 656C6277 		.ascii	"elbw_init\000"
 5009      5F696E69 
 5009      7400
 5010              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	feedback_array,14,4
  44              		.comm	wiznet,1,1
  45              		.comm	test_array,22,4
  46              		.global	WT_FLAG
  47              		.bss
  48              		.type	WT_FLAG, %object
  49              		.size	WT_FLAG, 1
  50              	WT_FLAG:
  51 0000 00       		.space	1
  52              		.global	WR_FLAG
  53              		.type	WR_FLAG, %object
  54              		.size	WR_FLAG, 1
  55              	WR_FLAG:
  56 0001 00       		.space	1
  57              		.global	ELBOW_FLAG
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 2


  58              		.type	ELBOW_FLAG, %object
  59              		.size	ELBOW_FLAG, 1
  60              	ELBOW_FLAG:
  61 0002 00       		.space	1
  62              		.global	SHOULDER_FLAG
  63              		.type	SHOULDER_FLAG, %object
  64              		.size	SHOULDER_FLAG, 1
  65              	SHOULDER_FLAG:
  66 0003 00       		.space	1
  67              		.global	BA_FLAG
  68              		.type	BA_FLAG, %object
  69              		.size	BA_FLAG, 1
  70              	BA_FLAG:
  71 0004 00       		.space	1
  72              		.global	EFFECTOR_FLAG
  73              		.type	EFFECTOR_FLAG, %object
  74              		.size	EFFECTOR_FLAG, 1
  75              	EFFECTOR_FLAG:
  76 0005 00       		.space	1
  77              		.global	PH_FLAG
  78              		.type	PH_FLAG, %object
  79              		.size	PH_FLAG, 1
  80              	PH_FLAG:
  81 0006 00       		.space	1
  82              		.global	dropped_packets
  83 0007 00       		.align	1
  84              		.type	dropped_packets, %object
  85              		.size	dropped_packets, 2
  86              	dropped_packets:
  87 0008 0000     		.space	2
  88              		.global	fail_safe_errors
  89              		.align	1
  90              		.type	fail_safe_errors, %object
  91              		.size	fail_safe_errors, 2
  92              	fail_safe_errors:
  93 000a 0000     		.space	2
  94              		.global	shldr_errors
  95              		.align	1
  96              		.type	shldr_errors, %object
  97              		.size	shldr_errors, 2
  98              	shldr_errors:
  99 000c 0000     		.space	2
 100              		.global	elbw_errors
 101              		.align	1
 102              		.type	elbw_errors, %object
 103              		.size	elbw_errors, 2
 104              	elbw_errors:
 105 000e 0000     		.space	2
 106              		.global	BA_errors
 107              		.align	1
 108              		.type	BA_errors, %object
 109              		.size	BA_errors, 2
 110              	BA_errors:
 111 0010 0000     		.space	2
 112              		.global	WT_errors
 113              		.align	1
 114              		.type	WT_errors, %object
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 3


 115              		.size	WT_errors, 2
 116              	WT_errors:
 117 0012 0000     		.space	2
 118              		.global	WR_errors
 119              		.align	1
 120              		.type	WR_errors, %object
 121              		.size	WR_errors, 2
 122              	WR_errors:
 123 0014 0000     		.space	2
 124              		.global	eff_errors
 125              		.align	1
 126              		.type	eff_errors, %object
 127              		.size	eff_errors, 2
 128              	eff_errors:
 129 0016 0000     		.space	2
 130              		.comm	timerFlag,1,1
 131              		.section	.text.timer_isr,"ax",%progbits
 132              		.align	2
 133              		.global	timer_isr
 134              		.code	16
 135              		.thumb_func
 136              		.type	timer_isr, %function
 137              	timer_isr:
 138              	.LFB34:
 139              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 140              		.loc 1 11 0
 141              		.cfi_startproc
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 82B0     		sub	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 150              		.loc 1 12 0
 151 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 152 000a 031C     		mov	r3, r0
 153 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 154              		.loc 1 13 0
 155 000e 054B     		ldr	r3, .L2
 156 0010 0122     		mov	r2, #1
 157 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 4


 158              		.loc 1 14 0
 159 0014 7B68     		ldr	r3, [r7, #4]
 160 0016 181C     		mov	r0, r3
 161 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 162              		.loc 1 15 0
 163 001c BD46     		mov	sp, r7
 164 001e 02B0     		add	sp, sp, #8
 165              		@ sp needed
 166 0020 80BD     		pop	{r7, pc}
 167              	.L3:
 168 0022 C046     		.align	2
 169              	.L2:
 170 0024 00000000 		.word	timerFlag
 171              		.cfi_endproc
 172              	.LFE34:
 173              		.size	timer_isr, .-timer_isr
 174              		.global	__aeabi_idiv
 175              		.section	.text.CalibrationElbow,"ax",%progbits
 176              		.align	2
 177              		.global	CalibrationElbow
 178              		.code	16
 179              		.thumb_func
 180              		.type	CalibrationElbow, %function
 181              	CalibrationElbow:
 182              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 5


  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 183              		.loc 1 48 0
 184              		.cfi_startproc
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 86B0     		sub	sp, sp, #24
 190              		.cfi_def_cfa_offset 32
 191 0004 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 193 0006 021C     		mov	r2, r0
 194 0008 BB1D     		add	r3, r7, #6
 195 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 196              		.loc 1 49 0
 197 000c 3B1C     		mov	r3, r7
 198 000e 1133     		add	r3, r3, #17
 199 0010 0322     		mov	r2, #3
 200 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 201              		.loc 1 56 0
 202 0014 3B1C     		mov	r3, r7
 203 0016 1733     		add	r3, r3, #23
 204 0018 0022     		mov	r2, #0
 205 001a 1A70     		strb	r2, [r3]
 206 001c 3B1C     		mov	r3, r7
 207 001e 1233     		add	r3, r3, #18
 208 0020 0022     		mov	r2, #0
 209 0022 1A80     		strh	r2, [r3]
 210 0024 5DE0     		b	.L5
 211              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Test stop switch
  59:.\main.c      ****         LED_Write(0);
 212              		.loc 1 59 0
 213 0026 0020     		mov	r0, #0
 214 0028 FFF7FEFF 		bl	LED_Write
  60:.\main.c      ****         
  61:.\main.c      ****         // Move till stop switch presses down
  62:.\main.c      ****         if(velocity < 1500)
 215              		.loc 1 62 0
 216 002c BB1D     		add	r3, r7, #6
 217 002e 1A88     		ldrh	r2, [r3]
 218 0030 4B4B     		ldr	r3, .L18
 219 0032 9A42     		cmp	r2, r3
 220 0034 0BD8     		bhi	.L6
  63:.\main.c      ****         {
  64:.\main.c      ****             while(stop_elb_dn_Read())
 221              		.loc 1 64 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 6


 222 0036 04E0     		b	.L7
 223              	.L8:
  65:.\main.c      ****             {
  66:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 224              		.loc 1 66 0
 225 0038 BB1D     		add	r3, r7, #6
 226 003a 1B88     		ldrh	r3, [r3]
 227 003c 181C     		mov	r0, r3
 228 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 229              	.L7:
  64:.\main.c      ****             while(stop_elb_dn_Read())
 230              		.loc 1 64 0 discriminator 1
 231 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 232 0046 031C     		mov	r3, r0
 233 0048 002B     		cmp	r3, #0
 234 004a F5D1     		bne	.L8
 235 004c 15E0     		b	.L9
 236              	.L6:
  67:.\main.c      ****             }
  68:.\main.c      ****         }
  69:.\main.c      ****         else if(velocity > 1500)
 237              		.loc 1 69 0
 238 004e BB1D     		add	r3, r7, #6
 239 0050 1A88     		ldrh	r2, [r3]
 240 0052 444B     		ldr	r3, .L18+4
 241 0054 9A42     		cmp	r2, r3
 242 0056 0BD9     		bls	.L10
  70:.\main.c      ****         {
  71:.\main.c      ****             while(stop_elb_up_Read())
 243              		.loc 1 71 0
 244 0058 04E0     		b	.L11
 245              	.L12:
  72:.\main.c      ****             {
  73:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 246              		.loc 1 73 0
 247 005a BB1D     		add	r3, r7, #6
 248 005c 1B88     		ldrh	r3, [r3]
 249 005e 181C     		mov	r0, r3
 250 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 251              	.L11:
  71:.\main.c      ****             while(stop_elb_up_Read())
 252              		.loc 1 71 0 discriminator 1
 253 0064 FFF7FEFF 		bl	stop_elb_up_Read
 254 0068 031C     		mov	r3, r0
 255 006a 002B     		cmp	r3, #0
 256 006c F5D1     		bne	.L12
 257 006e 04E0     		b	.L9
 258              	.L10:
  74:.\main.c      ****             }
  75:.\main.c      ****         }
  76:.\main.c      ****         else
  77:.\main.c      ****         {
  78:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 259              		.loc 1 78 0
 260 0070 BB1D     		add	r3, r7, #6
 261 0072 1B88     		ldrh	r3, [r3]
 262 0074 181C     		mov	r0, r3
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 7


 263 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 264              	.L9:
  79:.\main.c      ****             //LED_Write(1);
  80:.\main.c      ****         }
  81:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 265              		.loc 1 81 0
 266 007a 3A4B     		ldr	r3, .L18+4
 267 007c 181C     		mov	r0, r3
 268 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  82:.\main.c      ****         channel = ELBOW_POT;
 269              		.loc 1 82 0
 270 0082 0123     		mov	r3, #1
 271 0084 FB60     		str	r3, [r7, #12]
  83:.\main.c      ****         
  84:.\main.c      ****         // Add the value to average
  85:.\main.c      ****         average+=potFeedback(channel);
 272              		.loc 1 85 0
 273 0086 FB68     		ldr	r3, [r7, #12]
 274 0088 181C     		mov	r0, r3
 275 008a FFF7FEFF 		bl	potFeedback
 276 008e 031C     		mov	r3, r0
 277 0090 191C     		mov	r1, r3
 278 0092 3B1C     		mov	r3, r7
 279 0094 1233     		add	r3, r3, #18
 280 0096 3A1C     		mov	r2, r7
 281 0098 1232     		add	r2, r2, #18
 282 009a 1288     		ldrh	r2, [r2]
 283 009c 8A18     		add	r2, r1, r2
 284 009e 1A80     		strh	r2, [r3]
  86:.\main.c      ****  
  87:.\main.c      **** 		// Move away for 2 seconds
  88:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  89:.\main.c      ****         difference = 1500-velocity;
 285              		.loc 1 89 0
 286 00a0 BB1D     		add	r3, r7, #6
 287 00a2 1B88     		ldrh	r3, [r3]
 288 00a4 2F4A     		ldr	r2, .L18+4
 289 00a6 D31A     		sub	r3, r2, r3
 290 00a8 9AB2     		uxth	r2, r3
 291 00aa 3B1C     		mov	r3, r7
 292 00ac 0A33     		add	r3, r3, #10
 293 00ae 1A80     		strh	r2, [r3]
  90:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 294              		.loc 1 90 0
 295 00b0 3B1C     		mov	r3, r7
 296 00b2 0A33     		add	r3, r3, #10
 297 00b4 1B88     		ldrh	r3, [r3]
 298 00b6 2B4A     		ldr	r2, .L18+4
 299 00b8 9B18     		add	r3, r3, r2
 300 00ba 9BB2     		uxth	r3, r3
 301 00bc 181C     		mov	r0, r3
 302 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  91:.\main.c      ****         CyDelay(1000);
 303              		.loc 1 91 0
 304 00c2 FA23     		mov	r3, #250
 305 00c4 9B00     		lsl	r3, r3, #2
 306 00c6 181C     		mov	r0, r3
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 8


 307 00c8 FFF7FEFF 		bl	CyDelay
  92:.\main.c      ****  
  93:.\main.c      **** 		// Stop moving
  94:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 308              		.loc 1 94 0
 309 00cc 254B     		ldr	r3, .L18+4
 310 00ce 181C     		mov	r0, r3
 311 00d0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 312              		.loc 1 56 0
 313 00d4 3B1C     		mov	r3, r7
 314 00d6 1733     		add	r3, r3, #23
 315 00d8 1A78     		ldrb	r2, [r3]
 316 00da 3B1C     		mov	r3, r7
 317 00dc 1733     		add	r3, r3, #23
 318 00de 0132     		add	r2, r2, #1
 319 00e0 1A70     		strb	r2, [r3]
 320              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 321              		.loc 1 56 0 is_stmt 0 discriminator 1
 322 00e2 3A1C     		mov	r2, r7
 323 00e4 1732     		add	r2, r2, #23
 324 00e6 3B1C     		mov	r3, r7
 325 00e8 1133     		add	r3, r3, #17
 326 00ea 1278     		ldrb	r2, [r2]
 327 00ec 1B78     		ldrb	r3, [r3]
 328 00ee 9A42     		cmp	r2, r3
 329 00f0 99D3     		bcc	.L13
  95:.\main.c      ****         
  96:.\main.c      ****         // Test stop switch
  97:.\main.c      ****         //LED_Write(1);
  98:.\main.c      ****         //CyDelay(1000);
  99:.\main.c      **** 	}
 100:.\main.c      ****     
 101:.\main.c      ****     if(velocity > 1500)
 330              		.loc 1 101 0 is_stmt 1
 331 00f2 BB1D     		add	r3, r7, #6
 332 00f4 1A88     		ldrh	r2, [r3]
 333 00f6 1B4B     		ldr	r3, .L18+4
 334 00f8 9A42     		cmp	r2, r3
 335 00fa 10D9     		bls	.L14
 102:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 336              		.loc 1 102 0
 337 00fc 3B1C     		mov	r3, r7
 338 00fe 1233     		add	r3, r3, #18
 339 0100 1A88     		ldrh	r2, [r3]
 340 0102 3B1C     		mov	r3, r7
 341 0104 1133     		add	r3, r3, #17
 342 0106 1B78     		ldrb	r3, [r3]
 343 0108 101C     		mov	r0, r2
 344 010a 191C     		mov	r1, r3
 345 010c FFF7FEFF 		bl	__aeabi_idiv
 346 0110 031C     		mov	r3, r0
 347 0112 9AB2     		uxth	r2, r3
 348 0114 3B1C     		mov	r3, r7
 349 0116 1433     		add	r3, r3, #20
 350 0118 143A     		sub	r2, r2, #20
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 9


 351 011a 1A80     		strh	r2, [r3]
 352 011c 18E0     		b	.L15
 353              	.L14:
 103:.\main.c      ****     else if(velocity < 1500)
 354              		.loc 1 103 0
 355 011e BB1D     		add	r3, r7, #6
 356 0120 1A88     		ldrh	r2, [r3]
 357 0122 0F4B     		ldr	r3, .L18
 358 0124 9A42     		cmp	r2, r3
 359 0126 10D8     		bhi	.L16
 104:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 360              		.loc 1 104 0
 361 0128 3B1C     		mov	r3, r7
 362 012a 1233     		add	r3, r3, #18
 363 012c 1A88     		ldrh	r2, [r3]
 364 012e 3B1C     		mov	r3, r7
 365 0130 1133     		add	r3, r3, #17
 366 0132 1B78     		ldrb	r3, [r3]
 367 0134 101C     		mov	r0, r2
 368 0136 191C     		mov	r1, r3
 369 0138 FFF7FEFF 		bl	__aeabi_idiv
 370 013c 031C     		mov	r3, r0
 371 013e 9AB2     		uxth	r2, r3
 372 0140 3B1C     		mov	r3, r7
 373 0142 1433     		add	r3, r3, #20
 374 0144 1432     		add	r2, r2, #20
 375 0146 1A80     		strh	r2, [r3]
 376 0148 02E0     		b	.L15
 377              	.L16:
 105:.\main.c      ****     else // velocity == 1500
 106:.\main.c      ****         LED_Write(1); 
 378              		.loc 1 106 0
 379 014a 0120     		mov	r0, #1
 380 014c FFF7FEFF 		bl	LED_Write
 381              	.L15:
 107:.\main.c      ****  
 108:.\main.c      **** 	return bound;
 382              		.loc 1 108 0
 383 0150 3B1C     		mov	r3, r7
 384 0152 1433     		add	r3, r3, #20
 385 0154 1B88     		ldrh	r3, [r3]
 109:.\main.c      **** }
 386              		.loc 1 109 0
 387 0156 181C     		mov	r0, r3
 388 0158 BD46     		mov	sp, r7
 389 015a 06B0     		add	sp, sp, #24
 390              		@ sp needed
 391 015c 80BD     		pop	{r7, pc}
 392              	.L19:
 393 015e C046     		.align	2
 394              	.L18:
 395 0160 DB050000 		.word	1499
 396 0164 DC050000 		.word	1500
 397              		.cfi_endproc
 398              	.LFE35:
 399              		.size	CalibrationElbow, .-CalibrationElbow
 400              		.section	.text.CalibrationShoulder,"ax",%progbits
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 10


 401              		.align	2
 402              		.global	CalibrationShoulder
 403              		.code	16
 404              		.thumb_func
 405              		.type	CalibrationShoulder, %function
 406              	CalibrationShoulder:
 407              	.LFB36:
 110:.\main.c      **** 
 111:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 112:.\main.c      **** {
 408              		.loc 1 112 0
 409              		.cfi_startproc
 410 0000 80B5     		push	{r7, lr}
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 0002 86B0     		sub	sp, sp, #24
 415              		.cfi_def_cfa_offset 32
 416 0004 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 418 0006 021C     		mov	r2, r0
 419 0008 BB1D     		add	r3, r7, #6
 420 000a 1A80     		strh	r2, [r3]
 113:.\main.c      **** 	uint8 	CYCLES = 3;
 421              		.loc 1 113 0
 422 000c 3B1C     		mov	r3, r7
 423 000e 1133     		add	r3, r3, #17
 424 0010 0322     		mov	r2, #3
 425 0012 1A70     		strb	r2, [r3]
 114:.\main.c      **** 	uint8 	i;
 115:.\main.c      **** 	uint16 	bound;
 116:.\main.c      **** 	uint16 	average;
 117:.\main.c      ****     uint32  channel;
 118:.\main.c      ****     int16 difference;
 119:.\main.c      ****  
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 426              		.loc 1 120 0
 427 0014 3B1C     		mov	r3, r7
 428 0016 1733     		add	r3, r3, #23
 429 0018 0022     		mov	r2, #0
 430 001a 1A70     		strb	r2, [r3]
 431 001c 3B1C     		mov	r3, r7
 432 001e 1233     		add	r3, r3, #18
 433 0020 0022     		mov	r2, #0
 434 0022 1A80     		strh	r2, [r3]
 435 0024 5DE0     		b	.L21
 436              	.L29:
 121:.\main.c      **** 	{
 122:.\main.c      **** 		// Move till stop switch presses down
 123:.\main.c      ****         if(velocity < 1500)
 437              		.loc 1 123 0
 438 0026 BB1D     		add	r3, r7, #6
 439 0028 1A88     		ldrh	r2, [r3]
 440 002a 4D4B     		ldr	r3, .L34
 441 002c 9A42     		cmp	r2, r3
 442 002e 0BD8     		bhi	.L22
 124:.\main.c      ****         {
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 11


 125:.\main.c      ****             while(stop_shdr_dn_Read())
 443              		.loc 1 125 0
 444 0030 04E0     		b	.L23
 445              	.L24:
 126:.\main.c      ****             {
 127:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 446              		.loc 1 127 0
 447 0032 BB1D     		add	r3, r7, #6
 448 0034 1B88     		ldrh	r3, [r3]
 449 0036 181C     		mov	r0, r3
 450 0038 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 451              	.L23:
 125:.\main.c      ****             while(stop_shdr_dn_Read())
 452              		.loc 1 125 0 discriminator 1
 453 003c FFF7FEFF 		bl	stop_shdr_dn_Read
 454 0040 031C     		mov	r3, r0
 455 0042 002B     		cmp	r3, #0
 456 0044 F5D1     		bne	.L24
 457 0046 18E0     		b	.L25
 458              	.L22:
 128:.\main.c      ****             }
 129:.\main.c      ****         }
 130:.\main.c      ****         else if(velocity > 1500)
 459              		.loc 1 130 0
 460 0048 BB1D     		add	r3, r7, #6
 461 004a 1A88     		ldrh	r2, [r3]
 462 004c 454B     		ldr	r3, .L34+4
 463 004e 9A42     		cmp	r2, r3
 464 0050 0BD9     		bls	.L26
 131:.\main.c      ****         {
 132:.\main.c      ****             while(stop_shdr_up_Read())
 465              		.loc 1 132 0
 466 0052 04E0     		b	.L27
 467              	.L28:
 133:.\main.c      ****             {
 134:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 468              		.loc 1 134 0
 469 0054 BB1D     		add	r3, r7, #6
 470 0056 1B88     		ldrh	r3, [r3]
 471 0058 181C     		mov	r0, r3
 472 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 473              	.L27:
 132:.\main.c      ****             while(stop_shdr_up_Read())
 474              		.loc 1 132 0 discriminator 1
 475 005e FFF7FEFF 		bl	stop_shdr_up_Read
 476 0062 031C     		mov	r3, r0
 477 0064 002B     		cmp	r3, #0
 478 0066 F5D1     		bne	.L28
 479 0068 07E0     		b	.L25
 480              	.L26:
 135:.\main.c      ****             }
 136:.\main.c      ****         }
 137:.\main.c      ****         else
 138:.\main.c      ****         {
 139:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 481              		.loc 1 139 0
 482 006a BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 12


 483 006c 1B88     		ldrh	r3, [r3]
 484 006e 181C     		mov	r0, r3
 485 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 140:.\main.c      ****             LED_Write(1);
 486              		.loc 1 140 0
 487 0074 0120     		mov	r0, #1
 488 0076 FFF7FEFF 		bl	LED_Write
 489              	.L25:
 141:.\main.c      ****         }
 142:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 490              		.loc 1 142 0
 491 007a 3A4B     		ldr	r3, .L34+4
 492 007c 181C     		mov	r0, r3
 493 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 143:.\main.c      ****         channel = SHOULDER_POT;
 494              		.loc 1 143 0
 495 0082 0023     		mov	r3, #0
 496 0084 FB60     		str	r3, [r7, #12]
 144:.\main.c      ****  
 145:.\main.c      **** 		// Add the value to average
 146:.\main.c      ****         average+=potFeedback(channel);
 497              		.loc 1 146 0
 498 0086 FB68     		ldr	r3, [r7, #12]
 499 0088 181C     		mov	r0, r3
 500 008a FFF7FEFF 		bl	potFeedback
 501 008e 031C     		mov	r3, r0
 502 0090 191C     		mov	r1, r3
 503 0092 3B1C     		mov	r3, r7
 504 0094 1233     		add	r3, r3, #18
 505 0096 3A1C     		mov	r2, r7
 506 0098 1232     		add	r2, r2, #18
 507 009a 1288     		ldrh	r2, [r2]
 508 009c 8A18     		add	r2, r1, r2
 509 009e 1A80     		strh	r2, [r3]
 147:.\main.c      ****  
 148:.\main.c      **** 		// Move away for 2 seconds
 149:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 150:.\main.c      ****         difference = 1500-velocity;
 510              		.loc 1 150 0
 511 00a0 BB1D     		add	r3, r7, #6
 512 00a2 1B88     		ldrh	r3, [r3]
 513 00a4 2F4A     		ldr	r2, .L34+4
 514 00a6 D31A     		sub	r3, r2, r3
 515 00a8 9AB2     		uxth	r2, r3
 516 00aa 3B1C     		mov	r3, r7
 517 00ac 0A33     		add	r3, r3, #10
 518 00ae 1A80     		strh	r2, [r3]
 151:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 519              		.loc 1 151 0
 520 00b0 3B1C     		mov	r3, r7
 521 00b2 0A33     		add	r3, r3, #10
 522 00b4 1B88     		ldrh	r3, [r3]
 523 00b6 2B4A     		ldr	r2, .L34+4
 524 00b8 9B18     		add	r3, r3, r2
 525 00ba 9BB2     		uxth	r3, r3
 526 00bc 181C     		mov	r0, r3
 527 00be FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 13


 152:.\main.c      ****         CyDelay(1000);
 528              		.loc 1 152 0
 529 00c2 FA23     		mov	r3, #250
 530 00c4 9B00     		lsl	r3, r3, #2
 531 00c6 181C     		mov	r0, r3
 532 00c8 FFF7FEFF 		bl	CyDelay
 153:.\main.c      ****  
 154:.\main.c      **** 		// Stop moving
 155:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 533              		.loc 1 155 0
 534 00cc 254B     		ldr	r3, .L34+4
 535 00ce 181C     		mov	r0, r3
 536 00d0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 537              		.loc 1 120 0
 538 00d4 3B1C     		mov	r3, r7
 539 00d6 1733     		add	r3, r3, #23
 540 00d8 1A78     		ldrb	r2, [r3]
 541 00da 3B1C     		mov	r3, r7
 542 00dc 1733     		add	r3, r3, #23
 543 00de 0132     		add	r2, r2, #1
 544 00e0 1A70     		strb	r2, [r3]
 545              	.L21:
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 546              		.loc 1 120 0 is_stmt 0 discriminator 1
 547 00e2 3A1C     		mov	r2, r7
 548 00e4 1732     		add	r2, r2, #23
 549 00e6 3B1C     		mov	r3, r7
 550 00e8 1133     		add	r3, r3, #17
 551 00ea 1278     		ldrb	r2, [r2]
 552 00ec 1B78     		ldrb	r3, [r3]
 553 00ee 9A42     		cmp	r2, r3
 554 00f0 99D3     		bcc	.L29
 156:.\main.c      **** 	}
 157:.\main.c      ****  
 158:.\main.c      **** 	if(velocity > 1500)
 555              		.loc 1 158 0 is_stmt 1
 556 00f2 BB1D     		add	r3, r7, #6
 557 00f4 1A88     		ldrh	r2, [r3]
 558 00f6 1B4B     		ldr	r3, .L34+4
 559 00f8 9A42     		cmp	r2, r3
 560 00fa 10D9     		bls	.L30
 159:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 561              		.loc 1 159 0
 562 00fc 3B1C     		mov	r3, r7
 563 00fe 1233     		add	r3, r3, #18
 564 0100 1A88     		ldrh	r2, [r3]
 565 0102 3B1C     		mov	r3, r7
 566 0104 1133     		add	r3, r3, #17
 567 0106 1B78     		ldrb	r3, [r3]
 568 0108 101C     		mov	r0, r2
 569 010a 191C     		mov	r1, r3
 570 010c FFF7FEFF 		bl	__aeabi_idiv
 571 0110 031C     		mov	r3, r0
 572 0112 9AB2     		uxth	r2, r3
 573 0114 3B1C     		mov	r3, r7
 574 0116 1433     		add	r3, r3, #20
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 14


 575 0118 143A     		sub	r2, r2, #20
 576 011a 1A80     		strh	r2, [r3]
 577 011c 18E0     		b	.L31
 578              	.L30:
 160:.\main.c      ****     else if(velocity < 1500)
 579              		.loc 1 160 0
 580 011e BB1D     		add	r3, r7, #6
 581 0120 1A88     		ldrh	r2, [r3]
 582 0122 0F4B     		ldr	r3, .L34
 583 0124 9A42     		cmp	r2, r3
 584 0126 10D8     		bhi	.L32
 161:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 585              		.loc 1 161 0
 586 0128 3B1C     		mov	r3, r7
 587 012a 1233     		add	r3, r3, #18
 588 012c 1A88     		ldrh	r2, [r3]
 589 012e 3B1C     		mov	r3, r7
 590 0130 1133     		add	r3, r3, #17
 591 0132 1B78     		ldrb	r3, [r3]
 592 0134 101C     		mov	r0, r2
 593 0136 191C     		mov	r1, r3
 594 0138 FFF7FEFF 		bl	__aeabi_idiv
 595 013c 031C     		mov	r3, r0
 596 013e 9AB2     		uxth	r2, r3
 597 0140 3B1C     		mov	r3, r7
 598 0142 1433     		add	r3, r3, #20
 599 0144 1432     		add	r2, r2, #20
 600 0146 1A80     		strh	r2, [r3]
 601 0148 02E0     		b	.L31
 602              	.L32:
 162:.\main.c      ****     else // velocity == 1500
 163:.\main.c      ****         LED_Write(1); 
 603              		.loc 1 163 0
 604 014a 0120     		mov	r0, #1
 605 014c FFF7FEFF 		bl	LED_Write
 606              	.L31:
 164:.\main.c      ****  
 165:.\main.c      **** 	return bound;
 607              		.loc 1 165 0
 608 0150 3B1C     		mov	r3, r7
 609 0152 1433     		add	r3, r3, #20
 610 0154 1B88     		ldrh	r3, [r3]
 166:.\main.c      **** }
 611              		.loc 1 166 0
 612 0156 181C     		mov	r0, r3
 613 0158 BD46     		mov	sp, r7
 614 015a 06B0     		add	sp, sp, #24
 615              		@ sp needed
 616 015c 80BD     		pop	{r7, pc}
 617              	.L35:
 618 015e C046     		.align	2
 619              	.L34:
 620 0160 DB050000 		.word	1499
 621 0164 DC050000 		.word	1500
 622              		.cfi_endproc
 623              	.LFE36:
 624              		.size	CalibrationShoulder, .-CalibrationShoulder
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 15


 625              		.global	__aeabi_uidiv
 626              		.section	.text.average,"ax",%progbits
 627              		.align	2
 628              		.global	average
 629              		.code	16
 630              		.thumb_func
 631              		.type	average, %function
 632              	average:
 633              	.LFB37:
 167:.\main.c      **** 
 168:.\main.c      **** //Average function to be used in smoothing our input
 169:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 170:.\main.c      **** {
 634              		.loc 1 170 0
 635              		.cfi_startproc
 636 0000 80B5     		push	{r7, lr}
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 7, -8
 639              		.cfi_offset 14, -4
 640 0002 86B0     		sub	sp, sp, #24
 641              		.cfi_def_cfa_offset 32
 642 0004 00AF     		add	r7, sp, #0
 643              		.cfi_def_cfa_register 7
 644 0006 7860     		str	r0, [r7, #4]
 645 0008 0A1C     		mov	r2, r1
 646 000a FB1C     		add	r3, r7, #3
 647 000c 1A70     		strb	r2, [r3]
 171:.\main.c      ****     uint8 i;
 172:.\main.c      ****     uint32 sum = 0;
 648              		.loc 1 172 0
 649 000e 0023     		mov	r3, #0
 650 0010 3B61     		str	r3, [r7, #16]
 173:.\main.c      ****     uint16 avg = 0;
 651              		.loc 1 173 0
 652 0012 3B1C     		mov	r3, r7
 653 0014 0E33     		add	r3, r3, #14
 654 0016 0022     		mov	r2, #0
 655 0018 1A80     		strh	r2, [r3]
 174:.\main.c      ****     
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 656              		.loc 1 175 0
 657 001a 3B1C     		mov	r3, r7
 658 001c 1733     		add	r3, r3, #23
 659 001e 0022     		mov	r2, #0
 660 0020 1A70     		strb	r2, [r3]
 661 0022 10E0     		b	.L37
 662              	.L38:
 176:.\main.c      ****     {
 177:.\main.c      ****         sum += av_array[i];
 663              		.loc 1 177 0 discriminator 2
 664 0024 3B1C     		mov	r3, r7
 665 0026 1733     		add	r3, r3, #23
 666 0028 1B78     		ldrb	r3, [r3]
 667 002a 5B00     		lsl	r3, r3, #1
 668 002c 7A68     		ldr	r2, [r7, #4]
 669 002e D318     		add	r3, r2, r3
 670 0030 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 16


 671 0032 3A69     		ldr	r2, [r7, #16]
 672 0034 D318     		add	r3, r2, r3
 673 0036 3B61     		str	r3, [r7, #16]
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 674              		.loc 1 175 0 discriminator 2
 675 0038 3B1C     		mov	r3, r7
 676 003a 1733     		add	r3, r3, #23
 677 003c 1A78     		ldrb	r2, [r3]
 678 003e 3B1C     		mov	r3, r7
 679 0040 1733     		add	r3, r3, #23
 680 0042 0132     		add	r2, r2, #1
 681 0044 1A70     		strb	r2, [r3]
 682              	.L37:
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 683              		.loc 1 175 0 is_stmt 0 discriminator 1
 684 0046 3A1C     		mov	r2, r7
 685 0048 1732     		add	r2, r2, #23
 686 004a FB1C     		add	r3, r7, #3
 687 004c 1278     		ldrb	r2, [r2]
 688 004e 1B78     		ldrb	r3, [r3]
 689 0050 9A42     		cmp	r2, r3
 690 0052 E7D3     		bcc	.L38
 178:.\main.c      ****     }
 179:.\main.c      ****     
 180:.\main.c      ****     avg = sum/num_items;
 691              		.loc 1 180 0 is_stmt 1
 692 0054 FB1C     		add	r3, r7, #3
 693 0056 1B78     		ldrb	r3, [r3]
 694 0058 3869     		ldr	r0, [r7, #16]
 695 005a 191C     		mov	r1, r3
 696 005c FFF7FEFF 		bl	__aeabi_uidiv
 697 0060 031C     		mov	r3, r0
 698 0062 1A1C     		mov	r2, r3
 699 0064 3B1C     		mov	r3, r7
 700 0066 0E33     		add	r3, r3, #14
 701 0068 1A80     		strh	r2, [r3]
 181:.\main.c      ****     
 182:.\main.c      ****     return avg;
 702              		.loc 1 182 0
 703 006a 3B1C     		mov	r3, r7
 704 006c 0E33     		add	r3, r3, #14
 705 006e 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 706              		.loc 1 183 0
 707 0070 181C     		mov	r0, r3
 708 0072 BD46     		mov	sp, r7
 709 0074 06B0     		add	sp, sp, #24
 710              		@ sp needed
 711 0076 80BD     		pop	{r7, pc}
 712              		.cfi_endproc
 713              	.LFE37:
 714              		.size	average, .-average
 715              		.section	.text.maintain_array,"ax",%progbits
 716              		.align	2
 717              		.global	maintain_array
 718              		.code	16
 719              		.thumb_func
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 17


 720              		.type	maintain_array, %function
 721              	maintain_array:
 722              	.LFB38:
 184:.\main.c      **** 
 185:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 186:.\main.c      **** {
 723              		.loc 1 186 0
 724              		.cfi_startproc
 725 0000 80B5     		push	{r7, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 7, -8
 728              		.cfi_offset 14, -4
 729 0002 82B0     		sub	sp, sp, #8
 730              		.cfi_def_cfa_offset 16
 731 0004 00AF     		add	r7, sp, #0
 732              		.cfi_def_cfa_register 7
 733 0006 0A1C     		mov	r2, r1
 734 0008 FB1D     		add	r3, r7, #7
 735 000a 011C     		add	r1, r0, #0
 736 000c 1970     		strb	r1, [r3]
 737 000e BB1D     		add	r3, r7, #6
 738 0010 1A70     		strb	r2, [r3]
 187:.\main.c      ****     if(cpos < (SIZE - 1))
 739              		.loc 1 187 0
 740 0012 FB1D     		add	r3, r7, #7
 741 0014 1A78     		ldrb	r2, [r3]
 742 0016 BB1D     		add	r3, r7, #6
 743 0018 1B78     		ldrb	r3, [r3]
 744 001a 013B     		sub	r3, r3, #1
 745 001c 9A42     		cmp	r2, r3
 746 001e 05DA     		bge	.L41
 188:.\main.c      ****     {
 189:.\main.c      ****         cpos++;
 747              		.loc 1 189 0
 748 0020 FB1D     		add	r3, r7, #7
 749 0022 1A78     		ldrb	r2, [r3]
 750 0024 FB1D     		add	r3, r7, #7
 751 0026 0132     		add	r2, r2, #1
 752 0028 1A70     		strb	r2, [r3]
 753 002a 02E0     		b	.L42
 754              	.L41:
 190:.\main.c      ****     }
 191:.\main.c      ****     else
 192:.\main.c      ****     {
 193:.\main.c      ****         cpos = 0;
 755              		.loc 1 193 0
 756 002c FB1D     		add	r3, r7, #7
 757 002e 0022     		mov	r2, #0
 758 0030 1A70     		strb	r2, [r3]
 759              	.L42:
 194:.\main.c      ****     }
 195:.\main.c      ****     return cpos;
 760              		.loc 1 195 0
 761 0032 FB1D     		add	r3, r7, #7
 762 0034 1B78     		ldrb	r3, [r3]
 196:.\main.c      **** }
 763              		.loc 1 196 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 18


 764 0036 181C     		mov	r0, r3
 765 0038 BD46     		mov	sp, r7
 766 003a 02B0     		add	sp, sp, #8
 767              		@ sp needed
 768 003c 80BD     		pop	{r7, pc}
 769              		.cfi_endproc
 770              	.LFE38:
 771              		.size	maintain_array, .-maintain_array
 772 003e C046     		.section	.text.check_update,"ax",%progbits
 773              		.align	2
 774              		.global	check_update
 775              		.code	16
 776              		.thumb_func
 777              		.type	check_update, %function
 778              	check_update:
 779              	.LFB39:
 197:.\main.c      **** 
 198:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 199:.\main.c      **** {
 780              		.loc 1 199 0
 781              		.cfi_startproc
 782 0000 80B5     		push	{r7, lr}
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 86B0     		sub	sp, sp, #24
 787              		.cfi_def_cfa_offset 32
 788 0004 00AF     		add	r7, sp, #0
 789              		.cfi_def_cfa_register 7
 790 0006 F860     		str	r0, [r7, #12]
 791 0008 7B60     		str	r3, [r7, #4]
 792 000a 3B1C     		mov	r3, r7
 793 000c 0B33     		add	r3, r3, #11
 794 000e 1970     		strb	r1, [r3]
 795 0010 3B1C     		mov	r3, r7
 796 0012 0A33     		add	r3, r3, #10
 797 0014 1A70     		strb	r2, [r3]
 200:.\main.c      ****     uint8 index;
 201:.\main.c      ****     if(arr_pos != 0)
 798              		.loc 1 201 0
 799 0016 3B1C     		mov	r3, r7
 800 0018 0B33     		add	r3, r3, #11
 801 001a 1B78     		ldrb	r3, [r3]
 802 001c 002B     		cmp	r3, #0
 803 001e 07D0     		beq	.L45
 202:.\main.c      ****     {
 203:.\main.c      ****         index = arr_pos - 1;
 804              		.loc 1 203 0
 805 0020 3B1C     		mov	r3, r7
 806 0022 1733     		add	r3, r3, #23
 807 0024 3A1C     		mov	r2, r7
 808 0026 0B32     		add	r2, r2, #11
 809 0028 1278     		ldrb	r2, [r2]
 810 002a 013A     		sub	r2, r2, #1
 811 002c 1A70     		strb	r2, [r3]
 812 002e 06E0     		b	.L46
 813              	.L45:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 19


 204:.\main.c      ****     }
 205:.\main.c      ****     else
 206:.\main.c      ****     {
 207:.\main.c      ****         index = size - 1;
 814              		.loc 1 207 0
 815 0030 3B1C     		mov	r3, r7
 816 0032 1733     		add	r3, r3, #23
 817 0034 3A1C     		mov	r2, r7
 818 0036 0A32     		add	r2, r2, #10
 819 0038 1278     		ldrb	r2, [r2]
 820 003a 013A     		sub	r2, r2, #1
 821 003c 1A70     		strb	r2, [r3]
 822              	.L46:
 208:.\main.c      ****     }
 209:.\main.c      ****     
 210:.\main.c      ****     if(change < 0)
 823              		.loc 1 210 0
 824 003e 7B68     		ldr	r3, [r7, #4]
 825 0040 002B     		cmp	r3, #0
 826 0042 2ADA     		bge	.L47
 211:.\main.c      ****     {
 212:.\main.c      ****         if(array[index] >= (1000 - change))
 827              		.loc 1 212 0
 828 0044 3B1C     		mov	r3, r7
 829 0046 1733     		add	r3, r3, #23
 830 0048 1B78     		ldrb	r3, [r3]
 831 004a 5B00     		lsl	r3, r3, #1
 832 004c FA68     		ldr	r2, [r7, #12]
 833 004e D318     		add	r3, r2, r3
 834 0050 1B88     		ldrh	r3, [r3]
 835 0052 1A1C     		mov	r2, r3
 836 0054 7B68     		ldr	r3, [r7, #4]
 837 0056 FA21     		mov	r1, #250
 838 0058 8900     		lsl	r1, r1, #2
 839 005a CB1A     		sub	r3, r1, r3
 840 005c 9A42     		cmp	r2, r3
 841 005e 12DB     		blt	.L48
 213:.\main.c      ****         {
 214:.\main.c      ****             array[arr_pos] = (array[index] + change);
 842              		.loc 1 214 0
 843 0060 3B1C     		mov	r3, r7
 844 0062 0B33     		add	r3, r3, #11
 845 0064 1B78     		ldrb	r3, [r3]
 846 0066 5B00     		lsl	r3, r3, #1
 847 0068 FA68     		ldr	r2, [r7, #12]
 848 006a D318     		add	r3, r2, r3
 849 006c 3A1C     		mov	r2, r7
 850 006e 1732     		add	r2, r2, #23
 851 0070 1278     		ldrb	r2, [r2]
 852 0072 5200     		lsl	r2, r2, #1
 853 0074 F968     		ldr	r1, [r7, #12]
 854 0076 8A18     		add	r2, r1, r2
 855 0078 1188     		ldrh	r1, [r2]
 856 007a 7A68     		ldr	r2, [r7, #4]
 857 007c 92B2     		uxth	r2, r2
 858 007e 8A18     		add	r2, r1, r2
 859 0080 92B2     		uxth	r2, r2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 20


 860 0082 1A80     		strh	r2, [r3]
 861 0084 33E0     		b	.L50
 862              	.L48:
 215:.\main.c      ****         }
 216:.\main.c      ****         else
 217:.\main.c      ****         {
 218:.\main.c      ****             array[arr_pos] = 1000;
 863              		.loc 1 218 0
 864 0086 3B1C     		mov	r3, r7
 865 0088 0B33     		add	r3, r3, #11
 866 008a 1B78     		ldrb	r3, [r3]
 867 008c 5B00     		lsl	r3, r3, #1
 868 008e FA68     		ldr	r2, [r7, #12]
 869 0090 D318     		add	r3, r2, r3
 870 0092 FA22     		mov	r2, #250
 871 0094 9200     		lsl	r2, r2, #2
 872 0096 1A80     		strh	r2, [r3]
 873 0098 29E0     		b	.L50
 874              	.L47:
 219:.\main.c      ****         }
 220:.\main.c      ****     }
 221:.\main.c      ****     else
 222:.\main.c      ****     {
 223:.\main.c      ****         if(array[index] <= (2000 - change))
 875              		.loc 1 223 0
 876 009a 3B1C     		mov	r3, r7
 877 009c 1733     		add	r3, r3, #23
 878 009e 1B78     		ldrb	r3, [r3]
 879 00a0 5B00     		lsl	r3, r3, #1
 880 00a2 FA68     		ldr	r2, [r7, #12]
 881 00a4 D318     		add	r3, r2, r3
 882 00a6 1B88     		ldrh	r3, [r3]
 883 00a8 1A1C     		mov	r2, r3
 884 00aa 7B68     		ldr	r3, [r7, #4]
 885 00ac FA21     		mov	r1, #250
 886 00ae C900     		lsl	r1, r1, #3
 887 00b0 CB1A     		sub	r3, r1, r3
 888 00b2 9A42     		cmp	r2, r3
 889 00b4 12DC     		bgt	.L51
 224:.\main.c      ****         {
 225:.\main.c      ****             array[arr_pos] = (array[index] + change);
 890              		.loc 1 225 0
 891 00b6 3B1C     		mov	r3, r7
 892 00b8 0B33     		add	r3, r3, #11
 893 00ba 1B78     		ldrb	r3, [r3]
 894 00bc 5B00     		lsl	r3, r3, #1
 895 00be FA68     		ldr	r2, [r7, #12]
 896 00c0 D318     		add	r3, r2, r3
 897 00c2 3A1C     		mov	r2, r7
 898 00c4 1732     		add	r2, r2, #23
 899 00c6 1278     		ldrb	r2, [r2]
 900 00c8 5200     		lsl	r2, r2, #1
 901 00ca F968     		ldr	r1, [r7, #12]
 902 00cc 8A18     		add	r2, r1, r2
 903 00ce 1188     		ldrh	r1, [r2]
 904 00d0 7A68     		ldr	r2, [r7, #4]
 905 00d2 92B2     		uxth	r2, r2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 21


 906 00d4 8A18     		add	r2, r1, r2
 907 00d6 92B2     		uxth	r2, r2
 908 00d8 1A80     		strh	r2, [r3]
 909 00da 08E0     		b	.L50
 910              	.L51:
 226:.\main.c      ****         }
 227:.\main.c      ****         else
 228:.\main.c      ****         {
 229:.\main.c      ****             array[arr_pos] = 2000;
 911              		.loc 1 229 0
 912 00dc 3B1C     		mov	r3, r7
 913 00de 0B33     		add	r3, r3, #11
 914 00e0 1B78     		ldrb	r3, [r3]
 915 00e2 5B00     		lsl	r3, r3, #1
 916 00e4 FA68     		ldr	r2, [r7, #12]
 917 00e6 D318     		add	r3, r2, r3
 918 00e8 FA22     		mov	r2, #250
 919 00ea D200     		lsl	r2, r2, #3
 920 00ec 1A80     		strh	r2, [r3]
 921              	.L50:
 230:.\main.c      ****         }
 231:.\main.c      ****     }
 232:.\main.c      ****     
 233:.\main.c      ****     return maintain_array(arr_pos, size);
 922              		.loc 1 233 0
 923 00ee 3B1C     		mov	r3, r7
 924 00f0 0B33     		add	r3, r3, #11
 925 00f2 1A78     		ldrb	r2, [r3]
 926 00f4 3B1C     		mov	r3, r7
 927 00f6 0A33     		add	r3, r3, #10
 928 00f8 1B78     		ldrb	r3, [r3]
 929 00fa 101C     		mov	r0, r2
 930 00fc 191C     		mov	r1, r3
 931 00fe FFF7FEFF 		bl	maintain_array
 932 0102 031C     		mov	r3, r0
 234:.\main.c      **** }
 933              		.loc 1 234 0
 934 0104 181C     		mov	r0, r3
 935 0106 BD46     		mov	sp, r7
 936 0108 06B0     		add	sp, sp, #24
 937              		@ sp needed
 938 010a 80BD     		pop	{r7, pc}
 939              		.cfi_endproc
 940              	.LFE39:
 941              		.size	check_update, .-check_update
 942              		.section	.text.pos_to_vel,"ax",%progbits
 943              		.align	2
 944              		.global	pos_to_vel
 945              		.code	16
 946              		.thumb_func
 947              		.type	pos_to_vel, %function
 948              	pos_to_vel:
 949              	.LFB40:
 235:.\main.c      **** 
 236:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 237:.\main.c      **** {
 950              		.loc 1 237 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 22


 951              		.cfi_startproc
 952 0000 90B5     		push	{r4, r7, lr}
 953              		.cfi_def_cfa_offset 12
 954              		.cfi_offset 4, -12
 955              		.cfi_offset 7, -8
 956              		.cfi_offset 14, -4
 957 0002 83B0     		sub	sp, sp, #12
 958              		.cfi_def_cfa_offset 24
 959 0004 00AF     		add	r7, sp, #0
 960              		.cfi_def_cfa_register 7
 961 0006 3960     		str	r1, [r7]
 962 0008 111C     		mov	r1, r2
 963 000a 1A1C     		mov	r2, r3
 964 000c FB1D     		add	r3, r7, #7
 965 000e 1870     		strb	r0, [r3]
 966 0010 BB1D     		add	r3, r7, #6
 967 0012 1970     		strb	r1, [r3]
 968 0014 3B1D     		add	r3, r7, #4
 969 0016 1A80     		strh	r2, [r3]
 238:.\main.c      ****     if(command >= 1000 && command < 1125)
 970              		.loc 1 238 0
 971 0018 3B1D     		add	r3, r7, #4
 972 001a 1A88     		ldrh	r2, [r3]
 973 001c 724B     		ldr	r3, .L65
 974 001e 9A42     		cmp	r2, r3
 975 0020 11D9     		bls	.L54
 976              		.loc 1 238 0 is_stmt 0 discriminator 1
 977 0022 3B1D     		add	r3, r7, #4
 978 0024 1A88     		ldrh	r2, [r3]
 979 0026 714B     		ldr	r3, .L65+4
 980 0028 9A42     		cmp	r2, r3
 981 002a 0CD8     		bhi	.L54
 239:.\main.c      ****     {
 240:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 982              		.loc 1 240 0 is_stmt 1
 983 002c FC1D     		add	r4, r7, #7
 984 002e 3868     		ldr	r0, [r7]
 985 0030 FB1D     		add	r3, r7, #7
 986 0032 1978     		ldrb	r1, [r3]
 987 0034 BB1D     		add	r3, r7, #6
 988 0036 1A78     		ldrb	r2, [r3]
 989 0038 6423     		mov	r3, #100
 990 003a 5B42     		neg	r3, r3
 991 003c FFF7FEFF 		bl	check_update
 992 0040 031C     		mov	r3, r0
 993 0042 2370     		strb	r3, [r4]
 994 0044 CAE0     		b	.L55
 995              	.L54:
 241:.\main.c      ****     }
 242:.\main.c      ****     else if(command >= 1125 && command < 1250)
 996              		.loc 1 242 0
 997 0046 3B1D     		add	r3, r7, #4
 998 0048 1A88     		ldrh	r2, [r3]
 999 004a 684B     		ldr	r3, .L65+4
 1000 004c 9A42     		cmp	r2, r3
 1001 004e 11D9     		bls	.L56
 1002              		.loc 1 242 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 23


 1003 0050 3B1D     		add	r3, r7, #4
 1004 0052 1A88     		ldrh	r2, [r3]
 1005 0054 664B     		ldr	r3, .L65+8
 1006 0056 9A42     		cmp	r2, r3
 1007 0058 0CD8     		bhi	.L56
 243:.\main.c      ****     {
 244:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1008              		.loc 1 244 0 is_stmt 1
 1009 005a FC1D     		add	r4, r7, #7
 1010 005c 3868     		ldr	r0, [r7]
 1011 005e FB1D     		add	r3, r7, #7
 1012 0060 1978     		ldrb	r1, [r3]
 1013 0062 BB1D     		add	r3, r7, #6
 1014 0064 1A78     		ldrb	r2, [r3]
 1015 0066 3223     		mov	r3, #50
 1016 0068 5B42     		neg	r3, r3
 1017 006a FFF7FEFF 		bl	check_update
 1018 006e 031C     		mov	r3, r0
 1019 0070 2370     		strb	r3, [r4]
 1020 0072 B3E0     		b	.L55
 1021              	.L56:
 245:.\main.c      ****     }
 246:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1022              		.loc 1 246 0
 1023 0074 3B1D     		add	r3, r7, #4
 1024 0076 1A88     		ldrh	r2, [r3]
 1025 0078 5D4B     		ldr	r3, .L65+8
 1026 007a 9A42     		cmp	r2, r3
 1027 007c 11D9     		bls	.L57
 1028              		.loc 1 246 0 is_stmt 0 discriminator 1
 1029 007e 3B1D     		add	r3, r7, #4
 1030 0080 1A88     		ldrh	r2, [r3]
 1031 0082 5C4B     		ldr	r3, .L65+12
 1032 0084 9A42     		cmp	r2, r3
 1033 0086 0CD8     		bhi	.L57
 247:.\main.c      ****     {
 248:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 1034              		.loc 1 248 0 is_stmt 1
 1035 0088 FC1D     		add	r4, r7, #7
 1036 008a 3868     		ldr	r0, [r7]
 1037 008c FB1D     		add	r3, r7, #7
 1038 008e 1978     		ldrb	r1, [r3]
 1039 0090 BB1D     		add	r3, r7, #6
 1040 0092 1A78     		ldrb	r2, [r3]
 1041 0094 0A23     		mov	r3, #10
 1042 0096 5B42     		neg	r3, r3
 1043 0098 FFF7FEFF 		bl	check_update
 1044 009c 031C     		mov	r3, r0
 1045 009e 2370     		strb	r3, [r4]
 1046 00a0 9CE0     		b	.L55
 1047              	.L57:
 249:.\main.c      ****     }
 250:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1048              		.loc 1 250 0
 1049 00a2 3B1D     		add	r3, r7, #4
 1050 00a4 1A88     		ldrh	r2, [r3]
 1051 00a6 534B     		ldr	r3, .L65+12
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 24


 1052 00a8 9A42     		cmp	r2, r3
 1053 00aa 11D9     		bls	.L58
 1054              		.loc 1 250 0 is_stmt 0 discriminator 1
 1055 00ac 3B1D     		add	r3, r7, #4
 1056 00ae 1A88     		ldrh	r2, [r3]
 1057 00b0 514B     		ldr	r3, .L65+16
 1058 00b2 9A42     		cmp	r2, r3
 1059 00b4 0CD8     		bhi	.L58
 251:.\main.c      ****     {
 252:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1060              		.loc 1 252 0 is_stmt 1
 1061 00b6 FC1D     		add	r4, r7, #7
 1062 00b8 3868     		ldr	r0, [r7]
 1063 00ba FB1D     		add	r3, r7, #7
 1064 00bc 1978     		ldrb	r1, [r3]
 1065 00be BB1D     		add	r3, r7, #6
 1066 00c0 1A78     		ldrb	r2, [r3]
 1067 00c2 0523     		mov	r3, #5
 1068 00c4 5B42     		neg	r3, r3
 1069 00c6 FFF7FEFF 		bl	check_update
 1070 00ca 031C     		mov	r3, r0
 1071 00cc 2370     		strb	r3, [r4]
 1072 00ce 85E0     		b	.L55
 1073              	.L58:
 253:.\main.c      ****     }
 254:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1074              		.loc 1 254 0
 1075 00d0 3B1D     		add	r3, r7, #4
 1076 00d2 1A88     		ldrh	r2, [r3]
 1077 00d4 494B     		ldr	r3, .L65+20
 1078 00d6 9A42     		cmp	r2, r3
 1079 00d8 10D8     		bhi	.L59
 1080              		.loc 1 254 0 is_stmt 0 discriminator 1
 1081 00da 3B1D     		add	r3, r7, #4
 1082 00dc 1A88     		ldrh	r2, [r3]
 1083 00de 464B     		ldr	r3, .L65+16
 1084 00e0 9A42     		cmp	r2, r3
 1085 00e2 0BD9     		bls	.L59
 255:.\main.c      ****     {
 256:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1086              		.loc 1 256 0 is_stmt 1
 1087 00e4 FC1D     		add	r4, r7, #7
 1088 00e6 FB1D     		add	r3, r7, #7
 1089 00e8 1A78     		ldrb	r2, [r3]
 1090 00ea BB1D     		add	r3, r7, #6
 1091 00ec 1B78     		ldrb	r3, [r3]
 1092 00ee 101C     		mov	r0, r2
 1093 00f0 191C     		mov	r1, r3
 1094 00f2 FFF7FEFF 		bl	maintain_array
 1095 00f6 031C     		mov	r3, r0
 1096 00f8 2370     		strb	r3, [r4]
 1097 00fa 6FE0     		b	.L55
 1098              	.L59:
 257:.\main.c      ****     }
 258:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1099              		.loc 1 258 0
 1100 00fc 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 25


 1101 00fe 1A88     		ldrh	r2, [r3]
 1102 0100 3E4B     		ldr	r3, .L65+20
 1103 0102 9A42     		cmp	r2, r3
 1104 0104 13D9     		bls	.L60
 1105              		.loc 1 258 0 is_stmt 0 discriminator 1
 1106 0106 3B1D     		add	r3, r7, #4
 1107 0108 1A88     		ldrh	r2, [r3]
 1108 010a 3D4B     		ldr	r3, .L65+24
 1109 010c 9A42     		cmp	r2, r3
 1110 010e 0ED8     		bhi	.L60
 259:.\main.c      ****     {
 260:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1111              		.loc 1 260 0 is_stmt 1
 1112 0110 FC1D     		add	r4, r7, #7
 1113 0112 3968     		ldr	r1, [r7]
 1114 0114 FB1D     		add	r3, r7, #7
 1115 0116 1A78     		ldrb	r2, [r3]
 1116 0118 BB1D     		add	r3, r7, #6
 1117 011a 1B78     		ldrb	r3, [r3]
 1118 011c 081C     		mov	r0, r1
 1119 011e 111C     		mov	r1, r2
 1120 0120 1A1C     		mov	r2, r3
 1121 0122 0523     		mov	r3, #5
 1122 0124 FFF7FEFF 		bl	check_update
 1123 0128 031C     		mov	r3, r0
 1124 012a 2370     		strb	r3, [r4]
 1125 012c 56E0     		b	.L55
 1126              	.L60:
 261:.\main.c      ****     }
 262:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1127              		.loc 1 262 0
 1128 012e 3B1D     		add	r3, r7, #4
 1129 0130 1A88     		ldrh	r2, [r3]
 1130 0132 334B     		ldr	r3, .L65+24
 1131 0134 9A42     		cmp	r2, r3
 1132 0136 13D9     		bls	.L61
 1133              		.loc 1 262 0 is_stmt 0 discriminator 1
 1134 0138 3B1D     		add	r3, r7, #4
 1135 013a 1A88     		ldrh	r2, [r3]
 1136 013c 314B     		ldr	r3, .L65+28
 1137 013e 9A42     		cmp	r2, r3
 1138 0140 0ED8     		bhi	.L61
 263:.\main.c      ****     {
 264:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1139              		.loc 1 264 0 is_stmt 1
 1140 0142 FC1D     		add	r4, r7, #7
 1141 0144 3968     		ldr	r1, [r7]
 1142 0146 FB1D     		add	r3, r7, #7
 1143 0148 1A78     		ldrb	r2, [r3]
 1144 014a BB1D     		add	r3, r7, #6
 1145 014c 1B78     		ldrb	r3, [r3]
 1146 014e 081C     		mov	r0, r1
 1147 0150 111C     		mov	r1, r2
 1148 0152 1A1C     		mov	r2, r3
 1149 0154 0A23     		mov	r3, #10
 1150 0156 FFF7FEFF 		bl	check_update
 1151 015a 031C     		mov	r3, r0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 26


 1152 015c 2370     		strb	r3, [r4]
 1153 015e 3DE0     		b	.L55
 1154              	.L61:
 265:.\main.c      ****     }
 266:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1155              		.loc 1 266 0
 1156 0160 3B1D     		add	r3, r7, #4
 1157 0162 1A88     		ldrh	r2, [r3]
 1158 0164 274B     		ldr	r3, .L65+28
 1159 0166 9A42     		cmp	r2, r3
 1160 0168 13D9     		bls	.L62
 1161              		.loc 1 266 0 is_stmt 0 discriminator 1
 1162 016a 3B1D     		add	r3, r7, #4
 1163 016c 1A88     		ldrh	r2, [r3]
 1164 016e 264B     		ldr	r3, .L65+32
 1165 0170 9A42     		cmp	r2, r3
 1166 0172 0ED8     		bhi	.L62
 267:.\main.c      ****     {
 268:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1167              		.loc 1 268 0 is_stmt 1
 1168 0174 FC1D     		add	r4, r7, #7
 1169 0176 3968     		ldr	r1, [r7]
 1170 0178 FB1D     		add	r3, r7, #7
 1171 017a 1A78     		ldrb	r2, [r3]
 1172 017c BB1D     		add	r3, r7, #6
 1173 017e 1B78     		ldrb	r3, [r3]
 1174 0180 081C     		mov	r0, r1
 1175 0182 111C     		mov	r1, r2
 1176 0184 1A1C     		mov	r2, r3
 1177 0186 3223     		mov	r3, #50
 1178 0188 FFF7FEFF 		bl	check_update
 1179 018c 031C     		mov	r3, r0
 1180 018e 2370     		strb	r3, [r4]
 1181 0190 24E0     		b	.L55
 1182              	.L62:
 269:.\main.c      ****     }
 270:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1183              		.loc 1 270 0
 1184 0192 3B1D     		add	r3, r7, #4
 1185 0194 1A88     		ldrh	r2, [r3]
 1186 0196 1C4B     		ldr	r3, .L65+32
 1187 0198 9A42     		cmp	r2, r3
 1188 019a 14D9     		bls	.L63
 1189              		.loc 1 270 0 is_stmt 0 discriminator 1
 1190 019c 3B1D     		add	r3, r7, #4
 1191 019e 1A88     		ldrh	r2, [r3]
 1192 01a0 FA23     		mov	r3, #250
 1193 01a2 DB00     		lsl	r3, r3, #3
 1194 01a4 9A42     		cmp	r2, r3
 1195 01a6 0ED8     		bhi	.L63
 271:.\main.c      ****     {
 272:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1196              		.loc 1 272 0 is_stmt 1
 1197 01a8 FC1D     		add	r4, r7, #7
 1198 01aa 3968     		ldr	r1, [r7]
 1199 01ac FB1D     		add	r3, r7, #7
 1200 01ae 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 27


 1201 01b0 BB1D     		add	r3, r7, #6
 1202 01b2 1B78     		ldrb	r3, [r3]
 1203 01b4 081C     		mov	r0, r1
 1204 01b6 111C     		mov	r1, r2
 1205 01b8 1A1C     		mov	r2, r3
 1206 01ba 6423     		mov	r3, #100
 1207 01bc FFF7FEFF 		bl	check_update
 1208 01c0 031C     		mov	r3, r0
 1209 01c2 2370     		strb	r3, [r4]
 1210 01c4 0AE0     		b	.L55
 1211              	.L63:
 273:.\main.c      ****     }
 274:.\main.c      ****     else
 275:.\main.c      ****     {
 276:.\main.c      ****         //throw error
 277:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1212              		.loc 1 277 0
 1213 01c6 FC1D     		add	r4, r7, #7
 1214 01c8 FB1D     		add	r3, r7, #7
 1215 01ca 1A78     		ldrb	r2, [r3]
 1216 01cc BB1D     		add	r3, r7, #6
 1217 01ce 1B78     		ldrb	r3, [r3]
 1218 01d0 101C     		mov	r0, r2
 1219 01d2 191C     		mov	r1, r3
 1220 01d4 FFF7FEFF 		bl	maintain_array
 1221 01d8 031C     		mov	r3, r0
 1222 01da 2370     		strb	r3, [r4]
 1223              	.L55:
 278:.\main.c      ****     }
 279:.\main.c      ****     return cur_pos;
 1224              		.loc 1 279 0
 1225 01dc FB1D     		add	r3, r7, #7
 1226 01de 1B78     		ldrb	r3, [r3]
 280:.\main.c      **** }
 1227              		.loc 1 280 0
 1228 01e0 181C     		mov	r0, r3
 1229 01e2 BD46     		mov	sp, r7
 1230 01e4 03B0     		add	sp, sp, #12
 1231              		@ sp needed
 1232 01e6 90BD     		pop	{r4, r7, pc}
 1233              	.L66:
 1234              		.align	2
 1235              	.L65:
 1236 01e8 E7030000 		.word	999
 1237 01ec 64040000 		.word	1124
 1238 01f0 E1040000 		.word	1249
 1239 01f4 5E050000 		.word	1374
 1240 01f8 D1050000 		.word	1489
 1241 01fc E6050000 		.word	1510
 1242 0200 59060000 		.word	1625
 1243 0204 D6060000 		.word	1750
 1244 0208 53070000 		.word	1875
 1245              		.cfi_endproc
 1246              	.LFE40:
 1247              		.size	pos_to_vel, .-pos_to_vel
 1248              		.section	.text.make_command,"ax",%progbits
 1249              		.align	2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 28


 1250              		.global	make_command
 1251              		.code	16
 1252              		.thumb_func
 1253              		.type	make_command, %function
 1254              	make_command:
 1255              	.LFB41:
 281:.\main.c      **** 
 282:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 283:.\main.c      **** {
 1256              		.loc 1 283 0
 1257              		.cfi_startproc
 1258 0000 80B5     		push	{r7, lr}
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 7, -8
 1261              		.cfi_offset 14, -4
 1262 0002 84B0     		sub	sp, sp, #16
 1263              		.cfi_def_cfa_offset 24
 1264 0004 00AF     		add	r7, sp, #0
 1265              		.cfi_def_cfa_register 7
 1266 0006 7860     		str	r0, [r7, #4]
 1267 0008 FB1C     		add	r3, r7, #3
 1268 000a 1970     		strb	r1, [r3]
 1269 000c BB1C     		add	r3, r7, #2
 1270 000e 1A70     		strb	r2, [r3]
 284:.\main.c      ****     uint16 command;
 285:.\main.c      ****     int16 temp1;
 286:.\main.c      ****     int16 temp2;
 287:.\main.c      ****     int16 temp3;
 288:.\main.c      ****     
 289:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1271              		.loc 1 289 0
 1272 0010 FB1C     		add	r3, r7, #3
 1273 0012 1B78     		ldrb	r3, [r3]
 1274 0014 7A68     		ldr	r2, [r7, #4]
 1275 0016 D318     		add	r3, r2, r3
 1276 0018 1B78     		ldrb	r3, [r3]
 1277 001a 5BB2     		sxtb	r3, r3
 1278 001c 1A02     		lsl	r2, r3, #8
 1279 001e 3B1C     		mov	r3, r7
 1280 0020 0E33     		add	r3, r3, #14
 1281 0022 1A80     		strh	r2, [r3]
 290:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1282              		.loc 1 290 0
 1283 0024 BB1C     		add	r3, r7, #2
 1284 0026 1B78     		ldrb	r3, [r3]
 1285 0028 7A68     		ldr	r2, [r7, #4]
 1286 002a D318     		add	r3, r2, r3
 1287 002c 1B78     		ldrb	r3, [r3]
 1288 002e 5BB2     		sxtb	r3, r3
 1289 0030 9AB2     		uxth	r2, r3
 1290 0032 3B1C     		mov	r3, r7
 1291 0034 0C33     		add	r3, r3, #12
 1292 0036 111C     		add	r1, r2, #0
 1293 0038 FF22     		mov	r2, #255
 1294 003a 0A40     		and	r2, r1
 1295 003c 1A80     		strh	r2, [r3]
 291:.\main.c      ****     temp3 = temp1 | temp2;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 29


 1296              		.loc 1 291 0
 1297 003e 3B1C     		mov	r3, r7
 1298 0040 0A33     		add	r3, r3, #10
 1299 0042 391C     		mov	r1, r7
 1300 0044 0E31     		add	r1, r1, #14
 1301 0046 3A1C     		mov	r2, r7
 1302 0048 0C32     		add	r2, r2, #12
 1303 004a 0988     		ldrh	r1, [r1]
 1304 004c 1288     		ldrh	r2, [r2]
 1305 004e 0A43     		orr	r2, r1
 1306 0050 1A80     		strh	r2, [r3]
 292:.\main.c      ****     command = (temp3/2) + 1500;
 1307              		.loc 1 292 0
 1308 0052 3B1C     		mov	r3, r7
 1309 0054 0A33     		add	r3, r3, #10
 1310 0056 0021     		mov	r1, #0
 1311 0058 5B5E     		ldrsh	r3, [r3, r1]
 1312 005a 002B     		cmp	r3, #0
 1313 005c 00DA     		bge	.L68
 1314 005e 0133     		add	r3, r3, #1
 1315              	.L68:
 1316 0060 5B10     		asr	r3, r3, #1
 1317 0062 9BB2     		uxth	r3, r3
 1318 0064 9AB2     		uxth	r2, r3
 1319 0066 3B1C     		mov	r3, r7
 1320 0068 0833     		add	r3, r3, #8
 1321 006a 0549     		ldr	r1, .L70
 1322 006c 5218     		add	r2, r2, r1
 1323 006e 1A80     		strh	r2, [r3]
 293:.\main.c      ****     return command;
 1324              		.loc 1 293 0
 1325 0070 3B1C     		mov	r3, r7
 1326 0072 0833     		add	r3, r3, #8
 1327 0074 1B88     		ldrh	r3, [r3]
 294:.\main.c      **** }
 1328              		.loc 1 294 0
 1329 0076 181C     		mov	r0, r3
 1330 0078 BD46     		mov	sp, r7
 1331 007a 04B0     		add	sp, sp, #16
 1332              		@ sp needed
 1333 007c 80BD     		pop	{r7, pc}
 1334              	.L71:
 1335 007e C046     		.align	2
 1336              	.L70:
 1337 0080 DC050000 		.word	1500
 1338              		.cfi_endproc
 1339              	.LFE41:
 1340              		.size	make_command, .-make_command
 1341              		.section	.text.potFeedback,"ax",%progbits
 1342              		.align	2
 1343              		.global	potFeedback
 1344              		.code	16
 1345              		.thumb_func
 1346              		.type	potFeedback, %function
 1347              	potFeedback:
 1348              	.LFB42:
 295:.\main.c      **** 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 30


 296:.\main.c      **** uint16 potFeedback(uint32 channel)
 297:.\main.c      **** {
 1349              		.loc 1 297 0
 1350              		.cfi_startproc
 1351 0000 80B5     		push	{r7, lr}
 1352              		.cfi_def_cfa_offset 8
 1353              		.cfi_offset 7, -8
 1354              		.cfi_offset 14, -4
 1355 0002 84B0     		sub	sp, sp, #16
 1356              		.cfi_def_cfa_offset 24
 1357 0004 00AF     		add	r7, sp, #0
 1358              		.cfi_def_cfa_register 7
 1359 0006 7860     		str	r0, [r7, #4]
 298:.\main.c      ****     //TODO: uncomment this section
 299:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1360              		.loc 1 299 0
 1361 0008 7B68     		ldr	r3, [r7, #4]
 1362 000a 181C     		mov	r0, r3
 1363 000c FFF7FEFF 		bl	ADC_GetResult16
 1364 0010 031C     		mov	r3, r0
 1365 0012 1A1C     		mov	r2, r3
 1366 0014 3B1C     		mov	r3, r7
 1367 0016 0E33     		add	r3, r3, #14
 1368 0018 1A80     		strh	r2, [r3]
 300:.\main.c      ****     //uint16 feedback = 500;
 301:.\main.c      ****     return feedback;
 1369              		.loc 1 301 0
 1370 001a 3B1C     		mov	r3, r7
 1371 001c 0E33     		add	r3, r3, #14
 1372 001e 1B88     		ldrh	r3, [r3]
 302:.\main.c      **** }
 1373              		.loc 1 302 0
 1374 0020 181C     		mov	r0, r3
 1375 0022 BD46     		mov	sp, r7
 1376 0024 04B0     		add	sp, sp, #16
 1377              		@ sp needed
 1378 0026 80BD     		pop	{r7, pc}
 1379              		.cfi_endproc
 1380              	.LFE42:
 1381              		.size	potFeedback, .-potFeedback
 1382              		.section	.text.send_packet,"ax",%progbits
 1383              		.align	2
 1384              		.global	send_packet
 1385              		.code	16
 1386              		.thumb_func
 1387              		.type	send_packet, %function
 1388              	send_packet:
 1389              	.LFB43:
 303:.\main.c      **** 
 304:.\main.c      **** void send_packet(uint8 heart_beat)
 305:.\main.c      **** {
 1390              		.loc 1 305 0
 1391              		.cfi_startproc
 1392 0000 80B5     		push	{r7, lr}
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 31


 1396 0002 82B0     		sub	sp, sp, #8
 1397              		.cfi_def_cfa_offset 16
 1398 0004 00AF     		add	r7, sp, #0
 1399              		.cfi_def_cfa_register 7
 1400 0006 021C     		mov	r2, r0
 1401 0008 FB1D     		add	r3, r7, #7
 1402 000a 1A70     		strb	r2, [r3]
 306:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 307:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 308:.\main.c      ****     //TODO define system state
 309:.\main.c      ****     //send packet via serial to wiznet
 310:.\main.c      ****     
 311:.\main.c      ****     if(heart_beat){
 1403              		.loc 1 311 0
 1404 000c FB1D     		add	r3, r7, #7
 1405 000e 1B78     		ldrb	r3, [r3]
 1406 0010 002B     		cmp	r3, #0
 1407 0012 32D0     		beq	.L75
 312:.\main.c      ****         feedback_array[0] = 7;
 1408              		.loc 1 312 0
 1409 0014 3A4B     		ldr	r3, .L78
 1410 0016 0722     		mov	r2, #7
 1411 0018 1A70     		strb	r2, [r3]
 313:.\main.c      ****         feedback_array[1] = 7;
 1412              		.loc 1 313 0
 1413 001a 394B     		ldr	r3, .L78
 1414 001c 0722     		mov	r2, #7
 1415 001e 5A70     		strb	r2, [r3, #1]
 314:.\main.c      ****         feedback_array[2] = 7;
 1416              		.loc 1 314 0
 1417 0020 374B     		ldr	r3, .L78
 1418 0022 0722     		mov	r2, #7
 1419 0024 9A70     		strb	r2, [r3, #2]
 315:.\main.c      ****         feedback_array[3] = 7;
 1420              		.loc 1 315 0
 1421 0026 364B     		ldr	r3, .L78
 1422 0028 0722     		mov	r2, #7
 1423 002a DA70     		strb	r2, [r3, #3]
 316:.\main.c      ****         feedback_array[4] = 7;
 1424              		.loc 1 316 0
 1425 002c 344B     		ldr	r3, .L78
 1426 002e 0722     		mov	r2, #7
 1427 0030 1A71     		strb	r2, [r3, #4]
 317:.\main.c      ****         feedback_array[5] = 7;
 1428              		.loc 1 317 0
 1429 0032 334B     		ldr	r3, .L78
 1430 0034 0722     		mov	r2, #7
 1431 0036 5A71     		strb	r2, [r3, #5]
 318:.\main.c      ****         feedback_array[6] = 7;
 1432              		.loc 1 318 0
 1433 0038 314B     		ldr	r3, .L78
 1434 003a 0722     		mov	r2, #7
 1435 003c 9A71     		strb	r2, [r3, #6]
 319:.\main.c      ****         feedback_array[7] = 7;
 1436              		.loc 1 319 0
 1437 003e 304B     		ldr	r3, .L78
 1438 0040 0722     		mov	r2, #7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 32


 1439 0042 DA71     		strb	r2, [r3, #7]
 320:.\main.c      ****         feedback_array[8] = 7;
 1440              		.loc 1 320 0
 1441 0044 2E4B     		ldr	r3, .L78
 1442 0046 0722     		mov	r2, #7
 1443 0048 1A72     		strb	r2, [r3, #8]
 321:.\main.c      ****         feedback_array[9] = 7;
 1444              		.loc 1 321 0
 1445 004a 2D4B     		ldr	r3, .L78
 1446 004c 0722     		mov	r2, #7
 1447 004e 5A72     		strb	r2, [r3, #9]
 322:.\main.c      ****         feedback_array[10] = 7;
 1448              		.loc 1 322 0
 1449 0050 2B4B     		ldr	r3, .L78
 1450 0052 0722     		mov	r2, #7
 1451 0054 9A72     		strb	r2, [r3, #10]
 323:.\main.c      ****         feedback_array[11] = 7;
 1452              		.loc 1 323 0
 1453 0056 2A4B     		ldr	r3, .L78
 1454 0058 0722     		mov	r2, #7
 1455 005a DA72     		strb	r2, [r3, #11]
 324:.\main.c      ****         feedback_array[12] = 7;
 1456              		.loc 1 324 0
 1457 005c 284B     		ldr	r3, .L78
 1458 005e 0722     		mov	r2, #7
 1459 0060 1A73     		strb	r2, [r3, #12]
 325:.\main.c      ****         feedback_array[13] = 0xee;
 1460              		.loc 1 325 0
 1461 0062 274B     		ldr	r3, .L78
 1462 0064 EE22     		mov	r2, #238
 1463 0066 5A73     		strb	r2, [r3, #13]
 326:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1464              		.loc 1 326 0
 1465 0068 254B     		ldr	r3, .L78
 1466 006a 181C     		mov	r0, r3
 1467 006c 0E21     		mov	r1, #14
 1468 006e FFF7FEFF 		bl	wiznetWriteUdpFrame
 327:.\main.c      ****         LED_Write(1);
 1469              		.loc 1 327 0
 1470 0072 0120     		mov	r0, #1
 1471 0074 FFF7FEFF 		bl	LED_Write
 1472 0078 31E0     		b	.L76
 1473              	.L75:
 328:.\main.c      ****     }
 329:.\main.c      ****     else{
 330:.\main.c      ****         feedback_array[0] = 7;      // ph value
 1474              		.loc 1 330 0
 1475 007a 214B     		ldr	r3, .L78
 1476 007c 0722     		mov	r2, #7
 1477 007e 1A70     		strb	r2, [r3]
 331:.\main.c      ****         feedback_array[1] = 7;      // humidity
 1478              		.loc 1 331 0
 1479 0080 1F4B     		ldr	r3, .L78
 1480 0082 0722     		mov	r2, #7
 1481 0084 5A70     		strb	r2, [r3, #1]
 332:.\main.c      ****         feedback_array[2] = 7;      // wrist rotate temperature
 1482              		.loc 1 332 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 33


 1483 0086 1E4B     		ldr	r3, .L78
 1484 0088 0722     		mov	r2, #7
 1485 008a 9A70     		strb	r2, [r3, #2]
 333:.\main.c      ****         feedback_array[3] = 7;      // wrist rotate position
 1486              		.loc 1 333 0
 1487 008c 1C4B     		ldr	r3, .L78
 1488 008e 0722     		mov	r2, #7
 1489 0090 DA70     		strb	r2, [r3, #3]
 334:.\main.c      ****         feedback_array[4] = 7;      // wrist rotate error status
 1490              		.loc 1 334 0
 1491 0092 1B4B     		ldr	r3, .L78
 1492 0094 0722     		mov	r2, #7
 1493 0096 1A71     		strb	r2, [r3, #4]
 335:.\main.c      ****         feedback_array[5] = 7;      // wrist tilt temperature
 1494              		.loc 1 335 0
 1495 0098 194B     		ldr	r3, .L78
 1496 009a 0722     		mov	r2, #7
 1497 009c 5A71     		strb	r2, [r3, #5]
 336:.\main.c      ****         feedback_array[6] = 7;      // wrist tilt position
 1498              		.loc 1 336 0
 1499 009e 184B     		ldr	r3, .L78
 1500 00a0 0722     		mov	r2, #7
 1501 00a2 9A71     		strb	r2, [r3, #6]
 337:.\main.c      ****         feedback_array[7] = 7;      // wrist tilt error statue
 1502              		.loc 1 337 0
 1503 00a4 164B     		ldr	r3, .L78
 1504 00a6 0722     		mov	r2, #7
 1505 00a8 DA71     		strb	r2, [r3, #7]
 338:.\main.c      ****         feedback_array[8] = 7;      // elbow stop switch count
 1506              		.loc 1 338 0
 1507 00aa 154B     		ldr	r3, .L78
 1508 00ac 0722     		mov	r2, #7
 1509 00ae 1A72     		strb	r2, [r3, #8]
 339:.\main.c      ****         feedback_array[9] = 7;      // elbow pot value
 1510              		.loc 1 339 0
 1511 00b0 134B     		ldr	r3, .L78
 1512 00b2 0722     		mov	r2, #7
 1513 00b4 5A72     		strb	r2, [r3, #9]
 340:.\main.c      ****         feedback_array[10] = 7;      // shoulder stop swtich count
 1514              		.loc 1 340 0
 1515 00b6 124B     		ldr	r3, .L78
 1516 00b8 0722     		mov	r2, #7
 1517 00ba 9A72     		strb	r2, [r3, #10]
 341:.\main.c      ****         feedback_array[11] = 7;      // shoulder pot value
 1518              		.loc 1 341 0
 1519 00bc 104B     		ldr	r3, .L78
 1520 00be 0722     		mov	r2, #7
 1521 00c0 DA72     		strb	r2, [r3, #11]
 342:.\main.c      ****         feedback_array[12] = 7;      // turret error status
 1522              		.loc 1 342 0
 1523 00c2 0F4B     		ldr	r3, .L78
 1524 00c4 0722     		mov	r2, #7
 1525 00c6 1A73     		strb	r2, [r3, #12]
 343:.\main.c      ****         feedback_array[13] = 0xff;       
 1526              		.loc 1 343 0
 1527 00c8 0D4B     		ldr	r3, .L78
 1528 00ca FF22     		mov	r2, #255
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 34


 1529 00cc 5A73     		strb	r2, [r3, #13]
 344:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1530              		.loc 1 344 0
 1531 00ce 0C4B     		ldr	r3, .L78
 1532 00d0 181C     		mov	r0, r3
 1533 00d2 0E21     		mov	r1, #14
 1534 00d4 FFF7FEFF 		bl	wiznetWriteUdpFrame
 345:.\main.c      ****         LED_Write(1);
 1535              		.loc 1 345 0
 1536 00d8 0120     		mov	r0, #1
 1537 00da FFF7FEFF 		bl	LED_Write
 1538              	.L76:
 346:.\main.c      ****     }
 347:.\main.c      ****     wiznetSend();
 1539              		.loc 1 347 0
 1540 00de FFF7FEFF 		bl	wiznetSend
 348:.\main.c      ****     while(WIZ_INT_Read() == 1);
 1541              		.loc 1 348 0
 1542 00e2 C046     		mov	r8, r8
 1543              	.L77:
 1544              		.loc 1 348 0 is_stmt 0 discriminator 1
 1545 00e4 FFF7FEFF 		bl	WIZ_INT_Read
 1546 00e8 031C     		mov	r3, r0
 1547 00ea 012B     		cmp	r3, #1
 1548 00ec FAD0     		beq	.L77
 349:.\main.c      ****     wiznetClearInterrupts();
 1549              		.loc 1 349 0 is_stmt 1
 1550 00ee FFF7FEFF 		bl	wiznetClearInterrupts
 350:.\main.c      ****     LED_Write(0);    
 1551              		.loc 1 350 0
 1552 00f2 0020     		mov	r0, #0
 1553 00f4 FFF7FEFF 		bl	LED_Write
 351:.\main.c      **** }
 1554              		.loc 1 351 0
 1555 00f8 BD46     		mov	sp, r7
 1556 00fa 02B0     		add	sp, sp, #8
 1557              		@ sp needed
 1558 00fc 80BD     		pop	{r7, pc}
 1559              	.L79:
 1560 00fe C046     		.align	2
 1561              	.L78:
 1562 0100 00000000 		.word	feedback_array
 1563              		.cfi_endproc
 1564              	.LFE43:
 1565              		.size	send_packet, .-send_packet
 1566              		.section	.text.fill_data_array,"ax",%progbits
 1567              		.align	2
 1568              		.global	fill_data_array
 1569              		.code	16
 1570              		.thumb_func
 1571              		.type	fill_data_array, %function
 1572              	fill_data_array:
 1573              	.LFB44:
 352:.\main.c      **** 
 353:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 354:.\main.c      **** void fill_data_array()
 355:.\main.c      **** {
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 35


 1574              		.loc 1 355 0
 1575              		.cfi_startproc
 1576 0000 80B5     		push	{r7, lr}
 1577              		.cfi_def_cfa_offset 8
 1578              		.cfi_offset 7, -8
 1579              		.cfi_offset 14, -4
 1580 0002 00AF     		add	r7, sp, #0
 1581              		.cfi_def_cfa_register 7
 356:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1582              		.loc 1 356 0
 1583 0004 034B     		ldr	r3, .L81
 1584 0006 181C     		mov	r0, r3
 1585 0008 1621     		mov	r1, #22
 1586 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 357:.\main.c      **** //    uint8 i = 0;
 358:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 359:.\main.c      **** //    {
 360:.\main.c      **** //        data_array[i] = test_array[i];
 361:.\main.c      **** //    }
 362:.\main.c      **** }
 1587              		.loc 1 362 0
 1588 000e BD46     		mov	sp, r7
 1589              		@ sp needed
 1590 0010 80BD     		pop	{r7, pc}
 1591              	.L82:
 1592 0012 C046     		.align	2
 1593              	.L81:
 1594 0014 00000000 		.word	data_array
 1595              		.cfi_endproc
 1596              	.LFE44:
 1597              		.size	fill_data_array, .-fill_data_array
 1598              		.section	.text.ServoGoalPosition,"ax",%progbits
 1599              		.align	2
 1600              		.global	ServoGoalPosition
 1601              		.code	16
 1602              		.thumb_func
 1603              		.type	ServoGoalPosition, %function
 1604              	ServoGoalPosition:
 1605              	.LFB45:
 363:.\main.c      **** 
 364:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 365:.\main.c      **** {
 1606              		.loc 1 365 0
 1607              		.cfi_startproc
 1608 0000 80B5     		push	{r7, lr}
 1609              		.cfi_def_cfa_offset 8
 1610              		.cfi_offset 7, -8
 1611              		.cfi_offset 14, -4
 1612 0002 86B0     		sub	sp, sp, #24
 1613              		.cfi_def_cfa_offset 32
 1614 0004 00AF     		add	r7, sp, #0
 1615              		.cfi_def_cfa_register 7
 1616 0006 0A1C     		mov	r2, r1
 1617 0008 FB1D     		add	r3, r7, #7
 1618 000a 011C     		add	r1, r0, #0
 1619 000c 1970     		strb	r1, [r3]
 1620 000e 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 36


 1621 0010 1A80     		strh	r2, [r3]
 366:.\main.c      ****     uint8 array[9];
 367:.\main.c      ****     
 368:.\main.c      ****     array[0] = 0xFF;
 1622              		.loc 1 368 0
 1623 0012 3B1C     		mov	r3, r7
 1624 0014 0C33     		add	r3, r3, #12
 1625 0016 FF22     		mov	r2, #255
 1626 0018 1A70     		strb	r2, [r3]
 369:.\main.c      ****     array[1] = 0xFF;
 1627              		.loc 1 369 0
 1628 001a 3B1C     		mov	r3, r7
 1629 001c 0C33     		add	r3, r3, #12
 1630 001e FF22     		mov	r2, #255
 1631 0020 5A70     		strb	r2, [r3, #1]
 370:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1632              		.loc 1 370 0
 1633 0022 3B1C     		mov	r3, r7
 1634 0024 0C33     		add	r3, r3, #12
 1635 0026 FA1D     		add	r2, r7, #7
 1636 0028 1278     		ldrb	r2, [r2]
 1637 002a 9A70     		strb	r2, [r3, #2]
 371:.\main.c      ****     array[3] = 0x05;
 1638              		.loc 1 371 0
 1639 002c 3B1C     		mov	r3, r7
 1640 002e 0C33     		add	r3, r3, #12
 1641 0030 0522     		mov	r2, #5
 1642 0032 DA70     		strb	r2, [r3, #3]
 372:.\main.c      ****     array[4] = 0x03; //write instruction
 1643              		.loc 1 372 0
 1644 0034 3B1C     		mov	r3, r7
 1645 0036 0C33     		add	r3, r3, #12
 1646 0038 0322     		mov	r2, #3
 1647 003a 1A71     		strb	r2, [r3, #4]
 373:.\main.c      ****     array[5] = 0x1E;
 1648              		.loc 1 373 0
 1649 003c 3B1C     		mov	r3, r7
 1650 003e 0C33     		add	r3, r3, #12
 1651 0040 1E22     		mov	r2, #30
 1652 0042 5A71     		strb	r2, [r3, #5]
 374:.\main.c      ****     array[6] = position;
 1653              		.loc 1 374 0
 1654 0044 3B1D     		add	r3, r7, #4
 1655 0046 1B88     		ldrh	r3, [r3]
 1656 0048 DAB2     		uxtb	r2, r3
 1657 004a 3B1C     		mov	r3, r7
 1658 004c 0C33     		add	r3, r3, #12
 1659 004e 9A71     		strb	r2, [r3, #6]
 375:.\main.c      ****     array[7] = position >> 8;
 1660              		.loc 1 375 0
 1661 0050 3B1D     		add	r3, r7, #4
 1662 0052 1B88     		ldrh	r3, [r3]
 1663 0054 1B0A     		lsr	r3, r3, #8
 1664 0056 9BB2     		uxth	r3, r3
 1665 0058 DAB2     		uxtb	r2, r3
 1666 005a 3B1C     		mov	r3, r7
 1667 005c 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 37


 1668 005e DA71     		strb	r2, [r3, #7]
 376:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1669              		.loc 1 376 0
 1670 0060 3B1C     		mov	r3, r7
 1671 0062 0C33     		add	r3, r3, #12
 1672 0064 9A79     		ldrb	r2, [r3, #6]
 1673 0066 FB1D     		add	r3, r7, #7
 1674 0068 1B78     		ldrb	r3, [r3]
 1675 006a D318     		add	r3, r2, r3
 1676 006c DAB2     		uxtb	r2, r3
 1677 006e 3B1C     		mov	r3, r7
 1678 0070 0C33     		add	r3, r3, #12
 1679 0072 DB79     		ldrb	r3, [r3, #7]
 1680 0074 D318     		add	r3, r2, r3
 1681 0076 DBB2     		uxtb	r3, r3
 1682 0078 2633     		add	r3, r3, #38
 1683 007a DBB2     		uxtb	r3, r3
 1684 007c DB43     		mvn	r3, r3
 1685 007e DAB2     		uxtb	r2, r3
 1686 0080 3B1C     		mov	r3, r7
 1687 0082 0C33     		add	r3, r3, #12
 1688 0084 1A72     		strb	r2, [r3, #8]
 377:.\main.c      ****     
 378:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1689              		.loc 1 378 0
 1690 0086 3B1C     		mov	r3, r7
 1691 0088 0C33     		add	r3, r3, #12
 1692 008a 181C     		mov	r0, r3
 1693 008c 0921     		mov	r1, #9
 1694 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 379:.\main.c      **** }
 1695              		.loc 1 379 0
 1696 0092 BD46     		mov	sp, r7
 1697 0094 06B0     		add	sp, sp, #24
 1698              		@ sp needed
 1699 0096 80BD     		pop	{r7, pc}
 1700              		.cfi_endproc
 1701              	.LFE45:
 1702              		.size	ServoGoalPosition, .-ServoGoalPosition
 1703              		.section	.text.SetServoTorque,"ax",%progbits
 1704              		.align	2
 1705              		.global	SetServoTorque
 1706              		.code	16
 1707              		.thumb_func
 1708              		.type	SetServoTorque, %function
 1709              	SetServoTorque:
 1710              	.LFB46:
 380:.\main.c      **** 
 381:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 382:.\main.c      **** {
 1711              		.loc 1 382 0
 1712              		.cfi_startproc
 1713 0000 80B5     		push	{r7, lr}
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 7, -8
 1716              		.cfi_offset 14, -4
 1717 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 38


 1718              		.cfi_def_cfa_offset 32
 1719 0004 00AF     		add	r7, sp, #0
 1720              		.cfi_def_cfa_register 7
 1721 0006 0A1C     		mov	r2, r1
 1722 0008 FB1D     		add	r3, r7, #7
 1723 000a 011C     		add	r1, r0, #0
 1724 000c 1970     		strb	r1, [r3]
 1725 000e 3B1D     		add	r3, r7, #4
 1726 0010 1A80     		strh	r2, [r3]
 383:.\main.c      ****     uint8 array[9];
 384:.\main.c      ****     
 385:.\main.c      ****     array[0] = 0xFF;
 1727              		.loc 1 385 0
 1728 0012 3B1C     		mov	r3, r7
 1729 0014 0C33     		add	r3, r3, #12
 1730 0016 FF22     		mov	r2, #255
 1731 0018 1A70     		strb	r2, [r3]
 386:.\main.c      ****     array[1] = 0xFF;
 1732              		.loc 1 386 0
 1733 001a 3B1C     		mov	r3, r7
 1734 001c 0C33     		add	r3, r3, #12
 1735 001e FF22     		mov	r2, #255
 1736 0020 5A70     		strb	r2, [r3, #1]
 387:.\main.c      ****     array[2] = servoID; 
 1737              		.loc 1 387 0
 1738 0022 3B1C     		mov	r3, r7
 1739 0024 0C33     		add	r3, r3, #12
 1740 0026 FA1D     		add	r2, r7, #7
 1741 0028 1278     		ldrb	r2, [r2]
 1742 002a 9A70     		strb	r2, [r3, #2]
 388:.\main.c      ****     array[3] = 0x05;
 1743              		.loc 1 388 0
 1744 002c 3B1C     		mov	r3, r7
 1745 002e 0C33     		add	r3, r3, #12
 1746 0030 0522     		mov	r2, #5
 1747 0032 DA70     		strb	r2, [r3, #3]
 389:.\main.c      ****     array[4] = 0x03; //write instruction
 1748              		.loc 1 389 0
 1749 0034 3B1C     		mov	r3, r7
 1750 0036 0C33     		add	r3, r3, #12
 1751 0038 0322     		mov	r2, #3
 1752 003a 1A71     		strb	r2, [r3, #4]
 390:.\main.c      ****     array[5] = 0x0E;
 1753              		.loc 1 390 0
 1754 003c 3B1C     		mov	r3, r7
 1755 003e 0C33     		add	r3, r3, #12
 1756 0040 0E22     		mov	r2, #14
 1757 0042 5A71     		strb	r2, [r3, #5]
 391:.\main.c      ****     array[6] = torque;
 1758              		.loc 1 391 0
 1759 0044 3B1D     		add	r3, r7, #4
 1760 0046 1B88     		ldrh	r3, [r3]
 1761 0048 DAB2     		uxtb	r2, r3
 1762 004a 3B1C     		mov	r3, r7
 1763 004c 0C33     		add	r3, r3, #12
 1764 004e 9A71     		strb	r2, [r3, #6]
 392:.\main.c      ****     array[7] = torque >> 8;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 39


 1765              		.loc 1 392 0
 1766 0050 3B1D     		add	r3, r7, #4
 1767 0052 1B88     		ldrh	r3, [r3]
 1768 0054 1B0A     		lsr	r3, r3, #8
 1769 0056 9BB2     		uxth	r3, r3
 1770 0058 DAB2     		uxtb	r2, r3
 1771 005a 3B1C     		mov	r3, r7
 1772 005c 0C33     		add	r3, r3, #12
 1773 005e DA71     		strb	r2, [r3, #7]
 393:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1774              		.loc 1 393 0
 1775 0060 3B1C     		mov	r3, r7
 1776 0062 0C33     		add	r3, r3, #12
 1777 0064 9A79     		ldrb	r2, [r3, #6]
 1778 0066 FB1D     		add	r3, r7, #7
 1779 0068 1B78     		ldrb	r3, [r3]
 1780 006a D318     		add	r3, r2, r3
 1781 006c DAB2     		uxtb	r2, r3
 1782 006e 3B1C     		mov	r3, r7
 1783 0070 0C33     		add	r3, r3, #12
 1784 0072 DB79     		ldrb	r3, [r3, #7]
 1785 0074 D318     		add	r3, r2, r3
 1786 0076 DBB2     		uxtb	r3, r3
 1787 0078 1633     		add	r3, r3, #22
 1788 007a DBB2     		uxtb	r3, r3
 1789 007c DB43     		mvn	r3, r3
 1790 007e DAB2     		uxtb	r2, r3
 1791 0080 3B1C     		mov	r3, r7
 1792 0082 0C33     		add	r3, r3, #12
 1793 0084 1A72     		strb	r2, [r3, #8]
 394:.\main.c      ****     
 395:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1794              		.loc 1 395 0
 1795 0086 3B1C     		mov	r3, r7
 1796 0088 0C33     		add	r3, r3, #12
 1797 008a 181C     		mov	r0, r3
 1798 008c 0921     		mov	r1, #9
 1799 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 396:.\main.c      ****     
 397:.\main.c      **** }    
 1800              		.loc 1 397 0
 1801 0092 BD46     		mov	sp, r7
 1802 0094 06B0     		add	sp, sp, #24
 1803              		@ sp needed
 1804 0096 80BD     		pop	{r7, pc}
 1805              		.cfi_endproc
 1806              	.LFE46:
 1807              		.size	SetServoTorque, .-SetServoTorque
 1808              		.section	.text.ServoSpeed,"ax",%progbits
 1809              		.align	2
 1810              		.global	ServoSpeed
 1811              		.code	16
 1812              		.thumb_func
 1813              		.type	ServoSpeed, %function
 1814              	ServoSpeed:
 1815              	.LFB47:
 398:.\main.c      **** 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 40


 399:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 400:.\main.c      **** {
 1816              		.loc 1 400 0
 1817              		.cfi_startproc
 1818 0000 80B5     		push	{r7, lr}
 1819              		.cfi_def_cfa_offset 8
 1820              		.cfi_offset 7, -8
 1821              		.cfi_offset 14, -4
 1822 0002 86B0     		sub	sp, sp, #24
 1823              		.cfi_def_cfa_offset 32
 1824 0004 00AF     		add	r7, sp, #0
 1825              		.cfi_def_cfa_register 7
 1826 0006 0A1C     		mov	r2, r1
 1827 0008 FB1D     		add	r3, r7, #7
 1828 000a 011C     		add	r1, r0, #0
 1829 000c 1970     		strb	r1, [r3]
 1830 000e 3B1D     		add	r3, r7, #4
 1831 0010 1A80     		strh	r2, [r3]
 401:.\main.c      ****     uint8 array[9];
 402:.\main.c      ****     
 403:.\main.c      ****     array[0] = 0xFF;
 1832              		.loc 1 403 0
 1833 0012 3B1C     		mov	r3, r7
 1834 0014 0C33     		add	r3, r3, #12
 1835 0016 FF22     		mov	r2, #255
 1836 0018 1A70     		strb	r2, [r3]
 404:.\main.c      ****     array[1] = 0xFF;
 1837              		.loc 1 404 0
 1838 001a 3B1C     		mov	r3, r7
 1839 001c 0C33     		add	r3, r3, #12
 1840 001e FF22     		mov	r2, #255
 1841 0020 5A70     		strb	r2, [r3, #1]
 405:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1842              		.loc 1 405 0
 1843 0022 3B1C     		mov	r3, r7
 1844 0024 0C33     		add	r3, r3, #12
 1845 0026 FA1D     		add	r2, r7, #7
 1846 0028 1278     		ldrb	r2, [r2]
 1847 002a 9A70     		strb	r2, [r3, #2]
 406:.\main.c      ****     array[3] = 0x05;
 1848              		.loc 1 406 0
 1849 002c 3B1C     		mov	r3, r7
 1850 002e 0C33     		add	r3, r3, #12
 1851 0030 0522     		mov	r2, #5
 1852 0032 DA70     		strb	r2, [r3, #3]
 407:.\main.c      ****     array[4] = 0x03; //write instruction
 1853              		.loc 1 407 0
 1854 0034 3B1C     		mov	r3, r7
 1855 0036 0C33     		add	r3, r3, #12
 1856 0038 0322     		mov	r2, #3
 1857 003a 1A71     		strb	r2, [r3, #4]
 408:.\main.c      ****     array[5] = 0x20;
 1858              		.loc 1 408 0
 1859 003c 3B1C     		mov	r3, r7
 1860 003e 0C33     		add	r3, r3, #12
 1861 0040 2022     		mov	r2, #32
 1862 0042 5A71     		strb	r2, [r3, #5]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 41


 409:.\main.c      ****     array[6] = speed;
 1863              		.loc 1 409 0
 1864 0044 3B1D     		add	r3, r7, #4
 1865 0046 1B88     		ldrh	r3, [r3]
 1866 0048 DAB2     		uxtb	r2, r3
 1867 004a 3B1C     		mov	r3, r7
 1868 004c 0C33     		add	r3, r3, #12
 1869 004e 9A71     		strb	r2, [r3, #6]
 410:.\main.c      ****     array[7] = speed >> 8;
 1870              		.loc 1 410 0
 1871 0050 3B1D     		add	r3, r7, #4
 1872 0052 1B88     		ldrh	r3, [r3]
 1873 0054 1B0A     		lsr	r3, r3, #8
 1874 0056 9BB2     		uxth	r3, r3
 1875 0058 DAB2     		uxtb	r2, r3
 1876 005a 3B1C     		mov	r3, r7
 1877 005c 0C33     		add	r3, r3, #12
 1878 005e DA71     		strb	r2, [r3, #7]
 411:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1879              		.loc 1 411 0
 1880 0060 3B1C     		mov	r3, r7
 1881 0062 0C33     		add	r3, r3, #12
 1882 0064 9A79     		ldrb	r2, [r3, #6]
 1883 0066 FB1D     		add	r3, r7, #7
 1884 0068 1B78     		ldrb	r3, [r3]
 1885 006a D318     		add	r3, r2, r3
 1886 006c DAB2     		uxtb	r2, r3
 1887 006e 3B1C     		mov	r3, r7
 1888 0070 0C33     		add	r3, r3, #12
 1889 0072 DB79     		ldrb	r3, [r3, #7]
 1890 0074 D318     		add	r3, r2, r3
 1891 0076 DBB2     		uxtb	r3, r3
 1892 0078 2833     		add	r3, r3, #40
 1893 007a DBB2     		uxtb	r3, r3
 1894 007c DB43     		mvn	r3, r3
 1895 007e DAB2     		uxtb	r2, r3
 1896 0080 3B1C     		mov	r3, r7
 1897 0082 0C33     		add	r3, r3, #12
 1898 0084 1A72     		strb	r2, [r3, #8]
 412:.\main.c      ****     
 413:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1899              		.loc 1 413 0
 1900 0086 3B1C     		mov	r3, r7
 1901 0088 0C33     		add	r3, r3, #12
 1902 008a 181C     		mov	r0, r3
 1903 008c 0921     		mov	r1, #9
 1904 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 414:.\main.c      ****     
 415:.\main.c      **** }
 1905              		.loc 1 415 0
 1906 0092 BD46     		mov	sp, r7
 1907 0094 06B0     		add	sp, sp, #24
 1908              		@ sp needed
 1909 0096 80BD     		pop	{r7, pc}
 1910              		.cfi_endproc
 1911              	.LFE47:
 1912              		.size	ServoSpeed, .-ServoSpeed
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 42


 1913              		.comm	wristTilt_state,1,1
 1914              		.section	.text.wristTilt,"ax",%progbits
 1915              		.align	2
 1916              		.global	wristTilt
 1917              		.code	16
 1918              		.thumb_func
 1919              		.type	wristTilt, %function
 1920              	wristTilt:
 1921              	.LFB48:
 416:.\main.c      **** 
 417:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 418:.\main.c      **** //control the tilting motion of the wrist
 419:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 420:.\main.c      **** {
 1922              		.loc 1 420 0
 1923              		.cfi_startproc
 1924 0000 90B5     		push	{r4, r7, lr}
 1925              		.cfi_def_cfa_offset 12
 1926              		.cfi_offset 4, -12
 1927              		.cfi_offset 7, -8
 1928              		.cfi_offset 14, -4
 1929 0002 85B0     		sub	sp, sp, #20
 1930              		.cfi_def_cfa_offset 32
 1931 0004 00AF     		add	r7, sp, #0
 1932              		.cfi_def_cfa_register 7
 1933 0006 021C     		mov	r2, r0
 1934 0008 3960     		str	r1, [r7]
 1935 000a FB1D     		add	r3, r7, #7
 1936 000c 1A70     		strb	r2, [r3]
 421:.\main.c      ****     // Overview
 422:.\main.c      ****     //take instruction from data_array
 423:.\main.c      ****     //smooth input
 424:.\main.c      ****     //actuate the tilting using UART
 425:.\main.c      ****     //get feedback
 426:.\main.c      **** 
 427:.\main.c      ****     //-------------------------- 
 428:.\main.c      ****     // Dynamixel Servo specific
 429:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 430:.\main.c      ****     // TODO: Set the desired position
 431:.\main.c      **** 
 432:.\main.c      ****     //--------------------------
 433:.\main.c      ****     // State machine
 434:.\main.c      ****     
 435:.\main.c      ****     uint8 i;
 436:.\main.c      ****     uint16 avg;
 437:.\main.c      ****     uint16 command;
 438:.\main.c      ****     
 439:.\main.c      ****     switch(wristTilt_state){ //actions
 1937              		.loc 1 439 0
 1938 000e 524B     		ldr	r3, .L112
 1939 0010 1B78     		ldrb	r3, [r3]
 1940 0012 012B     		cmp	r3, #1
 1941 0014 03D0     		beq	.L88
 1942 0016 6BDD     		ble	.L110
 1943 0018 022B     		cmp	r3, #2
 1944 001a 22D0     		beq	.L91
 440:.\main.c      ****         case tilt_start:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 43


 441:.\main.c      ****             break;
 442:.\main.c      **** 
 443:.\main.c      ****         case tilt_init:
 444:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 445:.\main.c      ****             {
 446:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 447:.\main.c      ****             }
 448:.\main.c      ****             WT_arr_cspot = 0;
 449:.\main.c      ****             
 450:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 451:.\main.c      ****             break;
 452:.\main.c      **** 
 453:.\main.c      ****         case tilt_control:
 454:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 455:.\main.c      ****             
 456:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 457:.\main.c      ****             
 458:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 459:.\main.c      ****             {
 460:.\main.c      ****                 WT_arr_cspot++;
 461:.\main.c      ****             }
 462:.\main.c      ****             else
 463:.\main.c      ****             {
 464:.\main.c      ****                 WT_arr_cspot = 0;
 465:.\main.c      ****             }
 466:.\main.c      ****             
 467:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 468:.\main.c      ****             
 469:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 470:.\main.c      ****             
 471:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 472:.\main.c      ****             {
 473:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 474:.\main.c      ****             }
 475:.\main.c      ****             else
 476:.\main.c      ****             {
 477:.\main.c      ****                 //throw error
 478:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 479:.\main.c      ****             }
 480:.\main.c      ****             WT_FLAG = 0;
 481:.\main.c      ****             break;
 482:.\main.c      ****             
 483:.\main.c      ****         case tilt_wait:
 484:.\main.c      ****             break;
 1945              		.loc 1 484 0
 1946 001c 69E0     		b	.L87
 1947              	.L88:
 444:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1948              		.loc 1 444 0
 1949 001e 3B1C     		mov	r3, r7
 1950 0020 0F33     		add	r3, r3, #15
 1951 0022 0022     		mov	r2, #0
 1952 0024 1A70     		strb	r2, [r3]
 1953 0026 0EE0     		b	.L93
 1954              	.L94:
 446:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1955              		.loc 1 446 0 discriminator 2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 44


 1956 0028 3B1C     		mov	r3, r7
 1957 002a 0F33     		add	r3, r3, #15
 1958 002c 1B78     		ldrb	r3, [r3]
 1959 002e 5B00     		lsl	r3, r3, #1
 1960 0030 3A68     		ldr	r2, [r7]
 1961 0032 D318     		add	r3, r2, r3
 1962 0034 494A     		ldr	r2, .L112+4
 1963 0036 1A80     		strh	r2, [r3]
 444:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1964              		.loc 1 444 0 discriminator 2
 1965 0038 3B1C     		mov	r3, r7
 1966 003a 0F33     		add	r3, r3, #15
 1967 003c 1A78     		ldrb	r2, [r3]
 1968 003e 3B1C     		mov	r3, r7
 1969 0040 0F33     		add	r3, r3, #15
 1970 0042 0132     		add	r2, r2, #1
 1971 0044 1A70     		strb	r2, [r3]
 1972              	.L93:
 444:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1973              		.loc 1 444 0 is_stmt 0 discriminator 1
 1974 0046 3B1C     		mov	r3, r7
 1975 0048 0F33     		add	r3, r3, #15
 1976 004a 1B78     		ldrb	r3, [r3]
 1977 004c 132B     		cmp	r3, #19
 1978 004e EBD9     		bls	.L94
 448:.\main.c      ****             WT_arr_cspot = 0;
 1979              		.loc 1 448 0 is_stmt 1
 1980 0050 FB1D     		add	r3, r7, #7
 1981 0052 0022     		mov	r2, #0
 1982 0054 1A70     		strb	r2, [r3]
 450:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1983              		.loc 1 450 0
 1984 0056 414B     		ldr	r3, .L112+4
 1985 0058 0220     		mov	r0, #2
 1986 005a 191C     		mov	r1, r3
 1987 005c FFF7FEFF 		bl	ServoGoalPosition
 451:.\main.c      ****             break;
 1988              		.loc 1 451 0
 1989 0060 47E0     		b	.L87
 1990              	.L91:
 454:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1991              		.loc 1 454 0
 1992 0062 3C1C     		mov	r4, r7
 1993 0064 0C34     		add	r4, r4, #12
 1994 0066 3E4B     		ldr	r3, .L112+8
 1995 0068 181C     		mov	r0, r3
 1996 006a 1021     		mov	r1, #16
 1997 006c 1122     		mov	r2, #17
 1998 006e FFF7FEFF 		bl	make_command
 1999 0072 031C     		mov	r3, r0
 2000 0074 2380     		strh	r3, [r4]
 456:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 2001              		.loc 1 456 0
 2002 0076 FB1D     		add	r3, r7, #7
 2003 0078 1B78     		ldrb	r3, [r3]
 2004 007a 5B00     		lsl	r3, r3, #1
 2005 007c 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 45


 2006 007e D318     		add	r3, r2, r3
 2007 0080 3A1C     		mov	r2, r7
 2008 0082 0C32     		add	r2, r2, #12
 2009 0084 1288     		ldrh	r2, [r2]
 2010 0086 1A80     		strh	r2, [r3]
 458:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 2011              		.loc 1 458 0
 2012 0088 FB1D     		add	r3, r7, #7
 2013 008a 1B78     		ldrb	r3, [r3]
 2014 008c 122B     		cmp	r3, #18
 2015 008e 05D8     		bhi	.L95
 460:.\main.c      ****                 WT_arr_cspot++;
 2016              		.loc 1 460 0
 2017 0090 FB1D     		add	r3, r7, #7
 2018 0092 1A78     		ldrb	r2, [r3]
 2019 0094 FB1D     		add	r3, r7, #7
 2020 0096 0132     		add	r2, r2, #1
 2021 0098 1A70     		strb	r2, [r3]
 2022 009a 02E0     		b	.L96
 2023              	.L95:
 464:.\main.c      ****                 WT_arr_cspot = 0;
 2024              		.loc 1 464 0
 2025 009c FB1D     		add	r3, r7, #7
 2026 009e 0022     		mov	r2, #0
 2027 00a0 1A70     		strb	r2, [r3]
 2028              	.L96:
 469:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 2029              		.loc 1 469 0
 2030 00a2 3C1C     		mov	r4, r7
 2031 00a4 0A34     		add	r4, r4, #10
 2032 00a6 3B68     		ldr	r3, [r7]
 2033 00a8 181C     		mov	r0, r3
 2034 00aa 1421     		mov	r1, #20
 2035 00ac FFF7FEFF 		bl	average
 2036 00b0 031C     		mov	r3, r0
 2037 00b2 2380     		strh	r3, [r4]
 471:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2038              		.loc 1 471 0
 2039 00b4 3B1C     		mov	r3, r7
 2040 00b6 0A33     		add	r3, r3, #10
 2041 00b8 1A88     		ldrh	r2, [r3]
 2042 00ba FA23     		mov	r3, #250
 2043 00bc DB00     		lsl	r3, r3, #3
 2044 00be 9A42     		cmp	r2, r3
 2045 00c0 0DD8     		bhi	.L97
 471:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2046              		.loc 1 471 0 is_stmt 0 discriminator 1
 2047 00c2 3B1C     		mov	r3, r7
 2048 00c4 0A33     		add	r3, r3, #10
 2049 00c6 1A88     		ldrh	r2, [r3]
 2050 00c8 264B     		ldr	r3, .L112+12
 2051 00ca 9A42     		cmp	r2, r3
 2052 00cc 07D9     		bls	.L97
 473:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 2053              		.loc 1 473 0 is_stmt 1
 2054 00ce 3B1C     		mov	r3, r7
 2055 00d0 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 46


 2056 00d2 1B88     		ldrh	r3, [r3]
 2057 00d4 0220     		mov	r0, #2
 2058 00d6 191C     		mov	r1, r3
 2059 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2060 00dc 04E0     		b	.L98
 2061              	.L97:
 478:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 2062              		.loc 1 478 0
 2063 00de 1F4B     		ldr	r3, .L112+4
 2064 00e0 0220     		mov	r0, #2
 2065 00e2 191C     		mov	r1, r3
 2066 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2067              	.L98:
 480:.\main.c      ****             WT_FLAG = 0;
 2068              		.loc 1 480 0
 2069 00e8 1F4B     		ldr	r3, .L112+16
 2070 00ea 0022     		mov	r2, #0
 2071 00ec 1A70     		strb	r2, [r3]
 481:.\main.c      ****             break;
 2072              		.loc 1 481 0
 2073 00ee 00E0     		b	.L87
 2074              	.L110:
 441:.\main.c      ****             break;
 2075              		.loc 1 441 0
 2076 00f0 C046     		mov	r8, r8
 2077              	.L87:
 485:.\main.c      ****     }
 486:.\main.c      ****     
 487:.\main.c      ****     switch(wristTilt_state){ //transitions
 2078              		.loc 1 487 0
 2079 00f2 194B     		ldr	r3, .L112
 2080 00f4 1B78     		ldrb	r3, [r3]
 2081 00f6 012B     		cmp	r3, #1
 2082 00f8 0CD0     		beq	.L100
 2083 00fa 02DC     		bgt	.L101
 2084 00fc 002B     		cmp	r3, #0
 2085 00fe 05D0     		beq	.L102
 2086 0100 24E0     		b	.L99
 2087              	.L101:
 2088 0102 022B     		cmp	r3, #2
 2089 0104 0AD0     		beq	.L103
 2090 0106 032B     		cmp	r3, #3
 2091 0108 14D0     		beq	.L104
 2092 010a 1FE0     		b	.L99
 2093              	.L102:
 488:.\main.c      ****         case tilt_start:
 489:.\main.c      ****             wristTilt_state = tilt_init;
 2094              		.loc 1 489 0
 2095 010c 124B     		ldr	r3, .L112
 2096 010e 0122     		mov	r2, #1
 2097 0110 1A70     		strb	r2, [r3]
 490:.\main.c      ****             break;
 2098              		.loc 1 490 0
 2099 0112 1BE0     		b	.L99
 2100              	.L100:
 491:.\main.c      ****         
 492:.\main.c      ****         case tilt_init:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 47


 493:.\main.c      ****             wristTilt_state = tilt_wait;
 2101              		.loc 1 493 0
 2102 0114 104B     		ldr	r3, .L112
 2103 0116 0322     		mov	r2, #3
 2104 0118 1A70     		strb	r2, [r3]
 494:.\main.c      ****             break;
 2105              		.loc 1 494 0
 2106 011a 17E0     		b	.L99
 2107              	.L103:
 495:.\main.c      ****         
 496:.\main.c      ****         case tilt_control:
 497:.\main.c      ****             if(WT_FLAG)
 2108              		.loc 1 497 0
 2109 011c 124B     		ldr	r3, .L112+16
 2110 011e 1B78     		ldrb	r3, [r3]
 2111 0120 002B     		cmp	r3, #0
 2112 0122 03D0     		beq	.L105
 498:.\main.c      ****             {
 499:.\main.c      ****                 wristTilt_state = tilt_control;
 2113              		.loc 1 499 0
 2114 0124 0C4B     		ldr	r3, .L112
 2115 0126 0222     		mov	r2, #2
 2116 0128 1A70     		strb	r2, [r3]
 500:.\main.c      ****             }
 501:.\main.c      ****             else
 502:.\main.c      ****             {
 503:.\main.c      ****                 wristTilt_state = tilt_wait;
 504:.\main.c      ****             }
 505:.\main.c      ****             break;
 2117              		.loc 1 505 0
 2118 012a 0FE0     		b	.L99
 2119              	.L105:
 503:.\main.c      ****                 wristTilt_state = tilt_wait;
 2120              		.loc 1 503 0
 2121 012c 0A4B     		ldr	r3, .L112
 2122 012e 0322     		mov	r2, #3
 2123 0130 1A70     		strb	r2, [r3]
 2124              		.loc 1 505 0
 2125 0132 0BE0     		b	.L99
 2126              	.L104:
 506:.\main.c      ****         
 507:.\main.c      ****         case tilt_wait:
 508:.\main.c      ****             if(WT_FLAG)
 2127              		.loc 1 508 0
 2128 0134 0C4B     		ldr	r3, .L112+16
 2129 0136 1B78     		ldrb	r3, [r3]
 2130 0138 002B     		cmp	r3, #0
 2131 013a 03D0     		beq	.L107
 509:.\main.c      ****             {
 510:.\main.c      ****                 wristTilt_state = tilt_control;
 2132              		.loc 1 510 0
 2133 013c 064B     		ldr	r3, .L112
 2134 013e 0222     		mov	r2, #2
 2135 0140 1A70     		strb	r2, [r3]
 511:.\main.c      ****             }
 512:.\main.c      ****             else
 513:.\main.c      ****             {
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 48


 514:.\main.c      ****                 wristTilt_state = tilt_wait; 
 515:.\main.c      ****             }
 516:.\main.c      ****             break;
 2136              		.loc 1 516 0
 2137 0142 02E0     		b	.L111
 2138              	.L107:
 514:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2139              		.loc 1 514 0
 2140 0144 044B     		ldr	r3, .L112
 2141 0146 0322     		mov	r2, #3
 2142 0148 1A70     		strb	r2, [r3]
 2143              	.L111:
 2144              		.loc 1 516 0
 2145 014a C046     		mov	r8, r8
 2146              	.L99:
 517:.\main.c      ****     }  
 518:.\main.c      ****     return WT_arr_cspot;
 2147              		.loc 1 518 0
 2148 014c FB1D     		add	r3, r7, #7
 2149 014e 1B78     		ldrb	r3, [r3]
 519:.\main.c      **** }
 2150              		.loc 1 519 0
 2151 0150 181C     		mov	r0, r3
 2152 0152 BD46     		mov	sp, r7
 2153 0154 05B0     		add	sp, sp, #20
 2154              		@ sp needed
 2155 0156 90BD     		pop	{r4, r7, pc}
 2156              	.L113:
 2157              		.align	2
 2158              	.L112:
 2159 0158 00000000 		.word	wristTilt_state
 2160 015c DC050000 		.word	1500
 2161 0160 00000000 		.word	data_array
 2162 0164 E7030000 		.word	999
 2163 0168 00000000 		.word	WT_FLAG
 2164              		.cfi_endproc
 2165              	.LFE48:
 2166              		.size	wristTilt, .-wristTilt
 2167              		.comm	wristRotate_state,1,1
 2168              		.section	.text.wristRotate,"ax",%progbits
 2169              		.align	2
 2170              		.global	wristRotate
 2171              		.code	16
 2172              		.thumb_func
 2173              		.type	wristRotate, %function
 2174              	wristRotate:
 2175              	.LFB49:
 520:.\main.c      **** 
 521:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 522:.\main.c      **** //control the rotating motion of the wrist
 523:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 524:.\main.c      **** {
 2176              		.loc 1 524 0
 2177              		.cfi_startproc
 2178 0000 90B5     		push	{r4, r7, lr}
 2179              		.cfi_def_cfa_offset 12
 2180              		.cfi_offset 4, -12
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 49


 2181              		.cfi_offset 7, -8
 2182              		.cfi_offset 14, -4
 2183 0002 85B0     		sub	sp, sp, #20
 2184              		.cfi_def_cfa_offset 32
 2185 0004 00AF     		add	r7, sp, #0
 2186              		.cfi_def_cfa_register 7
 2187 0006 021C     		mov	r2, r0
 2188 0008 3960     		str	r1, [r7]
 2189 000a FB1D     		add	r3, r7, #7
 2190 000c 1A70     		strb	r2, [r3]
 525:.\main.c      ****     //Overview
 526:.\main.c      ****     //take instruction from data_array
 527:.\main.c      ****     //smooth input
 528:.\main.c      ****     //actuate the tilting using UART
 529:.\main.c      ****     //get feedback
 530:.\main.c      **** 
 531:.\main.c      ****     //-------------------------- 
 532:.\main.c      ****     // Dynamixel Servo specific
 533:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 534:.\main.c      ****     // TODO: Set the desired position
 535:.\main.c      **** 
 536:.\main.c      ****     //--------------------------
 537:.\main.c      ****     // State machine
 538:.\main.c      ****     
 539:.\main.c      ****     uint8 i;
 540:.\main.c      ****     uint16 avg;
 541:.\main.c      ****     uint16 command;
 542:.\main.c      ****     
 543:.\main.c      ****     switch(wristRotate_state){ //actions
 2191              		.loc 1 543 0
 2192 000e 524B     		ldr	r3, .L140
 2193 0010 1B78     		ldrb	r3, [r3]
 2194 0012 012B     		cmp	r3, #1
 2195 0014 03D0     		beq	.L116
 2196 0016 6BDD     		ble	.L138
 2197 0018 022B     		cmp	r3, #2
 2198 001a 22D0     		beq	.L119
 544:.\main.c      ****         case rotate_start:
 545:.\main.c      ****             break;
 546:.\main.c      **** 
 547:.\main.c      ****         case rotate_init:
 548:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 549:.\main.c      ****             {
 550:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 551:.\main.c      ****             }
 552:.\main.c      ****             WR_arr_cspot = 0;
 553:.\main.c      ****             
 554:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 555:.\main.c      ****             break;
 556:.\main.c      **** 
 557:.\main.c      ****         case rotate_control:
 558:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 559:.\main.c      ****             
 560:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 561:.\main.c      ****             
 562:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 563:.\main.c      ****             {
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 50


 564:.\main.c      ****                 WR_arr_cspot++;
 565:.\main.c      ****             }
 566:.\main.c      ****             else
 567:.\main.c      ****             {
 568:.\main.c      ****                 WR_arr_cspot = 0;
 569:.\main.c      ****             }
 570:.\main.c      ****             
 571:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 572:.\main.c      ****             
 573:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 574:.\main.c      ****             
 575:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 576:.\main.c      ****             {
 577:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 578:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 579:.\main.c      ****             }
 580:.\main.c      ****             else
 581:.\main.c      ****             {
 582:.\main.c      ****                 //throw error
 583:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 584:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 585:.\main.c      ****             }
 586:.\main.c      ****             WR_FLAG = 0;
 587:.\main.c      ****             break;
 588:.\main.c      ****             
 589:.\main.c      ****         case rotate_wait:
 590:.\main.c      ****             break;
 2199              		.loc 1 590 0
 2200 001c 69E0     		b	.L115
 2201              	.L116:
 548:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2202              		.loc 1 548 0
 2203 001e 3B1C     		mov	r3, r7
 2204 0020 0F33     		add	r3, r3, #15
 2205 0022 0022     		mov	r2, #0
 2206 0024 1A70     		strb	r2, [r3]
 2207 0026 0EE0     		b	.L121
 2208              	.L122:
 550:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2209              		.loc 1 550 0 discriminator 2
 2210 0028 3B1C     		mov	r3, r7
 2211 002a 0F33     		add	r3, r3, #15
 2212 002c 1B78     		ldrb	r3, [r3]
 2213 002e 5B00     		lsl	r3, r3, #1
 2214 0030 3A68     		ldr	r2, [r7]
 2215 0032 D318     		add	r3, r2, r3
 2216 0034 494A     		ldr	r2, .L140+4
 2217 0036 1A80     		strh	r2, [r3]
 548:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2218              		.loc 1 548 0 discriminator 2
 2219 0038 3B1C     		mov	r3, r7
 2220 003a 0F33     		add	r3, r3, #15
 2221 003c 1A78     		ldrb	r2, [r3]
 2222 003e 3B1C     		mov	r3, r7
 2223 0040 0F33     		add	r3, r3, #15
 2224 0042 0132     		add	r2, r2, #1
 2225 0044 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 51


 2226              	.L121:
 548:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2227              		.loc 1 548 0 is_stmt 0 discriminator 1
 2228 0046 3B1C     		mov	r3, r7
 2229 0048 0F33     		add	r3, r3, #15
 2230 004a 1B78     		ldrb	r3, [r3]
 2231 004c 132B     		cmp	r3, #19
 2232 004e EBD9     		bls	.L122
 552:.\main.c      ****             WR_arr_cspot = 0;
 2233              		.loc 1 552 0 is_stmt 1
 2234 0050 FB1D     		add	r3, r7, #7
 2235 0052 0022     		mov	r2, #0
 2236 0054 1A70     		strb	r2, [r3]
 554:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2237              		.loc 1 554 0
 2238 0056 414B     		ldr	r3, .L140+4
 2239 0058 0120     		mov	r0, #1
 2240 005a 191C     		mov	r1, r3
 2241 005c FFF7FEFF 		bl	ServoGoalPosition
 555:.\main.c      ****             break;
 2242              		.loc 1 555 0
 2243 0060 47E0     		b	.L115
 2244              	.L119:
 558:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2245              		.loc 1 558 0
 2246 0062 3C1C     		mov	r4, r7
 2247 0064 0C34     		add	r4, r4, #12
 2248 0066 3E4B     		ldr	r3, .L140+8
 2249 0068 181C     		mov	r0, r3
 2250 006a 1221     		mov	r1, #18
 2251 006c 1322     		mov	r2, #19
 2252 006e FFF7FEFF 		bl	make_command
 2253 0072 031C     		mov	r3, r0
 2254 0074 2380     		strh	r3, [r4]
 560:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2255              		.loc 1 560 0
 2256 0076 FB1D     		add	r3, r7, #7
 2257 0078 1B78     		ldrb	r3, [r3]
 2258 007a 5B00     		lsl	r3, r3, #1
 2259 007c 3A68     		ldr	r2, [r7]
 2260 007e D318     		add	r3, r2, r3
 2261 0080 3A1C     		mov	r2, r7
 2262 0082 0C32     		add	r2, r2, #12
 2263 0084 1288     		ldrh	r2, [r2]
 2264 0086 1A80     		strh	r2, [r3]
 562:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2265              		.loc 1 562 0
 2266 0088 FB1D     		add	r3, r7, #7
 2267 008a 1B78     		ldrb	r3, [r3]
 2268 008c 122B     		cmp	r3, #18
 2269 008e 05D8     		bhi	.L123
 564:.\main.c      ****                 WR_arr_cspot++;
 2270              		.loc 1 564 0
 2271 0090 FB1D     		add	r3, r7, #7
 2272 0092 1A78     		ldrb	r2, [r3]
 2273 0094 FB1D     		add	r3, r7, #7
 2274 0096 0132     		add	r2, r2, #1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 52


 2275 0098 1A70     		strb	r2, [r3]
 2276 009a 02E0     		b	.L124
 2277              	.L123:
 568:.\main.c      ****                 WR_arr_cspot = 0;
 2278              		.loc 1 568 0
 2279 009c FB1D     		add	r3, r7, #7
 2280 009e 0022     		mov	r2, #0
 2281 00a0 1A70     		strb	r2, [r3]
 2282              	.L124:
 573:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2283              		.loc 1 573 0
 2284 00a2 3C1C     		mov	r4, r7
 2285 00a4 0A34     		add	r4, r4, #10
 2286 00a6 3B68     		ldr	r3, [r7]
 2287 00a8 181C     		mov	r0, r3
 2288 00aa 1421     		mov	r1, #20
 2289 00ac FFF7FEFF 		bl	average
 2290 00b0 031C     		mov	r3, r0
 2291 00b2 2380     		strh	r3, [r4]
 575:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2292              		.loc 1 575 0
 2293 00b4 3B1C     		mov	r3, r7
 2294 00b6 0A33     		add	r3, r3, #10
 2295 00b8 1A88     		ldrh	r2, [r3]
 2296 00ba FA23     		mov	r3, #250
 2297 00bc DB00     		lsl	r3, r3, #3
 2298 00be 9A42     		cmp	r2, r3
 2299 00c0 0DD8     		bhi	.L125
 575:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2300              		.loc 1 575 0 is_stmt 0 discriminator 1
 2301 00c2 3B1C     		mov	r3, r7
 2302 00c4 0A33     		add	r3, r3, #10
 2303 00c6 1A88     		ldrh	r2, [r3]
 2304 00c8 264B     		ldr	r3, .L140+12
 2305 00ca 9A42     		cmp	r2, r3
 2306 00cc 07D9     		bls	.L125
 578:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2307              		.loc 1 578 0 is_stmt 1
 2308 00ce 3B1C     		mov	r3, r7
 2309 00d0 0A33     		add	r3, r3, #10
 2310 00d2 1B88     		ldrh	r3, [r3]
 2311 00d4 0120     		mov	r0, #1
 2312 00d6 191C     		mov	r1, r3
 2313 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2314 00dc 04E0     		b	.L126
 2315              	.L125:
 584:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2316              		.loc 1 584 0
 2317 00de 1F4B     		ldr	r3, .L140+4
 2318 00e0 0120     		mov	r0, #1
 2319 00e2 191C     		mov	r1, r3
 2320 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2321              	.L126:
 586:.\main.c      ****             WR_FLAG = 0;
 2322              		.loc 1 586 0
 2323 00e8 1F4B     		ldr	r3, .L140+16
 2324 00ea 0022     		mov	r2, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 53


 2325 00ec 1A70     		strb	r2, [r3]
 587:.\main.c      ****             break;
 2326              		.loc 1 587 0
 2327 00ee 00E0     		b	.L115
 2328              	.L138:
 545:.\main.c      ****             break;
 2329              		.loc 1 545 0
 2330 00f0 C046     		mov	r8, r8
 2331              	.L115:
 591:.\main.c      ****     }
 592:.\main.c      ****     
 593:.\main.c      ****     switch(wristRotate_state){ //transitions
 2332              		.loc 1 593 0
 2333 00f2 194B     		ldr	r3, .L140
 2334 00f4 1B78     		ldrb	r3, [r3]
 2335 00f6 012B     		cmp	r3, #1
 2336 00f8 0CD0     		beq	.L128
 2337 00fa 02DC     		bgt	.L129
 2338 00fc 002B     		cmp	r3, #0
 2339 00fe 05D0     		beq	.L130
 2340 0100 24E0     		b	.L127
 2341              	.L129:
 2342 0102 022B     		cmp	r3, #2
 2343 0104 0AD0     		beq	.L131
 2344 0106 032B     		cmp	r3, #3
 2345 0108 14D0     		beq	.L132
 2346 010a 1FE0     		b	.L127
 2347              	.L130:
 594:.\main.c      ****         case rotate_start:
 595:.\main.c      ****             wristRotate_state = rotate_init;
 2348              		.loc 1 595 0
 2349 010c 124B     		ldr	r3, .L140
 2350 010e 0122     		mov	r2, #1
 2351 0110 1A70     		strb	r2, [r3]
 596:.\main.c      ****             break;
 2352              		.loc 1 596 0
 2353 0112 1BE0     		b	.L127
 2354              	.L128:
 597:.\main.c      ****         
 598:.\main.c      ****         case rotate_init:
 599:.\main.c      ****             wristRotate_state = rotate_wait;
 2355              		.loc 1 599 0
 2356 0114 104B     		ldr	r3, .L140
 2357 0116 0322     		mov	r2, #3
 2358 0118 1A70     		strb	r2, [r3]
 600:.\main.c      ****             break;
 2359              		.loc 1 600 0
 2360 011a 17E0     		b	.L127
 2361              	.L131:
 601:.\main.c      ****         
 602:.\main.c      ****         case rotate_control:
 603:.\main.c      ****             if(WR_FLAG)
 2362              		.loc 1 603 0
 2363 011c 124B     		ldr	r3, .L140+16
 2364 011e 1B78     		ldrb	r3, [r3]
 2365 0120 002B     		cmp	r3, #0
 2366 0122 03D0     		beq	.L133
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 54


 604:.\main.c      ****             {
 605:.\main.c      ****                 wristRotate_state = rotate_control;
 2367              		.loc 1 605 0
 2368 0124 0C4B     		ldr	r3, .L140
 2369 0126 0222     		mov	r2, #2
 2370 0128 1A70     		strb	r2, [r3]
 606:.\main.c      ****             }
 607:.\main.c      ****             else
 608:.\main.c      ****             {
 609:.\main.c      ****                 wristRotate_state = rotate_wait;
 610:.\main.c      ****             }
 611:.\main.c      ****             break;
 2371              		.loc 1 611 0
 2372 012a 0FE0     		b	.L127
 2373              	.L133:
 609:.\main.c      ****                 wristRotate_state = rotate_wait;
 2374              		.loc 1 609 0
 2375 012c 0A4B     		ldr	r3, .L140
 2376 012e 0322     		mov	r2, #3
 2377 0130 1A70     		strb	r2, [r3]
 2378              		.loc 1 611 0
 2379 0132 0BE0     		b	.L127
 2380              	.L132:
 612:.\main.c      ****         
 613:.\main.c      ****         case rotate_wait:
 614:.\main.c      ****             if(WR_FLAG)
 2381              		.loc 1 614 0
 2382 0134 0C4B     		ldr	r3, .L140+16
 2383 0136 1B78     		ldrb	r3, [r3]
 2384 0138 002B     		cmp	r3, #0
 2385 013a 03D0     		beq	.L135
 615:.\main.c      ****             {
 616:.\main.c      ****                 wristRotate_state = rotate_control;
 2386              		.loc 1 616 0
 2387 013c 064B     		ldr	r3, .L140
 2388 013e 0222     		mov	r2, #2
 2389 0140 1A70     		strb	r2, [r3]
 617:.\main.c      ****             }
 618:.\main.c      ****             else
 619:.\main.c      ****             {
 620:.\main.c      ****                 wristRotate_state = rotate_wait;
 621:.\main.c      ****             }
 622:.\main.c      ****             break;
 2390              		.loc 1 622 0
 2391 0142 02E0     		b	.L139
 2392              	.L135:
 620:.\main.c      ****                 wristRotate_state = rotate_wait;
 2393              		.loc 1 620 0
 2394 0144 044B     		ldr	r3, .L140
 2395 0146 0322     		mov	r2, #3
 2396 0148 1A70     		strb	r2, [r3]
 2397              	.L139:
 2398              		.loc 1 622 0
 2399 014a C046     		mov	r8, r8
 2400              	.L127:
 623:.\main.c      ****     }  
 624:.\main.c      ****     return WR_arr_cspot;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 55


 2401              		.loc 1 624 0
 2402 014c FB1D     		add	r3, r7, #7
 2403 014e 1B78     		ldrb	r3, [r3]
 625:.\main.c      **** }
 2404              		.loc 1 625 0
 2405 0150 181C     		mov	r0, r3
 2406 0152 BD46     		mov	sp, r7
 2407 0154 05B0     		add	sp, sp, #20
 2408              		@ sp needed
 2409 0156 90BD     		pop	{r4, r7, pc}
 2410              	.L141:
 2411              		.align	2
 2412              	.L140:
 2413 0158 00000000 		.word	wristRotate_state
 2414 015c DC050000 		.word	1500
 2415 0160 00000000 		.word	data_array
 2416 0164 E7030000 		.word	999
 2417 0168 00000000 		.word	WR_FLAG
 2418              		.cfi_endproc
 2419              	.LFE49:
 2420              		.size	wristRotate, .-wristRotate
 2421              		.comm	elbow_state,1,1
 2422              		.section	.text.elbow,"ax",%progbits
 2423              		.align	2
 2424              		.global	elbow
 2425              		.code	16
 2426              		.thumb_func
 2427              		.type	elbow, %function
 2428              	elbow:
 2429              	.LFB50:
 626:.\main.c      **** 
 627:.\main.c      **** //control the elbow
 628:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 629:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 630:.\main.c      **** { 
 2430              		.loc 1 630 0
 2431              		.cfi_startproc
 2432 0000 90B5     		push	{r4, r7, lr}
 2433              		.cfi_def_cfa_offset 12
 2434              		.cfi_offset 4, -12
 2435              		.cfi_offset 7, -8
 2436              		.cfi_offset 14, -4
 2437 0002 85B0     		sub	sp, sp, #20
 2438              		.cfi_def_cfa_offset 32
 2439 0004 00AF     		add	r7, sp, #0
 2440              		.cfi_def_cfa_register 7
 2441 0006 021C     		mov	r2, r0
 2442 0008 3960     		str	r1, [r7]
 2443 000a FB1D     		add	r3, r7, #7
 2444 000c 1A70     		strb	r2, [r3]
 631:.\main.c      ****     //take instruction from data_array
 632:.\main.c      ****     //smooth input
 633:.\main.c      ****     //actuate the elbow using PWM
 634:.\main.c      ****     //get feedback
 635:.\main.c      ****     uint8 i;
 636:.\main.c      ****     uint16 avg;
 637:.\main.c      ****     uint16 command;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 56


 638:.\main.c      ****     
 639:.\main.c      ****     //TODO: make sure reading from correct pots
 640:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2445              		.loc 1 640 0
 2446 000e 3C1C     		mov	r4, r7
 2447 0010 0C34     		add	r4, r4, #12
 2448 0012 0120     		mov	r0, #1
 2449 0014 FFF7FEFF 		bl	potFeedback
 2450 0018 031C     		mov	r3, r0
 2451 001a 2380     		strh	r3, [r4]
 641:.\main.c      ****     
 642:.\main.c      ****     switch(elbow_state){ //actions
 2452              		.loc 1 642 0
 2453 001c BB4B     		ldr	r3, .L189
 2454 001e 1B78     		ldrb	r3, [r3]
 2455 0020 012B     		cmp	r3, #1
 2456 0022 07D0     		beq	.L144
 2457 0024 00DC     		bgt	.LCB2149
 2458 0026 47E1     		b	.L187	@long jump
 2459              	.LCB2149:
 2460 0028 022B     		cmp	r3, #2
 2461 002a 24D0     		beq	.L147
 2462 002c 032B     		cmp	r3, #3
 2463 002e 00D1     		bne	.LCB2153
 2464 0030 2EE1     		b	.L148	@long jump
 2465              	.LCB2153:
 2466 0032 42E1     		b	.L143
 2467              	.L144:
 643:.\main.c      ****         case elbw_start:
 644:.\main.c      ****             break;
 645:.\main.c      **** 
 646:.\main.c      ****         case elbw_init:
 647:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2468              		.loc 1 647 0
 2469 0034 3B1C     		mov	r3, r7
 2470 0036 0F33     		add	r3, r3, #15
 2471 0038 0022     		mov	r2, #0
 2472 003a 1A70     		strb	r2, [r3]
 2473 003c 0EE0     		b	.L149
 2474              	.L150:
 648:.\main.c      ****             {
 649:.\main.c      ****                 elbow_array[i] = 1500;
 2475              		.loc 1 649 0 discriminator 2
 2476 003e 3B1C     		mov	r3, r7
 2477 0040 0F33     		add	r3, r3, #15
 2478 0042 1B78     		ldrb	r3, [r3]
 2479 0044 5B00     		lsl	r3, r3, #1
 2480 0046 3A68     		ldr	r2, [r7]
 2481 0048 D318     		add	r3, r2, r3
 2482 004a B14A     		ldr	r2, .L189+4
 2483 004c 1A80     		strh	r2, [r3]
 647:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2484              		.loc 1 647 0 discriminator 2
 2485 004e 3B1C     		mov	r3, r7
 2486 0050 0F33     		add	r3, r3, #15
 2487 0052 1A78     		ldrb	r2, [r3]
 2488 0054 3B1C     		mov	r3, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 57


 2489 0056 0F33     		add	r3, r3, #15
 2490 0058 0132     		add	r2, r2, #1
 2491 005a 1A70     		strb	r2, [r3]
 2492              	.L149:
 647:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2493              		.loc 1 647 0 is_stmt 0 discriminator 1
 2494 005c 3B1C     		mov	r3, r7
 2495 005e 0F33     		add	r3, r3, #15
 2496 0060 1B78     		ldrb	r3, [r3]
 2497 0062 132B     		cmp	r3, #19
 2498 0064 EBD9     		bls	.L150
 650:.\main.c      ****             }
 651:.\main.c      ****             elbw_arr_cspot = 0;
 2499              		.loc 1 651 0 is_stmt 1
 2500 0066 FB1D     		add	r3, r7, #7
 2501 0068 0022     		mov	r2, #0
 2502 006a 1A70     		strb	r2, [r3]
 652:.\main.c      ****             
 653:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2503              		.loc 1 653 0
 2504 006c A84B     		ldr	r3, .L189+4
 2505 006e 181C     		mov	r0, r3
 2506 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 654:.\main.c      ****             break;
 2507              		.loc 1 654 0
 2508 0074 21E1     		b	.L143
 2509              	.L147:
 655:.\main.c      **** 
 656:.\main.c      ****         case elbw_execute:
 657:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2510              		.loc 1 657 0
 2511 0076 3C1C     		mov	r4, r7
 2512 0078 0A34     		add	r4, r4, #10
 2513 007a A64B     		ldr	r3, .L189+8
 2514 007c 181C     		mov	r0, r3
 2515 007e 0E21     		mov	r1, #14
 2516 0080 0F22     		mov	r2, #15
 2517 0082 FFF7FEFF 		bl	make_command
 2518 0086 031C     		mov	r3, r0
 2519 0088 2380     		strh	r3, [r4]
 658:.\main.c      ****             
 659:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2520              		.loc 1 659 0
 2521 008a FB1D     		add	r3, r7, #7
 2522 008c 1B78     		ldrb	r3, [r3]
 2523 008e 5B00     		lsl	r3, r3, #1
 2524 0090 3A68     		ldr	r2, [r7]
 2525 0092 D318     		add	r3, r2, r3
 2526 0094 3A1C     		mov	r2, r7
 2527 0096 0A32     		add	r2, r2, #10
 2528 0098 1288     		ldrh	r2, [r2]
 2529 009a 1A80     		strh	r2, [r3]
 660:.\main.c      ****             
 661:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2530              		.loc 1 661 0
 2531 009c FB1D     		add	r3, r7, #7
 2532 009e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 58


 2533 00a0 122B     		cmp	r3, #18
 2534 00a2 05D8     		bhi	.L151
 662:.\main.c      ****             {
 663:.\main.c      ****                 elbw_arr_cspot++;
 2535              		.loc 1 663 0
 2536 00a4 FB1D     		add	r3, r7, #7
 2537 00a6 1A78     		ldrb	r2, [r3]
 2538 00a8 FB1D     		add	r3, r7, #7
 2539 00aa 0132     		add	r2, r2, #1
 2540 00ac 1A70     		strb	r2, [r3]
 2541 00ae 02E0     		b	.L152
 2542              	.L151:
 664:.\main.c      ****             }
 665:.\main.c      ****             else
 666:.\main.c      ****             {
 667:.\main.c      ****                 elbw_arr_cspot = 0;
 2543              		.loc 1 667 0
 2544 00b0 FB1D     		add	r3, r7, #7
 2545 00b2 0022     		mov	r2, #0
 2546 00b4 1A70     		strb	r2, [r3]
 2547              	.L152:
 668:.\main.c      ****             }
 669:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2548              		.loc 1 669 0
 2549 00b6 3C1C     		mov	r4, r7
 2550 00b8 0834     		add	r4, r4, #8
 2551 00ba 3B68     		ldr	r3, [r7]
 2552 00bc 181C     		mov	r0, r3
 2553 00be 1421     		mov	r1, #20
 2554 00c0 FFF7FEFF 		bl	average
 2555 00c4 031C     		mov	r3, r0
 2556 00c6 2380     		strh	r3, [r4]
 670:.\main.c      ****             
 671:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2557              		.loc 1 671 0
 2558 00c8 FFF7FEFF 		bl	stop_elb_dn_Read
 2559 00cc 031C     		mov	r3, r0
 2560 00ce 002B     		cmp	r3, #0
 2561 00d0 05D0     		beq	.L153
 2562              		.loc 1 671 0 is_stmt 0 discriminator 1
 2563 00d2 FFF7FEFF 		bl	stop_elb_up_Read
 2564 00d6 031C     		mov	r3, r0
 2565 00d8 002B     		cmp	r3, #0
 2566 00da 00D0     		beq	.LCB2249
 2567 00dc 6FE0     		b	.L154	@long jump
 2568              	.LCB2249:
 2569              	.L153:
 672:.\main.c      ****             {
 673:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2570              		.loc 1 673 0 is_stmt 1
 2571 00de 3B1C     		mov	r3, r7
 2572 00e0 0C33     		add	r3, r3, #12
 2573 00e2 1A88     		ldrh	r2, [r3]
 2574 00e4 8C4B     		ldr	r3, .L189+12
 2575 00e6 1B68     		ldr	r3, [r3]
 2576 00e8 9A42     		cmp	r2, r3
 2577 00ea 23D8     		bhi	.L155
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 59


 674:.\main.c      ****                 {
 675:.\main.c      ****                     if (avg < 1500)
 2578              		.loc 1 675 0
 2579 00ec 3B1C     		mov	r3, r7
 2580 00ee 0833     		add	r3, r3, #8
 2581 00f0 1A88     		ldrh	r2, [r3]
 2582 00f2 8A4B     		ldr	r3, .L189+16
 2583 00f4 9A42     		cmp	r2, r3
 2584 00f6 04D8     		bhi	.L156
 676:.\main.c      ****                     {
 677:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2585              		.loc 1 677 0
 2586 00f8 854B     		ldr	r3, .L189+4
 2587 00fa 181C     		mov	r0, r3
 2588 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2589 0100 5CE0     		b	.L159
 2590              	.L156:
 678:.\main.c      ****                     }
 679:.\main.c      ****                     else
 680:.\main.c      ****                     {
 681:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2591              		.loc 1 681 0
 2592 0102 3B1C     		mov	r3, r7
 2593 0104 0833     		add	r3, r3, #8
 2594 0106 1A88     		ldrh	r2, [r3]
 2595 0108 FA23     		mov	r3, #250
 2596 010a DB00     		lsl	r3, r3, #3
 2597 010c 9A42     		cmp	r2, r3
 2598 010e 0CD8     		bhi	.L158
 2599              		.loc 1 681 0 is_stmt 0 discriminator 1
 2600 0110 3B1C     		mov	r3, r7
 2601 0112 0833     		add	r3, r3, #8
 2602 0114 1A88     		ldrh	r2, [r3]
 2603 0116 824B     		ldr	r3, .L189+20
 2604 0118 9A42     		cmp	r2, r3
 2605 011a 06D9     		bls	.L158
 682:.\main.c      ****                         {
 683:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2606              		.loc 1 683 0 is_stmt 1
 2607 011c 3B1C     		mov	r3, r7
 2608 011e 0833     		add	r3, r3, #8
 2609 0120 1B88     		ldrh	r3, [r3]
 2610 0122 181C     		mov	r0, r3
 2611 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2612 0128 48E0     		b	.L159
 2613              	.L158:
 684:.\main.c      ****                         }
 685:.\main.c      ****                         else
 686:.\main.c      ****                         {
 687:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2614              		.loc 1 687 0
 2615 012a 794B     		ldr	r3, .L189+4
 2616 012c 181C     		mov	r0, r3
 2617 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2618 0132 43E0     		b	.L159
 2619              	.L155:
 688:.\main.c      ****                         }
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 60


 689:.\main.c      ****                     }
 690:.\main.c      ****                 }
 691:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND) // upper bound checking, only move away is 
 2620              		.loc 1 691 0
 2621 0134 3B1C     		mov	r3, r7
 2622 0136 0C33     		add	r3, r3, #12
 2623 0138 1A88     		ldrh	r2, [r3]
 2624 013a 7A4B     		ldr	r3, .L189+24
 2625 013c 1B68     		ldr	r3, [r3]
 2626 013e 9A42     		cmp	r2, r3
 2627 0140 23D3     		bcc	.L160
 692:.\main.c      ****                 {
 693:.\main.c      ****                     if(avg > 1500)
 2628              		.loc 1 693 0
 2629 0142 3B1C     		mov	r3, r7
 2630 0144 0833     		add	r3, r3, #8
 2631 0146 1A88     		ldrh	r2, [r3]
 2632 0148 714B     		ldr	r3, .L189+4
 2633 014a 9A42     		cmp	r2, r3
 2634 014c 04D9     		bls	.L161
 694:.\main.c      ****                     {
 695:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2635              		.loc 1 695 0
 2636 014e 704B     		ldr	r3, .L189+4
 2637 0150 181C     		mov	r0, r3
 2638 0152 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2639 0156 31E0     		b	.L159
 2640              	.L161:
 696:.\main.c      ****                     }
 697:.\main.c      ****                     else
 698:.\main.c      ****                     {
 699:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2641              		.loc 1 699 0
 2642 0158 3B1C     		mov	r3, r7
 2643 015a 0833     		add	r3, r3, #8
 2644 015c 1A88     		ldrh	r2, [r3]
 2645 015e FA23     		mov	r3, #250
 2646 0160 DB00     		lsl	r3, r3, #3
 2647 0162 9A42     		cmp	r2, r3
 2648 0164 0CD8     		bhi	.L163
 2649              		.loc 1 699 0 is_stmt 0 discriminator 1
 2650 0166 3B1C     		mov	r3, r7
 2651 0168 0833     		add	r3, r3, #8
 2652 016a 1A88     		ldrh	r2, [r3]
 2653 016c 6C4B     		ldr	r3, .L189+20
 2654 016e 9A42     		cmp	r2, r3
 2655 0170 06D9     		bls	.L163
 700:.\main.c      ****                         {
 701:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2656              		.loc 1 701 0 is_stmt 1
 2657 0172 3B1C     		mov	r3, r7
 2658 0174 0833     		add	r3, r3, #8
 2659 0176 1B88     		ldrh	r3, [r3]
 2660 0178 181C     		mov	r0, r3
 2661 017a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2662 017e 1DE0     		b	.L159
 2663              	.L163:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 61


 702:.\main.c      ****                         }
 703:.\main.c      ****                         else
 704:.\main.c      ****                         {
 705:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2664              		.loc 1 705 0
 2665 0180 634B     		ldr	r3, .L189+4
 2666 0182 181C     		mov	r0, r3
 2667 0184 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2668 0188 18E0     		b	.L159
 2669              	.L160:
 706:.\main.c      ****                         }
 707:.\main.c      ****                     }
 708:.\main.c      ****                 }
 709:.\main.c      ****                 else
 710:.\main.c      ****                 {
 711:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2670              		.loc 1 711 0
 2671 018a 3B1C     		mov	r3, r7
 2672 018c 0833     		add	r3, r3, #8
 2673 018e 1A88     		ldrh	r2, [r3]
 2674 0190 FA23     		mov	r3, #250
 2675 0192 DB00     		lsl	r3, r3, #3
 2676 0194 9A42     		cmp	r2, r3
 2677 0196 0CD8     		bhi	.L164
 2678              		.loc 1 711 0 is_stmt 0 discriminator 1
 2679 0198 3B1C     		mov	r3, r7
 2680 019a 0833     		add	r3, r3, #8
 2681 019c 1A88     		ldrh	r2, [r3]
 2682 019e 604B     		ldr	r3, .L189+20
 2683 01a0 9A42     		cmp	r2, r3
 2684 01a2 06D9     		bls	.L164
 712:.\main.c      ****                     {
 713:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2685              		.loc 1 713 0 is_stmt 1
 2686 01a4 3B1C     		mov	r3, r7
 2687 01a6 0833     		add	r3, r3, #8
 2688 01a8 1B88     		ldrh	r3, [r3]
 2689 01aa 181C     		mov	r0, r3
 2690 01ac FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2691 01b0 04E0     		b	.L159
 2692              	.L164:
 714:.\main.c      ****                     }
 715:.\main.c      ****                     else
 716:.\main.c      ****                     {
 717:.\main.c      ****                         ELBW_PWM_WriteCompare(NEUTRAL);
 2693              		.loc 1 717 0
 2694 01b2 574B     		ldr	r3, .L189+4
 2695 01b4 181C     		mov	r0, r3
 2696 01b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 673:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2697              		.loc 1 673 0
 2698 01ba 65E0     		b	.L165
 2699              	.L159:
 2700 01bc 64E0     		b	.L165
 2701              	.L154:
 718:.\main.c      ****                     }
 719:.\main.c      ****                 }
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 62


 720:.\main.c      ****             }
 721:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 722:.\main.c      ****             {
 723:.\main.c      ****                 if(!stop_elb_dn_Read()){
 2702              		.loc 1 723 0
 2703 01be FFF7FEFF 		bl	stop_elb_dn_Read
 2704 01c2 031C     		mov	r3, r0
 2705 01c4 002B     		cmp	r3, #0
 2706 01c6 2BD1     		bne	.L166
 724:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) + BOUND_OFFSET;
 2707              		.loc 1 724 0
 2708 01c8 0120     		mov	r0, #1
 2709 01ca FFF7FEFF 		bl	potFeedback
 2710 01ce 031C     		mov	r3, r0
 2711 01d0 1433     		add	r3, r3, #20
 2712 01d2 1A1C     		mov	r2, r3
 2713 01d4 504B     		ldr	r3, .L189+12
 2714 01d6 1A60     		str	r2, [r3]
 725:.\main.c      ****                     if (avg < 1500)
 2715              		.loc 1 725 0
 2716 01d8 3B1C     		mov	r3, r7
 2717 01da 0833     		add	r3, r3, #8
 2718 01dc 1A88     		ldrh	r2, [r3]
 2719 01de 4F4B     		ldr	r3, .L189+16
 2720 01e0 9A42     		cmp	r2, r3
 2721 01e2 04D8     		bhi	.L167
 726:.\main.c      ****                     {
 727:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2722              		.loc 1 727 0
 2723 01e4 4A4B     		ldr	r3, .L189+4
 2724 01e6 181C     		mov	r0, r3
 2725 01e8 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2726 01ec 4CE0     		b	.L165
 2727              	.L167:
 728:.\main.c      ****                     }
 729:.\main.c      ****                     else
 730:.\main.c      ****                     {
 731:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2728              		.loc 1 731 0
 2729 01ee 3B1C     		mov	r3, r7
 2730 01f0 0833     		add	r3, r3, #8
 2731 01f2 1A88     		ldrh	r2, [r3]
 2732 01f4 FA23     		mov	r3, #250
 2733 01f6 DB00     		lsl	r3, r3, #3
 2734 01f8 9A42     		cmp	r2, r3
 2735 01fa 0CD8     		bhi	.L169
 2736              		.loc 1 731 0 is_stmt 0 discriminator 1
 2737 01fc 3B1C     		mov	r3, r7
 2738 01fe 0833     		add	r3, r3, #8
 2739 0200 1A88     		ldrh	r2, [r3]
 2740 0202 474B     		ldr	r3, .L189+20
 2741 0204 9A42     		cmp	r2, r3
 2742 0206 06D9     		bls	.L169
 732:.\main.c      ****                         {
 733:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2743              		.loc 1 733 0 is_stmt 1
 2744 0208 3B1C     		mov	r3, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 63


 2745 020a 0833     		add	r3, r3, #8
 2746 020c 1B88     		ldrh	r3, [r3]
 2747 020e 181C     		mov	r0, r3
 2748 0210 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2749 0214 38E0     		b	.L165
 2750              	.L169:
 734:.\main.c      ****                         }
 735:.\main.c      ****                         else
 736:.\main.c      ****                         {
 737:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2751              		.loc 1 737 0
 2752 0216 3E4B     		ldr	r3, .L189+4
 2753 0218 181C     		mov	r0, r3
 2754 021a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2755 021e 33E0     		b	.L165
 2756              	.L166:
 738:.\main.c      ****                         }
 739:.\main.c      ****                     }
 740:.\main.c      ****                 }
 741:.\main.c      ****                 else if(!stop_elb_up_Read()){
 2757              		.loc 1 741 0
 2758 0220 FFF7FEFF 		bl	stop_elb_up_Read
 2759 0224 031C     		mov	r3, r0
 2760 0226 002B     		cmp	r3, #0
 2761 0228 2BD1     		bne	.L170
 742:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) - BOUND_OFFSET;
 2762              		.loc 1 742 0
 2763 022a 0120     		mov	r0, #1
 2764 022c FFF7FEFF 		bl	potFeedback
 2765 0230 031C     		mov	r3, r0
 2766 0232 143B     		sub	r3, r3, #20
 2767 0234 1A1C     		mov	r2, r3
 2768 0236 3B4B     		ldr	r3, .L189+24
 2769 0238 1A60     		str	r2, [r3]
 743:.\main.c      ****                     if(avg > 1500)
 2770              		.loc 1 743 0
 2771 023a 3B1C     		mov	r3, r7
 2772 023c 0833     		add	r3, r3, #8
 2773 023e 1A88     		ldrh	r2, [r3]
 2774 0240 334B     		ldr	r3, .L189+4
 2775 0242 9A42     		cmp	r2, r3
 2776 0244 04D9     		bls	.L171
 744:.\main.c      ****                     {
 745:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2777              		.loc 1 745 0
 2778 0246 324B     		ldr	r3, .L189+4
 2779 0248 181C     		mov	r0, r3
 2780 024a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2781 024e 1BE0     		b	.L165
 2782              	.L171:
 746:.\main.c      ****                     }
 747:.\main.c      ****                     else
 748:.\main.c      ****                     {
 749:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2783              		.loc 1 749 0
 2784 0250 3B1C     		mov	r3, r7
 2785 0252 0833     		add	r3, r3, #8
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 64


 2786 0254 1A88     		ldrh	r2, [r3]
 2787 0256 FA23     		mov	r3, #250
 2788 0258 DB00     		lsl	r3, r3, #3
 2789 025a 9A42     		cmp	r2, r3
 2790 025c 0CD8     		bhi	.L173
 2791              		.loc 1 749 0 is_stmt 0 discriminator 1
 2792 025e 3B1C     		mov	r3, r7
 2793 0260 0833     		add	r3, r3, #8
 2794 0262 1A88     		ldrh	r2, [r3]
 2795 0264 2E4B     		ldr	r3, .L189+20
 2796 0266 9A42     		cmp	r2, r3
 2797 0268 06D9     		bls	.L173
 750:.\main.c      ****                         {
 751:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2798              		.loc 1 751 0 is_stmt 1
 2799 026a 3B1C     		mov	r3, r7
 2800 026c 0833     		add	r3, r3, #8
 2801 026e 1B88     		ldrh	r3, [r3]
 2802 0270 181C     		mov	r0, r3
 2803 0272 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2804 0276 07E0     		b	.L165
 2805              	.L173:
 752:.\main.c      ****                         }
 753:.\main.c      ****                         else
 754:.\main.c      ****                         {
 755:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2806              		.loc 1 755 0
 2807 0278 254B     		ldr	r3, .L189+4
 2808 027a 181C     		mov	r0, r3
 2809 027c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2810 0280 02E0     		b	.L165
 2811              	.L170:
 756:.\main.c      ****                         }
 757:.\main.c      ****                     }
 758:.\main.c      ****                 }
 759:.\main.c      ****                 else{
 760:.\main.c      ****                     LED_Write(1);
 2812              		.loc 1 760 0
 2813 0282 0120     		mov	r0, #1
 2814 0284 FFF7FEFF 		bl	LED_Write
 2815              	.L165:
 761:.\main.c      ****                 }
 762:.\main.c      ****             }
 763:.\main.c      ****             ELBOW_FLAG = 0;
 2816              		.loc 1 763 0
 2817 0288 274B     		ldr	r3, .L189+28
 2818 028a 0022     		mov	r2, #0
 2819 028c 1A70     		strb	r2, [r3]
 764:.\main.c      ****             break;
 2820              		.loc 1 764 0
 2821 028e 14E0     		b	.L143
 2822              	.L148:
 765:.\main.c      ****             
 766:.\main.c      ****         case elbw_wait:
 767:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2823              		.loc 1 767 0
 2824 0290 3B1C     		mov	r3, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 65


 2825 0292 0C33     		add	r3, r3, #12
 2826 0294 1A88     		ldrh	r2, [r3]
 2827 0296 204B     		ldr	r3, .L189+12
 2828 0298 1B68     		ldr	r3, [r3]
 2829 029a 9A42     		cmp	r2, r3
 2830 029c 06D9     		bls	.L174
 2831              		.loc 1 767 0 is_stmt 0 discriminator 1
 2832 029e 3B1C     		mov	r3, r7
 2833 02a0 0C33     		add	r3, r3, #12
 2834 02a2 1A88     		ldrh	r2, [r3]
 2835 02a4 1F4B     		ldr	r3, .L189+24
 2836 02a6 1B68     		ldr	r3, [r3]
 2837 02a8 9A42     		cmp	r2, r3
 2838 02aa 04D3     		bcc	.L175
 2839              	.L174:
 768:.\main.c      ****             {
 769:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2840              		.loc 1 769 0 is_stmt 1
 2841 02ac 184B     		ldr	r3, .L189+4
 2842 02ae 181C     		mov	r0, r3
 2843 02b0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 770:.\main.c      ****             }
 771:.\main.c      ****             break;
 2844              		.loc 1 771 0
 2845 02b4 01E0     		b	.L143
 2846              	.L175:
 2847 02b6 00E0     		b	.L143
 2848              	.L187:
 644:.\main.c      ****             break;
 2849              		.loc 1 644 0
 2850 02b8 C046     		mov	r8, r8
 2851              	.L143:
 772:.\main.c      ****     }
 773:.\main.c      ****     
 774:.\main.c      ****     switch(elbow_state){ //transitions
 2852              		.loc 1 774 0
 2853 02ba 144B     		ldr	r3, .L189
 2854 02bc 1B78     		ldrb	r3, [r3]
 2855 02be 012B     		cmp	r3, #1
 2856 02c0 0CD0     		beq	.L177
 2857 02c2 02DC     		bgt	.L178
 2858 02c4 002B     		cmp	r3, #0
 2859 02c6 05D0     		beq	.L179
 2860 02c8 34E0     		b	.L176
 2861              	.L178:
 2862 02ca 022B     		cmp	r3, #2
 2863 02cc 0AD0     		beq	.L180
 2864 02ce 032B     		cmp	r3, #3
 2865 02d0 14D0     		beq	.L181
 2866 02d2 2FE0     		b	.L176
 2867              	.L179:
 775:.\main.c      ****         case elbw_start:
 776:.\main.c      ****             elbow_state = elbw_init;
 2868              		.loc 1 776 0
 2869 02d4 0D4B     		ldr	r3, .L189
 2870 02d6 0122     		mov	r2, #1
 2871 02d8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 66


 777:.\main.c      ****             break;
 2872              		.loc 1 777 0
 2873 02da 2BE0     		b	.L176
 2874              	.L177:
 778:.\main.c      ****         
 779:.\main.c      ****         case elbw_init:
 780:.\main.c      ****             elbow_state = elbw_wait;
 2875              		.loc 1 780 0
 2876 02dc 0B4B     		ldr	r3, .L189
 2877 02de 0322     		mov	r2, #3
 2878 02e0 1A70     		strb	r2, [r3]
 781:.\main.c      ****             break;
 2879              		.loc 1 781 0
 2880 02e2 27E0     		b	.L176
 2881              	.L180:
 782:.\main.c      ****         
 783:.\main.c      ****         case elbw_execute:
 784:.\main.c      ****             if(ELBOW_FLAG)
 2882              		.loc 1 784 0
 2883 02e4 104B     		ldr	r3, .L189+28
 2884 02e6 1B78     		ldrb	r3, [r3]
 2885 02e8 002B     		cmp	r3, #0
 2886 02ea 03D0     		beq	.L182
 785:.\main.c      ****             {
 786:.\main.c      ****                 elbow_state = elbw_execute;
 2887              		.loc 1 786 0
 2888 02ec 074B     		ldr	r3, .L189
 2889 02ee 0222     		mov	r2, #2
 2890 02f0 1A70     		strb	r2, [r3]
 787:.\main.c      ****             }
 788:.\main.c      ****             else
 789:.\main.c      ****             {
 790:.\main.c      ****                 elbow_state = elbw_wait;
 791:.\main.c      ****             }
 792:.\main.c      ****             break;
 2891              		.loc 1 792 0
 2892 02f2 1FE0     		b	.L176
 2893              	.L182:
 790:.\main.c      ****                 elbow_state = elbw_wait;
 2894              		.loc 1 790 0
 2895 02f4 054B     		ldr	r3, .L189
 2896 02f6 0322     		mov	r2, #3
 2897 02f8 1A70     		strb	r2, [r3]
 2898              		.loc 1 792 0
 2899 02fa 1BE0     		b	.L176
 2900              	.L181:
 793:.\main.c      ****         
 794:.\main.c      ****         case elbw_wait:
 795:.\main.c      ****             if(ELBOW_FLAG)
 2901              		.loc 1 795 0
 2902 02fc 0A4B     		ldr	r3, .L189+28
 2903 02fe 1B78     		ldrb	r3, [r3]
 2904 0300 002B     		cmp	r3, #0
 2905 0302 13D0     		beq	.L184
 796:.\main.c      ****             {
 797:.\main.c      ****                 elbow_state = elbw_execute;
 2906              		.loc 1 797 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 67


 2907 0304 014B     		ldr	r3, .L189
 2908 0306 0222     		mov	r2, #2
 2909 0308 1A70     		strb	r2, [r3]
 798:.\main.c      ****             }
 799:.\main.c      ****             else
 800:.\main.c      ****             {
 801:.\main.c      ****                 elbow_state = elbw_wait; 
 802:.\main.c      ****             }
 803:.\main.c      ****             break;
 2910              		.loc 1 803 0
 2911 030a 12E0     		b	.L188
 2912              	.L190:
 2913              		.align	2
 2914              	.L189:
 2915 030c 00000000 		.word	elbow_state
 2916 0310 DC050000 		.word	1500
 2917 0314 00000000 		.word	data_array
 2918 0318 00000000 		.word	ELBOW_LOWER_BOUND
 2919 031c DB050000 		.word	1499
 2920 0320 E7030000 		.word	999
 2921 0324 00000000 		.word	ELBOW_UPPER_BOUND
 2922 0328 00000000 		.word	ELBOW_FLAG
 2923              	.L184:
 801:.\main.c      ****                 elbow_state = elbw_wait; 
 2924              		.loc 1 801 0
 2925 032c 044B     		ldr	r3, .L191
 2926 032e 0322     		mov	r2, #3
 2927 0330 1A70     		strb	r2, [r3]
 2928              	.L188:
 2929              		.loc 1 803 0
 2930 0332 C046     		mov	r8, r8
 2931              	.L176:
 804:.\main.c      ****     }  
 805:.\main.c      ****     return elbw_arr_cspot;
 2932              		.loc 1 805 0
 2933 0334 FB1D     		add	r3, r7, #7
 2934 0336 1B78     		ldrb	r3, [r3]
 806:.\main.c      **** }
 2935              		.loc 1 806 0
 2936 0338 181C     		mov	r0, r3
 2937 033a BD46     		mov	sp, r7
 2938 033c 05B0     		add	sp, sp, #20
 2939              		@ sp needed
 2940 033e 90BD     		pop	{r4, r7, pc}
 2941              	.L192:
 2942              		.align	2
 2943              	.L191:
 2944 0340 00000000 		.word	elbow_state
 2945              		.cfi_endproc
 2946              	.LFE50:
 2947              		.size	elbow, .-elbow
 2948              		.comm	shoulder_state,1,1
 2949              		.section	.text.shoulder,"ax",%progbits
 2950              		.align	2
 2951              		.global	shoulder
 2952              		.code	16
 2953              		.thumb_func
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 68


 2954              		.type	shoulder, %function
 2955              	shoulder:
 2956              	.LFB51:
 807:.\main.c      **** 
 808:.\main.c      **** //control the shoulder
 809:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 810:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 811:.\main.c      **** { 
 2957              		.loc 1 811 0
 2958              		.cfi_startproc
 2959 0000 90B5     		push	{r4, r7, lr}
 2960              		.cfi_def_cfa_offset 12
 2961              		.cfi_offset 4, -12
 2962              		.cfi_offset 7, -8
 2963              		.cfi_offset 14, -4
 2964 0002 85B0     		sub	sp, sp, #20
 2965              		.cfi_def_cfa_offset 32
 2966 0004 00AF     		add	r7, sp, #0
 2967              		.cfi_def_cfa_register 7
 2968 0006 021C     		mov	r2, r0
 2969 0008 3960     		str	r1, [r7]
 2970 000a FB1D     		add	r3, r7, #7
 2971 000c 1A70     		strb	r2, [r3]
 812:.\main.c      ****     //take instruction from data_array
 813:.\main.c      ****     //smooth input
 814:.\main.c      ****     //actuate the shoulder using PWM
 815:.\main.c      ****     //get feedback
 816:.\main.c      ****     uint8 i;
 817:.\main.c      ****     uint16 avg;
 818:.\main.c      ****     uint16 command;
 819:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2972              		.loc 1 819 0
 2973 000e 3C1C     		mov	r4, r7
 2974 0010 0C34     		add	r4, r4, #12
 2975 0012 0020     		mov	r0, #0
 2976 0014 FFF7FEFF 		bl	potFeedback
 2977 0018 031C     		mov	r3, r0
 2978 001a 2380     		strh	r3, [r4]
 820:.\main.c      ****     
 821:.\main.c      ****     switch(shoulder_state){ //actions
 2979              		.loc 1 821 0
 2980 001c BB4B     		ldr	r3, .L240
 2981 001e 1B78     		ldrb	r3, [r3]
 2982 0020 012B     		cmp	r3, #1
 2983 0022 07D0     		beq	.L195
 2984 0024 00DC     		bgt	.LCB2660
 2985 0026 47E1     		b	.L238	@long jump
 2986              	.LCB2660:
 2987 0028 022B     		cmp	r3, #2
 2988 002a 24D0     		beq	.L198
 2989 002c 032B     		cmp	r3, #3
 2990 002e 00D1     		bne	.LCB2664
 2991 0030 2EE1     		b	.L199	@long jump
 2992              	.LCB2664:
 2993 0032 42E1     		b	.L194
 2994              	.L195:
 822:.\main.c      ****         case shldr_start:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 69


 823:.\main.c      ****             break;
 824:.\main.c      **** 
 825:.\main.c      ****         case shldr_init:
 826:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2995              		.loc 1 826 0
 2996 0034 3B1C     		mov	r3, r7
 2997 0036 0F33     		add	r3, r3, #15
 2998 0038 0022     		mov	r2, #0
 2999 003a 1A70     		strb	r2, [r3]
 3000 003c 0EE0     		b	.L200
 3001              	.L201:
 827:.\main.c      ****             {
 828:.\main.c      ****                 shoulder_array[i] = 1500;
 3002              		.loc 1 828 0 discriminator 2
 3003 003e 3B1C     		mov	r3, r7
 3004 0040 0F33     		add	r3, r3, #15
 3005 0042 1B78     		ldrb	r3, [r3]
 3006 0044 5B00     		lsl	r3, r3, #1
 3007 0046 3A68     		ldr	r2, [r7]
 3008 0048 D318     		add	r3, r2, r3
 3009 004a B14A     		ldr	r2, .L240+4
 3010 004c 1A80     		strh	r2, [r3]
 826:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3011              		.loc 1 826 0 discriminator 2
 3012 004e 3B1C     		mov	r3, r7
 3013 0050 0F33     		add	r3, r3, #15
 3014 0052 1A78     		ldrb	r2, [r3]
 3015 0054 3B1C     		mov	r3, r7
 3016 0056 0F33     		add	r3, r3, #15
 3017 0058 0132     		add	r2, r2, #1
 3018 005a 1A70     		strb	r2, [r3]
 3019              	.L200:
 826:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3020              		.loc 1 826 0 is_stmt 0 discriminator 1
 3021 005c 3B1C     		mov	r3, r7
 3022 005e 0F33     		add	r3, r3, #15
 3023 0060 1B78     		ldrb	r3, [r3]
 3024 0062 132B     		cmp	r3, #19
 3025 0064 EBD9     		bls	.L201
 829:.\main.c      ****             }
 830:.\main.c      ****             shldr_arr_cspot = 0;
 3026              		.loc 1 830 0 is_stmt 1
 3027 0066 FB1D     		add	r3, r7, #7
 3028 0068 0022     		mov	r2, #0
 3029 006a 1A70     		strb	r2, [r3]
 831:.\main.c      ****                         
 832:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 3030              		.loc 1 832 0
 3031 006c A84B     		ldr	r3, .L240+4
 3032 006e 181C     		mov	r0, r3
 3033 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 833:.\main.c      ****             break;
 3034              		.loc 1 833 0
 3035 0074 21E1     		b	.L194
 3036              	.L198:
 834:.\main.c      **** 
 835:.\main.c      ****         case shldr_execute:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 70


 836:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 3037              		.loc 1 836 0
 3038 0076 3C1C     		mov	r4, r7
 3039 0078 0A34     		add	r4, r4, #10
 3040 007a A64B     		ldr	r3, .L240+8
 3041 007c 181C     		mov	r0, r3
 3042 007e 0C21     		mov	r1, #12
 3043 0080 0D22     		mov	r2, #13
 3044 0082 FFF7FEFF 		bl	make_command
 3045 0086 031C     		mov	r3, r0
 3046 0088 2380     		strh	r3, [r4]
 837:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 3047              		.loc 1 837 0
 3048 008a FB1D     		add	r3, r7, #7
 3049 008c 1B78     		ldrb	r3, [r3]
 3050 008e 5B00     		lsl	r3, r3, #1
 3051 0090 3A68     		ldr	r2, [r7]
 3052 0092 D318     		add	r3, r2, r3
 3053 0094 3A1C     		mov	r2, r7
 3054 0096 0A32     		add	r2, r2, #10
 3055 0098 1288     		ldrh	r2, [r2]
 3056 009a 1A80     		strh	r2, [r3]
 838:.\main.c      ****         
 839:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 3057              		.loc 1 839 0
 3058 009c FB1D     		add	r3, r7, #7
 3059 009e 1B78     		ldrb	r3, [r3]
 3060 00a0 122B     		cmp	r3, #18
 3061 00a2 05D8     		bhi	.L202
 840:.\main.c      ****             {
 841:.\main.c      ****                 shldr_arr_cspot++;
 3062              		.loc 1 841 0
 3063 00a4 FB1D     		add	r3, r7, #7
 3064 00a6 1A78     		ldrb	r2, [r3]
 3065 00a8 FB1D     		add	r3, r7, #7
 3066 00aa 0132     		add	r2, r2, #1
 3067 00ac 1A70     		strb	r2, [r3]
 3068 00ae 02E0     		b	.L203
 3069              	.L202:
 842:.\main.c      ****             }
 843:.\main.c      ****             else
 844:.\main.c      ****             {
 845:.\main.c      ****                 shldr_arr_cspot = 0;
 3070              		.loc 1 845 0
 3071 00b0 FB1D     		add	r3, r7, #7
 3072 00b2 0022     		mov	r2, #0
 3073 00b4 1A70     		strb	r2, [r3]
 3074              	.L203:
 846:.\main.c      ****             }
 847:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 3075              		.loc 1 847 0
 3076 00b6 3C1C     		mov	r4, r7
 3077 00b8 0834     		add	r4, r4, #8
 3078 00ba 3B68     		ldr	r3, [r7]
 3079 00bc 181C     		mov	r0, r3
 3080 00be 1421     		mov	r1, #20
 3081 00c0 FFF7FEFF 		bl	average
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 71


 3082 00c4 031C     		mov	r3, r0
 3083 00c6 2380     		strh	r3, [r4]
 848:.\main.c      ****             
 849:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 3084              		.loc 1 849 0
 3085 00c8 FFF7FEFF 		bl	stop_shdr_dn_Read
 3086 00cc 031C     		mov	r3, r0
 3087 00ce 002B     		cmp	r3, #0
 3088 00d0 05D0     		beq	.L204
 3089              		.loc 1 849 0 is_stmt 0 discriminator 1
 3090 00d2 FFF7FEFF 		bl	stop_shdr_up_Read
 3091 00d6 031C     		mov	r3, r0
 3092 00d8 002B     		cmp	r3, #0
 3093 00da 00D0     		beq	.LCB2760
 3094 00dc 6FE0     		b	.L205	@long jump
 3095              	.LCB2760:
 3096              	.L204:
 850:.\main.c      ****             {
 851:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3097              		.loc 1 851 0 is_stmt 1
 3098 00de 3B1C     		mov	r3, r7
 3099 00e0 0C33     		add	r3, r3, #12
 3100 00e2 1A88     		ldrh	r2, [r3]
 3101 00e4 8C4B     		ldr	r3, .L240+12
 3102 00e6 1B68     		ldr	r3, [r3]
 3103 00e8 9A42     		cmp	r2, r3
 3104 00ea 23D8     		bhi	.L206
 852:.\main.c      ****                 {
 853:.\main.c      ****                     if (avg < 1500)
 3105              		.loc 1 853 0
 3106 00ec 3B1C     		mov	r3, r7
 3107 00ee 0833     		add	r3, r3, #8
 3108 00f0 1A88     		ldrh	r2, [r3]
 3109 00f2 8A4B     		ldr	r3, .L240+16
 3110 00f4 9A42     		cmp	r2, r3
 3111 00f6 04D8     		bhi	.L207
 854:.\main.c      ****                     {
 855:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3112              		.loc 1 855 0
 3113 00f8 854B     		ldr	r3, .L240+4
 3114 00fa 181C     		mov	r0, r3
 3115 00fc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3116 0100 5CE0     		b	.L210
 3117              	.L207:
 856:.\main.c      ****                     }
 857:.\main.c      ****                     else
 858:.\main.c      ****                     {
 859:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3118              		.loc 1 859 0
 3119 0102 3B1C     		mov	r3, r7
 3120 0104 0833     		add	r3, r3, #8
 3121 0106 1A88     		ldrh	r2, [r3]
 3122 0108 FA23     		mov	r3, #250
 3123 010a DB00     		lsl	r3, r3, #3
 3124 010c 9A42     		cmp	r2, r3
 3125 010e 0CD8     		bhi	.L209
 3126              		.loc 1 859 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 72


 3127 0110 3B1C     		mov	r3, r7
 3128 0112 0833     		add	r3, r3, #8
 3129 0114 1A88     		ldrh	r2, [r3]
 3130 0116 824B     		ldr	r3, .L240+20
 3131 0118 9A42     		cmp	r2, r3
 3132 011a 06D9     		bls	.L209
 860:.\main.c      ****                         {
 861:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3133              		.loc 1 861 0 is_stmt 1
 3134 011c 3B1C     		mov	r3, r7
 3135 011e 0833     		add	r3, r3, #8
 3136 0120 1B88     		ldrh	r3, [r3]
 3137 0122 181C     		mov	r0, r3
 3138 0124 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3139 0128 48E0     		b	.L210
 3140              	.L209:
 862:.\main.c      ****                         }
 863:.\main.c      ****                         else
 864:.\main.c      ****                         {
 865:.\main.c      ****                             //throw error
 866:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3141              		.loc 1 866 0
 3142 012a 794B     		ldr	r3, .L240+4
 3143 012c 181C     		mov	r0, r3
 3144 012e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3145 0132 43E0     		b	.L210
 3146              	.L206:
 867:.\main.c      ****                         }
 868:.\main.c      ****                     }
 869:.\main.c      ****                 }
 870:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 3147              		.loc 1 870 0
 3148 0134 3B1C     		mov	r3, r7
 3149 0136 0C33     		add	r3, r3, #12
 3150 0138 1A88     		ldrh	r2, [r3]
 3151 013a 7A4B     		ldr	r3, .L240+24
 3152 013c 1B68     		ldr	r3, [r3]
 3153 013e 9A42     		cmp	r2, r3
 3154 0140 23D3     		bcc	.L211
 871:.\main.c      ****                 {
 872:.\main.c      ****                     if(avg > 1500)
 3155              		.loc 1 872 0
 3156 0142 3B1C     		mov	r3, r7
 3157 0144 0833     		add	r3, r3, #8
 3158 0146 1A88     		ldrh	r2, [r3]
 3159 0148 714B     		ldr	r3, .L240+4
 3160 014a 9A42     		cmp	r2, r3
 3161 014c 04D9     		bls	.L212
 873:.\main.c      ****                     {
 874:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3162              		.loc 1 874 0
 3163 014e 704B     		ldr	r3, .L240+4
 3164 0150 181C     		mov	r0, r3
 3165 0152 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3166 0156 31E0     		b	.L210
 3167              	.L212:
 875:.\main.c      ****                     }
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 73


 876:.\main.c      ****                     else
 877:.\main.c      ****                     {
 878:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3168              		.loc 1 878 0
 3169 0158 3B1C     		mov	r3, r7
 3170 015a 0833     		add	r3, r3, #8
 3171 015c 1A88     		ldrh	r2, [r3]
 3172 015e FA23     		mov	r3, #250
 3173 0160 DB00     		lsl	r3, r3, #3
 3174 0162 9A42     		cmp	r2, r3
 3175 0164 0CD8     		bhi	.L214
 3176              		.loc 1 878 0 is_stmt 0 discriminator 1
 3177 0166 3B1C     		mov	r3, r7
 3178 0168 0833     		add	r3, r3, #8
 3179 016a 1A88     		ldrh	r2, [r3]
 3180 016c 6C4B     		ldr	r3, .L240+20
 3181 016e 9A42     		cmp	r2, r3
 3182 0170 06D9     		bls	.L214
 879:.\main.c      ****                         {
 880:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3183              		.loc 1 880 0 is_stmt 1
 3184 0172 3B1C     		mov	r3, r7
 3185 0174 0833     		add	r3, r3, #8
 3186 0176 1B88     		ldrh	r3, [r3]
 3187 0178 181C     		mov	r0, r3
 3188 017a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3189 017e 1DE0     		b	.L210
 3190              	.L214:
 881:.\main.c      ****                         }
 882:.\main.c      ****                         else
 883:.\main.c      ****                         {
 884:.\main.c      ****                             //throw error
 885:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3191              		.loc 1 885 0
 3192 0180 634B     		ldr	r3, .L240+4
 3193 0182 181C     		mov	r0, r3
 3194 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3195 0188 18E0     		b	.L210
 3196              	.L211:
 886:.\main.c      ****                         }
 887:.\main.c      ****                     }
 888:.\main.c      ****                 }
 889:.\main.c      ****                 else
 890:.\main.c      ****                 {
 891:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3197              		.loc 1 891 0
 3198 018a 3B1C     		mov	r3, r7
 3199 018c 0833     		add	r3, r3, #8
 3200 018e 1A88     		ldrh	r2, [r3]
 3201 0190 FA23     		mov	r3, #250
 3202 0192 DB00     		lsl	r3, r3, #3
 3203 0194 9A42     		cmp	r2, r3
 3204 0196 0CD8     		bhi	.L215
 3205              		.loc 1 891 0 is_stmt 0 discriminator 1
 3206 0198 3B1C     		mov	r3, r7
 3207 019a 0833     		add	r3, r3, #8
 3208 019c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 74


 3209 019e 604B     		ldr	r3, .L240+20
 3210 01a0 9A42     		cmp	r2, r3
 3211 01a2 06D9     		bls	.L215
 892:.\main.c      ****                     {
 893:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3212              		.loc 1 893 0 is_stmt 1
 3213 01a4 3B1C     		mov	r3, r7
 3214 01a6 0833     		add	r3, r3, #8
 3215 01a8 1B88     		ldrh	r3, [r3]
 3216 01aa 181C     		mov	r0, r3
 3217 01ac FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3218 01b0 04E0     		b	.L210
 3219              	.L215:
 894:.\main.c      ****                     }
 895:.\main.c      ****                     else
 896:.\main.c      ****                     {
 897:.\main.c      ****                         //throw error
 898:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3220              		.loc 1 898 0
 3221 01b2 574B     		ldr	r3, .L240+4
 3222 01b4 181C     		mov	r0, r3
 3223 01b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 851:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3224              		.loc 1 851 0
 3225 01ba 65E0     		b	.L216
 3226              	.L210:
 3227 01bc 64E0     		b	.L216
 3228              	.L205:
 899:.\main.c      ****                     }
 900:.\main.c      ****                 }
 901:.\main.c      ****             }
 902:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 903:.\main.c      ****             {
 904:.\main.c      ****                 if(!stop_elb_dn_Read()){
 3229              		.loc 1 904 0
 3230 01be FFF7FEFF 		bl	stop_elb_dn_Read
 3231 01c2 031C     		mov	r3, r0
 3232 01c4 002B     		cmp	r3, #0
 3233 01c6 2BD1     		bne	.L217
 905:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) + BOUND_OFFSET;
 3234              		.loc 1 905 0
 3235 01c8 0020     		mov	r0, #0
 3236 01ca FFF7FEFF 		bl	potFeedback
 3237 01ce 031C     		mov	r3, r0
 3238 01d0 1433     		add	r3, r3, #20
 3239 01d2 1A1C     		mov	r2, r3
 3240 01d4 504B     		ldr	r3, .L240+12
 3241 01d6 1A60     		str	r2, [r3]
 906:.\main.c      ****                     if (avg < 1500)
 3242              		.loc 1 906 0
 3243 01d8 3B1C     		mov	r3, r7
 3244 01da 0833     		add	r3, r3, #8
 3245 01dc 1A88     		ldrh	r2, [r3]
 3246 01de 4F4B     		ldr	r3, .L240+16
 3247 01e0 9A42     		cmp	r2, r3
 3248 01e2 04D8     		bhi	.L218
 907:.\main.c      ****                     {
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 75


 908:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3249              		.loc 1 908 0
 3250 01e4 4A4B     		ldr	r3, .L240+4
 3251 01e6 181C     		mov	r0, r3
 3252 01e8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3253 01ec 4CE0     		b	.L216
 3254              	.L218:
 909:.\main.c      ****                     }
 910:.\main.c      ****                     else
 911:.\main.c      ****                     {
 912:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3255              		.loc 1 912 0
 3256 01ee 3B1C     		mov	r3, r7
 3257 01f0 0833     		add	r3, r3, #8
 3258 01f2 1A88     		ldrh	r2, [r3]
 3259 01f4 FA23     		mov	r3, #250
 3260 01f6 DB00     		lsl	r3, r3, #3
 3261 01f8 9A42     		cmp	r2, r3
 3262 01fa 0CD8     		bhi	.L220
 3263              		.loc 1 912 0 is_stmt 0 discriminator 1
 3264 01fc 3B1C     		mov	r3, r7
 3265 01fe 0833     		add	r3, r3, #8
 3266 0200 1A88     		ldrh	r2, [r3]
 3267 0202 474B     		ldr	r3, .L240+20
 3268 0204 9A42     		cmp	r2, r3
 3269 0206 06D9     		bls	.L220
 913:.\main.c      ****                         {
 914:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3270              		.loc 1 914 0 is_stmt 1
 3271 0208 3B1C     		mov	r3, r7
 3272 020a 0833     		add	r3, r3, #8
 3273 020c 1B88     		ldrh	r3, [r3]
 3274 020e 181C     		mov	r0, r3
 3275 0210 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3276 0214 38E0     		b	.L216
 3277              	.L220:
 915:.\main.c      ****                         }
 916:.\main.c      ****                         else
 917:.\main.c      ****                         {
 918:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3278              		.loc 1 918 0
 3279 0216 3E4B     		ldr	r3, .L240+4
 3280 0218 181C     		mov	r0, r3
 3281 021a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3282 021e 33E0     		b	.L216
 3283              	.L217:
 919:.\main.c      ****                         }
 920:.\main.c      ****                     }
 921:.\main.c      ****                 }
 922:.\main.c      ****                 else if(!stop_elb_up_Read()){
 3284              		.loc 1 922 0
 3285 0220 FFF7FEFF 		bl	stop_elb_up_Read
 3286 0224 031C     		mov	r3, r0
 3287 0226 002B     		cmp	r3, #0
 3288 0228 2BD1     		bne	.L221
 923:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) - BOUND_OFFSET;
 3289              		.loc 1 923 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 76


 3290 022a 0020     		mov	r0, #0
 3291 022c FFF7FEFF 		bl	potFeedback
 3292 0230 031C     		mov	r3, r0
 3293 0232 143B     		sub	r3, r3, #20
 3294 0234 1A1C     		mov	r2, r3
 3295 0236 3B4B     		ldr	r3, .L240+24
 3296 0238 1A60     		str	r2, [r3]
 924:.\main.c      ****                     if(avg > 1500)
 3297              		.loc 1 924 0
 3298 023a 3B1C     		mov	r3, r7
 3299 023c 0833     		add	r3, r3, #8
 3300 023e 1A88     		ldrh	r2, [r3]
 3301 0240 334B     		ldr	r3, .L240+4
 3302 0242 9A42     		cmp	r2, r3
 3303 0244 04D9     		bls	.L222
 925:.\main.c      ****                     {
 926:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3304              		.loc 1 926 0
 3305 0246 324B     		ldr	r3, .L240+4
 3306 0248 181C     		mov	r0, r3
 3307 024a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3308 024e 1BE0     		b	.L216
 3309              	.L222:
 927:.\main.c      ****                     }
 928:.\main.c      ****                     else
 929:.\main.c      ****                     {
 930:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3310              		.loc 1 930 0
 3311 0250 3B1C     		mov	r3, r7
 3312 0252 0833     		add	r3, r3, #8
 3313 0254 1A88     		ldrh	r2, [r3]
 3314 0256 FA23     		mov	r3, #250
 3315 0258 DB00     		lsl	r3, r3, #3
 3316 025a 9A42     		cmp	r2, r3
 3317 025c 0CD8     		bhi	.L224
 3318              		.loc 1 930 0 is_stmt 0 discriminator 1
 3319 025e 3B1C     		mov	r3, r7
 3320 0260 0833     		add	r3, r3, #8
 3321 0262 1A88     		ldrh	r2, [r3]
 3322 0264 2E4B     		ldr	r3, .L240+20
 3323 0266 9A42     		cmp	r2, r3
 3324 0268 06D9     		bls	.L224
 931:.\main.c      ****                         {
 932:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3325              		.loc 1 932 0 is_stmt 1
 3326 026a 3B1C     		mov	r3, r7
 3327 026c 0833     		add	r3, r3, #8
 3328 026e 1B88     		ldrh	r3, [r3]
 3329 0270 181C     		mov	r0, r3
 3330 0272 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3331 0276 07E0     		b	.L216
 3332              	.L224:
 933:.\main.c      ****                         }
 934:.\main.c      ****                         else
 935:.\main.c      ****                         {
 936:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3333              		.loc 1 936 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 77


 3334 0278 254B     		ldr	r3, .L240+4
 3335 027a 181C     		mov	r0, r3
 3336 027c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3337 0280 02E0     		b	.L216
 3338              	.L221:
 937:.\main.c      ****                         }
 938:.\main.c      ****                     }
 939:.\main.c      ****                 }
 940:.\main.c      ****                 else{
 941:.\main.c      ****                     LED_Write(1);
 3339              		.loc 1 941 0
 3340 0282 0120     		mov	r0, #1
 3341 0284 FFF7FEFF 		bl	LED_Write
 3342              	.L216:
 942:.\main.c      ****                 }
 943:.\main.c      ****             }
 944:.\main.c      ****             SHOULDER_FLAG = 0;
 3343              		.loc 1 944 0
 3344 0288 274B     		ldr	r3, .L240+28
 3345 028a 0022     		mov	r2, #0
 3346 028c 1A70     		strb	r2, [r3]
 945:.\main.c      ****             break;
 3347              		.loc 1 945 0
 3348 028e 14E0     		b	.L194
 3349              	.L199:
 946:.\main.c      ****             
 947:.\main.c      ****         case shldr_wait:
 948:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3350              		.loc 1 948 0
 3351 0290 3B1C     		mov	r3, r7
 3352 0292 0C33     		add	r3, r3, #12
 3353 0294 1A88     		ldrh	r2, [r3]
 3354 0296 204B     		ldr	r3, .L240+12
 3355 0298 1B68     		ldr	r3, [r3]
 3356 029a 9A42     		cmp	r2, r3
 3357 029c 06D9     		bls	.L225
 3358              		.loc 1 948 0 is_stmt 0 discriminator 1
 3359 029e 3B1C     		mov	r3, r7
 3360 02a0 0C33     		add	r3, r3, #12
 3361 02a2 1A88     		ldrh	r2, [r3]
 3362 02a4 1F4B     		ldr	r3, .L240+24
 3363 02a6 1B68     		ldr	r3, [r3]
 3364 02a8 9A42     		cmp	r2, r3
 3365 02aa 04D3     		bcc	.L226
 3366              	.L225:
 949:.\main.c      ****             {
 950:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3367              		.loc 1 950 0 is_stmt 1
 3368 02ac 184B     		ldr	r3, .L240+4
 3369 02ae 181C     		mov	r0, r3
 3370 02b0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 951:.\main.c      ****             }
 952:.\main.c      ****             break;
 3371              		.loc 1 952 0
 3372 02b4 01E0     		b	.L194
 3373              	.L226:
 3374 02b6 00E0     		b	.L194
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 78


 3375              	.L238:
 823:.\main.c      ****             break;
 3376              		.loc 1 823 0
 3377 02b8 C046     		mov	r8, r8
 3378              	.L194:
 953:.\main.c      ****     }
 954:.\main.c      ****     
 955:.\main.c      ****     switch(shoulder_state){ //transitions
 3379              		.loc 1 955 0
 3380 02ba 144B     		ldr	r3, .L240
 3381 02bc 1B78     		ldrb	r3, [r3]
 3382 02be 012B     		cmp	r3, #1
 3383 02c0 0CD0     		beq	.L228
 3384 02c2 02DC     		bgt	.L229
 3385 02c4 002B     		cmp	r3, #0
 3386 02c6 05D0     		beq	.L230
 3387 02c8 34E0     		b	.L227
 3388              	.L229:
 3389 02ca 022B     		cmp	r3, #2
 3390 02cc 0AD0     		beq	.L231
 3391 02ce 032B     		cmp	r3, #3
 3392 02d0 14D0     		beq	.L232
 3393 02d2 2FE0     		b	.L227
 3394              	.L230:
 956:.\main.c      ****         case shldr_start:
 957:.\main.c      ****             shoulder_state = shldr_init;
 3395              		.loc 1 957 0
 3396 02d4 0D4B     		ldr	r3, .L240
 3397 02d6 0122     		mov	r2, #1
 3398 02d8 1A70     		strb	r2, [r3]
 958:.\main.c      ****             break;
 3399              		.loc 1 958 0
 3400 02da 2BE0     		b	.L227
 3401              	.L228:
 959:.\main.c      ****         
 960:.\main.c      ****         case shldr_init:
 961:.\main.c      ****             shoulder_state = shldr_wait;
 3402              		.loc 1 961 0
 3403 02dc 0B4B     		ldr	r3, .L240
 3404 02de 0322     		mov	r2, #3
 3405 02e0 1A70     		strb	r2, [r3]
 962:.\main.c      ****             break;
 3406              		.loc 1 962 0
 3407 02e2 27E0     		b	.L227
 3408              	.L231:
 963:.\main.c      ****         
 964:.\main.c      ****         case shldr_execute:
 965:.\main.c      ****             if(SHOULDER_FLAG)
 3409              		.loc 1 965 0
 3410 02e4 104B     		ldr	r3, .L240+28
 3411 02e6 1B78     		ldrb	r3, [r3]
 3412 02e8 002B     		cmp	r3, #0
 3413 02ea 03D0     		beq	.L233
 966:.\main.c      ****             {
 967:.\main.c      ****                 shoulder_state = shldr_execute;
 3414              		.loc 1 967 0
 3415 02ec 074B     		ldr	r3, .L240
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 79


 3416 02ee 0222     		mov	r2, #2
 3417 02f0 1A70     		strb	r2, [r3]
 968:.\main.c      ****             }
 969:.\main.c      ****             else
 970:.\main.c      ****             {
 971:.\main.c      ****                 shoulder_state = shldr_wait;
 972:.\main.c      ****             }
 973:.\main.c      ****             break;
 3418              		.loc 1 973 0
 3419 02f2 1FE0     		b	.L227
 3420              	.L233:
 971:.\main.c      ****                 shoulder_state = shldr_wait;
 3421              		.loc 1 971 0
 3422 02f4 054B     		ldr	r3, .L240
 3423 02f6 0322     		mov	r2, #3
 3424 02f8 1A70     		strb	r2, [r3]
 3425              		.loc 1 973 0
 3426 02fa 1BE0     		b	.L227
 3427              	.L232:
 974:.\main.c      ****         
 975:.\main.c      ****         case shldr_wait:
 976:.\main.c      ****             if(SHOULDER_FLAG)
 3428              		.loc 1 976 0
 3429 02fc 0A4B     		ldr	r3, .L240+28
 3430 02fe 1B78     		ldrb	r3, [r3]
 3431 0300 002B     		cmp	r3, #0
 3432 0302 13D0     		beq	.L235
 977:.\main.c      ****             {
 978:.\main.c      ****                 shoulder_state = shldr_execute;
 3433              		.loc 1 978 0
 3434 0304 014B     		ldr	r3, .L240
 3435 0306 0222     		mov	r2, #2
 3436 0308 1A70     		strb	r2, [r3]
 979:.\main.c      ****             }
 980:.\main.c      ****             else
 981:.\main.c      ****             {
 982:.\main.c      ****                 shoulder_state = shldr_wait; 
 983:.\main.c      ****             }
 984:.\main.c      ****             break;
 3437              		.loc 1 984 0
 3438 030a 12E0     		b	.L239
 3439              	.L241:
 3440              		.align	2
 3441              	.L240:
 3442 030c 00000000 		.word	shoulder_state
 3443 0310 DC050000 		.word	1500
 3444 0314 00000000 		.word	data_array
 3445 0318 00000000 		.word	SHOULDER_LOWER_BOUND
 3446 031c DB050000 		.word	1499
 3447 0320 E7030000 		.word	999
 3448 0324 00000000 		.word	SHOULDER_UPPER_BOUND
 3449 0328 00000000 		.word	SHOULDER_FLAG
 3450              	.L235:
 982:.\main.c      ****                 shoulder_state = shldr_wait; 
 3451              		.loc 1 982 0
 3452 032c 044B     		ldr	r3, .L242
 3453 032e 0322     		mov	r2, #3
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 80


 3454 0330 1A70     		strb	r2, [r3]
 3455              	.L239:
 3456              		.loc 1 984 0
 3457 0332 C046     		mov	r8, r8
 3458              	.L227:
 985:.\main.c      ****     }  
 986:.\main.c      ****     return shldr_arr_cspot;
 3459              		.loc 1 986 0
 3460 0334 FB1D     		add	r3, r7, #7
 3461 0336 1B78     		ldrb	r3, [r3]
 987:.\main.c      **** }
 3462              		.loc 1 987 0
 3463 0338 181C     		mov	r0, r3
 3464 033a BD46     		mov	sp, r7
 3465 033c 05B0     		add	sp, sp, #20
 3466              		@ sp needed
 3467 033e 90BD     		pop	{r4, r7, pc}
 3468              	.L243:
 3469              		.align	2
 3470              	.L242:
 3471 0340 00000000 		.word	shoulder_state
 3472              		.cfi_endproc
 3473              	.LFE51:
 3474              		.size	shoulder, .-shoulder
 3475              		.comm	baseAzimuth_state,1,1
 3476              		.section	.text.baseAzimuth,"ax",%progbits
 3477              		.align	2
 3478              		.global	baseAzimuth
 3479              		.code	16
 3480              		.thumb_func
 3481              		.type	baseAzimuth, %function
 3482              	baseAzimuth:
 3483              	.LFB52:
 988:.\main.c      **** 
 989:.\main.c      **** //control the turret
 990:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 991:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 992:.\main.c      **** { 
 3484              		.loc 1 992 0
 3485              		.cfi_startproc
 3486 0000 90B5     		push	{r4, r7, lr}
 3487              		.cfi_def_cfa_offset 12
 3488              		.cfi_offset 4, -12
 3489              		.cfi_offset 7, -8
 3490              		.cfi_offset 14, -4
 3491 0002 85B0     		sub	sp, sp, #20
 3492              		.cfi_def_cfa_offset 32
 3493 0004 00AF     		add	r7, sp, #0
 3494              		.cfi_def_cfa_register 7
 3495 0006 021C     		mov	r2, r0
 3496 0008 3960     		str	r1, [r7]
 3497 000a FB1D     		add	r3, r7, #7
 3498 000c 1A70     		strb	r2, [r3]
 993:.\main.c      ****     //take instruction from data_array
 994:.\main.c      ****     //smooth input
 995:.\main.c      ****     //actuate the turret using PWM
 996:.\main.c      ****     uint8 i;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 81


 997:.\main.c      ****     uint16 avg;
 998:.\main.c      ****     uint16 command;
 999:.\main.c      ****     
1000:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3499              		.loc 1 1000 0
 3500 000e 4E4B     		ldr	r3, .L268
 3501 0010 1B78     		ldrb	r3, [r3]
 3502 0012 012B     		cmp	r3, #1
 3503 0014 03D0     		beq	.L246
 3504 0016 63DD     		ble	.L266
 3505 0018 022B     		cmp	r3, #2
 3506 001a 21D0     		beq	.L249
1001:.\main.c      ****         case BA_start:
1002:.\main.c      ****             break;
1003:.\main.c      **** 
1004:.\main.c      ****         case BA_init:
1005:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
1006:.\main.c      ****             {
1007:.\main.c      ****                 baseAz_array[i] = 1500;
1008:.\main.c      ****             }
1009:.\main.c      ****             BA_arr_cspot = 0;
1010:.\main.c      ****             
1011:.\main.c      ****             BA_PWM_WriteCompare(1500);
1012:.\main.c      ****             break;
1013:.\main.c      **** 
1014:.\main.c      ****         case BA_execute:
1015:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
1016:.\main.c      ****             
1017:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
1018:.\main.c      **** //            
1019:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
1020:.\main.c      **** //            {
1021:.\main.c      **** //                BA_arr_cspot++;
1022:.\main.c      **** //            }
1023:.\main.c      **** //            else
1024:.\main.c      **** //            {
1025:.\main.c      **** //                BA_arr_cspot = 0;
1026:.\main.c      **** //            }
1027:.\main.c      ****             
1028:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
1029:.\main.c      ****             
1030:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
1031:.\main.c      ****             
1032:.\main.c      **** //            if(avg == 1000 || avg == 2000)
1033:.\main.c      **** //            {
1034:.\main.c      **** //
1035:.\main.c      **** //                temp_val = temp_val*(-1);
1036:.\main.c      **** //            }
1037:.\main.c      ****             
1038:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
1039:.\main.c      ****             {
1040:.\main.c      ****                 BA_PWM_WriteCompare(avg);
1041:.\main.c      ****             }
1042:.\main.c      ****             else
1043:.\main.c      ****             {
1044:.\main.c      ****                 LED_Write(1);
1045:.\main.c      **** 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 82


1046:.\main.c      ****                 //throw error
1047:.\main.c      ****                 BA_PWM_WriteCompare(1500);
1048:.\main.c      ****             }
1049:.\main.c      ****             BA_FLAG = 0;
1050:.\main.c      ****             break;
1051:.\main.c      ****             
1052:.\main.c      ****         case BA_wait:
1053:.\main.c      ****             break;
 3507              		.loc 1 1053 0
 3508 001c 61E0     		b	.L245
 3509              	.L246:
1005:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3510              		.loc 1 1005 0
 3511 001e 3B1C     		mov	r3, r7
 3512 0020 0F33     		add	r3, r3, #15
 3513 0022 0022     		mov	r2, #0
 3514 0024 1A70     		strb	r2, [r3]
 3515 0026 0EE0     		b	.L251
 3516              	.L252:
1007:.\main.c      ****                 baseAz_array[i] = 1500;
 3517              		.loc 1 1007 0 discriminator 2
 3518 0028 3B1C     		mov	r3, r7
 3519 002a 0F33     		add	r3, r3, #15
 3520 002c 1B78     		ldrb	r3, [r3]
 3521 002e 5B00     		lsl	r3, r3, #1
 3522 0030 3A68     		ldr	r2, [r7]
 3523 0032 D318     		add	r3, r2, r3
 3524 0034 454A     		ldr	r2, .L268+4
 3525 0036 1A80     		strh	r2, [r3]
1005:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3526              		.loc 1 1005 0 discriminator 2
 3527 0038 3B1C     		mov	r3, r7
 3528 003a 0F33     		add	r3, r3, #15
 3529 003c 1A78     		ldrb	r2, [r3]
 3530 003e 3B1C     		mov	r3, r7
 3531 0040 0F33     		add	r3, r3, #15
 3532 0042 0132     		add	r2, r2, #1
 3533 0044 1A70     		strb	r2, [r3]
 3534              	.L251:
1005:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3535              		.loc 1 1005 0 is_stmt 0 discriminator 1
 3536 0046 3B1C     		mov	r3, r7
 3537 0048 0F33     		add	r3, r3, #15
 3538 004a 1B78     		ldrb	r3, [r3]
 3539 004c 132B     		cmp	r3, #19
 3540 004e EBD9     		bls	.L252
1009:.\main.c      ****             BA_arr_cspot = 0;
 3541              		.loc 1 1009 0 is_stmt 1
 3542 0050 FB1D     		add	r3, r7, #7
 3543 0052 0022     		mov	r2, #0
 3544 0054 1A70     		strb	r2, [r3]
1011:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3545              		.loc 1 1011 0
 3546 0056 3D4B     		ldr	r3, .L268+4
 3547 0058 181C     		mov	r0, r3
 3548 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
1012:.\main.c      ****             break;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 83


 3549              		.loc 1 1012 0
 3550 005e 40E0     		b	.L245
 3551              	.L249:
1015:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3552              		.loc 1 1015 0
 3553 0060 3C1C     		mov	r4, r7
 3554 0062 0C34     		add	r4, r4, #12
 3555 0064 3A4B     		ldr	r3, .L268+8
 3556 0066 181C     		mov	r0, r3
 3557 0068 0A21     		mov	r1, #10
 3558 006a 0B22     		mov	r2, #11
 3559 006c FFF7FEFF 		bl	make_command
 3560 0070 031C     		mov	r3, r0
 3561 0072 2380     		strh	r3, [r4]
1028:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3562              		.loc 1 1028 0
 3563 0074 FC1D     		add	r4, r7, #7
 3564 0076 FB1D     		add	r3, r7, #7
 3565 0078 1978     		ldrb	r1, [r3]
 3566 007a 3A68     		ldr	r2, [r7]
 3567 007c 3B1C     		mov	r3, r7
 3568 007e 0C33     		add	r3, r3, #12
 3569 0080 1B88     		ldrh	r3, [r3]
 3570 0082 081C     		mov	r0, r1
 3571 0084 111C     		mov	r1, r2
 3572 0086 1422     		mov	r2, #20
 3573 0088 FFF7FEFF 		bl	pos_to_vel
 3574 008c 031C     		mov	r3, r0
 3575 008e 2370     		strb	r3, [r4]
1030:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3576              		.loc 1 1030 0
 3577 0090 3C1C     		mov	r4, r7
 3578 0092 0A34     		add	r4, r4, #10
 3579 0094 3B68     		ldr	r3, [r7]
 3580 0096 181C     		mov	r0, r3
 3581 0098 1421     		mov	r1, #20
 3582 009a FFF7FEFF 		bl	average
 3583 009e 031C     		mov	r3, r0
 3584 00a0 2380     		strh	r3, [r4]
1038:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3585              		.loc 1 1038 0
 3586 00a2 3B1C     		mov	r3, r7
 3587 00a4 0A33     		add	r3, r3, #10
 3588 00a6 1A88     		ldrh	r2, [r3]
 3589 00a8 FA23     		mov	r3, #250
 3590 00aa DB00     		lsl	r3, r3, #3
 3591 00ac 9A42     		cmp	r2, r3
 3592 00ae 0CD8     		bhi	.L253
1038:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3593              		.loc 1 1038 0 is_stmt 0 discriminator 1
 3594 00b0 3B1C     		mov	r3, r7
 3595 00b2 0A33     		add	r3, r3, #10
 3596 00b4 1A88     		ldrh	r2, [r3]
 3597 00b6 274B     		ldr	r3, .L268+12
 3598 00b8 9A42     		cmp	r2, r3
 3599 00ba 06D9     		bls	.L253
1040:.\main.c      ****                 BA_PWM_WriteCompare(avg);
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 84


 3600              		.loc 1 1040 0 is_stmt 1
 3601 00bc 3B1C     		mov	r3, r7
 3602 00be 0A33     		add	r3, r3, #10
 3603 00c0 1B88     		ldrh	r3, [r3]
 3604 00c2 181C     		mov	r0, r3
 3605 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3606 00c8 06E0     		b	.L254
 3607              	.L253:
1044:.\main.c      ****                 LED_Write(1);
 3608              		.loc 1 1044 0
 3609 00ca 0120     		mov	r0, #1
 3610 00cc FFF7FEFF 		bl	LED_Write
1047:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3611              		.loc 1 1047 0
 3612 00d0 1E4B     		ldr	r3, .L268+4
 3613 00d2 181C     		mov	r0, r3
 3614 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3615              	.L254:
1049:.\main.c      ****             BA_FLAG = 0;
 3616              		.loc 1 1049 0
 3617 00d8 1F4B     		ldr	r3, .L268+16
 3618 00da 0022     		mov	r2, #0
 3619 00dc 1A70     		strb	r2, [r3]
1050:.\main.c      ****             break;
 3620              		.loc 1 1050 0
 3621 00de 00E0     		b	.L245
 3622              	.L266:
1002:.\main.c      ****             break;
 3623              		.loc 1 1002 0
 3624 00e0 C046     		mov	r8, r8
 3625              	.L245:
1054:.\main.c      ****     }
1055:.\main.c      ****     
1056:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3626              		.loc 1 1056 0
 3627 00e2 194B     		ldr	r3, .L268
 3628 00e4 1B78     		ldrb	r3, [r3]
 3629 00e6 012B     		cmp	r3, #1
 3630 00e8 0CD0     		beq	.L256
 3631 00ea 02DC     		bgt	.L257
 3632 00ec 002B     		cmp	r3, #0
 3633 00ee 05D0     		beq	.L258
 3634 00f0 24E0     		b	.L255
 3635              	.L257:
 3636 00f2 022B     		cmp	r3, #2
 3637 00f4 0AD0     		beq	.L259
 3638 00f6 032B     		cmp	r3, #3
 3639 00f8 14D0     		beq	.L260
 3640 00fa 1FE0     		b	.L255
 3641              	.L258:
1057:.\main.c      ****         case BA_start:
1058:.\main.c      ****             baseAzimuth_state = BA_init;
 3642              		.loc 1 1058 0
 3643 00fc 124B     		ldr	r3, .L268
 3644 00fe 0122     		mov	r2, #1
 3645 0100 1A70     		strb	r2, [r3]
1059:.\main.c      ****             break;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 85


 3646              		.loc 1 1059 0
 3647 0102 1BE0     		b	.L255
 3648              	.L256:
1060:.\main.c      ****         
1061:.\main.c      ****         case BA_init:
1062:.\main.c      ****             baseAzimuth_state = BA_wait;
 3649              		.loc 1 1062 0
 3650 0104 104B     		ldr	r3, .L268
 3651 0106 0322     		mov	r2, #3
 3652 0108 1A70     		strb	r2, [r3]
1063:.\main.c      ****             break;
 3653              		.loc 1 1063 0
 3654 010a 17E0     		b	.L255
 3655              	.L259:
1064:.\main.c      ****         
1065:.\main.c      ****         case BA_execute:
1066:.\main.c      ****             if(BA_FLAG)
 3656              		.loc 1 1066 0
 3657 010c 124B     		ldr	r3, .L268+16
 3658 010e 1B78     		ldrb	r3, [r3]
 3659 0110 002B     		cmp	r3, #0
 3660 0112 03D0     		beq	.L261
1067:.\main.c      ****             {
1068:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3661              		.loc 1 1068 0
 3662 0114 0C4B     		ldr	r3, .L268
 3663 0116 0222     		mov	r2, #2
 3664 0118 1A70     		strb	r2, [r3]
1069:.\main.c      ****             }
1070:.\main.c      ****             else
1071:.\main.c      ****             {
1072:.\main.c      ****                 baseAzimuth_state = BA_wait;
1073:.\main.c      ****             }
1074:.\main.c      ****             break;
 3665              		.loc 1 1074 0
 3666 011a 0FE0     		b	.L255
 3667              	.L261:
1072:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3668              		.loc 1 1072 0
 3669 011c 0A4B     		ldr	r3, .L268
 3670 011e 0322     		mov	r2, #3
 3671 0120 1A70     		strb	r2, [r3]
 3672              		.loc 1 1074 0
 3673 0122 0BE0     		b	.L255
 3674              	.L260:
1075:.\main.c      ****         
1076:.\main.c      ****         case BA_wait:
1077:.\main.c      ****             if(BA_FLAG)
 3675              		.loc 1 1077 0
 3676 0124 0C4B     		ldr	r3, .L268+16
 3677 0126 1B78     		ldrb	r3, [r3]
 3678 0128 002B     		cmp	r3, #0
 3679 012a 03D0     		beq	.L263
1078:.\main.c      ****             {
1079:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3680              		.loc 1 1079 0
 3681 012c 064B     		ldr	r3, .L268
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 86


 3682 012e 0222     		mov	r2, #2
 3683 0130 1A70     		strb	r2, [r3]
1080:.\main.c      ****             }
1081:.\main.c      ****             else
1082:.\main.c      ****             {
1083:.\main.c      ****                 baseAzimuth_state = BA_wait; 
1084:.\main.c      ****             }
1085:.\main.c      ****             break;
 3684              		.loc 1 1085 0
 3685 0132 02E0     		b	.L267
 3686              	.L263:
1083:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3687              		.loc 1 1083 0
 3688 0134 044B     		ldr	r3, .L268
 3689 0136 0322     		mov	r2, #3
 3690 0138 1A70     		strb	r2, [r3]
 3691              	.L267:
 3692              		.loc 1 1085 0
 3693 013a C046     		mov	r8, r8
 3694              	.L255:
1086:.\main.c      ****     }  
1087:.\main.c      ****     return BA_arr_cspot;
 3695              		.loc 1 1087 0
 3696 013c FB1D     		add	r3, r7, #7
 3697 013e 1B78     		ldrb	r3, [r3]
1088:.\main.c      **** }
 3698              		.loc 1 1088 0
 3699 0140 181C     		mov	r0, r3
 3700 0142 BD46     		mov	sp, r7
 3701 0144 05B0     		add	sp, sp, #20
 3702              		@ sp needed
 3703 0146 90BD     		pop	{r4, r7, pc}
 3704              	.L269:
 3705              		.align	2
 3706              	.L268:
 3707 0148 00000000 		.word	baseAzimuth_state
 3708 014c DC050000 		.word	1500
 3709 0150 00000000 		.word	data_array
 3710 0154 E7030000 		.word	999
 3711 0158 00000000 		.word	BA_FLAG
 3712              		.cfi_endproc
 3713              	.LFE52:
 3714              		.size	baseAzimuth, .-baseAzimuth
 3715              		.comm	effector_state,1,1
 3716              		.section	.text.effector,"ax",%progbits
 3717              		.align	2
 3718              		.global	effector
 3719              		.code	16
 3720              		.thumb_func
 3721              		.type	effector, %function
 3722              	effector:
 3723              	.LFB53:
1089:.\main.c      **** 
1090:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
1091:.\main.c      **** void effector()
1092:.\main.c      **** {
 3724              		.loc 1 1092 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 87


 3725              		.cfi_startproc
 3726 0000 90B5     		push	{r4, r7, lr}
 3727              		.cfi_def_cfa_offset 12
 3728              		.cfi_offset 4, -12
 3729              		.cfi_offset 7, -8
 3730              		.cfi_offset 14, -4
 3731 0002 83B0     		sub	sp, sp, #12
 3732              		.cfi_def_cfa_offset 24
 3733 0004 00AF     		add	r7, sp, #0
 3734              		.cfi_def_cfa_register 7
1093:.\main.c      ****     uint16 command;
1094:.\main.c      **** 
1095:.\main.c      ****     switch(effector_state){ //actions
 3735              		.loc 1 1095 0
 3736 0006 304B     		ldr	r3, .L290
 3737 0008 1B78     		ldrb	r3, [r3]
 3738 000a 012B     		cmp	r3, #1
 3739 000c 03D0     		beq	.L272
 3740 000e 29DD     		ble	.L289
 3741 0010 022B     		cmp	r3, #2
 3742 0012 05D0     		beq	.L275
1096:.\main.c      ****         case shldr_start:
1097:.\main.c      ****             break;
1098:.\main.c      **** 
1099:.\main.c      ****         case eff_init:           
1100:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
1101:.\main.c      ****            break;
1102:.\main.c      **** 
1103:.\main.c      ****         case eff_execute:
1104:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
1105:.\main.c      **** 
1106:.\main.c      ****             if(command <= 2000 && command >= 1000)
1107:.\main.c      ****             {
1108:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
1109:.\main.c      ****             }
1110:.\main.c      ****             else
1111:.\main.c      ****             {
1112:.\main.c      ****                 //throw error
1113:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
1114:.\main.c      ****             }
1115:.\main.c      ****             
1116:.\main.c      ****             EFFECTOR_FLAG = 0;
1117:.\main.c      ****             break;
1118:.\main.c      ****             
1119:.\main.c      ****         case eff_wait:
1120:.\main.c      ****             break;
 3743              		.loc 1 1120 0
 3744 0014 27E0     		b	.L271
 3745              	.L272:
1100:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3746              		.loc 1 1100 0
 3747 0016 2D4B     		ldr	r3, .L290+4
 3748 0018 181C     		mov	r0, r3
 3749 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1101:.\main.c      ****            break;
 3750              		.loc 1 1101 0
 3751 001e 22E0     		b	.L271
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 88


 3752              	.L275:
1104:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3753              		.loc 1 1104 0
 3754 0020 BC1D     		add	r4, r7, #6
 3755 0022 2B4B     		ldr	r3, .L290+8
 3756 0024 181C     		mov	r0, r3
 3757 0026 1421     		mov	r1, #20
 3758 0028 1522     		mov	r2, #21
 3759 002a FFF7FEFF 		bl	make_command
 3760 002e 031C     		mov	r3, r0
 3761 0030 2380     		strh	r3, [r4]
1106:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3762              		.loc 1 1106 0
 3763 0032 BB1D     		add	r3, r7, #6
 3764 0034 1A88     		ldrh	r2, [r3]
 3765 0036 FA23     		mov	r3, #250
 3766 0038 DB00     		lsl	r3, r3, #3
 3767 003a 9A42     		cmp	r2, r3
 3768 003c 0AD8     		bhi	.L277
1106:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3769              		.loc 1 1106 0 is_stmt 0 discriminator 1
 3770 003e BB1D     		add	r3, r7, #6
 3771 0040 1A88     		ldrh	r2, [r3]
 3772 0042 244B     		ldr	r3, .L290+12
 3773 0044 9A42     		cmp	r2, r3
 3774 0046 05D9     		bls	.L277
1108:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3775              		.loc 1 1108 0 is_stmt 1
 3776 0048 BB1D     		add	r3, r7, #6
 3777 004a 1B88     		ldrh	r3, [r3]
 3778 004c 181C     		mov	r0, r3
 3779 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3780 0052 03E0     		b	.L278
 3781              	.L277:
1113:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3782              		.loc 1 1113 0
 3783 0054 1D4B     		ldr	r3, .L290+4
 3784 0056 181C     		mov	r0, r3
 3785 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3786              	.L278:
1116:.\main.c      ****             EFFECTOR_FLAG = 0;
 3787              		.loc 1 1116 0
 3788 005c 1E4B     		ldr	r3, .L290+16
 3789 005e 0022     		mov	r2, #0
 3790 0060 1A70     		strb	r2, [r3]
1117:.\main.c      ****             break;
 3791              		.loc 1 1117 0
 3792 0062 00E0     		b	.L271
 3793              	.L289:
1097:.\main.c      ****             break;
 3794              		.loc 1 1097 0
 3795 0064 C046     		mov	r8, r8
 3796              	.L271:
1121:.\main.c      ****     }
1122:.\main.c      ****     
1123:.\main.c      ****     switch(effector_state){ //transitions
 3797              		.loc 1 1123 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 89


 3798 0066 184B     		ldr	r3, .L290
 3799 0068 1B78     		ldrb	r3, [r3]
 3800 006a 012B     		cmp	r3, #1
 3801 006c 0CD0     		beq	.L280
 3802 006e 02DC     		bgt	.L281
 3803 0070 002B     		cmp	r3, #0
 3804 0072 05D0     		beq	.L282
 3805 0074 24E0     		b	.L270
 3806              	.L281:
 3807 0076 022B     		cmp	r3, #2
 3808 0078 0AD0     		beq	.L283
 3809 007a 032B     		cmp	r3, #3
 3810 007c 14D0     		beq	.L284
 3811 007e 1FE0     		b	.L270
 3812              	.L282:
1124:.\main.c      ****         case eff_start:
1125:.\main.c      ****             effector_state = eff_init;
 3813              		.loc 1 1125 0
 3814 0080 114B     		ldr	r3, .L290
 3815 0082 0122     		mov	r2, #1
 3816 0084 1A70     		strb	r2, [r3]
1126:.\main.c      ****             break;
 3817              		.loc 1 1126 0
 3818 0086 1BE0     		b	.L270
 3819              	.L280:
1127:.\main.c      ****         
1128:.\main.c      ****         case eff_init:
1129:.\main.c      ****             effector_state = eff_wait;
 3820              		.loc 1 1129 0
 3821 0088 0F4B     		ldr	r3, .L290
 3822 008a 0322     		mov	r2, #3
 3823 008c 1A70     		strb	r2, [r3]
1130:.\main.c      ****             break;
 3824              		.loc 1 1130 0
 3825 008e 17E0     		b	.L270
 3826              	.L283:
1131:.\main.c      ****         
1132:.\main.c      ****         case eff_execute:
1133:.\main.c      ****             if(EFFECTOR_FLAG)
 3827              		.loc 1 1133 0
 3828 0090 114B     		ldr	r3, .L290+16
 3829 0092 1B78     		ldrb	r3, [r3]
 3830 0094 002B     		cmp	r3, #0
 3831 0096 03D0     		beq	.L285
1134:.\main.c      ****             {
1135:.\main.c      ****                 effector_state = eff_execute;
 3832              		.loc 1 1135 0
 3833 0098 0B4B     		ldr	r3, .L290
 3834 009a 0222     		mov	r2, #2
 3835 009c 1A70     		strb	r2, [r3]
1136:.\main.c      ****             }
1137:.\main.c      ****             else
1138:.\main.c      ****             {
1139:.\main.c      ****                 effector_state = eff_wait;
1140:.\main.c      ****             }
1141:.\main.c      ****             break;
 3836              		.loc 1 1141 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 90


 3837 009e 0FE0     		b	.L270
 3838              	.L285:
1139:.\main.c      ****                 effector_state = eff_wait;
 3839              		.loc 1 1139 0
 3840 00a0 094B     		ldr	r3, .L290
 3841 00a2 0322     		mov	r2, #3
 3842 00a4 1A70     		strb	r2, [r3]
 3843              		.loc 1 1141 0
 3844 00a6 0BE0     		b	.L270
 3845              	.L284:
1142:.\main.c      ****         
1143:.\main.c      ****         case eff_wait:
1144:.\main.c      ****             if(EFFECTOR_FLAG)
 3846              		.loc 1 1144 0
 3847 00a8 0B4B     		ldr	r3, .L290+16
 3848 00aa 1B78     		ldrb	r3, [r3]
 3849 00ac 002B     		cmp	r3, #0
 3850 00ae 03D0     		beq	.L287
1145:.\main.c      ****             {
1146:.\main.c      ****                 effector_state = eff_execute;
 3851              		.loc 1 1146 0
 3852 00b0 054B     		ldr	r3, .L290
 3853 00b2 0222     		mov	r2, #2
 3854 00b4 1A70     		strb	r2, [r3]
 3855 00b6 02E0     		b	.L288
 3856              	.L287:
1147:.\main.c      ****             }
1148:.\main.c      ****             else
1149:.\main.c      ****             {
1150:.\main.c      ****                 effector_state = eff_wait; 
 3857              		.loc 1 1150 0
 3858 00b8 034B     		ldr	r3, .L290
 3859 00ba 0322     		mov	r2, #3
 3860 00bc 1A70     		strb	r2, [r3]
 3861              	.L288:
1151:.\main.c      ****             }
1152:.\main.c      ****             break;
 3862              		.loc 1 1152 0
 3863 00be C046     		mov	r8, r8
 3864              	.L270:
1153:.\main.c      ****     }    
1154:.\main.c      **** }
 3865              		.loc 1 1154 0
 3866 00c0 BD46     		mov	sp, r7
 3867 00c2 03B0     		add	sp, sp, #12
 3868              		@ sp needed
 3869 00c4 90BD     		pop	{r4, r7, pc}
 3870              	.L291:
 3871 00c6 C046     		.align	2
 3872              	.L290:
 3873 00c8 00000000 		.word	effector_state
 3874 00cc DC050000 		.word	1500
 3875 00d0 00000000 		.word	data_array
 3876 00d4 E7030000 		.word	999
 3877 00d8 00000000 		.word	EFFECTOR_FLAG
 3878              		.cfi_endproc
 3879              	.LFE53:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 91


 3880              		.size	effector, .-effector
 3881              		.comm	phSensor_state,1,1
 3882              		.section	.text.phSensor,"ax",%progbits
 3883              		.align	2
 3884              		.global	phSensor
 3885              		.code	16
 3886              		.thumb_func
 3887              		.type	phSensor, %function
 3888              	phSensor:
 3889              	.LFB54:
1155:.\main.c      **** 
1156:.\main.c      **** enum phSensor_states {ph_start, ph_init, ph_execute, ph_wait} phSensor_state;
1157:.\main.c      **** void phSensor()
1158:.\main.c      **** {
 3890              		.loc 1 1158 0
 3891              		.cfi_startproc
 3892 0000 80B5     		push	{r7, lr}
 3893              		.cfi_def_cfa_offset 8
 3894              		.cfi_offset 7, -8
 3895              		.cfi_offset 14, -4
 3896 0002 00AF     		add	r7, sp, #0
 3897              		.cfi_def_cfa_register 7
1159:.\main.c      ****     switch(phSensor_state)
 3898              		.loc 1 1159 0
 3899 0004 1F4B     		ldr	r3, .L312
 3900 0006 1B78     		ldrb	r3, [r3]
 3901 0008 012B     		cmp	r3, #1
 3902 000a 06D0     		beq	.L309
 3903 000c 07DD     		ble	.L310
 3904 000e 022B     		cmp	r3, #2
 3905 0010 07D1     		bne	.L311
1160:.\main.c      ****     { //actions
1161:.\main.c      ****         case ph_start:
1162:.\main.c      ****             // Do nothing
1163:.\main.c      ****             break;
1164:.\main.c      **** 
1165:.\main.c      ****         case ph_init:           
1166:.\main.c      ****            // TODO: Add initialization code. might not need
1167:.\main.c      ****            break;
1168:.\main.c      **** 
1169:.\main.c      ****         case ph_execute:
1170:.\main.c      ****             // TODO:  Call Marshalls code for phSensor
1171:.\main.c      ****             PH_FLAG = 0;
 3906              		.loc 1 1171 0
 3907 0012 1D4B     		ldr	r3, .L312+4
 3908 0014 0022     		mov	r2, #0
 3909 0016 1A70     		strb	r2, [r3]
1172:.\main.c      ****             break;
 3910              		.loc 1 1172 0
 3911 0018 04E0     		b	.L293
 3912              	.L309:
1167:.\main.c      ****            break;
 3913              		.loc 1 1167 0
 3914 001a C046     		mov	r8, r8
 3915 001c 02E0     		b	.L293
 3916              	.L310:
1163:.\main.c      ****             break;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 92


 3917              		.loc 1 1163 0
 3918 001e C046     		mov	r8, r8
 3919 0020 00E0     		b	.L293
 3920              	.L311:
1173:.\main.c      ****             
1174:.\main.c      ****         case ph_wait:
1175:.\main.c      ****             break;
 3921              		.loc 1 1175 0
 3922 0022 C046     		mov	r8, r8
 3923              	.L293:
1176:.\main.c      ****     }
1177:.\main.c      ****     
1178:.\main.c      ****     switch(phSensor_state)
 3924              		.loc 1 1178 0
 3925 0024 174B     		ldr	r3, .L312
 3926 0026 1B78     		ldrb	r3, [r3]
 3927 0028 012B     		cmp	r3, #1
 3928 002a 0CD0     		beq	.L300
 3929 002c 02DC     		bgt	.L301
 3930 002e 002B     		cmp	r3, #0
 3931 0030 05D0     		beq	.L302
 3932 0032 24E0     		b	.L292
 3933              	.L301:
 3934 0034 022B     		cmp	r3, #2
 3935 0036 0AD0     		beq	.L303
 3936 0038 032B     		cmp	r3, #3
 3937 003a 14D0     		beq	.L304
 3938 003c 1FE0     		b	.L292
 3939              	.L302:
1179:.\main.c      ****     { //transitions
1180:.\main.c      ****         case ph_start:
1181:.\main.c      ****             phSensor_state = ph_init;
 3940              		.loc 1 1181 0
 3941 003e 114B     		ldr	r3, .L312
 3942 0040 0122     		mov	r2, #1
 3943 0042 1A70     		strb	r2, [r3]
1182:.\main.c      ****             break;
 3944              		.loc 1 1182 0
 3945 0044 1BE0     		b	.L292
 3946              	.L300:
1183:.\main.c      ****         
1184:.\main.c      ****         case ph_init:
1185:.\main.c      ****             phSensor_state = ph_wait;
 3947              		.loc 1 1185 0
 3948 0046 0F4B     		ldr	r3, .L312
 3949 0048 0322     		mov	r2, #3
 3950 004a 1A70     		strb	r2, [r3]
1186:.\main.c      ****             break;
 3951              		.loc 1 1186 0
 3952 004c 17E0     		b	.L292
 3953              	.L303:
1187:.\main.c      ****         
1188:.\main.c      ****         case ph_execute:
1189:.\main.c      ****             if(PH_FLAG)
 3954              		.loc 1 1189 0
 3955 004e 0E4B     		ldr	r3, .L312+4
 3956 0050 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 93


 3957 0052 002B     		cmp	r3, #0
 3958 0054 03D0     		beq	.L305
1190:.\main.c      ****                 phSensor_state = ph_execute;
 3959              		.loc 1 1190 0
 3960 0056 0B4B     		ldr	r3, .L312
 3961 0058 0222     		mov	r2, #2
 3962 005a 1A70     		strb	r2, [r3]
1191:.\main.c      ****             else
1192:.\main.c      ****                 phSensor_state = ph_wait;
1193:.\main.c      ****             break;
 3963              		.loc 1 1193 0
 3964 005c 0FE0     		b	.L292
 3965              	.L305:
1192:.\main.c      ****                 phSensor_state = ph_wait;
 3966              		.loc 1 1192 0
 3967 005e 094B     		ldr	r3, .L312
 3968 0060 0322     		mov	r2, #3
 3969 0062 1A70     		strb	r2, [r3]
 3970              		.loc 1 1193 0
 3971 0064 0BE0     		b	.L292
 3972              	.L304:
1194:.\main.c      ****         
1195:.\main.c      ****         case ph_wait:
1196:.\main.c      ****             if(PH_FLAG)
 3973              		.loc 1 1196 0
 3974 0066 084B     		ldr	r3, .L312+4
 3975 0068 1B78     		ldrb	r3, [r3]
 3976 006a 002B     		cmp	r3, #0
 3977 006c 03D0     		beq	.L307
1197:.\main.c      ****                 phSensor_state = ph_execute;
 3978              		.loc 1 1197 0
 3979 006e 054B     		ldr	r3, .L312
 3980 0070 0222     		mov	r2, #2
 3981 0072 1A70     		strb	r2, [r3]
 3982 0074 02E0     		b	.L308
 3983              	.L307:
1198:.\main.c      ****             else
1199:.\main.c      ****                 phSensor_state = ph_wait; 
 3984              		.loc 1 1199 0
 3985 0076 034B     		ldr	r3, .L312
 3986 0078 0322     		mov	r2, #3
 3987 007a 1A70     		strb	r2, [r3]
 3988              	.L308:
1200:.\main.c      ****             break;
 3989              		.loc 1 1200 0
 3990 007c C046     		mov	r8, r8
 3991              	.L292:
1201:.\main.c      ****     }    
1202:.\main.c      **** }
 3992              		.loc 1 1202 0
 3993 007e BD46     		mov	sp, r7
 3994              		@ sp needed
 3995 0080 80BD     		pop	{r7, pc}
 3996              	.L313:
 3997 0082 C046     		.align	2
 3998              	.L312:
 3999 0084 00000000 		.word	phSensor_state
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 94


 4000 0088 00000000 		.word	PH_FLAG
 4001              		.cfi_endproc
 4002              	.LFE54:
 4003              		.size	phSensor, .-phSensor
 4004              		.section	.text.initialize,"ax",%progbits
 4005              		.align	2
 4006              		.global	initialize
 4007              		.code	16
 4008              		.thumb_func
 4009              		.type	initialize, %function
 4010              	initialize:
 4011              	.LFB55:
1203:.\main.c      **** 
1204:.\main.c      **** //Initialization function for the program
1205:.\main.c      **** void initialize()
1206:.\main.c      **** {
 4012              		.loc 1 1206 0
 4013              		.cfi_startproc
 4014 0000 80B5     		push	{r7, lr}
 4015              		.cfi_def_cfa_offset 8
 4016              		.cfi_offset 7, -8
 4017              		.cfi_offset 14, -4
 4018 0002 82B0     		sub	sp, sp, #8
 4019              		.cfi_def_cfa_offset 16
 4020 0004 00AF     		add	r7, sp, #0
 4021              		.cfi_def_cfa_register 7
1207:.\main.c      ****     //initialize the wiznet
1208:.\main.c      ****     WIZ_RST_Write(0);
 4022              		.loc 1 1208 0
 4023 0006 0020     		mov	r0, #0
 4024 0008 FFF7FEFF 		bl	WIZ_RST_Write
1209:.\main.c      ****     CyDelay(10);
 4025              		.loc 1 1209 0
 4026 000c 0A20     		mov	r0, #10
 4027 000e FFF7FEFF 		bl	CyDelay
1210:.\main.c      ****     WIZ_RST_Write(1);
 4028              		.loc 1 1210 0
 4029 0012 0120     		mov	r0, #1
 4030 0014 FFF7FEFF 		bl	WIZ_RST_Write
1211:.\main.c      ****     WIZ_SS_Write(1);
 4031              		.loc 1 1211 0
 4032 0018 0120     		mov	r0, #1
 4033 001a FFF7FEFF 		bl	WIZ_SS_Write
 4034              	.LBB2:
1212:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4035              		.loc 1 1212 0
 4036 001e FB1D     		add	r3, r7, #7
 4037 0020 0022     		mov	r2, #0
 4038 0022 1A70     		strb	r2, [r3]
 4039 0024 0DE0     		b	.L315
 4040              	.L318:
1213:.\main.c      ****     {
1214:.\main.c      ****         if(WIZ_RDY_Read())
 4041              		.loc 1 1214 0
 4042 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 4043 002a 031C     		mov	r3, r0
 4044 002c 002B     		cmp	r3, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 95


 4045 002e 00D0     		beq	.L316
1215:.\main.c      ****         {
1216:.\main.c      ****             break;
 4046              		.loc 1 1216 0
 4047 0030 0BE0     		b	.L317
 4048              	.L316:
1217:.\main.c      ****         }
1218:.\main.c      ****         else
1219:.\main.c      ****         {
1220:.\main.c      ****             CyDelay(4);
 4049              		.loc 1 1220 0
 4050 0032 0420     		mov	r0, #4
 4051 0034 FFF7FEFF 		bl	CyDelay
1212:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4052              		.loc 1 1212 0
 4053 0038 FB1D     		add	r3, r7, #7
 4054 003a 1A78     		ldrb	r2, [r3]
 4055 003c FB1D     		add	r3, r7, #7
 4056 003e 0132     		add	r2, r2, #1
 4057 0040 1A70     		strb	r2, [r3]
 4058              	.L315:
1212:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4059              		.loc 1 1212 0 is_stmt 0 discriminator 1
 4060 0042 FB1D     		add	r3, r7, #7
 4061 0044 1B78     		ldrb	r3, [r3]
 4062 0046 632B     		cmp	r3, #99
 4063 0048 EDD9     		bls	.L318
 4064              	.L317:
 4065              	.LBE2:
1221:.\main.c      ****         }
1222:.\main.c      ****     }
1223:.\main.c      ****     
1224:.\main.c      ****     //Initialize state variables
1225:.\main.c      ****     baseAzimuth_state = BA_start;
 4066              		.loc 1 1225 0 is_stmt 1
 4067 004a 374B     		ldr	r3, .L321
 4068 004c 0022     		mov	r2, #0
 4069 004e 1A70     		strb	r2, [r3]
1226:.\main.c      ****     wristTilt_state = tilt_start;
 4070              		.loc 1 1226 0
 4071 0050 364B     		ldr	r3, .L321+4
 4072 0052 0022     		mov	r2, #0
 4073 0054 1A70     		strb	r2, [r3]
1227:.\main.c      ****     wristRotate_state = rotate_start;
 4074              		.loc 1 1227 0
 4075 0056 364B     		ldr	r3, .L321+8
 4076 0058 0022     		mov	r2, #0
 4077 005a 1A70     		strb	r2, [r3]
1228:.\main.c      ****     shoulder_state = shldr_start;
 4078              		.loc 1 1228 0
 4079 005c 354B     		ldr	r3, .L321+12
 4080 005e 0022     		mov	r2, #0
 4081 0060 1A70     		strb	r2, [r3]
1229:.\main.c      ****     elbow_state = elbw_start;
 4082              		.loc 1 1229 0
 4083 0062 354B     		ldr	r3, .L321+16
 4084 0064 0022     		mov	r2, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 96


 4085 0066 1A70     		strb	r2, [r3]
1230:.\main.c      ****     effector_state = eff_start;
 4086              		.loc 1 1230 0
 4087 0068 344B     		ldr	r3, .L321+20
 4088 006a 0022     		mov	r2, #0
 4089 006c 1A70     		strb	r2, [r3]
 4090              	.LBB3:
1231:.\main.c      ****     
1232:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4091              		.loc 1 1232 0
 4092 006e 0023     		mov	r3, #0
 4093 0070 3B60     		str	r3, [r7]
 4094 0072 07E0     		b	.L319
 4095              	.L320:
1233:.\main.c      ****         feedback_array[i] = 0;   
 4096              		.loc 1 1233 0 discriminator 2
 4097 0074 324A     		ldr	r2, .L321+24
 4098 0076 3B68     		ldr	r3, [r7]
 4099 0078 D318     		add	r3, r2, r3
 4100 007a 0022     		mov	r2, #0
 4101 007c 1A70     		strb	r2, [r3]
1232:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4102              		.loc 1 1232 0 discriminator 2
 4103 007e 3B68     		ldr	r3, [r7]
 4104 0080 0133     		add	r3, r3, #1
 4105 0082 3B60     		str	r3, [r7]
 4106              	.L319:
1232:.\main.c      ****     for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
 4107              		.loc 1 1232 0 is_stmt 0 discriminator 1
 4108 0084 3B68     		ldr	r3, [r7]
 4109 0086 0D2B     		cmp	r3, #13
 4110 0088 F4DD     		ble	.L320
 4111              	.LBE3:
1234:.\main.c      ****     }
1235:.\main.c      ****     
1236:.\main.c      ****     //start all of our components
1237:.\main.c      ****     SPIM_1_Start();
 4112              		.loc 1 1237 0 is_stmt 1
 4113 008a FFF7FEFF 		bl	SPIM_1_Start
1238:.\main.c      ****     Clock_pwm_Start();
 4114              		.loc 1 1238 0
 4115 008e FFF7FEFF 		bl	Clock_pwm_Start
1239:.\main.c      ****     Clock_counter_Start();
 4116              		.loc 1 1239 0
 4117 0092 FFF7FEFF 		bl	Clock_counter_Start
1240:.\main.c      ****     UART_1_Start();
 4118              		.loc 1 1240 0
 4119 0096 FFF7FEFF 		bl	UART_1_Start
1241:.\main.c      ****     SHLDR_PWM_Start();
 4120              		.loc 1 1241 0
 4121 009a FFF7FEFF 		bl	SHLDR_PWM_Start
1242:.\main.c      ****     BA_PWM_Start();
 4122              		.loc 1 1242 0
 4123 009e FFF7FEFF 		bl	BA_PWM_Start
1243:.\main.c      ****     ELBW_PWM_Start();
 4124              		.loc 1 1243 0
 4125 00a2 FFF7FEFF 		bl	ELBW_PWM_Start
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 97


1244:.\main.c      ****     EFFECTOR_PWM_Start();
 4126              		.loc 1 1244 0
 4127 00a6 FFF7FEFF 		bl	EFFECTOR_PWM_Start
1245:.\main.c      ****     ADC_Start();
 4128              		.loc 1 1245 0
 4129 00aa FFF7FEFF 		bl	ADC_Start
1246:.\main.c      ****     ADC_StartConvert();
 4130              		.loc 1 1246 0
 4131 00ae FFF7FEFF 		bl	ADC_StartConvert
1247:.\main.c      ****     
1248:.\main.c      ****     //uint8_t test_byte;
1249:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 4132              		.loc 1 1249 0
 4133 00b2 244B     		ldr	r3, .L321+28
 4134 00b4 0420     		mov	r0, #4
 4135 00b6 0121     		mov	r1, #1
 4136 00b8 1A1C     		mov	r2, r3
 4137 00ba FFF7FEFF 		bl	wiznetInit
1250:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1251:.\main.c      ****     
1252:.\main.c      ****     //Initialize the dynamixels
1253:.\main.c      ****     ServoSpeed(0xFE, 100);
 4138              		.loc 1 1253 0
 4139 00be FE20     		mov	r0, #254
 4140 00c0 6421     		mov	r1, #100
 4141 00c2 FFF7FEFF 		bl	ServoSpeed
1254:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 4142              		.loc 1 1254 0
 4143 00c6 204B     		ldr	r3, .L321+32
 4144 00c8 FE20     		mov	r0, #254
 4145 00ca 191C     		mov	r1, r3
 4146 00cc FFF7FEFF 		bl	SetServoTorque
1255:.\main.c      ****     
1256:.\main.c      ****     LED_Write(1);
 4147              		.loc 1 1256 0
 4148 00d0 0120     		mov	r0, #1
 4149 00d2 FFF7FEFF 		bl	LED_Write
1257:.\main.c      ****     //Initialize our motor drivers
1258:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 4150              		.loc 1 1258 0
 4151 00d6 1D4B     		ldr	r3, .L321+36
 4152 00d8 181C     		mov	r0, r3
 4153 00da FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1259:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 4154              		.loc 1 1259 0
 4155 00de 1B4B     		ldr	r3, .L321+36
 4156 00e0 181C     		mov	r0, r3
 4157 00e2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1260:.\main.c      ****     CyDelay(3000);
 4158              		.loc 1 1260 0
 4159 00e6 1A4B     		ldr	r3, .L321+40
 4160 00e8 181C     		mov	r0, r3
 4161 00ea FFF7FEFF 		bl	CyDelay
1261:.\main.c      ****     LED_Write(0);
 4162              		.loc 1 1261 0
 4163 00ee 0020     		mov	r0, #0
 4164 00f0 FFF7FEFF 		bl	LED_Write
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 98


1262:.\main.c      ****     
1263:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1264:.\main.c      ****     //SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
1265:.\main.c      ****     //SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
1266:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 4165              		.loc 1 1266 0
 4166 00f4 174B     		ldr	r3, .L321+44
 4167 00f6 181C     		mov	r0, r3
 4168 00f8 FFF7FEFF 		bl	CalibrationElbow
 4169 00fc 031C     		mov	r3, r0
 4170 00fe 1A1C     		mov	r2, r3
 4171 0100 154B     		ldr	r3, .L321+48
 4172 0102 1A60     		str	r2, [r3]
1267:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 4173              		.loc 1 1267 0
 4174 0104 154B     		ldr	r3, .L321+52
 4175 0106 181C     		mov	r0, r3
 4176 0108 FFF7FEFF 		bl	CalibrationElbow
 4177 010c 031C     		mov	r3, r0
 4178 010e 1A1C     		mov	r2, r3
 4179 0110 134B     		ldr	r3, .L321+56
 4180 0112 1A60     		str	r2, [r3]
1268:.\main.c      ****     
1269:.\main.c      ****     //helps for generating random arrays
1270:.\main.c      ****     //srand((unsigned) time(&t));
1271:.\main.c      ****     
1272:.\main.c      ****     CyGlobalIntEnable;
 4181              		.loc 1 1272 0
 4182              	@ 1272 ".\main.c" 1
 4183 0114 62B6     		CPSIE   i
 4184              	@ 0 "" 2
1273:.\main.c      ****     isr_1_StartEx(timer_isr);
 4185              		.loc 1 1273 0
 4186              		.code	16
 4187 0116 134B     		ldr	r3, .L321+60
 4188 0118 181C     		mov	r0, r3
 4189 011a FFF7FEFF 		bl	isr_1_StartEx
1274:.\main.c      ****     Timer_1_Start();
 4190              		.loc 1 1274 0
 4191 011e FFF7FEFF 		bl	Timer_1_Start
1275:.\main.c      ****     
1276:.\main.c      ****     //UART_TEST_Start();
1277:.\main.c      ****     
1278:.\main.c      **** }
 4192              		.loc 1 1278 0
 4193 0122 BD46     		mov	sp, r7
 4194 0124 02B0     		add	sp, sp, #8
 4195              		@ sp needed
 4196 0126 80BD     		pop	{r7, pc}
 4197              	.L322:
 4198              		.align	2
 4199              	.L321:
 4200 0128 00000000 		.word	baseAzimuth_state
 4201 012c 00000000 		.word	wristTilt_state
 4202 0130 00000000 		.word	wristRotate_state
 4203 0134 00000000 		.word	shoulder_state
 4204 0138 00000000 		.word	elbow_state
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 99


 4205 013c 00000000 		.word	effector_state
 4206 0140 00000000 		.word	feedback_array
 4207 0144 87690000 		.word	27015
 4208 0148 FF030000 		.word	1023
 4209 014c DC050000 		.word	1500
 4210 0150 B80B0000 		.word	3000
 4211 0154 A4060000 		.word	1700
 4212 0158 00000000 		.word	ELBOW_UPPER_BOUND
 4213 015c 14050000 		.word	1300
 4214 0160 00000000 		.word	ELBOW_LOWER_BOUND
 4215 0164 00000000 		.word	timer_isr
 4216              		.cfi_endproc
 4217              	.LFE55:
 4218              		.size	initialize, .-initialize
 4219              		.section	.text.main,"ax",%progbits
 4220              		.align	2
 4221              		.global	main
 4222              		.code	16
 4223              		.thumb_func
 4224              		.type	main, %function
 4225              	main:
 4226              	.LFB56:
1279:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1280:.\main.c      **** int main()
1281:.\main.c      **** {  
 4227              		.loc 1 1281 0
 4228              		.cfi_startproc
 4229 0000 90B5     		push	{r4, r7, lr}
 4230              		.cfi_def_cfa_offset 12
 4231              		.cfi_offset 4, -12
 4232              		.cfi_offset 7, -8
 4233              		.cfi_offset 14, -4
 4234 0002 B7B0     		sub	sp, sp, #220
 4235              		.cfi_def_cfa_offset 232
 4236 0004 00AF     		add	r7, sp, #0
 4237              		.cfi_def_cfa_register 7
1282:.\main.c      ****     //Define variables
1283:.\main.c      ****     //for testing
1284:.\main.c      **** //    time_t t; 
1285:.\main.c      **** //    char time_array[8];
1286:.\main.c      **** //    uint8 counter;
1287:.\main.c      **** //    int direction = 0;
1288:.\main.c      ****     
1289:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1290:.\main.c      ****     
1291:.\main.c      ****     uint8 BA_cspot;
1292:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1293:.\main.c      ****     uint8 shldr_cspot;
1294:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1295:.\main.c      ****     uint8 elbw_cspot;
1296:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1297:.\main.c      ****     uint8 WT_cspot;
1298:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1299:.\main.c      ****     uint8 WR_cspot;
1300:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1301:.\main.c      ****     
1302:.\main.c      ****     //for testing
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 100


1303:.\main.c      **** //    int increasing = 1;
1304:.\main.c      **** //    int first_count;
1305:.\main.c      **** //    int second_count;
1306:.\main.c      **** //    int temp_code_time;
1307:.\main.c      **** //    int code_time = 0;
1308:.\main.c      ****     
1309:.\main.c      ****     
1310:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4238              		.loc 1 1310 0
 4239 0006 3B1C     		mov	r3, r7
 4240 0008 D233     		add	r3, r3, #210
 4241 000a 0022     		mov	r2, #0
 4242 000c 1A70     		strb	r2, [r3]
1311:.\main.c      ****     int16 temp_val = 1500; 
 4243              		.loc 1 1311 0
 4244 000e 3B1C     		mov	r3, r7
 4245 0010 CA33     		add	r3, r3, #202
 4246 0012 624A     		ldr	r2, .L335
 4247 0014 1A80     		strh	r2, [r3]
1312:.\main.c      ****     
1313:.\main.c      ****     initialize();
 4248              		.loc 1 1313 0
 4249 0016 FFF7FEFF 		bl	initialize
 4250              	.L333:
1314:.\main.c      **** //    uint8 i;
1315:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1316:.\main.c      **** //    {
1317:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1318:.\main.c      **** //    }
1319:.\main.c      **** 
1320:.\main.c      ****     for(;;)
1321:.\main.c      ****     {
1322:.\main.c      ****         //UART_TEST_UartPutChar(31);
1323:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1324:.\main.c      ****         
1325:.\main.c      ****         if(stop_elb_dn_Read())
 4251              		.loc 1 1325 0
 4252 001a FFF7FEFF 		bl	stop_elb_dn_Read
 4253 001e 031C     		mov	r3, r0
 4254 0020 002B     		cmp	r3, #0
 4255 0022 03D0     		beq	.L324
1326:.\main.c      ****         {
1327:.\main.c      ****             LED_Write(1);
 4256              		.loc 1 1327 0
 4257 0024 0120     		mov	r0, #1
 4258 0026 FFF7FEFF 		bl	LED_Write
 4259 002a 02E0     		b	.L325
 4260              	.L324:
1328:.\main.c      ****         }
1329:.\main.c      ****         else
1330:.\main.c      ****         {
1331:.\main.c      ****             LED_Write(0);
 4261              		.loc 1 1331 0
 4262 002c 0020     		mov	r0, #0
 4263 002e FFF7FEFF 		bl	LED_Write
 4264              	.L325:
1332:.\main.c      ****         }
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 101


1333:.\main.c      ****         
1334:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4265              		.loc 1 1334 0
 4266 0032 FFF7FEFF 		bl	WIZ_INT_Read
 4267 0036 031C     		mov	r3, r0
 4268 0038 002B     		cmp	r3, #0
 4269 003a 20D1     		bne	.L326
1335:.\main.c      ****         {
1336:.\main.c      ****             wiznetClearInterrupts();
 4270              		.loc 1 1336 0
 4271 003c FFF7FEFF 		bl	wiznetClearInterrupts
1337:.\main.c      ****             fill_data_array();
 4272              		.loc 1 1337 0
 4273 0040 FFF7FEFF 		bl	fill_data_array
1338:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1339:.\main.c      ****             BA_FLAG = 1;
 4274              		.loc 1 1339 0
 4275 0044 564B     		ldr	r3, .L335+4
 4276 0046 0122     		mov	r2, #1
 4277 0048 1A70     		strb	r2, [r3]
1340:.\main.c      ****             WR_FLAG = 1;
 4278              		.loc 1 1340 0
 4279 004a 564B     		ldr	r3, .L335+8
 4280 004c 0122     		mov	r2, #1
 4281 004e 1A70     		strb	r2, [r3]
1341:.\main.c      ****             WT_FLAG = 1;
 4282              		.loc 1 1341 0
 4283 0050 554B     		ldr	r3, .L335+12
 4284 0052 0122     		mov	r2, #1
 4285 0054 1A70     		strb	r2, [r3]
1342:.\main.c      ****             SHOULDER_FLAG = 1;
 4286              		.loc 1 1342 0
 4287 0056 554B     		ldr	r3, .L335+16
 4288 0058 0122     		mov	r2, #1
 4289 005a 1A70     		strb	r2, [r3]
1343:.\main.c      ****             ELBOW_FLAG = 1;
 4290              		.loc 1 1343 0
 4291 005c 544B     		ldr	r3, .L335+20
 4292 005e 0122     		mov	r2, #1
 4293 0060 1A70     		strb	r2, [r3]
1344:.\main.c      ****             EFFECTOR_FLAG = 1;
 4294              		.loc 1 1344 0
 4295 0062 544B     		ldr	r3, .L335+24
 4296 0064 0122     		mov	r2, #1
 4297 0066 1A70     		strb	r2, [r3]
1345:.\main.c      ****             PH_FLAG = 1;
 4298              		.loc 1 1345 0
 4299 0068 534B     		ldr	r3, .L335+28
 4300 006a 0122     		mov	r2, #1
 4301 006c 1A70     		strb	r2, [r3]
1346:.\main.c      ****             fs_count = 0;
 4302              		.loc 1 1346 0
 4303 006e 3B1C     		mov	r3, r7
 4304 0070 D233     		add	r3, r3, #210
 4305 0072 0022     		mov	r2, #0
 4306 0074 1A70     		strb	r2, [r3]
1347:.\main.c      ****             send_packet(1);
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 102


 4307              		.loc 1 1347 0
 4308 0076 0120     		mov	r0, #1
 4309 0078 FFF7FEFF 		bl	send_packet
 4310 007c 06E0     		b	.L327
 4311              	.L326:
1348:.\main.c      ****             //wiznet = 0; //for testing
1349:.\main.c      ****         }
1350:.\main.c      ****         else
1351:.\main.c      ****         {
1352:.\main.c      ****             fs_count += 1;
 4312              		.loc 1 1352 0
 4313 007e 3B1C     		mov	r3, r7
 4314 0080 D233     		add	r3, r3, #210
 4315 0082 3A1C     		mov	r2, r7
 4316 0084 D232     		add	r2, r2, #210
 4317 0086 1278     		ldrb	r2, [r2]
 4318 0088 0132     		add	r2, r2, #1
 4319 008a 1A70     		strb	r2, [r3]
 4320              	.L327:
1353:.\main.c      ****         }
1354:.\main.c      ****         
1355:.\main.c      ****         if(fs_count >= 50)
 4321              		.loc 1 1355 0
 4322 008c 3B1C     		mov	r3, r7
 4323 008e D233     		add	r3, r3, #210
 4324 0090 1B78     		ldrb	r3, [r3]
 4325 0092 312B     		cmp	r3, #49
 4326 0094 2CD9     		bls	.L328
1356:.\main.c      ****         {
1357:.\main.c      ****             temp_val = 1500;
 4327              		.loc 1 1357 0
 4328 0096 3B1C     		mov	r3, r7
 4329 0098 CA33     		add	r3, r3, #202
 4330 009a 404A     		ldr	r2, .L335
 4331 009c 1A80     		strh	r2, [r3]
 4332              	.LBB4:
1358:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4333              		.loc 1 1358 0
 4334 009e 0023     		mov	r3, #0
 4335 00a0 CC20     		mov	r0, #204
 4336 00a2 C019     		add	r0, r0, r7
 4337 00a4 0360     		str	r3, [r0]
 4338 00a6 1DE0     		b	.L329
 4339              	.L330:
1359:.\main.c      ****             {
1360:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4340              		.loc 1 1360 0 discriminator 2
 4341 00a8 3B1C     		mov	r3, r7
 4342 00aa CA33     		add	r3, r3, #202
 4343 00ac 0022     		mov	r2, #0
 4344 00ae 9B5E     		ldrsh	r3, [r3, r2]
 4345 00b0 1B12     		asr	r3, r3, #8
 4346 00b2 9BB2     		uxth	r3, r3
 4347 00b4 DAB2     		uxtb	r2, r3
 4348 00b6 4149     		ldr	r1, .L335+32
 4349 00b8 CC20     		mov	r0, #204
 4350 00ba C019     		add	r0, r0, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 103


 4351 00bc 0368     		ldr	r3, [r0]
 4352 00be CB18     		add	r3, r1, r3
 4353 00c0 1A70     		strb	r2, [r3]
1361:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4354              		.loc 1 1361 0 discriminator 2
 4355 00c2 CC22     		mov	r2, #204
 4356 00c4 D219     		add	r2, r2, r7
 4357 00c6 1368     		ldr	r3, [r2]
 4358 00c8 0133     		add	r3, r3, #1
 4359 00ca 3A1C     		mov	r2, r7
 4360 00cc CA32     		add	r2, r2, #202
 4361 00ce 1288     		ldrh	r2, [r2]
 4362 00d0 D1B2     		uxtb	r1, r2
 4363 00d2 3A4A     		ldr	r2, .L335+32
 4364 00d4 D154     		strb	r1, [r2, r3]
1358:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4365              		.loc 1 1358 0 discriminator 2
 4366 00d6 CC20     		mov	r0, #204
 4367 00d8 C019     		add	r0, r0, r7
 4368 00da 0368     		ldr	r3, [r0]
 4369 00dc 0233     		add	r3, r3, #2
 4370 00de CC22     		mov	r2, #204
 4371 00e0 D219     		add	r2, r2, r7
 4372 00e2 1360     		str	r3, [r2]
 4373              	.L329:
1358:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4374              		.loc 1 1358 0 is_stmt 0 discriminator 1
 4375 00e4 CC20     		mov	r0, #204
 4376 00e6 C019     		add	r0, r0, r7
 4377 00e8 0368     		ldr	r3, [r0]
 4378 00ea 152B     		cmp	r3, #21
 4379 00ec DCDD     		ble	.L330
 4380              	.LBE4:
1362:.\main.c      ****             }
1363:.\main.c      ****         }
1364:.\main.c      ****         else
1365:.\main.c      ****         {
1366:.\main.c      ****         
1367:.\main.c      ****         //if(wiznet gives a complete packet)
1368:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1369:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1370:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1371:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1372:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1373:.\main.c      ****             effector();
1374:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
1375:.\main.c      ****             send_packet(0); //send feedback onece every tick
1376:.\main.c      ****         }
1377:.\main.c      **** 
1378:.\main.c      **** //        else{dropped_packets++}
1379:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1380:.\main.c      **** //        LED_Write(0);
1381:.\main.c      **** //        temp_code_time = second_count - first_count;
1382:.\main.c      **** //        if(temp_code_time > code_time)
1383:.\main.c      **** //        {
1384:.\main.c      **** //            code_time = temp_code_time;
1385:.\main.c      **** //            itoa(code_time, time_array);
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 104


1386:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1387:.\main.c      **** //        }
1388:.\main.c      ****         
1389:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4381              		.loc 1 1389 0 is_stmt 1
 4382 00ee 4AE0     		b	.L334
 4383              	.L328:
1368:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4384              		.loc 1 1368 0
 4385 00f0 3C1C     		mov	r4, r7
 4386 00f2 D734     		add	r4, r4, #215
 4387 00f4 3B1C     		mov	r3, r7
 4388 00f6 D733     		add	r3, r3, #215
 4389 00f8 1A78     		ldrb	r2, [r3]
 4390 00fa 3B1C     		mov	r3, r7
 4391 00fc A033     		add	r3, r3, #160
 4392 00fe 101C     		mov	r0, r2
 4393 0100 191C     		mov	r1, r3
 4394 0102 FFF7FEFF 		bl	baseAzimuth
 4395 0106 031C     		mov	r3, r0
 4396 0108 2370     		strb	r3, [r4]
1369:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4397              		.loc 1 1369 0
 4398 010a 3C1C     		mov	r4, r7
 4399 010c D634     		add	r4, r4, #214
 4400 010e 3B1C     		mov	r3, r7
 4401 0110 D633     		add	r3, r3, #214
 4402 0112 1A78     		ldrb	r2, [r3]
 4403 0114 3B1C     		mov	r3, r7
 4404 0116 7833     		add	r3, r3, #120
 4405 0118 101C     		mov	r0, r2
 4406 011a 191C     		mov	r1, r3
 4407 011c FFF7FEFF 		bl	shoulder
 4408 0120 031C     		mov	r3, r0
 4409 0122 2370     		strb	r3, [r4]
1370:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4410              		.loc 1 1370 0
 4411 0124 3C1C     		mov	r4, r7
 4412 0126 D534     		add	r4, r4, #213
 4413 0128 3B1C     		mov	r3, r7
 4414 012a D533     		add	r3, r3, #213
 4415 012c 1A78     		ldrb	r2, [r3]
 4416 012e 3B1C     		mov	r3, r7
 4417 0130 5033     		add	r3, r3, #80
 4418 0132 101C     		mov	r0, r2
 4419 0134 191C     		mov	r1, r3
 4420 0136 FFF7FEFF 		bl	elbow
 4421 013a 031C     		mov	r3, r0
 4422 013c 2370     		strb	r3, [r4]
1371:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4423              		.loc 1 1371 0
 4424 013e 3C1C     		mov	r4, r7
 4425 0140 D434     		add	r4, r4, #212
 4426 0142 3B1C     		mov	r3, r7
 4427 0144 D433     		add	r3, r3, #212
 4428 0146 1A78     		ldrb	r2, [r3]
 4429 0148 3B1C     		mov	r3, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 105


 4430 014a 2833     		add	r3, r3, #40
 4431 014c 101C     		mov	r0, r2
 4432 014e 191C     		mov	r1, r3
 4433 0150 FFF7FEFF 		bl	wristTilt
 4434 0154 031C     		mov	r3, r0
 4435 0156 2370     		strb	r3, [r4]
1372:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4436              		.loc 1 1372 0
 4437 0158 3C1C     		mov	r4, r7
 4438 015a D334     		add	r4, r4, #211
 4439 015c 3B1C     		mov	r3, r7
 4440 015e D333     		add	r3, r3, #211
 4441 0160 1A78     		ldrb	r2, [r3]
 4442 0162 3B1C     		mov	r3, r7
 4443 0164 101C     		mov	r0, r2
 4444 0166 191C     		mov	r1, r3
 4445 0168 FFF7FEFF 		bl	wristRotate
 4446 016c 031C     		mov	r3, r0
 4447 016e 2370     		strb	r3, [r4]
1373:.\main.c      ****             effector();
 4448              		.loc 1 1373 0
 4449 0170 FFF7FEFF 		bl	effector
1374:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
 4450              		.loc 1 1374 0
 4451 0174 124B     		ldr	r3, .L335+36
 4452 0176 5B78     		ldrb	r3, [r3, #1]
 4453 0178 0133     		add	r3, r3, #1
 4454 017a DAB2     		uxtb	r2, r3
 4455 017c 104B     		ldr	r3, .L335+36
 4456 017e 5A70     		strb	r2, [r3, #1]
1375:.\main.c      ****             send_packet(0); //send feedback onece every tick
 4457              		.loc 1 1375 0
 4458 0180 0020     		mov	r0, #0
 4459 0182 FFF7FEFF 		bl	send_packet
 4460              	.L334:
 4461              		.loc 1 1389 0
 4462 0186 C046     		mov	r8, r8
 4463              	.L332:
 4464              		.loc 1 1389 0 is_stmt 0 discriminator 1
 4465 0188 0E4B     		ldr	r3, .L335+40
 4466 018a 1B78     		ldrb	r3, [r3]
 4467 018c DBB2     		uxtb	r3, r3
 4468 018e 002B     		cmp	r3, #0
 4469 0190 FAD0     		beq	.L332
1390:.\main.c      ****         timerFlag = 0;
 4470              		.loc 1 1390 0 is_stmt 1
 4471 0192 0C4B     		ldr	r3, .L335+40
 4472 0194 0022     		mov	r2, #0
 4473 0196 1A70     		strb	r2, [r3]
1391:.\main.c      ****     
1392:.\main.c      ****         
1393:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1394:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1395:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1396:.\main.c      **** //        counter++;
1397:.\main.c      **** //        
1398:.\main.c      **** //        if(counter == 50)
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 106


1399:.\main.c      **** //        {
1400:.\main.c      **** //        
1401:.\main.c      **** //            if(increasing)
1402:.\main.c      **** //            {
1403:.\main.c      **** //                temp_val += 100;
1404:.\main.c      **** //                if(temp_val == 1000)
1405:.\main.c      **** //                {
1406:.\main.c      **** //                    increasing = 0;
1407:.\main.c      **** //                }
1408:.\main.c      **** //            }
1409:.\main.c      **** //            else
1410:.\main.c      **** //            {
1411:.\main.c      **** //                temp_val -= 100;
1412:.\main.c      **** //                if(temp_val == -1000)
1413:.\main.c      **** //                {
1414:.\main.c      **** //                    increasing = 1;   
1415:.\main.c      **** //                }
1416:.\main.c      **** //            }
1417:.\main.c      **** //            
1418:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1419:.\main.c      **** //            //int16 forward = 1000;
1420:.\main.c      **** //            //int16 backward = -1000;
1421:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1422:.\main.c      **** //            {
1423:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1424:.\main.c      **** //                //test_array[i] = random_number >> 8;
1425:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1426:.\main.c      **** //                test_array[i] = temp_val >> 8;
1427:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1428:.\main.c      **** //            }
1429:.\main.c      **** ////            counter = 0;
1430:.\main.c      **** //            wiznet = 1;
1431:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 4474              		.loc 1 1431 0
 4475 0198 3FE7     		b	.L333
 4476              	.L336:
 4477 019a C046     		.align	2
 4478              	.L335:
 4479 019c DC050000 		.word	1500
 4480 01a0 00000000 		.word	BA_FLAG
 4481 01a4 00000000 		.word	WR_FLAG
 4482 01a8 00000000 		.word	WT_FLAG
 4483 01ac 00000000 		.word	SHOULDER_FLAG
 4484 01b0 00000000 		.word	ELBOW_FLAG
 4485 01b4 00000000 		.word	EFFECTOR_FLAG
 4486 01b8 00000000 		.word	PH_FLAG
 4487 01bc 00000000 		.word	data_array
 4488 01c0 00000000 		.word	feedback_array
 4489 01c4 00000000 		.word	timerFlag
 4490              		.cfi_endproc
 4491              	.LFE56:
 4492              		.size	main, .-main
 4493              		.text
 4494              	.Letext0:
 4495              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4496              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4497              		.file 4 ".\\Generated_Source\\PSoC4/cytypes.h"
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 107


 4498              		.file 5 ".\\main.h"
 4499              		.section	.debug_info,"",%progbits
 4500              	.Ldebug_info0:
 4501 0000 DF0B0000 		.4byte	0xbdf
 4502 0004 0400     		.2byte	0x4
 4503 0006 00000000 		.4byte	.Ldebug_abbrev0
 4504 000a 04       		.byte	0x4
 4505 000b 01       		.uleb128 0x1
 4506 000c 40060000 		.4byte	.LASF159
 4507 0010 01       		.byte	0x1
 4508 0011 B4070000 		.4byte	.LASF160
 4509 0015 A5050000 		.4byte	.LASF161
 4510 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4511 001d 00000000 		.4byte	0
 4512 0021 00000000 		.4byte	.Ldebug_line0
 4513 0025 02       		.uleb128 0x2
 4514 0026 01       		.byte	0x1
 4515 0027 06       		.byte	0x6
 4516 0028 E3060000 		.4byte	.LASF0
 4517 002c 03       		.uleb128 0x3
 4518 002d CE040000 		.4byte	.LASF9
 4519 0031 02       		.byte	0x2
 4520 0032 1C       		.byte	0x1c
 4521 0033 37000000 		.4byte	0x37
 4522 0037 02       		.uleb128 0x2
 4523 0038 01       		.byte	0x1
 4524 0039 08       		.byte	0x8
 4525 003a 7B050000 		.4byte	.LASF1
 4526 003e 02       		.uleb128 0x2
 4527 003f 02       		.byte	0x2
 4528 0040 05       		.byte	0x5
 4529 0041 4D040000 		.4byte	.LASF2
 4530 0045 02       		.uleb128 0x2
 4531 0046 02       		.byte	0x2
 4532 0047 07       		.byte	0x7
 4533 0048 11070000 		.4byte	.LASF3
 4534 004c 02       		.uleb128 0x2
 4535 004d 04       		.byte	0x4
 4536 004e 05       		.byte	0x5
 4537 004f 72040000 		.4byte	.LASF4
 4538 0053 02       		.uleb128 0x2
 4539 0054 04       		.byte	0x4
 4540 0055 07       		.byte	0x7
 4541 0056 17050000 		.4byte	.LASF5
 4542 005a 02       		.uleb128 0x2
 4543 005b 08       		.byte	0x8
 4544 005c 05       		.byte	0x5
 4545 005d D5020000 		.4byte	.LASF6
 4546 0061 02       		.uleb128 0x2
 4547 0062 08       		.byte	0x8
 4548 0063 07       		.byte	0x7
 4549 0064 78010000 		.4byte	.LASF7
 4550 0068 04       		.uleb128 0x4
 4551 0069 04       		.byte	0x4
 4552 006a 05       		.byte	0x5
 4553 006b 696E7400 		.ascii	"int\000"
 4554 006f 02       		.uleb128 0x2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 108


 4555 0070 04       		.byte	0x4
 4556 0071 07       		.byte	0x7
 4557 0072 80000000 		.4byte	.LASF8
 4558 0076 03       		.uleb128 0x3
 4559 0077 AB020000 		.4byte	.LASF10
 4560 007b 03       		.byte	0x3
 4561 007c 2A       		.byte	0x2a
 4562 007d 2C000000 		.4byte	0x2c
 4563 0081 03       		.uleb128 0x3
 4564 0082 5F070000 		.4byte	.LASF11
 4565 0086 04       		.byte	0x4
 4566 0087 A1       		.byte	0xa1
 4567 0088 37000000 		.4byte	0x37
 4568 008c 03       		.uleb128 0x3
 4569 008d 80020000 		.4byte	.LASF12
 4570 0091 04       		.byte	0x4
 4571 0092 A2       		.byte	0xa2
 4572 0093 45000000 		.4byte	0x45
 4573 0097 03       		.uleb128 0x3
 4574 0098 78030000 		.4byte	.LASF13
 4575 009c 04       		.byte	0x4
 4576 009d A3       		.byte	0xa3
 4577 009e 53000000 		.4byte	0x53
 4578 00a2 03       		.uleb128 0x3
 4579 00a3 8E020000 		.4byte	.LASF14
 4580 00a7 04       		.byte	0x4
 4581 00a8 A4       		.byte	0xa4
 4582 00a9 25000000 		.4byte	0x25
 4583 00ad 03       		.uleb128 0x3
 4584 00ae A0000000 		.4byte	.LASF15
 4585 00b2 04       		.byte	0x4
 4586 00b3 A5       		.byte	0xa5
 4587 00b4 3E000000 		.4byte	0x3e
 4588 00b8 02       		.uleb128 0x2
 4589 00b9 04       		.byte	0x4
 4590 00ba 04       		.byte	0x4
 4591 00bb 52010000 		.4byte	.LASF16
 4592 00bf 02       		.uleb128 0x2
 4593 00c0 08       		.byte	0x8
 4594 00c1 04       		.byte	0x4
 4595 00c2 65070000 		.4byte	.LASF17
 4596 00c6 02       		.uleb128 0x2
 4597 00c7 01       		.byte	0x1
 4598 00c8 08       		.byte	0x8
 4599 00c9 7B020000 		.4byte	.LASF18
 4600 00cd 05       		.uleb128 0x5
 4601 00ce 81000000 		.4byte	0x81
 4602 00d2 02       		.uleb128 0x2
 4603 00d3 04       		.byte	0x4
 4604 00d4 07       		.byte	0x7
 4605 00d5 0E050000 		.4byte	.LASF19
 4606 00d9 06       		.uleb128 0x6
 4607 00da B6040000 		.4byte	.LASF24
 4608 00de 01       		.byte	0x1
 4609 00df 01       		.byte	0x1
 4610 00e0 A101     		.2byte	0x1a1
 4611 00e2 FF000000 		.4byte	0xff
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 109


 4612 00e6 07       		.uleb128 0x7
 4613 00e7 1A010000 		.4byte	.LASF20
 4614 00eb 00       		.sleb128 0
 4615 00ec 07       		.uleb128 0x7
 4616 00ed 0C000000 		.4byte	.LASF21
 4617 00f1 01       		.sleb128 1
 4618 00f2 07       		.uleb128 0x7
 4619 00f3 7B040000 		.4byte	.LASF22
 4620 00f7 02       		.sleb128 2
 4621 00f8 07       		.uleb128 0x7
 4622 00f9 4C070000 		.4byte	.LASF23
 4623 00fd 03       		.sleb128 3
 4624 00fe 00       		.byte	0
 4625 00ff 06       		.uleb128 0x6
 4626 0100 14030000 		.4byte	.LASF25
 4627 0104 01       		.byte	0x1
 4628 0105 01       		.byte	0x1
 4629 0106 0902     		.2byte	0x209
 4630 0108 25010000 		.4byte	0x125
 4631 010c 07       		.uleb128 0x7
 4632 010d F8000000 		.4byte	.LASF26
 4633 0111 00       		.sleb128 0
 4634 0112 07       		.uleb128 0x7
 4635 0113 34060000 		.4byte	.LASF27
 4636 0117 01       		.sleb128 1
 4637 0118 07       		.uleb128 0x7
 4638 0119 35040000 		.4byte	.LASF28
 4639 011d 02       		.sleb128 2
 4640 011e 07       		.uleb128 0x7
 4641 011f 43050000 		.4byte	.LASF29
 4642 0123 03       		.sleb128 3
 4643 0124 00       		.byte	0
 4644 0125 06       		.uleb128 0x6
 4645 0126 61000000 		.4byte	.LASF30
 4646 012a 01       		.byte	0x1
 4647 012b 01       		.byte	0x1
 4648 012c 7402     		.2byte	0x274
 4649 012e 4B010000 		.4byte	0x14b
 4650 0132 07       		.uleb128 0x7
 4651 0133 B8030000 		.4byte	.LASF31
 4652 0137 00       		.sleb128 0
 4653 0138 07       		.uleb128 0x7
 4654 0139 BD070000 		.4byte	.LASF32
 4655 013d 01       		.sleb128 1
 4656 013e 07       		.uleb128 0x7
 4657 013f 29050000 		.4byte	.LASF33
 4658 0143 02       		.sleb128 2
 4659 0144 07       		.uleb128 0x7
 4660 0145 24070000 		.4byte	.LASF34
 4661 0149 03       		.sleb128 3
 4662 014a 00       		.byte	0
 4663 014b 06       		.uleb128 0x6
 4664 014c EB020000 		.4byte	.LASF35
 4665 0150 01       		.byte	0x1
 4666 0151 01       		.byte	0x1
 4667 0152 2903     		.2byte	0x329
 4668 0154 71010000 		.4byte	0x171
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 110


 4669 0158 07       		.uleb128 0x7
 4670 0159 64050000 		.4byte	.LASF36
 4671 015d 00       		.sleb128 0
 4672 015e 07       		.uleb128 0x7
 4673 015f BB020000 		.4byte	.LASF37
 4674 0163 01       		.sleb128 1
 4675 0164 07       		.uleb128 0x7
 4676 0165 0C060000 		.4byte	.LASF38
 4677 0169 02       		.sleb128 2
 4678 016a 07       		.uleb128 0x7
 4679 016b 45020000 		.4byte	.LASF39
 4680 016f 03       		.sleb128 3
 4681 0170 00       		.byte	0
 4682 0171 06       		.uleb128 0x6
 4683 0172 8D000000 		.4byte	.LASF40
 4684 0176 01       		.byte	0x1
 4685 0177 01       		.byte	0x1
 4686 0178 DE03     		.2byte	0x3de
 4687 017a 97010000 		.4byte	0x197
 4688 017e 07       		.uleb128 0x7
 4689 017f C2000000 		.4byte	.LASF41
 4690 0183 00       		.sleb128 0
 4691 0184 07       		.uleb128 0x7
 4692 0185 58010000 		.4byte	.LASF42
 4693 0189 01       		.sleb128 1
 4694 018a 07       		.uleb128 0x7
 4695 018b 56000000 		.4byte	.LASF43
 4696 018f 02       		.sleb128 2
 4697 0190 07       		.uleb128 0x7
 4698 0191 AE040000 		.4byte	.LASF44
 4699 0195 03       		.sleb128 3
 4700 0196 00       		.byte	0
 4701 0197 06       		.uleb128 0x6
 4702 0198 53030000 		.4byte	.LASF45
 4703 019c 01       		.byte	0x1
 4704 019d 01       		.byte	0x1
 4705 019e 4204     		.2byte	0x442
 4706 01a0 BD010000 		.4byte	0x1bd
 4707 01a4 07       		.uleb128 0x7
 4708 01a5 04020000 		.4byte	.LASF46
 4709 01a9 00       		.sleb128 0
 4710 01aa 07       		.uleb128 0x7
 4711 01ab F7050000 		.4byte	.LASF47
 4712 01af 01       		.sleb128 1
 4713 01b0 07       		.uleb128 0x7
 4714 01b1 B4010000 		.4byte	.LASF48
 4715 01b5 02       		.sleb128 2
 4716 01b6 07       		.uleb128 0x7
 4717 01b7 F0040000 		.4byte	.LASF49
 4718 01bb 03       		.sleb128 3
 4719 01bc 00       		.byte	0
 4720 01bd 06       		.uleb128 0x6
 4721 01be 50020000 		.4byte	.LASF50
 4722 01c2 01       		.byte	0x1
 4723 01c3 01       		.byte	0x1
 4724 01c4 8404     		.2byte	0x484
 4725 01c6 E3010000 		.4byte	0x1e3
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 111


 4726 01ca 07       		.uleb128 0x7
 4727 01cb 4A030000 		.4byte	.LASF51
 4728 01cf 00       		.sleb128 0
 4729 01d0 07       		.uleb128 0x7
 4730 01d1 77070000 		.4byte	.LASF52
 4731 01d5 01       		.sleb128 1
 4732 01d6 07       		.uleb128 0x7
 4733 01d7 B7000000 		.4byte	.LASF53
 4734 01db 02       		.sleb128 2
 4735 01dc 07       		.uleb128 0x7
 4736 01dd 2C060000 		.4byte	.LASF54
 4737 01e1 03       		.sleb128 3
 4738 01e2 00       		.byte	0
 4739 01e3 08       		.uleb128 0x8
 4740 01e4 88040000 		.4byte	.LASF88
 4741 01e8 01       		.byte	0x1
 4742 01e9 0A       		.byte	0xa
 4743 01ea 00000000 		.4byte	.LFB34
 4744 01ee 28000000 		.4byte	.LFE34-.LFB34
 4745 01f2 01       		.uleb128 0x1
 4746 01f3 9C       		.byte	0x9c
 4747 01f4 07020000 		.4byte	0x207
 4748 01f8 09       		.uleb128 0x9
 4749 01f9 87070000 		.4byte	.LASF55
 4750 01fd 01       		.byte	0x1
 4751 01fe 0C       		.byte	0xc
 4752 01ff 97000000 		.4byte	0x97
 4753 0203 02       		.uleb128 0x2
 4754 0204 91       		.byte	0x91
 4755 0205 74       		.sleb128 -12
 4756 0206 00       		.byte	0
 4757 0207 0A       		.uleb128 0xa
 4758 0208 A6000000 		.4byte	.LASF61
 4759 020c 01       		.byte	0x1
 4760 020d 2F       		.byte	0x2f
 4761 020e 8C000000 		.4byte	0x8c
 4762 0212 00000000 		.4byte	.LFB35
 4763 0216 68010000 		.4byte	.LFE35-.LFB35
 4764 021a 01       		.uleb128 0x1
 4765 021b 9C       		.byte	0x9c
 4766 021c 81020000 		.4byte	0x281
 4767 0220 0B       		.uleb128 0xb
 4768 0221 F9040000 		.4byte	.LASF63
 4769 0225 01       		.byte	0x1
 4770 0226 2F       		.byte	0x2f
 4771 0227 8C000000 		.4byte	0x8c
 4772 022b 02       		.uleb128 0x2
 4773 022c 91       		.byte	0x91
 4774 022d 66       		.sleb128 -26
 4775 022e 09       		.uleb128 0x9
 4776 022f A4020000 		.4byte	.LASF56
 4777 0233 01       		.byte	0x1
 4778 0234 31       		.byte	0x31
 4779 0235 81000000 		.4byte	0x81
 4780 0239 02       		.uleb128 0x2
 4781 023a 91       		.byte	0x91
 4782 023b 71       		.sleb128 -15
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 112


 4783 023c 0C       		.uleb128 0xc
 4784 023d 6900     		.ascii	"i\000"
 4785 023f 01       		.byte	0x1
 4786 0240 32       		.byte	0x32
 4787 0241 81000000 		.4byte	0x81
 4788 0245 02       		.uleb128 0x2
 4789 0246 91       		.byte	0x91
 4790 0247 77       		.sleb128 -9
 4791 0248 09       		.uleb128 0x9
 4792 0249 72030000 		.4byte	.LASF57
 4793 024d 01       		.byte	0x1
 4794 024e 33       		.byte	0x33
 4795 024f 8C000000 		.4byte	0x8c
 4796 0253 02       		.uleb128 0x2
 4797 0254 91       		.byte	0x91
 4798 0255 74       		.sleb128 -12
 4799 0256 09       		.uleb128 0x9
 4800 0257 09070000 		.4byte	.LASF58
 4801 025b 01       		.byte	0x1
 4802 025c 34       		.byte	0x34
 4803 025d 8C000000 		.4byte	0x8c
 4804 0261 02       		.uleb128 0x2
 4805 0262 91       		.byte	0x91
 4806 0263 72       		.sleb128 -14
 4807 0264 09       		.uleb128 0x9
 4808 0265 09040000 		.4byte	.LASF59
 4809 0269 01       		.byte	0x1
 4810 026a 35       		.byte	0x35
 4811 026b 97000000 		.4byte	0x97
 4812 026f 02       		.uleb128 0x2
 4813 0270 91       		.byte	0x91
 4814 0271 6C       		.sleb128 -20
 4815 0272 09       		.uleb128 0x9
 4816 0273 CF060000 		.4byte	.LASF60
 4817 0277 01       		.byte	0x1
 4818 0278 36       		.byte	0x36
 4819 0279 AD000000 		.4byte	0xad
 4820 027d 02       		.uleb128 0x2
 4821 027e 91       		.byte	0x91
 4822 027f 6A       		.sleb128 -22
 4823 0280 00       		.byte	0
 4824 0281 0A       		.uleb128 0xa
 4825 0282 23020000 		.4byte	.LASF62
 4826 0286 01       		.byte	0x1
 4827 0287 6F       		.byte	0x6f
 4828 0288 8C000000 		.4byte	0x8c
 4829 028c 00000000 		.4byte	.LFB36
 4830 0290 68010000 		.4byte	.LFE36-.LFB36
 4831 0294 01       		.uleb128 0x1
 4832 0295 9C       		.byte	0x9c
 4833 0296 FB020000 		.4byte	0x2fb
 4834 029a 0B       		.uleb128 0xb
 4835 029b F9040000 		.4byte	.LASF63
 4836 029f 01       		.byte	0x1
 4837 02a0 6F       		.byte	0x6f
 4838 02a1 8C000000 		.4byte	0x8c
 4839 02a5 02       		.uleb128 0x2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 113


 4840 02a6 91       		.byte	0x91
 4841 02a7 66       		.sleb128 -26
 4842 02a8 09       		.uleb128 0x9
 4843 02a9 A4020000 		.4byte	.LASF56
 4844 02ad 01       		.byte	0x1
 4845 02ae 71       		.byte	0x71
 4846 02af 81000000 		.4byte	0x81
 4847 02b3 02       		.uleb128 0x2
 4848 02b4 91       		.byte	0x91
 4849 02b5 71       		.sleb128 -15
 4850 02b6 0C       		.uleb128 0xc
 4851 02b7 6900     		.ascii	"i\000"
 4852 02b9 01       		.byte	0x1
 4853 02ba 72       		.byte	0x72
 4854 02bb 81000000 		.4byte	0x81
 4855 02bf 02       		.uleb128 0x2
 4856 02c0 91       		.byte	0x91
 4857 02c1 77       		.sleb128 -9
 4858 02c2 09       		.uleb128 0x9
 4859 02c3 72030000 		.4byte	.LASF57
 4860 02c7 01       		.byte	0x1
 4861 02c8 73       		.byte	0x73
 4862 02c9 8C000000 		.4byte	0x8c
 4863 02cd 02       		.uleb128 0x2
 4864 02ce 91       		.byte	0x91
 4865 02cf 74       		.sleb128 -12
 4866 02d0 09       		.uleb128 0x9
 4867 02d1 09070000 		.4byte	.LASF58
 4868 02d5 01       		.byte	0x1
 4869 02d6 74       		.byte	0x74
 4870 02d7 8C000000 		.4byte	0x8c
 4871 02db 02       		.uleb128 0x2
 4872 02dc 91       		.byte	0x91
 4873 02dd 72       		.sleb128 -14
 4874 02de 09       		.uleb128 0x9
 4875 02df 09040000 		.4byte	.LASF59
 4876 02e3 01       		.byte	0x1
 4877 02e4 75       		.byte	0x75
 4878 02e5 97000000 		.4byte	0x97
 4879 02e9 02       		.uleb128 0x2
 4880 02ea 91       		.byte	0x91
 4881 02eb 6C       		.sleb128 -20
 4882 02ec 09       		.uleb128 0x9
 4883 02ed CF060000 		.4byte	.LASF60
 4884 02f1 01       		.byte	0x1
 4885 02f2 76       		.byte	0x76
 4886 02f3 AD000000 		.4byte	0xad
 4887 02f7 02       		.uleb128 0x2
 4888 02f8 91       		.byte	0x91
 4889 02f9 6A       		.sleb128 -22
 4890 02fa 00       		.byte	0
 4891 02fb 0A       		.uleb128 0xa
 4892 02fc 09070000 		.4byte	.LASF58
 4893 0300 01       		.byte	0x1
 4894 0301 A9       		.byte	0xa9
 4895 0302 8C000000 		.4byte	0x8c
 4896 0306 00000000 		.4byte	.LFB37
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 114


 4897 030a 78000000 		.4byte	.LFE37-.LFB37
 4898 030e 01       		.uleb128 0x1
 4899 030f 9C       		.byte	0x9c
 4900 0310 59030000 		.4byte	0x359
 4901 0314 0B       		.uleb128 0xb
 4902 0315 69040000 		.4byte	.LASF64
 4903 0319 01       		.byte	0x1
 4904 031a A9       		.byte	0xa9
 4905 031b 59030000 		.4byte	0x359
 4906 031f 02       		.uleb128 0x2
 4907 0320 91       		.byte	0x91
 4908 0321 64       		.sleb128 -28
 4909 0322 0B       		.uleb128 0xb
 4910 0323 16000000 		.4byte	.LASF65
 4911 0327 01       		.byte	0x1
 4912 0328 A9       		.byte	0xa9
 4913 0329 81000000 		.4byte	0x81
 4914 032d 02       		.uleb128 0x2
 4915 032e 91       		.byte	0x91
 4916 032f 63       		.sleb128 -29
 4917 0330 0C       		.uleb128 0xc
 4918 0331 6900     		.ascii	"i\000"
 4919 0333 01       		.byte	0x1
 4920 0334 AB       		.byte	0xab
 4921 0335 81000000 		.4byte	0x81
 4922 0339 02       		.uleb128 0x2
 4923 033a 91       		.byte	0x91
 4924 033b 77       		.sleb128 -9
 4925 033c 0C       		.uleb128 0xc
 4926 033d 73756D00 		.ascii	"sum\000"
 4927 0341 01       		.byte	0x1
 4928 0342 AC       		.byte	0xac
 4929 0343 97000000 		.4byte	0x97
 4930 0347 02       		.uleb128 0x2
 4931 0348 91       		.byte	0x91
 4932 0349 70       		.sleb128 -16
 4933 034a 0C       		.uleb128 0xc
 4934 034b 61766700 		.ascii	"avg\000"
 4935 034f 01       		.byte	0x1
 4936 0350 AD       		.byte	0xad
 4937 0351 8C000000 		.4byte	0x8c
 4938 0355 02       		.uleb128 0x2
 4939 0356 91       		.byte	0x91
 4940 0357 6E       		.sleb128 -18
 4941 0358 00       		.byte	0
 4942 0359 0D       		.uleb128 0xd
 4943 035a 04       		.byte	0x4
 4944 035b 8C000000 		.4byte	0x8c
 4945 035f 0E       		.uleb128 0xe
 4946 0360 DA000000 		.4byte	.LASF66
 4947 0364 01       		.byte	0x1
 4948 0365 B9       		.byte	0xb9
 4949 0366 81000000 		.4byte	0x81
 4950 036a 00000000 		.4byte	.LFB38
 4951 036e 3E000000 		.4byte	.LFE38-.LFB38
 4952 0372 01       		.uleb128 0x1
 4953 0373 9C       		.byte	0x9c
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 115


 4954 0374 95030000 		.4byte	0x395
 4955 0378 0B       		.uleb128 0xb
 4956 0379 FB020000 		.4byte	.LASF67
 4957 037d 01       		.byte	0x1
 4958 037e B9       		.byte	0xb9
 4959 037f 81000000 		.4byte	0x81
 4960 0383 02       		.uleb128 0x2
 4961 0384 91       		.byte	0x91
 4962 0385 77       		.sleb128 -9
 4963 0386 0B       		.uleb128 0xb
 4964 0387 40020000 		.4byte	.LASF68
 4965 038b 01       		.byte	0x1
 4966 038c B9       		.byte	0xb9
 4967 038d 81000000 		.4byte	0x81
 4968 0391 02       		.uleb128 0x2
 4969 0392 91       		.byte	0x91
 4970 0393 76       		.sleb128 -10
 4971 0394 00       		.byte	0
 4972 0395 0A       		.uleb128 0xa
 4973 0396 D8040000 		.4byte	.LASF69
 4974 039a 01       		.byte	0x1
 4975 039b C6       		.byte	0xc6
 4976 039c 81000000 		.4byte	0x81
 4977 03a0 00000000 		.4byte	.LFB39
 4978 03a4 0C010000 		.4byte	.LFE39-.LFB39
 4979 03a8 01       		.uleb128 0x1
 4980 03a9 9C       		.byte	0x9c
 4981 03aa F5030000 		.4byte	0x3f5
 4982 03ae 0B       		.uleb128 0xb
 4983 03af D3030000 		.4byte	.LASF70
 4984 03b3 01       		.byte	0x1
 4985 03b4 C6       		.byte	0xc6
 4986 03b5 59030000 		.4byte	0x359
 4987 03b9 02       		.uleb128 0x2
 4988 03ba 91       		.byte	0x91
 4989 03bb 6C       		.sleb128 -20
 4990 03bc 0B       		.uleb128 0xb
 4991 03bd B3020000 		.4byte	.LASF71
 4992 03c1 01       		.byte	0x1
 4993 03c2 C6       		.byte	0xc6
 4994 03c3 81000000 		.4byte	0x81
 4995 03c7 02       		.uleb128 0x2
 4996 03c8 91       		.byte	0x91
 4997 03c9 6B       		.sleb128 -21
 4998 03ca 0B       		.uleb128 0xb
 4999 03cb 25010000 		.4byte	.LASF72
 5000 03cf 01       		.byte	0x1
 5001 03d0 C6       		.byte	0xc6
 5002 03d1 81000000 		.4byte	0x81
 5003 03d5 02       		.uleb128 0x2
 5004 03d6 91       		.byte	0x91
 5005 03d7 6A       		.sleb128 -22
 5006 03d8 0B       		.uleb128 0xb
 5007 03d9 02040000 		.4byte	.LASF73
 5008 03dd 01       		.byte	0x1
 5009 03de C6       		.byte	0xc6
 5010 03df 68000000 		.4byte	0x68
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 116


 5011 03e3 02       		.uleb128 0x2
 5012 03e4 91       		.byte	0x91
 5013 03e5 64       		.sleb128 -28
 5014 03e6 09       		.uleb128 0x9
 5015 03e7 60010000 		.4byte	.LASF74
 5016 03eb 01       		.byte	0x1
 5017 03ec C8       		.byte	0xc8
 5018 03ed 81000000 		.4byte	0x81
 5019 03f1 02       		.uleb128 0x2
 5020 03f2 91       		.byte	0x91
 5021 03f3 77       		.sleb128 -9
 5022 03f4 00       		.byte	0
 5023 03f5 0A       		.uleb128 0xa
 5024 03f6 3B010000 		.4byte	.LASF75
 5025 03fa 01       		.byte	0x1
 5026 03fb EC       		.byte	0xec
 5027 03fc 81000000 		.4byte	0x81
 5028 0400 00000000 		.4byte	.LFB40
 5029 0404 0C020000 		.4byte	.LFE40-.LFB40
 5030 0408 01       		.uleb128 0x1
 5031 0409 9C       		.byte	0x9c
 5032 040a 47040000 		.4byte	0x447
 5033 040e 0B       		.uleb128 0xb
 5034 040f 6B020000 		.4byte	.LASF76
 5035 0413 01       		.byte	0x1
 5036 0414 EC       		.byte	0xec
 5037 0415 81000000 		.4byte	0x81
 5038 0419 02       		.uleb128 0x2
 5039 041a 91       		.byte	0x91
 5040 041b 6F       		.sleb128 -17
 5041 041c 0B       		.uleb128 0xb
 5042 041d D3030000 		.4byte	.LASF70
 5043 0421 01       		.byte	0x1
 5044 0422 EC       		.byte	0xec
 5045 0423 59030000 		.4byte	0x359
 5046 0427 02       		.uleb128 0x2
 5047 0428 91       		.byte	0x91
 5048 0429 68       		.sleb128 -24
 5049 042a 0B       		.uleb128 0xb
 5050 042b 1D040000 		.4byte	.LASF77
 5051 042f 01       		.byte	0x1
 5052 0430 EC       		.byte	0xec
 5053 0431 81000000 		.4byte	0x81
 5054 0435 02       		.uleb128 0x2
 5055 0436 91       		.byte	0x91
 5056 0437 6E       		.sleb128 -18
 5057 0438 0B       		.uleb128 0xb
 5058 0439 C7060000 		.4byte	.LASF78
 5059 043d 01       		.byte	0x1
 5060 043e EC       		.byte	0xec
 5061 043f 8C000000 		.4byte	0x8c
 5062 0443 02       		.uleb128 0x2
 5063 0444 91       		.byte	0x91
 5064 0445 6C       		.sleb128 -20
 5065 0446 00       		.byte	0
 5066 0447 0F       		.uleb128 0xf
 5067 0448 93030000 		.4byte	.LASF79
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 117


 5068 044c 01       		.byte	0x1
 5069 044d 1A01     		.2byte	0x11a
 5070 044f 8C000000 		.4byte	0x8c
 5071 0453 00000000 		.4byte	.LFB41
 5072 0457 84000000 		.4byte	.LFE41-.LFB41
 5073 045b 01       		.uleb128 0x1
 5074 045c 9C       		.byte	0x9c
 5075 045d CB040000 		.4byte	0x4cb
 5076 0461 10       		.uleb128 0x10
 5077 0462 70050000 		.4byte	.LASF80
 5078 0466 01       		.byte	0x1
 5079 0467 1A01     		.2byte	0x11a
 5080 0469 CB040000 		.4byte	0x4cb
 5081 046d 02       		.uleb128 0x2
 5082 046e 91       		.byte	0x91
 5083 046f 6C       		.sleb128 -20
 5084 0470 10       		.uleb128 0x10
 5085 0471 C0010000 		.4byte	.LASF81
 5086 0475 01       		.byte	0x1
 5087 0476 1A01     		.2byte	0x11a
 5088 0478 81000000 		.4byte	0x81
 5089 047c 02       		.uleb128 0x2
 5090 047d 91       		.byte	0x91
 5091 047e 6B       		.sleb128 -21
 5092 047f 10       		.uleb128 0x10
 5093 0480 C6010000 		.4byte	.LASF82
 5094 0484 01       		.byte	0x1
 5095 0485 1A01     		.2byte	0x11a
 5096 0487 81000000 		.4byte	0x81
 5097 048b 02       		.uleb128 0x2
 5098 048c 91       		.byte	0x91
 5099 048d 6A       		.sleb128 -22
 5100 048e 11       		.uleb128 0x11
 5101 048f C7060000 		.4byte	.LASF78
 5102 0493 01       		.byte	0x1
 5103 0494 1C01     		.2byte	0x11c
 5104 0496 8C000000 		.4byte	0x8c
 5105 049a 02       		.uleb128 0x2
 5106 049b 91       		.byte	0x91
 5107 049c 70       		.sleb128 -16
 5108 049d 11       		.uleb128 0x11
 5109 049e E1010000 		.4byte	.LASF83
 5110 04a2 01       		.byte	0x1
 5111 04a3 1D01     		.2byte	0x11d
 5112 04a5 AD000000 		.4byte	0xad
 5113 04a9 02       		.uleb128 0x2
 5114 04aa 91       		.byte	0x91
 5115 04ab 76       		.sleb128 -10
 5116 04ac 11       		.uleb128 0x11
 5117 04ad E7010000 		.4byte	.LASF84
 5118 04b1 01       		.byte	0x1
 5119 04b2 1E01     		.2byte	0x11e
 5120 04b4 AD000000 		.4byte	0xad
 5121 04b8 02       		.uleb128 0x2
 5122 04b9 91       		.byte	0x91
 5123 04ba 74       		.sleb128 -12
 5124 04bb 11       		.uleb128 0x11
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 118


 5125 04bc ED010000 		.4byte	.LASF85
 5126 04c0 01       		.byte	0x1
 5127 04c1 1F01     		.2byte	0x11f
 5128 04c3 AD000000 		.4byte	0xad
 5129 04c7 02       		.uleb128 0x2
 5130 04c8 91       		.byte	0x91
 5131 04c9 72       		.sleb128 -14
 5132 04ca 00       		.byte	0
 5133 04cb 0D       		.uleb128 0xd
 5134 04cc 04       		.byte	0x4
 5135 04cd A2000000 		.4byte	0xa2
 5136 04d1 12       		.uleb128 0x12
 5137 04d2 11040000 		.4byte	.LASF86
 5138 04d6 01       		.byte	0x1
 5139 04d7 2801     		.2byte	0x128
 5140 04d9 8C000000 		.4byte	0x8c
 5141 04dd 00000000 		.4byte	.LFB42
 5142 04e1 28000000 		.4byte	.LFE42-.LFB42
 5143 04e5 01       		.uleb128 0x1
 5144 04e6 9C       		.byte	0x9c
 5145 04e7 0A050000 		.4byte	0x50a
 5146 04eb 10       		.uleb128 0x10
 5147 04ec 09040000 		.4byte	.LASF59
 5148 04f0 01       		.byte	0x1
 5149 04f1 2801     		.2byte	0x128
 5150 04f3 97000000 		.4byte	0x97
 5151 04f7 02       		.uleb128 0x2
 5152 04f8 91       		.byte	0x91
 5153 04f9 6C       		.sleb128 -20
 5154 04fa 11       		.uleb128 0x11
 5155 04fb 93020000 		.4byte	.LASF87
 5156 04ff 01       		.byte	0x1
 5157 0500 2B01     		.2byte	0x12b
 5158 0502 8C000000 		.4byte	0x8c
 5159 0506 02       		.uleb128 0x2
 5160 0507 91       		.byte	0x91
 5161 0508 76       		.sleb128 -10
 5162 0509 00       		.byte	0
 5163 050a 13       		.uleb128 0x13
 5164 050b F6030000 		.4byte	.LASF89
 5165 050f 01       		.byte	0x1
 5166 0510 3001     		.2byte	0x130
 5167 0512 00000000 		.4byte	.LFB43
 5168 0516 04010000 		.4byte	.LFE43-.LFB43
 5169 051a 01       		.uleb128 0x1
 5170 051b 9C       		.byte	0x9c
 5171 051c 30050000 		.4byte	0x530
 5172 0520 10       		.uleb128 0x10
 5173 0521 EF060000 		.4byte	.LASF90
 5174 0525 01       		.byte	0x1
 5175 0526 3001     		.2byte	0x130
 5176 0528 81000000 		.4byte	0x81
 5177 052c 02       		.uleb128 0x2
 5178 052d 91       		.byte	0x91
 5179 052e 77       		.sleb128 -9
 5180 052f 00       		.byte	0
 5181 0530 14       		.uleb128 0x14
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 119


 5182 0531 89050000 		.4byte	.LASF113
 5183 0535 01       		.byte	0x1
 5184 0536 6201     		.2byte	0x162
 5185 0538 00000000 		.4byte	.LFB44
 5186 053c 18000000 		.4byte	.LFE44-.LFB44
 5187 0540 01       		.uleb128 0x1
 5188 0541 9C       		.byte	0x9c
 5189 0542 13       		.uleb128 0x13
 5190 0543 8F010000 		.4byte	.LASF91
 5191 0547 01       		.byte	0x1
 5192 0548 6C01     		.2byte	0x16c
 5193 054a 00000000 		.4byte	.LFB45
 5194 054e 98000000 		.4byte	.LFE45-.LFB45
 5195 0552 01       		.uleb128 0x1
 5196 0553 9C       		.byte	0x9c
 5197 0554 86050000 		.4byte	0x586
 5198 0558 10       		.uleb128 0x10
 5199 0559 7F070000 		.4byte	.LASF92
 5200 055d 01       		.byte	0x1
 5201 055e 6C01     		.2byte	0x16c
 5202 0560 81000000 		.4byte	0x81
 5203 0564 02       		.uleb128 0x2
 5204 0565 91       		.byte	0x91
 5205 0566 67       		.sleb128 -25
 5206 0567 10       		.uleb128 0x10
 5207 0568 AB070000 		.4byte	.LASF93
 5208 056c 01       		.byte	0x1
 5209 056d 6C01     		.2byte	0x16c
 5210 056f 8C000000 		.4byte	0x8c
 5211 0573 02       		.uleb128 0x2
 5212 0574 91       		.byte	0x91
 5213 0575 64       		.sleb128 -28
 5214 0576 11       		.uleb128 0x11
 5215 0577 D3030000 		.4byte	.LASF70
 5216 057b 01       		.byte	0x1
 5217 057c 6E01     		.2byte	0x16e
 5218 057e 86050000 		.4byte	0x586
 5219 0582 02       		.uleb128 0x2
 5220 0583 91       		.byte	0x91
 5221 0584 6C       		.sleb128 -20
 5222 0585 00       		.byte	0
 5223 0586 15       		.uleb128 0x15
 5224 0587 81000000 		.4byte	0x81
 5225 058b 96050000 		.4byte	0x596
 5226 058f 16       		.uleb128 0x16
 5227 0590 D2000000 		.4byte	0xd2
 5228 0594 08       		.byte	0x8
 5229 0595 00       		.byte	0
 5230 0596 13       		.uleb128 0x13
 5231 0597 9C070000 		.4byte	.LASF94
 5232 059b 01       		.byte	0x1
 5233 059c 7D01     		.2byte	0x17d
 5234 059e 00000000 		.4byte	.LFB46
 5235 05a2 98000000 		.4byte	.LFE46-.LFB46
 5236 05a6 01       		.uleb128 0x1
 5237 05a7 9C       		.byte	0x9c
 5238 05a8 DA050000 		.4byte	0x5da
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 120


 5239 05ac 10       		.uleb128 0x10
 5240 05ad 7F070000 		.4byte	.LASF92
 5241 05b1 01       		.byte	0x1
 5242 05b2 7D01     		.2byte	0x17d
 5243 05b4 81000000 		.4byte	0x81
 5244 05b8 02       		.uleb128 0x2
 5245 05b9 91       		.byte	0x91
 5246 05ba 67       		.sleb128 -25
 5247 05bb 10       		.uleb128 0x10
 5248 05bc 87020000 		.4byte	.LASF95
 5249 05c0 01       		.byte	0x1
 5250 05c1 7D01     		.2byte	0x17d
 5251 05c3 8C000000 		.4byte	0x8c
 5252 05c7 02       		.uleb128 0x2
 5253 05c8 91       		.byte	0x91
 5254 05c9 64       		.sleb128 -28
 5255 05ca 11       		.uleb128 0x11
 5256 05cb D3030000 		.4byte	.LASF70
 5257 05cf 01       		.byte	0x1
 5258 05d0 7F01     		.2byte	0x17f
 5259 05d2 86050000 		.4byte	0x586
 5260 05d6 02       		.uleb128 0x2
 5261 05d7 91       		.byte	0x91
 5262 05d8 6C       		.sleb128 -20
 5263 05d9 00       		.byte	0
 5264 05da 13       		.uleb128 0x13
 5265 05db E5040000 		.4byte	.LASF96
 5266 05df 01       		.byte	0x1
 5267 05e0 8F01     		.2byte	0x18f
 5268 05e2 00000000 		.4byte	.LFB47
 5269 05e6 98000000 		.4byte	.LFE47-.LFB47
 5270 05ea 01       		.uleb128 0x1
 5271 05eb 9C       		.byte	0x9c
 5272 05ec 1E060000 		.4byte	0x61e
 5273 05f0 10       		.uleb128 0x10
 5274 05f1 7F070000 		.4byte	.LASF92
 5275 05f5 01       		.byte	0x1
 5276 05f6 8F01     		.2byte	0x18f
 5277 05f8 81000000 		.4byte	0x81
 5278 05fc 02       		.uleb128 0x2
 5279 05fd 91       		.byte	0x91
 5280 05fe 67       		.sleb128 -25
 5281 05ff 10       		.uleb128 0x10
 5282 0600 05010000 		.4byte	.LASF97
 5283 0604 01       		.byte	0x1
 5284 0605 8F01     		.2byte	0x18f
 5285 0607 8C000000 		.4byte	0x8c
 5286 060b 02       		.uleb128 0x2
 5287 060c 91       		.byte	0x91
 5288 060d 64       		.sleb128 -28
 5289 060e 11       		.uleb128 0x11
 5290 060f D3030000 		.4byte	.LASF70
 5291 0613 01       		.byte	0x1
 5292 0614 9101     		.2byte	0x191
 5293 0616 86050000 		.4byte	0x586
 5294 061a 02       		.uleb128 0x2
 5295 061b 91       		.byte	0x91
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 121


 5296 061c 6C       		.sleb128 -20
 5297 061d 00       		.byte	0
 5298 061e 12       		.uleb128 0x12
 5299 061f A0030000 		.4byte	.LASF98
 5300 0623 01       		.byte	0x1
 5301 0624 A301     		.2byte	0x1a3
 5302 0626 81000000 		.4byte	0x81
 5303 062a 00000000 		.4byte	.LFB48
 5304 062e 6C010000 		.4byte	.LFE48-.LFB48
 5305 0632 01       		.uleb128 0x1
 5306 0633 9C       		.byte	0x9c
 5307 0634 82060000 		.4byte	0x682
 5308 0638 10       		.uleb128 0x10
 5309 0639 28040000 		.4byte	.LASF99
 5310 063d 01       		.byte	0x1
 5311 063e A301     		.2byte	0x1a3
 5312 0640 81000000 		.4byte	0x81
 5313 0644 02       		.uleb128 0x2
 5314 0645 91       		.byte	0x91
 5315 0646 67       		.sleb128 -25
 5316 0647 10       		.uleb128 0x10
 5317 0648 6E000000 		.4byte	.LASF100
 5318 064c 01       		.byte	0x1
 5319 064d A301     		.2byte	0x1a3
 5320 064f 59030000 		.4byte	0x359
 5321 0653 02       		.uleb128 0x2
 5322 0654 91       		.byte	0x91
 5323 0655 60       		.sleb128 -32
 5324 0656 17       		.uleb128 0x17
 5325 0657 6900     		.ascii	"i\000"
 5326 0659 01       		.byte	0x1
 5327 065a B301     		.2byte	0x1b3
 5328 065c 81000000 		.4byte	0x81
 5329 0660 02       		.uleb128 0x2
 5330 0661 91       		.byte	0x91
 5331 0662 6F       		.sleb128 -17
 5332 0663 17       		.uleb128 0x17
 5333 0664 61766700 		.ascii	"avg\000"
 5334 0668 01       		.byte	0x1
 5335 0669 B401     		.2byte	0x1b4
 5336 066b 8C000000 		.4byte	0x8c
 5337 066f 02       		.uleb128 0x2
 5338 0670 91       		.byte	0x91
 5339 0671 6A       		.sleb128 -22
 5340 0672 11       		.uleb128 0x11
 5341 0673 C7060000 		.4byte	.LASF78
 5342 0677 01       		.byte	0x1
 5343 0678 B501     		.2byte	0x1b5
 5344 067a 8C000000 		.4byte	0x8c
 5345 067e 02       		.uleb128 0x2
 5346 067f 91       		.byte	0x91
 5347 0680 6C       		.sleb128 -20
 5348 0681 00       		.byte	0
 5349 0682 12       		.uleb128 0x12
 5350 0683 99050000 		.4byte	.LASF101
 5351 0687 01       		.byte	0x1
 5352 0688 0B02     		.2byte	0x20b
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 122


 5353 068a 81000000 		.4byte	0x81
 5354 068e 00000000 		.4byte	.LFB49
 5355 0692 6C010000 		.4byte	.LFE49-.LFB49
 5356 0696 01       		.uleb128 0x1
 5357 0697 9C       		.byte	0x9c
 5358 0698 E6060000 		.4byte	0x6e6
 5359 069c 10       		.uleb128 0x10
 5360 069d 49000000 		.4byte	.LASF102
 5361 06a1 01       		.byte	0x1
 5362 06a2 0B02     		.2byte	0x20b
 5363 06a4 81000000 		.4byte	0x81
 5364 06a8 02       		.uleb128 0x2
 5365 06a9 91       		.byte	0x91
 5366 06aa 67       		.sleb128 -25
 5367 06ab 10       		.uleb128 0x10
 5368 06ac 56070000 		.4byte	.LASF103
 5369 06b0 01       		.byte	0x1
 5370 06b1 0B02     		.2byte	0x20b
 5371 06b3 59030000 		.4byte	0x359
 5372 06b7 02       		.uleb128 0x2
 5373 06b8 91       		.byte	0x91
 5374 06b9 60       		.sleb128 -32
 5375 06ba 17       		.uleb128 0x17
 5376 06bb 6900     		.ascii	"i\000"
 5377 06bd 01       		.byte	0x1
 5378 06be 1B02     		.2byte	0x21b
 5379 06c0 81000000 		.4byte	0x81
 5380 06c4 02       		.uleb128 0x2
 5381 06c5 91       		.byte	0x91
 5382 06c6 6F       		.sleb128 -17
 5383 06c7 17       		.uleb128 0x17
 5384 06c8 61766700 		.ascii	"avg\000"
 5385 06cc 01       		.byte	0x1
 5386 06cd 1C02     		.2byte	0x21c
 5387 06cf 8C000000 		.4byte	0x8c
 5388 06d3 02       		.uleb128 0x2
 5389 06d4 91       		.byte	0x91
 5390 06d5 6A       		.sleb128 -22
 5391 06d6 11       		.uleb128 0x11
 5392 06d7 C7060000 		.4byte	.LASF78
 5393 06db 01       		.byte	0x1
 5394 06dc 1D02     		.2byte	0x21d
 5395 06de 8C000000 		.4byte	0x8c
 5396 06e2 02       		.uleb128 0x2
 5397 06e3 91       		.byte	0x91
 5398 06e4 6C       		.sleb128 -20
 5399 06e5 00       		.byte	0
 5400 06e6 12       		.uleb128 0x12
 5401 06e7 FE010000 		.4byte	.LASF104
 5402 06eb 01       		.byte	0x1
 5403 06ec 7502     		.2byte	0x275
 5404 06ee 81000000 		.4byte	0x81
 5405 06f2 00000000 		.4byte	.LFB50
 5406 06f6 44030000 		.4byte	.LFE50-.LFB50
 5407 06fa 01       		.uleb128 0x1
 5408 06fb 9C       		.byte	0x9c
 5409 06fc 59070000 		.4byte	0x759
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 123


 5410 0700 10       		.uleb128 0x10
 5411 0701 0B010000 		.4byte	.LASF105
 5412 0705 01       		.byte	0x1
 5413 0706 7502     		.2byte	0x275
 5414 0708 81000000 		.4byte	0x81
 5415 070c 02       		.uleb128 0x2
 5416 070d 91       		.byte	0x91
 5417 070e 67       		.sleb128 -25
 5418 070f 10       		.uleb128 0x10
 5419 0710 00060000 		.4byte	.LASF106
 5420 0714 01       		.byte	0x1
 5421 0715 7502     		.2byte	0x275
 5422 0717 59030000 		.4byte	0x359
 5423 071b 02       		.uleb128 0x2
 5424 071c 91       		.byte	0x91
 5425 071d 60       		.sleb128 -32
 5426 071e 17       		.uleb128 0x17
 5427 071f 6900     		.ascii	"i\000"
 5428 0721 01       		.byte	0x1
 5429 0722 7B02     		.2byte	0x27b
 5430 0724 81000000 		.4byte	0x81
 5431 0728 02       		.uleb128 0x2
 5432 0729 91       		.byte	0x91
 5433 072a 6F       		.sleb128 -17
 5434 072b 17       		.uleb128 0x17
 5435 072c 61766700 		.ascii	"avg\000"
 5436 0730 01       		.byte	0x1
 5437 0731 7C02     		.2byte	0x27c
 5438 0733 8C000000 		.4byte	0x8c
 5439 0737 02       		.uleb128 0x2
 5440 0738 91       		.byte	0x91
 5441 0739 68       		.sleb128 -24
 5442 073a 11       		.uleb128 0x11
 5443 073b C7060000 		.4byte	.LASF78
 5444 073f 01       		.byte	0x1
 5445 0740 7D02     		.2byte	0x27d
 5446 0742 8C000000 		.4byte	0x8c
 5447 0746 02       		.uleb128 0x2
 5448 0747 91       		.byte	0x91
 5449 0748 6A       		.sleb128 -22
 5450 0749 11       		.uleb128 0x11
 5451 074a 93020000 		.4byte	.LASF87
 5452 074e 01       		.byte	0x1
 5453 074f 8002     		.2byte	0x280
 5454 0751 8C000000 		.4byte	0x8c
 5455 0755 02       		.uleb128 0x2
 5456 0756 91       		.byte	0x91
 5457 0757 6C       		.sleb128 -20
 5458 0758 00       		.byte	0
 5459 0759 12       		.uleb128 0x12
 5460 075a AB010000 		.4byte	.LASF107
 5461 075e 01       		.byte	0x1
 5462 075f 2A03     		.2byte	0x32a
 5463 0761 81000000 		.4byte	0x81
 5464 0765 00000000 		.4byte	.LFB51
 5465 0769 44030000 		.4byte	.LFE51-.LFB51
 5466 076d 01       		.uleb128 0x1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 124


 5467 076e 9C       		.byte	0x9c
 5468 076f CC070000 		.4byte	0x7cc
 5469 0773 10       		.uleb128 0x10
 5470 0774 D9030000 		.4byte	.LASF108
 5471 0778 01       		.byte	0x1
 5472 0779 2A03     		.2byte	0x32a
 5473 077b 81000000 		.4byte	0x81
 5474 077f 02       		.uleb128 0x2
 5475 0780 91       		.byte	0x91
 5476 0781 67       		.sleb128 -25
 5477 0782 10       		.uleb128 0x10
 5478 0783 CB000000 		.4byte	.LASF109
 5479 0787 01       		.byte	0x1
 5480 0788 2A03     		.2byte	0x32a
 5481 078a 59030000 		.4byte	0x359
 5482 078e 02       		.uleb128 0x2
 5483 078f 91       		.byte	0x91
 5484 0790 60       		.sleb128 -32
 5485 0791 17       		.uleb128 0x17
 5486 0792 6900     		.ascii	"i\000"
 5487 0794 01       		.byte	0x1
 5488 0795 3003     		.2byte	0x330
 5489 0797 81000000 		.4byte	0x81
 5490 079b 02       		.uleb128 0x2
 5491 079c 91       		.byte	0x91
 5492 079d 6F       		.sleb128 -17
 5493 079e 17       		.uleb128 0x17
 5494 079f 61766700 		.ascii	"avg\000"
 5495 07a3 01       		.byte	0x1
 5496 07a4 3103     		.2byte	0x331
 5497 07a6 8C000000 		.4byte	0x8c
 5498 07aa 02       		.uleb128 0x2
 5499 07ab 91       		.byte	0x91
 5500 07ac 68       		.sleb128 -24
 5501 07ad 11       		.uleb128 0x11
 5502 07ae C7060000 		.4byte	.LASF78
 5503 07b2 01       		.byte	0x1
 5504 07b3 3203     		.2byte	0x332
 5505 07b5 8C000000 		.4byte	0x8c
 5506 07b9 02       		.uleb128 0x2
 5507 07ba 91       		.byte	0x91
 5508 07bb 6A       		.sleb128 -22
 5509 07bc 11       		.uleb128 0x11
 5510 07bd 93020000 		.4byte	.LASF87
 5511 07c1 01       		.byte	0x1
 5512 07c2 3303     		.2byte	0x333
 5513 07c4 8C000000 		.4byte	0x8c
 5514 07c8 02       		.uleb128 0x2
 5515 07c9 91       		.byte	0x91
 5516 07ca 6C       		.sleb128 -20
 5517 07cb 00       		.byte	0
 5518 07cc 12       		.uleb128 0x12
 5519 07cd 00000000 		.4byte	.LASF110
 5520 07d1 01       		.byte	0x1
 5521 07d2 DF03     		.2byte	0x3df
 5522 07d4 81000000 		.4byte	0x81
 5523 07d8 00000000 		.4byte	.LFB52
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 125


 5524 07dc 5C010000 		.4byte	.LFE52-.LFB52
 5525 07e0 01       		.uleb128 0x1
 5526 07e1 9C       		.byte	0x9c
 5527 07e2 30080000 		.4byte	0x830
 5528 07e6 10       		.uleb128 0x10
 5529 07e7 E9030000 		.4byte	.LASF111
 5530 07eb 01       		.byte	0x1
 5531 07ec DF03     		.2byte	0x3df
 5532 07ee 81000000 		.4byte	0x81
 5533 07f2 02       		.uleb128 0x2
 5534 07f3 91       		.byte	0x91
 5535 07f4 67       		.sleb128 -25
 5536 07f5 10       		.uleb128 0x10
 5537 07f6 36050000 		.4byte	.LASF112
 5538 07fa 01       		.byte	0x1
 5539 07fb DF03     		.2byte	0x3df
 5540 07fd 59030000 		.4byte	0x359
 5541 0801 02       		.uleb128 0x2
 5542 0802 91       		.byte	0x91
 5543 0803 60       		.sleb128 -32
 5544 0804 17       		.uleb128 0x17
 5545 0805 6900     		.ascii	"i\000"
 5546 0807 01       		.byte	0x1
 5547 0808 E403     		.2byte	0x3e4
 5548 080a 81000000 		.4byte	0x81
 5549 080e 02       		.uleb128 0x2
 5550 080f 91       		.byte	0x91
 5551 0810 6F       		.sleb128 -17
 5552 0811 17       		.uleb128 0x17
 5553 0812 61766700 		.ascii	"avg\000"
 5554 0816 01       		.byte	0x1
 5555 0817 E503     		.2byte	0x3e5
 5556 0819 8C000000 		.4byte	0x8c
 5557 081d 02       		.uleb128 0x2
 5558 081e 91       		.byte	0x91
 5559 081f 6A       		.sleb128 -22
 5560 0820 11       		.uleb128 0x11
 5561 0821 C7060000 		.4byte	.LASF78
 5562 0825 01       		.byte	0x1
 5563 0826 E603     		.2byte	0x3e6
 5564 0828 8C000000 		.4byte	0x8c
 5565 082c 02       		.uleb128 0x2
 5566 082d 91       		.byte	0x91
 5567 082e 6C       		.sleb128 -20
 5568 082f 00       		.byte	0
 5569 0830 18       		.uleb128 0x18
 5570 0831 77000000 		.4byte	.LASF115
 5571 0835 01       		.byte	0x1
 5572 0836 4304     		.2byte	0x443
 5573 0838 00000000 		.4byte	.LFB53
 5574 083c DC000000 		.4byte	.LFE53-.LFB53
 5575 0840 01       		.uleb128 0x1
 5576 0841 9C       		.byte	0x9c
 5577 0842 56080000 		.4byte	0x856
 5578 0846 11       		.uleb128 0x11
 5579 0847 C7060000 		.4byte	.LASF78
 5580 084b 01       		.byte	0x1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 126


 5581 084c 4504     		.2byte	0x445
 5582 084e 8C000000 		.4byte	0x8c
 5583 0852 02       		.uleb128 0x2
 5584 0853 91       		.byte	0x91
 5585 0854 6E       		.sleb128 -18
 5586 0855 00       		.byte	0
 5587 0856 19       		.uleb128 0x19
 5588 0857 44040000 		.4byte	.LASF114
 5589 085b 01       		.byte	0x1
 5590 085c 8504     		.2byte	0x485
 5591 085e 00000000 		.4byte	.LFB54
 5592 0862 8C000000 		.4byte	.LFE54-.LFB54
 5593 0866 01       		.uleb128 0x1
 5594 0867 9C       		.byte	0x9c
 5595 0868 18       		.uleb128 0x18
 5596 0869 F3010000 		.4byte	.LASF116
 5597 086d 01       		.byte	0x1
 5598 086e B504     		.2byte	0x4b5
 5599 0870 00000000 		.4byte	.LFB55
 5600 0874 68010000 		.4byte	.LFE55-.LFB55
 5601 0878 01       		.uleb128 0x1
 5602 0879 9C       		.byte	0x9c
 5603 087a B1080000 		.4byte	0x8b1
 5604 087e 1A       		.uleb128 0x1a
 5605 087f 1E000000 		.4byte	.LBB2
 5606 0883 2C000000 		.4byte	.LBE2-.LBB2
 5607 0887 99080000 		.4byte	0x899
 5608 088b 17       		.uleb128 0x17
 5609 088c 6A00     		.ascii	"j\000"
 5610 088e 01       		.byte	0x1
 5611 088f BC04     		.2byte	0x4bc
 5612 0891 81000000 		.4byte	0x81
 5613 0895 02       		.uleb128 0x2
 5614 0896 91       		.byte	0x91
 5615 0897 77       		.sleb128 -9
 5616 0898 00       		.byte	0
 5617 0899 1B       		.uleb128 0x1b
 5618 089a 6E000000 		.4byte	.LBB3
 5619 089e 1C000000 		.4byte	.LBE3-.LBB3
 5620 08a2 17       		.uleb128 0x17
 5621 08a3 6900     		.ascii	"i\000"
 5622 08a5 01       		.byte	0x1
 5623 08a6 D004     		.2byte	0x4d0
 5624 08a8 68000000 		.4byte	0x68
 5625 08ac 02       		.uleb128 0x2
 5626 08ad 91       		.byte	0x91
 5627 08ae 70       		.sleb128 -16
 5628 08af 00       		.byte	0
 5629 08b0 00       		.byte	0
 5630 08b1 1C       		.uleb128 0x1c
 5631 08b2 3E070000 		.4byte	.LASF117
 5632 08b6 01       		.byte	0x1
 5633 08b7 0005     		.2byte	0x500
 5634 08b9 68000000 		.4byte	0x68
 5635 08bd 00000000 		.4byte	.LFB56
 5636 08c1 C8010000 		.4byte	.LFE56-.LFB56
 5637 08c5 01       		.uleb128 0x1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 127


 5638 08c6 9C       		.byte	0x9c
 5639 08c7 9C090000 		.4byte	0x99c
 5640 08cb 11       		.uleb128 0x11
 5641 08cc 2B000000 		.4byte	.LASF118
 5642 08d0 01       		.byte	0x1
 5643 08d1 0B05     		.2byte	0x50b
 5644 08d3 81000000 		.4byte	0x81
 5645 08d7 02       		.uleb128 0x2
 5646 08d8 91       		.byte	0x91
 5647 08d9 6F       		.sleb128 -17
 5648 08da 11       		.uleb128 0x11
 5649 08db 43070000 		.4byte	.LASF119
 5650 08df 01       		.byte	0x1
 5651 08e0 0C05     		.2byte	0x50c
 5652 08e2 9C090000 		.4byte	0x99c
 5653 08e6 03       		.uleb128 0x3
 5654 08e7 91       		.byte	0x91
 5655 08e8 B87F     		.sleb128 -72
 5656 08ea 11       		.uleb128 0x11
 5657 08eb 7F030000 		.4byte	.LASF120
 5658 08ef 01       		.byte	0x1
 5659 08f0 0D05     		.2byte	0x50d
 5660 08f2 81000000 		.4byte	0x81
 5661 08f6 02       		.uleb128 0x2
 5662 08f7 91       		.byte	0x91
 5663 08f8 6E       		.sleb128 -18
 5664 08f9 11       		.uleb128 0x11
 5665 08fa 02050000 		.4byte	.LASF121
 5666 08fe 01       		.byte	0x1
 5667 08ff 0E05     		.2byte	0x50e
 5668 0901 9C090000 		.4byte	0x99c
 5669 0905 03       		.uleb128 0x3
 5670 0906 91       		.byte	0x91
 5671 0907 907F     		.sleb128 -112
 5672 0909 11       		.uleb128 0x11
 5673 090a 0E020000 		.4byte	.LASF122
 5674 090e 01       		.byte	0x1
 5675 090f 0F05     		.2byte	0x50f
 5676 0911 81000000 		.4byte	0x81
 5677 0915 02       		.uleb128 0x2
 5678 0916 91       		.byte	0x91
 5679 0917 6D       		.sleb128 -19
 5680 0918 11       		.uleb128 0x11
 5681 0919 09030000 		.4byte	.LASF123
 5682 091d 01       		.byte	0x1
 5683 091e 1005     		.2byte	0x510
 5684 0920 9C090000 		.4byte	0x99c
 5685 0924 03       		.uleb128 0x3
 5686 0925 91       		.byte	0x91
 5687 0926 E87E     		.sleb128 -152
 5688 0928 11       		.uleb128 0x11
 5689 0929 40000000 		.4byte	.LASF124
 5690 092d 01       		.byte	0x1
 5691 092e 1105     		.2byte	0x511
 5692 0930 81000000 		.4byte	0x81
 5693 0934 02       		.uleb128 0x2
 5694 0935 91       		.byte	0x91
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 128


 5695 0936 6C       		.sleb128 -20
 5696 0937 11       		.uleb128 0x11
 5697 0938 6E000000 		.4byte	.LASF100
 5698 093c 01       		.byte	0x1
 5699 093d 1205     		.2byte	0x512
 5700 093f 9C090000 		.4byte	0x99c
 5701 0943 03       		.uleb128 0x3
 5702 0944 91       		.byte	0x91
 5703 0945 C07E     		.sleb128 -192
 5704 0947 11       		.uleb128 0x11
 5705 0948 00030000 		.4byte	.LASF125
 5706 094c 01       		.byte	0x1
 5707 094d 1305     		.2byte	0x513
 5708 094f 81000000 		.4byte	0x81
 5709 0953 02       		.uleb128 0x2
 5710 0954 91       		.byte	0x91
 5711 0955 6B       		.sleb128 -21
 5712 0956 11       		.uleb128 0x11
 5713 0957 56070000 		.4byte	.LASF103
 5714 095b 01       		.byte	0x1
 5715 095c 1405     		.2byte	0x514
 5716 095e 9C090000 		.4byte	0x99c
 5717 0962 03       		.uleb128 0x3
 5718 0963 91       		.byte	0x91
 5719 0964 987E     		.sleb128 -232
 5720 0966 11       		.uleb128 0x11
 5721 0967 37020000 		.4byte	.LASF126
 5722 096b 01       		.byte	0x1
 5723 096c 1E05     		.2byte	0x51e
 5724 096e 81000000 		.4byte	0x81
 5725 0972 02       		.uleb128 0x2
 5726 0973 91       		.byte	0x91
 5727 0974 6A       		.sleb128 -22
 5728 0975 11       		.uleb128 0x11
 5729 0976 DA060000 		.4byte	.LASF127
 5730 097a 01       		.byte	0x1
 5731 097b 1F05     		.2byte	0x51f
 5732 097d AD000000 		.4byte	0xad
 5733 0981 02       		.uleb128 0x2
 5734 0982 91       		.byte	0x91
 5735 0983 62       		.sleb128 -30
 5736 0984 1B       		.uleb128 0x1b
 5737 0985 9E000000 		.4byte	.LBB4
 5738 0989 50000000 		.4byte	.LBE4-.LBB4
 5739 098d 17       		.uleb128 0x17
 5740 098e 6900     		.ascii	"i\000"
 5741 0990 01       		.byte	0x1
 5742 0991 4E05     		.2byte	0x54e
 5743 0993 68000000 		.4byte	0x68
 5744 0997 02       		.uleb128 0x2
 5745 0998 91       		.byte	0x91
 5746 0999 64       		.sleb128 -28
 5747 099a 00       		.byte	0
 5748 099b 00       		.byte	0
 5749 099c 15       		.uleb128 0x15
 5750 099d 8C000000 		.4byte	0x8c
 5751 09a1 AC090000 		.4byte	0x9ac
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 129


 5752 09a5 16       		.uleb128 0x16
 5753 09a6 D2000000 		.4byte	0xd2
 5754 09aa 13       		.byte	0x13
 5755 09ab 00       		.byte	0
 5756 09ac 1D       		.uleb128 0x1d
 5757 09ad 1A060000 		.4byte	.LASF128
 5758 09b1 05       		.byte	0x5
 5759 09b2 19       		.byte	0x19
 5760 09b3 97000000 		.4byte	0x97
 5761 09b7 05       		.uleb128 0x5
 5762 09b8 03       		.byte	0x3
 5763 09b9 00000000 		.4byte	ELBOW_UPPER_BOUND
 5764 09bd 1D       		.uleb128 0x1d
 5765 09be 66010000 		.4byte	.LASF129
 5766 09c2 05       		.byte	0x5
 5767 09c3 1B       		.byte	0x1b
 5768 09c4 97000000 		.4byte	0x97
 5769 09c8 05       		.uleb128 0x5
 5770 09c9 03       		.byte	0x3
 5771 09ca 00000000 		.4byte	ELBOW_LOWER_BOUND
 5772 09ce 1D       		.uleb128 0x1d
 5773 09cf 35030000 		.4byte	.LASF130
 5774 09d3 05       		.byte	0x5
 5775 09d4 1D       		.byte	0x1d
 5776 09d5 97000000 		.4byte	0x97
 5777 09d9 05       		.uleb128 0x5
 5778 09da 03       		.byte	0x3
 5779 09db 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5780 09df 1D       		.uleb128 0x1d
 5781 09e0 4F050000 		.4byte	.LASF131
 5782 09e4 05       		.byte	0x5
 5783 09e5 1F       		.byte	0x1f
 5784 09e6 97000000 		.4byte	0x97
 5785 09ea 05       		.uleb128 0x5
 5786 09eb 03       		.byte	0x3
 5787 09ec 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5788 09f0 15       		.uleb128 0x15
 5789 09f1 A2000000 		.4byte	0xa2
 5790 09f5 000A0000 		.4byte	0xa00
 5791 09f9 16       		.uleb128 0x16
 5792 09fa D2000000 		.4byte	0xd2
 5793 09fe 15       		.byte	0x15
 5794 09ff 00       		.byte	0
 5795 0a00 1D       		.uleb128 0x1d
 5796 0a01 60020000 		.4byte	.LASF132
 5797 0a05 05       		.byte	0x5
 5798 0a06 38       		.byte	0x38
 5799 0a07 F0090000 		.4byte	0x9f0
 5800 0a0b 05       		.uleb128 0x5
 5801 0a0c 03       		.byte	0x3
 5802 0a0d 00000000 		.4byte	data_array
 5803 0a11 15       		.uleb128 0x15
 5804 0a12 76000000 		.4byte	0x76
 5805 0a16 210A0000 		.4byte	0xa21
 5806 0a1a 16       		.uleb128 0x16
 5807 0a1b D2000000 		.4byte	0xd2
 5808 0a1f 0D       		.byte	0xd
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 130


 5809 0a20 00       		.byte	0
 5810 0a21 1D       		.uleb128 0x1d
 5811 0a22 C6020000 		.4byte	.LASF133
 5812 0a26 05       		.byte	0x5
 5813 0a27 3B       		.byte	0x3b
 5814 0a28 110A0000 		.4byte	0xa11
 5815 0a2c 05       		.uleb128 0x5
 5816 0a2d 03       		.byte	0x3
 5817 0a2e 00000000 		.4byte	feedback_array
 5818 0a32 1D       		.uleb128 0x1d
 5819 0a33 C7040000 		.4byte	.LASF134
 5820 0a37 05       		.byte	0x5
 5821 0a38 3E       		.byte	0x3e
 5822 0a39 81000000 		.4byte	0x81
 5823 0a3d 05       		.uleb128 0x5
 5824 0a3e 03       		.byte	0x3
 5825 0a3f 00000000 		.4byte	wiznet
 5826 0a43 1D       		.uleb128 0x1d
 5827 0a44 20000000 		.4byte	.LASF135
 5828 0a48 05       		.byte	0x5
 5829 0a49 42       		.byte	0x42
 5830 0a4a F0090000 		.4byte	0x9f0
 5831 0a4e 05       		.uleb128 0x5
 5832 0a4f 03       		.byte	0x3
 5833 0a50 00000000 		.4byte	test_array
 5834 0a54 1D       		.uleb128 0x1d
 5835 0a55 8B030000 		.4byte	.LASF136
 5836 0a59 05       		.byte	0x5
 5837 0a5a 4B       		.byte	0x4b
 5838 0a5b 81000000 		.4byte	0x81
 5839 0a5f 05       		.uleb128 0x5
 5840 0a60 03       		.byte	0x3
 5841 0a61 00000000 		.4byte	WT_FLAG
 5842 0a65 1D       		.uleb128 0x1d
 5843 0a66 73020000 		.4byte	.LASF137
 5844 0a6a 05       		.byte	0x5
 5845 0a6b 4C       		.byte	0x4c
 5846 0a6c 81000000 		.4byte	0x81
 5847 0a70 05       		.uleb128 0x5
 5848 0a71 03       		.byte	0x3
 5849 0a72 00000000 		.4byte	WR_FLAG
 5850 0a76 1D       		.uleb128 0x1d
 5851 0a77 6C070000 		.4byte	.LASF138
 5852 0a7b 05       		.byte	0x5
 5853 0a7c 4D       		.byte	0x4d
 5854 0a7d 81000000 		.4byte	0x81
 5855 0a81 05       		.uleb128 0x5
 5856 0a82 03       		.byte	0x3
 5857 0a83 00000000 		.4byte	ELBOW_FLAG
 5858 0a87 1D       		.uleb128 0x1d
 5859 0a88 AA030000 		.4byte	.LASF139
 5860 0a8c 05       		.byte	0x5
 5861 0a8d 4E       		.byte	0x4e
 5862 0a8e 81000000 		.4byte	0x81
 5863 0a92 05       		.uleb128 0x5
 5864 0a93 03       		.byte	0x3
 5865 0a94 00000000 		.4byte	SHOULDER_FLAG
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 131


 5866 0a98 1D       		.uleb128 0x1d
 5867 0a99 9C020000 		.4byte	.LASF140
 5868 0a9d 05       		.byte	0x5
 5869 0a9e 4F       		.byte	0x4f
 5870 0a9f 81000000 		.4byte	0x81
 5871 0aa3 05       		.uleb128 0x5
 5872 0aa4 03       		.byte	0x3
 5873 0aa5 00000000 		.4byte	BA_FLAG
 5874 0aa9 1D       		.uleb128 0x1d
 5875 0aaa 27030000 		.4byte	.LASF141
 5876 0aae 05       		.byte	0x5
 5877 0aaf 50       		.byte	0x50
 5878 0ab0 81000000 		.4byte	0x81
 5879 0ab4 05       		.uleb128 0x5
 5880 0ab5 03       		.byte	0x3
 5881 0ab6 00000000 		.4byte	EFFECTOR_FLAG
 5882 0aba 1D       		.uleb128 0x1d
 5883 0abb E3020000 		.4byte	.LASF142
 5884 0abf 05       		.byte	0x5
 5885 0ac0 51       		.byte	0x51
 5886 0ac1 81000000 		.4byte	0x81
 5887 0ac5 05       		.uleb128 0x5
 5888 0ac6 03       		.byte	0x3
 5889 0ac7 00000000 		.4byte	PH_FLAG
 5890 0acb 1D       		.uleb128 0x1d
 5891 0acc 2E070000 		.4byte	.LASF143
 5892 0ad0 05       		.byte	0x5
 5893 0ad1 54       		.byte	0x54
 5894 0ad2 8C000000 		.4byte	0x8c
 5895 0ad6 05       		.uleb128 0x5
 5896 0ad7 03       		.byte	0x3
 5897 0ad8 00000000 		.4byte	dropped_packets
 5898 0adc 1D       		.uleb128 0x1d
 5899 0add 2A010000 		.4byte	.LASF144
 5900 0ae1 05       		.byte	0x5
 5901 0ae2 55       		.byte	0x55
 5902 0ae3 8C000000 		.4byte	0x8c
 5903 0ae7 05       		.uleb128 0x5
 5904 0ae8 03       		.byte	0x3
 5905 0ae9 00000000 		.4byte	fail_safe_errors
 5906 0aed 1D       		.uleb128 0x1d
 5907 0aee 8F070000 		.4byte	.LASF145
 5908 0af2 05       		.byte	0x5
 5909 0af3 56       		.byte	0x56
 5910 0af4 8C000000 		.4byte	0x8c
 5911 0af8 05       		.uleb128 0x5
 5912 0af9 03       		.byte	0x3
 5913 0afa 00000000 		.4byte	shldr_errors
 5914 0afe 1D       		.uleb128 0x1d
 5915 0aff 34000000 		.4byte	.LASF146
 5916 0b03 05       		.byte	0x5
 5917 0b04 57       		.byte	0x57
 5918 0b05 8C000000 		.4byte	0x8c
 5919 0b09 05       		.uleb128 0x5
 5920 0b0a 03       		.byte	0x3
 5921 0b0b 00000000 		.4byte	elbw_errors
 5922 0b0f 1D       		.uleb128 0x1d
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 132


 5923 0b10 19020000 		.4byte	.LASF147
 5924 0b14 05       		.byte	0x5
 5925 0b15 58       		.byte	0x58
 5926 0b16 8C000000 		.4byte	0x8c
 5927 0b1a 05       		.uleb128 0x5
 5928 0b1b 03       		.byte	0x3
 5929 0b1c 00000000 		.4byte	BA_errors
 5930 0b20 1D       		.uleb128 0x1d
 5931 0b21 CC010000 		.4byte	.LASF148
 5932 0b25 05       		.byte	0x5
 5933 0b26 59       		.byte	0x59
 5934 0b27 8C000000 		.4byte	0x8c
 5935 0b2b 05       		.uleb128 0x5
 5936 0b2c 03       		.byte	0x3
 5937 0b2d 00000000 		.4byte	WT_errors
 5938 0b31 1D       		.uleb128 0x1d
 5939 0b32 92040000 		.4byte	.LASF149
 5940 0b36 05       		.byte	0x5
 5941 0b37 5A       		.byte	0x5a
 5942 0b38 8C000000 		.4byte	0x8c
 5943 0b3c 05       		.uleb128 0x5
 5944 0b3d 03       		.byte	0x3
 5945 0b3e 00000000 		.4byte	WR_errors
 5946 0b42 1D       		.uleb128 0x1d
 5947 0b43 D6010000 		.4byte	.LASF150
 5948 0b47 05       		.byte	0x5
 5949 0b48 5B       		.byte	0x5b
 5950 0b49 8C000000 		.4byte	0x8c
 5951 0b4d 05       		.uleb128 0x5
 5952 0b4e 03       		.byte	0x3
 5953 0b4f 00000000 		.4byte	eff_errors
 5954 0b53 1D       		.uleb128 0x1d
 5955 0b54 A1010000 		.4byte	.LASF151
 5956 0b58 05       		.byte	0x5
 5957 0b59 5D       		.byte	0x5d
 5958 0b5a CD000000 		.4byte	0xcd
 5959 0b5e 05       		.uleb128 0x5
 5960 0b5f 03       		.byte	0x3
 5961 0b60 00000000 		.4byte	timerFlag
 5962 0b64 1E       		.uleb128 0x1e
 5963 0b65 C3030000 		.4byte	.LASF152
 5964 0b69 01       		.byte	0x1
 5965 0b6a A101     		.2byte	0x1a1
 5966 0b6c D9000000 		.4byte	0xd9
 5967 0b70 05       		.uleb128 0x5
 5968 0b71 03       		.byte	0x3
 5969 0b72 00000000 		.4byte	wristTilt_state
 5970 0b76 1E       		.uleb128 0x1e
 5971 0b77 9C040000 		.4byte	.LASF153
 5972 0b7b 01       		.byte	0x1
 5973 0b7c 0902     		.2byte	0x209
 5974 0b7e FF000000 		.4byte	0xff
 5975 0b82 05       		.uleb128 0x5
 5976 0b83 03       		.byte	0x3
 5977 0b84 00000000 		.4byte	wristRotate_state
 5978 0b88 1E       		.uleb128 0x1e
 5979 0b89 46010000 		.4byte	.LASF154
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 133


 5980 0b8d 01       		.byte	0x1
 5981 0b8e 7402     		.2byte	0x274
 5982 0b90 25010000 		.4byte	0x125
 5983 0b94 05       		.uleb128 0x5
 5984 0b95 03       		.byte	0x3
 5985 0b96 00000000 		.4byte	elbow_state
 5986 0b9a 1E       		.uleb128 0x1e
 5987 0b9b E9000000 		.4byte	.LASF155
 5988 0b9f 01       		.byte	0x1
 5989 0ba0 2903     		.2byte	0x329
 5990 0ba2 4B010000 		.4byte	0x14b
 5991 0ba6 05       		.uleb128 0x5
 5992 0ba7 03       		.byte	0x3
 5993 0ba8 00000000 		.4byte	shoulder_state
 5994 0bac 1E       		.uleb128 0x1e
 5995 0bad 57040000 		.4byte	.LASF156
 5996 0bb1 01       		.byte	0x1
 5997 0bb2 DE03     		.2byte	0x3de
 5998 0bb4 71010000 		.4byte	0x171
 5999 0bb8 05       		.uleb128 0x5
 6000 0bb9 03       		.byte	0x3
 6001 0bba 00000000 		.4byte	baseAzimuth_state
 6002 0bbe 1E       		.uleb128 0x1e
 6003 0bbf 63030000 		.4byte	.LASF157
 6004 0bc3 01       		.byte	0x1
 6005 0bc4 4204     		.2byte	0x442
 6006 0bc6 97010000 		.4byte	0x197
 6007 0bca 05       		.uleb128 0x5
 6008 0bcb 03       		.byte	0x3
 6009 0bcc 00000000 		.4byte	effector_state
 6010 0bd0 1E       		.uleb128 0x1e
 6011 0bd1 FA060000 		.4byte	.LASF158
 6012 0bd5 01       		.byte	0x1
 6013 0bd6 8404     		.2byte	0x484
 6014 0bd8 BD010000 		.4byte	0x1bd
 6015 0bdc 05       		.uleb128 0x5
 6016 0bdd 03       		.byte	0x3
 6017 0bde 00000000 		.4byte	phSensor_state
 6018 0be2 00       		.byte	0
 6019              		.section	.debug_abbrev,"",%progbits
 6020              	.Ldebug_abbrev0:
 6021 0000 01       		.uleb128 0x1
 6022 0001 11       		.uleb128 0x11
 6023 0002 01       		.byte	0x1
 6024 0003 25       		.uleb128 0x25
 6025 0004 0E       		.uleb128 0xe
 6026 0005 13       		.uleb128 0x13
 6027 0006 0B       		.uleb128 0xb
 6028 0007 03       		.uleb128 0x3
 6029 0008 0E       		.uleb128 0xe
 6030 0009 1B       		.uleb128 0x1b
 6031 000a 0E       		.uleb128 0xe
 6032 000b 55       		.uleb128 0x55
 6033 000c 17       		.uleb128 0x17
 6034 000d 11       		.uleb128 0x11
 6035 000e 01       		.uleb128 0x1
 6036 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 134


 6037 0010 17       		.uleb128 0x17
 6038 0011 00       		.byte	0
 6039 0012 00       		.byte	0
 6040 0013 02       		.uleb128 0x2
 6041 0014 24       		.uleb128 0x24
 6042 0015 00       		.byte	0
 6043 0016 0B       		.uleb128 0xb
 6044 0017 0B       		.uleb128 0xb
 6045 0018 3E       		.uleb128 0x3e
 6046 0019 0B       		.uleb128 0xb
 6047 001a 03       		.uleb128 0x3
 6048 001b 0E       		.uleb128 0xe
 6049 001c 00       		.byte	0
 6050 001d 00       		.byte	0
 6051 001e 03       		.uleb128 0x3
 6052 001f 16       		.uleb128 0x16
 6053 0020 00       		.byte	0
 6054 0021 03       		.uleb128 0x3
 6055 0022 0E       		.uleb128 0xe
 6056 0023 3A       		.uleb128 0x3a
 6057 0024 0B       		.uleb128 0xb
 6058 0025 3B       		.uleb128 0x3b
 6059 0026 0B       		.uleb128 0xb
 6060 0027 49       		.uleb128 0x49
 6061 0028 13       		.uleb128 0x13
 6062 0029 00       		.byte	0
 6063 002a 00       		.byte	0
 6064 002b 04       		.uleb128 0x4
 6065 002c 24       		.uleb128 0x24
 6066 002d 00       		.byte	0
 6067 002e 0B       		.uleb128 0xb
 6068 002f 0B       		.uleb128 0xb
 6069 0030 3E       		.uleb128 0x3e
 6070 0031 0B       		.uleb128 0xb
 6071 0032 03       		.uleb128 0x3
 6072 0033 08       		.uleb128 0x8
 6073 0034 00       		.byte	0
 6074 0035 00       		.byte	0
 6075 0036 05       		.uleb128 0x5
 6076 0037 35       		.uleb128 0x35
 6077 0038 00       		.byte	0
 6078 0039 49       		.uleb128 0x49
 6079 003a 13       		.uleb128 0x13
 6080 003b 00       		.byte	0
 6081 003c 00       		.byte	0
 6082 003d 06       		.uleb128 0x6
 6083 003e 04       		.uleb128 0x4
 6084 003f 01       		.byte	0x1
 6085 0040 03       		.uleb128 0x3
 6086 0041 0E       		.uleb128 0xe
 6087 0042 0B       		.uleb128 0xb
 6088 0043 0B       		.uleb128 0xb
 6089 0044 3A       		.uleb128 0x3a
 6090 0045 0B       		.uleb128 0xb
 6091 0046 3B       		.uleb128 0x3b
 6092 0047 05       		.uleb128 0x5
 6093 0048 01       		.uleb128 0x1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 135


 6094 0049 13       		.uleb128 0x13
 6095 004a 00       		.byte	0
 6096 004b 00       		.byte	0
 6097 004c 07       		.uleb128 0x7
 6098 004d 28       		.uleb128 0x28
 6099 004e 00       		.byte	0
 6100 004f 03       		.uleb128 0x3
 6101 0050 0E       		.uleb128 0xe
 6102 0051 1C       		.uleb128 0x1c
 6103 0052 0D       		.uleb128 0xd
 6104 0053 00       		.byte	0
 6105 0054 00       		.byte	0
 6106 0055 08       		.uleb128 0x8
 6107 0056 2E       		.uleb128 0x2e
 6108 0057 01       		.byte	0x1
 6109 0058 3F       		.uleb128 0x3f
 6110 0059 19       		.uleb128 0x19
 6111 005a 03       		.uleb128 0x3
 6112 005b 0E       		.uleb128 0xe
 6113 005c 3A       		.uleb128 0x3a
 6114 005d 0B       		.uleb128 0xb
 6115 005e 3B       		.uleb128 0x3b
 6116 005f 0B       		.uleb128 0xb
 6117 0060 27       		.uleb128 0x27
 6118 0061 19       		.uleb128 0x19
 6119 0062 11       		.uleb128 0x11
 6120 0063 01       		.uleb128 0x1
 6121 0064 12       		.uleb128 0x12
 6122 0065 06       		.uleb128 0x6
 6123 0066 40       		.uleb128 0x40
 6124 0067 18       		.uleb128 0x18
 6125 0068 9642     		.uleb128 0x2116
 6126 006a 19       		.uleb128 0x19
 6127 006b 01       		.uleb128 0x1
 6128 006c 13       		.uleb128 0x13
 6129 006d 00       		.byte	0
 6130 006e 00       		.byte	0
 6131 006f 09       		.uleb128 0x9
 6132 0070 34       		.uleb128 0x34
 6133 0071 00       		.byte	0
 6134 0072 03       		.uleb128 0x3
 6135 0073 0E       		.uleb128 0xe
 6136 0074 3A       		.uleb128 0x3a
 6137 0075 0B       		.uleb128 0xb
 6138 0076 3B       		.uleb128 0x3b
 6139 0077 0B       		.uleb128 0xb
 6140 0078 49       		.uleb128 0x49
 6141 0079 13       		.uleb128 0x13
 6142 007a 02       		.uleb128 0x2
 6143 007b 18       		.uleb128 0x18
 6144 007c 00       		.byte	0
 6145 007d 00       		.byte	0
 6146 007e 0A       		.uleb128 0xa
 6147 007f 2E       		.uleb128 0x2e
 6148 0080 01       		.byte	0x1
 6149 0081 3F       		.uleb128 0x3f
 6150 0082 19       		.uleb128 0x19
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 136


 6151 0083 03       		.uleb128 0x3
 6152 0084 0E       		.uleb128 0xe
 6153 0085 3A       		.uleb128 0x3a
 6154 0086 0B       		.uleb128 0xb
 6155 0087 3B       		.uleb128 0x3b
 6156 0088 0B       		.uleb128 0xb
 6157 0089 27       		.uleb128 0x27
 6158 008a 19       		.uleb128 0x19
 6159 008b 49       		.uleb128 0x49
 6160 008c 13       		.uleb128 0x13
 6161 008d 11       		.uleb128 0x11
 6162 008e 01       		.uleb128 0x1
 6163 008f 12       		.uleb128 0x12
 6164 0090 06       		.uleb128 0x6
 6165 0091 40       		.uleb128 0x40
 6166 0092 18       		.uleb128 0x18
 6167 0093 9642     		.uleb128 0x2116
 6168 0095 19       		.uleb128 0x19
 6169 0096 01       		.uleb128 0x1
 6170 0097 13       		.uleb128 0x13
 6171 0098 00       		.byte	0
 6172 0099 00       		.byte	0
 6173 009a 0B       		.uleb128 0xb
 6174 009b 05       		.uleb128 0x5
 6175 009c 00       		.byte	0
 6176 009d 03       		.uleb128 0x3
 6177 009e 0E       		.uleb128 0xe
 6178 009f 3A       		.uleb128 0x3a
 6179 00a0 0B       		.uleb128 0xb
 6180 00a1 3B       		.uleb128 0x3b
 6181 00a2 0B       		.uleb128 0xb
 6182 00a3 49       		.uleb128 0x49
 6183 00a4 13       		.uleb128 0x13
 6184 00a5 02       		.uleb128 0x2
 6185 00a6 18       		.uleb128 0x18
 6186 00a7 00       		.byte	0
 6187 00a8 00       		.byte	0
 6188 00a9 0C       		.uleb128 0xc
 6189 00aa 34       		.uleb128 0x34
 6190 00ab 00       		.byte	0
 6191 00ac 03       		.uleb128 0x3
 6192 00ad 08       		.uleb128 0x8
 6193 00ae 3A       		.uleb128 0x3a
 6194 00af 0B       		.uleb128 0xb
 6195 00b0 3B       		.uleb128 0x3b
 6196 00b1 0B       		.uleb128 0xb
 6197 00b2 49       		.uleb128 0x49
 6198 00b3 13       		.uleb128 0x13
 6199 00b4 02       		.uleb128 0x2
 6200 00b5 18       		.uleb128 0x18
 6201 00b6 00       		.byte	0
 6202 00b7 00       		.byte	0
 6203 00b8 0D       		.uleb128 0xd
 6204 00b9 0F       		.uleb128 0xf
 6205 00ba 00       		.byte	0
 6206 00bb 0B       		.uleb128 0xb
 6207 00bc 0B       		.uleb128 0xb
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 137


 6208 00bd 49       		.uleb128 0x49
 6209 00be 13       		.uleb128 0x13
 6210 00bf 00       		.byte	0
 6211 00c0 00       		.byte	0
 6212 00c1 0E       		.uleb128 0xe
 6213 00c2 2E       		.uleb128 0x2e
 6214 00c3 01       		.byte	0x1
 6215 00c4 3F       		.uleb128 0x3f
 6216 00c5 19       		.uleb128 0x19
 6217 00c6 03       		.uleb128 0x3
 6218 00c7 0E       		.uleb128 0xe
 6219 00c8 3A       		.uleb128 0x3a
 6220 00c9 0B       		.uleb128 0xb
 6221 00ca 3B       		.uleb128 0x3b
 6222 00cb 0B       		.uleb128 0xb
 6223 00cc 27       		.uleb128 0x27
 6224 00cd 19       		.uleb128 0x19
 6225 00ce 49       		.uleb128 0x49
 6226 00cf 13       		.uleb128 0x13
 6227 00d0 11       		.uleb128 0x11
 6228 00d1 01       		.uleb128 0x1
 6229 00d2 12       		.uleb128 0x12
 6230 00d3 06       		.uleb128 0x6
 6231 00d4 40       		.uleb128 0x40
 6232 00d5 18       		.uleb128 0x18
 6233 00d6 9742     		.uleb128 0x2117
 6234 00d8 19       		.uleb128 0x19
 6235 00d9 01       		.uleb128 0x1
 6236 00da 13       		.uleb128 0x13
 6237 00db 00       		.byte	0
 6238 00dc 00       		.byte	0
 6239 00dd 0F       		.uleb128 0xf
 6240 00de 2E       		.uleb128 0x2e
 6241 00df 01       		.byte	0x1
 6242 00e0 3F       		.uleb128 0x3f
 6243 00e1 19       		.uleb128 0x19
 6244 00e2 03       		.uleb128 0x3
 6245 00e3 0E       		.uleb128 0xe
 6246 00e4 3A       		.uleb128 0x3a
 6247 00e5 0B       		.uleb128 0xb
 6248 00e6 3B       		.uleb128 0x3b
 6249 00e7 05       		.uleb128 0x5
 6250 00e8 27       		.uleb128 0x27
 6251 00e9 19       		.uleb128 0x19
 6252 00ea 49       		.uleb128 0x49
 6253 00eb 13       		.uleb128 0x13
 6254 00ec 11       		.uleb128 0x11
 6255 00ed 01       		.uleb128 0x1
 6256 00ee 12       		.uleb128 0x12
 6257 00ef 06       		.uleb128 0x6
 6258 00f0 40       		.uleb128 0x40
 6259 00f1 18       		.uleb128 0x18
 6260 00f2 9742     		.uleb128 0x2117
 6261 00f4 19       		.uleb128 0x19
 6262 00f5 01       		.uleb128 0x1
 6263 00f6 13       		.uleb128 0x13
 6264 00f7 00       		.byte	0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 138


 6265 00f8 00       		.byte	0
 6266 00f9 10       		.uleb128 0x10
 6267 00fa 05       		.uleb128 0x5
 6268 00fb 00       		.byte	0
 6269 00fc 03       		.uleb128 0x3
 6270 00fd 0E       		.uleb128 0xe
 6271 00fe 3A       		.uleb128 0x3a
 6272 00ff 0B       		.uleb128 0xb
 6273 0100 3B       		.uleb128 0x3b
 6274 0101 05       		.uleb128 0x5
 6275 0102 49       		.uleb128 0x49
 6276 0103 13       		.uleb128 0x13
 6277 0104 02       		.uleb128 0x2
 6278 0105 18       		.uleb128 0x18
 6279 0106 00       		.byte	0
 6280 0107 00       		.byte	0
 6281 0108 11       		.uleb128 0x11
 6282 0109 34       		.uleb128 0x34
 6283 010a 00       		.byte	0
 6284 010b 03       		.uleb128 0x3
 6285 010c 0E       		.uleb128 0xe
 6286 010d 3A       		.uleb128 0x3a
 6287 010e 0B       		.uleb128 0xb
 6288 010f 3B       		.uleb128 0x3b
 6289 0110 05       		.uleb128 0x5
 6290 0111 49       		.uleb128 0x49
 6291 0112 13       		.uleb128 0x13
 6292 0113 02       		.uleb128 0x2
 6293 0114 18       		.uleb128 0x18
 6294 0115 00       		.byte	0
 6295 0116 00       		.byte	0
 6296 0117 12       		.uleb128 0x12
 6297 0118 2E       		.uleb128 0x2e
 6298 0119 01       		.byte	0x1
 6299 011a 3F       		.uleb128 0x3f
 6300 011b 19       		.uleb128 0x19
 6301 011c 03       		.uleb128 0x3
 6302 011d 0E       		.uleb128 0xe
 6303 011e 3A       		.uleb128 0x3a
 6304 011f 0B       		.uleb128 0xb
 6305 0120 3B       		.uleb128 0x3b
 6306 0121 05       		.uleb128 0x5
 6307 0122 27       		.uleb128 0x27
 6308 0123 19       		.uleb128 0x19
 6309 0124 49       		.uleb128 0x49
 6310 0125 13       		.uleb128 0x13
 6311 0126 11       		.uleb128 0x11
 6312 0127 01       		.uleb128 0x1
 6313 0128 12       		.uleb128 0x12
 6314 0129 06       		.uleb128 0x6
 6315 012a 40       		.uleb128 0x40
 6316 012b 18       		.uleb128 0x18
 6317 012c 9642     		.uleb128 0x2116
 6318 012e 19       		.uleb128 0x19
 6319 012f 01       		.uleb128 0x1
 6320 0130 13       		.uleb128 0x13
 6321 0131 00       		.byte	0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 139


 6322 0132 00       		.byte	0
 6323 0133 13       		.uleb128 0x13
 6324 0134 2E       		.uleb128 0x2e
 6325 0135 01       		.byte	0x1
 6326 0136 3F       		.uleb128 0x3f
 6327 0137 19       		.uleb128 0x19
 6328 0138 03       		.uleb128 0x3
 6329 0139 0E       		.uleb128 0xe
 6330 013a 3A       		.uleb128 0x3a
 6331 013b 0B       		.uleb128 0xb
 6332 013c 3B       		.uleb128 0x3b
 6333 013d 05       		.uleb128 0x5
 6334 013e 27       		.uleb128 0x27
 6335 013f 19       		.uleb128 0x19
 6336 0140 11       		.uleb128 0x11
 6337 0141 01       		.uleb128 0x1
 6338 0142 12       		.uleb128 0x12
 6339 0143 06       		.uleb128 0x6
 6340 0144 40       		.uleb128 0x40
 6341 0145 18       		.uleb128 0x18
 6342 0146 9642     		.uleb128 0x2116
 6343 0148 19       		.uleb128 0x19
 6344 0149 01       		.uleb128 0x1
 6345 014a 13       		.uleb128 0x13
 6346 014b 00       		.byte	0
 6347 014c 00       		.byte	0
 6348 014d 14       		.uleb128 0x14
 6349 014e 2E       		.uleb128 0x2e
 6350 014f 00       		.byte	0
 6351 0150 3F       		.uleb128 0x3f
 6352 0151 19       		.uleb128 0x19
 6353 0152 03       		.uleb128 0x3
 6354 0153 0E       		.uleb128 0xe
 6355 0154 3A       		.uleb128 0x3a
 6356 0155 0B       		.uleb128 0xb
 6357 0156 3B       		.uleb128 0x3b
 6358 0157 05       		.uleb128 0x5
 6359 0158 11       		.uleb128 0x11
 6360 0159 01       		.uleb128 0x1
 6361 015a 12       		.uleb128 0x12
 6362 015b 06       		.uleb128 0x6
 6363 015c 40       		.uleb128 0x40
 6364 015d 18       		.uleb128 0x18
 6365 015e 9642     		.uleb128 0x2116
 6366 0160 19       		.uleb128 0x19
 6367 0161 00       		.byte	0
 6368 0162 00       		.byte	0
 6369 0163 15       		.uleb128 0x15
 6370 0164 01       		.uleb128 0x1
 6371 0165 01       		.byte	0x1
 6372 0166 49       		.uleb128 0x49
 6373 0167 13       		.uleb128 0x13
 6374 0168 01       		.uleb128 0x1
 6375 0169 13       		.uleb128 0x13
 6376 016a 00       		.byte	0
 6377 016b 00       		.byte	0
 6378 016c 16       		.uleb128 0x16
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 140


 6379 016d 21       		.uleb128 0x21
 6380 016e 00       		.byte	0
 6381 016f 49       		.uleb128 0x49
 6382 0170 13       		.uleb128 0x13
 6383 0171 2F       		.uleb128 0x2f
 6384 0172 0B       		.uleb128 0xb
 6385 0173 00       		.byte	0
 6386 0174 00       		.byte	0
 6387 0175 17       		.uleb128 0x17
 6388 0176 34       		.uleb128 0x34
 6389 0177 00       		.byte	0
 6390 0178 03       		.uleb128 0x3
 6391 0179 08       		.uleb128 0x8
 6392 017a 3A       		.uleb128 0x3a
 6393 017b 0B       		.uleb128 0xb
 6394 017c 3B       		.uleb128 0x3b
 6395 017d 05       		.uleb128 0x5
 6396 017e 49       		.uleb128 0x49
 6397 017f 13       		.uleb128 0x13
 6398 0180 02       		.uleb128 0x2
 6399 0181 18       		.uleb128 0x18
 6400 0182 00       		.byte	0
 6401 0183 00       		.byte	0
 6402 0184 18       		.uleb128 0x18
 6403 0185 2E       		.uleb128 0x2e
 6404 0186 01       		.byte	0x1
 6405 0187 3F       		.uleb128 0x3f
 6406 0188 19       		.uleb128 0x19
 6407 0189 03       		.uleb128 0x3
 6408 018a 0E       		.uleb128 0xe
 6409 018b 3A       		.uleb128 0x3a
 6410 018c 0B       		.uleb128 0xb
 6411 018d 3B       		.uleb128 0x3b
 6412 018e 05       		.uleb128 0x5
 6413 018f 11       		.uleb128 0x11
 6414 0190 01       		.uleb128 0x1
 6415 0191 12       		.uleb128 0x12
 6416 0192 06       		.uleb128 0x6
 6417 0193 40       		.uleb128 0x40
 6418 0194 18       		.uleb128 0x18
 6419 0195 9642     		.uleb128 0x2116
 6420 0197 19       		.uleb128 0x19
 6421 0198 01       		.uleb128 0x1
 6422 0199 13       		.uleb128 0x13
 6423 019a 00       		.byte	0
 6424 019b 00       		.byte	0
 6425 019c 19       		.uleb128 0x19
 6426 019d 2E       		.uleb128 0x2e
 6427 019e 00       		.byte	0
 6428 019f 3F       		.uleb128 0x3f
 6429 01a0 19       		.uleb128 0x19
 6430 01a1 03       		.uleb128 0x3
 6431 01a2 0E       		.uleb128 0xe
 6432 01a3 3A       		.uleb128 0x3a
 6433 01a4 0B       		.uleb128 0xb
 6434 01a5 3B       		.uleb128 0x3b
 6435 01a6 05       		.uleb128 0x5
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 141


 6436 01a7 11       		.uleb128 0x11
 6437 01a8 01       		.uleb128 0x1
 6438 01a9 12       		.uleb128 0x12
 6439 01aa 06       		.uleb128 0x6
 6440 01ab 40       		.uleb128 0x40
 6441 01ac 18       		.uleb128 0x18
 6442 01ad 9742     		.uleb128 0x2117
 6443 01af 19       		.uleb128 0x19
 6444 01b0 00       		.byte	0
 6445 01b1 00       		.byte	0
 6446 01b2 1A       		.uleb128 0x1a
 6447 01b3 0B       		.uleb128 0xb
 6448 01b4 01       		.byte	0x1
 6449 01b5 11       		.uleb128 0x11
 6450 01b6 01       		.uleb128 0x1
 6451 01b7 12       		.uleb128 0x12
 6452 01b8 06       		.uleb128 0x6
 6453 01b9 01       		.uleb128 0x1
 6454 01ba 13       		.uleb128 0x13
 6455 01bb 00       		.byte	0
 6456 01bc 00       		.byte	0
 6457 01bd 1B       		.uleb128 0x1b
 6458 01be 0B       		.uleb128 0xb
 6459 01bf 01       		.byte	0x1
 6460 01c0 11       		.uleb128 0x11
 6461 01c1 01       		.uleb128 0x1
 6462 01c2 12       		.uleb128 0x12
 6463 01c3 06       		.uleb128 0x6
 6464 01c4 00       		.byte	0
 6465 01c5 00       		.byte	0
 6466 01c6 1C       		.uleb128 0x1c
 6467 01c7 2E       		.uleb128 0x2e
 6468 01c8 01       		.byte	0x1
 6469 01c9 3F       		.uleb128 0x3f
 6470 01ca 19       		.uleb128 0x19
 6471 01cb 03       		.uleb128 0x3
 6472 01cc 0E       		.uleb128 0xe
 6473 01cd 3A       		.uleb128 0x3a
 6474 01ce 0B       		.uleb128 0xb
 6475 01cf 3B       		.uleb128 0x3b
 6476 01d0 05       		.uleb128 0x5
 6477 01d1 49       		.uleb128 0x49
 6478 01d2 13       		.uleb128 0x13
 6479 01d3 11       		.uleb128 0x11
 6480 01d4 01       		.uleb128 0x1
 6481 01d5 12       		.uleb128 0x12
 6482 01d6 06       		.uleb128 0x6
 6483 01d7 40       		.uleb128 0x40
 6484 01d8 18       		.uleb128 0x18
 6485 01d9 9642     		.uleb128 0x2116
 6486 01db 19       		.uleb128 0x19
 6487 01dc 01       		.uleb128 0x1
 6488 01dd 13       		.uleb128 0x13
 6489 01de 00       		.byte	0
 6490 01df 00       		.byte	0
 6491 01e0 1D       		.uleb128 0x1d
 6492 01e1 34       		.uleb128 0x34
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 142


 6493 01e2 00       		.byte	0
 6494 01e3 03       		.uleb128 0x3
 6495 01e4 0E       		.uleb128 0xe
 6496 01e5 3A       		.uleb128 0x3a
 6497 01e6 0B       		.uleb128 0xb
 6498 01e7 3B       		.uleb128 0x3b
 6499 01e8 0B       		.uleb128 0xb
 6500 01e9 49       		.uleb128 0x49
 6501 01ea 13       		.uleb128 0x13
 6502 01eb 3F       		.uleb128 0x3f
 6503 01ec 19       		.uleb128 0x19
 6504 01ed 02       		.uleb128 0x2
 6505 01ee 18       		.uleb128 0x18
 6506 01ef 00       		.byte	0
 6507 01f0 00       		.byte	0
 6508 01f1 1E       		.uleb128 0x1e
 6509 01f2 34       		.uleb128 0x34
 6510 01f3 00       		.byte	0
 6511 01f4 03       		.uleb128 0x3
 6512 01f5 0E       		.uleb128 0xe
 6513 01f6 3A       		.uleb128 0x3a
 6514 01f7 0B       		.uleb128 0xb
 6515 01f8 3B       		.uleb128 0x3b
 6516 01f9 05       		.uleb128 0x5
 6517 01fa 49       		.uleb128 0x49
 6518 01fb 13       		.uleb128 0x13
 6519 01fc 3F       		.uleb128 0x3f
 6520 01fd 19       		.uleb128 0x19
 6521 01fe 02       		.uleb128 0x2
 6522 01ff 18       		.uleb128 0x18
 6523 0200 00       		.byte	0
 6524 0201 00       		.byte	0
 6525 0202 00       		.byte	0
 6526              		.section	.debug_aranges,"",%progbits
 6527 0000 CC000000 		.4byte	0xcc
 6528 0004 0200     		.2byte	0x2
 6529 0006 00000000 		.4byte	.Ldebug_info0
 6530 000a 04       		.byte	0x4
 6531 000b 00       		.byte	0
 6532 000c 0000     		.2byte	0
 6533 000e 0000     		.2byte	0
 6534 0010 00000000 		.4byte	.LFB34
 6535 0014 28000000 		.4byte	.LFE34-.LFB34
 6536 0018 00000000 		.4byte	.LFB35
 6537 001c 68010000 		.4byte	.LFE35-.LFB35
 6538 0020 00000000 		.4byte	.LFB36
 6539 0024 68010000 		.4byte	.LFE36-.LFB36
 6540 0028 00000000 		.4byte	.LFB37
 6541 002c 78000000 		.4byte	.LFE37-.LFB37
 6542 0030 00000000 		.4byte	.LFB38
 6543 0034 3E000000 		.4byte	.LFE38-.LFB38
 6544 0038 00000000 		.4byte	.LFB39
 6545 003c 0C010000 		.4byte	.LFE39-.LFB39
 6546 0040 00000000 		.4byte	.LFB40
 6547 0044 0C020000 		.4byte	.LFE40-.LFB40
 6548 0048 00000000 		.4byte	.LFB41
 6549 004c 84000000 		.4byte	.LFE41-.LFB41
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 143


 6550 0050 00000000 		.4byte	.LFB42
 6551 0054 28000000 		.4byte	.LFE42-.LFB42
 6552 0058 00000000 		.4byte	.LFB43
 6553 005c 04010000 		.4byte	.LFE43-.LFB43
 6554 0060 00000000 		.4byte	.LFB44
 6555 0064 18000000 		.4byte	.LFE44-.LFB44
 6556 0068 00000000 		.4byte	.LFB45
 6557 006c 98000000 		.4byte	.LFE45-.LFB45
 6558 0070 00000000 		.4byte	.LFB46
 6559 0074 98000000 		.4byte	.LFE46-.LFB46
 6560 0078 00000000 		.4byte	.LFB47
 6561 007c 98000000 		.4byte	.LFE47-.LFB47
 6562 0080 00000000 		.4byte	.LFB48
 6563 0084 6C010000 		.4byte	.LFE48-.LFB48
 6564 0088 00000000 		.4byte	.LFB49
 6565 008c 6C010000 		.4byte	.LFE49-.LFB49
 6566 0090 00000000 		.4byte	.LFB50
 6567 0094 44030000 		.4byte	.LFE50-.LFB50
 6568 0098 00000000 		.4byte	.LFB51
 6569 009c 44030000 		.4byte	.LFE51-.LFB51
 6570 00a0 00000000 		.4byte	.LFB52
 6571 00a4 5C010000 		.4byte	.LFE52-.LFB52
 6572 00a8 00000000 		.4byte	.LFB53
 6573 00ac DC000000 		.4byte	.LFE53-.LFB53
 6574 00b0 00000000 		.4byte	.LFB54
 6575 00b4 8C000000 		.4byte	.LFE54-.LFB54
 6576 00b8 00000000 		.4byte	.LFB55
 6577 00bc 68010000 		.4byte	.LFE55-.LFB55
 6578 00c0 00000000 		.4byte	.LFB56
 6579 00c4 C8010000 		.4byte	.LFE56-.LFB56
 6580 00c8 00000000 		.4byte	0
 6581 00cc 00000000 		.4byte	0
 6582              		.section	.debug_ranges,"",%progbits
 6583              	.Ldebug_ranges0:
 6584 0000 00000000 		.4byte	.LFB34
 6585 0004 28000000 		.4byte	.LFE34
 6586 0008 00000000 		.4byte	.LFB35
 6587 000c 68010000 		.4byte	.LFE35
 6588 0010 00000000 		.4byte	.LFB36
 6589 0014 68010000 		.4byte	.LFE36
 6590 0018 00000000 		.4byte	.LFB37
 6591 001c 78000000 		.4byte	.LFE37
 6592 0020 00000000 		.4byte	.LFB38
 6593 0024 3E000000 		.4byte	.LFE38
 6594 0028 00000000 		.4byte	.LFB39
 6595 002c 0C010000 		.4byte	.LFE39
 6596 0030 00000000 		.4byte	.LFB40
 6597 0034 0C020000 		.4byte	.LFE40
 6598 0038 00000000 		.4byte	.LFB41
 6599 003c 84000000 		.4byte	.LFE41
 6600 0040 00000000 		.4byte	.LFB42
 6601 0044 28000000 		.4byte	.LFE42
 6602 0048 00000000 		.4byte	.LFB43
 6603 004c 04010000 		.4byte	.LFE43
 6604 0050 00000000 		.4byte	.LFB44
 6605 0054 18000000 		.4byte	.LFE44
 6606 0058 00000000 		.4byte	.LFB45
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 144


 6607 005c 98000000 		.4byte	.LFE45
 6608 0060 00000000 		.4byte	.LFB46
 6609 0064 98000000 		.4byte	.LFE46
 6610 0068 00000000 		.4byte	.LFB47
 6611 006c 98000000 		.4byte	.LFE47
 6612 0070 00000000 		.4byte	.LFB48
 6613 0074 6C010000 		.4byte	.LFE48
 6614 0078 00000000 		.4byte	.LFB49
 6615 007c 6C010000 		.4byte	.LFE49
 6616 0080 00000000 		.4byte	.LFB50
 6617 0084 44030000 		.4byte	.LFE50
 6618 0088 00000000 		.4byte	.LFB51
 6619 008c 44030000 		.4byte	.LFE51
 6620 0090 00000000 		.4byte	.LFB52
 6621 0094 5C010000 		.4byte	.LFE52
 6622 0098 00000000 		.4byte	.LFB53
 6623 009c DC000000 		.4byte	.LFE53
 6624 00a0 00000000 		.4byte	.LFB54
 6625 00a4 8C000000 		.4byte	.LFE54
 6626 00a8 00000000 		.4byte	.LFB55
 6627 00ac 68010000 		.4byte	.LFE55
 6628 00b0 00000000 		.4byte	.LFB56
 6629 00b4 C8010000 		.4byte	.LFE56
 6630 00b8 00000000 		.4byte	0
 6631 00bc 00000000 		.4byte	0
 6632              		.section	.debug_line,"",%progbits
 6633              	.Ldebug_line0:
 6634 0000 BF060000 		.section	.debug_str,"MS",%progbits,1
 6634      02004F01 
 6634      00000201 
 6634      FB0E0D00 
 6634      01010101 
 6635              	.LASF110:
 6636 0000 62617365 		.ascii	"baseAzimuth\000"
 6636      417A696D 
 6636      75746800 
 6637              	.LASF21:
 6638 000c 74696C74 		.ascii	"tilt_init\000"
 6638      5F696E69 
 6638      7400
 6639              	.LASF65:
 6640 0016 6E756D5F 		.ascii	"num_items\000"
 6640      6974656D 
 6640      7300
 6641              	.LASF135:
 6642 0020 74657374 		.ascii	"test_array\000"
 6642      5F617272 
 6642      617900
 6643              	.LASF118:
 6644 002b 42415F63 		.ascii	"BA_cspot\000"
 6644      73706F74 
 6644      00
 6645              	.LASF146:
 6646 0034 656C6277 		.ascii	"elbw_errors\000"
 6646      5F657272 
 6646      6F727300 
 6647              	.LASF124:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 145


 6648 0040 57545F63 		.ascii	"WT_cspot\000"
 6648      73706F74 
 6648      00
 6649              	.LASF102:
 6650 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6650      72725F63 
 6650      73706F74 
 6650      00
 6651              	.LASF43:
 6652 0056 42415F65 		.ascii	"BA_execute\000"
 6652      78656375 
 6652      746500
 6653              	.LASF30:
 6654 0061 656C626F 		.ascii	"elbow_states\000"
 6654      775F7374 
 6654      61746573 
 6654      00
 6655              	.LASF100:
 6656 006e 57545F61 		.ascii	"WT_array\000"
 6656      72726179 
 6656      00
 6657              	.LASF115:
 6658 0077 65666665 		.ascii	"effector\000"
 6658      63746F72 
 6658      00
 6659              	.LASF8:
 6660 0080 756E7369 		.ascii	"unsigned int\000"
 6660      676E6564 
 6660      20696E74 
 6660      00
 6661              	.LASF40:
 6662 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6662      417A696D 
 6662      7574685F 
 6662      73746174 
 6662      657300
 6663              	.LASF15:
 6664 00a0 696E7431 		.ascii	"int16\000"
 6664      3600
 6665              	.LASF61:
 6666 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 6666      62726174 
 6666      696F6E45 
 6666      6C626F77 
 6666      00
 6667              	.LASF53:
 6668 00b7 70685F65 		.ascii	"ph_execute\000"
 6668      78656375 
 6668      746500
 6669              	.LASF41:
 6670 00c2 42415F73 		.ascii	"BA_start\000"
 6670      74617274 
 6670      00
 6671              	.LASF109:
 6672 00cb 73686F75 		.ascii	"shoulder_array\000"
 6672      6C646572 
 6672      5F617272 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 146


 6672      617900
 6673              	.LASF66:
 6674 00da 6D61696E 		.ascii	"maintain_array\000"
 6674      7461696E 
 6674      5F617272 
 6674      617900
 6675              	.LASF155:
 6676 00e9 73686F75 		.ascii	"shoulder_state\000"
 6676      6C646572 
 6676      5F737461 
 6676      746500
 6677              	.LASF26:
 6678 00f8 726F7461 		.ascii	"rotate_start\000"
 6678      74655F73 
 6678      74617274 
 6678      00
 6679              	.LASF97:
 6680 0105 73706565 		.ascii	"speed\000"
 6680      6400
 6681              	.LASF105:
 6682 010b 656C6277 		.ascii	"elbw_arr_cspot\000"
 6682      5F617272 
 6682      5F637370 
 6682      6F7400
 6683              	.LASF20:
 6684 011a 74696C74 		.ascii	"tilt_start\000"
 6684      5F737461 
 6684      727400
 6685              	.LASF72:
 6686 0125 73697A65 		.ascii	"size\000"
 6686      00
 6687              	.LASF144:
 6688 012a 6661696C 		.ascii	"fail_safe_errors\000"
 6688      5F736166 
 6688      655F6572 
 6688      726F7273 
 6688      00
 6689              	.LASF75:
 6690 013b 706F735F 		.ascii	"pos_to_vel\000"
 6690      746F5F76 
 6690      656C00
 6691              	.LASF154:
 6692 0146 656C626F 		.ascii	"elbow_state\000"
 6692      775F7374 
 6692      61746500 
 6693              	.LASF16:
 6694 0152 666C6F61 		.ascii	"float\000"
 6694      7400
 6695              	.LASF42:
 6696 0158 42415F69 		.ascii	"BA_init\000"
 6696      6E697400 
 6697              	.LASF74:
 6698 0160 696E6465 		.ascii	"index\000"
 6698      7800
 6699              	.LASF129:
 6700 0166 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6700      575F4C4F 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 147


 6700      5745525F 
 6700      424F554E 
 6700      4400
 6701              	.LASF7:
 6702 0178 6C6F6E67 		.ascii	"long long unsigned int\000"
 6702      206C6F6E 
 6702      6720756E 
 6702      7369676E 
 6702      65642069 
 6703              	.LASF91:
 6704 018f 53657276 		.ascii	"ServoGoalPosition\000"
 6704      6F476F61 
 6704      6C506F73 
 6704      6974696F 
 6704      6E00
 6705              	.LASF151:
 6706 01a1 74696D65 		.ascii	"timerFlag\000"
 6706      72466C61 
 6706      6700
 6707              	.LASF107:
 6708 01ab 73686F75 		.ascii	"shoulder\000"
 6708      6C646572 
 6708      00
 6709              	.LASF48:
 6710 01b4 6566665F 		.ascii	"eff_execute\000"
 6710      65786563 
 6710      75746500 
 6711              	.LASF81:
 6712 01c0 62797465 		.ascii	"byte1\000"
 6712      3100
 6713              	.LASF82:
 6714 01c6 62797465 		.ascii	"byte2\000"
 6714      3200
 6715              	.LASF148:
 6716 01cc 57545F65 		.ascii	"WT_errors\000"
 6716      72726F72 
 6716      7300
 6717              	.LASF150:
 6718 01d6 6566665F 		.ascii	"eff_errors\000"
 6718      6572726F 
 6718      727300
 6719              	.LASF83:
 6720 01e1 74656D70 		.ascii	"temp1\000"
 6720      3100
 6721              	.LASF84:
 6722 01e7 74656D70 		.ascii	"temp2\000"
 6722      3200
 6723              	.LASF85:
 6724 01ed 74656D70 		.ascii	"temp3\000"
 6724      3300
 6725              	.LASF116:
 6726 01f3 696E6974 		.ascii	"initialize\000"
 6726      69616C69 
 6726      7A6500
 6727              	.LASF104:
 6728 01fe 656C626F 		.ascii	"elbow\000"
 6728      7700
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 148


 6729              	.LASF46:
 6730 0204 6566665F 		.ascii	"eff_start\000"
 6730      73746172 
 6730      7400
 6731              	.LASF122:
 6732 020e 656C6277 		.ascii	"elbw_cspot\000"
 6732      5F637370 
 6732      6F7400
 6733              	.LASF147:
 6734 0219 42415F65 		.ascii	"BA_errors\000"
 6734      72726F72 
 6734      7300
 6735              	.LASF62:
 6736 0223 43616C69 		.ascii	"CalibrationShoulder\000"
 6736      62726174 
 6736      696F6E53 
 6736      686F756C 
 6736      64657200 
 6737              	.LASF126:
 6738 0237 66735F63 		.ascii	"fs_count\000"
 6738      6F756E74 
 6738      00
 6739              	.LASF68:
 6740 0240 53495A45 		.ascii	"SIZE\000"
 6740      00
 6741              	.LASF39:
 6742 0245 73686C64 		.ascii	"shldr_wait\000"
 6742      725F7761 
 6742      697400
 6743              	.LASF50:
 6744 0250 70685365 		.ascii	"phSensor_states\000"
 6744      6E736F72 
 6744      5F737461 
 6744      74657300 
 6745              	.LASF132:
 6746 0260 64617461 		.ascii	"data_array\000"
 6746      5F617272 
 6746      617900
 6747              	.LASF76:
 6748 026b 6375725F 		.ascii	"cur_pos\000"
 6748      706F7300 
 6749              	.LASF137:
 6750 0273 57525F46 		.ascii	"WR_FLAG\000"
 6750      4C414700 
 6751              	.LASF18:
 6752 027b 63686172 		.ascii	"char\000"
 6752      00
 6753              	.LASF12:
 6754 0280 75696E74 		.ascii	"uint16\000"
 6754      313600
 6755              	.LASF95:
 6756 0287 746F7271 		.ascii	"torque\000"
 6756      756500
 6757              	.LASF14:
 6758 028e 696E7438 		.ascii	"int8\000"
 6758      00
 6759              	.LASF87:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 149


 6760 0293 66656564 		.ascii	"feedback\000"
 6760      6261636B 
 6760      00
 6761              	.LASF140:
 6762 029c 42415F46 		.ascii	"BA_FLAG\000"
 6762      4C414700 
 6763              	.LASF56:
 6764 02a4 4359434C 		.ascii	"CYCLES\000"
 6764      455300
 6765              	.LASF10:
 6766 02ab 75696E74 		.ascii	"uint8_t\000"
 6766      385F7400 
 6767              	.LASF71:
 6768 02b3 6172725F 		.ascii	"arr_pos\000"
 6768      706F7300 
 6769              	.LASF37:
 6770 02bb 73686C64 		.ascii	"shldr_init\000"
 6770      725F696E 
 6770      697400
 6771              	.LASF133:
 6772 02c6 66656564 		.ascii	"feedback_array\000"
 6772      6261636B 
 6772      5F617272 
 6772      617900
 6773              	.LASF6:
 6774 02d5 6C6F6E67 		.ascii	"long long int\000"
 6774      206C6F6E 
 6774      6720696E 
 6774      7400
 6775              	.LASF142:
 6776 02e3 50485F46 		.ascii	"PH_FLAG\000"
 6776      4C414700 
 6777              	.LASF35:
 6778 02eb 73686F75 		.ascii	"shoulder_states\000"
 6778      6C646572 
 6778      5F737461 
 6778      74657300 
 6779              	.LASF67:
 6780 02fb 63706F73 		.ascii	"cpos\000"
 6780      00
 6781              	.LASF125:
 6782 0300 57525F63 		.ascii	"WR_cspot\000"
 6782      73706F74 
 6782      00
 6783              	.LASF123:
 6784 0309 656C6277 		.ascii	"elbw_array\000"
 6784      5F617272 
 6784      617900
 6785              	.LASF25:
 6786 0314 77726973 		.ascii	"wristRotate_states\000"
 6786      74526F74 
 6786      6174655F 
 6786      73746174 
 6786      657300
 6787              	.LASF141:
 6788 0327 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6788      43544F52 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 150


 6788      5F464C41 
 6788      4700
 6789              	.LASF130:
 6790 0335 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6790      4C444552 
 6790      5F555050 
 6790      45525F42 
 6790      4F554E44 
 6791              	.LASF51:
 6792 034a 70685F73 		.ascii	"ph_start\000"
 6792      74617274 
 6792      00
 6793              	.LASF45:
 6794 0353 65666665 		.ascii	"effector_states\000"
 6794      63746F72 
 6794      5F737461 
 6794      74657300 
 6795              	.LASF157:
 6796 0363 65666665 		.ascii	"effector_state\000"
 6796      63746F72 
 6796      5F737461 
 6796      746500
 6797              	.LASF57:
 6798 0372 626F756E 		.ascii	"bound\000"
 6798      6400
 6799              	.LASF13:
 6800 0378 75696E74 		.ascii	"uint32\000"
 6800      333200
 6801              	.LASF120:
 6802 037f 73686C64 		.ascii	"shldr_cspot\000"
 6802      725F6373 
 6802      706F7400 
 6803              	.LASF136:
 6804 038b 57545F46 		.ascii	"WT_FLAG\000"
 6804      4C414700 
 6805              	.LASF79:
 6806 0393 6D616B65 		.ascii	"make_command\000"
 6806      5F636F6D 
 6806      6D616E64 
 6806      00
 6807              	.LASF98:
 6808 03a0 77726973 		.ascii	"wristTilt\000"
 6808      7454696C 
 6808      7400
 6809              	.LASF139:
 6810 03aa 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6810      4C444552 
 6810      5F464C41 
 6810      4700
 6811              	.LASF31:
 6812 03b8 656C6277 		.ascii	"elbw_start\000"
 6812      5F737461 
 6812      727400
 6813              	.LASF152:
 6814 03c3 77726973 		.ascii	"wristTilt_state\000"
 6814      7454696C 
 6814      745F7374 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 151


 6814      61746500 
 6815              	.LASF70:
 6816 03d3 61727261 		.ascii	"array\000"
 6816      7900
 6817              	.LASF108:
 6818 03d9 73686C64 		.ascii	"shldr_arr_cspot\000"
 6818      725F6172 
 6818      725F6373 
 6818      706F7400 
 6819              	.LASF111:
 6820 03e9 42415F61 		.ascii	"BA_arr_cspot\000"
 6820      72725F63 
 6820      73706F74 
 6820      00
 6821              	.LASF89:
 6822 03f6 73656E64 		.ascii	"send_packet\000"
 6822      5F706163 
 6822      6B657400 
 6823              	.LASF73:
 6824 0402 6368616E 		.ascii	"change\000"
 6824      676500
 6825              	.LASF59:
 6826 0409 6368616E 		.ascii	"channel\000"
 6826      6E656C00 
 6827              	.LASF86:
 6828 0411 706F7446 		.ascii	"potFeedback\000"
 6828      65656462 
 6828      61636B00 
 6829              	.LASF77:
 6830 041d 41525241 		.ascii	"ARRAY_SIZE\000"
 6830      595F5349 
 6830      5A4500
 6831              	.LASF99:
 6832 0428 57545F61 		.ascii	"WT_arr_cspot\000"
 6832      72725F63 
 6832      73706F74 
 6832      00
 6833              	.LASF28:
 6834 0435 726F7461 		.ascii	"rotate_control\000"
 6834      74655F63 
 6834      6F6E7472 
 6834      6F6C00
 6835              	.LASF114:
 6836 0444 70685365 		.ascii	"phSensor\000"
 6836      6E736F72 
 6836      00
 6837              	.LASF2:
 6838 044d 73686F72 		.ascii	"short int\000"
 6838      7420696E 
 6838      7400
 6839              	.LASF156:
 6840 0457 62617365 		.ascii	"baseAzimuth_state\000"
 6840      417A696D 
 6840      7574685F 
 6840      73746174 
 6840      6500
 6841              	.LASF64:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 152


 6842 0469 61765F61 		.ascii	"av_array\000"
 6842      72726179 
 6842      00
 6843              	.LASF4:
 6844 0472 6C6F6E67 		.ascii	"long int\000"
 6844      20696E74 
 6844      00
 6845              	.LASF22:
 6846 047b 74696C74 		.ascii	"tilt_control\000"
 6846      5F636F6E 
 6846      74726F6C 
 6846      00
 6847              	.LASF88:
 6848 0488 74696D65 		.ascii	"timer_isr\000"
 6848      725F6973 
 6848      7200
 6849              	.LASF149:
 6850 0492 57525F65 		.ascii	"WR_errors\000"
 6850      72726F72 
 6850      7300
 6851              	.LASF153:
 6852 049c 77726973 		.ascii	"wristRotate_state\000"
 6852      74526F74 
 6852      6174655F 
 6852      73746174 
 6852      6500
 6853              	.LASF44:
 6854 04ae 42415F77 		.ascii	"BA_wait\000"
 6854      61697400 
 6855              	.LASF24:
 6856 04b6 77726973 		.ascii	"wristTilt_states\000"
 6856      7454696C 
 6856      745F7374 
 6856      61746573 
 6856      00
 6857              	.LASF134:
 6858 04c7 77697A6E 		.ascii	"wiznet\000"
 6858      657400
 6859              	.LASF9:
 6860 04ce 5F5F7569 		.ascii	"__uint8_t\000"
 6860      6E74385F 
 6860      7400
 6861              	.LASF69:
 6862 04d8 63686563 		.ascii	"check_update\000"
 6862      6B5F7570 
 6862      64617465 
 6862      00
 6863              	.LASF96:
 6864 04e5 53657276 		.ascii	"ServoSpeed\000"
 6864      6F537065 
 6864      656400
 6865              	.LASF49:
 6866 04f0 6566665F 		.ascii	"eff_wait\000"
 6866      77616974 
 6866      00
 6867              	.LASF63:
 6868 04f9 76656C6F 		.ascii	"velocity\000"
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 153


 6868      63697479 
 6868      00
 6869              	.LASF121:
 6870 0502 73686C64 		.ascii	"shldr_array\000"
 6870      725F6172 
 6870      72617900 
 6871              	.LASF19:
 6872 050e 73697A65 		.ascii	"sizetype\000"
 6872      74797065 
 6872      00
 6873              	.LASF5:
 6874 0517 6C6F6E67 		.ascii	"long unsigned int\000"
 6874      20756E73 
 6874      69676E65 
 6874      6420696E 
 6874      7400
 6875              	.LASF33:
 6876 0529 656C6277 		.ascii	"elbw_execute\000"
 6876      5F657865 
 6876      63757465 
 6876      00
 6877              	.LASF112:
 6878 0536 62617365 		.ascii	"baseAz_array\000"
 6878      417A5F61 
 6878      72726179 
 6878      00
 6879              	.LASF29:
 6880 0543 726F7461 		.ascii	"rotate_wait\000"
 6880      74655F77 
 6880      61697400 
 6881              	.LASF131:
 6882 054f 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6882      4C444552 
 6882      5F4C4F57 
 6882      45525F42 
 6882      4F554E44 
 6883              	.LASF36:
 6884 0564 73686C64 		.ascii	"shldr_start\000"
 6884      725F7374 
 6884      61727400 
 6885              	.LASF80:
 6886 0570 696E666F 		.ascii	"info_array\000"
 6886      5F617272 
 6886      617900
 6887              	.LASF1:
 6888 057b 756E7369 		.ascii	"unsigned char\000"
 6888      676E6564 
 6888      20636861 
 6888      7200
 6889              	.LASF113:
 6890 0589 66696C6C 		.ascii	"fill_data_array\000"
 6890      5F646174 
 6890      615F6172 
 6890      72617900 
 6891              	.LASF101:
 6892 0599 77726973 		.ascii	"wristRotate\000"
 6892      74526F74 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 154


 6892      61746500 
 6893              	.LASF161:
 6894 05a5 433A5C55 		.ascii	"C:\\Users\\Jae Lee\\Documents\\GitHub\\Arm\\arm_con"
 6894      73657273 
 6894      5C4A6165 
 6894      204C6565 
 6894      5C446F63 
 6895 05d2 74726F6C 		.ascii	"troller_v2\\arm_controller_v2.1.cydsn\000"
 6895      6C65725F 
 6895      76325C61 
 6895      726D5F63 
 6895      6F6E7472 
 6896              	.LASF47:
 6897 05f7 6566665F 		.ascii	"eff_init\000"
 6897      696E6974 
 6897      00
 6898              	.LASF106:
 6899 0600 656C626F 		.ascii	"elbow_array\000"
 6899      775F6172 
 6899      72617900 
 6900              	.LASF38:
 6901 060c 73686C64 		.ascii	"shldr_execute\000"
 6901      725F6578 
 6901      65637574 
 6901      6500
 6902              	.LASF128:
 6903 061a 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6903      575F5550 
 6903      5045525F 
 6903      424F554E 
 6903      4400
 6904              	.LASF54:
 6905 062c 70685F77 		.ascii	"ph_wait\000"
 6905      61697400 
 6906              	.LASF27:
 6907 0634 726F7461 		.ascii	"rotate_init\000"
 6907      74655F69 
 6907      6E697400 
 6908              	.LASF159:
 6909 0640 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6909      4320342E 
 6909      382E3420 
 6909      32303134 
 6909      30353236 
 6910 0673 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6910      20726576 
 6910      6973696F 
 6910      6E203231 
 6910      31333538 
 6911 06a6 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6911      74643D67 
 6911      6E753939 
 6911      202D6666 
 6911      756E6374 
 6912              	.LASF78:
 6913 06c7 636F6D6D 		.ascii	"command\000"
 6913      616E6400 
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 155


 6914              	.LASF60:
 6915 06cf 64696666 		.ascii	"difference\000"
 6915      6572656E 
 6915      636500
 6916              	.LASF127:
 6917 06da 74656D70 		.ascii	"temp_val\000"
 6917      5F76616C 
 6917      00
 6918              	.LASF0:
 6919 06e3 7369676E 		.ascii	"signed char\000"
 6919      65642063 
 6919      68617200 
 6920              	.LASF90:
 6921 06ef 68656172 		.ascii	"heart_beat\000"
 6921      745F6265 
 6921      617400
 6922              	.LASF158:
 6923 06fa 70685365 		.ascii	"phSensor_state\000"
 6923      6E736F72 
 6923      5F737461 
 6923      746500
 6924              	.LASF58:
 6925 0709 61766572 		.ascii	"average\000"
 6925      61676500 
 6926              	.LASF3:
 6927 0711 73686F72 		.ascii	"short unsigned int\000"
 6927      7420756E 
 6927      7369676E 
 6927      65642069 
 6927      6E7400
 6928              	.LASF34:
 6929 0724 656C6277 		.ascii	"elbw_wait\000"
 6929      5F776169 
 6929      7400
 6930              	.LASF143:
 6931 072e 64726F70 		.ascii	"dropped_packets\000"
 6931      7065645F 
 6931      7061636B 
 6931      65747300 
 6932              	.LASF117:
 6933 073e 6D61696E 		.ascii	"main\000"
 6933      00
 6934              	.LASF119:
 6935 0743 42415F61 		.ascii	"BA_array\000"
 6935      72726179 
 6935      00
 6936              	.LASF23:
 6937 074c 74696C74 		.ascii	"tilt_wait\000"
 6937      5F776169 
 6937      7400
 6938              	.LASF103:
 6939 0756 57525F61 		.ascii	"WR_array\000"
 6939      72726179 
 6939      00
 6940              	.LASF11:
 6941 075f 75696E74 		.ascii	"uint8\000"
 6941      3800
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\ccgBjXYw.s 			page 156


 6942              	.LASF17:
 6943 0765 646F7562 		.ascii	"double\000"
 6943      6C6500
 6944              	.LASF138:
 6945 076c 454C424F 		.ascii	"ELBOW_FLAG\000"
 6945      575F464C 
 6945      414700
 6946              	.LASF52:
 6947 0777 70685F69 		.ascii	"ph_init\000"
 6947      6E697400 
 6948              	.LASF92:
 6949 077f 73657276 		.ascii	"servoID\000"
 6949      6F494400 
 6950              	.LASF55:
 6951 0787 6973725F 		.ascii	"isr_var\000"
 6951      76617200 
 6952              	.LASF145:
 6953 078f 73686C64 		.ascii	"shldr_errors\000"
 6953      725F6572 
 6953      726F7273 
 6953      00
 6954              	.LASF94:
 6955 079c 53657453 		.ascii	"SetServoTorque\000"
 6955      6572766F 
 6955      546F7271 
 6955      756500
 6956              	.LASF93:
 6957 07ab 706F7369 		.ascii	"position\000"
 6957      74696F6E 
 6957      00
 6958              	.LASF160:
 6959 07b4 2E5C6D61 		.ascii	".\\main.c\000"
 6959      696E2E63 
 6959      00
 6960              	.LASF32:
 6961 07bd 656C6277 		.ascii	"elbw_init\000"
 6961      5F696E69 
 6961      7400
 6962              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,22,4
  18              		.comm	wiznet,1,1
  19              		.comm	test_array,22,4
  20              		.global	WT_FLAG
  21              		.bss
  22              		.type	WT_FLAG, %object
  23              		.size	WT_FLAG, 1
  24              	WT_FLAG:
  25 0000 00       		.space	1
  26              		.global	WR_FLAG
  27              		.type	WR_FLAG, %object
  28              		.size	WR_FLAG, 1
  29              	WR_FLAG:
  30 0001 00       		.space	1
  31              		.global	ELBOW_FLAG
  32              		.type	ELBOW_FLAG, %object
  33              		.size	ELBOW_FLAG, 1
  34              	ELBOW_FLAG:
  35 0002 00       		.space	1
  36              		.global	SHOULDER_FLAG
  37              		.type	SHOULDER_FLAG, %object
  38              		.size	SHOULDER_FLAG, 1
  39              	SHOULDER_FLAG:
  40 0003 00       		.space	1
  41              		.global	BA_FLAG
  42              		.type	BA_FLAG, %object
  43              		.size	BA_FLAG, 1
  44              	BA_FLAG:
  45 0004 00       		.space	1
  46              		.global	EFFECTOR_FLAG
  47              		.type	EFFECTOR_FLAG, %object
  48              		.size	EFFECTOR_FLAG, 1
  49              	EFFECTOR_FLAG:
  50 0005 00       		.space	1
  51              		.global	dropped_packets
  52              		.align	1
  53              		.type	dropped_packets, %object
  54              		.size	dropped_packets, 2
  55              	dropped_packets:
  56 0006 0000     		.space	2
  57              		.global	fail_safe_errors
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 2


  58              		.align	1
  59              		.type	fail_safe_errors, %object
  60              		.size	fail_safe_errors, 2
  61              	fail_safe_errors:
  62 0008 0000     		.space	2
  63              		.global	shldr_errors
  64              		.align	1
  65              		.type	shldr_errors, %object
  66              		.size	shldr_errors, 2
  67              	shldr_errors:
  68 000a 0000     		.space	2
  69              		.global	elbw_errors
  70              		.align	1
  71              		.type	elbw_errors, %object
  72              		.size	elbw_errors, 2
  73              	elbw_errors:
  74 000c 0000     		.space	2
  75              		.global	BA_errors
  76              		.align	1
  77              		.type	BA_errors, %object
  78              		.size	BA_errors, 2
  79              	BA_errors:
  80 000e 0000     		.space	2
  81              		.global	WT_errors
  82              		.align	1
  83              		.type	WT_errors, %object
  84              		.size	WT_errors, 2
  85              	WT_errors:
  86 0010 0000     		.space	2
  87              		.global	WR_errors
  88              		.align	1
  89              		.type	WR_errors, %object
  90              		.size	WR_errors, 2
  91              	WR_errors:
  92 0012 0000     		.space	2
  93              		.global	eff_errors
  94              		.align	1
  95              		.type	eff_errors, %object
  96              		.size	eff_errors, 2
  97              	eff_errors:
  98 0014 0000     		.space	2
  99              		.comm	timerFlag,1,1
 100              		.section	.text.timer_isr,"ax",%progbits
 101              		.align	2
 102              		.global	timer_isr
 103              		.code	16
 104              		.thumb_func
 105              		.type	timer_isr, %function
 106              	timer_isr:
 107              	.LFB34:
 108              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 3


   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 109              		.loc 1 11 0
 110              		.cfi_startproc
 111 0000 80B5     		push	{r7, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 82B0     		sub	sp, sp, #8
 116              		.cfi_def_cfa_offset 16
 117 0004 00AF     		add	r7, sp, #0
 118              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 119              		.loc 1 12 0
 120 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 121 000a 031C     		mov	r3, r0
 122 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 123              		.loc 1 13 0
 124 000e 054B     		ldr	r3, .L2
 125 0010 0122     		mov	r2, #1
 126 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 127              		.loc 1 14 0
 128 0014 7B68     		ldr	r3, [r7, #4]
 129 0016 181C     		mov	r0, r3
 130 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 131              		.loc 1 15 0
 132 001c BD46     		mov	sp, r7
 133 001e 02B0     		add	sp, sp, #8
 134              		@ sp needed
 135 0020 80BD     		pop	{r7, pc}
 136              	.L3:
 137 0022 C046     		.align	2
 138              	.L2:
 139 0024 00000000 		.word	timerFlag
 140              		.cfi_endproc
 141              	.LFE34:
 142              		.size	timer_isr, .-timer_isr
 143              		.global	__aeabi_uidiv
 144              		.section	.text.average,"ax",%progbits
 145              		.align	2
 146              		.global	average
 147              		.code	16
 148              		.thumb_func
 149              		.type	average, %function
 150              	average:
 151              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 4


  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
 152              		.loc 1 51 0
 153              		.cfi_startproc
 154 0000 80B5     		push	{r7, lr}
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 86B0     		sub	sp, sp, #24
 159              		.cfi_def_cfa_offset 32
 160 0004 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
 162 0006 7860     		str	r0, [r7, #4]
 163 0008 0A1C     		mov	r2, r1
 164 000a FB1C     		add	r3, r7, #3
 165 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
 166              		.loc 1 53 0
 167 000e 0023     		mov	r3, #0
 168 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 169              		.loc 1 54 0
 170 0012 3B1C     		mov	r3, r7
 171 0014 0E33     		add	r3, r3, #14
 172 0016 0022     		mov	r2, #0
 173 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 5


  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 174              		.loc 1 56 0
 175 001a 3B1C     		mov	r3, r7
 176 001c 1733     		add	r3, r3, #23
 177 001e 0022     		mov	r2, #0
 178 0020 1A70     		strb	r2, [r3]
 179 0022 10E0     		b	.L5
 180              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
 181              		.loc 1 58 0 discriminator 2
 182 0024 3B1C     		mov	r3, r7
 183 0026 1733     		add	r3, r3, #23
 184 0028 1B78     		ldrb	r3, [r3]
 185 002a 5B00     		lsl	r3, r3, #1
 186 002c 7A68     		ldr	r2, [r7, #4]
 187 002e D318     		add	r3, r2, r3
 188 0030 1B88     		ldrh	r3, [r3]
 189 0032 3A69     		ldr	r2, [r7, #16]
 190 0034 D318     		add	r3, r2, r3
 191 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 192              		.loc 1 56 0 discriminator 2
 193 0038 3B1C     		mov	r3, r7
 194 003a 1733     		add	r3, r3, #23
 195 003c 1A78     		ldrb	r2, [r3]
 196 003e 3B1C     		mov	r3, r7
 197 0040 1733     		add	r3, r3, #23
 198 0042 0132     		add	r2, r2, #1
 199 0044 1A70     		strb	r2, [r3]
 200              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 201              		.loc 1 56 0 is_stmt 0 discriminator 1
 202 0046 3A1C     		mov	r2, r7
 203 0048 1732     		add	r2, r2, #23
 204 004a FB1C     		add	r3, r7, #3
 205 004c 1278     		ldrb	r2, [r2]
 206 004e 1B78     		ldrb	r3, [r3]
 207 0050 9A42     		cmp	r2, r3
 208 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
 209              		.loc 1 61 0 is_stmt 1
 210 0054 FB1C     		add	r3, r7, #3
 211 0056 1B78     		ldrb	r3, [r3]
 212 0058 3869     		ldr	r0, [r7, #16]
 213 005a 191C     		mov	r1, r3
 214 005c FFF7FEFF 		bl	__aeabi_uidiv
 215 0060 031C     		mov	r3, r0
 216 0062 1A1C     		mov	r2, r3
 217 0064 3B1C     		mov	r3, r7
 218 0066 0E33     		add	r3, r3, #14
 219 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 220              		.loc 1 63 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 6


 221 006a 3B1C     		mov	r3, r7
 222 006c 0E33     		add	r3, r3, #14
 223 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 224              		.loc 1 64 0
 225 0070 181C     		mov	r0, r3
 226 0072 BD46     		mov	sp, r7
 227 0074 06B0     		add	sp, sp, #24
 228              		@ sp needed
 229 0076 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE35:
 232              		.size	average, .-average
 233              		.section	.text.maintain_array,"ax",%progbits
 234              		.align	2
 235              		.global	maintain_array
 236              		.code	16
 237              		.thumb_func
 238              		.type	maintain_array, %function
 239              	maintain_array:
 240              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
  67:.\main.c      **** {
 241              		.loc 1 67 0
 242              		.cfi_startproc
 243 0000 80B5     		push	{r7, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 7, -8
 246              		.cfi_offset 14, -4
 247 0002 82B0     		sub	sp, sp, #8
 248              		.cfi_def_cfa_offset 16
 249 0004 00AF     		add	r7, sp, #0
 250              		.cfi_def_cfa_register 7
 251 0006 0A1C     		mov	r2, r1
 252 0008 FB1D     		add	r3, r7, #7
 253 000a 011C     		add	r1, r0, #0
 254 000c 1970     		strb	r1, [r3]
 255 000e BB1D     		add	r3, r7, #6
 256 0010 1A70     		strb	r2, [r3]
  68:.\main.c      ****     if(cpos < (SIZE - 1))
 257              		.loc 1 68 0
 258 0012 FB1D     		add	r3, r7, #7
 259 0014 1A78     		ldrb	r2, [r3]
 260 0016 BB1D     		add	r3, r7, #6
 261 0018 1B78     		ldrb	r3, [r3]
 262 001a 013B     		sub	r3, r3, #1
 263 001c 9A42     		cmp	r2, r3
 264 001e 05DA     		bge	.L9
  69:.\main.c      ****     {
  70:.\main.c      ****         cpos++;
 265              		.loc 1 70 0
 266 0020 FB1D     		add	r3, r7, #7
 267 0022 1A78     		ldrb	r2, [r3]
 268 0024 FB1D     		add	r3, r7, #7
 269 0026 0132     		add	r2, r2, #1
 270 0028 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 7


 271 002a 02E0     		b	.L10
 272              	.L9:
  71:.\main.c      ****     }
  72:.\main.c      ****     else
  73:.\main.c      ****     {
  74:.\main.c      ****         cpos = 0;
 273              		.loc 1 74 0
 274 002c FB1D     		add	r3, r7, #7
 275 002e 0022     		mov	r2, #0
 276 0030 1A70     		strb	r2, [r3]
 277              	.L10:
  75:.\main.c      ****     }
  76:.\main.c      ****     return cpos;
 278              		.loc 1 76 0
 279 0032 FB1D     		add	r3, r7, #7
 280 0034 1B78     		ldrb	r3, [r3]
  77:.\main.c      **** }
 281              		.loc 1 77 0
 282 0036 181C     		mov	r0, r3
 283 0038 BD46     		mov	sp, r7
 284 003a 02B0     		add	sp, sp, #8
 285              		@ sp needed
 286 003c 80BD     		pop	{r7, pc}
 287              		.cfi_endproc
 288              	.LFE36:
 289              		.size	maintain_array, .-maintain_array
 290 003e C046     		.section	.text.check_update,"ax",%progbits
 291              		.align	2
 292              		.global	check_update
 293              		.code	16
 294              		.thumb_func
 295              		.type	check_update, %function
 296              	check_update:
 297              	.LFB37:
  78:.\main.c      **** 
  79:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
  80:.\main.c      **** {
 298              		.loc 1 80 0
 299              		.cfi_startproc
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 86B0     		sub	sp, sp, #24
 305              		.cfi_def_cfa_offset 32
 306 0004 00AF     		add	r7, sp, #0
 307              		.cfi_def_cfa_register 7
 308 0006 F860     		str	r0, [r7, #12]
 309 0008 7B60     		str	r3, [r7, #4]
 310 000a 3B1C     		mov	r3, r7
 311 000c 0B33     		add	r3, r3, #11
 312 000e 1970     		strb	r1, [r3]
 313 0010 3B1C     		mov	r3, r7
 314 0012 0A33     		add	r3, r3, #10
 315 0014 1A70     		strb	r2, [r3]
  81:.\main.c      ****     uint8 index;
  82:.\main.c      ****     if(arr_pos != 0)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 8


 316              		.loc 1 82 0
 317 0016 3B1C     		mov	r3, r7
 318 0018 0B33     		add	r3, r3, #11
 319 001a 1B78     		ldrb	r3, [r3]
 320 001c 002B     		cmp	r3, #0
 321 001e 07D0     		beq	.L13
  83:.\main.c      ****     {
  84:.\main.c      ****         index = arr_pos - 1;
 322              		.loc 1 84 0
 323 0020 3B1C     		mov	r3, r7
 324 0022 1733     		add	r3, r3, #23
 325 0024 3A1C     		mov	r2, r7
 326 0026 0B32     		add	r2, r2, #11
 327 0028 1278     		ldrb	r2, [r2]
 328 002a 013A     		sub	r2, r2, #1
 329 002c 1A70     		strb	r2, [r3]
 330 002e 06E0     		b	.L14
 331              	.L13:
  85:.\main.c      ****     }
  86:.\main.c      ****     else
  87:.\main.c      ****     {
  88:.\main.c      ****         index = size - 1;
 332              		.loc 1 88 0
 333 0030 3B1C     		mov	r3, r7
 334 0032 1733     		add	r3, r3, #23
 335 0034 3A1C     		mov	r2, r7
 336 0036 0A32     		add	r2, r2, #10
 337 0038 1278     		ldrb	r2, [r2]
 338 003a 013A     		sub	r2, r2, #1
 339 003c 1A70     		strb	r2, [r3]
 340              	.L14:
  89:.\main.c      ****     }
  90:.\main.c      ****     
  91:.\main.c      ****     if(change < 0)
 341              		.loc 1 91 0
 342 003e 7B68     		ldr	r3, [r7, #4]
 343 0040 002B     		cmp	r3, #0
 344 0042 2ADA     		bge	.L15
  92:.\main.c      ****     {
  93:.\main.c      ****         if(array[index] >= (1000 - change))
 345              		.loc 1 93 0
 346 0044 3B1C     		mov	r3, r7
 347 0046 1733     		add	r3, r3, #23
 348 0048 1B78     		ldrb	r3, [r3]
 349 004a 5B00     		lsl	r3, r3, #1
 350 004c FA68     		ldr	r2, [r7, #12]
 351 004e D318     		add	r3, r2, r3
 352 0050 1B88     		ldrh	r3, [r3]
 353 0052 1A1C     		mov	r2, r3
 354 0054 7B68     		ldr	r3, [r7, #4]
 355 0056 FA21     		mov	r1, #250
 356 0058 8900     		lsl	r1, r1, #2
 357 005a CB1A     		sub	r3, r1, r3
 358 005c 9A42     		cmp	r2, r3
 359 005e 12DB     		blt	.L16
  94:.\main.c      ****         {
  95:.\main.c      ****             array[arr_pos] = (array[index] + change);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 9


 360              		.loc 1 95 0
 361 0060 3B1C     		mov	r3, r7
 362 0062 0B33     		add	r3, r3, #11
 363 0064 1B78     		ldrb	r3, [r3]
 364 0066 5B00     		lsl	r3, r3, #1
 365 0068 FA68     		ldr	r2, [r7, #12]
 366 006a D318     		add	r3, r2, r3
 367 006c 3A1C     		mov	r2, r7
 368 006e 1732     		add	r2, r2, #23
 369 0070 1278     		ldrb	r2, [r2]
 370 0072 5200     		lsl	r2, r2, #1
 371 0074 F968     		ldr	r1, [r7, #12]
 372 0076 8A18     		add	r2, r1, r2
 373 0078 1188     		ldrh	r1, [r2]
 374 007a 7A68     		ldr	r2, [r7, #4]
 375 007c 92B2     		uxth	r2, r2
 376 007e 8A18     		add	r2, r1, r2
 377 0080 92B2     		uxth	r2, r2
 378 0082 1A80     		strh	r2, [r3]
 379 0084 33E0     		b	.L18
 380              	.L16:
  96:.\main.c      ****         }
  97:.\main.c      ****         else
  98:.\main.c      ****         {
  99:.\main.c      ****             array[arr_pos] = 1000;
 381              		.loc 1 99 0
 382 0086 3B1C     		mov	r3, r7
 383 0088 0B33     		add	r3, r3, #11
 384 008a 1B78     		ldrb	r3, [r3]
 385 008c 5B00     		lsl	r3, r3, #1
 386 008e FA68     		ldr	r2, [r7, #12]
 387 0090 D318     		add	r3, r2, r3
 388 0092 FA22     		mov	r2, #250
 389 0094 9200     		lsl	r2, r2, #2
 390 0096 1A80     		strh	r2, [r3]
 391 0098 29E0     		b	.L18
 392              	.L15:
 100:.\main.c      ****         }
 101:.\main.c      ****     }
 102:.\main.c      ****     else
 103:.\main.c      ****     {
 104:.\main.c      ****         if(array[index] <= (2000 - change))
 393              		.loc 1 104 0
 394 009a 3B1C     		mov	r3, r7
 395 009c 1733     		add	r3, r3, #23
 396 009e 1B78     		ldrb	r3, [r3]
 397 00a0 5B00     		lsl	r3, r3, #1
 398 00a2 FA68     		ldr	r2, [r7, #12]
 399 00a4 D318     		add	r3, r2, r3
 400 00a6 1B88     		ldrh	r3, [r3]
 401 00a8 1A1C     		mov	r2, r3
 402 00aa 7B68     		ldr	r3, [r7, #4]
 403 00ac FA21     		mov	r1, #250
 404 00ae C900     		lsl	r1, r1, #3
 405 00b0 CB1A     		sub	r3, r1, r3
 406 00b2 9A42     		cmp	r2, r3
 407 00b4 12DC     		bgt	.L19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 10


 105:.\main.c      ****         {
 106:.\main.c      ****             array[arr_pos] = (array[index] + change);
 408              		.loc 1 106 0
 409 00b6 3B1C     		mov	r3, r7
 410 00b8 0B33     		add	r3, r3, #11
 411 00ba 1B78     		ldrb	r3, [r3]
 412 00bc 5B00     		lsl	r3, r3, #1
 413 00be FA68     		ldr	r2, [r7, #12]
 414 00c0 D318     		add	r3, r2, r3
 415 00c2 3A1C     		mov	r2, r7
 416 00c4 1732     		add	r2, r2, #23
 417 00c6 1278     		ldrb	r2, [r2]
 418 00c8 5200     		lsl	r2, r2, #1
 419 00ca F968     		ldr	r1, [r7, #12]
 420 00cc 8A18     		add	r2, r1, r2
 421 00ce 1188     		ldrh	r1, [r2]
 422 00d0 7A68     		ldr	r2, [r7, #4]
 423 00d2 92B2     		uxth	r2, r2
 424 00d4 8A18     		add	r2, r1, r2
 425 00d6 92B2     		uxth	r2, r2
 426 00d8 1A80     		strh	r2, [r3]
 427 00da 08E0     		b	.L18
 428              	.L19:
 107:.\main.c      ****         }
 108:.\main.c      ****         else
 109:.\main.c      ****         {
 110:.\main.c      ****             array[arr_pos] = 2000;
 429              		.loc 1 110 0
 430 00dc 3B1C     		mov	r3, r7
 431 00de 0B33     		add	r3, r3, #11
 432 00e0 1B78     		ldrb	r3, [r3]
 433 00e2 5B00     		lsl	r3, r3, #1
 434 00e4 FA68     		ldr	r2, [r7, #12]
 435 00e6 D318     		add	r3, r2, r3
 436 00e8 FA22     		mov	r2, #250
 437 00ea D200     		lsl	r2, r2, #3
 438 00ec 1A80     		strh	r2, [r3]
 439              	.L18:
 111:.\main.c      ****         }
 112:.\main.c      ****     }
 113:.\main.c      ****     
 114:.\main.c      ****     return maintain_array(arr_pos, size);
 440              		.loc 1 114 0
 441 00ee 3B1C     		mov	r3, r7
 442 00f0 0B33     		add	r3, r3, #11
 443 00f2 1A78     		ldrb	r2, [r3]
 444 00f4 3B1C     		mov	r3, r7
 445 00f6 0A33     		add	r3, r3, #10
 446 00f8 1B78     		ldrb	r3, [r3]
 447 00fa 101C     		mov	r0, r2
 448 00fc 191C     		mov	r1, r3
 449 00fe FFF7FEFF 		bl	maintain_array
 450 0102 031C     		mov	r3, r0
 115:.\main.c      **** }
 451              		.loc 1 115 0
 452 0104 181C     		mov	r0, r3
 453 0106 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 11


 454 0108 06B0     		add	sp, sp, #24
 455              		@ sp needed
 456 010a 80BD     		pop	{r7, pc}
 457              		.cfi_endproc
 458              	.LFE37:
 459              		.size	check_update, .-check_update
 460              		.section	.text.pos_to_vel,"ax",%progbits
 461              		.align	2
 462              		.global	pos_to_vel
 463              		.code	16
 464              		.thumb_func
 465              		.type	pos_to_vel, %function
 466              	pos_to_vel:
 467              	.LFB38:
 116:.\main.c      **** 
 117:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 118:.\main.c      **** {
 468              		.loc 1 118 0
 469              		.cfi_startproc
 470 0000 90B5     		push	{r4, r7, lr}
 471              		.cfi_def_cfa_offset 12
 472              		.cfi_offset 4, -12
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0002 83B0     		sub	sp, sp, #12
 476              		.cfi_def_cfa_offset 24
 477 0004 00AF     		add	r7, sp, #0
 478              		.cfi_def_cfa_register 7
 479 0006 3960     		str	r1, [r7]
 480 0008 111C     		mov	r1, r2
 481 000a 1A1C     		mov	r2, r3
 482 000c FB1D     		add	r3, r7, #7
 483 000e 1870     		strb	r0, [r3]
 484 0010 BB1D     		add	r3, r7, #6
 485 0012 1970     		strb	r1, [r3]
 486 0014 3B1D     		add	r3, r7, #4
 487 0016 1A80     		strh	r2, [r3]
 119:.\main.c      ****     if(command >= 1000 && command < 1125)
 488              		.loc 1 119 0
 489 0018 3B1D     		add	r3, r7, #4
 490 001a 1A88     		ldrh	r2, [r3]
 491 001c 724B     		ldr	r3, .L33
 492 001e 9A42     		cmp	r2, r3
 493 0020 11D9     		bls	.L22
 494              		.loc 1 119 0 is_stmt 0 discriminator 1
 495 0022 3B1D     		add	r3, r7, #4
 496 0024 1A88     		ldrh	r2, [r3]
 497 0026 714B     		ldr	r3, .L33+4
 498 0028 9A42     		cmp	r2, r3
 499 002a 0CD8     		bhi	.L22
 120:.\main.c      ****     {
 121:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 500              		.loc 1 121 0 is_stmt 1
 501 002c FC1D     		add	r4, r7, #7
 502 002e 3868     		ldr	r0, [r7]
 503 0030 FB1D     		add	r3, r7, #7
 504 0032 1978     		ldrb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 12


 505 0034 BB1D     		add	r3, r7, #6
 506 0036 1A78     		ldrb	r2, [r3]
 507 0038 6423     		mov	r3, #100
 508 003a 5B42     		neg	r3, r3
 509 003c FFF7FEFF 		bl	check_update
 510 0040 031C     		mov	r3, r0
 511 0042 2370     		strb	r3, [r4]
 512 0044 CAE0     		b	.L23
 513              	.L22:
 122:.\main.c      ****     }
 123:.\main.c      ****     else if(command >= 1125 && command < 1250)
 514              		.loc 1 123 0
 515 0046 3B1D     		add	r3, r7, #4
 516 0048 1A88     		ldrh	r2, [r3]
 517 004a 684B     		ldr	r3, .L33+4
 518 004c 9A42     		cmp	r2, r3
 519 004e 11D9     		bls	.L24
 520              		.loc 1 123 0 is_stmt 0 discriminator 1
 521 0050 3B1D     		add	r3, r7, #4
 522 0052 1A88     		ldrh	r2, [r3]
 523 0054 664B     		ldr	r3, .L33+8
 524 0056 9A42     		cmp	r2, r3
 525 0058 0CD8     		bhi	.L24
 124:.\main.c      ****     {
 125:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 526              		.loc 1 125 0 is_stmt 1
 527 005a FC1D     		add	r4, r7, #7
 528 005c 3868     		ldr	r0, [r7]
 529 005e FB1D     		add	r3, r7, #7
 530 0060 1978     		ldrb	r1, [r3]
 531 0062 BB1D     		add	r3, r7, #6
 532 0064 1A78     		ldrb	r2, [r3]
 533 0066 3223     		mov	r3, #50
 534 0068 5B42     		neg	r3, r3
 535 006a FFF7FEFF 		bl	check_update
 536 006e 031C     		mov	r3, r0
 537 0070 2370     		strb	r3, [r4]
 538 0072 B3E0     		b	.L23
 539              	.L24:
 126:.\main.c      ****     }
 127:.\main.c      ****     else if(command >= 1250 && command < 1375)
 540              		.loc 1 127 0
 541 0074 3B1D     		add	r3, r7, #4
 542 0076 1A88     		ldrh	r2, [r3]
 543 0078 5D4B     		ldr	r3, .L33+8
 544 007a 9A42     		cmp	r2, r3
 545 007c 11D9     		bls	.L25
 546              		.loc 1 127 0 is_stmt 0 discriminator 1
 547 007e 3B1D     		add	r3, r7, #4
 548 0080 1A88     		ldrh	r2, [r3]
 549 0082 5C4B     		ldr	r3, .L33+12
 550 0084 9A42     		cmp	r2, r3
 551 0086 0CD8     		bhi	.L25
 128:.\main.c      ****     {
 129:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 552              		.loc 1 129 0 is_stmt 1
 553 0088 FC1D     		add	r4, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 13


 554 008a 3868     		ldr	r0, [r7]
 555 008c FB1D     		add	r3, r7, #7
 556 008e 1978     		ldrb	r1, [r3]
 557 0090 BB1D     		add	r3, r7, #6
 558 0092 1A78     		ldrb	r2, [r3]
 559 0094 0A23     		mov	r3, #10
 560 0096 5B42     		neg	r3, r3
 561 0098 FFF7FEFF 		bl	check_update
 562 009c 031C     		mov	r3, r0
 563 009e 2370     		strb	r3, [r4]
 564 00a0 9CE0     		b	.L23
 565              	.L25:
 130:.\main.c      ****     }
 131:.\main.c      ****     else if(command >= 1375 && command < 1490)
 566              		.loc 1 131 0
 567 00a2 3B1D     		add	r3, r7, #4
 568 00a4 1A88     		ldrh	r2, [r3]
 569 00a6 534B     		ldr	r3, .L33+12
 570 00a8 9A42     		cmp	r2, r3
 571 00aa 11D9     		bls	.L26
 572              		.loc 1 131 0 is_stmt 0 discriminator 1
 573 00ac 3B1D     		add	r3, r7, #4
 574 00ae 1A88     		ldrh	r2, [r3]
 575 00b0 514B     		ldr	r3, .L33+16
 576 00b2 9A42     		cmp	r2, r3
 577 00b4 0CD8     		bhi	.L26
 132:.\main.c      ****     {
 133:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 578              		.loc 1 133 0 is_stmt 1
 579 00b6 FC1D     		add	r4, r7, #7
 580 00b8 3868     		ldr	r0, [r7]
 581 00ba FB1D     		add	r3, r7, #7
 582 00bc 1978     		ldrb	r1, [r3]
 583 00be BB1D     		add	r3, r7, #6
 584 00c0 1A78     		ldrb	r2, [r3]
 585 00c2 0523     		mov	r3, #5
 586 00c4 5B42     		neg	r3, r3
 587 00c6 FFF7FEFF 		bl	check_update
 588 00ca 031C     		mov	r3, r0
 589 00cc 2370     		strb	r3, [r4]
 590 00ce 85E0     		b	.L23
 591              	.L26:
 134:.\main.c      ****     }
 135:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 592              		.loc 1 135 0
 593 00d0 3B1D     		add	r3, r7, #4
 594 00d2 1A88     		ldrh	r2, [r3]
 595 00d4 494B     		ldr	r3, .L33+20
 596 00d6 9A42     		cmp	r2, r3
 597 00d8 10D8     		bhi	.L27
 598              		.loc 1 135 0 is_stmt 0 discriminator 1
 599 00da 3B1D     		add	r3, r7, #4
 600 00dc 1A88     		ldrh	r2, [r3]
 601 00de 464B     		ldr	r3, .L33+16
 602 00e0 9A42     		cmp	r2, r3
 603 00e2 0BD9     		bls	.L27
 136:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 14


 137:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 604              		.loc 1 137 0 is_stmt 1
 605 00e4 FC1D     		add	r4, r7, #7
 606 00e6 FB1D     		add	r3, r7, #7
 607 00e8 1A78     		ldrb	r2, [r3]
 608 00ea BB1D     		add	r3, r7, #6
 609 00ec 1B78     		ldrb	r3, [r3]
 610 00ee 101C     		mov	r0, r2
 611 00f0 191C     		mov	r1, r3
 612 00f2 FFF7FEFF 		bl	maintain_array
 613 00f6 031C     		mov	r3, r0
 614 00f8 2370     		strb	r3, [r4]
 615 00fa 6FE0     		b	.L23
 616              	.L27:
 138:.\main.c      ****     }
 139:.\main.c      ****     else if(command > 1510 && command <= 1625)
 617              		.loc 1 139 0
 618 00fc 3B1D     		add	r3, r7, #4
 619 00fe 1A88     		ldrh	r2, [r3]
 620 0100 3E4B     		ldr	r3, .L33+20
 621 0102 9A42     		cmp	r2, r3
 622 0104 13D9     		bls	.L28
 623              		.loc 1 139 0 is_stmt 0 discriminator 1
 624 0106 3B1D     		add	r3, r7, #4
 625 0108 1A88     		ldrh	r2, [r3]
 626 010a 3D4B     		ldr	r3, .L33+24
 627 010c 9A42     		cmp	r2, r3
 628 010e 0ED8     		bhi	.L28
 140:.\main.c      ****     {
 141:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 629              		.loc 1 141 0 is_stmt 1
 630 0110 FC1D     		add	r4, r7, #7
 631 0112 3968     		ldr	r1, [r7]
 632 0114 FB1D     		add	r3, r7, #7
 633 0116 1A78     		ldrb	r2, [r3]
 634 0118 BB1D     		add	r3, r7, #6
 635 011a 1B78     		ldrb	r3, [r3]
 636 011c 081C     		mov	r0, r1
 637 011e 111C     		mov	r1, r2
 638 0120 1A1C     		mov	r2, r3
 639 0122 0523     		mov	r3, #5
 640 0124 FFF7FEFF 		bl	check_update
 641 0128 031C     		mov	r3, r0
 642 012a 2370     		strb	r3, [r4]
 643 012c 56E0     		b	.L23
 644              	.L28:
 142:.\main.c      ****     }
 143:.\main.c      ****     else if(command > 1625 && command <= 1750)
 645              		.loc 1 143 0
 646 012e 3B1D     		add	r3, r7, #4
 647 0130 1A88     		ldrh	r2, [r3]
 648 0132 334B     		ldr	r3, .L33+24
 649 0134 9A42     		cmp	r2, r3
 650 0136 13D9     		bls	.L29
 651              		.loc 1 143 0 is_stmt 0 discriminator 1
 652 0138 3B1D     		add	r3, r7, #4
 653 013a 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 15


 654 013c 314B     		ldr	r3, .L33+28
 655 013e 9A42     		cmp	r2, r3
 656 0140 0ED8     		bhi	.L29
 144:.\main.c      ****     {
 145:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 657              		.loc 1 145 0 is_stmt 1
 658 0142 FC1D     		add	r4, r7, #7
 659 0144 3968     		ldr	r1, [r7]
 660 0146 FB1D     		add	r3, r7, #7
 661 0148 1A78     		ldrb	r2, [r3]
 662 014a BB1D     		add	r3, r7, #6
 663 014c 1B78     		ldrb	r3, [r3]
 664 014e 081C     		mov	r0, r1
 665 0150 111C     		mov	r1, r2
 666 0152 1A1C     		mov	r2, r3
 667 0154 0A23     		mov	r3, #10
 668 0156 FFF7FEFF 		bl	check_update
 669 015a 031C     		mov	r3, r0
 670 015c 2370     		strb	r3, [r4]
 671 015e 3DE0     		b	.L23
 672              	.L29:
 146:.\main.c      ****     }
 147:.\main.c      ****     else if(command > 1750 && command <= 1875)
 673              		.loc 1 147 0
 674 0160 3B1D     		add	r3, r7, #4
 675 0162 1A88     		ldrh	r2, [r3]
 676 0164 274B     		ldr	r3, .L33+28
 677 0166 9A42     		cmp	r2, r3
 678 0168 13D9     		bls	.L30
 679              		.loc 1 147 0 is_stmt 0 discriminator 1
 680 016a 3B1D     		add	r3, r7, #4
 681 016c 1A88     		ldrh	r2, [r3]
 682 016e 264B     		ldr	r3, .L33+32
 683 0170 9A42     		cmp	r2, r3
 684 0172 0ED8     		bhi	.L30
 148:.\main.c      ****     {
 149:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 685              		.loc 1 149 0 is_stmt 1
 686 0174 FC1D     		add	r4, r7, #7
 687 0176 3968     		ldr	r1, [r7]
 688 0178 FB1D     		add	r3, r7, #7
 689 017a 1A78     		ldrb	r2, [r3]
 690 017c BB1D     		add	r3, r7, #6
 691 017e 1B78     		ldrb	r3, [r3]
 692 0180 081C     		mov	r0, r1
 693 0182 111C     		mov	r1, r2
 694 0184 1A1C     		mov	r2, r3
 695 0186 3223     		mov	r3, #50
 696 0188 FFF7FEFF 		bl	check_update
 697 018c 031C     		mov	r3, r0
 698 018e 2370     		strb	r3, [r4]
 699 0190 24E0     		b	.L23
 700              	.L30:
 150:.\main.c      ****     }
 151:.\main.c      ****     else if(command > 1875 && command <= 2000)
 701              		.loc 1 151 0
 702 0192 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 16


 703 0194 1A88     		ldrh	r2, [r3]
 704 0196 1C4B     		ldr	r3, .L33+32
 705 0198 9A42     		cmp	r2, r3
 706 019a 14D9     		bls	.L31
 707              		.loc 1 151 0 is_stmt 0 discriminator 1
 708 019c 3B1D     		add	r3, r7, #4
 709 019e 1A88     		ldrh	r2, [r3]
 710 01a0 FA23     		mov	r3, #250
 711 01a2 DB00     		lsl	r3, r3, #3
 712 01a4 9A42     		cmp	r2, r3
 713 01a6 0ED8     		bhi	.L31
 152:.\main.c      ****     {
 153:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 714              		.loc 1 153 0 is_stmt 1
 715 01a8 FC1D     		add	r4, r7, #7
 716 01aa 3968     		ldr	r1, [r7]
 717 01ac FB1D     		add	r3, r7, #7
 718 01ae 1A78     		ldrb	r2, [r3]
 719 01b0 BB1D     		add	r3, r7, #6
 720 01b2 1B78     		ldrb	r3, [r3]
 721 01b4 081C     		mov	r0, r1
 722 01b6 111C     		mov	r1, r2
 723 01b8 1A1C     		mov	r2, r3
 724 01ba 6423     		mov	r3, #100
 725 01bc FFF7FEFF 		bl	check_update
 726 01c0 031C     		mov	r3, r0
 727 01c2 2370     		strb	r3, [r4]
 728 01c4 0AE0     		b	.L23
 729              	.L31:
 154:.\main.c      ****     }
 155:.\main.c      ****     else
 156:.\main.c      ****     {
 157:.\main.c      ****         //throw error
 158:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 730              		.loc 1 158 0
 731 01c6 FC1D     		add	r4, r7, #7
 732 01c8 FB1D     		add	r3, r7, #7
 733 01ca 1A78     		ldrb	r2, [r3]
 734 01cc BB1D     		add	r3, r7, #6
 735 01ce 1B78     		ldrb	r3, [r3]
 736 01d0 101C     		mov	r0, r2
 737 01d2 191C     		mov	r1, r3
 738 01d4 FFF7FEFF 		bl	maintain_array
 739 01d8 031C     		mov	r3, r0
 740 01da 2370     		strb	r3, [r4]
 741              	.L23:
 159:.\main.c      ****     }
 160:.\main.c      ****     return cur_pos;
 742              		.loc 1 160 0
 743 01dc FB1D     		add	r3, r7, #7
 744 01de 1B78     		ldrb	r3, [r3]
 161:.\main.c      **** }
 745              		.loc 1 161 0
 746 01e0 181C     		mov	r0, r3
 747 01e2 BD46     		mov	sp, r7
 748 01e4 03B0     		add	sp, sp, #12
 749              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 17


 750 01e6 90BD     		pop	{r4, r7, pc}
 751              	.L34:
 752              		.align	2
 753              	.L33:
 754 01e8 E7030000 		.word	999
 755 01ec 64040000 		.word	1124
 756 01f0 E1040000 		.word	1249
 757 01f4 5E050000 		.word	1374
 758 01f8 D1050000 		.word	1489
 759 01fc E6050000 		.word	1510
 760 0200 59060000 		.word	1625
 761 0204 D6060000 		.word	1750
 762 0208 53070000 		.word	1875
 763              		.cfi_endproc
 764              	.LFE38:
 765              		.size	pos_to_vel, .-pos_to_vel
 766              		.section	.text.make_command,"ax",%progbits
 767              		.align	2
 768              		.global	make_command
 769              		.code	16
 770              		.thumb_func
 771              		.type	make_command, %function
 772              	make_command:
 773              	.LFB39:
 162:.\main.c      **** 
 163:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 164:.\main.c      **** {
 774              		.loc 1 164 0
 775              		.cfi_startproc
 776 0000 80B5     		push	{r7, lr}
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 7, -8
 779              		.cfi_offset 14, -4
 780 0002 84B0     		sub	sp, sp, #16
 781              		.cfi_def_cfa_offset 24
 782 0004 00AF     		add	r7, sp, #0
 783              		.cfi_def_cfa_register 7
 784 0006 7860     		str	r0, [r7, #4]
 785 0008 FB1C     		add	r3, r7, #3
 786 000a 1970     		strb	r1, [r3]
 787 000c BB1C     		add	r3, r7, #2
 788 000e 1A70     		strb	r2, [r3]
 165:.\main.c      ****     uint16 command;
 166:.\main.c      ****     int16 temp1;
 167:.\main.c      ****     int16 temp2;
 168:.\main.c      ****     int16 temp3;
 169:.\main.c      ****     
 170:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 789              		.loc 1 170 0
 790 0010 FB1C     		add	r3, r7, #3
 791 0012 1B78     		ldrb	r3, [r3]
 792 0014 7A68     		ldr	r2, [r7, #4]
 793 0016 D318     		add	r3, r2, r3
 794 0018 1B78     		ldrb	r3, [r3]
 795 001a 5BB2     		sxtb	r3, r3
 796 001c 1A02     		lsl	r2, r3, #8
 797 001e 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 18


 798 0020 0E33     		add	r3, r3, #14
 799 0022 1A80     		strh	r2, [r3]
 171:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 800              		.loc 1 171 0
 801 0024 BB1C     		add	r3, r7, #2
 802 0026 1B78     		ldrb	r3, [r3]
 803 0028 7A68     		ldr	r2, [r7, #4]
 804 002a D318     		add	r3, r2, r3
 805 002c 1B78     		ldrb	r3, [r3]
 806 002e 5BB2     		sxtb	r3, r3
 807 0030 9AB2     		uxth	r2, r3
 808 0032 3B1C     		mov	r3, r7
 809 0034 0C33     		add	r3, r3, #12
 810 0036 111C     		add	r1, r2, #0
 811 0038 FF22     		mov	r2, #255
 812 003a 0A40     		and	r2, r1
 813 003c 1A80     		strh	r2, [r3]
 172:.\main.c      ****     temp3 = temp1 | temp2;
 814              		.loc 1 172 0
 815 003e 3B1C     		mov	r3, r7
 816 0040 0A33     		add	r3, r3, #10
 817 0042 391C     		mov	r1, r7
 818 0044 0E31     		add	r1, r1, #14
 819 0046 3A1C     		mov	r2, r7
 820 0048 0C32     		add	r2, r2, #12
 821 004a 0988     		ldrh	r1, [r1]
 822 004c 1288     		ldrh	r2, [r2]
 823 004e 0A43     		orr	r2, r1
 824 0050 1A80     		strh	r2, [r3]
 173:.\main.c      ****     command = (temp3/2) + 1500;
 825              		.loc 1 173 0
 826 0052 3B1C     		mov	r3, r7
 827 0054 0A33     		add	r3, r3, #10
 828 0056 0021     		mov	r1, #0
 829 0058 5B5E     		ldrsh	r3, [r3, r1]
 830 005a 002B     		cmp	r3, #0
 831 005c 00DA     		bge	.L36
 832 005e 0133     		add	r3, r3, #1
 833              	.L36:
 834 0060 5B10     		asr	r3, r3, #1
 835 0062 9BB2     		uxth	r3, r3
 836 0064 9AB2     		uxth	r2, r3
 837 0066 3B1C     		mov	r3, r7
 838 0068 0833     		add	r3, r3, #8
 839 006a 0549     		ldr	r1, .L38
 840 006c 5218     		add	r2, r2, r1
 841 006e 1A80     		strh	r2, [r3]
 174:.\main.c      ****     return command;
 842              		.loc 1 174 0
 843 0070 3B1C     		mov	r3, r7
 844 0072 0833     		add	r3, r3, #8
 845 0074 1B88     		ldrh	r3, [r3]
 175:.\main.c      **** }
 846              		.loc 1 175 0
 847 0076 181C     		mov	r0, r3
 848 0078 BD46     		mov	sp, r7
 849 007a 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 19


 850              		@ sp needed
 851 007c 80BD     		pop	{r7, pc}
 852              	.L39:
 853 007e C046     		.align	2
 854              	.L38:
 855 0080 DC050000 		.word	1500
 856              		.cfi_endproc
 857              	.LFE39:
 858              		.size	make_command, .-make_command
 859              		.section	.text.potFeedback,"ax",%progbits
 860              		.align	2
 861              		.global	potFeedback
 862              		.code	16
 863              		.thumb_func
 864              		.type	potFeedback, %function
 865              	potFeedback:
 866              	.LFB40:
 176:.\main.c      **** 
 177:.\main.c      **** uint16 potFeedback(uint32 channel)
 178:.\main.c      **** {
 867              		.loc 1 178 0
 868              		.cfi_startproc
 869 0000 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 84B0     		sub	sp, sp, #16
 874              		.cfi_def_cfa_offset 24
 875 0004 00AF     		add	r7, sp, #0
 876              		.cfi_def_cfa_register 7
 877 0006 7860     		str	r0, [r7, #4]
 179:.\main.c      ****     //TODO: uncomment this section
 180:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 181:.\main.c      ****     uint16 feedback = 500;
 878              		.loc 1 181 0
 879 0008 3B1C     		mov	r3, r7
 880 000a 0E33     		add	r3, r3, #14
 881 000c FA22     		mov	r2, #250
 882 000e 5200     		lsl	r2, r2, #1
 883 0010 1A80     		strh	r2, [r3]
 182:.\main.c      ****     return feedback;
 884              		.loc 1 182 0
 885 0012 3B1C     		mov	r3, r7
 886 0014 0E33     		add	r3, r3, #14
 887 0016 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 888              		.loc 1 183 0
 889 0018 181C     		mov	r0, r3
 890 001a BD46     		mov	sp, r7
 891 001c 04B0     		add	sp, sp, #16
 892              		@ sp needed
 893 001e 80BD     		pop	{r7, pc}
 894              		.cfi_endproc
 895              	.LFE40:
 896              		.size	potFeedback, .-potFeedback
 897              		.section	.text.send_feedback,"ax",%progbits
 898              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 20


 899              		.global	send_feedback
 900              		.code	16
 901              		.thumb_func
 902              		.type	send_feedback, %function
 903              	send_feedback:
 904              	.LFB41:
 184:.\main.c      **** 
 185:.\main.c      **** void send_feedback()
 186:.\main.c      **** {
 905              		.loc 1 186 0
 906              		.cfi_startproc
 907 0000 80B5     		push	{r7, lr}
 908              		.cfi_def_cfa_offset 8
 909              		.cfi_offset 7, -8
 910              		.cfi_offset 14, -4
 911 0002 00AF     		add	r7, sp, #0
 912              		.cfi_def_cfa_register 7
 187:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 188:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 189:.\main.c      ****     //TODO define system state
 190:.\main.c      ****     //send packet via serial to wiznet
 191:.\main.c      **** }
 913              		.loc 1 191 0
 914 0004 BD46     		mov	sp, r7
 915              		@ sp needed
 916 0006 80BD     		pop	{r7, pc}
 917              		.cfi_endproc
 918              	.LFE41:
 919              		.size	send_feedback, .-send_feedback
 920              		.section	.text.fill_data_array,"ax",%progbits
 921              		.align	2
 922              		.global	fill_data_array
 923              		.code	16
 924              		.thumb_func
 925              		.type	fill_data_array, %function
 926              	fill_data_array:
 927              	.LFB42:
 192:.\main.c      **** 
 193:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 194:.\main.c      **** void fill_data_array()
 195:.\main.c      **** {
 928              		.loc 1 195 0
 929              		.cfi_startproc
 930 0000 80B5     		push	{r7, lr}
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 7, -8
 933              		.cfi_offset 14, -4
 934 0002 00AF     		add	r7, sp, #0
 935              		.cfi_def_cfa_register 7
 196:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 936              		.loc 1 196 0
 937 0004 034B     		ldr	r3, .L44
 938 0006 181C     		mov	r0, r3
 939 0008 1621     		mov	r1, #22
 940 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 197:.\main.c      **** //    uint8 i = 0;
 198:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 21


 199:.\main.c      **** //    {
 200:.\main.c      **** //        data_array[i] = test_array[i];
 201:.\main.c      **** //    }
 202:.\main.c      **** }
 941              		.loc 1 202 0
 942 000e BD46     		mov	sp, r7
 943              		@ sp needed
 944 0010 80BD     		pop	{r7, pc}
 945              	.L45:
 946 0012 C046     		.align	2
 947              	.L44:
 948 0014 00000000 		.word	data_array
 949              		.cfi_endproc
 950              	.LFE42:
 951              		.size	fill_data_array, .-fill_data_array
 952              		.section	.text.ServoGoalPosition,"ax",%progbits
 953              		.align	2
 954              		.global	ServoGoalPosition
 955              		.code	16
 956              		.thumb_func
 957              		.type	ServoGoalPosition, %function
 958              	ServoGoalPosition:
 959              	.LFB43:
 203:.\main.c      **** 
 204:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 205:.\main.c      **** {
 960              		.loc 1 205 0
 961              		.cfi_startproc
 962 0000 80B5     		push	{r7, lr}
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 7, -8
 965              		.cfi_offset 14, -4
 966 0002 86B0     		sub	sp, sp, #24
 967              		.cfi_def_cfa_offset 32
 968 0004 00AF     		add	r7, sp, #0
 969              		.cfi_def_cfa_register 7
 970 0006 0A1C     		mov	r2, r1
 971 0008 FB1D     		add	r3, r7, #7
 972 000a 011C     		add	r1, r0, #0
 973 000c 1970     		strb	r1, [r3]
 974 000e 3B1D     		add	r3, r7, #4
 975 0010 1A80     		strh	r2, [r3]
 206:.\main.c      ****     uint8 array[9];
 207:.\main.c      ****     
 208:.\main.c      ****     array[0] = 0xFF;
 976              		.loc 1 208 0
 977 0012 3B1C     		mov	r3, r7
 978 0014 0C33     		add	r3, r3, #12
 979 0016 FF22     		mov	r2, #255
 980 0018 1A70     		strb	r2, [r3]
 209:.\main.c      ****     array[1] = 0xFF;
 981              		.loc 1 209 0
 982 001a 3B1C     		mov	r3, r7
 983 001c 0C33     		add	r3, r3, #12
 984 001e FF22     		mov	r2, #255
 985 0020 5A70     		strb	r2, [r3, #1]
 210:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 22


 986              		.loc 1 210 0
 987 0022 3B1C     		mov	r3, r7
 988 0024 0C33     		add	r3, r3, #12
 989 0026 FA1D     		add	r2, r7, #7
 990 0028 1278     		ldrb	r2, [r2]
 991 002a 9A70     		strb	r2, [r3, #2]
 211:.\main.c      ****     array[3] = 0x05;
 992              		.loc 1 211 0
 993 002c 3B1C     		mov	r3, r7
 994 002e 0C33     		add	r3, r3, #12
 995 0030 0522     		mov	r2, #5
 996 0032 DA70     		strb	r2, [r3, #3]
 212:.\main.c      ****     array[4] = 0x03; //write instruction
 997              		.loc 1 212 0
 998 0034 3B1C     		mov	r3, r7
 999 0036 0C33     		add	r3, r3, #12
 1000 0038 0322     		mov	r2, #3
 1001 003a 1A71     		strb	r2, [r3, #4]
 213:.\main.c      ****     array[5] = 0x1E;
 1002              		.loc 1 213 0
 1003 003c 3B1C     		mov	r3, r7
 1004 003e 0C33     		add	r3, r3, #12
 1005 0040 1E22     		mov	r2, #30
 1006 0042 5A71     		strb	r2, [r3, #5]
 214:.\main.c      ****     array[6] = position;
 1007              		.loc 1 214 0
 1008 0044 3B1D     		add	r3, r7, #4
 1009 0046 1B88     		ldrh	r3, [r3]
 1010 0048 DAB2     		uxtb	r2, r3
 1011 004a 3B1C     		mov	r3, r7
 1012 004c 0C33     		add	r3, r3, #12
 1013 004e 9A71     		strb	r2, [r3, #6]
 215:.\main.c      ****     array[7] = position >> 8;
 1014              		.loc 1 215 0
 1015 0050 3B1D     		add	r3, r7, #4
 1016 0052 1B88     		ldrh	r3, [r3]
 1017 0054 1B0A     		lsr	r3, r3, #8
 1018 0056 9BB2     		uxth	r3, r3
 1019 0058 DAB2     		uxtb	r2, r3
 1020 005a 3B1C     		mov	r3, r7
 1021 005c 0C33     		add	r3, r3, #12
 1022 005e DA71     		strb	r2, [r3, #7]
 216:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1023              		.loc 1 216 0
 1024 0060 3B1C     		mov	r3, r7
 1025 0062 0C33     		add	r3, r3, #12
 1026 0064 9A79     		ldrb	r2, [r3, #6]
 1027 0066 FB1D     		add	r3, r7, #7
 1028 0068 1B78     		ldrb	r3, [r3]
 1029 006a D318     		add	r3, r2, r3
 1030 006c DAB2     		uxtb	r2, r3
 1031 006e 3B1C     		mov	r3, r7
 1032 0070 0C33     		add	r3, r3, #12
 1033 0072 DB79     		ldrb	r3, [r3, #7]
 1034 0074 D318     		add	r3, r2, r3
 1035 0076 DBB2     		uxtb	r3, r3
 1036 0078 2633     		add	r3, r3, #38
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 23


 1037 007a DBB2     		uxtb	r3, r3
 1038 007c DB43     		mvn	r3, r3
 1039 007e DAB2     		uxtb	r2, r3
 1040 0080 3B1C     		mov	r3, r7
 1041 0082 0C33     		add	r3, r3, #12
 1042 0084 1A72     		strb	r2, [r3, #8]
 217:.\main.c      ****     
 218:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1043              		.loc 1 218 0
 1044 0086 3B1C     		mov	r3, r7
 1045 0088 0C33     		add	r3, r3, #12
 1046 008a 181C     		mov	r0, r3
 1047 008c 0921     		mov	r1, #9
 1048 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 219:.\main.c      **** }
 1049              		.loc 1 219 0
 1050 0092 BD46     		mov	sp, r7
 1051 0094 06B0     		add	sp, sp, #24
 1052              		@ sp needed
 1053 0096 80BD     		pop	{r7, pc}
 1054              		.cfi_endproc
 1055              	.LFE43:
 1056              		.size	ServoGoalPosition, .-ServoGoalPosition
 1057              		.section	.text.SetServoTorque,"ax",%progbits
 1058              		.align	2
 1059              		.global	SetServoTorque
 1060              		.code	16
 1061              		.thumb_func
 1062              		.type	SetServoTorque, %function
 1063              	SetServoTorque:
 1064              	.LFB44:
 220:.\main.c      **** 
 221:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 222:.\main.c      **** {
 1065              		.loc 1 222 0
 1066              		.cfi_startproc
 1067 0000 80B5     		push	{r7, lr}
 1068              		.cfi_def_cfa_offset 8
 1069              		.cfi_offset 7, -8
 1070              		.cfi_offset 14, -4
 1071 0002 86B0     		sub	sp, sp, #24
 1072              		.cfi_def_cfa_offset 32
 1073 0004 00AF     		add	r7, sp, #0
 1074              		.cfi_def_cfa_register 7
 1075 0006 0A1C     		mov	r2, r1
 1076 0008 FB1D     		add	r3, r7, #7
 1077 000a 011C     		add	r1, r0, #0
 1078 000c 1970     		strb	r1, [r3]
 1079 000e 3B1D     		add	r3, r7, #4
 1080 0010 1A80     		strh	r2, [r3]
 223:.\main.c      ****     uint8 array[9];
 224:.\main.c      ****     
 225:.\main.c      ****     array[0] = 0xFF;
 1081              		.loc 1 225 0
 1082 0012 3B1C     		mov	r3, r7
 1083 0014 0C33     		add	r3, r3, #12
 1084 0016 FF22     		mov	r2, #255
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 24


 1085 0018 1A70     		strb	r2, [r3]
 226:.\main.c      ****     array[1] = 0xFF;
 1086              		.loc 1 226 0
 1087 001a 3B1C     		mov	r3, r7
 1088 001c 0C33     		add	r3, r3, #12
 1089 001e FF22     		mov	r2, #255
 1090 0020 5A70     		strb	r2, [r3, #1]
 227:.\main.c      ****     array[2] = servoID; 
 1091              		.loc 1 227 0
 1092 0022 3B1C     		mov	r3, r7
 1093 0024 0C33     		add	r3, r3, #12
 1094 0026 FA1D     		add	r2, r7, #7
 1095 0028 1278     		ldrb	r2, [r2]
 1096 002a 9A70     		strb	r2, [r3, #2]
 228:.\main.c      ****     array[3] = 0x05;
 1097              		.loc 1 228 0
 1098 002c 3B1C     		mov	r3, r7
 1099 002e 0C33     		add	r3, r3, #12
 1100 0030 0522     		mov	r2, #5
 1101 0032 DA70     		strb	r2, [r3, #3]
 229:.\main.c      ****     array[4] = 0x03; //write instruction
 1102              		.loc 1 229 0
 1103 0034 3B1C     		mov	r3, r7
 1104 0036 0C33     		add	r3, r3, #12
 1105 0038 0322     		mov	r2, #3
 1106 003a 1A71     		strb	r2, [r3, #4]
 230:.\main.c      ****     array[5] = 0x0E;
 1107              		.loc 1 230 0
 1108 003c 3B1C     		mov	r3, r7
 1109 003e 0C33     		add	r3, r3, #12
 1110 0040 0E22     		mov	r2, #14
 1111 0042 5A71     		strb	r2, [r3, #5]
 231:.\main.c      ****     array[6] = torque;
 1112              		.loc 1 231 0
 1113 0044 3B1D     		add	r3, r7, #4
 1114 0046 1B88     		ldrh	r3, [r3]
 1115 0048 DAB2     		uxtb	r2, r3
 1116 004a 3B1C     		mov	r3, r7
 1117 004c 0C33     		add	r3, r3, #12
 1118 004e 9A71     		strb	r2, [r3, #6]
 232:.\main.c      ****     array[7] = torque >> 8;
 1119              		.loc 1 232 0
 1120 0050 3B1D     		add	r3, r7, #4
 1121 0052 1B88     		ldrh	r3, [r3]
 1122 0054 1B0A     		lsr	r3, r3, #8
 1123 0056 9BB2     		uxth	r3, r3
 1124 0058 DAB2     		uxtb	r2, r3
 1125 005a 3B1C     		mov	r3, r7
 1126 005c 0C33     		add	r3, r3, #12
 1127 005e DA71     		strb	r2, [r3, #7]
 233:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1128              		.loc 1 233 0
 1129 0060 3B1C     		mov	r3, r7
 1130 0062 0C33     		add	r3, r3, #12
 1131 0064 9A79     		ldrb	r2, [r3, #6]
 1132 0066 FB1D     		add	r3, r7, #7
 1133 0068 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 25


 1134 006a D318     		add	r3, r2, r3
 1135 006c DAB2     		uxtb	r2, r3
 1136 006e 3B1C     		mov	r3, r7
 1137 0070 0C33     		add	r3, r3, #12
 1138 0072 DB79     		ldrb	r3, [r3, #7]
 1139 0074 D318     		add	r3, r2, r3
 1140 0076 DBB2     		uxtb	r3, r3
 1141 0078 1633     		add	r3, r3, #22
 1142 007a DBB2     		uxtb	r3, r3
 1143 007c DB43     		mvn	r3, r3
 1144 007e DAB2     		uxtb	r2, r3
 1145 0080 3B1C     		mov	r3, r7
 1146 0082 0C33     		add	r3, r3, #12
 1147 0084 1A72     		strb	r2, [r3, #8]
 234:.\main.c      ****     
 235:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1148              		.loc 1 235 0
 1149 0086 3B1C     		mov	r3, r7
 1150 0088 0C33     		add	r3, r3, #12
 1151 008a 181C     		mov	r0, r3
 1152 008c 0921     		mov	r1, #9
 1153 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 236:.\main.c      ****     
 237:.\main.c      **** }    
 1154              		.loc 1 237 0
 1155 0092 BD46     		mov	sp, r7
 1156 0094 06B0     		add	sp, sp, #24
 1157              		@ sp needed
 1158 0096 80BD     		pop	{r7, pc}
 1159              		.cfi_endproc
 1160              	.LFE44:
 1161              		.size	SetServoTorque, .-SetServoTorque
 1162              		.section	.text.ServoSpeed,"ax",%progbits
 1163              		.align	2
 1164              		.global	ServoSpeed
 1165              		.code	16
 1166              		.thumb_func
 1167              		.type	ServoSpeed, %function
 1168              	ServoSpeed:
 1169              	.LFB45:
 238:.\main.c      **** 
 239:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 240:.\main.c      **** {
 1170              		.loc 1 240 0
 1171              		.cfi_startproc
 1172 0000 80B5     		push	{r7, lr}
 1173              		.cfi_def_cfa_offset 8
 1174              		.cfi_offset 7, -8
 1175              		.cfi_offset 14, -4
 1176 0002 86B0     		sub	sp, sp, #24
 1177              		.cfi_def_cfa_offset 32
 1178 0004 00AF     		add	r7, sp, #0
 1179              		.cfi_def_cfa_register 7
 1180 0006 0A1C     		mov	r2, r1
 1181 0008 FB1D     		add	r3, r7, #7
 1182 000a 011C     		add	r1, r0, #0
 1183 000c 1970     		strb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 26


 1184 000e 3B1D     		add	r3, r7, #4
 1185 0010 1A80     		strh	r2, [r3]
 241:.\main.c      ****     uint8 array[9];
 242:.\main.c      ****     
 243:.\main.c      ****     array[0] = 0xFF;
 1186              		.loc 1 243 0
 1187 0012 3B1C     		mov	r3, r7
 1188 0014 0C33     		add	r3, r3, #12
 1189 0016 FF22     		mov	r2, #255
 1190 0018 1A70     		strb	r2, [r3]
 244:.\main.c      ****     array[1] = 0xFF;
 1191              		.loc 1 244 0
 1192 001a 3B1C     		mov	r3, r7
 1193 001c 0C33     		add	r3, r3, #12
 1194 001e FF22     		mov	r2, #255
 1195 0020 5A70     		strb	r2, [r3, #1]
 245:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1196              		.loc 1 245 0
 1197 0022 3B1C     		mov	r3, r7
 1198 0024 0C33     		add	r3, r3, #12
 1199 0026 FA1D     		add	r2, r7, #7
 1200 0028 1278     		ldrb	r2, [r2]
 1201 002a 9A70     		strb	r2, [r3, #2]
 246:.\main.c      ****     array[3] = 0x05;
 1202              		.loc 1 246 0
 1203 002c 3B1C     		mov	r3, r7
 1204 002e 0C33     		add	r3, r3, #12
 1205 0030 0522     		mov	r2, #5
 1206 0032 DA70     		strb	r2, [r3, #3]
 247:.\main.c      ****     array[4] = 0x03; //write instruction
 1207              		.loc 1 247 0
 1208 0034 3B1C     		mov	r3, r7
 1209 0036 0C33     		add	r3, r3, #12
 1210 0038 0322     		mov	r2, #3
 1211 003a 1A71     		strb	r2, [r3, #4]
 248:.\main.c      ****     array[5] = 0x20;
 1212              		.loc 1 248 0
 1213 003c 3B1C     		mov	r3, r7
 1214 003e 0C33     		add	r3, r3, #12
 1215 0040 2022     		mov	r2, #32
 1216 0042 5A71     		strb	r2, [r3, #5]
 249:.\main.c      ****     array[6] = speed;
 1217              		.loc 1 249 0
 1218 0044 3B1D     		add	r3, r7, #4
 1219 0046 1B88     		ldrh	r3, [r3]
 1220 0048 DAB2     		uxtb	r2, r3
 1221 004a 3B1C     		mov	r3, r7
 1222 004c 0C33     		add	r3, r3, #12
 1223 004e 9A71     		strb	r2, [r3, #6]
 250:.\main.c      ****     array[7] = speed >> 8;
 1224              		.loc 1 250 0
 1225 0050 3B1D     		add	r3, r7, #4
 1226 0052 1B88     		ldrh	r3, [r3]
 1227 0054 1B0A     		lsr	r3, r3, #8
 1228 0056 9BB2     		uxth	r3, r3
 1229 0058 DAB2     		uxtb	r2, r3
 1230 005a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 27


 1231 005c 0C33     		add	r3, r3, #12
 1232 005e DA71     		strb	r2, [r3, #7]
 251:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1233              		.loc 1 251 0
 1234 0060 3B1C     		mov	r3, r7
 1235 0062 0C33     		add	r3, r3, #12
 1236 0064 9A79     		ldrb	r2, [r3, #6]
 1237 0066 FB1D     		add	r3, r7, #7
 1238 0068 1B78     		ldrb	r3, [r3]
 1239 006a D318     		add	r3, r2, r3
 1240 006c DAB2     		uxtb	r2, r3
 1241 006e 3B1C     		mov	r3, r7
 1242 0070 0C33     		add	r3, r3, #12
 1243 0072 DB79     		ldrb	r3, [r3, #7]
 1244 0074 D318     		add	r3, r2, r3
 1245 0076 DBB2     		uxtb	r3, r3
 1246 0078 2833     		add	r3, r3, #40
 1247 007a DBB2     		uxtb	r3, r3
 1248 007c DB43     		mvn	r3, r3
 1249 007e DAB2     		uxtb	r2, r3
 1250 0080 3B1C     		mov	r3, r7
 1251 0082 0C33     		add	r3, r3, #12
 1252 0084 1A72     		strb	r2, [r3, #8]
 252:.\main.c      ****     
 253:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1253              		.loc 1 253 0
 1254 0086 3B1C     		mov	r3, r7
 1255 0088 0C33     		add	r3, r3, #12
 1256 008a 181C     		mov	r0, r3
 1257 008c 0921     		mov	r1, #9
 1258 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 254:.\main.c      ****     
 255:.\main.c      **** }
 1259              		.loc 1 255 0
 1260 0092 BD46     		mov	sp, r7
 1261 0094 06B0     		add	sp, sp, #24
 1262              		@ sp needed
 1263 0096 80BD     		pop	{r7, pc}
 1264              		.cfi_endproc
 1265              	.LFE45:
 1266              		.size	ServoSpeed, .-ServoSpeed
 1267              		.comm	wristTilt_state,1,1
 1268              		.section	.text.wristTilt,"ax",%progbits
 1269              		.align	2
 1270              		.global	wristTilt
 1271              		.code	16
 1272              		.thumb_func
 1273              		.type	wristTilt, %function
 1274              	wristTilt:
 1275              	.LFB46:
 256:.\main.c      **** 
 257:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 258:.\main.c      **** //control the tilting motion of the wrist
 259:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 260:.\main.c      **** {
 1276              		.loc 1 260 0
 1277              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 28


 1278 0000 90B5     		push	{r4, r7, lr}
 1279              		.cfi_def_cfa_offset 12
 1280              		.cfi_offset 4, -12
 1281              		.cfi_offset 7, -8
 1282              		.cfi_offset 14, -4
 1283 0002 85B0     		sub	sp, sp, #20
 1284              		.cfi_def_cfa_offset 32
 1285 0004 00AF     		add	r7, sp, #0
 1286              		.cfi_def_cfa_register 7
 1287 0006 021C     		mov	r2, r0
 1288 0008 3960     		str	r1, [r7]
 1289 000a FB1D     		add	r3, r7, #7
 1290 000c 1A70     		strb	r2, [r3]
 261:.\main.c      ****     // Overview
 262:.\main.c      ****     //take instruction from data_array
 263:.\main.c      ****     //smooth input
 264:.\main.c      ****     //actuate the tilting using UART
 265:.\main.c      ****     //get feedback
 266:.\main.c      **** 
 267:.\main.c      ****     //-------------------------- 
 268:.\main.c      ****     // Dynamixel Servo specific
 269:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 270:.\main.c      ****     // TODO: Set the desired position
 271:.\main.c      **** 
 272:.\main.c      ****     //--------------------------
 273:.\main.c      ****     // State machine
 274:.\main.c      ****     
 275:.\main.c      ****     uint8 i;
 276:.\main.c      ****     uint16 avg;
 277:.\main.c      ****     uint16 command;
 278:.\main.c      ****     
 279:.\main.c      ****     switch(wristTilt_state){ //actions
 1291              		.loc 1 279 0
 1292 000e 524B     		ldr	r3, .L75
 1293 0010 1B78     		ldrb	r3, [r3]
 1294 0012 012B     		cmp	r3, #1
 1295 0014 03D0     		beq	.L51
 1296 0016 6BDD     		ble	.L73
 1297 0018 022B     		cmp	r3, #2
 1298 001a 22D0     		beq	.L54
 280:.\main.c      ****         case tilt_start:
 281:.\main.c      ****             break;
 282:.\main.c      **** 
 283:.\main.c      ****         case tilt_init:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 285:.\main.c      ****             {
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 287:.\main.c      ****             }
 288:.\main.c      ****             WT_arr_cspot = 0;
 289:.\main.c      ****             
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 291:.\main.c      ****             break;
 292:.\main.c      **** 
 293:.\main.c      ****         case tilt_control:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 295:.\main.c      ****             
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 29


 297:.\main.c      ****             
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 299:.\main.c      ****             {
 300:.\main.c      ****                 WT_arr_cspot++;
 301:.\main.c      ****             }
 302:.\main.c      ****             else
 303:.\main.c      ****             {
 304:.\main.c      ****                 WT_arr_cspot = 0;
 305:.\main.c      ****             }
 306:.\main.c      ****             
 307:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 308:.\main.c      ****             
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 310:.\main.c      ****             
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 312:.\main.c      ****             {
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 314:.\main.c      ****             }
 315:.\main.c      ****             else
 316:.\main.c      ****             {
 317:.\main.c      ****                 //throw error
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 319:.\main.c      ****             }
 320:.\main.c      ****             WT_FLAG = 0;
 321:.\main.c      ****             break;
 322:.\main.c      ****             
 323:.\main.c      ****         case tilt_wait:
 324:.\main.c      ****             break;
 1299              		.loc 1 324 0
 1300 001c 69E0     		b	.L50
 1301              	.L51:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1302              		.loc 1 284 0
 1303 001e 3B1C     		mov	r3, r7
 1304 0020 0F33     		add	r3, r3, #15
 1305 0022 0022     		mov	r2, #0
 1306 0024 1A70     		strb	r2, [r3]
 1307 0026 0EE0     		b	.L56
 1308              	.L57:
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1309              		.loc 1 286 0 discriminator 2
 1310 0028 3B1C     		mov	r3, r7
 1311 002a 0F33     		add	r3, r3, #15
 1312 002c 1B78     		ldrb	r3, [r3]
 1313 002e 5B00     		lsl	r3, r3, #1
 1314 0030 3A68     		ldr	r2, [r7]
 1315 0032 D318     		add	r3, r2, r3
 1316 0034 494A     		ldr	r2, .L75+4
 1317 0036 1A80     		strh	r2, [r3]
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1318              		.loc 1 284 0 discriminator 2
 1319 0038 3B1C     		mov	r3, r7
 1320 003a 0F33     		add	r3, r3, #15
 1321 003c 1A78     		ldrb	r2, [r3]
 1322 003e 3B1C     		mov	r3, r7
 1323 0040 0F33     		add	r3, r3, #15
 1324 0042 0132     		add	r2, r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 30


 1325 0044 1A70     		strb	r2, [r3]
 1326              	.L56:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1327              		.loc 1 284 0 is_stmt 0 discriminator 1
 1328 0046 3B1C     		mov	r3, r7
 1329 0048 0F33     		add	r3, r3, #15
 1330 004a 1B78     		ldrb	r3, [r3]
 1331 004c 132B     		cmp	r3, #19
 1332 004e EBD9     		bls	.L57
 288:.\main.c      ****             WT_arr_cspot = 0;
 1333              		.loc 1 288 0 is_stmt 1
 1334 0050 FB1D     		add	r3, r7, #7
 1335 0052 0022     		mov	r2, #0
 1336 0054 1A70     		strb	r2, [r3]
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1337              		.loc 1 290 0
 1338 0056 414B     		ldr	r3, .L75+4
 1339 0058 0220     		mov	r0, #2
 1340 005a 191C     		mov	r1, r3
 1341 005c FFF7FEFF 		bl	ServoGoalPosition
 291:.\main.c      ****             break;
 1342              		.loc 1 291 0
 1343 0060 47E0     		b	.L50
 1344              	.L54:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1345              		.loc 1 294 0
 1346 0062 3C1C     		mov	r4, r7
 1347 0064 0C34     		add	r4, r4, #12
 1348 0066 3E4B     		ldr	r3, .L75+8
 1349 0068 181C     		mov	r0, r3
 1350 006a 1021     		mov	r1, #16
 1351 006c 1122     		mov	r2, #17
 1352 006e FFF7FEFF 		bl	make_command
 1353 0072 031C     		mov	r3, r0
 1354 0074 2380     		strh	r3, [r4]
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1355              		.loc 1 296 0
 1356 0076 FB1D     		add	r3, r7, #7
 1357 0078 1B78     		ldrb	r3, [r3]
 1358 007a 5B00     		lsl	r3, r3, #1
 1359 007c 3A68     		ldr	r2, [r7]
 1360 007e D318     		add	r3, r2, r3
 1361 0080 3A1C     		mov	r2, r7
 1362 0082 0C32     		add	r2, r2, #12
 1363 0084 1288     		ldrh	r2, [r2]
 1364 0086 1A80     		strh	r2, [r3]
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1365              		.loc 1 298 0
 1366 0088 FB1D     		add	r3, r7, #7
 1367 008a 1B78     		ldrb	r3, [r3]
 1368 008c 122B     		cmp	r3, #18
 1369 008e 05D8     		bhi	.L58
 300:.\main.c      ****                 WT_arr_cspot++;
 1370              		.loc 1 300 0
 1371 0090 FB1D     		add	r3, r7, #7
 1372 0092 1A78     		ldrb	r2, [r3]
 1373 0094 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 31


 1374 0096 0132     		add	r2, r2, #1
 1375 0098 1A70     		strb	r2, [r3]
 1376 009a 02E0     		b	.L59
 1377              	.L58:
 304:.\main.c      ****                 WT_arr_cspot = 0;
 1378              		.loc 1 304 0
 1379 009c FB1D     		add	r3, r7, #7
 1380 009e 0022     		mov	r2, #0
 1381 00a0 1A70     		strb	r2, [r3]
 1382              	.L59:
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1383              		.loc 1 309 0
 1384 00a2 3C1C     		mov	r4, r7
 1385 00a4 0A34     		add	r4, r4, #10
 1386 00a6 3B68     		ldr	r3, [r7]
 1387 00a8 181C     		mov	r0, r3
 1388 00aa 1421     		mov	r1, #20
 1389 00ac FFF7FEFF 		bl	average
 1390 00b0 031C     		mov	r3, r0
 1391 00b2 2380     		strh	r3, [r4]
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1392              		.loc 1 311 0
 1393 00b4 3B1C     		mov	r3, r7
 1394 00b6 0A33     		add	r3, r3, #10
 1395 00b8 1A88     		ldrh	r2, [r3]
 1396 00ba FA23     		mov	r3, #250
 1397 00bc DB00     		lsl	r3, r3, #3
 1398 00be 9A42     		cmp	r2, r3
 1399 00c0 0DD8     		bhi	.L60
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1400              		.loc 1 311 0 is_stmt 0 discriminator 1
 1401 00c2 3B1C     		mov	r3, r7
 1402 00c4 0A33     		add	r3, r3, #10
 1403 00c6 1A88     		ldrh	r2, [r3]
 1404 00c8 264B     		ldr	r3, .L75+12
 1405 00ca 9A42     		cmp	r2, r3
 1406 00cc 07D9     		bls	.L60
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1407              		.loc 1 313 0 is_stmt 1
 1408 00ce 3B1C     		mov	r3, r7
 1409 00d0 0A33     		add	r3, r3, #10
 1410 00d2 1B88     		ldrh	r3, [r3]
 1411 00d4 0220     		mov	r0, #2
 1412 00d6 191C     		mov	r1, r3
 1413 00d8 FFF7FEFF 		bl	ServoGoalPosition
 1414 00dc 04E0     		b	.L61
 1415              	.L60:
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1416              		.loc 1 318 0
 1417 00de 1F4B     		ldr	r3, .L75+4
 1418 00e0 0220     		mov	r0, #2
 1419 00e2 191C     		mov	r1, r3
 1420 00e4 FFF7FEFF 		bl	ServoGoalPosition
 1421              	.L61:
 320:.\main.c      ****             WT_FLAG = 0;
 1422              		.loc 1 320 0
 1423 00e8 1F4B     		ldr	r3, .L75+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 32


 1424 00ea 0022     		mov	r2, #0
 1425 00ec 1A70     		strb	r2, [r3]
 321:.\main.c      ****             break;
 1426              		.loc 1 321 0
 1427 00ee 00E0     		b	.L50
 1428              	.L73:
 281:.\main.c      ****             break;
 1429              		.loc 1 281 0
 1430 00f0 C046     		mov	r8, r8
 1431              	.L50:
 325:.\main.c      ****     }
 326:.\main.c      ****     
 327:.\main.c      ****     switch(wristTilt_state){ //transitions
 1432              		.loc 1 327 0
 1433 00f2 194B     		ldr	r3, .L75
 1434 00f4 1B78     		ldrb	r3, [r3]
 1435 00f6 012B     		cmp	r3, #1
 1436 00f8 0CD0     		beq	.L63
 1437 00fa 02DC     		bgt	.L64
 1438 00fc 002B     		cmp	r3, #0
 1439 00fe 05D0     		beq	.L65
 1440 0100 24E0     		b	.L62
 1441              	.L64:
 1442 0102 022B     		cmp	r3, #2
 1443 0104 0AD0     		beq	.L66
 1444 0106 032B     		cmp	r3, #3
 1445 0108 14D0     		beq	.L67
 1446 010a 1FE0     		b	.L62
 1447              	.L65:
 328:.\main.c      ****         case tilt_start:
 329:.\main.c      ****             wristTilt_state = tilt_init;
 1448              		.loc 1 329 0
 1449 010c 124B     		ldr	r3, .L75
 1450 010e 0122     		mov	r2, #1
 1451 0110 1A70     		strb	r2, [r3]
 330:.\main.c      ****             break;
 1452              		.loc 1 330 0
 1453 0112 1BE0     		b	.L62
 1454              	.L63:
 331:.\main.c      ****         
 332:.\main.c      ****         case tilt_init:
 333:.\main.c      ****             wristTilt_state = tilt_wait;
 1455              		.loc 1 333 0
 1456 0114 104B     		ldr	r3, .L75
 1457 0116 0322     		mov	r2, #3
 1458 0118 1A70     		strb	r2, [r3]
 334:.\main.c      ****             break;
 1459              		.loc 1 334 0
 1460 011a 17E0     		b	.L62
 1461              	.L66:
 335:.\main.c      ****         
 336:.\main.c      ****         case tilt_control:
 337:.\main.c      ****             if(WT_FLAG)
 1462              		.loc 1 337 0
 1463 011c 124B     		ldr	r3, .L75+16
 1464 011e 1B78     		ldrb	r3, [r3]
 1465 0120 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 33


 1466 0122 03D0     		beq	.L68
 338:.\main.c      ****             {
 339:.\main.c      ****                 wristTilt_state = tilt_control;
 1467              		.loc 1 339 0
 1468 0124 0C4B     		ldr	r3, .L75
 1469 0126 0222     		mov	r2, #2
 1470 0128 1A70     		strb	r2, [r3]
 340:.\main.c      ****             }
 341:.\main.c      ****             else
 342:.\main.c      ****             {
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 344:.\main.c      ****             }
 345:.\main.c      ****             break;
 1471              		.loc 1 345 0
 1472 012a 0FE0     		b	.L62
 1473              	.L68:
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 1474              		.loc 1 343 0
 1475 012c 0A4B     		ldr	r3, .L75
 1476 012e 0322     		mov	r2, #3
 1477 0130 1A70     		strb	r2, [r3]
 1478              		.loc 1 345 0
 1479 0132 0BE0     		b	.L62
 1480              	.L67:
 346:.\main.c      ****         
 347:.\main.c      ****         case tilt_wait:
 348:.\main.c      ****             if(WT_FLAG)
 1481              		.loc 1 348 0
 1482 0134 0C4B     		ldr	r3, .L75+16
 1483 0136 1B78     		ldrb	r3, [r3]
 1484 0138 002B     		cmp	r3, #0
 1485 013a 03D0     		beq	.L70
 349:.\main.c      ****             {
 350:.\main.c      ****                 wristTilt_state = tilt_control;
 1486              		.loc 1 350 0
 1487 013c 064B     		ldr	r3, .L75
 1488 013e 0222     		mov	r2, #2
 1489 0140 1A70     		strb	r2, [r3]
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 wristTilt_state = tilt_wait; 
 355:.\main.c      ****             }
 356:.\main.c      ****             break;
 1490              		.loc 1 356 0
 1491 0142 02E0     		b	.L74
 1492              	.L70:
 354:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1493              		.loc 1 354 0
 1494 0144 044B     		ldr	r3, .L75
 1495 0146 0322     		mov	r2, #3
 1496 0148 1A70     		strb	r2, [r3]
 1497              	.L74:
 1498              		.loc 1 356 0
 1499 014a C046     		mov	r8, r8
 1500              	.L62:
 357:.\main.c      ****     }  
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 34


 358:.\main.c      ****     return WT_arr_cspot;
 1501              		.loc 1 358 0
 1502 014c FB1D     		add	r3, r7, #7
 1503 014e 1B78     		ldrb	r3, [r3]
 359:.\main.c      **** }
 1504              		.loc 1 359 0
 1505 0150 181C     		mov	r0, r3
 1506 0152 BD46     		mov	sp, r7
 1507 0154 05B0     		add	sp, sp, #20
 1508              		@ sp needed
 1509 0156 90BD     		pop	{r4, r7, pc}
 1510              	.L76:
 1511              		.align	2
 1512              	.L75:
 1513 0158 00000000 		.word	wristTilt_state
 1514 015c DC050000 		.word	1500
 1515 0160 00000000 		.word	data_array
 1516 0164 E7030000 		.word	999
 1517 0168 00000000 		.word	WT_FLAG
 1518              		.cfi_endproc
 1519              	.LFE46:
 1520              		.size	wristTilt, .-wristTilt
 1521              		.comm	wristRotate_state,1,1
 1522              		.section	.text.wristRotate,"ax",%progbits
 1523              		.align	2
 1524              		.global	wristRotate
 1525              		.code	16
 1526              		.thumb_func
 1527              		.type	wristRotate, %function
 1528              	wristRotate:
 1529              	.LFB47:
 360:.\main.c      **** 
 361:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 362:.\main.c      **** //control the rotating motion of the wrist
 363:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 364:.\main.c      **** {
 1530              		.loc 1 364 0
 1531              		.cfi_startproc
 1532 0000 90B5     		push	{r4, r7, lr}
 1533              		.cfi_def_cfa_offset 12
 1534              		.cfi_offset 4, -12
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 1537 0002 85B0     		sub	sp, sp, #20
 1538              		.cfi_def_cfa_offset 32
 1539 0004 00AF     		add	r7, sp, #0
 1540              		.cfi_def_cfa_register 7
 1541 0006 021C     		mov	r2, r0
 1542 0008 3960     		str	r1, [r7]
 1543 000a FB1D     		add	r3, r7, #7
 1544 000c 1A70     		strb	r2, [r3]
 365:.\main.c      ****     //Overview
 366:.\main.c      ****     //take instruction from data_array
 367:.\main.c      ****     //smooth input
 368:.\main.c      ****     //actuate the tilting using UART
 369:.\main.c      ****     //get feedback
 370:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 35


 371:.\main.c      ****     //-------------------------- 
 372:.\main.c      ****     // Dynamixel Servo specific
 373:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 374:.\main.c      ****     // TODO: Set the desired position
 375:.\main.c      **** 
 376:.\main.c      ****     //--------------------------
 377:.\main.c      ****     // State machine
 378:.\main.c      ****     
 379:.\main.c      ****     uint8 i;
 380:.\main.c      ****     uint16 avg;
 381:.\main.c      ****     uint16 command;
 382:.\main.c      ****     
 383:.\main.c      ****     switch(wristRotate_state){ //actions
 1545              		.loc 1 383 0
 1546 000e 524B     		ldr	r3, .L103
 1547 0010 1B78     		ldrb	r3, [r3]
 1548 0012 012B     		cmp	r3, #1
 1549 0014 03D0     		beq	.L79
 1550 0016 6BDD     		ble	.L101
 1551 0018 022B     		cmp	r3, #2
 1552 001a 22D0     		beq	.L82
 384:.\main.c      ****         case rotate_start:
 385:.\main.c      ****             break;
 386:.\main.c      **** 
 387:.\main.c      ****         case rotate_init:
 388:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 389:.\main.c      ****             {
 390:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 391:.\main.c      ****             }
 392:.\main.c      ****             WR_arr_cspot = 0;
 393:.\main.c      ****             
 394:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 395:.\main.c      ****             break;
 396:.\main.c      **** 
 397:.\main.c      ****         case rotate_control:
 398:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 399:.\main.c      ****             
 400:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 401:.\main.c      ****             
 402:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 403:.\main.c      ****             {
 404:.\main.c      ****                 WR_arr_cspot++;
 405:.\main.c      ****             }
 406:.\main.c      ****             else
 407:.\main.c      ****             {
 408:.\main.c      ****                 WR_arr_cspot = 0;
 409:.\main.c      ****             }
 410:.\main.c      ****             
 411:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 412:.\main.c      ****             
 413:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 414:.\main.c      ****             
 415:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 416:.\main.c      ****             {
 417:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 418:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 419:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 36


 420:.\main.c      ****             else
 421:.\main.c      ****             {
 422:.\main.c      ****                 //throw error
 423:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 424:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 425:.\main.c      ****             }
 426:.\main.c      ****             WR_FLAG = 0;
 427:.\main.c      ****             break;
 428:.\main.c      ****             
 429:.\main.c      ****         case rotate_wait:
 430:.\main.c      ****             break;
 1553              		.loc 1 430 0
 1554 001c 69E0     		b	.L78
 1555              	.L79:
 388:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1556              		.loc 1 388 0
 1557 001e 3B1C     		mov	r3, r7
 1558 0020 0F33     		add	r3, r3, #15
 1559 0022 0022     		mov	r2, #0
 1560 0024 1A70     		strb	r2, [r3]
 1561 0026 0EE0     		b	.L84
 1562              	.L85:
 390:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 1563              		.loc 1 390 0 discriminator 2
 1564 0028 3B1C     		mov	r3, r7
 1565 002a 0F33     		add	r3, r3, #15
 1566 002c 1B78     		ldrb	r3, [r3]
 1567 002e 5B00     		lsl	r3, r3, #1
 1568 0030 3A68     		ldr	r2, [r7]
 1569 0032 D318     		add	r3, r2, r3
 1570 0034 494A     		ldr	r2, .L103+4
 1571 0036 1A80     		strh	r2, [r3]
 388:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1572              		.loc 1 388 0 discriminator 2
 1573 0038 3B1C     		mov	r3, r7
 1574 003a 0F33     		add	r3, r3, #15
 1575 003c 1A78     		ldrb	r2, [r3]
 1576 003e 3B1C     		mov	r3, r7
 1577 0040 0F33     		add	r3, r3, #15
 1578 0042 0132     		add	r2, r2, #1
 1579 0044 1A70     		strb	r2, [r3]
 1580              	.L84:
 388:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1581              		.loc 1 388 0 is_stmt 0 discriminator 1
 1582 0046 3B1C     		mov	r3, r7
 1583 0048 0F33     		add	r3, r3, #15
 1584 004a 1B78     		ldrb	r3, [r3]
 1585 004c 132B     		cmp	r3, #19
 1586 004e EBD9     		bls	.L85
 392:.\main.c      ****             WR_arr_cspot = 0;
 1587              		.loc 1 392 0 is_stmt 1
 1588 0050 FB1D     		add	r3, r7, #7
 1589 0052 0022     		mov	r2, #0
 1590 0054 1A70     		strb	r2, [r3]
 394:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 1591              		.loc 1 394 0
 1592 0056 414B     		ldr	r3, .L103+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 37


 1593 0058 0120     		mov	r0, #1
 1594 005a 191C     		mov	r1, r3
 1595 005c FFF7FEFF 		bl	ServoGoalPosition
 395:.\main.c      ****             break;
 1596              		.loc 1 395 0
 1597 0060 47E0     		b	.L78
 1598              	.L82:
 398:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1599              		.loc 1 398 0
 1600 0062 3C1C     		mov	r4, r7
 1601 0064 0C34     		add	r4, r4, #12
 1602 0066 3E4B     		ldr	r3, .L103+8
 1603 0068 181C     		mov	r0, r3
 1604 006a 1221     		mov	r1, #18
 1605 006c 1322     		mov	r2, #19
 1606 006e FFF7FEFF 		bl	make_command
 1607 0072 031C     		mov	r3, r0
 1608 0074 2380     		strh	r3, [r4]
 400:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 1609              		.loc 1 400 0
 1610 0076 FB1D     		add	r3, r7, #7
 1611 0078 1B78     		ldrb	r3, [r3]
 1612 007a 5B00     		lsl	r3, r3, #1
 1613 007c 3A68     		ldr	r2, [r7]
 1614 007e D318     		add	r3, r2, r3
 1615 0080 3A1C     		mov	r2, r7
 1616 0082 0C32     		add	r2, r2, #12
 1617 0084 1288     		ldrh	r2, [r2]
 1618 0086 1A80     		strh	r2, [r3]
 402:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1619              		.loc 1 402 0
 1620 0088 FB1D     		add	r3, r7, #7
 1621 008a 1B78     		ldrb	r3, [r3]
 1622 008c 122B     		cmp	r3, #18
 1623 008e 05D8     		bhi	.L86
 404:.\main.c      ****                 WR_arr_cspot++;
 1624              		.loc 1 404 0
 1625 0090 FB1D     		add	r3, r7, #7
 1626 0092 1A78     		ldrb	r2, [r3]
 1627 0094 FB1D     		add	r3, r7, #7
 1628 0096 0132     		add	r2, r2, #1
 1629 0098 1A70     		strb	r2, [r3]
 1630 009a 02E0     		b	.L87
 1631              	.L86:
 408:.\main.c      ****                 WR_arr_cspot = 0;
 1632              		.loc 1 408 0
 1633 009c FB1D     		add	r3, r7, #7
 1634 009e 0022     		mov	r2, #0
 1635 00a0 1A70     		strb	r2, [r3]
 1636              	.L87:
 413:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1637              		.loc 1 413 0
 1638 00a2 3C1C     		mov	r4, r7
 1639 00a4 0A34     		add	r4, r4, #10
 1640 00a6 3B68     		ldr	r3, [r7]
 1641 00a8 181C     		mov	r0, r3
 1642 00aa 1421     		mov	r1, #20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 38


 1643 00ac FFF7FEFF 		bl	average
 1644 00b0 031C     		mov	r3, r0
 1645 00b2 2380     		strh	r3, [r4]
 415:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1646              		.loc 1 415 0
 1647 00b4 3B1C     		mov	r3, r7
 1648 00b6 0A33     		add	r3, r3, #10
 1649 00b8 1A88     		ldrh	r2, [r3]
 1650 00ba FA23     		mov	r3, #250
 1651 00bc DB00     		lsl	r3, r3, #3
 1652 00be 9A42     		cmp	r2, r3
 1653 00c0 0DD8     		bhi	.L88
 415:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1654              		.loc 1 415 0 is_stmt 0 discriminator 1
 1655 00c2 3B1C     		mov	r3, r7
 1656 00c4 0A33     		add	r3, r3, #10
 1657 00c6 1A88     		ldrh	r2, [r3]
 1658 00c8 264B     		ldr	r3, .L103+12
 1659 00ca 9A42     		cmp	r2, r3
 1660 00cc 07D9     		bls	.L88
 418:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1661              		.loc 1 418 0 is_stmt 1
 1662 00ce 3B1C     		mov	r3, r7
 1663 00d0 0A33     		add	r3, r3, #10
 1664 00d2 1B88     		ldrh	r3, [r3]
 1665 00d4 0120     		mov	r0, #1
 1666 00d6 191C     		mov	r1, r3
 1667 00d8 FFF7FEFF 		bl	ServoGoalPosition
 1668 00dc 04E0     		b	.L89
 1669              	.L88:
 424:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1670              		.loc 1 424 0
 1671 00de 1F4B     		ldr	r3, .L103+4
 1672 00e0 0120     		mov	r0, #1
 1673 00e2 191C     		mov	r1, r3
 1674 00e4 FFF7FEFF 		bl	ServoGoalPosition
 1675              	.L89:
 426:.\main.c      ****             WR_FLAG = 0;
 1676              		.loc 1 426 0
 1677 00e8 1F4B     		ldr	r3, .L103+16
 1678 00ea 0022     		mov	r2, #0
 1679 00ec 1A70     		strb	r2, [r3]
 427:.\main.c      ****             break;
 1680              		.loc 1 427 0
 1681 00ee 00E0     		b	.L78
 1682              	.L101:
 385:.\main.c      ****             break;
 1683              		.loc 1 385 0
 1684 00f0 C046     		mov	r8, r8
 1685              	.L78:
 431:.\main.c      ****     }
 432:.\main.c      ****     
 433:.\main.c      ****     switch(wristRotate_state){ //transitions
 1686              		.loc 1 433 0
 1687 00f2 194B     		ldr	r3, .L103
 1688 00f4 1B78     		ldrb	r3, [r3]
 1689 00f6 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 39


 1690 00f8 0CD0     		beq	.L91
 1691 00fa 02DC     		bgt	.L92
 1692 00fc 002B     		cmp	r3, #0
 1693 00fe 05D0     		beq	.L93
 1694 0100 24E0     		b	.L90
 1695              	.L92:
 1696 0102 022B     		cmp	r3, #2
 1697 0104 0AD0     		beq	.L94
 1698 0106 032B     		cmp	r3, #3
 1699 0108 14D0     		beq	.L95
 1700 010a 1FE0     		b	.L90
 1701              	.L93:
 434:.\main.c      ****         case rotate_start:
 435:.\main.c      ****             wristRotate_state = rotate_init;
 1702              		.loc 1 435 0
 1703 010c 124B     		ldr	r3, .L103
 1704 010e 0122     		mov	r2, #1
 1705 0110 1A70     		strb	r2, [r3]
 436:.\main.c      ****             break;
 1706              		.loc 1 436 0
 1707 0112 1BE0     		b	.L90
 1708              	.L91:
 437:.\main.c      ****         
 438:.\main.c      ****         case rotate_init:
 439:.\main.c      ****             wristRotate_state = rotate_wait;
 1709              		.loc 1 439 0
 1710 0114 104B     		ldr	r3, .L103
 1711 0116 0322     		mov	r2, #3
 1712 0118 1A70     		strb	r2, [r3]
 440:.\main.c      ****             break;
 1713              		.loc 1 440 0
 1714 011a 17E0     		b	.L90
 1715              	.L94:
 441:.\main.c      ****         
 442:.\main.c      ****         case rotate_control:
 443:.\main.c      ****             if(WR_FLAG)
 1716              		.loc 1 443 0
 1717 011c 124B     		ldr	r3, .L103+16
 1718 011e 1B78     		ldrb	r3, [r3]
 1719 0120 002B     		cmp	r3, #0
 1720 0122 03D0     		beq	.L96
 444:.\main.c      ****             {
 445:.\main.c      ****                 wristRotate_state = rotate_control;
 1721              		.loc 1 445 0
 1722 0124 0C4B     		ldr	r3, .L103
 1723 0126 0222     		mov	r2, #2
 1724 0128 1A70     		strb	r2, [r3]
 446:.\main.c      ****             }
 447:.\main.c      ****             else
 448:.\main.c      ****             {
 449:.\main.c      ****                 wristRotate_state = rotate_wait;
 450:.\main.c      ****             }
 451:.\main.c      ****             break;
 1725              		.loc 1 451 0
 1726 012a 0FE0     		b	.L90
 1727              	.L96:
 449:.\main.c      ****                 wristRotate_state = rotate_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 40


 1728              		.loc 1 449 0
 1729 012c 0A4B     		ldr	r3, .L103
 1730 012e 0322     		mov	r2, #3
 1731 0130 1A70     		strb	r2, [r3]
 1732              		.loc 1 451 0
 1733 0132 0BE0     		b	.L90
 1734              	.L95:
 452:.\main.c      ****         
 453:.\main.c      ****         case rotate_wait:
 454:.\main.c      ****             if(WR_FLAG)
 1735              		.loc 1 454 0
 1736 0134 0C4B     		ldr	r3, .L103+16
 1737 0136 1B78     		ldrb	r3, [r3]
 1738 0138 002B     		cmp	r3, #0
 1739 013a 03D0     		beq	.L98
 455:.\main.c      ****             {
 456:.\main.c      ****                 wristRotate_state = rotate_control;
 1740              		.loc 1 456 0
 1741 013c 064B     		ldr	r3, .L103
 1742 013e 0222     		mov	r2, #2
 1743 0140 1A70     		strb	r2, [r3]
 457:.\main.c      ****             }
 458:.\main.c      ****             else
 459:.\main.c      ****             {
 460:.\main.c      ****                 wristRotate_state = rotate_wait;
 461:.\main.c      ****             }
 462:.\main.c      ****             break;
 1744              		.loc 1 462 0
 1745 0142 02E0     		b	.L102
 1746              	.L98:
 460:.\main.c      ****                 wristRotate_state = rotate_wait;
 1747              		.loc 1 460 0
 1748 0144 044B     		ldr	r3, .L103
 1749 0146 0322     		mov	r2, #3
 1750 0148 1A70     		strb	r2, [r3]
 1751              	.L102:
 1752              		.loc 1 462 0
 1753 014a C046     		mov	r8, r8
 1754              	.L90:
 463:.\main.c      ****     }  
 464:.\main.c      ****     return WR_arr_cspot;
 1755              		.loc 1 464 0
 1756 014c FB1D     		add	r3, r7, #7
 1757 014e 1B78     		ldrb	r3, [r3]
 465:.\main.c      **** }
 1758              		.loc 1 465 0
 1759 0150 181C     		mov	r0, r3
 1760 0152 BD46     		mov	sp, r7
 1761 0154 05B0     		add	sp, sp, #20
 1762              		@ sp needed
 1763 0156 90BD     		pop	{r4, r7, pc}
 1764              	.L104:
 1765              		.align	2
 1766              	.L103:
 1767 0158 00000000 		.word	wristRotate_state
 1768 015c DC050000 		.word	1500
 1769 0160 00000000 		.word	data_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 41


 1770 0164 E7030000 		.word	999
 1771 0168 00000000 		.word	WR_FLAG
 1772              		.cfi_endproc
 1773              	.LFE47:
 1774              		.size	wristRotate, .-wristRotate
 1775              		.comm	elbow_state,1,1
 1776              		.section	.text.elbow,"ax",%progbits
 1777              		.align	2
 1778              		.global	elbow
 1779              		.code	16
 1780              		.thumb_func
 1781              		.type	elbow, %function
 1782              	elbow:
 1783              	.LFB48:
 466:.\main.c      **** 
 467:.\main.c      **** //control the elbow
 468:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 469:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 470:.\main.c      **** { 
 1784              		.loc 1 470 0
 1785              		.cfi_startproc
 1786 0000 90B5     		push	{r4, r7, lr}
 1787              		.cfi_def_cfa_offset 12
 1788              		.cfi_offset 4, -12
 1789              		.cfi_offset 7, -8
 1790              		.cfi_offset 14, -4
 1791 0002 85B0     		sub	sp, sp, #20
 1792              		.cfi_def_cfa_offset 32
 1793 0004 00AF     		add	r7, sp, #0
 1794              		.cfi_def_cfa_register 7
 1795 0006 021C     		mov	r2, r0
 1796 0008 3960     		str	r1, [r7]
 1797 000a FB1D     		add	r3, r7, #7
 1798 000c 1A70     		strb	r2, [r3]
 471:.\main.c      ****     //take instruction from data_array
 472:.\main.c      ****     //smooth input
 473:.\main.c      ****     //actuate the elbow using PWM
 474:.\main.c      ****     //get feedback
 475:.\main.c      ****     uint8 i;
 476:.\main.c      ****     uint16 avg;
 477:.\main.c      ****     uint16 command;
 478:.\main.c      ****     
 479:.\main.c      ****     //TODO: make sure reading from correct pots
 480:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 1799              		.loc 1 480 0
 1800 000e 3C1C     		mov	r4, r7
 1801 0010 0C34     		add	r4, r4, #12
 1802 0012 0120     		mov	r0, #1
 1803 0014 FFF7FEFF 		bl	potFeedback
 1804 0018 031C     		mov	r3, r0
 1805 001a 2380     		strh	r3, [r4]
 481:.\main.c      ****     
 482:.\main.c      ****     switch(elbow_state){ //actions
 1806              		.loc 1 482 0
 1807 001c 844B     		ldr	r3, .L141
 1808 001e 1B78     		ldrb	r3, [r3]
 1809 0020 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 42


 1810 0022 07D0     		beq	.L107
 1811 0024 00DC     		bgt	.LCB1588
 1812 0026 CFE0     		b	.L139	@long jump
 1813              	.LCB1588:
 1814 0028 022B     		cmp	r3, #2
 1815 002a 24D0     		beq	.L110
 1816 002c 032B     		cmp	r3, #3
 1817 002e 00D1     		bne	.LCB1592
 1818 0030 B9E0     		b	.L111	@long jump
 1819              	.LCB1592:
 1820 0032 CAE0     		b	.L106
 1821              	.L107:
 483:.\main.c      ****         case elbw_start:
 484:.\main.c      ****             break;
 485:.\main.c      **** 
 486:.\main.c      ****         case elbw_init:
 487:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1822              		.loc 1 487 0
 1823 0034 3B1C     		mov	r3, r7
 1824 0036 0F33     		add	r3, r3, #15
 1825 0038 0022     		mov	r2, #0
 1826 003a 1A70     		strb	r2, [r3]
 1827 003c 0EE0     		b	.L112
 1828              	.L113:
 488:.\main.c      ****             {
 489:.\main.c      ****                 elbow_array[i] = 1500;
 1829              		.loc 1 489 0 discriminator 2
 1830 003e 3B1C     		mov	r3, r7
 1831 0040 0F33     		add	r3, r3, #15
 1832 0042 1B78     		ldrb	r3, [r3]
 1833 0044 5B00     		lsl	r3, r3, #1
 1834 0046 3A68     		ldr	r2, [r7]
 1835 0048 D318     		add	r3, r2, r3
 1836 004a 7A4A     		ldr	r2, .L141+4
 1837 004c 1A80     		strh	r2, [r3]
 487:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1838              		.loc 1 487 0 discriminator 2
 1839 004e 3B1C     		mov	r3, r7
 1840 0050 0F33     		add	r3, r3, #15
 1841 0052 1A78     		ldrb	r2, [r3]
 1842 0054 3B1C     		mov	r3, r7
 1843 0056 0F33     		add	r3, r3, #15
 1844 0058 0132     		add	r2, r2, #1
 1845 005a 1A70     		strb	r2, [r3]
 1846              	.L112:
 487:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1847              		.loc 1 487 0 is_stmt 0 discriminator 1
 1848 005c 3B1C     		mov	r3, r7
 1849 005e 0F33     		add	r3, r3, #15
 1850 0060 1B78     		ldrb	r3, [r3]
 1851 0062 132B     		cmp	r3, #19
 1852 0064 EBD9     		bls	.L113
 490:.\main.c      ****             }
 491:.\main.c      ****             elbw_arr_cspot = 0;
 1853              		.loc 1 491 0 is_stmt 1
 1854 0066 FB1D     		add	r3, r7, #7
 1855 0068 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 43


 1856 006a 1A70     		strb	r2, [r3]
 492:.\main.c      ****             
 493:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 1857              		.loc 1 493 0
 1858 006c 714B     		ldr	r3, .L141+4
 1859 006e 181C     		mov	r0, r3
 1860 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 494:.\main.c      ****             break;
 1861              		.loc 1 494 0
 1862 0074 A9E0     		b	.L106
 1863              	.L110:
 495:.\main.c      **** 
 496:.\main.c      ****         case elbw_execute:
 497:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 1864              		.loc 1 497 0
 1865 0076 3C1C     		mov	r4, r7
 1866 0078 0A34     		add	r4, r4, #10
 1867 007a 6F4B     		ldr	r3, .L141+8
 1868 007c 181C     		mov	r0, r3
 1869 007e 0E21     		mov	r1, #14
 1870 0080 0F22     		mov	r2, #15
 1871 0082 FFF7FEFF 		bl	make_command
 1872 0086 031C     		mov	r3, r0
 1873 0088 2380     		strh	r3, [r4]
 498:.\main.c      ****             
 499:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 1874              		.loc 1 499 0
 1875 008a FB1D     		add	r3, r7, #7
 1876 008c 1B78     		ldrb	r3, [r3]
 1877 008e 5B00     		lsl	r3, r3, #1
 1878 0090 3A68     		ldr	r2, [r7]
 1879 0092 D318     		add	r3, r2, r3
 1880 0094 3A1C     		mov	r2, r7
 1881 0096 0A32     		add	r2, r2, #10
 1882 0098 1288     		ldrh	r2, [r2]
 1883 009a 1A80     		strh	r2, [r3]
 500:.\main.c      ****             
 501:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 1884              		.loc 1 501 0
 1885 009c FB1D     		add	r3, r7, #7
 1886 009e 1B78     		ldrb	r3, [r3]
 1887 00a0 122B     		cmp	r3, #18
 1888 00a2 05D8     		bhi	.L114
 502:.\main.c      ****             {
 503:.\main.c      ****                 elbw_arr_cspot++;
 1889              		.loc 1 503 0
 1890 00a4 FB1D     		add	r3, r7, #7
 1891 00a6 1A78     		ldrb	r2, [r3]
 1892 00a8 FB1D     		add	r3, r7, #7
 1893 00aa 0132     		add	r2, r2, #1
 1894 00ac 1A70     		strb	r2, [r3]
 1895 00ae 02E0     		b	.L115
 1896              	.L114:
 504:.\main.c      ****             }
 505:.\main.c      ****             else
 506:.\main.c      ****             {
 507:.\main.c      ****                 elbw_arr_cspot = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 44


 1897              		.loc 1 507 0
 1898 00b0 FB1D     		add	r3, r7, #7
 1899 00b2 0022     		mov	r2, #0
 1900 00b4 1A70     		strb	r2, [r3]
 1901              	.L115:
 508:.\main.c      ****             }
 509:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 1902              		.loc 1 509 0
 1903 00b6 3C1C     		mov	r4, r7
 1904 00b8 0834     		add	r4, r4, #8
 1905 00ba 3B68     		ldr	r3, [r7]
 1906 00bc 181C     		mov	r0, r3
 1907 00be 1421     		mov	r1, #20
 1908 00c0 FFF7FEFF 		bl	average
 1909 00c4 031C     		mov	r3, r0
 1910 00c6 2380     		strh	r3, [r4]
 510:.\main.c      ****             
 511:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 1911              		.loc 1 511 0
 1912 00c8 3B1C     		mov	r3, r7
 1913 00ca 0C33     		add	r3, r3, #12
 1914 00cc 1B88     		ldrh	r3, [r3]
 1915 00ce 642B     		cmp	r3, #100
 1916 00d0 23D8     		bhi	.L116
 512:.\main.c      ****             {
 513:.\main.c      ****                 if (avg < 1500)
 1917              		.loc 1 513 0
 1918 00d2 3B1C     		mov	r3, r7
 1919 00d4 0833     		add	r3, r3, #8
 1920 00d6 1A88     		ldrh	r2, [r3]
 1921 00d8 584B     		ldr	r3, .L141+12
 1922 00da 9A42     		cmp	r2, r3
 1923 00dc 04D8     		bhi	.L117
 514:.\main.c      ****                 {
 515:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1924              		.loc 1 515 0
 1925 00de 554B     		ldr	r3, .L141+4
 1926 00e0 181C     		mov	r0, r3
 1927 00e2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1928 00e6 5AE0     		b	.L120
 1929              	.L117:
 516:.\main.c      ****                 }
 517:.\main.c      ****                 else
 518:.\main.c      ****                 {
 519:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1930              		.loc 1 519 0
 1931 00e8 3B1C     		mov	r3, r7
 1932 00ea 0833     		add	r3, r3, #8
 1933 00ec 1A88     		ldrh	r2, [r3]
 1934 00ee FA23     		mov	r3, #250
 1935 00f0 DB00     		lsl	r3, r3, #3
 1936 00f2 9A42     		cmp	r2, r3
 1937 00f4 0CD8     		bhi	.L119
 1938              		.loc 1 519 0 is_stmt 0 discriminator 1
 1939 00f6 3B1C     		mov	r3, r7
 1940 00f8 0833     		add	r3, r3, #8
 1941 00fa 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 45


 1942 00fc 504B     		ldr	r3, .L141+16
 1943 00fe 9A42     		cmp	r2, r3
 1944 0100 06D9     		bls	.L119
 520:.\main.c      ****                     {
 521:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1945              		.loc 1 521 0 is_stmt 1
 1946 0102 3B1C     		mov	r3, r7
 1947 0104 0833     		add	r3, r3, #8
 1948 0106 1B88     		ldrh	r3, [r3]
 1949 0108 181C     		mov	r0, r3
 1950 010a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1951 010e 46E0     		b	.L120
 1952              	.L119:
 522:.\main.c      ****                     }
 523:.\main.c      ****                     else
 524:.\main.c      ****                     {
 525:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1953              		.loc 1 525 0
 1954 0110 484B     		ldr	r3, .L141+4
 1955 0112 181C     		mov	r0, r3
 1956 0114 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1957 0118 41E0     		b	.L120
 1958              	.L116:
 526:.\main.c      ****                     }
 527:.\main.c      ****                 }
 528:.\main.c      ****             }
 529:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 1959              		.loc 1 529 0
 1960 011a 3B1C     		mov	r3, r7
 1961 011c 0C33     		add	r3, r3, #12
 1962 011e 1A88     		ldrh	r2, [r3]
 1963 0120 474B     		ldr	r3, .L141+16
 1964 0122 9A42     		cmp	r2, r3
 1965 0124 23D9     		bls	.L121
 530:.\main.c      ****             {
 531:.\main.c      ****                 if(avg > 1500)
 1966              		.loc 1 531 0
 1967 0126 3B1C     		mov	r3, r7
 1968 0128 0833     		add	r3, r3, #8
 1969 012a 1A88     		ldrh	r2, [r3]
 1970 012c 414B     		ldr	r3, .L141+4
 1971 012e 9A42     		cmp	r2, r3
 1972 0130 04D9     		bls	.L122
 532:.\main.c      ****                 {
 533:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1973              		.loc 1 533 0
 1974 0132 404B     		ldr	r3, .L141+4
 1975 0134 181C     		mov	r0, r3
 1976 0136 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1977 013a 30E0     		b	.L120
 1978              	.L122:
 534:.\main.c      ****                 }
 535:.\main.c      ****                 else
 536:.\main.c      ****                 {
 537:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1979              		.loc 1 537 0
 1980 013c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 46


 1981 013e 0833     		add	r3, r3, #8
 1982 0140 1A88     		ldrh	r2, [r3]
 1983 0142 FA23     		mov	r3, #250
 1984 0144 DB00     		lsl	r3, r3, #3
 1985 0146 9A42     		cmp	r2, r3
 1986 0148 0CD8     		bhi	.L124
 1987              		.loc 1 537 0 is_stmt 0 discriminator 1
 1988 014a 3B1C     		mov	r3, r7
 1989 014c 0833     		add	r3, r3, #8
 1990 014e 1A88     		ldrh	r2, [r3]
 1991 0150 3B4B     		ldr	r3, .L141+16
 1992 0152 9A42     		cmp	r2, r3
 1993 0154 06D9     		bls	.L124
 538:.\main.c      ****                     {
 539:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1994              		.loc 1 539 0 is_stmt 1
 1995 0156 3B1C     		mov	r3, r7
 1996 0158 0833     		add	r3, r3, #8
 1997 015a 1B88     		ldrh	r3, [r3]
 1998 015c 181C     		mov	r0, r3
 1999 015e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2000 0162 1CE0     		b	.L120
 2001              	.L124:
 540:.\main.c      ****                     }
 541:.\main.c      ****                     else
 542:.\main.c      ****                     {
 543:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2002              		.loc 1 543 0
 2003 0164 334B     		ldr	r3, .L141+4
 2004 0166 181C     		mov	r0, r3
 2005 0168 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2006 016c 17E0     		b	.L120
 2007              	.L121:
 544:.\main.c      ****                     }
 545:.\main.c      ****                 }
 546:.\main.c      ****             }
 547:.\main.c      ****             else
 548:.\main.c      ****             {
 549:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2008              		.loc 1 549 0
 2009 016e 3B1C     		mov	r3, r7
 2010 0170 0833     		add	r3, r3, #8
 2011 0172 1A88     		ldrh	r2, [r3]
 2012 0174 FA23     		mov	r3, #250
 2013 0176 DB00     		lsl	r3, r3, #3
 2014 0178 9A42     		cmp	r2, r3
 2015 017a 0CD8     		bhi	.L125
 2016              		.loc 1 549 0 is_stmt 0 discriminator 1
 2017 017c 3B1C     		mov	r3, r7
 2018 017e 0833     		add	r3, r3, #8
 2019 0180 1A88     		ldrh	r2, [r3]
 2020 0182 2F4B     		ldr	r3, .L141+16
 2021 0184 9A42     		cmp	r2, r3
 2022 0186 06D9     		bls	.L125
 550:.\main.c      ****                 {
 551:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 2023              		.loc 1 551 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 47


 2024 0188 3B1C     		mov	r3, r7
 2025 018a 0833     		add	r3, r3, #8
 2026 018c 1B88     		ldrh	r3, [r3]
 2027 018e 181C     		mov	r0, r3
 2028 0190 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2029 0194 03E0     		b	.L120
 2030              	.L125:
 552:.\main.c      ****                 }
 553:.\main.c      ****                 else
 554:.\main.c      ****                 {
 555:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2031              		.loc 1 555 0
 2032 0196 274B     		ldr	r3, .L141+4
 2033 0198 181C     		mov	r0, r3
 2034 019a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2035              	.L120:
 556:.\main.c      ****                 }
 557:.\main.c      ****             }
 558:.\main.c      ****             
 559:.\main.c      ****             ELBOW_FLAG = 0;
 2036              		.loc 1 559 0
 2037 019e 294B     		ldr	r3, .L141+20
 2038 01a0 0022     		mov	r2, #0
 2039 01a2 1A70     		strb	r2, [r3]
 560:.\main.c      ****             break;
 2040              		.loc 1 560 0
 2041 01a4 11E0     		b	.L106
 2042              	.L111:
 561:.\main.c      ****             
 562:.\main.c      ****         case elbw_wait:
 563:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2043              		.loc 1 563 0
 2044 01a6 3B1C     		mov	r3, r7
 2045 01a8 0C33     		add	r3, r3, #12
 2046 01aa 1B88     		ldrh	r3, [r3]
 2047 01ac 642B     		cmp	r3, #100
 2048 01ae 05D9     		bls	.L126
 2049              		.loc 1 563 0 is_stmt 0 discriminator 1
 2050 01b0 3B1C     		mov	r3, r7
 2051 01b2 0C33     		add	r3, r3, #12
 2052 01b4 1A88     		ldrh	r2, [r3]
 2053 01b6 224B     		ldr	r3, .L141+16
 2054 01b8 9A42     		cmp	r2, r3
 2055 01ba 04D9     		bls	.L127
 2056              	.L126:
 564:.\main.c      ****             {
 565:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2057              		.loc 1 565 0 is_stmt 1
 2058 01bc 1D4B     		ldr	r3, .L141+4
 2059 01be 181C     		mov	r0, r3
 2060 01c0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 566:.\main.c      ****             }
 567:.\main.c      ****             break;
 2061              		.loc 1 567 0
 2062 01c4 01E0     		b	.L106
 2063              	.L127:
 2064 01c6 00E0     		b	.L106
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 48


 2065              	.L139:
 484:.\main.c      ****             break;
 2066              		.loc 1 484 0
 2067 01c8 C046     		mov	r8, r8
 2068              	.L106:
 568:.\main.c      ****     }
 569:.\main.c      ****     
 570:.\main.c      ****     switch(elbow_state){ //transitions
 2069              		.loc 1 570 0
 2070 01ca 194B     		ldr	r3, .L141
 2071 01cc 1B78     		ldrb	r3, [r3]
 2072 01ce 012B     		cmp	r3, #1
 2073 01d0 0CD0     		beq	.L129
 2074 01d2 02DC     		bgt	.L130
 2075 01d4 002B     		cmp	r3, #0
 2076 01d6 05D0     		beq	.L131
 2077 01d8 24E0     		b	.L128
 2078              	.L130:
 2079 01da 022B     		cmp	r3, #2
 2080 01dc 0AD0     		beq	.L132
 2081 01de 032B     		cmp	r3, #3
 2082 01e0 14D0     		beq	.L133
 2083 01e2 1FE0     		b	.L128
 2084              	.L131:
 571:.\main.c      ****         case elbw_start:
 572:.\main.c      ****             elbow_state = elbw_init;
 2085              		.loc 1 572 0
 2086 01e4 124B     		ldr	r3, .L141
 2087 01e6 0122     		mov	r2, #1
 2088 01e8 1A70     		strb	r2, [r3]
 573:.\main.c      ****             break;
 2089              		.loc 1 573 0
 2090 01ea 1BE0     		b	.L128
 2091              	.L129:
 574:.\main.c      ****         
 575:.\main.c      ****         case elbw_init:
 576:.\main.c      ****             elbow_state = elbw_wait;
 2092              		.loc 1 576 0
 2093 01ec 104B     		ldr	r3, .L141
 2094 01ee 0322     		mov	r2, #3
 2095 01f0 1A70     		strb	r2, [r3]
 577:.\main.c      ****             break;
 2096              		.loc 1 577 0
 2097 01f2 17E0     		b	.L128
 2098              	.L132:
 578:.\main.c      ****         
 579:.\main.c      ****         case elbw_execute:
 580:.\main.c      ****             if(ELBOW_FLAG)
 2099              		.loc 1 580 0
 2100 01f4 134B     		ldr	r3, .L141+20
 2101 01f6 1B78     		ldrb	r3, [r3]
 2102 01f8 002B     		cmp	r3, #0
 2103 01fa 03D0     		beq	.L134
 581:.\main.c      ****             {
 582:.\main.c      ****                 elbow_state = elbw_execute;
 2104              		.loc 1 582 0
 2105 01fc 0C4B     		ldr	r3, .L141
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 49


 2106 01fe 0222     		mov	r2, #2
 2107 0200 1A70     		strb	r2, [r3]
 583:.\main.c      ****             }
 584:.\main.c      ****             else
 585:.\main.c      ****             {
 586:.\main.c      ****                 elbow_state = elbw_wait;
 587:.\main.c      ****             }
 588:.\main.c      ****             break;
 2108              		.loc 1 588 0
 2109 0202 0FE0     		b	.L128
 2110              	.L134:
 586:.\main.c      ****                 elbow_state = elbw_wait;
 2111              		.loc 1 586 0
 2112 0204 0A4B     		ldr	r3, .L141
 2113 0206 0322     		mov	r2, #3
 2114 0208 1A70     		strb	r2, [r3]
 2115              		.loc 1 588 0
 2116 020a 0BE0     		b	.L128
 2117              	.L133:
 589:.\main.c      ****         
 590:.\main.c      ****         case elbw_wait:
 591:.\main.c      ****             if(ELBOW_FLAG)
 2118              		.loc 1 591 0
 2119 020c 0D4B     		ldr	r3, .L141+20
 2120 020e 1B78     		ldrb	r3, [r3]
 2121 0210 002B     		cmp	r3, #0
 2122 0212 03D0     		beq	.L136
 592:.\main.c      ****             {
 593:.\main.c      ****                 elbow_state = elbw_execute;
 2123              		.loc 1 593 0
 2124 0214 064B     		ldr	r3, .L141
 2125 0216 0222     		mov	r2, #2
 2126 0218 1A70     		strb	r2, [r3]
 594:.\main.c      ****             }
 595:.\main.c      ****             else
 596:.\main.c      ****             {
 597:.\main.c      ****                 elbow_state = elbw_wait; 
 598:.\main.c      ****             }
 599:.\main.c      ****             break;
 2127              		.loc 1 599 0
 2128 021a 02E0     		b	.L140
 2129              	.L136:
 597:.\main.c      ****                 elbow_state = elbw_wait; 
 2130              		.loc 1 597 0
 2131 021c 044B     		ldr	r3, .L141
 2132 021e 0322     		mov	r2, #3
 2133 0220 1A70     		strb	r2, [r3]
 2134              	.L140:
 2135              		.loc 1 599 0
 2136 0222 C046     		mov	r8, r8
 2137              	.L128:
 600:.\main.c      ****     }  
 601:.\main.c      ****     return elbw_arr_cspot;
 2138              		.loc 1 601 0
 2139 0224 FB1D     		add	r3, r7, #7
 2140 0226 1B78     		ldrb	r3, [r3]
 602:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 50


 2141              		.loc 1 602 0
 2142 0228 181C     		mov	r0, r3
 2143 022a BD46     		mov	sp, r7
 2144 022c 05B0     		add	sp, sp, #20
 2145              		@ sp needed
 2146 022e 90BD     		pop	{r4, r7, pc}
 2147              	.L142:
 2148              		.align	2
 2149              	.L141:
 2150 0230 00000000 		.word	elbow_state
 2151 0234 DC050000 		.word	1500
 2152 0238 00000000 		.word	data_array
 2153 023c DB050000 		.word	1499
 2154 0240 E7030000 		.word	999
 2155 0244 00000000 		.word	ELBOW_FLAG
 2156              		.cfi_endproc
 2157              	.LFE48:
 2158              		.size	elbow, .-elbow
 2159              		.comm	shoulder_state,1,1
 2160              		.section	.text.shoulder,"ax",%progbits
 2161              		.align	2
 2162              		.global	shoulder
 2163              		.code	16
 2164              		.thumb_func
 2165              		.type	shoulder, %function
 2166              	shoulder:
 2167              	.LFB49:
 603:.\main.c      **** 
 604:.\main.c      **** //control the shoulder
 605:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 606:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 607:.\main.c      **** { 
 2168              		.loc 1 607 0
 2169              		.cfi_startproc
 2170 0000 90B5     		push	{r4, r7, lr}
 2171              		.cfi_def_cfa_offset 12
 2172              		.cfi_offset 4, -12
 2173              		.cfi_offset 7, -8
 2174              		.cfi_offset 14, -4
 2175 0002 85B0     		sub	sp, sp, #20
 2176              		.cfi_def_cfa_offset 32
 2177 0004 00AF     		add	r7, sp, #0
 2178              		.cfi_def_cfa_register 7
 2179 0006 021C     		mov	r2, r0
 2180 0008 3960     		str	r1, [r7]
 2181 000a FB1D     		add	r3, r7, #7
 2182 000c 1A70     		strb	r2, [r3]
 608:.\main.c      ****     //take instruction from data_array
 609:.\main.c      ****     //smooth input
 610:.\main.c      ****     //actuate the shoulder using PWM
 611:.\main.c      ****     //get feedback
 612:.\main.c      ****     uint8 i;
 613:.\main.c      ****     uint16 avg;
 614:.\main.c      ****     uint16 command;
 615:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2183              		.loc 1 615 0
 2184 000e 3C1C     		mov	r4, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 51


 2185 0010 0C34     		add	r4, r4, #12
 2186 0012 0020     		mov	r0, #0
 2187 0014 FFF7FEFF 		bl	potFeedback
 2188 0018 031C     		mov	r3, r0
 2189 001a 2380     		strh	r3, [r4]
 616:.\main.c      ****     
 617:.\main.c      ****     switch(shoulder_state){ //actions
 2190              		.loc 1 617 0
 2191 001c 864B     		ldr	r3, .L179
 2192 001e 1B78     		ldrb	r3, [r3]
 2193 0020 012B     		cmp	r3, #1
 2194 0022 07D0     		beq	.L145
 2195 0024 00DC     		bgt	.LCB1960
 2196 0026 D3E0     		b	.L177	@long jump
 2197              	.LCB1960:
 2198 0028 022B     		cmp	r3, #2
 2199 002a 24D0     		beq	.L148
 2200 002c 032B     		cmp	r3, #3
 2201 002e 00D1     		bne	.LCB1964
 2202 0030 BBE0     		b	.L149	@long jump
 2203              	.LCB1964:
 2204 0032 CEE0     		b	.L144
 2205              	.L145:
 618:.\main.c      ****         case shldr_start:
 619:.\main.c      ****             break;
 620:.\main.c      **** 
 621:.\main.c      ****         case shldr_init:
 622:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2206              		.loc 1 622 0
 2207 0034 3B1C     		mov	r3, r7
 2208 0036 0F33     		add	r3, r3, #15
 2209 0038 0022     		mov	r2, #0
 2210 003a 1A70     		strb	r2, [r3]
 2211 003c 0EE0     		b	.L150
 2212              	.L151:
 623:.\main.c      ****             {
 624:.\main.c      ****                 shoulder_array[i] = 1500;
 2213              		.loc 1 624 0 discriminator 2
 2214 003e 3B1C     		mov	r3, r7
 2215 0040 0F33     		add	r3, r3, #15
 2216 0042 1B78     		ldrb	r3, [r3]
 2217 0044 5B00     		lsl	r3, r3, #1
 2218 0046 3A68     		ldr	r2, [r7]
 2219 0048 D318     		add	r3, r2, r3
 2220 004a 7C4A     		ldr	r2, .L179+4
 2221 004c 1A80     		strh	r2, [r3]
 622:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2222              		.loc 1 622 0 discriminator 2
 2223 004e 3B1C     		mov	r3, r7
 2224 0050 0F33     		add	r3, r3, #15
 2225 0052 1A78     		ldrb	r2, [r3]
 2226 0054 3B1C     		mov	r3, r7
 2227 0056 0F33     		add	r3, r3, #15
 2228 0058 0132     		add	r2, r2, #1
 2229 005a 1A70     		strb	r2, [r3]
 2230              	.L150:
 622:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 52


 2231              		.loc 1 622 0 is_stmt 0 discriminator 1
 2232 005c 3B1C     		mov	r3, r7
 2233 005e 0F33     		add	r3, r3, #15
 2234 0060 1B78     		ldrb	r3, [r3]
 2235 0062 132B     		cmp	r3, #19
 2236 0064 EBD9     		bls	.L151
 625:.\main.c      ****             }
 626:.\main.c      ****             shldr_arr_cspot = 0;
 2237              		.loc 1 626 0 is_stmt 1
 2238 0066 FB1D     		add	r3, r7, #7
 2239 0068 0022     		mov	r2, #0
 2240 006a 1A70     		strb	r2, [r3]
 627:.\main.c      ****                         
 628:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2241              		.loc 1 628 0
 2242 006c 734B     		ldr	r3, .L179+4
 2243 006e 181C     		mov	r0, r3
 2244 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 629:.\main.c      ****             break;
 2245              		.loc 1 629 0
 2246 0074 ADE0     		b	.L144
 2247              	.L148:
 630:.\main.c      **** 
 631:.\main.c      ****         case shldr_execute:
 632:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2248              		.loc 1 632 0
 2249 0076 3C1C     		mov	r4, r7
 2250 0078 0A34     		add	r4, r4, #10
 2251 007a 714B     		ldr	r3, .L179+8
 2252 007c 181C     		mov	r0, r3
 2253 007e 0C21     		mov	r1, #12
 2254 0080 0D22     		mov	r2, #13
 2255 0082 FFF7FEFF 		bl	make_command
 2256 0086 031C     		mov	r3, r0
 2257 0088 2380     		strh	r3, [r4]
 633:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2258              		.loc 1 633 0
 2259 008a FB1D     		add	r3, r7, #7
 2260 008c 1B78     		ldrb	r3, [r3]
 2261 008e 5B00     		lsl	r3, r3, #1
 2262 0090 3A68     		ldr	r2, [r7]
 2263 0092 D318     		add	r3, r2, r3
 2264 0094 3A1C     		mov	r2, r7
 2265 0096 0A32     		add	r2, r2, #10
 2266 0098 1288     		ldrh	r2, [r2]
 2267 009a 1A80     		strh	r2, [r3]
 634:.\main.c      ****         
 635:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2268              		.loc 1 635 0
 2269 009c FB1D     		add	r3, r7, #7
 2270 009e 1B78     		ldrb	r3, [r3]
 2271 00a0 122B     		cmp	r3, #18
 2272 00a2 05D8     		bhi	.L152
 636:.\main.c      ****             {
 637:.\main.c      ****                 shldr_arr_cspot++;
 2273              		.loc 1 637 0
 2274 00a4 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 53


 2275 00a6 1A78     		ldrb	r2, [r3]
 2276 00a8 FB1D     		add	r3, r7, #7
 2277 00aa 0132     		add	r2, r2, #1
 2278 00ac 1A70     		strb	r2, [r3]
 2279 00ae 02E0     		b	.L153
 2280              	.L152:
 638:.\main.c      ****             }
 639:.\main.c      ****             else
 640:.\main.c      ****             {
 641:.\main.c      ****                 shldr_arr_cspot = 0;
 2281              		.loc 1 641 0
 2282 00b0 FB1D     		add	r3, r7, #7
 2283 00b2 0022     		mov	r2, #0
 2284 00b4 1A70     		strb	r2, [r3]
 2285              	.L153:
 642:.\main.c      ****             }
 643:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2286              		.loc 1 643 0
 2287 00b6 3C1C     		mov	r4, r7
 2288 00b8 0834     		add	r4, r4, #8
 2289 00ba 3B68     		ldr	r3, [r7]
 2290 00bc 181C     		mov	r0, r3
 2291 00be 1421     		mov	r1, #20
 2292 00c0 FFF7FEFF 		bl	average
 2293 00c4 031C     		mov	r3, r0
 2294 00c6 2380     		strh	r3, [r4]
 644:.\main.c      ****             
 645:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2295              		.loc 1 645 0
 2296 00c8 3B1C     		mov	r3, r7
 2297 00ca 0C33     		add	r3, r3, #12
 2298 00cc 1A88     		ldrh	r2, [r3]
 2299 00ce 8C23     		mov	r3, #140
 2300 00d0 5B00     		lsl	r3, r3, #1
 2301 00d2 9A42     		cmp	r2, r3
 2302 00d4 23D8     		bhi	.L154
 646:.\main.c      ****             {
 647:.\main.c      ****                 if (avg < 1500)
 2303              		.loc 1 647 0
 2304 00d6 3B1C     		mov	r3, r7
 2305 00d8 0833     		add	r3, r3, #8
 2306 00da 1A88     		ldrh	r2, [r3]
 2307 00dc 594B     		ldr	r3, .L179+12
 2308 00de 9A42     		cmp	r2, r3
 2309 00e0 04D8     		bhi	.L155
 648:.\main.c      ****                 {
 649:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2310              		.loc 1 649 0
 2311 00e2 564B     		ldr	r3, .L179+4
 2312 00e4 181C     		mov	r0, r3
 2313 00e6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2314 00ea 5AE0     		b	.L158
 2315              	.L155:
 650:.\main.c      ****                 }
 651:.\main.c      ****                 else
 652:.\main.c      ****                 {
 653:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 54


 2316              		.loc 1 653 0
 2317 00ec 3B1C     		mov	r3, r7
 2318 00ee 0833     		add	r3, r3, #8
 2319 00f0 1A88     		ldrh	r2, [r3]
 2320 00f2 FA23     		mov	r3, #250
 2321 00f4 DB00     		lsl	r3, r3, #3
 2322 00f6 9A42     		cmp	r2, r3
 2323 00f8 0CD8     		bhi	.L157
 2324              		.loc 1 653 0 is_stmt 0 discriminator 1
 2325 00fa 3B1C     		mov	r3, r7
 2326 00fc 0833     		add	r3, r3, #8
 2327 00fe 1A88     		ldrh	r2, [r3]
 2328 0100 514B     		ldr	r3, .L179+16
 2329 0102 9A42     		cmp	r2, r3
 2330 0104 06D9     		bls	.L157
 654:.\main.c      ****                     {
 655:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2331              		.loc 1 655 0 is_stmt 1
 2332 0106 3B1C     		mov	r3, r7
 2333 0108 0833     		add	r3, r3, #8
 2334 010a 1B88     		ldrh	r3, [r3]
 2335 010c 181C     		mov	r0, r3
 2336 010e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2337 0112 46E0     		b	.L158
 2338              	.L157:
 656:.\main.c      ****                     }
 657:.\main.c      ****                     else
 658:.\main.c      ****                     {
 659:.\main.c      ****                         //throw error
 660:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2339              		.loc 1 660 0
 2340 0114 494B     		ldr	r3, .L179+4
 2341 0116 181C     		mov	r0, r3
 2342 0118 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2343 011c 41E0     		b	.L158
 2344              	.L154:
 661:.\main.c      ****                     }
 662:.\main.c      ****                 }
 663:.\main.c      ****             }
 664:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2345              		.loc 1 664 0
 2346 011e 3B1C     		mov	r3, r7
 2347 0120 0C33     		add	r3, r3, #12
 2348 0122 1A88     		ldrh	r2, [r3]
 2349 0124 494B     		ldr	r3, .L179+20
 2350 0126 9A42     		cmp	r2, r3
 2351 0128 23D9     		bls	.L159
 665:.\main.c      ****             {
 666:.\main.c      ****                 if(avg > 1500)
 2352              		.loc 1 666 0
 2353 012a 3B1C     		mov	r3, r7
 2354 012c 0833     		add	r3, r3, #8
 2355 012e 1A88     		ldrh	r2, [r3]
 2356 0130 424B     		ldr	r3, .L179+4
 2357 0132 9A42     		cmp	r2, r3
 2358 0134 04D9     		bls	.L160
 667:.\main.c      ****                 {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 55


 668:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2359              		.loc 1 668 0
 2360 0136 414B     		ldr	r3, .L179+4
 2361 0138 181C     		mov	r0, r3
 2362 013a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2363 013e 30E0     		b	.L158
 2364              	.L160:
 669:.\main.c      ****                 }
 670:.\main.c      ****                 else
 671:.\main.c      ****                 {
 672:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2365              		.loc 1 672 0
 2366 0140 3B1C     		mov	r3, r7
 2367 0142 0833     		add	r3, r3, #8
 2368 0144 1A88     		ldrh	r2, [r3]
 2369 0146 FA23     		mov	r3, #250
 2370 0148 DB00     		lsl	r3, r3, #3
 2371 014a 9A42     		cmp	r2, r3
 2372 014c 0CD8     		bhi	.L162
 2373              		.loc 1 672 0 is_stmt 0 discriminator 1
 2374 014e 3B1C     		mov	r3, r7
 2375 0150 0833     		add	r3, r3, #8
 2376 0152 1A88     		ldrh	r2, [r3]
 2377 0154 3C4B     		ldr	r3, .L179+16
 2378 0156 9A42     		cmp	r2, r3
 2379 0158 06D9     		bls	.L162
 673:.\main.c      ****                     {
 674:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2380              		.loc 1 674 0 is_stmt 1
 2381 015a 3B1C     		mov	r3, r7
 2382 015c 0833     		add	r3, r3, #8
 2383 015e 1B88     		ldrh	r3, [r3]
 2384 0160 181C     		mov	r0, r3
 2385 0162 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2386 0166 1CE0     		b	.L158
 2387              	.L162:
 675:.\main.c      ****                     }
 676:.\main.c      ****                     else
 677:.\main.c      ****                     {
 678:.\main.c      ****                         //throw error
 679:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2388              		.loc 1 679 0
 2389 0168 344B     		ldr	r3, .L179+4
 2390 016a 181C     		mov	r0, r3
 2391 016c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2392 0170 17E0     		b	.L158
 2393              	.L159:
 680:.\main.c      ****                     }
 681:.\main.c      ****                 }
 682:.\main.c      ****             }
 683:.\main.c      ****             else
 684:.\main.c      ****             {
 685:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2394              		.loc 1 685 0
 2395 0172 3B1C     		mov	r3, r7
 2396 0174 0833     		add	r3, r3, #8
 2397 0176 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 56


 2398 0178 FA23     		mov	r3, #250
 2399 017a DB00     		lsl	r3, r3, #3
 2400 017c 9A42     		cmp	r2, r3
 2401 017e 0CD8     		bhi	.L163
 2402              		.loc 1 685 0 is_stmt 0 discriminator 1
 2403 0180 3B1C     		mov	r3, r7
 2404 0182 0833     		add	r3, r3, #8
 2405 0184 1A88     		ldrh	r2, [r3]
 2406 0186 304B     		ldr	r3, .L179+16
 2407 0188 9A42     		cmp	r2, r3
 2408 018a 06D9     		bls	.L163
 686:.\main.c      ****                 {
 687:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2409              		.loc 1 687 0 is_stmt 1
 2410 018c 3B1C     		mov	r3, r7
 2411 018e 0833     		add	r3, r3, #8
 2412 0190 1B88     		ldrh	r3, [r3]
 2413 0192 181C     		mov	r0, r3
 2414 0194 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2415 0198 03E0     		b	.L158
 2416              	.L163:
 688:.\main.c      ****                 }
 689:.\main.c      ****                 else
 690:.\main.c      ****                 {
 691:.\main.c      ****                     //throw error
 692:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2417              		.loc 1 692 0
 2418 019a 284B     		ldr	r3, .L179+4
 2419 019c 181C     		mov	r0, r3
 2420 019e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2421              	.L158:
 693:.\main.c      ****                 }
 694:.\main.c      ****             }
 695:.\main.c      ****             SHOULDER_FLAG = 0;
 2422              		.loc 1 695 0
 2423 01a2 2B4B     		ldr	r3, .L179+24
 2424 01a4 0022     		mov	r2, #0
 2425 01a6 1A70     		strb	r2, [r3]
 696:.\main.c      ****             break;
 2426              		.loc 1 696 0
 2427 01a8 13E0     		b	.L144
 2428              	.L149:
 697:.\main.c      ****             
 698:.\main.c      ****         case shldr_wait:
 699:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2429              		.loc 1 699 0
 2430 01aa 3B1C     		mov	r3, r7
 2431 01ac 0C33     		add	r3, r3, #12
 2432 01ae 1A88     		ldrh	r2, [r3]
 2433 01b0 8C23     		mov	r3, #140
 2434 01b2 5B00     		lsl	r3, r3, #1
 2435 01b4 9A42     		cmp	r2, r3
 2436 01b6 05D9     		bls	.L164
 2437              		.loc 1 699 0 is_stmt 0 discriminator 1
 2438 01b8 3B1C     		mov	r3, r7
 2439 01ba 0C33     		add	r3, r3, #12
 2440 01bc 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 57


 2441 01be 234B     		ldr	r3, .L179+20
 2442 01c0 9A42     		cmp	r2, r3
 2443 01c2 04D9     		bls	.L165
 2444              	.L164:
 700:.\main.c      ****             {
 701:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2445              		.loc 1 701 0 is_stmt 1
 2446 01c4 1D4B     		ldr	r3, .L179+4
 2447 01c6 181C     		mov	r0, r3
 2448 01c8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 702:.\main.c      ****             }
 703:.\main.c      ****             break;
 2449              		.loc 1 703 0
 2450 01cc 01E0     		b	.L144
 2451              	.L165:
 2452 01ce 00E0     		b	.L144
 2453              	.L177:
 619:.\main.c      ****             break;
 2454              		.loc 1 619 0
 2455 01d0 C046     		mov	r8, r8
 2456              	.L144:
 704:.\main.c      ****     }
 705:.\main.c      ****     
 706:.\main.c      ****     switch(shoulder_state){ //transitions
 2457              		.loc 1 706 0
 2458 01d2 194B     		ldr	r3, .L179
 2459 01d4 1B78     		ldrb	r3, [r3]
 2460 01d6 012B     		cmp	r3, #1
 2461 01d8 0CD0     		beq	.L167
 2462 01da 02DC     		bgt	.L168
 2463 01dc 002B     		cmp	r3, #0
 2464 01de 05D0     		beq	.L169
 2465 01e0 24E0     		b	.L166
 2466              	.L168:
 2467 01e2 022B     		cmp	r3, #2
 2468 01e4 0AD0     		beq	.L170
 2469 01e6 032B     		cmp	r3, #3
 2470 01e8 14D0     		beq	.L171
 2471 01ea 1FE0     		b	.L166
 2472              	.L169:
 707:.\main.c      ****         case shldr_start:
 708:.\main.c      ****             shoulder_state = shldr_init;
 2473              		.loc 1 708 0
 2474 01ec 124B     		ldr	r3, .L179
 2475 01ee 0122     		mov	r2, #1
 2476 01f0 1A70     		strb	r2, [r3]
 709:.\main.c      ****             break;
 2477              		.loc 1 709 0
 2478 01f2 1BE0     		b	.L166
 2479              	.L167:
 710:.\main.c      ****         
 711:.\main.c      ****         case shldr_init:
 712:.\main.c      ****             shoulder_state = shldr_wait;
 2480              		.loc 1 712 0
 2481 01f4 104B     		ldr	r3, .L179
 2482 01f6 0322     		mov	r2, #3
 2483 01f8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 58


 713:.\main.c      ****             break;
 2484              		.loc 1 713 0
 2485 01fa 17E0     		b	.L166
 2486              	.L170:
 714:.\main.c      ****         
 715:.\main.c      ****         case shldr_execute:
 716:.\main.c      ****             if(SHOULDER_FLAG)
 2487              		.loc 1 716 0
 2488 01fc 144B     		ldr	r3, .L179+24
 2489 01fe 1B78     		ldrb	r3, [r3]
 2490 0200 002B     		cmp	r3, #0
 2491 0202 03D0     		beq	.L172
 717:.\main.c      ****             {
 718:.\main.c      ****                 shoulder_state = shldr_execute;
 2492              		.loc 1 718 0
 2493 0204 0C4B     		ldr	r3, .L179
 2494 0206 0222     		mov	r2, #2
 2495 0208 1A70     		strb	r2, [r3]
 719:.\main.c      ****             }
 720:.\main.c      ****             else
 721:.\main.c      ****             {
 722:.\main.c      ****                 shoulder_state = shldr_wait;
 723:.\main.c      ****             }
 724:.\main.c      ****             break;
 2496              		.loc 1 724 0
 2497 020a 0FE0     		b	.L166
 2498              	.L172:
 722:.\main.c      ****                 shoulder_state = shldr_wait;
 2499              		.loc 1 722 0
 2500 020c 0A4B     		ldr	r3, .L179
 2501 020e 0322     		mov	r2, #3
 2502 0210 1A70     		strb	r2, [r3]
 2503              		.loc 1 724 0
 2504 0212 0BE0     		b	.L166
 2505              	.L171:
 725:.\main.c      ****         
 726:.\main.c      ****         case shldr_wait:
 727:.\main.c      ****             if(SHOULDER_FLAG)
 2506              		.loc 1 727 0
 2507 0214 0E4B     		ldr	r3, .L179+24
 2508 0216 1B78     		ldrb	r3, [r3]
 2509 0218 002B     		cmp	r3, #0
 2510 021a 03D0     		beq	.L174
 728:.\main.c      ****             {
 729:.\main.c      ****                 shoulder_state = shldr_execute;
 2511              		.loc 1 729 0
 2512 021c 064B     		ldr	r3, .L179
 2513 021e 0222     		mov	r2, #2
 2514 0220 1A70     		strb	r2, [r3]
 730:.\main.c      ****             }
 731:.\main.c      ****             else
 732:.\main.c      ****             {
 733:.\main.c      ****                 shoulder_state = shldr_wait; 
 734:.\main.c      ****             }
 735:.\main.c      ****             break;
 2515              		.loc 1 735 0
 2516 0222 02E0     		b	.L178
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 59


 2517              	.L174:
 733:.\main.c      ****                 shoulder_state = shldr_wait; 
 2518              		.loc 1 733 0
 2519 0224 044B     		ldr	r3, .L179
 2520 0226 0322     		mov	r2, #3
 2521 0228 1A70     		strb	r2, [r3]
 2522              	.L178:
 2523              		.loc 1 735 0
 2524 022a C046     		mov	r8, r8
 2525              	.L166:
 736:.\main.c      ****     }  
 737:.\main.c      ****     return shldr_arr_cspot;
 2526              		.loc 1 737 0
 2527 022c FB1D     		add	r3, r7, #7
 2528 022e 1B78     		ldrb	r3, [r3]
 738:.\main.c      **** }
 2529              		.loc 1 738 0
 2530 0230 181C     		mov	r0, r3
 2531 0232 BD46     		mov	sp, r7
 2532 0234 05B0     		add	sp, sp, #20
 2533              		@ sp needed
 2534 0236 90BD     		pop	{r4, r7, pc}
 2535              	.L180:
 2536              		.align	2
 2537              	.L179:
 2538 0238 00000000 		.word	shoulder_state
 2539 023c DC050000 		.word	1500
 2540 0240 00000000 		.word	data_array
 2541 0244 DB050000 		.word	1499
 2542 0248 E7030000 		.word	999
 2543 024c 1F030000 		.word	799
 2544 0250 00000000 		.word	SHOULDER_FLAG
 2545              		.cfi_endproc
 2546              	.LFE49:
 2547              		.size	shoulder, .-shoulder
 2548              		.comm	baseAzimuth_state,1,1
 2549              		.section	.text.baseAzimuth,"ax",%progbits
 2550              		.align	2
 2551              		.global	baseAzimuth
 2552              		.code	16
 2553              		.thumb_func
 2554              		.type	baseAzimuth, %function
 2555              	baseAzimuth:
 2556              	.LFB50:
 739:.\main.c      **** 
 740:.\main.c      **** //control the turret
 741:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 742:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 743:.\main.c      **** { 
 2557              		.loc 1 743 0
 2558              		.cfi_startproc
 2559 0000 90B5     		push	{r4, r7, lr}
 2560              		.cfi_def_cfa_offset 12
 2561              		.cfi_offset 4, -12
 2562              		.cfi_offset 7, -8
 2563              		.cfi_offset 14, -4
 2564 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 60


 2565              		.cfi_def_cfa_offset 32
 2566 0004 00AF     		add	r7, sp, #0
 2567              		.cfi_def_cfa_register 7
 2568 0006 021C     		mov	r2, r0
 2569 0008 3960     		str	r1, [r7]
 2570 000a FB1D     		add	r3, r7, #7
 2571 000c 1A70     		strb	r2, [r3]
 744:.\main.c      ****     //take instruction from data_array
 745:.\main.c      ****     //smooth input
 746:.\main.c      ****     //actuate the turret using PWM
 747:.\main.c      ****     uint8 i;
 748:.\main.c      ****     uint16 avg;
 749:.\main.c      ****     uint16 command;
 750:.\main.c      ****     
 751:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2572              		.loc 1 751 0
 2573 000e 4E4B     		ldr	r3, .L205
 2574 0010 1B78     		ldrb	r3, [r3]
 2575 0012 012B     		cmp	r3, #1
 2576 0014 03D0     		beq	.L183
 2577 0016 63DD     		ble	.L203
 2578 0018 022B     		cmp	r3, #2
 2579 001a 21D0     		beq	.L186
 752:.\main.c      ****         case BA_start:
 753:.\main.c      ****             break;
 754:.\main.c      **** 
 755:.\main.c      ****         case BA_init:
 756:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 757:.\main.c      ****             {
 758:.\main.c      ****                 baseAz_array[i] = 1500;
 759:.\main.c      ****             }
 760:.\main.c      ****             BA_arr_cspot = 0;
 761:.\main.c      ****             
 762:.\main.c      ****             BA_PWM_WriteCompare(1500);
 763:.\main.c      ****             break;
 764:.\main.c      **** 
 765:.\main.c      ****         case BA_execute:
 766:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 767:.\main.c      ****             
 768:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 769:.\main.c      **** //            
 770:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 771:.\main.c      **** //            {
 772:.\main.c      **** //                BA_arr_cspot++;
 773:.\main.c      **** //            }
 774:.\main.c      **** //            else
 775:.\main.c      **** //            {
 776:.\main.c      **** //                BA_arr_cspot = 0;
 777:.\main.c      **** //            }
 778:.\main.c      ****             
 779:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 780:.\main.c      ****             
 781:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 782:.\main.c      ****             
 783:.\main.c      **** //            if(avg == 1000 || avg == 2000)
 784:.\main.c      **** //            {
 785:.\main.c      **** //
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 61


 786:.\main.c      **** //                temp_val = temp_val*(-1);
 787:.\main.c      **** //            }
 788:.\main.c      ****             
 789:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 790:.\main.c      ****             {
 791:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 792:.\main.c      ****             }
 793:.\main.c      ****             else
 794:.\main.c      ****             {
 795:.\main.c      ****                 LED_Write(1);
 796:.\main.c      **** 
 797:.\main.c      ****                 //throw error
 798:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 799:.\main.c      ****             }
 800:.\main.c      ****             BA_FLAG = 0;
 801:.\main.c      ****             break;
 802:.\main.c      ****             
 803:.\main.c      ****         case BA_wait:
 804:.\main.c      ****             break;
 2580              		.loc 1 804 0
 2581 001c 61E0     		b	.L182
 2582              	.L183:
 756:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2583              		.loc 1 756 0
 2584 001e 3B1C     		mov	r3, r7
 2585 0020 0F33     		add	r3, r3, #15
 2586 0022 0022     		mov	r2, #0
 2587 0024 1A70     		strb	r2, [r3]
 2588 0026 0EE0     		b	.L188
 2589              	.L189:
 758:.\main.c      ****                 baseAz_array[i] = 1500;
 2590              		.loc 1 758 0 discriminator 2
 2591 0028 3B1C     		mov	r3, r7
 2592 002a 0F33     		add	r3, r3, #15
 2593 002c 1B78     		ldrb	r3, [r3]
 2594 002e 5B00     		lsl	r3, r3, #1
 2595 0030 3A68     		ldr	r2, [r7]
 2596 0032 D318     		add	r3, r2, r3
 2597 0034 454A     		ldr	r2, .L205+4
 2598 0036 1A80     		strh	r2, [r3]
 756:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2599              		.loc 1 756 0 discriminator 2
 2600 0038 3B1C     		mov	r3, r7
 2601 003a 0F33     		add	r3, r3, #15
 2602 003c 1A78     		ldrb	r2, [r3]
 2603 003e 3B1C     		mov	r3, r7
 2604 0040 0F33     		add	r3, r3, #15
 2605 0042 0132     		add	r2, r2, #1
 2606 0044 1A70     		strb	r2, [r3]
 2607              	.L188:
 756:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2608              		.loc 1 756 0 is_stmt 0 discriminator 1
 2609 0046 3B1C     		mov	r3, r7
 2610 0048 0F33     		add	r3, r3, #15
 2611 004a 1B78     		ldrb	r3, [r3]
 2612 004c 132B     		cmp	r3, #19
 2613 004e EBD9     		bls	.L189
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 62


 760:.\main.c      ****             BA_arr_cspot = 0;
 2614              		.loc 1 760 0 is_stmt 1
 2615 0050 FB1D     		add	r3, r7, #7
 2616 0052 0022     		mov	r2, #0
 2617 0054 1A70     		strb	r2, [r3]
 762:.\main.c      ****             BA_PWM_WriteCompare(1500);
 2618              		.loc 1 762 0
 2619 0056 3D4B     		ldr	r3, .L205+4
 2620 0058 181C     		mov	r0, r3
 2621 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
 763:.\main.c      ****             break;
 2622              		.loc 1 763 0
 2623 005e 40E0     		b	.L182
 2624              	.L186:
 766:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2625              		.loc 1 766 0
 2626 0060 3C1C     		mov	r4, r7
 2627 0062 0C34     		add	r4, r4, #12
 2628 0064 3A4B     		ldr	r3, .L205+8
 2629 0066 181C     		mov	r0, r3
 2630 0068 0A21     		mov	r1, #10
 2631 006a 0B22     		mov	r2, #11
 2632 006c FFF7FEFF 		bl	make_command
 2633 0070 031C     		mov	r3, r0
 2634 0072 2380     		strh	r3, [r4]
 779:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 2635              		.loc 1 779 0
 2636 0074 FC1D     		add	r4, r7, #7
 2637 0076 FB1D     		add	r3, r7, #7
 2638 0078 1978     		ldrb	r1, [r3]
 2639 007a 3A68     		ldr	r2, [r7]
 2640 007c 3B1C     		mov	r3, r7
 2641 007e 0C33     		add	r3, r3, #12
 2642 0080 1B88     		ldrh	r3, [r3]
 2643 0082 081C     		mov	r0, r1
 2644 0084 111C     		mov	r1, r2
 2645 0086 1422     		mov	r2, #20
 2646 0088 FFF7FEFF 		bl	pos_to_vel
 2647 008c 031C     		mov	r3, r0
 2648 008e 2370     		strb	r3, [r4]
 781:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2649              		.loc 1 781 0
 2650 0090 3C1C     		mov	r4, r7
 2651 0092 0A34     		add	r4, r4, #10
 2652 0094 3B68     		ldr	r3, [r7]
 2653 0096 181C     		mov	r0, r3
 2654 0098 1421     		mov	r1, #20
 2655 009a FFF7FEFF 		bl	average
 2656 009e 031C     		mov	r3, r0
 2657 00a0 2380     		strh	r3, [r4]
 789:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2658              		.loc 1 789 0
 2659 00a2 3B1C     		mov	r3, r7
 2660 00a4 0A33     		add	r3, r3, #10
 2661 00a6 1A88     		ldrh	r2, [r3]
 2662 00a8 FA23     		mov	r3, #250
 2663 00aa DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 63


 2664 00ac 9A42     		cmp	r2, r3
 2665 00ae 0CD8     		bhi	.L190
 789:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2666              		.loc 1 789 0 is_stmt 0 discriminator 1
 2667 00b0 3B1C     		mov	r3, r7
 2668 00b2 0A33     		add	r3, r3, #10
 2669 00b4 1A88     		ldrh	r2, [r3]
 2670 00b6 274B     		ldr	r3, .L205+12
 2671 00b8 9A42     		cmp	r2, r3
 2672 00ba 06D9     		bls	.L190
 791:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2673              		.loc 1 791 0 is_stmt 1
 2674 00bc 3B1C     		mov	r3, r7
 2675 00be 0A33     		add	r3, r3, #10
 2676 00c0 1B88     		ldrh	r3, [r3]
 2677 00c2 181C     		mov	r0, r3
 2678 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2679 00c8 06E0     		b	.L191
 2680              	.L190:
 795:.\main.c      ****                 LED_Write(1);
 2681              		.loc 1 795 0
 2682 00ca 0120     		mov	r0, #1
 2683 00cc FFF7FEFF 		bl	LED_Write
 798:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2684              		.loc 1 798 0
 2685 00d0 1E4B     		ldr	r3, .L205+4
 2686 00d2 181C     		mov	r0, r3
 2687 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2688              	.L191:
 800:.\main.c      ****             BA_FLAG = 0;
 2689              		.loc 1 800 0
 2690 00d8 1F4B     		ldr	r3, .L205+16
 2691 00da 0022     		mov	r2, #0
 2692 00dc 1A70     		strb	r2, [r3]
 801:.\main.c      ****             break;
 2693              		.loc 1 801 0
 2694 00de 00E0     		b	.L182
 2695              	.L203:
 753:.\main.c      ****             break;
 2696              		.loc 1 753 0
 2697 00e0 C046     		mov	r8, r8
 2698              	.L182:
 805:.\main.c      ****     }
 806:.\main.c      ****     
 807:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2699              		.loc 1 807 0
 2700 00e2 194B     		ldr	r3, .L205
 2701 00e4 1B78     		ldrb	r3, [r3]
 2702 00e6 012B     		cmp	r3, #1
 2703 00e8 0CD0     		beq	.L193
 2704 00ea 02DC     		bgt	.L194
 2705 00ec 002B     		cmp	r3, #0
 2706 00ee 05D0     		beq	.L195
 2707 00f0 24E0     		b	.L192
 2708              	.L194:
 2709 00f2 022B     		cmp	r3, #2
 2710 00f4 0AD0     		beq	.L196
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 64


 2711 00f6 032B     		cmp	r3, #3
 2712 00f8 14D0     		beq	.L197
 2713 00fa 1FE0     		b	.L192
 2714              	.L195:
 808:.\main.c      ****         case BA_start:
 809:.\main.c      ****             baseAzimuth_state = BA_init;
 2715              		.loc 1 809 0
 2716 00fc 124B     		ldr	r3, .L205
 2717 00fe 0122     		mov	r2, #1
 2718 0100 1A70     		strb	r2, [r3]
 810:.\main.c      ****             break;
 2719              		.loc 1 810 0
 2720 0102 1BE0     		b	.L192
 2721              	.L193:
 811:.\main.c      ****         
 812:.\main.c      ****         case BA_init:
 813:.\main.c      ****             baseAzimuth_state = BA_wait;
 2722              		.loc 1 813 0
 2723 0104 104B     		ldr	r3, .L205
 2724 0106 0322     		mov	r2, #3
 2725 0108 1A70     		strb	r2, [r3]
 814:.\main.c      ****             break;
 2726              		.loc 1 814 0
 2727 010a 17E0     		b	.L192
 2728              	.L196:
 815:.\main.c      ****         
 816:.\main.c      ****         case BA_execute:
 817:.\main.c      ****             if(BA_FLAG)
 2729              		.loc 1 817 0
 2730 010c 124B     		ldr	r3, .L205+16
 2731 010e 1B78     		ldrb	r3, [r3]
 2732 0110 002B     		cmp	r3, #0
 2733 0112 03D0     		beq	.L198
 818:.\main.c      ****             {
 819:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2734              		.loc 1 819 0
 2735 0114 0C4B     		ldr	r3, .L205
 2736 0116 0222     		mov	r2, #2
 2737 0118 1A70     		strb	r2, [r3]
 820:.\main.c      ****             }
 821:.\main.c      ****             else
 822:.\main.c      ****             {
 823:.\main.c      ****                 baseAzimuth_state = BA_wait;
 824:.\main.c      ****             }
 825:.\main.c      ****             break;
 2738              		.loc 1 825 0
 2739 011a 0FE0     		b	.L192
 2740              	.L198:
 823:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2741              		.loc 1 823 0
 2742 011c 0A4B     		ldr	r3, .L205
 2743 011e 0322     		mov	r2, #3
 2744 0120 1A70     		strb	r2, [r3]
 2745              		.loc 1 825 0
 2746 0122 0BE0     		b	.L192
 2747              	.L197:
 826:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 65


 827:.\main.c      ****         case BA_wait:
 828:.\main.c      ****             if(BA_FLAG)
 2748              		.loc 1 828 0
 2749 0124 0C4B     		ldr	r3, .L205+16
 2750 0126 1B78     		ldrb	r3, [r3]
 2751 0128 002B     		cmp	r3, #0
 2752 012a 03D0     		beq	.L200
 829:.\main.c      ****             {
 830:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2753              		.loc 1 830 0
 2754 012c 064B     		ldr	r3, .L205
 2755 012e 0222     		mov	r2, #2
 2756 0130 1A70     		strb	r2, [r3]
 831:.\main.c      ****             }
 832:.\main.c      ****             else
 833:.\main.c      ****             {
 834:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 835:.\main.c      ****             }
 836:.\main.c      ****             break;
 2757              		.loc 1 836 0
 2758 0132 02E0     		b	.L204
 2759              	.L200:
 834:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2760              		.loc 1 834 0
 2761 0134 044B     		ldr	r3, .L205
 2762 0136 0322     		mov	r2, #3
 2763 0138 1A70     		strb	r2, [r3]
 2764              	.L204:
 2765              		.loc 1 836 0
 2766 013a C046     		mov	r8, r8
 2767              	.L192:
 837:.\main.c      ****     }  
 838:.\main.c      ****     return BA_arr_cspot;
 2768              		.loc 1 838 0
 2769 013c FB1D     		add	r3, r7, #7
 2770 013e 1B78     		ldrb	r3, [r3]
 839:.\main.c      **** }
 2771              		.loc 1 839 0
 2772 0140 181C     		mov	r0, r3
 2773 0142 BD46     		mov	sp, r7
 2774 0144 05B0     		add	sp, sp, #20
 2775              		@ sp needed
 2776 0146 90BD     		pop	{r4, r7, pc}
 2777              	.L206:
 2778              		.align	2
 2779              	.L205:
 2780 0148 00000000 		.word	baseAzimuth_state
 2781 014c DC050000 		.word	1500
 2782 0150 00000000 		.word	data_array
 2783 0154 E7030000 		.word	999
 2784 0158 00000000 		.word	BA_FLAG
 2785              		.cfi_endproc
 2786              	.LFE50:
 2787              		.size	baseAzimuth, .-baseAzimuth
 2788              		.comm	effector_state,1,1
 2789              		.section	.text.effector,"ax",%progbits
 2790              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 66


 2791              		.global	effector
 2792              		.code	16
 2793              		.thumb_func
 2794              		.type	effector, %function
 2795              	effector:
 2796              	.LFB51:
 840:.\main.c      **** 
 841:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 842:.\main.c      **** void effector()
 843:.\main.c      **** {
 2797              		.loc 1 843 0
 2798              		.cfi_startproc
 2799 0000 90B5     		push	{r4, r7, lr}
 2800              		.cfi_def_cfa_offset 12
 2801              		.cfi_offset 4, -12
 2802              		.cfi_offset 7, -8
 2803              		.cfi_offset 14, -4
 2804 0002 83B0     		sub	sp, sp, #12
 2805              		.cfi_def_cfa_offset 24
 2806 0004 00AF     		add	r7, sp, #0
 2807              		.cfi_def_cfa_register 7
 844:.\main.c      ****     uint16 command;
 845:.\main.c      **** 
 846:.\main.c      ****     switch(effector_state){ //actions
 2808              		.loc 1 846 0
 2809 0006 304B     		ldr	r3, .L227
 2810 0008 1B78     		ldrb	r3, [r3]
 2811 000a 012B     		cmp	r3, #1
 2812 000c 03D0     		beq	.L209
 2813 000e 29DD     		ble	.L226
 2814 0010 022B     		cmp	r3, #2
 2815 0012 05D0     		beq	.L212
 847:.\main.c      ****         case shldr_start:
 848:.\main.c      ****             break;
 849:.\main.c      **** 
 850:.\main.c      ****         case eff_init:           
 851:.\main.c      ****            EFFECTOR_PWM_WriteCompare1(1500);
 852:.\main.c      ****            break;
 853:.\main.c      **** 
 854:.\main.c      ****         case eff_execute:
 855:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 856:.\main.c      **** 
 857:.\main.c      ****             if(command <= 2000 && command >= 1000)
 858:.\main.c      ****             {
 859:.\main.c      ****                 EFFECTOR_PWM_WriteCompare1(command);
 860:.\main.c      ****             }
 861:.\main.c      ****             else
 862:.\main.c      ****             {
 863:.\main.c      ****                 //throw error
 864:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 865:.\main.c      ****             }
 866:.\main.c      ****             
 867:.\main.c      ****             EFFECTOR_FLAG = 0;
 868:.\main.c      ****             break;
 869:.\main.c      ****             
 870:.\main.c      ****         case eff_wait:
 871:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 67


 2816              		.loc 1 871 0
 2817 0014 27E0     		b	.L208
 2818              	.L209:
 851:.\main.c      ****            EFFECTOR_PWM_WriteCompare1(1500);
 2819              		.loc 1 851 0
 2820 0016 2D4B     		ldr	r3, .L227+4
 2821 0018 181C     		mov	r0, r3
 2822 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare1
 852:.\main.c      ****            break;
 2823              		.loc 1 852 0
 2824 001e 22E0     		b	.L208
 2825              	.L212:
 855:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 2826              		.loc 1 855 0
 2827 0020 BC1D     		add	r4, r7, #6
 2828 0022 2B4B     		ldr	r3, .L227+8
 2829 0024 181C     		mov	r0, r3
 2830 0026 1421     		mov	r1, #20
 2831 0028 1522     		mov	r2, #21
 2832 002a FFF7FEFF 		bl	make_command
 2833 002e 031C     		mov	r3, r0
 2834 0030 2380     		strh	r3, [r4]
 857:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2835              		.loc 1 857 0
 2836 0032 BB1D     		add	r3, r7, #6
 2837 0034 1A88     		ldrh	r2, [r3]
 2838 0036 FA23     		mov	r3, #250
 2839 0038 DB00     		lsl	r3, r3, #3
 2840 003a 9A42     		cmp	r2, r3
 2841 003c 0AD8     		bhi	.L214
 857:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2842              		.loc 1 857 0 is_stmt 0 discriminator 1
 2843 003e BB1D     		add	r3, r7, #6
 2844 0040 1A88     		ldrh	r2, [r3]
 2845 0042 244B     		ldr	r3, .L227+12
 2846 0044 9A42     		cmp	r2, r3
 2847 0046 05D9     		bls	.L214
 859:.\main.c      ****                 EFFECTOR_PWM_WriteCompare1(command);
 2848              		.loc 1 859 0 is_stmt 1
 2849 0048 BB1D     		add	r3, r7, #6
 2850 004a 1B88     		ldrh	r3, [r3]
 2851 004c 181C     		mov	r0, r3
 2852 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare1
 2853 0052 03E0     		b	.L215
 2854              	.L214:
 864:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2855              		.loc 1 864 0
 2856 0054 1D4B     		ldr	r3, .L227+4
 2857 0056 181C     		mov	r0, r3
 2858 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2859              	.L215:
 867:.\main.c      ****             EFFECTOR_FLAG = 0;
 2860              		.loc 1 867 0
 2861 005c 1E4B     		ldr	r3, .L227+16
 2862 005e 0022     		mov	r2, #0
 2863 0060 1A70     		strb	r2, [r3]
 868:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 68


 2864              		.loc 1 868 0
 2865 0062 00E0     		b	.L208
 2866              	.L226:
 848:.\main.c      ****             break;
 2867              		.loc 1 848 0
 2868 0064 C046     		mov	r8, r8
 2869              	.L208:
 872:.\main.c      ****     }
 873:.\main.c      ****     
 874:.\main.c      ****     switch(effector_state){ //transitions
 2870              		.loc 1 874 0
 2871 0066 184B     		ldr	r3, .L227
 2872 0068 1B78     		ldrb	r3, [r3]
 2873 006a 012B     		cmp	r3, #1
 2874 006c 0CD0     		beq	.L217
 2875 006e 02DC     		bgt	.L218
 2876 0070 002B     		cmp	r3, #0
 2877 0072 05D0     		beq	.L219
 2878 0074 24E0     		b	.L207
 2879              	.L218:
 2880 0076 022B     		cmp	r3, #2
 2881 0078 0AD0     		beq	.L220
 2882 007a 032B     		cmp	r3, #3
 2883 007c 14D0     		beq	.L221
 2884 007e 1FE0     		b	.L207
 2885              	.L219:
 875:.\main.c      ****         case eff_start:
 876:.\main.c      ****             effector_state = eff_init;
 2886              		.loc 1 876 0
 2887 0080 114B     		ldr	r3, .L227
 2888 0082 0122     		mov	r2, #1
 2889 0084 1A70     		strb	r2, [r3]
 877:.\main.c      ****             break;
 2890              		.loc 1 877 0
 2891 0086 1BE0     		b	.L207
 2892              	.L217:
 878:.\main.c      ****         
 879:.\main.c      ****         case eff_init:
 880:.\main.c      ****             effector_state = eff_wait;
 2893              		.loc 1 880 0
 2894 0088 0F4B     		ldr	r3, .L227
 2895 008a 0322     		mov	r2, #3
 2896 008c 1A70     		strb	r2, [r3]
 881:.\main.c      ****             break;
 2897              		.loc 1 881 0
 2898 008e 17E0     		b	.L207
 2899              	.L220:
 882:.\main.c      ****         
 883:.\main.c      ****         case eff_execute:
 884:.\main.c      ****             if(EFFECTOR_FLAG)
 2900              		.loc 1 884 0
 2901 0090 114B     		ldr	r3, .L227+16
 2902 0092 1B78     		ldrb	r3, [r3]
 2903 0094 002B     		cmp	r3, #0
 2904 0096 03D0     		beq	.L222
 885:.\main.c      ****             {
 886:.\main.c      ****                 effector_state = eff_execute;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 69


 2905              		.loc 1 886 0
 2906 0098 0B4B     		ldr	r3, .L227
 2907 009a 0222     		mov	r2, #2
 2908 009c 1A70     		strb	r2, [r3]
 887:.\main.c      ****             }
 888:.\main.c      ****             else
 889:.\main.c      ****             {
 890:.\main.c      ****                 effector_state = eff_wait;
 891:.\main.c      ****             }
 892:.\main.c      ****             break;
 2909              		.loc 1 892 0
 2910 009e 0FE0     		b	.L207
 2911              	.L222:
 890:.\main.c      ****                 effector_state = eff_wait;
 2912              		.loc 1 890 0
 2913 00a0 094B     		ldr	r3, .L227
 2914 00a2 0322     		mov	r2, #3
 2915 00a4 1A70     		strb	r2, [r3]
 2916              		.loc 1 892 0
 2917 00a6 0BE0     		b	.L207
 2918              	.L221:
 893:.\main.c      ****         
 894:.\main.c      ****         case eff_wait:
 895:.\main.c      ****             if(EFFECTOR_FLAG)
 2919              		.loc 1 895 0
 2920 00a8 0B4B     		ldr	r3, .L227+16
 2921 00aa 1B78     		ldrb	r3, [r3]
 2922 00ac 002B     		cmp	r3, #0
 2923 00ae 03D0     		beq	.L224
 896:.\main.c      ****             {
 897:.\main.c      ****                 effector_state = eff_execute;
 2924              		.loc 1 897 0
 2925 00b0 054B     		ldr	r3, .L227
 2926 00b2 0222     		mov	r2, #2
 2927 00b4 1A70     		strb	r2, [r3]
 2928 00b6 02E0     		b	.L225
 2929              	.L224:
 898:.\main.c      ****             }
 899:.\main.c      ****             else
 900:.\main.c      ****             {
 901:.\main.c      ****                 effector_state = eff_wait; 
 2930              		.loc 1 901 0
 2931 00b8 034B     		ldr	r3, .L227
 2932 00ba 0322     		mov	r2, #3
 2933 00bc 1A70     		strb	r2, [r3]
 2934              	.L225:
 902:.\main.c      ****             }
 903:.\main.c      ****             break;
 2935              		.loc 1 903 0
 2936 00be C046     		mov	r8, r8
 2937              	.L207:
 904:.\main.c      ****     }    
 905:.\main.c      **** }
 2938              		.loc 1 905 0
 2939 00c0 BD46     		mov	sp, r7
 2940 00c2 03B0     		add	sp, sp, #12
 2941              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 70


 2942 00c4 90BD     		pop	{r4, r7, pc}
 2943              	.L228:
 2944 00c6 C046     		.align	2
 2945              	.L227:
 2946 00c8 00000000 		.word	effector_state
 2947 00cc DC050000 		.word	1500
 2948 00d0 00000000 		.word	data_array
 2949 00d4 E7030000 		.word	999
 2950 00d8 00000000 		.word	EFFECTOR_FLAG
 2951              		.cfi_endproc
 2952              	.LFE51:
 2953              		.size	effector, .-effector
 2954              		.section	.text.initialize,"ax",%progbits
 2955              		.align	2
 2956              		.global	initialize
 2957              		.code	16
 2958              		.thumb_func
 2959              		.type	initialize, %function
 2960              	initialize:
 2961              	.LFB52:
 906:.\main.c      **** 
 907:.\main.c      **** //Initialization function for the program
 908:.\main.c      **** void initialize()
 909:.\main.c      **** {
 2962              		.loc 1 909 0
 2963              		.cfi_startproc
 2964 0000 80B5     		push	{r7, lr}
 2965              		.cfi_def_cfa_offset 8
 2966              		.cfi_offset 7, -8
 2967              		.cfi_offset 14, -4
 2968 0002 82B0     		sub	sp, sp, #8
 2969              		.cfi_def_cfa_offset 16
 2970 0004 00AF     		add	r7, sp, #0
 2971              		.cfi_def_cfa_register 7
 910:.\main.c      ****     //initialize the wiznet
 911:.\main.c      ****     WIZ_RST_Write(0);
 2972              		.loc 1 911 0
 2973 0006 0020     		mov	r0, #0
 2974 0008 FFF7FEFF 		bl	WIZ_RST_Write
 912:.\main.c      ****     CyDelay(10);
 2975              		.loc 1 912 0
 2976 000c 0A20     		mov	r0, #10
 2977 000e FFF7FEFF 		bl	CyDelay
 913:.\main.c      ****     WIZ_RST_Write(1);
 2978              		.loc 1 913 0
 2979 0012 0120     		mov	r0, #1
 2980 0014 FFF7FEFF 		bl	WIZ_RST_Write
 914:.\main.c      ****     WIZ_SS_Write(1);
 2981              		.loc 1 914 0
 2982 0018 0120     		mov	r0, #1
 2983 001a FFF7FEFF 		bl	WIZ_SS_Write
 2984              	.LBB2:
 915:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2985              		.loc 1 915 0
 2986 001e FB1D     		add	r3, r7, #7
 2987 0020 0022     		mov	r2, #0
 2988 0022 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 71


 2989 0024 0DE0     		b	.L230
 2990              	.L233:
 916:.\main.c      ****     {
 917:.\main.c      ****         if(WIZ_RDY_Read())
 2991              		.loc 1 917 0
 2992 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 2993 002a 031C     		mov	r3, r0
 2994 002c 002B     		cmp	r3, #0
 2995 002e 00D0     		beq	.L231
 918:.\main.c      ****         {
 919:.\main.c      ****             break;
 2996              		.loc 1 919 0
 2997 0030 0BE0     		b	.L232
 2998              	.L231:
 920:.\main.c      ****         }
 921:.\main.c      ****         else
 922:.\main.c      ****         {
 923:.\main.c      ****             CyDelay(4);
 2999              		.loc 1 923 0
 3000 0032 0420     		mov	r0, #4
 3001 0034 FFF7FEFF 		bl	CyDelay
 915:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3002              		.loc 1 915 0
 3003 0038 FB1D     		add	r3, r7, #7
 3004 003a 1A78     		ldrb	r2, [r3]
 3005 003c FB1D     		add	r3, r7, #7
 3006 003e 0132     		add	r2, r2, #1
 3007 0040 1A70     		strb	r2, [r3]
 3008              	.L230:
 915:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3009              		.loc 1 915 0 is_stmt 0 discriminator 1
 3010 0042 FB1D     		add	r3, r7, #7
 3011 0044 1B78     		ldrb	r3, [r3]
 3012 0046 632B     		cmp	r3, #99
 3013 0048 EDD9     		bls	.L233
 3014              	.L232:
 3015              	.LBE2:
 924:.\main.c      ****         }
 925:.\main.c      ****     }
 926:.\main.c      ****     
 927:.\main.c      ****     //Initialize state variables
 928:.\main.c      ****     baseAzimuth_state = BA_start;
 3016              		.loc 1 928 0 is_stmt 1
 3017 004a 254B     		ldr	r3, .L234
 3018 004c 0022     		mov	r2, #0
 3019 004e 1A70     		strb	r2, [r3]
 929:.\main.c      ****     wristTilt_state = tilt_start;
 3020              		.loc 1 929 0
 3021 0050 244B     		ldr	r3, .L234+4
 3022 0052 0022     		mov	r2, #0
 3023 0054 1A70     		strb	r2, [r3]
 930:.\main.c      ****     wristRotate_state = rotate_start;
 3024              		.loc 1 930 0
 3025 0056 244B     		ldr	r3, .L234+8
 3026 0058 0022     		mov	r2, #0
 3027 005a 1A70     		strb	r2, [r3]
 931:.\main.c      ****     shoulder_state = shldr_start;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 72


 3028              		.loc 1 931 0
 3029 005c 234B     		ldr	r3, .L234+12
 3030 005e 0022     		mov	r2, #0
 3031 0060 1A70     		strb	r2, [r3]
 932:.\main.c      ****     elbow_state = elbw_start;
 3032              		.loc 1 932 0
 3033 0062 234B     		ldr	r3, .L234+16
 3034 0064 0022     		mov	r2, #0
 3035 0066 1A70     		strb	r2, [r3]
 933:.\main.c      ****     effector_state = eff_start;
 3036              		.loc 1 933 0
 3037 0068 224B     		ldr	r3, .L234+20
 3038 006a 0022     		mov	r2, #0
 3039 006c 1A70     		strb	r2, [r3]
 934:.\main.c      ****     
 935:.\main.c      ****     //start all of our components
 936:.\main.c      ****     SPIM_1_Start();
 3040              		.loc 1 936 0
 3041 006e FFF7FEFF 		bl	SPIM_1_Start
 937:.\main.c      ****     Clock_pwm_Start();
 3042              		.loc 1 937 0
 3043 0072 FFF7FEFF 		bl	Clock_pwm_Start
 938:.\main.c      ****     Clock_counter_Start();
 3044              		.loc 1 938 0
 3045 0076 FFF7FEFF 		bl	Clock_counter_Start
 939:.\main.c      ****     UART_1_Start();
 3046              		.loc 1 939 0
 3047 007a FFF7FEFF 		bl	UART_1_Start
 940:.\main.c      ****     SHLDR_PWM_Start();
 3048              		.loc 1 940 0
 3049 007e FFF7FEFF 		bl	SHLDR_PWM_Start
 941:.\main.c      ****     BA_PWM_Start();
 3050              		.loc 1 941 0
 3051 0082 FFF7FEFF 		bl	BA_PWM_Start
 942:.\main.c      ****     ELBW_PWM_Start();
 3052              		.loc 1 942 0
 3053 0086 FFF7FEFF 		bl	ELBW_PWM_Start
 943:.\main.c      ****     EFFECTOR_PWM_Start();
 3054              		.loc 1 943 0
 3055 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
 944:.\main.c      ****     ADC_Start();
 3056              		.loc 1 944 0
 3057 008e FFF7FEFF 		bl	ADC_Start
 945:.\main.c      ****     ADC_StartConvert();
 3058              		.loc 1 945 0
 3059 0092 FFF7FEFF 		bl	ADC_StartConvert
 946:.\main.c      ****     
 947:.\main.c      ****     //uint8_t test_byte;
 948:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3060              		.loc 1 948 0
 3061 0096 184B     		ldr	r3, .L234+24
 3062 0098 0420     		mov	r0, #4
 3063 009a 0121     		mov	r1, #1
 3064 009c 1A1C     		mov	r2, r3
 3065 009e FFF7FEFF 		bl	wiznetInit
 949:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
 950:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 73


 951:.\main.c      ****     //Initialize the dynamixels
 952:.\main.c      ****     ServoSpeed(0xFE, 100);
 3066              		.loc 1 952 0
 3067 00a2 FE20     		mov	r0, #254
 3068 00a4 6421     		mov	r1, #100
 3069 00a6 FFF7FEFF 		bl	ServoSpeed
 953:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3070              		.loc 1 953 0
 3071 00aa 144B     		ldr	r3, .L234+28
 3072 00ac FE20     		mov	r0, #254
 3073 00ae 191C     		mov	r1, r3
 3074 00b0 FFF7FEFF 		bl	SetServoTorque
 954:.\main.c      ****     
 955:.\main.c      ****     //Initialize our motor drivers
 956:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3075              		.loc 1 956 0
 3076 00b4 124B     		ldr	r3, .L234+32
 3077 00b6 181C     		mov	r0, r3
 3078 00b8 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 957:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3079              		.loc 1 957 0
 3080 00bc 104B     		ldr	r3, .L234+32
 3081 00be 181C     		mov	r0, r3
 3082 00c0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 958:.\main.c      ****     CyDelay(3000);
 3083              		.loc 1 958 0
 3084 00c4 0F4B     		ldr	r3, .L234+36
 3085 00c6 181C     		mov	r0, r3
 3086 00c8 FFF7FEFF 		bl	CyDelay
 959:.\main.c      ****     
 960:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
 961:.\main.c      ****     
 962:.\main.c      ****     //helps for generating random arrays
 963:.\main.c      ****     //srand((unsigned) time(&t));
 964:.\main.c      ****     
 965:.\main.c      ****     CyGlobalIntEnable;
 3087              		.loc 1 965 0
 3088              	@ 965 ".\main.c" 1
 3089 00cc 62B6     		CPSIE   i
 3090              	@ 0 "" 2
 966:.\main.c      ****     isr_1_StartEx(timer_isr);
 3091              		.loc 1 966 0
 3092              		.code	16
 3093 00ce 0E4B     		ldr	r3, .L234+40
 3094 00d0 181C     		mov	r0, r3
 3095 00d2 FFF7FEFF 		bl	isr_1_StartEx
 967:.\main.c      ****     Timer_1_Start();
 3096              		.loc 1 967 0
 3097 00d6 FFF7FEFF 		bl	Timer_1_Start
 968:.\main.c      ****     
 969:.\main.c      ****     //UART_TEST_Start();
 970:.\main.c      ****     
 971:.\main.c      **** }
 3098              		.loc 1 971 0
 3099 00da BD46     		mov	sp, r7
 3100 00dc 02B0     		add	sp, sp, #8
 3101              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 74


 3102 00de 80BD     		pop	{r7, pc}
 3103              	.L235:
 3104              		.align	2
 3105              	.L234:
 3106 00e0 00000000 		.word	baseAzimuth_state
 3107 00e4 00000000 		.word	wristTilt_state
 3108 00e8 00000000 		.word	wristRotate_state
 3109 00ec 00000000 		.word	shoulder_state
 3110 00f0 00000000 		.word	elbow_state
 3111 00f4 00000000 		.word	effector_state
 3112 00f8 87690000 		.word	27015
 3113 00fc FF030000 		.word	1023
 3114 0100 DC050000 		.word	1500
 3115 0104 B80B0000 		.word	3000
 3116 0108 00000000 		.word	timer_isr
 3117              		.cfi_endproc
 3118              	.LFE52:
 3119              		.size	initialize, .-initialize
 3120              		.section	.text.main,"ax",%progbits
 3121              		.align	2
 3122              		.global	main
 3123              		.code	16
 3124              		.thumb_func
 3125              		.type	main, %function
 3126              	main:
 3127              	.LFB53:
 972:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
 973:.\main.c      **** int main()
 974:.\main.c      **** {  
 3128              		.loc 1 974 0
 3129              		.cfi_startproc
 3130 0000 90B5     		push	{r4, r7, lr}
 3131              		.cfi_def_cfa_offset 12
 3132              		.cfi_offset 4, -12
 3133              		.cfi_offset 7, -8
 3134              		.cfi_offset 14, -4
 3135 0002 B7B0     		sub	sp, sp, #220
 3136              		.cfi_def_cfa_offset 232
 3137 0004 00AF     		add	r7, sp, #0
 3138              		.cfi_def_cfa_register 7
 975:.\main.c      ****     //Define variables
 976:.\main.c      ****     //for testing
 977:.\main.c      **** //    time_t t; 
 978:.\main.c      **** //    char time_array[8];
 979:.\main.c      **** //    uint8 counter;
 980:.\main.c      **** //    int direction = 0;
 981:.\main.c      ****     
 982:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
 983:.\main.c      ****     
 984:.\main.c      ****     uint8 BA_cspot;
 985:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
 986:.\main.c      ****     uint8 shldr_cspot;
 987:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
 988:.\main.c      ****     uint8 elbw_cspot;
 989:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
 990:.\main.c      ****     uint8 WT_cspot;
 991:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 75


 992:.\main.c      ****     uint8 WR_cspot;
 993:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
 994:.\main.c      ****     
 995:.\main.c      ****     //for testing
 996:.\main.c      **** //    int increasing = 1;
 997:.\main.c      **** //    int first_count;
 998:.\main.c      **** //    int second_count;
 999:.\main.c      **** //    int temp_code_time;
1000:.\main.c      **** //    int code_time = 0;
1001:.\main.c      ****     
1002:.\main.c      ****     
1003:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 3139              		.loc 1 1003 0
 3140 0006 3B1C     		mov	r3, r7
 3141 0008 D233     		add	r3, r3, #210
 3142 000a 0022     		mov	r2, #0
 3143 000c 1A70     		strb	r2, [r3]
1004:.\main.c      ****     int16 temp_val = 1500; 
 3144              		.loc 1 1004 0
 3145 000e 3B1C     		mov	r3, r7
 3146 0010 CA33     		add	r3, r3, #202
 3147 0012 544A     		ldr	r2, .L246
 3148 0014 1A80     		strh	r2, [r3]
1005:.\main.c      ****     
1006:.\main.c      ****     initialize();
 3149              		.loc 1 1006 0
 3150 0016 FFF7FEFF 		bl	initialize
 3151              	.L244:
1007:.\main.c      **** //    uint8 i;
1008:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1009:.\main.c      **** //    {
1010:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1011:.\main.c      **** //    }
1012:.\main.c      **** 
1013:.\main.c      ****     for(;;)
1014:.\main.c      ****     {
1015:.\main.c      ****         //UART_TEST_UartPutChar(31);
1016:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1017:.\main.c      ****         
1018:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 3152              		.loc 1 1018 0
 3153 001a FFF7FEFF 		bl	WIZ_INT_Read
 3154 001e 031C     		mov	r3, r0
 3155 0020 002B     		cmp	r3, #0
 3156 0022 17D1     		bne	.L237
1019:.\main.c      ****         {
1020:.\main.c      ****             wiznetClearInterrupts();
 3157              		.loc 1 1020 0
 3158 0024 FFF7FEFF 		bl	wiznetClearInterrupts
1021:.\main.c      ****             fill_data_array();
 3159              		.loc 1 1021 0
 3160 0028 FFF7FEFF 		bl	fill_data_array
1022:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1023:.\main.c      ****             BA_FLAG = 1;
 3161              		.loc 1 1023 0
 3162 002c 4E4B     		ldr	r3, .L246+4
 3163 002e 0122     		mov	r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 76


 3164 0030 1A70     		strb	r2, [r3]
1024:.\main.c      ****             WR_FLAG = 1;
 3165              		.loc 1 1024 0
 3166 0032 4E4B     		ldr	r3, .L246+8
 3167 0034 0122     		mov	r2, #1
 3168 0036 1A70     		strb	r2, [r3]
1025:.\main.c      ****             WT_FLAG = 1;
 3169              		.loc 1 1025 0
 3170 0038 4D4B     		ldr	r3, .L246+12
 3171 003a 0122     		mov	r2, #1
 3172 003c 1A70     		strb	r2, [r3]
1026:.\main.c      ****             SHOULDER_FLAG = 1;
 3173              		.loc 1 1026 0
 3174 003e 4D4B     		ldr	r3, .L246+16
 3175 0040 0122     		mov	r2, #1
 3176 0042 1A70     		strb	r2, [r3]
1027:.\main.c      ****             ELBOW_FLAG = 1;
 3177              		.loc 1 1027 0
 3178 0044 4C4B     		ldr	r3, .L246+20
 3179 0046 0122     		mov	r2, #1
 3180 0048 1A70     		strb	r2, [r3]
1028:.\main.c      ****             fs_count = 0;
 3181              		.loc 1 1028 0
 3182 004a 3B1C     		mov	r3, r7
 3183 004c D233     		add	r3, r3, #210
 3184 004e 0022     		mov	r2, #0
 3185 0050 1A70     		strb	r2, [r3]
 3186 0052 06E0     		b	.L238
 3187              	.L237:
1029:.\main.c      ****             //wiznet = 0; //for testing
1030:.\main.c      ****         }
1031:.\main.c      ****         else
1032:.\main.c      ****         {
1033:.\main.c      ****             fs_count += 1;
 3188              		.loc 1 1033 0
 3189 0054 3B1C     		mov	r3, r7
 3190 0056 D233     		add	r3, r3, #210
 3191 0058 3A1C     		mov	r2, r7
 3192 005a D232     		add	r2, r2, #210
 3193 005c 1278     		ldrb	r2, [r2]
 3194 005e 0132     		add	r2, r2, #1
 3195 0060 1A70     		strb	r2, [r3]
 3196              	.L238:
1034:.\main.c      ****         }
1035:.\main.c      ****         
1036:.\main.c      ****         if(fs_count >= 50)
 3197              		.loc 1 1036 0
 3198 0062 3B1C     		mov	r3, r7
 3199 0064 D233     		add	r3, r3, #210
 3200 0066 1B78     		ldrb	r3, [r3]
 3201 0068 312B     		cmp	r3, #49
 3202 006a 2CD9     		bls	.L239
1037:.\main.c      ****         {
1038:.\main.c      ****             temp_val = 1500;
 3203              		.loc 1 1038 0
 3204 006c 3B1C     		mov	r3, r7
 3205 006e CA33     		add	r3, r3, #202
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 77


 3206 0070 3C4A     		ldr	r2, .L246
 3207 0072 1A80     		strh	r2, [r3]
 3208              	.LBB3:
1039:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3209              		.loc 1 1039 0
 3210 0074 0023     		mov	r3, #0
 3211 0076 CC20     		mov	r0, #204
 3212 0078 C019     		add	r0, r0, r7
 3213 007a 0360     		str	r3, [r0]
 3214 007c 1DE0     		b	.L240
 3215              	.L241:
1040:.\main.c      ****             {
1041:.\main.c      ****                 data_array[i] = temp_val >> 8;
 3216              		.loc 1 1041 0 discriminator 2
 3217 007e 3B1C     		mov	r3, r7
 3218 0080 CA33     		add	r3, r3, #202
 3219 0082 0022     		mov	r2, #0
 3220 0084 9B5E     		ldrsh	r3, [r3, r2]
 3221 0086 1B12     		asr	r3, r3, #8
 3222 0088 9BB2     		uxth	r3, r3
 3223 008a DAB2     		uxtb	r2, r3
 3224 008c 3B49     		ldr	r1, .L246+24
 3225 008e CC20     		mov	r0, #204
 3226 0090 C019     		add	r0, r0, r7
 3227 0092 0368     		ldr	r3, [r0]
 3228 0094 CB18     		add	r3, r1, r3
 3229 0096 1A70     		strb	r2, [r3]
1042:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 3230              		.loc 1 1042 0 discriminator 2
 3231 0098 CC22     		mov	r2, #204
 3232 009a D219     		add	r2, r2, r7
 3233 009c 1368     		ldr	r3, [r2]
 3234 009e 0133     		add	r3, r3, #1
 3235 00a0 3A1C     		mov	r2, r7
 3236 00a2 CA32     		add	r2, r2, #202
 3237 00a4 1288     		ldrh	r2, [r2]
 3238 00a6 D1B2     		uxtb	r1, r2
 3239 00a8 344A     		ldr	r2, .L246+24
 3240 00aa D154     		strb	r1, [r2, r3]
1039:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3241              		.loc 1 1039 0 discriminator 2
 3242 00ac CC20     		mov	r0, #204
 3243 00ae C019     		add	r0, r0, r7
 3244 00b0 0368     		ldr	r3, [r0]
 3245 00b2 0233     		add	r3, r3, #2
 3246 00b4 CC22     		mov	r2, #204
 3247 00b6 D219     		add	r2, r2, r7
 3248 00b8 1360     		str	r3, [r2]
 3249              	.L240:
1039:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3250              		.loc 1 1039 0 is_stmt 0 discriminator 1
 3251 00ba CC20     		mov	r0, #204
 3252 00bc C019     		add	r0, r0, r7
 3253 00be 0368     		ldr	r3, [r0]
 3254 00c0 152B     		cmp	r3, #21
 3255 00c2 DCDD     		ble	.L241
 3256              	.LBE3:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 78


1043:.\main.c      ****             }
1044:.\main.c      ****         }
1045:.\main.c      ****         else
1046:.\main.c      ****         {
1047:.\main.c      ****         
1048:.\main.c      ****         //if(wiznet gives a complete packet)
1049:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1050:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1051:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1052:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1053:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1054:.\main.c      ****             effector();
1055:.\main.c      ****             send_feedback(); //send feedback onece every tick
1056:.\main.c      ****         }
1057:.\main.c      **** 
1058:.\main.c      **** //        else{dropped_packets++}
1059:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1060:.\main.c      **** //        LED_Write(0);
1061:.\main.c      **** //        temp_code_time = second_count - first_count;
1062:.\main.c      **** //        if(temp_code_time > code_time)
1063:.\main.c      **** //        {
1064:.\main.c      **** //            code_time = temp_code_time;
1065:.\main.c      **** //            itoa(code_time, time_array);
1066:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1067:.\main.c      **** //        }
1068:.\main.c      ****         
1069:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3257              		.loc 1 1069 0 is_stmt 1
 3258 00c4 43E0     		b	.L245
 3259              	.L239:
1049:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 3260              		.loc 1 1049 0
 3261 00c6 3C1C     		mov	r4, r7
 3262 00c8 D734     		add	r4, r4, #215
 3263 00ca 3B1C     		mov	r3, r7
 3264 00cc D733     		add	r3, r3, #215
 3265 00ce 1A78     		ldrb	r2, [r3]
 3266 00d0 3B1C     		mov	r3, r7
 3267 00d2 A033     		add	r3, r3, #160
 3268 00d4 101C     		mov	r0, r2
 3269 00d6 191C     		mov	r1, r3
 3270 00d8 FFF7FEFF 		bl	baseAzimuth
 3271 00dc 031C     		mov	r3, r0
 3272 00de 2370     		strb	r3, [r4]
1050:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 3273              		.loc 1 1050 0
 3274 00e0 3C1C     		mov	r4, r7
 3275 00e2 D634     		add	r4, r4, #214
 3276 00e4 3B1C     		mov	r3, r7
 3277 00e6 D633     		add	r3, r3, #214
 3278 00e8 1A78     		ldrb	r2, [r3]
 3279 00ea 3B1C     		mov	r3, r7
 3280 00ec 7833     		add	r3, r3, #120
 3281 00ee 101C     		mov	r0, r2
 3282 00f0 191C     		mov	r1, r3
 3283 00f2 FFF7FEFF 		bl	shoulder
 3284 00f6 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 79


 3285 00f8 2370     		strb	r3, [r4]
1051:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 3286              		.loc 1 1051 0
 3287 00fa 3C1C     		mov	r4, r7
 3288 00fc D534     		add	r4, r4, #213
 3289 00fe 3B1C     		mov	r3, r7
 3290 0100 D533     		add	r3, r3, #213
 3291 0102 1A78     		ldrb	r2, [r3]
 3292 0104 3B1C     		mov	r3, r7
 3293 0106 5033     		add	r3, r3, #80
 3294 0108 101C     		mov	r0, r2
 3295 010a 191C     		mov	r1, r3
 3296 010c FFF7FEFF 		bl	elbow
 3297 0110 031C     		mov	r3, r0
 3298 0112 2370     		strb	r3, [r4]
1052:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 3299              		.loc 1 1052 0
 3300 0114 3C1C     		mov	r4, r7
 3301 0116 D434     		add	r4, r4, #212
 3302 0118 3B1C     		mov	r3, r7
 3303 011a D433     		add	r3, r3, #212
 3304 011c 1A78     		ldrb	r2, [r3]
 3305 011e 3B1C     		mov	r3, r7
 3306 0120 2833     		add	r3, r3, #40
 3307 0122 101C     		mov	r0, r2
 3308 0124 191C     		mov	r1, r3
 3309 0126 FFF7FEFF 		bl	wristTilt
 3310 012a 031C     		mov	r3, r0
 3311 012c 2370     		strb	r3, [r4]
1053:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 3312              		.loc 1 1053 0
 3313 012e 3C1C     		mov	r4, r7
 3314 0130 D334     		add	r4, r4, #211
 3315 0132 3B1C     		mov	r3, r7
 3316 0134 D333     		add	r3, r3, #211
 3317 0136 1A78     		ldrb	r2, [r3]
 3318 0138 3B1C     		mov	r3, r7
 3319 013a 101C     		mov	r0, r2
 3320 013c 191C     		mov	r1, r3
 3321 013e FFF7FEFF 		bl	wristRotate
 3322 0142 031C     		mov	r3, r0
 3323 0144 2370     		strb	r3, [r4]
1054:.\main.c      ****             effector();
 3324              		.loc 1 1054 0
 3325 0146 FFF7FEFF 		bl	effector
1055:.\main.c      ****             send_feedback(); //send feedback onece every tick
 3326              		.loc 1 1055 0
 3327 014a FFF7FEFF 		bl	send_feedback
 3328              	.L245:
 3329              		.loc 1 1069 0
 3330 014e C046     		mov	r8, r8
 3331              	.L243:
 3332              		.loc 1 1069 0 is_stmt 0 discriminator 1
 3333 0150 0B4B     		ldr	r3, .L246+28
 3334 0152 1B78     		ldrb	r3, [r3]
 3335 0154 DBB2     		uxtb	r3, r3
 3336 0156 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 80


 3337 0158 FAD0     		beq	.L243
1070:.\main.c      ****         timerFlag = 0;
 3338              		.loc 1 1070 0 is_stmt 1
 3339 015a 094B     		ldr	r3, .L246+28
 3340 015c 0022     		mov	r2, #0
 3341 015e 1A70     		strb	r2, [r3]
1071:.\main.c      ****     
1072:.\main.c      ****         
1073:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1074:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1075:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1076:.\main.c      **** //        counter++;
1077:.\main.c      **** //        
1078:.\main.c      **** //        if(counter == 50)
1079:.\main.c      **** //        {
1080:.\main.c      **** //        
1081:.\main.c      **** //            if(increasing)
1082:.\main.c      **** //            {
1083:.\main.c      **** //                temp_val += 100;
1084:.\main.c      **** //                if(temp_val == 1000)
1085:.\main.c      **** //                {
1086:.\main.c      **** //                    increasing = 0;
1087:.\main.c      **** //                }
1088:.\main.c      **** //            }
1089:.\main.c      **** //            else
1090:.\main.c      **** //            {
1091:.\main.c      **** //                temp_val -= 100;
1092:.\main.c      **** //                if(temp_val == -1000)
1093:.\main.c      **** //                {
1094:.\main.c      **** //                    increasing = 1;   
1095:.\main.c      **** //                }
1096:.\main.c      **** //            }
1097:.\main.c      **** //            
1098:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1099:.\main.c      **** //            //int16 forward = 1000;
1100:.\main.c      **** //            //int16 backward = -1000;
1101:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1102:.\main.c      **** //            {
1103:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1104:.\main.c      **** //                //test_array[i] = random_number >> 8;
1105:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1106:.\main.c      **** //                test_array[i] = temp_val >> 8;
1107:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1108:.\main.c      **** //            }
1109:.\main.c      **** ////            counter = 0;
1110:.\main.c      **** //            wiznet = 1;
1111:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 3342              		.loc 1 1111 0
 3343 0160 5BE7     		b	.L244
 3344              	.L247:
 3345 0162 C046     		.align	2
 3346              	.L246:
 3347 0164 DC050000 		.word	1500
 3348 0168 00000000 		.word	BA_FLAG
 3349 016c 00000000 		.word	WR_FLAG
 3350 0170 00000000 		.word	WT_FLAG
 3351 0174 00000000 		.word	SHOULDER_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 81


 3352 0178 00000000 		.word	ELBOW_FLAG
 3353 017c 00000000 		.word	data_array
 3354 0180 00000000 		.word	timerFlag
 3355              		.cfi_endproc
 3356              	.LFE53:
 3357              		.size	main, .-main
 3358              		.text
 3359              	.Letext0:
 3360              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3361              		.file 3 ".\\main.h"
 3362              		.section	.debug_info,"",%progbits
 3363              	.Ldebug_info0:
 3364 0000 CD090000 		.4byte	0x9cd
 3365 0004 0400     		.2byte	0x4
 3366 0006 00000000 		.4byte	.Ldebug_abbrev0
 3367 000a 04       		.byte	0x4
 3368 000b 01       		.uleb128 0x1
 3369 000c 63050000 		.4byte	.LASF137
 3370 0010 01       		.byte	0x1
 3371 0011 AF060000 		.4byte	.LASF138
 3372 0015 E3000000 		.4byte	.LASF139
 3373 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3374 001d 00000000 		.4byte	0
 3375 0021 00000000 		.4byte	.Ldebug_line0
 3376 0025 02       		.uleb128 0x2
 3377 0026 01       		.byte	0x1
 3378 0027 06       		.byte	0x6
 3379 0028 04060000 		.4byte	.LASF0
 3380 002c 02       		.uleb128 0x2
 3381 002d 01       		.byte	0x1
 3382 002e 08       		.byte	0x8
 3383 002f 0A050000 		.4byte	.LASF1
 3384 0033 02       		.uleb128 0x2
 3385 0034 02       		.byte	0x2
 3386 0035 05       		.byte	0x5
 3387 0036 0C040000 		.4byte	.LASF2
 3388 003a 02       		.uleb128 0x2
 3389 003b 02       		.byte	0x2
 3390 003c 07       		.byte	0x7
 3391 003d 18060000 		.4byte	.LASF3
 3392 0041 02       		.uleb128 0x2
 3393 0042 04       		.byte	0x4
 3394 0043 05       		.byte	0x5
 3395 0044 31040000 		.4byte	.LASF4
 3396 0048 02       		.uleb128 0x2
 3397 0049 04       		.byte	0x4
 3398 004a 07       		.byte	0x7
 3399 004b BB040000 		.4byte	.LASF5
 3400 004f 02       		.uleb128 0x2
 3401 0050 08       		.byte	0x8
 3402 0051 05       		.byte	0x5
 3403 0052 C6020000 		.4byte	.LASF6
 3404 0056 02       		.uleb128 0x2
 3405 0057 08       		.byte	0x8
 3406 0058 07       		.byte	0x7
 3407 0059 AB010000 		.4byte	.LASF7
 3408 005d 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 82


 3409 005e 04       		.byte	0x4
 3410 005f 05       		.byte	0x5
 3411 0060 696E7400 		.ascii	"int\000"
 3412 0064 02       		.uleb128 0x2
 3413 0065 04       		.byte	0x4
 3414 0066 07       		.byte	0x7
 3415 0067 77000000 		.4byte	.LASF8
 3416 006b 04       		.uleb128 0x4
 3417 006c 56060000 		.4byte	.LASF9
 3418 0070 02       		.byte	0x2
 3419 0071 A1       		.byte	0xa1
 3420 0072 2C000000 		.4byte	0x2c
 3421 0076 04       		.uleb128 0x4
 3422 0077 8F020000 		.4byte	.LASF10
 3423 007b 02       		.byte	0x2
 3424 007c A2       		.byte	0xa2
 3425 007d 3A000000 		.4byte	0x3a
 3426 0081 04       		.uleb128 0x4
 3427 0082 4C030000 		.4byte	.LASF11
 3428 0086 02       		.byte	0x2
 3429 0087 A3       		.byte	0xa3
 3430 0088 48000000 		.4byte	0x48
 3431 008c 04       		.uleb128 0x4
 3432 008d 9D020000 		.4byte	.LASF12
 3433 0091 02       		.byte	0x2
 3434 0092 A4       		.byte	0xa4
 3435 0093 25000000 		.4byte	0x25
 3436 0097 04       		.uleb128 0x4
 3437 0098 97000000 		.4byte	.LASF13
 3438 009c 02       		.byte	0x2
 3439 009d A5       		.byte	0xa5
 3440 009e 33000000 		.4byte	0x33
 3441 00a2 02       		.uleb128 0x2
 3442 00a3 04       		.byte	0x4
 3443 00a4 04       		.byte	0x4
 3444 00a5 97010000 		.4byte	.LASF14
 3445 00a9 02       		.uleb128 0x2
 3446 00aa 08       		.byte	0x8
 3447 00ab 04       		.byte	0x4
 3448 00ac 5C060000 		.4byte	.LASF15
 3449 00b0 02       		.uleb128 0x2
 3450 00b1 01       		.byte	0x1
 3451 00b2 08       		.byte	0x8
 3452 00b3 8A020000 		.4byte	.LASF16
 3453 00b7 05       		.uleb128 0x5
 3454 00b8 6B000000 		.4byte	0x6b
 3455 00bc 02       		.uleb128 0x2
 3456 00bd 04       		.byte	0x4
 3457 00be 07       		.byte	0x7
 3458 00bf B2040000 		.4byte	.LASF17
 3459 00c3 06       		.uleb128 0x6
 3460 00c4 6B040000 		.4byte	.LASF22
 3461 00c8 01       		.byte	0x1
 3462 00c9 01       		.byte	0x1
 3463 00ca 0101     		.2byte	0x101
 3464 00cc E9000000 		.4byte	0xe9
 3465 00d0 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 83


 3466 00d1 64010000 		.4byte	.LASF18
 3467 00d5 00       		.sleb128 0
 3468 00d6 07       		.uleb128 0x7
 3469 00d7 0C000000 		.4byte	.LASF19
 3470 00db 01       		.sleb128 1
 3471 00dc 07       		.uleb128 0x7
 3472 00dd 3A040000 		.4byte	.LASF20
 3473 00e1 02       		.sleb128 2
 3474 00e2 07       		.uleb128 0x7
 3475 00e3 43060000 		.4byte	.LASF21
 3476 00e7 03       		.sleb128 3
 3477 00e8 00       		.byte	0
 3478 00e9 06       		.uleb128 0x6
 3479 00ea FD020000 		.4byte	.LASF23
 3480 00ee 01       		.byte	0x1
 3481 00ef 01       		.byte	0x1
 3482 00f0 6901     		.2byte	0x169
 3483 00f2 0F010000 		.4byte	0x10f
 3484 00f6 07       		.uleb128 0x7
 3485 00f7 42010000 		.4byte	.LASF24
 3486 00fb 00       		.sleb128 0
 3487 00fc 07       		.uleb128 0x7
 3488 00fd 57050000 		.4byte	.LASF25
 3489 0101 01       		.sleb128 1
 3490 0102 07       		.uleb128 0x7
 3491 0103 FD030000 		.4byte	.LASF26
 3492 0107 02       		.sleb128 2
 3493 0108 07       		.uleb128 0x7
 3494 0109 E7040000 		.4byte	.LASF27
 3495 010d 03       		.sleb128 3
 3496 010e 00       		.byte	0
 3497 010f 06       		.uleb128 0x6
 3498 0110 58000000 		.4byte	.LASF28
 3499 0114 01       		.byte	0x1
 3500 0115 01       		.byte	0x1
 3501 0116 D401     		.2byte	0x1d4
 3502 0118 35010000 		.4byte	0x135
 3503 011c 07       		.uleb128 0x7
 3504 011d 8C030000 		.4byte	.LASF29
 3505 0121 00       		.sleb128 0
 3506 0122 07       		.uleb128 0x7
 3507 0123 B8060000 		.4byte	.LASF30
 3508 0127 01       		.sleb128 1
 3509 0128 07       		.uleb128 0x7
 3510 0129 CD040000 		.4byte	.LASF31
 3511 012d 02       		.sleb128 2
 3512 012e 07       		.uleb128 0x7
 3513 012f 2B060000 		.4byte	.LASF32
 3514 0133 03       		.sleb128 3
 3515 0134 00       		.byte	0
 3516 0135 06       		.uleb128 0x6
 3517 0136 D4020000 		.4byte	.LASF33
 3518 013a 01       		.byte	0x1
 3519 013b 01       		.byte	0x1
 3520 013c 5D02     		.2byte	0x25d
 3521 013e 5B010000 		.4byte	0x15b
 3522 0142 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 84


 3523 0143 F3040000 		.4byte	.LASF34
 3524 0147 00       		.sleb128 0
 3525 0148 07       		.uleb128 0x7
 3526 0149 BB020000 		.4byte	.LASF35
 3527 014d 01       		.sleb128 1
 3528 014e 07       		.uleb128 0x7
 3529 014f 49050000 		.4byte	.LASF36
 3530 0153 02       		.sleb128 2
 3531 0154 07       		.uleb128 0x7
 3532 0155 64020000 		.4byte	.LASF37
 3533 0159 03       		.sleb128 3
 3534 015a 00       		.byte	0
 3535 015b 06       		.uleb128 0x6
 3536 015c 84000000 		.4byte	.LASF38
 3537 0160 01       		.byte	0x1
 3538 0161 01       		.byte	0x1
 3539 0162 E502     		.2byte	0x2e5
 3540 0164 81010000 		.4byte	0x181
 3541 0168 07       		.uleb128 0x7
 3542 0169 AD000000 		.4byte	.LASF39
 3543 016d 00       		.sleb128 0
 3544 016e 07       		.uleb128 0x7
 3545 016f 9D010000 		.4byte	.LASF40
 3546 0173 01       		.sleb128 1
 3547 0174 07       		.uleb128 0x7
 3548 0175 4D000000 		.4byte	.LASF41
 3549 0179 02       		.sleb128 2
 3550 017a 07       		.uleb128 0x7
 3551 017b 63040000 		.4byte	.LASF42
 3552 017f 03       		.sleb128 3
 3553 0180 00       		.byte	0
 3554 0181 06       		.uleb128 0x6
 3555 0182 28030000 		.4byte	.LASF43
 3556 0186 01       		.byte	0x1
 3557 0187 01       		.byte	0x1
 3558 0188 4903     		.2byte	0x349
 3559 018a A7010000 		.4byte	0x1a7
 3560 018e 07       		.uleb128 0x7
 3561 018f 37020000 		.4byte	.LASF44
 3562 0193 00       		.sleb128 0
 3563 0194 07       		.uleb128 0x7
 3564 0195 34050000 		.4byte	.LASF45
 3565 0199 01       		.sleb128 1
 3566 019a 07       		.uleb128 0x7
 3567 019b E7010000 		.4byte	.LASF46
 3568 019f 02       		.sleb128 2
 3569 01a0 07       		.uleb128 0x7
 3570 01a1 9B040000 		.4byte	.LASF47
 3571 01a5 03       		.sleb128 3
 3572 01a6 00       		.byte	0
 3573 01a7 08       		.uleb128 0x8
 3574 01a8 47040000 		.4byte	.LASF77
 3575 01ac 01       		.byte	0x1
 3576 01ad 0A       		.byte	0xa
 3577 01ae 00000000 		.4byte	.LFB34
 3578 01b2 28000000 		.4byte	.LFE34-.LFB34
 3579 01b6 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 85


 3580 01b7 9C       		.byte	0x9c
 3581 01b8 CB010000 		.4byte	0x1cb
 3582 01bc 09       		.uleb128 0x9
 3583 01bd 76060000 		.4byte	.LASF50
 3584 01c1 01       		.byte	0x1
 3585 01c2 0C       		.byte	0xc
 3586 01c3 81000000 		.4byte	0x81
 3587 01c7 02       		.uleb128 0x2
 3588 01c8 91       		.byte	0x91
 3589 01c9 74       		.sleb128 -12
 3590 01ca 00       		.byte	0
 3591 01cb 0A       		.uleb128 0xa
 3592 01cc 10060000 		.4byte	.LASF51
 3593 01d0 01       		.byte	0x1
 3594 01d1 32       		.byte	0x32
 3595 01d2 76000000 		.4byte	0x76
 3596 01d6 00000000 		.4byte	.LFB35
 3597 01da 78000000 		.4byte	.LFE35-.LFB35
 3598 01de 01       		.uleb128 0x1
 3599 01df 9C       		.byte	0x9c
 3600 01e0 29020000 		.4byte	0x229
 3601 01e4 0B       		.uleb128 0xb
 3602 01e5 28040000 		.4byte	.LASF48
 3603 01e9 01       		.byte	0x1
 3604 01ea 32       		.byte	0x32
 3605 01eb 29020000 		.4byte	0x229
 3606 01ef 02       		.uleb128 0x2
 3607 01f0 91       		.byte	0x91
 3608 01f1 64       		.sleb128 -28
 3609 01f2 0B       		.uleb128 0xb
 3610 01f3 16000000 		.4byte	.LASF49
 3611 01f7 01       		.byte	0x1
 3612 01f8 32       		.byte	0x32
 3613 01f9 6B000000 		.4byte	0x6b
 3614 01fd 02       		.uleb128 0x2
 3615 01fe 91       		.byte	0x91
 3616 01ff 63       		.sleb128 -29
 3617 0200 0C       		.uleb128 0xc
 3618 0201 6900     		.ascii	"i\000"
 3619 0203 01       		.byte	0x1
 3620 0204 34       		.byte	0x34
 3621 0205 6B000000 		.4byte	0x6b
 3622 0209 02       		.uleb128 0x2
 3623 020a 91       		.byte	0x91
 3624 020b 77       		.sleb128 -9
 3625 020c 0C       		.uleb128 0xc
 3626 020d 73756D00 		.ascii	"sum\000"
 3627 0211 01       		.byte	0x1
 3628 0212 35       		.byte	0x35
 3629 0213 81000000 		.4byte	0x81
 3630 0217 02       		.uleb128 0x2
 3631 0218 91       		.byte	0x91
 3632 0219 70       		.sleb128 -16
 3633 021a 0C       		.uleb128 0xc
 3634 021b 61766700 		.ascii	"avg\000"
 3635 021f 01       		.byte	0x1
 3636 0220 36       		.byte	0x36
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 86


 3637 0221 76000000 		.4byte	0x76
 3638 0225 02       		.uleb128 0x2
 3639 0226 91       		.byte	0x91
 3640 0227 6E       		.sleb128 -18
 3641 0228 00       		.byte	0
 3642 0229 0D       		.uleb128 0xd
 3643 022a 04       		.byte	0x4
 3644 022b 76000000 		.4byte	0x76
 3645 022f 0E       		.uleb128 0xe
 3646 0230 C5000000 		.4byte	.LASF52
 3647 0234 01       		.byte	0x1
 3648 0235 42       		.byte	0x42
 3649 0236 6B000000 		.4byte	0x6b
 3650 023a 00000000 		.4byte	.LFB36
 3651 023e 3E000000 		.4byte	.LFE36-.LFB36
 3652 0242 01       		.uleb128 0x1
 3653 0243 9C       		.byte	0x9c
 3654 0244 65020000 		.4byte	0x265
 3655 0248 0B       		.uleb128 0xb
 3656 0249 E4020000 		.4byte	.LASF53
 3657 024d 01       		.byte	0x1
 3658 024e 42       		.byte	0x42
 3659 024f 6B000000 		.4byte	0x6b
 3660 0253 02       		.uleb128 0x2
 3661 0254 91       		.byte	0x91
 3662 0255 77       		.sleb128 -9
 3663 0256 0B       		.uleb128 0xb
 3664 0257 5F020000 		.4byte	.LASF54
 3665 025b 01       		.byte	0x1
 3666 025c 42       		.byte	0x42
 3667 025d 6B000000 		.4byte	0x6b
 3668 0261 02       		.uleb128 0x2
 3669 0262 91       		.byte	0x91
 3670 0263 76       		.sleb128 -10
 3671 0264 00       		.byte	0
 3672 0265 0A       		.uleb128 0xa
 3673 0266 83040000 		.4byte	.LASF55
 3674 026a 01       		.byte	0x1
 3675 026b 4F       		.byte	0x4f
 3676 026c 6B000000 		.4byte	0x6b
 3677 0270 00000000 		.4byte	.LFB37
 3678 0274 0C010000 		.4byte	.LFE37-.LFB37
 3679 0278 01       		.uleb128 0x1
 3680 0279 9C       		.byte	0x9c
 3681 027a C5020000 		.4byte	0x2c5
 3682 027e 0B       		.uleb128 0xb
 3683 027f A7030000 		.4byte	.LASF56
 3684 0283 01       		.byte	0x1
 3685 0284 4F       		.byte	0x4f
 3686 0285 29020000 		.4byte	0x229
 3687 0289 02       		.uleb128 0x2
 3688 028a 91       		.byte	0x91
 3689 028b 6C       		.sleb128 -20
 3690 028c 0B       		.uleb128 0xb
 3691 028d B3020000 		.4byte	.LASF57
 3692 0291 01       		.byte	0x1
 3693 0292 4F       		.byte	0x4f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 87


 3694 0293 6B000000 		.4byte	0x6b
 3695 0297 02       		.uleb128 0x2
 3696 0298 91       		.byte	0x91
 3697 0299 6B       		.sleb128 -21
 3698 029a 0B       		.uleb128 0xb
 3699 029b 47030000 		.4byte	.LASF58
 3700 029f 01       		.byte	0x1
 3701 02a0 4F       		.byte	0x4f
 3702 02a1 6B000000 		.4byte	0x6b
 3703 02a5 02       		.uleb128 0x2
 3704 02a6 91       		.byte	0x91
 3705 02a7 6A       		.sleb128 -22
 3706 02a8 0B       		.uleb128 0xb
 3707 02a9 CA030000 		.4byte	.LASF59
 3708 02ad 01       		.byte	0x1
 3709 02ae 4F       		.byte	0x4f
 3710 02af 5D000000 		.4byte	0x5d
 3711 02b3 02       		.uleb128 0x2
 3712 02b4 91       		.byte	0x91
 3713 02b5 64       		.sleb128 -28
 3714 02b6 09       		.uleb128 0x9
 3715 02b7 A5010000 		.4byte	.LASF60
 3716 02bb 01       		.byte	0x1
 3717 02bc 51       		.byte	0x51
 3718 02bd 6B000000 		.4byte	0x6b
 3719 02c1 02       		.uleb128 0x2
 3720 02c2 91       		.byte	0x91
 3721 02c3 77       		.sleb128 -9
 3722 02c4 00       		.byte	0
 3723 02c5 0A       		.uleb128 0xa
 3724 02c6 80010000 		.4byte	.LASF61
 3725 02ca 01       		.byte	0x1
 3726 02cb 75       		.byte	0x75
 3727 02cc 6B000000 		.4byte	0x6b
 3728 02d0 00000000 		.4byte	.LFB38
 3729 02d4 0C020000 		.4byte	.LFE38-.LFB38
 3730 02d8 01       		.uleb128 0x1
 3731 02d9 9C       		.byte	0x9c
 3732 02da 17030000 		.4byte	0x317
 3733 02de 0B       		.uleb128 0xb
 3734 02df 7A020000 		.4byte	.LASF62
 3735 02e3 01       		.byte	0x1
 3736 02e4 75       		.byte	0x75
 3737 02e5 6B000000 		.4byte	0x6b
 3738 02e9 02       		.uleb128 0x2
 3739 02ea 91       		.byte	0x91
 3740 02eb 6F       		.sleb128 -17
 3741 02ec 0B       		.uleb128 0xb
 3742 02ed A7030000 		.4byte	.LASF56
 3743 02f1 01       		.byte	0x1
 3744 02f2 75       		.byte	0x75
 3745 02f3 29020000 		.4byte	0x229
 3746 02f7 02       		.uleb128 0x2
 3747 02f8 91       		.byte	0x91
 3748 02f9 68       		.sleb128 -24
 3749 02fa 0B       		.uleb128 0xb
 3750 02fb E5030000 		.4byte	.LASF63
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 88


 3751 02ff 01       		.byte	0x1
 3752 0300 75       		.byte	0x75
 3753 0301 6B000000 		.4byte	0x6b
 3754 0305 02       		.uleb128 0x2
 3755 0306 91       		.byte	0x91
 3756 0307 6E       		.sleb128 -18
 3757 0308 0B       		.uleb128 0xb
 3758 0309 EA050000 		.4byte	.LASF64
 3759 030d 01       		.byte	0x1
 3760 030e 75       		.byte	0x75
 3761 030f 76000000 		.4byte	0x76
 3762 0313 02       		.uleb128 0x2
 3763 0314 91       		.byte	0x91
 3764 0315 6C       		.sleb128 -20
 3765 0316 00       		.byte	0
 3766 0317 0E       		.uleb128 0xe
 3767 0318 67030000 		.4byte	.LASF65
 3768 031c 01       		.byte	0x1
 3769 031d A3       		.byte	0xa3
 3770 031e 76000000 		.4byte	0x76
 3771 0322 00000000 		.4byte	.LFB39
 3772 0326 84000000 		.4byte	.LFE39-.LFB39
 3773 032a 01       		.uleb128 0x1
 3774 032b 9C       		.byte	0x9c
 3775 032c 93030000 		.4byte	0x393
 3776 0330 0B       		.uleb128 0xb
 3777 0331 FF040000 		.4byte	.LASF66
 3778 0335 01       		.byte	0x1
 3779 0336 A3       		.byte	0xa3
 3780 0337 93030000 		.4byte	0x393
 3781 033b 02       		.uleb128 0x2
 3782 033c 91       		.byte	0x91
 3783 033d 6C       		.sleb128 -20
 3784 033e 0B       		.uleb128 0xb
 3785 033f F3010000 		.4byte	.LASF67
 3786 0343 01       		.byte	0x1
 3787 0344 A3       		.byte	0xa3
 3788 0345 6B000000 		.4byte	0x6b
 3789 0349 02       		.uleb128 0x2
 3790 034a 91       		.byte	0x91
 3791 034b 6B       		.sleb128 -21
 3792 034c 0B       		.uleb128 0xb
 3793 034d F9010000 		.4byte	.LASF68
 3794 0351 01       		.byte	0x1
 3795 0352 A3       		.byte	0xa3
 3796 0353 6B000000 		.4byte	0x6b
 3797 0357 02       		.uleb128 0x2
 3798 0358 91       		.byte	0x91
 3799 0359 6A       		.sleb128 -22
 3800 035a 09       		.uleb128 0x9
 3801 035b EA050000 		.4byte	.LASF64
 3802 035f 01       		.byte	0x1
 3803 0360 A5       		.byte	0xa5
 3804 0361 76000000 		.4byte	0x76
 3805 0365 02       		.uleb128 0x2
 3806 0366 91       		.byte	0x91
 3807 0367 70       		.sleb128 -16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 89


 3808 0368 09       		.uleb128 0x9
 3809 0369 14020000 		.4byte	.LASF69
 3810 036d 01       		.byte	0x1
 3811 036e A6       		.byte	0xa6
 3812 036f 97000000 		.4byte	0x97
 3813 0373 02       		.uleb128 0x2
 3814 0374 91       		.byte	0x91
 3815 0375 76       		.sleb128 -10
 3816 0376 09       		.uleb128 0x9
 3817 0377 1A020000 		.4byte	.LASF70
 3818 037b 01       		.byte	0x1
 3819 037c A7       		.byte	0xa7
 3820 037d 97000000 		.4byte	0x97
 3821 0381 02       		.uleb128 0x2
 3822 0382 91       		.byte	0x91
 3823 0383 74       		.sleb128 -12
 3824 0384 09       		.uleb128 0x9
 3825 0385 20020000 		.4byte	.LASF71
 3826 0389 01       		.byte	0x1
 3827 038a A8       		.byte	0xa8
 3828 038b 97000000 		.4byte	0x97
 3829 038f 02       		.uleb128 0x2
 3830 0390 91       		.byte	0x91
 3831 0391 72       		.sleb128 -14
 3832 0392 00       		.byte	0
 3833 0393 0D       		.uleb128 0xd
 3834 0394 04       		.byte	0x4
 3835 0395 8C000000 		.4byte	0x8c
 3836 0399 0E       		.uleb128 0xe
 3837 039a D9030000 		.4byte	.LASF72
 3838 039e 01       		.byte	0x1
 3839 039f B1       		.byte	0xb1
 3840 03a0 76000000 		.4byte	0x76
 3841 03a4 00000000 		.4byte	.LFB40
 3842 03a8 20000000 		.4byte	.LFE40-.LFB40
 3843 03ac 01       		.uleb128 0x1
 3844 03ad 9C       		.byte	0x9c
 3845 03ae CF030000 		.4byte	0x3cf
 3846 03b2 0B       		.uleb128 0xb
 3847 03b3 D1030000 		.4byte	.LASF73
 3848 03b7 01       		.byte	0x1
 3849 03b8 B1       		.byte	0xb1
 3850 03b9 81000000 		.4byte	0x81
 3851 03bd 02       		.uleb128 0x2
 3852 03be 91       		.byte	0x91
 3853 03bf 6C       		.sleb128 -20
 3854 03c0 09       		.uleb128 0x9
 3855 03c1 A2020000 		.4byte	.LASF74
 3856 03c5 01       		.byte	0x1
 3857 03c6 B5       		.byte	0xb5
 3858 03c7 76000000 		.4byte	0x76
 3859 03cb 02       		.uleb128 0x2
 3860 03cc 91       		.byte	0x91
 3861 03cd 76       		.sleb128 -10
 3862 03ce 00       		.byte	0
 3863 03cf 0F       		.uleb128 0xf
 3864 03d0 A4040000 		.4byte	.LASF75
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 90


 3865 03d4 01       		.byte	0x1
 3866 03d5 B9       		.byte	0xb9
 3867 03d6 00000000 		.4byte	.LFB41
 3868 03da 08000000 		.4byte	.LFE41-.LFB41
 3869 03de 01       		.uleb128 0x1
 3870 03df 9C       		.byte	0x9c
 3871 03e0 10       		.uleb128 0x10
 3872 03e1 18050000 		.4byte	.LASF76
 3873 03e5 01       		.byte	0x1
 3874 03e6 C2       		.byte	0xc2
 3875 03e7 00000000 		.4byte	.LFB42
 3876 03eb 18000000 		.4byte	.LFE42-.LFB42
 3877 03ef 01       		.uleb128 0x1
 3878 03f0 9C       		.byte	0x9c
 3879 03f1 08       		.uleb128 0x8
 3880 03f2 C2010000 		.4byte	.LASF78
 3881 03f6 01       		.byte	0x1
 3882 03f7 CC       		.byte	0xcc
 3883 03f8 00000000 		.4byte	.LFB43
 3884 03fc 98000000 		.4byte	.LFE43-.LFB43
 3885 0400 01       		.uleb128 0x1
 3886 0401 9C       		.byte	0x9c
 3887 0402 31040000 		.4byte	0x431
 3888 0406 0B       		.uleb128 0xb
 3889 0407 6E060000 		.4byte	.LASF79
 3890 040b 01       		.byte	0x1
 3891 040c CC       		.byte	0xcc
 3892 040d 6B000000 		.4byte	0x6b
 3893 0411 02       		.uleb128 0x2
 3894 0412 91       		.byte	0x91
 3895 0413 67       		.sleb128 -25
 3896 0414 0B       		.uleb128 0xb
 3897 0415 A6060000 		.4byte	.LASF80
 3898 0419 01       		.byte	0x1
 3899 041a CC       		.byte	0xcc
 3900 041b 76000000 		.4byte	0x76
 3901 041f 02       		.uleb128 0x2
 3902 0420 91       		.byte	0x91
 3903 0421 64       		.sleb128 -28
 3904 0422 09       		.uleb128 0x9
 3905 0423 A7030000 		.4byte	.LASF56
 3906 0427 01       		.byte	0x1
 3907 0428 CE       		.byte	0xce
 3908 0429 31040000 		.4byte	0x431
 3909 042d 02       		.uleb128 0x2
 3910 042e 91       		.byte	0x91
 3911 042f 6C       		.sleb128 -20
 3912 0430 00       		.byte	0
 3913 0431 11       		.uleb128 0x11
 3914 0432 6B000000 		.4byte	0x6b
 3915 0436 41040000 		.4byte	0x441
 3916 043a 12       		.uleb128 0x12
 3917 043b BC000000 		.4byte	0xbc
 3918 043f 08       		.byte	0x8
 3919 0440 00       		.byte	0
 3920 0441 08       		.uleb128 0x8
 3921 0442 8B060000 		.4byte	.LASF81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 91


 3922 0446 01       		.byte	0x1
 3923 0447 DD       		.byte	0xdd
 3924 0448 00000000 		.4byte	.LFB44
 3925 044c 98000000 		.4byte	.LFE44-.LFB44
 3926 0450 01       		.uleb128 0x1
 3927 0451 9C       		.byte	0x9c
 3928 0452 81040000 		.4byte	0x481
 3929 0456 0B       		.uleb128 0xb
 3930 0457 6E060000 		.4byte	.LASF79
 3931 045b 01       		.byte	0x1
 3932 045c DD       		.byte	0xdd
 3933 045d 6B000000 		.4byte	0x6b
 3934 0461 02       		.uleb128 0x2
 3935 0462 91       		.byte	0x91
 3936 0463 67       		.sleb128 -25
 3937 0464 0B       		.uleb128 0xb
 3938 0465 96020000 		.4byte	.LASF82
 3939 0469 01       		.byte	0x1
 3940 046a DD       		.byte	0xdd
 3941 046b 76000000 		.4byte	0x76
 3942 046f 02       		.uleb128 0x2
 3943 0470 91       		.byte	0x91
 3944 0471 64       		.sleb128 -28
 3945 0472 09       		.uleb128 0x9
 3946 0473 A7030000 		.4byte	.LASF56
 3947 0477 01       		.byte	0x1
 3948 0478 DF       		.byte	0xdf
 3949 0479 31040000 		.4byte	0x431
 3950 047d 02       		.uleb128 0x2
 3951 047e 91       		.byte	0x91
 3952 047f 6C       		.sleb128 -20
 3953 0480 00       		.byte	0
 3954 0481 08       		.uleb128 0x8
 3955 0482 90040000 		.4byte	.LASF83
 3956 0486 01       		.byte	0x1
 3957 0487 EF       		.byte	0xef
 3958 0488 00000000 		.4byte	.LFB45
 3959 048c 98000000 		.4byte	.LFE45-.LFB45
 3960 0490 01       		.uleb128 0x1
 3961 0491 9C       		.byte	0x9c
 3962 0492 C1040000 		.4byte	0x4c1
 3963 0496 0B       		.uleb128 0xb
 3964 0497 6E060000 		.4byte	.LASF79
 3965 049b 01       		.byte	0x1
 3966 049c EF       		.byte	0xef
 3967 049d 6B000000 		.4byte	0x6b
 3968 04a1 02       		.uleb128 0x2
 3969 04a2 91       		.byte	0x91
 3970 04a3 67       		.sleb128 -25
 3971 04a4 0B       		.uleb128 0xb
 3972 04a5 4F010000 		.4byte	.LASF84
 3973 04a9 01       		.byte	0x1
 3974 04aa EF       		.byte	0xef
 3975 04ab 76000000 		.4byte	0x76
 3976 04af 02       		.uleb128 0x2
 3977 04b0 91       		.byte	0x91
 3978 04b1 64       		.sleb128 -28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 92


 3979 04b2 09       		.uleb128 0x9
 3980 04b3 A7030000 		.4byte	.LASF56
 3981 04b7 01       		.byte	0x1
 3982 04b8 F1       		.byte	0xf1
 3983 04b9 31040000 		.4byte	0x431
 3984 04bd 02       		.uleb128 0x2
 3985 04be 91       		.byte	0x91
 3986 04bf 6C       		.sleb128 -20
 3987 04c0 00       		.byte	0
 3988 04c1 13       		.uleb128 0x13
 3989 04c2 74030000 		.4byte	.LASF85
 3990 04c6 01       		.byte	0x1
 3991 04c7 0301     		.2byte	0x103
 3992 04c9 6B000000 		.4byte	0x6b
 3993 04cd 00000000 		.4byte	.LFB46
 3994 04d1 6C010000 		.4byte	.LFE46-.LFB46
 3995 04d5 01       		.uleb128 0x1
 3996 04d6 9C       		.byte	0x9c
 3997 04d7 25050000 		.4byte	0x525
 3998 04db 14       		.uleb128 0x14
 3999 04dc F0030000 		.4byte	.LASF86
 4000 04e0 01       		.byte	0x1
 4001 04e1 0301     		.2byte	0x103
 4002 04e3 6B000000 		.4byte	0x6b
 4003 04e7 02       		.uleb128 0x2
 4004 04e8 91       		.byte	0x91
 4005 04e9 67       		.sleb128 -25
 4006 04ea 14       		.uleb128 0x14
 4007 04eb 65000000 		.4byte	.LASF87
 4008 04ef 01       		.byte	0x1
 4009 04f0 0301     		.2byte	0x103
 4010 04f2 29020000 		.4byte	0x229
 4011 04f6 02       		.uleb128 0x2
 4012 04f7 91       		.byte	0x91
 4013 04f8 60       		.sleb128 -32
 4014 04f9 15       		.uleb128 0x15
 4015 04fa 6900     		.ascii	"i\000"
 4016 04fc 01       		.byte	0x1
 4017 04fd 1301     		.2byte	0x113
 4018 04ff 6B000000 		.4byte	0x6b
 4019 0503 02       		.uleb128 0x2
 4020 0504 91       		.byte	0x91
 4021 0505 6F       		.sleb128 -17
 4022 0506 15       		.uleb128 0x15
 4023 0507 61766700 		.ascii	"avg\000"
 4024 050b 01       		.byte	0x1
 4025 050c 1401     		.2byte	0x114
 4026 050e 76000000 		.4byte	0x76
 4027 0512 02       		.uleb128 0x2
 4028 0513 91       		.byte	0x91
 4029 0514 6A       		.sleb128 -22
 4030 0515 16       		.uleb128 0x16
 4031 0516 EA050000 		.4byte	.LASF64
 4032 051a 01       		.byte	0x1
 4033 051b 1501     		.2byte	0x115
 4034 051d 76000000 		.4byte	0x76
 4035 0521 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 93


 4036 0522 91       		.byte	0x91
 4037 0523 6C       		.sleb128 -20
 4038 0524 00       		.byte	0
 4039 0525 13       		.uleb128 0x13
 4040 0526 28050000 		.4byte	.LASF88
 4041 052a 01       		.byte	0x1
 4042 052b 6B01     		.2byte	0x16b
 4043 052d 6B000000 		.4byte	0x6b
 4044 0531 00000000 		.4byte	.LFB47
 4045 0535 6C010000 		.4byte	.LFE47-.LFB47
 4046 0539 01       		.uleb128 0x1
 4047 053a 9C       		.byte	0x9c
 4048 053b 89050000 		.4byte	0x589
 4049 053f 14       		.uleb128 0x14
 4050 0540 40000000 		.4byte	.LASF89
 4051 0544 01       		.byte	0x1
 4052 0545 6B01     		.2byte	0x16b
 4053 0547 6B000000 		.4byte	0x6b
 4054 054b 02       		.uleb128 0x2
 4055 054c 91       		.byte	0x91
 4056 054d 67       		.sleb128 -25
 4057 054e 14       		.uleb128 0x14
 4058 054f 4D060000 		.4byte	.LASF90
 4059 0553 01       		.byte	0x1
 4060 0554 6B01     		.2byte	0x16b
 4061 0556 29020000 		.4byte	0x229
 4062 055a 02       		.uleb128 0x2
 4063 055b 91       		.byte	0x91
 4064 055c 60       		.sleb128 -32
 4065 055d 15       		.uleb128 0x15
 4066 055e 6900     		.ascii	"i\000"
 4067 0560 01       		.byte	0x1
 4068 0561 7B01     		.2byte	0x17b
 4069 0563 6B000000 		.4byte	0x6b
 4070 0567 02       		.uleb128 0x2
 4071 0568 91       		.byte	0x91
 4072 0569 6F       		.sleb128 -17
 4073 056a 15       		.uleb128 0x15
 4074 056b 61766700 		.ascii	"avg\000"
 4075 056f 01       		.byte	0x1
 4076 0570 7C01     		.2byte	0x17c
 4077 0572 76000000 		.4byte	0x76
 4078 0576 02       		.uleb128 0x2
 4079 0577 91       		.byte	0x91
 4080 0578 6A       		.sleb128 -22
 4081 0579 16       		.uleb128 0x16
 4082 057a EA050000 		.4byte	.LASF64
 4083 057e 01       		.byte	0x1
 4084 057f 7D01     		.2byte	0x17d
 4085 0581 76000000 		.4byte	0x76
 4086 0585 02       		.uleb128 0x2
 4087 0586 91       		.byte	0x91
 4088 0587 6C       		.sleb128 -20
 4089 0588 00       		.byte	0
 4090 0589 13       		.uleb128 0x13
 4091 058a 31020000 		.4byte	.LASF91
 4092 058e 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 94


 4093 058f D501     		.2byte	0x1d5
 4094 0591 6B000000 		.4byte	0x6b
 4095 0595 00000000 		.4byte	.LFB48
 4096 0599 48020000 		.4byte	.LFE48-.LFB48
 4097 059d 01       		.uleb128 0x1
 4098 059e 9C       		.byte	0x9c
 4099 059f FC050000 		.4byte	0x5fc
 4100 05a3 14       		.uleb128 0x14
 4101 05a4 55010000 		.4byte	.LASF92
 4102 05a8 01       		.byte	0x1
 4103 05a9 D501     		.2byte	0x1d5
 4104 05ab 6B000000 		.4byte	0x6b
 4105 05af 02       		.uleb128 0x2
 4106 05b0 91       		.byte	0x91
 4107 05b1 67       		.sleb128 -25
 4108 05b2 14       		.uleb128 0x14
 4109 05b3 3D050000 		.4byte	.LASF93
 4110 05b7 01       		.byte	0x1
 4111 05b8 D501     		.2byte	0x1d5
 4112 05ba 29020000 		.4byte	0x229
 4113 05be 02       		.uleb128 0x2
 4114 05bf 91       		.byte	0x91
 4115 05c0 60       		.sleb128 -32
 4116 05c1 15       		.uleb128 0x15
 4117 05c2 6900     		.ascii	"i\000"
 4118 05c4 01       		.byte	0x1
 4119 05c5 DB01     		.2byte	0x1db
 4120 05c7 6B000000 		.4byte	0x6b
 4121 05cb 02       		.uleb128 0x2
 4122 05cc 91       		.byte	0x91
 4123 05cd 6F       		.sleb128 -17
 4124 05ce 15       		.uleb128 0x15
 4125 05cf 61766700 		.ascii	"avg\000"
 4126 05d3 01       		.byte	0x1
 4127 05d4 DC01     		.2byte	0x1dc
 4128 05d6 76000000 		.4byte	0x76
 4129 05da 02       		.uleb128 0x2
 4130 05db 91       		.byte	0x91
 4131 05dc 68       		.sleb128 -24
 4132 05dd 16       		.uleb128 0x16
 4133 05de EA050000 		.4byte	.LASF64
 4134 05e2 01       		.byte	0x1
 4135 05e3 DD01     		.2byte	0x1dd
 4136 05e5 76000000 		.4byte	0x76
 4137 05e9 02       		.uleb128 0x2
 4138 05ea 91       		.byte	0x91
 4139 05eb 6A       		.sleb128 -22
 4140 05ec 16       		.uleb128 0x16
 4141 05ed A2020000 		.4byte	.LASF74
 4142 05f1 01       		.byte	0x1
 4143 05f2 E001     		.2byte	0x1e0
 4144 05f4 76000000 		.4byte	0x76
 4145 05f8 02       		.uleb128 0x2
 4146 05f9 91       		.byte	0x91
 4147 05fa 6C       		.sleb128 -20
 4148 05fb 00       		.byte	0
 4149 05fc 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 95


 4150 05fd DE010000 		.4byte	.LASF94
 4151 0601 01       		.byte	0x1
 4152 0602 5E02     		.2byte	0x25e
 4153 0604 6B000000 		.4byte	0x6b
 4154 0608 00000000 		.4byte	.LFB49
 4155 060c 54020000 		.4byte	.LFE49-.LFB49
 4156 0610 01       		.uleb128 0x1
 4157 0611 9C       		.byte	0x9c
 4158 0612 6F060000 		.4byte	0x66f
 4159 0616 14       		.uleb128 0x14
 4160 0617 AD030000 		.4byte	.LASF95
 4161 061b 01       		.byte	0x1
 4162 061c 5E02     		.2byte	0x25e
 4163 061e 6B000000 		.4byte	0x6b
 4164 0622 02       		.uleb128 0x2
 4165 0623 91       		.byte	0x91
 4166 0624 67       		.sleb128 -25
 4167 0625 14       		.uleb128 0x14
 4168 0626 B6000000 		.4byte	.LASF96
 4169 062a 01       		.byte	0x1
 4170 062b 5E02     		.2byte	0x25e
 4171 062d 29020000 		.4byte	0x229
 4172 0631 02       		.uleb128 0x2
 4173 0632 91       		.byte	0x91
 4174 0633 60       		.sleb128 -32
 4175 0634 15       		.uleb128 0x15
 4176 0635 6900     		.ascii	"i\000"
 4177 0637 01       		.byte	0x1
 4178 0638 6402     		.2byte	0x264
 4179 063a 6B000000 		.4byte	0x6b
 4180 063e 02       		.uleb128 0x2
 4181 063f 91       		.byte	0x91
 4182 0640 6F       		.sleb128 -17
 4183 0641 15       		.uleb128 0x15
 4184 0642 61766700 		.ascii	"avg\000"
 4185 0646 01       		.byte	0x1
 4186 0647 6502     		.2byte	0x265
 4187 0649 76000000 		.4byte	0x76
 4188 064d 02       		.uleb128 0x2
 4189 064e 91       		.byte	0x91
 4190 064f 68       		.sleb128 -24
 4191 0650 16       		.uleb128 0x16
 4192 0651 EA050000 		.4byte	.LASF64
 4193 0655 01       		.byte	0x1
 4194 0656 6602     		.2byte	0x266
 4195 0658 76000000 		.4byte	0x76
 4196 065c 02       		.uleb128 0x2
 4197 065d 91       		.byte	0x91
 4198 065e 6A       		.sleb128 -22
 4199 065f 16       		.uleb128 0x16
 4200 0660 A2020000 		.4byte	.LASF74
 4201 0664 01       		.byte	0x1
 4202 0665 6702     		.2byte	0x267
 4203 0667 76000000 		.4byte	0x76
 4204 066b 02       		.uleb128 0x2
 4205 066c 91       		.byte	0x91
 4206 066d 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 96


 4207 066e 00       		.byte	0
 4208 066f 13       		.uleb128 0x13
 4209 0670 00000000 		.4byte	.LASF97
 4210 0674 01       		.byte	0x1
 4211 0675 E602     		.2byte	0x2e6
 4212 0677 6B000000 		.4byte	0x6b
 4213 067b 00000000 		.4byte	.LFB50
 4214 067f 5C010000 		.4byte	.LFE50-.LFB50
 4215 0683 01       		.uleb128 0x1
 4216 0684 9C       		.byte	0x9c
 4217 0685 D3060000 		.4byte	0x6d3
 4218 0689 14       		.uleb128 0x14
 4219 068a BD030000 		.4byte	.LASF98
 4220 068e 01       		.byte	0x1
 4221 068f E602     		.2byte	0x2e6
 4222 0691 6B000000 		.4byte	0x6b
 4223 0695 02       		.uleb128 0x2
 4224 0696 91       		.byte	0x91
 4225 0697 67       		.sleb128 -25
 4226 0698 14       		.uleb128 0x14
 4227 0699 DA040000 		.4byte	.LASF99
 4228 069d 01       		.byte	0x1
 4229 069e E602     		.2byte	0x2e6
 4230 06a0 29020000 		.4byte	0x229
 4231 06a4 02       		.uleb128 0x2
 4232 06a5 91       		.byte	0x91
 4233 06a6 60       		.sleb128 -32
 4234 06a7 15       		.uleb128 0x15
 4235 06a8 6900     		.ascii	"i\000"
 4236 06aa 01       		.byte	0x1
 4237 06ab EB02     		.2byte	0x2eb
 4238 06ad 6B000000 		.4byte	0x6b
 4239 06b1 02       		.uleb128 0x2
 4240 06b2 91       		.byte	0x91
 4241 06b3 6F       		.sleb128 -17
 4242 06b4 15       		.uleb128 0x15
 4243 06b5 61766700 		.ascii	"avg\000"
 4244 06b9 01       		.byte	0x1
 4245 06ba EC02     		.2byte	0x2ec
 4246 06bc 76000000 		.4byte	0x76
 4247 06c0 02       		.uleb128 0x2
 4248 06c1 91       		.byte	0x91
 4249 06c2 6A       		.sleb128 -22
 4250 06c3 16       		.uleb128 0x16
 4251 06c4 EA050000 		.4byte	.LASF64
 4252 06c8 01       		.byte	0x1
 4253 06c9 ED02     		.2byte	0x2ed
 4254 06cb 76000000 		.4byte	0x76
 4255 06cf 02       		.uleb128 0x2
 4256 06d0 91       		.byte	0x91
 4257 06d1 6C       		.sleb128 -20
 4258 06d2 00       		.byte	0
 4259 06d3 17       		.uleb128 0x17
 4260 06d4 6E000000 		.4byte	.LASF100
 4261 06d8 01       		.byte	0x1
 4262 06d9 4A03     		.2byte	0x34a
 4263 06db 00000000 		.4byte	.LFB51
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 97


 4264 06df DC000000 		.4byte	.LFE51-.LFB51
 4265 06e3 01       		.uleb128 0x1
 4266 06e4 9C       		.byte	0x9c
 4267 06e5 F9060000 		.4byte	0x6f9
 4268 06e9 16       		.uleb128 0x16
 4269 06ea EA050000 		.4byte	.LASF64
 4270 06ee 01       		.byte	0x1
 4271 06ef 4C03     		.2byte	0x34c
 4272 06f1 76000000 		.4byte	0x76
 4273 06f5 02       		.uleb128 0x2
 4274 06f6 91       		.byte	0x91
 4275 06f7 6E       		.sleb128 -18
 4276 06f8 00       		.byte	0
 4277 06f9 17       		.uleb128 0x17
 4278 06fa 26020000 		.4byte	.LASF101
 4279 06fe 01       		.byte	0x1
 4280 06ff 8C03     		.2byte	0x38c
 4281 0701 00000000 		.4byte	.LFB52
 4282 0705 0C010000 		.4byte	.LFE52-.LFB52
 4283 0709 01       		.uleb128 0x1
 4284 070a 9C       		.byte	0x9c
 4285 070b 27070000 		.4byte	0x727
 4286 070f 18       		.uleb128 0x18
 4287 0710 1E000000 		.4byte	.LBB2
 4288 0714 2C000000 		.4byte	.LBE2-.LBB2
 4289 0718 15       		.uleb128 0x15
 4290 0719 6A00     		.ascii	"j\000"
 4291 071b 01       		.byte	0x1
 4292 071c 9303     		.2byte	0x393
 4293 071e 6B000000 		.4byte	0x6b
 4294 0722 02       		.uleb128 0x2
 4295 0723 91       		.byte	0x91
 4296 0724 77       		.sleb128 -9
 4297 0725 00       		.byte	0
 4298 0726 00       		.byte	0
 4299 0727 19       		.uleb128 0x19
 4300 0728 35060000 		.4byte	.LASF102
 4301 072c 01       		.byte	0x1
 4302 072d CD03     		.2byte	0x3cd
 4303 072f 5D000000 		.4byte	0x5d
 4304 0733 00000000 		.4byte	.LFB53
 4305 0737 84010000 		.4byte	.LFE53-.LFB53
 4306 073b 01       		.uleb128 0x1
 4307 073c 9C       		.byte	0x9c
 4308 073d 12080000 		.4byte	0x812
 4309 0741 16       		.uleb128 0x16
 4310 0742 F2050000 		.4byte	.LASF103
 4311 0746 01       		.byte	0x1
 4312 0747 D803     		.2byte	0x3d8
 4313 0749 6B000000 		.4byte	0x6b
 4314 074d 02       		.uleb128 0x2
 4315 074e 91       		.byte	0x91
 4316 074f 6F       		.sleb128 -17
 4317 0750 16       		.uleb128 0x16
 4318 0751 3A060000 		.4byte	.LASF104
 4319 0755 01       		.byte	0x1
 4320 0756 D903     		.2byte	0x3d9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 98


 4321 0758 12080000 		.4byte	0x812
 4322 075c 03       		.uleb128 0x3
 4323 075d 91       		.byte	0x91
 4324 075e B87F     		.sleb128 -72
 4325 0760 16       		.uleb128 0x16
 4326 0761 53030000 		.4byte	.LASF105
 4327 0765 01       		.byte	0x1
 4328 0766 DA03     		.2byte	0x3da
 4329 0768 6B000000 		.4byte	0x6b
 4330 076c 02       		.uleb128 0x2
 4331 076d 91       		.byte	0x91
 4332 076e 6E       		.sleb128 -18
 4333 076f 16       		.uleb128 0x16
 4334 0770 9A060000 		.4byte	.LASF106
 4335 0774 01       		.byte	0x1
 4336 0775 DB03     		.2byte	0x3db
 4337 0777 12080000 		.4byte	0x812
 4338 077b 03       		.uleb128 0x3
 4339 077c 91       		.byte	0x91
 4340 077d 907F     		.sleb128 -112
 4341 077f 16       		.uleb128 0x16
 4342 0780 41020000 		.4byte	.LASF107
 4343 0784 01       		.byte	0x1
 4344 0785 DC03     		.2byte	0x3dc
 4345 0787 6B000000 		.4byte	0x6b
 4346 078b 02       		.uleb128 0x2
 4347 078c 91       		.byte	0x91
 4348 078d 6D       		.sleb128 -19
 4349 078e 16       		.uleb128 0x16
 4350 078f F2020000 		.4byte	.LASF108
 4351 0793 01       		.byte	0x1
 4352 0794 DD03     		.2byte	0x3dd
 4353 0796 12080000 		.4byte	0x812
 4354 079a 03       		.uleb128 0x3
 4355 079b 91       		.byte	0x91
 4356 079c E87E     		.sleb128 -152
 4357 079e 16       		.uleb128 0x16
 4358 079f 37000000 		.4byte	.LASF109
 4359 07a3 01       		.byte	0x1
 4360 07a4 DE03     		.2byte	0x3de
 4361 07a6 6B000000 		.4byte	0x6b
 4362 07aa 02       		.uleb128 0x2
 4363 07ab 91       		.byte	0x91
 4364 07ac 6C       		.sleb128 -20
 4365 07ad 16       		.uleb128 0x16
 4366 07ae 65000000 		.4byte	.LASF87
 4367 07b2 01       		.byte	0x1
 4368 07b3 DF03     		.2byte	0x3df
 4369 07b5 12080000 		.4byte	0x812
 4370 07b9 03       		.uleb128 0x3
 4371 07ba 91       		.byte	0x91
 4372 07bb C07E     		.sleb128 -192
 4373 07bd 16       		.uleb128 0x16
 4374 07be E9020000 		.4byte	.LASF110
 4375 07c2 01       		.byte	0x1
 4376 07c3 E003     		.2byte	0x3e0
 4377 07c5 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 99


 4378 07c9 02       		.uleb128 0x2
 4379 07ca 91       		.byte	0x91
 4380 07cb 6B       		.sleb128 -21
 4381 07cc 16       		.uleb128 0x16
 4382 07cd 4D060000 		.4byte	.LASF90
 4383 07d1 01       		.byte	0x1
 4384 07d2 E103     		.2byte	0x3e1
 4385 07d4 12080000 		.4byte	0x812
 4386 07d8 03       		.uleb128 0x3
 4387 07d9 91       		.byte	0x91
 4388 07da 987E     		.sleb128 -232
 4389 07dc 16       		.uleb128 0x16
 4390 07dd 56020000 		.4byte	.LASF111
 4391 07e1 01       		.byte	0x1
 4392 07e2 EB03     		.2byte	0x3eb
 4393 07e4 6B000000 		.4byte	0x6b
 4394 07e8 02       		.uleb128 0x2
 4395 07e9 91       		.byte	0x91
 4396 07ea 6A       		.sleb128 -22
 4397 07eb 16       		.uleb128 0x16
 4398 07ec FB050000 		.4byte	.LASF112
 4399 07f0 01       		.byte	0x1
 4400 07f1 EC03     		.2byte	0x3ec
 4401 07f3 97000000 		.4byte	0x97
 4402 07f7 02       		.uleb128 0x2
 4403 07f8 91       		.byte	0x91
 4404 07f9 62       		.sleb128 -30
 4405 07fa 18       		.uleb128 0x18
 4406 07fb 74000000 		.4byte	.LBB3
 4407 07ff 50000000 		.4byte	.LBE3-.LBB3
 4408 0803 15       		.uleb128 0x15
 4409 0804 6900     		.ascii	"i\000"
 4410 0806 01       		.byte	0x1
 4411 0807 0F04     		.2byte	0x40f
 4412 0809 5D000000 		.4byte	0x5d
 4413 080d 02       		.uleb128 0x2
 4414 080e 91       		.byte	0x91
 4415 080f 64       		.sleb128 -28
 4416 0810 00       		.byte	0
 4417 0811 00       		.byte	0
 4418 0812 11       		.uleb128 0x11
 4419 0813 76000000 		.4byte	0x76
 4420 0817 22080000 		.4byte	0x822
 4421 081b 12       		.uleb128 0x12
 4422 081c BC000000 		.4byte	0xbc
 4423 0820 13       		.byte	0x13
 4424 0821 00       		.byte	0
 4425 0822 11       		.uleb128 0x11
 4426 0823 8C000000 		.4byte	0x8c
 4427 0827 32080000 		.4byte	0x832
 4428 082b 12       		.uleb128 0x12
 4429 082c BC000000 		.4byte	0xbc
 4430 0830 15       		.byte	0x15
 4431 0831 00       		.byte	0
 4432 0832 1A       		.uleb128 0x1a
 4433 0833 6F020000 		.4byte	.LASF113
 4434 0837 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 100


 4435 0838 31       		.byte	0x31
 4436 0839 22080000 		.4byte	0x822
 4437 083d 05       		.uleb128 0x5
 4438 083e 03       		.byte	0x3
 4439 083f 00000000 		.4byte	data_array
 4440 0843 1A       		.uleb128 0x1a
 4441 0844 7C040000 		.4byte	.LASF114
 4442 0848 03       		.byte	0x3
 4443 0849 34       		.byte	0x34
 4444 084a 6B000000 		.4byte	0x6b
 4445 084e 05       		.uleb128 0x5
 4446 084f 03       		.byte	0x3
 4447 0850 00000000 		.4byte	wiznet
 4448 0854 1A       		.uleb128 0x1a
 4449 0855 20000000 		.4byte	.LASF115
 4450 0859 03       		.byte	0x3
 4451 085a 38       		.byte	0x38
 4452 085b 22080000 		.4byte	0x822
 4453 085f 05       		.uleb128 0x5
 4454 0860 03       		.byte	0x3
 4455 0861 00000000 		.4byte	test_array
 4456 0865 1A       		.uleb128 0x1a
 4457 0866 5F030000 		.4byte	.LASF116
 4458 086a 03       		.byte	0x3
 4459 086b 41       		.byte	0x41
 4460 086c 6B000000 		.4byte	0x6b
 4461 0870 05       		.uleb128 0x5
 4462 0871 03       		.byte	0x3
 4463 0872 00000000 		.4byte	WT_FLAG
 4464 0876 1A       		.uleb128 0x1a
 4465 0877 82020000 		.4byte	.LASF117
 4466 087b 03       		.byte	0x3
 4467 087c 42       		.byte	0x42
 4468 087d 6B000000 		.4byte	0x6b
 4469 0881 05       		.uleb128 0x5
 4470 0882 03       		.byte	0x3
 4471 0883 00000000 		.4byte	WR_FLAG
 4472 0887 1A       		.uleb128 0x1a
 4473 0888 63060000 		.4byte	.LASF118
 4474 088c 03       		.byte	0x3
 4475 088d 43       		.byte	0x43
 4476 088e 6B000000 		.4byte	0x6b
 4477 0892 05       		.uleb128 0x5
 4478 0893 03       		.byte	0x3
 4479 0894 00000000 		.4byte	ELBOW_FLAG
 4480 0898 1A       		.uleb128 0x1a
 4481 0899 7E030000 		.4byte	.LASF119
 4482 089d 03       		.byte	0x3
 4483 089e 44       		.byte	0x44
 4484 089f 6B000000 		.4byte	0x6b
 4485 08a3 05       		.uleb128 0x5
 4486 08a4 03       		.byte	0x3
 4487 08a5 00000000 		.4byte	SHOULDER_FLAG
 4488 08a9 1A       		.uleb128 0x1a
 4489 08aa AB020000 		.4byte	.LASF120
 4490 08ae 03       		.byte	0x3
 4491 08af 45       		.byte	0x45
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 101


 4492 08b0 6B000000 		.4byte	0x6b
 4493 08b4 05       		.uleb128 0x5
 4494 08b5 03       		.byte	0x3
 4495 08b6 00000000 		.4byte	BA_FLAG
 4496 08ba 1A       		.uleb128 0x1a
 4497 08bb 10030000 		.4byte	.LASF121
 4498 08bf 03       		.byte	0x3
 4499 08c0 46       		.byte	0x46
 4500 08c1 6B000000 		.4byte	0x6b
 4501 08c5 05       		.uleb128 0x5
 4502 08c6 03       		.byte	0x3
 4503 08c7 00000000 		.4byte	EFFECTOR_FLAG
 4504 08cb 1A       		.uleb128 0x1a
 4505 08cc 9D000000 		.4byte	.LASF122
 4506 08d0 03       		.byte	0x3
 4507 08d1 49       		.byte	0x49
 4508 08d2 76000000 		.4byte	0x76
 4509 08d6 05       		.uleb128 0x5
 4510 08d7 03       		.byte	0x3
 4511 08d8 00000000 		.4byte	dropped_packets
 4512 08dc 1A       		.uleb128 0x1a
 4513 08dd 6F010000 		.4byte	.LASF123
 4514 08e1 03       		.byte	0x3
 4515 08e2 4A       		.byte	0x4a
 4516 08e3 76000000 		.4byte	0x76
 4517 08e7 05       		.uleb128 0x5
 4518 08e8 03       		.byte	0x3
 4519 08e9 00000000 		.4byte	fail_safe_errors
 4520 08ed 1A       		.uleb128 0x1a
 4521 08ee 7E060000 		.4byte	.LASF124
 4522 08f2 03       		.byte	0x3
 4523 08f3 4B       		.byte	0x4b
 4524 08f4 76000000 		.4byte	0x76
 4525 08f8 05       		.uleb128 0x5
 4526 08f9 03       		.byte	0x3
 4527 08fa 00000000 		.4byte	shldr_errors
 4528 08fe 1A       		.uleb128 0x1a
 4529 08ff 2B000000 		.4byte	.LASF125
 4530 0903 03       		.byte	0x3
 4531 0904 4C       		.byte	0x4c
 4532 0905 76000000 		.4byte	0x76
 4533 0909 05       		.uleb128 0x5
 4534 090a 03       		.byte	0x3
 4535 090b 00000000 		.4byte	elbw_errors
 4536 090f 1A       		.uleb128 0x1a
 4537 0910 4C020000 		.4byte	.LASF126
 4538 0914 03       		.byte	0x3
 4539 0915 4D       		.byte	0x4d
 4540 0916 76000000 		.4byte	0x76
 4541 091a 05       		.uleb128 0x5
 4542 091b 03       		.byte	0x3
 4543 091c 00000000 		.4byte	BA_errors
 4544 0920 1A       		.uleb128 0x1a
 4545 0921 FF010000 		.4byte	.LASF127
 4546 0925 03       		.byte	0x3
 4547 0926 4E       		.byte	0x4e
 4548 0927 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 102


 4549 092b 05       		.uleb128 0x5
 4550 092c 03       		.byte	0x3
 4551 092d 00000000 		.4byte	WT_errors
 4552 0931 1A       		.uleb128 0x1a
 4553 0932 1E030000 		.4byte	.LASF128
 4554 0936 03       		.byte	0x3
 4555 0937 4F       		.byte	0x4f
 4556 0938 76000000 		.4byte	0x76
 4557 093c 05       		.uleb128 0x5
 4558 093d 03       		.byte	0x3
 4559 093e 00000000 		.4byte	WR_errors
 4560 0942 1A       		.uleb128 0x1a
 4561 0943 09020000 		.4byte	.LASF129
 4562 0947 03       		.byte	0x3
 4563 0948 50       		.byte	0x50
 4564 0949 76000000 		.4byte	0x76
 4565 094d 05       		.uleb128 0x5
 4566 094e 03       		.byte	0x3
 4567 094f 00000000 		.4byte	eff_errors
 4568 0953 1A       		.uleb128 0x1a
 4569 0954 D4010000 		.4byte	.LASF130
 4570 0958 03       		.byte	0x3
 4571 0959 52       		.byte	0x52
 4572 095a B7000000 		.4byte	0xb7
 4573 095e 05       		.uleb128 0x5
 4574 095f 03       		.byte	0x3
 4575 0960 00000000 		.4byte	timerFlag
 4576 0964 1B       		.uleb128 0x1b
 4577 0965 97030000 		.4byte	.LASF131
 4578 0969 01       		.byte	0x1
 4579 096a 0101     		.2byte	0x101
 4580 096c C3000000 		.4byte	0xc3
 4581 0970 05       		.uleb128 0x5
 4582 0971 03       		.byte	0x3
 4583 0972 00000000 		.4byte	wristTilt_state
 4584 0976 1B       		.uleb128 0x1b
 4585 0977 51040000 		.4byte	.LASF132
 4586 097b 01       		.byte	0x1
 4587 097c 6901     		.2byte	0x169
 4588 097e E9000000 		.4byte	0xe9
 4589 0982 05       		.uleb128 0x5
 4590 0983 03       		.byte	0x3
 4591 0984 00000000 		.4byte	wristRotate_state
 4592 0988 1B       		.uleb128 0x1b
 4593 0989 8B010000 		.4byte	.LASF133
 4594 098d 01       		.byte	0x1
 4595 098e D401     		.2byte	0x1d4
 4596 0990 0F010000 		.4byte	0x10f
 4597 0994 05       		.uleb128 0x5
 4598 0995 03       		.byte	0x3
 4599 0996 00000000 		.4byte	elbow_state
 4600 099a 1B       		.uleb128 0x1b
 4601 099b D4000000 		.4byte	.LASF134
 4602 099f 01       		.byte	0x1
 4603 09a0 5D02     		.2byte	0x25d
 4604 09a2 35010000 		.4byte	0x135
 4605 09a6 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 103


 4606 09a7 03       		.byte	0x3
 4607 09a8 00000000 		.4byte	shoulder_state
 4608 09ac 1B       		.uleb128 0x1b
 4609 09ad 16040000 		.4byte	.LASF135
 4610 09b1 01       		.byte	0x1
 4611 09b2 E502     		.2byte	0x2e5
 4612 09b4 5B010000 		.4byte	0x15b
 4613 09b8 05       		.uleb128 0x5
 4614 09b9 03       		.byte	0x3
 4615 09ba 00000000 		.4byte	baseAzimuth_state
 4616 09be 1B       		.uleb128 0x1b
 4617 09bf 38030000 		.4byte	.LASF136
 4618 09c3 01       		.byte	0x1
 4619 09c4 4903     		.2byte	0x349
 4620 09c6 81010000 		.4byte	0x181
 4621 09ca 05       		.uleb128 0x5
 4622 09cb 03       		.byte	0x3
 4623 09cc 00000000 		.4byte	effector_state
 4624 09d0 00       		.byte	0
 4625              		.section	.debug_abbrev,"",%progbits
 4626              	.Ldebug_abbrev0:
 4627 0000 01       		.uleb128 0x1
 4628 0001 11       		.uleb128 0x11
 4629 0002 01       		.byte	0x1
 4630 0003 25       		.uleb128 0x25
 4631 0004 0E       		.uleb128 0xe
 4632 0005 13       		.uleb128 0x13
 4633 0006 0B       		.uleb128 0xb
 4634 0007 03       		.uleb128 0x3
 4635 0008 0E       		.uleb128 0xe
 4636 0009 1B       		.uleb128 0x1b
 4637 000a 0E       		.uleb128 0xe
 4638 000b 55       		.uleb128 0x55
 4639 000c 17       		.uleb128 0x17
 4640 000d 11       		.uleb128 0x11
 4641 000e 01       		.uleb128 0x1
 4642 000f 10       		.uleb128 0x10
 4643 0010 17       		.uleb128 0x17
 4644 0011 00       		.byte	0
 4645 0012 00       		.byte	0
 4646 0013 02       		.uleb128 0x2
 4647 0014 24       		.uleb128 0x24
 4648 0015 00       		.byte	0
 4649 0016 0B       		.uleb128 0xb
 4650 0017 0B       		.uleb128 0xb
 4651 0018 3E       		.uleb128 0x3e
 4652 0019 0B       		.uleb128 0xb
 4653 001a 03       		.uleb128 0x3
 4654 001b 0E       		.uleb128 0xe
 4655 001c 00       		.byte	0
 4656 001d 00       		.byte	0
 4657 001e 03       		.uleb128 0x3
 4658 001f 24       		.uleb128 0x24
 4659 0020 00       		.byte	0
 4660 0021 0B       		.uleb128 0xb
 4661 0022 0B       		.uleb128 0xb
 4662 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 104


 4663 0024 0B       		.uleb128 0xb
 4664 0025 03       		.uleb128 0x3
 4665 0026 08       		.uleb128 0x8
 4666 0027 00       		.byte	0
 4667 0028 00       		.byte	0
 4668 0029 04       		.uleb128 0x4
 4669 002a 16       		.uleb128 0x16
 4670 002b 00       		.byte	0
 4671 002c 03       		.uleb128 0x3
 4672 002d 0E       		.uleb128 0xe
 4673 002e 3A       		.uleb128 0x3a
 4674 002f 0B       		.uleb128 0xb
 4675 0030 3B       		.uleb128 0x3b
 4676 0031 0B       		.uleb128 0xb
 4677 0032 49       		.uleb128 0x49
 4678 0033 13       		.uleb128 0x13
 4679 0034 00       		.byte	0
 4680 0035 00       		.byte	0
 4681 0036 05       		.uleb128 0x5
 4682 0037 35       		.uleb128 0x35
 4683 0038 00       		.byte	0
 4684 0039 49       		.uleb128 0x49
 4685 003a 13       		.uleb128 0x13
 4686 003b 00       		.byte	0
 4687 003c 00       		.byte	0
 4688 003d 06       		.uleb128 0x6
 4689 003e 04       		.uleb128 0x4
 4690 003f 01       		.byte	0x1
 4691 0040 03       		.uleb128 0x3
 4692 0041 0E       		.uleb128 0xe
 4693 0042 0B       		.uleb128 0xb
 4694 0043 0B       		.uleb128 0xb
 4695 0044 3A       		.uleb128 0x3a
 4696 0045 0B       		.uleb128 0xb
 4697 0046 3B       		.uleb128 0x3b
 4698 0047 05       		.uleb128 0x5
 4699 0048 01       		.uleb128 0x1
 4700 0049 13       		.uleb128 0x13
 4701 004a 00       		.byte	0
 4702 004b 00       		.byte	0
 4703 004c 07       		.uleb128 0x7
 4704 004d 28       		.uleb128 0x28
 4705 004e 00       		.byte	0
 4706 004f 03       		.uleb128 0x3
 4707 0050 0E       		.uleb128 0xe
 4708 0051 1C       		.uleb128 0x1c
 4709 0052 0D       		.uleb128 0xd
 4710 0053 00       		.byte	0
 4711 0054 00       		.byte	0
 4712 0055 08       		.uleb128 0x8
 4713 0056 2E       		.uleb128 0x2e
 4714 0057 01       		.byte	0x1
 4715 0058 3F       		.uleb128 0x3f
 4716 0059 19       		.uleb128 0x19
 4717 005a 03       		.uleb128 0x3
 4718 005b 0E       		.uleb128 0xe
 4719 005c 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 105


 4720 005d 0B       		.uleb128 0xb
 4721 005e 3B       		.uleb128 0x3b
 4722 005f 0B       		.uleb128 0xb
 4723 0060 27       		.uleb128 0x27
 4724 0061 19       		.uleb128 0x19
 4725 0062 11       		.uleb128 0x11
 4726 0063 01       		.uleb128 0x1
 4727 0064 12       		.uleb128 0x12
 4728 0065 06       		.uleb128 0x6
 4729 0066 40       		.uleb128 0x40
 4730 0067 18       		.uleb128 0x18
 4731 0068 9642     		.uleb128 0x2116
 4732 006a 19       		.uleb128 0x19
 4733 006b 01       		.uleb128 0x1
 4734 006c 13       		.uleb128 0x13
 4735 006d 00       		.byte	0
 4736 006e 00       		.byte	0
 4737 006f 09       		.uleb128 0x9
 4738 0070 34       		.uleb128 0x34
 4739 0071 00       		.byte	0
 4740 0072 03       		.uleb128 0x3
 4741 0073 0E       		.uleb128 0xe
 4742 0074 3A       		.uleb128 0x3a
 4743 0075 0B       		.uleb128 0xb
 4744 0076 3B       		.uleb128 0x3b
 4745 0077 0B       		.uleb128 0xb
 4746 0078 49       		.uleb128 0x49
 4747 0079 13       		.uleb128 0x13
 4748 007a 02       		.uleb128 0x2
 4749 007b 18       		.uleb128 0x18
 4750 007c 00       		.byte	0
 4751 007d 00       		.byte	0
 4752 007e 0A       		.uleb128 0xa
 4753 007f 2E       		.uleb128 0x2e
 4754 0080 01       		.byte	0x1
 4755 0081 3F       		.uleb128 0x3f
 4756 0082 19       		.uleb128 0x19
 4757 0083 03       		.uleb128 0x3
 4758 0084 0E       		.uleb128 0xe
 4759 0085 3A       		.uleb128 0x3a
 4760 0086 0B       		.uleb128 0xb
 4761 0087 3B       		.uleb128 0x3b
 4762 0088 0B       		.uleb128 0xb
 4763 0089 27       		.uleb128 0x27
 4764 008a 19       		.uleb128 0x19
 4765 008b 49       		.uleb128 0x49
 4766 008c 13       		.uleb128 0x13
 4767 008d 11       		.uleb128 0x11
 4768 008e 01       		.uleb128 0x1
 4769 008f 12       		.uleb128 0x12
 4770 0090 06       		.uleb128 0x6
 4771 0091 40       		.uleb128 0x40
 4772 0092 18       		.uleb128 0x18
 4773 0093 9642     		.uleb128 0x2116
 4774 0095 19       		.uleb128 0x19
 4775 0096 01       		.uleb128 0x1
 4776 0097 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 106


 4777 0098 00       		.byte	0
 4778 0099 00       		.byte	0
 4779 009a 0B       		.uleb128 0xb
 4780 009b 05       		.uleb128 0x5
 4781 009c 00       		.byte	0
 4782 009d 03       		.uleb128 0x3
 4783 009e 0E       		.uleb128 0xe
 4784 009f 3A       		.uleb128 0x3a
 4785 00a0 0B       		.uleb128 0xb
 4786 00a1 3B       		.uleb128 0x3b
 4787 00a2 0B       		.uleb128 0xb
 4788 00a3 49       		.uleb128 0x49
 4789 00a4 13       		.uleb128 0x13
 4790 00a5 02       		.uleb128 0x2
 4791 00a6 18       		.uleb128 0x18
 4792 00a7 00       		.byte	0
 4793 00a8 00       		.byte	0
 4794 00a9 0C       		.uleb128 0xc
 4795 00aa 34       		.uleb128 0x34
 4796 00ab 00       		.byte	0
 4797 00ac 03       		.uleb128 0x3
 4798 00ad 08       		.uleb128 0x8
 4799 00ae 3A       		.uleb128 0x3a
 4800 00af 0B       		.uleb128 0xb
 4801 00b0 3B       		.uleb128 0x3b
 4802 00b1 0B       		.uleb128 0xb
 4803 00b2 49       		.uleb128 0x49
 4804 00b3 13       		.uleb128 0x13
 4805 00b4 02       		.uleb128 0x2
 4806 00b5 18       		.uleb128 0x18
 4807 00b6 00       		.byte	0
 4808 00b7 00       		.byte	0
 4809 00b8 0D       		.uleb128 0xd
 4810 00b9 0F       		.uleb128 0xf
 4811 00ba 00       		.byte	0
 4812 00bb 0B       		.uleb128 0xb
 4813 00bc 0B       		.uleb128 0xb
 4814 00bd 49       		.uleb128 0x49
 4815 00be 13       		.uleb128 0x13
 4816 00bf 00       		.byte	0
 4817 00c0 00       		.byte	0
 4818 00c1 0E       		.uleb128 0xe
 4819 00c2 2E       		.uleb128 0x2e
 4820 00c3 01       		.byte	0x1
 4821 00c4 3F       		.uleb128 0x3f
 4822 00c5 19       		.uleb128 0x19
 4823 00c6 03       		.uleb128 0x3
 4824 00c7 0E       		.uleb128 0xe
 4825 00c8 3A       		.uleb128 0x3a
 4826 00c9 0B       		.uleb128 0xb
 4827 00ca 3B       		.uleb128 0x3b
 4828 00cb 0B       		.uleb128 0xb
 4829 00cc 27       		.uleb128 0x27
 4830 00cd 19       		.uleb128 0x19
 4831 00ce 49       		.uleb128 0x49
 4832 00cf 13       		.uleb128 0x13
 4833 00d0 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 107


 4834 00d1 01       		.uleb128 0x1
 4835 00d2 12       		.uleb128 0x12
 4836 00d3 06       		.uleb128 0x6
 4837 00d4 40       		.uleb128 0x40
 4838 00d5 18       		.uleb128 0x18
 4839 00d6 9742     		.uleb128 0x2117
 4840 00d8 19       		.uleb128 0x19
 4841 00d9 01       		.uleb128 0x1
 4842 00da 13       		.uleb128 0x13
 4843 00db 00       		.byte	0
 4844 00dc 00       		.byte	0
 4845 00dd 0F       		.uleb128 0xf
 4846 00de 2E       		.uleb128 0x2e
 4847 00df 00       		.byte	0
 4848 00e0 3F       		.uleb128 0x3f
 4849 00e1 19       		.uleb128 0x19
 4850 00e2 03       		.uleb128 0x3
 4851 00e3 0E       		.uleb128 0xe
 4852 00e4 3A       		.uleb128 0x3a
 4853 00e5 0B       		.uleb128 0xb
 4854 00e6 3B       		.uleb128 0x3b
 4855 00e7 0B       		.uleb128 0xb
 4856 00e8 11       		.uleb128 0x11
 4857 00e9 01       		.uleb128 0x1
 4858 00ea 12       		.uleb128 0x12
 4859 00eb 06       		.uleb128 0x6
 4860 00ec 40       		.uleb128 0x40
 4861 00ed 18       		.uleb128 0x18
 4862 00ee 9742     		.uleb128 0x2117
 4863 00f0 19       		.uleb128 0x19
 4864 00f1 00       		.byte	0
 4865 00f2 00       		.byte	0
 4866 00f3 10       		.uleb128 0x10
 4867 00f4 2E       		.uleb128 0x2e
 4868 00f5 00       		.byte	0
 4869 00f6 3F       		.uleb128 0x3f
 4870 00f7 19       		.uleb128 0x19
 4871 00f8 03       		.uleb128 0x3
 4872 00f9 0E       		.uleb128 0xe
 4873 00fa 3A       		.uleb128 0x3a
 4874 00fb 0B       		.uleb128 0xb
 4875 00fc 3B       		.uleb128 0x3b
 4876 00fd 0B       		.uleb128 0xb
 4877 00fe 11       		.uleb128 0x11
 4878 00ff 01       		.uleb128 0x1
 4879 0100 12       		.uleb128 0x12
 4880 0101 06       		.uleb128 0x6
 4881 0102 40       		.uleb128 0x40
 4882 0103 18       		.uleb128 0x18
 4883 0104 9642     		.uleb128 0x2116
 4884 0106 19       		.uleb128 0x19
 4885 0107 00       		.byte	0
 4886 0108 00       		.byte	0
 4887 0109 11       		.uleb128 0x11
 4888 010a 01       		.uleb128 0x1
 4889 010b 01       		.byte	0x1
 4890 010c 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 108


 4891 010d 13       		.uleb128 0x13
 4892 010e 01       		.uleb128 0x1
 4893 010f 13       		.uleb128 0x13
 4894 0110 00       		.byte	0
 4895 0111 00       		.byte	0
 4896 0112 12       		.uleb128 0x12
 4897 0113 21       		.uleb128 0x21
 4898 0114 00       		.byte	0
 4899 0115 49       		.uleb128 0x49
 4900 0116 13       		.uleb128 0x13
 4901 0117 2F       		.uleb128 0x2f
 4902 0118 0B       		.uleb128 0xb
 4903 0119 00       		.byte	0
 4904 011a 00       		.byte	0
 4905 011b 13       		.uleb128 0x13
 4906 011c 2E       		.uleb128 0x2e
 4907 011d 01       		.byte	0x1
 4908 011e 3F       		.uleb128 0x3f
 4909 011f 19       		.uleb128 0x19
 4910 0120 03       		.uleb128 0x3
 4911 0121 0E       		.uleb128 0xe
 4912 0122 3A       		.uleb128 0x3a
 4913 0123 0B       		.uleb128 0xb
 4914 0124 3B       		.uleb128 0x3b
 4915 0125 05       		.uleb128 0x5
 4916 0126 27       		.uleb128 0x27
 4917 0127 19       		.uleb128 0x19
 4918 0128 49       		.uleb128 0x49
 4919 0129 13       		.uleb128 0x13
 4920 012a 11       		.uleb128 0x11
 4921 012b 01       		.uleb128 0x1
 4922 012c 12       		.uleb128 0x12
 4923 012d 06       		.uleb128 0x6
 4924 012e 40       		.uleb128 0x40
 4925 012f 18       		.uleb128 0x18
 4926 0130 9642     		.uleb128 0x2116
 4927 0132 19       		.uleb128 0x19
 4928 0133 01       		.uleb128 0x1
 4929 0134 13       		.uleb128 0x13
 4930 0135 00       		.byte	0
 4931 0136 00       		.byte	0
 4932 0137 14       		.uleb128 0x14
 4933 0138 05       		.uleb128 0x5
 4934 0139 00       		.byte	0
 4935 013a 03       		.uleb128 0x3
 4936 013b 0E       		.uleb128 0xe
 4937 013c 3A       		.uleb128 0x3a
 4938 013d 0B       		.uleb128 0xb
 4939 013e 3B       		.uleb128 0x3b
 4940 013f 05       		.uleb128 0x5
 4941 0140 49       		.uleb128 0x49
 4942 0141 13       		.uleb128 0x13
 4943 0142 02       		.uleb128 0x2
 4944 0143 18       		.uleb128 0x18
 4945 0144 00       		.byte	0
 4946 0145 00       		.byte	0
 4947 0146 15       		.uleb128 0x15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 109


 4948 0147 34       		.uleb128 0x34
 4949 0148 00       		.byte	0
 4950 0149 03       		.uleb128 0x3
 4951 014a 08       		.uleb128 0x8
 4952 014b 3A       		.uleb128 0x3a
 4953 014c 0B       		.uleb128 0xb
 4954 014d 3B       		.uleb128 0x3b
 4955 014e 05       		.uleb128 0x5
 4956 014f 49       		.uleb128 0x49
 4957 0150 13       		.uleb128 0x13
 4958 0151 02       		.uleb128 0x2
 4959 0152 18       		.uleb128 0x18
 4960 0153 00       		.byte	0
 4961 0154 00       		.byte	0
 4962 0155 16       		.uleb128 0x16
 4963 0156 34       		.uleb128 0x34
 4964 0157 00       		.byte	0
 4965 0158 03       		.uleb128 0x3
 4966 0159 0E       		.uleb128 0xe
 4967 015a 3A       		.uleb128 0x3a
 4968 015b 0B       		.uleb128 0xb
 4969 015c 3B       		.uleb128 0x3b
 4970 015d 05       		.uleb128 0x5
 4971 015e 49       		.uleb128 0x49
 4972 015f 13       		.uleb128 0x13
 4973 0160 02       		.uleb128 0x2
 4974 0161 18       		.uleb128 0x18
 4975 0162 00       		.byte	0
 4976 0163 00       		.byte	0
 4977 0164 17       		.uleb128 0x17
 4978 0165 2E       		.uleb128 0x2e
 4979 0166 01       		.byte	0x1
 4980 0167 3F       		.uleb128 0x3f
 4981 0168 19       		.uleb128 0x19
 4982 0169 03       		.uleb128 0x3
 4983 016a 0E       		.uleb128 0xe
 4984 016b 3A       		.uleb128 0x3a
 4985 016c 0B       		.uleb128 0xb
 4986 016d 3B       		.uleb128 0x3b
 4987 016e 05       		.uleb128 0x5
 4988 016f 11       		.uleb128 0x11
 4989 0170 01       		.uleb128 0x1
 4990 0171 12       		.uleb128 0x12
 4991 0172 06       		.uleb128 0x6
 4992 0173 40       		.uleb128 0x40
 4993 0174 18       		.uleb128 0x18
 4994 0175 9642     		.uleb128 0x2116
 4995 0177 19       		.uleb128 0x19
 4996 0178 01       		.uleb128 0x1
 4997 0179 13       		.uleb128 0x13
 4998 017a 00       		.byte	0
 4999 017b 00       		.byte	0
 5000 017c 18       		.uleb128 0x18
 5001 017d 0B       		.uleb128 0xb
 5002 017e 01       		.byte	0x1
 5003 017f 11       		.uleb128 0x11
 5004 0180 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 110


 5005 0181 12       		.uleb128 0x12
 5006 0182 06       		.uleb128 0x6
 5007 0183 00       		.byte	0
 5008 0184 00       		.byte	0
 5009 0185 19       		.uleb128 0x19
 5010 0186 2E       		.uleb128 0x2e
 5011 0187 01       		.byte	0x1
 5012 0188 3F       		.uleb128 0x3f
 5013 0189 19       		.uleb128 0x19
 5014 018a 03       		.uleb128 0x3
 5015 018b 0E       		.uleb128 0xe
 5016 018c 3A       		.uleb128 0x3a
 5017 018d 0B       		.uleb128 0xb
 5018 018e 3B       		.uleb128 0x3b
 5019 018f 05       		.uleb128 0x5
 5020 0190 49       		.uleb128 0x49
 5021 0191 13       		.uleb128 0x13
 5022 0192 11       		.uleb128 0x11
 5023 0193 01       		.uleb128 0x1
 5024 0194 12       		.uleb128 0x12
 5025 0195 06       		.uleb128 0x6
 5026 0196 40       		.uleb128 0x40
 5027 0197 18       		.uleb128 0x18
 5028 0198 9642     		.uleb128 0x2116
 5029 019a 19       		.uleb128 0x19
 5030 019b 01       		.uleb128 0x1
 5031 019c 13       		.uleb128 0x13
 5032 019d 00       		.byte	0
 5033 019e 00       		.byte	0
 5034 019f 1A       		.uleb128 0x1a
 5035 01a0 34       		.uleb128 0x34
 5036 01a1 00       		.byte	0
 5037 01a2 03       		.uleb128 0x3
 5038 01a3 0E       		.uleb128 0xe
 5039 01a4 3A       		.uleb128 0x3a
 5040 01a5 0B       		.uleb128 0xb
 5041 01a6 3B       		.uleb128 0x3b
 5042 01a7 0B       		.uleb128 0xb
 5043 01a8 49       		.uleb128 0x49
 5044 01a9 13       		.uleb128 0x13
 5045 01aa 3F       		.uleb128 0x3f
 5046 01ab 19       		.uleb128 0x19
 5047 01ac 02       		.uleb128 0x2
 5048 01ad 18       		.uleb128 0x18
 5049 01ae 00       		.byte	0
 5050 01af 00       		.byte	0
 5051 01b0 1B       		.uleb128 0x1b
 5052 01b1 34       		.uleb128 0x34
 5053 01b2 00       		.byte	0
 5054 01b3 03       		.uleb128 0x3
 5055 01b4 0E       		.uleb128 0xe
 5056 01b5 3A       		.uleb128 0x3a
 5057 01b6 0B       		.uleb128 0xb
 5058 01b7 3B       		.uleb128 0x3b
 5059 01b8 05       		.uleb128 0x5
 5060 01b9 49       		.uleb128 0x49
 5061 01ba 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 111


 5062 01bb 3F       		.uleb128 0x3f
 5063 01bc 19       		.uleb128 0x19
 5064 01bd 02       		.uleb128 0x2
 5065 01be 18       		.uleb128 0x18
 5066 01bf 00       		.byte	0
 5067 01c0 00       		.byte	0
 5068 01c1 00       		.byte	0
 5069              		.section	.debug_aranges,"",%progbits
 5070 0000 B4000000 		.4byte	0xb4
 5071 0004 0200     		.2byte	0x2
 5072 0006 00000000 		.4byte	.Ldebug_info0
 5073 000a 04       		.byte	0x4
 5074 000b 00       		.byte	0
 5075 000c 0000     		.2byte	0
 5076 000e 0000     		.2byte	0
 5077 0010 00000000 		.4byte	.LFB34
 5078 0014 28000000 		.4byte	.LFE34-.LFB34
 5079 0018 00000000 		.4byte	.LFB35
 5080 001c 78000000 		.4byte	.LFE35-.LFB35
 5081 0020 00000000 		.4byte	.LFB36
 5082 0024 3E000000 		.4byte	.LFE36-.LFB36
 5083 0028 00000000 		.4byte	.LFB37
 5084 002c 0C010000 		.4byte	.LFE37-.LFB37
 5085 0030 00000000 		.4byte	.LFB38
 5086 0034 0C020000 		.4byte	.LFE38-.LFB38
 5087 0038 00000000 		.4byte	.LFB39
 5088 003c 84000000 		.4byte	.LFE39-.LFB39
 5089 0040 00000000 		.4byte	.LFB40
 5090 0044 20000000 		.4byte	.LFE40-.LFB40
 5091 0048 00000000 		.4byte	.LFB41
 5092 004c 08000000 		.4byte	.LFE41-.LFB41
 5093 0050 00000000 		.4byte	.LFB42
 5094 0054 18000000 		.4byte	.LFE42-.LFB42
 5095 0058 00000000 		.4byte	.LFB43
 5096 005c 98000000 		.4byte	.LFE43-.LFB43
 5097 0060 00000000 		.4byte	.LFB44
 5098 0064 98000000 		.4byte	.LFE44-.LFB44
 5099 0068 00000000 		.4byte	.LFB45
 5100 006c 98000000 		.4byte	.LFE45-.LFB45
 5101 0070 00000000 		.4byte	.LFB46
 5102 0074 6C010000 		.4byte	.LFE46-.LFB46
 5103 0078 00000000 		.4byte	.LFB47
 5104 007c 6C010000 		.4byte	.LFE47-.LFB47
 5105 0080 00000000 		.4byte	.LFB48
 5106 0084 48020000 		.4byte	.LFE48-.LFB48
 5107 0088 00000000 		.4byte	.LFB49
 5108 008c 54020000 		.4byte	.LFE49-.LFB49
 5109 0090 00000000 		.4byte	.LFB50
 5110 0094 5C010000 		.4byte	.LFE50-.LFB50
 5111 0098 00000000 		.4byte	.LFB51
 5112 009c DC000000 		.4byte	.LFE51-.LFB51
 5113 00a0 00000000 		.4byte	.LFB52
 5114 00a4 0C010000 		.4byte	.LFE52-.LFB52
 5115 00a8 00000000 		.4byte	.LFB53
 5116 00ac 84010000 		.4byte	.LFE53-.LFB53
 5117 00b0 00000000 		.4byte	0
 5118 00b4 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 112


 5119              		.section	.debug_ranges,"",%progbits
 5120              	.Ldebug_ranges0:
 5121 0000 00000000 		.4byte	.LFB34
 5122 0004 28000000 		.4byte	.LFE34
 5123 0008 00000000 		.4byte	.LFB35
 5124 000c 78000000 		.4byte	.LFE35
 5125 0010 00000000 		.4byte	.LFB36
 5126 0014 3E000000 		.4byte	.LFE36
 5127 0018 00000000 		.4byte	.LFB37
 5128 001c 0C010000 		.4byte	.LFE37
 5129 0020 00000000 		.4byte	.LFB38
 5130 0024 0C020000 		.4byte	.LFE38
 5131 0028 00000000 		.4byte	.LFB39
 5132 002c 84000000 		.4byte	.LFE39
 5133 0030 00000000 		.4byte	.LFB40
 5134 0034 20000000 		.4byte	.LFE40
 5135 0038 00000000 		.4byte	.LFB41
 5136 003c 08000000 		.4byte	.LFE41
 5137 0040 00000000 		.4byte	.LFB42
 5138 0044 18000000 		.4byte	.LFE42
 5139 0048 00000000 		.4byte	.LFB43
 5140 004c 98000000 		.4byte	.LFE43
 5141 0050 00000000 		.4byte	.LFB44
 5142 0054 98000000 		.4byte	.LFE44
 5143 0058 00000000 		.4byte	.LFB45
 5144 005c 98000000 		.4byte	.LFE45
 5145 0060 00000000 		.4byte	.LFB46
 5146 0064 6C010000 		.4byte	.LFE46
 5147 0068 00000000 		.4byte	.LFB47
 5148 006c 6C010000 		.4byte	.LFE47
 5149 0070 00000000 		.4byte	.LFB48
 5150 0074 48020000 		.4byte	.LFE48
 5151 0078 00000000 		.4byte	.LFB49
 5152 007c 54020000 		.4byte	.LFE49
 5153 0080 00000000 		.4byte	.LFB50
 5154 0084 5C010000 		.4byte	.LFE50
 5155 0088 00000000 		.4byte	.LFB51
 5156 008c DC000000 		.4byte	.LFE51
 5157 0090 00000000 		.4byte	.LFB52
 5158 0094 0C010000 		.4byte	.LFE52
 5159 0098 00000000 		.4byte	.LFB53
 5160 009c 84010000 		.4byte	.LFE53
 5161 00a0 00000000 		.4byte	0
 5162 00a4 00000000 		.4byte	0
 5163              		.section	.debug_line,"",%progbits
 5164              	.Ldebug_line0:
 5165 0000 7B040000 		.section	.debug_str,"MS",%progbits,1
 5165      02005100 
 5165      00000201 
 5165      FB0E0D00 
 5165      01010101 
 5166              	.LASF97:
 5167 0000 62617365 		.ascii	"baseAzimuth\000"
 5167      417A696D 
 5167      75746800 
 5168              	.LASF19:
 5169 000c 74696C74 		.ascii	"tilt_init\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 113


 5169      5F696E69 
 5169      7400
 5170              	.LASF49:
 5171 0016 6E756D5F 		.ascii	"num_items\000"
 5171      6974656D 
 5171      7300
 5172              	.LASF115:
 5173 0020 74657374 		.ascii	"test_array\000"
 5173      5F617272 
 5173      617900
 5174              	.LASF125:
 5175 002b 656C6277 		.ascii	"elbw_errors\000"
 5175      5F657272 
 5175      6F727300 
 5176              	.LASF109:
 5177 0037 57545F63 		.ascii	"WT_cspot\000"
 5177      73706F74 
 5177      00
 5178              	.LASF89:
 5179 0040 57525F61 		.ascii	"WR_arr_cspot\000"
 5179      72725F63 
 5179      73706F74 
 5179      00
 5180              	.LASF41:
 5181 004d 42415F65 		.ascii	"BA_execute\000"
 5181      78656375 
 5181      746500
 5182              	.LASF28:
 5183 0058 656C626F 		.ascii	"elbow_states\000"
 5183      775F7374 
 5183      61746573 
 5183      00
 5184              	.LASF87:
 5185 0065 57545F61 		.ascii	"WT_array\000"
 5185      72726179 
 5185      00
 5186              	.LASF100:
 5187 006e 65666665 		.ascii	"effector\000"
 5187      63746F72 
 5187      00
 5188              	.LASF8:
 5189 0077 756E7369 		.ascii	"unsigned int\000"
 5189      676E6564 
 5189      20696E74 
 5189      00
 5190              	.LASF38:
 5191 0084 62617365 		.ascii	"baseAzimuth_states\000"
 5191      417A696D 
 5191      7574685F 
 5191      73746174 
 5191      657300
 5192              	.LASF13:
 5193 0097 696E7431 		.ascii	"int16\000"
 5193      3600
 5194              	.LASF122:
 5195 009d 64726F70 		.ascii	"dropped_packets\000"
 5195      7065645F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 114


 5195      7061636B 
 5195      65747300 
 5196              	.LASF39:
 5197 00ad 42415F73 		.ascii	"BA_start\000"
 5197      74617274 
 5197      00
 5198              	.LASF96:
 5199 00b6 73686F75 		.ascii	"shoulder_array\000"
 5199      6C646572 
 5199      5F617272 
 5199      617900
 5200              	.LASF52:
 5201 00c5 6D61696E 		.ascii	"maintain_array\000"
 5201      7461696E 
 5201      5F617272 
 5201      617900
 5202              	.LASF134:
 5203 00d4 73686F75 		.ascii	"shoulder_state\000"
 5203      6C646572 
 5203      5F737461 
 5203      746500
 5204              	.LASF139:
 5205 00e3 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 5205      73657273 
 5205      5C53616D 
 5205      75656C5C 
 5205      446F6375 
 5206 0111 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 5206      5C61726D 
 5206      5F636F6E 
 5206      74726F6C 
 5206      6C65725F 
 5207 0141 00       		.ascii	"\000"
 5208              	.LASF24:
 5209 0142 726F7461 		.ascii	"rotate_start\000"
 5209      74655F73 
 5209      74617274 
 5209      00
 5210              	.LASF84:
 5211 014f 73706565 		.ascii	"speed\000"
 5211      6400
 5212              	.LASF92:
 5213 0155 656C6277 		.ascii	"elbw_arr_cspot\000"
 5213      5F617272 
 5213      5F637370 
 5213      6F7400
 5214              	.LASF18:
 5215 0164 74696C74 		.ascii	"tilt_start\000"
 5215      5F737461 
 5215      727400
 5216              	.LASF123:
 5217 016f 6661696C 		.ascii	"fail_safe_errors\000"
 5217      5F736166 
 5217      655F6572 
 5217      726F7273 
 5217      00
 5218              	.LASF61:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 115


 5219 0180 706F735F 		.ascii	"pos_to_vel\000"
 5219      746F5F76 
 5219      656C00
 5220              	.LASF133:
 5221 018b 656C626F 		.ascii	"elbow_state\000"
 5221      775F7374 
 5221      61746500 
 5222              	.LASF14:
 5223 0197 666C6F61 		.ascii	"float\000"
 5223      7400
 5224              	.LASF40:
 5225 019d 42415F69 		.ascii	"BA_init\000"
 5225      6E697400 
 5226              	.LASF60:
 5227 01a5 696E6465 		.ascii	"index\000"
 5227      7800
 5228              	.LASF7:
 5229 01ab 6C6F6E67 		.ascii	"long long unsigned int\000"
 5229      206C6F6E 
 5229      6720756E 
 5229      7369676E 
 5229      65642069 
 5230              	.LASF78:
 5231 01c2 53657276 		.ascii	"ServoGoalPosition\000"
 5231      6F476F61 
 5231      6C506F73 
 5231      6974696F 
 5231      6E00
 5232              	.LASF130:
 5233 01d4 74696D65 		.ascii	"timerFlag\000"
 5233      72466C61 
 5233      6700
 5234              	.LASF94:
 5235 01de 73686F75 		.ascii	"shoulder\000"
 5235      6C646572 
 5235      00
 5236              	.LASF46:
 5237 01e7 6566665F 		.ascii	"eff_execute\000"
 5237      65786563 
 5237      75746500 
 5238              	.LASF67:
 5239 01f3 62797465 		.ascii	"byte1\000"
 5239      3100
 5240              	.LASF68:
 5241 01f9 62797465 		.ascii	"byte2\000"
 5241      3200
 5242              	.LASF127:
 5243 01ff 57545F65 		.ascii	"WT_errors\000"
 5243      72726F72 
 5243      7300
 5244              	.LASF129:
 5245 0209 6566665F 		.ascii	"eff_errors\000"
 5245      6572726F 
 5245      727300
 5246              	.LASF69:
 5247 0214 74656D70 		.ascii	"temp1\000"
 5247      3100
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 116


 5248              	.LASF70:
 5249 021a 74656D70 		.ascii	"temp2\000"
 5249      3200
 5250              	.LASF71:
 5251 0220 74656D70 		.ascii	"temp3\000"
 5251      3300
 5252              	.LASF101:
 5253 0226 696E6974 		.ascii	"initialize\000"
 5253      69616C69 
 5253      7A6500
 5254              	.LASF91:
 5255 0231 656C626F 		.ascii	"elbow\000"
 5255      7700
 5256              	.LASF44:
 5257 0237 6566665F 		.ascii	"eff_start\000"
 5257      73746172 
 5257      7400
 5258              	.LASF107:
 5259 0241 656C6277 		.ascii	"elbw_cspot\000"
 5259      5F637370 
 5259      6F7400
 5260              	.LASF126:
 5261 024c 42415F65 		.ascii	"BA_errors\000"
 5261      72726F72 
 5261      7300
 5262              	.LASF111:
 5263 0256 66735F63 		.ascii	"fs_count\000"
 5263      6F756E74 
 5263      00
 5264              	.LASF54:
 5265 025f 53495A45 		.ascii	"SIZE\000"
 5265      00
 5266              	.LASF37:
 5267 0264 73686C64 		.ascii	"shldr_wait\000"
 5267      725F7761 
 5267      697400
 5268              	.LASF113:
 5269 026f 64617461 		.ascii	"data_array\000"
 5269      5F617272 
 5269      617900
 5270              	.LASF62:
 5271 027a 6375725F 		.ascii	"cur_pos\000"
 5271      706F7300 
 5272              	.LASF117:
 5273 0282 57525F46 		.ascii	"WR_FLAG\000"
 5273      4C414700 
 5274              	.LASF16:
 5275 028a 63686172 		.ascii	"char\000"
 5275      00
 5276              	.LASF10:
 5277 028f 75696E74 		.ascii	"uint16\000"
 5277      313600
 5278              	.LASF82:
 5279 0296 746F7271 		.ascii	"torque\000"
 5279      756500
 5280              	.LASF12:
 5281 029d 696E7438 		.ascii	"int8\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 117


 5281      00
 5282              	.LASF74:
 5283 02a2 66656564 		.ascii	"feedback\000"
 5283      6261636B 
 5283      00
 5284              	.LASF120:
 5285 02ab 42415F46 		.ascii	"BA_FLAG\000"
 5285      4C414700 
 5286              	.LASF57:
 5287 02b3 6172725F 		.ascii	"arr_pos\000"
 5287      706F7300 
 5288              	.LASF35:
 5289 02bb 73686C64 		.ascii	"shldr_init\000"
 5289      725F696E 
 5289      697400
 5290              	.LASF6:
 5291 02c6 6C6F6E67 		.ascii	"long long int\000"
 5291      206C6F6E 
 5291      6720696E 
 5291      7400
 5292              	.LASF33:
 5293 02d4 73686F75 		.ascii	"shoulder_states\000"
 5293      6C646572 
 5293      5F737461 
 5293      74657300 
 5294              	.LASF53:
 5295 02e4 63706F73 		.ascii	"cpos\000"
 5295      00
 5296              	.LASF110:
 5297 02e9 57525F63 		.ascii	"WR_cspot\000"
 5297      73706F74 
 5297      00
 5298              	.LASF108:
 5299 02f2 656C6277 		.ascii	"elbw_array\000"
 5299      5F617272 
 5299      617900
 5300              	.LASF23:
 5301 02fd 77726973 		.ascii	"wristRotate_states\000"
 5301      74526F74 
 5301      6174655F 
 5301      73746174 
 5301      657300
 5302              	.LASF121:
 5303 0310 45464645 		.ascii	"EFFECTOR_FLAG\000"
 5303      43544F52 
 5303      5F464C41 
 5303      4700
 5304              	.LASF128:
 5305 031e 57525F65 		.ascii	"WR_errors\000"
 5305      72726F72 
 5305      7300
 5306              	.LASF43:
 5307 0328 65666665 		.ascii	"effector_states\000"
 5307      63746F72 
 5307      5F737461 
 5307      74657300 
 5308              	.LASF136:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 118


 5309 0338 65666665 		.ascii	"effector_state\000"
 5309      63746F72 
 5309      5F737461 
 5309      746500
 5310              	.LASF58:
 5311 0347 73697A65 		.ascii	"size\000"
 5311      00
 5312              	.LASF11:
 5313 034c 75696E74 		.ascii	"uint32\000"
 5313      333200
 5314              	.LASF105:
 5315 0353 73686C64 		.ascii	"shldr_cspot\000"
 5315      725F6373 
 5315      706F7400 
 5316              	.LASF116:
 5317 035f 57545F46 		.ascii	"WT_FLAG\000"
 5317      4C414700 
 5318              	.LASF65:
 5319 0367 6D616B65 		.ascii	"make_command\000"
 5319      5F636F6D 
 5319      6D616E64 
 5319      00
 5320              	.LASF85:
 5321 0374 77726973 		.ascii	"wristTilt\000"
 5321      7454696C 
 5321      7400
 5322              	.LASF119:
 5323 037e 53484F55 		.ascii	"SHOULDER_FLAG\000"
 5323      4C444552 
 5323      5F464C41 
 5323      4700
 5324              	.LASF29:
 5325 038c 656C6277 		.ascii	"elbw_start\000"
 5325      5F737461 
 5325      727400
 5326              	.LASF131:
 5327 0397 77726973 		.ascii	"wristTilt_state\000"
 5327      7454696C 
 5327      745F7374 
 5327      61746500 
 5328              	.LASF56:
 5329 03a7 61727261 		.ascii	"array\000"
 5329      7900
 5330              	.LASF95:
 5331 03ad 73686C64 		.ascii	"shldr_arr_cspot\000"
 5331      725F6172 
 5331      725F6373 
 5331      706F7400 
 5332              	.LASF98:
 5333 03bd 42415F61 		.ascii	"BA_arr_cspot\000"
 5333      72725F63 
 5333      73706F74 
 5333      00
 5334              	.LASF59:
 5335 03ca 6368616E 		.ascii	"change\000"
 5335      676500
 5336              	.LASF73:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 119


 5337 03d1 6368616E 		.ascii	"channel\000"
 5337      6E656C00 
 5338              	.LASF72:
 5339 03d9 706F7446 		.ascii	"potFeedback\000"
 5339      65656462 
 5339      61636B00 
 5340              	.LASF63:
 5341 03e5 41525241 		.ascii	"ARRAY_SIZE\000"
 5341      595F5349 
 5341      5A4500
 5342              	.LASF86:
 5343 03f0 57545F61 		.ascii	"WT_arr_cspot\000"
 5343      72725F63 
 5343      73706F74 
 5343      00
 5344              	.LASF26:
 5345 03fd 726F7461 		.ascii	"rotate_control\000"
 5345      74655F63 
 5345      6F6E7472 
 5345      6F6C00
 5346              	.LASF2:
 5347 040c 73686F72 		.ascii	"short int\000"
 5347      7420696E 
 5347      7400
 5348              	.LASF135:
 5349 0416 62617365 		.ascii	"baseAzimuth_state\000"
 5349      417A696D 
 5349      7574685F 
 5349      73746174 
 5349      6500
 5350              	.LASF48:
 5351 0428 61765F61 		.ascii	"av_array\000"
 5351      72726179 
 5351      00
 5352              	.LASF4:
 5353 0431 6C6F6E67 		.ascii	"long int\000"
 5353      20696E74 
 5353      00
 5354              	.LASF20:
 5355 043a 74696C74 		.ascii	"tilt_control\000"
 5355      5F636F6E 
 5355      74726F6C 
 5355      00
 5356              	.LASF77:
 5357 0447 74696D65 		.ascii	"timer_isr\000"
 5357      725F6973 
 5357      7200
 5358              	.LASF132:
 5359 0451 77726973 		.ascii	"wristRotate_state\000"
 5359      74526F74 
 5359      6174655F 
 5359      73746174 
 5359      6500
 5360              	.LASF42:
 5361 0463 42415F77 		.ascii	"BA_wait\000"
 5361      61697400 
 5362              	.LASF22:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 120


 5363 046b 77726973 		.ascii	"wristTilt_states\000"
 5363      7454696C 
 5363      745F7374 
 5363      61746573 
 5363      00
 5364              	.LASF114:
 5365 047c 77697A6E 		.ascii	"wiznet\000"
 5365      657400
 5366              	.LASF55:
 5367 0483 63686563 		.ascii	"check_update\000"
 5367      6B5F7570 
 5367      64617465 
 5367      00
 5368              	.LASF83:
 5369 0490 53657276 		.ascii	"ServoSpeed\000"
 5369      6F537065 
 5369      656400
 5370              	.LASF47:
 5371 049b 6566665F 		.ascii	"eff_wait\000"
 5371      77616974 
 5371      00
 5372              	.LASF75:
 5373 04a4 73656E64 		.ascii	"send_feedback\000"
 5373      5F666565 
 5373      64626163 
 5373      6B00
 5374              	.LASF17:
 5375 04b2 73697A65 		.ascii	"sizetype\000"
 5375      74797065 
 5375      00
 5376              	.LASF5:
 5377 04bb 6C6F6E67 		.ascii	"long unsigned int\000"
 5377      20756E73 
 5377      69676E65 
 5377      6420696E 
 5377      7400
 5378              	.LASF31:
 5379 04cd 656C6277 		.ascii	"elbw_execute\000"
 5379      5F657865 
 5379      63757465 
 5379      00
 5380              	.LASF99:
 5381 04da 62617365 		.ascii	"baseAz_array\000"
 5381      417A5F61 
 5381      72726179 
 5381      00
 5382              	.LASF27:
 5383 04e7 726F7461 		.ascii	"rotate_wait\000"
 5383      74655F77 
 5383      61697400 
 5384              	.LASF34:
 5385 04f3 73686C64 		.ascii	"shldr_start\000"
 5385      725F7374 
 5385      61727400 
 5386              	.LASF66:
 5387 04ff 696E666F 		.ascii	"info_array\000"
 5387      5F617272 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 121


 5387      617900
 5388              	.LASF1:
 5389 050a 756E7369 		.ascii	"unsigned char\000"
 5389      676E6564 
 5389      20636861 
 5389      7200
 5390              	.LASF76:
 5391 0518 66696C6C 		.ascii	"fill_data_array\000"
 5391      5F646174 
 5391      615F6172 
 5391      72617900 
 5392              	.LASF88:
 5393 0528 77726973 		.ascii	"wristRotate\000"
 5393      74526F74 
 5393      61746500 
 5394              	.LASF45:
 5395 0534 6566665F 		.ascii	"eff_init\000"
 5395      696E6974 
 5395      00
 5396              	.LASF93:
 5397 053d 656C626F 		.ascii	"elbow_array\000"
 5397      775F6172 
 5397      72617900 
 5398              	.LASF36:
 5399 0549 73686C64 		.ascii	"shldr_execute\000"
 5399      725F6578 
 5399      65637574 
 5399      6500
 5400              	.LASF25:
 5401 0557 726F7461 		.ascii	"rotate_init\000"
 5401      74655F69 
 5401      6E697400 
 5402              	.LASF137:
 5403 0563 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 5403      4320342E 
 5403      382E3420 
 5403      32303134 
 5403      30353236 
 5404 0596 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 5404      20726576 
 5404      6973696F 
 5404      6E203231 
 5404      31333538 
 5405 05c9 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 5405      74643D67 
 5405      6E753939 
 5405      202D6666 
 5405      756E6374 
 5406              	.LASF64:
 5407 05ea 636F6D6D 		.ascii	"command\000"
 5407      616E6400 
 5408              	.LASF103:
 5409 05f2 42415F63 		.ascii	"BA_cspot\000"
 5409      73706F74 
 5409      00
 5410              	.LASF112:
 5411 05fb 74656D70 		.ascii	"temp_val\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 122


 5411      5F76616C 
 5411      00
 5412              	.LASF0:
 5413 0604 7369676E 		.ascii	"signed char\000"
 5413      65642063 
 5413      68617200 
 5414              	.LASF51:
 5415 0610 61766572 		.ascii	"average\000"
 5415      61676500 
 5416              	.LASF3:
 5417 0618 73686F72 		.ascii	"short unsigned int\000"
 5417      7420756E 
 5417      7369676E 
 5417      65642069 
 5417      6E7400
 5418              	.LASF32:
 5419 062b 656C6277 		.ascii	"elbw_wait\000"
 5419      5F776169 
 5419      7400
 5420              	.LASF102:
 5421 0635 6D61696E 		.ascii	"main\000"
 5421      00
 5422              	.LASF104:
 5423 063a 42415F61 		.ascii	"BA_array\000"
 5423      72726179 
 5423      00
 5424              	.LASF21:
 5425 0643 74696C74 		.ascii	"tilt_wait\000"
 5425      5F776169 
 5425      7400
 5426              	.LASF90:
 5427 064d 57525F61 		.ascii	"WR_array\000"
 5427      72726179 
 5427      00
 5428              	.LASF9:
 5429 0656 75696E74 		.ascii	"uint8\000"
 5429      3800
 5430              	.LASF15:
 5431 065c 646F7562 		.ascii	"double\000"
 5431      6C6500
 5432              	.LASF118:
 5433 0663 454C424F 		.ascii	"ELBOW_FLAG\000"
 5433      575F464C 
 5433      414700
 5434              	.LASF79:
 5435 066e 73657276 		.ascii	"servoID\000"
 5435      6F494400 
 5436              	.LASF50:
 5437 0676 6973725F 		.ascii	"isr_var\000"
 5437      76617200 
 5438              	.LASF124:
 5439 067e 73686C64 		.ascii	"shldr_errors\000"
 5439      725F6572 
 5439      726F7273 
 5439      00
 5440              	.LASF81:
 5441 068b 53657453 		.ascii	"SetServoTorque\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccMOMUjY.s 			page 123


 5441      6572766F 
 5441      546F7271 
 5441      756500
 5442              	.LASF106:
 5443 069a 73686C64 		.ascii	"shldr_array\000"
 5443      725F6172 
 5443      72617900 
 5444              	.LASF80:
 5445 06a6 706F7369 		.ascii	"position\000"
 5445      74696F6E 
 5445      00
 5446              	.LASF138:
 5447 06af 2E5C6D61 		.ascii	".\\main.c\000"
 5447      696E2E63 
 5447      00
 5448              	.LASF30:
 5449 06b8 656C6277 		.ascii	"elbw_init\000"
 5449      5F696E69 
 5449      7400
 5450              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

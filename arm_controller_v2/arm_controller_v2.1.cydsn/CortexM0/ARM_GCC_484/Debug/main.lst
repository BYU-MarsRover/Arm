ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,22,4
  18              		.comm	wiznet,1,1
  19              		.comm	test_array,14,4
  20              		.comm	elbw_arr_cspot,1,1
  21              		.comm	elbow_array,40,4
  22              		.comm	shldr_arr_cspot,1,1
  23              		.comm	shoulder_array,40,4
  24              		.comm	BA_arr_cspot,1,1
  25              		.comm	baseAz_array,40,4
  26              		.comm	WT_arr_cspot,1,1
  27              		.comm	WT_array,40,4
  28              		.comm	WR_arr_cspot,1,1
  29              		.comm	WR_array,40,4
  30              		.global	WT_FLAG
  31              		.bss
  32              		.type	WT_FLAG, %object
  33              		.size	WT_FLAG, 1
  34              	WT_FLAG:
  35 0000 00       		.space	1
  36              		.global	WR_FLAG
  37              		.type	WR_FLAG, %object
  38              		.size	WR_FLAG, 1
  39              	WR_FLAG:
  40 0001 00       		.space	1
  41              		.global	ELBOW_FLAG
  42              		.type	ELBOW_FLAG, %object
  43              		.size	ELBOW_FLAG, 1
  44              	ELBOW_FLAG:
  45 0002 00       		.space	1
  46              		.global	SHOULDER_FLAG
  47              		.type	SHOULDER_FLAG, %object
  48              		.size	SHOULDER_FLAG, 1
  49              	SHOULDER_FLAG:
  50 0003 00       		.space	1
  51              		.global	BA_FLAG
  52              		.type	BA_FLAG, %object
  53              		.size	BA_FLAG, 1
  54              	BA_FLAG:
  55 0004 00       		.space	1
  56              		.comm	timerFlag,1,1
  57              		.section	.text.timer_isr,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 2


  58              		.align	2
  59              		.global	timer_isr
  60              		.code	16
  61              		.thumb_func
  62              		.type	timer_isr, %function
  63              	timer_isr:
  64              	.LFB34:
  65              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
  66              		.loc 1 11 0
  67              		.cfi_startproc
  68 0000 80B5     		push	{r7, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 82B0     		sub	sp, sp, #8
  73              		.cfi_def_cfa_offset 16
  74 0004 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  76              		.loc 1 12 0
  77 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  78 000a 031C     		mov	r3, r0
  79 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
  80              		.loc 1 13 0
  81 000e 054B     		ldr	r3, .L2
  82 0010 0122     		mov	r2, #1
  83 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  84              		.loc 1 14 0
  85 0014 7B68     		ldr	r3, [r7, #4]
  86 0016 181C     		mov	r0, r3
  87 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
  88              		.loc 1 15 0
  89 001c BD46     		mov	sp, r7
  90 001e 02B0     		add	sp, sp, #8
  91              		@ sp needed
  92 0020 80BD     		pop	{r7, pc}
  93              	.L3:
  94 0022 C046     		.align	2
  95              	.L2:
  96 0024 00000000 		.word	timerFlag
  97              		.cfi_endproc
  98              	.LFE34:
  99              		.size	timer_isr, .-timer_isr
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 3


 100              		.global	__aeabi_uidiv
 101              		.section	.text.average,"ax",%progbits
 102              		.align	2
 103              		.global	average
 104              		.code	16
 105              		.thumb_func
 106              		.type	average, %function
 107              	average:
 108              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** //// function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
 109              		.loc 1 51 0
 110              		.cfi_startproc
 111 0000 80B5     		push	{r7, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 86B0     		sub	sp, sp, #24
 116              		.cfi_def_cfa_offset 32
 117 0004 00AF     		add	r7, sp, #0
 118              		.cfi_def_cfa_register 7
 119 0006 7860     		str	r0, [r7, #4]
 120 0008 0A1C     		mov	r2, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 4


 121 000a FB1C     		add	r3, r7, #3
 122 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
 123              		.loc 1 53 0
 124 000e 0023     		mov	r3, #0
 125 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 126              		.loc 1 54 0
 127 0012 3B1C     		mov	r3, r7
 128 0014 0E33     		add	r3, r3, #14
 129 0016 0022     		mov	r2, #0
 130 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 131              		.loc 1 56 0
 132 001a 3B1C     		mov	r3, r7
 133 001c 1733     		add	r3, r3, #23
 134 001e 0022     		mov	r2, #0
 135 0020 1A70     		strb	r2, [r3]
 136 0022 10E0     		b	.L5
 137              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
 138              		.loc 1 58 0 discriminator 2
 139 0024 3B1C     		mov	r3, r7
 140 0026 1733     		add	r3, r3, #23
 141 0028 1B78     		ldrb	r3, [r3]
 142 002a 5B00     		lsl	r3, r3, #1
 143 002c 7A68     		ldr	r2, [r7, #4]
 144 002e D318     		add	r3, r2, r3
 145 0030 1B88     		ldrh	r3, [r3]
 146 0032 3A69     		ldr	r2, [r7, #16]
 147 0034 D318     		add	r3, r2, r3
 148 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 149              		.loc 1 56 0 discriminator 2
 150 0038 3B1C     		mov	r3, r7
 151 003a 1733     		add	r3, r3, #23
 152 003c 1A78     		ldrb	r2, [r3]
 153 003e 3B1C     		mov	r3, r7
 154 0040 1733     		add	r3, r3, #23
 155 0042 0132     		add	r2, r2, #1
 156 0044 1A70     		strb	r2, [r3]
 157              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 158              		.loc 1 56 0 is_stmt 0 discriminator 1
 159 0046 3A1C     		mov	r2, r7
 160 0048 1732     		add	r2, r2, #23
 161 004a FB1C     		add	r3, r7, #3
 162 004c 1278     		ldrb	r2, [r2]
 163 004e 1B78     		ldrb	r3, [r3]
 164 0050 9A42     		cmp	r2, r3
 165 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 5


 166              		.loc 1 61 0 is_stmt 1
 167 0054 FB1C     		add	r3, r7, #3
 168 0056 1B78     		ldrb	r3, [r3]
 169 0058 3869     		ldr	r0, [r7, #16]
 170 005a 191C     		mov	r1, r3
 171 005c FFF7FEFF 		bl	__aeabi_uidiv
 172 0060 031C     		mov	r3, r0
 173 0062 1A1C     		mov	r2, r3
 174 0064 3B1C     		mov	r3, r7
 175 0066 0E33     		add	r3, r3, #14
 176 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 177              		.loc 1 63 0
 178 006a 3B1C     		mov	r3, r7
 179 006c 0E33     		add	r3, r3, #14
 180 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 181              		.loc 1 64 0
 182 0070 181C     		mov	r0, r3
 183 0072 BD46     		mov	sp, r7
 184 0074 06B0     		add	sp, sp, #24
 185              		@ sp needed
 186 0076 80BD     		pop	{r7, pc}
 187              		.cfi_endproc
 188              	.LFE35:
 189              		.size	average, .-average
 190              		.section	.text.pos_to_vel,"ax",%progbits
 191              		.align	2
 192              		.global	pos_to_vel
 193              		.code	16
 194              		.thumb_func
 195              		.type	pos_to_vel, %function
 196              	pos_to_vel:
 197              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** void pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
  67:.\main.c      **** {
 198              		.loc 1 67 0
 199              		.cfi_startproc
 200 0000 80B5     		push	{r7, lr}
 201              		.cfi_def_cfa_offset 8
 202              		.cfi_offset 7, -8
 203              		.cfi_offset 14, -4
 204 0002 82B0     		sub	sp, sp, #8
 205              		.cfi_def_cfa_offset 16
 206 0004 00AF     		add	r7, sp, #0
 207              		.cfi_def_cfa_register 7
 208 0006 3960     		str	r1, [r7]
 209 0008 111C     		mov	r1, r2
 210 000a 1A1C     		mov	r2, r3
 211 000c FB1D     		add	r3, r7, #7
 212 000e 1870     		strb	r0, [r3]
 213 0010 BB1D     		add	r3, r7, #6
 214 0012 1970     		strb	r1, [r3]
 215 0014 3B1D     		add	r3, r7, #4
 216 0016 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 6


  68:.\main.c      ****     if(command >= 1000 && command < 1100)
 217              		.loc 1 68 0
 218 0018 3B1D     		add	r3, r7, #4
 219 001a 1A88     		ldrh	r2, [r3]
 220 001c C54B     		ldr	r3, .L70
 221 001e 9A42     		cmp	r2, r3
 222 0020 00D8     		bhi	.LCB141
 223 0022 7CE0     		b	.L9	@long jump
 224              	.LCB141:
 225              		.loc 1 68 0 is_stmt 0 discriminator 1
 226 0024 3B1D     		add	r3, r7, #4
 227 0026 1A88     		ldrh	r2, [r3]
 228 0028 C34B     		ldr	r3, .L70+4
 229 002a 9A42     		cmp	r2, r3
 230 002c 00D9     		bls	.LCB146
 231 002e 76E0     		b	.L9	@long jump
 232              	.LCB146:
  69:.\main.c      ****     {
  70:.\main.c      ****         if(cur_pos != 0)
 233              		.loc 1 70 0 is_stmt 1
 234 0030 FB1D     		add	r3, r7, #7
 235 0032 1B78     		ldrb	r3, [r3]
 236 0034 002B     		cmp	r3, #0
 237 0036 34D0     		beq	.L10
  71:.\main.c      ****         {
  72:.\main.c      ****             if(array[cur_pos - 1] >= 1020)
 238              		.loc 1 72 0
 239 0038 FB1D     		add	r3, r7, #7
 240 003a 1B78     		ldrb	r3, [r3]
 241 003c BF49     		ldr	r1, .L70+8
 242 003e 5B18     		add	r3, r3, r1
 243 0040 5B00     		lsl	r3, r3, #1
 244 0042 3A68     		ldr	r2, [r7]
 245 0044 D318     		add	r3, r2, r3
 246 0046 1A88     		ldrh	r2, [r3]
 247 0048 BD4B     		ldr	r3, .L70+12
 248 004a 9A42     		cmp	r2, r3
 249 004c 10D9     		bls	.L11
  73:.\main.c      ****             {
  74:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] - 20);
 250              		.loc 1 74 0
 251 004e FB1D     		add	r3, r7, #7
 252 0050 1B78     		ldrb	r3, [r3]
 253 0052 5B00     		lsl	r3, r3, #1
 254 0054 3A68     		ldr	r2, [r7]
 255 0056 D318     		add	r3, r2, r3
 256 0058 FA1D     		add	r2, r7, #7
 257 005a 1278     		ldrb	r2, [r2]
 258 005c B749     		ldr	r1, .L70+8
 259 005e 5218     		add	r2, r2, r1
 260 0060 5200     		lsl	r2, r2, #1
 261 0062 3968     		ldr	r1, [r7]
 262 0064 8A18     		add	r2, r1, r2
 263 0066 1288     		ldrh	r2, [r2]
 264 0068 143A     		sub	r2, r2, #20
 265 006a 92B2     		uxth	r2, r2
 266 006c 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 7


 267 006e 07E0     		b	.L12
 268              	.L11:
  75:.\main.c      ****             }
  76:.\main.c      ****             else
  77:.\main.c      ****             {
  78:.\main.c      ****                 array[cur_pos] = 1000;
 269              		.loc 1 78 0
 270 0070 FB1D     		add	r3, r7, #7
 271 0072 1B78     		ldrb	r3, [r3]
 272 0074 5B00     		lsl	r3, r3, #1
 273 0076 3A68     		ldr	r2, [r7]
 274 0078 D318     		add	r3, r2, r3
 275 007a FA22     		mov	r2, #250
 276 007c 9200     		lsl	r2, r2, #2
 277 007e 1A80     		strh	r2, [r3]
 278              	.L12:
  79:.\main.c      ****             }
  80:.\main.c      ****             
  81:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 279              		.loc 1 81 0
 280 0080 FB1D     		add	r3, r7, #7
 281 0082 1A78     		ldrb	r2, [r3]
 282 0084 BB1D     		add	r3, r7, #6
 283 0086 1B78     		ldrb	r3, [r3]
 284 0088 013B     		sub	r3, r3, #1
 285 008a 9A42     		cmp	r2, r3
 286 008c 05DA     		bge	.L13
  82:.\main.c      ****             {
  83:.\main.c      ****                 cur_pos++;
 287              		.loc 1 83 0
 288 008e FB1D     		add	r3, r7, #7
 289 0090 1A78     		ldrb	r2, [r3]
 290 0092 FB1D     		add	r3, r7, #7
 291 0094 0132     		add	r2, r2, #1
 292 0096 1A70     		strb	r2, [r3]
 293 0098 40E0     		b	.L15
 294              	.L13:
  84:.\main.c      ****             }
  85:.\main.c      ****             else
  86:.\main.c      ****             {
  87:.\main.c      ****                 cur_pos = 0;
 295              		.loc 1 87 0
 296 009a FB1D     		add	r3, r7, #7
 297 009c 0022     		mov	r2, #0
 298 009e 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 299              		.loc 1 70 0
 300 00a0 60E2     		b	.L8
 301              	.L10:
  88:.\main.c      ****             }
  89:.\main.c      ****         }
  90:.\main.c      ****         else if(cur_pos == 0)
 302              		.loc 1 90 0
 303 00a2 FB1D     		add	r3, r7, #7
 304 00a4 1B78     		ldrb	r3, [r3]
 305 00a6 002B     		cmp	r3, #0
 306 00a8 34D1     		bne	.L16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 8


  91:.\main.c      ****         {
  92:.\main.c      ****             if(array[ARRAY_SIZE - 1] >= 1020)
 307              		.loc 1 92 0
 308 00aa BB1D     		add	r3, r7, #6
 309 00ac 1B78     		ldrb	r3, [r3]
 310 00ae A34A     		ldr	r2, .L70+8
 311 00b0 9B18     		add	r3, r3, r2
 312 00b2 5B00     		lsl	r3, r3, #1
 313 00b4 3A68     		ldr	r2, [r7]
 314 00b6 D318     		add	r3, r2, r3
 315 00b8 1A88     		ldrh	r2, [r3]
 316 00ba A14B     		ldr	r3, .L70+12
 317 00bc 9A42     		cmp	r2, r3
 318 00be 10D9     		bls	.L17
  93:.\main.c      ****             {
  94:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] - 20);
 319              		.loc 1 94 0
 320 00c0 FB1D     		add	r3, r7, #7
 321 00c2 1B78     		ldrb	r3, [r3]
 322 00c4 5B00     		lsl	r3, r3, #1
 323 00c6 3A68     		ldr	r2, [r7]
 324 00c8 D318     		add	r3, r2, r3
 325 00ca BA1D     		add	r2, r7, #6
 326 00cc 1278     		ldrb	r2, [r2]
 327 00ce 9B49     		ldr	r1, .L70+8
 328 00d0 5218     		add	r2, r2, r1
 329 00d2 5200     		lsl	r2, r2, #1
 330 00d4 3968     		ldr	r1, [r7]
 331 00d6 8A18     		add	r2, r1, r2
 332 00d8 1288     		ldrh	r2, [r2]
 333 00da 143A     		sub	r2, r2, #20
 334 00dc 92B2     		uxth	r2, r2
 335 00de 1A80     		strh	r2, [r3]
 336 00e0 07E0     		b	.L18
 337              	.L17:
  95:.\main.c      ****             }
  96:.\main.c      ****             else
  97:.\main.c      ****             {
  98:.\main.c      ****                 array[cur_pos] = 1000;
 338              		.loc 1 98 0
 339 00e2 FB1D     		add	r3, r7, #7
 340 00e4 1B78     		ldrb	r3, [r3]
 341 00e6 5B00     		lsl	r3, r3, #1
 342 00e8 3A68     		ldr	r2, [r7]
 343 00ea D318     		add	r3, r2, r3
 344 00ec FA22     		mov	r2, #250
 345 00ee 9200     		lsl	r2, r2, #2
 346 00f0 1A80     		strh	r2, [r3]
 347              	.L18:
  99:.\main.c      ****             }
 100:.\main.c      ****             
 101:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 348              		.loc 1 101 0
 349 00f2 FB1D     		add	r3, r7, #7
 350 00f4 1A78     		ldrb	r2, [r3]
 351 00f6 BB1D     		add	r3, r7, #6
 352 00f8 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 9


 353 00fa 013B     		sub	r3, r3, #1
 354 00fc 9A42     		cmp	r2, r3
 355 00fe 05DA     		bge	.L19
 102:.\main.c      ****             {
 103:.\main.c      ****                 cur_pos++;
 356              		.loc 1 103 0
 357 0100 FB1D     		add	r3, r7, #7
 358 0102 1A78     		ldrb	r2, [r3]
 359 0104 FB1D     		add	r3, r7, #7
 360 0106 0132     		add	r2, r2, #1
 361 0108 1A70     		strb	r2, [r3]
 362 010a 07E0     		b	.L15
 363              	.L19:
 104:.\main.c      ****             }
 105:.\main.c      ****             else
 106:.\main.c      ****             {
 107:.\main.c      ****                 cur_pos = 0;
 364              		.loc 1 107 0
 365 010c FB1D     		add	r3, r7, #7
 366 010e 0022     		mov	r2, #0
 367 0110 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 368              		.loc 1 70 0
 369 0112 27E2     		b	.L8
 370              	.L16:
 108:.\main.c      ****             }
 109:.\main.c      ****         }
 110:.\main.c      ****         else
 111:.\main.c      ****         {
 112:.\main.c      ****             cur_pos = 0;
 371              		.loc 1 112 0
 372 0114 FB1D     		add	r3, r7, #7
 373 0116 0022     		mov	r2, #0
 374 0118 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 375              		.loc 1 70 0
 376 011a 23E2     		b	.L8
 377              	.L15:
 378 011c 22E2     		b	.L8
 379              	.L9:
 113:.\main.c      ****         }
 114:.\main.c      ****     }
 115:.\main.c      ****     else if(command >= 1100 && command < 1300)
 380              		.loc 1 115 0
 381 011e 3B1D     		add	r3, r7, #4
 382 0120 1A88     		ldrh	r2, [r3]
 383 0122 854B     		ldr	r3, .L70+4
 384 0124 9A42     		cmp	r2, r3
 385 0126 53D9     		bls	.L22
 386              		.loc 1 115 0 is_stmt 0 discriminator 1
 387 0128 3B1D     		add	r3, r7, #4
 388 012a 1A88     		ldrh	r2, [r3]
 389 012c 854B     		ldr	r3, .L70+16
 390 012e 9A42     		cmp	r2, r3
 391 0130 4ED8     		bhi	.L22
 116:.\main.c      ****     {
 117:.\main.c      ****         if(cur_pos != 0)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 10


 392              		.loc 1 117 0 is_stmt 1
 393 0132 FB1D     		add	r3, r7, #7
 394 0134 1B78     		ldrb	r3, [r3]
 395 0136 002B     		cmp	r3, #0
 396 0138 20D0     		beq	.L23
 118:.\main.c      ****         {
 119:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 10);
 397              		.loc 1 119 0
 398 013a FB1D     		add	r3, r7, #7
 399 013c 1B78     		ldrb	r3, [r3]
 400 013e 5B00     		lsl	r3, r3, #1
 401 0140 3A68     		ldr	r2, [r7]
 402 0142 D318     		add	r3, r2, r3
 403 0144 FA1D     		add	r2, r7, #7
 404 0146 1278     		ldrb	r2, [r2]
 405 0148 7C49     		ldr	r1, .L70+8
 406 014a 5218     		add	r2, r2, r1
 407 014c 5200     		lsl	r2, r2, #1
 408 014e 3968     		ldr	r1, [r7]
 409 0150 8A18     		add	r2, r1, r2
 410 0152 1288     		ldrh	r2, [r2]
 411 0154 0A3A     		sub	r2, r2, #10
 412 0156 92B2     		uxth	r2, r2
 413 0158 1A80     		strh	r2, [r3]
 120:.\main.c      ****             
 121:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 414              		.loc 1 121 0
 415 015a FB1D     		add	r3, r7, #7
 416 015c 1A78     		ldrb	r2, [r3]
 417 015e BB1D     		add	r3, r7, #6
 418 0160 1B78     		ldrb	r3, [r3]
 419 0162 013B     		sub	r3, r3, #1
 420 0164 9A42     		cmp	r2, r3
 421 0166 05DA     		bge	.L24
 122:.\main.c      ****             {
 123:.\main.c      ****                 cur_pos++;
 422              		.loc 1 123 0
 423 0168 FB1D     		add	r3, r7, #7
 424 016a 1A78     		ldrb	r2, [r3]
 425 016c FB1D     		add	r3, r7, #7
 426 016e 0132     		add	r2, r2, #1
 427 0170 1A70     		strb	r2, [r3]
 428 0172 2CE0     		b	.L26
 429              	.L24:
 124:.\main.c      ****             }
 125:.\main.c      ****             else
 126:.\main.c      ****             {
 127:.\main.c      ****                 cur_pos = 0;
 430              		.loc 1 127 0
 431 0174 FB1D     		add	r3, r7, #7
 432 0176 0022     		mov	r2, #0
 433 0178 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 434              		.loc 1 117 0
 435 017a F3E1     		b	.L8
 436              	.L23:
 128:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 11


 129:.\main.c      ****         }
 130:.\main.c      ****         else if(cur_pos == 0)
 437              		.loc 1 130 0
 438 017c FB1D     		add	r3, r7, #7
 439 017e 1B78     		ldrb	r3, [r3]
 440 0180 002B     		cmp	r3, #0
 441 0182 20D1     		bne	.L27
 131:.\main.c      ****         {
 132:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 10);
 442              		.loc 1 132 0
 443 0184 FB1D     		add	r3, r7, #7
 444 0186 1B78     		ldrb	r3, [r3]
 445 0188 5B00     		lsl	r3, r3, #1
 446 018a 3A68     		ldr	r2, [r7]
 447 018c D318     		add	r3, r2, r3
 448 018e BA1D     		add	r2, r7, #6
 449 0190 1278     		ldrb	r2, [r2]
 450 0192 6A49     		ldr	r1, .L70+8
 451 0194 5218     		add	r2, r2, r1
 452 0196 5200     		lsl	r2, r2, #1
 453 0198 3968     		ldr	r1, [r7]
 454 019a 8A18     		add	r2, r1, r2
 455 019c 1288     		ldrh	r2, [r2]
 456 019e 0A3A     		sub	r2, r2, #10
 457 01a0 92B2     		uxth	r2, r2
 458 01a2 1A80     		strh	r2, [r3]
 133:.\main.c      ****            
 134:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 459              		.loc 1 134 0
 460 01a4 FB1D     		add	r3, r7, #7
 461 01a6 1A78     		ldrb	r2, [r3]
 462 01a8 BB1D     		add	r3, r7, #6
 463 01aa 1B78     		ldrb	r3, [r3]
 464 01ac 013B     		sub	r3, r3, #1
 465 01ae 9A42     		cmp	r2, r3
 466 01b0 05DA     		bge	.L28
 135:.\main.c      ****             {
 136:.\main.c      ****                 cur_pos++;
 467              		.loc 1 136 0
 468 01b2 FB1D     		add	r3, r7, #7
 469 01b4 1A78     		ldrb	r2, [r3]
 470 01b6 FB1D     		add	r3, r7, #7
 471 01b8 0132     		add	r2, r2, #1
 472 01ba 1A70     		strb	r2, [r3]
 473 01bc 07E0     		b	.L26
 474              	.L28:
 137:.\main.c      ****             }
 138:.\main.c      ****             else
 139:.\main.c      ****             {
 140:.\main.c      ****                 cur_pos = 0;
 475              		.loc 1 140 0
 476 01be FB1D     		add	r3, r7, #7
 477 01c0 0022     		mov	r2, #0
 478 01c2 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 479              		.loc 1 117 0
 480 01c4 CEE1     		b	.L8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 12


 481              	.L27:
 141:.\main.c      ****             }
 142:.\main.c      ****         }
 143:.\main.c      ****         else
 144:.\main.c      ****         {
 145:.\main.c      ****             cur_pos = 0;   
 482              		.loc 1 145 0
 483 01c6 FB1D     		add	r3, r7, #7
 484 01c8 0022     		mov	r2, #0
 485 01ca 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 486              		.loc 1 117 0
 487 01cc CAE1     		b	.L8
 488              	.L26:
 489 01ce C9E1     		b	.L8
 490              	.L22:
 146:.\main.c      ****         }    
 147:.\main.c      ****     }
 148:.\main.c      ****     else if(command >= 1300 && command < 1490)
 491              		.loc 1 148 0
 492 01d0 3B1D     		add	r3, r7, #4
 493 01d2 1A88     		ldrh	r2, [r3]
 494 01d4 5B4B     		ldr	r3, .L70+16
 495 01d6 9A42     		cmp	r2, r3
 496 01d8 53D9     		bls	.L30
 497              		.loc 1 148 0 is_stmt 0 discriminator 1
 498 01da 3B1D     		add	r3, r7, #4
 499 01dc 1A88     		ldrh	r2, [r3]
 500 01de 5A4B     		ldr	r3, .L70+20
 501 01e0 9A42     		cmp	r2, r3
 502 01e2 4ED8     		bhi	.L30
 149:.\main.c      ****     {
 150:.\main.c      ****         if(cur_pos != 0)
 503              		.loc 1 150 0 is_stmt 1
 504 01e4 FB1D     		add	r3, r7, #7
 505 01e6 1B78     		ldrb	r3, [r3]
 506 01e8 002B     		cmp	r3, #0
 507 01ea 20D0     		beq	.L31
 151:.\main.c      ****         {
 152:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 5);
 508              		.loc 1 152 0
 509 01ec FB1D     		add	r3, r7, #7
 510 01ee 1B78     		ldrb	r3, [r3]
 511 01f0 5B00     		lsl	r3, r3, #1
 512 01f2 3A68     		ldr	r2, [r7]
 513 01f4 D318     		add	r3, r2, r3
 514 01f6 FA1D     		add	r2, r7, #7
 515 01f8 1278     		ldrb	r2, [r2]
 516 01fa 5049     		ldr	r1, .L70+8
 517 01fc 5218     		add	r2, r2, r1
 518 01fe 5200     		lsl	r2, r2, #1
 519 0200 3968     		ldr	r1, [r7]
 520 0202 8A18     		add	r2, r1, r2
 521 0204 1288     		ldrh	r2, [r2]
 522 0206 053A     		sub	r2, r2, #5
 523 0208 92B2     		uxth	r2, r2
 524 020a 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 13


 153:.\main.c      ****             
 154:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 525              		.loc 1 154 0
 526 020c FB1D     		add	r3, r7, #7
 527 020e 1A78     		ldrb	r2, [r3]
 528 0210 BB1D     		add	r3, r7, #6
 529 0212 1B78     		ldrb	r3, [r3]
 530 0214 013B     		sub	r3, r3, #1
 531 0216 9A42     		cmp	r2, r3
 532 0218 05DA     		bge	.L32
 155:.\main.c      ****             {
 156:.\main.c      ****                 cur_pos++;
 533              		.loc 1 156 0
 534 021a FB1D     		add	r3, r7, #7
 535 021c 1A78     		ldrb	r2, [r3]
 536 021e FB1D     		add	r3, r7, #7
 537 0220 0132     		add	r2, r2, #1
 538 0222 1A70     		strb	r2, [r3]
 539 0224 2CE0     		b	.L34
 540              	.L32:
 157:.\main.c      ****             }
 158:.\main.c      ****             else
 159:.\main.c      ****             {
 160:.\main.c      ****                 cur_pos = 0;
 541              		.loc 1 160 0
 542 0226 FB1D     		add	r3, r7, #7
 543 0228 0022     		mov	r2, #0
 544 022a 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 545              		.loc 1 150 0
 546 022c 9AE1     		b	.L8
 547              	.L31:
 161:.\main.c      ****             }
 162:.\main.c      ****         }
 163:.\main.c      ****         else if(cur_pos == 0)
 548              		.loc 1 163 0
 549 022e FB1D     		add	r3, r7, #7
 550 0230 1B78     		ldrb	r3, [r3]
 551 0232 002B     		cmp	r3, #0
 552 0234 20D1     		bne	.L35
 164:.\main.c      ****         {
 165:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 5);
 553              		.loc 1 165 0
 554 0236 FB1D     		add	r3, r7, #7
 555 0238 1B78     		ldrb	r3, [r3]
 556 023a 5B00     		lsl	r3, r3, #1
 557 023c 3A68     		ldr	r2, [r7]
 558 023e D318     		add	r3, r2, r3
 559 0240 BA1D     		add	r2, r7, #6
 560 0242 1278     		ldrb	r2, [r2]
 561 0244 3D49     		ldr	r1, .L70+8
 562 0246 5218     		add	r2, r2, r1
 563 0248 5200     		lsl	r2, r2, #1
 564 024a 3968     		ldr	r1, [r7]
 565 024c 8A18     		add	r2, r1, r2
 566 024e 1288     		ldrh	r2, [r2]
 567 0250 053A     		sub	r2, r2, #5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 14


 568 0252 92B2     		uxth	r2, r2
 569 0254 1A80     		strh	r2, [r3]
 166:.\main.c      ****            
 167:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 570              		.loc 1 167 0
 571 0256 FB1D     		add	r3, r7, #7
 572 0258 1A78     		ldrb	r2, [r3]
 573 025a BB1D     		add	r3, r7, #6
 574 025c 1B78     		ldrb	r3, [r3]
 575 025e 013B     		sub	r3, r3, #1
 576 0260 9A42     		cmp	r2, r3
 577 0262 05DA     		bge	.L36
 168:.\main.c      ****             {
 169:.\main.c      ****                 cur_pos++;
 578              		.loc 1 169 0
 579 0264 FB1D     		add	r3, r7, #7
 580 0266 1A78     		ldrb	r2, [r3]
 581 0268 FB1D     		add	r3, r7, #7
 582 026a 0132     		add	r2, r2, #1
 583 026c 1A70     		strb	r2, [r3]
 584 026e 07E0     		b	.L34
 585              	.L36:
 170:.\main.c      ****             }
 171:.\main.c      ****             else
 172:.\main.c      ****             {
 173:.\main.c      ****                 cur_pos = 0;
 586              		.loc 1 173 0
 587 0270 FB1D     		add	r3, r7, #7
 588 0272 0022     		mov	r2, #0
 589 0274 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 590              		.loc 1 150 0
 591 0276 75E1     		b	.L8
 592              	.L35:
 174:.\main.c      ****             }
 175:.\main.c      ****         }
 176:.\main.c      ****         else
 177:.\main.c      ****         {
 178:.\main.c      ****             cur_pos = 0;   
 593              		.loc 1 178 0
 594 0278 FB1D     		add	r3, r7, #7
 595 027a 0022     		mov	r2, #0
 596 027c 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 597              		.loc 1 150 0
 598 027e 71E1     		b	.L8
 599              	.L34:
 600 0280 70E1     		b	.L8
 601              	.L30:
 179:.\main.c      ****         }    
 180:.\main.c      ****     }
 181:.\main.c      ****     else if(command > 1510 && command <= 1700)
 602              		.loc 1 181 0
 603 0282 3B1D     		add	r3, r7, #4
 604 0284 1A88     		ldrh	r2, [r3]
 605 0286 314B     		ldr	r3, .L70+24
 606 0288 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 15


 607 028a 63D9     		bls	.L38
 608              		.loc 1 181 0 is_stmt 0 discriminator 1
 609 028c 3B1D     		add	r3, r7, #4
 610 028e 1A88     		ldrh	r2, [r3]
 611 0290 2F4B     		ldr	r3, .L70+28
 612 0292 9A42     		cmp	r2, r3
 613 0294 5ED8     		bhi	.L38
 182:.\main.c      ****     {
 183:.\main.c      ****         if(cur_pos != 0)
 614              		.loc 1 183 0 is_stmt 1
 615 0296 FB1D     		add	r3, r7, #7
 616 0298 1B78     		ldrb	r3, [r3]
 617 029a 002B     		cmp	r3, #0
 618 029c 20D0     		beq	.L39
 184:.\main.c      ****         {
 185:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 5);
 619              		.loc 1 185 0
 620 029e FB1D     		add	r3, r7, #7
 621 02a0 1B78     		ldrb	r3, [r3]
 622 02a2 5B00     		lsl	r3, r3, #1
 623 02a4 3A68     		ldr	r2, [r7]
 624 02a6 D318     		add	r3, r2, r3
 625 02a8 FA1D     		add	r2, r7, #7
 626 02aa 1278     		ldrb	r2, [r2]
 627 02ac 2349     		ldr	r1, .L70+8
 628 02ae 5218     		add	r2, r2, r1
 629 02b0 5200     		lsl	r2, r2, #1
 630 02b2 3968     		ldr	r1, [r7]
 631 02b4 8A18     		add	r2, r1, r2
 632 02b6 1288     		ldrh	r2, [r2]
 633 02b8 0532     		add	r2, r2, #5
 634 02ba 92B2     		uxth	r2, r2
 635 02bc 1A80     		strh	r2, [r3]
 186:.\main.c      ****             
 187:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 636              		.loc 1 187 0
 637 02be FB1D     		add	r3, r7, #7
 638 02c0 1A78     		ldrb	r2, [r3]
 639 02c2 BB1D     		add	r3, r7, #6
 640 02c4 1B78     		ldrb	r3, [r3]
 641 02c6 013B     		sub	r3, r3, #1
 642 02c8 9A42     		cmp	r2, r3
 643 02ca 05DA     		bge	.L40
 188:.\main.c      ****             {
 189:.\main.c      ****                 cur_pos++;
 644              		.loc 1 189 0
 645 02cc FB1D     		add	r3, r7, #7
 646 02ce 1A78     		ldrb	r2, [r3]
 647 02d0 FB1D     		add	r3, r7, #7
 648 02d2 0132     		add	r2, r2, #1
 649 02d4 1A70     		strb	r2, [r3]
 650 02d6 2CE0     		b	.L42
 651              	.L40:
 190:.\main.c      ****             }
 191:.\main.c      ****             else
 192:.\main.c      ****             {
 193:.\main.c      ****                 cur_pos = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 16


 652              		.loc 1 193 0
 653 02d8 FB1D     		add	r3, r7, #7
 654 02da 0022     		mov	r2, #0
 655 02dc 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 656              		.loc 1 183 0
 657 02de 41E1     		b	.L8
 658              	.L39:
 194:.\main.c      ****             }
 195:.\main.c      ****         }
 196:.\main.c      ****         else if(cur_pos == 0)
 659              		.loc 1 196 0
 660 02e0 FB1D     		add	r3, r7, #7
 661 02e2 1B78     		ldrb	r3, [r3]
 662 02e4 002B     		cmp	r3, #0
 663 02e6 20D1     		bne	.L43
 197:.\main.c      ****         {
 198:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 5);
 664              		.loc 1 198 0
 665 02e8 FB1D     		add	r3, r7, #7
 666 02ea 1B78     		ldrb	r3, [r3]
 667 02ec 5B00     		lsl	r3, r3, #1
 668 02ee 3A68     		ldr	r2, [r7]
 669 02f0 D318     		add	r3, r2, r3
 670 02f2 BA1D     		add	r2, r7, #6
 671 02f4 1278     		ldrb	r2, [r2]
 672 02f6 1149     		ldr	r1, .L70+8
 673 02f8 5218     		add	r2, r2, r1
 674 02fa 5200     		lsl	r2, r2, #1
 675 02fc 3968     		ldr	r1, [r7]
 676 02fe 8A18     		add	r2, r1, r2
 677 0300 1288     		ldrh	r2, [r2]
 678 0302 0532     		add	r2, r2, #5
 679 0304 92B2     		uxth	r2, r2
 680 0306 1A80     		strh	r2, [r3]
 199:.\main.c      ****            
 200:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 681              		.loc 1 200 0
 682 0308 FB1D     		add	r3, r7, #7
 683 030a 1A78     		ldrb	r2, [r3]
 684 030c BB1D     		add	r3, r7, #6
 685 030e 1B78     		ldrb	r3, [r3]
 686 0310 013B     		sub	r3, r3, #1
 687 0312 9A42     		cmp	r2, r3
 688 0314 05DA     		bge	.L44
 201:.\main.c      ****             {
 202:.\main.c      ****                 cur_pos++;
 689              		.loc 1 202 0
 690 0316 FB1D     		add	r3, r7, #7
 691 0318 1A78     		ldrb	r2, [r3]
 692 031a FB1D     		add	r3, r7, #7
 693 031c 0132     		add	r2, r2, #1
 694 031e 1A70     		strb	r2, [r3]
 695 0320 07E0     		b	.L42
 696              	.L44:
 203:.\main.c      ****             }
 204:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 17


 205:.\main.c      ****             {
 206:.\main.c      ****                 cur_pos = 0;
 697              		.loc 1 206 0
 698 0322 FB1D     		add	r3, r7, #7
 699 0324 0022     		mov	r2, #0
 700 0326 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 701              		.loc 1 183 0
 702 0328 1CE1     		b	.L8
 703              	.L43:
 207:.\main.c      ****             }
 208:.\main.c      ****         }
 209:.\main.c      ****         else
 210:.\main.c      ****         {
 211:.\main.c      ****             cur_pos = 0;   
 704              		.loc 1 211 0
 705 032a FB1D     		add	r3, r7, #7
 706 032c 0022     		mov	r2, #0
 707 032e 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 708              		.loc 1 183 0
 709 0330 18E1     		b	.L8
 710              	.L42:
 711 0332 17E1     		b	.L8
 712              	.L71:
 713              		.align	2
 714              	.L70:
 715 0334 E7030000 		.word	999
 716 0338 4B040000 		.word	1099
 717 033c FFFFFF7F 		.word	2147483647
 718 0340 FB030000 		.word	1019
 719 0344 13050000 		.word	1299
 720 0348 D1050000 		.word	1489
 721 034c E6050000 		.word	1510
 722 0350 A4060000 		.word	1700
 723              	.L38:
 212:.\main.c      ****         }    
 213:.\main.c      ****     }
 214:.\main.c      ****     else if(command > 1700 && command <= 1900)
 724              		.loc 1 214 0
 725 0354 3B1D     		add	r3, r7, #4
 726 0356 1A88     		ldrh	r2, [r3]
 727 0358 844B     		ldr	r3, .L72
 728 035a 9A42     		cmp	r2, r3
 729 035c 53D9     		bls	.L46
 730              		.loc 1 214 0 is_stmt 0 discriminator 1
 731 035e 3B1D     		add	r3, r7, #4
 732 0360 1A88     		ldrh	r2, [r3]
 733 0362 834B     		ldr	r3, .L72+4
 734 0364 9A42     		cmp	r2, r3
 735 0366 4ED8     		bhi	.L46
 215:.\main.c      ****     {
 216:.\main.c      ****         if(cur_pos != 0)
 736              		.loc 1 216 0 is_stmt 1
 737 0368 FB1D     		add	r3, r7, #7
 738 036a 1B78     		ldrb	r3, [r3]
 739 036c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 18


 740 036e 20D0     		beq	.L47
 217:.\main.c      ****         {
 218:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 10);
 741              		.loc 1 218 0
 742 0370 FB1D     		add	r3, r7, #7
 743 0372 1B78     		ldrb	r3, [r3]
 744 0374 5B00     		lsl	r3, r3, #1
 745 0376 3A68     		ldr	r2, [r7]
 746 0378 D318     		add	r3, r2, r3
 747 037a FA1D     		add	r2, r7, #7
 748 037c 1278     		ldrb	r2, [r2]
 749 037e 7D49     		ldr	r1, .L72+8
 750 0380 5218     		add	r2, r2, r1
 751 0382 5200     		lsl	r2, r2, #1
 752 0384 3968     		ldr	r1, [r7]
 753 0386 8A18     		add	r2, r1, r2
 754 0388 1288     		ldrh	r2, [r2]
 755 038a 0A32     		add	r2, r2, #10
 756 038c 92B2     		uxth	r2, r2
 757 038e 1A80     		strh	r2, [r3]
 219:.\main.c      ****             
 220:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 758              		.loc 1 220 0
 759 0390 FB1D     		add	r3, r7, #7
 760 0392 1A78     		ldrb	r2, [r3]
 761 0394 BB1D     		add	r3, r7, #6
 762 0396 1B78     		ldrb	r3, [r3]
 763 0398 013B     		sub	r3, r3, #1
 764 039a 9A42     		cmp	r2, r3
 765 039c 05DA     		bge	.L48
 221:.\main.c      ****             {
 222:.\main.c      ****                 cur_pos++;
 766              		.loc 1 222 0
 767 039e FB1D     		add	r3, r7, #7
 768 03a0 1A78     		ldrb	r2, [r3]
 769 03a2 FB1D     		add	r3, r7, #7
 770 03a4 0132     		add	r2, r2, #1
 771 03a6 1A70     		strb	r2, [r3]
 772 03a8 2CE0     		b	.L50
 773              	.L48:
 223:.\main.c      ****             }
 224:.\main.c      ****             else
 225:.\main.c      ****             {
 226:.\main.c      ****                 cur_pos = 0;
 774              		.loc 1 226 0
 775 03aa FB1D     		add	r3, r7, #7
 776 03ac 0022     		mov	r2, #0
 777 03ae 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 778              		.loc 1 216 0
 779 03b0 D8E0     		b	.L8
 780              	.L47:
 227:.\main.c      ****             }
 228:.\main.c      ****         }
 229:.\main.c      ****         else if(cur_pos == 0)
 781              		.loc 1 229 0
 782 03b2 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 19


 783 03b4 1B78     		ldrb	r3, [r3]
 784 03b6 002B     		cmp	r3, #0
 785 03b8 20D1     		bne	.L51
 230:.\main.c      ****         {
 231:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 10);
 786              		.loc 1 231 0
 787 03ba FB1D     		add	r3, r7, #7
 788 03bc 1B78     		ldrb	r3, [r3]
 789 03be 5B00     		lsl	r3, r3, #1
 790 03c0 3A68     		ldr	r2, [r7]
 791 03c2 D318     		add	r3, r2, r3
 792 03c4 BA1D     		add	r2, r7, #6
 793 03c6 1278     		ldrb	r2, [r2]
 794 03c8 6A49     		ldr	r1, .L72+8
 795 03ca 5218     		add	r2, r2, r1
 796 03cc 5200     		lsl	r2, r2, #1
 797 03ce 3968     		ldr	r1, [r7]
 798 03d0 8A18     		add	r2, r1, r2
 799 03d2 1288     		ldrh	r2, [r2]
 800 03d4 0A32     		add	r2, r2, #10
 801 03d6 92B2     		uxth	r2, r2
 802 03d8 1A80     		strh	r2, [r3]
 232:.\main.c      ****            
 233:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 803              		.loc 1 233 0
 804 03da FB1D     		add	r3, r7, #7
 805 03dc 1A78     		ldrb	r2, [r3]
 806 03de BB1D     		add	r3, r7, #6
 807 03e0 1B78     		ldrb	r3, [r3]
 808 03e2 013B     		sub	r3, r3, #1
 809 03e4 9A42     		cmp	r2, r3
 810 03e6 05DA     		bge	.L52
 234:.\main.c      ****             {
 235:.\main.c      ****                 cur_pos++;
 811              		.loc 1 235 0
 812 03e8 FB1D     		add	r3, r7, #7
 813 03ea 1A78     		ldrb	r2, [r3]
 814 03ec FB1D     		add	r3, r7, #7
 815 03ee 0132     		add	r2, r2, #1
 816 03f0 1A70     		strb	r2, [r3]
 817 03f2 07E0     		b	.L50
 818              	.L52:
 236:.\main.c      ****             }
 237:.\main.c      ****             else
 238:.\main.c      ****             {
 239:.\main.c      ****                 cur_pos = 0;
 819              		.loc 1 239 0
 820 03f4 FB1D     		add	r3, r7, #7
 821 03f6 0022     		mov	r2, #0
 822 03f8 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 823              		.loc 1 216 0
 824 03fa B3E0     		b	.L8
 825              	.L51:
 240:.\main.c      ****             }
 241:.\main.c      ****         }
 242:.\main.c      ****         else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 20


 243:.\main.c      ****         {
 244:.\main.c      ****             cur_pos = 0;   
 826              		.loc 1 244 0
 827 03fc FB1D     		add	r3, r7, #7
 828 03fe 0022     		mov	r2, #0
 829 0400 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 830              		.loc 1 216 0
 831 0402 AFE0     		b	.L8
 832              	.L50:
 833 0404 AEE0     		b	.L8
 834              	.L46:
 245:.\main.c      ****         }
 246:.\main.c      ****     }
 247:.\main.c      ****     else if(command > 1900 && command <= 2000)
 835              		.loc 1 247 0
 836 0406 3B1D     		add	r3, r7, #4
 837 0408 1A88     		ldrh	r2, [r3]
 838 040a 594B     		ldr	r3, .L72+4
 839 040c 9A42     		cmp	r2, r3
 840 040e 00D8     		bhi	.LCB739
 841 0410 7DE0     		b	.L54	@long jump
 842              	.LCB739:
 843              		.loc 1 247 0 is_stmt 0 discriminator 1
 844 0412 3B1D     		add	r3, r7, #4
 845 0414 1A88     		ldrh	r2, [r3]
 846 0416 FA23     		mov	r3, #250
 847 0418 DB00     		lsl	r3, r3, #3
 848 041a 9A42     		cmp	r2, r3
 849 041c 00D9     		bls	.LCB745
 850 041e 76E0     		b	.L54	@long jump
 851              	.LCB745:
 248:.\main.c      ****     {
 249:.\main.c      ****         if(cur_pos != 0)
 852              		.loc 1 249 0 is_stmt 1
 853 0420 FB1D     		add	r3, r7, #7
 854 0422 1B78     		ldrb	r3, [r3]
 855 0424 002B     		cmp	r3, #0
 856 0426 34D0     		beq	.L55
 250:.\main.c      ****         {
 251:.\main.c      ****             if(array[cur_pos - 1] <= 1980)
 857              		.loc 1 251 0
 858 0428 FB1D     		add	r3, r7, #7
 859 042a 1B78     		ldrb	r3, [r3]
 860 042c 514A     		ldr	r2, .L72+8
 861 042e 9B18     		add	r3, r3, r2
 862 0430 5B00     		lsl	r3, r3, #1
 863 0432 3A68     		ldr	r2, [r7]
 864 0434 D318     		add	r3, r2, r3
 865 0436 1A88     		ldrh	r2, [r3]
 866 0438 4F4B     		ldr	r3, .L72+12
 867 043a 9A42     		cmp	r2, r3
 868 043c 10D8     		bhi	.L56
 252:.\main.c      ****             {
 253:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] + 20);
 869              		.loc 1 253 0
 870 043e FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 21


 871 0440 1B78     		ldrb	r3, [r3]
 872 0442 5B00     		lsl	r3, r3, #1
 873 0444 3A68     		ldr	r2, [r7]
 874 0446 D318     		add	r3, r2, r3
 875 0448 FA1D     		add	r2, r7, #7
 876 044a 1278     		ldrb	r2, [r2]
 877 044c 4949     		ldr	r1, .L72+8
 878 044e 5218     		add	r2, r2, r1
 879 0450 5200     		lsl	r2, r2, #1
 880 0452 3968     		ldr	r1, [r7]
 881 0454 8A18     		add	r2, r1, r2
 882 0456 1288     		ldrh	r2, [r2]
 883 0458 1432     		add	r2, r2, #20
 884 045a 92B2     		uxth	r2, r2
 885 045c 1A80     		strh	r2, [r3]
 886 045e 07E0     		b	.L57
 887              	.L56:
 254:.\main.c      ****             }
 255:.\main.c      ****             else
 256:.\main.c      ****             {
 257:.\main.c      ****                 array[cur_pos] = 2000;
 888              		.loc 1 257 0
 889 0460 FB1D     		add	r3, r7, #7
 890 0462 1B78     		ldrb	r3, [r3]
 891 0464 5B00     		lsl	r3, r3, #1
 892 0466 3A68     		ldr	r2, [r7]
 893 0468 D318     		add	r3, r2, r3
 894 046a FA22     		mov	r2, #250
 895 046c D200     		lsl	r2, r2, #3
 896 046e 1A80     		strh	r2, [r3]
 897              	.L57:
 258:.\main.c      ****             }
 259:.\main.c      ****             
 260:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 898              		.loc 1 260 0
 899 0470 FB1D     		add	r3, r7, #7
 900 0472 1A78     		ldrb	r2, [r3]
 901 0474 BB1D     		add	r3, r7, #6
 902 0476 1B78     		ldrb	r3, [r3]
 903 0478 013B     		sub	r3, r3, #1
 904 047a 9A42     		cmp	r2, r3
 905 047c 05DA     		bge	.L58
 261:.\main.c      ****             {
 262:.\main.c      ****                 cur_pos++;
 906              		.loc 1 262 0
 907 047e FB1D     		add	r3, r7, #7
 908 0480 1A78     		ldrb	r2, [r3]
 909 0482 FB1D     		add	r3, r7, #7
 910 0484 0132     		add	r2, r2, #1
 911 0486 1A70     		strb	r2, [r3]
 912 0488 40E0     		b	.L60
 913              	.L58:
 263:.\main.c      ****             }
 264:.\main.c      ****             else
 265:.\main.c      ****             {
 266:.\main.c      ****                 cur_pos = 0;
 914              		.loc 1 266 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 22


 915 048a FB1D     		add	r3, r7, #7
 916 048c 0022     		mov	r2, #0
 917 048e 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 918              		.loc 1 249 0
 919 0490 68E0     		b	.L8
 920              	.L55:
 267:.\main.c      ****             }
 268:.\main.c      ****         }
 269:.\main.c      ****         else if(cur_pos == 0)
 921              		.loc 1 269 0
 922 0492 FB1D     		add	r3, r7, #7
 923 0494 1B78     		ldrb	r3, [r3]
 924 0496 002B     		cmp	r3, #0
 925 0498 34D1     		bne	.L61
 270:.\main.c      ****         {
 271:.\main.c      ****             if(array[ARRAY_SIZE - 1] <= 1980)
 926              		.loc 1 271 0
 927 049a BB1D     		add	r3, r7, #6
 928 049c 1B78     		ldrb	r3, [r3]
 929 049e 354A     		ldr	r2, .L72+8
 930 04a0 9B18     		add	r3, r3, r2
 931 04a2 5B00     		lsl	r3, r3, #1
 932 04a4 3A68     		ldr	r2, [r7]
 933 04a6 D318     		add	r3, r2, r3
 934 04a8 1A88     		ldrh	r2, [r3]
 935 04aa 334B     		ldr	r3, .L72+12
 936 04ac 9A42     		cmp	r2, r3
 937 04ae 10D8     		bhi	.L62
 272:.\main.c      ****             {
 273:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] + 20);
 938              		.loc 1 273 0
 939 04b0 FB1D     		add	r3, r7, #7
 940 04b2 1B78     		ldrb	r3, [r3]
 941 04b4 5B00     		lsl	r3, r3, #1
 942 04b6 3A68     		ldr	r2, [r7]
 943 04b8 D318     		add	r3, r2, r3
 944 04ba BA1D     		add	r2, r7, #6
 945 04bc 1278     		ldrb	r2, [r2]
 946 04be 2D49     		ldr	r1, .L72+8
 947 04c0 5218     		add	r2, r2, r1
 948 04c2 5200     		lsl	r2, r2, #1
 949 04c4 3968     		ldr	r1, [r7]
 950 04c6 8A18     		add	r2, r1, r2
 951 04c8 1288     		ldrh	r2, [r2]
 952 04ca 1432     		add	r2, r2, #20
 953 04cc 92B2     		uxth	r2, r2
 954 04ce 1A80     		strh	r2, [r3]
 955 04d0 07E0     		b	.L63
 956              	.L62:
 274:.\main.c      ****             }
 275:.\main.c      ****             else
 276:.\main.c      ****             {
 277:.\main.c      ****                 array[cur_pos] = 2000;
 957              		.loc 1 277 0
 958 04d2 FB1D     		add	r3, r7, #7
 959 04d4 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 23


 960 04d6 5B00     		lsl	r3, r3, #1
 961 04d8 3A68     		ldr	r2, [r7]
 962 04da D318     		add	r3, r2, r3
 963 04dc FA22     		mov	r2, #250
 964 04de D200     		lsl	r2, r2, #3
 965 04e0 1A80     		strh	r2, [r3]
 966              	.L63:
 278:.\main.c      ****             }
 279:.\main.c      ****             
 280:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 967              		.loc 1 280 0
 968 04e2 FB1D     		add	r3, r7, #7
 969 04e4 1A78     		ldrb	r2, [r3]
 970 04e6 BB1D     		add	r3, r7, #6
 971 04e8 1B78     		ldrb	r3, [r3]
 972 04ea 013B     		sub	r3, r3, #1
 973 04ec 9A42     		cmp	r2, r3
 974 04ee 05DA     		bge	.L64
 281:.\main.c      ****             {
 282:.\main.c      ****                 cur_pos++;
 975              		.loc 1 282 0
 976 04f0 FB1D     		add	r3, r7, #7
 977 04f2 1A78     		ldrb	r2, [r3]
 978 04f4 FB1D     		add	r3, r7, #7
 979 04f6 0132     		add	r2, r2, #1
 980 04f8 1A70     		strb	r2, [r3]
 981 04fa 07E0     		b	.L60
 982              	.L64:
 283:.\main.c      ****             }
 284:.\main.c      ****             else
 285:.\main.c      ****             {
 286:.\main.c      ****                 cur_pos = 0;
 983              		.loc 1 286 0
 984 04fc FB1D     		add	r3, r7, #7
 985 04fe 0022     		mov	r2, #0
 986 0500 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 987              		.loc 1 249 0
 988 0502 2FE0     		b	.L8
 989              	.L61:
 287:.\main.c      ****             }
 288:.\main.c      ****         }
 289:.\main.c      ****         else
 290:.\main.c      ****         {
 291:.\main.c      ****             cur_pos = 0;
 990              		.loc 1 291 0
 991 0504 FB1D     		add	r3, r7, #7
 992 0506 0022     		mov	r2, #0
 993 0508 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 994              		.loc 1 249 0
 995 050a 2BE0     		b	.L8
 996              	.L60:
 997 050c 2AE0     		b	.L8
 998              	.L54:
 292:.\main.c      ****         }
 293:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 24


 294:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 999              		.loc 1 294 0
 1000 050e 3B1D     		add	r3, r7, #4
 1001 0510 1A88     		ldrh	r2, [r3]
 1002 0512 1A4B     		ldr	r3, .L72+16
 1003 0514 9A42     		cmp	r2, r3
 1004 0516 15D8     		bhi	.L66
 1005              		.loc 1 294 0 is_stmt 0 discriminator 1
 1006 0518 3B1D     		add	r3, r7, #4
 1007 051a 1A88     		ldrh	r2, [r3]
 1008 051c 184B     		ldr	r3, .L72+20
 1009 051e 9A42     		cmp	r2, r3
 1010 0520 10D9     		bls	.L66
 295:.\main.c      ****     {
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1011              		.loc 1 296 0 is_stmt 1
 1012 0522 FB1D     		add	r3, r7, #7
 1013 0524 1A78     		ldrb	r2, [r3]
 1014 0526 BB1D     		add	r3, r7, #6
 1015 0528 1B78     		ldrb	r3, [r3]
 1016 052a 013B     		sub	r3, r3, #1
 1017 052c 9A42     		cmp	r2, r3
 1018 052e 05DA     		bge	.L67
 297:.\main.c      ****         {
 298:.\main.c      ****             cur_pos++;
 1019              		.loc 1 298 0
 1020 0530 FB1D     		add	r3, r7, #7
 1021 0532 1A78     		ldrb	r2, [r3]
 1022 0534 FB1D     		add	r3, r7, #7
 1023 0536 0132     		add	r2, r2, #1
 1024 0538 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1025              		.loc 1 296 0
 1026 053a 13E0     		b	.L8
 1027              	.L67:
 299:.\main.c      ****         }
 300:.\main.c      ****         else
 301:.\main.c      ****         {
 302:.\main.c      ****             cur_pos = 0;
 1028              		.loc 1 302 0
 1029 053c FB1D     		add	r3, r7, #7
 1030 053e 0022     		mov	r2, #0
 1031 0540 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1032              		.loc 1 296 0
 1033 0542 0FE0     		b	.L8
 1034              	.L66:
 303:.\main.c      ****         }
 304:.\main.c      ****     }
 305:.\main.c      ****     else
 306:.\main.c      ****     {
 307:.\main.c      ****         //throw error
 308:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1035              		.loc 1 308 0
 1036 0544 FB1D     		add	r3, r7, #7
 1037 0546 1A78     		ldrb	r2, [r3]
 1038 0548 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 25


 1039 054a 1B78     		ldrb	r3, [r3]
 1040 054c 013B     		sub	r3, r3, #1
 1041 054e 9A42     		cmp	r2, r3
 1042 0550 05DA     		bge	.L69
 309:.\main.c      ****         {
 310:.\main.c      ****             cur_pos++;
 1043              		.loc 1 310 0
 1044 0552 FB1D     		add	r3, r7, #7
 1045 0554 1A78     		ldrb	r2, [r3]
 1046 0556 FB1D     		add	r3, r7, #7
 1047 0558 0132     		add	r2, r2, #1
 1048 055a 1A70     		strb	r2, [r3]
 1049 055c 02E0     		b	.L8
 1050              	.L69:
 311:.\main.c      ****         }
 312:.\main.c      ****         else
 313:.\main.c      ****         {
 314:.\main.c      ****             cur_pos = 0;
 1051              		.loc 1 314 0
 1052 055e FB1D     		add	r3, r7, #7
 1053 0560 0022     		mov	r2, #0
 1054 0562 1A70     		strb	r2, [r3]
 1055              	.L8:
 315:.\main.c      ****         }
 316:.\main.c      ****     }
 317:.\main.c      **** }
 1056              		.loc 1 317 0
 1057 0564 BD46     		mov	sp, r7
 1058 0566 02B0     		add	sp, sp, #8
 1059              		@ sp needed
 1060 0568 80BD     		pop	{r7, pc}
 1061              	.L73:
 1062 056a C046     		.align	2
 1063              	.L72:
 1064 056c A4060000 		.word	1700
 1065 0570 6C070000 		.word	1900
 1066 0574 FFFFFF7F 		.word	2147483647
 1067 0578 BC070000 		.word	1980
 1068 057c E6050000 		.word	1510
 1069 0580 D1050000 		.word	1489
 1070              		.cfi_endproc
 1071              	.LFE36:
 1072              		.size	pos_to_vel, .-pos_to_vel
 1073              		.section	.text.make_command,"ax",%progbits
 1074              		.align	2
 1075              		.global	make_command
 1076              		.code	16
 1077              		.thumb_func
 1078              		.type	make_command, %function
 1079              	make_command:
 1080              	.LFB37:
 318:.\main.c      **** 
 319:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 320:.\main.c      **** {
 1081              		.loc 1 320 0
 1082              		.cfi_startproc
 1083 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 26


 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 7, -8
 1086              		.cfi_offset 14, -4
 1087 0002 84B0     		sub	sp, sp, #16
 1088              		.cfi_def_cfa_offset 24
 1089 0004 00AF     		add	r7, sp, #0
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 1092 0008 FB1C     		add	r3, r7, #3
 1093 000a 1970     		strb	r1, [r3]
 1094 000c BB1C     		add	r3, r7, #2
 1095 000e 1A70     		strb	r2, [r3]
 321:.\main.c      ****     uint16 command;
 322:.\main.c      ****     int16 temp1;
 323:.\main.c      ****     int16 temp2;
 324:.\main.c      ****     int16 temp3;
 325:.\main.c      ****     
 326:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1096              		.loc 1 326 0
 1097 0010 FB1C     		add	r3, r7, #3
 1098 0012 1B78     		ldrb	r3, [r3]
 1099 0014 7A68     		ldr	r2, [r7, #4]
 1100 0016 D318     		add	r3, r2, r3
 1101 0018 1B78     		ldrb	r3, [r3]
 1102 001a 5BB2     		sxtb	r3, r3
 1103 001c 1A02     		lsl	r2, r3, #8
 1104 001e 3B1C     		mov	r3, r7
 1105 0020 0E33     		add	r3, r3, #14
 1106 0022 1A80     		strh	r2, [r3]
 327:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1107              		.loc 1 327 0
 1108 0024 BB1C     		add	r3, r7, #2
 1109 0026 1B78     		ldrb	r3, [r3]
 1110 0028 7A68     		ldr	r2, [r7, #4]
 1111 002a D318     		add	r3, r2, r3
 1112 002c 1B78     		ldrb	r3, [r3]
 1113 002e 5BB2     		sxtb	r3, r3
 1114 0030 9AB2     		uxth	r2, r3
 1115 0032 3B1C     		mov	r3, r7
 1116 0034 0C33     		add	r3, r3, #12
 1117 0036 111C     		add	r1, r2, #0
 1118 0038 FF22     		mov	r2, #255
 1119 003a 0A40     		and	r2, r1
 1120 003c 1A80     		strh	r2, [r3]
 328:.\main.c      ****     temp3 = temp1 | temp2;
 1121              		.loc 1 328 0
 1122 003e 3B1C     		mov	r3, r7
 1123 0040 0A33     		add	r3, r3, #10
 1124 0042 391C     		mov	r1, r7
 1125 0044 0E31     		add	r1, r1, #14
 1126 0046 3A1C     		mov	r2, r7
 1127 0048 0C32     		add	r2, r2, #12
 1128 004a 0988     		ldrh	r1, [r1]
 1129 004c 1288     		ldrh	r2, [r2]
 1130 004e 0A43     		orr	r2, r1
 1131 0050 1A80     		strh	r2, [r3]
 329:.\main.c      ****     command = (temp3/2) + 1500;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 27


 1132              		.loc 1 329 0
 1133 0052 3B1C     		mov	r3, r7
 1134 0054 0A33     		add	r3, r3, #10
 1135 0056 0021     		mov	r1, #0
 1136 0058 5B5E     		ldrsh	r3, [r3, r1]
 1137 005a 002B     		cmp	r3, #0
 1138 005c 00DA     		bge	.L75
 1139 005e 0133     		add	r3, r3, #1
 1140              	.L75:
 1141 0060 5B10     		asr	r3, r3, #1
 1142 0062 9BB2     		uxth	r3, r3
 1143 0064 9AB2     		uxth	r2, r3
 1144 0066 3B1C     		mov	r3, r7
 1145 0068 0833     		add	r3, r3, #8
 1146 006a 0549     		ldr	r1, .L77
 1147 006c 5218     		add	r2, r2, r1
 1148 006e 1A80     		strh	r2, [r3]
 330:.\main.c      ****     return command;
 1149              		.loc 1 330 0
 1150 0070 3B1C     		mov	r3, r7
 1151 0072 0833     		add	r3, r3, #8
 1152 0074 1B88     		ldrh	r3, [r3]
 331:.\main.c      **** }
 1153              		.loc 1 331 0
 1154 0076 181C     		mov	r0, r3
 1155 0078 BD46     		mov	sp, r7
 1156 007a 04B0     		add	sp, sp, #16
 1157              		@ sp needed
 1158 007c 80BD     		pop	{r7, pc}
 1159              	.L78:
 1160 007e C046     		.align	2
 1161              	.L77:
 1162 0080 DC050000 		.word	1500
 1163              		.cfi_endproc
 1164              	.LFE37:
 1165              		.size	make_command, .-make_command
 1166              		.section	.text.potFeedback,"ax",%progbits
 1167              		.align	2
 1168              		.global	potFeedback
 1169              		.code	16
 1170              		.thumb_func
 1171              		.type	potFeedback, %function
 1172              	potFeedback:
 1173              	.LFB38:
 332:.\main.c      **** 
 333:.\main.c      **** uint16 potFeedback(uint32 channel)
 334:.\main.c      **** {
 1174              		.loc 1 334 0
 1175              		.cfi_startproc
 1176 0000 80B5     		push	{r7, lr}
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 14, -4
 1180 0002 84B0     		sub	sp, sp, #16
 1181              		.cfi_def_cfa_offset 24
 1182 0004 00AF     		add	r7, sp, #0
 1183              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 28


 1184 0006 7860     		str	r0, [r7, #4]
 335:.\main.c      ****     //TODO: uncomment this section
 336:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 337:.\main.c      ****     uint16 feedback = 500;
 1185              		.loc 1 337 0
 1186 0008 3B1C     		mov	r3, r7
 1187 000a 0E33     		add	r3, r3, #14
 1188 000c FA22     		mov	r2, #250
 1189 000e 5200     		lsl	r2, r2, #1
 1190 0010 1A80     		strh	r2, [r3]
 338:.\main.c      ****     return feedback;
 1191              		.loc 1 338 0
 1192 0012 3B1C     		mov	r3, r7
 1193 0014 0E33     		add	r3, r3, #14
 1194 0016 1B88     		ldrh	r3, [r3]
 339:.\main.c      **** }
 1195              		.loc 1 339 0
 1196 0018 181C     		mov	r0, r3
 1197 001a BD46     		mov	sp, r7
 1198 001c 04B0     		add	sp, sp, #16
 1199              		@ sp needed
 1200 001e 80BD     		pop	{r7, pc}
 1201              		.cfi_endproc
 1202              	.LFE38:
 1203              		.size	potFeedback, .-potFeedback
 1204              		.section	.text.send_feedback,"ax",%progbits
 1205              		.align	2
 1206              		.global	send_feedback
 1207              		.code	16
 1208              		.thumb_func
 1209              		.type	send_feedback, %function
 1210              	send_feedback:
 1211              	.LFB39:
 340:.\main.c      **** 
 341:.\main.c      **** void send_feedback()
 342:.\main.c      **** {
 1212              		.loc 1 342 0
 1213              		.cfi_startproc
 1214 0000 80B5     		push	{r7, lr}
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 7, -8
 1217              		.cfi_offset 14, -4
 1218 0002 00AF     		add	r7, sp, #0
 1219              		.cfi_def_cfa_register 7
 343:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 344:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 345:.\main.c      ****     //TODO define system state
 346:.\main.c      ****     //send packet via serial to wiznet
 347:.\main.c      **** }
 1220              		.loc 1 347 0
 1221 0004 BD46     		mov	sp, r7
 1222              		@ sp needed
 1223 0006 80BD     		pop	{r7, pc}
 1224              		.cfi_endproc
 1225              	.LFE39:
 1226              		.size	send_feedback, .-send_feedback
 1227              		.section	.text.fill_data_array,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 29


 1228              		.align	2
 1229              		.global	fill_data_array
 1230              		.code	16
 1231              		.thumb_func
 1232              		.type	fill_data_array, %function
 1233              	fill_data_array:
 1234              	.LFB40:
 348:.\main.c      **** 
 349:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 350:.\main.c      **** void fill_data_array()
 351:.\main.c      **** {
 1235              		.loc 1 351 0
 1236              		.cfi_startproc
 1237 0000 80B5     		push	{r7, lr}
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 7, -8
 1240              		.cfi_offset 14, -4
 1241 0002 00AF     		add	r7, sp, #0
 1242              		.cfi_def_cfa_register 7
 352:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1243              		.loc 1 352 0
 1244 0004 034B     		ldr	r3, .L83
 1245 0006 181C     		mov	r0, r3
 1246 0008 1621     		mov	r1, #22
 1247 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 353:.\main.c      **** //    uint8 i = 0;
 354:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 355:.\main.c      **** //    {
 356:.\main.c      **** //        data_array[i] = test_array[i];
 357:.\main.c      **** //    }
 358:.\main.c      **** }
 1248              		.loc 1 358 0
 1249 000e BD46     		mov	sp, r7
 1250              		@ sp needed
 1251 0010 80BD     		pop	{r7, pc}
 1252              	.L84:
 1253 0012 C046     		.align	2
 1254              	.L83:
 1255 0014 00000000 		.word	data_array
 1256              		.cfi_endproc
 1257              	.LFE40:
 1258              		.size	fill_data_array, .-fill_data_array
 1259              		.section	.text.ServoGoalPosition,"ax",%progbits
 1260              		.align	2
 1261              		.global	ServoGoalPosition
 1262              		.code	16
 1263              		.thumb_func
 1264              		.type	ServoGoalPosition, %function
 1265              	ServoGoalPosition:
 1266              	.LFB41:
 359:.\main.c      **** 
 360:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 361:.\main.c      **** {
 1267              		.loc 1 361 0
 1268              		.cfi_startproc
 1269 0000 80B5     		push	{r7, lr}
 1270              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 30


 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 86B0     		sub	sp, sp, #24
 1274              		.cfi_def_cfa_offset 32
 1275 0004 00AF     		add	r7, sp, #0
 1276              		.cfi_def_cfa_register 7
 1277 0006 0A1C     		mov	r2, r1
 1278 0008 FB1D     		add	r3, r7, #7
 1279 000a 011C     		add	r1, r0, #0
 1280 000c 1970     		strb	r1, [r3]
 1281 000e 3B1D     		add	r3, r7, #4
 1282 0010 1A80     		strh	r2, [r3]
 362:.\main.c      ****     uint8 array[9];
 363:.\main.c      ****     
 364:.\main.c      ****     array[0] = 0xFF;
 1283              		.loc 1 364 0
 1284 0012 3B1C     		mov	r3, r7
 1285 0014 0C33     		add	r3, r3, #12
 1286 0016 FF22     		mov	r2, #255
 1287 0018 1A70     		strb	r2, [r3]
 365:.\main.c      ****     array[1] = 0xFF;
 1288              		.loc 1 365 0
 1289 001a 3B1C     		mov	r3, r7
 1290 001c 0C33     		add	r3, r3, #12
 1291 001e FF22     		mov	r2, #255
 1292 0020 5A70     		strb	r2, [r3, #1]
 366:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1293              		.loc 1 366 0
 1294 0022 3B1C     		mov	r3, r7
 1295 0024 0C33     		add	r3, r3, #12
 1296 0026 FA1D     		add	r2, r7, #7
 1297 0028 1278     		ldrb	r2, [r2]
 1298 002a 9A70     		strb	r2, [r3, #2]
 367:.\main.c      ****     array[3] = 0x05;
 1299              		.loc 1 367 0
 1300 002c 3B1C     		mov	r3, r7
 1301 002e 0C33     		add	r3, r3, #12
 1302 0030 0522     		mov	r2, #5
 1303 0032 DA70     		strb	r2, [r3, #3]
 368:.\main.c      ****     array[4] = 0x03; //write instruction
 1304              		.loc 1 368 0
 1305 0034 3B1C     		mov	r3, r7
 1306 0036 0C33     		add	r3, r3, #12
 1307 0038 0322     		mov	r2, #3
 1308 003a 1A71     		strb	r2, [r3, #4]
 369:.\main.c      ****     array[5] = 0x1E;
 1309              		.loc 1 369 0
 1310 003c 3B1C     		mov	r3, r7
 1311 003e 0C33     		add	r3, r3, #12
 1312 0040 1E22     		mov	r2, #30
 1313 0042 5A71     		strb	r2, [r3, #5]
 370:.\main.c      ****     array[6] = position;
 1314              		.loc 1 370 0
 1315 0044 3B1D     		add	r3, r7, #4
 1316 0046 1B88     		ldrh	r3, [r3]
 1317 0048 DAB2     		uxtb	r2, r3
 1318 004a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 31


 1319 004c 0C33     		add	r3, r3, #12
 1320 004e 9A71     		strb	r2, [r3, #6]
 371:.\main.c      ****     array[7] = position >> 8;
 1321              		.loc 1 371 0
 1322 0050 3B1D     		add	r3, r7, #4
 1323 0052 1B88     		ldrh	r3, [r3]
 1324 0054 1B0A     		lsr	r3, r3, #8
 1325 0056 9BB2     		uxth	r3, r3
 1326 0058 DAB2     		uxtb	r2, r3
 1327 005a 3B1C     		mov	r3, r7
 1328 005c 0C33     		add	r3, r3, #12
 1329 005e DA71     		strb	r2, [r3, #7]
 372:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1330              		.loc 1 372 0
 1331 0060 3B1C     		mov	r3, r7
 1332 0062 0C33     		add	r3, r3, #12
 1333 0064 9A79     		ldrb	r2, [r3, #6]
 1334 0066 FB1D     		add	r3, r7, #7
 1335 0068 1B78     		ldrb	r3, [r3]
 1336 006a D318     		add	r3, r2, r3
 1337 006c DAB2     		uxtb	r2, r3
 1338 006e 3B1C     		mov	r3, r7
 1339 0070 0C33     		add	r3, r3, #12
 1340 0072 DB79     		ldrb	r3, [r3, #7]
 1341 0074 D318     		add	r3, r2, r3
 1342 0076 DBB2     		uxtb	r3, r3
 1343 0078 2633     		add	r3, r3, #38
 1344 007a DBB2     		uxtb	r3, r3
 1345 007c DB43     		mvn	r3, r3
 1346 007e DAB2     		uxtb	r2, r3
 1347 0080 3B1C     		mov	r3, r7
 1348 0082 0C33     		add	r3, r3, #12
 1349 0084 1A72     		strb	r2, [r3, #8]
 373:.\main.c      ****     
 374:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1350              		.loc 1 374 0
 1351 0086 3B1C     		mov	r3, r7
 1352 0088 0C33     		add	r3, r3, #12
 1353 008a 181C     		mov	r0, r3
 1354 008c 0921     		mov	r1, #9
 1355 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 375:.\main.c      **** }
 1356              		.loc 1 375 0
 1357 0092 BD46     		mov	sp, r7
 1358 0094 06B0     		add	sp, sp, #24
 1359              		@ sp needed
 1360 0096 80BD     		pop	{r7, pc}
 1361              		.cfi_endproc
 1362              	.LFE41:
 1363              		.size	ServoGoalPosition, .-ServoGoalPosition
 1364              		.section	.text.SetServoTorque,"ax",%progbits
 1365              		.align	2
 1366              		.global	SetServoTorque
 1367              		.code	16
 1368              		.thumb_func
 1369              		.type	SetServoTorque, %function
 1370              	SetServoTorque:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 32


 1371              	.LFB42:
 376:.\main.c      **** 
 377:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 378:.\main.c      **** {
 1372              		.loc 1 378 0
 1373              		.cfi_startproc
 1374 0000 80B5     		push	{r7, lr}
 1375              		.cfi_def_cfa_offset 8
 1376              		.cfi_offset 7, -8
 1377              		.cfi_offset 14, -4
 1378 0002 86B0     		sub	sp, sp, #24
 1379              		.cfi_def_cfa_offset 32
 1380 0004 00AF     		add	r7, sp, #0
 1381              		.cfi_def_cfa_register 7
 1382 0006 0A1C     		mov	r2, r1
 1383 0008 FB1D     		add	r3, r7, #7
 1384 000a 011C     		add	r1, r0, #0
 1385 000c 1970     		strb	r1, [r3]
 1386 000e 3B1D     		add	r3, r7, #4
 1387 0010 1A80     		strh	r2, [r3]
 379:.\main.c      ****     uint8 array[9];
 380:.\main.c      ****     
 381:.\main.c      ****     array[0] = 0xFF;
 1388              		.loc 1 381 0
 1389 0012 3B1C     		mov	r3, r7
 1390 0014 0C33     		add	r3, r3, #12
 1391 0016 FF22     		mov	r2, #255
 1392 0018 1A70     		strb	r2, [r3]
 382:.\main.c      ****     array[1] = 0xFF;
 1393              		.loc 1 382 0
 1394 001a 3B1C     		mov	r3, r7
 1395 001c 0C33     		add	r3, r3, #12
 1396 001e FF22     		mov	r2, #255
 1397 0020 5A70     		strb	r2, [r3, #1]
 383:.\main.c      ****     array[2] = servoID; 
 1398              		.loc 1 383 0
 1399 0022 3B1C     		mov	r3, r7
 1400 0024 0C33     		add	r3, r3, #12
 1401 0026 FA1D     		add	r2, r7, #7
 1402 0028 1278     		ldrb	r2, [r2]
 1403 002a 9A70     		strb	r2, [r3, #2]
 384:.\main.c      ****     array[3] = 0x05;
 1404              		.loc 1 384 0
 1405 002c 3B1C     		mov	r3, r7
 1406 002e 0C33     		add	r3, r3, #12
 1407 0030 0522     		mov	r2, #5
 1408 0032 DA70     		strb	r2, [r3, #3]
 385:.\main.c      ****     array[4] = 0x03; //write instruction
 1409              		.loc 1 385 0
 1410 0034 3B1C     		mov	r3, r7
 1411 0036 0C33     		add	r3, r3, #12
 1412 0038 0322     		mov	r2, #3
 1413 003a 1A71     		strb	r2, [r3, #4]
 386:.\main.c      ****     array[5] = 0x0E;
 1414              		.loc 1 386 0
 1415 003c 3B1C     		mov	r3, r7
 1416 003e 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 33


 1417 0040 0E22     		mov	r2, #14
 1418 0042 5A71     		strb	r2, [r3, #5]
 387:.\main.c      ****     array[6] = torque;
 1419              		.loc 1 387 0
 1420 0044 3B1D     		add	r3, r7, #4
 1421 0046 1B88     		ldrh	r3, [r3]
 1422 0048 DAB2     		uxtb	r2, r3
 1423 004a 3B1C     		mov	r3, r7
 1424 004c 0C33     		add	r3, r3, #12
 1425 004e 9A71     		strb	r2, [r3, #6]
 388:.\main.c      ****     array[7] = torque >> 8;
 1426              		.loc 1 388 0
 1427 0050 3B1D     		add	r3, r7, #4
 1428 0052 1B88     		ldrh	r3, [r3]
 1429 0054 1B0A     		lsr	r3, r3, #8
 1430 0056 9BB2     		uxth	r3, r3
 1431 0058 DAB2     		uxtb	r2, r3
 1432 005a 3B1C     		mov	r3, r7
 1433 005c 0C33     		add	r3, r3, #12
 1434 005e DA71     		strb	r2, [r3, #7]
 389:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1435              		.loc 1 389 0
 1436 0060 3B1C     		mov	r3, r7
 1437 0062 0C33     		add	r3, r3, #12
 1438 0064 9A79     		ldrb	r2, [r3, #6]
 1439 0066 FB1D     		add	r3, r7, #7
 1440 0068 1B78     		ldrb	r3, [r3]
 1441 006a D318     		add	r3, r2, r3
 1442 006c DAB2     		uxtb	r2, r3
 1443 006e 3B1C     		mov	r3, r7
 1444 0070 0C33     		add	r3, r3, #12
 1445 0072 DB79     		ldrb	r3, [r3, #7]
 1446 0074 D318     		add	r3, r2, r3
 1447 0076 DBB2     		uxtb	r3, r3
 1448 0078 1633     		add	r3, r3, #22
 1449 007a DBB2     		uxtb	r3, r3
 1450 007c DB43     		mvn	r3, r3
 1451 007e DAB2     		uxtb	r2, r3
 1452 0080 3B1C     		mov	r3, r7
 1453 0082 0C33     		add	r3, r3, #12
 1454 0084 1A72     		strb	r2, [r3, #8]
 390:.\main.c      ****     
 391:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1455              		.loc 1 391 0
 1456 0086 3B1C     		mov	r3, r7
 1457 0088 0C33     		add	r3, r3, #12
 1458 008a 181C     		mov	r0, r3
 1459 008c 0921     		mov	r1, #9
 1460 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 392:.\main.c      ****     
 393:.\main.c      **** }    
 1461              		.loc 1 393 0
 1462 0092 BD46     		mov	sp, r7
 1463 0094 06B0     		add	sp, sp, #24
 1464              		@ sp needed
 1465 0096 80BD     		pop	{r7, pc}
 1466              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 34


 1467              	.LFE42:
 1468              		.size	SetServoTorque, .-SetServoTorque
 1469              		.section	.text.ServoSpeed,"ax",%progbits
 1470              		.align	2
 1471              		.global	ServoSpeed
 1472              		.code	16
 1473              		.thumb_func
 1474              		.type	ServoSpeed, %function
 1475              	ServoSpeed:
 1476              	.LFB43:
 394:.\main.c      **** 
 395:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 396:.\main.c      **** {
 1477              		.loc 1 396 0
 1478              		.cfi_startproc
 1479 0000 80B5     		push	{r7, lr}
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 7, -8
 1482              		.cfi_offset 14, -4
 1483 0002 86B0     		sub	sp, sp, #24
 1484              		.cfi_def_cfa_offset 32
 1485 0004 00AF     		add	r7, sp, #0
 1486              		.cfi_def_cfa_register 7
 1487 0006 0A1C     		mov	r2, r1
 1488 0008 FB1D     		add	r3, r7, #7
 1489 000a 011C     		add	r1, r0, #0
 1490 000c 1970     		strb	r1, [r3]
 1491 000e 3B1D     		add	r3, r7, #4
 1492 0010 1A80     		strh	r2, [r3]
 397:.\main.c      ****     uint8 array[9];
 398:.\main.c      ****     
 399:.\main.c      ****     array[0] = 0xFF;
 1493              		.loc 1 399 0
 1494 0012 3B1C     		mov	r3, r7
 1495 0014 0C33     		add	r3, r3, #12
 1496 0016 FF22     		mov	r2, #255
 1497 0018 1A70     		strb	r2, [r3]
 400:.\main.c      ****     array[1] = 0xFF;
 1498              		.loc 1 400 0
 1499 001a 3B1C     		mov	r3, r7
 1500 001c 0C33     		add	r3, r3, #12
 1501 001e FF22     		mov	r2, #255
 1502 0020 5A70     		strb	r2, [r3, #1]
 401:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1503              		.loc 1 401 0
 1504 0022 3B1C     		mov	r3, r7
 1505 0024 0C33     		add	r3, r3, #12
 1506 0026 FA1D     		add	r2, r7, #7
 1507 0028 1278     		ldrb	r2, [r2]
 1508 002a 9A70     		strb	r2, [r3, #2]
 402:.\main.c      ****     array[3] = 0x05;
 1509              		.loc 1 402 0
 1510 002c 3B1C     		mov	r3, r7
 1511 002e 0C33     		add	r3, r3, #12
 1512 0030 0522     		mov	r2, #5
 1513 0032 DA70     		strb	r2, [r3, #3]
 403:.\main.c      ****     array[4] = 0x03; //write instruction
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 35


 1514              		.loc 1 403 0
 1515 0034 3B1C     		mov	r3, r7
 1516 0036 0C33     		add	r3, r3, #12
 1517 0038 0322     		mov	r2, #3
 1518 003a 1A71     		strb	r2, [r3, #4]
 404:.\main.c      ****     array[5] = 0x20;
 1519              		.loc 1 404 0
 1520 003c 3B1C     		mov	r3, r7
 1521 003e 0C33     		add	r3, r3, #12
 1522 0040 2022     		mov	r2, #32
 1523 0042 5A71     		strb	r2, [r3, #5]
 405:.\main.c      ****     array[6] = speed;
 1524              		.loc 1 405 0
 1525 0044 3B1D     		add	r3, r7, #4
 1526 0046 1B88     		ldrh	r3, [r3]
 1527 0048 DAB2     		uxtb	r2, r3
 1528 004a 3B1C     		mov	r3, r7
 1529 004c 0C33     		add	r3, r3, #12
 1530 004e 9A71     		strb	r2, [r3, #6]
 406:.\main.c      ****     array[7] = speed >> 8;
 1531              		.loc 1 406 0
 1532 0050 3B1D     		add	r3, r7, #4
 1533 0052 1B88     		ldrh	r3, [r3]
 1534 0054 1B0A     		lsr	r3, r3, #8
 1535 0056 9BB2     		uxth	r3, r3
 1536 0058 DAB2     		uxtb	r2, r3
 1537 005a 3B1C     		mov	r3, r7
 1538 005c 0C33     		add	r3, r3, #12
 1539 005e DA71     		strb	r2, [r3, #7]
 407:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1540              		.loc 1 407 0
 1541 0060 3B1C     		mov	r3, r7
 1542 0062 0C33     		add	r3, r3, #12
 1543 0064 9A79     		ldrb	r2, [r3, #6]
 1544 0066 FB1D     		add	r3, r7, #7
 1545 0068 1B78     		ldrb	r3, [r3]
 1546 006a D318     		add	r3, r2, r3
 1547 006c DAB2     		uxtb	r2, r3
 1548 006e 3B1C     		mov	r3, r7
 1549 0070 0C33     		add	r3, r3, #12
 1550 0072 DB79     		ldrb	r3, [r3, #7]
 1551 0074 D318     		add	r3, r2, r3
 1552 0076 DBB2     		uxtb	r3, r3
 1553 0078 2833     		add	r3, r3, #40
 1554 007a DBB2     		uxtb	r3, r3
 1555 007c DB43     		mvn	r3, r3
 1556 007e DAB2     		uxtb	r2, r3
 1557 0080 3B1C     		mov	r3, r7
 1558 0082 0C33     		add	r3, r3, #12
 1559 0084 1A72     		strb	r2, [r3, #8]
 408:.\main.c      ****     
 409:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1560              		.loc 1 409 0
 1561 0086 3B1C     		mov	r3, r7
 1562 0088 0C33     		add	r3, r3, #12
 1563 008a 181C     		mov	r0, r3
 1564 008c 0921     		mov	r1, #9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 36


 1565 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 410:.\main.c      ****     
 411:.\main.c      **** }
 1566              		.loc 1 411 0
 1567 0092 BD46     		mov	sp, r7
 1568 0094 06B0     		add	sp, sp, #24
 1569              		@ sp needed
 1570 0096 80BD     		pop	{r7, pc}
 1571              		.cfi_endproc
 1572              	.LFE43:
 1573              		.size	ServoSpeed, .-ServoSpeed
 1574              		.comm	wristTilt_state,1,1
 1575              		.section	.text.wristTilt,"ax",%progbits
 1576              		.align	2
 1577              		.global	wristTilt
 1578              		.code	16
 1579              		.thumb_func
 1580              		.type	wristTilt, %function
 1581              	wristTilt:
 1582              	.LFB44:
 412:.\main.c      **** 
 413:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 414:.\main.c      **** //control the tilting motion of the wrist
 415:.\main.c      **** void wristTilt()
 416:.\main.c      **** {
 1583              		.loc 1 416 0
 1584              		.cfi_startproc
 1585 0000 90B5     		push	{r4, r7, lr}
 1586              		.cfi_def_cfa_offset 12
 1587              		.cfi_offset 4, -12
 1588              		.cfi_offset 7, -8
 1589              		.cfi_offset 14, -4
 1590 0002 83B0     		sub	sp, sp, #12
 1591              		.cfi_def_cfa_offset 24
 1592 0004 00AF     		add	r7, sp, #0
 1593              		.cfi_def_cfa_register 7
 417:.\main.c      ****     // Overview
 418:.\main.c      ****     //take instruction from data_array
 419:.\main.c      ****     //smooth input
 420:.\main.c      ****     //actuate the tilting using UART
 421:.\main.c      ****     //get feedback
 422:.\main.c      **** 
 423:.\main.c      ****     //-------------------------- 
 424:.\main.c      ****     // Dynamixel Servo specific
 425:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 426:.\main.c      ****     // TODO: Set the desired position
 427:.\main.c      **** 
 428:.\main.c      ****     //--------------------------
 429:.\main.c      ****     // State machine
 430:.\main.c      ****     
 431:.\main.c      ****     uint8 i;
 432:.\main.c      ****     uint16 avg;
 433:.\main.c      ****     uint16 command;
 434:.\main.c      ****     
 435:.\main.c      ****     switch(wristTilt_state){ //actions
 1594              		.loc 1 435 0
 1595 0006 4B4B     		ldr	r3, .L112
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 37


 1596 0008 1B78     		ldrb	r3, [r3]
 1597 000a 012B     		cmp	r3, #1
 1598 000c 03D0     		beq	.L90
 1599 000e 60DD     		ble	.L111
 1600 0010 022B     		cmp	r3, #2
 1601 0012 1CD0     		beq	.L93
 436:.\main.c      ****         case tilt_start:
 437:.\main.c      ****             break;
 438:.\main.c      **** 
 439:.\main.c      ****         case tilt_init:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 441:.\main.c      ****             {
 442:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 443:.\main.c      ****             }
 444:.\main.c      ****             WT_arr_cspot = 0;
 445:.\main.c      ****             
 446:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 447:.\main.c      ****             break;
 448:.\main.c      **** 
 449:.\main.c      ****         case tilt_control:
 450:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 451:.\main.c      ****             
 452:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 453:.\main.c      ****             
 454:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 455:.\main.c      ****             {
 456:.\main.c      ****                 WT_arr_cspot++;
 457:.\main.c      ****             }
 458:.\main.c      ****             else
 459:.\main.c      ****             {
 460:.\main.c      ****                 WT_arr_cspot = 0;
 461:.\main.c      ****             }
 462:.\main.c      ****             
 463:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 464:.\main.c      ****             
 465:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 466:.\main.c      ****             
 467:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 468:.\main.c      ****             {
 469:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 //throw error
 474:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 475:.\main.c      ****             }
 476:.\main.c      ****             WT_FLAG = 0;
 477:.\main.c      ****             break;
 478:.\main.c      ****             
 479:.\main.c      ****         case tilt_wait:
 480:.\main.c      ****             break;
 1602              		.loc 1 480 0
 1603 0014 5EE0     		b	.L89
 1604              	.L90:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1605              		.loc 1 440 0
 1606 0016 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 38


 1607 0018 0022     		mov	r2, #0
 1608 001a 1A70     		strb	r2, [r3]
 1609 001c 0AE0     		b	.L95
 1610              	.L96:
 442:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1611              		.loc 1 442 0 discriminator 2
 1612 001e FB1D     		add	r3, r7, #7
 1613 0020 1A78     		ldrb	r2, [r3]
 1614 0022 454B     		ldr	r3, .L112+4
 1615 0024 5200     		lsl	r2, r2, #1
 1616 0026 4549     		ldr	r1, .L112+8
 1617 0028 D152     		strh	r1, [r2, r3]
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1618              		.loc 1 440 0 discriminator 2
 1619 002a FB1D     		add	r3, r7, #7
 1620 002c 1A78     		ldrb	r2, [r3]
 1621 002e FB1D     		add	r3, r7, #7
 1622 0030 0132     		add	r2, r2, #1
 1623 0032 1A70     		strb	r2, [r3]
 1624              	.L95:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1625              		.loc 1 440 0 is_stmt 0 discriminator 1
 1626 0034 FB1D     		add	r3, r7, #7
 1627 0036 1B78     		ldrb	r3, [r3]
 1628 0038 132B     		cmp	r3, #19
 1629 003a F0D9     		bls	.L96
 444:.\main.c      ****             WT_arr_cspot = 0;
 1630              		.loc 1 444 0 is_stmt 1
 1631 003c 404B     		ldr	r3, .L112+12
 1632 003e 0022     		mov	r2, #0
 1633 0040 1A70     		strb	r2, [r3]
 446:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1634              		.loc 1 446 0
 1635 0042 3E4B     		ldr	r3, .L112+8
 1636 0044 0220     		mov	r0, #2
 1637 0046 191C     		mov	r1, r3
 1638 0048 FFF7FEFF 		bl	ServoGoalPosition
 447:.\main.c      ****             break;
 1639              		.loc 1 447 0
 1640 004c 42E0     		b	.L89
 1641              	.L93:
 450:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1642              		.loc 1 450 0
 1643 004e 3C1D     		add	r4, r7, #4
 1644 0050 3C4B     		ldr	r3, .L112+16
 1645 0052 181C     		mov	r0, r3
 1646 0054 1021     		mov	r1, #16
 1647 0056 1122     		mov	r2, #17
 1648 0058 FFF7FEFF 		bl	make_command
 1649 005c 031C     		mov	r3, r0
 1650 005e 2380     		strh	r3, [r4]
 452:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1651              		.loc 1 452 0
 1652 0060 374B     		ldr	r3, .L112+12
 1653 0062 1B78     		ldrb	r3, [r3]
 1654 0064 1A1C     		mov	r2, r3
 1655 0066 344B     		ldr	r3, .L112+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 39


 1656 0068 5200     		lsl	r2, r2, #1
 1657 006a 391D     		add	r1, r7, #4
 1658 006c 0988     		ldrh	r1, [r1]
 1659 006e D152     		strh	r1, [r2, r3]
 454:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1660              		.loc 1 454 0
 1661 0070 334B     		ldr	r3, .L112+12
 1662 0072 1B78     		ldrb	r3, [r3]
 1663 0074 122B     		cmp	r3, #18
 1664 0076 06D8     		bhi	.L97
 456:.\main.c      ****                 WT_arr_cspot++;
 1665              		.loc 1 456 0
 1666 0078 314B     		ldr	r3, .L112+12
 1667 007a 1B78     		ldrb	r3, [r3]
 1668 007c 0133     		add	r3, r3, #1
 1669 007e DAB2     		uxtb	r2, r3
 1670 0080 2F4B     		ldr	r3, .L112+12
 1671 0082 1A70     		strb	r2, [r3]
 1672 0084 02E0     		b	.L98
 1673              	.L97:
 460:.\main.c      ****                 WT_arr_cspot = 0;
 1674              		.loc 1 460 0
 1675 0086 2E4B     		ldr	r3, .L112+12
 1676 0088 0022     		mov	r2, #0
 1677 008a 1A70     		strb	r2, [r3]
 1678              	.L98:
 465:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1679              		.loc 1 465 0
 1680 008c BC1C     		add	r4, r7, #2
 1681 008e 2A4B     		ldr	r3, .L112+4
 1682 0090 181C     		mov	r0, r3
 1683 0092 1421     		mov	r1, #20
 1684 0094 FFF7FEFF 		bl	average
 1685 0098 031C     		mov	r3, r0
 1686 009a 2380     		strh	r3, [r4]
 467:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1687              		.loc 1 467 0
 1688 009c BB1C     		add	r3, r7, #2
 1689 009e 1A88     		ldrh	r2, [r3]
 1690 00a0 FA23     		mov	r3, #250
 1691 00a2 DB00     		lsl	r3, r3, #3
 1692 00a4 9A42     		cmp	r2, r3
 1693 00a6 0BD8     		bhi	.L99
 467:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1694              		.loc 1 467 0 is_stmt 0 discriminator 1
 1695 00a8 BB1C     		add	r3, r7, #2
 1696 00aa 1A88     		ldrh	r2, [r3]
 1697 00ac 264B     		ldr	r3, .L112+20
 1698 00ae 9A42     		cmp	r2, r3
 1699 00b0 06D9     		bls	.L99
 469:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1700              		.loc 1 469 0 is_stmt 1
 1701 00b2 BB1C     		add	r3, r7, #2
 1702 00b4 1B88     		ldrh	r3, [r3]
 1703 00b6 0220     		mov	r0, #2
 1704 00b8 191C     		mov	r1, r3
 1705 00ba FFF7FEFF 		bl	ServoGoalPosition
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 40


 1706 00be 04E0     		b	.L100
 1707              	.L99:
 474:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1708              		.loc 1 474 0
 1709 00c0 1E4B     		ldr	r3, .L112+8
 1710 00c2 0220     		mov	r0, #2
 1711 00c4 191C     		mov	r1, r3
 1712 00c6 FFF7FEFF 		bl	ServoGoalPosition
 1713              	.L100:
 476:.\main.c      ****             WT_FLAG = 0;
 1714              		.loc 1 476 0
 1715 00ca 204B     		ldr	r3, .L112+24
 1716 00cc 0022     		mov	r2, #0
 1717 00ce 1A70     		strb	r2, [r3]
 477:.\main.c      ****             break;
 1718              		.loc 1 477 0
 1719 00d0 00E0     		b	.L89
 1720              	.L111:
 437:.\main.c      ****             break;
 1721              		.loc 1 437 0
 1722 00d2 C046     		mov	r8, r8
 1723              	.L89:
 481:.\main.c      ****     }
 482:.\main.c      ****     
 483:.\main.c      ****     switch(wristTilt_state){ //transitions
 1724              		.loc 1 483 0
 1725 00d4 174B     		ldr	r3, .L112
 1726 00d6 1B78     		ldrb	r3, [r3]
 1727 00d8 012B     		cmp	r3, #1
 1728 00da 0CD0     		beq	.L102
 1729 00dc 02DC     		bgt	.L103
 1730 00de 002B     		cmp	r3, #0
 1731 00e0 05D0     		beq	.L104
 1732 00e2 24E0     		b	.L88
 1733              	.L103:
 1734 00e4 022B     		cmp	r3, #2
 1735 00e6 0AD0     		beq	.L105
 1736 00e8 032B     		cmp	r3, #3
 1737 00ea 14D0     		beq	.L106
 1738 00ec 1FE0     		b	.L88
 1739              	.L104:
 484:.\main.c      ****         case tilt_start:
 485:.\main.c      ****             wristTilt_state = tilt_init;
 1740              		.loc 1 485 0
 1741 00ee 114B     		ldr	r3, .L112
 1742 00f0 0122     		mov	r2, #1
 1743 00f2 1A70     		strb	r2, [r3]
 486:.\main.c      ****             break;
 1744              		.loc 1 486 0
 1745 00f4 1BE0     		b	.L88
 1746              	.L102:
 487:.\main.c      ****         
 488:.\main.c      ****         case tilt_init:
 489:.\main.c      ****             wristTilt_state = tilt_wait;
 1747              		.loc 1 489 0
 1748 00f6 0F4B     		ldr	r3, .L112
 1749 00f8 0322     		mov	r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 41


 1750 00fa 1A70     		strb	r2, [r3]
 490:.\main.c      ****             break;
 1751              		.loc 1 490 0
 1752 00fc 17E0     		b	.L88
 1753              	.L105:
 491:.\main.c      ****         
 492:.\main.c      ****         case tilt_control:
 493:.\main.c      ****             if(WT_FLAG)
 1754              		.loc 1 493 0
 1755 00fe 134B     		ldr	r3, .L112+24
 1756 0100 1B78     		ldrb	r3, [r3]
 1757 0102 002B     		cmp	r3, #0
 1758 0104 03D0     		beq	.L107
 494:.\main.c      ****             {
 495:.\main.c      ****                 wristTilt_state = tilt_control;
 1759              		.loc 1 495 0
 1760 0106 0B4B     		ldr	r3, .L112
 1761 0108 0222     		mov	r2, #2
 1762 010a 1A70     		strb	r2, [r3]
 496:.\main.c      ****             }
 497:.\main.c      ****             else
 498:.\main.c      ****             {
 499:.\main.c      ****                 wristTilt_state = tilt_wait;
 500:.\main.c      ****             }
 501:.\main.c      ****             break;
 1763              		.loc 1 501 0
 1764 010c 0FE0     		b	.L88
 1765              	.L107:
 499:.\main.c      ****                 wristTilt_state = tilt_wait;
 1766              		.loc 1 499 0
 1767 010e 094B     		ldr	r3, .L112
 1768 0110 0322     		mov	r2, #3
 1769 0112 1A70     		strb	r2, [r3]
 1770              		.loc 1 501 0
 1771 0114 0BE0     		b	.L88
 1772              	.L106:
 502:.\main.c      ****         
 503:.\main.c      ****         case tilt_wait:
 504:.\main.c      ****             if(WT_FLAG)
 1773              		.loc 1 504 0
 1774 0116 0D4B     		ldr	r3, .L112+24
 1775 0118 1B78     		ldrb	r3, [r3]
 1776 011a 002B     		cmp	r3, #0
 1777 011c 03D0     		beq	.L109
 505:.\main.c      ****             {
 506:.\main.c      ****                 wristTilt_state = tilt_control;
 1778              		.loc 1 506 0
 1779 011e 054B     		ldr	r3, .L112
 1780 0120 0222     		mov	r2, #2
 1781 0122 1A70     		strb	r2, [r3]
 1782 0124 02E0     		b	.L110
 1783              	.L109:
 507:.\main.c      ****             }
 508:.\main.c      ****             else
 509:.\main.c      ****             {
 510:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1784              		.loc 1 510 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 42


 1785 0126 034B     		ldr	r3, .L112
 1786 0128 0322     		mov	r2, #3
 1787 012a 1A70     		strb	r2, [r3]
 1788              	.L110:
 511:.\main.c      ****             }
 512:.\main.c      ****             break;
 1789              		.loc 1 512 0
 1790 012c C046     		mov	r8, r8
 1791              	.L88:
 513:.\main.c      ****     }    
 514:.\main.c      **** }
 1792              		.loc 1 514 0
 1793 012e BD46     		mov	sp, r7
 1794 0130 03B0     		add	sp, sp, #12
 1795              		@ sp needed
 1796 0132 90BD     		pop	{r4, r7, pc}
 1797              	.L113:
 1798              		.align	2
 1799              	.L112:
 1800 0134 00000000 		.word	wristTilt_state
 1801 0138 00000000 		.word	WT_array
 1802 013c DC050000 		.word	1500
 1803 0140 00000000 		.word	WT_arr_cspot
 1804 0144 00000000 		.word	data_array
 1805 0148 E7030000 		.word	999
 1806 014c 00000000 		.word	WT_FLAG
 1807              		.cfi_endproc
 1808              	.LFE44:
 1809              		.size	wristTilt, .-wristTilt
 1810              		.comm	wristRotate_state,1,1
 1811              		.section	.text.wristRotate,"ax",%progbits
 1812              		.align	2
 1813              		.global	wristRotate
 1814              		.code	16
 1815              		.thumb_func
 1816              		.type	wristRotate, %function
 1817              	wristRotate:
 1818              	.LFB45:
 515:.\main.c      **** 
 516:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 517:.\main.c      **** //control the rotating motion of the wrist
 518:.\main.c      **** void wristRotate()
 519:.\main.c      **** {
 1819              		.loc 1 519 0
 1820              		.cfi_startproc
 1821 0000 90B5     		push	{r4, r7, lr}
 1822              		.cfi_def_cfa_offset 12
 1823              		.cfi_offset 4, -12
 1824              		.cfi_offset 7, -8
 1825              		.cfi_offset 14, -4
 1826 0002 83B0     		sub	sp, sp, #12
 1827              		.cfi_def_cfa_offset 24
 1828 0004 00AF     		add	r7, sp, #0
 1829              		.cfi_def_cfa_register 7
 520:.\main.c      ****     //Overview
 521:.\main.c      ****     //take instruction from data_array
 522:.\main.c      ****     //smooth input
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 43


 523:.\main.c      ****     //actuate the tilting using UART
 524:.\main.c      ****     //get feedback
 525:.\main.c      **** 
 526:.\main.c      ****     //-------------------------- 
 527:.\main.c      ****     // Dynamixel Servo specific
 528:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 529:.\main.c      ****     // TODO: Set the desired position
 530:.\main.c      **** 
 531:.\main.c      ****     //--------------------------
 532:.\main.c      ****     // State machine
 533:.\main.c      ****     
 534:.\main.c      ****     uint8 i;
 535:.\main.c      ****     uint16 avg;
 536:.\main.c      ****     uint16 command;
 537:.\main.c      ****     
 538:.\main.c      ****     switch(wristRotate_state){ //actions
 1830              		.loc 1 538 0
 1831 0006 4B4B     		ldr	r3, .L138
 1832 0008 1B78     		ldrb	r3, [r3]
 1833 000a 012B     		cmp	r3, #1
 1834 000c 03D0     		beq	.L116
 1835 000e 60DD     		ble	.L137
 1836 0010 022B     		cmp	r3, #2
 1837 0012 1CD0     		beq	.L119
 539:.\main.c      ****         case rotate_start:
 540:.\main.c      ****             break;
 541:.\main.c      **** 
 542:.\main.c      ****         case rotate_init:
 543:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 544:.\main.c      ****             {
 545:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 546:.\main.c      ****             }
 547:.\main.c      ****             WR_arr_cspot = 0;
 548:.\main.c      ****             
 549:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 550:.\main.c      ****             break;
 551:.\main.c      **** 
 552:.\main.c      ****         case rotate_control:
 553:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 554:.\main.c      ****             
 555:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 556:.\main.c      ****             
 557:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 558:.\main.c      ****             {
 559:.\main.c      ****                 WR_arr_cspot++;
 560:.\main.c      ****             }
 561:.\main.c      ****             else
 562:.\main.c      ****             {
 563:.\main.c      ****                 WR_arr_cspot = 0;
 564:.\main.c      ****             }
 565:.\main.c      ****             
 566:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 567:.\main.c      ****             
 568:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 569:.\main.c      ****             
 570:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 571:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 44


 572:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 573:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 574:.\main.c      ****             }
 575:.\main.c      ****             else
 576:.\main.c      ****             {
 577:.\main.c      ****                 //throw error
 578:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 579:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 580:.\main.c      ****             }
 581:.\main.c      ****             WR_FLAG = 0;
 582:.\main.c      ****             break;
 583:.\main.c      ****             
 584:.\main.c      ****         case rotate_wait:
 585:.\main.c      ****             break;
 1838              		.loc 1 585 0
 1839 0014 5EE0     		b	.L115
 1840              	.L116:
 543:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1841              		.loc 1 543 0
 1842 0016 FB1D     		add	r3, r7, #7
 1843 0018 0022     		mov	r2, #0
 1844 001a 1A70     		strb	r2, [r3]
 1845 001c 0AE0     		b	.L121
 1846              	.L122:
 545:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 1847              		.loc 1 545 0 discriminator 2
 1848 001e FB1D     		add	r3, r7, #7
 1849 0020 1A78     		ldrb	r2, [r3]
 1850 0022 454B     		ldr	r3, .L138+4
 1851 0024 5200     		lsl	r2, r2, #1
 1852 0026 4549     		ldr	r1, .L138+8
 1853 0028 D152     		strh	r1, [r2, r3]
 543:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1854              		.loc 1 543 0 discriminator 2
 1855 002a FB1D     		add	r3, r7, #7
 1856 002c 1A78     		ldrb	r2, [r3]
 1857 002e FB1D     		add	r3, r7, #7
 1858 0030 0132     		add	r2, r2, #1
 1859 0032 1A70     		strb	r2, [r3]
 1860              	.L121:
 543:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1861              		.loc 1 543 0 is_stmt 0 discriminator 1
 1862 0034 FB1D     		add	r3, r7, #7
 1863 0036 1B78     		ldrb	r3, [r3]
 1864 0038 132B     		cmp	r3, #19
 1865 003a F0D9     		bls	.L122
 547:.\main.c      ****             WR_arr_cspot = 0;
 1866              		.loc 1 547 0 is_stmt 1
 1867 003c 404B     		ldr	r3, .L138+12
 1868 003e 0022     		mov	r2, #0
 1869 0040 1A70     		strb	r2, [r3]
 549:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 1870              		.loc 1 549 0
 1871 0042 3E4B     		ldr	r3, .L138+8
 1872 0044 0120     		mov	r0, #1
 1873 0046 191C     		mov	r1, r3
 1874 0048 FFF7FEFF 		bl	ServoGoalPosition
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 45


 550:.\main.c      ****             break;
 1875              		.loc 1 550 0
 1876 004c 42E0     		b	.L115
 1877              	.L119:
 553:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1878              		.loc 1 553 0
 1879 004e 3C1D     		add	r4, r7, #4
 1880 0050 3C4B     		ldr	r3, .L138+16
 1881 0052 181C     		mov	r0, r3
 1882 0054 1221     		mov	r1, #18
 1883 0056 1322     		mov	r2, #19
 1884 0058 FFF7FEFF 		bl	make_command
 1885 005c 031C     		mov	r3, r0
 1886 005e 2380     		strh	r3, [r4]
 555:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 1887              		.loc 1 555 0
 1888 0060 374B     		ldr	r3, .L138+12
 1889 0062 1B78     		ldrb	r3, [r3]
 1890 0064 1A1C     		mov	r2, r3
 1891 0066 344B     		ldr	r3, .L138+4
 1892 0068 5200     		lsl	r2, r2, #1
 1893 006a 391D     		add	r1, r7, #4
 1894 006c 0988     		ldrh	r1, [r1]
 1895 006e D152     		strh	r1, [r2, r3]
 557:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1896              		.loc 1 557 0
 1897 0070 334B     		ldr	r3, .L138+12
 1898 0072 1B78     		ldrb	r3, [r3]
 1899 0074 122B     		cmp	r3, #18
 1900 0076 06D8     		bhi	.L123
 559:.\main.c      ****                 WR_arr_cspot++;
 1901              		.loc 1 559 0
 1902 0078 314B     		ldr	r3, .L138+12
 1903 007a 1B78     		ldrb	r3, [r3]
 1904 007c 0133     		add	r3, r3, #1
 1905 007e DAB2     		uxtb	r2, r3
 1906 0080 2F4B     		ldr	r3, .L138+12
 1907 0082 1A70     		strb	r2, [r3]
 1908 0084 02E0     		b	.L124
 1909              	.L123:
 563:.\main.c      ****                 WR_arr_cspot = 0;
 1910              		.loc 1 563 0
 1911 0086 2E4B     		ldr	r3, .L138+12
 1912 0088 0022     		mov	r2, #0
 1913 008a 1A70     		strb	r2, [r3]
 1914              	.L124:
 568:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1915              		.loc 1 568 0
 1916 008c BC1C     		add	r4, r7, #2
 1917 008e 2A4B     		ldr	r3, .L138+4
 1918 0090 181C     		mov	r0, r3
 1919 0092 1421     		mov	r1, #20
 1920 0094 FFF7FEFF 		bl	average
 1921 0098 031C     		mov	r3, r0
 1922 009a 2380     		strh	r3, [r4]
 570:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1923              		.loc 1 570 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 46


 1924 009c BB1C     		add	r3, r7, #2
 1925 009e 1A88     		ldrh	r2, [r3]
 1926 00a0 FA23     		mov	r3, #250
 1927 00a2 DB00     		lsl	r3, r3, #3
 1928 00a4 9A42     		cmp	r2, r3
 1929 00a6 0BD8     		bhi	.L125
 570:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1930              		.loc 1 570 0 is_stmt 0 discriminator 1
 1931 00a8 BB1C     		add	r3, r7, #2
 1932 00aa 1A88     		ldrh	r2, [r3]
 1933 00ac 264B     		ldr	r3, .L138+20
 1934 00ae 9A42     		cmp	r2, r3
 1935 00b0 06D9     		bls	.L125
 573:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1936              		.loc 1 573 0 is_stmt 1
 1937 00b2 BB1C     		add	r3, r7, #2
 1938 00b4 1B88     		ldrh	r3, [r3]
 1939 00b6 0120     		mov	r0, #1
 1940 00b8 191C     		mov	r1, r3
 1941 00ba FFF7FEFF 		bl	ServoGoalPosition
 1942 00be 04E0     		b	.L126
 1943              	.L125:
 579:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1944              		.loc 1 579 0
 1945 00c0 1E4B     		ldr	r3, .L138+8
 1946 00c2 0120     		mov	r0, #1
 1947 00c4 191C     		mov	r1, r3
 1948 00c6 FFF7FEFF 		bl	ServoGoalPosition
 1949              	.L126:
 581:.\main.c      ****             WR_FLAG = 0;
 1950              		.loc 1 581 0
 1951 00ca 204B     		ldr	r3, .L138+24
 1952 00cc 0022     		mov	r2, #0
 1953 00ce 1A70     		strb	r2, [r3]
 582:.\main.c      ****             break;
 1954              		.loc 1 582 0
 1955 00d0 00E0     		b	.L115
 1956              	.L137:
 540:.\main.c      ****             break;
 1957              		.loc 1 540 0
 1958 00d2 C046     		mov	r8, r8
 1959              	.L115:
 586:.\main.c      ****     }
 587:.\main.c      ****     
 588:.\main.c      ****     switch(wristRotate_state){ //transitions
 1960              		.loc 1 588 0
 1961 00d4 174B     		ldr	r3, .L138
 1962 00d6 1B78     		ldrb	r3, [r3]
 1963 00d8 012B     		cmp	r3, #1
 1964 00da 0CD0     		beq	.L128
 1965 00dc 02DC     		bgt	.L129
 1966 00de 002B     		cmp	r3, #0
 1967 00e0 05D0     		beq	.L130
 1968 00e2 24E0     		b	.L114
 1969              	.L129:
 1970 00e4 022B     		cmp	r3, #2
 1971 00e6 0AD0     		beq	.L131
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 47


 1972 00e8 032B     		cmp	r3, #3
 1973 00ea 14D0     		beq	.L132
 1974 00ec 1FE0     		b	.L114
 1975              	.L130:
 589:.\main.c      ****         case rotate_start:
 590:.\main.c      ****             wristRotate_state = rotate_init;
 1976              		.loc 1 590 0
 1977 00ee 114B     		ldr	r3, .L138
 1978 00f0 0122     		mov	r2, #1
 1979 00f2 1A70     		strb	r2, [r3]
 591:.\main.c      ****             break;
 1980              		.loc 1 591 0
 1981 00f4 1BE0     		b	.L114
 1982              	.L128:
 592:.\main.c      ****         
 593:.\main.c      ****         case rotate_init:
 594:.\main.c      ****             wristRotate_state = rotate_wait;
 1983              		.loc 1 594 0
 1984 00f6 0F4B     		ldr	r3, .L138
 1985 00f8 0322     		mov	r2, #3
 1986 00fa 1A70     		strb	r2, [r3]
 595:.\main.c      ****             break;
 1987              		.loc 1 595 0
 1988 00fc 17E0     		b	.L114
 1989              	.L131:
 596:.\main.c      ****         
 597:.\main.c      ****         case rotate_control:
 598:.\main.c      ****             if(WR_FLAG)
 1990              		.loc 1 598 0
 1991 00fe 134B     		ldr	r3, .L138+24
 1992 0100 1B78     		ldrb	r3, [r3]
 1993 0102 002B     		cmp	r3, #0
 1994 0104 03D0     		beq	.L133
 599:.\main.c      ****             {
 600:.\main.c      ****                 wristRotate_state = rotate_control;
 1995              		.loc 1 600 0
 1996 0106 0B4B     		ldr	r3, .L138
 1997 0108 0222     		mov	r2, #2
 1998 010a 1A70     		strb	r2, [r3]
 601:.\main.c      ****             }
 602:.\main.c      ****             else
 603:.\main.c      ****             {
 604:.\main.c      ****                 wristRotate_state = rotate_wait;
 605:.\main.c      ****             }
 606:.\main.c      ****             break;
 1999              		.loc 1 606 0
 2000 010c 0FE0     		b	.L114
 2001              	.L133:
 604:.\main.c      ****                 wristRotate_state = rotate_wait;
 2002              		.loc 1 604 0
 2003 010e 094B     		ldr	r3, .L138
 2004 0110 0322     		mov	r2, #3
 2005 0112 1A70     		strb	r2, [r3]
 2006              		.loc 1 606 0
 2007 0114 0BE0     		b	.L114
 2008              	.L132:
 607:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 48


 608:.\main.c      ****         case rotate_wait:
 609:.\main.c      ****             if(WR_FLAG)
 2009              		.loc 1 609 0
 2010 0116 0D4B     		ldr	r3, .L138+24
 2011 0118 1B78     		ldrb	r3, [r3]
 2012 011a 002B     		cmp	r3, #0
 2013 011c 03D0     		beq	.L135
 610:.\main.c      ****             {
 611:.\main.c      ****                 wristRotate_state = rotate_control;
 2014              		.loc 1 611 0
 2015 011e 054B     		ldr	r3, .L138
 2016 0120 0222     		mov	r2, #2
 2017 0122 1A70     		strb	r2, [r3]
 2018 0124 02E0     		b	.L136
 2019              	.L135:
 612:.\main.c      ****             }
 613:.\main.c      ****             else
 614:.\main.c      ****             {
 615:.\main.c      ****                 wristRotate_state = rotate_wait;
 2020              		.loc 1 615 0
 2021 0126 034B     		ldr	r3, .L138
 2022 0128 0322     		mov	r2, #3
 2023 012a 1A70     		strb	r2, [r3]
 2024              	.L136:
 616:.\main.c      ****             }
 617:.\main.c      ****             break;
 2025              		.loc 1 617 0
 2026 012c C046     		mov	r8, r8
 2027              	.L114:
 618:.\main.c      ****     }    
 619:.\main.c      **** }
 2028              		.loc 1 619 0
 2029 012e BD46     		mov	sp, r7
 2030 0130 03B0     		add	sp, sp, #12
 2031              		@ sp needed
 2032 0132 90BD     		pop	{r4, r7, pc}
 2033              	.L139:
 2034              		.align	2
 2035              	.L138:
 2036 0134 00000000 		.word	wristRotate_state
 2037 0138 00000000 		.word	WR_array
 2038 013c DC050000 		.word	1500
 2039 0140 00000000 		.word	WR_arr_cspot
 2040 0144 00000000 		.word	data_array
 2041 0148 E7030000 		.word	999
 2042 014c 00000000 		.word	WR_FLAG
 2043              		.cfi_endproc
 2044              	.LFE45:
 2045              		.size	wristRotate, .-wristRotate
 2046              		.comm	elbow_state,1,1
 2047              		.section	.text.elbow,"ax",%progbits
 2048              		.align	2
 2049              		.global	elbow
 2050              		.code	16
 2051              		.thumb_func
 2052              		.type	elbow, %function
 2053              	elbow:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 49


 2054              	.LFB46:
 620:.\main.c      **** 
 621:.\main.c      **** //control the elbow
 622:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 623:.\main.c      **** void elbow()
 624:.\main.c      **** { 
 2055              		.loc 1 624 0
 2056              		.cfi_startproc
 2057 0000 90B5     		push	{r4, r7, lr}
 2058              		.cfi_def_cfa_offset 12
 2059              		.cfi_offset 4, -12
 2060              		.cfi_offset 7, -8
 2061              		.cfi_offset 14, -4
 2062 0002 83B0     		sub	sp, sp, #12
 2063              		.cfi_def_cfa_offset 24
 2064 0004 00AF     		add	r7, sp, #0
 2065              		.cfi_def_cfa_register 7
 625:.\main.c      ****     //take instruction from data_array
 626:.\main.c      ****     //smooth input
 627:.\main.c      ****     //actuate the elbow using PWM
 628:.\main.c      ****     //get feedback
 629:.\main.c      ****     uint8 i;
 630:.\main.c      ****     uint16 avg;
 631:.\main.c      ****     uint16 command;
 632:.\main.c      ****     
 633:.\main.c      ****     //TODO: make sure reading from correct pots
 634:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2066              		.loc 1 634 0
 2067 0006 3C1D     		add	r4, r7, #4
 2068 0008 0120     		mov	r0, #1
 2069 000a FFF7FEFF 		bl	potFeedback
 2070 000e 031C     		mov	r3, r0
 2071 0010 2380     		strh	r3, [r4]
 635:.\main.c      ****     
 636:.\main.c      ****     switch(elbow_state){ //actions
 2072              		.loc 1 636 0
 2073 0012 784B     		ldr	r3, .L174
 2074 0014 1B78     		ldrb	r3, [r3]
 2075 0016 012B     		cmp	r3, #1
 2076 0018 07D0     		beq	.L142
 2077 001a 00DC     		bgt	.LCB1888
 2078 001c B8E0     		b	.L173	@long jump
 2079              	.LCB1888:
 2080 001e 022B     		cmp	r3, #2
 2081 0020 1ED0     		beq	.L145
 2082 0022 032B     		cmp	r3, #3
 2083 0024 00D1     		bne	.LCB1892
 2084 0026 A4E0     		b	.L146	@long jump
 2085              	.LCB1892:
 2086 0028 B3E0     		b	.L141
 2087              	.L142:
 637:.\main.c      ****         case elbw_start:
 638:.\main.c      ****             break;
 639:.\main.c      **** 
 640:.\main.c      ****         case elbw_init:
 641:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2088              		.loc 1 641 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 50


 2089 002a FB1D     		add	r3, r7, #7
 2090 002c 0022     		mov	r2, #0
 2091 002e 1A70     		strb	r2, [r3]
 2092 0030 0AE0     		b	.L147
 2093              	.L148:
 642:.\main.c      ****             {
 643:.\main.c      ****                 elbow_array[i] = 1500;
 2094              		.loc 1 643 0 discriminator 2
 2095 0032 FB1D     		add	r3, r7, #7
 2096 0034 1A78     		ldrb	r2, [r3]
 2097 0036 704B     		ldr	r3, .L174+4
 2098 0038 5200     		lsl	r2, r2, #1
 2099 003a 7049     		ldr	r1, .L174+8
 2100 003c D152     		strh	r1, [r2, r3]
 641:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2101              		.loc 1 641 0 discriminator 2
 2102 003e FB1D     		add	r3, r7, #7
 2103 0040 1A78     		ldrb	r2, [r3]
 2104 0042 FB1D     		add	r3, r7, #7
 2105 0044 0132     		add	r2, r2, #1
 2106 0046 1A70     		strb	r2, [r3]
 2107              	.L147:
 641:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2108              		.loc 1 641 0 is_stmt 0 discriminator 1
 2109 0048 FB1D     		add	r3, r7, #7
 2110 004a 1B78     		ldrb	r3, [r3]
 2111 004c 132B     		cmp	r3, #19
 2112 004e F0D9     		bls	.L148
 644:.\main.c      ****             }
 645:.\main.c      ****             elbw_arr_cspot = 0;
 2113              		.loc 1 645 0 is_stmt 1
 2114 0050 6B4B     		ldr	r3, .L174+12
 2115 0052 0022     		mov	r2, #0
 2116 0054 1A70     		strb	r2, [r3]
 646:.\main.c      ****             
 647:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2117              		.loc 1 647 0
 2118 0056 694B     		ldr	r3, .L174+8
 2119 0058 181C     		mov	r0, r3
 2120 005a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 648:.\main.c      ****             break;
 2121              		.loc 1 648 0
 2122 005e 98E0     		b	.L141
 2123              	.L145:
 649:.\main.c      **** 
 650:.\main.c      ****         case elbw_execute:
 651:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2124              		.loc 1 651 0
 2125 0060 BC1C     		add	r4, r7, #2
 2126 0062 684B     		ldr	r3, .L174+16
 2127 0064 181C     		mov	r0, r3
 2128 0066 0E21     		mov	r1, #14
 2129 0068 0F22     		mov	r2, #15
 2130 006a FFF7FEFF 		bl	make_command
 2131 006e 031C     		mov	r3, r0
 2132 0070 2380     		strh	r3, [r4]
 652:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 51


 653:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2133              		.loc 1 653 0
 2134 0072 634B     		ldr	r3, .L174+12
 2135 0074 1B78     		ldrb	r3, [r3]
 2136 0076 1A1C     		mov	r2, r3
 2137 0078 5F4B     		ldr	r3, .L174+4
 2138 007a 5200     		lsl	r2, r2, #1
 2139 007c B91C     		add	r1, r7, #2
 2140 007e 0988     		ldrh	r1, [r1]
 2141 0080 D152     		strh	r1, [r2, r3]
 654:.\main.c      ****             
 655:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2142              		.loc 1 655 0
 2143 0082 5F4B     		ldr	r3, .L174+12
 2144 0084 1B78     		ldrb	r3, [r3]
 2145 0086 122B     		cmp	r3, #18
 2146 0088 06D8     		bhi	.L149
 656:.\main.c      ****             {
 657:.\main.c      ****                 elbw_arr_cspot++;
 2147              		.loc 1 657 0
 2148 008a 5D4B     		ldr	r3, .L174+12
 2149 008c 1B78     		ldrb	r3, [r3]
 2150 008e 0133     		add	r3, r3, #1
 2151 0090 DAB2     		uxtb	r2, r3
 2152 0092 5B4B     		ldr	r3, .L174+12
 2153 0094 1A70     		strb	r2, [r3]
 2154 0096 02E0     		b	.L150
 2155              	.L149:
 658:.\main.c      ****             }
 659:.\main.c      ****             else
 660:.\main.c      ****             {
 661:.\main.c      ****                 elbw_arr_cspot = 0;
 2156              		.loc 1 661 0
 2157 0098 594B     		ldr	r3, .L174+12
 2158 009a 0022     		mov	r2, #0
 2159 009c 1A70     		strb	r2, [r3]
 2160              	.L150:
 662:.\main.c      ****             }
 663:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2161              		.loc 1 663 0
 2162 009e 3C1C     		mov	r4, r7
 2163 00a0 554B     		ldr	r3, .L174+4
 2164 00a2 181C     		mov	r0, r3
 2165 00a4 1421     		mov	r1, #20
 2166 00a6 FFF7FEFF 		bl	average
 2167 00aa 031C     		mov	r3, r0
 2168 00ac 2380     		strh	r3, [r4]
 664:.\main.c      ****             
 665:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 2169              		.loc 1 665 0
 2170 00ae 3B1D     		add	r3, r7, #4
 2171 00b0 1B88     		ldrh	r3, [r3]
 2172 00b2 642B     		cmp	r3, #100
 2173 00b4 1FD8     		bhi	.L151
 666:.\main.c      ****             {
 667:.\main.c      ****                 if (avg < 1500)
 2174              		.loc 1 667 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 52


 2175 00b6 3B1C     		mov	r3, r7
 2176 00b8 1A88     		ldrh	r2, [r3]
 2177 00ba 534B     		ldr	r3, .L174+20
 2178 00bc 9A42     		cmp	r2, r3
 2179 00be 04D8     		bhi	.L152
 668:.\main.c      ****                 {
 669:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2180              		.loc 1 669 0
 2181 00c0 4E4B     		ldr	r3, .L174+8
 2182 00c2 181C     		mov	r0, r3
 2183 00c4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2184 00c8 4FE0     		b	.L155
 2185              	.L152:
 670:.\main.c      ****                 }
 671:.\main.c      ****                 else
 672:.\main.c      ****                 {
 673:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2186              		.loc 1 673 0
 2187 00ca 3B1C     		mov	r3, r7
 2188 00cc 1A88     		ldrh	r2, [r3]
 2189 00ce FA23     		mov	r3, #250
 2190 00d0 DB00     		lsl	r3, r3, #3
 2191 00d2 9A42     		cmp	r2, r3
 2192 00d4 0AD8     		bhi	.L154
 2193              		.loc 1 673 0 is_stmt 0 discriminator 1
 2194 00d6 3B1C     		mov	r3, r7
 2195 00d8 1A88     		ldrh	r2, [r3]
 2196 00da 4C4B     		ldr	r3, .L174+24
 2197 00dc 9A42     		cmp	r2, r3
 2198 00de 05D9     		bls	.L154
 674:.\main.c      ****                     {
 675:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2199              		.loc 1 675 0 is_stmt 1
 2200 00e0 3B1C     		mov	r3, r7
 2201 00e2 1B88     		ldrh	r3, [r3]
 2202 00e4 181C     		mov	r0, r3
 2203 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2204 00ea 3EE0     		b	.L155
 2205              	.L154:
 676:.\main.c      ****                     }
 677:.\main.c      ****                     else
 678:.\main.c      ****                     {
 679:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2206              		.loc 1 679 0
 2207 00ec 434B     		ldr	r3, .L174+8
 2208 00ee 181C     		mov	r0, r3
 2209 00f0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2210 00f4 39E0     		b	.L155
 2211              	.L151:
 680:.\main.c      ****                     }
 681:.\main.c      ****                 }
 682:.\main.c      ****             }
 683:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 2212              		.loc 1 683 0
 2213 00f6 3B1D     		add	r3, r7, #4
 2214 00f8 1A88     		ldrh	r2, [r3]
 2215 00fa 444B     		ldr	r3, .L174+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 53


 2216 00fc 9A42     		cmp	r2, r3
 2217 00fe 1FD9     		bls	.L156
 684:.\main.c      ****             {
 685:.\main.c      ****                 if(avg > 1500)
 2218              		.loc 1 685 0
 2219 0100 3B1C     		mov	r3, r7
 2220 0102 1A88     		ldrh	r2, [r3]
 2221 0104 3D4B     		ldr	r3, .L174+8
 2222 0106 9A42     		cmp	r2, r3
 2223 0108 04D9     		bls	.L157
 686:.\main.c      ****                 {
 687:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2224              		.loc 1 687 0
 2225 010a 3C4B     		ldr	r3, .L174+8
 2226 010c 181C     		mov	r0, r3
 2227 010e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2228 0112 2AE0     		b	.L155
 2229              	.L157:
 688:.\main.c      ****                 }
 689:.\main.c      ****                 else
 690:.\main.c      ****                 {
 691:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2230              		.loc 1 691 0
 2231 0114 3B1C     		mov	r3, r7
 2232 0116 1A88     		ldrh	r2, [r3]
 2233 0118 FA23     		mov	r3, #250
 2234 011a DB00     		lsl	r3, r3, #3
 2235 011c 9A42     		cmp	r2, r3
 2236 011e 0AD8     		bhi	.L159
 2237              		.loc 1 691 0 is_stmt 0 discriminator 1
 2238 0120 3B1C     		mov	r3, r7
 2239 0122 1A88     		ldrh	r2, [r3]
 2240 0124 394B     		ldr	r3, .L174+24
 2241 0126 9A42     		cmp	r2, r3
 2242 0128 05D9     		bls	.L159
 692:.\main.c      ****                     {
 693:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2243              		.loc 1 693 0 is_stmt 1
 2244 012a 3B1C     		mov	r3, r7
 2245 012c 1B88     		ldrh	r3, [r3]
 2246 012e 181C     		mov	r0, r3
 2247 0130 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2248 0134 19E0     		b	.L155
 2249              	.L159:
 694:.\main.c      ****                     }
 695:.\main.c      ****                     else
 696:.\main.c      ****                     {
 697:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2250              		.loc 1 697 0
 2251 0136 314B     		ldr	r3, .L174+8
 2252 0138 181C     		mov	r0, r3
 2253 013a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2254 013e 14E0     		b	.L155
 2255              	.L156:
 698:.\main.c      ****                     }
 699:.\main.c      ****                 }
 700:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 54


 701:.\main.c      ****             else
 702:.\main.c      ****             {
 703:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2256              		.loc 1 703 0
 2257 0140 3B1C     		mov	r3, r7
 2258 0142 1A88     		ldrh	r2, [r3]
 2259 0144 FA23     		mov	r3, #250
 2260 0146 DB00     		lsl	r3, r3, #3
 2261 0148 9A42     		cmp	r2, r3
 2262 014a 0AD8     		bhi	.L160
 2263              		.loc 1 703 0 is_stmt 0 discriminator 1
 2264 014c 3B1C     		mov	r3, r7
 2265 014e 1A88     		ldrh	r2, [r3]
 2266 0150 2E4B     		ldr	r3, .L174+24
 2267 0152 9A42     		cmp	r2, r3
 2268 0154 05D9     		bls	.L160
 704:.\main.c      ****                 {
 705:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 2269              		.loc 1 705 0 is_stmt 1
 2270 0156 3B1C     		mov	r3, r7
 2271 0158 1B88     		ldrh	r3, [r3]
 2272 015a 181C     		mov	r0, r3
 2273 015c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2274 0160 03E0     		b	.L155
 2275              	.L160:
 706:.\main.c      ****                 }
 707:.\main.c      ****                 else
 708:.\main.c      ****                 {
 709:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2276              		.loc 1 709 0
 2277 0162 264B     		ldr	r3, .L174+8
 2278 0164 181C     		mov	r0, r3
 2279 0166 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2280              	.L155:
 710:.\main.c      ****                 }
 711:.\main.c      ****             }
 712:.\main.c      ****             
 713:.\main.c      ****             ELBOW_FLAG = 0;
 2281              		.loc 1 713 0
 2282 016a 294B     		ldr	r3, .L174+28
 2283 016c 0022     		mov	r2, #0
 2284 016e 1A70     		strb	r2, [r3]
 714:.\main.c      ****             break;
 2285              		.loc 1 714 0
 2286 0170 0FE0     		b	.L141
 2287              	.L146:
 715:.\main.c      ****             
 716:.\main.c      ****         case elbw_wait:
 717:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2288              		.loc 1 717 0
 2289 0172 3B1D     		add	r3, r7, #4
 2290 0174 1B88     		ldrh	r3, [r3]
 2291 0176 642B     		cmp	r3, #100
 2292 0178 04D9     		bls	.L161
 2293              		.loc 1 717 0 is_stmt 0 discriminator 1
 2294 017a 3B1D     		add	r3, r7, #4
 2295 017c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 55


 2296 017e 234B     		ldr	r3, .L174+24
 2297 0180 9A42     		cmp	r2, r3
 2298 0182 04D9     		bls	.L162
 2299              	.L161:
 718:.\main.c      ****             {
 719:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2300              		.loc 1 719 0 is_stmt 1
 2301 0184 1D4B     		ldr	r3, .L174+8
 2302 0186 181C     		mov	r0, r3
 2303 0188 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 720:.\main.c      ****             }
 721:.\main.c      ****             break;
 2304              		.loc 1 721 0
 2305 018c 01E0     		b	.L141
 2306              	.L162:
 2307 018e 00E0     		b	.L141
 2308              	.L173:
 638:.\main.c      ****             break;
 2309              		.loc 1 638 0
 2310 0190 C046     		mov	r8, r8
 2311              	.L141:
 722:.\main.c      ****     }
 723:.\main.c      ****     
 724:.\main.c      ****     switch(elbow_state){ //transitions
 2312              		.loc 1 724 0
 2313 0192 184B     		ldr	r3, .L174
 2314 0194 1B78     		ldrb	r3, [r3]
 2315 0196 012B     		cmp	r3, #1
 2316 0198 0CD0     		beq	.L164
 2317 019a 02DC     		bgt	.L165
 2318 019c 002B     		cmp	r3, #0
 2319 019e 05D0     		beq	.L166
 2320 01a0 24E0     		b	.L140
 2321              	.L165:
 2322 01a2 022B     		cmp	r3, #2
 2323 01a4 0AD0     		beq	.L167
 2324 01a6 032B     		cmp	r3, #3
 2325 01a8 14D0     		beq	.L168
 2326 01aa 1FE0     		b	.L140
 2327              	.L166:
 725:.\main.c      ****         case elbw_start:
 726:.\main.c      ****             elbow_state = elbw_init;
 2328              		.loc 1 726 0
 2329 01ac 114B     		ldr	r3, .L174
 2330 01ae 0122     		mov	r2, #1
 2331 01b0 1A70     		strb	r2, [r3]
 727:.\main.c      ****             break;
 2332              		.loc 1 727 0
 2333 01b2 1BE0     		b	.L140
 2334              	.L164:
 728:.\main.c      ****         
 729:.\main.c      ****         case elbw_init:
 730:.\main.c      ****             elbow_state = elbw_wait;
 2335              		.loc 1 730 0
 2336 01b4 0F4B     		ldr	r3, .L174
 2337 01b6 0322     		mov	r2, #3
 2338 01b8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 56


 731:.\main.c      ****             break;
 2339              		.loc 1 731 0
 2340 01ba 17E0     		b	.L140
 2341              	.L167:
 732:.\main.c      ****         
 733:.\main.c      ****         case elbw_execute:
 734:.\main.c      ****             if(ELBOW_FLAG)
 2342              		.loc 1 734 0
 2343 01bc 144B     		ldr	r3, .L174+28
 2344 01be 1B78     		ldrb	r3, [r3]
 2345 01c0 002B     		cmp	r3, #0
 2346 01c2 03D0     		beq	.L169
 735:.\main.c      ****             {
 736:.\main.c      ****                 elbow_state = elbw_execute;
 2347              		.loc 1 736 0
 2348 01c4 0B4B     		ldr	r3, .L174
 2349 01c6 0222     		mov	r2, #2
 2350 01c8 1A70     		strb	r2, [r3]
 737:.\main.c      ****             }
 738:.\main.c      ****             else
 739:.\main.c      ****             {
 740:.\main.c      ****                 elbow_state = elbw_wait;
 741:.\main.c      ****             }
 742:.\main.c      ****             break;
 2351              		.loc 1 742 0
 2352 01ca 0FE0     		b	.L140
 2353              	.L169:
 740:.\main.c      ****                 elbow_state = elbw_wait;
 2354              		.loc 1 740 0
 2355 01cc 094B     		ldr	r3, .L174
 2356 01ce 0322     		mov	r2, #3
 2357 01d0 1A70     		strb	r2, [r3]
 2358              		.loc 1 742 0
 2359 01d2 0BE0     		b	.L140
 2360              	.L168:
 743:.\main.c      ****         
 744:.\main.c      ****         case elbw_wait:
 745:.\main.c      ****             if(ELBOW_FLAG)
 2361              		.loc 1 745 0
 2362 01d4 0E4B     		ldr	r3, .L174+28
 2363 01d6 1B78     		ldrb	r3, [r3]
 2364 01d8 002B     		cmp	r3, #0
 2365 01da 03D0     		beq	.L171
 746:.\main.c      ****             {
 747:.\main.c      ****                 elbow_state = elbw_execute;
 2366              		.loc 1 747 0
 2367 01dc 054B     		ldr	r3, .L174
 2368 01de 0222     		mov	r2, #2
 2369 01e0 1A70     		strb	r2, [r3]
 2370 01e2 02E0     		b	.L172
 2371              	.L171:
 748:.\main.c      ****             }
 749:.\main.c      ****             else
 750:.\main.c      ****             {
 751:.\main.c      ****                 elbow_state = elbw_wait; 
 2372              		.loc 1 751 0
 2373 01e4 034B     		ldr	r3, .L174
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 57


 2374 01e6 0322     		mov	r2, #3
 2375 01e8 1A70     		strb	r2, [r3]
 2376              	.L172:
 752:.\main.c      ****             }
 753:.\main.c      ****             break;
 2377              		.loc 1 753 0
 2378 01ea C046     		mov	r8, r8
 2379              	.L140:
 754:.\main.c      ****     }    
 755:.\main.c      **** }
 2380              		.loc 1 755 0
 2381 01ec BD46     		mov	sp, r7
 2382 01ee 03B0     		add	sp, sp, #12
 2383              		@ sp needed
 2384 01f0 90BD     		pop	{r4, r7, pc}
 2385              	.L175:
 2386 01f2 C046     		.align	2
 2387              	.L174:
 2388 01f4 00000000 		.word	elbow_state
 2389 01f8 00000000 		.word	elbow_array
 2390 01fc DC050000 		.word	1500
 2391 0200 00000000 		.word	elbw_arr_cspot
 2392 0204 00000000 		.word	data_array
 2393 0208 DB050000 		.word	1499
 2394 020c E7030000 		.word	999
 2395 0210 00000000 		.word	ELBOW_FLAG
 2396              		.cfi_endproc
 2397              	.LFE46:
 2398              		.size	elbow, .-elbow
 2399              		.comm	shoulder_state,1,1
 2400              		.section	.text.shoulder,"ax",%progbits
 2401              		.align	2
 2402              		.global	shoulder
 2403              		.code	16
 2404              		.thumb_func
 2405              		.type	shoulder, %function
 2406              	shoulder:
 2407              	.LFB47:
 756:.\main.c      **** 
 757:.\main.c      **** //control the shoulder
 758:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 759:.\main.c      **** void shoulder()
 760:.\main.c      **** { 
 2408              		.loc 1 760 0
 2409              		.cfi_startproc
 2410 0000 90B5     		push	{r4, r7, lr}
 2411              		.cfi_def_cfa_offset 12
 2412              		.cfi_offset 4, -12
 2413              		.cfi_offset 7, -8
 2414              		.cfi_offset 14, -4
 2415 0002 83B0     		sub	sp, sp, #12
 2416              		.cfi_def_cfa_offset 24
 2417 0004 00AF     		add	r7, sp, #0
 2418              		.cfi_def_cfa_register 7
 761:.\main.c      ****     //take instruction from data_array
 762:.\main.c      ****     //smooth input
 763:.\main.c      ****     //actuate the shoulder using PWM
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 58


 764:.\main.c      ****     //get feedback
 765:.\main.c      ****     uint8 i;
 766:.\main.c      ****     uint16 avg;
 767:.\main.c      ****     uint16 command;
 768:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2419              		.loc 1 768 0
 2420 0006 3C1D     		add	r4, r7, #4
 2421 0008 0020     		mov	r0, #0
 2422 000a FFF7FEFF 		bl	potFeedback
 2423 000e 031C     		mov	r3, r0
 2424 0010 2380     		strh	r3, [r4]
 769:.\main.c      ****     
 770:.\main.c      ****     switch(shoulder_state){ //actions
 2425              		.loc 1 770 0
 2426 0012 7A4B     		ldr	r3, .L210
 2427 0014 1B78     		ldrb	r3, [r3]
 2428 0016 012B     		cmp	r3, #1
 2429 0018 07D0     		beq	.L178
 2430 001a 00DC     		bgt	.LCB2230
 2431 001c BCE0     		b	.L209	@long jump
 2432              	.LCB2230:
 2433 001e 022B     		cmp	r3, #2
 2434 0020 1ED0     		beq	.L181
 2435 0022 032B     		cmp	r3, #3
 2436 0024 00D1     		bne	.LCB2234
 2437 0026 A6E0     		b	.L182	@long jump
 2438              	.LCB2234:
 2439 0028 B7E0     		b	.L177
 2440              	.L178:
 771:.\main.c      ****         case shldr_start:
 772:.\main.c      ****             break;
 773:.\main.c      **** 
 774:.\main.c      ****         case shldr_init:
 775:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2441              		.loc 1 775 0
 2442 002a FB1D     		add	r3, r7, #7
 2443 002c 0022     		mov	r2, #0
 2444 002e 1A70     		strb	r2, [r3]
 2445 0030 0AE0     		b	.L183
 2446              	.L184:
 776:.\main.c      ****             {
 777:.\main.c      ****                 shoulder_array[i] = 1500;
 2447              		.loc 1 777 0 discriminator 2
 2448 0032 FB1D     		add	r3, r7, #7
 2449 0034 1A78     		ldrb	r2, [r3]
 2450 0036 724B     		ldr	r3, .L210+4
 2451 0038 5200     		lsl	r2, r2, #1
 2452 003a 7249     		ldr	r1, .L210+8
 2453 003c D152     		strh	r1, [r2, r3]
 775:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2454              		.loc 1 775 0 discriminator 2
 2455 003e FB1D     		add	r3, r7, #7
 2456 0040 1A78     		ldrb	r2, [r3]
 2457 0042 FB1D     		add	r3, r7, #7
 2458 0044 0132     		add	r2, r2, #1
 2459 0046 1A70     		strb	r2, [r3]
 2460              	.L183:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 59


 775:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2461              		.loc 1 775 0 is_stmt 0 discriminator 1
 2462 0048 FB1D     		add	r3, r7, #7
 2463 004a 1B78     		ldrb	r3, [r3]
 2464 004c 132B     		cmp	r3, #19
 2465 004e F0D9     		bls	.L184
 778:.\main.c      ****             }
 779:.\main.c      ****             shldr_arr_cspot = 0;
 2466              		.loc 1 779 0 is_stmt 1
 2467 0050 6D4B     		ldr	r3, .L210+12
 2468 0052 0022     		mov	r2, #0
 2469 0054 1A70     		strb	r2, [r3]
 780:.\main.c      ****                         
 781:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2470              		.loc 1 781 0
 2471 0056 6B4B     		ldr	r3, .L210+8
 2472 0058 181C     		mov	r0, r3
 2473 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 782:.\main.c      ****             break;
 2474              		.loc 1 782 0
 2475 005e 9CE0     		b	.L177
 2476              	.L181:
 783:.\main.c      **** 
 784:.\main.c      ****         case shldr_execute:
 785:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2477              		.loc 1 785 0
 2478 0060 BC1C     		add	r4, r7, #2
 2479 0062 6A4B     		ldr	r3, .L210+16
 2480 0064 181C     		mov	r0, r3
 2481 0066 0C21     		mov	r1, #12
 2482 0068 0D22     		mov	r2, #13
 2483 006a FFF7FEFF 		bl	make_command
 2484 006e 031C     		mov	r3, r0
 2485 0070 2380     		strh	r3, [r4]
 786:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2486              		.loc 1 786 0
 2487 0072 654B     		ldr	r3, .L210+12
 2488 0074 1B78     		ldrb	r3, [r3]
 2489 0076 1A1C     		mov	r2, r3
 2490 0078 614B     		ldr	r3, .L210+4
 2491 007a 5200     		lsl	r2, r2, #1
 2492 007c B91C     		add	r1, r7, #2
 2493 007e 0988     		ldrh	r1, [r1]
 2494 0080 D152     		strh	r1, [r2, r3]
 787:.\main.c      ****         
 788:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2495              		.loc 1 788 0
 2496 0082 614B     		ldr	r3, .L210+12
 2497 0084 1B78     		ldrb	r3, [r3]
 2498 0086 122B     		cmp	r3, #18
 2499 0088 06D8     		bhi	.L185
 789:.\main.c      ****             {
 790:.\main.c      ****                 shldr_arr_cspot++;
 2500              		.loc 1 790 0
 2501 008a 5F4B     		ldr	r3, .L210+12
 2502 008c 1B78     		ldrb	r3, [r3]
 2503 008e 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 60


 2504 0090 DAB2     		uxtb	r2, r3
 2505 0092 5D4B     		ldr	r3, .L210+12
 2506 0094 1A70     		strb	r2, [r3]
 2507 0096 02E0     		b	.L186
 2508              	.L185:
 791:.\main.c      ****             }
 792:.\main.c      ****             else
 793:.\main.c      ****             {
 794:.\main.c      ****                 shldr_arr_cspot = 0;
 2509              		.loc 1 794 0
 2510 0098 5B4B     		ldr	r3, .L210+12
 2511 009a 0022     		mov	r2, #0
 2512 009c 1A70     		strb	r2, [r3]
 2513              	.L186:
 795:.\main.c      ****             }
 796:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2514              		.loc 1 796 0
 2515 009e 3C1C     		mov	r4, r7
 2516 00a0 574B     		ldr	r3, .L210+4
 2517 00a2 181C     		mov	r0, r3
 2518 00a4 1421     		mov	r1, #20
 2519 00a6 FFF7FEFF 		bl	average
 2520 00aa 031C     		mov	r3, r0
 2521 00ac 2380     		strh	r3, [r4]
 797:.\main.c      ****             
 798:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2522              		.loc 1 798 0
 2523 00ae 3B1D     		add	r3, r7, #4
 2524 00b0 1A88     		ldrh	r2, [r3]
 2525 00b2 8C23     		mov	r3, #140
 2526 00b4 5B00     		lsl	r3, r3, #1
 2527 00b6 9A42     		cmp	r2, r3
 2528 00b8 1FD8     		bhi	.L187
 799:.\main.c      ****             {
 800:.\main.c      ****                 if (avg < 1500)
 2529              		.loc 1 800 0
 2530 00ba 3B1C     		mov	r3, r7
 2531 00bc 1A88     		ldrh	r2, [r3]
 2532 00be 544B     		ldr	r3, .L210+20
 2533 00c0 9A42     		cmp	r2, r3
 2534 00c2 04D8     		bhi	.L188
 801:.\main.c      ****                 {
 802:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2535              		.loc 1 802 0
 2536 00c4 4F4B     		ldr	r3, .L210+8
 2537 00c6 181C     		mov	r0, r3
 2538 00c8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2539 00cc 4FE0     		b	.L191
 2540              	.L188:
 803:.\main.c      ****                 }
 804:.\main.c      ****                 else
 805:.\main.c      ****                 {
 806:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2541              		.loc 1 806 0
 2542 00ce 3B1C     		mov	r3, r7
 2543 00d0 1A88     		ldrh	r2, [r3]
 2544 00d2 FA23     		mov	r3, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 61


 2545 00d4 DB00     		lsl	r3, r3, #3
 2546 00d6 9A42     		cmp	r2, r3
 2547 00d8 0AD8     		bhi	.L190
 2548              		.loc 1 806 0 is_stmt 0 discriminator 1
 2549 00da 3B1C     		mov	r3, r7
 2550 00dc 1A88     		ldrh	r2, [r3]
 2551 00de 4D4B     		ldr	r3, .L210+24
 2552 00e0 9A42     		cmp	r2, r3
 2553 00e2 05D9     		bls	.L190
 807:.\main.c      ****                     {
 808:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2554              		.loc 1 808 0 is_stmt 1
 2555 00e4 3B1C     		mov	r3, r7
 2556 00e6 1B88     		ldrh	r3, [r3]
 2557 00e8 181C     		mov	r0, r3
 2558 00ea FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2559 00ee 3EE0     		b	.L191
 2560              	.L190:
 809:.\main.c      ****                     }
 810:.\main.c      ****                     else
 811:.\main.c      ****                     {
 812:.\main.c      ****                         //throw error
 813:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2561              		.loc 1 813 0
 2562 00f0 444B     		ldr	r3, .L210+8
 2563 00f2 181C     		mov	r0, r3
 2564 00f4 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2565 00f8 39E0     		b	.L191
 2566              	.L187:
 814:.\main.c      ****                     }
 815:.\main.c      ****                 }
 816:.\main.c      ****             }
 817:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2567              		.loc 1 817 0
 2568 00fa 3B1D     		add	r3, r7, #4
 2569 00fc 1A88     		ldrh	r2, [r3]
 2570 00fe 464B     		ldr	r3, .L210+28
 2571 0100 9A42     		cmp	r2, r3
 2572 0102 1FD9     		bls	.L192
 818:.\main.c      ****             {
 819:.\main.c      ****                 if(avg > 1500)
 2573              		.loc 1 819 0
 2574 0104 3B1C     		mov	r3, r7
 2575 0106 1A88     		ldrh	r2, [r3]
 2576 0108 3E4B     		ldr	r3, .L210+8
 2577 010a 9A42     		cmp	r2, r3
 2578 010c 04D9     		bls	.L193
 820:.\main.c      ****                 {
 821:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2579              		.loc 1 821 0
 2580 010e 3D4B     		ldr	r3, .L210+8
 2581 0110 181C     		mov	r0, r3
 2582 0112 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2583 0116 2AE0     		b	.L191
 2584              	.L193:
 822:.\main.c      ****                 }
 823:.\main.c      ****                 else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 62


 824:.\main.c      ****                 {
 825:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2585              		.loc 1 825 0
 2586 0118 3B1C     		mov	r3, r7
 2587 011a 1A88     		ldrh	r2, [r3]
 2588 011c FA23     		mov	r3, #250
 2589 011e DB00     		lsl	r3, r3, #3
 2590 0120 9A42     		cmp	r2, r3
 2591 0122 0AD8     		bhi	.L195
 2592              		.loc 1 825 0 is_stmt 0 discriminator 1
 2593 0124 3B1C     		mov	r3, r7
 2594 0126 1A88     		ldrh	r2, [r3]
 2595 0128 3A4B     		ldr	r3, .L210+24
 2596 012a 9A42     		cmp	r2, r3
 2597 012c 05D9     		bls	.L195
 826:.\main.c      ****                     {
 827:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2598              		.loc 1 827 0 is_stmt 1
 2599 012e 3B1C     		mov	r3, r7
 2600 0130 1B88     		ldrh	r3, [r3]
 2601 0132 181C     		mov	r0, r3
 2602 0134 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2603 0138 19E0     		b	.L191
 2604              	.L195:
 828:.\main.c      ****                     }
 829:.\main.c      ****                     else
 830:.\main.c      ****                     {
 831:.\main.c      ****                         //throw error
 832:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2605              		.loc 1 832 0
 2606 013a 324B     		ldr	r3, .L210+8
 2607 013c 181C     		mov	r0, r3
 2608 013e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2609 0142 14E0     		b	.L191
 2610              	.L192:
 833:.\main.c      ****                     }
 834:.\main.c      ****                 }
 835:.\main.c      ****             }
 836:.\main.c      ****             else
 837:.\main.c      ****             {
 838:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2611              		.loc 1 838 0
 2612 0144 3B1C     		mov	r3, r7
 2613 0146 1A88     		ldrh	r2, [r3]
 2614 0148 FA23     		mov	r3, #250
 2615 014a DB00     		lsl	r3, r3, #3
 2616 014c 9A42     		cmp	r2, r3
 2617 014e 0AD8     		bhi	.L196
 2618              		.loc 1 838 0 is_stmt 0 discriminator 1
 2619 0150 3B1C     		mov	r3, r7
 2620 0152 1A88     		ldrh	r2, [r3]
 2621 0154 2F4B     		ldr	r3, .L210+24
 2622 0156 9A42     		cmp	r2, r3
 2623 0158 05D9     		bls	.L196
 839:.\main.c      ****                 {
 840:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2624              		.loc 1 840 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 63


 2625 015a 3B1C     		mov	r3, r7
 2626 015c 1B88     		ldrh	r3, [r3]
 2627 015e 181C     		mov	r0, r3
 2628 0160 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2629 0164 03E0     		b	.L191
 2630              	.L196:
 841:.\main.c      ****                 }
 842:.\main.c      ****                 else
 843:.\main.c      ****                 {
 844:.\main.c      ****                     //throw error
 845:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2631              		.loc 1 845 0
 2632 0166 274B     		ldr	r3, .L210+8
 2633 0168 181C     		mov	r0, r3
 2634 016a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2635              	.L191:
 846:.\main.c      ****                 }
 847:.\main.c      ****             }
 848:.\main.c      ****             SHOULDER_FLAG = 0;
 2636              		.loc 1 848 0
 2637 016e 2B4B     		ldr	r3, .L210+32
 2638 0170 0022     		mov	r2, #0
 2639 0172 1A70     		strb	r2, [r3]
 849:.\main.c      ****             break;
 2640              		.loc 1 849 0
 2641 0174 11E0     		b	.L177
 2642              	.L182:
 850:.\main.c      ****             
 851:.\main.c      ****         case shldr_wait:
 852:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2643              		.loc 1 852 0
 2644 0176 3B1D     		add	r3, r7, #4
 2645 0178 1A88     		ldrh	r2, [r3]
 2646 017a 8C23     		mov	r3, #140
 2647 017c 5B00     		lsl	r3, r3, #1
 2648 017e 9A42     		cmp	r2, r3
 2649 0180 04D9     		bls	.L197
 2650              		.loc 1 852 0 is_stmt 0 discriminator 1
 2651 0182 3B1D     		add	r3, r7, #4
 2652 0184 1A88     		ldrh	r2, [r3]
 2653 0186 244B     		ldr	r3, .L210+28
 2654 0188 9A42     		cmp	r2, r3
 2655 018a 04D9     		bls	.L198
 2656              	.L197:
 853:.\main.c      ****             {
 854:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2657              		.loc 1 854 0 is_stmt 1
 2658 018c 1D4B     		ldr	r3, .L210+8
 2659 018e 181C     		mov	r0, r3
 2660 0190 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 855:.\main.c      ****             }
 856:.\main.c      ****             break;
 2661              		.loc 1 856 0
 2662 0194 01E0     		b	.L177
 2663              	.L198:
 2664 0196 00E0     		b	.L177
 2665              	.L209:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 64


 772:.\main.c      ****             break;
 2666              		.loc 1 772 0
 2667 0198 C046     		mov	r8, r8
 2668              	.L177:
 857:.\main.c      ****     }
 858:.\main.c      ****     
 859:.\main.c      ****     switch(shoulder_state){ //transitions
 2669              		.loc 1 859 0
 2670 019a 184B     		ldr	r3, .L210
 2671 019c 1B78     		ldrb	r3, [r3]
 2672 019e 012B     		cmp	r3, #1
 2673 01a0 0CD0     		beq	.L200
 2674 01a2 02DC     		bgt	.L201
 2675 01a4 002B     		cmp	r3, #0
 2676 01a6 05D0     		beq	.L202
 2677 01a8 24E0     		b	.L176
 2678              	.L201:
 2679 01aa 022B     		cmp	r3, #2
 2680 01ac 0AD0     		beq	.L203
 2681 01ae 032B     		cmp	r3, #3
 2682 01b0 14D0     		beq	.L204
 2683 01b2 1FE0     		b	.L176
 2684              	.L202:
 860:.\main.c      ****         case shldr_start:
 861:.\main.c      ****             shoulder_state = shldr_init;
 2685              		.loc 1 861 0
 2686 01b4 114B     		ldr	r3, .L210
 2687 01b6 0122     		mov	r2, #1
 2688 01b8 1A70     		strb	r2, [r3]
 862:.\main.c      ****             break;
 2689              		.loc 1 862 0
 2690 01ba 1BE0     		b	.L176
 2691              	.L200:
 863:.\main.c      ****         
 864:.\main.c      ****         case shldr_init:
 865:.\main.c      ****             shoulder_state = shldr_wait;
 2692              		.loc 1 865 0
 2693 01bc 0F4B     		ldr	r3, .L210
 2694 01be 0322     		mov	r2, #3
 2695 01c0 1A70     		strb	r2, [r3]
 866:.\main.c      ****             break;
 2696              		.loc 1 866 0
 2697 01c2 17E0     		b	.L176
 2698              	.L203:
 867:.\main.c      ****         
 868:.\main.c      ****         case shldr_execute:
 869:.\main.c      ****             if(SHOULDER_FLAG)
 2699              		.loc 1 869 0
 2700 01c4 154B     		ldr	r3, .L210+32
 2701 01c6 1B78     		ldrb	r3, [r3]
 2702 01c8 002B     		cmp	r3, #0
 2703 01ca 03D0     		beq	.L205
 870:.\main.c      ****             {
 871:.\main.c      ****                 shoulder_state = shldr_execute;
 2704              		.loc 1 871 0
 2705 01cc 0B4B     		ldr	r3, .L210
 2706 01ce 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 65


 2707 01d0 1A70     		strb	r2, [r3]
 872:.\main.c      ****             }
 873:.\main.c      ****             else
 874:.\main.c      ****             {
 875:.\main.c      ****                 shoulder_state = shldr_wait;
 876:.\main.c      ****             }
 877:.\main.c      ****             break;
 2708              		.loc 1 877 0
 2709 01d2 0FE0     		b	.L176
 2710              	.L205:
 875:.\main.c      ****                 shoulder_state = shldr_wait;
 2711              		.loc 1 875 0
 2712 01d4 094B     		ldr	r3, .L210
 2713 01d6 0322     		mov	r2, #3
 2714 01d8 1A70     		strb	r2, [r3]
 2715              		.loc 1 877 0
 2716 01da 0BE0     		b	.L176
 2717              	.L204:
 878:.\main.c      ****         
 879:.\main.c      ****         case shldr_wait:
 880:.\main.c      ****             if(SHOULDER_FLAG)
 2718              		.loc 1 880 0
 2719 01dc 0F4B     		ldr	r3, .L210+32
 2720 01de 1B78     		ldrb	r3, [r3]
 2721 01e0 002B     		cmp	r3, #0
 2722 01e2 03D0     		beq	.L207
 881:.\main.c      ****             {
 882:.\main.c      ****                 shoulder_state = shldr_execute;
 2723              		.loc 1 882 0
 2724 01e4 054B     		ldr	r3, .L210
 2725 01e6 0222     		mov	r2, #2
 2726 01e8 1A70     		strb	r2, [r3]
 2727 01ea 02E0     		b	.L208
 2728              	.L207:
 883:.\main.c      ****             }
 884:.\main.c      ****             else
 885:.\main.c      ****             {
 886:.\main.c      ****                 shoulder_state = shldr_wait; 
 2729              		.loc 1 886 0
 2730 01ec 034B     		ldr	r3, .L210
 2731 01ee 0322     		mov	r2, #3
 2732 01f0 1A70     		strb	r2, [r3]
 2733              	.L208:
 887:.\main.c      ****             }
 888:.\main.c      ****             break;
 2734              		.loc 1 888 0
 2735 01f2 C046     		mov	r8, r8
 2736              	.L176:
 889:.\main.c      ****     }    
 890:.\main.c      **** }
 2737              		.loc 1 890 0
 2738 01f4 BD46     		mov	sp, r7
 2739 01f6 03B0     		add	sp, sp, #12
 2740              		@ sp needed
 2741 01f8 90BD     		pop	{r4, r7, pc}
 2742              	.L211:
 2743 01fa C046     		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 66


 2744              	.L210:
 2745 01fc 00000000 		.word	shoulder_state
 2746 0200 00000000 		.word	shoulder_array
 2747 0204 DC050000 		.word	1500
 2748 0208 00000000 		.word	shldr_arr_cspot
 2749 020c 00000000 		.word	data_array
 2750 0210 DB050000 		.word	1499
 2751 0214 E7030000 		.word	999
 2752 0218 1F030000 		.word	799
 2753 021c 00000000 		.word	SHOULDER_FLAG
 2754              		.cfi_endproc
 2755              	.LFE47:
 2756              		.size	shoulder, .-shoulder
 2757              		.comm	baseAzimuth_state,1,1
 2758              		.section	.text.baseAzimuth,"ax",%progbits
 2759              		.align	2
 2760              		.global	baseAzimuth
 2761              		.code	16
 2762              		.thumb_func
 2763              		.type	baseAzimuth, %function
 2764              	baseAzimuth:
 2765              	.LFB48:
 891:.\main.c      **** 
 892:.\main.c      **** //control the turret
 893:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 894:.\main.c      **** void baseAzimuth()
 895:.\main.c      **** { 
 2766              		.loc 1 895 0
 2767              		.cfi_startproc
 2768 0000 90B5     		push	{r4, r7, lr}
 2769              		.cfi_def_cfa_offset 12
 2770              		.cfi_offset 4, -12
 2771              		.cfi_offset 7, -8
 2772              		.cfi_offset 14, -4
 2773 0002 83B0     		sub	sp, sp, #12
 2774              		.cfi_def_cfa_offset 24
 2775 0004 00AF     		add	r7, sp, #0
 2776              		.cfi_def_cfa_register 7
 896:.\main.c      ****     //take instruction from data_array
 897:.\main.c      ****     //smooth input
 898:.\main.c      ****     //actuate the turret using PWM
 899:.\main.c      ****     uint8 i;
 900:.\main.c      ****     uint16 avg;
 901:.\main.c      ****     uint16 command;
 902:.\main.c      ****     
 903:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2777              		.loc 1 903 0
 2778 0006 4A4B     		ldr	r3, .L236
 2779 0008 1B78     		ldrb	r3, [r3]
 2780 000a 012B     		cmp	r3, #1
 2781 000c 03D0     		beq	.L214
 2782 000e 5EDD     		ble	.L235
 2783 0010 022B     		cmp	r3, #2
 2784 0012 1CD0     		beq	.L217
 904:.\main.c      ****         case BA_start:
 905:.\main.c      ****             break;
 906:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 67


 907:.\main.c      ****         case BA_init:
 908:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 909:.\main.c      ****             {
 910:.\main.c      ****                 baseAz_array[i] = 1500;
 911:.\main.c      ****             }
 912:.\main.c      ****             BA_arr_cspot = 0;
 913:.\main.c      ****             
 914:.\main.c      ****             BA_PWM_WriteCompare(2000);
 915:.\main.c      ****             break;
 916:.\main.c      **** 
 917:.\main.c      ****         case BA_execute:
 918:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 919:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 920:.\main.c      ****             
 921:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 922:.\main.c      ****             {
 923:.\main.c      ****                 BA_arr_cspot++;
 924:.\main.c      ****             }
 925:.\main.c      ****             else
 926:.\main.c      ****             {
 927:.\main.c      ****                 BA_arr_cspot = 0;
 928:.\main.c      ****             }
 929:.\main.c      ****             
 930:.\main.c      ****             //pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 931:.\main.c      ****             
 932:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 933:.\main.c      ****             
 934:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 935:.\main.c      ****             {
 936:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 937:.\main.c      ****             }
 938:.\main.c      ****             else
 939:.\main.c      ****             {
 940:.\main.c      ****                 //throw error
 941:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 942:.\main.c      ****             }
 943:.\main.c      ****             BA_FLAG = 0;
 944:.\main.c      ****             break;
 945:.\main.c      ****             
 946:.\main.c      ****         case BA_wait:
 947:.\main.c      ****             break;
 2785              		.loc 1 947 0
 2786 0014 5CE0     		b	.L213
 2787              	.L214:
 908:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2788              		.loc 1 908 0
 2789 0016 FB1D     		add	r3, r7, #7
 2790 0018 0022     		mov	r2, #0
 2791 001a 1A70     		strb	r2, [r3]
 2792 001c 0AE0     		b	.L219
 2793              	.L220:
 910:.\main.c      ****                 baseAz_array[i] = 1500;
 2794              		.loc 1 910 0 discriminator 2
 2795 001e FB1D     		add	r3, r7, #7
 2796 0020 1A78     		ldrb	r2, [r3]
 2797 0022 444B     		ldr	r3, .L236+4
 2798 0024 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 68


 2799 0026 4449     		ldr	r1, .L236+8
 2800 0028 D152     		strh	r1, [r2, r3]
 908:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2801              		.loc 1 908 0 discriminator 2
 2802 002a FB1D     		add	r3, r7, #7
 2803 002c 1A78     		ldrb	r2, [r3]
 2804 002e FB1D     		add	r3, r7, #7
 2805 0030 0132     		add	r2, r2, #1
 2806 0032 1A70     		strb	r2, [r3]
 2807              	.L219:
 908:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2808              		.loc 1 908 0 is_stmt 0 discriminator 1
 2809 0034 FB1D     		add	r3, r7, #7
 2810 0036 1B78     		ldrb	r3, [r3]
 2811 0038 132B     		cmp	r3, #19
 2812 003a F0D9     		bls	.L220
 912:.\main.c      ****             BA_arr_cspot = 0;
 2813              		.loc 1 912 0 is_stmt 1
 2814 003c 3F4B     		ldr	r3, .L236+12
 2815 003e 0022     		mov	r2, #0
 2816 0040 1A70     		strb	r2, [r3]
 914:.\main.c      ****             BA_PWM_WriteCompare(2000);
 2817              		.loc 1 914 0
 2818 0042 FA23     		mov	r3, #250
 2819 0044 DB00     		lsl	r3, r3, #3
 2820 0046 181C     		mov	r0, r3
 2821 0048 FFF7FEFF 		bl	BA_PWM_WriteCompare
 915:.\main.c      ****             break;
 2822              		.loc 1 915 0
 2823 004c 40E0     		b	.L213
 2824              	.L217:
 918:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2825              		.loc 1 918 0
 2826 004e 3C1D     		add	r4, r7, #4
 2827 0050 3B4B     		ldr	r3, .L236+16
 2828 0052 181C     		mov	r0, r3
 2829 0054 0A21     		mov	r1, #10
 2830 0056 0B22     		mov	r2, #11
 2831 0058 FFF7FEFF 		bl	make_command
 2832 005c 031C     		mov	r3, r0
 2833 005e 2380     		strh	r3, [r4]
 919:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 2834              		.loc 1 919 0
 2835 0060 364B     		ldr	r3, .L236+12
 2836 0062 1B78     		ldrb	r3, [r3]
 2837 0064 1A1C     		mov	r2, r3
 2838 0066 334B     		ldr	r3, .L236+4
 2839 0068 5200     		lsl	r2, r2, #1
 2840 006a 391D     		add	r1, r7, #4
 2841 006c 0988     		ldrh	r1, [r1]
 2842 006e D152     		strh	r1, [r2, r3]
 921:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 2843              		.loc 1 921 0
 2844 0070 324B     		ldr	r3, .L236+12
 2845 0072 1B78     		ldrb	r3, [r3]
 2846 0074 122B     		cmp	r3, #18
 2847 0076 06D8     		bhi	.L221
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 69


 923:.\main.c      ****                 BA_arr_cspot++;
 2848              		.loc 1 923 0
 2849 0078 304B     		ldr	r3, .L236+12
 2850 007a 1B78     		ldrb	r3, [r3]
 2851 007c 0133     		add	r3, r3, #1
 2852 007e DAB2     		uxtb	r2, r3
 2853 0080 2E4B     		ldr	r3, .L236+12
 2854 0082 1A70     		strb	r2, [r3]
 2855 0084 02E0     		b	.L222
 2856              	.L221:
 927:.\main.c      ****                 BA_arr_cspot = 0;
 2857              		.loc 1 927 0
 2858 0086 2D4B     		ldr	r3, .L236+12
 2859 0088 0022     		mov	r2, #0
 2860 008a 1A70     		strb	r2, [r3]
 2861              	.L222:
 932:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2862              		.loc 1 932 0
 2863 008c BC1C     		add	r4, r7, #2
 2864 008e 294B     		ldr	r3, .L236+4
 2865 0090 181C     		mov	r0, r3
 2866 0092 1421     		mov	r1, #20
 2867 0094 FFF7FEFF 		bl	average
 2868 0098 031C     		mov	r3, r0
 2869 009a 2380     		strh	r3, [r4]
 934:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2870              		.loc 1 934 0
 2871 009c BB1C     		add	r3, r7, #2
 2872 009e 1A88     		ldrh	r2, [r3]
 2873 00a0 FA23     		mov	r3, #250
 2874 00a2 DB00     		lsl	r3, r3, #3
 2875 00a4 9A42     		cmp	r2, r3
 2876 00a6 0AD8     		bhi	.L223
 934:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2877              		.loc 1 934 0 is_stmt 0 discriminator 1
 2878 00a8 BB1C     		add	r3, r7, #2
 2879 00aa 1A88     		ldrh	r2, [r3]
 2880 00ac 254B     		ldr	r3, .L236+20
 2881 00ae 9A42     		cmp	r2, r3
 2882 00b0 05D9     		bls	.L223
 936:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2883              		.loc 1 936 0 is_stmt 1
 2884 00b2 BB1C     		add	r3, r7, #2
 2885 00b4 1B88     		ldrh	r3, [r3]
 2886 00b6 181C     		mov	r0, r3
 2887 00b8 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2888 00bc 03E0     		b	.L224
 2889              	.L223:
 941:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2890              		.loc 1 941 0
 2891 00be 1E4B     		ldr	r3, .L236+8
 2892 00c0 181C     		mov	r0, r3
 2893 00c2 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2894              	.L224:
 943:.\main.c      ****             BA_FLAG = 0;
 2895              		.loc 1 943 0
 2896 00c6 204B     		ldr	r3, .L236+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 70


 2897 00c8 0022     		mov	r2, #0
 2898 00ca 1A70     		strb	r2, [r3]
 944:.\main.c      ****             break;
 2899              		.loc 1 944 0
 2900 00cc 00E0     		b	.L213
 2901              	.L235:
 905:.\main.c      ****             break;
 2902              		.loc 1 905 0
 2903 00ce C046     		mov	r8, r8
 2904              	.L213:
 948:.\main.c      ****     }
 949:.\main.c      ****     
 950:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2905              		.loc 1 950 0
 2906 00d0 174B     		ldr	r3, .L236
 2907 00d2 1B78     		ldrb	r3, [r3]
 2908 00d4 012B     		cmp	r3, #1
 2909 00d6 0CD0     		beq	.L226
 2910 00d8 02DC     		bgt	.L227
 2911 00da 002B     		cmp	r3, #0
 2912 00dc 05D0     		beq	.L228
 2913 00de 24E0     		b	.L212
 2914              	.L227:
 2915 00e0 022B     		cmp	r3, #2
 2916 00e2 0AD0     		beq	.L229
 2917 00e4 032B     		cmp	r3, #3
 2918 00e6 14D0     		beq	.L230
 2919 00e8 1FE0     		b	.L212
 2920              	.L228:
 951:.\main.c      ****         case BA_start:
 952:.\main.c      ****             baseAzimuth_state = BA_init;
 2921              		.loc 1 952 0
 2922 00ea 114B     		ldr	r3, .L236
 2923 00ec 0122     		mov	r2, #1
 2924 00ee 1A70     		strb	r2, [r3]
 953:.\main.c      ****             break;
 2925              		.loc 1 953 0
 2926 00f0 1BE0     		b	.L212
 2927              	.L226:
 954:.\main.c      ****         
 955:.\main.c      ****         case BA_init:
 956:.\main.c      ****             baseAzimuth_state = BA_wait;
 2928              		.loc 1 956 0
 2929 00f2 0F4B     		ldr	r3, .L236
 2930 00f4 0322     		mov	r2, #3
 2931 00f6 1A70     		strb	r2, [r3]
 957:.\main.c      ****             break;
 2932              		.loc 1 957 0
 2933 00f8 17E0     		b	.L212
 2934              	.L229:
 958:.\main.c      ****         
 959:.\main.c      ****         case BA_execute:
 960:.\main.c      ****             if(BA_FLAG)
 2935              		.loc 1 960 0
 2936 00fa 134B     		ldr	r3, .L236+24
 2937 00fc 1B78     		ldrb	r3, [r3]
 2938 00fe 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 71


 2939 0100 03D0     		beq	.L231
 961:.\main.c      ****             {
 962:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2940              		.loc 1 962 0
 2941 0102 0B4B     		ldr	r3, .L236
 2942 0104 0222     		mov	r2, #2
 2943 0106 1A70     		strb	r2, [r3]
 963:.\main.c      ****             }
 964:.\main.c      ****             else
 965:.\main.c      ****             {
 966:.\main.c      ****                 baseAzimuth_state = BA_wait;
 967:.\main.c      ****             }
 968:.\main.c      ****             break;
 2944              		.loc 1 968 0
 2945 0108 0FE0     		b	.L212
 2946              	.L231:
 966:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2947              		.loc 1 966 0
 2948 010a 094B     		ldr	r3, .L236
 2949 010c 0322     		mov	r2, #3
 2950 010e 1A70     		strb	r2, [r3]
 2951              		.loc 1 968 0
 2952 0110 0BE0     		b	.L212
 2953              	.L230:
 969:.\main.c      ****         
 970:.\main.c      ****         case BA_wait:
 971:.\main.c      ****             if(BA_FLAG)
 2954              		.loc 1 971 0
 2955 0112 0D4B     		ldr	r3, .L236+24
 2956 0114 1B78     		ldrb	r3, [r3]
 2957 0116 002B     		cmp	r3, #0
 2958 0118 03D0     		beq	.L233
 972:.\main.c      ****             {
 973:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2959              		.loc 1 973 0
 2960 011a 054B     		ldr	r3, .L236
 2961 011c 0222     		mov	r2, #2
 2962 011e 1A70     		strb	r2, [r3]
 2963 0120 02E0     		b	.L234
 2964              	.L233:
 974:.\main.c      ****             }
 975:.\main.c      ****             else
 976:.\main.c      ****             {
 977:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2965              		.loc 1 977 0
 2966 0122 034B     		ldr	r3, .L236
 2967 0124 0322     		mov	r2, #3
 2968 0126 1A70     		strb	r2, [r3]
 2969              	.L234:
 978:.\main.c      ****             }
 979:.\main.c      ****             break;
 2970              		.loc 1 979 0
 2971 0128 C046     		mov	r8, r8
 2972              	.L212:
 980:.\main.c      ****     }    
 981:.\main.c      **** }
 2973              		.loc 1 981 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 72


 2974 012a BD46     		mov	sp, r7
 2975 012c 03B0     		add	sp, sp, #12
 2976              		@ sp needed
 2977 012e 90BD     		pop	{r4, r7, pc}
 2978              	.L237:
 2979              		.align	2
 2980              	.L236:
 2981 0130 00000000 		.word	baseAzimuth_state
 2982 0134 00000000 		.word	baseAz_array
 2983 0138 DC050000 		.word	1500
 2984 013c 00000000 		.word	BA_arr_cspot
 2985 0140 00000000 		.word	data_array
 2986 0144 E7030000 		.word	999
 2987 0148 00000000 		.word	BA_FLAG
 2988              		.cfi_endproc
 2989              	.LFE48:
 2990              		.size	baseAzimuth, .-baseAzimuth
 2991              		.section	.text.initialize,"ax",%progbits
 2992              		.align	2
 2993              		.global	initialize
 2994              		.code	16
 2995              		.thumb_func
 2996              		.type	initialize, %function
 2997              	initialize:
 2998              	.LFB49:
 982:.\main.c      **** 
 983:.\main.c      **** //Initialization function for the program
 984:.\main.c      **** void initialize()
 985:.\main.c      **** {
 2999              		.loc 1 985 0
 3000              		.cfi_startproc
 3001 0000 80B5     		push	{r7, lr}
 3002              		.cfi_def_cfa_offset 8
 3003              		.cfi_offset 7, -8
 3004              		.cfi_offset 14, -4
 3005 0002 82B0     		sub	sp, sp, #8
 3006              		.cfi_def_cfa_offset 16
 3007 0004 00AF     		add	r7, sp, #0
 3008              		.cfi_def_cfa_register 7
 986:.\main.c      ****     WIZ_RST_Write(0);
 3009              		.loc 1 986 0
 3010 0006 0020     		mov	r0, #0
 3011 0008 FFF7FEFF 		bl	WIZ_RST_Write
 987:.\main.c      ****     CyDelay(10);
 3012              		.loc 1 987 0
 3013 000c 0A20     		mov	r0, #10
 3014 000e FFF7FEFF 		bl	CyDelay
 988:.\main.c      ****     WIZ_RST_Write(1);
 3015              		.loc 1 988 0
 3016 0012 0120     		mov	r0, #1
 3017 0014 FFF7FEFF 		bl	WIZ_RST_Write
 989:.\main.c      ****     WIZ_SS_Write(1);
 3018              		.loc 1 989 0
 3019 0018 0120     		mov	r0, #1
 3020 001a FFF7FEFF 		bl	WIZ_SS_Write
 3021              	.LBB2:
 990:.\main.c      ****     for(uint8 j=0; j<100; j++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 73


 3022              		.loc 1 990 0
 3023 001e FB1D     		add	r3, r7, #7
 3024 0020 0022     		mov	r2, #0
 3025 0022 1A70     		strb	r2, [r3]
 3026 0024 0DE0     		b	.L239
 3027              	.L242:
 991:.\main.c      ****     {
 992:.\main.c      ****         if(WIZ_RDY_Read())
 3028              		.loc 1 992 0
 3029 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3030 002a 031C     		mov	r3, r0
 3031 002c 002B     		cmp	r3, #0
 3032 002e 00D0     		beq	.L240
 993:.\main.c      ****         {
 994:.\main.c      ****             break;
 3033              		.loc 1 994 0
 3034 0030 0BE0     		b	.L241
 3035              	.L240:
 995:.\main.c      ****         }
 996:.\main.c      ****         else
 997:.\main.c      ****         {
 998:.\main.c      ****             CyDelay(4);
 3036              		.loc 1 998 0
 3037 0032 0420     		mov	r0, #4
 3038 0034 FFF7FEFF 		bl	CyDelay
 990:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3039              		.loc 1 990 0
 3040 0038 FB1D     		add	r3, r7, #7
 3041 003a 1A78     		ldrb	r2, [r3]
 3042 003c FB1D     		add	r3, r7, #7
 3043 003e 0132     		add	r2, r2, #1
 3044 0040 1A70     		strb	r2, [r3]
 3045              	.L239:
 990:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3046              		.loc 1 990 0 is_stmt 0 discriminator 1
 3047 0042 FB1D     		add	r3, r7, #7
 3048 0044 1B78     		ldrb	r3, [r3]
 3049 0046 632B     		cmp	r3, #99
 3050 0048 EDD9     		bls	.L242
 3051              	.L241:
 3052              	.LBE2:
 999:.\main.c      ****         }
1000:.\main.c      ****     }
1001:.\main.c      ****     //Initialize state variables
1002:.\main.c      ****     baseAzimuth_state = BA_start;
 3053              		.loc 1 1002 0 is_stmt 1
 3054 004a 234B     		ldr	r3, .L243
 3055 004c 0022     		mov	r2, #0
 3056 004e 1A70     		strb	r2, [r3]
1003:.\main.c      ****     wristTilt_state = tilt_start;
 3057              		.loc 1 1003 0
 3058 0050 224B     		ldr	r3, .L243+4
 3059 0052 0022     		mov	r2, #0
 3060 0054 1A70     		strb	r2, [r3]
1004:.\main.c      ****     wristRotate_state = rotate_start;
 3061              		.loc 1 1004 0
 3062 0056 224B     		ldr	r3, .L243+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 74


 3063 0058 0022     		mov	r2, #0
 3064 005a 1A70     		strb	r2, [r3]
1005:.\main.c      ****     shoulder_state = shldr_start;
 3065              		.loc 1 1005 0
 3066 005c 214B     		ldr	r3, .L243+12
 3067 005e 0022     		mov	r2, #0
 3068 0060 1A70     		strb	r2, [r3]
1006:.\main.c      ****     elbow_state = elbw_start;
 3069              		.loc 1 1006 0
 3070 0062 214B     		ldr	r3, .L243+16
 3071 0064 0022     		mov	r2, #0
 3072 0066 1A70     		strb	r2, [r3]
1007:.\main.c      ****     
1008:.\main.c      ****     //start all of our components
1009:.\main.c      ****     //SPI_1_Start();
1010:.\main.c      ****     SPIM_1_Start();
 3073              		.loc 1 1010 0
 3074 0068 FFF7FEFF 		bl	SPIM_1_Start
1011:.\main.c      ****     
1012:.\main.c      ****     Clock_pwm_Start();
 3075              		.loc 1 1012 0
 3076 006c FFF7FEFF 		bl	Clock_pwm_Start
1013:.\main.c      ****     Clock_counter_Start();
 3077              		.loc 1 1013 0
 3078 0070 FFF7FEFF 		bl	Clock_counter_Start
1014:.\main.c      ****     UART_1_Start();
 3079              		.loc 1 1014 0
 3080 0074 FFF7FEFF 		bl	UART_1_Start
1015:.\main.c      ****     SHLDR_PWM_Start();
 3081              		.loc 1 1015 0
 3082 0078 FFF7FEFF 		bl	SHLDR_PWM_Start
1016:.\main.c      ****     BA_PWM_Start();
 3083              		.loc 1 1016 0
 3084 007c FFF7FEFF 		bl	BA_PWM_Start
1017:.\main.c      ****     ELBW_PWM_Start();
 3085              		.loc 1 1017 0
 3086 0080 FFF7FEFF 		bl	ELBW_PWM_Start
1018:.\main.c      ****     
1019:.\main.c      ****     //uint8_t test_byte;
1020:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3087              		.loc 1 1020 0
 3088 0084 194B     		ldr	r3, .L243+20
 3089 0086 0420     		mov	r0, #4
 3090 0088 0121     		mov	r1, #1
 3091 008a 1A1C     		mov	r2, r3
 3092 008c FFF7FEFF 		bl	wiznetInit
1021:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1022:.\main.c      ****     
1023:.\main.c      ****     //Initialize the dynamixels
1024:.\main.c      ****     ServoSpeed(0xFE, 100);
 3093              		.loc 1 1024 0
 3094 0090 FE20     		mov	r0, #254
 3095 0092 6421     		mov	r1, #100
 3096 0094 FFF7FEFF 		bl	ServoSpeed
1025:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3097              		.loc 1 1025 0
 3098 0098 154B     		ldr	r3, .L243+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 75


 3099 009a FE20     		mov	r0, #254
 3100 009c 191C     		mov	r1, r3
 3101 009e FFF7FEFF 		bl	SetServoTorque
1026:.\main.c      ****     
1027:.\main.c      ****     //Initialize our motor drivers
1028:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3102              		.loc 1 1028 0
 3103 00a2 144B     		ldr	r3, .L243+28
 3104 00a4 181C     		mov	r0, r3
 3105 00a6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1029:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3106              		.loc 1 1029 0
 3107 00aa 124B     		ldr	r3, .L243+28
 3108 00ac 181C     		mov	r0, r3
 3109 00ae FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1030:.\main.c      ****     CyDelay(3000);
 3110              		.loc 1 1030 0
 3111 00b2 114B     		ldr	r3, .L243+32
 3112 00b4 181C     		mov	r0, r3
 3113 00b6 FFF7FEFF 		bl	CyDelay
1031:.\main.c      ****    
1032:.\main.c      ****     ADC_Start();
 3114              		.loc 1 1032 0
 3115 00ba FFF7FEFF 		bl	ADC_Start
1033:.\main.c      ****     ADC_StartConvert();
 3116              		.loc 1 1033 0
 3117 00be FFF7FEFF 		bl	ADC_StartConvert
1034:.\main.c      ****     
1035:.\main.c      ****     //helps for generating random arrays
1036:.\main.c      ****     //srand((unsigned) time(&t));
1037:.\main.c      ****     
1038:.\main.c      ****     CyGlobalIntEnable;
 3118              		.loc 1 1038 0
 3119              	@ 1038 ".\main.c" 1
 3120 00c2 62B6     		CPSIE   i
 3121              	@ 0 "" 2
1039:.\main.c      ****     isr_1_StartEx(timer_isr);
 3122              		.loc 1 1039 0
 3123              		.code	16
 3124 00c4 0D4B     		ldr	r3, .L243+36
 3125 00c6 181C     		mov	r0, r3
 3126 00c8 FFF7FEFF 		bl	isr_1_StartEx
1040:.\main.c      ****     Timer_1_Start();
 3127              		.loc 1 1040 0
 3128 00cc FFF7FEFF 		bl	Timer_1_Start
1041:.\main.c      **** }
 3129              		.loc 1 1041 0
 3130 00d0 BD46     		mov	sp, r7
 3131 00d2 02B0     		add	sp, sp, #8
 3132              		@ sp needed
 3133 00d4 80BD     		pop	{r7, pc}
 3134              	.L244:
 3135 00d6 C046     		.align	2
 3136              	.L243:
 3137 00d8 00000000 		.word	baseAzimuth_state
 3138 00dc 00000000 		.word	wristTilt_state
 3139 00e0 00000000 		.word	wristRotate_state
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 76


 3140 00e4 00000000 		.word	shoulder_state
 3141 00e8 00000000 		.word	elbow_state
 3142 00ec 87690000 		.word	27015
 3143 00f0 FF030000 		.word	1023
 3144 00f4 DC050000 		.word	1500
 3145 00f8 B80B0000 		.word	3000
 3146 00fc 00000000 		.word	timer_isr
 3147              		.cfi_endproc
 3148              	.LFE49:
 3149              		.size	initialize, .-initialize
 3150              		.section	.text.main,"ax",%progbits
 3151              		.align	2
 3152              		.global	main
 3153              		.code	16
 3154              		.thumb_func
 3155              		.type	main, %function
 3156              	main:
 3157              	.LFB50:
1042:.\main.c      **** 
1043:.\main.c      **** int main()
1044:.\main.c      **** {  
 3158              		.loc 1 1044 0
 3159              		.cfi_startproc
 3160 0000 80B5     		push	{r7, lr}
 3161              		.cfi_def_cfa_offset 8
 3162              		.cfi_offset 7, -8
 3163              		.cfi_offset 14, -4
 3164 0002 84B0     		sub	sp, sp, #16
 3165              		.cfi_def_cfa_offset 24
 3166 0004 00AF     		add	r7, sp, #0
 3167              		.cfi_def_cfa_register 7
1045:.\main.c      ****     //Define variables
1046:.\main.c      ****     time_t t; //for testing
1047:.\main.c      ****     uint8 counter; //for testing
1048:.\main.c      ****     int direction = 0; //for testing
 3168              		.loc 1 1048 0
 3169 0006 0023     		mov	r3, #0
 3170 0008 FB60     		str	r3, [r7, #12]
1049:.\main.c      ****     int16 temp_val= -1000; //for testing
 3171              		.loc 1 1049 0
 3172 000a 3B1C     		mov	r3, r7
 3173 000c 0A33     		add	r3, r3, #10
 3174 000e 194A     		ldr	r2, .L249
 3175 0010 1A80     		strh	r2, [r3]
1050:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1051:.\main.c      ****     
1052:.\main.c      ****     //for testing
1053:.\main.c      ****     int increasing = 1;
 3176              		.loc 1 1053 0
 3177 0012 0123     		mov	r3, #1
 3178 0014 7B60     		str	r3, [r7, #4]
1054:.\main.c      ****     //uint16 first_count;
1055:.\main.c      ****     //uint16 second_count;
1056:.\main.c      ****     //uint16 dropped_packets;
1057:.\main.c      ****     //uint16 temp_code_time;
1058:.\main.c      ****     //uint16 code_time;
1059:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 77


1060:.\main.c      ****     initialize();
 3179              		.loc 1 1060 0
 3180 0016 FFF7FEFF 		bl	initialize
 3181              	.L248:
1061:.\main.c      **** 
1062:.\main.c      ****     for(;;)
1063:.\main.c      ****     {
1064:.\main.c      ****         //check addresses
1065:.\main.c      ****         //TODO get the address bytes from Steve
1066:.\main.c      ****         //TODO at what point should we send feedback?
1067:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1068:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 3182              		.loc 1 1068 0
 3183 001a FFF7FEFF 		bl	WIZ_INT_Read
 3184 001e 031C     		mov	r3, r0
 3185 0020 002B     		cmp	r3, #0
 3186 0022 12D1     		bne	.L246
1069:.\main.c      ****         {
1070:.\main.c      ****             wiznetClearInterrupts();
 3187              		.loc 1 1070 0
 3188 0024 FFF7FEFF 		bl	wiznetClearInterrupts
1071:.\main.c      ****             fill_data_array();
 3189              		.loc 1 1071 0
 3190 0028 FFF7FEFF 		bl	fill_data_array
1072:.\main.c      ****             BA_FLAG = 1;
 3191              		.loc 1 1072 0
 3192 002c 124B     		ldr	r3, .L249+4
 3193 002e 0122     		mov	r2, #1
 3194 0030 1A70     		strb	r2, [r3]
1073:.\main.c      ****             WR_FLAG = 1;
 3195              		.loc 1 1073 0
 3196 0032 124B     		ldr	r3, .L249+8
 3197 0034 0122     		mov	r2, #1
 3198 0036 1A70     		strb	r2, [r3]
1074:.\main.c      ****             WT_FLAG = 1;
 3199              		.loc 1 1074 0
 3200 0038 114B     		ldr	r3, .L249+12
 3201 003a 0122     		mov	r2, #1
 3202 003c 1A70     		strb	r2, [r3]
1075:.\main.c      ****             SHOULDER_FLAG = 1;
 3203              		.loc 1 1075 0
 3204 003e 114B     		ldr	r3, .L249+16
 3205 0040 0122     		mov	r2, #1
 3206 0042 1A70     		strb	r2, [r3]
1076:.\main.c      ****             ELBOW_FLAG = 1;
 3207              		.loc 1 1076 0
 3208 0044 104B     		ldr	r3, .L249+20
 3209 0046 0122     		mov	r2, #1
 3210 0048 1A70     		strb	r2, [r3]
 3211              	.L246:
1077:.\main.c      ****             //wiznet = 0; //for testing
1078:.\main.c      ****         }
1079:.\main.c      ****         
1080:.\main.c      ****         //if(wiznet gives a complete packet)
1081:.\main.c      ****         baseAzimuth();
 3212              		.loc 1 1081 0
 3213 004a FFF7FEFF 		bl	baseAzimuth
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 78


1082:.\main.c      ****         shoulder();
 3214              		.loc 1 1082 0
 3215 004e FFF7FEFF 		bl	shoulder
1083:.\main.c      ****         elbow();
 3216              		.loc 1 1083 0
 3217 0052 FFF7FEFF 		bl	elbow
1084:.\main.c      ****         wristTilt();
 3218              		.loc 1 1084 0
 3219 0056 FFF7FEFF 		bl	wristTilt
1085:.\main.c      ****         wristRotate();
 3220              		.loc 1 1085 0
 3221 005a FFF7FEFF 		bl	wristRotate
1086:.\main.c      **** 
1087:.\main.c      ****         //else{dropped_packets++}
1088:.\main.c      ****         //second_count = Timer_1_ReadCounter();
1089:.\main.c      ****         //temp_code_time = second_count - first_count;
1090:.\main.c      ****         //if(temp_code_time > code_time){print out the new, longer code time}
1091:.\main.c      ****         
1092:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3222              		.loc 1 1092 0
 3223 005e C046     		mov	r8, r8
 3224              	.L247:
 3225              		.loc 1 1092 0 is_stmt 0 discriminator 1
 3226 0060 0A4B     		ldr	r3, .L249+24
 3227 0062 1B78     		ldrb	r3, [r3]
 3228 0064 DBB2     		uxtb	r3, r3
 3229 0066 002B     		cmp	r3, #0
 3230 0068 FAD0     		beq	.L247
1093:.\main.c      ****         timerFlag = 0;
 3231              		.loc 1 1093 0 is_stmt 1
 3232 006a 084B     		ldr	r3, .L249+24
 3233 006c 0022     		mov	r2, #0
 3234 006e 1A70     		strb	r2, [r3]
1094:.\main.c      ****     }
 3235              		.loc 1 1094 0
 3236 0070 D3E7     		b	.L248
 3237              	.L250:
 3238 0072 C046     		.align	2
 3239              	.L249:
 3240 0074 18FCFFFF 		.word	-1000
 3241 0078 00000000 		.word	BA_FLAG
 3242 007c 00000000 		.word	WR_FLAG
 3243 0080 00000000 		.word	WT_FLAG
 3244 0084 00000000 		.word	SHOULDER_FLAG
 3245 0088 00000000 		.word	ELBOW_FLAG
 3246 008c 00000000 		.word	timerFlag
 3247              		.cfi_endproc
 3248              	.LFE50:
 3249              		.size	main, .-main
 3250              		.text
 3251              	.Letext0:
 3252              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3253              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3254              		.file 4 ".\\main.h"
 3255              		.section	.debug_info,"",%progbits
 3256              	.Ldebug_info0:
 3257 0000 EF070000 		.4byte	0x7ef
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 79


 3258 0004 0400     		.2byte	0x4
 3259 0006 00000000 		.4byte	.Ldebug_abbrev0
 3260 000a 04       		.byte	0x4
 3261 000b 01       		.uleb128 0x1
 3262 000c D4040000 		.4byte	.LASF110
 3263 0010 01       		.byte	0x1
 3264 0011 41020000 		.4byte	.LASF111
 3265 0015 49030000 		.4byte	.LASF112
 3266 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3267 001d 00000000 		.4byte	0
 3268 0021 00000000 		.4byte	.Ldebug_line0
 3269 0025 02       		.uleb128 0x2
 3270 0026 01       		.byte	0x1
 3271 0027 06       		.byte	0x6
 3272 0028 74010000 		.4byte	.LASF0
 3273 002c 02       		.uleb128 0x2
 3274 002d 01       		.byte	0x1
 3275 002e 08       		.byte	0x8
 3276 002f 55020000 		.4byte	.LASF1
 3277 0033 02       		.uleb128 0x2
 3278 0034 02       		.byte	0x2
 3279 0035 05       		.byte	0x5
 3280 0036 53000000 		.4byte	.LASF2
 3281 003a 02       		.uleb128 0x2
 3282 003b 02       		.byte	0x2
 3283 003c 07       		.byte	0x7
 3284 003d 0A030000 		.4byte	.LASF3
 3285 0041 02       		.uleb128 0x2
 3286 0042 04       		.byte	0x4
 3287 0043 05       		.byte	0x5
 3288 0044 D1010000 		.4byte	.LASF4
 3289 0048 02       		.uleb128 0x2
 3290 0049 04       		.byte	0x4
 3291 004a 07       		.byte	0x7
 3292 004b DD020000 		.4byte	.LASF5
 3293 004f 02       		.uleb128 0x2
 3294 0050 08       		.byte	0x8
 3295 0051 05       		.byte	0x5
 3296 0052 B7000000 		.4byte	.LASF6
 3297 0056 02       		.uleb128 0x2
 3298 0057 08       		.byte	0x8
 3299 0058 07       		.byte	0x7
 3300 0059 B9020000 		.4byte	.LASF7
 3301 005d 03       		.uleb128 0x3
 3302 005e 04       		.byte	0x4
 3303 005f 05       		.byte	0x5
 3304 0060 696E7400 		.ascii	"int\000"
 3305 0064 02       		.uleb128 0x2
 3306 0065 04       		.byte	0x4
 3307 0066 07       		.byte	0x7
 3308 0067 D0020000 		.4byte	.LASF8
 3309 006b 04       		.uleb128 0x4
 3310 006c 2F020000 		.4byte	.LASF9
 3311 0070 02       		.byte	0x2
 3312 0071 A1       		.byte	0xa1
 3313 0072 2C000000 		.4byte	0x2c
 3314 0076 04       		.uleb128 0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 80


 3315 0077 16010000 		.4byte	.LASF10
 3316 007b 02       		.byte	0x2
 3317 007c A2       		.byte	0xa2
 3318 007d 3A000000 		.4byte	0x3a
 3319 0081 04       		.uleb128 0x4
 3320 0082 14040000 		.4byte	.LASF11
 3321 0086 02       		.byte	0x2
 3322 0087 A3       		.byte	0xa3
 3323 0088 48000000 		.4byte	0x48
 3324 008c 04       		.uleb128 0x4
 3325 008d B5010000 		.4byte	.LASF12
 3326 0091 02       		.byte	0x2
 3327 0092 A4       		.byte	0xa4
 3328 0093 25000000 		.4byte	0x25
 3329 0097 04       		.uleb128 0x4
 3330 0098 6E010000 		.4byte	.LASF13
 3331 009c 02       		.byte	0x2
 3332 009d A5       		.byte	0xa5
 3333 009e 33000000 		.4byte	0x33
 3334 00a2 02       		.uleb128 0x2
 3335 00a3 04       		.byte	0x4
 3336 00a4 04       		.byte	0x4
 3337 00a5 8B010000 		.4byte	.LASF14
 3338 00a9 02       		.uleb128 0x2
 3339 00aa 08       		.byte	0x8
 3340 00ab 04       		.byte	0x4
 3341 00ac A8040000 		.4byte	.LASF15
 3342 00b0 02       		.uleb128 0x2
 3343 00b1 01       		.byte	0x1
 3344 00b2 08       		.byte	0x8
 3345 00b3 44030000 		.4byte	.LASF16
 3346 00b7 05       		.uleb128 0x5
 3347 00b8 6B000000 		.4byte	0x6b
 3348 00bc 02       		.uleb128 0x2
 3349 00bd 04       		.byte	0x4
 3350 00be 07       		.byte	0x7
 3351 00bf 78000000 		.4byte	.LASF17
 3352 00c3 04       		.uleb128 0x4
 3353 00c4 33040000 		.4byte	.LASF18
 3354 00c8 03       		.byte	0x3
 3355 00c9 7A       		.byte	0x7a
 3356 00ca 41000000 		.4byte	0x41
 3357 00ce 06       		.uleb128 0x6
 3358 00cf 1D030000 		.4byte	.LASF24
 3359 00d3 01       		.byte	0x1
 3360 00d4 01       		.byte	0x1
 3361 00d5 9D01     		.2byte	0x19d
 3362 00d7 FA000000 		.4byte	0xfa
 3363 00db 07       		.uleb128 0x7
 3364 00dc 38000000 		.4byte	.LASF19
 3365 00e0 00       		.sleb128 0
 3366 00e1 07       		.uleb128 0x7
 3367 00e2 25020000 		.4byte	.LASF20
 3368 00e6 01       		.sleb128 1
 3369 00e7 07       		.uleb128 0x7
 3370 00e8 1B040000 		.4byte	.LASF21
 3371 00ec 02       		.sleb128 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 81


 3372 00ed 07       		.uleb128 0x7
 3373 00ee F5020000 		.4byte	.LASF22
 3374 00f2 03       		.sleb128 3
 3375 00f3 07       		.uleb128 0x7
 3376 00f4 88020000 		.4byte	.LASF23
 3377 00f8 04       		.sleb128 4
 3378 00f9 00       		.byte	0
 3379 00fa 06       		.uleb128 0x6
 3380 00fb 8C000000 		.4byte	.LASF25
 3381 00ff 01       		.byte	0x1
 3382 0100 01       		.byte	0x1
 3383 0101 0402     		.2byte	0x204
 3384 0103 26010000 		.4byte	0x126
 3385 0107 07       		.uleb128 0x7
 3386 0108 5D000000 		.4byte	.LASF26
 3387 010c 00       		.sleb128 0
 3388 010d 07       		.uleb128 0x7
 3389 010e 41010000 		.4byte	.LASF27
 3390 0112 01       		.sleb128 1
 3391 0113 07       		.uleb128 0x7
 3392 0114 AA020000 		.4byte	.LASF28
 3393 0118 02       		.sleb128 2
 3394 0119 07       		.uleb128 0x7
 3395 011a ED010000 		.4byte	.LASF29
 3396 011e 03       		.sleb128 3
 3397 011f 07       		.uleb128 0x7
 3398 0120 98050000 		.4byte	.LASF30
 3399 0124 04       		.sleb128 4
 3400 0125 00       		.byte	0
 3401 0126 06       		.uleb128 0x6
 3402 0127 37030000 		.4byte	.LASF31
 3403 012b 01       		.byte	0x1
 3404 012c 01       		.byte	0x1
 3405 012d 6E02     		.2byte	0x26e
 3406 012f 4C010000 		.4byte	0x14c
 3407 0133 07       		.uleb128 0x7
 3408 0134 91010000 		.4byte	.LASF32
 3409 0138 00       		.sleb128 0
 3410 0139 07       		.uleb128 0x7
 3411 013a 96020000 		.4byte	.LASF33
 3412 013e 01       		.sleb128 1
 3413 013f 07       		.uleb128 0x7
 3414 0140 80050000 		.4byte	.LASF34
 3415 0144 02       		.sleb128 2
 3416 0145 07       		.uleb128 0x7
 3417 0146 5B050000 		.4byte	.LASF35
 3418 014a 03       		.sleb128 3
 3419 014b 00       		.byte	0
 3420 014c 06       		.uleb128 0x6
 3421 014d DE000000 		.4byte	.LASF36
 3422 0151 01       		.byte	0x1
 3423 0152 01       		.byte	0x1
 3424 0153 F602     		.2byte	0x2f6
 3425 0155 72010000 		.4byte	0x172
 3426 0159 07       		.uleb128 0x7
 3427 015a 35020000 		.4byte	.LASF37
 3428 015e 00       		.sleb128 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 82


 3429 015f 07       		.uleb128 0x7
 3430 0160 1F000000 		.4byte	.LASF38
 3431 0164 01       		.sleb128 1
 3432 0165 07       		.uleb128 0x7
 3433 0166 6A000000 		.4byte	.LASF39
 3434 016a 02       		.sleb128 2
 3435 016b 07       		.uleb128 0x7
 3436 016c FF020000 		.4byte	.LASF40
 3437 0170 03       		.sleb128 3
 3438 0171 00       		.byte	0
 3439 0172 06       		.uleb128 0x6
 3440 0173 DA010000 		.4byte	.LASF41
 3441 0177 01       		.byte	0x1
 3442 0178 01       		.byte	0x1
 3443 0179 7D03     		.2byte	0x37d
 3444 017b 98010000 		.4byte	0x198
 3445 017f 07       		.uleb128 0x7
 3446 0180 16000000 		.4byte	.LASF42
 3447 0184 00       		.sleb128 0
 3448 0185 07       		.uleb128 0x7
 3449 0186 CE000000 		.4byte	.LASF43
 3450 018a 01       		.sleb128 1
 3451 018b 07       		.uleb128 0x7
 3452 018c 81000000 		.4byte	.LASF44
 3453 0190 02       		.sleb128 2
 3454 0191 07       		.uleb128 0x7
 3455 0192 57010000 		.4byte	.LASF45
 3456 0196 03       		.sleb128 3
 3457 0197 00       		.byte	0
 3458 0198 08       		.uleb128 0x8
 3459 0199 B7040000 		.4byte	.LASF49
 3460 019d 01       		.byte	0x1
 3461 019e 0A       		.byte	0xa
 3462 019f 00000000 		.4byte	.LFB34
 3463 01a3 28000000 		.4byte	.LFE34-.LFB34
 3464 01a7 01       		.uleb128 0x1
 3465 01a8 9C       		.byte	0x9c
 3466 01a9 BC010000 		.4byte	0x1bc
 3467 01ad 09       		.uleb128 0x9
 3468 01ae 63020000 		.4byte	.LASF48
 3469 01b2 01       		.byte	0x1
 3470 01b3 0C       		.byte	0xc
 3471 01b4 81000000 		.4byte	0x81
 3472 01b8 02       		.uleb128 0x2
 3473 01b9 91       		.byte	0x91
 3474 01ba 74       		.sleb128 -12
 3475 01bb 00       		.byte	0
 3476 01bc 0A       		.uleb128 0xa
 3477 01bd 65050000 		.4byte	.LASF55
 3478 01c1 01       		.byte	0x1
 3479 01c2 32       		.byte	0x32
 3480 01c3 76000000 		.4byte	0x76
 3481 01c7 00000000 		.4byte	.LFB35
 3482 01cb 78000000 		.4byte	.LFE35-.LFB35
 3483 01cf 01       		.uleb128 0x1
 3484 01d0 9C       		.byte	0x9c
 3485 01d1 1A020000 		.4byte	0x21a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 83


 3486 01d5 0B       		.uleb128 0xb
 3487 01d6 2E030000 		.4byte	.LASF46
 3488 01da 01       		.byte	0x1
 3489 01db 32       		.byte	0x32
 3490 01dc 1A020000 		.4byte	0x21a
 3491 01e0 02       		.uleb128 0x2
 3492 01e1 91       		.byte	0x91
 3493 01e2 64       		.sleb128 -28
 3494 01e3 0B       		.uleb128 0xb
 3495 01e4 A0020000 		.4byte	.LASF47
 3496 01e8 01       		.byte	0x1
 3497 01e9 32       		.byte	0x32
 3498 01ea 6B000000 		.4byte	0x6b
 3499 01ee 02       		.uleb128 0x2
 3500 01ef 91       		.byte	0x91
 3501 01f0 63       		.sleb128 -29
 3502 01f1 0C       		.uleb128 0xc
 3503 01f2 6900     		.ascii	"i\000"
 3504 01f4 01       		.byte	0x1
 3505 01f5 34       		.byte	0x34
 3506 01f6 6B000000 		.4byte	0x6b
 3507 01fa 02       		.uleb128 0x2
 3508 01fb 91       		.byte	0x91
 3509 01fc 77       		.sleb128 -9
 3510 01fd 0C       		.uleb128 0xc
 3511 01fe 73756D00 		.ascii	"sum\000"
 3512 0202 01       		.byte	0x1
 3513 0203 35       		.byte	0x35
 3514 0204 81000000 		.4byte	0x81
 3515 0208 02       		.uleb128 0x2
 3516 0209 91       		.byte	0x91
 3517 020a 70       		.sleb128 -16
 3518 020b 0C       		.uleb128 0xc
 3519 020c 61766700 		.ascii	"avg\000"
 3520 0210 01       		.byte	0x1
 3521 0211 36       		.byte	0x36
 3522 0212 76000000 		.4byte	0x76
 3523 0216 02       		.uleb128 0x2
 3524 0217 91       		.byte	0x91
 3525 0218 6E       		.sleb128 -18
 3526 0219 00       		.byte	0
 3527 021a 0D       		.uleb128 0xd
 3528 021b 04       		.byte	0x4
 3529 021c 76000000 		.4byte	0x76
 3530 0220 0E       		.uleb128 0xe
 3531 0221 28040000 		.4byte	.LASF50
 3532 0225 01       		.byte	0x1
 3533 0226 42       		.byte	0x42
 3534 0227 00000000 		.4byte	.LFB36
 3535 022b 84050000 		.4byte	.LFE36-.LFB36
 3536 022f 01       		.uleb128 0x1
 3537 0230 9C       		.byte	0x9c
 3538 0231 6E020000 		.4byte	0x26e
 3539 0235 0B       		.uleb128 0xb
 3540 0236 AD030000 		.4byte	.LASF51
 3541 023a 01       		.byte	0x1
 3542 023b 42       		.byte	0x42
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 84


 3543 023c 6B000000 		.4byte	0x6b
 3544 0240 02       		.uleb128 0x2
 3545 0241 91       		.byte	0x91
 3546 0242 77       		.sleb128 -9
 3547 0243 0B       		.uleb128 0xb
 3548 0244 3A040000 		.4byte	.LASF52
 3549 0248 01       		.byte	0x1
 3550 0249 42       		.byte	0x42
 3551 024a 1A020000 		.4byte	0x21a
 3552 024e 02       		.uleb128 0x2
 3553 024f 91       		.byte	0x91
 3554 0250 70       		.sleb128 -16
 3555 0251 0B       		.uleb128 0xb
 3556 0252 40040000 		.4byte	.LASF53
 3557 0256 01       		.byte	0x1
 3558 0257 42       		.byte	0x42
 3559 0258 6B000000 		.4byte	0x6b
 3560 025c 02       		.uleb128 0x2
 3561 025d 91       		.byte	0x91
 3562 025e 76       		.sleb128 -10
 3563 025f 0B       		.uleb128 0xb
 3564 0260 78050000 		.4byte	.LASF54
 3565 0264 01       		.byte	0x1
 3566 0265 42       		.byte	0x42
 3567 0266 76000000 		.4byte	0x76
 3568 026a 02       		.uleb128 0x2
 3569 026b 91       		.byte	0x91
 3570 026c 74       		.sleb128 -12
 3571 026d 00       		.byte	0
 3572 026e 0F       		.uleb128 0xf
 3573 026f C4010000 		.4byte	.LASF56
 3574 0273 01       		.byte	0x1
 3575 0274 3F01     		.2byte	0x13f
 3576 0276 76000000 		.4byte	0x76
 3577 027a 00000000 		.4byte	.LFB37
 3578 027e 84000000 		.4byte	.LFE37-.LFB37
 3579 0282 01       		.uleb128 0x1
 3580 0283 9C       		.byte	0x9c
 3581 0284 F2020000 		.4byte	0x2f2
 3582 0288 10       		.uleb128 0x10
 3583 0289 00040000 		.4byte	.LASF57
 3584 028d 01       		.byte	0x1
 3585 028e 3F01     		.2byte	0x13f
 3586 0290 F2020000 		.4byte	0x2f2
 3587 0294 02       		.uleb128 0x2
 3588 0295 91       		.byte	0x91
 3589 0296 6C       		.sleb128 -20
 3590 0297 10       		.uleb128 0x10
 3591 0298 84040000 		.4byte	.LASF58
 3592 029c 01       		.byte	0x1
 3593 029d 3F01     		.2byte	0x13f
 3594 029f 6B000000 		.4byte	0x6b
 3595 02a3 02       		.uleb128 0x2
 3596 02a4 91       		.byte	0x91
 3597 02a5 6B       		.sleb128 -21
 3598 02a6 10       		.uleb128 0x10
 3599 02a7 82020000 		.4byte	.LASF59
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 85


 3600 02ab 01       		.byte	0x1
 3601 02ac 3F01     		.2byte	0x13f
 3602 02ae 6B000000 		.4byte	0x6b
 3603 02b2 02       		.uleb128 0x2
 3604 02b3 91       		.byte	0x91
 3605 02b4 6A       		.sleb128 -22
 3606 02b5 11       		.uleb128 0x11
 3607 02b6 78050000 		.4byte	.LASF54
 3608 02ba 01       		.byte	0x1
 3609 02bb 4101     		.2byte	0x141
 3610 02bd 76000000 		.4byte	0x76
 3611 02c1 02       		.uleb128 0x2
 3612 02c2 91       		.byte	0x91
 3613 02c3 70       		.sleb128 -16
 3614 02c4 11       		.uleb128 0x11
 3615 02c5 96040000 		.4byte	.LASF60
 3616 02c9 01       		.byte	0x1
 3617 02ca 4201     		.2byte	0x142
 3618 02cc 97000000 		.4byte	0x97
 3619 02d0 02       		.uleb128 0x2
 3620 02d1 91       		.byte	0x91
 3621 02d2 76       		.sleb128 -10
 3622 02d3 11       		.uleb128 0x11
 3623 02d4 9C040000 		.4byte	.LASF61
 3624 02d8 01       		.byte	0x1
 3625 02d9 4301     		.2byte	0x143
 3626 02db 97000000 		.4byte	0x97
 3627 02df 02       		.uleb128 0x2
 3628 02e0 91       		.byte	0x91
 3629 02e1 74       		.sleb128 -12
 3630 02e2 11       		.uleb128 0x11
 3631 02e3 A2040000 		.4byte	.LASF62
 3632 02e7 01       		.byte	0x1
 3633 02e8 4401     		.2byte	0x144
 3634 02ea 97000000 		.4byte	0x97
 3635 02ee 02       		.uleb128 0x2
 3636 02ef 91       		.byte	0x91
 3637 02f0 72       		.sleb128 -14
 3638 02f1 00       		.byte	0
 3639 02f2 0D       		.uleb128 0xd
 3640 02f3 04       		.byte	0x4
 3641 02f4 8C000000 		.4byte	0x8c
 3642 02f8 0F       		.uleb128 0xf
 3643 02f9 68040000 		.4byte	.LASF63
 3644 02fd 01       		.byte	0x1
 3645 02fe 4D01     		.2byte	0x14d
 3646 0300 76000000 		.4byte	0x76
 3647 0304 00000000 		.4byte	.LFB38
 3648 0308 20000000 		.4byte	.LFE38-.LFB38
 3649 030c 01       		.uleb128 0x1
 3650 030d 9C       		.byte	0x9c
 3651 030e 31030000 		.4byte	0x331
 3652 0312 10       		.uleb128 0x10
 3653 0313 DC030000 		.4byte	.LASF64
 3654 0317 01       		.byte	0x1
 3655 0318 4D01     		.2byte	0x14d
 3656 031a 81000000 		.4byte	0x81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 86


 3657 031e 02       		.uleb128 0x2
 3658 031f 91       		.byte	0x91
 3659 0320 6C       		.sleb128 -20
 3660 0321 11       		.uleb128 0x11
 3661 0322 07020000 		.4byte	.LASF65
 3662 0326 01       		.byte	0x1
 3663 0327 5101     		.2byte	0x151
 3664 0329 76000000 		.4byte	0x76
 3665 032d 02       		.uleb128 0x2
 3666 032e 91       		.byte	0x91
 3667 032f 76       		.sleb128 -10
 3668 0330 00       		.byte	0
 3669 0331 12       		.uleb128 0x12
 3670 0332 F9010000 		.4byte	.LASF66
 3671 0336 01       		.byte	0x1
 3672 0337 5501     		.2byte	0x155
 3673 0339 00000000 		.4byte	.LFB39
 3674 033d 08000000 		.4byte	.LFE39-.LFB39
 3675 0341 01       		.uleb128 0x1
 3676 0342 9C       		.byte	0x9c
 3677 0343 13       		.uleb128 0x13
 3678 0344 43000000 		.4byte	.LASF67
 3679 0348 01       		.byte	0x1
 3680 0349 5E01     		.2byte	0x15e
 3681 034b 00000000 		.4byte	.LFB40
 3682 034f 18000000 		.4byte	.LFE40-.LFB40
 3683 0353 01       		.uleb128 0x1
 3684 0354 9C       		.byte	0x9c
 3685 0355 14       		.uleb128 0x14
 3686 0356 B5030000 		.4byte	.LASF68
 3687 035a 01       		.byte	0x1
 3688 035b 6801     		.2byte	0x168
 3689 035d 00000000 		.4byte	.LFB41
 3690 0361 98000000 		.4byte	.LFE41-.LFB41
 3691 0365 01       		.uleb128 0x1
 3692 0366 9C       		.byte	0x9c
 3693 0367 99030000 		.4byte	0x399
 3694 036b 10       		.uleb128 0x10
 3695 036c AF040000 		.4byte	.LASF69
 3696 0370 01       		.byte	0x1
 3697 0371 6801     		.2byte	0x168
 3698 0373 6B000000 		.4byte	0x6b
 3699 0377 02       		.uleb128 0x2
 3700 0378 91       		.byte	0x91
 3701 0379 67       		.sleb128 -25
 3702 037a 10       		.uleb128 0x10
 3703 037b 0D000000 		.4byte	.LASF70
 3704 037f 01       		.byte	0x1
 3705 0380 6801     		.2byte	0x168
 3706 0382 76000000 		.4byte	0x76
 3707 0386 02       		.uleb128 0x2
 3708 0387 91       		.byte	0x91
 3709 0388 64       		.sleb128 -28
 3710 0389 11       		.uleb128 0x11
 3711 038a 3A040000 		.4byte	.LASF52
 3712 038e 01       		.byte	0x1
 3713 038f 6A01     		.2byte	0x16a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 87


 3714 0391 99030000 		.4byte	0x399
 3715 0395 02       		.uleb128 0x2
 3716 0396 91       		.byte	0x91
 3717 0397 6C       		.sleb128 -20
 3718 0398 00       		.byte	0
 3719 0399 15       		.uleb128 0x15
 3720 039a 6B000000 		.4byte	0x6b
 3721 039e A9030000 		.4byte	0x3a9
 3722 03a2 16       		.uleb128 0x16
 3723 03a3 BC000000 		.4byte	0xbc
 3724 03a7 08       		.byte	0x8
 3725 03a8 00       		.byte	0
 3726 03a9 14       		.uleb128 0x14
 3727 03aa 5F010000 		.4byte	.LASF71
 3728 03ae 01       		.byte	0x1
 3729 03af 7901     		.2byte	0x179
 3730 03b1 00000000 		.4byte	.LFB42
 3731 03b5 98000000 		.4byte	.LFE42-.LFB42
 3732 03b9 01       		.uleb128 0x1
 3733 03ba 9C       		.byte	0x9c
 3734 03bb ED030000 		.4byte	0x3ed
 3735 03bf 10       		.uleb128 0x10
 3736 03c0 AF040000 		.4byte	.LASF69
 3737 03c4 01       		.byte	0x1
 3738 03c5 7901     		.2byte	0x179
 3739 03c7 6B000000 		.4byte	0x6b
 3740 03cb 02       		.uleb128 0x2
 3741 03cc 91       		.byte	0x91
 3742 03cd 67       		.sleb128 -25
 3743 03ce 10       		.uleb128 0x10
 3744 03cf 9F000000 		.4byte	.LASF72
 3745 03d3 01       		.byte	0x1
 3746 03d4 7901     		.2byte	0x179
 3747 03d6 76000000 		.4byte	0x76
 3748 03da 02       		.uleb128 0x2
 3749 03db 91       		.byte	0x91
 3750 03dc 64       		.sleb128 -28
 3751 03dd 11       		.uleb128 0x11
 3752 03de 3A040000 		.4byte	.LASF52
 3753 03e2 01       		.byte	0x1
 3754 03e3 7B01     		.2byte	0x17b
 3755 03e5 99030000 		.4byte	0x399
 3756 03e9 02       		.uleb128 0x2
 3757 03ea 91       		.byte	0x91
 3758 03eb 6C       		.sleb128 -20
 3759 03ec 00       		.byte	0
 3760 03ed 14       		.uleb128 0x14
 3761 03ee C9040000 		.4byte	.LASF73
 3762 03f2 01       		.byte	0x1
 3763 03f3 8B01     		.2byte	0x18b
 3764 03f5 00000000 		.4byte	.LFB43
 3765 03f9 98000000 		.4byte	.LFE43-.LFB43
 3766 03fd 01       		.uleb128 0x1
 3767 03fe 9C       		.byte	0x9c
 3768 03ff 31040000 		.4byte	0x431
 3769 0403 10       		.uleb128 0x10
 3770 0404 AF040000 		.4byte	.LASF69
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 88


 3771 0408 01       		.byte	0x1
 3772 0409 8B01     		.2byte	0x18b
 3773 040b 6B000000 		.4byte	0x6b
 3774 040f 02       		.uleb128 0x2
 3775 0410 91       		.byte	0x91
 3776 0411 67       		.sleb128 -25
 3777 0412 10       		.uleb128 0x10
 3778 0413 EF020000 		.4byte	.LASF74
 3779 0417 01       		.byte	0x1
 3780 0418 8B01     		.2byte	0x18b
 3781 041a 76000000 		.4byte	0x76
 3782 041e 02       		.uleb128 0x2
 3783 041f 91       		.byte	0x91
 3784 0420 64       		.sleb128 -28
 3785 0421 11       		.uleb128 0x11
 3786 0422 3A040000 		.4byte	.LASF52
 3787 0426 01       		.byte	0x1
 3788 0427 8D01     		.2byte	0x18d
 3789 0429 99030000 		.4byte	0x399
 3790 042d 02       		.uleb128 0x2
 3791 042e 91       		.byte	0x91
 3792 042f 6C       		.sleb128 -20
 3793 0430 00       		.byte	0
 3794 0431 17       		.uleb128 0x17
 3795 0432 BA010000 		.4byte	.LASF75
 3796 0436 01       		.byte	0x1
 3797 0437 9F01     		.2byte	0x19f
 3798 0439 00000000 		.4byte	.LFB44
 3799 043d 50010000 		.4byte	.LFE44-.LFB44
 3800 0441 01       		.uleb128 0x1
 3801 0442 9C       		.byte	0x9c
 3802 0443 73040000 		.4byte	0x473
 3803 0447 18       		.uleb128 0x18
 3804 0448 6900     		.ascii	"i\000"
 3805 044a 01       		.byte	0x1
 3806 044b AF01     		.2byte	0x1af
 3807 044d 6B000000 		.4byte	0x6b
 3808 0451 02       		.uleb128 0x2
 3809 0452 91       		.byte	0x91
 3810 0453 6F       		.sleb128 -17
 3811 0454 18       		.uleb128 0x18
 3812 0455 61766700 		.ascii	"avg\000"
 3813 0459 01       		.byte	0x1
 3814 045a B001     		.2byte	0x1b0
 3815 045c 76000000 		.4byte	0x76
 3816 0460 02       		.uleb128 0x2
 3817 0461 91       		.byte	0x91
 3818 0462 6A       		.sleb128 -22
 3819 0463 11       		.uleb128 0x11
 3820 0464 78050000 		.4byte	.LASF54
 3821 0468 01       		.byte	0x1
 3822 0469 B101     		.2byte	0x1b1
 3823 046b 76000000 		.4byte	0x76
 3824 046f 02       		.uleb128 0x2
 3825 0470 91       		.byte	0x91
 3826 0471 6C       		.sleb128 -20
 3827 0472 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 89


 3828 0473 17       		.uleb128 0x17
 3829 0474 2C010000 		.4byte	.LASF76
 3830 0478 01       		.byte	0x1
 3831 0479 0602     		.2byte	0x206
 3832 047b 00000000 		.4byte	.LFB45
 3833 047f 50010000 		.4byte	.LFE45-.LFB45
 3834 0483 01       		.uleb128 0x1
 3835 0484 9C       		.byte	0x9c
 3836 0485 B5040000 		.4byte	0x4b5
 3837 0489 18       		.uleb128 0x18
 3838 048a 6900     		.ascii	"i\000"
 3839 048c 01       		.byte	0x1
 3840 048d 1602     		.2byte	0x216
 3841 048f 6B000000 		.4byte	0x6b
 3842 0493 02       		.uleb128 0x2
 3843 0494 91       		.byte	0x91
 3844 0495 6F       		.sleb128 -17
 3845 0496 18       		.uleb128 0x18
 3846 0497 61766700 		.ascii	"avg\000"
 3847 049b 01       		.byte	0x1
 3848 049c 1702     		.2byte	0x217
 3849 049e 76000000 		.4byte	0x76
 3850 04a2 02       		.uleb128 0x2
 3851 04a3 91       		.byte	0x91
 3852 04a4 6A       		.sleb128 -22
 3853 04a5 11       		.uleb128 0x11
 3854 04a6 78050000 		.4byte	.LASF54
 3855 04aa 01       		.byte	0x1
 3856 04ab 1802     		.2byte	0x218
 3857 04ad 76000000 		.4byte	0x76
 3858 04b1 02       		.uleb128 0x2
 3859 04b2 91       		.byte	0x91
 3860 04b3 6C       		.sleb128 -20
 3861 04b4 00       		.byte	0
 3862 04b5 17       		.uleb128 0x17
 3863 04b6 10010000 		.4byte	.LASF77
 3864 04ba 01       		.byte	0x1
 3865 04bb 6F02     		.2byte	0x26f
 3866 04bd 00000000 		.4byte	.LFB46
 3867 04c1 14020000 		.4byte	.LFE46-.LFB46
 3868 04c5 01       		.uleb128 0x1
 3869 04c6 9C       		.byte	0x9c
 3870 04c7 06050000 		.4byte	0x506
 3871 04cb 18       		.uleb128 0x18
 3872 04cc 6900     		.ascii	"i\000"
 3873 04ce 01       		.byte	0x1
 3874 04cf 7502     		.2byte	0x275
 3875 04d1 6B000000 		.4byte	0x6b
 3876 04d5 02       		.uleb128 0x2
 3877 04d6 91       		.byte	0x91
 3878 04d7 6F       		.sleb128 -17
 3879 04d8 18       		.uleb128 0x18
 3880 04d9 61766700 		.ascii	"avg\000"
 3881 04dd 01       		.byte	0x1
 3882 04de 7602     		.2byte	0x276
 3883 04e0 76000000 		.4byte	0x76
 3884 04e4 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 90


 3885 04e5 91       		.byte	0x91
 3886 04e6 68       		.sleb128 -24
 3887 04e7 11       		.uleb128 0x11
 3888 04e8 78050000 		.4byte	.LASF54
 3889 04ec 01       		.byte	0x1
 3890 04ed 7702     		.2byte	0x277
 3891 04ef 76000000 		.4byte	0x76
 3892 04f3 02       		.uleb128 0x2
 3893 04f4 91       		.byte	0x91
 3894 04f5 6A       		.sleb128 -22
 3895 04f6 11       		.uleb128 0x11
 3896 04f7 07020000 		.4byte	.LASF65
 3897 04fb 01       		.byte	0x1
 3898 04fc 7A02     		.2byte	0x27a
 3899 04fe 76000000 		.4byte	0x76
 3900 0502 02       		.uleb128 0x2
 3901 0503 91       		.byte	0x91
 3902 0504 6C       		.sleb128 -20
 3903 0505 00       		.byte	0
 3904 0506 17       		.uleb128 0x17
 3905 0507 0B040000 		.4byte	.LASF78
 3906 050b 01       		.byte	0x1
 3907 050c F702     		.2byte	0x2f7
 3908 050e 00000000 		.4byte	.LFB47
 3909 0512 20020000 		.4byte	.LFE47-.LFB47
 3910 0516 01       		.uleb128 0x1
 3911 0517 9C       		.byte	0x9c
 3912 0518 57050000 		.4byte	0x557
 3913 051c 18       		.uleb128 0x18
 3914 051d 6900     		.ascii	"i\000"
 3915 051f 01       		.byte	0x1
 3916 0520 FD02     		.2byte	0x2fd
 3917 0522 6B000000 		.4byte	0x6b
 3918 0526 02       		.uleb128 0x2
 3919 0527 91       		.byte	0x91
 3920 0528 6F       		.sleb128 -17
 3921 0529 18       		.uleb128 0x18
 3922 052a 61766700 		.ascii	"avg\000"
 3923 052e 01       		.byte	0x1
 3924 052f FE02     		.2byte	0x2fe
 3925 0531 76000000 		.4byte	0x76
 3926 0535 02       		.uleb128 0x2
 3927 0536 91       		.byte	0x91
 3928 0537 68       		.sleb128 -24
 3929 0538 11       		.uleb128 0x11
 3930 0539 78050000 		.4byte	.LASF54
 3931 053d 01       		.byte	0x1
 3932 053e FF02     		.2byte	0x2ff
 3933 0540 76000000 		.4byte	0x76
 3934 0544 02       		.uleb128 0x2
 3935 0545 91       		.byte	0x91
 3936 0546 6A       		.sleb128 -22
 3937 0547 11       		.uleb128 0x11
 3938 0548 07020000 		.4byte	.LASF65
 3939 054c 01       		.byte	0x1
 3940 054d 0003     		.2byte	0x300
 3941 054f 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 91


 3942 0553 02       		.uleb128 0x2
 3943 0554 91       		.byte	0x91
 3944 0555 6C       		.sleb128 -20
 3945 0556 00       		.byte	0
 3946 0557 17       		.uleb128 0x17
 3947 0558 A9010000 		.4byte	.LASF79
 3948 055c 01       		.byte	0x1
 3949 055d 7E03     		.2byte	0x37e
 3950 055f 00000000 		.4byte	.LFB48
 3951 0563 4C010000 		.4byte	.LFE48-.LFB48
 3952 0567 01       		.uleb128 0x1
 3953 0568 9C       		.byte	0x9c
 3954 0569 99050000 		.4byte	0x599
 3955 056d 18       		.uleb128 0x18
 3956 056e 6900     		.ascii	"i\000"
 3957 0570 01       		.byte	0x1
 3958 0571 8303     		.2byte	0x383
 3959 0573 6B000000 		.4byte	0x6b
 3960 0577 02       		.uleb128 0x2
 3961 0578 91       		.byte	0x91
 3962 0579 6F       		.sleb128 -17
 3963 057a 18       		.uleb128 0x18
 3964 057b 61766700 		.ascii	"avg\000"
 3965 057f 01       		.byte	0x1
 3966 0580 8403     		.2byte	0x384
 3967 0582 76000000 		.4byte	0x76
 3968 0586 02       		.uleb128 0x2
 3969 0587 91       		.byte	0x91
 3970 0588 6A       		.sleb128 -22
 3971 0589 11       		.uleb128 0x11
 3972 058a 78050000 		.4byte	.LASF54
 3973 058e 01       		.byte	0x1
 3974 058f 8503     		.2byte	0x385
 3975 0591 76000000 		.4byte	0x76
 3976 0595 02       		.uleb128 0x2
 3977 0596 91       		.byte	0x91
 3978 0597 6C       		.sleb128 -20
 3979 0598 00       		.byte	0
 3980 0599 17       		.uleb128 0x17
 3981 059a 4A020000 		.4byte	.LASF80
 3982 059e 01       		.byte	0x1
 3983 059f D803     		.2byte	0x3d8
 3984 05a1 00000000 		.4byte	.LFB49
 3985 05a5 00010000 		.4byte	.LFE49-.LFB49
 3986 05a9 01       		.uleb128 0x1
 3987 05aa 9C       		.byte	0x9c
 3988 05ab C7050000 		.4byte	0x5c7
 3989 05af 19       		.uleb128 0x19
 3990 05b0 1E000000 		.4byte	.LBB2
 3991 05b4 2C000000 		.4byte	.LBE2-.LBB2
 3992 05b8 18       		.uleb128 0x18
 3993 05b9 6A00     		.ascii	"j\000"
 3994 05bb 01       		.byte	0x1
 3995 05bc DE03     		.2byte	0x3de
 3996 05be 6B000000 		.4byte	0x6b
 3997 05c2 02       		.uleb128 0x2
 3998 05c3 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 92


 3999 05c4 77       		.sleb128 -9
 4000 05c5 00       		.byte	0
 4001 05c6 00       		.byte	0
 4002 05c7 1A       		.uleb128 0x1a
 4003 05c8 A8030000 		.4byte	.LASF81
 4004 05cc 01       		.byte	0x1
 4005 05cd 1304     		.2byte	0x413
 4006 05cf 5D000000 		.4byte	0x5d
 4007 05d3 00000000 		.4byte	.LFB50
 4008 05d7 90000000 		.4byte	.LFE50-.LFB50
 4009 05db 01       		.uleb128 0x1
 4010 05dc 9C       		.byte	0x9c
 4011 05dd 25060000 		.4byte	0x625
 4012 05e1 1B       		.uleb128 0x1b
 4013 05e2 7400     		.ascii	"t\000"
 4014 05e4 01       		.byte	0x1
 4015 05e5 1604     		.2byte	0x416
 4016 05e7 C3000000 		.4byte	0xc3
 4017 05eb 1C       		.uleb128 0x1c
 4018 05ec 6B020000 		.4byte	.LASF82
 4019 05f0 01       		.byte	0x1
 4020 05f1 1704     		.2byte	0x417
 4021 05f3 6B000000 		.4byte	0x6b
 4022 05f7 11       		.uleb128 0x11
 4023 05f8 AD000000 		.4byte	.LASF83
 4024 05fc 01       		.byte	0x1
 4025 05fd 1804     		.2byte	0x418
 4026 05ff 5D000000 		.4byte	0x5d
 4027 0603 02       		.uleb128 0x2
 4028 0604 91       		.byte	0x91
 4029 0605 74       		.sleb128 -12
 4030 0606 11       		.uleb128 0x11
 4031 0607 C7030000 		.4byte	.LASF84
 4032 060b 01       		.byte	0x1
 4033 060c 1904     		.2byte	0x419
 4034 060e 97000000 		.4byte	0x97
 4035 0612 02       		.uleb128 0x2
 4036 0613 91       		.byte	0x91
 4037 0614 72       		.sleb128 -14
 4038 0615 11       		.uleb128 0x11
 4039 0616 8D050000 		.4byte	.LASF85
 4040 061a 01       		.byte	0x1
 4041 061b 1D04     		.2byte	0x41d
 4042 061d 5D000000 		.4byte	0x5d
 4043 0621 02       		.uleb128 0x2
 4044 0622 91       		.byte	0x91
 4045 0623 6C       		.sleb128 -20
 4046 0624 00       		.byte	0
 4047 0625 15       		.uleb128 0x15
 4048 0626 8C000000 		.4byte	0x8c
 4049 062a 35060000 		.4byte	0x635
 4050 062e 16       		.uleb128 0x16
 4051 062f BC000000 		.4byte	0xbc
 4052 0633 15       		.byte	0x15
 4053 0634 00       		.byte	0
 4054 0635 1D       		.uleb128 0x1d
 4055 0636 6D050000 		.4byte	.LASF86
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 93


 4056 063a 04       		.byte	0x4
 4057 063b 2D       		.byte	0x2d
 4058 063c 25060000 		.4byte	0x625
 4059 0640 05       		.uleb128 0x5
 4060 0641 03       		.byte	0x3
 4061 0642 00000000 		.4byte	data_array
 4062 0646 1D       		.uleb128 0x1d
 4063 0647 A6000000 		.4byte	.LASF87
 4064 064b 04       		.byte	0x4
 4065 064c 30       		.byte	0x30
 4066 064d 6B000000 		.4byte	0x6b
 4067 0651 05       		.uleb128 0x5
 4068 0652 03       		.byte	0x3
 4069 0653 00000000 		.4byte	wiznet
 4070 0657 15       		.uleb128 0x15
 4071 0658 8C000000 		.4byte	0x8c
 4072 065c 67060000 		.4byte	0x667
 4073 0660 16       		.uleb128 0x16
 4074 0661 BC000000 		.4byte	0xbc
 4075 0665 0D       		.byte	0xd
 4076 0666 00       		.byte	0
 4077 0667 1D       		.uleb128 0x1d
 4078 0668 80010000 		.4byte	.LASF88
 4079 066c 04       		.byte	0x4
 4080 066d 34       		.byte	0x34
 4081 066e 57060000 		.4byte	0x657
 4082 0672 05       		.uleb128 0x5
 4083 0673 03       		.byte	0x3
 4084 0674 00000000 		.4byte	test_array
 4085 0678 1D       		.uleb128 0x1d
 4086 0679 1D010000 		.4byte	.LASF89
 4087 067d 04       		.byte	0x4
 4088 067e 37       		.byte	0x37
 4089 067f 6B000000 		.4byte	0x6b
 4090 0683 05       		.uleb128 0x5
 4091 0684 03       		.byte	0x3
 4092 0685 00000000 		.4byte	elbw_arr_cspot
 4093 0689 15       		.uleb128 0x15
 4094 068a 76000000 		.4byte	0x76
 4095 068e 99060000 		.4byte	0x699
 4096 0692 16       		.uleb128 0x16
 4097 0693 BC000000 		.4byte	0xbc
 4098 0697 13       		.byte	0x13
 4099 0698 00       		.byte	0
 4100 0699 1D       		.uleb128 0x1d
 4101 069a D0030000 		.4byte	.LASF90
 4102 069e 04       		.byte	0x4
 4103 069f 38       		.byte	0x38
 4104 06a0 89060000 		.4byte	0x689
 4105 06a4 05       		.uleb128 0x5
 4106 06a5 03       		.byte	0x3
 4107 06a6 00000000 		.4byte	elbow_array
 4108 06aa 1D       		.uleb128 0x1d
 4109 06ab 74040000 		.4byte	.LASF91
 4110 06af 04       		.byte	0x4
 4111 06b0 3B       		.byte	0x3b
 4112 06b1 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 94


 4113 06b5 05       		.uleb128 0x5
 4114 06b6 03       		.byte	0x3
 4115 06b7 00000000 		.4byte	shldr_arr_cspot
 4116 06bb 1D       		.uleb128 0x1d
 4117 06bc F1030000 		.4byte	.LASF92
 4118 06c0 04       		.byte	0x4
 4119 06c1 3C       		.byte	0x3c
 4120 06c2 89060000 		.4byte	0x689
 4121 06c6 05       		.uleb128 0x5
 4122 06c7 03       		.byte	0x3
 4123 06c8 00000000 		.4byte	shoulder_array
 4124 06cc 1D       		.uleb128 0x1d
 4125 06cd 10020000 		.4byte	.LASF93
 4126 06d1 04       		.byte	0x4
 4127 06d2 3F       		.byte	0x3f
 4128 06d3 6B000000 		.4byte	0x6b
 4129 06d7 05       		.uleb128 0x5
 4130 06d8 03       		.byte	0x3
 4131 06d9 00000000 		.4byte	BA_arr_cspot
 4132 06dd 1D       		.uleb128 0x1d
 4133 06de E4030000 		.4byte	.LASF94
 4134 06e2 04       		.byte	0x4
 4135 06e3 40       		.byte	0x40
 4136 06e4 89060000 		.4byte	0x689
 4137 06e8 05       		.uleb128 0x5
 4138 06e9 03       		.byte	0x3
 4139 06ea 00000000 		.4byte	baseAz_array
 4140 06ee 1D       		.uleb128 0x1d
 4141 06ef 9C010000 		.4byte	.LASF95
 4142 06f3 04       		.byte	0x4
 4143 06f4 43       		.byte	0x43
 4144 06f5 6B000000 		.4byte	0x6b
 4145 06f9 05       		.uleb128 0x5
 4146 06fa 03       		.byte	0x3
 4147 06fb 00000000 		.4byte	WT_arr_cspot
 4148 06ff 1D       		.uleb128 0x1d
 4149 0700 38010000 		.4byte	.LASF96
 4150 0704 04       		.byte	0x4
 4151 0705 44       		.byte	0x44
 4152 0706 89060000 		.4byte	0x689
 4153 070a 05       		.uleb128 0x5
 4154 070b 03       		.byte	0x3
 4155 070c 00000000 		.4byte	WT_array
 4156 0710 1D       		.uleb128 0x1d
 4157 0711 00000000 		.4byte	.LASF97
 4158 0715 04       		.byte	0x4
 4159 0716 47       		.byte	0x47
 4160 0717 6B000000 		.4byte	0x6b
 4161 071b 05       		.uleb128 0x5
 4162 071c 03       		.byte	0x3
 4163 071d 00000000 		.4byte	WR_arr_cspot
 4164 0721 1D       		.uleb128 0x1d
 4165 0722 C5000000 		.4byte	.LASF98
 4166 0726 04       		.byte	0x4
 4167 0727 48       		.byte	0x48
 4168 0728 89060000 		.4byte	0x689
 4169 072c 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 95


 4170 072d 03       		.byte	0x3
 4171 072e 00000000 		.4byte	WR_array
 4172 0732 1D       		.uleb128 0x1d
 4173 0733 C1040000 		.4byte	.LASF99
 4174 0737 04       		.byte	0x4
 4175 0738 4B       		.byte	0x4b
 4176 0739 6B000000 		.4byte	0x6b
 4177 073d 05       		.uleb128 0x5
 4178 073e 03       		.byte	0x3
 4179 073f 00000000 		.4byte	WT_FLAG
 4180 0743 1D       		.uleb128 0x1d
 4181 0744 1D020000 		.4byte	.LASF100
 4182 0748 04       		.byte	0x4
 4183 0749 4C       		.byte	0x4c
 4184 074a 6B000000 		.4byte	0x6b
 4185 074e 05       		.uleb128 0x5
 4186 074f 03       		.byte	0x3
 4187 0750 00000000 		.4byte	WR_FLAG
 4188 0754 1D       		.uleb128 0x1d
 4189 0755 5D040000 		.4byte	.LASF101
 4190 0759 04       		.byte	0x4
 4191 075a 4D       		.byte	0x4d
 4192 075b 6B000000 		.4byte	0x6b
 4193 075f 05       		.uleb128 0x5
 4194 0760 03       		.byte	0x3
 4195 0761 00000000 		.4byte	ELBOW_FLAG
 4196 0765 1D       		.uleb128 0x1d
 4197 0766 2A000000 		.4byte	.LASF102
 4198 076a 04       		.byte	0x4
 4199 076b 4E       		.byte	0x4e
 4200 076c 6B000000 		.4byte	0x6b
 4201 0770 05       		.uleb128 0x5
 4202 0771 03       		.byte	0x3
 4203 0772 00000000 		.4byte	SHOULDER_FLAG
 4204 0776 1D       		.uleb128 0x1d
 4205 0777 D6000000 		.4byte	.LASF103
 4206 077b 04       		.byte	0x4
 4207 077c 4F       		.byte	0x4f
 4208 077d 6B000000 		.4byte	0x6b
 4209 0781 05       		.uleb128 0x5
 4210 0782 03       		.byte	0x3
 4211 0783 00000000 		.4byte	BA_FLAG
 4212 0787 1D       		.uleb128 0x1d
 4213 0788 4D010000 		.4byte	.LASF104
 4214 078c 04       		.byte	0x4
 4215 078d 53       		.byte	0x53
 4216 078e B7000000 		.4byte	0xb7
 4217 0792 05       		.uleb128 0x5
 4218 0793 03       		.byte	0x3
 4219 0794 00000000 		.4byte	timerFlag
 4220 0798 1E       		.uleb128 0x1e
 4221 0799 00010000 		.4byte	.LASF105
 4222 079d 01       		.byte	0x1
 4223 079e 9D01     		.2byte	0x19d
 4224 07a0 CE000000 		.4byte	0xce
 4225 07a4 05       		.uleb128 0x5
 4226 07a5 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 96


 4227 07a6 00000000 		.4byte	wristTilt_state
 4228 07aa 1E       		.uleb128 0x1e
 4229 07ab 4B040000 		.4byte	.LASF106
 4230 07af 01       		.byte	0x1
 4231 07b0 0402     		.2byte	0x204
 4232 07b2 FA000000 		.4byte	0xfa
 4233 07b6 05       		.uleb128 0x5
 4234 07b7 03       		.byte	0x3
 4235 07b8 00000000 		.4byte	wristRotate_state
 4236 07bc 1E       		.uleb128 0x1e
 4237 07bd 8A040000 		.4byte	.LASF107
 4238 07c1 01       		.byte	0x1
 4239 07c2 6E02     		.2byte	0x26e
 4240 07c4 26010000 		.4byte	0x126
 4241 07c8 05       		.uleb128 0x5
 4242 07c9 03       		.byte	0x3
 4243 07ca 00000000 		.4byte	elbow_state
 4244 07ce 1E       		.uleb128 0x1e
 4245 07cf 73020000 		.4byte	.LASF108
 4246 07d3 01       		.byte	0x1
 4247 07d4 F602     		.2byte	0x2f6
 4248 07d6 4C010000 		.4byte	0x14c
 4249 07da 05       		.uleb128 0x5
 4250 07db 03       		.byte	0x3
 4251 07dc 00000000 		.4byte	shoulder_state
 4252 07e0 1E       		.uleb128 0x1e
 4253 07e1 EE000000 		.4byte	.LASF109
 4254 07e5 01       		.byte	0x1
 4255 07e6 7D03     		.2byte	0x37d
 4256 07e8 72010000 		.4byte	0x172
 4257 07ec 05       		.uleb128 0x5
 4258 07ed 03       		.byte	0x3
 4259 07ee 00000000 		.4byte	baseAzimuth_state
 4260 07f2 00       		.byte	0
 4261              		.section	.debug_abbrev,"",%progbits
 4262              	.Ldebug_abbrev0:
 4263 0000 01       		.uleb128 0x1
 4264 0001 11       		.uleb128 0x11
 4265 0002 01       		.byte	0x1
 4266 0003 25       		.uleb128 0x25
 4267 0004 0E       		.uleb128 0xe
 4268 0005 13       		.uleb128 0x13
 4269 0006 0B       		.uleb128 0xb
 4270 0007 03       		.uleb128 0x3
 4271 0008 0E       		.uleb128 0xe
 4272 0009 1B       		.uleb128 0x1b
 4273 000a 0E       		.uleb128 0xe
 4274 000b 55       		.uleb128 0x55
 4275 000c 17       		.uleb128 0x17
 4276 000d 11       		.uleb128 0x11
 4277 000e 01       		.uleb128 0x1
 4278 000f 10       		.uleb128 0x10
 4279 0010 17       		.uleb128 0x17
 4280 0011 00       		.byte	0
 4281 0012 00       		.byte	0
 4282 0013 02       		.uleb128 0x2
 4283 0014 24       		.uleb128 0x24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 97


 4284 0015 00       		.byte	0
 4285 0016 0B       		.uleb128 0xb
 4286 0017 0B       		.uleb128 0xb
 4287 0018 3E       		.uleb128 0x3e
 4288 0019 0B       		.uleb128 0xb
 4289 001a 03       		.uleb128 0x3
 4290 001b 0E       		.uleb128 0xe
 4291 001c 00       		.byte	0
 4292 001d 00       		.byte	0
 4293 001e 03       		.uleb128 0x3
 4294 001f 24       		.uleb128 0x24
 4295 0020 00       		.byte	0
 4296 0021 0B       		.uleb128 0xb
 4297 0022 0B       		.uleb128 0xb
 4298 0023 3E       		.uleb128 0x3e
 4299 0024 0B       		.uleb128 0xb
 4300 0025 03       		.uleb128 0x3
 4301 0026 08       		.uleb128 0x8
 4302 0027 00       		.byte	0
 4303 0028 00       		.byte	0
 4304 0029 04       		.uleb128 0x4
 4305 002a 16       		.uleb128 0x16
 4306 002b 00       		.byte	0
 4307 002c 03       		.uleb128 0x3
 4308 002d 0E       		.uleb128 0xe
 4309 002e 3A       		.uleb128 0x3a
 4310 002f 0B       		.uleb128 0xb
 4311 0030 3B       		.uleb128 0x3b
 4312 0031 0B       		.uleb128 0xb
 4313 0032 49       		.uleb128 0x49
 4314 0033 13       		.uleb128 0x13
 4315 0034 00       		.byte	0
 4316 0035 00       		.byte	0
 4317 0036 05       		.uleb128 0x5
 4318 0037 35       		.uleb128 0x35
 4319 0038 00       		.byte	0
 4320 0039 49       		.uleb128 0x49
 4321 003a 13       		.uleb128 0x13
 4322 003b 00       		.byte	0
 4323 003c 00       		.byte	0
 4324 003d 06       		.uleb128 0x6
 4325 003e 04       		.uleb128 0x4
 4326 003f 01       		.byte	0x1
 4327 0040 03       		.uleb128 0x3
 4328 0041 0E       		.uleb128 0xe
 4329 0042 0B       		.uleb128 0xb
 4330 0043 0B       		.uleb128 0xb
 4331 0044 3A       		.uleb128 0x3a
 4332 0045 0B       		.uleb128 0xb
 4333 0046 3B       		.uleb128 0x3b
 4334 0047 05       		.uleb128 0x5
 4335 0048 01       		.uleb128 0x1
 4336 0049 13       		.uleb128 0x13
 4337 004a 00       		.byte	0
 4338 004b 00       		.byte	0
 4339 004c 07       		.uleb128 0x7
 4340 004d 28       		.uleb128 0x28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 98


 4341 004e 00       		.byte	0
 4342 004f 03       		.uleb128 0x3
 4343 0050 0E       		.uleb128 0xe
 4344 0051 1C       		.uleb128 0x1c
 4345 0052 0D       		.uleb128 0xd
 4346 0053 00       		.byte	0
 4347 0054 00       		.byte	0
 4348 0055 08       		.uleb128 0x8
 4349 0056 2E       		.uleb128 0x2e
 4350 0057 01       		.byte	0x1
 4351 0058 3F       		.uleb128 0x3f
 4352 0059 19       		.uleb128 0x19
 4353 005a 03       		.uleb128 0x3
 4354 005b 0E       		.uleb128 0xe
 4355 005c 3A       		.uleb128 0x3a
 4356 005d 0B       		.uleb128 0xb
 4357 005e 3B       		.uleb128 0x3b
 4358 005f 0B       		.uleb128 0xb
 4359 0060 27       		.uleb128 0x27
 4360 0061 19       		.uleb128 0x19
 4361 0062 11       		.uleb128 0x11
 4362 0063 01       		.uleb128 0x1
 4363 0064 12       		.uleb128 0x12
 4364 0065 06       		.uleb128 0x6
 4365 0066 40       		.uleb128 0x40
 4366 0067 18       		.uleb128 0x18
 4367 0068 9642     		.uleb128 0x2116
 4368 006a 19       		.uleb128 0x19
 4369 006b 01       		.uleb128 0x1
 4370 006c 13       		.uleb128 0x13
 4371 006d 00       		.byte	0
 4372 006e 00       		.byte	0
 4373 006f 09       		.uleb128 0x9
 4374 0070 34       		.uleb128 0x34
 4375 0071 00       		.byte	0
 4376 0072 03       		.uleb128 0x3
 4377 0073 0E       		.uleb128 0xe
 4378 0074 3A       		.uleb128 0x3a
 4379 0075 0B       		.uleb128 0xb
 4380 0076 3B       		.uleb128 0x3b
 4381 0077 0B       		.uleb128 0xb
 4382 0078 49       		.uleb128 0x49
 4383 0079 13       		.uleb128 0x13
 4384 007a 02       		.uleb128 0x2
 4385 007b 18       		.uleb128 0x18
 4386 007c 00       		.byte	0
 4387 007d 00       		.byte	0
 4388 007e 0A       		.uleb128 0xa
 4389 007f 2E       		.uleb128 0x2e
 4390 0080 01       		.byte	0x1
 4391 0081 3F       		.uleb128 0x3f
 4392 0082 19       		.uleb128 0x19
 4393 0083 03       		.uleb128 0x3
 4394 0084 0E       		.uleb128 0xe
 4395 0085 3A       		.uleb128 0x3a
 4396 0086 0B       		.uleb128 0xb
 4397 0087 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 99


 4398 0088 0B       		.uleb128 0xb
 4399 0089 27       		.uleb128 0x27
 4400 008a 19       		.uleb128 0x19
 4401 008b 49       		.uleb128 0x49
 4402 008c 13       		.uleb128 0x13
 4403 008d 11       		.uleb128 0x11
 4404 008e 01       		.uleb128 0x1
 4405 008f 12       		.uleb128 0x12
 4406 0090 06       		.uleb128 0x6
 4407 0091 40       		.uleb128 0x40
 4408 0092 18       		.uleb128 0x18
 4409 0093 9642     		.uleb128 0x2116
 4410 0095 19       		.uleb128 0x19
 4411 0096 01       		.uleb128 0x1
 4412 0097 13       		.uleb128 0x13
 4413 0098 00       		.byte	0
 4414 0099 00       		.byte	0
 4415 009a 0B       		.uleb128 0xb
 4416 009b 05       		.uleb128 0x5
 4417 009c 00       		.byte	0
 4418 009d 03       		.uleb128 0x3
 4419 009e 0E       		.uleb128 0xe
 4420 009f 3A       		.uleb128 0x3a
 4421 00a0 0B       		.uleb128 0xb
 4422 00a1 3B       		.uleb128 0x3b
 4423 00a2 0B       		.uleb128 0xb
 4424 00a3 49       		.uleb128 0x49
 4425 00a4 13       		.uleb128 0x13
 4426 00a5 02       		.uleb128 0x2
 4427 00a6 18       		.uleb128 0x18
 4428 00a7 00       		.byte	0
 4429 00a8 00       		.byte	0
 4430 00a9 0C       		.uleb128 0xc
 4431 00aa 34       		.uleb128 0x34
 4432 00ab 00       		.byte	0
 4433 00ac 03       		.uleb128 0x3
 4434 00ad 08       		.uleb128 0x8
 4435 00ae 3A       		.uleb128 0x3a
 4436 00af 0B       		.uleb128 0xb
 4437 00b0 3B       		.uleb128 0x3b
 4438 00b1 0B       		.uleb128 0xb
 4439 00b2 49       		.uleb128 0x49
 4440 00b3 13       		.uleb128 0x13
 4441 00b4 02       		.uleb128 0x2
 4442 00b5 18       		.uleb128 0x18
 4443 00b6 00       		.byte	0
 4444 00b7 00       		.byte	0
 4445 00b8 0D       		.uleb128 0xd
 4446 00b9 0F       		.uleb128 0xf
 4447 00ba 00       		.byte	0
 4448 00bb 0B       		.uleb128 0xb
 4449 00bc 0B       		.uleb128 0xb
 4450 00bd 49       		.uleb128 0x49
 4451 00be 13       		.uleb128 0x13
 4452 00bf 00       		.byte	0
 4453 00c0 00       		.byte	0
 4454 00c1 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 100


 4455 00c2 2E       		.uleb128 0x2e
 4456 00c3 01       		.byte	0x1
 4457 00c4 3F       		.uleb128 0x3f
 4458 00c5 19       		.uleb128 0x19
 4459 00c6 03       		.uleb128 0x3
 4460 00c7 0E       		.uleb128 0xe
 4461 00c8 3A       		.uleb128 0x3a
 4462 00c9 0B       		.uleb128 0xb
 4463 00ca 3B       		.uleb128 0x3b
 4464 00cb 0B       		.uleb128 0xb
 4465 00cc 27       		.uleb128 0x27
 4466 00cd 19       		.uleb128 0x19
 4467 00ce 11       		.uleb128 0x11
 4468 00cf 01       		.uleb128 0x1
 4469 00d0 12       		.uleb128 0x12
 4470 00d1 06       		.uleb128 0x6
 4471 00d2 40       		.uleb128 0x40
 4472 00d3 18       		.uleb128 0x18
 4473 00d4 9742     		.uleb128 0x2117
 4474 00d6 19       		.uleb128 0x19
 4475 00d7 01       		.uleb128 0x1
 4476 00d8 13       		.uleb128 0x13
 4477 00d9 00       		.byte	0
 4478 00da 00       		.byte	0
 4479 00db 0F       		.uleb128 0xf
 4480 00dc 2E       		.uleb128 0x2e
 4481 00dd 01       		.byte	0x1
 4482 00de 3F       		.uleb128 0x3f
 4483 00df 19       		.uleb128 0x19
 4484 00e0 03       		.uleb128 0x3
 4485 00e1 0E       		.uleb128 0xe
 4486 00e2 3A       		.uleb128 0x3a
 4487 00e3 0B       		.uleb128 0xb
 4488 00e4 3B       		.uleb128 0x3b
 4489 00e5 05       		.uleb128 0x5
 4490 00e6 27       		.uleb128 0x27
 4491 00e7 19       		.uleb128 0x19
 4492 00e8 49       		.uleb128 0x49
 4493 00e9 13       		.uleb128 0x13
 4494 00ea 11       		.uleb128 0x11
 4495 00eb 01       		.uleb128 0x1
 4496 00ec 12       		.uleb128 0x12
 4497 00ed 06       		.uleb128 0x6
 4498 00ee 40       		.uleb128 0x40
 4499 00ef 18       		.uleb128 0x18
 4500 00f0 9742     		.uleb128 0x2117
 4501 00f2 19       		.uleb128 0x19
 4502 00f3 01       		.uleb128 0x1
 4503 00f4 13       		.uleb128 0x13
 4504 00f5 00       		.byte	0
 4505 00f6 00       		.byte	0
 4506 00f7 10       		.uleb128 0x10
 4507 00f8 05       		.uleb128 0x5
 4508 00f9 00       		.byte	0
 4509 00fa 03       		.uleb128 0x3
 4510 00fb 0E       		.uleb128 0xe
 4511 00fc 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 101


 4512 00fd 0B       		.uleb128 0xb
 4513 00fe 3B       		.uleb128 0x3b
 4514 00ff 05       		.uleb128 0x5
 4515 0100 49       		.uleb128 0x49
 4516 0101 13       		.uleb128 0x13
 4517 0102 02       		.uleb128 0x2
 4518 0103 18       		.uleb128 0x18
 4519 0104 00       		.byte	0
 4520 0105 00       		.byte	0
 4521 0106 11       		.uleb128 0x11
 4522 0107 34       		.uleb128 0x34
 4523 0108 00       		.byte	0
 4524 0109 03       		.uleb128 0x3
 4525 010a 0E       		.uleb128 0xe
 4526 010b 3A       		.uleb128 0x3a
 4527 010c 0B       		.uleb128 0xb
 4528 010d 3B       		.uleb128 0x3b
 4529 010e 05       		.uleb128 0x5
 4530 010f 49       		.uleb128 0x49
 4531 0110 13       		.uleb128 0x13
 4532 0111 02       		.uleb128 0x2
 4533 0112 18       		.uleb128 0x18
 4534 0113 00       		.byte	0
 4535 0114 00       		.byte	0
 4536 0115 12       		.uleb128 0x12
 4537 0116 2E       		.uleb128 0x2e
 4538 0117 00       		.byte	0
 4539 0118 3F       		.uleb128 0x3f
 4540 0119 19       		.uleb128 0x19
 4541 011a 03       		.uleb128 0x3
 4542 011b 0E       		.uleb128 0xe
 4543 011c 3A       		.uleb128 0x3a
 4544 011d 0B       		.uleb128 0xb
 4545 011e 3B       		.uleb128 0x3b
 4546 011f 05       		.uleb128 0x5
 4547 0120 11       		.uleb128 0x11
 4548 0121 01       		.uleb128 0x1
 4549 0122 12       		.uleb128 0x12
 4550 0123 06       		.uleb128 0x6
 4551 0124 40       		.uleb128 0x40
 4552 0125 18       		.uleb128 0x18
 4553 0126 9742     		.uleb128 0x2117
 4554 0128 19       		.uleb128 0x19
 4555 0129 00       		.byte	0
 4556 012a 00       		.byte	0
 4557 012b 13       		.uleb128 0x13
 4558 012c 2E       		.uleb128 0x2e
 4559 012d 00       		.byte	0
 4560 012e 3F       		.uleb128 0x3f
 4561 012f 19       		.uleb128 0x19
 4562 0130 03       		.uleb128 0x3
 4563 0131 0E       		.uleb128 0xe
 4564 0132 3A       		.uleb128 0x3a
 4565 0133 0B       		.uleb128 0xb
 4566 0134 3B       		.uleb128 0x3b
 4567 0135 05       		.uleb128 0x5
 4568 0136 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 102


 4569 0137 01       		.uleb128 0x1
 4570 0138 12       		.uleb128 0x12
 4571 0139 06       		.uleb128 0x6
 4572 013a 40       		.uleb128 0x40
 4573 013b 18       		.uleb128 0x18
 4574 013c 9642     		.uleb128 0x2116
 4575 013e 19       		.uleb128 0x19
 4576 013f 00       		.byte	0
 4577 0140 00       		.byte	0
 4578 0141 14       		.uleb128 0x14
 4579 0142 2E       		.uleb128 0x2e
 4580 0143 01       		.byte	0x1
 4581 0144 3F       		.uleb128 0x3f
 4582 0145 19       		.uleb128 0x19
 4583 0146 03       		.uleb128 0x3
 4584 0147 0E       		.uleb128 0xe
 4585 0148 3A       		.uleb128 0x3a
 4586 0149 0B       		.uleb128 0xb
 4587 014a 3B       		.uleb128 0x3b
 4588 014b 05       		.uleb128 0x5
 4589 014c 27       		.uleb128 0x27
 4590 014d 19       		.uleb128 0x19
 4591 014e 11       		.uleb128 0x11
 4592 014f 01       		.uleb128 0x1
 4593 0150 12       		.uleb128 0x12
 4594 0151 06       		.uleb128 0x6
 4595 0152 40       		.uleb128 0x40
 4596 0153 18       		.uleb128 0x18
 4597 0154 9642     		.uleb128 0x2116
 4598 0156 19       		.uleb128 0x19
 4599 0157 01       		.uleb128 0x1
 4600 0158 13       		.uleb128 0x13
 4601 0159 00       		.byte	0
 4602 015a 00       		.byte	0
 4603 015b 15       		.uleb128 0x15
 4604 015c 01       		.uleb128 0x1
 4605 015d 01       		.byte	0x1
 4606 015e 49       		.uleb128 0x49
 4607 015f 13       		.uleb128 0x13
 4608 0160 01       		.uleb128 0x1
 4609 0161 13       		.uleb128 0x13
 4610 0162 00       		.byte	0
 4611 0163 00       		.byte	0
 4612 0164 16       		.uleb128 0x16
 4613 0165 21       		.uleb128 0x21
 4614 0166 00       		.byte	0
 4615 0167 49       		.uleb128 0x49
 4616 0168 13       		.uleb128 0x13
 4617 0169 2F       		.uleb128 0x2f
 4618 016a 0B       		.uleb128 0xb
 4619 016b 00       		.byte	0
 4620 016c 00       		.byte	0
 4621 016d 17       		.uleb128 0x17
 4622 016e 2E       		.uleb128 0x2e
 4623 016f 01       		.byte	0x1
 4624 0170 3F       		.uleb128 0x3f
 4625 0171 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 103


 4626 0172 03       		.uleb128 0x3
 4627 0173 0E       		.uleb128 0xe
 4628 0174 3A       		.uleb128 0x3a
 4629 0175 0B       		.uleb128 0xb
 4630 0176 3B       		.uleb128 0x3b
 4631 0177 05       		.uleb128 0x5
 4632 0178 11       		.uleb128 0x11
 4633 0179 01       		.uleb128 0x1
 4634 017a 12       		.uleb128 0x12
 4635 017b 06       		.uleb128 0x6
 4636 017c 40       		.uleb128 0x40
 4637 017d 18       		.uleb128 0x18
 4638 017e 9642     		.uleb128 0x2116
 4639 0180 19       		.uleb128 0x19
 4640 0181 01       		.uleb128 0x1
 4641 0182 13       		.uleb128 0x13
 4642 0183 00       		.byte	0
 4643 0184 00       		.byte	0
 4644 0185 18       		.uleb128 0x18
 4645 0186 34       		.uleb128 0x34
 4646 0187 00       		.byte	0
 4647 0188 03       		.uleb128 0x3
 4648 0189 08       		.uleb128 0x8
 4649 018a 3A       		.uleb128 0x3a
 4650 018b 0B       		.uleb128 0xb
 4651 018c 3B       		.uleb128 0x3b
 4652 018d 05       		.uleb128 0x5
 4653 018e 49       		.uleb128 0x49
 4654 018f 13       		.uleb128 0x13
 4655 0190 02       		.uleb128 0x2
 4656 0191 18       		.uleb128 0x18
 4657 0192 00       		.byte	0
 4658 0193 00       		.byte	0
 4659 0194 19       		.uleb128 0x19
 4660 0195 0B       		.uleb128 0xb
 4661 0196 01       		.byte	0x1
 4662 0197 11       		.uleb128 0x11
 4663 0198 01       		.uleb128 0x1
 4664 0199 12       		.uleb128 0x12
 4665 019a 06       		.uleb128 0x6
 4666 019b 00       		.byte	0
 4667 019c 00       		.byte	0
 4668 019d 1A       		.uleb128 0x1a
 4669 019e 2E       		.uleb128 0x2e
 4670 019f 01       		.byte	0x1
 4671 01a0 3F       		.uleb128 0x3f
 4672 01a1 19       		.uleb128 0x19
 4673 01a2 03       		.uleb128 0x3
 4674 01a3 0E       		.uleb128 0xe
 4675 01a4 3A       		.uleb128 0x3a
 4676 01a5 0B       		.uleb128 0xb
 4677 01a6 3B       		.uleb128 0x3b
 4678 01a7 05       		.uleb128 0x5
 4679 01a8 49       		.uleb128 0x49
 4680 01a9 13       		.uleb128 0x13
 4681 01aa 11       		.uleb128 0x11
 4682 01ab 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 104


 4683 01ac 12       		.uleb128 0x12
 4684 01ad 06       		.uleb128 0x6
 4685 01ae 40       		.uleb128 0x40
 4686 01af 18       		.uleb128 0x18
 4687 01b0 9642     		.uleb128 0x2116
 4688 01b2 19       		.uleb128 0x19
 4689 01b3 01       		.uleb128 0x1
 4690 01b4 13       		.uleb128 0x13
 4691 01b5 00       		.byte	0
 4692 01b6 00       		.byte	0
 4693 01b7 1B       		.uleb128 0x1b
 4694 01b8 34       		.uleb128 0x34
 4695 01b9 00       		.byte	0
 4696 01ba 03       		.uleb128 0x3
 4697 01bb 08       		.uleb128 0x8
 4698 01bc 3A       		.uleb128 0x3a
 4699 01bd 0B       		.uleb128 0xb
 4700 01be 3B       		.uleb128 0x3b
 4701 01bf 05       		.uleb128 0x5
 4702 01c0 49       		.uleb128 0x49
 4703 01c1 13       		.uleb128 0x13
 4704 01c2 00       		.byte	0
 4705 01c3 00       		.byte	0
 4706 01c4 1C       		.uleb128 0x1c
 4707 01c5 34       		.uleb128 0x34
 4708 01c6 00       		.byte	0
 4709 01c7 03       		.uleb128 0x3
 4710 01c8 0E       		.uleb128 0xe
 4711 01c9 3A       		.uleb128 0x3a
 4712 01ca 0B       		.uleb128 0xb
 4713 01cb 3B       		.uleb128 0x3b
 4714 01cc 05       		.uleb128 0x5
 4715 01cd 49       		.uleb128 0x49
 4716 01ce 13       		.uleb128 0x13
 4717 01cf 00       		.byte	0
 4718 01d0 00       		.byte	0
 4719 01d1 1D       		.uleb128 0x1d
 4720 01d2 34       		.uleb128 0x34
 4721 01d3 00       		.byte	0
 4722 01d4 03       		.uleb128 0x3
 4723 01d5 0E       		.uleb128 0xe
 4724 01d6 3A       		.uleb128 0x3a
 4725 01d7 0B       		.uleb128 0xb
 4726 01d8 3B       		.uleb128 0x3b
 4727 01d9 0B       		.uleb128 0xb
 4728 01da 49       		.uleb128 0x49
 4729 01db 13       		.uleb128 0x13
 4730 01dc 3F       		.uleb128 0x3f
 4731 01dd 19       		.uleb128 0x19
 4732 01de 02       		.uleb128 0x2
 4733 01df 18       		.uleb128 0x18
 4734 01e0 00       		.byte	0
 4735 01e1 00       		.byte	0
 4736 01e2 1E       		.uleb128 0x1e
 4737 01e3 34       		.uleb128 0x34
 4738 01e4 00       		.byte	0
 4739 01e5 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 105


 4740 01e6 0E       		.uleb128 0xe
 4741 01e7 3A       		.uleb128 0x3a
 4742 01e8 0B       		.uleb128 0xb
 4743 01e9 3B       		.uleb128 0x3b
 4744 01ea 05       		.uleb128 0x5
 4745 01eb 49       		.uleb128 0x49
 4746 01ec 13       		.uleb128 0x13
 4747 01ed 3F       		.uleb128 0x3f
 4748 01ee 19       		.uleb128 0x19
 4749 01ef 02       		.uleb128 0x2
 4750 01f0 18       		.uleb128 0x18
 4751 01f1 00       		.byte	0
 4752 01f2 00       		.byte	0
 4753 01f3 00       		.byte	0
 4754              		.section	.debug_aranges,"",%progbits
 4755 0000 9C000000 		.4byte	0x9c
 4756 0004 0200     		.2byte	0x2
 4757 0006 00000000 		.4byte	.Ldebug_info0
 4758 000a 04       		.byte	0x4
 4759 000b 00       		.byte	0
 4760 000c 0000     		.2byte	0
 4761 000e 0000     		.2byte	0
 4762 0010 00000000 		.4byte	.LFB34
 4763 0014 28000000 		.4byte	.LFE34-.LFB34
 4764 0018 00000000 		.4byte	.LFB35
 4765 001c 78000000 		.4byte	.LFE35-.LFB35
 4766 0020 00000000 		.4byte	.LFB36
 4767 0024 84050000 		.4byte	.LFE36-.LFB36
 4768 0028 00000000 		.4byte	.LFB37
 4769 002c 84000000 		.4byte	.LFE37-.LFB37
 4770 0030 00000000 		.4byte	.LFB38
 4771 0034 20000000 		.4byte	.LFE38-.LFB38
 4772 0038 00000000 		.4byte	.LFB39
 4773 003c 08000000 		.4byte	.LFE39-.LFB39
 4774 0040 00000000 		.4byte	.LFB40
 4775 0044 18000000 		.4byte	.LFE40-.LFB40
 4776 0048 00000000 		.4byte	.LFB41
 4777 004c 98000000 		.4byte	.LFE41-.LFB41
 4778 0050 00000000 		.4byte	.LFB42
 4779 0054 98000000 		.4byte	.LFE42-.LFB42
 4780 0058 00000000 		.4byte	.LFB43
 4781 005c 98000000 		.4byte	.LFE43-.LFB43
 4782 0060 00000000 		.4byte	.LFB44
 4783 0064 50010000 		.4byte	.LFE44-.LFB44
 4784 0068 00000000 		.4byte	.LFB45
 4785 006c 50010000 		.4byte	.LFE45-.LFB45
 4786 0070 00000000 		.4byte	.LFB46
 4787 0074 14020000 		.4byte	.LFE46-.LFB46
 4788 0078 00000000 		.4byte	.LFB47
 4789 007c 20020000 		.4byte	.LFE47-.LFB47
 4790 0080 00000000 		.4byte	.LFB48
 4791 0084 4C010000 		.4byte	.LFE48-.LFB48
 4792 0088 00000000 		.4byte	.LFB49
 4793 008c 00010000 		.4byte	.LFE49-.LFB49
 4794 0090 00000000 		.4byte	.LFB50
 4795 0094 90000000 		.4byte	.LFE50-.LFB50
 4796 0098 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 106


 4797 009c 00000000 		.4byte	0
 4798              		.section	.debug_ranges,"",%progbits
 4799              	.Ldebug_ranges0:
 4800 0000 00000000 		.4byte	.LFB34
 4801 0004 28000000 		.4byte	.LFE34
 4802 0008 00000000 		.4byte	.LFB35
 4803 000c 78000000 		.4byte	.LFE35
 4804 0010 00000000 		.4byte	.LFB36
 4805 0014 84050000 		.4byte	.LFE36
 4806 0018 00000000 		.4byte	.LFB37
 4807 001c 84000000 		.4byte	.LFE37
 4808 0020 00000000 		.4byte	.LFB38
 4809 0024 20000000 		.4byte	.LFE38
 4810 0028 00000000 		.4byte	.LFB39
 4811 002c 08000000 		.4byte	.LFE39
 4812 0030 00000000 		.4byte	.LFB40
 4813 0034 18000000 		.4byte	.LFE40
 4814 0038 00000000 		.4byte	.LFB41
 4815 003c 98000000 		.4byte	.LFE41
 4816 0040 00000000 		.4byte	.LFB42
 4817 0044 98000000 		.4byte	.LFE42
 4818 0048 00000000 		.4byte	.LFB43
 4819 004c 98000000 		.4byte	.LFE43
 4820 0050 00000000 		.4byte	.LFB44
 4821 0054 50010000 		.4byte	.LFE44
 4822 0058 00000000 		.4byte	.LFB45
 4823 005c 50010000 		.4byte	.LFE45
 4824 0060 00000000 		.4byte	.LFB46
 4825 0064 14020000 		.4byte	.LFE46
 4826 0068 00000000 		.4byte	.LFB47
 4827 006c 20020000 		.4byte	.LFE47
 4828 0070 00000000 		.4byte	.LFB48
 4829 0074 4C010000 		.4byte	.LFE48
 4830 0078 00000000 		.4byte	.LFB49
 4831 007c 00010000 		.4byte	.LFE49
 4832 0080 00000000 		.4byte	.LFB50
 4833 0084 90000000 		.4byte	.LFE50
 4834 0088 00000000 		.4byte	0
 4835 008c 00000000 		.4byte	0
 4836              		.section	.debug_line,"",%progbits
 4837              	.Ldebug_line0:
 4838 0000 EB040000 		.section	.debug_str,"MS",%progbits,1
 4838      0200CB00 
 4838      00000201 
 4838      FB0E0D00 
 4838      01010101 
 4839              	.LASF97:
 4840 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 4840      72725F63 
 4840      73706F74 
 4840      00
 4841              	.LASF70:
 4842 000d 706F7369 		.ascii	"position\000"
 4842      74696F6E 
 4842      00
 4843              	.LASF42:
 4844 0016 42415F73 		.ascii	"BA_start\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 107


 4844      74617274 
 4844      00
 4845              	.LASF38:
 4846 001f 73686C64 		.ascii	"shldr_init\000"
 4846      725F696E 
 4846      697400
 4847              	.LASF102:
 4848 002a 53484F55 		.ascii	"SHOULDER_FLAG\000"
 4848      4C444552 
 4848      5F464C41 
 4848      4700
 4849              	.LASF19:
 4850 0038 74696C74 		.ascii	"tilt_start\000"
 4850      5F737461 
 4850      727400
 4851              	.LASF67:
 4852 0043 66696C6C 		.ascii	"fill_data_array\000"
 4852      5F646174 
 4852      615F6172 
 4852      72617900 
 4853              	.LASF2:
 4854 0053 73686F72 		.ascii	"short int\000"
 4854      7420696E 
 4854      7400
 4855              	.LASF26:
 4856 005d 726F7461 		.ascii	"rotate_start\000"
 4856      74655F73 
 4856      74617274 
 4856      00
 4857              	.LASF39:
 4858 006a 73686C64 		.ascii	"shldr_execute\000"
 4858      725F6578 
 4858      65637574 
 4858      6500
 4859              	.LASF17:
 4860 0078 73697A65 		.ascii	"sizetype\000"
 4860      74797065 
 4860      00
 4861              	.LASF44:
 4862 0081 42415F65 		.ascii	"BA_execute\000"
 4862      78656375 
 4862      746500
 4863              	.LASF25:
 4864 008c 77726973 		.ascii	"wristRotate_states\000"
 4864      74526F74 
 4864      6174655F 
 4864      73746174 
 4864      657300
 4865              	.LASF72:
 4866 009f 746F7271 		.ascii	"torque\000"
 4866      756500
 4867              	.LASF87:
 4868 00a6 77697A6E 		.ascii	"wiznet\000"
 4868      657400
 4869              	.LASF83:
 4870 00ad 64697265 		.ascii	"direction\000"
 4870      6374696F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 108


 4870      6E00
 4871              	.LASF6:
 4872 00b7 6C6F6E67 		.ascii	"long long int\000"
 4872      206C6F6E 
 4872      6720696E 
 4872      7400
 4873              	.LASF98:
 4874 00c5 57525F61 		.ascii	"WR_array\000"
 4874      72726179 
 4874      00
 4875              	.LASF43:
 4876 00ce 42415F69 		.ascii	"BA_init\000"
 4876      6E697400 
 4877              	.LASF103:
 4878 00d6 42415F46 		.ascii	"BA_FLAG\000"
 4878      4C414700 
 4879              	.LASF36:
 4880 00de 73686F75 		.ascii	"shoulder_states\000"
 4880      6C646572 
 4880      5F737461 
 4880      74657300 
 4881              	.LASF109:
 4882 00ee 62617365 		.ascii	"baseAzimuth_state\000"
 4882      417A696D 
 4882      7574685F 
 4882      73746174 
 4882      6500
 4883              	.LASF105:
 4884 0100 77726973 		.ascii	"wristTilt_state\000"
 4884      7454696C 
 4884      745F7374 
 4884      61746500 
 4885              	.LASF77:
 4886 0110 656C626F 		.ascii	"elbow\000"
 4886      7700
 4887              	.LASF10:
 4888 0116 75696E74 		.ascii	"uint16\000"
 4888      313600
 4889              	.LASF89:
 4890 011d 656C6277 		.ascii	"elbw_arr_cspot\000"
 4890      5F617272 
 4890      5F637370 
 4890      6F7400
 4891              	.LASF76:
 4892 012c 77726973 		.ascii	"wristRotate\000"
 4892      74526F74 
 4892      61746500 
 4893              	.LASF96:
 4894 0138 57545F61 		.ascii	"WT_array\000"
 4894      72726179 
 4894      00
 4895              	.LASF27:
 4896 0141 726F7461 		.ascii	"rotate_init\000"
 4896      74655F69 
 4896      6E697400 
 4897              	.LASF104:
 4898 014d 74696D65 		.ascii	"timerFlag\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 109


 4898      72466C61 
 4898      6700
 4899              	.LASF45:
 4900 0157 42415F77 		.ascii	"BA_wait\000"
 4900      61697400 
 4901              	.LASF71:
 4902 015f 53657453 		.ascii	"SetServoTorque\000"
 4902      6572766F 
 4902      546F7271 
 4902      756500
 4903              	.LASF13:
 4904 016e 696E7431 		.ascii	"int16\000"
 4904      3600
 4905              	.LASF0:
 4906 0174 7369676E 		.ascii	"signed char\000"
 4906      65642063 
 4906      68617200 
 4907              	.LASF88:
 4908 0180 74657374 		.ascii	"test_array\000"
 4908      5F617272 
 4908      617900
 4909              	.LASF14:
 4910 018b 666C6F61 		.ascii	"float\000"
 4910      7400
 4911              	.LASF32:
 4912 0191 656C6277 		.ascii	"elbw_start\000"
 4912      5F737461 
 4912      727400
 4913              	.LASF95:
 4914 019c 57545F61 		.ascii	"WT_arr_cspot\000"
 4914      72725F63 
 4914      73706F74 
 4914      00
 4915              	.LASF79:
 4916 01a9 62617365 		.ascii	"baseAzimuth\000"
 4916      417A696D 
 4916      75746800 
 4917              	.LASF12:
 4918 01b5 696E7438 		.ascii	"int8\000"
 4918      00
 4919              	.LASF75:
 4920 01ba 77726973 		.ascii	"wristTilt\000"
 4920      7454696C 
 4920      7400
 4921              	.LASF56:
 4922 01c4 6D616B65 		.ascii	"make_command\000"
 4922      5F636F6D 
 4922      6D616E64 
 4922      00
 4923              	.LASF4:
 4924 01d1 6C6F6E67 		.ascii	"long int\000"
 4924      20696E74 
 4924      00
 4925              	.LASF41:
 4926 01da 62617365 		.ascii	"baseAzimuth_states\000"
 4926      417A696D 
 4926      7574685F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 110


 4926      73746174 
 4926      657300
 4927              	.LASF29:
 4928 01ed 726F7461 		.ascii	"rotate_wait\000"
 4928      74655F77 
 4928      61697400 
 4929              	.LASF66:
 4930 01f9 73656E64 		.ascii	"send_feedback\000"
 4930      5F666565 
 4930      64626163 
 4930      6B00
 4931              	.LASF65:
 4932 0207 66656564 		.ascii	"feedback\000"
 4932      6261636B 
 4932      00
 4933              	.LASF93:
 4934 0210 42415F61 		.ascii	"BA_arr_cspot\000"
 4934      72725F63 
 4934      73706F74 
 4934      00
 4935              	.LASF100:
 4936 021d 57525F46 		.ascii	"WR_FLAG\000"
 4936      4C414700 
 4937              	.LASF20:
 4938 0225 74696C74 		.ascii	"tilt_init\000"
 4938      5F696E69 
 4938      7400
 4939              	.LASF9:
 4940 022f 75696E74 		.ascii	"uint8\000"
 4940      3800
 4941              	.LASF37:
 4942 0235 73686C64 		.ascii	"shldr_start\000"
 4942      725F7374 
 4942      61727400 
 4943              	.LASF111:
 4944 0241 2E5C6D61 		.ascii	".\\main.c\000"
 4944      696E2E63 
 4944      00
 4945              	.LASF80:
 4946 024a 696E6974 		.ascii	"initialize\000"
 4946      69616C69 
 4946      7A6500
 4947              	.LASF1:
 4948 0255 756E7369 		.ascii	"unsigned char\000"
 4948      676E6564 
 4948      20636861 
 4948      7200
 4949              	.LASF48:
 4950 0263 6973725F 		.ascii	"isr_var\000"
 4950      76617200 
 4951              	.LASF82:
 4952 026b 636F756E 		.ascii	"counter\000"
 4952      74657200 
 4953              	.LASF108:
 4954 0273 73686F75 		.ascii	"shoulder_state\000"
 4954      6C646572 
 4954      5F737461 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 111


 4954      746500
 4955              	.LASF59:
 4956 0282 62797465 		.ascii	"byte2\000"
 4956      3200
 4957              	.LASF23:
 4958 0288 74696C74 		.ascii	"tilt_feedback\000"
 4958      5F666565 
 4958      64626163 
 4958      6B00
 4959              	.LASF33:
 4960 0296 656C6277 		.ascii	"elbw_init\000"
 4960      5F696E69 
 4960      7400
 4961              	.LASF47:
 4962 02a0 6E756D5F 		.ascii	"num_items\000"
 4962      6974656D 
 4962      7300
 4963              	.LASF28:
 4964 02aa 726F7461 		.ascii	"rotate_control\000"
 4964      74655F63 
 4964      6F6E7472 
 4964      6F6C00
 4965              	.LASF7:
 4966 02b9 6C6F6E67 		.ascii	"long long unsigned int\000"
 4966      206C6F6E 
 4966      6720756E 
 4966      7369676E 
 4966      65642069 
 4967              	.LASF8:
 4968 02d0 756E7369 		.ascii	"unsigned int\000"
 4968      676E6564 
 4968      20696E74 
 4968      00
 4969              	.LASF5:
 4970 02dd 6C6F6E67 		.ascii	"long unsigned int\000"
 4970      20756E73 
 4970      69676E65 
 4970      6420696E 
 4970      7400
 4971              	.LASF74:
 4972 02ef 73706565 		.ascii	"speed\000"
 4972      6400
 4973              	.LASF22:
 4974 02f5 74696C74 		.ascii	"tilt_wait\000"
 4974      5F776169 
 4974      7400
 4975              	.LASF40:
 4976 02ff 73686C64 		.ascii	"shldr_wait\000"
 4976      725F7761 
 4976      697400
 4977              	.LASF3:
 4978 030a 73686F72 		.ascii	"short unsigned int\000"
 4978      7420756E 
 4978      7369676E 
 4978      65642069 
 4978      6E7400
 4979              	.LASF24:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 112


 4980 031d 77726973 		.ascii	"wristTilt_states\000"
 4980      7454696C 
 4980      745F7374 
 4980      61746573 
 4980      00
 4981              	.LASF46:
 4982 032e 61765F61 		.ascii	"av_array\000"
 4982      72726179 
 4982      00
 4983              	.LASF31:
 4984 0337 656C626F 		.ascii	"elbow_states\000"
 4984      775F7374 
 4984      61746573 
 4984      00
 4985              	.LASF16:
 4986 0344 63686172 		.ascii	"char\000"
 4986      00
 4987              	.LASF112:
 4988 0349 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 4988      73657273 
 4988      5C53616D 
 4988      75656C5C 
 4988      446F6375 
 4989 0377 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 4989      5C61726D 
 4989      5F636F6E 
 4989      74726F6C 
 4989      6C65725F 
 4990 03a7 00       		.ascii	"\000"
 4991              	.LASF81:
 4992 03a8 6D61696E 		.ascii	"main\000"
 4992      00
 4993              	.LASF51:
 4994 03ad 6375725F 		.ascii	"cur_pos\000"
 4994      706F7300 
 4995              	.LASF68:
 4996 03b5 53657276 		.ascii	"ServoGoalPosition\000"
 4996      6F476F61 
 4996      6C506F73 
 4996      6974696F 
 4996      6E00
 4997              	.LASF84:
 4998 03c7 74656D70 		.ascii	"temp_val\000"
 4998      5F76616C 
 4998      00
 4999              	.LASF90:
 5000 03d0 656C626F 		.ascii	"elbow_array\000"
 5000      775F6172 
 5000      72617900 
 5001              	.LASF64:
 5002 03dc 6368616E 		.ascii	"channel\000"
 5002      6E656C00 
 5003              	.LASF94:
 5004 03e4 62617365 		.ascii	"baseAz_array\000"
 5004      417A5F61 
 5004      72726179 
 5004      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 113


 5005              	.LASF92:
 5006 03f1 73686F75 		.ascii	"shoulder_array\000"
 5006      6C646572 
 5006      5F617272 
 5006      617900
 5007              	.LASF57:
 5008 0400 696E666F 		.ascii	"info_array\000"
 5008      5F617272 
 5008      617900
 5009              	.LASF78:
 5010 040b 73686F75 		.ascii	"shoulder\000"
 5010      6C646572 
 5010      00
 5011              	.LASF11:
 5012 0414 75696E74 		.ascii	"uint32\000"
 5012      333200
 5013              	.LASF21:
 5014 041b 74696C74 		.ascii	"tilt_control\000"
 5014      5F636F6E 
 5014      74726F6C 
 5014      00
 5015              	.LASF50:
 5016 0428 706F735F 		.ascii	"pos_to_vel\000"
 5016      746F5F76 
 5016      656C00
 5017              	.LASF18:
 5018 0433 74696D65 		.ascii	"time_t\000"
 5018      5F7400
 5019              	.LASF52:
 5020 043a 61727261 		.ascii	"array\000"
 5020      7900
 5021              	.LASF53:
 5022 0440 41525241 		.ascii	"ARRAY_SIZE\000"
 5022      595F5349 
 5022      5A4500
 5023              	.LASF106:
 5024 044b 77726973 		.ascii	"wristRotate_state\000"
 5024      74526F74 
 5024      6174655F 
 5024      73746174 
 5024      6500
 5025              	.LASF101:
 5026 045d 454C424F 		.ascii	"ELBOW_FLAG\000"
 5026      575F464C 
 5026      414700
 5027              	.LASF63:
 5028 0468 706F7446 		.ascii	"potFeedback\000"
 5028      65656462 
 5028      61636B00 
 5029              	.LASF91:
 5030 0474 73686C64 		.ascii	"shldr_arr_cspot\000"
 5030      725F6172 
 5030      725F6373 
 5030      706F7400 
 5031              	.LASF58:
 5032 0484 62797465 		.ascii	"byte1\000"
 5032      3100
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 114


 5033              	.LASF107:
 5034 048a 656C626F 		.ascii	"elbow_state\000"
 5034      775F7374 
 5034      61746500 
 5035              	.LASF60:
 5036 0496 74656D70 		.ascii	"temp1\000"
 5036      3100
 5037              	.LASF61:
 5038 049c 74656D70 		.ascii	"temp2\000"
 5038      3200
 5039              	.LASF62:
 5040 04a2 74656D70 		.ascii	"temp3\000"
 5040      3300
 5041              	.LASF15:
 5042 04a8 646F7562 		.ascii	"double\000"
 5042      6C6500
 5043              	.LASF69:
 5044 04af 73657276 		.ascii	"servoID\000"
 5044      6F494400 
 5045              	.LASF49:
 5046 04b7 74696D65 		.ascii	"timer_isr\000"
 5046      725F6973 
 5046      7200
 5047              	.LASF99:
 5048 04c1 57545F46 		.ascii	"WT_FLAG\000"
 5048      4C414700 
 5049              	.LASF73:
 5050 04c9 53657276 		.ascii	"ServoSpeed\000"
 5050      6F537065 
 5050      656400
 5051              	.LASF110:
 5052 04d4 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 5052      4320342E 
 5052      382E3420 
 5052      32303134 
 5052      30353236 
 5053 0507 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 5053      20726576 
 5053      6973696F 
 5053      6E203231 
 5053      31333538 
 5054 053a 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 5054      74643D67 
 5054      6E753939 
 5054      202D6666 
 5054      756E6374 
 5055              	.LASF35:
 5056 055b 656C6277 		.ascii	"elbw_wait\000"
 5056      5F776169 
 5056      7400
 5057              	.LASF55:
 5058 0565 61766572 		.ascii	"average\000"
 5058      61676500 
 5059              	.LASF86:
 5060 056d 64617461 		.ascii	"data_array\000"
 5060      5F617272 
 5060      617900
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccd2wXBf.s 			page 115


 5061              	.LASF54:
 5062 0578 636F6D6D 		.ascii	"command\000"
 5062      616E6400 
 5063              	.LASF34:
 5064 0580 656C6277 		.ascii	"elbw_execute\000"
 5064      5F657865 
 5064      63757465 
 5064      00
 5065              	.LASF85:
 5066 058d 696E6372 		.ascii	"increasing\000"
 5066      65617369 
 5066      6E6700
 5067              	.LASF30:
 5068 0598 726F7461 		.ascii	"rotate_feedback\000"
 5068      74655F66 
 5068      65656462 
 5068      61636B00 
 5069              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

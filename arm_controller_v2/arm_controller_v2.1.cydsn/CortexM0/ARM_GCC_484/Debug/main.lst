ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	wiznet,1,1
  44              		.comm	test_array,22,4
  45              		.global	WT_FLAG
  46              		.bss
  47              		.type	WT_FLAG, %object
  48              		.size	WT_FLAG, 1
  49              	WT_FLAG:
  50 0000 00       		.space	1
  51              		.global	WR_FLAG
  52              		.type	WR_FLAG, %object
  53              		.size	WR_FLAG, 1
  54              	WR_FLAG:
  55 0001 00       		.space	1
  56              		.global	ELBOW_FLAG
  57              		.type	ELBOW_FLAG, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 2


  58              		.size	ELBOW_FLAG, 1
  59              	ELBOW_FLAG:
  60 0002 00       		.space	1
  61              		.global	SHOULDER_FLAG
  62              		.type	SHOULDER_FLAG, %object
  63              		.size	SHOULDER_FLAG, 1
  64              	SHOULDER_FLAG:
  65 0003 00       		.space	1
  66              		.global	BA_FLAG
  67              		.type	BA_FLAG, %object
  68              		.size	BA_FLAG, 1
  69              	BA_FLAG:
  70 0004 00       		.space	1
  71              		.global	EFFECTOR_FLAG
  72              		.type	EFFECTOR_FLAG, %object
  73              		.size	EFFECTOR_FLAG, 1
  74              	EFFECTOR_FLAG:
  75 0005 00       		.space	1
  76              		.global	dropped_packets
  77              		.align	1
  78              		.type	dropped_packets, %object
  79              		.size	dropped_packets, 2
  80              	dropped_packets:
  81 0006 0000     		.space	2
  82              		.global	fail_safe_errors
  83              		.align	1
  84              		.type	fail_safe_errors, %object
  85              		.size	fail_safe_errors, 2
  86              	fail_safe_errors:
  87 0008 0000     		.space	2
  88              		.global	shldr_errors
  89              		.align	1
  90              		.type	shldr_errors, %object
  91              		.size	shldr_errors, 2
  92              	shldr_errors:
  93 000a 0000     		.space	2
  94              		.global	elbw_errors
  95              		.align	1
  96              		.type	elbw_errors, %object
  97              		.size	elbw_errors, 2
  98              	elbw_errors:
  99 000c 0000     		.space	2
 100              		.global	BA_errors
 101              		.align	1
 102              		.type	BA_errors, %object
 103              		.size	BA_errors, 2
 104              	BA_errors:
 105 000e 0000     		.space	2
 106              		.global	WT_errors
 107              		.align	1
 108              		.type	WT_errors, %object
 109              		.size	WT_errors, 2
 110              	WT_errors:
 111 0010 0000     		.space	2
 112              		.global	WR_errors
 113              		.align	1
 114              		.type	WR_errors, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 3


 115              		.size	WR_errors, 2
 116              	WR_errors:
 117 0012 0000     		.space	2
 118              		.global	eff_errors
 119              		.align	1
 120              		.type	eff_errors, %object
 121              		.size	eff_errors, 2
 122              	eff_errors:
 123 0014 0000     		.space	2
 124              		.comm	timerFlag,1,1
 125              		.section	.text.timer_isr,"ax",%progbits
 126              		.align	2
 127              		.global	timer_isr
 128              		.code	16
 129              		.thumb_func
 130              		.type	timer_isr, %function
 131              	timer_isr:
 132              	.LFB34:
 133              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 134              		.loc 1 11 0
 135              		.cfi_startproc
 136 0000 80B5     		push	{r7, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 7, -8
 139              		.cfi_offset 14, -4
 140 0002 82B0     		sub	sp, sp, #8
 141              		.cfi_def_cfa_offset 16
 142 0004 00AF     		add	r7, sp, #0
 143              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 144              		.loc 1 12 0
 145 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 146 000a 031C     		mov	r3, r0
 147 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 148              		.loc 1 13 0
 149 000e 054B     		ldr	r3, .L2
 150 0010 0122     		mov	r2, #1
 151 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 152              		.loc 1 14 0
 153 0014 7B68     		ldr	r3, [r7, #4]
 154 0016 181C     		mov	r0, r3
 155 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 156              		.loc 1 15 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 4


 157 001c BD46     		mov	sp, r7
 158 001e 02B0     		add	sp, sp, #8
 159              		@ sp needed
 160 0020 80BD     		pop	{r7, pc}
 161              	.L3:
 162 0022 C046     		.align	2
 163              	.L2:
 164 0024 00000000 		.word	timerFlag
 165              		.cfi_endproc
 166              	.LFE34:
 167              		.size	timer_isr, .-timer_isr
 168              		.global	__aeabi_idiv
 169              		.section	.text.CalibrationElbow,"ax",%progbits
 170              		.align	2
 171              		.global	CalibrationElbow
 172              		.code	16
 173              		.thumb_func
 174              		.type	CalibrationElbow, %function
 175              	CalibrationElbow:
 176              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 177              		.loc 1 48 0
 178              		.cfi_startproc
 179 0000 80B5     		push	{r7, lr}
 180              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 5


 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 86B0     		sub	sp, sp, #24
 184              		.cfi_def_cfa_offset 32
 185 0004 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 187 0006 021C     		mov	r2, r0
 188 0008 BB1D     		add	r3, r7, #6
 189 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 190              		.loc 1 49 0
 191 000c 3B1C     		mov	r3, r7
 192 000e 1333     		add	r3, r3, #19
 193 0010 0322     		mov	r2, #3
 194 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 195              		.loc 1 56 0
 196 0014 3B1C     		mov	r3, r7
 197 0016 1733     		add	r3, r3, #23
 198 0018 0022     		mov	r2, #0
 199 001a 1A70     		strb	r2, [r3]
 200 001c 3B1C     		mov	r3, r7
 201 001e 1433     		add	r3, r3, #20
 202 0020 0022     		mov	r2, #0
 203 0022 1A80     		strh	r2, [r3]
 204 0024 5DE0     		b	.L5
 205              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Move till stop switch presses down
  59:.\main.c      ****         if(velocity < 1500)
 206              		.loc 1 59 0
 207 0026 BB1D     		add	r3, r7, #6
 208 0028 1A88     		ldrh	r2, [r3]
 209 002a 3D4B     		ldr	r3, .L15
 210 002c 9A42     		cmp	r2, r3
 211 002e 0BD8     		bhi	.L6
  60:.\main.c      ****         {
  61:.\main.c      ****             while(stop_elb_dn_Read())
 212              		.loc 1 61 0
 213 0030 04E0     		b	.L7
 214              	.L8:
  62:.\main.c      ****             {
  63:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 215              		.loc 1 63 0
 216 0032 BB1D     		add	r3, r7, #6
 217 0034 1B88     		ldrh	r3, [r3]
 218 0036 181C     		mov	r0, r3
 219 0038 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 220              	.L7:
  61:.\main.c      ****             while(stop_elb_dn_Read())
 221              		.loc 1 61 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 6


 222 003c FFF7FEFF 		bl	stop_elb_dn_Read
 223 0040 031C     		mov	r3, r0
 224 0042 002B     		cmp	r3, #0
 225 0044 F5D1     		bne	.L8
 226 0046 18E0     		b	.L9
 227              	.L6:
  64:.\main.c      ****             }
  65:.\main.c      ****         }
  66:.\main.c      ****         else if(velocity > 1500)
 228              		.loc 1 66 0
 229 0048 BB1D     		add	r3, r7, #6
 230 004a 1A88     		ldrh	r2, [r3]
 231 004c 354B     		ldr	r3, .L15+4
 232 004e 9A42     		cmp	r2, r3
 233 0050 0BD9     		bls	.L10
  67:.\main.c      ****         {
  68:.\main.c      ****             while(stop_elb_up_Read())
 234              		.loc 1 68 0
 235 0052 04E0     		b	.L11
 236              	.L12:
  69:.\main.c      ****             {
  70:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 237              		.loc 1 70 0
 238 0054 BB1D     		add	r3, r7, #6
 239 0056 1B88     		ldrh	r3, [r3]
 240 0058 181C     		mov	r0, r3
 241 005a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 242              	.L11:
  68:.\main.c      ****             while(stop_elb_up_Read())
 243              		.loc 1 68 0 discriminator 1
 244 005e FFF7FEFF 		bl	stop_elb_up_Read
 245 0062 031C     		mov	r3, r0
 246 0064 002B     		cmp	r3, #0
 247 0066 F5D1     		bne	.L12
 248 0068 07E0     		b	.L9
 249              	.L10:
  71:.\main.c      ****             }
  72:.\main.c      ****         }
  73:.\main.c      ****         else
  74:.\main.c      ****         {
  75:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 250              		.loc 1 75 0
 251 006a BB1D     		add	r3, r7, #6
 252 006c 1B88     		ldrh	r3, [r3]
 253 006e 181C     		mov	r0, r3
 254 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  76:.\main.c      ****             LED_Write(1);
 255              		.loc 1 76 0
 256 0074 0120     		mov	r0, #1
 257 0076 FFF7FEFF 		bl	LED_Write
 258              	.L9:
  77:.\main.c      ****         }
  78:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 259              		.loc 1 78 0
 260 007a 2A4B     		ldr	r3, .L15+4
 261 007c 181C     		mov	r0, r3
 262 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 7


  79:.\main.c      ****         channel = ELBOW_POT;
 263              		.loc 1 79 0
 264 0082 0123     		mov	r3, #1
 265 0084 FB60     		str	r3, [r7, #12]
  80:.\main.c      ****         
  81:.\main.c      ****         // Add the value to average
  82:.\main.c      ****         average+=potFeedback(channel);
 266              		.loc 1 82 0
 267 0086 FB68     		ldr	r3, [r7, #12]
 268 0088 181C     		mov	r0, r3
 269 008a FFF7FEFF 		bl	potFeedback
 270 008e 031C     		mov	r3, r0
 271 0090 191C     		mov	r1, r3
 272 0092 3B1C     		mov	r3, r7
 273 0094 1433     		add	r3, r3, #20
 274 0096 3A1C     		mov	r2, r7
 275 0098 1432     		add	r2, r2, #20
 276 009a 1288     		ldrh	r2, [r2]
 277 009c 8A18     		add	r2, r1, r2
 278 009e 1A80     		strh	r2, [r3]
  83:.\main.c      ****  
  84:.\main.c      **** 		// Move away for 2 seconds
  85:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  86:.\main.c      ****         difference = 1500-velocity;
 279              		.loc 1 86 0
 280 00a0 BB1D     		add	r3, r7, #6
 281 00a2 1B88     		ldrh	r3, [r3]
 282 00a4 1F4A     		ldr	r2, .L15+4
 283 00a6 D31A     		sub	r3, r2, r3
 284 00a8 9AB2     		uxth	r2, r3
 285 00aa 3B1C     		mov	r3, r7
 286 00ac 0A33     		add	r3, r3, #10
 287 00ae 1A80     		strh	r2, [r3]
  87:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)1500 + difference);
 288              		.loc 1 87 0
 289 00b0 3B1C     		mov	r3, r7
 290 00b2 0A33     		add	r3, r3, #10
 291 00b4 0022     		mov	r2, #0
 292 00b6 9B5E     		ldrsh	r3, [r3, r2]
 293 00b8 1A4A     		ldr	r2, .L15+4
 294 00ba 9B18     		add	r3, r3, r2
 295 00bc 181C     		mov	r0, r3
 296 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  88:.\main.c      ****         CyDelay(1000);
 297              		.loc 1 88 0
 298 00c2 FA23     		mov	r3, #250
 299 00c4 9B00     		lsl	r3, r3, #2
 300 00c6 181C     		mov	r0, r3
 301 00c8 FFF7FEFF 		bl	CyDelay
  89:.\main.c      ****  
  90:.\main.c      **** 		// Add a switch check
  91:.\main.c      **** 			// Safety check in case it somehow moves the other direction to fast
  92:.\main.c      ****  
  93:.\main.c      **** 		// Stop moving
  94:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 302              		.loc 1 94 0
 303 00cc 154B     		ldr	r3, .L15+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 8


 304 00ce 181C     		mov	r0, r3
 305 00d0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 306              		.loc 1 56 0
 307 00d4 3B1C     		mov	r3, r7
 308 00d6 1733     		add	r3, r3, #23
 309 00d8 1A78     		ldrb	r2, [r3]
 310 00da 3B1C     		mov	r3, r7
 311 00dc 1733     		add	r3, r3, #23
 312 00de 0132     		add	r2, r2, #1
 313 00e0 1A70     		strb	r2, [r3]
 314              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 315              		.loc 1 56 0 is_stmt 0 discriminator 1
 316 00e2 3A1C     		mov	r2, r7
 317 00e4 1732     		add	r2, r2, #23
 318 00e6 3B1C     		mov	r3, r7
 319 00e8 1333     		add	r3, r3, #19
 320 00ea 1278     		ldrb	r2, [r2]
 321 00ec 1B78     		ldrb	r3, [r3]
 322 00ee 9A42     		cmp	r2, r3
 323 00f0 99D3     		bcc	.L13
  95:.\main.c      **** 	}
  96:.\main.c      ****  
  97:.\main.c      **** 	bound = average / CYCLES;
 324              		.loc 1 97 0 is_stmt 1
 325 00f2 3B1C     		mov	r3, r7
 326 00f4 1433     		add	r3, r3, #20
 327 00f6 1A88     		ldrh	r2, [r3]
 328 00f8 3B1C     		mov	r3, r7
 329 00fa 1333     		add	r3, r3, #19
 330 00fc 1B78     		ldrb	r3, [r3]
 331 00fe 101C     		mov	r0, r2
 332 0100 191C     		mov	r1, r3
 333 0102 FFF7FEFF 		bl	__aeabi_idiv
 334 0106 031C     		mov	r3, r0
 335 0108 1A1C     		mov	r2, r3
 336 010a 3B1C     		mov	r3, r7
 337 010c 0833     		add	r3, r3, #8
 338 010e 1A80     		strh	r2, [r3]
  98:.\main.c      ****  
  99:.\main.c      **** 	return bound;
 339              		.loc 1 99 0
 340 0110 3B1C     		mov	r3, r7
 341 0112 0833     		add	r3, r3, #8
 342 0114 1B88     		ldrh	r3, [r3]
 100:.\main.c      **** }
 343              		.loc 1 100 0
 344 0116 181C     		mov	r0, r3
 345 0118 BD46     		mov	sp, r7
 346 011a 06B0     		add	sp, sp, #24
 347              		@ sp needed
 348 011c 80BD     		pop	{r7, pc}
 349              	.L16:
 350 011e C046     		.align	2
 351              	.L15:
 352 0120 DB050000 		.word	1499
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 9


 353 0124 DC050000 		.word	1500
 354              		.cfi_endproc
 355              	.LFE35:
 356              		.size	CalibrationElbow, .-CalibrationElbow
 357              		.section	.text.CalibrationShoulder,"ax",%progbits
 358              		.align	2
 359              		.global	CalibrationShoulder
 360              		.code	16
 361              		.thumb_func
 362              		.type	CalibrationShoulder, %function
 363              	CalibrationShoulder:
 364              	.LFB36:
 101:.\main.c      **** 
 102:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 103:.\main.c      **** {
 365              		.loc 1 103 0
 366              		.cfi_startproc
 367 0000 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 86B0     		sub	sp, sp, #24
 372              		.cfi_def_cfa_offset 32
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 0006 021C     		mov	r2, r0
 376 0008 BB1D     		add	r3, r7, #6
 377 000a 1A80     		strh	r2, [r3]
 104:.\main.c      **** 	uint8 	CYCLES = 3;
 378              		.loc 1 104 0
 379 000c 3B1C     		mov	r3, r7
 380 000e 1333     		add	r3, r3, #19
 381 0010 0322     		mov	r2, #3
 382 0012 1A70     		strb	r2, [r3]
 105:.\main.c      **** 	uint8 	i;
 106:.\main.c      **** 	uint16 	bound;
 107:.\main.c      **** 	uint16 	average;
 108:.\main.c      ****     uint32  channel;
 109:.\main.c      ****     int16 difference;
 110:.\main.c      ****  
 111:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 383              		.loc 1 111 0
 384 0014 3B1C     		mov	r3, r7
 385 0016 1733     		add	r3, r3, #23
 386 0018 0022     		mov	r2, #0
 387 001a 1A70     		strb	r2, [r3]
 388 001c 3B1C     		mov	r3, r7
 389 001e 1433     		add	r3, r3, #20
 390 0020 0022     		mov	r2, #0
 391 0022 1A80     		strh	r2, [r3]
 392 0024 5DE0     		b	.L18
 393              	.L26:
 112:.\main.c      **** 	{
 113:.\main.c      **** 		// Move till stop switch presses down
 114:.\main.c      ****         if(velocity < 1500)
 394              		.loc 1 114 0
 395 0026 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 10


 396 0028 1A88     		ldrh	r2, [r3]
 397 002a 3D4B     		ldr	r3, .L28
 398 002c 9A42     		cmp	r2, r3
 399 002e 0BD8     		bhi	.L19
 115:.\main.c      ****         {
 116:.\main.c      ****             while(stop_shdr_dn_Read())
 400              		.loc 1 116 0
 401 0030 04E0     		b	.L20
 402              	.L21:
 117:.\main.c      ****             {
 118:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 403              		.loc 1 118 0
 404 0032 BB1D     		add	r3, r7, #6
 405 0034 1B88     		ldrh	r3, [r3]
 406 0036 181C     		mov	r0, r3
 407 0038 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 408              	.L20:
 116:.\main.c      ****             while(stop_shdr_dn_Read())
 409              		.loc 1 116 0 discriminator 1
 410 003c FFF7FEFF 		bl	stop_shdr_dn_Read
 411 0040 031C     		mov	r3, r0
 412 0042 002B     		cmp	r3, #0
 413 0044 F5D1     		bne	.L21
 414 0046 18E0     		b	.L22
 415              	.L19:
 119:.\main.c      ****             }
 120:.\main.c      ****         }
 121:.\main.c      ****         else if(velocity > 1500)
 416              		.loc 1 121 0
 417 0048 BB1D     		add	r3, r7, #6
 418 004a 1A88     		ldrh	r2, [r3]
 419 004c 354B     		ldr	r3, .L28+4
 420 004e 9A42     		cmp	r2, r3
 421 0050 0BD9     		bls	.L23
 122:.\main.c      ****         {
 123:.\main.c      ****             while(stop_shdr_up_Read())
 422              		.loc 1 123 0
 423 0052 04E0     		b	.L24
 424              	.L25:
 124:.\main.c      ****             {
 125:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 425              		.loc 1 125 0
 426 0054 BB1D     		add	r3, r7, #6
 427 0056 1B88     		ldrh	r3, [r3]
 428 0058 181C     		mov	r0, r3
 429 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 430              	.L24:
 123:.\main.c      ****             while(stop_shdr_up_Read())
 431              		.loc 1 123 0 discriminator 1
 432 005e FFF7FEFF 		bl	stop_shdr_up_Read
 433 0062 031C     		mov	r3, r0
 434 0064 002B     		cmp	r3, #0
 435 0066 F5D1     		bne	.L25
 436 0068 07E0     		b	.L22
 437              	.L23:
 126:.\main.c      ****             }
 127:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 11


 128:.\main.c      ****         else
 129:.\main.c      ****         {
 130:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 438              		.loc 1 130 0
 439 006a BB1D     		add	r3, r7, #6
 440 006c 1B88     		ldrh	r3, [r3]
 441 006e 181C     		mov	r0, r3
 442 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 131:.\main.c      ****             LED_Write(1);
 443              		.loc 1 131 0
 444 0074 0120     		mov	r0, #1
 445 0076 FFF7FEFF 		bl	LED_Write
 446              	.L22:
 132:.\main.c      ****         }
 133:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 447              		.loc 1 133 0
 448 007a 2A4B     		ldr	r3, .L28+4
 449 007c 181C     		mov	r0, r3
 450 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 134:.\main.c      ****         channel = SHOULDER_POT;
 451              		.loc 1 134 0
 452 0082 0023     		mov	r3, #0
 453 0084 FB60     		str	r3, [r7, #12]
 135:.\main.c      ****  
 136:.\main.c      **** 		// Add the value to average
 137:.\main.c      ****         average+=potFeedback(channel);
 454              		.loc 1 137 0
 455 0086 FB68     		ldr	r3, [r7, #12]
 456 0088 181C     		mov	r0, r3
 457 008a FFF7FEFF 		bl	potFeedback
 458 008e 031C     		mov	r3, r0
 459 0090 191C     		mov	r1, r3
 460 0092 3B1C     		mov	r3, r7
 461 0094 1433     		add	r3, r3, #20
 462 0096 3A1C     		mov	r2, r7
 463 0098 1432     		add	r2, r2, #20
 464 009a 1288     		ldrh	r2, [r2]
 465 009c 8A18     		add	r2, r1, r2
 466 009e 1A80     		strh	r2, [r3]
 138:.\main.c      ****  
 139:.\main.c      **** 		// Move away for 2 seconds
 140:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 141:.\main.c      ****         difference = 1500-velocity;
 467              		.loc 1 141 0
 468 00a0 BB1D     		add	r3, r7, #6
 469 00a2 1B88     		ldrh	r3, [r3]
 470 00a4 1F4A     		ldr	r2, .L28+4
 471 00a6 D31A     		sub	r3, r2, r3
 472 00a8 9AB2     		uxth	r2, r3
 473 00aa 3B1C     		mov	r3, r7
 474 00ac 0A33     		add	r3, r3, #10
 475 00ae 1A80     		strh	r2, [r3]
 142:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)1500 + difference);
 476              		.loc 1 142 0
 477 00b0 3B1C     		mov	r3, r7
 478 00b2 0A33     		add	r3, r3, #10
 479 00b4 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 12


 480 00b6 9B5E     		ldrsh	r3, [r3, r2]
 481 00b8 1A4A     		ldr	r2, .L28+4
 482 00ba 9B18     		add	r3, r3, r2
 483 00bc 181C     		mov	r0, r3
 484 00be FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 143:.\main.c      ****         CyDelay(1000);
 485              		.loc 1 143 0
 486 00c2 FA23     		mov	r3, #250
 487 00c4 9B00     		lsl	r3, r3, #2
 488 00c6 181C     		mov	r0, r3
 489 00c8 FFF7FEFF 		bl	CyDelay
 144:.\main.c      ****  
 145:.\main.c      **** 		// Add a switch check
 146:.\main.c      **** 			// Safety check in case it somehow moves the other direction to fast
 147:.\main.c      ****  
 148:.\main.c      **** 		// Stop moving
 149:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 490              		.loc 1 149 0
 491 00cc 154B     		ldr	r3, .L28+4
 492 00ce 181C     		mov	r0, r3
 493 00d0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 111:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 494              		.loc 1 111 0
 495 00d4 3B1C     		mov	r3, r7
 496 00d6 1733     		add	r3, r3, #23
 497 00d8 1A78     		ldrb	r2, [r3]
 498 00da 3B1C     		mov	r3, r7
 499 00dc 1733     		add	r3, r3, #23
 500 00de 0132     		add	r2, r2, #1
 501 00e0 1A70     		strb	r2, [r3]
 502              	.L18:
 111:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 503              		.loc 1 111 0 is_stmt 0 discriminator 1
 504 00e2 3A1C     		mov	r2, r7
 505 00e4 1732     		add	r2, r2, #23
 506 00e6 3B1C     		mov	r3, r7
 507 00e8 1333     		add	r3, r3, #19
 508 00ea 1278     		ldrb	r2, [r2]
 509 00ec 1B78     		ldrb	r3, [r3]
 510 00ee 9A42     		cmp	r2, r3
 511 00f0 99D3     		bcc	.L26
 150:.\main.c      **** 	}
 151:.\main.c      ****  
 152:.\main.c      **** 	bound = average / CYCLES;
 512              		.loc 1 152 0 is_stmt 1
 513 00f2 3B1C     		mov	r3, r7
 514 00f4 1433     		add	r3, r3, #20
 515 00f6 1A88     		ldrh	r2, [r3]
 516 00f8 3B1C     		mov	r3, r7
 517 00fa 1333     		add	r3, r3, #19
 518 00fc 1B78     		ldrb	r3, [r3]
 519 00fe 101C     		mov	r0, r2
 520 0100 191C     		mov	r1, r3
 521 0102 FFF7FEFF 		bl	__aeabi_idiv
 522 0106 031C     		mov	r3, r0
 523 0108 1A1C     		mov	r2, r3
 524 010a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 13


 525 010c 0833     		add	r3, r3, #8
 526 010e 1A80     		strh	r2, [r3]
 153:.\main.c      ****  
 154:.\main.c      **** 	return bound;
 527              		.loc 1 154 0
 528 0110 3B1C     		mov	r3, r7
 529 0112 0833     		add	r3, r3, #8
 530 0114 1B88     		ldrh	r3, [r3]
 155:.\main.c      **** }
 531              		.loc 1 155 0
 532 0116 181C     		mov	r0, r3
 533 0118 BD46     		mov	sp, r7
 534 011a 06B0     		add	sp, sp, #24
 535              		@ sp needed
 536 011c 80BD     		pop	{r7, pc}
 537              	.L29:
 538 011e C046     		.align	2
 539              	.L28:
 540 0120 DB050000 		.word	1499
 541 0124 DC050000 		.word	1500
 542              		.cfi_endproc
 543              	.LFE36:
 544              		.size	CalibrationShoulder, .-CalibrationShoulder
 545              		.global	__aeabi_uidiv
 546              		.section	.text.average,"ax",%progbits
 547              		.align	2
 548              		.global	average
 549              		.code	16
 550              		.thumb_func
 551              		.type	average, %function
 552              	average:
 553              	.LFB37:
 156:.\main.c      **** 
 157:.\main.c      **** //Average function to be used in smoothing our input
 158:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 159:.\main.c      **** {
 554              		.loc 1 159 0
 555              		.cfi_startproc
 556 0000 80B5     		push	{r7, lr}
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 86B0     		sub	sp, sp, #24
 561              		.cfi_def_cfa_offset 32
 562 0004 00AF     		add	r7, sp, #0
 563              		.cfi_def_cfa_register 7
 564 0006 7860     		str	r0, [r7, #4]
 565 0008 0A1C     		mov	r2, r1
 566 000a FB1C     		add	r3, r7, #3
 567 000c 1A70     		strb	r2, [r3]
 160:.\main.c      ****     uint8 i;
 161:.\main.c      ****     uint32 sum = 0;
 568              		.loc 1 161 0
 569 000e 0023     		mov	r3, #0
 570 0010 3B61     		str	r3, [r7, #16]
 162:.\main.c      ****     uint16 avg = 0;
 571              		.loc 1 162 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 14


 572 0012 3B1C     		mov	r3, r7
 573 0014 0E33     		add	r3, r3, #14
 574 0016 0022     		mov	r2, #0
 575 0018 1A80     		strh	r2, [r3]
 163:.\main.c      ****     
 164:.\main.c      ****     for(i = 0; i < num_items; i++)
 576              		.loc 1 164 0
 577 001a 3B1C     		mov	r3, r7
 578 001c 1733     		add	r3, r3, #23
 579 001e 0022     		mov	r2, #0
 580 0020 1A70     		strb	r2, [r3]
 581 0022 10E0     		b	.L31
 582              	.L32:
 165:.\main.c      ****     {
 166:.\main.c      ****         sum += av_array[i];
 583              		.loc 1 166 0 discriminator 2
 584 0024 3B1C     		mov	r3, r7
 585 0026 1733     		add	r3, r3, #23
 586 0028 1B78     		ldrb	r3, [r3]
 587 002a 5B00     		lsl	r3, r3, #1
 588 002c 7A68     		ldr	r2, [r7, #4]
 589 002e D318     		add	r3, r2, r3
 590 0030 1B88     		ldrh	r3, [r3]
 591 0032 3A69     		ldr	r2, [r7, #16]
 592 0034 D318     		add	r3, r2, r3
 593 0036 3B61     		str	r3, [r7, #16]
 164:.\main.c      ****     for(i = 0; i < num_items; i++)
 594              		.loc 1 164 0 discriminator 2
 595 0038 3B1C     		mov	r3, r7
 596 003a 1733     		add	r3, r3, #23
 597 003c 1A78     		ldrb	r2, [r3]
 598 003e 3B1C     		mov	r3, r7
 599 0040 1733     		add	r3, r3, #23
 600 0042 0132     		add	r2, r2, #1
 601 0044 1A70     		strb	r2, [r3]
 602              	.L31:
 164:.\main.c      ****     for(i = 0; i < num_items; i++)
 603              		.loc 1 164 0 is_stmt 0 discriminator 1
 604 0046 3A1C     		mov	r2, r7
 605 0048 1732     		add	r2, r2, #23
 606 004a FB1C     		add	r3, r7, #3
 607 004c 1278     		ldrb	r2, [r2]
 608 004e 1B78     		ldrb	r3, [r3]
 609 0050 9A42     		cmp	r2, r3
 610 0052 E7D3     		bcc	.L32
 167:.\main.c      ****     }
 168:.\main.c      ****     
 169:.\main.c      ****     avg = sum/num_items;
 611              		.loc 1 169 0 is_stmt 1
 612 0054 FB1C     		add	r3, r7, #3
 613 0056 1B78     		ldrb	r3, [r3]
 614 0058 3869     		ldr	r0, [r7, #16]
 615 005a 191C     		mov	r1, r3
 616 005c FFF7FEFF 		bl	__aeabi_uidiv
 617 0060 031C     		mov	r3, r0
 618 0062 1A1C     		mov	r2, r3
 619 0064 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 15


 620 0066 0E33     		add	r3, r3, #14
 621 0068 1A80     		strh	r2, [r3]
 170:.\main.c      ****     
 171:.\main.c      ****     return avg;
 622              		.loc 1 171 0
 623 006a 3B1C     		mov	r3, r7
 624 006c 0E33     		add	r3, r3, #14
 625 006e 1B88     		ldrh	r3, [r3]
 172:.\main.c      **** }
 626              		.loc 1 172 0
 627 0070 181C     		mov	r0, r3
 628 0072 BD46     		mov	sp, r7
 629 0074 06B0     		add	sp, sp, #24
 630              		@ sp needed
 631 0076 80BD     		pop	{r7, pc}
 632              		.cfi_endproc
 633              	.LFE37:
 634              		.size	average, .-average
 635              		.section	.text.maintain_array,"ax",%progbits
 636              		.align	2
 637              		.global	maintain_array
 638              		.code	16
 639              		.thumb_func
 640              		.type	maintain_array, %function
 641              	maintain_array:
 642              	.LFB38:
 173:.\main.c      **** 
 174:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 175:.\main.c      **** {
 643              		.loc 1 175 0
 644              		.cfi_startproc
 645 0000 80B5     		push	{r7, lr}
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 7, -8
 648              		.cfi_offset 14, -4
 649 0002 82B0     		sub	sp, sp, #8
 650              		.cfi_def_cfa_offset 16
 651 0004 00AF     		add	r7, sp, #0
 652              		.cfi_def_cfa_register 7
 653 0006 0A1C     		mov	r2, r1
 654 0008 FB1D     		add	r3, r7, #7
 655 000a 011C     		add	r1, r0, #0
 656 000c 1970     		strb	r1, [r3]
 657 000e BB1D     		add	r3, r7, #6
 658 0010 1A70     		strb	r2, [r3]
 176:.\main.c      ****     if(cpos < (SIZE - 1))
 659              		.loc 1 176 0
 660 0012 FB1D     		add	r3, r7, #7
 661 0014 1A78     		ldrb	r2, [r3]
 662 0016 BB1D     		add	r3, r7, #6
 663 0018 1B78     		ldrb	r3, [r3]
 664 001a 013B     		sub	r3, r3, #1
 665 001c 9A42     		cmp	r2, r3
 666 001e 05DA     		bge	.L35
 177:.\main.c      ****     {
 178:.\main.c      ****         cpos++;
 667              		.loc 1 178 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 16


 668 0020 FB1D     		add	r3, r7, #7
 669 0022 1A78     		ldrb	r2, [r3]
 670 0024 FB1D     		add	r3, r7, #7
 671 0026 0132     		add	r2, r2, #1
 672 0028 1A70     		strb	r2, [r3]
 673 002a 02E0     		b	.L36
 674              	.L35:
 179:.\main.c      ****     }
 180:.\main.c      ****     else
 181:.\main.c      ****     {
 182:.\main.c      ****         cpos = 0;
 675              		.loc 1 182 0
 676 002c FB1D     		add	r3, r7, #7
 677 002e 0022     		mov	r2, #0
 678 0030 1A70     		strb	r2, [r3]
 679              	.L36:
 183:.\main.c      ****     }
 184:.\main.c      ****     return cpos;
 680              		.loc 1 184 0
 681 0032 FB1D     		add	r3, r7, #7
 682 0034 1B78     		ldrb	r3, [r3]
 185:.\main.c      **** }
 683              		.loc 1 185 0
 684 0036 181C     		mov	r0, r3
 685 0038 BD46     		mov	sp, r7
 686 003a 02B0     		add	sp, sp, #8
 687              		@ sp needed
 688 003c 80BD     		pop	{r7, pc}
 689              		.cfi_endproc
 690              	.LFE38:
 691              		.size	maintain_array, .-maintain_array
 692 003e C046     		.section	.text.check_update,"ax",%progbits
 693              		.align	2
 694              		.global	check_update
 695              		.code	16
 696              		.thumb_func
 697              		.type	check_update, %function
 698              	check_update:
 699              	.LFB39:
 186:.\main.c      **** 
 187:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 188:.\main.c      **** {
 700              		.loc 1 188 0
 701              		.cfi_startproc
 702 0000 80B5     		push	{r7, lr}
 703              		.cfi_def_cfa_offset 8
 704              		.cfi_offset 7, -8
 705              		.cfi_offset 14, -4
 706 0002 86B0     		sub	sp, sp, #24
 707              		.cfi_def_cfa_offset 32
 708 0004 00AF     		add	r7, sp, #0
 709              		.cfi_def_cfa_register 7
 710 0006 F860     		str	r0, [r7, #12]
 711 0008 7B60     		str	r3, [r7, #4]
 712 000a 3B1C     		mov	r3, r7
 713 000c 0B33     		add	r3, r3, #11
 714 000e 1970     		strb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 17


 715 0010 3B1C     		mov	r3, r7
 716 0012 0A33     		add	r3, r3, #10
 717 0014 1A70     		strb	r2, [r3]
 189:.\main.c      ****     uint8 index;
 190:.\main.c      ****     if(arr_pos != 0)
 718              		.loc 1 190 0
 719 0016 3B1C     		mov	r3, r7
 720 0018 0B33     		add	r3, r3, #11
 721 001a 1B78     		ldrb	r3, [r3]
 722 001c 002B     		cmp	r3, #0
 723 001e 07D0     		beq	.L39
 191:.\main.c      ****     {
 192:.\main.c      ****         index = arr_pos - 1;
 724              		.loc 1 192 0
 725 0020 3B1C     		mov	r3, r7
 726 0022 1733     		add	r3, r3, #23
 727 0024 3A1C     		mov	r2, r7
 728 0026 0B32     		add	r2, r2, #11
 729 0028 1278     		ldrb	r2, [r2]
 730 002a 013A     		sub	r2, r2, #1
 731 002c 1A70     		strb	r2, [r3]
 732 002e 06E0     		b	.L40
 733              	.L39:
 193:.\main.c      ****     }
 194:.\main.c      ****     else
 195:.\main.c      ****     {
 196:.\main.c      ****         index = size - 1;
 734              		.loc 1 196 0
 735 0030 3B1C     		mov	r3, r7
 736 0032 1733     		add	r3, r3, #23
 737 0034 3A1C     		mov	r2, r7
 738 0036 0A32     		add	r2, r2, #10
 739 0038 1278     		ldrb	r2, [r2]
 740 003a 013A     		sub	r2, r2, #1
 741 003c 1A70     		strb	r2, [r3]
 742              	.L40:
 197:.\main.c      ****     }
 198:.\main.c      ****     
 199:.\main.c      ****     if(change < 0)
 743              		.loc 1 199 0
 744 003e 7B68     		ldr	r3, [r7, #4]
 745 0040 002B     		cmp	r3, #0
 746 0042 2ADA     		bge	.L41
 200:.\main.c      ****     {
 201:.\main.c      ****         if(array[index] >= (1000 - change))
 747              		.loc 1 201 0
 748 0044 3B1C     		mov	r3, r7
 749 0046 1733     		add	r3, r3, #23
 750 0048 1B78     		ldrb	r3, [r3]
 751 004a 5B00     		lsl	r3, r3, #1
 752 004c FA68     		ldr	r2, [r7, #12]
 753 004e D318     		add	r3, r2, r3
 754 0050 1B88     		ldrh	r3, [r3]
 755 0052 1A1C     		mov	r2, r3
 756 0054 7B68     		ldr	r3, [r7, #4]
 757 0056 FA21     		mov	r1, #250
 758 0058 8900     		lsl	r1, r1, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 18


 759 005a CB1A     		sub	r3, r1, r3
 760 005c 9A42     		cmp	r2, r3
 761 005e 12DB     		blt	.L42
 202:.\main.c      ****         {
 203:.\main.c      ****             array[arr_pos] = (array[index] + change);
 762              		.loc 1 203 0
 763 0060 3B1C     		mov	r3, r7
 764 0062 0B33     		add	r3, r3, #11
 765 0064 1B78     		ldrb	r3, [r3]
 766 0066 5B00     		lsl	r3, r3, #1
 767 0068 FA68     		ldr	r2, [r7, #12]
 768 006a D318     		add	r3, r2, r3
 769 006c 3A1C     		mov	r2, r7
 770 006e 1732     		add	r2, r2, #23
 771 0070 1278     		ldrb	r2, [r2]
 772 0072 5200     		lsl	r2, r2, #1
 773 0074 F968     		ldr	r1, [r7, #12]
 774 0076 8A18     		add	r2, r1, r2
 775 0078 1188     		ldrh	r1, [r2]
 776 007a 7A68     		ldr	r2, [r7, #4]
 777 007c 92B2     		uxth	r2, r2
 778 007e 8A18     		add	r2, r1, r2
 779 0080 92B2     		uxth	r2, r2
 780 0082 1A80     		strh	r2, [r3]
 781 0084 33E0     		b	.L44
 782              	.L42:
 204:.\main.c      ****         }
 205:.\main.c      ****         else
 206:.\main.c      ****         {
 207:.\main.c      ****             array[arr_pos] = 1000;
 783              		.loc 1 207 0
 784 0086 3B1C     		mov	r3, r7
 785 0088 0B33     		add	r3, r3, #11
 786 008a 1B78     		ldrb	r3, [r3]
 787 008c 5B00     		lsl	r3, r3, #1
 788 008e FA68     		ldr	r2, [r7, #12]
 789 0090 D318     		add	r3, r2, r3
 790 0092 FA22     		mov	r2, #250
 791 0094 9200     		lsl	r2, r2, #2
 792 0096 1A80     		strh	r2, [r3]
 793 0098 29E0     		b	.L44
 794              	.L41:
 208:.\main.c      ****         }
 209:.\main.c      ****     }
 210:.\main.c      ****     else
 211:.\main.c      ****     {
 212:.\main.c      ****         if(array[index] <= (2000 - change))
 795              		.loc 1 212 0
 796 009a 3B1C     		mov	r3, r7
 797 009c 1733     		add	r3, r3, #23
 798 009e 1B78     		ldrb	r3, [r3]
 799 00a0 5B00     		lsl	r3, r3, #1
 800 00a2 FA68     		ldr	r2, [r7, #12]
 801 00a4 D318     		add	r3, r2, r3
 802 00a6 1B88     		ldrh	r3, [r3]
 803 00a8 1A1C     		mov	r2, r3
 804 00aa 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 19


 805 00ac FA21     		mov	r1, #250
 806 00ae C900     		lsl	r1, r1, #3
 807 00b0 CB1A     		sub	r3, r1, r3
 808 00b2 9A42     		cmp	r2, r3
 809 00b4 12DC     		bgt	.L45
 213:.\main.c      ****         {
 214:.\main.c      ****             array[arr_pos] = (array[index] + change);
 810              		.loc 1 214 0
 811 00b6 3B1C     		mov	r3, r7
 812 00b8 0B33     		add	r3, r3, #11
 813 00ba 1B78     		ldrb	r3, [r3]
 814 00bc 5B00     		lsl	r3, r3, #1
 815 00be FA68     		ldr	r2, [r7, #12]
 816 00c0 D318     		add	r3, r2, r3
 817 00c2 3A1C     		mov	r2, r7
 818 00c4 1732     		add	r2, r2, #23
 819 00c6 1278     		ldrb	r2, [r2]
 820 00c8 5200     		lsl	r2, r2, #1
 821 00ca F968     		ldr	r1, [r7, #12]
 822 00cc 8A18     		add	r2, r1, r2
 823 00ce 1188     		ldrh	r1, [r2]
 824 00d0 7A68     		ldr	r2, [r7, #4]
 825 00d2 92B2     		uxth	r2, r2
 826 00d4 8A18     		add	r2, r1, r2
 827 00d6 92B2     		uxth	r2, r2
 828 00d8 1A80     		strh	r2, [r3]
 829 00da 08E0     		b	.L44
 830              	.L45:
 215:.\main.c      ****         }
 216:.\main.c      ****         else
 217:.\main.c      ****         {
 218:.\main.c      ****             array[arr_pos] = 2000;
 831              		.loc 1 218 0
 832 00dc 3B1C     		mov	r3, r7
 833 00de 0B33     		add	r3, r3, #11
 834 00e0 1B78     		ldrb	r3, [r3]
 835 00e2 5B00     		lsl	r3, r3, #1
 836 00e4 FA68     		ldr	r2, [r7, #12]
 837 00e6 D318     		add	r3, r2, r3
 838 00e8 FA22     		mov	r2, #250
 839 00ea D200     		lsl	r2, r2, #3
 840 00ec 1A80     		strh	r2, [r3]
 841              	.L44:
 219:.\main.c      ****         }
 220:.\main.c      ****     }
 221:.\main.c      ****     
 222:.\main.c      ****     return maintain_array(arr_pos, size);
 842              		.loc 1 222 0
 843 00ee 3B1C     		mov	r3, r7
 844 00f0 0B33     		add	r3, r3, #11
 845 00f2 1A78     		ldrb	r2, [r3]
 846 00f4 3B1C     		mov	r3, r7
 847 00f6 0A33     		add	r3, r3, #10
 848 00f8 1B78     		ldrb	r3, [r3]
 849 00fa 101C     		mov	r0, r2
 850 00fc 191C     		mov	r1, r3
 851 00fe FFF7FEFF 		bl	maintain_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 20


 852 0102 031C     		mov	r3, r0
 223:.\main.c      **** }
 853              		.loc 1 223 0
 854 0104 181C     		mov	r0, r3
 855 0106 BD46     		mov	sp, r7
 856 0108 06B0     		add	sp, sp, #24
 857              		@ sp needed
 858 010a 80BD     		pop	{r7, pc}
 859              		.cfi_endproc
 860              	.LFE39:
 861              		.size	check_update, .-check_update
 862              		.section	.text.pos_to_vel,"ax",%progbits
 863              		.align	2
 864              		.global	pos_to_vel
 865              		.code	16
 866              		.thumb_func
 867              		.type	pos_to_vel, %function
 868              	pos_to_vel:
 869              	.LFB40:
 224:.\main.c      **** 
 225:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 226:.\main.c      **** {
 870              		.loc 1 226 0
 871              		.cfi_startproc
 872 0000 90B5     		push	{r4, r7, lr}
 873              		.cfi_def_cfa_offset 12
 874              		.cfi_offset 4, -12
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 83B0     		sub	sp, sp, #12
 878              		.cfi_def_cfa_offset 24
 879 0004 00AF     		add	r7, sp, #0
 880              		.cfi_def_cfa_register 7
 881 0006 3960     		str	r1, [r7]
 882 0008 111C     		mov	r1, r2
 883 000a 1A1C     		mov	r2, r3
 884 000c FB1D     		add	r3, r7, #7
 885 000e 1870     		strb	r0, [r3]
 886 0010 BB1D     		add	r3, r7, #6
 887 0012 1970     		strb	r1, [r3]
 888 0014 3B1D     		add	r3, r7, #4
 889 0016 1A80     		strh	r2, [r3]
 227:.\main.c      ****     if(command >= 1000 && command < 1125)
 890              		.loc 1 227 0
 891 0018 3B1D     		add	r3, r7, #4
 892 001a 1A88     		ldrh	r2, [r3]
 893 001c 724B     		ldr	r3, .L59
 894 001e 9A42     		cmp	r2, r3
 895 0020 11D9     		bls	.L48
 896              		.loc 1 227 0 is_stmt 0 discriminator 1
 897 0022 3B1D     		add	r3, r7, #4
 898 0024 1A88     		ldrh	r2, [r3]
 899 0026 714B     		ldr	r3, .L59+4
 900 0028 9A42     		cmp	r2, r3
 901 002a 0CD8     		bhi	.L48
 228:.\main.c      ****     {
 229:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 21


 902              		.loc 1 229 0 is_stmt 1
 903 002c FC1D     		add	r4, r7, #7
 904 002e 3868     		ldr	r0, [r7]
 905 0030 FB1D     		add	r3, r7, #7
 906 0032 1978     		ldrb	r1, [r3]
 907 0034 BB1D     		add	r3, r7, #6
 908 0036 1A78     		ldrb	r2, [r3]
 909 0038 6423     		mov	r3, #100
 910 003a 5B42     		neg	r3, r3
 911 003c FFF7FEFF 		bl	check_update
 912 0040 031C     		mov	r3, r0
 913 0042 2370     		strb	r3, [r4]
 914 0044 CAE0     		b	.L49
 915              	.L48:
 230:.\main.c      ****     }
 231:.\main.c      ****     else if(command >= 1125 && command < 1250)
 916              		.loc 1 231 0
 917 0046 3B1D     		add	r3, r7, #4
 918 0048 1A88     		ldrh	r2, [r3]
 919 004a 684B     		ldr	r3, .L59+4
 920 004c 9A42     		cmp	r2, r3
 921 004e 11D9     		bls	.L50
 922              		.loc 1 231 0 is_stmt 0 discriminator 1
 923 0050 3B1D     		add	r3, r7, #4
 924 0052 1A88     		ldrh	r2, [r3]
 925 0054 664B     		ldr	r3, .L59+8
 926 0056 9A42     		cmp	r2, r3
 927 0058 0CD8     		bhi	.L50
 232:.\main.c      ****     {
 233:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 928              		.loc 1 233 0 is_stmt 1
 929 005a FC1D     		add	r4, r7, #7
 930 005c 3868     		ldr	r0, [r7]
 931 005e FB1D     		add	r3, r7, #7
 932 0060 1978     		ldrb	r1, [r3]
 933 0062 BB1D     		add	r3, r7, #6
 934 0064 1A78     		ldrb	r2, [r3]
 935 0066 3223     		mov	r3, #50
 936 0068 5B42     		neg	r3, r3
 937 006a FFF7FEFF 		bl	check_update
 938 006e 031C     		mov	r3, r0
 939 0070 2370     		strb	r3, [r4]
 940 0072 B3E0     		b	.L49
 941              	.L50:
 234:.\main.c      ****     }
 235:.\main.c      ****     else if(command >= 1250 && command < 1375)
 942              		.loc 1 235 0
 943 0074 3B1D     		add	r3, r7, #4
 944 0076 1A88     		ldrh	r2, [r3]
 945 0078 5D4B     		ldr	r3, .L59+8
 946 007a 9A42     		cmp	r2, r3
 947 007c 11D9     		bls	.L51
 948              		.loc 1 235 0 is_stmt 0 discriminator 1
 949 007e 3B1D     		add	r3, r7, #4
 950 0080 1A88     		ldrh	r2, [r3]
 951 0082 5C4B     		ldr	r3, .L59+12
 952 0084 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 22


 953 0086 0CD8     		bhi	.L51
 236:.\main.c      ****     {
 237:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 954              		.loc 1 237 0 is_stmt 1
 955 0088 FC1D     		add	r4, r7, #7
 956 008a 3868     		ldr	r0, [r7]
 957 008c FB1D     		add	r3, r7, #7
 958 008e 1978     		ldrb	r1, [r3]
 959 0090 BB1D     		add	r3, r7, #6
 960 0092 1A78     		ldrb	r2, [r3]
 961 0094 0A23     		mov	r3, #10
 962 0096 5B42     		neg	r3, r3
 963 0098 FFF7FEFF 		bl	check_update
 964 009c 031C     		mov	r3, r0
 965 009e 2370     		strb	r3, [r4]
 966 00a0 9CE0     		b	.L49
 967              	.L51:
 238:.\main.c      ****     }
 239:.\main.c      ****     else if(command >= 1375 && command < 1490)
 968              		.loc 1 239 0
 969 00a2 3B1D     		add	r3, r7, #4
 970 00a4 1A88     		ldrh	r2, [r3]
 971 00a6 534B     		ldr	r3, .L59+12
 972 00a8 9A42     		cmp	r2, r3
 973 00aa 11D9     		bls	.L52
 974              		.loc 1 239 0 is_stmt 0 discriminator 1
 975 00ac 3B1D     		add	r3, r7, #4
 976 00ae 1A88     		ldrh	r2, [r3]
 977 00b0 514B     		ldr	r3, .L59+16
 978 00b2 9A42     		cmp	r2, r3
 979 00b4 0CD8     		bhi	.L52
 240:.\main.c      ****     {
 241:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 980              		.loc 1 241 0 is_stmt 1
 981 00b6 FC1D     		add	r4, r7, #7
 982 00b8 3868     		ldr	r0, [r7]
 983 00ba FB1D     		add	r3, r7, #7
 984 00bc 1978     		ldrb	r1, [r3]
 985 00be BB1D     		add	r3, r7, #6
 986 00c0 1A78     		ldrb	r2, [r3]
 987 00c2 0523     		mov	r3, #5
 988 00c4 5B42     		neg	r3, r3
 989 00c6 FFF7FEFF 		bl	check_update
 990 00ca 031C     		mov	r3, r0
 991 00cc 2370     		strb	r3, [r4]
 992 00ce 85E0     		b	.L49
 993              	.L52:
 242:.\main.c      ****     }
 243:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 994              		.loc 1 243 0
 995 00d0 3B1D     		add	r3, r7, #4
 996 00d2 1A88     		ldrh	r2, [r3]
 997 00d4 494B     		ldr	r3, .L59+20
 998 00d6 9A42     		cmp	r2, r3
 999 00d8 10D8     		bhi	.L53
 1000              		.loc 1 243 0 is_stmt 0 discriminator 1
 1001 00da 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 23


 1002 00dc 1A88     		ldrh	r2, [r3]
 1003 00de 464B     		ldr	r3, .L59+16
 1004 00e0 9A42     		cmp	r2, r3
 1005 00e2 0BD9     		bls	.L53
 244:.\main.c      ****     {
 245:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1006              		.loc 1 245 0 is_stmt 1
 1007 00e4 FC1D     		add	r4, r7, #7
 1008 00e6 FB1D     		add	r3, r7, #7
 1009 00e8 1A78     		ldrb	r2, [r3]
 1010 00ea BB1D     		add	r3, r7, #6
 1011 00ec 1B78     		ldrb	r3, [r3]
 1012 00ee 101C     		mov	r0, r2
 1013 00f0 191C     		mov	r1, r3
 1014 00f2 FFF7FEFF 		bl	maintain_array
 1015 00f6 031C     		mov	r3, r0
 1016 00f8 2370     		strb	r3, [r4]
 1017 00fa 6FE0     		b	.L49
 1018              	.L53:
 246:.\main.c      ****     }
 247:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1019              		.loc 1 247 0
 1020 00fc 3B1D     		add	r3, r7, #4
 1021 00fe 1A88     		ldrh	r2, [r3]
 1022 0100 3E4B     		ldr	r3, .L59+20
 1023 0102 9A42     		cmp	r2, r3
 1024 0104 13D9     		bls	.L54
 1025              		.loc 1 247 0 is_stmt 0 discriminator 1
 1026 0106 3B1D     		add	r3, r7, #4
 1027 0108 1A88     		ldrh	r2, [r3]
 1028 010a 3D4B     		ldr	r3, .L59+24
 1029 010c 9A42     		cmp	r2, r3
 1030 010e 0ED8     		bhi	.L54
 248:.\main.c      ****     {
 249:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1031              		.loc 1 249 0 is_stmt 1
 1032 0110 FC1D     		add	r4, r7, #7
 1033 0112 3968     		ldr	r1, [r7]
 1034 0114 FB1D     		add	r3, r7, #7
 1035 0116 1A78     		ldrb	r2, [r3]
 1036 0118 BB1D     		add	r3, r7, #6
 1037 011a 1B78     		ldrb	r3, [r3]
 1038 011c 081C     		mov	r0, r1
 1039 011e 111C     		mov	r1, r2
 1040 0120 1A1C     		mov	r2, r3
 1041 0122 0523     		mov	r3, #5
 1042 0124 FFF7FEFF 		bl	check_update
 1043 0128 031C     		mov	r3, r0
 1044 012a 2370     		strb	r3, [r4]
 1045 012c 56E0     		b	.L49
 1046              	.L54:
 250:.\main.c      ****     }
 251:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1047              		.loc 1 251 0
 1048 012e 3B1D     		add	r3, r7, #4
 1049 0130 1A88     		ldrh	r2, [r3]
 1050 0132 334B     		ldr	r3, .L59+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 24


 1051 0134 9A42     		cmp	r2, r3
 1052 0136 13D9     		bls	.L55
 1053              		.loc 1 251 0 is_stmt 0 discriminator 1
 1054 0138 3B1D     		add	r3, r7, #4
 1055 013a 1A88     		ldrh	r2, [r3]
 1056 013c 314B     		ldr	r3, .L59+28
 1057 013e 9A42     		cmp	r2, r3
 1058 0140 0ED8     		bhi	.L55
 252:.\main.c      ****     {
 253:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1059              		.loc 1 253 0 is_stmt 1
 1060 0142 FC1D     		add	r4, r7, #7
 1061 0144 3968     		ldr	r1, [r7]
 1062 0146 FB1D     		add	r3, r7, #7
 1063 0148 1A78     		ldrb	r2, [r3]
 1064 014a BB1D     		add	r3, r7, #6
 1065 014c 1B78     		ldrb	r3, [r3]
 1066 014e 081C     		mov	r0, r1
 1067 0150 111C     		mov	r1, r2
 1068 0152 1A1C     		mov	r2, r3
 1069 0154 0A23     		mov	r3, #10
 1070 0156 FFF7FEFF 		bl	check_update
 1071 015a 031C     		mov	r3, r0
 1072 015c 2370     		strb	r3, [r4]
 1073 015e 3DE0     		b	.L49
 1074              	.L55:
 254:.\main.c      ****     }
 255:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1075              		.loc 1 255 0
 1076 0160 3B1D     		add	r3, r7, #4
 1077 0162 1A88     		ldrh	r2, [r3]
 1078 0164 274B     		ldr	r3, .L59+28
 1079 0166 9A42     		cmp	r2, r3
 1080 0168 13D9     		bls	.L56
 1081              		.loc 1 255 0 is_stmt 0 discriminator 1
 1082 016a 3B1D     		add	r3, r7, #4
 1083 016c 1A88     		ldrh	r2, [r3]
 1084 016e 264B     		ldr	r3, .L59+32
 1085 0170 9A42     		cmp	r2, r3
 1086 0172 0ED8     		bhi	.L56
 256:.\main.c      ****     {
 257:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1087              		.loc 1 257 0 is_stmt 1
 1088 0174 FC1D     		add	r4, r7, #7
 1089 0176 3968     		ldr	r1, [r7]
 1090 0178 FB1D     		add	r3, r7, #7
 1091 017a 1A78     		ldrb	r2, [r3]
 1092 017c BB1D     		add	r3, r7, #6
 1093 017e 1B78     		ldrb	r3, [r3]
 1094 0180 081C     		mov	r0, r1
 1095 0182 111C     		mov	r1, r2
 1096 0184 1A1C     		mov	r2, r3
 1097 0186 3223     		mov	r3, #50
 1098 0188 FFF7FEFF 		bl	check_update
 1099 018c 031C     		mov	r3, r0
 1100 018e 2370     		strb	r3, [r4]
 1101 0190 24E0     		b	.L49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 25


 1102              	.L56:
 258:.\main.c      ****     }
 259:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1103              		.loc 1 259 0
 1104 0192 3B1D     		add	r3, r7, #4
 1105 0194 1A88     		ldrh	r2, [r3]
 1106 0196 1C4B     		ldr	r3, .L59+32
 1107 0198 9A42     		cmp	r2, r3
 1108 019a 14D9     		bls	.L57
 1109              		.loc 1 259 0 is_stmt 0 discriminator 1
 1110 019c 3B1D     		add	r3, r7, #4
 1111 019e 1A88     		ldrh	r2, [r3]
 1112 01a0 FA23     		mov	r3, #250
 1113 01a2 DB00     		lsl	r3, r3, #3
 1114 01a4 9A42     		cmp	r2, r3
 1115 01a6 0ED8     		bhi	.L57
 260:.\main.c      ****     {
 261:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1116              		.loc 1 261 0 is_stmt 1
 1117 01a8 FC1D     		add	r4, r7, #7
 1118 01aa 3968     		ldr	r1, [r7]
 1119 01ac FB1D     		add	r3, r7, #7
 1120 01ae 1A78     		ldrb	r2, [r3]
 1121 01b0 BB1D     		add	r3, r7, #6
 1122 01b2 1B78     		ldrb	r3, [r3]
 1123 01b4 081C     		mov	r0, r1
 1124 01b6 111C     		mov	r1, r2
 1125 01b8 1A1C     		mov	r2, r3
 1126 01ba 6423     		mov	r3, #100
 1127 01bc FFF7FEFF 		bl	check_update
 1128 01c0 031C     		mov	r3, r0
 1129 01c2 2370     		strb	r3, [r4]
 1130 01c4 0AE0     		b	.L49
 1131              	.L57:
 262:.\main.c      ****     }
 263:.\main.c      ****     else
 264:.\main.c      ****     {
 265:.\main.c      ****         //throw error
 266:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1132              		.loc 1 266 0
 1133 01c6 FC1D     		add	r4, r7, #7
 1134 01c8 FB1D     		add	r3, r7, #7
 1135 01ca 1A78     		ldrb	r2, [r3]
 1136 01cc BB1D     		add	r3, r7, #6
 1137 01ce 1B78     		ldrb	r3, [r3]
 1138 01d0 101C     		mov	r0, r2
 1139 01d2 191C     		mov	r1, r3
 1140 01d4 FFF7FEFF 		bl	maintain_array
 1141 01d8 031C     		mov	r3, r0
 1142 01da 2370     		strb	r3, [r4]
 1143              	.L49:
 267:.\main.c      ****     }
 268:.\main.c      ****     return cur_pos;
 1144              		.loc 1 268 0
 1145 01dc FB1D     		add	r3, r7, #7
 1146 01de 1B78     		ldrb	r3, [r3]
 269:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 26


 1147              		.loc 1 269 0
 1148 01e0 181C     		mov	r0, r3
 1149 01e2 BD46     		mov	sp, r7
 1150 01e4 03B0     		add	sp, sp, #12
 1151              		@ sp needed
 1152 01e6 90BD     		pop	{r4, r7, pc}
 1153              	.L60:
 1154              		.align	2
 1155              	.L59:
 1156 01e8 E7030000 		.word	999
 1157 01ec 64040000 		.word	1124
 1158 01f0 E1040000 		.word	1249
 1159 01f4 5E050000 		.word	1374
 1160 01f8 D1050000 		.word	1489
 1161 01fc E6050000 		.word	1510
 1162 0200 59060000 		.word	1625
 1163 0204 D6060000 		.word	1750
 1164 0208 53070000 		.word	1875
 1165              		.cfi_endproc
 1166              	.LFE40:
 1167              		.size	pos_to_vel, .-pos_to_vel
 1168              		.section	.text.make_command,"ax",%progbits
 1169              		.align	2
 1170              		.global	make_command
 1171              		.code	16
 1172              		.thumb_func
 1173              		.type	make_command, %function
 1174              	make_command:
 1175              	.LFB41:
 270:.\main.c      **** 
 271:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 272:.\main.c      **** {
 1176              		.loc 1 272 0
 1177              		.cfi_startproc
 1178 0000 80B5     		push	{r7, lr}
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 7, -8
 1181              		.cfi_offset 14, -4
 1182 0002 84B0     		sub	sp, sp, #16
 1183              		.cfi_def_cfa_offset 24
 1184 0004 00AF     		add	r7, sp, #0
 1185              		.cfi_def_cfa_register 7
 1186 0006 7860     		str	r0, [r7, #4]
 1187 0008 FB1C     		add	r3, r7, #3
 1188 000a 1970     		strb	r1, [r3]
 1189 000c BB1C     		add	r3, r7, #2
 1190 000e 1A70     		strb	r2, [r3]
 273:.\main.c      ****     uint16 command;
 274:.\main.c      ****     int16 temp1;
 275:.\main.c      ****     int16 temp2;
 276:.\main.c      ****     int16 temp3;
 277:.\main.c      ****     
 278:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1191              		.loc 1 278 0
 1192 0010 FB1C     		add	r3, r7, #3
 1193 0012 1B78     		ldrb	r3, [r3]
 1194 0014 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 27


 1195 0016 D318     		add	r3, r2, r3
 1196 0018 1B78     		ldrb	r3, [r3]
 1197 001a 5BB2     		sxtb	r3, r3
 1198 001c 1A02     		lsl	r2, r3, #8
 1199 001e 3B1C     		mov	r3, r7
 1200 0020 0E33     		add	r3, r3, #14
 1201 0022 1A80     		strh	r2, [r3]
 279:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1202              		.loc 1 279 0
 1203 0024 BB1C     		add	r3, r7, #2
 1204 0026 1B78     		ldrb	r3, [r3]
 1205 0028 7A68     		ldr	r2, [r7, #4]
 1206 002a D318     		add	r3, r2, r3
 1207 002c 1B78     		ldrb	r3, [r3]
 1208 002e 5BB2     		sxtb	r3, r3
 1209 0030 9AB2     		uxth	r2, r3
 1210 0032 3B1C     		mov	r3, r7
 1211 0034 0C33     		add	r3, r3, #12
 1212 0036 111C     		add	r1, r2, #0
 1213 0038 FF22     		mov	r2, #255
 1214 003a 0A40     		and	r2, r1
 1215 003c 1A80     		strh	r2, [r3]
 280:.\main.c      ****     temp3 = temp1 | temp2;
 1216              		.loc 1 280 0
 1217 003e 3B1C     		mov	r3, r7
 1218 0040 0A33     		add	r3, r3, #10
 1219 0042 391C     		mov	r1, r7
 1220 0044 0E31     		add	r1, r1, #14
 1221 0046 3A1C     		mov	r2, r7
 1222 0048 0C32     		add	r2, r2, #12
 1223 004a 0988     		ldrh	r1, [r1]
 1224 004c 1288     		ldrh	r2, [r2]
 1225 004e 0A43     		orr	r2, r1
 1226 0050 1A80     		strh	r2, [r3]
 281:.\main.c      ****     command = (temp3/2) + 1500;
 1227              		.loc 1 281 0
 1228 0052 3B1C     		mov	r3, r7
 1229 0054 0A33     		add	r3, r3, #10
 1230 0056 0021     		mov	r1, #0
 1231 0058 5B5E     		ldrsh	r3, [r3, r1]
 1232 005a 002B     		cmp	r3, #0
 1233 005c 00DA     		bge	.L62
 1234 005e 0133     		add	r3, r3, #1
 1235              	.L62:
 1236 0060 5B10     		asr	r3, r3, #1
 1237 0062 9BB2     		uxth	r3, r3
 1238 0064 9AB2     		uxth	r2, r3
 1239 0066 3B1C     		mov	r3, r7
 1240 0068 0833     		add	r3, r3, #8
 1241 006a 0549     		ldr	r1, .L64
 1242 006c 5218     		add	r2, r2, r1
 1243 006e 1A80     		strh	r2, [r3]
 282:.\main.c      ****     return command;
 1244              		.loc 1 282 0
 1245 0070 3B1C     		mov	r3, r7
 1246 0072 0833     		add	r3, r3, #8
 1247 0074 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 28


 283:.\main.c      **** }
 1248              		.loc 1 283 0
 1249 0076 181C     		mov	r0, r3
 1250 0078 BD46     		mov	sp, r7
 1251 007a 04B0     		add	sp, sp, #16
 1252              		@ sp needed
 1253 007c 80BD     		pop	{r7, pc}
 1254              	.L65:
 1255 007e C046     		.align	2
 1256              	.L64:
 1257 0080 DC050000 		.word	1500
 1258              		.cfi_endproc
 1259              	.LFE41:
 1260              		.size	make_command, .-make_command
 1261              		.section	.text.potFeedback,"ax",%progbits
 1262              		.align	2
 1263              		.global	potFeedback
 1264              		.code	16
 1265              		.thumb_func
 1266              		.type	potFeedback, %function
 1267              	potFeedback:
 1268              	.LFB42:
 284:.\main.c      **** 
 285:.\main.c      **** uint16 potFeedback(uint32 channel)
 286:.\main.c      **** {
 1269              		.loc 1 286 0
 1270              		.cfi_startproc
 1271 0000 80B5     		push	{r7, lr}
 1272              		.cfi_def_cfa_offset 8
 1273              		.cfi_offset 7, -8
 1274              		.cfi_offset 14, -4
 1275 0002 84B0     		sub	sp, sp, #16
 1276              		.cfi_def_cfa_offset 24
 1277 0004 00AF     		add	r7, sp, #0
 1278              		.cfi_def_cfa_register 7
 1279 0006 7860     		str	r0, [r7, #4]
 287:.\main.c      ****     //TODO: uncomment this section
 288:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1280              		.loc 1 288 0
 1281 0008 7B68     		ldr	r3, [r7, #4]
 1282 000a 181C     		mov	r0, r3
 1283 000c FFF7FEFF 		bl	ADC_GetResult16
 1284 0010 031C     		mov	r3, r0
 1285 0012 1A1C     		mov	r2, r3
 1286 0014 3B1C     		mov	r3, r7
 1287 0016 0E33     		add	r3, r3, #14
 1288 0018 1A80     		strh	r2, [r3]
 289:.\main.c      ****     //uint16 feedback = 500;
 290:.\main.c      ****     return feedback;
 1289              		.loc 1 290 0
 1290 001a 3B1C     		mov	r3, r7
 1291 001c 0E33     		add	r3, r3, #14
 1292 001e 1B88     		ldrh	r3, [r3]
 291:.\main.c      **** }
 1293              		.loc 1 291 0
 1294 0020 181C     		mov	r0, r3
 1295 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 29


 1296 0024 04B0     		add	sp, sp, #16
 1297              		@ sp needed
 1298 0026 80BD     		pop	{r7, pc}
 1299              		.cfi_endproc
 1300              	.LFE42:
 1301              		.size	potFeedback, .-potFeedback
 1302              		.section	.text.send_feedback,"ax",%progbits
 1303              		.align	2
 1304              		.global	send_feedback
 1305              		.code	16
 1306              		.thumb_func
 1307              		.type	send_feedback, %function
 1308              	send_feedback:
 1309              	.LFB43:
 292:.\main.c      **** 
 293:.\main.c      **** void send_feedback()
 294:.\main.c      **** {
 1310              		.loc 1 294 0
 1311              		.cfi_startproc
 1312 0000 80B5     		push	{r7, lr}
 1313              		.cfi_def_cfa_offset 8
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 00AF     		add	r7, sp, #0
 1317              		.cfi_def_cfa_register 7
 295:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 296:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 297:.\main.c      ****     //TODO define system state
 298:.\main.c      ****     //send packet via serial to wiznet
 299:.\main.c      **** }
 1318              		.loc 1 299 0
 1319 0004 BD46     		mov	sp, r7
 1320              		@ sp needed
 1321 0006 80BD     		pop	{r7, pc}
 1322              		.cfi_endproc
 1323              	.LFE43:
 1324              		.size	send_feedback, .-send_feedback
 1325              		.section	.text.fill_data_array,"ax",%progbits
 1326              		.align	2
 1327              		.global	fill_data_array
 1328              		.code	16
 1329              		.thumb_func
 1330              		.type	fill_data_array, %function
 1331              	fill_data_array:
 1332              	.LFB44:
 300:.\main.c      **** 
 301:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 302:.\main.c      **** void fill_data_array()
 303:.\main.c      **** {
 1333              		.loc 1 303 0
 1334              		.cfi_startproc
 1335 0000 80B5     		push	{r7, lr}
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 7, -8
 1338              		.cfi_offset 14, -4
 1339 0002 00AF     		add	r7, sp, #0
 1340              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 30


 304:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1341              		.loc 1 304 0
 1342 0004 034B     		ldr	r3, .L70
 1343 0006 181C     		mov	r0, r3
 1344 0008 1621     		mov	r1, #22
 1345 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 305:.\main.c      **** //    uint8 i = 0;
 306:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 307:.\main.c      **** //    {
 308:.\main.c      **** //        data_array[i] = test_array[i];
 309:.\main.c      **** //    }
 310:.\main.c      **** }
 1346              		.loc 1 310 0
 1347 000e BD46     		mov	sp, r7
 1348              		@ sp needed
 1349 0010 80BD     		pop	{r7, pc}
 1350              	.L71:
 1351 0012 C046     		.align	2
 1352              	.L70:
 1353 0014 00000000 		.word	data_array
 1354              		.cfi_endproc
 1355              	.LFE44:
 1356              		.size	fill_data_array, .-fill_data_array
 1357              		.section	.text.ServoGoalPosition,"ax",%progbits
 1358              		.align	2
 1359              		.global	ServoGoalPosition
 1360              		.code	16
 1361              		.thumb_func
 1362              		.type	ServoGoalPosition, %function
 1363              	ServoGoalPosition:
 1364              	.LFB45:
 311:.\main.c      **** 
 312:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 313:.\main.c      **** {
 1365              		.loc 1 313 0
 1366              		.cfi_startproc
 1367 0000 80B5     		push	{r7, lr}
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0002 86B0     		sub	sp, sp, #24
 1372              		.cfi_def_cfa_offset 32
 1373 0004 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 1375 0006 0A1C     		mov	r2, r1
 1376 0008 FB1D     		add	r3, r7, #7
 1377 000a 011C     		add	r1, r0, #0
 1378 000c 1970     		strb	r1, [r3]
 1379 000e 3B1D     		add	r3, r7, #4
 1380 0010 1A80     		strh	r2, [r3]
 314:.\main.c      ****     uint8 array[9];
 315:.\main.c      ****     
 316:.\main.c      ****     array[0] = 0xFF;
 1381              		.loc 1 316 0
 1382 0012 3B1C     		mov	r3, r7
 1383 0014 0C33     		add	r3, r3, #12
 1384 0016 FF22     		mov	r2, #255
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 31


 1385 0018 1A70     		strb	r2, [r3]
 317:.\main.c      ****     array[1] = 0xFF;
 1386              		.loc 1 317 0
 1387 001a 3B1C     		mov	r3, r7
 1388 001c 0C33     		add	r3, r3, #12
 1389 001e FF22     		mov	r2, #255
 1390 0020 5A70     		strb	r2, [r3, #1]
 318:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1391              		.loc 1 318 0
 1392 0022 3B1C     		mov	r3, r7
 1393 0024 0C33     		add	r3, r3, #12
 1394 0026 FA1D     		add	r2, r7, #7
 1395 0028 1278     		ldrb	r2, [r2]
 1396 002a 9A70     		strb	r2, [r3, #2]
 319:.\main.c      ****     array[3] = 0x05;
 1397              		.loc 1 319 0
 1398 002c 3B1C     		mov	r3, r7
 1399 002e 0C33     		add	r3, r3, #12
 1400 0030 0522     		mov	r2, #5
 1401 0032 DA70     		strb	r2, [r3, #3]
 320:.\main.c      ****     array[4] = 0x03; //write instruction
 1402              		.loc 1 320 0
 1403 0034 3B1C     		mov	r3, r7
 1404 0036 0C33     		add	r3, r3, #12
 1405 0038 0322     		mov	r2, #3
 1406 003a 1A71     		strb	r2, [r3, #4]
 321:.\main.c      ****     array[5] = 0x1E;
 1407              		.loc 1 321 0
 1408 003c 3B1C     		mov	r3, r7
 1409 003e 0C33     		add	r3, r3, #12
 1410 0040 1E22     		mov	r2, #30
 1411 0042 5A71     		strb	r2, [r3, #5]
 322:.\main.c      ****     array[6] = position;
 1412              		.loc 1 322 0
 1413 0044 3B1D     		add	r3, r7, #4
 1414 0046 1B88     		ldrh	r3, [r3]
 1415 0048 DAB2     		uxtb	r2, r3
 1416 004a 3B1C     		mov	r3, r7
 1417 004c 0C33     		add	r3, r3, #12
 1418 004e 9A71     		strb	r2, [r3, #6]
 323:.\main.c      ****     array[7] = position >> 8;
 1419              		.loc 1 323 0
 1420 0050 3B1D     		add	r3, r7, #4
 1421 0052 1B88     		ldrh	r3, [r3]
 1422 0054 1B0A     		lsr	r3, r3, #8
 1423 0056 9BB2     		uxth	r3, r3
 1424 0058 DAB2     		uxtb	r2, r3
 1425 005a 3B1C     		mov	r3, r7
 1426 005c 0C33     		add	r3, r3, #12
 1427 005e DA71     		strb	r2, [r3, #7]
 324:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1428              		.loc 1 324 0
 1429 0060 3B1C     		mov	r3, r7
 1430 0062 0C33     		add	r3, r3, #12
 1431 0064 9A79     		ldrb	r2, [r3, #6]
 1432 0066 FB1D     		add	r3, r7, #7
 1433 0068 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 32


 1434 006a D318     		add	r3, r2, r3
 1435 006c DAB2     		uxtb	r2, r3
 1436 006e 3B1C     		mov	r3, r7
 1437 0070 0C33     		add	r3, r3, #12
 1438 0072 DB79     		ldrb	r3, [r3, #7]
 1439 0074 D318     		add	r3, r2, r3
 1440 0076 DBB2     		uxtb	r3, r3
 1441 0078 2633     		add	r3, r3, #38
 1442 007a DBB2     		uxtb	r3, r3
 1443 007c DB43     		mvn	r3, r3
 1444 007e DAB2     		uxtb	r2, r3
 1445 0080 3B1C     		mov	r3, r7
 1446 0082 0C33     		add	r3, r3, #12
 1447 0084 1A72     		strb	r2, [r3, #8]
 325:.\main.c      ****     
 326:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1448              		.loc 1 326 0
 1449 0086 3B1C     		mov	r3, r7
 1450 0088 0C33     		add	r3, r3, #12
 1451 008a 181C     		mov	r0, r3
 1452 008c 0921     		mov	r1, #9
 1453 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 327:.\main.c      **** }
 1454              		.loc 1 327 0
 1455 0092 BD46     		mov	sp, r7
 1456 0094 06B0     		add	sp, sp, #24
 1457              		@ sp needed
 1458 0096 80BD     		pop	{r7, pc}
 1459              		.cfi_endproc
 1460              	.LFE45:
 1461              		.size	ServoGoalPosition, .-ServoGoalPosition
 1462              		.section	.text.SetServoTorque,"ax",%progbits
 1463              		.align	2
 1464              		.global	SetServoTorque
 1465              		.code	16
 1466              		.thumb_func
 1467              		.type	SetServoTorque, %function
 1468              	SetServoTorque:
 1469              	.LFB46:
 328:.\main.c      **** 
 329:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 330:.\main.c      **** {
 1470              		.loc 1 330 0
 1471              		.cfi_startproc
 1472 0000 80B5     		push	{r7, lr}
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 7, -8
 1475              		.cfi_offset 14, -4
 1476 0002 86B0     		sub	sp, sp, #24
 1477              		.cfi_def_cfa_offset 32
 1478 0004 00AF     		add	r7, sp, #0
 1479              		.cfi_def_cfa_register 7
 1480 0006 0A1C     		mov	r2, r1
 1481 0008 FB1D     		add	r3, r7, #7
 1482 000a 011C     		add	r1, r0, #0
 1483 000c 1970     		strb	r1, [r3]
 1484 000e 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 33


 1485 0010 1A80     		strh	r2, [r3]
 331:.\main.c      ****     uint8 array[9];
 332:.\main.c      ****     
 333:.\main.c      ****     array[0] = 0xFF;
 1486              		.loc 1 333 0
 1487 0012 3B1C     		mov	r3, r7
 1488 0014 0C33     		add	r3, r3, #12
 1489 0016 FF22     		mov	r2, #255
 1490 0018 1A70     		strb	r2, [r3]
 334:.\main.c      ****     array[1] = 0xFF;
 1491              		.loc 1 334 0
 1492 001a 3B1C     		mov	r3, r7
 1493 001c 0C33     		add	r3, r3, #12
 1494 001e FF22     		mov	r2, #255
 1495 0020 5A70     		strb	r2, [r3, #1]
 335:.\main.c      ****     array[2] = servoID; 
 1496              		.loc 1 335 0
 1497 0022 3B1C     		mov	r3, r7
 1498 0024 0C33     		add	r3, r3, #12
 1499 0026 FA1D     		add	r2, r7, #7
 1500 0028 1278     		ldrb	r2, [r2]
 1501 002a 9A70     		strb	r2, [r3, #2]
 336:.\main.c      ****     array[3] = 0x05;
 1502              		.loc 1 336 0
 1503 002c 3B1C     		mov	r3, r7
 1504 002e 0C33     		add	r3, r3, #12
 1505 0030 0522     		mov	r2, #5
 1506 0032 DA70     		strb	r2, [r3, #3]
 337:.\main.c      ****     array[4] = 0x03; //write instruction
 1507              		.loc 1 337 0
 1508 0034 3B1C     		mov	r3, r7
 1509 0036 0C33     		add	r3, r3, #12
 1510 0038 0322     		mov	r2, #3
 1511 003a 1A71     		strb	r2, [r3, #4]
 338:.\main.c      ****     array[5] = 0x0E;
 1512              		.loc 1 338 0
 1513 003c 3B1C     		mov	r3, r7
 1514 003e 0C33     		add	r3, r3, #12
 1515 0040 0E22     		mov	r2, #14
 1516 0042 5A71     		strb	r2, [r3, #5]
 339:.\main.c      ****     array[6] = torque;
 1517              		.loc 1 339 0
 1518 0044 3B1D     		add	r3, r7, #4
 1519 0046 1B88     		ldrh	r3, [r3]
 1520 0048 DAB2     		uxtb	r2, r3
 1521 004a 3B1C     		mov	r3, r7
 1522 004c 0C33     		add	r3, r3, #12
 1523 004e 9A71     		strb	r2, [r3, #6]
 340:.\main.c      ****     array[7] = torque >> 8;
 1524              		.loc 1 340 0
 1525 0050 3B1D     		add	r3, r7, #4
 1526 0052 1B88     		ldrh	r3, [r3]
 1527 0054 1B0A     		lsr	r3, r3, #8
 1528 0056 9BB2     		uxth	r3, r3
 1529 0058 DAB2     		uxtb	r2, r3
 1530 005a 3B1C     		mov	r3, r7
 1531 005c 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 34


 1532 005e DA71     		strb	r2, [r3, #7]
 341:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1533              		.loc 1 341 0
 1534 0060 3B1C     		mov	r3, r7
 1535 0062 0C33     		add	r3, r3, #12
 1536 0064 9A79     		ldrb	r2, [r3, #6]
 1537 0066 FB1D     		add	r3, r7, #7
 1538 0068 1B78     		ldrb	r3, [r3]
 1539 006a D318     		add	r3, r2, r3
 1540 006c DAB2     		uxtb	r2, r3
 1541 006e 3B1C     		mov	r3, r7
 1542 0070 0C33     		add	r3, r3, #12
 1543 0072 DB79     		ldrb	r3, [r3, #7]
 1544 0074 D318     		add	r3, r2, r3
 1545 0076 DBB2     		uxtb	r3, r3
 1546 0078 1633     		add	r3, r3, #22
 1547 007a DBB2     		uxtb	r3, r3
 1548 007c DB43     		mvn	r3, r3
 1549 007e DAB2     		uxtb	r2, r3
 1550 0080 3B1C     		mov	r3, r7
 1551 0082 0C33     		add	r3, r3, #12
 1552 0084 1A72     		strb	r2, [r3, #8]
 342:.\main.c      ****     
 343:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1553              		.loc 1 343 0
 1554 0086 3B1C     		mov	r3, r7
 1555 0088 0C33     		add	r3, r3, #12
 1556 008a 181C     		mov	r0, r3
 1557 008c 0921     		mov	r1, #9
 1558 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 344:.\main.c      ****     
 345:.\main.c      **** }    
 1559              		.loc 1 345 0
 1560 0092 BD46     		mov	sp, r7
 1561 0094 06B0     		add	sp, sp, #24
 1562              		@ sp needed
 1563 0096 80BD     		pop	{r7, pc}
 1564              		.cfi_endproc
 1565              	.LFE46:
 1566              		.size	SetServoTorque, .-SetServoTorque
 1567              		.section	.text.ServoSpeed,"ax",%progbits
 1568              		.align	2
 1569              		.global	ServoSpeed
 1570              		.code	16
 1571              		.thumb_func
 1572              		.type	ServoSpeed, %function
 1573              	ServoSpeed:
 1574              	.LFB47:
 346:.\main.c      **** 
 347:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 348:.\main.c      **** {
 1575              		.loc 1 348 0
 1576              		.cfi_startproc
 1577 0000 80B5     		push	{r7, lr}
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 7, -8
 1580              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 35


 1581 0002 86B0     		sub	sp, sp, #24
 1582              		.cfi_def_cfa_offset 32
 1583 0004 00AF     		add	r7, sp, #0
 1584              		.cfi_def_cfa_register 7
 1585 0006 0A1C     		mov	r2, r1
 1586 0008 FB1D     		add	r3, r7, #7
 1587 000a 011C     		add	r1, r0, #0
 1588 000c 1970     		strb	r1, [r3]
 1589 000e 3B1D     		add	r3, r7, #4
 1590 0010 1A80     		strh	r2, [r3]
 349:.\main.c      ****     uint8 array[9];
 350:.\main.c      ****     
 351:.\main.c      ****     array[0] = 0xFF;
 1591              		.loc 1 351 0
 1592 0012 3B1C     		mov	r3, r7
 1593 0014 0C33     		add	r3, r3, #12
 1594 0016 FF22     		mov	r2, #255
 1595 0018 1A70     		strb	r2, [r3]
 352:.\main.c      ****     array[1] = 0xFF;
 1596              		.loc 1 352 0
 1597 001a 3B1C     		mov	r3, r7
 1598 001c 0C33     		add	r3, r3, #12
 1599 001e FF22     		mov	r2, #255
 1600 0020 5A70     		strb	r2, [r3, #1]
 353:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1601              		.loc 1 353 0
 1602 0022 3B1C     		mov	r3, r7
 1603 0024 0C33     		add	r3, r3, #12
 1604 0026 FA1D     		add	r2, r7, #7
 1605 0028 1278     		ldrb	r2, [r2]
 1606 002a 9A70     		strb	r2, [r3, #2]
 354:.\main.c      ****     array[3] = 0x05;
 1607              		.loc 1 354 0
 1608 002c 3B1C     		mov	r3, r7
 1609 002e 0C33     		add	r3, r3, #12
 1610 0030 0522     		mov	r2, #5
 1611 0032 DA70     		strb	r2, [r3, #3]
 355:.\main.c      ****     array[4] = 0x03; //write instruction
 1612              		.loc 1 355 0
 1613 0034 3B1C     		mov	r3, r7
 1614 0036 0C33     		add	r3, r3, #12
 1615 0038 0322     		mov	r2, #3
 1616 003a 1A71     		strb	r2, [r3, #4]
 356:.\main.c      ****     array[5] = 0x20;
 1617              		.loc 1 356 0
 1618 003c 3B1C     		mov	r3, r7
 1619 003e 0C33     		add	r3, r3, #12
 1620 0040 2022     		mov	r2, #32
 1621 0042 5A71     		strb	r2, [r3, #5]
 357:.\main.c      ****     array[6] = speed;
 1622              		.loc 1 357 0
 1623 0044 3B1D     		add	r3, r7, #4
 1624 0046 1B88     		ldrh	r3, [r3]
 1625 0048 DAB2     		uxtb	r2, r3
 1626 004a 3B1C     		mov	r3, r7
 1627 004c 0C33     		add	r3, r3, #12
 1628 004e 9A71     		strb	r2, [r3, #6]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 36


 358:.\main.c      ****     array[7] = speed >> 8;
 1629              		.loc 1 358 0
 1630 0050 3B1D     		add	r3, r7, #4
 1631 0052 1B88     		ldrh	r3, [r3]
 1632 0054 1B0A     		lsr	r3, r3, #8
 1633 0056 9BB2     		uxth	r3, r3
 1634 0058 DAB2     		uxtb	r2, r3
 1635 005a 3B1C     		mov	r3, r7
 1636 005c 0C33     		add	r3, r3, #12
 1637 005e DA71     		strb	r2, [r3, #7]
 359:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1638              		.loc 1 359 0
 1639 0060 3B1C     		mov	r3, r7
 1640 0062 0C33     		add	r3, r3, #12
 1641 0064 9A79     		ldrb	r2, [r3, #6]
 1642 0066 FB1D     		add	r3, r7, #7
 1643 0068 1B78     		ldrb	r3, [r3]
 1644 006a D318     		add	r3, r2, r3
 1645 006c DAB2     		uxtb	r2, r3
 1646 006e 3B1C     		mov	r3, r7
 1647 0070 0C33     		add	r3, r3, #12
 1648 0072 DB79     		ldrb	r3, [r3, #7]
 1649 0074 D318     		add	r3, r2, r3
 1650 0076 DBB2     		uxtb	r3, r3
 1651 0078 2833     		add	r3, r3, #40
 1652 007a DBB2     		uxtb	r3, r3
 1653 007c DB43     		mvn	r3, r3
 1654 007e DAB2     		uxtb	r2, r3
 1655 0080 3B1C     		mov	r3, r7
 1656 0082 0C33     		add	r3, r3, #12
 1657 0084 1A72     		strb	r2, [r3, #8]
 360:.\main.c      ****     
 361:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1658              		.loc 1 361 0
 1659 0086 3B1C     		mov	r3, r7
 1660 0088 0C33     		add	r3, r3, #12
 1661 008a 181C     		mov	r0, r3
 1662 008c 0921     		mov	r1, #9
 1663 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 362:.\main.c      ****     
 363:.\main.c      **** }
 1664              		.loc 1 363 0
 1665 0092 BD46     		mov	sp, r7
 1666 0094 06B0     		add	sp, sp, #24
 1667              		@ sp needed
 1668 0096 80BD     		pop	{r7, pc}
 1669              		.cfi_endproc
 1670              	.LFE47:
 1671              		.size	ServoSpeed, .-ServoSpeed
 1672              		.comm	wristTilt_state,1,1
 1673              		.section	.text.wristTilt,"ax",%progbits
 1674              		.align	2
 1675              		.global	wristTilt
 1676              		.code	16
 1677              		.thumb_func
 1678              		.type	wristTilt, %function
 1679              	wristTilt:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 37


 1680              	.LFB48:
 364:.\main.c      **** 
 365:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 366:.\main.c      **** //control the tilting motion of the wrist
 367:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 368:.\main.c      **** {
 1681              		.loc 1 368 0
 1682              		.cfi_startproc
 1683 0000 90B5     		push	{r4, r7, lr}
 1684              		.cfi_def_cfa_offset 12
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 7, -8
 1687              		.cfi_offset 14, -4
 1688 0002 85B0     		sub	sp, sp, #20
 1689              		.cfi_def_cfa_offset 32
 1690 0004 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 1692 0006 021C     		mov	r2, r0
 1693 0008 3960     		str	r1, [r7]
 1694 000a FB1D     		add	r3, r7, #7
 1695 000c 1A70     		strb	r2, [r3]
 369:.\main.c      ****     // Overview
 370:.\main.c      ****     //take instruction from data_array
 371:.\main.c      ****     //smooth input
 372:.\main.c      ****     //actuate the tilting using UART
 373:.\main.c      ****     //get feedback
 374:.\main.c      **** 
 375:.\main.c      ****     //-------------------------- 
 376:.\main.c      ****     // Dynamixel Servo specific
 377:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 378:.\main.c      ****     // TODO: Set the desired position
 379:.\main.c      **** 
 380:.\main.c      ****     //--------------------------
 381:.\main.c      ****     // State machine
 382:.\main.c      ****     
 383:.\main.c      ****     uint8 i;
 384:.\main.c      ****     uint16 avg;
 385:.\main.c      ****     uint16 command;
 386:.\main.c      ****     
 387:.\main.c      ****     switch(wristTilt_state){ //actions
 1696              		.loc 1 387 0
 1697 000e 524B     		ldr	r3, .L101
 1698 0010 1B78     		ldrb	r3, [r3]
 1699 0012 012B     		cmp	r3, #1
 1700 0014 03D0     		beq	.L77
 1701 0016 6BDD     		ble	.L99
 1702 0018 022B     		cmp	r3, #2
 1703 001a 22D0     		beq	.L80
 388:.\main.c      ****         case tilt_start:
 389:.\main.c      ****             break;
 390:.\main.c      **** 
 391:.\main.c      ****         case tilt_init:
 392:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 393:.\main.c      ****             {
 394:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 395:.\main.c      ****             }
 396:.\main.c      ****             WT_arr_cspot = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 38


 397:.\main.c      ****             
 398:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 399:.\main.c      ****             break;
 400:.\main.c      **** 
 401:.\main.c      ****         case tilt_control:
 402:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 403:.\main.c      ****             
 404:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 405:.\main.c      ****             
 406:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 407:.\main.c      ****             {
 408:.\main.c      ****                 WT_arr_cspot++;
 409:.\main.c      ****             }
 410:.\main.c      ****             else
 411:.\main.c      ****             {
 412:.\main.c      ****                 WT_arr_cspot = 0;
 413:.\main.c      ****             }
 414:.\main.c      ****             
 415:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 416:.\main.c      ****             
 417:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 418:.\main.c      ****             
 419:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 420:.\main.c      ****             {
 421:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 422:.\main.c      ****             }
 423:.\main.c      ****             else
 424:.\main.c      ****             {
 425:.\main.c      ****                 //throw error
 426:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 427:.\main.c      ****             }
 428:.\main.c      ****             WT_FLAG = 0;
 429:.\main.c      ****             break;
 430:.\main.c      ****             
 431:.\main.c      ****         case tilt_wait:
 432:.\main.c      ****             break;
 1704              		.loc 1 432 0
 1705 001c 69E0     		b	.L76
 1706              	.L77:
 392:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1707              		.loc 1 392 0
 1708 001e 3B1C     		mov	r3, r7
 1709 0020 0F33     		add	r3, r3, #15
 1710 0022 0022     		mov	r2, #0
 1711 0024 1A70     		strb	r2, [r3]
 1712 0026 0EE0     		b	.L82
 1713              	.L83:
 394:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1714              		.loc 1 394 0 discriminator 2
 1715 0028 3B1C     		mov	r3, r7
 1716 002a 0F33     		add	r3, r3, #15
 1717 002c 1B78     		ldrb	r3, [r3]
 1718 002e 5B00     		lsl	r3, r3, #1
 1719 0030 3A68     		ldr	r2, [r7]
 1720 0032 D318     		add	r3, r2, r3
 1721 0034 494A     		ldr	r2, .L101+4
 1722 0036 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 39


 392:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1723              		.loc 1 392 0 discriminator 2
 1724 0038 3B1C     		mov	r3, r7
 1725 003a 0F33     		add	r3, r3, #15
 1726 003c 1A78     		ldrb	r2, [r3]
 1727 003e 3B1C     		mov	r3, r7
 1728 0040 0F33     		add	r3, r3, #15
 1729 0042 0132     		add	r2, r2, #1
 1730 0044 1A70     		strb	r2, [r3]
 1731              	.L82:
 392:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1732              		.loc 1 392 0 is_stmt 0 discriminator 1
 1733 0046 3B1C     		mov	r3, r7
 1734 0048 0F33     		add	r3, r3, #15
 1735 004a 1B78     		ldrb	r3, [r3]
 1736 004c 132B     		cmp	r3, #19
 1737 004e EBD9     		bls	.L83
 396:.\main.c      ****             WT_arr_cspot = 0;
 1738              		.loc 1 396 0 is_stmt 1
 1739 0050 FB1D     		add	r3, r7, #7
 1740 0052 0022     		mov	r2, #0
 1741 0054 1A70     		strb	r2, [r3]
 398:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1742              		.loc 1 398 0
 1743 0056 414B     		ldr	r3, .L101+4
 1744 0058 0220     		mov	r0, #2
 1745 005a 191C     		mov	r1, r3
 1746 005c FFF7FEFF 		bl	ServoGoalPosition
 399:.\main.c      ****             break;
 1747              		.loc 1 399 0
 1748 0060 47E0     		b	.L76
 1749              	.L80:
 402:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1750              		.loc 1 402 0
 1751 0062 3C1C     		mov	r4, r7
 1752 0064 0C34     		add	r4, r4, #12
 1753 0066 3E4B     		ldr	r3, .L101+8
 1754 0068 181C     		mov	r0, r3
 1755 006a 1021     		mov	r1, #16
 1756 006c 1122     		mov	r2, #17
 1757 006e FFF7FEFF 		bl	make_command
 1758 0072 031C     		mov	r3, r0
 1759 0074 2380     		strh	r3, [r4]
 404:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1760              		.loc 1 404 0
 1761 0076 FB1D     		add	r3, r7, #7
 1762 0078 1B78     		ldrb	r3, [r3]
 1763 007a 5B00     		lsl	r3, r3, #1
 1764 007c 3A68     		ldr	r2, [r7]
 1765 007e D318     		add	r3, r2, r3
 1766 0080 3A1C     		mov	r2, r7
 1767 0082 0C32     		add	r2, r2, #12
 1768 0084 1288     		ldrh	r2, [r2]
 1769 0086 1A80     		strh	r2, [r3]
 406:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1770              		.loc 1 406 0
 1771 0088 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 40


 1772 008a 1B78     		ldrb	r3, [r3]
 1773 008c 122B     		cmp	r3, #18
 1774 008e 05D8     		bhi	.L84
 408:.\main.c      ****                 WT_arr_cspot++;
 1775              		.loc 1 408 0
 1776 0090 FB1D     		add	r3, r7, #7
 1777 0092 1A78     		ldrb	r2, [r3]
 1778 0094 FB1D     		add	r3, r7, #7
 1779 0096 0132     		add	r2, r2, #1
 1780 0098 1A70     		strb	r2, [r3]
 1781 009a 02E0     		b	.L85
 1782              	.L84:
 412:.\main.c      ****                 WT_arr_cspot = 0;
 1783              		.loc 1 412 0
 1784 009c FB1D     		add	r3, r7, #7
 1785 009e 0022     		mov	r2, #0
 1786 00a0 1A70     		strb	r2, [r3]
 1787              	.L85:
 417:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1788              		.loc 1 417 0
 1789 00a2 3C1C     		mov	r4, r7
 1790 00a4 0A34     		add	r4, r4, #10
 1791 00a6 3B68     		ldr	r3, [r7]
 1792 00a8 181C     		mov	r0, r3
 1793 00aa 1421     		mov	r1, #20
 1794 00ac FFF7FEFF 		bl	average
 1795 00b0 031C     		mov	r3, r0
 1796 00b2 2380     		strh	r3, [r4]
 419:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1797              		.loc 1 419 0
 1798 00b4 3B1C     		mov	r3, r7
 1799 00b6 0A33     		add	r3, r3, #10
 1800 00b8 1A88     		ldrh	r2, [r3]
 1801 00ba FA23     		mov	r3, #250
 1802 00bc DB00     		lsl	r3, r3, #3
 1803 00be 9A42     		cmp	r2, r3
 1804 00c0 0DD8     		bhi	.L86
 419:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1805              		.loc 1 419 0 is_stmt 0 discriminator 1
 1806 00c2 3B1C     		mov	r3, r7
 1807 00c4 0A33     		add	r3, r3, #10
 1808 00c6 1A88     		ldrh	r2, [r3]
 1809 00c8 264B     		ldr	r3, .L101+12
 1810 00ca 9A42     		cmp	r2, r3
 1811 00cc 07D9     		bls	.L86
 421:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1812              		.loc 1 421 0 is_stmt 1
 1813 00ce 3B1C     		mov	r3, r7
 1814 00d0 0A33     		add	r3, r3, #10
 1815 00d2 1B88     		ldrh	r3, [r3]
 1816 00d4 0220     		mov	r0, #2
 1817 00d6 191C     		mov	r1, r3
 1818 00d8 FFF7FEFF 		bl	ServoGoalPosition
 1819 00dc 04E0     		b	.L87
 1820              	.L86:
 426:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1821              		.loc 1 426 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 41


 1822 00de 1F4B     		ldr	r3, .L101+4
 1823 00e0 0220     		mov	r0, #2
 1824 00e2 191C     		mov	r1, r3
 1825 00e4 FFF7FEFF 		bl	ServoGoalPosition
 1826              	.L87:
 428:.\main.c      ****             WT_FLAG = 0;
 1827              		.loc 1 428 0
 1828 00e8 1F4B     		ldr	r3, .L101+16
 1829 00ea 0022     		mov	r2, #0
 1830 00ec 1A70     		strb	r2, [r3]
 429:.\main.c      ****             break;
 1831              		.loc 1 429 0
 1832 00ee 00E0     		b	.L76
 1833              	.L99:
 389:.\main.c      ****             break;
 1834              		.loc 1 389 0
 1835 00f0 C046     		mov	r8, r8
 1836              	.L76:
 433:.\main.c      ****     }
 434:.\main.c      ****     
 435:.\main.c      ****     switch(wristTilt_state){ //transitions
 1837              		.loc 1 435 0
 1838 00f2 194B     		ldr	r3, .L101
 1839 00f4 1B78     		ldrb	r3, [r3]
 1840 00f6 012B     		cmp	r3, #1
 1841 00f8 0CD0     		beq	.L89
 1842 00fa 02DC     		bgt	.L90
 1843 00fc 002B     		cmp	r3, #0
 1844 00fe 05D0     		beq	.L91
 1845 0100 24E0     		b	.L88
 1846              	.L90:
 1847 0102 022B     		cmp	r3, #2
 1848 0104 0AD0     		beq	.L92
 1849 0106 032B     		cmp	r3, #3
 1850 0108 14D0     		beq	.L93
 1851 010a 1FE0     		b	.L88
 1852              	.L91:
 436:.\main.c      ****         case tilt_start:
 437:.\main.c      ****             wristTilt_state = tilt_init;
 1853              		.loc 1 437 0
 1854 010c 124B     		ldr	r3, .L101
 1855 010e 0122     		mov	r2, #1
 1856 0110 1A70     		strb	r2, [r3]
 438:.\main.c      ****             break;
 1857              		.loc 1 438 0
 1858 0112 1BE0     		b	.L88
 1859              	.L89:
 439:.\main.c      ****         
 440:.\main.c      ****         case tilt_init:
 441:.\main.c      ****             wristTilt_state = tilt_wait;
 1860              		.loc 1 441 0
 1861 0114 104B     		ldr	r3, .L101
 1862 0116 0322     		mov	r2, #3
 1863 0118 1A70     		strb	r2, [r3]
 442:.\main.c      ****             break;
 1864              		.loc 1 442 0
 1865 011a 17E0     		b	.L88
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 42


 1866              	.L92:
 443:.\main.c      ****         
 444:.\main.c      ****         case tilt_control:
 445:.\main.c      ****             if(WT_FLAG)
 1867              		.loc 1 445 0
 1868 011c 124B     		ldr	r3, .L101+16
 1869 011e 1B78     		ldrb	r3, [r3]
 1870 0120 002B     		cmp	r3, #0
 1871 0122 03D0     		beq	.L94
 446:.\main.c      ****             {
 447:.\main.c      ****                 wristTilt_state = tilt_control;
 1872              		.loc 1 447 0
 1873 0124 0C4B     		ldr	r3, .L101
 1874 0126 0222     		mov	r2, #2
 1875 0128 1A70     		strb	r2, [r3]
 448:.\main.c      ****             }
 449:.\main.c      ****             else
 450:.\main.c      ****             {
 451:.\main.c      ****                 wristTilt_state = tilt_wait;
 452:.\main.c      ****             }
 453:.\main.c      ****             break;
 1876              		.loc 1 453 0
 1877 012a 0FE0     		b	.L88
 1878              	.L94:
 451:.\main.c      ****                 wristTilt_state = tilt_wait;
 1879              		.loc 1 451 0
 1880 012c 0A4B     		ldr	r3, .L101
 1881 012e 0322     		mov	r2, #3
 1882 0130 1A70     		strb	r2, [r3]
 1883              		.loc 1 453 0
 1884 0132 0BE0     		b	.L88
 1885              	.L93:
 454:.\main.c      ****         
 455:.\main.c      ****         case tilt_wait:
 456:.\main.c      ****             if(WT_FLAG)
 1886              		.loc 1 456 0
 1887 0134 0C4B     		ldr	r3, .L101+16
 1888 0136 1B78     		ldrb	r3, [r3]
 1889 0138 002B     		cmp	r3, #0
 1890 013a 03D0     		beq	.L96
 457:.\main.c      ****             {
 458:.\main.c      ****                 wristTilt_state = tilt_control;
 1891              		.loc 1 458 0
 1892 013c 064B     		ldr	r3, .L101
 1893 013e 0222     		mov	r2, #2
 1894 0140 1A70     		strb	r2, [r3]
 459:.\main.c      ****             }
 460:.\main.c      ****             else
 461:.\main.c      ****             {
 462:.\main.c      ****                 wristTilt_state = tilt_wait; 
 463:.\main.c      ****             }
 464:.\main.c      ****             break;
 1895              		.loc 1 464 0
 1896 0142 02E0     		b	.L100
 1897              	.L96:
 462:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1898              		.loc 1 462 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 43


 1899 0144 044B     		ldr	r3, .L101
 1900 0146 0322     		mov	r2, #3
 1901 0148 1A70     		strb	r2, [r3]
 1902              	.L100:
 1903              		.loc 1 464 0
 1904 014a C046     		mov	r8, r8
 1905              	.L88:
 465:.\main.c      ****     }  
 466:.\main.c      ****     return WT_arr_cspot;
 1906              		.loc 1 466 0
 1907 014c FB1D     		add	r3, r7, #7
 1908 014e 1B78     		ldrb	r3, [r3]
 467:.\main.c      **** }
 1909              		.loc 1 467 0
 1910 0150 181C     		mov	r0, r3
 1911 0152 BD46     		mov	sp, r7
 1912 0154 05B0     		add	sp, sp, #20
 1913              		@ sp needed
 1914 0156 90BD     		pop	{r4, r7, pc}
 1915              	.L102:
 1916              		.align	2
 1917              	.L101:
 1918 0158 00000000 		.word	wristTilt_state
 1919 015c DC050000 		.word	1500
 1920 0160 00000000 		.word	data_array
 1921 0164 E7030000 		.word	999
 1922 0168 00000000 		.word	WT_FLAG
 1923              		.cfi_endproc
 1924              	.LFE48:
 1925              		.size	wristTilt, .-wristTilt
 1926              		.comm	wristRotate_state,1,1
 1927              		.section	.text.wristRotate,"ax",%progbits
 1928              		.align	2
 1929              		.global	wristRotate
 1930              		.code	16
 1931              		.thumb_func
 1932              		.type	wristRotate, %function
 1933              	wristRotate:
 1934              	.LFB49:
 468:.\main.c      **** 
 469:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 470:.\main.c      **** //control the rotating motion of the wrist
 471:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 472:.\main.c      **** {
 1935              		.loc 1 472 0
 1936              		.cfi_startproc
 1937 0000 90B5     		push	{r4, r7, lr}
 1938              		.cfi_def_cfa_offset 12
 1939              		.cfi_offset 4, -12
 1940              		.cfi_offset 7, -8
 1941              		.cfi_offset 14, -4
 1942 0002 85B0     		sub	sp, sp, #20
 1943              		.cfi_def_cfa_offset 32
 1944 0004 00AF     		add	r7, sp, #0
 1945              		.cfi_def_cfa_register 7
 1946 0006 021C     		mov	r2, r0
 1947 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 44


 1948 000a FB1D     		add	r3, r7, #7
 1949 000c 1A70     		strb	r2, [r3]
 473:.\main.c      ****     //Overview
 474:.\main.c      ****     //take instruction from data_array
 475:.\main.c      ****     //smooth input
 476:.\main.c      ****     //actuate the tilting using UART
 477:.\main.c      ****     //get feedback
 478:.\main.c      **** 
 479:.\main.c      ****     //-------------------------- 
 480:.\main.c      ****     // Dynamixel Servo specific
 481:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 482:.\main.c      ****     // TODO: Set the desired position
 483:.\main.c      **** 
 484:.\main.c      ****     //--------------------------
 485:.\main.c      ****     // State machine
 486:.\main.c      ****     
 487:.\main.c      ****     uint8 i;
 488:.\main.c      ****     uint16 avg;
 489:.\main.c      ****     uint16 command;
 490:.\main.c      ****     
 491:.\main.c      ****     switch(wristRotate_state){ //actions
 1950              		.loc 1 491 0
 1951 000e 524B     		ldr	r3, .L129
 1952 0010 1B78     		ldrb	r3, [r3]
 1953 0012 012B     		cmp	r3, #1
 1954 0014 03D0     		beq	.L105
 1955 0016 6BDD     		ble	.L127
 1956 0018 022B     		cmp	r3, #2
 1957 001a 22D0     		beq	.L108
 492:.\main.c      ****         case rotate_start:
 493:.\main.c      ****             break;
 494:.\main.c      **** 
 495:.\main.c      ****         case rotate_init:
 496:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 497:.\main.c      ****             {
 498:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 499:.\main.c      ****             }
 500:.\main.c      ****             WR_arr_cspot = 0;
 501:.\main.c      ****             
 502:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 503:.\main.c      ****             break;
 504:.\main.c      **** 
 505:.\main.c      ****         case rotate_control:
 506:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 507:.\main.c      ****             
 508:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 509:.\main.c      ****             
 510:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 511:.\main.c      ****             {
 512:.\main.c      ****                 WR_arr_cspot++;
 513:.\main.c      ****             }
 514:.\main.c      ****             else
 515:.\main.c      ****             {
 516:.\main.c      ****                 WR_arr_cspot = 0;
 517:.\main.c      ****             }
 518:.\main.c      ****             
 519:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 45


 520:.\main.c      ****             
 521:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 522:.\main.c      ****             
 523:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 524:.\main.c      ****             {
 525:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 526:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 527:.\main.c      ****             }
 528:.\main.c      ****             else
 529:.\main.c      ****             {
 530:.\main.c      ****                 //throw error
 531:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 532:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 533:.\main.c      ****             }
 534:.\main.c      ****             WR_FLAG = 0;
 535:.\main.c      ****             break;
 536:.\main.c      ****             
 537:.\main.c      ****         case rotate_wait:
 538:.\main.c      ****             break;
 1958              		.loc 1 538 0
 1959 001c 69E0     		b	.L104
 1960              	.L105:
 496:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1961              		.loc 1 496 0
 1962 001e 3B1C     		mov	r3, r7
 1963 0020 0F33     		add	r3, r3, #15
 1964 0022 0022     		mov	r2, #0
 1965 0024 1A70     		strb	r2, [r3]
 1966 0026 0EE0     		b	.L110
 1967              	.L111:
 498:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 1968              		.loc 1 498 0 discriminator 2
 1969 0028 3B1C     		mov	r3, r7
 1970 002a 0F33     		add	r3, r3, #15
 1971 002c 1B78     		ldrb	r3, [r3]
 1972 002e 5B00     		lsl	r3, r3, #1
 1973 0030 3A68     		ldr	r2, [r7]
 1974 0032 D318     		add	r3, r2, r3
 1975 0034 494A     		ldr	r2, .L129+4
 1976 0036 1A80     		strh	r2, [r3]
 496:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1977              		.loc 1 496 0 discriminator 2
 1978 0038 3B1C     		mov	r3, r7
 1979 003a 0F33     		add	r3, r3, #15
 1980 003c 1A78     		ldrb	r2, [r3]
 1981 003e 3B1C     		mov	r3, r7
 1982 0040 0F33     		add	r3, r3, #15
 1983 0042 0132     		add	r2, r2, #1
 1984 0044 1A70     		strb	r2, [r3]
 1985              	.L110:
 496:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1986              		.loc 1 496 0 is_stmt 0 discriminator 1
 1987 0046 3B1C     		mov	r3, r7
 1988 0048 0F33     		add	r3, r3, #15
 1989 004a 1B78     		ldrb	r3, [r3]
 1990 004c 132B     		cmp	r3, #19
 1991 004e EBD9     		bls	.L111
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 46


 500:.\main.c      ****             WR_arr_cspot = 0;
 1992              		.loc 1 500 0 is_stmt 1
 1993 0050 FB1D     		add	r3, r7, #7
 1994 0052 0022     		mov	r2, #0
 1995 0054 1A70     		strb	r2, [r3]
 502:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 1996              		.loc 1 502 0
 1997 0056 414B     		ldr	r3, .L129+4
 1998 0058 0120     		mov	r0, #1
 1999 005a 191C     		mov	r1, r3
 2000 005c FFF7FEFF 		bl	ServoGoalPosition
 503:.\main.c      ****             break;
 2001              		.loc 1 503 0
 2002 0060 47E0     		b	.L104
 2003              	.L108:
 506:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2004              		.loc 1 506 0
 2005 0062 3C1C     		mov	r4, r7
 2006 0064 0C34     		add	r4, r4, #12
 2007 0066 3E4B     		ldr	r3, .L129+8
 2008 0068 181C     		mov	r0, r3
 2009 006a 1221     		mov	r1, #18
 2010 006c 1322     		mov	r2, #19
 2011 006e FFF7FEFF 		bl	make_command
 2012 0072 031C     		mov	r3, r0
 2013 0074 2380     		strh	r3, [r4]
 508:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2014              		.loc 1 508 0
 2015 0076 FB1D     		add	r3, r7, #7
 2016 0078 1B78     		ldrb	r3, [r3]
 2017 007a 5B00     		lsl	r3, r3, #1
 2018 007c 3A68     		ldr	r2, [r7]
 2019 007e D318     		add	r3, r2, r3
 2020 0080 3A1C     		mov	r2, r7
 2021 0082 0C32     		add	r2, r2, #12
 2022 0084 1288     		ldrh	r2, [r2]
 2023 0086 1A80     		strh	r2, [r3]
 510:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2024              		.loc 1 510 0
 2025 0088 FB1D     		add	r3, r7, #7
 2026 008a 1B78     		ldrb	r3, [r3]
 2027 008c 122B     		cmp	r3, #18
 2028 008e 05D8     		bhi	.L112
 512:.\main.c      ****                 WR_arr_cspot++;
 2029              		.loc 1 512 0
 2030 0090 FB1D     		add	r3, r7, #7
 2031 0092 1A78     		ldrb	r2, [r3]
 2032 0094 FB1D     		add	r3, r7, #7
 2033 0096 0132     		add	r2, r2, #1
 2034 0098 1A70     		strb	r2, [r3]
 2035 009a 02E0     		b	.L113
 2036              	.L112:
 516:.\main.c      ****                 WR_arr_cspot = 0;
 2037              		.loc 1 516 0
 2038 009c FB1D     		add	r3, r7, #7
 2039 009e 0022     		mov	r2, #0
 2040 00a0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 47


 2041              	.L113:
 521:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2042              		.loc 1 521 0
 2043 00a2 3C1C     		mov	r4, r7
 2044 00a4 0A34     		add	r4, r4, #10
 2045 00a6 3B68     		ldr	r3, [r7]
 2046 00a8 181C     		mov	r0, r3
 2047 00aa 1421     		mov	r1, #20
 2048 00ac FFF7FEFF 		bl	average
 2049 00b0 031C     		mov	r3, r0
 2050 00b2 2380     		strh	r3, [r4]
 523:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2051              		.loc 1 523 0
 2052 00b4 3B1C     		mov	r3, r7
 2053 00b6 0A33     		add	r3, r3, #10
 2054 00b8 1A88     		ldrh	r2, [r3]
 2055 00ba FA23     		mov	r3, #250
 2056 00bc DB00     		lsl	r3, r3, #3
 2057 00be 9A42     		cmp	r2, r3
 2058 00c0 0DD8     		bhi	.L114
 523:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2059              		.loc 1 523 0 is_stmt 0 discriminator 1
 2060 00c2 3B1C     		mov	r3, r7
 2061 00c4 0A33     		add	r3, r3, #10
 2062 00c6 1A88     		ldrh	r2, [r3]
 2063 00c8 264B     		ldr	r3, .L129+12
 2064 00ca 9A42     		cmp	r2, r3
 2065 00cc 07D9     		bls	.L114
 526:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2066              		.loc 1 526 0 is_stmt 1
 2067 00ce 3B1C     		mov	r3, r7
 2068 00d0 0A33     		add	r3, r3, #10
 2069 00d2 1B88     		ldrh	r3, [r3]
 2070 00d4 0120     		mov	r0, #1
 2071 00d6 191C     		mov	r1, r3
 2072 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2073 00dc 04E0     		b	.L115
 2074              	.L114:
 532:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2075              		.loc 1 532 0
 2076 00de 1F4B     		ldr	r3, .L129+4
 2077 00e0 0120     		mov	r0, #1
 2078 00e2 191C     		mov	r1, r3
 2079 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2080              	.L115:
 534:.\main.c      ****             WR_FLAG = 0;
 2081              		.loc 1 534 0
 2082 00e8 1F4B     		ldr	r3, .L129+16
 2083 00ea 0022     		mov	r2, #0
 2084 00ec 1A70     		strb	r2, [r3]
 535:.\main.c      ****             break;
 2085              		.loc 1 535 0
 2086 00ee 00E0     		b	.L104
 2087              	.L127:
 493:.\main.c      ****             break;
 2088              		.loc 1 493 0
 2089 00f0 C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 48


 2090              	.L104:
 539:.\main.c      ****     }
 540:.\main.c      ****     
 541:.\main.c      ****     switch(wristRotate_state){ //transitions
 2091              		.loc 1 541 0
 2092 00f2 194B     		ldr	r3, .L129
 2093 00f4 1B78     		ldrb	r3, [r3]
 2094 00f6 012B     		cmp	r3, #1
 2095 00f8 0CD0     		beq	.L117
 2096 00fa 02DC     		bgt	.L118
 2097 00fc 002B     		cmp	r3, #0
 2098 00fe 05D0     		beq	.L119
 2099 0100 24E0     		b	.L116
 2100              	.L118:
 2101 0102 022B     		cmp	r3, #2
 2102 0104 0AD0     		beq	.L120
 2103 0106 032B     		cmp	r3, #3
 2104 0108 14D0     		beq	.L121
 2105 010a 1FE0     		b	.L116
 2106              	.L119:
 542:.\main.c      ****         case rotate_start:
 543:.\main.c      ****             wristRotate_state = rotate_init;
 2107              		.loc 1 543 0
 2108 010c 124B     		ldr	r3, .L129
 2109 010e 0122     		mov	r2, #1
 2110 0110 1A70     		strb	r2, [r3]
 544:.\main.c      ****             break;
 2111              		.loc 1 544 0
 2112 0112 1BE0     		b	.L116
 2113              	.L117:
 545:.\main.c      ****         
 546:.\main.c      ****         case rotate_init:
 547:.\main.c      ****             wristRotate_state = rotate_wait;
 2114              		.loc 1 547 0
 2115 0114 104B     		ldr	r3, .L129
 2116 0116 0322     		mov	r2, #3
 2117 0118 1A70     		strb	r2, [r3]
 548:.\main.c      ****             break;
 2118              		.loc 1 548 0
 2119 011a 17E0     		b	.L116
 2120              	.L120:
 549:.\main.c      ****         
 550:.\main.c      ****         case rotate_control:
 551:.\main.c      ****             if(WR_FLAG)
 2121              		.loc 1 551 0
 2122 011c 124B     		ldr	r3, .L129+16
 2123 011e 1B78     		ldrb	r3, [r3]
 2124 0120 002B     		cmp	r3, #0
 2125 0122 03D0     		beq	.L122
 552:.\main.c      ****             {
 553:.\main.c      ****                 wristRotate_state = rotate_control;
 2126              		.loc 1 553 0
 2127 0124 0C4B     		ldr	r3, .L129
 2128 0126 0222     		mov	r2, #2
 2129 0128 1A70     		strb	r2, [r3]
 554:.\main.c      ****             }
 555:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 49


 556:.\main.c      ****             {
 557:.\main.c      ****                 wristRotate_state = rotate_wait;
 558:.\main.c      ****             }
 559:.\main.c      ****             break;
 2130              		.loc 1 559 0
 2131 012a 0FE0     		b	.L116
 2132              	.L122:
 557:.\main.c      ****                 wristRotate_state = rotate_wait;
 2133              		.loc 1 557 0
 2134 012c 0A4B     		ldr	r3, .L129
 2135 012e 0322     		mov	r2, #3
 2136 0130 1A70     		strb	r2, [r3]
 2137              		.loc 1 559 0
 2138 0132 0BE0     		b	.L116
 2139              	.L121:
 560:.\main.c      ****         
 561:.\main.c      ****         case rotate_wait:
 562:.\main.c      ****             if(WR_FLAG)
 2140              		.loc 1 562 0
 2141 0134 0C4B     		ldr	r3, .L129+16
 2142 0136 1B78     		ldrb	r3, [r3]
 2143 0138 002B     		cmp	r3, #0
 2144 013a 03D0     		beq	.L124
 563:.\main.c      ****             {
 564:.\main.c      ****                 wristRotate_state = rotate_control;
 2145              		.loc 1 564 0
 2146 013c 064B     		ldr	r3, .L129
 2147 013e 0222     		mov	r2, #2
 2148 0140 1A70     		strb	r2, [r3]
 565:.\main.c      ****             }
 566:.\main.c      ****             else
 567:.\main.c      ****             {
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 569:.\main.c      ****             }
 570:.\main.c      ****             break;
 2149              		.loc 1 570 0
 2150 0142 02E0     		b	.L128
 2151              	.L124:
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 2152              		.loc 1 568 0
 2153 0144 044B     		ldr	r3, .L129
 2154 0146 0322     		mov	r2, #3
 2155 0148 1A70     		strb	r2, [r3]
 2156              	.L128:
 2157              		.loc 1 570 0
 2158 014a C046     		mov	r8, r8
 2159              	.L116:
 571:.\main.c      ****     }  
 572:.\main.c      ****     return WR_arr_cspot;
 2160              		.loc 1 572 0
 2161 014c FB1D     		add	r3, r7, #7
 2162 014e 1B78     		ldrb	r3, [r3]
 573:.\main.c      **** }
 2163              		.loc 1 573 0
 2164 0150 181C     		mov	r0, r3
 2165 0152 BD46     		mov	sp, r7
 2166 0154 05B0     		add	sp, sp, #20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 50


 2167              		@ sp needed
 2168 0156 90BD     		pop	{r4, r7, pc}
 2169              	.L130:
 2170              		.align	2
 2171              	.L129:
 2172 0158 00000000 		.word	wristRotate_state
 2173 015c DC050000 		.word	1500
 2174 0160 00000000 		.word	data_array
 2175 0164 E7030000 		.word	999
 2176 0168 00000000 		.word	WR_FLAG
 2177              		.cfi_endproc
 2178              	.LFE49:
 2179              		.size	wristRotate, .-wristRotate
 2180              		.comm	elbow_state,1,1
 2181              		.section	.text.elbow,"ax",%progbits
 2182              		.align	2
 2183              		.global	elbow
 2184              		.code	16
 2185              		.thumb_func
 2186              		.type	elbow, %function
 2187              	elbow:
 2188              	.LFB50:
 574:.\main.c      **** 
 575:.\main.c      **** //control the elbow
 576:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 577:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 578:.\main.c      **** { 
 2189              		.loc 1 578 0
 2190              		.cfi_startproc
 2191 0000 90B5     		push	{r4, r7, lr}
 2192              		.cfi_def_cfa_offset 12
 2193              		.cfi_offset 4, -12
 2194              		.cfi_offset 7, -8
 2195              		.cfi_offset 14, -4
 2196 0002 85B0     		sub	sp, sp, #20
 2197              		.cfi_def_cfa_offset 32
 2198 0004 00AF     		add	r7, sp, #0
 2199              		.cfi_def_cfa_register 7
 2200 0006 021C     		mov	r2, r0
 2201 0008 3960     		str	r1, [r7]
 2202 000a FB1D     		add	r3, r7, #7
 2203 000c 1A70     		strb	r2, [r3]
 579:.\main.c      ****     //take instruction from data_array
 580:.\main.c      ****     //smooth input
 581:.\main.c      ****     //actuate the elbow using PWM
 582:.\main.c      ****     //get feedback
 583:.\main.c      ****     uint8 i;
 584:.\main.c      ****     uint16 avg;
 585:.\main.c      ****     uint16 command;
 586:.\main.c      ****     
 587:.\main.c      ****     //TODO: make sure reading from correct pots
 588:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2204              		.loc 1 588 0
 2205 000e 3C1C     		mov	r4, r7
 2206 0010 0C34     		add	r4, r4, #12
 2207 0012 0120     		mov	r0, #1
 2208 0014 FFF7FEFF 		bl	potFeedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 51


 2209 0018 031C     		mov	r3, r0
 2210 001a 2380     		strh	r3, [r4]
 589:.\main.c      ****     
 590:.\main.c      ****     switch(elbow_state){ //actions
 2211              		.loc 1 590 0
 2212 001c 874B     		ldr	r3, .L167
 2213 001e 1B78     		ldrb	r3, [r3]
 2214 0020 012B     		cmp	r3, #1
 2215 0022 07D0     		beq	.L133
 2216 0024 00DC     		bgt	.LCB1942
 2217 0026 D5E0     		b	.L165	@long jump
 2218              	.LCB1942:
 2219 0028 022B     		cmp	r3, #2
 2220 002a 24D0     		beq	.L136
 2221 002c 032B     		cmp	r3, #3
 2222 002e 00D1     		bne	.LCB1946
 2223 0030 BCE0     		b	.L137	@long jump
 2224              	.LCB1946:
 2225 0032 D0E0     		b	.L132
 2226              	.L133:
 591:.\main.c      ****         case elbw_start:
 592:.\main.c      ****             break;
 593:.\main.c      **** 
 594:.\main.c      ****         case elbw_init:
 595:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2227              		.loc 1 595 0
 2228 0034 3B1C     		mov	r3, r7
 2229 0036 0F33     		add	r3, r3, #15
 2230 0038 0022     		mov	r2, #0
 2231 003a 1A70     		strb	r2, [r3]
 2232 003c 0EE0     		b	.L138
 2233              	.L139:
 596:.\main.c      ****             {
 597:.\main.c      ****                 elbow_array[i] = 1500;
 2234              		.loc 1 597 0 discriminator 2
 2235 003e 3B1C     		mov	r3, r7
 2236 0040 0F33     		add	r3, r3, #15
 2237 0042 1B78     		ldrb	r3, [r3]
 2238 0044 5B00     		lsl	r3, r3, #1
 2239 0046 3A68     		ldr	r2, [r7]
 2240 0048 D318     		add	r3, r2, r3
 2241 004a 7D4A     		ldr	r2, .L167+4
 2242 004c 1A80     		strh	r2, [r3]
 595:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2243              		.loc 1 595 0 discriminator 2
 2244 004e 3B1C     		mov	r3, r7
 2245 0050 0F33     		add	r3, r3, #15
 2246 0052 1A78     		ldrb	r2, [r3]
 2247 0054 3B1C     		mov	r3, r7
 2248 0056 0F33     		add	r3, r3, #15
 2249 0058 0132     		add	r2, r2, #1
 2250 005a 1A70     		strb	r2, [r3]
 2251              	.L138:
 595:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2252              		.loc 1 595 0 is_stmt 0 discriminator 1
 2253 005c 3B1C     		mov	r3, r7
 2254 005e 0F33     		add	r3, r3, #15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 52


 2255 0060 1B78     		ldrb	r3, [r3]
 2256 0062 132B     		cmp	r3, #19
 2257 0064 EBD9     		bls	.L139
 598:.\main.c      ****             }
 599:.\main.c      ****             elbw_arr_cspot = 0;
 2258              		.loc 1 599 0 is_stmt 1
 2259 0066 FB1D     		add	r3, r7, #7
 2260 0068 0022     		mov	r2, #0
 2261 006a 1A70     		strb	r2, [r3]
 600:.\main.c      ****             
 601:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2262              		.loc 1 601 0
 2263 006c 744B     		ldr	r3, .L167+4
 2264 006e 181C     		mov	r0, r3
 2265 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 602:.\main.c      ****             break;
 2266              		.loc 1 602 0
 2267 0074 AFE0     		b	.L132
 2268              	.L136:
 603:.\main.c      **** 
 604:.\main.c      ****         case elbw_execute:
 605:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2269              		.loc 1 605 0
 2270 0076 3C1C     		mov	r4, r7
 2271 0078 0A34     		add	r4, r4, #10
 2272 007a 724B     		ldr	r3, .L167+8
 2273 007c 181C     		mov	r0, r3
 2274 007e 0E21     		mov	r1, #14
 2275 0080 0F22     		mov	r2, #15
 2276 0082 FFF7FEFF 		bl	make_command
 2277 0086 031C     		mov	r3, r0
 2278 0088 2380     		strh	r3, [r4]
 606:.\main.c      ****             
 607:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2279              		.loc 1 607 0
 2280 008a FB1D     		add	r3, r7, #7
 2281 008c 1B78     		ldrb	r3, [r3]
 2282 008e 5B00     		lsl	r3, r3, #1
 2283 0090 3A68     		ldr	r2, [r7]
 2284 0092 D318     		add	r3, r2, r3
 2285 0094 3A1C     		mov	r2, r7
 2286 0096 0A32     		add	r2, r2, #10
 2287 0098 1288     		ldrh	r2, [r2]
 2288 009a 1A80     		strh	r2, [r3]
 608:.\main.c      ****             
 609:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2289              		.loc 1 609 0
 2290 009c FB1D     		add	r3, r7, #7
 2291 009e 1B78     		ldrb	r3, [r3]
 2292 00a0 122B     		cmp	r3, #18
 2293 00a2 05D8     		bhi	.L140
 610:.\main.c      ****             {
 611:.\main.c      ****                 elbw_arr_cspot++;
 2294              		.loc 1 611 0
 2295 00a4 FB1D     		add	r3, r7, #7
 2296 00a6 1A78     		ldrb	r2, [r3]
 2297 00a8 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 53


 2298 00aa 0132     		add	r2, r2, #1
 2299 00ac 1A70     		strb	r2, [r3]
 2300 00ae 02E0     		b	.L141
 2301              	.L140:
 612:.\main.c      ****             }
 613:.\main.c      ****             else
 614:.\main.c      ****             {
 615:.\main.c      ****                 elbw_arr_cspot = 0;
 2302              		.loc 1 615 0
 2303 00b0 FB1D     		add	r3, r7, #7
 2304 00b2 0022     		mov	r2, #0
 2305 00b4 1A70     		strb	r2, [r3]
 2306              	.L141:
 616:.\main.c      ****             }
 617:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2307              		.loc 1 617 0
 2308 00b6 3C1C     		mov	r4, r7
 2309 00b8 0834     		add	r4, r4, #8
 2310 00ba 3B68     		ldr	r3, [r7]
 2311 00bc 181C     		mov	r0, r3
 2312 00be 1421     		mov	r1, #20
 2313 00c0 FFF7FEFF 		bl	average
 2314 00c4 031C     		mov	r3, r0
 2315 00c6 2380     		strh	r3, [r4]
 618:.\main.c      ****             
 619:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 2316              		.loc 1 619 0
 2317 00c8 3B1C     		mov	r3, r7
 2318 00ca 0C33     		add	r3, r3, #12
 2319 00cc 1A88     		ldrh	r2, [r3]
 2320 00ce 5E4B     		ldr	r3, .L167+12
 2321 00d0 1B68     		ldr	r3, [r3]
 2322 00d2 9A42     		cmp	r2, r3
 2323 00d4 23D8     		bhi	.L142
 620:.\main.c      ****             {
 621:.\main.c      ****                 if (avg < 1500)
 2324              		.loc 1 621 0
 2325 00d6 3B1C     		mov	r3, r7
 2326 00d8 0833     		add	r3, r3, #8
 2327 00da 1A88     		ldrh	r2, [r3]
 2328 00dc 5B4B     		ldr	r3, .L167+16
 2329 00de 9A42     		cmp	r2, r3
 2330 00e0 04D8     		bhi	.L143
 622:.\main.c      ****                 {
 623:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2331              		.loc 1 623 0
 2332 00e2 574B     		ldr	r3, .L167+4
 2333 00e4 181C     		mov	r0, r3
 2334 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2335 00ea 5BE0     		b	.L146
 2336              	.L143:
 624:.\main.c      ****                 }
 625:.\main.c      ****                 else
 626:.\main.c      ****                 {
 627:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2337              		.loc 1 627 0
 2338 00ec 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 54


 2339 00ee 0833     		add	r3, r3, #8
 2340 00f0 1A88     		ldrh	r2, [r3]
 2341 00f2 FA23     		mov	r3, #250
 2342 00f4 DB00     		lsl	r3, r3, #3
 2343 00f6 9A42     		cmp	r2, r3
 2344 00f8 0CD8     		bhi	.L145
 2345              		.loc 1 627 0 is_stmt 0 discriminator 1
 2346 00fa 3B1C     		mov	r3, r7
 2347 00fc 0833     		add	r3, r3, #8
 2348 00fe 1A88     		ldrh	r2, [r3]
 2349 0100 534B     		ldr	r3, .L167+20
 2350 0102 9A42     		cmp	r2, r3
 2351 0104 06D9     		bls	.L145
 628:.\main.c      ****                     {
 629:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2352              		.loc 1 629 0 is_stmt 1
 2353 0106 3B1C     		mov	r3, r7
 2354 0108 0833     		add	r3, r3, #8
 2355 010a 1B88     		ldrh	r3, [r3]
 2356 010c 181C     		mov	r0, r3
 2357 010e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2358 0112 47E0     		b	.L146
 2359              	.L145:
 630:.\main.c      ****                     }
 631:.\main.c      ****                     else
 632:.\main.c      ****                     {
 633:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2360              		.loc 1 633 0
 2361 0114 4A4B     		ldr	r3, .L167+4
 2362 0116 181C     		mov	r0, r3
 2363 0118 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2364 011c 42E0     		b	.L146
 2365              	.L142:
 634:.\main.c      ****                     }
 635:.\main.c      ****                 }
 636:.\main.c      ****             }
 637:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 2366              		.loc 1 637 0
 2367 011e 3B1C     		mov	r3, r7
 2368 0120 0C33     		add	r3, r3, #12
 2369 0122 1A88     		ldrh	r2, [r3]
 2370 0124 4B4B     		ldr	r3, .L167+24
 2371 0126 1B68     		ldr	r3, [r3]
 2372 0128 9A42     		cmp	r2, r3
 2373 012a 23D3     		bcc	.L147
 638:.\main.c      ****             {
 639:.\main.c      ****                 if(avg > 1500)
 2374              		.loc 1 639 0
 2375 012c 3B1C     		mov	r3, r7
 2376 012e 0833     		add	r3, r3, #8
 2377 0130 1A88     		ldrh	r2, [r3]
 2378 0132 434B     		ldr	r3, .L167+4
 2379 0134 9A42     		cmp	r2, r3
 2380 0136 04D9     		bls	.L148
 640:.\main.c      ****                 {
 641:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2381              		.loc 1 641 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 55


 2382 0138 414B     		ldr	r3, .L167+4
 2383 013a 181C     		mov	r0, r3
 2384 013c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2385 0140 30E0     		b	.L146
 2386              	.L148:
 642:.\main.c      ****                 }
 643:.\main.c      ****                 else
 644:.\main.c      ****                 {
 645:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2387              		.loc 1 645 0
 2388 0142 3B1C     		mov	r3, r7
 2389 0144 0833     		add	r3, r3, #8
 2390 0146 1A88     		ldrh	r2, [r3]
 2391 0148 FA23     		mov	r3, #250
 2392 014a DB00     		lsl	r3, r3, #3
 2393 014c 9A42     		cmp	r2, r3
 2394 014e 0CD8     		bhi	.L150
 2395              		.loc 1 645 0 is_stmt 0 discriminator 1
 2396 0150 3B1C     		mov	r3, r7
 2397 0152 0833     		add	r3, r3, #8
 2398 0154 1A88     		ldrh	r2, [r3]
 2399 0156 3E4B     		ldr	r3, .L167+20
 2400 0158 9A42     		cmp	r2, r3
 2401 015a 06D9     		bls	.L150
 646:.\main.c      ****                     {
 647:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2402              		.loc 1 647 0 is_stmt 1
 2403 015c 3B1C     		mov	r3, r7
 2404 015e 0833     		add	r3, r3, #8
 2405 0160 1B88     		ldrh	r3, [r3]
 2406 0162 181C     		mov	r0, r3
 2407 0164 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2408 0168 1CE0     		b	.L146
 2409              	.L150:
 648:.\main.c      ****                     }
 649:.\main.c      ****                     else
 650:.\main.c      ****                     {
 651:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2410              		.loc 1 651 0
 2411 016a 354B     		ldr	r3, .L167+4
 2412 016c 181C     		mov	r0, r3
 2413 016e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2414 0172 17E0     		b	.L146
 2415              	.L147:
 652:.\main.c      ****                     }
 653:.\main.c      ****                 }
 654:.\main.c      ****             }
 655:.\main.c      ****             else
 656:.\main.c      ****             {
 657:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2416              		.loc 1 657 0
 2417 0174 3B1C     		mov	r3, r7
 2418 0176 0833     		add	r3, r3, #8
 2419 0178 1A88     		ldrh	r2, [r3]
 2420 017a FA23     		mov	r3, #250
 2421 017c DB00     		lsl	r3, r3, #3
 2422 017e 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 56


 2423 0180 0CD8     		bhi	.L151
 2424              		.loc 1 657 0 is_stmt 0 discriminator 1
 2425 0182 3B1C     		mov	r3, r7
 2426 0184 0833     		add	r3, r3, #8
 2427 0186 1A88     		ldrh	r2, [r3]
 2428 0188 314B     		ldr	r3, .L167+20
 2429 018a 9A42     		cmp	r2, r3
 2430 018c 06D9     		bls	.L151
 658:.\main.c      ****                 {
 659:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 2431              		.loc 1 659 0 is_stmt 1
 2432 018e 3B1C     		mov	r3, r7
 2433 0190 0833     		add	r3, r3, #8
 2434 0192 1B88     		ldrh	r3, [r3]
 2435 0194 181C     		mov	r0, r3
 2436 0196 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2437 019a 03E0     		b	.L146
 2438              	.L151:
 660:.\main.c      ****                 }
 661:.\main.c      ****                 else
 662:.\main.c      ****                 {
 663:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2439              		.loc 1 663 0
 2440 019c 284B     		ldr	r3, .L167+4
 2441 019e 181C     		mov	r0, r3
 2442 01a0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2443              	.L146:
 664:.\main.c      ****                 }
 665:.\main.c      ****             }
 666:.\main.c      ****             
 667:.\main.c      ****             ELBOW_FLAG = 0;
 2444              		.loc 1 667 0
 2445 01a4 2C4B     		ldr	r3, .L167+28
 2446 01a6 0022     		mov	r2, #0
 2447 01a8 1A70     		strb	r2, [r3]
 668:.\main.c      ****             break;
 2448              		.loc 1 668 0
 2449 01aa 14E0     		b	.L132
 2450              	.L137:
 669:.\main.c      ****             
 670:.\main.c      ****         case elbw_wait:
 671:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2451              		.loc 1 671 0
 2452 01ac 3B1C     		mov	r3, r7
 2453 01ae 0C33     		add	r3, r3, #12
 2454 01b0 1A88     		ldrh	r2, [r3]
 2455 01b2 254B     		ldr	r3, .L167+12
 2456 01b4 1B68     		ldr	r3, [r3]
 2457 01b6 9A42     		cmp	r2, r3
 2458 01b8 06D9     		bls	.L152
 2459              		.loc 1 671 0 is_stmt 0 discriminator 1
 2460 01ba 3B1C     		mov	r3, r7
 2461 01bc 0C33     		add	r3, r3, #12
 2462 01be 1A88     		ldrh	r2, [r3]
 2463 01c0 244B     		ldr	r3, .L167+24
 2464 01c2 1B68     		ldr	r3, [r3]
 2465 01c4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 57


 2466 01c6 04D3     		bcc	.L153
 2467              	.L152:
 672:.\main.c      ****             {
 673:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2468              		.loc 1 673 0 is_stmt 1
 2469 01c8 1D4B     		ldr	r3, .L167+4
 2470 01ca 181C     		mov	r0, r3
 2471 01cc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 674:.\main.c      ****             }
 675:.\main.c      ****             break;
 2472              		.loc 1 675 0
 2473 01d0 01E0     		b	.L132
 2474              	.L153:
 2475 01d2 00E0     		b	.L132
 2476              	.L165:
 592:.\main.c      ****             break;
 2477              		.loc 1 592 0
 2478 01d4 C046     		mov	r8, r8
 2479              	.L132:
 676:.\main.c      ****     }
 677:.\main.c      ****     
 678:.\main.c      ****     switch(elbow_state){ //transitions
 2480              		.loc 1 678 0
 2481 01d6 194B     		ldr	r3, .L167
 2482 01d8 1B78     		ldrb	r3, [r3]
 2483 01da 012B     		cmp	r3, #1
 2484 01dc 0CD0     		beq	.L155
 2485 01de 02DC     		bgt	.L156
 2486 01e0 002B     		cmp	r3, #0
 2487 01e2 05D0     		beq	.L157
 2488 01e4 24E0     		b	.L154
 2489              	.L156:
 2490 01e6 022B     		cmp	r3, #2
 2491 01e8 0AD0     		beq	.L158
 2492 01ea 032B     		cmp	r3, #3
 2493 01ec 14D0     		beq	.L159
 2494 01ee 1FE0     		b	.L154
 2495              	.L157:
 679:.\main.c      ****         case elbw_start:
 680:.\main.c      ****             elbow_state = elbw_init;
 2496              		.loc 1 680 0
 2497 01f0 124B     		ldr	r3, .L167
 2498 01f2 0122     		mov	r2, #1
 2499 01f4 1A70     		strb	r2, [r3]
 681:.\main.c      ****             break;
 2500              		.loc 1 681 0
 2501 01f6 1BE0     		b	.L154
 2502              	.L155:
 682:.\main.c      ****         
 683:.\main.c      ****         case elbw_init:
 684:.\main.c      ****             elbow_state = elbw_wait;
 2503              		.loc 1 684 0
 2504 01f8 104B     		ldr	r3, .L167
 2505 01fa 0322     		mov	r2, #3
 2506 01fc 1A70     		strb	r2, [r3]
 685:.\main.c      ****             break;
 2507              		.loc 1 685 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 58


 2508 01fe 17E0     		b	.L154
 2509              	.L158:
 686:.\main.c      ****         
 687:.\main.c      ****         case elbw_execute:
 688:.\main.c      ****             if(ELBOW_FLAG)
 2510              		.loc 1 688 0
 2511 0200 154B     		ldr	r3, .L167+28
 2512 0202 1B78     		ldrb	r3, [r3]
 2513 0204 002B     		cmp	r3, #0
 2514 0206 03D0     		beq	.L160
 689:.\main.c      ****             {
 690:.\main.c      ****                 elbow_state = elbw_execute;
 2515              		.loc 1 690 0
 2516 0208 0C4B     		ldr	r3, .L167
 2517 020a 0222     		mov	r2, #2
 2518 020c 1A70     		strb	r2, [r3]
 691:.\main.c      ****             }
 692:.\main.c      ****             else
 693:.\main.c      ****             {
 694:.\main.c      ****                 elbow_state = elbw_wait;
 695:.\main.c      ****             }
 696:.\main.c      ****             break;
 2519              		.loc 1 696 0
 2520 020e 0FE0     		b	.L154
 2521              	.L160:
 694:.\main.c      ****                 elbow_state = elbw_wait;
 2522              		.loc 1 694 0
 2523 0210 0A4B     		ldr	r3, .L167
 2524 0212 0322     		mov	r2, #3
 2525 0214 1A70     		strb	r2, [r3]
 2526              		.loc 1 696 0
 2527 0216 0BE0     		b	.L154
 2528              	.L159:
 697:.\main.c      ****         
 698:.\main.c      ****         case elbw_wait:
 699:.\main.c      ****             if(ELBOW_FLAG)
 2529              		.loc 1 699 0
 2530 0218 0F4B     		ldr	r3, .L167+28
 2531 021a 1B78     		ldrb	r3, [r3]
 2532 021c 002B     		cmp	r3, #0
 2533 021e 03D0     		beq	.L162
 700:.\main.c      ****             {
 701:.\main.c      ****                 elbow_state = elbw_execute;
 2534              		.loc 1 701 0
 2535 0220 064B     		ldr	r3, .L167
 2536 0222 0222     		mov	r2, #2
 2537 0224 1A70     		strb	r2, [r3]
 702:.\main.c      ****             }
 703:.\main.c      ****             else
 704:.\main.c      ****             {
 705:.\main.c      ****                 elbow_state = elbw_wait; 
 706:.\main.c      ****             }
 707:.\main.c      ****             break;
 2538              		.loc 1 707 0
 2539 0226 02E0     		b	.L166
 2540              	.L162:
 705:.\main.c      ****                 elbow_state = elbw_wait; 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 59


 2541              		.loc 1 705 0
 2542 0228 044B     		ldr	r3, .L167
 2543 022a 0322     		mov	r2, #3
 2544 022c 1A70     		strb	r2, [r3]
 2545              	.L166:
 2546              		.loc 1 707 0
 2547 022e C046     		mov	r8, r8
 2548              	.L154:
 708:.\main.c      ****     }  
 709:.\main.c      ****     return elbw_arr_cspot;
 2549              		.loc 1 709 0
 2550 0230 FB1D     		add	r3, r7, #7
 2551 0232 1B78     		ldrb	r3, [r3]
 710:.\main.c      **** }
 2552              		.loc 1 710 0
 2553 0234 181C     		mov	r0, r3
 2554 0236 BD46     		mov	sp, r7
 2555 0238 05B0     		add	sp, sp, #20
 2556              		@ sp needed
 2557 023a 90BD     		pop	{r4, r7, pc}
 2558              	.L168:
 2559              		.align	2
 2560              	.L167:
 2561 023c 00000000 		.word	elbow_state
 2562 0240 DC050000 		.word	1500
 2563 0244 00000000 		.word	data_array
 2564 0248 00000000 		.word	ELBOW_LOWER_BOUND
 2565 024c DB050000 		.word	1499
 2566 0250 E7030000 		.word	999
 2567 0254 00000000 		.word	ELBOW_UPPER_BOUND
 2568 0258 00000000 		.word	ELBOW_FLAG
 2569              		.cfi_endproc
 2570              	.LFE50:
 2571              		.size	elbow, .-elbow
 2572              		.comm	shoulder_state,1,1
 2573              		.section	.text.shoulder,"ax",%progbits
 2574              		.align	2
 2575              		.global	shoulder
 2576              		.code	16
 2577              		.thumb_func
 2578              		.type	shoulder, %function
 2579              	shoulder:
 2580              	.LFB51:
 711:.\main.c      **** 
 712:.\main.c      **** //control the shoulder
 713:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 714:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 715:.\main.c      **** { 
 2581              		.loc 1 715 0
 2582              		.cfi_startproc
 2583 0000 90B5     		push	{r4, r7, lr}
 2584              		.cfi_def_cfa_offset 12
 2585              		.cfi_offset 4, -12
 2586              		.cfi_offset 7, -8
 2587              		.cfi_offset 14, -4
 2588 0002 85B0     		sub	sp, sp, #20
 2589              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 60


 2590 0004 00AF     		add	r7, sp, #0
 2591              		.cfi_def_cfa_register 7
 2592 0006 021C     		mov	r2, r0
 2593 0008 3960     		str	r1, [r7]
 2594 000a FB1D     		add	r3, r7, #7
 2595 000c 1A70     		strb	r2, [r3]
 716:.\main.c      ****     //take instruction from data_array
 717:.\main.c      ****     //smooth input
 718:.\main.c      ****     //actuate the shoulder using PWM
 719:.\main.c      ****     //get feedback
 720:.\main.c      ****     uint8 i;
 721:.\main.c      ****     uint16 avg;
 722:.\main.c      ****     uint16 command;
 723:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2596              		.loc 1 723 0
 2597 000e 3C1C     		mov	r4, r7
 2598 0010 0C34     		add	r4, r4, #12
 2599 0012 0020     		mov	r0, #0
 2600 0014 FFF7FEFF 		bl	potFeedback
 2601 0018 031C     		mov	r3, r0
 2602 001a 2380     		strh	r3, [r4]
 724:.\main.c      ****     
 725:.\main.c      ****     switch(shoulder_state){ //actions
 2603              		.loc 1 725 0
 2604 001c 874B     		ldr	r3, .L205
 2605 001e 1B78     		ldrb	r3, [r3]
 2606 0020 012B     		cmp	r3, #1
 2607 0022 07D0     		beq	.L171
 2608 0024 00DC     		bgt	.LCB2322
 2609 0026 D5E0     		b	.L203	@long jump
 2610              	.LCB2322:
 2611 0028 022B     		cmp	r3, #2
 2612 002a 24D0     		beq	.L174
 2613 002c 032B     		cmp	r3, #3
 2614 002e 00D1     		bne	.LCB2326
 2615 0030 BCE0     		b	.L175	@long jump
 2616              	.LCB2326:
 2617 0032 D0E0     		b	.L170
 2618              	.L171:
 726:.\main.c      ****         case shldr_start:
 727:.\main.c      ****             break;
 728:.\main.c      **** 
 729:.\main.c      ****         case shldr_init:
 730:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2619              		.loc 1 730 0
 2620 0034 3B1C     		mov	r3, r7
 2621 0036 0F33     		add	r3, r3, #15
 2622 0038 0022     		mov	r2, #0
 2623 003a 1A70     		strb	r2, [r3]
 2624 003c 0EE0     		b	.L176
 2625              	.L177:
 731:.\main.c      ****             {
 732:.\main.c      ****                 shoulder_array[i] = 1500;
 2626              		.loc 1 732 0 discriminator 2
 2627 003e 3B1C     		mov	r3, r7
 2628 0040 0F33     		add	r3, r3, #15
 2629 0042 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 61


 2630 0044 5B00     		lsl	r3, r3, #1
 2631 0046 3A68     		ldr	r2, [r7]
 2632 0048 D318     		add	r3, r2, r3
 2633 004a 7D4A     		ldr	r2, .L205+4
 2634 004c 1A80     		strh	r2, [r3]
 730:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2635              		.loc 1 730 0 discriminator 2
 2636 004e 3B1C     		mov	r3, r7
 2637 0050 0F33     		add	r3, r3, #15
 2638 0052 1A78     		ldrb	r2, [r3]
 2639 0054 3B1C     		mov	r3, r7
 2640 0056 0F33     		add	r3, r3, #15
 2641 0058 0132     		add	r2, r2, #1
 2642 005a 1A70     		strb	r2, [r3]
 2643              	.L176:
 730:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2644              		.loc 1 730 0 is_stmt 0 discriminator 1
 2645 005c 3B1C     		mov	r3, r7
 2646 005e 0F33     		add	r3, r3, #15
 2647 0060 1B78     		ldrb	r3, [r3]
 2648 0062 132B     		cmp	r3, #19
 2649 0064 EBD9     		bls	.L177
 733:.\main.c      ****             }
 734:.\main.c      ****             shldr_arr_cspot = 0;
 2650              		.loc 1 734 0 is_stmt 1
 2651 0066 FB1D     		add	r3, r7, #7
 2652 0068 0022     		mov	r2, #0
 2653 006a 1A70     		strb	r2, [r3]
 735:.\main.c      ****                         
 736:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2654              		.loc 1 736 0
 2655 006c 744B     		ldr	r3, .L205+4
 2656 006e 181C     		mov	r0, r3
 2657 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 737:.\main.c      ****             break;
 2658              		.loc 1 737 0
 2659 0074 AFE0     		b	.L170
 2660              	.L174:
 738:.\main.c      **** 
 739:.\main.c      ****         case shldr_execute:
 740:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2661              		.loc 1 740 0
 2662 0076 3C1C     		mov	r4, r7
 2663 0078 0A34     		add	r4, r4, #10
 2664 007a 724B     		ldr	r3, .L205+8
 2665 007c 181C     		mov	r0, r3
 2666 007e 0C21     		mov	r1, #12
 2667 0080 0D22     		mov	r2, #13
 2668 0082 FFF7FEFF 		bl	make_command
 2669 0086 031C     		mov	r3, r0
 2670 0088 2380     		strh	r3, [r4]
 741:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2671              		.loc 1 741 0
 2672 008a FB1D     		add	r3, r7, #7
 2673 008c 1B78     		ldrb	r3, [r3]
 2674 008e 5B00     		lsl	r3, r3, #1
 2675 0090 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 62


 2676 0092 D318     		add	r3, r2, r3
 2677 0094 3A1C     		mov	r2, r7
 2678 0096 0A32     		add	r2, r2, #10
 2679 0098 1288     		ldrh	r2, [r2]
 2680 009a 1A80     		strh	r2, [r3]
 742:.\main.c      ****         
 743:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2681              		.loc 1 743 0
 2682 009c FB1D     		add	r3, r7, #7
 2683 009e 1B78     		ldrb	r3, [r3]
 2684 00a0 122B     		cmp	r3, #18
 2685 00a2 05D8     		bhi	.L178
 744:.\main.c      ****             {
 745:.\main.c      ****                 shldr_arr_cspot++;
 2686              		.loc 1 745 0
 2687 00a4 FB1D     		add	r3, r7, #7
 2688 00a6 1A78     		ldrb	r2, [r3]
 2689 00a8 FB1D     		add	r3, r7, #7
 2690 00aa 0132     		add	r2, r2, #1
 2691 00ac 1A70     		strb	r2, [r3]
 2692 00ae 02E0     		b	.L179
 2693              	.L178:
 746:.\main.c      ****             }
 747:.\main.c      ****             else
 748:.\main.c      ****             {
 749:.\main.c      ****                 shldr_arr_cspot = 0;
 2694              		.loc 1 749 0
 2695 00b0 FB1D     		add	r3, r7, #7
 2696 00b2 0022     		mov	r2, #0
 2697 00b4 1A70     		strb	r2, [r3]
 2698              	.L179:
 750:.\main.c      ****             }
 751:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2699              		.loc 1 751 0
 2700 00b6 3C1C     		mov	r4, r7
 2701 00b8 0834     		add	r4, r4, #8
 2702 00ba 3B68     		ldr	r3, [r7]
 2703 00bc 181C     		mov	r0, r3
 2704 00be 1421     		mov	r1, #20
 2705 00c0 FFF7FEFF 		bl	average
 2706 00c4 031C     		mov	r3, r0
 2707 00c6 2380     		strh	r3, [r4]
 752:.\main.c      ****             
 753:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2708              		.loc 1 753 0
 2709 00c8 3B1C     		mov	r3, r7
 2710 00ca 0C33     		add	r3, r3, #12
 2711 00cc 1A88     		ldrh	r2, [r3]
 2712 00ce 5E4B     		ldr	r3, .L205+12
 2713 00d0 1B68     		ldr	r3, [r3]
 2714 00d2 9A42     		cmp	r2, r3
 2715 00d4 23D8     		bhi	.L180
 754:.\main.c      ****             {
 755:.\main.c      ****                 if (avg < 1500)
 2716              		.loc 1 755 0
 2717 00d6 3B1C     		mov	r3, r7
 2718 00d8 0833     		add	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 63


 2719 00da 1A88     		ldrh	r2, [r3]
 2720 00dc 5B4B     		ldr	r3, .L205+16
 2721 00de 9A42     		cmp	r2, r3
 2722 00e0 04D8     		bhi	.L181
 756:.\main.c      ****                 {
 757:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2723              		.loc 1 757 0
 2724 00e2 574B     		ldr	r3, .L205+4
 2725 00e4 181C     		mov	r0, r3
 2726 00e6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2727 00ea 5BE0     		b	.L184
 2728              	.L181:
 758:.\main.c      ****                 }
 759:.\main.c      ****                 else
 760:.\main.c      ****                 {
 761:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2729              		.loc 1 761 0
 2730 00ec 3B1C     		mov	r3, r7
 2731 00ee 0833     		add	r3, r3, #8
 2732 00f0 1A88     		ldrh	r2, [r3]
 2733 00f2 FA23     		mov	r3, #250
 2734 00f4 DB00     		lsl	r3, r3, #3
 2735 00f6 9A42     		cmp	r2, r3
 2736 00f8 0CD8     		bhi	.L183
 2737              		.loc 1 761 0 is_stmt 0 discriminator 1
 2738 00fa 3B1C     		mov	r3, r7
 2739 00fc 0833     		add	r3, r3, #8
 2740 00fe 1A88     		ldrh	r2, [r3]
 2741 0100 534B     		ldr	r3, .L205+20
 2742 0102 9A42     		cmp	r2, r3
 2743 0104 06D9     		bls	.L183
 762:.\main.c      ****                     {
 763:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2744              		.loc 1 763 0 is_stmt 1
 2745 0106 3B1C     		mov	r3, r7
 2746 0108 0833     		add	r3, r3, #8
 2747 010a 1B88     		ldrh	r3, [r3]
 2748 010c 181C     		mov	r0, r3
 2749 010e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2750 0112 47E0     		b	.L184
 2751              	.L183:
 764:.\main.c      ****                     }
 765:.\main.c      ****                     else
 766:.\main.c      ****                     {
 767:.\main.c      ****                         //throw error
 768:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2752              		.loc 1 768 0
 2753 0114 4A4B     		ldr	r3, .L205+4
 2754 0116 181C     		mov	r0, r3
 2755 0118 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2756 011c 42E0     		b	.L184
 2757              	.L180:
 769:.\main.c      ****                     }
 770:.\main.c      ****                 }
 771:.\main.c      ****             }
 772:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2758              		.loc 1 772 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 64


 2759 011e 3B1C     		mov	r3, r7
 2760 0120 0C33     		add	r3, r3, #12
 2761 0122 1A88     		ldrh	r2, [r3]
 2762 0124 4B4B     		ldr	r3, .L205+24
 2763 0126 1B68     		ldr	r3, [r3]
 2764 0128 9A42     		cmp	r2, r3
 2765 012a 23D3     		bcc	.L185
 773:.\main.c      ****             {
 774:.\main.c      ****                 if(avg > 1500)
 2766              		.loc 1 774 0
 2767 012c 3B1C     		mov	r3, r7
 2768 012e 0833     		add	r3, r3, #8
 2769 0130 1A88     		ldrh	r2, [r3]
 2770 0132 434B     		ldr	r3, .L205+4
 2771 0134 9A42     		cmp	r2, r3
 2772 0136 04D9     		bls	.L186
 775:.\main.c      ****                 {
 776:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2773              		.loc 1 776 0
 2774 0138 414B     		ldr	r3, .L205+4
 2775 013a 181C     		mov	r0, r3
 2776 013c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2777 0140 30E0     		b	.L184
 2778              	.L186:
 777:.\main.c      ****                 }
 778:.\main.c      ****                 else
 779:.\main.c      ****                 {
 780:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2779              		.loc 1 780 0
 2780 0142 3B1C     		mov	r3, r7
 2781 0144 0833     		add	r3, r3, #8
 2782 0146 1A88     		ldrh	r2, [r3]
 2783 0148 FA23     		mov	r3, #250
 2784 014a DB00     		lsl	r3, r3, #3
 2785 014c 9A42     		cmp	r2, r3
 2786 014e 0CD8     		bhi	.L188
 2787              		.loc 1 780 0 is_stmt 0 discriminator 1
 2788 0150 3B1C     		mov	r3, r7
 2789 0152 0833     		add	r3, r3, #8
 2790 0154 1A88     		ldrh	r2, [r3]
 2791 0156 3E4B     		ldr	r3, .L205+20
 2792 0158 9A42     		cmp	r2, r3
 2793 015a 06D9     		bls	.L188
 781:.\main.c      ****                     {
 782:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2794              		.loc 1 782 0 is_stmt 1
 2795 015c 3B1C     		mov	r3, r7
 2796 015e 0833     		add	r3, r3, #8
 2797 0160 1B88     		ldrh	r3, [r3]
 2798 0162 181C     		mov	r0, r3
 2799 0164 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2800 0168 1CE0     		b	.L184
 2801              	.L188:
 783:.\main.c      ****                     }
 784:.\main.c      ****                     else
 785:.\main.c      ****                     {
 786:.\main.c      ****                         //throw error
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 65


 787:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2802              		.loc 1 787 0
 2803 016a 354B     		ldr	r3, .L205+4
 2804 016c 181C     		mov	r0, r3
 2805 016e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2806 0172 17E0     		b	.L184
 2807              	.L185:
 788:.\main.c      ****                     }
 789:.\main.c      ****                 }
 790:.\main.c      ****             }
 791:.\main.c      ****             else
 792:.\main.c      ****             {
 793:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2808              		.loc 1 793 0
 2809 0174 3B1C     		mov	r3, r7
 2810 0176 0833     		add	r3, r3, #8
 2811 0178 1A88     		ldrh	r2, [r3]
 2812 017a FA23     		mov	r3, #250
 2813 017c DB00     		lsl	r3, r3, #3
 2814 017e 9A42     		cmp	r2, r3
 2815 0180 0CD8     		bhi	.L189
 2816              		.loc 1 793 0 is_stmt 0 discriminator 1
 2817 0182 3B1C     		mov	r3, r7
 2818 0184 0833     		add	r3, r3, #8
 2819 0186 1A88     		ldrh	r2, [r3]
 2820 0188 314B     		ldr	r3, .L205+20
 2821 018a 9A42     		cmp	r2, r3
 2822 018c 06D9     		bls	.L189
 794:.\main.c      ****                 {
 795:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2823              		.loc 1 795 0 is_stmt 1
 2824 018e 3B1C     		mov	r3, r7
 2825 0190 0833     		add	r3, r3, #8
 2826 0192 1B88     		ldrh	r3, [r3]
 2827 0194 181C     		mov	r0, r3
 2828 0196 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2829 019a 03E0     		b	.L184
 2830              	.L189:
 796:.\main.c      ****                 }
 797:.\main.c      ****                 else
 798:.\main.c      ****                 {
 799:.\main.c      ****                     //throw error
 800:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2831              		.loc 1 800 0
 2832 019c 284B     		ldr	r3, .L205+4
 2833 019e 181C     		mov	r0, r3
 2834 01a0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2835              	.L184:
 801:.\main.c      ****                 }
 802:.\main.c      ****             }
 803:.\main.c      ****             SHOULDER_FLAG = 0;
 2836              		.loc 1 803 0
 2837 01a4 2C4B     		ldr	r3, .L205+28
 2838 01a6 0022     		mov	r2, #0
 2839 01a8 1A70     		strb	r2, [r3]
 804:.\main.c      ****             break;
 2840              		.loc 1 804 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 66


 2841 01aa 14E0     		b	.L170
 2842              	.L175:
 805:.\main.c      ****             
 806:.\main.c      ****         case shldr_wait:
 807:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2843              		.loc 1 807 0
 2844 01ac 3B1C     		mov	r3, r7
 2845 01ae 0C33     		add	r3, r3, #12
 2846 01b0 1A88     		ldrh	r2, [r3]
 2847 01b2 254B     		ldr	r3, .L205+12
 2848 01b4 1B68     		ldr	r3, [r3]
 2849 01b6 9A42     		cmp	r2, r3
 2850 01b8 06D9     		bls	.L190
 2851              		.loc 1 807 0 is_stmt 0 discriminator 1
 2852 01ba 3B1C     		mov	r3, r7
 2853 01bc 0C33     		add	r3, r3, #12
 2854 01be 1A88     		ldrh	r2, [r3]
 2855 01c0 244B     		ldr	r3, .L205+24
 2856 01c2 1B68     		ldr	r3, [r3]
 2857 01c4 9A42     		cmp	r2, r3
 2858 01c6 04D3     		bcc	.L191
 2859              	.L190:
 808:.\main.c      ****             {
 809:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2860              		.loc 1 809 0 is_stmt 1
 2861 01c8 1D4B     		ldr	r3, .L205+4
 2862 01ca 181C     		mov	r0, r3
 2863 01cc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 810:.\main.c      ****             }
 811:.\main.c      ****             break;
 2864              		.loc 1 811 0
 2865 01d0 01E0     		b	.L170
 2866              	.L191:
 2867 01d2 00E0     		b	.L170
 2868              	.L203:
 727:.\main.c      ****             break;
 2869              		.loc 1 727 0
 2870 01d4 C046     		mov	r8, r8
 2871              	.L170:
 812:.\main.c      ****     }
 813:.\main.c      ****     
 814:.\main.c      ****     switch(shoulder_state){ //transitions
 2872              		.loc 1 814 0
 2873 01d6 194B     		ldr	r3, .L205
 2874 01d8 1B78     		ldrb	r3, [r3]
 2875 01da 012B     		cmp	r3, #1
 2876 01dc 0CD0     		beq	.L193
 2877 01de 02DC     		bgt	.L194
 2878 01e0 002B     		cmp	r3, #0
 2879 01e2 05D0     		beq	.L195
 2880 01e4 24E0     		b	.L192
 2881              	.L194:
 2882 01e6 022B     		cmp	r3, #2
 2883 01e8 0AD0     		beq	.L196
 2884 01ea 032B     		cmp	r3, #3
 2885 01ec 14D0     		beq	.L197
 2886 01ee 1FE0     		b	.L192
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 67


 2887              	.L195:
 815:.\main.c      ****         case shldr_start:
 816:.\main.c      ****             shoulder_state = shldr_init;
 2888              		.loc 1 816 0
 2889 01f0 124B     		ldr	r3, .L205
 2890 01f2 0122     		mov	r2, #1
 2891 01f4 1A70     		strb	r2, [r3]
 817:.\main.c      ****             break;
 2892              		.loc 1 817 0
 2893 01f6 1BE0     		b	.L192
 2894              	.L193:
 818:.\main.c      ****         
 819:.\main.c      ****         case shldr_init:
 820:.\main.c      ****             shoulder_state = shldr_wait;
 2895              		.loc 1 820 0
 2896 01f8 104B     		ldr	r3, .L205
 2897 01fa 0322     		mov	r2, #3
 2898 01fc 1A70     		strb	r2, [r3]
 821:.\main.c      ****             break;
 2899              		.loc 1 821 0
 2900 01fe 17E0     		b	.L192
 2901              	.L196:
 822:.\main.c      ****         
 823:.\main.c      ****         case shldr_execute:
 824:.\main.c      ****             if(SHOULDER_FLAG)
 2902              		.loc 1 824 0
 2903 0200 154B     		ldr	r3, .L205+28
 2904 0202 1B78     		ldrb	r3, [r3]
 2905 0204 002B     		cmp	r3, #0
 2906 0206 03D0     		beq	.L198
 825:.\main.c      ****             {
 826:.\main.c      ****                 shoulder_state = shldr_execute;
 2907              		.loc 1 826 0
 2908 0208 0C4B     		ldr	r3, .L205
 2909 020a 0222     		mov	r2, #2
 2910 020c 1A70     		strb	r2, [r3]
 827:.\main.c      ****             }
 828:.\main.c      ****             else
 829:.\main.c      ****             {
 830:.\main.c      ****                 shoulder_state = shldr_wait;
 831:.\main.c      ****             }
 832:.\main.c      ****             break;
 2911              		.loc 1 832 0
 2912 020e 0FE0     		b	.L192
 2913              	.L198:
 830:.\main.c      ****                 shoulder_state = shldr_wait;
 2914              		.loc 1 830 0
 2915 0210 0A4B     		ldr	r3, .L205
 2916 0212 0322     		mov	r2, #3
 2917 0214 1A70     		strb	r2, [r3]
 2918              		.loc 1 832 0
 2919 0216 0BE0     		b	.L192
 2920              	.L197:
 833:.\main.c      ****         
 834:.\main.c      ****         case shldr_wait:
 835:.\main.c      ****             if(SHOULDER_FLAG)
 2921              		.loc 1 835 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 68


 2922 0218 0F4B     		ldr	r3, .L205+28
 2923 021a 1B78     		ldrb	r3, [r3]
 2924 021c 002B     		cmp	r3, #0
 2925 021e 03D0     		beq	.L200
 836:.\main.c      ****             {
 837:.\main.c      ****                 shoulder_state = shldr_execute;
 2926              		.loc 1 837 0
 2927 0220 064B     		ldr	r3, .L205
 2928 0222 0222     		mov	r2, #2
 2929 0224 1A70     		strb	r2, [r3]
 838:.\main.c      ****             }
 839:.\main.c      ****             else
 840:.\main.c      ****             {
 841:.\main.c      ****                 shoulder_state = shldr_wait; 
 842:.\main.c      ****             }
 843:.\main.c      ****             break;
 2930              		.loc 1 843 0
 2931 0226 02E0     		b	.L204
 2932              	.L200:
 841:.\main.c      ****                 shoulder_state = shldr_wait; 
 2933              		.loc 1 841 0
 2934 0228 044B     		ldr	r3, .L205
 2935 022a 0322     		mov	r2, #3
 2936 022c 1A70     		strb	r2, [r3]
 2937              	.L204:
 2938              		.loc 1 843 0
 2939 022e C046     		mov	r8, r8
 2940              	.L192:
 844:.\main.c      ****     }  
 845:.\main.c      ****     return shldr_arr_cspot;
 2941              		.loc 1 845 0
 2942 0230 FB1D     		add	r3, r7, #7
 2943 0232 1B78     		ldrb	r3, [r3]
 846:.\main.c      **** }
 2944              		.loc 1 846 0
 2945 0234 181C     		mov	r0, r3
 2946 0236 BD46     		mov	sp, r7
 2947 0238 05B0     		add	sp, sp, #20
 2948              		@ sp needed
 2949 023a 90BD     		pop	{r4, r7, pc}
 2950              	.L206:
 2951              		.align	2
 2952              	.L205:
 2953 023c 00000000 		.word	shoulder_state
 2954 0240 DC050000 		.word	1500
 2955 0244 00000000 		.word	data_array
 2956 0248 00000000 		.word	SHOULDER_LOWER_BOUND
 2957 024c DB050000 		.word	1499
 2958 0250 E7030000 		.word	999
 2959 0254 00000000 		.word	SHOULDER_UPPER_BOUND
 2960 0258 00000000 		.word	SHOULDER_FLAG
 2961              		.cfi_endproc
 2962              	.LFE51:
 2963              		.size	shoulder, .-shoulder
 2964              		.comm	baseAzimuth_state,1,1
 2965              		.section	.text.baseAzimuth,"ax",%progbits
 2966              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 69


 2967              		.global	baseAzimuth
 2968              		.code	16
 2969              		.thumb_func
 2970              		.type	baseAzimuth, %function
 2971              	baseAzimuth:
 2972              	.LFB52:
 847:.\main.c      **** 
 848:.\main.c      **** //control the turret
 849:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 850:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 851:.\main.c      **** { 
 2973              		.loc 1 851 0
 2974              		.cfi_startproc
 2975 0000 90B5     		push	{r4, r7, lr}
 2976              		.cfi_def_cfa_offset 12
 2977              		.cfi_offset 4, -12
 2978              		.cfi_offset 7, -8
 2979              		.cfi_offset 14, -4
 2980 0002 85B0     		sub	sp, sp, #20
 2981              		.cfi_def_cfa_offset 32
 2982 0004 00AF     		add	r7, sp, #0
 2983              		.cfi_def_cfa_register 7
 2984 0006 021C     		mov	r2, r0
 2985 0008 3960     		str	r1, [r7]
 2986 000a FB1D     		add	r3, r7, #7
 2987 000c 1A70     		strb	r2, [r3]
 852:.\main.c      ****     //take instruction from data_array
 853:.\main.c      ****     //smooth input
 854:.\main.c      ****     //actuate the turret using PWM
 855:.\main.c      ****     uint8 i;
 856:.\main.c      ****     uint16 avg;
 857:.\main.c      ****     uint16 command;
 858:.\main.c      ****     
 859:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2988              		.loc 1 859 0
 2989 000e 4E4B     		ldr	r3, .L231
 2990 0010 1B78     		ldrb	r3, [r3]
 2991 0012 012B     		cmp	r3, #1
 2992 0014 03D0     		beq	.L209
 2993 0016 63DD     		ble	.L229
 2994 0018 022B     		cmp	r3, #2
 2995 001a 21D0     		beq	.L212
 860:.\main.c      ****         case BA_start:
 861:.\main.c      ****             break;
 862:.\main.c      **** 
 863:.\main.c      ****         case BA_init:
 864:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 865:.\main.c      ****             {
 866:.\main.c      ****                 baseAz_array[i] = 1500;
 867:.\main.c      ****             }
 868:.\main.c      ****             BA_arr_cspot = 0;
 869:.\main.c      ****             
 870:.\main.c      ****             BA_PWM_WriteCompare(1500);
 871:.\main.c      ****             break;
 872:.\main.c      **** 
 873:.\main.c      ****         case BA_execute:
 874:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 70


 875:.\main.c      ****             
 876:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 877:.\main.c      **** //            
 878:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 879:.\main.c      **** //            {
 880:.\main.c      **** //                BA_arr_cspot++;
 881:.\main.c      **** //            }
 882:.\main.c      **** //            else
 883:.\main.c      **** //            {
 884:.\main.c      **** //                BA_arr_cspot = 0;
 885:.\main.c      **** //            }
 886:.\main.c      ****             
 887:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 888:.\main.c      ****             
 889:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 890:.\main.c      ****             
 891:.\main.c      **** //            if(avg == 1000 || avg == 2000)
 892:.\main.c      **** //            {
 893:.\main.c      **** //
 894:.\main.c      **** //                temp_val = temp_val*(-1);
 895:.\main.c      **** //            }
 896:.\main.c      ****             
 897:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 898:.\main.c      ****             {
 899:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 900:.\main.c      ****             }
 901:.\main.c      ****             else
 902:.\main.c      ****             {
 903:.\main.c      ****                 LED_Write(1);
 904:.\main.c      **** 
 905:.\main.c      ****                 //throw error
 906:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 907:.\main.c      ****             }
 908:.\main.c      ****             BA_FLAG = 0;
 909:.\main.c      ****             break;
 910:.\main.c      ****             
 911:.\main.c      ****         case BA_wait:
 912:.\main.c      ****             break;
 2996              		.loc 1 912 0
 2997 001c 61E0     		b	.L208
 2998              	.L209:
 864:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2999              		.loc 1 864 0
 3000 001e 3B1C     		mov	r3, r7
 3001 0020 0F33     		add	r3, r3, #15
 3002 0022 0022     		mov	r2, #0
 3003 0024 1A70     		strb	r2, [r3]
 3004 0026 0EE0     		b	.L214
 3005              	.L215:
 866:.\main.c      ****                 baseAz_array[i] = 1500;
 3006              		.loc 1 866 0 discriminator 2
 3007 0028 3B1C     		mov	r3, r7
 3008 002a 0F33     		add	r3, r3, #15
 3009 002c 1B78     		ldrb	r3, [r3]
 3010 002e 5B00     		lsl	r3, r3, #1
 3011 0030 3A68     		ldr	r2, [r7]
 3012 0032 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 71


 3013 0034 454A     		ldr	r2, .L231+4
 3014 0036 1A80     		strh	r2, [r3]
 864:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3015              		.loc 1 864 0 discriminator 2
 3016 0038 3B1C     		mov	r3, r7
 3017 003a 0F33     		add	r3, r3, #15
 3018 003c 1A78     		ldrb	r2, [r3]
 3019 003e 3B1C     		mov	r3, r7
 3020 0040 0F33     		add	r3, r3, #15
 3021 0042 0132     		add	r2, r2, #1
 3022 0044 1A70     		strb	r2, [r3]
 3023              	.L214:
 864:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3024              		.loc 1 864 0 is_stmt 0 discriminator 1
 3025 0046 3B1C     		mov	r3, r7
 3026 0048 0F33     		add	r3, r3, #15
 3027 004a 1B78     		ldrb	r3, [r3]
 3028 004c 132B     		cmp	r3, #19
 3029 004e EBD9     		bls	.L215
 868:.\main.c      ****             BA_arr_cspot = 0;
 3030              		.loc 1 868 0 is_stmt 1
 3031 0050 FB1D     		add	r3, r7, #7
 3032 0052 0022     		mov	r2, #0
 3033 0054 1A70     		strb	r2, [r3]
 870:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3034              		.loc 1 870 0
 3035 0056 3D4B     		ldr	r3, .L231+4
 3036 0058 181C     		mov	r0, r3
 3037 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
 871:.\main.c      ****             break;
 3038              		.loc 1 871 0
 3039 005e 40E0     		b	.L208
 3040              	.L212:
 874:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3041              		.loc 1 874 0
 3042 0060 3C1C     		mov	r4, r7
 3043 0062 0C34     		add	r4, r4, #12
 3044 0064 3A4B     		ldr	r3, .L231+8
 3045 0066 181C     		mov	r0, r3
 3046 0068 0A21     		mov	r1, #10
 3047 006a 0B22     		mov	r2, #11
 3048 006c FFF7FEFF 		bl	make_command
 3049 0070 031C     		mov	r3, r0
 3050 0072 2380     		strh	r3, [r4]
 887:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3051              		.loc 1 887 0
 3052 0074 FC1D     		add	r4, r7, #7
 3053 0076 FB1D     		add	r3, r7, #7
 3054 0078 1978     		ldrb	r1, [r3]
 3055 007a 3A68     		ldr	r2, [r7]
 3056 007c 3B1C     		mov	r3, r7
 3057 007e 0C33     		add	r3, r3, #12
 3058 0080 1B88     		ldrh	r3, [r3]
 3059 0082 081C     		mov	r0, r1
 3060 0084 111C     		mov	r1, r2
 3061 0086 1422     		mov	r2, #20
 3062 0088 FFF7FEFF 		bl	pos_to_vel
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 72


 3063 008c 031C     		mov	r3, r0
 3064 008e 2370     		strb	r3, [r4]
 889:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3065              		.loc 1 889 0
 3066 0090 3C1C     		mov	r4, r7
 3067 0092 0A34     		add	r4, r4, #10
 3068 0094 3B68     		ldr	r3, [r7]
 3069 0096 181C     		mov	r0, r3
 3070 0098 1421     		mov	r1, #20
 3071 009a FFF7FEFF 		bl	average
 3072 009e 031C     		mov	r3, r0
 3073 00a0 2380     		strh	r3, [r4]
 897:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3074              		.loc 1 897 0
 3075 00a2 3B1C     		mov	r3, r7
 3076 00a4 0A33     		add	r3, r3, #10
 3077 00a6 1A88     		ldrh	r2, [r3]
 3078 00a8 FA23     		mov	r3, #250
 3079 00aa DB00     		lsl	r3, r3, #3
 3080 00ac 9A42     		cmp	r2, r3
 3081 00ae 0CD8     		bhi	.L216
 897:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3082              		.loc 1 897 0 is_stmt 0 discriminator 1
 3083 00b0 3B1C     		mov	r3, r7
 3084 00b2 0A33     		add	r3, r3, #10
 3085 00b4 1A88     		ldrh	r2, [r3]
 3086 00b6 274B     		ldr	r3, .L231+12
 3087 00b8 9A42     		cmp	r2, r3
 3088 00ba 06D9     		bls	.L216
 899:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3089              		.loc 1 899 0 is_stmt 1
 3090 00bc 3B1C     		mov	r3, r7
 3091 00be 0A33     		add	r3, r3, #10
 3092 00c0 1B88     		ldrh	r3, [r3]
 3093 00c2 181C     		mov	r0, r3
 3094 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3095 00c8 06E0     		b	.L217
 3096              	.L216:
 903:.\main.c      ****                 LED_Write(1);
 3097              		.loc 1 903 0
 3098 00ca 0120     		mov	r0, #1
 3099 00cc FFF7FEFF 		bl	LED_Write
 906:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3100              		.loc 1 906 0
 3101 00d0 1E4B     		ldr	r3, .L231+4
 3102 00d2 181C     		mov	r0, r3
 3103 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3104              	.L217:
 908:.\main.c      ****             BA_FLAG = 0;
 3105              		.loc 1 908 0
 3106 00d8 1F4B     		ldr	r3, .L231+16
 3107 00da 0022     		mov	r2, #0
 3108 00dc 1A70     		strb	r2, [r3]
 909:.\main.c      ****             break;
 3109              		.loc 1 909 0
 3110 00de 00E0     		b	.L208
 3111              	.L229:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 73


 861:.\main.c      ****             break;
 3112              		.loc 1 861 0
 3113 00e0 C046     		mov	r8, r8
 3114              	.L208:
 913:.\main.c      ****     }
 914:.\main.c      ****     
 915:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3115              		.loc 1 915 0
 3116 00e2 194B     		ldr	r3, .L231
 3117 00e4 1B78     		ldrb	r3, [r3]
 3118 00e6 012B     		cmp	r3, #1
 3119 00e8 0CD0     		beq	.L219
 3120 00ea 02DC     		bgt	.L220
 3121 00ec 002B     		cmp	r3, #0
 3122 00ee 05D0     		beq	.L221
 3123 00f0 24E0     		b	.L218
 3124              	.L220:
 3125 00f2 022B     		cmp	r3, #2
 3126 00f4 0AD0     		beq	.L222
 3127 00f6 032B     		cmp	r3, #3
 3128 00f8 14D0     		beq	.L223
 3129 00fa 1FE0     		b	.L218
 3130              	.L221:
 916:.\main.c      ****         case BA_start:
 917:.\main.c      ****             baseAzimuth_state = BA_init;
 3131              		.loc 1 917 0
 3132 00fc 124B     		ldr	r3, .L231
 3133 00fe 0122     		mov	r2, #1
 3134 0100 1A70     		strb	r2, [r3]
 918:.\main.c      ****             break;
 3135              		.loc 1 918 0
 3136 0102 1BE0     		b	.L218
 3137              	.L219:
 919:.\main.c      ****         
 920:.\main.c      ****         case BA_init:
 921:.\main.c      ****             baseAzimuth_state = BA_wait;
 3138              		.loc 1 921 0
 3139 0104 104B     		ldr	r3, .L231
 3140 0106 0322     		mov	r2, #3
 3141 0108 1A70     		strb	r2, [r3]
 922:.\main.c      ****             break;
 3142              		.loc 1 922 0
 3143 010a 17E0     		b	.L218
 3144              	.L222:
 923:.\main.c      ****         
 924:.\main.c      ****         case BA_execute:
 925:.\main.c      ****             if(BA_FLAG)
 3145              		.loc 1 925 0
 3146 010c 124B     		ldr	r3, .L231+16
 3147 010e 1B78     		ldrb	r3, [r3]
 3148 0110 002B     		cmp	r3, #0
 3149 0112 03D0     		beq	.L224
 926:.\main.c      ****             {
 927:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3150              		.loc 1 927 0
 3151 0114 0C4B     		ldr	r3, .L231
 3152 0116 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 74


 3153 0118 1A70     		strb	r2, [r3]
 928:.\main.c      ****             }
 929:.\main.c      ****             else
 930:.\main.c      ****             {
 931:.\main.c      ****                 baseAzimuth_state = BA_wait;
 932:.\main.c      ****             }
 933:.\main.c      ****             break;
 3154              		.loc 1 933 0
 3155 011a 0FE0     		b	.L218
 3156              	.L224:
 931:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3157              		.loc 1 931 0
 3158 011c 0A4B     		ldr	r3, .L231
 3159 011e 0322     		mov	r2, #3
 3160 0120 1A70     		strb	r2, [r3]
 3161              		.loc 1 933 0
 3162 0122 0BE0     		b	.L218
 3163              	.L223:
 934:.\main.c      ****         
 935:.\main.c      ****         case BA_wait:
 936:.\main.c      ****             if(BA_FLAG)
 3164              		.loc 1 936 0
 3165 0124 0C4B     		ldr	r3, .L231+16
 3166 0126 1B78     		ldrb	r3, [r3]
 3167 0128 002B     		cmp	r3, #0
 3168 012a 03D0     		beq	.L226
 937:.\main.c      ****             {
 938:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3169              		.loc 1 938 0
 3170 012c 064B     		ldr	r3, .L231
 3171 012e 0222     		mov	r2, #2
 3172 0130 1A70     		strb	r2, [r3]
 939:.\main.c      ****             }
 940:.\main.c      ****             else
 941:.\main.c      ****             {
 942:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 943:.\main.c      ****             }
 944:.\main.c      ****             break;
 3173              		.loc 1 944 0
 3174 0132 02E0     		b	.L230
 3175              	.L226:
 942:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3176              		.loc 1 942 0
 3177 0134 044B     		ldr	r3, .L231
 3178 0136 0322     		mov	r2, #3
 3179 0138 1A70     		strb	r2, [r3]
 3180              	.L230:
 3181              		.loc 1 944 0
 3182 013a C046     		mov	r8, r8
 3183              	.L218:
 945:.\main.c      ****     }  
 946:.\main.c      ****     return BA_arr_cspot;
 3184              		.loc 1 946 0
 3185 013c FB1D     		add	r3, r7, #7
 3186 013e 1B78     		ldrb	r3, [r3]
 947:.\main.c      **** }
 3187              		.loc 1 947 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 75


 3188 0140 181C     		mov	r0, r3
 3189 0142 BD46     		mov	sp, r7
 3190 0144 05B0     		add	sp, sp, #20
 3191              		@ sp needed
 3192 0146 90BD     		pop	{r4, r7, pc}
 3193              	.L232:
 3194              		.align	2
 3195              	.L231:
 3196 0148 00000000 		.word	baseAzimuth_state
 3197 014c DC050000 		.word	1500
 3198 0150 00000000 		.word	data_array
 3199 0154 E7030000 		.word	999
 3200 0158 00000000 		.word	BA_FLAG
 3201              		.cfi_endproc
 3202              	.LFE52:
 3203              		.size	baseAzimuth, .-baseAzimuth
 3204              		.comm	effector_state,1,1
 3205              		.section	.text.effector,"ax",%progbits
 3206              		.align	2
 3207              		.global	effector
 3208              		.code	16
 3209              		.thumb_func
 3210              		.type	effector, %function
 3211              	effector:
 3212              	.LFB53:
 948:.\main.c      **** 
 949:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 950:.\main.c      **** void effector()
 951:.\main.c      **** {
 3213              		.loc 1 951 0
 3214              		.cfi_startproc
 3215 0000 90B5     		push	{r4, r7, lr}
 3216              		.cfi_def_cfa_offset 12
 3217              		.cfi_offset 4, -12
 3218              		.cfi_offset 7, -8
 3219              		.cfi_offset 14, -4
 3220 0002 83B0     		sub	sp, sp, #12
 3221              		.cfi_def_cfa_offset 24
 3222 0004 00AF     		add	r7, sp, #0
 3223              		.cfi_def_cfa_register 7
 952:.\main.c      ****     uint16 command;
 953:.\main.c      **** 
 954:.\main.c      ****     switch(effector_state){ //actions
 3224              		.loc 1 954 0
 3225 0006 304B     		ldr	r3, .L253
 3226 0008 1B78     		ldrb	r3, [r3]
 3227 000a 012B     		cmp	r3, #1
 3228 000c 03D0     		beq	.L235
 3229 000e 29DD     		ble	.L252
 3230 0010 022B     		cmp	r3, #2
 3231 0012 05D0     		beq	.L238
 955:.\main.c      ****         case shldr_start:
 956:.\main.c      ****             break;
 957:.\main.c      **** 
 958:.\main.c      ****         case eff_init:           
 959:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 960:.\main.c      ****            break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 76


 961:.\main.c      **** 
 962:.\main.c      ****         case eff_execute:
 963:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 964:.\main.c      **** 
 965:.\main.c      ****             if(command <= 2000 && command >= 1000)
 966:.\main.c      ****             {
 967:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 968:.\main.c      ****             }
 969:.\main.c      ****             else
 970:.\main.c      ****             {
 971:.\main.c      ****                 //throw error
 972:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 973:.\main.c      ****             }
 974:.\main.c      ****             
 975:.\main.c      ****             EFFECTOR_FLAG = 0;
 976:.\main.c      ****             break;
 977:.\main.c      ****             
 978:.\main.c      ****         case eff_wait:
 979:.\main.c      ****             break;
 3232              		.loc 1 979 0
 3233 0014 27E0     		b	.L234
 3234              	.L235:
 959:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3235              		.loc 1 959 0
 3236 0016 2D4B     		ldr	r3, .L253+4
 3237 0018 181C     		mov	r0, r3
 3238 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 960:.\main.c      ****            break;
 3239              		.loc 1 960 0
 3240 001e 22E0     		b	.L234
 3241              	.L238:
 963:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3242              		.loc 1 963 0
 3243 0020 BC1D     		add	r4, r7, #6
 3244 0022 2B4B     		ldr	r3, .L253+8
 3245 0024 181C     		mov	r0, r3
 3246 0026 1421     		mov	r1, #20
 3247 0028 1522     		mov	r2, #21
 3248 002a FFF7FEFF 		bl	make_command
 3249 002e 031C     		mov	r3, r0
 3250 0030 2380     		strh	r3, [r4]
 965:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3251              		.loc 1 965 0
 3252 0032 BB1D     		add	r3, r7, #6
 3253 0034 1A88     		ldrh	r2, [r3]
 3254 0036 FA23     		mov	r3, #250
 3255 0038 DB00     		lsl	r3, r3, #3
 3256 003a 9A42     		cmp	r2, r3
 3257 003c 0AD8     		bhi	.L240
 965:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3258              		.loc 1 965 0 is_stmt 0 discriminator 1
 3259 003e BB1D     		add	r3, r7, #6
 3260 0040 1A88     		ldrh	r2, [r3]
 3261 0042 244B     		ldr	r3, .L253+12
 3262 0044 9A42     		cmp	r2, r3
 3263 0046 05D9     		bls	.L240
 967:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 77


 3264              		.loc 1 967 0 is_stmt 1
 3265 0048 BB1D     		add	r3, r7, #6
 3266 004a 1B88     		ldrh	r3, [r3]
 3267 004c 181C     		mov	r0, r3
 3268 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3269 0052 03E0     		b	.L241
 3270              	.L240:
 972:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3271              		.loc 1 972 0
 3272 0054 1D4B     		ldr	r3, .L253+4
 3273 0056 181C     		mov	r0, r3
 3274 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3275              	.L241:
 975:.\main.c      ****             EFFECTOR_FLAG = 0;
 3276              		.loc 1 975 0
 3277 005c 1E4B     		ldr	r3, .L253+16
 3278 005e 0022     		mov	r2, #0
 3279 0060 1A70     		strb	r2, [r3]
 976:.\main.c      ****             break;
 3280              		.loc 1 976 0
 3281 0062 00E0     		b	.L234
 3282              	.L252:
 956:.\main.c      ****             break;
 3283              		.loc 1 956 0
 3284 0064 C046     		mov	r8, r8
 3285              	.L234:
 980:.\main.c      ****     }
 981:.\main.c      ****     
 982:.\main.c      ****     switch(effector_state){ //transitions
 3286              		.loc 1 982 0
 3287 0066 184B     		ldr	r3, .L253
 3288 0068 1B78     		ldrb	r3, [r3]
 3289 006a 012B     		cmp	r3, #1
 3290 006c 0CD0     		beq	.L243
 3291 006e 02DC     		bgt	.L244
 3292 0070 002B     		cmp	r3, #0
 3293 0072 05D0     		beq	.L245
 3294 0074 24E0     		b	.L233
 3295              	.L244:
 3296 0076 022B     		cmp	r3, #2
 3297 0078 0AD0     		beq	.L246
 3298 007a 032B     		cmp	r3, #3
 3299 007c 14D0     		beq	.L247
 3300 007e 1FE0     		b	.L233
 3301              	.L245:
 983:.\main.c      ****         case eff_start:
 984:.\main.c      ****             effector_state = eff_init;
 3302              		.loc 1 984 0
 3303 0080 114B     		ldr	r3, .L253
 3304 0082 0122     		mov	r2, #1
 3305 0084 1A70     		strb	r2, [r3]
 985:.\main.c      ****             break;
 3306              		.loc 1 985 0
 3307 0086 1BE0     		b	.L233
 3308              	.L243:
 986:.\main.c      ****         
 987:.\main.c      ****         case eff_init:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 78


 988:.\main.c      ****             effector_state = eff_wait;
 3309              		.loc 1 988 0
 3310 0088 0F4B     		ldr	r3, .L253
 3311 008a 0322     		mov	r2, #3
 3312 008c 1A70     		strb	r2, [r3]
 989:.\main.c      ****             break;
 3313              		.loc 1 989 0
 3314 008e 17E0     		b	.L233
 3315              	.L246:
 990:.\main.c      ****         
 991:.\main.c      ****         case eff_execute:
 992:.\main.c      ****             if(EFFECTOR_FLAG)
 3316              		.loc 1 992 0
 3317 0090 114B     		ldr	r3, .L253+16
 3318 0092 1B78     		ldrb	r3, [r3]
 3319 0094 002B     		cmp	r3, #0
 3320 0096 03D0     		beq	.L248
 993:.\main.c      ****             {
 994:.\main.c      ****                 effector_state = eff_execute;
 3321              		.loc 1 994 0
 3322 0098 0B4B     		ldr	r3, .L253
 3323 009a 0222     		mov	r2, #2
 3324 009c 1A70     		strb	r2, [r3]
 995:.\main.c      ****             }
 996:.\main.c      ****             else
 997:.\main.c      ****             {
 998:.\main.c      ****                 effector_state = eff_wait;
 999:.\main.c      ****             }
1000:.\main.c      ****             break;
 3325              		.loc 1 1000 0
 3326 009e 0FE0     		b	.L233
 3327              	.L248:
 998:.\main.c      ****                 effector_state = eff_wait;
 3328              		.loc 1 998 0
 3329 00a0 094B     		ldr	r3, .L253
 3330 00a2 0322     		mov	r2, #3
 3331 00a4 1A70     		strb	r2, [r3]
 3332              		.loc 1 1000 0
 3333 00a6 0BE0     		b	.L233
 3334              	.L247:
1001:.\main.c      ****         
1002:.\main.c      ****         case eff_wait:
1003:.\main.c      ****             if(EFFECTOR_FLAG)
 3335              		.loc 1 1003 0
 3336 00a8 0B4B     		ldr	r3, .L253+16
 3337 00aa 1B78     		ldrb	r3, [r3]
 3338 00ac 002B     		cmp	r3, #0
 3339 00ae 03D0     		beq	.L250
1004:.\main.c      ****             {
1005:.\main.c      ****                 effector_state = eff_execute;
 3340              		.loc 1 1005 0
 3341 00b0 054B     		ldr	r3, .L253
 3342 00b2 0222     		mov	r2, #2
 3343 00b4 1A70     		strb	r2, [r3]
 3344 00b6 02E0     		b	.L251
 3345              	.L250:
1006:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 79


1007:.\main.c      ****             else
1008:.\main.c      ****             {
1009:.\main.c      ****                 effector_state = eff_wait; 
 3346              		.loc 1 1009 0
 3347 00b8 034B     		ldr	r3, .L253
 3348 00ba 0322     		mov	r2, #3
 3349 00bc 1A70     		strb	r2, [r3]
 3350              	.L251:
1010:.\main.c      ****             }
1011:.\main.c      ****             break;
 3351              		.loc 1 1011 0
 3352 00be C046     		mov	r8, r8
 3353              	.L233:
1012:.\main.c      ****     }    
1013:.\main.c      **** }
 3354              		.loc 1 1013 0
 3355 00c0 BD46     		mov	sp, r7
 3356 00c2 03B0     		add	sp, sp, #12
 3357              		@ sp needed
 3358 00c4 90BD     		pop	{r4, r7, pc}
 3359              	.L254:
 3360 00c6 C046     		.align	2
 3361              	.L253:
 3362 00c8 00000000 		.word	effector_state
 3363 00cc DC050000 		.word	1500
 3364 00d0 00000000 		.word	data_array
 3365 00d4 E7030000 		.word	999
 3366 00d8 00000000 		.word	EFFECTOR_FLAG
 3367              		.cfi_endproc
 3368              	.LFE53:
 3369              		.size	effector, .-effector
 3370              		.section	.text.initialize,"ax",%progbits
 3371              		.align	2
 3372              		.global	initialize
 3373              		.code	16
 3374              		.thumb_func
 3375              		.type	initialize, %function
 3376              	initialize:
 3377              	.LFB54:
1014:.\main.c      **** 
1015:.\main.c      **** //Initialization function for the program
1016:.\main.c      **** void initialize()
1017:.\main.c      **** {
 3378              		.loc 1 1017 0
 3379              		.cfi_startproc
 3380 0000 80B5     		push	{r7, lr}
 3381              		.cfi_def_cfa_offset 8
 3382              		.cfi_offset 7, -8
 3383              		.cfi_offset 14, -4
 3384 0002 82B0     		sub	sp, sp, #8
 3385              		.cfi_def_cfa_offset 16
 3386 0004 00AF     		add	r7, sp, #0
 3387              		.cfi_def_cfa_register 7
1018:.\main.c      ****     //initialize the wiznet
1019:.\main.c      ****     WIZ_RST_Write(0);
 3388              		.loc 1 1019 0
 3389 0006 0020     		mov	r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 80


 3390 0008 FFF7FEFF 		bl	WIZ_RST_Write
1020:.\main.c      ****     CyDelay(10);
 3391              		.loc 1 1020 0
 3392 000c 0A20     		mov	r0, #10
 3393 000e FFF7FEFF 		bl	CyDelay
1021:.\main.c      ****     WIZ_RST_Write(1);
 3394              		.loc 1 1021 0
 3395 0012 0120     		mov	r0, #1
 3396 0014 FFF7FEFF 		bl	WIZ_RST_Write
1022:.\main.c      ****     WIZ_SS_Write(1);
 3397              		.loc 1 1022 0
 3398 0018 0120     		mov	r0, #1
 3399 001a FFF7FEFF 		bl	WIZ_SS_Write
 3400              	.LBB2:
1023:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3401              		.loc 1 1023 0
 3402 001e FB1D     		add	r3, r7, #7
 3403 0020 0022     		mov	r2, #0
 3404 0022 1A70     		strb	r2, [r3]
 3405 0024 0DE0     		b	.L256
 3406              	.L259:
1024:.\main.c      ****     {
1025:.\main.c      ****         if(WIZ_RDY_Read())
 3407              		.loc 1 1025 0
 3408 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3409 002a 031C     		mov	r3, r0
 3410 002c 002B     		cmp	r3, #0
 3411 002e 00D0     		beq	.L257
1026:.\main.c      ****         {
1027:.\main.c      ****             break;
 3412              		.loc 1 1027 0
 3413 0030 0BE0     		b	.L258
 3414              	.L257:
1028:.\main.c      ****         }
1029:.\main.c      ****         else
1030:.\main.c      ****         {
1031:.\main.c      ****             CyDelay(4);
 3415              		.loc 1 1031 0
 3416 0032 0420     		mov	r0, #4
 3417 0034 FFF7FEFF 		bl	CyDelay
1023:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3418              		.loc 1 1023 0
 3419 0038 FB1D     		add	r3, r7, #7
 3420 003a 1A78     		ldrb	r2, [r3]
 3421 003c FB1D     		add	r3, r7, #7
 3422 003e 0132     		add	r2, r2, #1
 3423 0040 1A70     		strb	r2, [r3]
 3424              	.L256:
1023:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3425              		.loc 1 1023 0 is_stmt 0 discriminator 1
 3426 0042 FB1D     		add	r3, r7, #7
 3427 0044 1B78     		ldrb	r3, [r3]
 3428 0046 632B     		cmp	r3, #99
 3429 0048 EDD9     		bls	.L259
 3430              	.L258:
 3431              	.LBE2:
1032:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 81


1033:.\main.c      ****     }
1034:.\main.c      ****     
1035:.\main.c      ****     //Initialize state variables
1036:.\main.c      ****     baseAzimuth_state = BA_start;
 3432              		.loc 1 1036 0 is_stmt 1
 3433 004a 2D4B     		ldr	r3, .L260
 3434 004c 0022     		mov	r2, #0
 3435 004e 1A70     		strb	r2, [r3]
1037:.\main.c      ****     wristTilt_state = tilt_start;
 3436              		.loc 1 1037 0
 3437 0050 2C4B     		ldr	r3, .L260+4
 3438 0052 0022     		mov	r2, #0
 3439 0054 1A70     		strb	r2, [r3]
1038:.\main.c      ****     wristRotate_state = rotate_start;
 3440              		.loc 1 1038 0
 3441 0056 2C4B     		ldr	r3, .L260+8
 3442 0058 0022     		mov	r2, #0
 3443 005a 1A70     		strb	r2, [r3]
1039:.\main.c      ****     shoulder_state = shldr_start;
 3444              		.loc 1 1039 0
 3445 005c 2B4B     		ldr	r3, .L260+12
 3446 005e 0022     		mov	r2, #0
 3447 0060 1A70     		strb	r2, [r3]
1040:.\main.c      ****     elbow_state = elbw_start;
 3448              		.loc 1 1040 0
 3449 0062 2B4B     		ldr	r3, .L260+16
 3450 0064 0022     		mov	r2, #0
 3451 0066 1A70     		strb	r2, [r3]
1041:.\main.c      ****     effector_state = eff_start;
 3452              		.loc 1 1041 0
 3453 0068 2A4B     		ldr	r3, .L260+20
 3454 006a 0022     		mov	r2, #0
 3455 006c 1A70     		strb	r2, [r3]
1042:.\main.c      ****     
1043:.\main.c      ****     //start all of our components
1044:.\main.c      ****     SPIM_1_Start();
 3456              		.loc 1 1044 0
 3457 006e FFF7FEFF 		bl	SPIM_1_Start
1045:.\main.c      ****     Clock_pwm_Start();
 3458              		.loc 1 1045 0
 3459 0072 FFF7FEFF 		bl	Clock_pwm_Start
1046:.\main.c      ****     Clock_counter_Start();
 3460              		.loc 1 1046 0
 3461 0076 FFF7FEFF 		bl	Clock_counter_Start
1047:.\main.c      ****     UART_1_Start();
 3462              		.loc 1 1047 0
 3463 007a FFF7FEFF 		bl	UART_1_Start
1048:.\main.c      ****     SHLDR_PWM_Start();
 3464              		.loc 1 1048 0
 3465 007e FFF7FEFF 		bl	SHLDR_PWM_Start
1049:.\main.c      ****     BA_PWM_Start();
 3466              		.loc 1 1049 0
 3467 0082 FFF7FEFF 		bl	BA_PWM_Start
1050:.\main.c      ****     ELBW_PWM_Start();
 3468              		.loc 1 1050 0
 3469 0086 FFF7FEFF 		bl	ELBW_PWM_Start
1051:.\main.c      ****     EFFECTOR_PWM_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 82


 3470              		.loc 1 1051 0
 3471 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
1052:.\main.c      ****     ADC_Start();
 3472              		.loc 1 1052 0
 3473 008e FFF7FEFF 		bl	ADC_Start
1053:.\main.c      ****     ADC_StartConvert();
 3474              		.loc 1 1053 0
 3475 0092 FFF7FEFF 		bl	ADC_StartConvert
1054:.\main.c      ****     
1055:.\main.c      ****     //uint8_t test_byte;
1056:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3476              		.loc 1 1056 0
 3477 0096 204B     		ldr	r3, .L260+24
 3478 0098 0420     		mov	r0, #4
 3479 009a 0121     		mov	r1, #1
 3480 009c 1A1C     		mov	r2, r3
 3481 009e FFF7FEFF 		bl	wiznetInit
1057:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1058:.\main.c      ****     
1059:.\main.c      ****     //Initialize the dynamixels
1060:.\main.c      ****     ServoSpeed(0xFE, 100);
 3482              		.loc 1 1060 0
 3483 00a2 FE20     		mov	r0, #254
 3484 00a4 6421     		mov	r1, #100
 3485 00a6 FFF7FEFF 		bl	ServoSpeed
1061:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3486              		.loc 1 1061 0
 3487 00aa 1C4B     		ldr	r3, .L260+28
 3488 00ac FE20     		mov	r0, #254
 3489 00ae 191C     		mov	r1, r3
 3490 00b0 FFF7FEFF 		bl	SetServoTorque
1062:.\main.c      ****     
1063:.\main.c      ****     //Initialize our motor drivers
1064:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3491              		.loc 1 1064 0
 3492 00b4 1A4B     		ldr	r3, .L260+32
 3493 00b6 181C     		mov	r0, r3
 3494 00b8 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1065:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3495              		.loc 1 1065 0
 3496 00bc 184B     		ldr	r3, .L260+32
 3497 00be 181C     		mov	r0, r3
 3498 00c0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1066:.\main.c      ****     CyDelay(3000);
 3499              		.loc 1 1066 0
 3500 00c4 174B     		ldr	r3, .L260+36
 3501 00c6 181C     		mov	r0, r3
 3502 00c8 FFF7FEFF 		bl	CyDelay
1067:.\main.c      ****     
1068:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1069:.\main.c      ****     //SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
1070:.\main.c      ****     //SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
1071:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 3503              		.loc 1 1071 0
 3504 00cc 164B     		ldr	r3, .L260+40
 3505 00ce 181C     		mov	r0, r3
 3506 00d0 FFF7FEFF 		bl	CalibrationElbow
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 83


 3507 00d4 031C     		mov	r3, r0
 3508 00d6 1A1C     		mov	r2, r3
 3509 00d8 144B     		ldr	r3, .L260+44
 3510 00da 1A60     		str	r2, [r3]
1072:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 3511              		.loc 1 1072 0
 3512 00dc 144B     		ldr	r3, .L260+48
 3513 00de 181C     		mov	r0, r3
 3514 00e0 FFF7FEFF 		bl	CalibrationElbow
 3515 00e4 031C     		mov	r3, r0
 3516 00e6 1A1C     		mov	r2, r3
 3517 00e8 124B     		ldr	r3, .L260+52
 3518 00ea 1A60     		str	r2, [r3]
1073:.\main.c      ****     
1074:.\main.c      ****     //helps for generating random arrays
1075:.\main.c      ****     //srand((unsigned) time(&t));
1076:.\main.c      ****     
1077:.\main.c      ****     CyGlobalIntEnable;
 3519              		.loc 1 1077 0
 3520              	@ 1077 ".\main.c" 1
 3521 00ec 62B6     		CPSIE   i
 3522              	@ 0 "" 2
1078:.\main.c      ****     isr_1_StartEx(timer_isr);
 3523              		.loc 1 1078 0
 3524              		.code	16
 3525 00ee 124B     		ldr	r3, .L260+56
 3526 00f0 181C     		mov	r0, r3
 3527 00f2 FFF7FEFF 		bl	isr_1_StartEx
1079:.\main.c      ****     Timer_1_Start();
 3528              		.loc 1 1079 0
 3529 00f6 FFF7FEFF 		bl	Timer_1_Start
1080:.\main.c      ****     
1081:.\main.c      ****     //UART_TEST_Start();
1082:.\main.c      ****     
1083:.\main.c      **** }
 3530              		.loc 1 1083 0
 3531 00fa BD46     		mov	sp, r7
 3532 00fc 02B0     		add	sp, sp, #8
 3533              		@ sp needed
 3534 00fe 80BD     		pop	{r7, pc}
 3535              	.L261:
 3536              		.align	2
 3537              	.L260:
 3538 0100 00000000 		.word	baseAzimuth_state
 3539 0104 00000000 		.word	wristTilt_state
 3540 0108 00000000 		.word	wristRotate_state
 3541 010c 00000000 		.word	shoulder_state
 3542 0110 00000000 		.word	elbow_state
 3543 0114 00000000 		.word	effector_state
 3544 0118 87690000 		.word	27015
 3545 011c FF030000 		.word	1023
 3546 0120 DC050000 		.word	1500
 3547 0124 B80B0000 		.word	3000
 3548 0128 A4060000 		.word	1700
 3549 012c 00000000 		.word	ELBOW_UPPER_BOUND
 3550 0130 14050000 		.word	1300
 3551 0134 00000000 		.word	ELBOW_LOWER_BOUND
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 84


 3552 0138 00000000 		.word	timer_isr
 3553              		.cfi_endproc
 3554              	.LFE54:
 3555              		.size	initialize, .-initialize
 3556              		.section	.text.main,"ax",%progbits
 3557              		.align	2
 3558              		.global	main
 3559              		.code	16
 3560              		.thumb_func
 3561              		.type	main, %function
 3562              	main:
 3563              	.LFB55:
1084:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1085:.\main.c      **** int main()
1086:.\main.c      **** {  
 3564              		.loc 1 1086 0
 3565              		.cfi_startproc
 3566 0000 90B5     		push	{r4, r7, lr}
 3567              		.cfi_def_cfa_offset 12
 3568              		.cfi_offset 4, -12
 3569              		.cfi_offset 7, -8
 3570              		.cfi_offset 14, -4
 3571 0002 B7B0     		sub	sp, sp, #220
 3572              		.cfi_def_cfa_offset 232
 3573 0004 00AF     		add	r7, sp, #0
 3574              		.cfi_def_cfa_register 7
1087:.\main.c      ****     //Define variables
1088:.\main.c      ****     //for testing
1089:.\main.c      **** //    time_t t; 
1090:.\main.c      **** //    char time_array[8];
1091:.\main.c      **** //    uint8 counter;
1092:.\main.c      **** //    int direction = 0;
1093:.\main.c      ****     
1094:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1095:.\main.c      ****     
1096:.\main.c      ****     uint8 BA_cspot;
1097:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1098:.\main.c      ****     uint8 shldr_cspot;
1099:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1100:.\main.c      ****     uint8 elbw_cspot;
1101:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1102:.\main.c      ****     uint8 WT_cspot;
1103:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1104:.\main.c      ****     uint8 WR_cspot;
1105:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1106:.\main.c      ****     
1107:.\main.c      ****     //for testing
1108:.\main.c      **** //    int increasing = 1;
1109:.\main.c      **** //    int first_count;
1110:.\main.c      **** //    int second_count;
1111:.\main.c      **** //    int temp_code_time;
1112:.\main.c      **** //    int code_time = 0;
1113:.\main.c      ****     
1114:.\main.c      ****     
1115:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 3575              		.loc 1 1115 0
 3576 0006 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 85


 3577 0008 D233     		add	r3, r3, #210
 3578 000a 0022     		mov	r2, #0
 3579 000c 1A70     		strb	r2, [r3]
1116:.\main.c      ****     int16 temp_val = 1500; 
 3580              		.loc 1 1116 0
 3581 000e 3B1C     		mov	r3, r7
 3582 0010 CA33     		add	r3, r3, #202
 3583 0012 5A4A     		ldr	r2, .L274
 3584 0014 1A80     		strh	r2, [r3]
1117:.\main.c      ****     
1118:.\main.c      ****     initialize();
 3585              		.loc 1 1118 0
 3586 0016 FFF7FEFF 		bl	initialize
 3587              	.L272:
1119:.\main.c      **** //    uint8 i;
1120:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1121:.\main.c      **** //    {
1122:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1123:.\main.c      **** //    }
1124:.\main.c      **** 
1125:.\main.c      ****     for(;;)
1126:.\main.c      ****     {
1127:.\main.c      ****         //UART_TEST_UartPutChar(31);
1128:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1129:.\main.c      ****         
1130:.\main.c      ****         if(stop_elb_dn_Read())
 3588              		.loc 1 1130 0
 3589 001a FFF7FEFF 		bl	stop_elb_dn_Read
 3590 001e 031C     		mov	r3, r0
 3591 0020 002B     		cmp	r3, #0
 3592 0022 03D0     		beq	.L263
1131:.\main.c      ****         {
1132:.\main.c      ****             LED_Write(1);
 3593              		.loc 1 1132 0
 3594 0024 0120     		mov	r0, #1
 3595 0026 FFF7FEFF 		bl	LED_Write
 3596 002a 02E0     		b	.L264
 3597              	.L263:
1133:.\main.c      ****         }
1134:.\main.c      ****         else
1135:.\main.c      ****         {
1136:.\main.c      ****             LED_Write(0);
 3598              		.loc 1 1136 0
 3599 002c 0020     		mov	r0, #0
 3600 002e FFF7FEFF 		bl	LED_Write
 3601              	.L264:
1137:.\main.c      ****         }
1138:.\main.c      ****         
1139:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 3602              		.loc 1 1139 0
 3603 0032 FFF7FEFF 		bl	WIZ_INT_Read
 3604 0036 031C     		mov	r3, r0
 3605 0038 002B     		cmp	r3, #0
 3606 003a 17D1     		bne	.L265
1140:.\main.c      ****         {
1141:.\main.c      ****             wiznetClearInterrupts();
 3607              		.loc 1 1141 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 86


 3608 003c FFF7FEFF 		bl	wiznetClearInterrupts
1142:.\main.c      ****             fill_data_array();
 3609              		.loc 1 1142 0
 3610 0040 FFF7FEFF 		bl	fill_data_array
1143:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1144:.\main.c      ****             BA_FLAG = 1;
 3611              		.loc 1 1144 0
 3612 0044 4E4B     		ldr	r3, .L274+4
 3613 0046 0122     		mov	r2, #1
 3614 0048 1A70     		strb	r2, [r3]
1145:.\main.c      ****             WR_FLAG = 1;
 3615              		.loc 1 1145 0
 3616 004a 4E4B     		ldr	r3, .L274+8
 3617 004c 0122     		mov	r2, #1
 3618 004e 1A70     		strb	r2, [r3]
1146:.\main.c      ****             WT_FLAG = 1;
 3619              		.loc 1 1146 0
 3620 0050 4D4B     		ldr	r3, .L274+12
 3621 0052 0122     		mov	r2, #1
 3622 0054 1A70     		strb	r2, [r3]
1147:.\main.c      ****             SHOULDER_FLAG = 1;
 3623              		.loc 1 1147 0
 3624 0056 4D4B     		ldr	r3, .L274+16
 3625 0058 0122     		mov	r2, #1
 3626 005a 1A70     		strb	r2, [r3]
1148:.\main.c      ****             ELBOW_FLAG = 1;
 3627              		.loc 1 1148 0
 3628 005c 4C4B     		ldr	r3, .L274+20
 3629 005e 0122     		mov	r2, #1
 3630 0060 1A70     		strb	r2, [r3]
1149:.\main.c      ****             fs_count = 0;
 3631              		.loc 1 1149 0
 3632 0062 3B1C     		mov	r3, r7
 3633 0064 D233     		add	r3, r3, #210
 3634 0066 0022     		mov	r2, #0
 3635 0068 1A70     		strb	r2, [r3]
 3636 006a 06E0     		b	.L266
 3637              	.L265:
1150:.\main.c      ****             //wiznet = 0; //for testing
1151:.\main.c      ****         }
1152:.\main.c      ****         else
1153:.\main.c      ****         {
1154:.\main.c      ****             fs_count += 1;
 3638              		.loc 1 1154 0
 3639 006c 3B1C     		mov	r3, r7
 3640 006e D233     		add	r3, r3, #210
 3641 0070 3A1C     		mov	r2, r7
 3642 0072 D232     		add	r2, r2, #210
 3643 0074 1278     		ldrb	r2, [r2]
 3644 0076 0132     		add	r2, r2, #1
 3645 0078 1A70     		strb	r2, [r3]
 3646              	.L266:
1155:.\main.c      ****         }
1156:.\main.c      ****         
1157:.\main.c      ****         if(fs_count >= 50)
 3647              		.loc 1 1157 0
 3648 007a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 87


 3649 007c D233     		add	r3, r3, #210
 3650 007e 1B78     		ldrb	r3, [r3]
 3651 0080 312B     		cmp	r3, #49
 3652 0082 2CD9     		bls	.L267
1158:.\main.c      ****         {
1159:.\main.c      ****             temp_val = 1500;
 3653              		.loc 1 1159 0
 3654 0084 3B1C     		mov	r3, r7
 3655 0086 CA33     		add	r3, r3, #202
 3656 0088 3C4A     		ldr	r2, .L274
 3657 008a 1A80     		strh	r2, [r3]
 3658              	.LBB3:
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3659              		.loc 1 1160 0
 3660 008c 0023     		mov	r3, #0
 3661 008e CC20     		mov	r0, #204
 3662 0090 C019     		add	r0, r0, r7
 3663 0092 0360     		str	r3, [r0]
 3664 0094 1DE0     		b	.L268
 3665              	.L269:
1161:.\main.c      ****             {
1162:.\main.c      ****                 data_array[i] = temp_val >> 8;
 3666              		.loc 1 1162 0 discriminator 2
 3667 0096 3B1C     		mov	r3, r7
 3668 0098 CA33     		add	r3, r3, #202
 3669 009a 0022     		mov	r2, #0
 3670 009c 9B5E     		ldrsh	r3, [r3, r2]
 3671 009e 1B12     		asr	r3, r3, #8
 3672 00a0 9BB2     		uxth	r3, r3
 3673 00a2 DAB2     		uxtb	r2, r3
 3674 00a4 3B49     		ldr	r1, .L274+24
 3675 00a6 CC20     		mov	r0, #204
 3676 00a8 C019     		add	r0, r0, r7
 3677 00aa 0368     		ldr	r3, [r0]
 3678 00ac CB18     		add	r3, r1, r3
 3679 00ae 1A70     		strb	r2, [r3]
1163:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 3680              		.loc 1 1163 0 discriminator 2
 3681 00b0 CC22     		mov	r2, #204
 3682 00b2 D219     		add	r2, r2, r7
 3683 00b4 1368     		ldr	r3, [r2]
 3684 00b6 0133     		add	r3, r3, #1
 3685 00b8 3A1C     		mov	r2, r7
 3686 00ba CA32     		add	r2, r2, #202
 3687 00bc 1288     		ldrh	r2, [r2]
 3688 00be D1B2     		uxtb	r1, r2
 3689 00c0 344A     		ldr	r2, .L274+24
 3690 00c2 D154     		strb	r1, [r2, r3]
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3691              		.loc 1 1160 0 discriminator 2
 3692 00c4 CC20     		mov	r0, #204
 3693 00c6 C019     		add	r0, r0, r7
 3694 00c8 0368     		ldr	r3, [r0]
 3695 00ca 0233     		add	r3, r3, #2
 3696 00cc CC22     		mov	r2, #204
 3697 00ce D219     		add	r2, r2, r7
 3698 00d0 1360     		str	r3, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 88


 3699              	.L268:
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3700              		.loc 1 1160 0 is_stmt 0 discriminator 1
 3701 00d2 CC20     		mov	r0, #204
 3702 00d4 C019     		add	r0, r0, r7
 3703 00d6 0368     		ldr	r3, [r0]
 3704 00d8 152B     		cmp	r3, #21
 3705 00da DCDD     		ble	.L269
 3706              	.LBE3:
1164:.\main.c      ****             }
1165:.\main.c      ****         }
1166:.\main.c      ****         else
1167:.\main.c      ****         {
1168:.\main.c      ****         
1169:.\main.c      ****         //if(wiznet gives a complete packet)
1170:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1171:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1172:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1173:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1174:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1175:.\main.c      ****             effector();
1176:.\main.c      ****             send_feedback(); //send feedback onece every tick
1177:.\main.c      ****         }
1178:.\main.c      **** 
1179:.\main.c      **** //        else{dropped_packets++}
1180:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1181:.\main.c      **** //        LED_Write(0);
1182:.\main.c      **** //        temp_code_time = second_count - first_count;
1183:.\main.c      **** //        if(temp_code_time > code_time)
1184:.\main.c      **** //        {
1185:.\main.c      **** //            code_time = temp_code_time;
1186:.\main.c      **** //            itoa(code_time, time_array);
1187:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1188:.\main.c      **** //        }
1189:.\main.c      ****         
1190:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3707              		.loc 1 1190 0 is_stmt 1
 3708 00dc 43E0     		b	.L273
 3709              	.L267:
1170:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 3710              		.loc 1 1170 0
 3711 00de 3C1C     		mov	r4, r7
 3712 00e0 D734     		add	r4, r4, #215
 3713 00e2 3B1C     		mov	r3, r7
 3714 00e4 D733     		add	r3, r3, #215
 3715 00e6 1A78     		ldrb	r2, [r3]
 3716 00e8 3B1C     		mov	r3, r7
 3717 00ea A033     		add	r3, r3, #160
 3718 00ec 101C     		mov	r0, r2
 3719 00ee 191C     		mov	r1, r3
 3720 00f0 FFF7FEFF 		bl	baseAzimuth
 3721 00f4 031C     		mov	r3, r0
 3722 00f6 2370     		strb	r3, [r4]
1171:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 3723              		.loc 1 1171 0
 3724 00f8 3C1C     		mov	r4, r7
 3725 00fa D634     		add	r4, r4, #214
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 89


 3726 00fc 3B1C     		mov	r3, r7
 3727 00fe D633     		add	r3, r3, #214
 3728 0100 1A78     		ldrb	r2, [r3]
 3729 0102 3B1C     		mov	r3, r7
 3730 0104 7833     		add	r3, r3, #120
 3731 0106 101C     		mov	r0, r2
 3732 0108 191C     		mov	r1, r3
 3733 010a FFF7FEFF 		bl	shoulder
 3734 010e 031C     		mov	r3, r0
 3735 0110 2370     		strb	r3, [r4]
1172:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 3736              		.loc 1 1172 0
 3737 0112 3C1C     		mov	r4, r7
 3738 0114 D534     		add	r4, r4, #213
 3739 0116 3B1C     		mov	r3, r7
 3740 0118 D533     		add	r3, r3, #213
 3741 011a 1A78     		ldrb	r2, [r3]
 3742 011c 3B1C     		mov	r3, r7
 3743 011e 5033     		add	r3, r3, #80
 3744 0120 101C     		mov	r0, r2
 3745 0122 191C     		mov	r1, r3
 3746 0124 FFF7FEFF 		bl	elbow
 3747 0128 031C     		mov	r3, r0
 3748 012a 2370     		strb	r3, [r4]
1173:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 3749              		.loc 1 1173 0
 3750 012c 3C1C     		mov	r4, r7
 3751 012e D434     		add	r4, r4, #212
 3752 0130 3B1C     		mov	r3, r7
 3753 0132 D433     		add	r3, r3, #212
 3754 0134 1A78     		ldrb	r2, [r3]
 3755 0136 3B1C     		mov	r3, r7
 3756 0138 2833     		add	r3, r3, #40
 3757 013a 101C     		mov	r0, r2
 3758 013c 191C     		mov	r1, r3
 3759 013e FFF7FEFF 		bl	wristTilt
 3760 0142 031C     		mov	r3, r0
 3761 0144 2370     		strb	r3, [r4]
1174:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 3762              		.loc 1 1174 0
 3763 0146 3C1C     		mov	r4, r7
 3764 0148 D334     		add	r4, r4, #211
 3765 014a 3B1C     		mov	r3, r7
 3766 014c D333     		add	r3, r3, #211
 3767 014e 1A78     		ldrb	r2, [r3]
 3768 0150 3B1C     		mov	r3, r7
 3769 0152 101C     		mov	r0, r2
 3770 0154 191C     		mov	r1, r3
 3771 0156 FFF7FEFF 		bl	wristRotate
 3772 015a 031C     		mov	r3, r0
 3773 015c 2370     		strb	r3, [r4]
1175:.\main.c      ****             effector();
 3774              		.loc 1 1175 0
 3775 015e FFF7FEFF 		bl	effector
1176:.\main.c      ****             send_feedback(); //send feedback onece every tick
 3776              		.loc 1 1176 0
 3777 0162 FFF7FEFF 		bl	send_feedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 90


 3778              	.L273:
 3779              		.loc 1 1190 0
 3780 0166 C046     		mov	r8, r8
 3781              	.L271:
 3782              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3783 0168 0B4B     		ldr	r3, .L274+28
 3784 016a 1B78     		ldrb	r3, [r3]
 3785 016c DBB2     		uxtb	r3, r3
 3786 016e 002B     		cmp	r3, #0
 3787 0170 FAD0     		beq	.L271
1191:.\main.c      ****         timerFlag = 0;
 3788              		.loc 1 1191 0 is_stmt 1
 3789 0172 094B     		ldr	r3, .L274+28
 3790 0174 0022     		mov	r2, #0
 3791 0176 1A70     		strb	r2, [r3]
1192:.\main.c      ****     
1193:.\main.c      ****         
1194:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1195:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1196:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1197:.\main.c      **** //        counter++;
1198:.\main.c      **** //        
1199:.\main.c      **** //        if(counter == 50)
1200:.\main.c      **** //        {
1201:.\main.c      **** //        
1202:.\main.c      **** //            if(increasing)
1203:.\main.c      **** //            {
1204:.\main.c      **** //                temp_val += 100;
1205:.\main.c      **** //                if(temp_val == 1000)
1206:.\main.c      **** //                {
1207:.\main.c      **** //                    increasing = 0;
1208:.\main.c      **** //                }
1209:.\main.c      **** //            }
1210:.\main.c      **** //            else
1211:.\main.c      **** //            {
1212:.\main.c      **** //                temp_val -= 100;
1213:.\main.c      **** //                if(temp_val == -1000)
1214:.\main.c      **** //                {
1215:.\main.c      **** //                    increasing = 1;   
1216:.\main.c      **** //                }
1217:.\main.c      **** //            }
1218:.\main.c      **** //            
1219:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1220:.\main.c      **** //            //int16 forward = 1000;
1221:.\main.c      **** //            //int16 backward = -1000;
1222:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1223:.\main.c      **** //            {
1224:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1225:.\main.c      **** //                //test_array[i] = random_number >> 8;
1226:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1227:.\main.c      **** //                test_array[i] = temp_val >> 8;
1228:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1229:.\main.c      **** //            }
1230:.\main.c      **** ////            counter = 0;
1231:.\main.c      **** //            wiznet = 1;
1232:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 3792              		.loc 1 1232 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 91


 3793 0178 4FE7     		b	.L272
 3794              	.L275:
 3795 017a C046     		.align	2
 3796              	.L274:
 3797 017c DC050000 		.word	1500
 3798 0180 00000000 		.word	BA_FLAG
 3799 0184 00000000 		.word	WR_FLAG
 3800 0188 00000000 		.word	WT_FLAG
 3801 018c 00000000 		.word	SHOULDER_FLAG
 3802 0190 00000000 		.word	ELBOW_FLAG
 3803 0194 00000000 		.word	data_array
 3804 0198 00000000 		.word	timerFlag
 3805              		.cfi_endproc
 3806              	.LFE55:
 3807              		.size	main, .-main
 3808              		.text
 3809              	.Letext0:
 3810              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3811              		.file 3 ".\\main.h"
 3812              		.section	.debug_info,"",%progbits
 3813              	.Ldebug_info0:
 3814 0000 1E0B0000 		.4byte	0xb1e
 3815 0004 0400     		.2byte	0x4
 3816 0006 00000000 		.4byte	.Ldebug_abbrev0
 3817 000a 04       		.byte	0x4
 3818 000b 01       		.uleb128 0x1
 3819 000c F5050000 		.4byte	.LASF147
 3820 0010 01       		.byte	0x1
 3821 0011 43070000 		.4byte	.LASF148
 3822 0015 FD000000 		.4byte	.LASF149
 3823 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3824 001d 00000000 		.4byte	0
 3825 0021 00000000 		.4byte	.Ldebug_line0
 3826 0025 02       		.uleb128 0x2
 3827 0026 01       		.byte	0x1
 3828 0027 06       		.byte	0x6
 3829 0028 98060000 		.4byte	.LASF0
 3830 002c 02       		.uleb128 0x2
 3831 002d 01       		.byte	0x1
 3832 002e 08       		.byte	0x8
 3833 002f 8A050000 		.4byte	.LASF1
 3834 0033 02       		.uleb128 0x2
 3835 0034 02       		.byte	0x2
 3836 0035 05       		.byte	0x5
 3837 0036 64040000 		.4byte	.LASF2
 3838 003a 02       		.uleb128 0x2
 3839 003b 02       		.byte	0x2
 3840 003c 07       		.byte	0x7
 3841 003d AC060000 		.4byte	.LASF3
 3842 0041 02       		.uleb128 0x2
 3843 0042 04       		.byte	0x4
 3844 0043 05       		.byte	0x5
 3845 0044 89040000 		.4byte	.LASF4
 3846 0048 02       		.uleb128 0x2
 3847 0049 04       		.byte	0x4
 3848 004a 07       		.byte	0x7
 3849 004b 26050000 		.4byte	.LASF5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 92


 3850 004f 02       		.uleb128 0x2
 3851 0050 08       		.byte	0x8
 3852 0051 05       		.byte	0x5
 3853 0052 12030000 		.4byte	.LASF6
 3854 0056 02       		.uleb128 0x2
 3855 0057 08       		.byte	0x8
 3856 0058 07       		.byte	0x7
 3857 0059 DC010000 		.4byte	.LASF7
 3858 005d 03       		.uleb128 0x3
 3859 005e 04       		.byte	0x4
 3860 005f 05       		.byte	0x5
 3861 0060 696E7400 		.ascii	"int\000"
 3862 0064 02       		.uleb128 0x2
 3863 0065 04       		.byte	0x4
 3864 0066 07       		.byte	0x7
 3865 0067 80000000 		.4byte	.LASF8
 3866 006b 04       		.uleb128 0x4
 3867 006c EA060000 		.4byte	.LASF9
 3868 0070 02       		.byte	0x2
 3869 0071 A1       		.byte	0xa1
 3870 0072 2C000000 		.4byte	0x2c
 3871 0076 04       		.uleb128 0x4
 3872 0077 D4020000 		.4byte	.LASF10
 3873 007b 02       		.byte	0x2
 3874 007c A2       		.byte	0xa2
 3875 007d 3A000000 		.4byte	0x3a
 3876 0081 04       		.uleb128 0x4
 3877 0082 A4030000 		.4byte	.LASF11
 3878 0086 02       		.byte	0x2
 3879 0087 A3       		.byte	0xa3
 3880 0088 48000000 		.4byte	0x48
 3881 008c 04       		.uleb128 0x4
 3882 008d E2020000 		.4byte	.LASF12
 3883 0091 02       		.byte	0x2
 3884 0092 A4       		.byte	0xa4
 3885 0093 25000000 		.4byte	0x25
 3886 0097 04       		.uleb128 0x4
 3887 0098 A0000000 		.4byte	.LASF13
 3888 009c 02       		.byte	0x2
 3889 009d A5       		.byte	0xa5
 3890 009e 33000000 		.4byte	0x33
 3891 00a2 02       		.uleb128 0x2
 3892 00a3 04       		.byte	0x4
 3893 00a4 04       		.byte	0x4
 3894 00a5 B6010000 		.4byte	.LASF14
 3895 00a9 02       		.uleb128 0x2
 3896 00aa 08       		.byte	0x8
 3897 00ab 04       		.byte	0x4
 3898 00ac F0060000 		.4byte	.LASF15
 3899 00b0 02       		.uleb128 0x2
 3900 00b1 01       		.byte	0x1
 3901 00b2 08       		.byte	0x8
 3902 00b3 CF020000 		.4byte	.LASF16
 3903 00b7 05       		.uleb128 0x5
 3904 00b8 6B000000 		.4byte	0x6b
 3905 00bc 02       		.uleb128 0x2
 3906 00bd 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 93


 3907 00be 07       		.byte	0x7
 3908 00bf 1D050000 		.4byte	.LASF17
 3909 00c3 06       		.uleb128 0x6
 3910 00c4 CD040000 		.4byte	.LASF22
 3911 00c8 01       		.byte	0x1
 3912 00c9 01       		.byte	0x1
 3913 00ca 6D01     		.2byte	0x16d
 3914 00cc E9000000 		.4byte	0xe9
 3915 00d0 07       		.uleb128 0x7
 3916 00d1 7E010000 		.4byte	.LASF18
 3917 00d5 00       		.sleb128 0
 3918 00d6 07       		.uleb128 0x7
 3919 00d7 0C000000 		.4byte	.LASF19
 3920 00db 01       		.sleb128 1
 3921 00dc 07       		.uleb128 0x7
 3922 00dd 92040000 		.4byte	.LASF20
 3923 00e1 02       		.sleb128 2
 3924 00e2 07       		.uleb128 0x7
 3925 00e3 D7060000 		.4byte	.LASF21
 3926 00e7 03       		.sleb128 3
 3927 00e8 00       		.byte	0
 3928 00e9 06       		.uleb128 0x6
 3929 00ea 49030000 		.4byte	.LASF23
 3930 00ee 01       		.byte	0x1
 3931 00ef 01       		.byte	0x1
 3932 00f0 D501     		.2byte	0x1d5
 3933 00f2 0F010000 		.4byte	0x10f
 3934 00f6 07       		.uleb128 0x7
 3935 00f7 5C010000 		.4byte	.LASF24
 3936 00fb 00       		.sleb128 0
 3937 00fc 07       		.uleb128 0x7
 3938 00fd E9050000 		.4byte	.LASF25
 3939 0101 01       		.sleb128 1
 3940 0102 07       		.uleb128 0x7
 3941 0103 55040000 		.4byte	.LASF26
 3942 0107 02       		.sleb128 2
 3943 0108 07       		.uleb128 0x7
 3944 0109 52050000 		.4byte	.LASF27
 3945 010d 03       		.sleb128 3
 3946 010e 00       		.byte	0
 3947 010f 06       		.uleb128 0x6
 3948 0110 61000000 		.4byte	.LASF28
 3949 0114 01       		.byte	0x1
 3950 0115 01       		.byte	0x1
 3951 0116 4002     		.2byte	0x240
 3952 0118 35010000 		.4byte	0x135
 3953 011c 07       		.uleb128 0x7
 3954 011d E4030000 		.4byte	.LASF29
 3955 0121 00       		.sleb128 0
 3956 0122 07       		.uleb128 0x7
 3957 0123 4C070000 		.4byte	.LASF30
 3958 0127 01       		.sleb128 1
 3959 0128 07       		.uleb128 0x7
 3960 0129 38050000 		.4byte	.LASF31
 3961 012d 02       		.sleb128 2
 3962 012e 07       		.uleb128 0x7
 3963 012f BF060000 		.4byte	.LASF32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 94


 3964 0133 03       		.sleb128 3
 3965 0134 00       		.byte	0
 3966 0135 06       		.uleb128 0x6
 3967 0136 20030000 		.4byte	.LASF33
 3968 013a 01       		.byte	0x1
 3969 013b 01       		.byte	0x1
 3970 013c C902     		.2byte	0x2c9
 3971 013e 5B010000 		.4byte	0x15b
 3972 0142 07       		.uleb128 0x7
 3973 0143 73050000 		.4byte	.LASF34
 3974 0147 00       		.sleb128 0
 3975 0148 07       		.uleb128 0x7
 3976 0149 07030000 		.4byte	.LASF35
 3977 014d 01       		.sleb128 1
 3978 014e 07       		.uleb128 0x7
 3979 014f C9050000 		.4byte	.LASF36
 3980 0153 02       		.sleb128 2
 3981 0154 07       		.uleb128 0x7
 3982 0155 A9020000 		.4byte	.LASF37
 3983 0159 03       		.sleb128 3
 3984 015a 00       		.byte	0
 3985 015b 06       		.uleb128 0x6
 3986 015c 8D000000 		.4byte	.LASF38
 3987 0160 01       		.byte	0x1
 3988 0161 01       		.byte	0x1
 3989 0162 5103     		.2byte	0x351
 3990 0164 81010000 		.4byte	0x181
 3991 0168 07       		.uleb128 0x7
 3992 0169 C7000000 		.4byte	.LASF39
 3993 016d 00       		.sleb128 0
 3994 016e 07       		.uleb128 0x7
 3995 016f BC010000 		.4byte	.LASF40
 3996 0173 01       		.sleb128 1
 3997 0174 07       		.uleb128 0x7
 3998 0175 56000000 		.4byte	.LASF41
 3999 0179 02       		.sleb128 2
 4000 017a 07       		.uleb128 0x7
 4001 017b C5040000 		.4byte	.LASF42
 4002 017f 03       		.sleb128 3
 4003 0180 00       		.byte	0
 4004 0181 06       		.uleb128 0x6
 4005 0182 7F030000 		.4byte	.LASF43
 4006 0186 01       		.byte	0x1
 4007 0187 01       		.byte	0x1
 4008 0188 B503     		.2byte	0x3b5
 4009 018a A7010000 		.4byte	0x1a7
 4010 018e 07       		.uleb128 0x7
 4011 018f 68020000 		.4byte	.LASF44
 4012 0193 00       		.sleb128 0
 4013 0194 07       		.uleb128 0x7
 4014 0195 B4050000 		.4byte	.LASF45
 4015 0199 01       		.sleb128 1
 4016 019a 07       		.uleb128 0x7
 4017 019b 18020000 		.4byte	.LASF46
 4018 019f 02       		.sleb128 2
 4019 01a0 07       		.uleb128 0x7
 4020 01a1 FD040000 		.4byte	.LASF47
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 95


 4021 01a5 03       		.sleb128 3
 4022 01a6 00       		.byte	0
 4023 01a7 08       		.uleb128 0x8
 4024 01a8 9F040000 		.4byte	.LASF83
 4025 01ac 01       		.byte	0x1
 4026 01ad 0A       		.byte	0xa
 4027 01ae 00000000 		.4byte	.LFB34
 4028 01b2 28000000 		.4byte	.LFE34-.LFB34
 4029 01b6 01       		.uleb128 0x1
 4030 01b7 9C       		.byte	0x9c
 4031 01b8 CB010000 		.4byte	0x1cb
 4032 01bc 09       		.uleb128 0x9
 4033 01bd 0A070000 		.4byte	.LASF48
 4034 01c1 01       		.byte	0x1
 4035 01c2 0C       		.byte	0xc
 4036 01c3 81000000 		.4byte	0x81
 4037 01c7 02       		.uleb128 0x2
 4038 01c8 91       		.byte	0x91
 4039 01c9 74       		.sleb128 -12
 4040 01ca 00       		.byte	0
 4041 01cb 0A       		.uleb128 0xa
 4042 01cc A6000000 		.4byte	.LASF54
 4043 01d0 01       		.byte	0x1
 4044 01d1 2F       		.byte	0x2f
 4045 01d2 76000000 		.4byte	0x76
 4046 01d6 00000000 		.4byte	.LFB35
 4047 01da 28010000 		.4byte	.LFE35-.LFB35
 4048 01de 01       		.uleb128 0x1
 4049 01df 9C       		.byte	0x9c
 4050 01e0 45020000 		.4byte	0x245
 4051 01e4 0B       		.uleb128 0xb
 4052 01e5 06050000 		.4byte	.LASF56
 4053 01e9 01       		.byte	0x1
 4054 01ea 2F       		.byte	0x2f
 4055 01eb 76000000 		.4byte	0x76
 4056 01ef 02       		.uleb128 0x2
 4057 01f0 91       		.byte	0x91
 4058 01f1 66       		.sleb128 -26
 4059 01f2 09       		.uleb128 0x9
 4060 01f3 F8020000 		.4byte	.LASF49
 4061 01f7 01       		.byte	0x1
 4062 01f8 31       		.byte	0x31
 4063 01f9 6B000000 		.4byte	0x6b
 4064 01fd 02       		.uleb128 0x2
 4065 01fe 91       		.byte	0x91
 4066 01ff 73       		.sleb128 -13
 4067 0200 0C       		.uleb128 0xc
 4068 0201 6900     		.ascii	"i\000"
 4069 0203 01       		.byte	0x1
 4070 0204 32       		.byte	0x32
 4071 0205 6B000000 		.4byte	0x6b
 4072 0209 02       		.uleb128 0x2
 4073 020a 91       		.byte	0x91
 4074 020b 77       		.sleb128 -9
 4075 020c 09       		.uleb128 0x9
 4076 020d 9E030000 		.4byte	.LASF50
 4077 0211 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 96


 4078 0212 33       		.byte	0x33
 4079 0213 76000000 		.4byte	0x76
 4080 0217 02       		.uleb128 0x2
 4081 0218 91       		.byte	0x91
 4082 0219 68       		.sleb128 -24
 4083 021a 09       		.uleb128 0x9
 4084 021b A4060000 		.4byte	.LASF51
 4085 021f 01       		.byte	0x1
 4086 0220 34       		.byte	0x34
 4087 0221 76000000 		.4byte	0x76
 4088 0225 02       		.uleb128 0x2
 4089 0226 91       		.byte	0x91
 4090 0227 74       		.sleb128 -12
 4091 0228 09       		.uleb128 0x9
 4092 0229 29040000 		.4byte	.LASF52
 4093 022d 01       		.byte	0x1
 4094 022e 35       		.byte	0x35
 4095 022f 81000000 		.4byte	0x81
 4096 0233 02       		.uleb128 0x2
 4097 0234 91       		.byte	0x91
 4098 0235 6C       		.sleb128 -20
 4099 0236 09       		.uleb128 0x9
 4100 0237 84060000 		.4byte	.LASF53
 4101 023b 01       		.byte	0x1
 4102 023c 36       		.byte	0x36
 4103 023d 97000000 		.4byte	0x97
 4104 0241 02       		.uleb128 0x2
 4105 0242 91       		.byte	0x91
 4106 0243 6A       		.sleb128 -22
 4107 0244 00       		.byte	0
 4108 0245 0A       		.uleb128 0xa
 4109 0246 87020000 		.4byte	.LASF55
 4110 024a 01       		.byte	0x1
 4111 024b 66       		.byte	0x66
 4112 024c 76000000 		.4byte	0x76
 4113 0250 00000000 		.4byte	.LFB36
 4114 0254 28010000 		.4byte	.LFE36-.LFB36
 4115 0258 01       		.uleb128 0x1
 4116 0259 9C       		.byte	0x9c
 4117 025a BF020000 		.4byte	0x2bf
 4118 025e 0B       		.uleb128 0xb
 4119 025f 06050000 		.4byte	.LASF56
 4120 0263 01       		.byte	0x1
 4121 0264 66       		.byte	0x66
 4122 0265 76000000 		.4byte	0x76
 4123 0269 02       		.uleb128 0x2
 4124 026a 91       		.byte	0x91
 4125 026b 66       		.sleb128 -26
 4126 026c 09       		.uleb128 0x9
 4127 026d F8020000 		.4byte	.LASF49
 4128 0271 01       		.byte	0x1
 4129 0272 68       		.byte	0x68
 4130 0273 6B000000 		.4byte	0x6b
 4131 0277 02       		.uleb128 0x2
 4132 0278 91       		.byte	0x91
 4133 0279 73       		.sleb128 -13
 4134 027a 0C       		.uleb128 0xc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 97


 4135 027b 6900     		.ascii	"i\000"
 4136 027d 01       		.byte	0x1
 4137 027e 69       		.byte	0x69
 4138 027f 6B000000 		.4byte	0x6b
 4139 0283 02       		.uleb128 0x2
 4140 0284 91       		.byte	0x91
 4141 0285 77       		.sleb128 -9
 4142 0286 09       		.uleb128 0x9
 4143 0287 9E030000 		.4byte	.LASF50
 4144 028b 01       		.byte	0x1
 4145 028c 6A       		.byte	0x6a
 4146 028d 76000000 		.4byte	0x76
 4147 0291 02       		.uleb128 0x2
 4148 0292 91       		.byte	0x91
 4149 0293 68       		.sleb128 -24
 4150 0294 09       		.uleb128 0x9
 4151 0295 A4060000 		.4byte	.LASF51
 4152 0299 01       		.byte	0x1
 4153 029a 6B       		.byte	0x6b
 4154 029b 76000000 		.4byte	0x76
 4155 029f 02       		.uleb128 0x2
 4156 02a0 91       		.byte	0x91
 4157 02a1 74       		.sleb128 -12
 4158 02a2 09       		.uleb128 0x9
 4159 02a3 29040000 		.4byte	.LASF52
 4160 02a7 01       		.byte	0x1
 4161 02a8 6C       		.byte	0x6c
 4162 02a9 81000000 		.4byte	0x81
 4163 02ad 02       		.uleb128 0x2
 4164 02ae 91       		.byte	0x91
 4165 02af 6C       		.sleb128 -20
 4166 02b0 09       		.uleb128 0x9
 4167 02b1 84060000 		.4byte	.LASF53
 4168 02b5 01       		.byte	0x1
 4169 02b6 6D       		.byte	0x6d
 4170 02b7 97000000 		.4byte	0x97
 4171 02bb 02       		.uleb128 0x2
 4172 02bc 91       		.byte	0x91
 4173 02bd 6A       		.sleb128 -22
 4174 02be 00       		.byte	0
 4175 02bf 0A       		.uleb128 0xa
 4176 02c0 A4060000 		.4byte	.LASF51
 4177 02c4 01       		.byte	0x1
 4178 02c5 9E       		.byte	0x9e
 4179 02c6 76000000 		.4byte	0x76
 4180 02ca 00000000 		.4byte	.LFB37
 4181 02ce 78000000 		.4byte	.LFE37-.LFB37
 4182 02d2 01       		.uleb128 0x1
 4183 02d3 9C       		.byte	0x9c
 4184 02d4 1D030000 		.4byte	0x31d
 4185 02d8 0B       		.uleb128 0xb
 4186 02d9 80040000 		.4byte	.LASF57
 4187 02dd 01       		.byte	0x1
 4188 02de 9E       		.byte	0x9e
 4189 02df 1D030000 		.4byte	0x31d
 4190 02e3 02       		.uleb128 0x2
 4191 02e4 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 98


 4192 02e5 64       		.sleb128 -28
 4193 02e6 0B       		.uleb128 0xb
 4194 02e7 16000000 		.4byte	.LASF58
 4195 02eb 01       		.byte	0x1
 4196 02ec 9E       		.byte	0x9e
 4197 02ed 6B000000 		.4byte	0x6b
 4198 02f1 02       		.uleb128 0x2
 4199 02f2 91       		.byte	0x91
 4200 02f3 63       		.sleb128 -29
 4201 02f4 0C       		.uleb128 0xc
 4202 02f5 6900     		.ascii	"i\000"
 4203 02f7 01       		.byte	0x1
 4204 02f8 A0       		.byte	0xa0
 4205 02f9 6B000000 		.4byte	0x6b
 4206 02fd 02       		.uleb128 0x2
 4207 02fe 91       		.byte	0x91
 4208 02ff 77       		.sleb128 -9
 4209 0300 0C       		.uleb128 0xc
 4210 0301 73756D00 		.ascii	"sum\000"
 4211 0305 01       		.byte	0x1
 4212 0306 A1       		.byte	0xa1
 4213 0307 81000000 		.4byte	0x81
 4214 030b 02       		.uleb128 0x2
 4215 030c 91       		.byte	0x91
 4216 030d 70       		.sleb128 -16
 4217 030e 0C       		.uleb128 0xc
 4218 030f 61766700 		.ascii	"avg\000"
 4219 0313 01       		.byte	0x1
 4220 0314 A2       		.byte	0xa2
 4221 0315 76000000 		.4byte	0x76
 4222 0319 02       		.uleb128 0x2
 4223 031a 91       		.byte	0x91
 4224 031b 6E       		.sleb128 -18
 4225 031c 00       		.byte	0
 4226 031d 0D       		.uleb128 0xd
 4227 031e 04       		.byte	0x4
 4228 031f 76000000 		.4byte	0x76
 4229 0323 0E       		.uleb128 0xe
 4230 0324 DF000000 		.4byte	.LASF59
 4231 0328 01       		.byte	0x1
 4232 0329 AE       		.byte	0xae
 4233 032a 6B000000 		.4byte	0x6b
 4234 032e 00000000 		.4byte	.LFB38
 4235 0332 3E000000 		.4byte	.LFE38-.LFB38
 4236 0336 01       		.uleb128 0x1
 4237 0337 9C       		.byte	0x9c
 4238 0338 59030000 		.4byte	0x359
 4239 033c 0B       		.uleb128 0xb
 4240 033d 30030000 		.4byte	.LASF60
 4241 0341 01       		.byte	0x1
 4242 0342 AE       		.byte	0xae
 4243 0343 6B000000 		.4byte	0x6b
 4244 0347 02       		.uleb128 0x2
 4245 0348 91       		.byte	0x91
 4246 0349 77       		.sleb128 -9
 4247 034a 0B       		.uleb128 0xb
 4248 034b A4020000 		.4byte	.LASF61
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 99


 4249 034f 01       		.byte	0x1
 4250 0350 AE       		.byte	0xae
 4251 0351 6B000000 		.4byte	0x6b
 4252 0355 02       		.uleb128 0x2
 4253 0356 91       		.byte	0x91
 4254 0357 76       		.sleb128 -10
 4255 0358 00       		.byte	0
 4256 0359 0A       		.uleb128 0xa
 4257 035a E5040000 		.4byte	.LASF62
 4258 035e 01       		.byte	0x1
 4259 035f BB       		.byte	0xbb
 4260 0360 6B000000 		.4byte	0x6b
 4261 0364 00000000 		.4byte	.LFB39
 4262 0368 0C010000 		.4byte	.LFE39-.LFB39
 4263 036c 01       		.uleb128 0x1
 4264 036d 9C       		.byte	0x9c
 4265 036e B9030000 		.4byte	0x3b9
 4266 0372 0B       		.uleb128 0xb
 4267 0373 FF030000 		.4byte	.LASF63
 4268 0377 01       		.byte	0x1
 4269 0378 BB       		.byte	0xbb
 4270 0379 1D030000 		.4byte	0x31d
 4271 037d 02       		.uleb128 0x2
 4272 037e 91       		.byte	0x91
 4273 037f 6C       		.sleb128 -20
 4274 0380 0B       		.uleb128 0xb
 4275 0381 FF020000 		.4byte	.LASF64
 4276 0385 01       		.byte	0x1
 4277 0386 BB       		.byte	0xbb
 4278 0387 6B000000 		.4byte	0x6b
 4279 038b 02       		.uleb128 0x2
 4280 038c 91       		.byte	0x91
 4281 038d 6B       		.sleb128 -21
 4282 038e 0B       		.uleb128 0xb
 4283 038f 89010000 		.4byte	.LASF65
 4284 0393 01       		.byte	0x1
 4285 0394 BB       		.byte	0xbb
 4286 0395 6B000000 		.4byte	0x6b
 4287 0399 02       		.uleb128 0x2
 4288 039a 91       		.byte	0x91
 4289 039b 6A       		.sleb128 -22
 4290 039c 0B       		.uleb128 0xb
 4291 039d 22040000 		.4byte	.LASF66
 4292 03a1 01       		.byte	0x1
 4293 03a2 BB       		.byte	0xbb
 4294 03a3 5D000000 		.4byte	0x5d
 4295 03a7 02       		.uleb128 0x2
 4296 03a8 91       		.byte	0x91
 4297 03a9 64       		.sleb128 -28
 4298 03aa 09       		.uleb128 0x9
 4299 03ab C4010000 		.4byte	.LASF67
 4300 03af 01       		.byte	0x1
 4301 03b0 BD       		.byte	0xbd
 4302 03b1 6B000000 		.4byte	0x6b
 4303 03b5 02       		.uleb128 0x2
 4304 03b6 91       		.byte	0x91
 4305 03b7 77       		.sleb128 -9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 100


 4306 03b8 00       		.byte	0
 4307 03b9 0A       		.uleb128 0xa
 4308 03ba 9F010000 		.4byte	.LASF68
 4309 03be 01       		.byte	0x1
 4310 03bf E1       		.byte	0xe1
 4311 03c0 6B000000 		.4byte	0x6b
 4312 03c4 00000000 		.4byte	.LFB40
 4313 03c8 0C020000 		.4byte	.LFE40-.LFB40
 4314 03cc 01       		.uleb128 0x1
 4315 03cd 9C       		.byte	0x9c
 4316 03ce 0B040000 		.4byte	0x40b
 4317 03d2 0B       		.uleb128 0xb
 4318 03d3 BF020000 		.4byte	.LASF69
 4319 03d7 01       		.byte	0x1
 4320 03d8 E1       		.byte	0xe1
 4321 03d9 6B000000 		.4byte	0x6b
 4322 03dd 02       		.uleb128 0x2
 4323 03de 91       		.byte	0x91
 4324 03df 6F       		.sleb128 -17
 4325 03e0 0B       		.uleb128 0xb
 4326 03e1 FF030000 		.4byte	.LASF63
 4327 03e5 01       		.byte	0x1
 4328 03e6 E1       		.byte	0xe1
 4329 03e7 1D030000 		.4byte	0x31d
 4330 03eb 02       		.uleb128 0x2
 4331 03ec 91       		.byte	0x91
 4332 03ed 68       		.sleb128 -24
 4333 03ee 0B       		.uleb128 0xb
 4334 03ef 3D040000 		.4byte	.LASF70
 4335 03f3 01       		.byte	0x1
 4336 03f4 E1       		.byte	0xe1
 4337 03f5 6B000000 		.4byte	0x6b
 4338 03f9 02       		.uleb128 0x2
 4339 03fa 91       		.byte	0x91
 4340 03fb 6E       		.sleb128 -18
 4341 03fc 0B       		.uleb128 0xb
 4342 03fd 7C060000 		.4byte	.LASF71
 4343 0401 01       		.byte	0x1
 4344 0402 E1       		.byte	0xe1
 4345 0403 76000000 		.4byte	0x76
 4346 0407 02       		.uleb128 0x2
 4347 0408 91       		.byte	0x91
 4348 0409 6C       		.sleb128 -20
 4349 040a 00       		.byte	0
 4350 040b 0F       		.uleb128 0xf
 4351 040c BF030000 		.4byte	.LASF72
 4352 0410 01       		.byte	0x1
 4353 0411 0F01     		.2byte	0x10f
 4354 0413 76000000 		.4byte	0x76
 4355 0417 00000000 		.4byte	.LFB41
 4356 041b 84000000 		.4byte	.LFE41-.LFB41
 4357 041f 01       		.uleb128 0x1
 4358 0420 9C       		.byte	0x9c
 4359 0421 8F040000 		.4byte	0x48f
 4360 0425 10       		.uleb128 0x10
 4361 0426 7F050000 		.4byte	.LASF73
 4362 042a 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 101


 4363 042b 0F01     		.2byte	0x10f
 4364 042d 8F040000 		.4byte	0x48f
 4365 0431 02       		.uleb128 0x2
 4366 0432 91       		.byte	0x91
 4367 0433 6C       		.sleb128 -20
 4368 0434 10       		.uleb128 0x10
 4369 0435 24020000 		.4byte	.LASF74
 4370 0439 01       		.byte	0x1
 4371 043a 0F01     		.2byte	0x10f
 4372 043c 6B000000 		.4byte	0x6b
 4373 0440 02       		.uleb128 0x2
 4374 0441 91       		.byte	0x91
 4375 0442 6B       		.sleb128 -21
 4376 0443 10       		.uleb128 0x10
 4377 0444 2A020000 		.4byte	.LASF75
 4378 0448 01       		.byte	0x1
 4379 0449 0F01     		.2byte	0x10f
 4380 044b 6B000000 		.4byte	0x6b
 4381 044f 02       		.uleb128 0x2
 4382 0450 91       		.byte	0x91
 4383 0451 6A       		.sleb128 -22
 4384 0452 11       		.uleb128 0x11
 4385 0453 7C060000 		.4byte	.LASF71
 4386 0457 01       		.byte	0x1
 4387 0458 1101     		.2byte	0x111
 4388 045a 76000000 		.4byte	0x76
 4389 045e 02       		.uleb128 0x2
 4390 045f 91       		.byte	0x91
 4391 0460 70       		.sleb128 -16
 4392 0461 11       		.uleb128 0x11
 4393 0462 45020000 		.4byte	.LASF76
 4394 0466 01       		.byte	0x1
 4395 0467 1201     		.2byte	0x112
 4396 0469 97000000 		.4byte	0x97
 4397 046d 02       		.uleb128 0x2
 4398 046e 91       		.byte	0x91
 4399 046f 76       		.sleb128 -10
 4400 0470 11       		.uleb128 0x11
 4401 0471 4B020000 		.4byte	.LASF77
 4402 0475 01       		.byte	0x1
 4403 0476 1301     		.2byte	0x113
 4404 0478 97000000 		.4byte	0x97
 4405 047c 02       		.uleb128 0x2
 4406 047d 91       		.byte	0x91
 4407 047e 74       		.sleb128 -12
 4408 047f 11       		.uleb128 0x11
 4409 0480 51020000 		.4byte	.LASF78
 4410 0484 01       		.byte	0x1
 4411 0485 1401     		.2byte	0x114
 4412 0487 97000000 		.4byte	0x97
 4413 048b 02       		.uleb128 0x2
 4414 048c 91       		.byte	0x91
 4415 048d 72       		.sleb128 -14
 4416 048e 00       		.byte	0
 4417 048f 0D       		.uleb128 0xd
 4418 0490 04       		.byte	0x4
 4419 0491 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 102


 4420 0495 12       		.uleb128 0x12
 4421 0496 31040000 		.4byte	.LASF79
 4422 049a 01       		.byte	0x1
 4423 049b 1D01     		.2byte	0x11d
 4424 049d 76000000 		.4byte	0x76
 4425 04a1 00000000 		.4byte	.LFB42
 4426 04a5 28000000 		.4byte	.LFE42-.LFB42
 4427 04a9 01       		.uleb128 0x1
 4428 04aa 9C       		.byte	0x9c
 4429 04ab CE040000 		.4byte	0x4ce
 4430 04af 10       		.uleb128 0x10
 4431 04b0 29040000 		.4byte	.LASF52
 4432 04b4 01       		.byte	0x1
 4433 04b5 1D01     		.2byte	0x11d
 4434 04b7 81000000 		.4byte	0x81
 4435 04bb 02       		.uleb128 0x2
 4436 04bc 91       		.byte	0x91
 4437 04bd 6C       		.sleb128 -20
 4438 04be 11       		.uleb128 0x11
 4439 04bf E7020000 		.4byte	.LASF80
 4440 04c3 01       		.byte	0x1
 4441 04c4 2001     		.2byte	0x120
 4442 04c6 76000000 		.4byte	0x76
 4443 04ca 02       		.uleb128 0x2
 4444 04cb 91       		.byte	0x91
 4445 04cc 76       		.sleb128 -10
 4446 04cd 00       		.byte	0
 4447 04ce 13       		.uleb128 0x13
 4448 04cf 0F050000 		.4byte	.LASF81
 4449 04d3 01       		.byte	0x1
 4450 04d4 2501     		.2byte	0x125
 4451 04d6 00000000 		.4byte	.LFB43
 4452 04da 08000000 		.4byte	.LFE43-.LFB43
 4453 04de 01       		.uleb128 0x1
 4454 04df 9C       		.byte	0x9c
 4455 04e0 14       		.uleb128 0x14
 4456 04e1 98050000 		.4byte	.LASF82
 4457 04e5 01       		.byte	0x1
 4458 04e6 2E01     		.2byte	0x12e
 4459 04e8 00000000 		.4byte	.LFB44
 4460 04ec 18000000 		.4byte	.LFE44-.LFB44
 4461 04f0 01       		.uleb128 0x1
 4462 04f1 9C       		.byte	0x9c
 4463 04f2 15       		.uleb128 0x15
 4464 04f3 F3010000 		.4byte	.LASF84
 4465 04f7 01       		.byte	0x1
 4466 04f8 3801     		.2byte	0x138
 4467 04fa 00000000 		.4byte	.LFB45
 4468 04fe 98000000 		.4byte	.LFE45-.LFB45
 4469 0502 01       		.uleb128 0x1
 4470 0503 9C       		.byte	0x9c
 4471 0504 36050000 		.4byte	0x536
 4472 0508 10       		.uleb128 0x10
 4473 0509 02070000 		.4byte	.LASF85
 4474 050d 01       		.byte	0x1
 4475 050e 3801     		.2byte	0x138
 4476 0510 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 103


 4477 0514 02       		.uleb128 0x2
 4478 0515 91       		.byte	0x91
 4479 0516 67       		.sleb128 -25
 4480 0517 10       		.uleb128 0x10
 4481 0518 3A070000 		.4byte	.LASF86
 4482 051c 01       		.byte	0x1
 4483 051d 3801     		.2byte	0x138
 4484 051f 76000000 		.4byte	0x76
 4485 0523 02       		.uleb128 0x2
 4486 0524 91       		.byte	0x91
 4487 0525 64       		.sleb128 -28
 4488 0526 11       		.uleb128 0x11
 4489 0527 FF030000 		.4byte	.LASF63
 4490 052b 01       		.byte	0x1
 4491 052c 3A01     		.2byte	0x13a
 4492 052e 36050000 		.4byte	0x536
 4493 0532 02       		.uleb128 0x2
 4494 0533 91       		.byte	0x91
 4495 0534 6C       		.sleb128 -20
 4496 0535 00       		.byte	0
 4497 0536 16       		.uleb128 0x16
 4498 0537 6B000000 		.4byte	0x6b
 4499 053b 46050000 		.4byte	0x546
 4500 053f 17       		.uleb128 0x17
 4501 0540 BC000000 		.4byte	0xbc
 4502 0544 08       		.byte	0x8
 4503 0545 00       		.byte	0
 4504 0546 15       		.uleb128 0x15
 4505 0547 1F070000 		.4byte	.LASF87
 4506 054b 01       		.byte	0x1
 4507 054c 4901     		.2byte	0x149
 4508 054e 00000000 		.4byte	.LFB46
 4509 0552 98000000 		.4byte	.LFE46-.LFB46
 4510 0556 01       		.uleb128 0x1
 4511 0557 9C       		.byte	0x9c
 4512 0558 8A050000 		.4byte	0x58a
 4513 055c 10       		.uleb128 0x10
 4514 055d 02070000 		.4byte	.LASF85
 4515 0561 01       		.byte	0x1
 4516 0562 4901     		.2byte	0x149
 4517 0564 6B000000 		.4byte	0x6b
 4518 0568 02       		.uleb128 0x2
 4519 0569 91       		.byte	0x91
 4520 056a 67       		.sleb128 -25
 4521 056b 10       		.uleb128 0x10
 4522 056c DB020000 		.4byte	.LASF88
 4523 0570 01       		.byte	0x1
 4524 0571 4901     		.2byte	0x149
 4525 0573 76000000 		.4byte	0x76
 4526 0577 02       		.uleb128 0x2
 4527 0578 91       		.byte	0x91
 4528 0579 64       		.sleb128 -28
 4529 057a 11       		.uleb128 0x11
 4530 057b FF030000 		.4byte	.LASF63
 4531 057f 01       		.byte	0x1
 4532 0580 4B01     		.2byte	0x14b
 4533 0582 36050000 		.4byte	0x536
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 104


 4534 0586 02       		.uleb128 0x2
 4535 0587 91       		.byte	0x91
 4536 0588 6C       		.sleb128 -20
 4537 0589 00       		.byte	0
 4538 058a 15       		.uleb128 0x15
 4539 058b F2040000 		.4byte	.LASF89
 4540 058f 01       		.byte	0x1
 4541 0590 5B01     		.2byte	0x15b
 4542 0592 00000000 		.4byte	.LFB47
 4543 0596 98000000 		.4byte	.LFE47-.LFB47
 4544 059a 01       		.uleb128 0x1
 4545 059b 9C       		.byte	0x9c
 4546 059c CE050000 		.4byte	0x5ce
 4547 05a0 10       		.uleb128 0x10
 4548 05a1 02070000 		.4byte	.LASF85
 4549 05a5 01       		.byte	0x1
 4550 05a6 5B01     		.2byte	0x15b
 4551 05a8 6B000000 		.4byte	0x6b
 4552 05ac 02       		.uleb128 0x2
 4553 05ad 91       		.byte	0x91
 4554 05ae 67       		.sleb128 -25
 4555 05af 10       		.uleb128 0x10
 4556 05b0 69010000 		.4byte	.LASF90
 4557 05b4 01       		.byte	0x1
 4558 05b5 5B01     		.2byte	0x15b
 4559 05b7 76000000 		.4byte	0x76
 4560 05bb 02       		.uleb128 0x2
 4561 05bc 91       		.byte	0x91
 4562 05bd 64       		.sleb128 -28
 4563 05be 11       		.uleb128 0x11
 4564 05bf FF030000 		.4byte	.LASF63
 4565 05c3 01       		.byte	0x1
 4566 05c4 5D01     		.2byte	0x15d
 4567 05c6 36050000 		.4byte	0x536
 4568 05ca 02       		.uleb128 0x2
 4569 05cb 91       		.byte	0x91
 4570 05cc 6C       		.sleb128 -20
 4571 05cd 00       		.byte	0
 4572 05ce 12       		.uleb128 0x12
 4573 05cf CC030000 		.4byte	.LASF91
 4574 05d3 01       		.byte	0x1
 4575 05d4 6F01     		.2byte	0x16f
 4576 05d6 6B000000 		.4byte	0x6b
 4577 05da 00000000 		.4byte	.LFB48
 4578 05de 6C010000 		.4byte	.LFE48-.LFB48
 4579 05e2 01       		.uleb128 0x1
 4580 05e3 9C       		.byte	0x9c
 4581 05e4 32060000 		.4byte	0x632
 4582 05e8 10       		.uleb128 0x10
 4583 05e9 48040000 		.4byte	.LASF92
 4584 05ed 01       		.byte	0x1
 4585 05ee 6F01     		.2byte	0x16f
 4586 05f0 6B000000 		.4byte	0x6b
 4587 05f4 02       		.uleb128 0x2
 4588 05f5 91       		.byte	0x91
 4589 05f6 67       		.sleb128 -25
 4590 05f7 10       		.uleb128 0x10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 105


 4591 05f8 6E000000 		.4byte	.LASF93
 4592 05fc 01       		.byte	0x1
 4593 05fd 6F01     		.2byte	0x16f
 4594 05ff 1D030000 		.4byte	0x31d
 4595 0603 02       		.uleb128 0x2
 4596 0604 91       		.byte	0x91
 4597 0605 60       		.sleb128 -32
 4598 0606 18       		.uleb128 0x18
 4599 0607 6900     		.ascii	"i\000"
 4600 0609 01       		.byte	0x1
 4601 060a 7F01     		.2byte	0x17f
 4602 060c 6B000000 		.4byte	0x6b
 4603 0610 02       		.uleb128 0x2
 4604 0611 91       		.byte	0x91
 4605 0612 6F       		.sleb128 -17
 4606 0613 18       		.uleb128 0x18
 4607 0614 61766700 		.ascii	"avg\000"
 4608 0618 01       		.byte	0x1
 4609 0619 8001     		.2byte	0x180
 4610 061b 76000000 		.4byte	0x76
 4611 061f 02       		.uleb128 0x2
 4612 0620 91       		.byte	0x91
 4613 0621 6A       		.sleb128 -22
 4614 0622 11       		.uleb128 0x11
 4615 0623 7C060000 		.4byte	.LASF71
 4616 0627 01       		.byte	0x1
 4617 0628 8101     		.2byte	0x181
 4618 062a 76000000 		.4byte	0x76
 4619 062e 02       		.uleb128 0x2
 4620 062f 91       		.byte	0x91
 4621 0630 6C       		.sleb128 -20
 4622 0631 00       		.byte	0
 4623 0632 12       		.uleb128 0x12
 4624 0633 A8050000 		.4byte	.LASF94
 4625 0637 01       		.byte	0x1
 4626 0638 D701     		.2byte	0x1d7
 4627 063a 6B000000 		.4byte	0x6b
 4628 063e 00000000 		.4byte	.LFB49
 4629 0642 6C010000 		.4byte	.LFE49-.LFB49
 4630 0646 01       		.uleb128 0x1
 4631 0647 9C       		.byte	0x9c
 4632 0648 96060000 		.4byte	0x696
 4633 064c 10       		.uleb128 0x10
 4634 064d 49000000 		.4byte	.LASF95
 4635 0651 01       		.byte	0x1
 4636 0652 D701     		.2byte	0x1d7
 4637 0654 6B000000 		.4byte	0x6b
 4638 0658 02       		.uleb128 0x2
 4639 0659 91       		.byte	0x91
 4640 065a 67       		.sleb128 -25
 4641 065b 10       		.uleb128 0x10
 4642 065c E1060000 		.4byte	.LASF96
 4643 0660 01       		.byte	0x1
 4644 0661 D701     		.2byte	0x1d7
 4645 0663 1D030000 		.4byte	0x31d
 4646 0667 02       		.uleb128 0x2
 4647 0668 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 106


 4648 0669 60       		.sleb128 -32
 4649 066a 18       		.uleb128 0x18
 4650 066b 6900     		.ascii	"i\000"
 4651 066d 01       		.byte	0x1
 4652 066e E701     		.2byte	0x1e7
 4653 0670 6B000000 		.4byte	0x6b
 4654 0674 02       		.uleb128 0x2
 4655 0675 91       		.byte	0x91
 4656 0676 6F       		.sleb128 -17
 4657 0677 18       		.uleb128 0x18
 4658 0678 61766700 		.ascii	"avg\000"
 4659 067c 01       		.byte	0x1
 4660 067d E801     		.2byte	0x1e8
 4661 067f 76000000 		.4byte	0x76
 4662 0683 02       		.uleb128 0x2
 4663 0684 91       		.byte	0x91
 4664 0685 6A       		.sleb128 -22
 4665 0686 11       		.uleb128 0x11
 4666 0687 7C060000 		.4byte	.LASF71
 4667 068b 01       		.byte	0x1
 4668 068c E901     		.2byte	0x1e9
 4669 068e 76000000 		.4byte	0x76
 4670 0692 02       		.uleb128 0x2
 4671 0693 91       		.byte	0x91
 4672 0694 6C       		.sleb128 -20
 4673 0695 00       		.byte	0
 4674 0696 12       		.uleb128 0x12
 4675 0697 62020000 		.4byte	.LASF97
 4676 069b 01       		.byte	0x1
 4677 069c 4102     		.2byte	0x241
 4678 069e 6B000000 		.4byte	0x6b
 4679 06a2 00000000 		.4byte	.LFB50
 4680 06a6 5C020000 		.4byte	.LFE50-.LFB50
 4681 06aa 01       		.uleb128 0x1
 4682 06ab 9C       		.byte	0x9c
 4683 06ac 09070000 		.4byte	0x709
 4684 06b0 10       		.uleb128 0x10
 4685 06b1 6F010000 		.4byte	.LASF98
 4686 06b5 01       		.byte	0x1
 4687 06b6 4102     		.2byte	0x241
 4688 06b8 6B000000 		.4byte	0x6b
 4689 06bc 02       		.uleb128 0x2
 4690 06bd 91       		.byte	0x91
 4691 06be 67       		.sleb128 -25
 4692 06bf 10       		.uleb128 0x10
 4693 06c0 BD050000 		.4byte	.LASF99
 4694 06c4 01       		.byte	0x1
 4695 06c5 4102     		.2byte	0x241
 4696 06c7 1D030000 		.4byte	0x31d
 4697 06cb 02       		.uleb128 0x2
 4698 06cc 91       		.byte	0x91
 4699 06cd 60       		.sleb128 -32
 4700 06ce 18       		.uleb128 0x18
 4701 06cf 6900     		.ascii	"i\000"
 4702 06d1 01       		.byte	0x1
 4703 06d2 4702     		.2byte	0x247
 4704 06d4 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 107


 4705 06d8 02       		.uleb128 0x2
 4706 06d9 91       		.byte	0x91
 4707 06da 6F       		.sleb128 -17
 4708 06db 18       		.uleb128 0x18
 4709 06dc 61766700 		.ascii	"avg\000"
 4710 06e0 01       		.byte	0x1
 4711 06e1 4802     		.2byte	0x248
 4712 06e3 76000000 		.4byte	0x76
 4713 06e7 02       		.uleb128 0x2
 4714 06e8 91       		.byte	0x91
 4715 06e9 68       		.sleb128 -24
 4716 06ea 11       		.uleb128 0x11
 4717 06eb 7C060000 		.4byte	.LASF71
 4718 06ef 01       		.byte	0x1
 4719 06f0 4902     		.2byte	0x249
 4720 06f2 76000000 		.4byte	0x76
 4721 06f6 02       		.uleb128 0x2
 4722 06f7 91       		.byte	0x91
 4723 06f8 6A       		.sleb128 -22
 4724 06f9 11       		.uleb128 0x11
 4725 06fa E7020000 		.4byte	.LASF80
 4726 06fe 01       		.byte	0x1
 4727 06ff 4C02     		.2byte	0x24c
 4728 0701 76000000 		.4byte	0x76
 4729 0705 02       		.uleb128 0x2
 4730 0706 91       		.byte	0x91
 4731 0707 6C       		.sleb128 -20
 4732 0708 00       		.byte	0
 4733 0709 12       		.uleb128 0x12
 4734 070a 0F020000 		.4byte	.LASF100
 4735 070e 01       		.byte	0x1
 4736 070f CA02     		.2byte	0x2ca
 4737 0711 6B000000 		.4byte	0x6b
 4738 0715 00000000 		.4byte	.LFB51
 4739 0719 5C020000 		.4byte	.LFE51-.LFB51
 4740 071d 01       		.uleb128 0x1
 4741 071e 9C       		.byte	0x9c
 4742 071f 7C070000 		.4byte	0x77c
 4743 0723 10       		.uleb128 0x10
 4744 0724 05040000 		.4byte	.LASF101
 4745 0728 01       		.byte	0x1
 4746 0729 CA02     		.2byte	0x2ca
 4747 072b 6B000000 		.4byte	0x6b
 4748 072f 02       		.uleb128 0x2
 4749 0730 91       		.byte	0x91
 4750 0731 67       		.sleb128 -25
 4751 0732 10       		.uleb128 0x10
 4752 0733 D0000000 		.4byte	.LASF102
 4753 0737 01       		.byte	0x1
 4754 0738 CA02     		.2byte	0x2ca
 4755 073a 1D030000 		.4byte	0x31d
 4756 073e 02       		.uleb128 0x2
 4757 073f 91       		.byte	0x91
 4758 0740 60       		.sleb128 -32
 4759 0741 18       		.uleb128 0x18
 4760 0742 6900     		.ascii	"i\000"
 4761 0744 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 108


 4762 0745 D002     		.2byte	0x2d0
 4763 0747 6B000000 		.4byte	0x6b
 4764 074b 02       		.uleb128 0x2
 4765 074c 91       		.byte	0x91
 4766 074d 6F       		.sleb128 -17
 4767 074e 18       		.uleb128 0x18
 4768 074f 61766700 		.ascii	"avg\000"
 4769 0753 01       		.byte	0x1
 4770 0754 D102     		.2byte	0x2d1
 4771 0756 76000000 		.4byte	0x76
 4772 075a 02       		.uleb128 0x2
 4773 075b 91       		.byte	0x91
 4774 075c 68       		.sleb128 -24
 4775 075d 11       		.uleb128 0x11
 4776 075e 7C060000 		.4byte	.LASF71
 4777 0762 01       		.byte	0x1
 4778 0763 D202     		.2byte	0x2d2
 4779 0765 76000000 		.4byte	0x76
 4780 0769 02       		.uleb128 0x2
 4781 076a 91       		.byte	0x91
 4782 076b 6A       		.sleb128 -22
 4783 076c 11       		.uleb128 0x11
 4784 076d E7020000 		.4byte	.LASF80
 4785 0771 01       		.byte	0x1
 4786 0772 D302     		.2byte	0x2d3
 4787 0774 76000000 		.4byte	0x76
 4788 0778 02       		.uleb128 0x2
 4789 0779 91       		.byte	0x91
 4790 077a 6C       		.sleb128 -20
 4791 077b 00       		.byte	0
 4792 077c 12       		.uleb128 0x12
 4793 077d 00000000 		.4byte	.LASF103
 4794 0781 01       		.byte	0x1
 4795 0782 5203     		.2byte	0x352
 4796 0784 6B000000 		.4byte	0x6b
 4797 0788 00000000 		.4byte	.LFB52
 4798 078c 5C010000 		.4byte	.LFE52-.LFB52
 4799 0790 01       		.uleb128 0x1
 4800 0791 9C       		.byte	0x9c
 4801 0792 E0070000 		.4byte	0x7e0
 4802 0796 10       		.uleb128 0x10
 4803 0797 15040000 		.4byte	.LASF104
 4804 079b 01       		.byte	0x1
 4805 079c 5203     		.2byte	0x352
 4806 079e 6B000000 		.4byte	0x6b
 4807 07a2 02       		.uleb128 0x2
 4808 07a3 91       		.byte	0x91
 4809 07a4 67       		.sleb128 -25
 4810 07a5 10       		.uleb128 0x10
 4811 07a6 45050000 		.4byte	.LASF105
 4812 07aa 01       		.byte	0x1
 4813 07ab 5203     		.2byte	0x352
 4814 07ad 1D030000 		.4byte	0x31d
 4815 07b1 02       		.uleb128 0x2
 4816 07b2 91       		.byte	0x91
 4817 07b3 60       		.sleb128 -32
 4818 07b4 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 109


 4819 07b5 6900     		.ascii	"i\000"
 4820 07b7 01       		.byte	0x1
 4821 07b8 5703     		.2byte	0x357
 4822 07ba 6B000000 		.4byte	0x6b
 4823 07be 02       		.uleb128 0x2
 4824 07bf 91       		.byte	0x91
 4825 07c0 6F       		.sleb128 -17
 4826 07c1 18       		.uleb128 0x18
 4827 07c2 61766700 		.ascii	"avg\000"
 4828 07c6 01       		.byte	0x1
 4829 07c7 5803     		.2byte	0x358
 4830 07c9 76000000 		.4byte	0x76
 4831 07cd 02       		.uleb128 0x2
 4832 07ce 91       		.byte	0x91
 4833 07cf 6A       		.sleb128 -22
 4834 07d0 11       		.uleb128 0x11
 4835 07d1 7C060000 		.4byte	.LASF71
 4836 07d5 01       		.byte	0x1
 4837 07d6 5903     		.2byte	0x359
 4838 07d8 76000000 		.4byte	0x76
 4839 07dc 02       		.uleb128 0x2
 4840 07dd 91       		.byte	0x91
 4841 07de 6C       		.sleb128 -20
 4842 07df 00       		.byte	0
 4843 07e0 19       		.uleb128 0x19
 4844 07e1 77000000 		.4byte	.LASF106
 4845 07e5 01       		.byte	0x1
 4846 07e6 B603     		.2byte	0x3b6
 4847 07e8 00000000 		.4byte	.LFB53
 4848 07ec DC000000 		.4byte	.LFE53-.LFB53
 4849 07f0 01       		.uleb128 0x1
 4850 07f1 9C       		.byte	0x9c
 4851 07f2 06080000 		.4byte	0x806
 4852 07f6 11       		.uleb128 0x11
 4853 07f7 7C060000 		.4byte	.LASF71
 4854 07fb 01       		.byte	0x1
 4855 07fc B803     		.2byte	0x3b8
 4856 07fe 76000000 		.4byte	0x76
 4857 0802 02       		.uleb128 0x2
 4858 0803 91       		.byte	0x91
 4859 0804 6E       		.sleb128 -18
 4860 0805 00       		.byte	0
 4861 0806 19       		.uleb128 0x19
 4862 0807 57020000 		.4byte	.LASF107
 4863 080b 01       		.byte	0x1
 4864 080c F803     		.2byte	0x3f8
 4865 080e 00000000 		.4byte	.LFB54
 4866 0812 3C010000 		.4byte	.LFE54-.LFB54
 4867 0816 01       		.uleb128 0x1
 4868 0817 9C       		.byte	0x9c
 4869 0818 34080000 		.4byte	0x834
 4870 081c 1A       		.uleb128 0x1a
 4871 081d 1E000000 		.4byte	.LBB2
 4872 0821 2C000000 		.4byte	.LBE2-.LBB2
 4873 0825 18       		.uleb128 0x18
 4874 0826 6A00     		.ascii	"j\000"
 4875 0828 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 110


 4876 0829 FF03     		.2byte	0x3ff
 4877 082b 6B000000 		.4byte	0x6b
 4878 082f 02       		.uleb128 0x2
 4879 0830 91       		.byte	0x91
 4880 0831 77       		.sleb128 -9
 4881 0832 00       		.byte	0
 4882 0833 00       		.byte	0
 4883 0834 1B       		.uleb128 0x1b
 4884 0835 C9060000 		.4byte	.LASF108
 4885 0839 01       		.byte	0x1
 4886 083a 3D04     		.2byte	0x43d
 4887 083c 5D000000 		.4byte	0x5d
 4888 0840 00000000 		.4byte	.LFB55
 4889 0844 9C010000 		.4byte	.LFE55-.LFB55
 4890 0848 01       		.uleb128 0x1
 4891 0849 9C       		.byte	0x9c
 4892 084a 1F090000 		.4byte	0x91f
 4893 084e 11       		.uleb128 0x11
 4894 084f 2B000000 		.4byte	.LASF109
 4895 0853 01       		.byte	0x1
 4896 0854 4804     		.2byte	0x448
 4897 0856 6B000000 		.4byte	0x6b
 4898 085a 02       		.uleb128 0x2
 4899 085b 91       		.byte	0x91
 4900 085c 6F       		.sleb128 -17
 4901 085d 11       		.uleb128 0x11
 4902 085e CE060000 		.4byte	.LASF110
 4903 0862 01       		.byte	0x1
 4904 0863 4904     		.2byte	0x449
 4905 0865 1F090000 		.4byte	0x91f
 4906 0869 03       		.uleb128 0x3
 4907 086a 91       		.byte	0x91
 4908 086b B87F     		.sleb128 -72
 4909 086d 11       		.uleb128 0x11
 4910 086e AB030000 		.4byte	.LASF111
 4911 0872 01       		.byte	0x1
 4912 0873 4A04     		.2byte	0x44a
 4913 0875 6B000000 		.4byte	0x6b
 4914 0879 02       		.uleb128 0x2
 4915 087a 91       		.byte	0x91
 4916 087b 6E       		.sleb128 -18
 4917 087c 11       		.uleb128 0x11
 4918 087d 2E070000 		.4byte	.LASF112
 4919 0881 01       		.byte	0x1
 4920 0882 4B04     		.2byte	0x44b
 4921 0884 1F090000 		.4byte	0x91f
 4922 0888 03       		.uleb128 0x3
 4923 0889 91       		.byte	0x91
 4924 088a 907F     		.sleb128 -112
 4925 088c 11       		.uleb128 0x11
 4926 088d 72020000 		.4byte	.LASF113
 4927 0891 01       		.byte	0x1
 4928 0892 4C04     		.2byte	0x44c
 4929 0894 6B000000 		.4byte	0x6b
 4930 0898 02       		.uleb128 0x2
 4931 0899 91       		.byte	0x91
 4932 089a 6D       		.sleb128 -19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 111


 4933 089b 11       		.uleb128 0x11
 4934 089c 3E030000 		.4byte	.LASF114
 4935 08a0 01       		.byte	0x1
 4936 08a1 4D04     		.2byte	0x44d
 4937 08a3 1F090000 		.4byte	0x91f
 4938 08a7 03       		.uleb128 0x3
 4939 08a8 91       		.byte	0x91
 4940 08a9 E87E     		.sleb128 -152
 4941 08ab 11       		.uleb128 0x11
 4942 08ac 40000000 		.4byte	.LASF115
 4943 08b0 01       		.byte	0x1
 4944 08b1 4E04     		.2byte	0x44e
 4945 08b3 6B000000 		.4byte	0x6b
 4946 08b7 02       		.uleb128 0x2
 4947 08b8 91       		.byte	0x91
 4948 08b9 6C       		.sleb128 -20
 4949 08ba 11       		.uleb128 0x11
 4950 08bb 6E000000 		.4byte	.LASF93
 4951 08bf 01       		.byte	0x1
 4952 08c0 4F04     		.2byte	0x44f
 4953 08c2 1F090000 		.4byte	0x91f
 4954 08c6 03       		.uleb128 0x3
 4955 08c7 91       		.byte	0x91
 4956 08c8 C07E     		.sleb128 -192
 4957 08ca 11       		.uleb128 0x11
 4958 08cb 35030000 		.4byte	.LASF116
 4959 08cf 01       		.byte	0x1
 4960 08d0 5004     		.2byte	0x450
 4961 08d2 6B000000 		.4byte	0x6b
 4962 08d6 02       		.uleb128 0x2
 4963 08d7 91       		.byte	0x91
 4964 08d8 6B       		.sleb128 -21
 4965 08d9 11       		.uleb128 0x11
 4966 08da E1060000 		.4byte	.LASF96
 4967 08de 01       		.byte	0x1
 4968 08df 5104     		.2byte	0x451
 4969 08e1 1F090000 		.4byte	0x91f
 4970 08e5 03       		.uleb128 0x3
 4971 08e6 91       		.byte	0x91
 4972 08e7 987E     		.sleb128 -232
 4973 08e9 11       		.uleb128 0x11
 4974 08ea 9B020000 		.4byte	.LASF117
 4975 08ee 01       		.byte	0x1
 4976 08ef 5B04     		.2byte	0x45b
 4977 08f1 6B000000 		.4byte	0x6b
 4978 08f5 02       		.uleb128 0x2
 4979 08f6 91       		.byte	0x91
 4980 08f7 6A       		.sleb128 -22
 4981 08f8 11       		.uleb128 0x11
 4982 08f9 8F060000 		.4byte	.LASF118
 4983 08fd 01       		.byte	0x1
 4984 08fe 5C04     		.2byte	0x45c
 4985 0900 97000000 		.4byte	0x97
 4986 0904 02       		.uleb128 0x2
 4987 0905 91       		.byte	0x91
 4988 0906 62       		.sleb128 -30
 4989 0907 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 112


 4990 0908 8C000000 		.4byte	.LBB3
 4991 090c 50000000 		.4byte	.LBE3-.LBB3
 4992 0910 18       		.uleb128 0x18
 4993 0911 6900     		.ascii	"i\000"
 4994 0913 01       		.byte	0x1
 4995 0914 8804     		.2byte	0x488
 4996 0916 5D000000 		.4byte	0x5d
 4997 091a 02       		.uleb128 0x2
 4998 091b 91       		.byte	0x91
 4999 091c 64       		.sleb128 -28
 5000 091d 00       		.byte	0
 5001 091e 00       		.byte	0
 5002 091f 16       		.uleb128 0x16
 5003 0920 76000000 		.4byte	0x76
 5004 0924 2F090000 		.4byte	0x92f
 5005 0928 17       		.uleb128 0x17
 5006 0929 BC000000 		.4byte	0xbc
 5007 092d 13       		.byte	0x13
 5008 092e 00       		.byte	0
 5009 092f 1C       		.uleb128 0x1c
 5010 0930 D7050000 		.4byte	.LASF119
 5011 0934 03       		.byte	0x3
 5012 0935 19       		.byte	0x19
 5013 0936 81000000 		.4byte	0x81
 5014 093a 05       		.uleb128 0x5
 5015 093b 03       		.byte	0x3
 5016 093c 00000000 		.4byte	ELBOW_UPPER_BOUND
 5017 0940 1C       		.uleb128 0x1c
 5018 0941 CA010000 		.4byte	.LASF120
 5019 0945 03       		.byte	0x3
 5020 0946 1B       		.byte	0x1b
 5021 0947 81000000 		.4byte	0x81
 5022 094b 05       		.uleb128 0x5
 5023 094c 03       		.byte	0x3
 5024 094d 00000000 		.4byte	ELBOW_LOWER_BOUND
 5025 0951 1C       		.uleb128 0x1c
 5026 0952 6A030000 		.4byte	.LASF121
 5027 0956 03       		.byte	0x3
 5028 0957 1D       		.byte	0x1d
 5029 0958 81000000 		.4byte	0x81
 5030 095c 05       		.uleb128 0x5
 5031 095d 03       		.byte	0x3
 5032 095e 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5033 0962 1C       		.uleb128 0x1c
 5034 0963 5E050000 		.4byte	.LASF122
 5035 0967 03       		.byte	0x3
 5036 0968 1F       		.byte	0x1f
 5037 0969 81000000 		.4byte	0x81
 5038 096d 05       		.uleb128 0x5
 5039 096e 03       		.byte	0x3
 5040 096f 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5041 0973 16       		.uleb128 0x16
 5042 0974 8C000000 		.4byte	0x8c
 5043 0978 83090000 		.4byte	0x983
 5044 097c 17       		.uleb128 0x17
 5045 097d BC000000 		.4byte	0xbc
 5046 0981 15       		.byte	0x15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 113


 5047 0982 00       		.byte	0
 5048 0983 1C       		.uleb128 0x1c
 5049 0984 B4020000 		.4byte	.LASF123
 5050 0988 03       		.byte	0x3
 5051 0989 37       		.byte	0x37
 5052 098a 73090000 		.4byte	0x973
 5053 098e 05       		.uleb128 0x5
 5054 098f 03       		.byte	0x3
 5055 0990 00000000 		.4byte	data_array
 5056 0994 1C       		.uleb128 0x1c
 5057 0995 DE040000 		.4byte	.LASF124
 5058 0999 03       		.byte	0x3
 5059 099a 3A       		.byte	0x3a
 5060 099b 6B000000 		.4byte	0x6b
 5061 099f 05       		.uleb128 0x5
 5062 09a0 03       		.byte	0x3
 5063 09a1 00000000 		.4byte	wiznet
 5064 09a5 1C       		.uleb128 0x1c
 5065 09a6 20000000 		.4byte	.LASF125
 5066 09aa 03       		.byte	0x3
 5067 09ab 3E       		.byte	0x3e
 5068 09ac 73090000 		.4byte	0x973
 5069 09b0 05       		.uleb128 0x5
 5070 09b1 03       		.byte	0x3
 5071 09b2 00000000 		.4byte	test_array
 5072 09b6 1C       		.uleb128 0x1c
 5073 09b7 B7030000 		.4byte	.LASF126
 5074 09bb 03       		.byte	0x3
 5075 09bc 47       		.byte	0x47
 5076 09bd 6B000000 		.4byte	0x6b
 5077 09c1 05       		.uleb128 0x5
 5078 09c2 03       		.byte	0x3
 5079 09c3 00000000 		.4byte	WT_FLAG
 5080 09c7 1C       		.uleb128 0x1c
 5081 09c8 C7020000 		.4byte	.LASF127
 5082 09cc 03       		.byte	0x3
 5083 09cd 48       		.byte	0x48
 5084 09ce 6B000000 		.4byte	0x6b
 5085 09d2 05       		.uleb128 0x5
 5086 09d3 03       		.byte	0x3
 5087 09d4 00000000 		.4byte	WR_FLAG
 5088 09d8 1C       		.uleb128 0x1c
 5089 09d9 F7060000 		.4byte	.LASF128
 5090 09dd 03       		.byte	0x3
 5091 09de 49       		.byte	0x49
 5092 09df 6B000000 		.4byte	0x6b
 5093 09e3 05       		.uleb128 0x5
 5094 09e4 03       		.byte	0x3
 5095 09e5 00000000 		.4byte	ELBOW_FLAG
 5096 09e9 1C       		.uleb128 0x1c
 5097 09ea D6030000 		.4byte	.LASF129
 5098 09ee 03       		.byte	0x3
 5099 09ef 4A       		.byte	0x4a
 5100 09f0 6B000000 		.4byte	0x6b
 5101 09f4 05       		.uleb128 0x5
 5102 09f5 03       		.byte	0x3
 5103 09f6 00000000 		.4byte	SHOULDER_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 114


 5104 09fa 1C       		.uleb128 0x1c
 5105 09fb F0020000 		.4byte	.LASF130
 5106 09ff 03       		.byte	0x3
 5107 0a00 4B       		.byte	0x4b
 5108 0a01 6B000000 		.4byte	0x6b
 5109 0a05 05       		.uleb128 0x5
 5110 0a06 03       		.byte	0x3
 5111 0a07 00000000 		.4byte	BA_FLAG
 5112 0a0b 1C       		.uleb128 0x1c
 5113 0a0c 5C030000 		.4byte	.LASF131
 5114 0a10 03       		.byte	0x3
 5115 0a11 4C       		.byte	0x4c
 5116 0a12 6B000000 		.4byte	0x6b
 5117 0a16 05       		.uleb128 0x5
 5118 0a17 03       		.byte	0x3
 5119 0a18 00000000 		.4byte	EFFECTOR_FLAG
 5120 0a1c 1C       		.uleb128 0x1c
 5121 0a1d B7000000 		.4byte	.LASF132
 5122 0a21 03       		.byte	0x3
 5123 0a22 4F       		.byte	0x4f
 5124 0a23 76000000 		.4byte	0x76
 5125 0a27 05       		.uleb128 0x5
 5126 0a28 03       		.byte	0x3
 5127 0a29 00000000 		.4byte	dropped_packets
 5128 0a2d 1C       		.uleb128 0x1c
 5129 0a2e 8E010000 		.4byte	.LASF133
 5130 0a32 03       		.byte	0x3
 5131 0a33 50       		.byte	0x50
 5132 0a34 76000000 		.4byte	0x76
 5133 0a38 05       		.uleb128 0x5
 5134 0a39 03       		.byte	0x3
 5135 0a3a 00000000 		.4byte	fail_safe_errors
 5136 0a3e 1C       		.uleb128 0x1c
 5137 0a3f 12070000 		.4byte	.LASF134
 5138 0a43 03       		.byte	0x3
 5139 0a44 51       		.byte	0x51
 5140 0a45 76000000 		.4byte	0x76
 5141 0a49 05       		.uleb128 0x5
 5142 0a4a 03       		.byte	0x3
 5143 0a4b 00000000 		.4byte	shldr_errors
 5144 0a4f 1C       		.uleb128 0x1c
 5145 0a50 34000000 		.4byte	.LASF135
 5146 0a54 03       		.byte	0x3
 5147 0a55 52       		.byte	0x52
 5148 0a56 76000000 		.4byte	0x76
 5149 0a5a 05       		.uleb128 0x5
 5150 0a5b 03       		.byte	0x3
 5151 0a5c 00000000 		.4byte	elbw_errors
 5152 0a60 1C       		.uleb128 0x1c
 5153 0a61 7D020000 		.4byte	.LASF136
 5154 0a65 03       		.byte	0x3
 5155 0a66 53       		.byte	0x53
 5156 0a67 76000000 		.4byte	0x76
 5157 0a6b 05       		.uleb128 0x5
 5158 0a6c 03       		.byte	0x3
 5159 0a6d 00000000 		.4byte	BA_errors
 5160 0a71 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 115


 5161 0a72 30020000 		.4byte	.LASF137
 5162 0a76 03       		.byte	0x3
 5163 0a77 54       		.byte	0x54
 5164 0a78 76000000 		.4byte	0x76
 5165 0a7c 05       		.uleb128 0x5
 5166 0a7d 03       		.byte	0x3
 5167 0a7e 00000000 		.4byte	WT_errors
 5168 0a82 1C       		.uleb128 0x1c
 5169 0a83 A9040000 		.4byte	.LASF138
 5170 0a87 03       		.byte	0x3
 5171 0a88 55       		.byte	0x55
 5172 0a89 76000000 		.4byte	0x76
 5173 0a8d 05       		.uleb128 0x5
 5174 0a8e 03       		.byte	0x3
 5175 0a8f 00000000 		.4byte	WR_errors
 5176 0a93 1C       		.uleb128 0x1c
 5177 0a94 3A020000 		.4byte	.LASF139
 5178 0a98 03       		.byte	0x3
 5179 0a99 56       		.byte	0x56
 5180 0a9a 76000000 		.4byte	0x76
 5181 0a9e 05       		.uleb128 0x5
 5182 0a9f 03       		.byte	0x3
 5183 0aa0 00000000 		.4byte	eff_errors
 5184 0aa4 1C       		.uleb128 0x1c
 5185 0aa5 05020000 		.4byte	.LASF140
 5186 0aa9 03       		.byte	0x3
 5187 0aaa 58       		.byte	0x58
 5188 0aab B7000000 		.4byte	0xb7
 5189 0aaf 05       		.uleb128 0x5
 5190 0ab0 03       		.byte	0x3
 5191 0ab1 00000000 		.4byte	timerFlag
 5192 0ab5 1D       		.uleb128 0x1d
 5193 0ab6 EF030000 		.4byte	.LASF141
 5194 0aba 01       		.byte	0x1
 5195 0abb 6D01     		.2byte	0x16d
 5196 0abd C3000000 		.4byte	0xc3
 5197 0ac1 05       		.uleb128 0x5
 5198 0ac2 03       		.byte	0x3
 5199 0ac3 00000000 		.4byte	wristTilt_state
 5200 0ac7 1D       		.uleb128 0x1d
 5201 0ac8 B3040000 		.4byte	.LASF142
 5202 0acc 01       		.byte	0x1
 5203 0acd D501     		.2byte	0x1d5
 5204 0acf E9000000 		.4byte	0xe9
 5205 0ad3 05       		.uleb128 0x5
 5206 0ad4 03       		.byte	0x3
 5207 0ad5 00000000 		.4byte	wristRotate_state
 5208 0ad9 1D       		.uleb128 0x1d
 5209 0ada AA010000 		.4byte	.LASF143
 5210 0ade 01       		.byte	0x1
 5211 0adf 4002     		.2byte	0x240
 5212 0ae1 0F010000 		.4byte	0x10f
 5213 0ae5 05       		.uleb128 0x5
 5214 0ae6 03       		.byte	0x3
 5215 0ae7 00000000 		.4byte	elbow_state
 5216 0aeb 1D       		.uleb128 0x1d
 5217 0aec EE000000 		.4byte	.LASF144
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 116


 5218 0af0 01       		.byte	0x1
 5219 0af1 C902     		.2byte	0x2c9
 5220 0af3 35010000 		.4byte	0x135
 5221 0af7 05       		.uleb128 0x5
 5222 0af8 03       		.byte	0x3
 5223 0af9 00000000 		.4byte	shoulder_state
 5224 0afd 1D       		.uleb128 0x1d
 5225 0afe 6E040000 		.4byte	.LASF145
 5226 0b02 01       		.byte	0x1
 5227 0b03 5103     		.2byte	0x351
 5228 0b05 5B010000 		.4byte	0x15b
 5229 0b09 05       		.uleb128 0x5
 5230 0b0a 03       		.byte	0x3
 5231 0b0b 00000000 		.4byte	baseAzimuth_state
 5232 0b0f 1D       		.uleb128 0x1d
 5233 0b10 8F030000 		.4byte	.LASF146
 5234 0b14 01       		.byte	0x1
 5235 0b15 B503     		.2byte	0x3b5
 5236 0b17 81010000 		.4byte	0x181
 5237 0b1b 05       		.uleb128 0x5
 5238 0b1c 03       		.byte	0x3
 5239 0b1d 00000000 		.4byte	effector_state
 5240 0b21 00       		.byte	0
 5241              		.section	.debug_abbrev,"",%progbits
 5242              	.Ldebug_abbrev0:
 5243 0000 01       		.uleb128 0x1
 5244 0001 11       		.uleb128 0x11
 5245 0002 01       		.byte	0x1
 5246 0003 25       		.uleb128 0x25
 5247 0004 0E       		.uleb128 0xe
 5248 0005 13       		.uleb128 0x13
 5249 0006 0B       		.uleb128 0xb
 5250 0007 03       		.uleb128 0x3
 5251 0008 0E       		.uleb128 0xe
 5252 0009 1B       		.uleb128 0x1b
 5253 000a 0E       		.uleb128 0xe
 5254 000b 55       		.uleb128 0x55
 5255 000c 17       		.uleb128 0x17
 5256 000d 11       		.uleb128 0x11
 5257 000e 01       		.uleb128 0x1
 5258 000f 10       		.uleb128 0x10
 5259 0010 17       		.uleb128 0x17
 5260 0011 00       		.byte	0
 5261 0012 00       		.byte	0
 5262 0013 02       		.uleb128 0x2
 5263 0014 24       		.uleb128 0x24
 5264 0015 00       		.byte	0
 5265 0016 0B       		.uleb128 0xb
 5266 0017 0B       		.uleb128 0xb
 5267 0018 3E       		.uleb128 0x3e
 5268 0019 0B       		.uleb128 0xb
 5269 001a 03       		.uleb128 0x3
 5270 001b 0E       		.uleb128 0xe
 5271 001c 00       		.byte	0
 5272 001d 00       		.byte	0
 5273 001e 03       		.uleb128 0x3
 5274 001f 24       		.uleb128 0x24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 117


 5275 0020 00       		.byte	0
 5276 0021 0B       		.uleb128 0xb
 5277 0022 0B       		.uleb128 0xb
 5278 0023 3E       		.uleb128 0x3e
 5279 0024 0B       		.uleb128 0xb
 5280 0025 03       		.uleb128 0x3
 5281 0026 08       		.uleb128 0x8
 5282 0027 00       		.byte	0
 5283 0028 00       		.byte	0
 5284 0029 04       		.uleb128 0x4
 5285 002a 16       		.uleb128 0x16
 5286 002b 00       		.byte	0
 5287 002c 03       		.uleb128 0x3
 5288 002d 0E       		.uleb128 0xe
 5289 002e 3A       		.uleb128 0x3a
 5290 002f 0B       		.uleb128 0xb
 5291 0030 3B       		.uleb128 0x3b
 5292 0031 0B       		.uleb128 0xb
 5293 0032 49       		.uleb128 0x49
 5294 0033 13       		.uleb128 0x13
 5295 0034 00       		.byte	0
 5296 0035 00       		.byte	0
 5297 0036 05       		.uleb128 0x5
 5298 0037 35       		.uleb128 0x35
 5299 0038 00       		.byte	0
 5300 0039 49       		.uleb128 0x49
 5301 003a 13       		.uleb128 0x13
 5302 003b 00       		.byte	0
 5303 003c 00       		.byte	0
 5304 003d 06       		.uleb128 0x6
 5305 003e 04       		.uleb128 0x4
 5306 003f 01       		.byte	0x1
 5307 0040 03       		.uleb128 0x3
 5308 0041 0E       		.uleb128 0xe
 5309 0042 0B       		.uleb128 0xb
 5310 0043 0B       		.uleb128 0xb
 5311 0044 3A       		.uleb128 0x3a
 5312 0045 0B       		.uleb128 0xb
 5313 0046 3B       		.uleb128 0x3b
 5314 0047 05       		.uleb128 0x5
 5315 0048 01       		.uleb128 0x1
 5316 0049 13       		.uleb128 0x13
 5317 004a 00       		.byte	0
 5318 004b 00       		.byte	0
 5319 004c 07       		.uleb128 0x7
 5320 004d 28       		.uleb128 0x28
 5321 004e 00       		.byte	0
 5322 004f 03       		.uleb128 0x3
 5323 0050 0E       		.uleb128 0xe
 5324 0051 1C       		.uleb128 0x1c
 5325 0052 0D       		.uleb128 0xd
 5326 0053 00       		.byte	0
 5327 0054 00       		.byte	0
 5328 0055 08       		.uleb128 0x8
 5329 0056 2E       		.uleb128 0x2e
 5330 0057 01       		.byte	0x1
 5331 0058 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 118


 5332 0059 19       		.uleb128 0x19
 5333 005a 03       		.uleb128 0x3
 5334 005b 0E       		.uleb128 0xe
 5335 005c 3A       		.uleb128 0x3a
 5336 005d 0B       		.uleb128 0xb
 5337 005e 3B       		.uleb128 0x3b
 5338 005f 0B       		.uleb128 0xb
 5339 0060 27       		.uleb128 0x27
 5340 0061 19       		.uleb128 0x19
 5341 0062 11       		.uleb128 0x11
 5342 0063 01       		.uleb128 0x1
 5343 0064 12       		.uleb128 0x12
 5344 0065 06       		.uleb128 0x6
 5345 0066 40       		.uleb128 0x40
 5346 0067 18       		.uleb128 0x18
 5347 0068 9642     		.uleb128 0x2116
 5348 006a 19       		.uleb128 0x19
 5349 006b 01       		.uleb128 0x1
 5350 006c 13       		.uleb128 0x13
 5351 006d 00       		.byte	0
 5352 006e 00       		.byte	0
 5353 006f 09       		.uleb128 0x9
 5354 0070 34       		.uleb128 0x34
 5355 0071 00       		.byte	0
 5356 0072 03       		.uleb128 0x3
 5357 0073 0E       		.uleb128 0xe
 5358 0074 3A       		.uleb128 0x3a
 5359 0075 0B       		.uleb128 0xb
 5360 0076 3B       		.uleb128 0x3b
 5361 0077 0B       		.uleb128 0xb
 5362 0078 49       		.uleb128 0x49
 5363 0079 13       		.uleb128 0x13
 5364 007a 02       		.uleb128 0x2
 5365 007b 18       		.uleb128 0x18
 5366 007c 00       		.byte	0
 5367 007d 00       		.byte	0
 5368 007e 0A       		.uleb128 0xa
 5369 007f 2E       		.uleb128 0x2e
 5370 0080 01       		.byte	0x1
 5371 0081 3F       		.uleb128 0x3f
 5372 0082 19       		.uleb128 0x19
 5373 0083 03       		.uleb128 0x3
 5374 0084 0E       		.uleb128 0xe
 5375 0085 3A       		.uleb128 0x3a
 5376 0086 0B       		.uleb128 0xb
 5377 0087 3B       		.uleb128 0x3b
 5378 0088 0B       		.uleb128 0xb
 5379 0089 27       		.uleb128 0x27
 5380 008a 19       		.uleb128 0x19
 5381 008b 49       		.uleb128 0x49
 5382 008c 13       		.uleb128 0x13
 5383 008d 11       		.uleb128 0x11
 5384 008e 01       		.uleb128 0x1
 5385 008f 12       		.uleb128 0x12
 5386 0090 06       		.uleb128 0x6
 5387 0091 40       		.uleb128 0x40
 5388 0092 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 119


 5389 0093 9642     		.uleb128 0x2116
 5390 0095 19       		.uleb128 0x19
 5391 0096 01       		.uleb128 0x1
 5392 0097 13       		.uleb128 0x13
 5393 0098 00       		.byte	0
 5394 0099 00       		.byte	0
 5395 009a 0B       		.uleb128 0xb
 5396 009b 05       		.uleb128 0x5
 5397 009c 00       		.byte	0
 5398 009d 03       		.uleb128 0x3
 5399 009e 0E       		.uleb128 0xe
 5400 009f 3A       		.uleb128 0x3a
 5401 00a0 0B       		.uleb128 0xb
 5402 00a1 3B       		.uleb128 0x3b
 5403 00a2 0B       		.uleb128 0xb
 5404 00a3 49       		.uleb128 0x49
 5405 00a4 13       		.uleb128 0x13
 5406 00a5 02       		.uleb128 0x2
 5407 00a6 18       		.uleb128 0x18
 5408 00a7 00       		.byte	0
 5409 00a8 00       		.byte	0
 5410 00a9 0C       		.uleb128 0xc
 5411 00aa 34       		.uleb128 0x34
 5412 00ab 00       		.byte	0
 5413 00ac 03       		.uleb128 0x3
 5414 00ad 08       		.uleb128 0x8
 5415 00ae 3A       		.uleb128 0x3a
 5416 00af 0B       		.uleb128 0xb
 5417 00b0 3B       		.uleb128 0x3b
 5418 00b1 0B       		.uleb128 0xb
 5419 00b2 49       		.uleb128 0x49
 5420 00b3 13       		.uleb128 0x13
 5421 00b4 02       		.uleb128 0x2
 5422 00b5 18       		.uleb128 0x18
 5423 00b6 00       		.byte	0
 5424 00b7 00       		.byte	0
 5425 00b8 0D       		.uleb128 0xd
 5426 00b9 0F       		.uleb128 0xf
 5427 00ba 00       		.byte	0
 5428 00bb 0B       		.uleb128 0xb
 5429 00bc 0B       		.uleb128 0xb
 5430 00bd 49       		.uleb128 0x49
 5431 00be 13       		.uleb128 0x13
 5432 00bf 00       		.byte	0
 5433 00c0 00       		.byte	0
 5434 00c1 0E       		.uleb128 0xe
 5435 00c2 2E       		.uleb128 0x2e
 5436 00c3 01       		.byte	0x1
 5437 00c4 3F       		.uleb128 0x3f
 5438 00c5 19       		.uleb128 0x19
 5439 00c6 03       		.uleb128 0x3
 5440 00c7 0E       		.uleb128 0xe
 5441 00c8 3A       		.uleb128 0x3a
 5442 00c9 0B       		.uleb128 0xb
 5443 00ca 3B       		.uleb128 0x3b
 5444 00cb 0B       		.uleb128 0xb
 5445 00cc 27       		.uleb128 0x27
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 120


 5446 00cd 19       		.uleb128 0x19
 5447 00ce 49       		.uleb128 0x49
 5448 00cf 13       		.uleb128 0x13
 5449 00d0 11       		.uleb128 0x11
 5450 00d1 01       		.uleb128 0x1
 5451 00d2 12       		.uleb128 0x12
 5452 00d3 06       		.uleb128 0x6
 5453 00d4 40       		.uleb128 0x40
 5454 00d5 18       		.uleb128 0x18
 5455 00d6 9742     		.uleb128 0x2117
 5456 00d8 19       		.uleb128 0x19
 5457 00d9 01       		.uleb128 0x1
 5458 00da 13       		.uleb128 0x13
 5459 00db 00       		.byte	0
 5460 00dc 00       		.byte	0
 5461 00dd 0F       		.uleb128 0xf
 5462 00de 2E       		.uleb128 0x2e
 5463 00df 01       		.byte	0x1
 5464 00e0 3F       		.uleb128 0x3f
 5465 00e1 19       		.uleb128 0x19
 5466 00e2 03       		.uleb128 0x3
 5467 00e3 0E       		.uleb128 0xe
 5468 00e4 3A       		.uleb128 0x3a
 5469 00e5 0B       		.uleb128 0xb
 5470 00e6 3B       		.uleb128 0x3b
 5471 00e7 05       		.uleb128 0x5
 5472 00e8 27       		.uleb128 0x27
 5473 00e9 19       		.uleb128 0x19
 5474 00ea 49       		.uleb128 0x49
 5475 00eb 13       		.uleb128 0x13
 5476 00ec 11       		.uleb128 0x11
 5477 00ed 01       		.uleb128 0x1
 5478 00ee 12       		.uleb128 0x12
 5479 00ef 06       		.uleb128 0x6
 5480 00f0 40       		.uleb128 0x40
 5481 00f1 18       		.uleb128 0x18
 5482 00f2 9742     		.uleb128 0x2117
 5483 00f4 19       		.uleb128 0x19
 5484 00f5 01       		.uleb128 0x1
 5485 00f6 13       		.uleb128 0x13
 5486 00f7 00       		.byte	0
 5487 00f8 00       		.byte	0
 5488 00f9 10       		.uleb128 0x10
 5489 00fa 05       		.uleb128 0x5
 5490 00fb 00       		.byte	0
 5491 00fc 03       		.uleb128 0x3
 5492 00fd 0E       		.uleb128 0xe
 5493 00fe 3A       		.uleb128 0x3a
 5494 00ff 0B       		.uleb128 0xb
 5495 0100 3B       		.uleb128 0x3b
 5496 0101 05       		.uleb128 0x5
 5497 0102 49       		.uleb128 0x49
 5498 0103 13       		.uleb128 0x13
 5499 0104 02       		.uleb128 0x2
 5500 0105 18       		.uleb128 0x18
 5501 0106 00       		.byte	0
 5502 0107 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 121


 5503 0108 11       		.uleb128 0x11
 5504 0109 34       		.uleb128 0x34
 5505 010a 00       		.byte	0
 5506 010b 03       		.uleb128 0x3
 5507 010c 0E       		.uleb128 0xe
 5508 010d 3A       		.uleb128 0x3a
 5509 010e 0B       		.uleb128 0xb
 5510 010f 3B       		.uleb128 0x3b
 5511 0110 05       		.uleb128 0x5
 5512 0111 49       		.uleb128 0x49
 5513 0112 13       		.uleb128 0x13
 5514 0113 02       		.uleb128 0x2
 5515 0114 18       		.uleb128 0x18
 5516 0115 00       		.byte	0
 5517 0116 00       		.byte	0
 5518 0117 12       		.uleb128 0x12
 5519 0118 2E       		.uleb128 0x2e
 5520 0119 01       		.byte	0x1
 5521 011a 3F       		.uleb128 0x3f
 5522 011b 19       		.uleb128 0x19
 5523 011c 03       		.uleb128 0x3
 5524 011d 0E       		.uleb128 0xe
 5525 011e 3A       		.uleb128 0x3a
 5526 011f 0B       		.uleb128 0xb
 5527 0120 3B       		.uleb128 0x3b
 5528 0121 05       		.uleb128 0x5
 5529 0122 27       		.uleb128 0x27
 5530 0123 19       		.uleb128 0x19
 5531 0124 49       		.uleb128 0x49
 5532 0125 13       		.uleb128 0x13
 5533 0126 11       		.uleb128 0x11
 5534 0127 01       		.uleb128 0x1
 5535 0128 12       		.uleb128 0x12
 5536 0129 06       		.uleb128 0x6
 5537 012a 40       		.uleb128 0x40
 5538 012b 18       		.uleb128 0x18
 5539 012c 9642     		.uleb128 0x2116
 5540 012e 19       		.uleb128 0x19
 5541 012f 01       		.uleb128 0x1
 5542 0130 13       		.uleb128 0x13
 5543 0131 00       		.byte	0
 5544 0132 00       		.byte	0
 5545 0133 13       		.uleb128 0x13
 5546 0134 2E       		.uleb128 0x2e
 5547 0135 00       		.byte	0
 5548 0136 3F       		.uleb128 0x3f
 5549 0137 19       		.uleb128 0x19
 5550 0138 03       		.uleb128 0x3
 5551 0139 0E       		.uleb128 0xe
 5552 013a 3A       		.uleb128 0x3a
 5553 013b 0B       		.uleb128 0xb
 5554 013c 3B       		.uleb128 0x3b
 5555 013d 05       		.uleb128 0x5
 5556 013e 11       		.uleb128 0x11
 5557 013f 01       		.uleb128 0x1
 5558 0140 12       		.uleb128 0x12
 5559 0141 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 122


 5560 0142 40       		.uleb128 0x40
 5561 0143 18       		.uleb128 0x18
 5562 0144 9742     		.uleb128 0x2117
 5563 0146 19       		.uleb128 0x19
 5564 0147 00       		.byte	0
 5565 0148 00       		.byte	0
 5566 0149 14       		.uleb128 0x14
 5567 014a 2E       		.uleb128 0x2e
 5568 014b 00       		.byte	0
 5569 014c 3F       		.uleb128 0x3f
 5570 014d 19       		.uleb128 0x19
 5571 014e 03       		.uleb128 0x3
 5572 014f 0E       		.uleb128 0xe
 5573 0150 3A       		.uleb128 0x3a
 5574 0151 0B       		.uleb128 0xb
 5575 0152 3B       		.uleb128 0x3b
 5576 0153 05       		.uleb128 0x5
 5577 0154 11       		.uleb128 0x11
 5578 0155 01       		.uleb128 0x1
 5579 0156 12       		.uleb128 0x12
 5580 0157 06       		.uleb128 0x6
 5581 0158 40       		.uleb128 0x40
 5582 0159 18       		.uleb128 0x18
 5583 015a 9642     		.uleb128 0x2116
 5584 015c 19       		.uleb128 0x19
 5585 015d 00       		.byte	0
 5586 015e 00       		.byte	0
 5587 015f 15       		.uleb128 0x15
 5588 0160 2E       		.uleb128 0x2e
 5589 0161 01       		.byte	0x1
 5590 0162 3F       		.uleb128 0x3f
 5591 0163 19       		.uleb128 0x19
 5592 0164 03       		.uleb128 0x3
 5593 0165 0E       		.uleb128 0xe
 5594 0166 3A       		.uleb128 0x3a
 5595 0167 0B       		.uleb128 0xb
 5596 0168 3B       		.uleb128 0x3b
 5597 0169 05       		.uleb128 0x5
 5598 016a 27       		.uleb128 0x27
 5599 016b 19       		.uleb128 0x19
 5600 016c 11       		.uleb128 0x11
 5601 016d 01       		.uleb128 0x1
 5602 016e 12       		.uleb128 0x12
 5603 016f 06       		.uleb128 0x6
 5604 0170 40       		.uleb128 0x40
 5605 0171 18       		.uleb128 0x18
 5606 0172 9642     		.uleb128 0x2116
 5607 0174 19       		.uleb128 0x19
 5608 0175 01       		.uleb128 0x1
 5609 0176 13       		.uleb128 0x13
 5610 0177 00       		.byte	0
 5611 0178 00       		.byte	0
 5612 0179 16       		.uleb128 0x16
 5613 017a 01       		.uleb128 0x1
 5614 017b 01       		.byte	0x1
 5615 017c 49       		.uleb128 0x49
 5616 017d 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 123


 5617 017e 01       		.uleb128 0x1
 5618 017f 13       		.uleb128 0x13
 5619 0180 00       		.byte	0
 5620 0181 00       		.byte	0
 5621 0182 17       		.uleb128 0x17
 5622 0183 21       		.uleb128 0x21
 5623 0184 00       		.byte	0
 5624 0185 49       		.uleb128 0x49
 5625 0186 13       		.uleb128 0x13
 5626 0187 2F       		.uleb128 0x2f
 5627 0188 0B       		.uleb128 0xb
 5628 0189 00       		.byte	0
 5629 018a 00       		.byte	0
 5630 018b 18       		.uleb128 0x18
 5631 018c 34       		.uleb128 0x34
 5632 018d 00       		.byte	0
 5633 018e 03       		.uleb128 0x3
 5634 018f 08       		.uleb128 0x8
 5635 0190 3A       		.uleb128 0x3a
 5636 0191 0B       		.uleb128 0xb
 5637 0192 3B       		.uleb128 0x3b
 5638 0193 05       		.uleb128 0x5
 5639 0194 49       		.uleb128 0x49
 5640 0195 13       		.uleb128 0x13
 5641 0196 02       		.uleb128 0x2
 5642 0197 18       		.uleb128 0x18
 5643 0198 00       		.byte	0
 5644 0199 00       		.byte	0
 5645 019a 19       		.uleb128 0x19
 5646 019b 2E       		.uleb128 0x2e
 5647 019c 01       		.byte	0x1
 5648 019d 3F       		.uleb128 0x3f
 5649 019e 19       		.uleb128 0x19
 5650 019f 03       		.uleb128 0x3
 5651 01a0 0E       		.uleb128 0xe
 5652 01a1 3A       		.uleb128 0x3a
 5653 01a2 0B       		.uleb128 0xb
 5654 01a3 3B       		.uleb128 0x3b
 5655 01a4 05       		.uleb128 0x5
 5656 01a5 11       		.uleb128 0x11
 5657 01a6 01       		.uleb128 0x1
 5658 01a7 12       		.uleb128 0x12
 5659 01a8 06       		.uleb128 0x6
 5660 01a9 40       		.uleb128 0x40
 5661 01aa 18       		.uleb128 0x18
 5662 01ab 9642     		.uleb128 0x2116
 5663 01ad 19       		.uleb128 0x19
 5664 01ae 01       		.uleb128 0x1
 5665 01af 13       		.uleb128 0x13
 5666 01b0 00       		.byte	0
 5667 01b1 00       		.byte	0
 5668 01b2 1A       		.uleb128 0x1a
 5669 01b3 0B       		.uleb128 0xb
 5670 01b4 01       		.byte	0x1
 5671 01b5 11       		.uleb128 0x11
 5672 01b6 01       		.uleb128 0x1
 5673 01b7 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 124


 5674 01b8 06       		.uleb128 0x6
 5675 01b9 00       		.byte	0
 5676 01ba 00       		.byte	0
 5677 01bb 1B       		.uleb128 0x1b
 5678 01bc 2E       		.uleb128 0x2e
 5679 01bd 01       		.byte	0x1
 5680 01be 3F       		.uleb128 0x3f
 5681 01bf 19       		.uleb128 0x19
 5682 01c0 03       		.uleb128 0x3
 5683 01c1 0E       		.uleb128 0xe
 5684 01c2 3A       		.uleb128 0x3a
 5685 01c3 0B       		.uleb128 0xb
 5686 01c4 3B       		.uleb128 0x3b
 5687 01c5 05       		.uleb128 0x5
 5688 01c6 49       		.uleb128 0x49
 5689 01c7 13       		.uleb128 0x13
 5690 01c8 11       		.uleb128 0x11
 5691 01c9 01       		.uleb128 0x1
 5692 01ca 12       		.uleb128 0x12
 5693 01cb 06       		.uleb128 0x6
 5694 01cc 40       		.uleb128 0x40
 5695 01cd 18       		.uleb128 0x18
 5696 01ce 9642     		.uleb128 0x2116
 5697 01d0 19       		.uleb128 0x19
 5698 01d1 01       		.uleb128 0x1
 5699 01d2 13       		.uleb128 0x13
 5700 01d3 00       		.byte	0
 5701 01d4 00       		.byte	0
 5702 01d5 1C       		.uleb128 0x1c
 5703 01d6 34       		.uleb128 0x34
 5704 01d7 00       		.byte	0
 5705 01d8 03       		.uleb128 0x3
 5706 01d9 0E       		.uleb128 0xe
 5707 01da 3A       		.uleb128 0x3a
 5708 01db 0B       		.uleb128 0xb
 5709 01dc 3B       		.uleb128 0x3b
 5710 01dd 0B       		.uleb128 0xb
 5711 01de 49       		.uleb128 0x49
 5712 01df 13       		.uleb128 0x13
 5713 01e0 3F       		.uleb128 0x3f
 5714 01e1 19       		.uleb128 0x19
 5715 01e2 02       		.uleb128 0x2
 5716 01e3 18       		.uleb128 0x18
 5717 01e4 00       		.byte	0
 5718 01e5 00       		.byte	0
 5719 01e6 1D       		.uleb128 0x1d
 5720 01e7 34       		.uleb128 0x34
 5721 01e8 00       		.byte	0
 5722 01e9 03       		.uleb128 0x3
 5723 01ea 0E       		.uleb128 0xe
 5724 01eb 3A       		.uleb128 0x3a
 5725 01ec 0B       		.uleb128 0xb
 5726 01ed 3B       		.uleb128 0x3b
 5727 01ee 05       		.uleb128 0x5
 5728 01ef 49       		.uleb128 0x49
 5729 01f0 13       		.uleb128 0x13
 5730 01f1 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 125


 5731 01f2 19       		.uleb128 0x19
 5732 01f3 02       		.uleb128 0x2
 5733 01f4 18       		.uleb128 0x18
 5734 01f5 00       		.byte	0
 5735 01f6 00       		.byte	0
 5736 01f7 00       		.byte	0
 5737              		.section	.debug_aranges,"",%progbits
 5738 0000 C4000000 		.4byte	0xc4
 5739 0004 0200     		.2byte	0x2
 5740 0006 00000000 		.4byte	.Ldebug_info0
 5741 000a 04       		.byte	0x4
 5742 000b 00       		.byte	0
 5743 000c 0000     		.2byte	0
 5744 000e 0000     		.2byte	0
 5745 0010 00000000 		.4byte	.LFB34
 5746 0014 28000000 		.4byte	.LFE34-.LFB34
 5747 0018 00000000 		.4byte	.LFB35
 5748 001c 28010000 		.4byte	.LFE35-.LFB35
 5749 0020 00000000 		.4byte	.LFB36
 5750 0024 28010000 		.4byte	.LFE36-.LFB36
 5751 0028 00000000 		.4byte	.LFB37
 5752 002c 78000000 		.4byte	.LFE37-.LFB37
 5753 0030 00000000 		.4byte	.LFB38
 5754 0034 3E000000 		.4byte	.LFE38-.LFB38
 5755 0038 00000000 		.4byte	.LFB39
 5756 003c 0C010000 		.4byte	.LFE39-.LFB39
 5757 0040 00000000 		.4byte	.LFB40
 5758 0044 0C020000 		.4byte	.LFE40-.LFB40
 5759 0048 00000000 		.4byte	.LFB41
 5760 004c 84000000 		.4byte	.LFE41-.LFB41
 5761 0050 00000000 		.4byte	.LFB42
 5762 0054 28000000 		.4byte	.LFE42-.LFB42
 5763 0058 00000000 		.4byte	.LFB43
 5764 005c 08000000 		.4byte	.LFE43-.LFB43
 5765 0060 00000000 		.4byte	.LFB44
 5766 0064 18000000 		.4byte	.LFE44-.LFB44
 5767 0068 00000000 		.4byte	.LFB45
 5768 006c 98000000 		.4byte	.LFE45-.LFB45
 5769 0070 00000000 		.4byte	.LFB46
 5770 0074 98000000 		.4byte	.LFE46-.LFB46
 5771 0078 00000000 		.4byte	.LFB47
 5772 007c 98000000 		.4byte	.LFE47-.LFB47
 5773 0080 00000000 		.4byte	.LFB48
 5774 0084 6C010000 		.4byte	.LFE48-.LFB48
 5775 0088 00000000 		.4byte	.LFB49
 5776 008c 6C010000 		.4byte	.LFE49-.LFB49
 5777 0090 00000000 		.4byte	.LFB50
 5778 0094 5C020000 		.4byte	.LFE50-.LFB50
 5779 0098 00000000 		.4byte	.LFB51
 5780 009c 5C020000 		.4byte	.LFE51-.LFB51
 5781 00a0 00000000 		.4byte	.LFB52
 5782 00a4 5C010000 		.4byte	.LFE52-.LFB52
 5783 00a8 00000000 		.4byte	.LFB53
 5784 00ac DC000000 		.4byte	.LFE53-.LFB53
 5785 00b0 00000000 		.4byte	.LFB54
 5786 00b4 3C010000 		.4byte	.LFE54-.LFB54
 5787 00b8 00000000 		.4byte	.LFB55
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 126


 5788 00bc 9C010000 		.4byte	.LFE55-.LFB55
 5789 00c0 00000000 		.4byte	0
 5790 00c4 00000000 		.4byte	0
 5791              		.section	.debug_ranges,"",%progbits
 5792              	.Ldebug_ranges0:
 5793 0000 00000000 		.4byte	.LFB34
 5794 0004 28000000 		.4byte	.LFE34
 5795 0008 00000000 		.4byte	.LFB35
 5796 000c 28010000 		.4byte	.LFE35
 5797 0010 00000000 		.4byte	.LFB36
 5798 0014 28010000 		.4byte	.LFE36
 5799 0018 00000000 		.4byte	.LFB37
 5800 001c 78000000 		.4byte	.LFE37
 5801 0020 00000000 		.4byte	.LFB38
 5802 0024 3E000000 		.4byte	.LFE38
 5803 0028 00000000 		.4byte	.LFB39
 5804 002c 0C010000 		.4byte	.LFE39
 5805 0030 00000000 		.4byte	.LFB40
 5806 0034 0C020000 		.4byte	.LFE40
 5807 0038 00000000 		.4byte	.LFB41
 5808 003c 84000000 		.4byte	.LFE41
 5809 0040 00000000 		.4byte	.LFB42
 5810 0044 28000000 		.4byte	.LFE42
 5811 0048 00000000 		.4byte	.LFB43
 5812 004c 08000000 		.4byte	.LFE43
 5813 0050 00000000 		.4byte	.LFB44
 5814 0054 18000000 		.4byte	.LFE44
 5815 0058 00000000 		.4byte	.LFB45
 5816 005c 98000000 		.4byte	.LFE45
 5817 0060 00000000 		.4byte	.LFB46
 5818 0064 98000000 		.4byte	.LFE46
 5819 0068 00000000 		.4byte	.LFB47
 5820 006c 98000000 		.4byte	.LFE47
 5821 0070 00000000 		.4byte	.LFB48
 5822 0074 6C010000 		.4byte	.LFE48
 5823 0078 00000000 		.4byte	.LFB49
 5824 007c 6C010000 		.4byte	.LFE49
 5825 0080 00000000 		.4byte	.LFB50
 5826 0084 5C020000 		.4byte	.LFE50
 5827 0088 00000000 		.4byte	.LFB51
 5828 008c 5C020000 		.4byte	.LFE51
 5829 0090 00000000 		.4byte	.LFB52
 5830 0094 5C010000 		.4byte	.LFE52
 5831 0098 00000000 		.4byte	.LFB53
 5832 009c DC000000 		.4byte	.LFE53
 5833 00a0 00000000 		.4byte	.LFB54
 5834 00a4 3C010000 		.4byte	.LFE54
 5835 00a8 00000000 		.4byte	.LFB55
 5836 00ac 9C010000 		.4byte	.LFE55
 5837 00b0 00000000 		.4byte	0
 5838 00b4 00000000 		.4byte	0
 5839              		.section	.debug_line,"",%progbits
 5840              	.Ldebug_line0:
 5841 0000 F4040000 		.section	.debug_str,"MS",%progbits,1
 5841      02005100 
 5841      00000201 
 5841      FB0E0D00 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 127


 5841      01010101 
 5842              	.LASF103:
 5843 0000 62617365 		.ascii	"baseAzimuth\000"
 5843      417A696D 
 5843      75746800 
 5844              	.LASF19:
 5845 000c 74696C74 		.ascii	"tilt_init\000"
 5845      5F696E69 
 5845      7400
 5846              	.LASF58:
 5847 0016 6E756D5F 		.ascii	"num_items\000"
 5847      6974656D 
 5847      7300
 5848              	.LASF125:
 5849 0020 74657374 		.ascii	"test_array\000"
 5849      5F617272 
 5849      617900
 5850              	.LASF109:
 5851 002b 42415F63 		.ascii	"BA_cspot\000"
 5851      73706F74 
 5851      00
 5852              	.LASF135:
 5853 0034 656C6277 		.ascii	"elbw_errors\000"
 5853      5F657272 
 5853      6F727300 
 5854              	.LASF115:
 5855 0040 57545F63 		.ascii	"WT_cspot\000"
 5855      73706F74 
 5855      00
 5856              	.LASF95:
 5857 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 5857      72725F63 
 5857      73706F74 
 5857      00
 5858              	.LASF41:
 5859 0056 42415F65 		.ascii	"BA_execute\000"
 5859      78656375 
 5859      746500
 5860              	.LASF28:
 5861 0061 656C626F 		.ascii	"elbow_states\000"
 5861      775F7374 
 5861      61746573 
 5861      00
 5862              	.LASF93:
 5863 006e 57545F61 		.ascii	"WT_array\000"
 5863      72726179 
 5863      00
 5864              	.LASF106:
 5865 0077 65666665 		.ascii	"effector\000"
 5865      63746F72 
 5865      00
 5866              	.LASF8:
 5867 0080 756E7369 		.ascii	"unsigned int\000"
 5867      676E6564 
 5867      20696E74 
 5867      00
 5868              	.LASF38:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 128


 5869 008d 62617365 		.ascii	"baseAzimuth_states\000"
 5869      417A696D 
 5869      7574685F 
 5869      73746174 
 5869      657300
 5870              	.LASF13:
 5871 00a0 696E7431 		.ascii	"int16\000"
 5871      3600
 5872              	.LASF54:
 5873 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 5873      62726174 
 5873      696F6E45 
 5873      6C626F77 
 5873      00
 5874              	.LASF132:
 5875 00b7 64726F70 		.ascii	"dropped_packets\000"
 5875      7065645F 
 5875      7061636B 
 5875      65747300 
 5876              	.LASF39:
 5877 00c7 42415F73 		.ascii	"BA_start\000"
 5877      74617274 
 5877      00
 5878              	.LASF102:
 5879 00d0 73686F75 		.ascii	"shoulder_array\000"
 5879      6C646572 
 5879      5F617272 
 5879      617900
 5880              	.LASF59:
 5881 00df 6D61696E 		.ascii	"maintain_array\000"
 5881      7461696E 
 5881      5F617272 
 5881      617900
 5882              	.LASF144:
 5883 00ee 73686F75 		.ascii	"shoulder_state\000"
 5883      6C646572 
 5883      5F737461 
 5883      746500
 5884              	.LASF149:
 5885 00fd 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 5885      73657273 
 5885      5C53616D 
 5885      75656C5C 
 5885      446F6375 
 5886 012b 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 5886      5C61726D 
 5886      5F636F6E 
 5886      74726F6C 
 5886      6C65725F 
 5887 015b 00       		.ascii	"\000"
 5888              	.LASF24:
 5889 015c 726F7461 		.ascii	"rotate_start\000"
 5889      74655F73 
 5889      74617274 
 5889      00
 5890              	.LASF90:
 5891 0169 73706565 		.ascii	"speed\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 129


 5891      6400
 5892              	.LASF98:
 5893 016f 656C6277 		.ascii	"elbw_arr_cspot\000"
 5893      5F617272 
 5893      5F637370 
 5893      6F7400
 5894              	.LASF18:
 5895 017e 74696C74 		.ascii	"tilt_start\000"
 5895      5F737461 
 5895      727400
 5896              	.LASF65:
 5897 0189 73697A65 		.ascii	"size\000"
 5897      00
 5898              	.LASF133:
 5899 018e 6661696C 		.ascii	"fail_safe_errors\000"
 5899      5F736166 
 5899      655F6572 
 5899      726F7273 
 5899      00
 5900              	.LASF68:
 5901 019f 706F735F 		.ascii	"pos_to_vel\000"
 5901      746F5F76 
 5901      656C00
 5902              	.LASF143:
 5903 01aa 656C626F 		.ascii	"elbow_state\000"
 5903      775F7374 
 5903      61746500 
 5904              	.LASF14:
 5905 01b6 666C6F61 		.ascii	"float\000"
 5905      7400
 5906              	.LASF40:
 5907 01bc 42415F69 		.ascii	"BA_init\000"
 5907      6E697400 
 5908              	.LASF67:
 5909 01c4 696E6465 		.ascii	"index\000"
 5909      7800
 5910              	.LASF120:
 5911 01ca 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 5911      575F4C4F 
 5911      5745525F 
 5911      424F554E 
 5911      4400
 5912              	.LASF7:
 5913 01dc 6C6F6E67 		.ascii	"long long unsigned int\000"
 5913      206C6F6E 
 5913      6720756E 
 5913      7369676E 
 5913      65642069 
 5914              	.LASF84:
 5915 01f3 53657276 		.ascii	"ServoGoalPosition\000"
 5915      6F476F61 
 5915      6C506F73 
 5915      6974696F 
 5915      6E00
 5916              	.LASF140:
 5917 0205 74696D65 		.ascii	"timerFlag\000"
 5917      72466C61 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 130


 5917      6700
 5918              	.LASF100:
 5919 020f 73686F75 		.ascii	"shoulder\000"
 5919      6C646572 
 5919      00
 5920              	.LASF46:
 5921 0218 6566665F 		.ascii	"eff_execute\000"
 5921      65786563 
 5921      75746500 
 5922              	.LASF74:
 5923 0224 62797465 		.ascii	"byte1\000"
 5923      3100
 5924              	.LASF75:
 5925 022a 62797465 		.ascii	"byte2\000"
 5925      3200
 5926              	.LASF137:
 5927 0230 57545F65 		.ascii	"WT_errors\000"
 5927      72726F72 
 5927      7300
 5928              	.LASF139:
 5929 023a 6566665F 		.ascii	"eff_errors\000"
 5929      6572726F 
 5929      727300
 5930              	.LASF76:
 5931 0245 74656D70 		.ascii	"temp1\000"
 5931      3100
 5932              	.LASF77:
 5933 024b 74656D70 		.ascii	"temp2\000"
 5933      3200
 5934              	.LASF78:
 5935 0251 74656D70 		.ascii	"temp3\000"
 5935      3300
 5936              	.LASF107:
 5937 0257 696E6974 		.ascii	"initialize\000"
 5937      69616C69 
 5937      7A6500
 5938              	.LASF97:
 5939 0262 656C626F 		.ascii	"elbow\000"
 5939      7700
 5940              	.LASF44:
 5941 0268 6566665F 		.ascii	"eff_start\000"
 5941      73746172 
 5941      7400
 5942              	.LASF113:
 5943 0272 656C6277 		.ascii	"elbw_cspot\000"
 5943      5F637370 
 5943      6F7400
 5944              	.LASF136:
 5945 027d 42415F65 		.ascii	"BA_errors\000"
 5945      72726F72 
 5945      7300
 5946              	.LASF55:
 5947 0287 43616C69 		.ascii	"CalibrationShoulder\000"
 5947      62726174 
 5947      696F6E53 
 5947      686F756C 
 5947      64657200 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 131


 5948              	.LASF117:
 5949 029b 66735F63 		.ascii	"fs_count\000"
 5949      6F756E74 
 5949      00
 5950              	.LASF61:
 5951 02a4 53495A45 		.ascii	"SIZE\000"
 5951      00
 5952              	.LASF37:
 5953 02a9 73686C64 		.ascii	"shldr_wait\000"
 5953      725F7761 
 5953      697400
 5954              	.LASF123:
 5955 02b4 64617461 		.ascii	"data_array\000"
 5955      5F617272 
 5955      617900
 5956              	.LASF69:
 5957 02bf 6375725F 		.ascii	"cur_pos\000"
 5957      706F7300 
 5958              	.LASF127:
 5959 02c7 57525F46 		.ascii	"WR_FLAG\000"
 5959      4C414700 
 5960              	.LASF16:
 5961 02cf 63686172 		.ascii	"char\000"
 5961      00
 5962              	.LASF10:
 5963 02d4 75696E74 		.ascii	"uint16\000"
 5963      313600
 5964              	.LASF88:
 5965 02db 746F7271 		.ascii	"torque\000"
 5965      756500
 5966              	.LASF12:
 5967 02e2 696E7438 		.ascii	"int8\000"
 5967      00
 5968              	.LASF80:
 5969 02e7 66656564 		.ascii	"feedback\000"
 5969      6261636B 
 5969      00
 5970              	.LASF130:
 5971 02f0 42415F46 		.ascii	"BA_FLAG\000"
 5971      4C414700 
 5972              	.LASF49:
 5973 02f8 4359434C 		.ascii	"CYCLES\000"
 5973      455300
 5974              	.LASF64:
 5975 02ff 6172725F 		.ascii	"arr_pos\000"
 5975      706F7300 
 5976              	.LASF35:
 5977 0307 73686C64 		.ascii	"shldr_init\000"
 5977      725F696E 
 5977      697400
 5978              	.LASF6:
 5979 0312 6C6F6E67 		.ascii	"long long int\000"
 5979      206C6F6E 
 5979      6720696E 
 5979      7400
 5980              	.LASF33:
 5981 0320 73686F75 		.ascii	"shoulder_states\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 132


 5981      6C646572 
 5981      5F737461 
 5981      74657300 
 5982              	.LASF60:
 5983 0330 63706F73 		.ascii	"cpos\000"
 5983      00
 5984              	.LASF116:
 5985 0335 57525F63 		.ascii	"WR_cspot\000"
 5985      73706F74 
 5985      00
 5986              	.LASF114:
 5987 033e 656C6277 		.ascii	"elbw_array\000"
 5987      5F617272 
 5987      617900
 5988              	.LASF23:
 5989 0349 77726973 		.ascii	"wristRotate_states\000"
 5989      74526F74 
 5989      6174655F 
 5989      73746174 
 5989      657300
 5990              	.LASF131:
 5991 035c 45464645 		.ascii	"EFFECTOR_FLAG\000"
 5991      43544F52 
 5991      5F464C41 
 5991      4700
 5992              	.LASF121:
 5993 036a 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 5993      4C444552 
 5993      5F555050 
 5993      45525F42 
 5993      4F554E44 
 5994              	.LASF43:
 5995 037f 65666665 		.ascii	"effector_states\000"
 5995      63746F72 
 5995      5F737461 
 5995      74657300 
 5996              	.LASF146:
 5997 038f 65666665 		.ascii	"effector_state\000"
 5997      63746F72 
 5997      5F737461 
 5997      746500
 5998              	.LASF50:
 5999 039e 626F756E 		.ascii	"bound\000"
 5999      6400
 6000              	.LASF11:
 6001 03a4 75696E74 		.ascii	"uint32\000"
 6001      333200
 6002              	.LASF111:
 6003 03ab 73686C64 		.ascii	"shldr_cspot\000"
 6003      725F6373 
 6003      706F7400 
 6004              	.LASF126:
 6005 03b7 57545F46 		.ascii	"WT_FLAG\000"
 6005      4C414700 
 6006              	.LASF72:
 6007 03bf 6D616B65 		.ascii	"make_command\000"
 6007      5F636F6D 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 133


 6007      6D616E64 
 6007      00
 6008              	.LASF91:
 6009 03cc 77726973 		.ascii	"wristTilt\000"
 6009      7454696C 
 6009      7400
 6010              	.LASF129:
 6011 03d6 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6011      4C444552 
 6011      5F464C41 
 6011      4700
 6012              	.LASF29:
 6013 03e4 656C6277 		.ascii	"elbw_start\000"
 6013      5F737461 
 6013      727400
 6014              	.LASF141:
 6015 03ef 77726973 		.ascii	"wristTilt_state\000"
 6015      7454696C 
 6015      745F7374 
 6015      61746500 
 6016              	.LASF63:
 6017 03ff 61727261 		.ascii	"array\000"
 6017      7900
 6018              	.LASF101:
 6019 0405 73686C64 		.ascii	"shldr_arr_cspot\000"
 6019      725F6172 
 6019      725F6373 
 6019      706F7400 
 6020              	.LASF104:
 6021 0415 42415F61 		.ascii	"BA_arr_cspot\000"
 6021      72725F63 
 6021      73706F74 
 6021      00
 6022              	.LASF66:
 6023 0422 6368616E 		.ascii	"change\000"
 6023      676500
 6024              	.LASF52:
 6025 0429 6368616E 		.ascii	"channel\000"
 6025      6E656C00 
 6026              	.LASF79:
 6027 0431 706F7446 		.ascii	"potFeedback\000"
 6027      65656462 
 6027      61636B00 
 6028              	.LASF70:
 6029 043d 41525241 		.ascii	"ARRAY_SIZE\000"
 6029      595F5349 
 6029      5A4500
 6030              	.LASF92:
 6031 0448 57545F61 		.ascii	"WT_arr_cspot\000"
 6031      72725F63 
 6031      73706F74 
 6031      00
 6032              	.LASF26:
 6033 0455 726F7461 		.ascii	"rotate_control\000"
 6033      74655F63 
 6033      6F6E7472 
 6033      6F6C00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 134


 6034              	.LASF2:
 6035 0464 73686F72 		.ascii	"short int\000"
 6035      7420696E 
 6035      7400
 6036              	.LASF145:
 6037 046e 62617365 		.ascii	"baseAzimuth_state\000"
 6037      417A696D 
 6037      7574685F 
 6037      73746174 
 6037      6500
 6038              	.LASF57:
 6039 0480 61765F61 		.ascii	"av_array\000"
 6039      72726179 
 6039      00
 6040              	.LASF4:
 6041 0489 6C6F6E67 		.ascii	"long int\000"
 6041      20696E74 
 6041      00
 6042              	.LASF20:
 6043 0492 74696C74 		.ascii	"tilt_control\000"
 6043      5F636F6E 
 6043      74726F6C 
 6043      00
 6044              	.LASF83:
 6045 049f 74696D65 		.ascii	"timer_isr\000"
 6045      725F6973 
 6045      7200
 6046              	.LASF138:
 6047 04a9 57525F65 		.ascii	"WR_errors\000"
 6047      72726F72 
 6047      7300
 6048              	.LASF142:
 6049 04b3 77726973 		.ascii	"wristRotate_state\000"
 6049      74526F74 
 6049      6174655F 
 6049      73746174 
 6049      6500
 6050              	.LASF42:
 6051 04c5 42415F77 		.ascii	"BA_wait\000"
 6051      61697400 
 6052              	.LASF22:
 6053 04cd 77726973 		.ascii	"wristTilt_states\000"
 6053      7454696C 
 6053      745F7374 
 6053      61746573 
 6053      00
 6054              	.LASF124:
 6055 04de 77697A6E 		.ascii	"wiznet\000"
 6055      657400
 6056              	.LASF62:
 6057 04e5 63686563 		.ascii	"check_update\000"
 6057      6B5F7570 
 6057      64617465 
 6057      00
 6058              	.LASF89:
 6059 04f2 53657276 		.ascii	"ServoSpeed\000"
 6059      6F537065 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 135


 6059      656400
 6060              	.LASF47:
 6061 04fd 6566665F 		.ascii	"eff_wait\000"
 6061      77616974 
 6061      00
 6062              	.LASF56:
 6063 0506 76656C6F 		.ascii	"velocity\000"
 6063      63697479 
 6063      00
 6064              	.LASF81:
 6065 050f 73656E64 		.ascii	"send_feedback\000"
 6065      5F666565 
 6065      64626163 
 6065      6B00
 6066              	.LASF17:
 6067 051d 73697A65 		.ascii	"sizetype\000"
 6067      74797065 
 6067      00
 6068              	.LASF5:
 6069 0526 6C6F6E67 		.ascii	"long unsigned int\000"
 6069      20756E73 
 6069      69676E65 
 6069      6420696E 
 6069      7400
 6070              	.LASF31:
 6071 0538 656C6277 		.ascii	"elbw_execute\000"
 6071      5F657865 
 6071      63757465 
 6071      00
 6072              	.LASF105:
 6073 0545 62617365 		.ascii	"baseAz_array\000"
 6073      417A5F61 
 6073      72726179 
 6073      00
 6074              	.LASF27:
 6075 0552 726F7461 		.ascii	"rotate_wait\000"
 6075      74655F77 
 6075      61697400 
 6076              	.LASF122:
 6077 055e 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6077      4C444552 
 6077      5F4C4F57 
 6077      45525F42 
 6077      4F554E44 
 6078              	.LASF34:
 6079 0573 73686C64 		.ascii	"shldr_start\000"
 6079      725F7374 
 6079      61727400 
 6080              	.LASF73:
 6081 057f 696E666F 		.ascii	"info_array\000"
 6081      5F617272 
 6081      617900
 6082              	.LASF1:
 6083 058a 756E7369 		.ascii	"unsigned char\000"
 6083      676E6564 
 6083      20636861 
 6083      7200
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 136


 6084              	.LASF82:
 6085 0598 66696C6C 		.ascii	"fill_data_array\000"
 6085      5F646174 
 6085      615F6172 
 6085      72617900 
 6086              	.LASF94:
 6087 05a8 77726973 		.ascii	"wristRotate\000"
 6087      74526F74 
 6087      61746500 
 6088              	.LASF45:
 6089 05b4 6566665F 		.ascii	"eff_init\000"
 6089      696E6974 
 6089      00
 6090              	.LASF99:
 6091 05bd 656C626F 		.ascii	"elbow_array\000"
 6091      775F6172 
 6091      72617900 
 6092              	.LASF36:
 6093 05c9 73686C64 		.ascii	"shldr_execute\000"
 6093      725F6578 
 6093      65637574 
 6093      6500
 6094              	.LASF119:
 6095 05d7 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6095      575F5550 
 6095      5045525F 
 6095      424F554E 
 6095      4400
 6096              	.LASF25:
 6097 05e9 726F7461 		.ascii	"rotate_init\000"
 6097      74655F69 
 6097      6E697400 
 6098              	.LASF147:
 6099 05f5 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6099      4320342E 
 6099      382E3420 
 6099      32303134 
 6099      30353236 
 6100 0628 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6100      20726576 
 6100      6973696F 
 6100      6E203231 
 6100      31333538 
 6101 065b 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6101      74643D67 
 6101      6E753939 
 6101      202D6666 
 6101      756E6374 
 6102              	.LASF71:
 6103 067c 636F6D6D 		.ascii	"command\000"
 6103      616E6400 
 6104              	.LASF53:
 6105 0684 64696666 		.ascii	"difference\000"
 6105      6572656E 
 6105      636500
 6106              	.LASF118:
 6107 068f 74656D70 		.ascii	"temp_val\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 137


 6107      5F76616C 
 6107      00
 6108              	.LASF0:
 6109 0698 7369676E 		.ascii	"signed char\000"
 6109      65642063 
 6109      68617200 
 6110              	.LASF51:
 6111 06a4 61766572 		.ascii	"average\000"
 6111      61676500 
 6112              	.LASF3:
 6113 06ac 73686F72 		.ascii	"short unsigned int\000"
 6113      7420756E 
 6113      7369676E 
 6113      65642069 
 6113      6E7400
 6114              	.LASF32:
 6115 06bf 656C6277 		.ascii	"elbw_wait\000"
 6115      5F776169 
 6115      7400
 6116              	.LASF108:
 6117 06c9 6D61696E 		.ascii	"main\000"
 6117      00
 6118              	.LASF110:
 6119 06ce 42415F61 		.ascii	"BA_array\000"
 6119      72726179 
 6119      00
 6120              	.LASF21:
 6121 06d7 74696C74 		.ascii	"tilt_wait\000"
 6121      5F776169 
 6121      7400
 6122              	.LASF96:
 6123 06e1 57525F61 		.ascii	"WR_array\000"
 6123      72726179 
 6123      00
 6124              	.LASF9:
 6125 06ea 75696E74 		.ascii	"uint8\000"
 6125      3800
 6126              	.LASF15:
 6127 06f0 646F7562 		.ascii	"double\000"
 6127      6C6500
 6128              	.LASF128:
 6129 06f7 454C424F 		.ascii	"ELBOW_FLAG\000"
 6129      575F464C 
 6129      414700
 6130              	.LASF85:
 6131 0702 73657276 		.ascii	"servoID\000"
 6131      6F494400 
 6132              	.LASF48:
 6133 070a 6973725F 		.ascii	"isr_var\000"
 6133      76617200 
 6134              	.LASF134:
 6135 0712 73686C64 		.ascii	"shldr_errors\000"
 6135      725F6572 
 6135      726F7273 
 6135      00
 6136              	.LASF87:
 6137 071f 53657453 		.ascii	"SetServoTorque\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cctBj3NU.s 			page 138


 6137      6572766F 
 6137      546F7271 
 6137      756500
 6138              	.LASF112:
 6139 072e 73686C64 		.ascii	"shldr_array\000"
 6139      725F6172 
 6139      72617900 
 6140              	.LASF86:
 6141 073a 706F7369 		.ascii	"position\000"
 6141      74696F6E 
 6141      00
 6142              	.LASF148:
 6143 0743 2E5C6D61 		.ascii	".\\main.c\000"
 6143      696E2E63 
 6143      00
 6144              	.LASF30:
 6145 074c 656C6277 		.ascii	"elbw_init\000"
 6145      5F696E69 
 6145      7400
 6146              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,14,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,14,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	WT_arr_cspot,1,1
  29              		.comm	WT_array,40,4
  30              		.comm	WR_arr_cspot,1,1
  31              		.comm	WR_array,40,4
  32              		.comm	timerFlag,1,1
  33              		.section	.text.timer_isr,"ax",%progbits
  34              		.align	2
  35              		.global	timer_isr
  36              		.code	16
  37              		.thumb_func
  38              		.type	timer_isr, %function
  39              	timer_isr:
  40              	.LFB34:
  41              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** #include <wiznet5500.h>
  10:.\main.c      **** #include <spi.h>
  11:.\main.c      **** 
  12:.\main.c      **** //Initializations of global variables
  13:.\main.c      **** #define ownIpAddr 4
  14:.\main.c      **** #define dstIpAddr 1
  15:.\main.c      **** #define udpPort 27015
  16:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 2


  17:.\main.c      **** // to do: We need to make sure the bounds checking doesn't break
  18:.\main.c      **** #define ELBOW_UPPER_BOUND 1000     //was 100  // 16 bit values from ADC
  19:.\main.c      **** #define ELBOW_LOWER_BOUND 100       //was 1000
  20:.\main.c      **** #define SHOULDER_UPPER_BOUND 800
  21:.\main.c      **** #define SHOULDER_LOWER_BOUND 280
  22:.\main.c      **** #define SHOULDER_POT 0
  23:.\main.c      **** #define ELBOW_POT 1
  24:.\main.c      **** 
  25:.\main.c      **** #define BA_BYTE_1 4
  26:.\main.c      **** #define BA_BYTE_2 5
  27:.\main.c      **** #define SHLDR_BYTE_1 6
  28:.\main.c      **** #define SHLDR_BYTE_2 7
  29:.\main.c      **** #define ELBW_BYTE_1 8
  30:.\main.c      **** #define ELBW_BYTE_2 9
  31:.\main.c      **** #define WT_BYTE_1 10
  32:.\main.c      **** #define WT_BYTE_2 11
  33:.\main.c      **** #define WR_BYTE_1 12
  34:.\main.c      **** #define WR_BYTE_2 13
  35:.\main.c      **** 
  36:.\main.c      **** #define DATA_ARRAY_SIZE 14
  37:.\main.c      **** int8 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  38:.\main.c      **** 
  39:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  40:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  41:.\main.c      **** 
  42:.\main.c      **** #define NUM_OF_SM 5
  43:.\main.c      **** uint8 fin_exec; //counts
  44:.\main.c      **** 
  45:.\main.c      **** #define TEST_ARRAY_SIZE 14
  46:.\main.c      **** int8 test_array[TEST_ARRAY_SIZE];
  47:.\main.c      **** 
  48:.\main.c      **** #define ELBW_ARR_SIZE 20
  49:.\main.c      **** uint8 elbw_arr_cspot;
  50:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  51:.\main.c      **** 
  52:.\main.c      **** #define SHLDR_ARR_SIZE 20
  53:.\main.c      **** uint8 shldr_arr_cspot;
  54:.\main.c      **** uint16 shoulder_array[SHLDR_ARR_SIZE];
  55:.\main.c      **** 
  56:.\main.c      **** #define BA_ARR_SIZE 20
  57:.\main.c      **** uint8 BA_arr_cspot;
  58:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  59:.\main.c      **** 
  60:.\main.c      **** #define WT_ARR_SIZE 20  //for wristTilt
  61:.\main.c      **** uint8 WT_arr_cspot;
  62:.\main.c      **** uint16 WT_array[WT_ARR_SIZE];
  63:.\main.c      **** 
  64:.\main.c      **** #define WR_ARR_SIZE 20  //for wristRotate
  65:.\main.c      **** uint8 WR_arr_cspot;
  66:.\main.c      **** uint16 WR_array[WR_ARR_SIZE];
  67:.\main.c      **** 
  68:.\main.c      **** //uint16 feedback_count;
  69:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  70:.\main.c      **** 
  71:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  72:.\main.c      **** ///set to the time of the longest path for our code
  73:.\main.c      **** //TODO test how long it takes code to run before really implementing this
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 3


  74:.\main.c      **** CY_ISR(timer_isr)
  75:.\main.c      **** {
  42              		.loc 1 75 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 82B0     		sub	sp, sp, #8
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  76:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  52              		.loc 1 76 0
  53 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  54 000a 031C     		mov	r3, r0
  55 000c 7B60     		str	r3, [r7, #4]
  77:.\main.c      ****     timerFlag = 1;
  56              		.loc 1 77 0
  57 000e 054B     		ldr	r3, .L2
  58 0010 0122     		mov	r2, #1
  59 0012 1A70     		strb	r2, [r3]
  78:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  60              		.loc 1 78 0
  61 0014 7B68     		ldr	r3, [r7, #4]
  62 0016 181C     		mov	r0, r3
  63 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  79:.\main.c      **** }
  64              		.loc 1 79 0
  65 001c BD46     		mov	sp, r7
  66 001e 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              	.L3:
  70 0022 C046     		.align	2
  71              	.L2:
  72 0024 00000000 		.word	timerFlag
  73              		.cfi_endproc
  74              	.LFE34:
  75              		.size	timer_isr, .-timer_isr
  76              		.section	.text.reverse,"ax",%progbits
  77              		.align	2
  78              		.global	reverse
  79              		.code	16
  80              		.thumb_func
  81              		.type	reverse, %function
  82              	reverse:
  83              	.LFB35:
  80:.\main.c      **** 
  81:.\main.c      **** 
  82:.\main.c      **** //Funtion declarations/definitions
  83:.\main.c      **** //TODO do we need to make a header for good practice?
  84:.\main.c      **** 
  85:.\main.c      **** //---------------------------------------------------
  86:.\main.c      **** //    Function stubs for the header
  87:.\main.c      **** //---------------------------------------------------
  88:.\main.c      **** void fill_data_array();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 4


  89:.\main.c      **** void baseAzimuth();
  90:.\main.c      **** void shoulder();
  91:.\main.c      **** void elbow();
  92:.\main.c      **** void wristTilt();
  93:.\main.c      **** void wristRotate();
  94:.\main.c      **** void send_feedback();
  95:.\main.c      **** uint16 potFeedback();
  96:.\main.c      **** uint16 average(uint16* array, uint8 num_items);
  97:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position);
  98:.\main.c      **** void make_command(uint16* act_array, uint8 act_cspot, int8* info_array, uint8 byte1, uint8 byte2);
  99:.\main.c      **** 
 100:.\main.c      **** //--------------------------------------------------- END Function Stubs
 101:.\main.c      **** 
 102:.\main.c      **** // function to convert int to string
 103:.\main.c      **** void reverse(char s[])
 104:.\main.c      ****  {
  84              		.loc 1 104 0
  85              		.cfi_startproc
  86 0000 80B5     		push	{r7, lr}
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 86B0     		sub	sp, sp, #24
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  94 0006 7860     		str	r0, [r7, #4]
 105:.\main.c      ****      int i, j;
 106:.\main.c      ****      char c;
 107:.\main.c      ****  
 108:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  95              		.loc 1 108 0
  96 0008 0023     		mov	r3, #0
  97 000a 7B61     		str	r3, [r7, #20]
  98 000c 7B68     		ldr	r3, [r7, #4]
  99 000e 181C     		mov	r0, r3
 100 0010 FFF7FEFF 		bl	strlen
 101 0014 031C     		mov	r3, r0
 102 0016 013B     		sub	r3, r3, #1
 103 0018 3B61     		str	r3, [r7, #16]
 104 001a 1BE0     		b	.L5
 105              	.L6:
 109:.\main.c      ****          c = s[i];
 106              		.loc 1 109 0 discriminator 2
 107 001c 7B69     		ldr	r3, [r7, #20]
 108 001e 7A68     		ldr	r2, [r7, #4]
 109 0020 D218     		add	r2, r2, r3
 110 0022 3B1C     		mov	r3, r7
 111 0024 0F33     		add	r3, r3, #15
 112 0026 1278     		ldrb	r2, [r2]
 113 0028 1A70     		strb	r2, [r3]
 110:.\main.c      ****          s[i] = s[j];
 114              		.loc 1 110 0 discriminator 2
 115 002a 7B69     		ldr	r3, [r7, #20]
 116 002c 7A68     		ldr	r2, [r7, #4]
 117 002e D318     		add	r3, r2, r3
 118 0030 3A69     		ldr	r2, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 5


 119 0032 7968     		ldr	r1, [r7, #4]
 120 0034 8A18     		add	r2, r1, r2
 121 0036 1278     		ldrb	r2, [r2]
 122 0038 1A70     		strb	r2, [r3]
 111:.\main.c      ****          s[j] = c;
 123              		.loc 1 111 0 discriminator 2
 124 003a 3B69     		ldr	r3, [r7, #16]
 125 003c 7A68     		ldr	r2, [r7, #4]
 126 003e D318     		add	r3, r2, r3
 127 0040 3A1C     		mov	r2, r7
 128 0042 0F32     		add	r2, r2, #15
 129 0044 1278     		ldrb	r2, [r2]
 130 0046 1A70     		strb	r2, [r3]
 108:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 131              		.loc 1 108 0 discriminator 2
 132 0048 7B69     		ldr	r3, [r7, #20]
 133 004a 0133     		add	r3, r3, #1
 134 004c 7B61     		str	r3, [r7, #20]
 135 004e 3B69     		ldr	r3, [r7, #16]
 136 0050 013B     		sub	r3, r3, #1
 137 0052 3B61     		str	r3, [r7, #16]
 138              	.L5:
 108:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 139              		.loc 1 108 0 is_stmt 0 discriminator 1
 140 0054 7A69     		ldr	r2, [r7, #20]
 141 0056 3B69     		ldr	r3, [r7, #16]
 142 0058 9A42     		cmp	r2, r3
 143 005a DFDB     		blt	.L6
 112:.\main.c      ****      }
 113:.\main.c      ****  }
 144              		.loc 1 113 0 is_stmt 1
 145 005c BD46     		mov	sp, r7
 146 005e 06B0     		add	sp, sp, #24
 147              		@ sp needed
 148 0060 80BD     		pop	{r7, pc}
 149              		.cfi_endproc
 150              	.LFE35:
 151              		.size	reverse, .-reverse
 152              		.global	__aeabi_idivmod
 153              		.global	__aeabi_idiv
 154              		.section	.text.itoa,"ax",%progbits
 155              		.align	2
 156              		.global	itoa
 157              		.code	16
 158              		.thumb_func
 159              		.type	itoa, %function
 160              	itoa:
 161              	.LFB36:
 114:.\main.c      **** /* itoa:  convert n to characters in s */
 115:.\main.c      ****  void itoa(int n, char s[])
 116:.\main.c      ****  {
 162              		.loc 1 116 0
 163              		.cfi_startproc
 164 0000 90B5     		push	{r4, r7, lr}
 165              		.cfi_def_cfa_offset 12
 166              		.cfi_offset 4, -12
 167              		.cfi_offset 7, -8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 6


 168              		.cfi_offset 14, -4
 169 0002 85B0     		sub	sp, sp, #20
 170              		.cfi_def_cfa_offset 32
 171 0004 00AF     		add	r7, sp, #0
 172              		.cfi_def_cfa_register 7
 173 0006 7860     		str	r0, [r7, #4]
 174 0008 3960     		str	r1, [r7]
 117:.\main.c      ****      int i, sign;
 118:.\main.c      ****  
 119:.\main.c      ****      if ((sign = n) < 0)  /* record sign */
 175              		.loc 1 119 0
 176 000a 7B68     		ldr	r3, [r7, #4]
 177 000c BB60     		str	r3, [r7, #8]
 178 000e BB68     		ldr	r3, [r7, #8]
 179 0010 002B     		cmp	r3, #0
 180 0012 02DA     		bge	.L8
 120:.\main.c      ****          n = -n;          /* make n positive */
 181              		.loc 1 120 0
 182 0014 7B68     		ldr	r3, [r7, #4]
 183 0016 5B42     		neg	r3, r3
 184 0018 7B60     		str	r3, [r7, #4]
 185              	.L8:
 121:.\main.c      ****      i = 0;
 186              		.loc 1 121 0
 187 001a 0023     		mov	r3, #0
 188 001c FB60     		str	r3, [r7, #12]
 189              	.L9:
 122:.\main.c      ****      do {       /* generate digits in reverse order */
 123:.\main.c      ****          s[i++] = n % 10 + '0';   /* get next digit */
 190              		.loc 1 123 0 discriminator 1
 191 001e FB68     		ldr	r3, [r7, #12]
 192 0020 5A1C     		add	r2, r3, #1
 193 0022 FA60     		str	r2, [r7, #12]
 194 0024 3A68     		ldr	r2, [r7]
 195 0026 D418     		add	r4, r2, r3
 196 0028 7B68     		ldr	r3, [r7, #4]
 197 002a 181C     		mov	r0, r3
 198 002c 0A21     		mov	r1, #10
 199 002e FFF7FEFF 		bl	__aeabi_idivmod
 200 0032 0B1C     		mov	r3, r1
 201 0034 DBB2     		uxtb	r3, r3
 202 0036 3033     		add	r3, r3, #48
 203 0038 DBB2     		uxtb	r3, r3
 204 003a 2370     		strb	r3, [r4]
 124:.\main.c      ****      } while ((n /= 10) > 0);     /* delete it */
 205              		.loc 1 124 0 discriminator 1
 206 003c 7B68     		ldr	r3, [r7, #4]
 207 003e 181C     		mov	r0, r3
 208 0040 0A21     		mov	r1, #10
 209 0042 FFF7FEFF 		bl	__aeabi_idiv
 210 0046 031C     		mov	r3, r0
 211 0048 7B60     		str	r3, [r7, #4]
 212 004a 7B68     		ldr	r3, [r7, #4]
 213 004c 002B     		cmp	r3, #0
 214 004e E6DC     		bgt	.L9
 125:.\main.c      ****      if (sign < 0)
 215              		.loc 1 125 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 7


 216 0050 BB68     		ldr	r3, [r7, #8]
 217 0052 002B     		cmp	r3, #0
 218 0054 06DA     		bge	.L10
 126:.\main.c      ****          s[i++] = '-';
 219              		.loc 1 126 0
 220 0056 FB68     		ldr	r3, [r7, #12]
 221 0058 5A1C     		add	r2, r3, #1
 222 005a FA60     		str	r2, [r7, #12]
 223 005c 3A68     		ldr	r2, [r7]
 224 005e D318     		add	r3, r2, r3
 225 0060 2D22     		mov	r2, #45
 226 0062 1A70     		strb	r2, [r3]
 227              	.L10:
 127:.\main.c      ****      s[i] = '\0';
 228              		.loc 1 127 0
 229 0064 FB68     		ldr	r3, [r7, #12]
 230 0066 3A68     		ldr	r2, [r7]
 231 0068 D318     		add	r3, r2, r3
 232 006a 0022     		mov	r2, #0
 233 006c 1A70     		strb	r2, [r3]
 128:.\main.c      ****      reverse(s);
 234              		.loc 1 128 0
 235 006e 3B68     		ldr	r3, [r7]
 236 0070 181C     		mov	r0, r3
 237 0072 FFF7FEFF 		bl	reverse
 129:.\main.c      ****  }
 238              		.loc 1 129 0
 239 0076 BD46     		mov	sp, r7
 240 0078 05B0     		add	sp, sp, #20
 241              		@ sp needed
 242 007a 90BD     		pop	{r4, r7, pc}
 243              		.cfi_endproc
 244              	.LFE36:
 245              		.size	itoa, .-itoa
 246              		.global	__aeabi_uidiv
 247              		.section	.text.average,"ax",%progbits
 248              		.align	2
 249              		.global	average
 250              		.code	16
 251              		.thumb_func
 252              		.type	average, %function
 253              	average:
 254              	.LFB37:
 130:.\main.c      **** 
 131:.\main.c      **** //Average function to be used in smoothing our input
 132:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 133:.\main.c      **** {
 255              		.loc 1 133 0
 256              		.cfi_startproc
 257 0000 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 86B0     		sub	sp, sp, #24
 262              		.cfi_def_cfa_offset 32
 263 0004 00AF     		add	r7, sp, #0
 264              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 8


 265 0006 7860     		str	r0, [r7, #4]
 266 0008 0A1C     		mov	r2, r1
 267 000a FB1C     		add	r3, r7, #3
 268 000c 1A70     		strb	r2, [r3]
 134:.\main.c      ****     uint8 i;
 135:.\main.c      ****     uint32 sum = 0;
 269              		.loc 1 135 0
 270 000e 0023     		mov	r3, #0
 271 0010 3B61     		str	r3, [r7, #16]
 136:.\main.c      ****     uint16 avg = 0;
 272              		.loc 1 136 0
 273 0012 3B1C     		mov	r3, r7
 274 0014 0E33     		add	r3, r3, #14
 275 0016 0022     		mov	r2, #0
 276 0018 1A80     		strh	r2, [r3]
 137:.\main.c      ****     
 138:.\main.c      ****     for(i = 0; i < num_items; i++)
 277              		.loc 1 138 0
 278 001a 3B1C     		mov	r3, r7
 279 001c 1733     		add	r3, r3, #23
 280 001e 0022     		mov	r2, #0
 281 0020 1A70     		strb	r2, [r3]
 282 0022 10E0     		b	.L12
 283              	.L13:
 139:.\main.c      ****     {
 140:.\main.c      ****         sum += av_array[i];
 284              		.loc 1 140 0 discriminator 2
 285 0024 3B1C     		mov	r3, r7
 286 0026 1733     		add	r3, r3, #23
 287 0028 1B78     		ldrb	r3, [r3]
 288 002a 5B00     		lsl	r3, r3, #1
 289 002c 7A68     		ldr	r2, [r7, #4]
 290 002e D318     		add	r3, r2, r3
 291 0030 1B88     		ldrh	r3, [r3]
 292 0032 3A69     		ldr	r2, [r7, #16]
 293 0034 D318     		add	r3, r2, r3
 294 0036 3B61     		str	r3, [r7, #16]
 138:.\main.c      ****     for(i = 0; i < num_items; i++)
 295              		.loc 1 138 0 discriminator 2
 296 0038 3B1C     		mov	r3, r7
 297 003a 1733     		add	r3, r3, #23
 298 003c 1A78     		ldrb	r2, [r3]
 299 003e 3B1C     		mov	r3, r7
 300 0040 1733     		add	r3, r3, #23
 301 0042 0132     		add	r2, r2, #1
 302 0044 1A70     		strb	r2, [r3]
 303              	.L12:
 138:.\main.c      ****     for(i = 0; i < num_items; i++)
 304              		.loc 1 138 0 is_stmt 0 discriminator 1
 305 0046 3A1C     		mov	r2, r7
 306 0048 1732     		add	r2, r2, #23
 307 004a FB1C     		add	r3, r7, #3
 308 004c 1278     		ldrb	r2, [r2]
 309 004e 1B78     		ldrb	r3, [r3]
 310 0050 9A42     		cmp	r2, r3
 311 0052 E7D3     		bcc	.L13
 141:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 9


 142:.\main.c      ****     
 143:.\main.c      ****     avg = sum/num_items;
 312              		.loc 1 143 0 is_stmt 1
 313 0054 FB1C     		add	r3, r7, #3
 314 0056 1B78     		ldrb	r3, [r3]
 315 0058 3869     		ldr	r0, [r7, #16]
 316 005a 191C     		mov	r1, r3
 317 005c FFF7FEFF 		bl	__aeabi_uidiv
 318 0060 031C     		mov	r3, r0
 319 0062 1A1C     		mov	r2, r3
 320 0064 3B1C     		mov	r3, r7
 321 0066 0E33     		add	r3, r3, #14
 322 0068 1A80     		strh	r2, [r3]
 144:.\main.c      ****     
 145:.\main.c      ****     return avg;
 323              		.loc 1 145 0
 324 006a 3B1C     		mov	r3, r7
 325 006c 0E33     		add	r3, r3, #14
 326 006e 1B88     		ldrh	r3, [r3]
 146:.\main.c      **** }
 327              		.loc 1 146 0
 328 0070 181C     		mov	r0, r3
 329 0072 BD46     		mov	sp, r7
 330 0074 06B0     		add	sp, sp, #24
 331              		@ sp needed
 332 0076 80BD     		pop	{r7, pc}
 333              		.cfi_endproc
 334              	.LFE37:
 335              		.size	average, .-average
 336              		.section	.text.potFeedback,"ax",%progbits
 337              		.align	2
 338              		.global	potFeedback
 339              		.code	16
 340              		.thumb_func
 341              		.type	potFeedback, %function
 342              	potFeedback:
 343              	.LFB38:
 147:.\main.c      **** 
 148:.\main.c      **** /*
 149:.\main.c      **** void pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 150:.\main.c      **** {
 151:.\main.c      ****     if(command >= 1000 && command < 1100)
 152:.\main.c      ****     {
 153:.\main.c      ****         if(cur_pos != 0)
 154:.\main.c      ****         {
 155:.\main.c      ****             if(array[cur_pos - 1] >= 1020)
 156:.\main.c      ****             {
 157:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] - 20);
 158:.\main.c      ****             }
 159:.\main.c      ****             else
 160:.\main.c      ****             {
 161:.\main.c      ****                 array[cur_pos] = 1000;
 162:.\main.c      ****             }
 163:.\main.c      ****             
 164:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 165:.\main.c      ****             {
 166:.\main.c      ****                 cur_pos++;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 10


 167:.\main.c      ****             }
 168:.\main.c      ****             else
 169:.\main.c      ****             {
 170:.\main.c      ****                 cur_pos = 0;
 171:.\main.c      ****             }
 172:.\main.c      ****         }
 173:.\main.c      ****         else if(cur_pos == 0)
 174:.\main.c      ****         {
 175:.\main.c      ****             if(array[ARRAY_SIZE - 1] >= 1020)
 176:.\main.c      ****             {
 177:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] - 20);
 178:.\main.c      ****             }
 179:.\main.c      ****             else
 180:.\main.c      ****             {
 181:.\main.c      ****                 array[cur_pos] = 1000;
 182:.\main.c      ****             }
 183:.\main.c      ****             
 184:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 185:.\main.c      ****             {
 186:.\main.c      ****                 cur_pos++;
 187:.\main.c      ****             }
 188:.\main.c      ****             else
 189:.\main.c      ****             {
 190:.\main.c      ****                 cur_pos = 0;
 191:.\main.c      ****             }
 192:.\main.c      ****         }
 193:.\main.c      ****         else
 194:.\main.c      ****         {
 195:.\main.c      ****             cur_pos = 0;
 196:.\main.c      ****         }
 197:.\main.c      ****     }
 198:.\main.c      ****     else if(command >= 1100 && command < 1300)
 199:.\main.c      ****     {
 200:.\main.c      ****         if(cur_pos != 0)
 201:.\main.c      ****         {
 202:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 10);
 203:.\main.c      ****             
 204:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 205:.\main.c      ****             {
 206:.\main.c      ****                 cur_pos++;
 207:.\main.c      ****             }
 208:.\main.c      ****             else
 209:.\main.c      ****             {
 210:.\main.c      ****                 cur_pos = 0;
 211:.\main.c      ****             }
 212:.\main.c      ****         }
 213:.\main.c      ****         else if(cur_pos == 0)
 214:.\main.c      ****         {
 215:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 10);
 216:.\main.c      ****            
 217:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 218:.\main.c      ****             {
 219:.\main.c      ****                 cur_pos++;
 220:.\main.c      ****             }
 221:.\main.c      ****             else
 222:.\main.c      ****             {
 223:.\main.c      ****                 cur_pos = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 11


 224:.\main.c      ****             }
 225:.\main.c      ****         }
 226:.\main.c      ****         else
 227:.\main.c      ****         {
 228:.\main.c      ****             cur_pos = 0;   
 229:.\main.c      ****         }    
 230:.\main.c      ****     }
 231:.\main.c      ****     else if(command >= 1300 && command < 1490)
 232:.\main.c      ****     {
 233:.\main.c      ****         if(cur_pos != 0)
 234:.\main.c      ****         {
 235:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 5);
 236:.\main.c      ****             
 237:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 238:.\main.c      ****             {
 239:.\main.c      ****                 cur_pos++;
 240:.\main.c      ****             }
 241:.\main.c      ****             else
 242:.\main.c      ****             {
 243:.\main.c      ****                 cur_pos = 0;
 244:.\main.c      ****             }
 245:.\main.c      ****         }
 246:.\main.c      ****         else if(cur_pos == 0)
 247:.\main.c      ****         {
 248:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 5);
 249:.\main.c      ****            
 250:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 251:.\main.c      ****             {
 252:.\main.c      ****                 cur_pos++;
 253:.\main.c      ****             }
 254:.\main.c      ****             else
 255:.\main.c      ****             {
 256:.\main.c      ****                 cur_pos = 0;
 257:.\main.c      ****             }
 258:.\main.c      ****         }
 259:.\main.c      ****         else
 260:.\main.c      ****         {
 261:.\main.c      ****             cur_pos = 0;   
 262:.\main.c      ****         }    
 263:.\main.c      ****     }
 264:.\main.c      ****     else if(command > 1510 && command <= 1700)
 265:.\main.c      ****     {
 266:.\main.c      ****         if(cur_pos != 0)
 267:.\main.c      ****         {
 268:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 5);
 269:.\main.c      ****             
 270:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 271:.\main.c      ****             {
 272:.\main.c      ****                 cur_pos++;
 273:.\main.c      ****             }
 274:.\main.c      ****             else
 275:.\main.c      ****             {
 276:.\main.c      ****                 cur_pos = 0;
 277:.\main.c      ****             }
 278:.\main.c      ****         }
 279:.\main.c      ****         else if(cur_pos == 0)
 280:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 12


 281:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 5);
 282:.\main.c      ****            
 283:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 284:.\main.c      ****             {
 285:.\main.c      ****                 cur_pos++;
 286:.\main.c      ****             }
 287:.\main.c      ****             else
 288:.\main.c      ****             {
 289:.\main.c      ****                 cur_pos = 0;
 290:.\main.c      ****             }
 291:.\main.c      ****         }
 292:.\main.c      ****         else
 293:.\main.c      ****         {
 294:.\main.c      ****             cur_pos = 0;   
 295:.\main.c      ****         }    
 296:.\main.c      ****     }
 297:.\main.c      ****     else if(command > 1700 && command <= 1900)
 298:.\main.c      ****     {
 299:.\main.c      ****         if(cur_pos != 0)
 300:.\main.c      ****         {
 301:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 10);
 302:.\main.c      ****             
 303:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 304:.\main.c      ****             {
 305:.\main.c      ****                 cur_pos++;
 306:.\main.c      ****             }
 307:.\main.c      ****             else
 308:.\main.c      ****             {
 309:.\main.c      ****                 cur_pos = 0;
 310:.\main.c      ****             }
 311:.\main.c      ****         }
 312:.\main.c      ****         else if(cur_pos == 0)
 313:.\main.c      ****         {
 314:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 10);
 315:.\main.c      ****            
 316:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 317:.\main.c      ****             {
 318:.\main.c      ****                 cur_pos++;
 319:.\main.c      ****             }
 320:.\main.c      ****             else
 321:.\main.c      ****             {
 322:.\main.c      ****                 cur_pos = 0;
 323:.\main.c      ****             }
 324:.\main.c      ****         }
 325:.\main.c      ****         else
 326:.\main.c      ****         {
 327:.\main.c      ****             cur_pos = 0;   
 328:.\main.c      ****         }
 329:.\main.c      ****     }
 330:.\main.c      ****     else if(command > 1900 && command <= 2000)
 331:.\main.c      ****     {
 332:.\main.c      ****         if(cur_pos != 0)
 333:.\main.c      ****         {
 334:.\main.c      ****             if(array[cur_pos - 1] <= 1980)
 335:.\main.c      ****             {
 336:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] + 20);
 337:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 13


 338:.\main.c      ****             else
 339:.\main.c      ****             {
 340:.\main.c      ****                 array[cur_pos] = 2000;
 341:.\main.c      ****             }
 342:.\main.c      ****             
 343:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 344:.\main.c      ****             {
 345:.\main.c      ****                 cur_pos++;
 346:.\main.c      ****             }
 347:.\main.c      ****             else
 348:.\main.c      ****             {
 349:.\main.c      ****                 cur_pos = 0;
 350:.\main.c      ****             }
 351:.\main.c      ****         }
 352:.\main.c      ****         else if(cur_pos == 0)
 353:.\main.c      ****         {
 354:.\main.c      ****             if(array[ARRAY_SIZE - 1] <= 1980)
 355:.\main.c      ****             {
 356:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] + 20);
 357:.\main.c      ****             }
 358:.\main.c      ****             else
 359:.\main.c      ****             {
 360:.\main.c      ****                 array[cur_pos] = 2000;
 361:.\main.c      ****             }
 362:.\main.c      ****             
 363:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 364:.\main.c      ****             {
 365:.\main.c      ****                 cur_pos++;
 366:.\main.c      ****             }
 367:.\main.c      ****             else
 368:.\main.c      ****             {
 369:.\main.c      ****                 cur_pos = 0;
 370:.\main.c      ****             }
 371:.\main.c      ****         }
 372:.\main.c      ****         else
 373:.\main.c      ****         {
 374:.\main.c      ****             cur_pos = 0;
 375:.\main.c      ****         }
 376:.\main.c      ****     }
 377:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 378:.\main.c      ****     {
 379:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 380:.\main.c      ****         {
 381:.\main.c      ****             cur_pos++;
 382:.\main.c      ****         }
 383:.\main.c      ****         else
 384:.\main.c      ****         {
 385:.\main.c      ****             cur_pos = 0;
 386:.\main.c      ****         }
 387:.\main.c      ****     }
 388:.\main.c      ****     else
 389:.\main.c      ****     {
 390:.\main.c      ****         //throw error
 391:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 392:.\main.c      ****         {
 393:.\main.c      ****             cur_pos++;
 394:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 14


 395:.\main.c      ****         else
 396:.\main.c      ****         {
 397:.\main.c      ****             cur_pos = 0;
 398:.\main.c      ****         }
 399:.\main.c      ****     }
 400:.\main.c      **** }
 401:.\main.c      **** */
 402:.\main.c      **** 
 403:.\main.c      **** uint16 potFeedback(uint32 channel){
 344              		.loc 1 403 0
 345              		.cfi_startproc
 346 0000 80B5     		push	{r7, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 84B0     		sub	sp, sp, #16
 351              		.cfi_def_cfa_offset 24
 352 0004 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 354 0006 7860     		str	r0, [r7, #4]
 404:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 405:.\main.c      ****     uint16 feedback = 500;
 355              		.loc 1 405 0
 356 0008 3B1C     		mov	r3, r7
 357 000a 0E33     		add	r3, r3, #14
 358 000c FA22     		mov	r2, #250
 359 000e 5200     		lsl	r2, r2, #1
 360 0010 1A80     		strh	r2, [r3]
 406:.\main.c      ****     return feedback;
 361              		.loc 1 406 0
 362 0012 3B1C     		mov	r3, r7
 363 0014 0E33     		add	r3, r3, #14
 364 0016 1B88     		ldrh	r3, [r3]
 407:.\main.c      **** }
 365              		.loc 1 407 0
 366 0018 181C     		mov	r0, r3
 367 001a BD46     		mov	sp, r7
 368 001c 04B0     		add	sp, sp, #16
 369              		@ sp needed
 370 001e 80BD     		pop	{r7, pc}
 371              		.cfi_endproc
 372              	.LFE38:
 373              		.size	potFeedback, .-potFeedback
 374              		.section	.text.fill_data_array,"ax",%progbits
 375              		.align	2
 376              		.global	fill_data_array
 377              		.code	16
 378              		.thumb_func
 379              		.type	fill_data_array, %function
 380              	fill_data_array:
 381              	.LFB39:
 408:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 409:.\main.c      **** void fill_data_array()
 410:.\main.c      **** {
 382              		.loc 1 410 0
 383              		.cfi_startproc
 384 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 15


 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 0002 82B0     		sub	sp, sp, #8
 389              		.cfi_def_cfa_offset 16
 390 0004 00AF     		add	r7, sp, #0
 391              		.cfi_def_cfa_register 7
 411:.\main.c      ****    // wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 412:.\main.c      ****     uint8 i = 0;
 392              		.loc 1 412 0
 393 0006 FB1D     		add	r3, r7, #7
 394 0008 0022     		mov	r2, #0
 395 000a 1A70     		strb	r2, [r3]
 413:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 396              		.loc 1 413 0
 397 000c FB1D     		add	r3, r7, #7
 398 000e 0022     		mov	r2, #0
 399 0010 1A70     		strb	r2, [r3]
 400 0012 0CE0     		b	.L18
 401              	.L19:
 414:.\main.c      ****     {
 415:.\main.c      ****         data_array[i] = test_array[i];
 402              		.loc 1 415 0 discriminator 2
 403 0014 FB1D     		add	r3, r7, #7
 404 0016 1B78     		ldrb	r3, [r3]
 405 0018 FA1D     		add	r2, r7, #7
 406 001a 1278     		ldrb	r2, [r2]
 407 001c 0749     		ldr	r1, .L20
 408 001e 895C     		ldrb	r1, [r1, r2]
 409 0020 074A     		ldr	r2, .L20+4
 410 0022 D154     		strb	r1, [r2, r3]
 413:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 411              		.loc 1 413 0 discriminator 2
 412 0024 FB1D     		add	r3, r7, #7
 413 0026 1A78     		ldrb	r2, [r3]
 414 0028 FB1D     		add	r3, r7, #7
 415 002a 0132     		add	r2, r2, #1
 416 002c 1A70     		strb	r2, [r3]
 417              	.L18:
 413:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 418              		.loc 1 413 0 is_stmt 0 discriminator 1
 419 002e FB1D     		add	r3, r7, #7
 420 0030 1B78     		ldrb	r3, [r3]
 421 0032 0D2B     		cmp	r3, #13
 422 0034 EED9     		bls	.L19
 416:.\main.c      ****     }
 417:.\main.c      **** }
 423              		.loc 1 417 0 is_stmt 1
 424 0036 BD46     		mov	sp, r7
 425 0038 02B0     		add	sp, sp, #8
 426              		@ sp needed
 427 003a 80BD     		pop	{r7, pc}
 428              	.L21:
 429              		.align	2
 430              	.L20:
 431 003c 00000000 		.word	test_array
 432 0040 00000000 		.word	data_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 16


 433              		.cfi_endproc
 434              	.LFE39:
 435              		.size	fill_data_array, .-fill_data_array
 436              		.section	.text.ServoGoalPosition,"ax",%progbits
 437              		.align	2
 438              		.global	ServoGoalPosition
 439              		.code	16
 440              		.thumb_func
 441              		.type	ServoGoalPosition, %function
 442              	ServoGoalPosition:
 443              	.LFB40:
 418:.\main.c      **** 
 419:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 420:.\main.c      **** {
 444              		.loc 1 420 0
 445              		.cfi_startproc
 446 0000 80B5     		push	{r7, lr}
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 86B0     		sub	sp, sp, #24
 451              		.cfi_def_cfa_offset 32
 452 0004 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 454 0006 0A1C     		mov	r2, r1
 455 0008 FB1D     		add	r3, r7, #7
 456 000a 011C     		add	r1, r0, #0
 457 000c 1970     		strb	r1, [r3]
 458 000e 3B1D     		add	r3, r7, #4
 459 0010 1A80     		strh	r2, [r3]
 421:.\main.c      ****     uint8 array[9];
 422:.\main.c      ****     
 423:.\main.c      ****     array[0] = 0xFF;
 460              		.loc 1 423 0
 461 0012 3B1C     		mov	r3, r7
 462 0014 0C33     		add	r3, r3, #12
 463 0016 FF22     		mov	r2, #255
 464 0018 1A70     		strb	r2, [r3]
 424:.\main.c      ****     array[1] = 0xFF;
 465              		.loc 1 424 0
 466 001a 3B1C     		mov	r3, r7
 467 001c 0C33     		add	r3, r3, #12
 468 001e FF22     		mov	r2, #255
 469 0020 5A70     		strb	r2, [r3, #1]
 425:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 470              		.loc 1 425 0
 471 0022 3B1C     		mov	r3, r7
 472 0024 0C33     		add	r3, r3, #12
 473 0026 FA1D     		add	r2, r7, #7
 474 0028 1278     		ldrb	r2, [r2]
 475 002a 9A70     		strb	r2, [r3, #2]
 426:.\main.c      ****     array[3] = 0x05;
 476              		.loc 1 426 0
 477 002c 3B1C     		mov	r3, r7
 478 002e 0C33     		add	r3, r3, #12
 479 0030 0522     		mov	r2, #5
 480 0032 DA70     		strb	r2, [r3, #3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 17


 427:.\main.c      ****     array[4] = 0x03; //write instruction
 481              		.loc 1 427 0
 482 0034 3B1C     		mov	r3, r7
 483 0036 0C33     		add	r3, r3, #12
 484 0038 0322     		mov	r2, #3
 485 003a 1A71     		strb	r2, [r3, #4]
 428:.\main.c      ****     array[5] = 0x1E;
 486              		.loc 1 428 0
 487 003c 3B1C     		mov	r3, r7
 488 003e 0C33     		add	r3, r3, #12
 489 0040 1E22     		mov	r2, #30
 490 0042 5A71     		strb	r2, [r3, #5]
 429:.\main.c      ****     array[6] = position;
 491              		.loc 1 429 0
 492 0044 3B1D     		add	r3, r7, #4
 493 0046 1B88     		ldrh	r3, [r3]
 494 0048 DAB2     		uxtb	r2, r3
 495 004a 3B1C     		mov	r3, r7
 496 004c 0C33     		add	r3, r3, #12
 497 004e 9A71     		strb	r2, [r3, #6]
 430:.\main.c      ****     array[7] = position >> 8;
 498              		.loc 1 430 0
 499 0050 3B1D     		add	r3, r7, #4
 500 0052 1B88     		ldrh	r3, [r3]
 501 0054 1B0A     		lsr	r3, r3, #8
 502 0056 9BB2     		uxth	r3, r3
 503 0058 DAB2     		uxtb	r2, r3
 504 005a 3B1C     		mov	r3, r7
 505 005c 0C33     		add	r3, r3, #12
 506 005e DA71     		strb	r2, [r3, #7]
 431:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 507              		.loc 1 431 0
 508 0060 3B1C     		mov	r3, r7
 509 0062 0C33     		add	r3, r3, #12
 510 0064 9A79     		ldrb	r2, [r3, #6]
 511 0066 FB1D     		add	r3, r7, #7
 512 0068 1B78     		ldrb	r3, [r3]
 513 006a D318     		add	r3, r2, r3
 514 006c DAB2     		uxtb	r2, r3
 515 006e 3B1C     		mov	r3, r7
 516 0070 0C33     		add	r3, r3, #12
 517 0072 DB79     		ldrb	r3, [r3, #7]
 518 0074 D318     		add	r3, r2, r3
 519 0076 DBB2     		uxtb	r3, r3
 520 0078 2633     		add	r3, r3, #38
 521 007a DBB2     		uxtb	r3, r3
 522 007c DB43     		mvn	r3, r3
 523 007e DAB2     		uxtb	r2, r3
 524 0080 3B1C     		mov	r3, r7
 525 0082 0C33     		add	r3, r3, #12
 526 0084 1A72     		strb	r2, [r3, #8]
 432:.\main.c      ****     
 433:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 527              		.loc 1 433 0
 528 0086 3B1C     		mov	r3, r7
 529 0088 0C33     		add	r3, r3, #12
 530 008a 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 18


 531 008c 0921     		mov	r1, #9
 532 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 434:.\main.c      **** }
 533              		.loc 1 434 0
 534 0092 BD46     		mov	sp, r7
 535 0094 06B0     		add	sp, sp, #24
 536              		@ sp needed
 537 0096 80BD     		pop	{r7, pc}
 538              		.cfi_endproc
 539              	.LFE40:
 540              		.size	ServoGoalPosition, .-ServoGoalPosition
 541              		.section	.text.SetServoTorque,"ax",%progbits
 542              		.align	2
 543              		.global	SetServoTorque
 544              		.code	16
 545              		.thumb_func
 546              		.type	SetServoTorque, %function
 547              	SetServoTorque:
 548              	.LFB41:
 435:.\main.c      **** 
 436:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 437:.\main.c      **** {
 549              		.loc 1 437 0
 550              		.cfi_startproc
 551 0000 80B5     		push	{r7, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 7, -8
 554              		.cfi_offset 14, -4
 555 0002 86B0     		sub	sp, sp, #24
 556              		.cfi_def_cfa_offset 32
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 559 0006 0A1C     		mov	r2, r1
 560 0008 FB1D     		add	r3, r7, #7
 561 000a 011C     		add	r1, r0, #0
 562 000c 1970     		strb	r1, [r3]
 563 000e 3B1D     		add	r3, r7, #4
 564 0010 1A80     		strh	r2, [r3]
 438:.\main.c      ****     uint8 array[9];
 439:.\main.c      ****     
 440:.\main.c      ****     array[0] = 0xFF;
 565              		.loc 1 440 0
 566 0012 3B1C     		mov	r3, r7
 567 0014 0C33     		add	r3, r3, #12
 568 0016 FF22     		mov	r2, #255
 569 0018 1A70     		strb	r2, [r3]
 441:.\main.c      ****     array[1] = 0xFF;
 570              		.loc 1 441 0
 571 001a 3B1C     		mov	r3, r7
 572 001c 0C33     		add	r3, r3, #12
 573 001e FF22     		mov	r2, #255
 574 0020 5A70     		strb	r2, [r3, #1]
 442:.\main.c      ****     array[2] = servoID; 
 575              		.loc 1 442 0
 576 0022 3B1C     		mov	r3, r7
 577 0024 0C33     		add	r3, r3, #12
 578 0026 FA1D     		add	r2, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 19


 579 0028 1278     		ldrb	r2, [r2]
 580 002a 9A70     		strb	r2, [r3, #2]
 443:.\main.c      ****     array[3] = 0x05;
 581              		.loc 1 443 0
 582 002c 3B1C     		mov	r3, r7
 583 002e 0C33     		add	r3, r3, #12
 584 0030 0522     		mov	r2, #5
 585 0032 DA70     		strb	r2, [r3, #3]
 444:.\main.c      ****     array[4] = 0x03; //write instruction
 586              		.loc 1 444 0
 587 0034 3B1C     		mov	r3, r7
 588 0036 0C33     		add	r3, r3, #12
 589 0038 0322     		mov	r2, #3
 590 003a 1A71     		strb	r2, [r3, #4]
 445:.\main.c      ****     array[5] = 0x0E;
 591              		.loc 1 445 0
 592 003c 3B1C     		mov	r3, r7
 593 003e 0C33     		add	r3, r3, #12
 594 0040 0E22     		mov	r2, #14
 595 0042 5A71     		strb	r2, [r3, #5]
 446:.\main.c      ****     array[6] = torque;
 596              		.loc 1 446 0
 597 0044 3B1D     		add	r3, r7, #4
 598 0046 1B88     		ldrh	r3, [r3]
 599 0048 DAB2     		uxtb	r2, r3
 600 004a 3B1C     		mov	r3, r7
 601 004c 0C33     		add	r3, r3, #12
 602 004e 9A71     		strb	r2, [r3, #6]
 447:.\main.c      ****     array[7] = torque >> 8;
 603              		.loc 1 447 0
 604 0050 3B1D     		add	r3, r7, #4
 605 0052 1B88     		ldrh	r3, [r3]
 606 0054 1B0A     		lsr	r3, r3, #8
 607 0056 9BB2     		uxth	r3, r3
 608 0058 DAB2     		uxtb	r2, r3
 609 005a 3B1C     		mov	r3, r7
 610 005c 0C33     		add	r3, r3, #12
 611 005e DA71     		strb	r2, [r3, #7]
 448:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 612              		.loc 1 448 0
 613 0060 3B1C     		mov	r3, r7
 614 0062 0C33     		add	r3, r3, #12
 615 0064 9A79     		ldrb	r2, [r3, #6]
 616 0066 FB1D     		add	r3, r7, #7
 617 0068 1B78     		ldrb	r3, [r3]
 618 006a D318     		add	r3, r2, r3
 619 006c DAB2     		uxtb	r2, r3
 620 006e 3B1C     		mov	r3, r7
 621 0070 0C33     		add	r3, r3, #12
 622 0072 DB79     		ldrb	r3, [r3, #7]
 623 0074 D318     		add	r3, r2, r3
 624 0076 DBB2     		uxtb	r3, r3
 625 0078 1633     		add	r3, r3, #22
 626 007a DBB2     		uxtb	r3, r3
 627 007c DB43     		mvn	r3, r3
 628 007e DAB2     		uxtb	r2, r3
 629 0080 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 20


 630 0082 0C33     		add	r3, r3, #12
 631 0084 1A72     		strb	r2, [r3, #8]
 449:.\main.c      ****     
 450:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 632              		.loc 1 450 0
 633 0086 3B1C     		mov	r3, r7
 634 0088 0C33     		add	r3, r3, #12
 635 008a 181C     		mov	r0, r3
 636 008c 0921     		mov	r1, #9
 637 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 451:.\main.c      ****     
 452:.\main.c      **** }    
 638              		.loc 1 452 0
 639 0092 BD46     		mov	sp, r7
 640 0094 06B0     		add	sp, sp, #24
 641              		@ sp needed
 642 0096 80BD     		pop	{r7, pc}
 643              		.cfi_endproc
 644              	.LFE41:
 645              		.size	SetServoTorque, .-SetServoTorque
 646              		.section	.text.ServoSpeed,"ax",%progbits
 647              		.align	2
 648              		.global	ServoSpeed
 649              		.code	16
 650              		.thumb_func
 651              		.type	ServoSpeed, %function
 652              	ServoSpeed:
 653              	.LFB42:
 453:.\main.c      **** 
 454:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 455:.\main.c      **** {
 654              		.loc 1 455 0
 655              		.cfi_startproc
 656 0000 80B5     		push	{r7, lr}
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 7, -8
 659              		.cfi_offset 14, -4
 660 0002 86B0     		sub	sp, sp, #24
 661              		.cfi_def_cfa_offset 32
 662 0004 00AF     		add	r7, sp, #0
 663              		.cfi_def_cfa_register 7
 664 0006 0A1C     		mov	r2, r1
 665 0008 FB1D     		add	r3, r7, #7
 666 000a 011C     		add	r1, r0, #0
 667 000c 1970     		strb	r1, [r3]
 668 000e 3B1D     		add	r3, r7, #4
 669 0010 1A80     		strh	r2, [r3]
 456:.\main.c      ****     uint8 array[9];
 457:.\main.c      ****     
 458:.\main.c      ****     array[0] = 0xFF;
 670              		.loc 1 458 0
 671 0012 3B1C     		mov	r3, r7
 672 0014 0C33     		add	r3, r3, #12
 673 0016 FF22     		mov	r2, #255
 674 0018 1A70     		strb	r2, [r3]
 459:.\main.c      ****     array[1] = 0xFF;
 675              		.loc 1 459 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 21


 676 001a 3B1C     		mov	r3, r7
 677 001c 0C33     		add	r3, r3, #12
 678 001e FF22     		mov	r2, #255
 679 0020 5A70     		strb	r2, [r3, #1]
 460:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 680              		.loc 1 460 0
 681 0022 3B1C     		mov	r3, r7
 682 0024 0C33     		add	r3, r3, #12
 683 0026 FA1D     		add	r2, r7, #7
 684 0028 1278     		ldrb	r2, [r2]
 685 002a 9A70     		strb	r2, [r3, #2]
 461:.\main.c      ****     array[3] = 0x05;
 686              		.loc 1 461 0
 687 002c 3B1C     		mov	r3, r7
 688 002e 0C33     		add	r3, r3, #12
 689 0030 0522     		mov	r2, #5
 690 0032 DA70     		strb	r2, [r3, #3]
 462:.\main.c      ****     array[4] = 0x03; //write instruction
 691              		.loc 1 462 0
 692 0034 3B1C     		mov	r3, r7
 693 0036 0C33     		add	r3, r3, #12
 694 0038 0322     		mov	r2, #3
 695 003a 1A71     		strb	r2, [r3, #4]
 463:.\main.c      ****     array[5] = 0x20;
 696              		.loc 1 463 0
 697 003c 3B1C     		mov	r3, r7
 698 003e 0C33     		add	r3, r3, #12
 699 0040 2022     		mov	r2, #32
 700 0042 5A71     		strb	r2, [r3, #5]
 464:.\main.c      ****     array[6] = speed;
 701              		.loc 1 464 0
 702 0044 3B1D     		add	r3, r7, #4
 703 0046 1B88     		ldrh	r3, [r3]
 704 0048 DAB2     		uxtb	r2, r3
 705 004a 3B1C     		mov	r3, r7
 706 004c 0C33     		add	r3, r3, #12
 707 004e 9A71     		strb	r2, [r3, #6]
 465:.\main.c      ****     array[7] = speed >> 8;
 708              		.loc 1 465 0
 709 0050 3B1D     		add	r3, r7, #4
 710 0052 1B88     		ldrh	r3, [r3]
 711 0054 1B0A     		lsr	r3, r3, #8
 712 0056 9BB2     		uxth	r3, r3
 713 0058 DAB2     		uxtb	r2, r3
 714 005a 3B1C     		mov	r3, r7
 715 005c 0C33     		add	r3, r3, #12
 716 005e DA71     		strb	r2, [r3, #7]
 466:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 717              		.loc 1 466 0
 718 0060 3B1C     		mov	r3, r7
 719 0062 0C33     		add	r3, r3, #12
 720 0064 9A79     		ldrb	r2, [r3, #6]
 721 0066 FB1D     		add	r3, r7, #7
 722 0068 1B78     		ldrb	r3, [r3]
 723 006a D318     		add	r3, r2, r3
 724 006c DAB2     		uxtb	r2, r3
 725 006e 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 22


 726 0070 0C33     		add	r3, r3, #12
 727 0072 DB79     		ldrb	r3, [r3, #7]
 728 0074 D318     		add	r3, r2, r3
 729 0076 DBB2     		uxtb	r3, r3
 730 0078 2833     		add	r3, r3, #40
 731 007a DBB2     		uxtb	r3, r3
 732 007c DB43     		mvn	r3, r3
 733 007e DAB2     		uxtb	r2, r3
 734 0080 3B1C     		mov	r3, r7
 735 0082 0C33     		add	r3, r3, #12
 736 0084 1A72     		strb	r2, [r3, #8]
 467:.\main.c      ****     
 468:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 737              		.loc 1 468 0
 738 0086 3B1C     		mov	r3, r7
 739 0088 0C33     		add	r3, r3, #12
 740 008a 181C     		mov	r0, r3
 741 008c 0921     		mov	r1, #9
 742 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 469:.\main.c      ****     
 470:.\main.c      **** }
 743              		.loc 1 470 0
 744 0092 BD46     		mov	sp, r7
 745 0094 06B0     		add	sp, sp, #24
 746              		@ sp needed
 747 0096 80BD     		pop	{r7, pc}
 748              		.cfi_endproc
 749              	.LFE42:
 750              		.size	ServoSpeed, .-ServoSpeed
 751              		.comm	wristTilt_state,1,1
 752              		.section	.text.wristTilt,"ax",%progbits
 753              		.align	2
 754              		.global	wristTilt
 755              		.code	16
 756              		.thumb_func
 757              		.type	wristTilt, %function
 758              	wristTilt:
 759              	.LFB43:
 471:.\main.c      **** 
 472:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 473:.\main.c      **** //control the tilting motion of the wrist
 474:.\main.c      **** void wristTilt()
 475:.\main.c      **** {
 760              		.loc 1 475 0
 761              		.cfi_startproc
 762 0000 90B5     		push	{r4, r7, lr}
 763              		.cfi_def_cfa_offset 12
 764              		.cfi_offset 4, -12
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 85B0     		sub	sp, sp, #20
 768              		.cfi_def_cfa_offset 32
 769 0004 02AF     		add	r7, sp, #8
 770              		.cfi_def_cfa 7, 24
 476:.\main.c      ****     // Overview
 477:.\main.c      ****     //take instruction from data_array
 478:.\main.c      ****     //smooth input
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 23


 479:.\main.c      ****     //actuate the tilting using UART
 480:.\main.c      ****     //get feedback
 481:.\main.c      **** 
 482:.\main.c      ****     //-------------------------- 
 483:.\main.c      ****     // Dynamixel Servo specific
 484:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 485:.\main.c      ****     // TODO: Set the desired position
 486:.\main.c      **** 
 487:.\main.c      ****     //--------------------------
 488:.\main.c      ****     // State machine
 489:.\main.c      ****     
 490:.\main.c      ****     uint8 i;
 491:.\main.c      ****     uint16 avg;
 492:.\main.c      ****     
 493:.\main.c      ****     switch(wristTilt_state){ //actions
 771              		.loc 1 493 0
 772 0006 484B     		ldr	r3, .L49
 773 0008 1B78     		ldrb	r3, [r3]
 774 000a 012B     		cmp	r3, #1
 775 000c 03D0     		beq	.L27
 776 000e 59DD     		ble	.L48
 777 0010 022B     		cmp	r3, #2
 778 0012 17D0     		beq	.L30
 494:.\main.c      ****         case tilt_start:
 495:.\main.c      ****             break;
 496:.\main.c      **** 
 497:.\main.c      ****         case tilt_init:
 498:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 499:.\main.c      ****             {
 500:.\main.c      ****                 WT_array[i] = 1500;
 501:.\main.c      ****             }
 502:.\main.c      ****             WT_arr_cspot = 0;
 503:.\main.c      ****             
 504:.\main.c      ****             break;
 505:.\main.c      **** 
 506:.\main.c      ****         case tilt_control:
 507:.\main.c      ****             make_command(WT_array, WT_arr_cspot, data_array, WT_BYTE_1, WT_BYTE_2);
 508:.\main.c      ****             
 509:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 510:.\main.c      ****             {
 511:.\main.c      ****                 WT_arr_cspot++;
 512:.\main.c      ****             }
 513:.\main.c      ****             else
 514:.\main.c      ****             {
 515:.\main.c      ****                 WT_arr_cspot = 0;
 516:.\main.c      ****             }
 517:.\main.c      ****             
 518:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 519:.\main.c      ****             
 520:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 521:.\main.c      ****             
 522:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 523:.\main.c      ****             {
 524:.\main.c      ****                 //UART_1_SpiUartPutArray(avg);
 525:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 526:.\main.c      ****             }
 527:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 24


 528:.\main.c      ****             {
 529:.\main.c      ****                 //throw error
 530:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 531:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 532:.\main.c      ****             }
 533:.\main.c      ****             fin_exec++;
 534:.\main.c      ****             break;
 535:.\main.c      ****             
 536:.\main.c      ****         case tilt_wait:
 537:.\main.c      ****             break;
 779              		.loc 1 537 0
 780 0014 57E0     		b	.L26
 781              	.L27:
 498:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 782              		.loc 1 498 0
 783 0016 FB1D     		add	r3, r7, #7
 784 0018 0022     		mov	r2, #0
 785 001a 1A70     		strb	r2, [r3]
 786 001c 0AE0     		b	.L32
 787              	.L33:
 500:.\main.c      ****                 WT_array[i] = 1500;
 788              		.loc 1 500 0 discriminator 2
 789 001e FB1D     		add	r3, r7, #7
 790 0020 1A78     		ldrb	r2, [r3]
 791 0022 424B     		ldr	r3, .L49+4
 792 0024 5200     		lsl	r2, r2, #1
 793 0026 4249     		ldr	r1, .L49+8
 794 0028 D152     		strh	r1, [r2, r3]
 498:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 795              		.loc 1 498 0 discriminator 2
 796 002a FB1D     		add	r3, r7, #7
 797 002c 1A78     		ldrb	r2, [r3]
 798 002e FB1D     		add	r3, r7, #7
 799 0030 0132     		add	r2, r2, #1
 800 0032 1A70     		strb	r2, [r3]
 801              	.L32:
 498:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 802              		.loc 1 498 0 is_stmt 0 discriminator 1
 803 0034 FB1D     		add	r3, r7, #7
 804 0036 1B78     		ldrb	r3, [r3]
 805 0038 132B     		cmp	r3, #19
 806 003a F0D9     		bls	.L33
 502:.\main.c      ****             WT_arr_cspot = 0;
 807              		.loc 1 502 0 is_stmt 1
 808 003c 3D4B     		ldr	r3, .L49+12
 809 003e 0022     		mov	r2, #0
 810 0040 1A70     		strb	r2, [r3]
 504:.\main.c      ****             break;
 811              		.loc 1 504 0
 812 0042 40E0     		b	.L26
 813              	.L30:
 507:.\main.c      ****             make_command(WT_array, WT_arr_cspot, data_array, WT_BYTE_1, WT_BYTE_2);
 814              		.loc 1 507 0
 815 0044 3B4B     		ldr	r3, .L49+12
 816 0046 1A78     		ldrb	r2, [r3]
 817 0048 3849     		ldr	r1, .L49+4
 818 004a 3B4B     		ldr	r3, .L49+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 25


 819 004c 0B20     		mov	r0, #11
 820 004e 0090     		str	r0, [sp]
 821 0050 081C     		mov	r0, r1
 822 0052 111C     		mov	r1, r2
 823 0054 1A1C     		mov	r2, r3
 824 0056 0A23     		mov	r3, #10
 825 0058 FFF7FEFF 		bl	make_command
 509:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 826              		.loc 1 509 0
 827 005c 354B     		ldr	r3, .L49+12
 828 005e 1B78     		ldrb	r3, [r3]
 829 0060 122B     		cmp	r3, #18
 830 0062 06D8     		bhi	.L34
 511:.\main.c      ****                 WT_arr_cspot++;
 831              		.loc 1 511 0
 832 0064 334B     		ldr	r3, .L49+12
 833 0066 1B78     		ldrb	r3, [r3]
 834 0068 0133     		add	r3, r3, #1
 835 006a DAB2     		uxtb	r2, r3
 836 006c 314B     		ldr	r3, .L49+12
 837 006e 1A70     		strb	r2, [r3]
 838 0070 02E0     		b	.L35
 839              	.L34:
 515:.\main.c      ****                 WT_arr_cspot = 0;
 840              		.loc 1 515 0
 841 0072 304B     		ldr	r3, .L49+12
 842 0074 0022     		mov	r2, #0
 843 0076 1A70     		strb	r2, [r3]
 844              	.L35:
 520:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 845              		.loc 1 520 0
 846 0078 3C1D     		add	r4, r7, #4
 847 007a 2C4B     		ldr	r3, .L49+4
 848 007c 181C     		mov	r0, r3
 849 007e 1421     		mov	r1, #20
 850 0080 FFF7FEFF 		bl	average
 851 0084 031C     		mov	r3, r0
 852 0086 2380     		strh	r3, [r4]
 522:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 853              		.loc 1 522 0
 854 0088 3B1D     		add	r3, r7, #4
 855 008a 1A88     		ldrh	r2, [r3]
 856 008c FA23     		mov	r3, #250
 857 008e DB00     		lsl	r3, r3, #3
 858 0090 9A42     		cmp	r2, r3
 859 0092 0BD8     		bhi	.L36
 522:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 860              		.loc 1 522 0 is_stmt 0 discriminator 1
 861 0094 3B1D     		add	r3, r7, #4
 862 0096 1A88     		ldrh	r2, [r3]
 863 0098 284B     		ldr	r3, .L49+20
 864 009a 9A42     		cmp	r2, r3
 865 009c 06D9     		bls	.L36
 525:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 866              		.loc 1 525 0 is_stmt 1
 867 009e 3B1D     		add	r3, r7, #4
 868 00a0 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 26


 869 00a2 0220     		mov	r0, #2
 870 00a4 191C     		mov	r1, r3
 871 00a6 FFF7FEFF 		bl	ServoGoalPosition
 872 00aa 04E0     		b	.L37
 873              	.L36:
 531:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 874              		.loc 1 531 0
 875 00ac 204B     		ldr	r3, .L49+8
 876 00ae 0220     		mov	r0, #2
 877 00b0 191C     		mov	r1, r3
 878 00b2 FFF7FEFF 		bl	ServoGoalPosition
 879              	.L37:
 533:.\main.c      ****             fin_exec++;
 880              		.loc 1 533 0
 881 00b6 224B     		ldr	r3, .L49+24
 882 00b8 1B78     		ldrb	r3, [r3]
 883 00ba 0133     		add	r3, r3, #1
 884 00bc DAB2     		uxtb	r2, r3
 885 00be 204B     		ldr	r3, .L49+24
 886 00c0 1A70     		strb	r2, [r3]
 534:.\main.c      ****             break;
 887              		.loc 1 534 0
 888 00c2 00E0     		b	.L26
 889              	.L48:
 495:.\main.c      ****             break;
 890              		.loc 1 495 0
 891 00c4 C046     		mov	r8, r8
 892              	.L26:
 538:.\main.c      ****     }
 539:.\main.c      ****     
 540:.\main.c      ****     switch(wristTilt_state){ //transitions
 893              		.loc 1 540 0
 894 00c6 184B     		ldr	r3, .L49
 895 00c8 1B78     		ldrb	r3, [r3]
 896 00ca 012B     		cmp	r3, #1
 897 00cc 0CD0     		beq	.L39
 898 00ce 02DC     		bgt	.L40
 899 00d0 002B     		cmp	r3, #0
 900 00d2 05D0     		beq	.L41
 901 00d4 24E0     		b	.L25
 902              	.L40:
 903 00d6 022B     		cmp	r3, #2
 904 00d8 0AD0     		beq	.L42
 905 00da 032B     		cmp	r3, #3
 906 00dc 14D0     		beq	.L43
 907 00de 1FE0     		b	.L25
 908              	.L41:
 541:.\main.c      ****         case tilt_start:
 542:.\main.c      ****             wristTilt_state = tilt_init;
 909              		.loc 1 542 0
 910 00e0 114B     		ldr	r3, .L49
 911 00e2 0122     		mov	r2, #1
 912 00e4 1A70     		strb	r2, [r3]
 543:.\main.c      ****             break;
 913              		.loc 1 543 0
 914 00e6 1BE0     		b	.L25
 915              	.L39:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 27


 544:.\main.c      ****         
 545:.\main.c      ****         case tilt_init:
 546:.\main.c      ****             wristTilt_state = tilt_wait;
 916              		.loc 1 546 0
 917 00e8 0F4B     		ldr	r3, .L49
 918 00ea 0322     		mov	r2, #3
 919 00ec 1A70     		strb	r2, [r3]
 547:.\main.c      ****             break;
 920              		.loc 1 547 0
 921 00ee 17E0     		b	.L25
 922              	.L42:
 548:.\main.c      ****         
 549:.\main.c      ****         case tilt_control:
 550:.\main.c      ****             if(new_pack)
 923              		.loc 1 550 0
 924 00f0 144B     		ldr	r3, .L49+28
 925 00f2 1B78     		ldrb	r3, [r3]
 926 00f4 002B     		cmp	r3, #0
 927 00f6 03D0     		beq	.L44
 551:.\main.c      ****             {
 552:.\main.c      ****                 wristTilt_state = tilt_control;
 928              		.loc 1 552 0
 929 00f8 0B4B     		ldr	r3, .L49
 930 00fa 0222     		mov	r2, #2
 931 00fc 1A70     		strb	r2, [r3]
 553:.\main.c      ****             }
 554:.\main.c      ****             else
 555:.\main.c      ****             {
 556:.\main.c      ****                 wristTilt_state = tilt_wait;
 557:.\main.c      ****             }
 558:.\main.c      ****             break;
 932              		.loc 1 558 0
 933 00fe 0FE0     		b	.L25
 934              	.L44:
 556:.\main.c      ****                 wristTilt_state = tilt_wait;
 935              		.loc 1 556 0
 936 0100 094B     		ldr	r3, .L49
 937 0102 0322     		mov	r2, #3
 938 0104 1A70     		strb	r2, [r3]
 939              		.loc 1 558 0
 940 0106 0BE0     		b	.L25
 941              	.L43:
 559:.\main.c      ****         
 560:.\main.c      ****         case tilt_wait:
 561:.\main.c      ****             if(new_pack)
 942              		.loc 1 561 0
 943 0108 0E4B     		ldr	r3, .L49+28
 944 010a 1B78     		ldrb	r3, [r3]
 945 010c 002B     		cmp	r3, #0
 946 010e 03D0     		beq	.L46
 562:.\main.c      ****             {
 563:.\main.c      ****                 wristTilt_state = tilt_control;
 947              		.loc 1 563 0
 948 0110 054B     		ldr	r3, .L49
 949 0112 0222     		mov	r2, #2
 950 0114 1A70     		strb	r2, [r3]
 951 0116 02E0     		b	.L47
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 28


 952              	.L46:
 564:.\main.c      ****             }
 565:.\main.c      ****             else
 566:.\main.c      ****             {
 567:.\main.c      ****                 wristTilt_state = tilt_wait; 
 953              		.loc 1 567 0
 954 0118 034B     		ldr	r3, .L49
 955 011a 0322     		mov	r2, #3
 956 011c 1A70     		strb	r2, [r3]
 957              	.L47:
 568:.\main.c      ****             }
 569:.\main.c      ****             break;
 958              		.loc 1 569 0
 959 011e C046     		mov	r8, r8
 960              	.L25:
 570:.\main.c      ****     }    
 571:.\main.c      **** }
 961              		.loc 1 571 0
 962 0120 BD46     		mov	sp, r7
 963 0122 03B0     		add	sp, sp, #12
 964              		@ sp needed
 965 0124 90BD     		pop	{r4, r7, pc}
 966              	.L50:
 967 0126 C046     		.align	2
 968              	.L49:
 969 0128 00000000 		.word	wristTilt_state
 970 012c 00000000 		.word	WT_array
 971 0130 DC050000 		.word	1500
 972 0134 00000000 		.word	WT_arr_cspot
 973 0138 00000000 		.word	data_array
 974 013c E7030000 		.word	999
 975 0140 00000000 		.word	fin_exec
 976 0144 00000000 		.word	new_pack
 977              		.cfi_endproc
 978              	.LFE43:
 979              		.size	wristTilt, .-wristTilt
 980              		.comm	wristRotate_state,1,1
 981              		.section	.text.wristRotate,"ax",%progbits
 982              		.align	2
 983              		.global	wristRotate
 984              		.code	16
 985              		.thumb_func
 986              		.type	wristRotate, %function
 987              	wristRotate:
 988              	.LFB44:
 572:.\main.c      **** 
 573:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 574:.\main.c      **** //control the rotating motion of the wrist
 575:.\main.c      **** void wristRotate()
 576:.\main.c      **** {
 989              		.loc 1 576 0
 990              		.cfi_startproc
 991 0000 90B5     		push	{r4, r7, lr}
 992              		.cfi_def_cfa_offset 12
 993              		.cfi_offset 4, -12
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 29


 996 0002 85B0     		sub	sp, sp, #20
 997              		.cfi_def_cfa_offset 32
 998 0004 02AF     		add	r7, sp, #8
 999              		.cfi_def_cfa 7, 24
 577:.\main.c      ****     //Overview
 578:.\main.c      ****     //take instruction from data_array
 579:.\main.c      ****     //smooth input
 580:.\main.c      ****     //actuate the tilting using UART
 581:.\main.c      ****     //get feedback
 582:.\main.c      **** 
 583:.\main.c      ****     //-------------------------- 
 584:.\main.c      ****     // Dynamixel Servo specific
 585:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 586:.\main.c      ****     // TODO: Set the desired position
 587:.\main.c      **** 
 588:.\main.c      ****     //--------------------------
 589:.\main.c      ****     // State machine
 590:.\main.c      ****     
 591:.\main.c      ****     uint8 i;
 592:.\main.c      ****     uint16 avg;
 593:.\main.c      ****     
 594:.\main.c      ****     switch(wristRotate_state){ //actions
 1000              		.loc 1 594 0
 1001 0006 484B     		ldr	r3, .L75
 1002 0008 1B78     		ldrb	r3, [r3]
 1003 000a 012B     		cmp	r3, #1
 1004 000c 03D0     		beq	.L53
 1005 000e 59DD     		ble	.L74
 1006 0010 022B     		cmp	r3, #2
 1007 0012 17D0     		beq	.L56
 595:.\main.c      ****         case rotate_start:
 596:.\main.c      ****             break;
 597:.\main.c      **** 
 598:.\main.c      ****         case rotate_init:
 599:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 600:.\main.c      ****             {
 601:.\main.c      ****                 WR_array[i] = 1500;
 602:.\main.c      ****             }
 603:.\main.c      ****             WR_arr_cspot = 0;
 604:.\main.c      ****             break;
 605:.\main.c      **** 
 606:.\main.c      ****         case rotate_control:
 607:.\main.c      ****             make_command(WR_array, WR_arr_cspot, data_array, WR_BYTE_1, WR_BYTE_2);
 608:.\main.c      ****             
 609:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 610:.\main.c      ****             {
 611:.\main.c      ****                 WR_arr_cspot++;
 612:.\main.c      ****             }
 613:.\main.c      ****             else
 614:.\main.c      ****             {
 615:.\main.c      ****                 WR_arr_cspot = 0;
 616:.\main.c      ****             }
 617:.\main.c      ****             
 618:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 619:.\main.c      ****             
 620:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 621:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 30


 622:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 623:.\main.c      ****             {
 624:.\main.c      ****                 //BA_PWM_WriteCompare(avg);
 625:.\main.c      ****                 //TODO maybe scale avg between 0 and 3000
 626:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 627:.\main.c      ****             }
 628:.\main.c      ****             else
 629:.\main.c      ****             {
 630:.\main.c      ****                 //throw error
 631:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 632:.\main.c      ****                 //TODO if we scale change the "neutral" value
 633:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 634:.\main.c      ****             }
 635:.\main.c      ****             fin_exec++;
 636:.\main.c      ****             break;
 637:.\main.c      ****             
 638:.\main.c      ****         case rotate_wait:
 639:.\main.c      ****             break;
 1008              		.loc 1 639 0
 1009 0014 57E0     		b	.L52
 1010              	.L53:
 599:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1011              		.loc 1 599 0
 1012 0016 FB1D     		add	r3, r7, #7
 1013 0018 0022     		mov	r2, #0
 1014 001a 1A70     		strb	r2, [r3]
 1015 001c 0AE0     		b	.L58
 1016              	.L59:
 601:.\main.c      ****                 WR_array[i] = 1500;
 1017              		.loc 1 601 0 discriminator 2
 1018 001e FB1D     		add	r3, r7, #7
 1019 0020 1A78     		ldrb	r2, [r3]
 1020 0022 424B     		ldr	r3, .L75+4
 1021 0024 5200     		lsl	r2, r2, #1
 1022 0026 4249     		ldr	r1, .L75+8
 1023 0028 D152     		strh	r1, [r2, r3]
 599:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1024              		.loc 1 599 0 discriminator 2
 1025 002a FB1D     		add	r3, r7, #7
 1026 002c 1A78     		ldrb	r2, [r3]
 1027 002e FB1D     		add	r3, r7, #7
 1028 0030 0132     		add	r2, r2, #1
 1029 0032 1A70     		strb	r2, [r3]
 1030              	.L58:
 599:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1031              		.loc 1 599 0 is_stmt 0 discriminator 1
 1032 0034 FB1D     		add	r3, r7, #7
 1033 0036 1B78     		ldrb	r3, [r3]
 1034 0038 132B     		cmp	r3, #19
 1035 003a F0D9     		bls	.L59
 603:.\main.c      ****             WR_arr_cspot = 0;
 1036              		.loc 1 603 0 is_stmt 1
 1037 003c 3D4B     		ldr	r3, .L75+12
 1038 003e 0022     		mov	r2, #0
 1039 0040 1A70     		strb	r2, [r3]
 604:.\main.c      ****             break;
 1040              		.loc 1 604 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 31


 1041 0042 40E0     		b	.L52
 1042              	.L56:
 607:.\main.c      ****             make_command(WR_array, WR_arr_cspot, data_array, WR_BYTE_1, WR_BYTE_2);
 1043              		.loc 1 607 0
 1044 0044 3B4B     		ldr	r3, .L75+12
 1045 0046 1A78     		ldrb	r2, [r3]
 1046 0048 3849     		ldr	r1, .L75+4
 1047 004a 3B4B     		ldr	r3, .L75+16
 1048 004c 0D20     		mov	r0, #13
 1049 004e 0090     		str	r0, [sp]
 1050 0050 081C     		mov	r0, r1
 1051 0052 111C     		mov	r1, r2
 1052 0054 1A1C     		mov	r2, r3
 1053 0056 0C23     		mov	r3, #12
 1054 0058 FFF7FEFF 		bl	make_command
 609:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1055              		.loc 1 609 0
 1056 005c 354B     		ldr	r3, .L75+12
 1057 005e 1B78     		ldrb	r3, [r3]
 1058 0060 122B     		cmp	r3, #18
 1059 0062 06D8     		bhi	.L60
 611:.\main.c      ****                 WR_arr_cspot++;
 1060              		.loc 1 611 0
 1061 0064 334B     		ldr	r3, .L75+12
 1062 0066 1B78     		ldrb	r3, [r3]
 1063 0068 0133     		add	r3, r3, #1
 1064 006a DAB2     		uxtb	r2, r3
 1065 006c 314B     		ldr	r3, .L75+12
 1066 006e 1A70     		strb	r2, [r3]
 1067 0070 02E0     		b	.L61
 1068              	.L60:
 615:.\main.c      ****                 WR_arr_cspot = 0;
 1069              		.loc 1 615 0
 1070 0072 304B     		ldr	r3, .L75+12
 1071 0074 0022     		mov	r2, #0
 1072 0076 1A70     		strb	r2, [r3]
 1073              	.L61:
 620:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1074              		.loc 1 620 0
 1075 0078 3C1D     		add	r4, r7, #4
 1076 007a 2C4B     		ldr	r3, .L75+4
 1077 007c 181C     		mov	r0, r3
 1078 007e 1421     		mov	r1, #20
 1079 0080 FFF7FEFF 		bl	average
 1080 0084 031C     		mov	r3, r0
 1081 0086 2380     		strh	r3, [r4]
 622:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1082              		.loc 1 622 0
 1083 0088 3B1D     		add	r3, r7, #4
 1084 008a 1A88     		ldrh	r2, [r3]
 1085 008c FA23     		mov	r3, #250
 1086 008e DB00     		lsl	r3, r3, #3
 1087 0090 9A42     		cmp	r2, r3
 1088 0092 0BD8     		bhi	.L62
 622:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1089              		.loc 1 622 0 is_stmt 0 discriminator 1
 1090 0094 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 32


 1091 0096 1A88     		ldrh	r2, [r3]
 1092 0098 284B     		ldr	r3, .L75+20
 1093 009a 9A42     		cmp	r2, r3
 1094 009c 06D9     		bls	.L62
 626:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1095              		.loc 1 626 0 is_stmt 1
 1096 009e 3B1D     		add	r3, r7, #4
 1097 00a0 1B88     		ldrh	r3, [r3]
 1098 00a2 0120     		mov	r0, #1
 1099 00a4 191C     		mov	r1, r3
 1100 00a6 FFF7FEFF 		bl	ServoGoalPosition
 1101 00aa 04E0     		b	.L63
 1102              	.L62:
 633:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1103              		.loc 1 633 0
 1104 00ac 204B     		ldr	r3, .L75+8
 1105 00ae 0120     		mov	r0, #1
 1106 00b0 191C     		mov	r1, r3
 1107 00b2 FFF7FEFF 		bl	ServoGoalPosition
 1108              	.L63:
 635:.\main.c      ****             fin_exec++;
 1109              		.loc 1 635 0
 1110 00b6 224B     		ldr	r3, .L75+24
 1111 00b8 1B78     		ldrb	r3, [r3]
 1112 00ba 0133     		add	r3, r3, #1
 1113 00bc DAB2     		uxtb	r2, r3
 1114 00be 204B     		ldr	r3, .L75+24
 1115 00c0 1A70     		strb	r2, [r3]
 636:.\main.c      ****             break;
 1116              		.loc 1 636 0
 1117 00c2 00E0     		b	.L52
 1118              	.L74:
 596:.\main.c      ****             break;
 1119              		.loc 1 596 0
 1120 00c4 C046     		mov	r8, r8
 1121              	.L52:
 640:.\main.c      ****     }
 641:.\main.c      ****     
 642:.\main.c      ****     switch(wristRotate_state){ //transitions
 1122              		.loc 1 642 0
 1123 00c6 184B     		ldr	r3, .L75
 1124 00c8 1B78     		ldrb	r3, [r3]
 1125 00ca 012B     		cmp	r3, #1
 1126 00cc 0CD0     		beq	.L65
 1127 00ce 02DC     		bgt	.L66
 1128 00d0 002B     		cmp	r3, #0
 1129 00d2 05D0     		beq	.L67
 1130 00d4 24E0     		b	.L51
 1131              	.L66:
 1132 00d6 022B     		cmp	r3, #2
 1133 00d8 0AD0     		beq	.L68
 1134 00da 032B     		cmp	r3, #3
 1135 00dc 14D0     		beq	.L69
 1136 00de 1FE0     		b	.L51
 1137              	.L67:
 643:.\main.c      ****         case rotate_start:
 644:.\main.c      ****             wristRotate_state = rotate_init;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 33


 1138              		.loc 1 644 0
 1139 00e0 114B     		ldr	r3, .L75
 1140 00e2 0122     		mov	r2, #1
 1141 00e4 1A70     		strb	r2, [r3]
 645:.\main.c      ****             break;
 1142              		.loc 1 645 0
 1143 00e6 1BE0     		b	.L51
 1144              	.L65:
 646:.\main.c      ****         
 647:.\main.c      ****         case rotate_init:
 648:.\main.c      ****             wristRotate_state = rotate_wait;
 1145              		.loc 1 648 0
 1146 00e8 0F4B     		ldr	r3, .L75
 1147 00ea 0322     		mov	r2, #3
 1148 00ec 1A70     		strb	r2, [r3]
 649:.\main.c      ****             break;
 1149              		.loc 1 649 0
 1150 00ee 17E0     		b	.L51
 1151              	.L68:
 650:.\main.c      ****         
 651:.\main.c      ****         case rotate_control:
 652:.\main.c      ****             if(new_pack)
 1152              		.loc 1 652 0
 1153 00f0 144B     		ldr	r3, .L75+28
 1154 00f2 1B78     		ldrb	r3, [r3]
 1155 00f4 002B     		cmp	r3, #0
 1156 00f6 03D0     		beq	.L70
 653:.\main.c      ****             {
 654:.\main.c      ****                 wristRotate_state = rotate_control;
 1157              		.loc 1 654 0
 1158 00f8 0B4B     		ldr	r3, .L75
 1159 00fa 0222     		mov	r2, #2
 1160 00fc 1A70     		strb	r2, [r3]
 655:.\main.c      ****             }
 656:.\main.c      ****             else
 657:.\main.c      ****             {
 658:.\main.c      ****                 wristRotate_state = rotate_wait;
 659:.\main.c      ****             }
 660:.\main.c      ****             break;
 1161              		.loc 1 660 0
 1162 00fe 0FE0     		b	.L51
 1163              	.L70:
 658:.\main.c      ****                 wristRotate_state = rotate_wait;
 1164              		.loc 1 658 0
 1165 0100 094B     		ldr	r3, .L75
 1166 0102 0322     		mov	r2, #3
 1167 0104 1A70     		strb	r2, [r3]
 1168              		.loc 1 660 0
 1169 0106 0BE0     		b	.L51
 1170              	.L69:
 661:.\main.c      ****         
 662:.\main.c      ****         case rotate_wait:
 663:.\main.c      ****             if(new_pack)
 1171              		.loc 1 663 0
 1172 0108 0E4B     		ldr	r3, .L75+28
 1173 010a 1B78     		ldrb	r3, [r3]
 1174 010c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 34


 1175 010e 03D0     		beq	.L72
 664:.\main.c      ****             {
 665:.\main.c      ****                 wristRotate_state = rotate_control;
 1176              		.loc 1 665 0
 1177 0110 054B     		ldr	r3, .L75
 1178 0112 0222     		mov	r2, #2
 1179 0114 1A70     		strb	r2, [r3]
 1180 0116 02E0     		b	.L73
 1181              	.L72:
 666:.\main.c      ****             }
 667:.\main.c      ****             else
 668:.\main.c      ****             {
 669:.\main.c      ****                 wristRotate_state = rotate_wait;
 1182              		.loc 1 669 0
 1183 0118 034B     		ldr	r3, .L75
 1184 011a 0322     		mov	r2, #3
 1185 011c 1A70     		strb	r2, [r3]
 1186              	.L73:
 670:.\main.c      ****             }
 671:.\main.c      ****             break;
 1187              		.loc 1 671 0
 1188 011e C046     		mov	r8, r8
 1189              	.L51:
 672:.\main.c      ****     }    
 673:.\main.c      **** }
 1190              		.loc 1 673 0
 1191 0120 BD46     		mov	sp, r7
 1192 0122 03B0     		add	sp, sp, #12
 1193              		@ sp needed
 1194 0124 90BD     		pop	{r4, r7, pc}
 1195              	.L76:
 1196 0126 C046     		.align	2
 1197              	.L75:
 1198 0128 00000000 		.word	wristRotate_state
 1199 012c 00000000 		.word	WR_array
 1200 0130 DC050000 		.word	1500
 1201 0134 00000000 		.word	WR_arr_cspot
 1202 0138 00000000 		.word	data_array
 1203 013c E7030000 		.word	999
 1204 0140 00000000 		.word	fin_exec
 1205 0144 00000000 		.word	new_pack
 1206              		.cfi_endproc
 1207              	.LFE44:
 1208              		.size	wristRotate, .-wristRotate
 1209              		.section	.text.send_feedback,"ax",%progbits
 1210              		.align	2
 1211              		.global	send_feedback
 1212              		.code	16
 1213              		.thumb_func
 1214              		.type	send_feedback, %function
 1215              	send_feedback:
 1216              	.LFB45:
 674:.\main.c      **** 
 675:.\main.c      **** void send_feedback()
 676:.\main.c      **** {
 1217              		.loc 1 676 0
 1218              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 35


 1219 0000 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 0002 00AF     		add	r7, sp, #0
 1224              		.cfi_def_cfa_register 7
 677:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 678:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 679:.\main.c      ****     //TODO define system state
 680:.\main.c      ****     //send packet via serial to wiznet
 681:.\main.c      **** }
 1225              		.loc 1 681 0
 1226 0004 BD46     		mov	sp, r7
 1227              		@ sp needed
 1228 0006 80BD     		pop	{r7, pc}
 1229              		.cfi_endproc
 1230              	.LFE45:
 1231              		.size	send_feedback, .-send_feedback
 1232              		.comm	elbow_state,1,1
 1233              		.section	.text.elbow,"ax",%progbits
 1234              		.align	2
 1235              		.global	elbow
 1236              		.code	16
 1237              		.thumb_func
 1238              		.type	elbow, %function
 1239              	elbow:
 1240              	.LFB46:
 682:.\main.c      **** 
 683:.\main.c      **** //control the elbow
 684:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 685:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 686:.\main.c      **** void elbow()
 687:.\main.c      **** { 
 1241              		.loc 1 687 0
 1242              		.cfi_startproc
 1243 0000 90B5     		push	{r4, r7, lr}
 1244              		.cfi_def_cfa_offset 12
 1245              		.cfi_offset 4, -12
 1246              		.cfi_offset 7, -8
 1247              		.cfi_offset 14, -4
 1248 0002 85B0     		sub	sp, sp, #20
 1249              		.cfi_def_cfa_offset 32
 1250 0004 02AF     		add	r7, sp, #8
 1251              		.cfi_def_cfa 7, 24
 688:.\main.c      ****     //take instruction from data_array
 689:.\main.c      ****     //smooth input
 690:.\main.c      ****     //actuate the elbow using PWM
 691:.\main.c      ****     //get feedback
 692:.\main.c      ****     uint8 i;
 693:.\main.c      ****     uint16 avg;
 694:.\main.c      ****     
 695:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 1252              		.loc 1 695 0
 1253 0006 3C1D     		add	r4, r7, #4
 1254 0008 0120     		mov	r0, #1
 1255 000a FFF7FEFF 		bl	potFeedback
 1256 000e 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 36


 1257 0010 2380     		strh	r3, [r4]
 696:.\main.c      ****     
 697:.\main.c      ****     switch(elbow_state){ //actions
 1258              		.loc 1 697 0
 1259 0012 754B     		ldr	r3, .L112
 1260 0014 1B78     		ldrb	r3, [r3]
 1261 0016 012B     		cmp	r3, #1
 1262 0018 07D0     		beq	.L80
 1263 001a 00DC     		bgt	.LCB1120
 1264 001c B2E0     		b	.L111	@long jump
 1265              	.LCB1120:
 1266 001e 022B     		cmp	r3, #2
 1267 0020 1AD0     		beq	.L83
 1268 0022 032B     		cmp	r3, #3
 1269 0024 00D1     		bne	.LCB1124
 1270 0026 9EE0     		b	.L84	@long jump
 1271              	.LCB1124:
 1272 0028 ADE0     		b	.L79
 1273              	.L80:
 698:.\main.c      ****         case elbw_start:
 699:.\main.c      ****             break;
 700:.\main.c      **** 
 701:.\main.c      ****         case elbw_init:
 702:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1274              		.loc 1 702 0
 1275 002a FB1D     		add	r3, r7, #7
 1276 002c 0022     		mov	r2, #0
 1277 002e 1A70     		strb	r2, [r3]
 1278 0030 0AE0     		b	.L85
 1279              	.L86:
 703:.\main.c      ****             {
 704:.\main.c      ****                 elbow_array[i] = 1500;
 1280              		.loc 1 704 0 discriminator 2
 1281 0032 FB1D     		add	r3, r7, #7
 1282 0034 1A78     		ldrb	r2, [r3]
 1283 0036 6D4B     		ldr	r3, .L112+4
 1284 0038 5200     		lsl	r2, r2, #1
 1285 003a 6D49     		ldr	r1, .L112+8
 1286 003c D152     		strh	r1, [r2, r3]
 702:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1287              		.loc 1 702 0 discriminator 2
 1288 003e FB1D     		add	r3, r7, #7
 1289 0040 1A78     		ldrb	r2, [r3]
 1290 0042 FB1D     		add	r3, r7, #7
 1291 0044 0132     		add	r2, r2, #1
 1292 0046 1A70     		strb	r2, [r3]
 1293              	.L85:
 702:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1294              		.loc 1 702 0 is_stmt 0 discriminator 1
 1295 0048 FB1D     		add	r3, r7, #7
 1296 004a 1B78     		ldrb	r3, [r3]
 1297 004c 132B     		cmp	r3, #19
 1298 004e F0D9     		bls	.L86
 705:.\main.c      ****             }
 706:.\main.c      ****             elbw_arr_cspot = 0;
 1299              		.loc 1 706 0 is_stmt 1
 1300 0050 684B     		ldr	r3, .L112+12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 37


 1301 0052 0022     		mov	r2, #0
 1302 0054 1A70     		strb	r2, [r3]
 707:.\main.c      ****             break;
 1303              		.loc 1 707 0
 1304 0056 96E0     		b	.L79
 1305              	.L83:
 708:.\main.c      **** 
 709:.\main.c      ****         case elbw_execute:
 710:.\main.c      ****             make_command(elbow_array, elbw_arr_cspot, data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 1306              		.loc 1 710 0
 1307 0058 664B     		ldr	r3, .L112+12
 1308 005a 1A78     		ldrb	r2, [r3]
 1309 005c 6349     		ldr	r1, .L112+4
 1310 005e 664B     		ldr	r3, .L112+16
 1311 0060 0920     		mov	r0, #9
 1312 0062 0090     		str	r0, [sp]
 1313 0064 081C     		mov	r0, r1
 1314 0066 111C     		mov	r1, r2
 1315 0068 1A1C     		mov	r2, r3
 1316 006a 0823     		mov	r3, #8
 1317 006c FFF7FEFF 		bl	make_command
 711:.\main.c      ****             
 712:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 1318              		.loc 1 712 0
 1319 0070 604B     		ldr	r3, .L112+12
 1320 0072 1B78     		ldrb	r3, [r3]
 1321 0074 122B     		cmp	r3, #18
 1322 0076 06D8     		bhi	.L87
 713:.\main.c      ****             {
 714:.\main.c      ****                 elbw_arr_cspot++;
 1323              		.loc 1 714 0
 1324 0078 5E4B     		ldr	r3, .L112+12
 1325 007a 1B78     		ldrb	r3, [r3]
 1326 007c 0133     		add	r3, r3, #1
 1327 007e DAB2     		uxtb	r2, r3
 1328 0080 5C4B     		ldr	r3, .L112+12
 1329 0082 1A70     		strb	r2, [r3]
 1330 0084 02E0     		b	.L88
 1331              	.L87:
 715:.\main.c      ****             }
 716:.\main.c      ****             else
 717:.\main.c      ****             {
 718:.\main.c      ****                 elbw_arr_cspot = 0;
 1332              		.loc 1 718 0
 1333 0086 5B4B     		ldr	r3, .L112+12
 1334 0088 0022     		mov	r2, #0
 1335 008a 1A70     		strb	r2, [r3]
 1336              	.L88:
 719:.\main.c      ****             }
 720:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 1337              		.loc 1 720 0
 1338 008c BC1C     		add	r4, r7, #2
 1339 008e 574B     		ldr	r3, .L112+4
 1340 0090 181C     		mov	r0, r3
 1341 0092 1421     		mov	r1, #20
 1342 0094 FFF7FEFF 		bl	average
 1343 0098 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 38


 1344 009a 2380     		strh	r3, [r4]
 721:.\main.c      ****            
 722:.\main.c      ****             //uint16 feedback = potFeedback(ELBOW_POT); --see above
 723:.\main.c      ****             //TODO make sure reading from correct pots
 724:.\main.c      **** //            char buffer[20];
 725:.\main.c      **** //            
 726:.\main.c      **** //            itoa(avg, buffer);
 727:.\main.c      **** //            
 728:.\main.c      **** //            UART_1_UartPutString(buffer);      
 729:.\main.c      **** //            UART_1_UartPutString("\r\n");      
 730:.\main.c      ****             
 731:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 1345              		.loc 1 731 0
 1346 009c 3B1D     		add	r3, r7, #4
 1347 009e 1B88     		ldrh	r3, [r3]
 1348 00a0 642B     		cmp	r3, #100
 1349 00a2 1FD8     		bhi	.L89
 732:.\main.c      ****             {
 733:.\main.c      ****                 if (avg < 1500)
 1350              		.loc 1 733 0
 1351 00a4 BB1C     		add	r3, r7, #2
 1352 00a6 1A88     		ldrh	r2, [r3]
 1353 00a8 544B     		ldr	r3, .L112+20
 1354 00aa 9A42     		cmp	r2, r3
 1355 00ac 04D8     		bhi	.L90
 734:.\main.c      ****                 {
 735:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1356              		.loc 1 735 0
 1357 00ae 504B     		ldr	r3, .L112+8
 1358 00b0 181C     		mov	r0, r3
 1359 00b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1360 00b6 4FE0     		b	.L93
 1361              	.L90:
 736:.\main.c      ****                 }
 737:.\main.c      ****                 else
 738:.\main.c      ****                 {
 739:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1362              		.loc 1 739 0
 1363 00b8 BB1C     		add	r3, r7, #2
 1364 00ba 1A88     		ldrh	r2, [r3]
 1365 00bc FA23     		mov	r3, #250
 1366 00be DB00     		lsl	r3, r3, #3
 1367 00c0 9A42     		cmp	r2, r3
 1368 00c2 0AD8     		bhi	.L92
 1369              		.loc 1 739 0 is_stmt 0 discriminator 1
 1370 00c4 BB1C     		add	r3, r7, #2
 1371 00c6 1A88     		ldrh	r2, [r3]
 1372 00c8 4D4B     		ldr	r3, .L112+24
 1373 00ca 9A42     		cmp	r2, r3
 1374 00cc 05D9     		bls	.L92
 740:.\main.c      ****                     {
 741:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1375              		.loc 1 741 0 is_stmt 1
 1376 00ce BB1C     		add	r3, r7, #2
 1377 00d0 1B88     		ldrh	r3, [r3]
 1378 00d2 181C     		mov	r0, r3
 1379 00d4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 39


 1380 00d8 3EE0     		b	.L93
 1381              	.L92:
 742:.\main.c      ****                     }
 743:.\main.c      ****                     else
 744:.\main.c      ****                     {
 745:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1382              		.loc 1 745 0
 1383 00da 454B     		ldr	r3, .L112+8
 1384 00dc 181C     		mov	r0, r3
 1385 00de FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1386 00e2 39E0     		b	.L93
 1387              	.L89:
 746:.\main.c      ****                     }
 747:.\main.c      ****                 }
 748:.\main.c      ****             }
 749:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 1388              		.loc 1 749 0
 1389 00e4 3B1D     		add	r3, r7, #4
 1390 00e6 1A88     		ldrh	r2, [r3]
 1391 00e8 454B     		ldr	r3, .L112+24
 1392 00ea 9A42     		cmp	r2, r3
 1393 00ec 1FD9     		bls	.L94
 750:.\main.c      ****             {
 751:.\main.c      ****                 if(avg > 1500)
 1394              		.loc 1 751 0
 1395 00ee BB1C     		add	r3, r7, #2
 1396 00f0 1A88     		ldrh	r2, [r3]
 1397 00f2 3F4B     		ldr	r3, .L112+8
 1398 00f4 9A42     		cmp	r2, r3
 1399 00f6 04D9     		bls	.L95
 752:.\main.c      ****                 {
 753:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1400              		.loc 1 753 0
 1401 00f8 3D4B     		ldr	r3, .L112+8
 1402 00fa 181C     		mov	r0, r3
 1403 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1404 0100 2AE0     		b	.L93
 1405              	.L95:
 754:.\main.c      ****                 }
 755:.\main.c      ****                 else
 756:.\main.c      ****                 {
 757:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1406              		.loc 1 757 0
 1407 0102 BB1C     		add	r3, r7, #2
 1408 0104 1A88     		ldrh	r2, [r3]
 1409 0106 FA23     		mov	r3, #250
 1410 0108 DB00     		lsl	r3, r3, #3
 1411 010a 9A42     		cmp	r2, r3
 1412 010c 0AD8     		bhi	.L97
 1413              		.loc 1 757 0 is_stmt 0 discriminator 1
 1414 010e BB1C     		add	r3, r7, #2
 1415 0110 1A88     		ldrh	r2, [r3]
 1416 0112 3B4B     		ldr	r3, .L112+24
 1417 0114 9A42     		cmp	r2, r3
 1418 0116 05D9     		bls	.L97
 758:.\main.c      ****                     {
 759:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 40


 1419              		.loc 1 759 0 is_stmt 1
 1420 0118 BB1C     		add	r3, r7, #2
 1421 011a 1B88     		ldrh	r3, [r3]
 1422 011c 181C     		mov	r0, r3
 1423 011e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1424 0122 19E0     		b	.L93
 1425              	.L97:
 760:.\main.c      ****                     }
 761:.\main.c      ****                     else
 762:.\main.c      ****                     {
 763:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1426              		.loc 1 763 0
 1427 0124 324B     		ldr	r3, .L112+8
 1428 0126 181C     		mov	r0, r3
 1429 0128 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1430 012c 14E0     		b	.L93
 1431              	.L94:
 764:.\main.c      ****                     }
 765:.\main.c      ****                 }
 766:.\main.c      ****             }
 767:.\main.c      ****             else
 768:.\main.c      ****             {
 769:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1432              		.loc 1 769 0
 1433 012e BB1C     		add	r3, r7, #2
 1434 0130 1A88     		ldrh	r2, [r3]
 1435 0132 FA23     		mov	r3, #250
 1436 0134 DB00     		lsl	r3, r3, #3
 1437 0136 9A42     		cmp	r2, r3
 1438 0138 0AD8     		bhi	.L98
 1439              		.loc 1 769 0 is_stmt 0 discriminator 1
 1440 013a BB1C     		add	r3, r7, #2
 1441 013c 1A88     		ldrh	r2, [r3]
 1442 013e 304B     		ldr	r3, .L112+24
 1443 0140 9A42     		cmp	r2, r3
 1444 0142 05D9     		bls	.L98
 770:.\main.c      ****                 {
 771:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 1445              		.loc 1 771 0 is_stmt 1
 1446 0144 BB1C     		add	r3, r7, #2
 1447 0146 1B88     		ldrh	r3, [r3]
 1448 0148 181C     		mov	r0, r3
 1449 014a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1450 014e 03E0     		b	.L93
 1451              	.L98:
 772:.\main.c      ****                 }
 773:.\main.c      ****                 else
 774:.\main.c      ****                 {
 775:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1452              		.loc 1 775 0
 1453 0150 274B     		ldr	r3, .L112+8
 1454 0152 181C     		mov	r0, r3
 1455 0154 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1456              	.L93:
 776:.\main.c      ****                 }
 777:.\main.c      ****             }
 778:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 41


 779:.\main.c      ****             fin_exec++;
 1457              		.loc 1 779 0
 1458 0158 2A4B     		ldr	r3, .L112+28
 1459 015a 1B78     		ldrb	r3, [r3]
 1460 015c 0133     		add	r3, r3, #1
 1461 015e DAB2     		uxtb	r2, r3
 1462 0160 284B     		ldr	r3, .L112+28
 1463 0162 1A70     		strb	r2, [r3]
 780:.\main.c      ****             break;
 1464              		.loc 1 780 0
 1465 0164 0FE0     		b	.L79
 1466              	.L84:
 781:.\main.c      ****             
 782:.\main.c      ****         case elbw_wait:
 783:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 1467              		.loc 1 783 0
 1468 0166 3B1D     		add	r3, r7, #4
 1469 0168 1B88     		ldrh	r3, [r3]
 1470 016a 642B     		cmp	r3, #100
 1471 016c 04D9     		bls	.L99
 1472              		.loc 1 783 0 is_stmt 0 discriminator 1
 1473 016e 3B1D     		add	r3, r7, #4
 1474 0170 1A88     		ldrh	r2, [r3]
 1475 0172 234B     		ldr	r3, .L112+24
 1476 0174 9A42     		cmp	r2, r3
 1477 0176 04D9     		bls	.L100
 1478              	.L99:
 784:.\main.c      ****             {
 785:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 1479              		.loc 1 785 0 is_stmt 1
 1480 0178 1D4B     		ldr	r3, .L112+8
 1481 017a 181C     		mov	r0, r3
 1482 017c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 786:.\main.c      ****             }
 787:.\main.c      ****             break;
 1483              		.loc 1 787 0
 1484 0180 01E0     		b	.L79
 1485              	.L100:
 1486 0182 00E0     		b	.L79
 1487              	.L111:
 699:.\main.c      ****             break;
 1488              		.loc 1 699 0
 1489 0184 C046     		mov	r8, r8
 1490              	.L79:
 788:.\main.c      ****     }
 789:.\main.c      ****     
 790:.\main.c      ****     switch(elbow_state){ //transitions
 1491              		.loc 1 790 0
 1492 0186 184B     		ldr	r3, .L112
 1493 0188 1B78     		ldrb	r3, [r3]
 1494 018a 012B     		cmp	r3, #1
 1495 018c 0CD0     		beq	.L102
 1496 018e 02DC     		bgt	.L103
 1497 0190 002B     		cmp	r3, #0
 1498 0192 05D0     		beq	.L104
 1499 0194 24E0     		b	.L78
 1500              	.L103:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 42


 1501 0196 022B     		cmp	r3, #2
 1502 0198 0AD0     		beq	.L105
 1503 019a 032B     		cmp	r3, #3
 1504 019c 14D0     		beq	.L106
 1505 019e 1FE0     		b	.L78
 1506              	.L104:
 791:.\main.c      ****         case elbw_start:
 792:.\main.c      ****             elbow_state = elbw_init;
 1507              		.loc 1 792 0
 1508 01a0 114B     		ldr	r3, .L112
 1509 01a2 0122     		mov	r2, #1
 1510 01a4 1A70     		strb	r2, [r3]
 793:.\main.c      ****             break;
 1511              		.loc 1 793 0
 1512 01a6 1BE0     		b	.L78
 1513              	.L102:
 794:.\main.c      ****         
 795:.\main.c      ****         case elbw_init:
 796:.\main.c      ****             elbow_state = elbw_wait;
 1514              		.loc 1 796 0
 1515 01a8 0F4B     		ldr	r3, .L112
 1516 01aa 0322     		mov	r2, #3
 1517 01ac 1A70     		strb	r2, [r3]
 797:.\main.c      ****             break;
 1518              		.loc 1 797 0
 1519 01ae 17E0     		b	.L78
 1520              	.L105:
 798:.\main.c      ****         
 799:.\main.c      ****         case elbw_execute:
 800:.\main.c      ****             if(new_pack)
 1521              		.loc 1 800 0
 1522 01b0 154B     		ldr	r3, .L112+32
 1523 01b2 1B78     		ldrb	r3, [r3]
 1524 01b4 002B     		cmp	r3, #0
 1525 01b6 03D0     		beq	.L107
 801:.\main.c      ****             {
 802:.\main.c      ****                 elbow_state = elbw_execute;
 1526              		.loc 1 802 0
 1527 01b8 0B4B     		ldr	r3, .L112
 1528 01ba 0222     		mov	r2, #2
 1529 01bc 1A70     		strb	r2, [r3]
 803:.\main.c      ****             }
 804:.\main.c      ****             else
 805:.\main.c      ****             {
 806:.\main.c      ****                 elbow_state = elbw_wait;
 807:.\main.c      ****             }
 808:.\main.c      ****             break;
 1530              		.loc 1 808 0
 1531 01be 0FE0     		b	.L78
 1532              	.L107:
 806:.\main.c      ****                 elbow_state = elbw_wait;
 1533              		.loc 1 806 0
 1534 01c0 094B     		ldr	r3, .L112
 1535 01c2 0322     		mov	r2, #3
 1536 01c4 1A70     		strb	r2, [r3]
 1537              		.loc 1 808 0
 1538 01c6 0BE0     		b	.L78
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 43


 1539              	.L106:
 809:.\main.c      ****         
 810:.\main.c      ****         case elbw_wait:
 811:.\main.c      ****             if(new_pack)
 1540              		.loc 1 811 0
 1541 01c8 0F4B     		ldr	r3, .L112+32
 1542 01ca 1B78     		ldrb	r3, [r3]
 1543 01cc 002B     		cmp	r3, #0
 1544 01ce 03D0     		beq	.L109
 812:.\main.c      ****             {
 813:.\main.c      ****                 elbow_state = elbw_execute;
 1545              		.loc 1 813 0
 1546 01d0 054B     		ldr	r3, .L112
 1547 01d2 0222     		mov	r2, #2
 1548 01d4 1A70     		strb	r2, [r3]
 1549 01d6 02E0     		b	.L110
 1550              	.L109:
 814:.\main.c      ****             }
 815:.\main.c      ****             else
 816:.\main.c      ****             {
 817:.\main.c      ****                 elbow_state = elbw_wait; 
 1551              		.loc 1 817 0
 1552 01d8 034B     		ldr	r3, .L112
 1553 01da 0322     		mov	r2, #3
 1554 01dc 1A70     		strb	r2, [r3]
 1555              	.L110:
 818:.\main.c      ****             }
 819:.\main.c      ****             break;
 1556              		.loc 1 819 0
 1557 01de C046     		mov	r8, r8
 1558              	.L78:
 820:.\main.c      ****     }    
 821:.\main.c      **** }
 1559              		.loc 1 821 0
 1560 01e0 BD46     		mov	sp, r7
 1561 01e2 03B0     		add	sp, sp, #12
 1562              		@ sp needed
 1563 01e4 90BD     		pop	{r4, r7, pc}
 1564              	.L113:
 1565 01e6 C046     		.align	2
 1566              	.L112:
 1567 01e8 00000000 		.word	elbow_state
 1568 01ec 00000000 		.word	elbow_array
 1569 01f0 DC050000 		.word	1500
 1570 01f4 00000000 		.word	elbw_arr_cspot
 1571 01f8 00000000 		.word	data_array
 1572 01fc DB050000 		.word	1499
 1573 0200 E7030000 		.word	999
 1574 0204 00000000 		.word	fin_exec
 1575 0208 00000000 		.word	new_pack
 1576              		.cfi_endproc
 1577              	.LFE46:
 1578              		.size	elbow, .-elbow
 1579              		.comm	shoulder_state,1,1
 1580              		.section	.text.shoulder,"ax",%progbits
 1581              		.align	2
 1582              		.global	shoulder
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 44


 1583              		.code	16
 1584              		.thumb_func
 1585              		.type	shoulder, %function
 1586              	shoulder:
 1587              	.LFB47:
 822:.\main.c      **** 
 823:.\main.c      **** //control the shoulder
 824:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 825:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 826:.\main.c      **** void shoulder()
 827:.\main.c      **** { 
 1588              		.loc 1 827 0
 1589              		.cfi_startproc
 1590 0000 90B5     		push	{r4, r7, lr}
 1591              		.cfi_def_cfa_offset 12
 1592              		.cfi_offset 4, -12
 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 85B0     		sub	sp, sp, #20
 1596              		.cfi_def_cfa_offset 32
 1597 0004 02AF     		add	r7, sp, #8
 1598              		.cfi_def_cfa 7, 24
 828:.\main.c      ****     //take instruction from data_array
 829:.\main.c      ****     //smooth input
 830:.\main.c      ****     //actuate the shoulder using PWM
 831:.\main.c      ****     //get feedback
 832:.\main.c      ****     uint8 i;
 833:.\main.c      ****     uint16 avg;
 834:.\main.c      ****     int16 command;
 835:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 1599              		.loc 1 835 0
 1600 0006 3C1D     		add	r4, r7, #4
 1601 0008 0020     		mov	r0, #0
 1602 000a FFF7FEFF 		bl	potFeedback
 1603 000e 031C     		mov	r3, r0
 1604 0010 2380     		strh	r3, [r4]
 836:.\main.c      ****     
 837:.\main.c      ****     switch(shoulder_state){ //actions
 1605              		.loc 1 837 0
 1606 0012 774B     		ldr	r3, .L148
 1607 0014 1B78     		ldrb	r3, [r3]
 1608 0016 012B     		cmp	r3, #1
 1609 0018 07D0     		beq	.L116
 1610 001a 00DC     		bgt	.LCB1458
 1611 001c B6E0     		b	.L147	@long jump
 1612              	.LCB1458:
 1613 001e 022B     		cmp	r3, #2
 1614 0020 1AD0     		beq	.L119
 1615 0022 032B     		cmp	r3, #3
 1616 0024 00D1     		bne	.LCB1462
 1617 0026 A0E0     		b	.L120	@long jump
 1618              	.LCB1462:
 1619 0028 B1E0     		b	.L115
 1620              	.L116:
 838:.\main.c      ****         case shldr_start:
 839:.\main.c      ****             break;
 840:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 45


 841:.\main.c      ****         case shldr_init:
 842:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1621              		.loc 1 842 0
 1622 002a FB1D     		add	r3, r7, #7
 1623 002c 0022     		mov	r2, #0
 1624 002e 1A70     		strb	r2, [r3]
 1625 0030 0AE0     		b	.L121
 1626              	.L122:
 843:.\main.c      ****             {
 844:.\main.c      ****                 shoulder_array[i] = 1500;
 1627              		.loc 1 844 0 discriminator 2
 1628 0032 FB1D     		add	r3, r7, #7
 1629 0034 1A78     		ldrb	r2, [r3]
 1630 0036 6F4B     		ldr	r3, .L148+4
 1631 0038 5200     		lsl	r2, r2, #1
 1632 003a 6F49     		ldr	r1, .L148+8
 1633 003c D152     		strh	r1, [r2, r3]
 842:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1634              		.loc 1 842 0 discriminator 2
 1635 003e FB1D     		add	r3, r7, #7
 1636 0040 1A78     		ldrb	r2, [r3]
 1637 0042 FB1D     		add	r3, r7, #7
 1638 0044 0132     		add	r2, r2, #1
 1639 0046 1A70     		strb	r2, [r3]
 1640              	.L121:
 842:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 1641              		.loc 1 842 0 is_stmt 0 discriminator 1
 1642 0048 FB1D     		add	r3, r7, #7
 1643 004a 1B78     		ldrb	r3, [r3]
 1644 004c 132B     		cmp	r3, #19
 1645 004e F0D9     		bls	.L122
 845:.\main.c      ****             }
 846:.\main.c      ****             shldr_arr_cspot = 0;
 1646              		.loc 1 846 0 is_stmt 1
 1647 0050 6A4B     		ldr	r3, .L148+12
 1648 0052 0022     		mov	r2, #0
 1649 0054 1A70     		strb	r2, [r3]
 847:.\main.c      ****             break;
 1650              		.loc 1 847 0
 1651 0056 9AE0     		b	.L115
 1652              	.L119:
 848:.\main.c      **** 
 849:.\main.c      ****         case shldr_execute:
 850:.\main.c      ****             make_command(shoulder_array, shldr_arr_cspot, data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 1653              		.loc 1 850 0
 1654 0058 684B     		ldr	r3, .L148+12
 1655 005a 1A78     		ldrb	r2, [r3]
 1656 005c 6549     		ldr	r1, .L148+4
 1657 005e 684B     		ldr	r3, .L148+16
 1658 0060 0720     		mov	r0, #7
 1659 0062 0090     		str	r0, [sp]
 1660 0064 081C     		mov	r0, r1
 1661 0066 111C     		mov	r1, r2
 1662 0068 1A1C     		mov	r2, r3
 1663 006a 0623     		mov	r3, #6
 1664 006c FFF7FEFF 		bl	make_command
 851:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 46


 852:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 1665              		.loc 1 852 0
 1666 0070 624B     		ldr	r3, .L148+12
 1667 0072 1B78     		ldrb	r3, [r3]
 1668 0074 122B     		cmp	r3, #18
 1669 0076 06D8     		bhi	.L123
 853:.\main.c      ****             {
 854:.\main.c      ****                 shldr_arr_cspot++;
 1670              		.loc 1 854 0
 1671 0078 604B     		ldr	r3, .L148+12
 1672 007a 1B78     		ldrb	r3, [r3]
 1673 007c 0133     		add	r3, r3, #1
 1674 007e DAB2     		uxtb	r2, r3
 1675 0080 5E4B     		ldr	r3, .L148+12
 1676 0082 1A70     		strb	r2, [r3]
 1677 0084 02E0     		b	.L124
 1678              	.L123:
 855:.\main.c      ****             }
 856:.\main.c      ****             else
 857:.\main.c      ****             {
 858:.\main.c      ****                 shldr_arr_cspot = 0;
 1679              		.loc 1 858 0
 1680 0086 5D4B     		ldr	r3, .L148+12
 1681 0088 0022     		mov	r2, #0
 1682 008a 1A70     		strb	r2, [r3]
 1683              	.L124:
 859:.\main.c      ****             }
 860:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 1684              		.loc 1 860 0
 1685 008c BC1C     		add	r4, r7, #2
 1686 008e 594B     		ldr	r3, .L148+4
 1687 0090 181C     		mov	r0, r3
 1688 0092 1421     		mov	r1, #20
 1689 0094 FFF7FEFF 		bl	average
 1690 0098 031C     		mov	r3, r0
 1691 009a 2380     		strh	r3, [r4]
 861:.\main.c      ****            
 862:.\main.c      ****             //uint16 feedback = potFeedback(SHOULDER_POT); -- see above
 863:.\main.c      ****             
 864:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 1692              		.loc 1 864 0
 1693 009c 3B1D     		add	r3, r7, #4
 1694 009e 1A88     		ldrh	r2, [r3]
 1695 00a0 8C23     		mov	r3, #140
 1696 00a2 5B00     		lsl	r3, r3, #1
 1697 00a4 9A42     		cmp	r2, r3
 1698 00a6 1FD8     		bhi	.L125
 865:.\main.c      ****             {
 866:.\main.c      ****                 if (avg < 1500)
 1699              		.loc 1 866 0
 1700 00a8 BB1C     		add	r3, r7, #2
 1701 00aa 1A88     		ldrh	r2, [r3]
 1702 00ac 554B     		ldr	r3, .L148+20
 1703 00ae 9A42     		cmp	r2, r3
 1704 00b0 04D8     		bhi	.L126
 867:.\main.c      ****                 {
 868:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 47


 1705              		.loc 1 868 0
 1706 00b2 514B     		ldr	r3, .L148+8
 1707 00b4 181C     		mov	r0, r3
 1708 00b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1709 00ba 4FE0     		b	.L129
 1710              	.L126:
 869:.\main.c      ****                 }
 870:.\main.c      ****                 else
 871:.\main.c      ****                 {
 872:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1711              		.loc 1 872 0
 1712 00bc BB1C     		add	r3, r7, #2
 1713 00be 1A88     		ldrh	r2, [r3]
 1714 00c0 FA23     		mov	r3, #250
 1715 00c2 DB00     		lsl	r3, r3, #3
 1716 00c4 9A42     		cmp	r2, r3
 1717 00c6 0AD8     		bhi	.L128
 1718              		.loc 1 872 0 is_stmt 0 discriminator 1
 1719 00c8 BB1C     		add	r3, r7, #2
 1720 00ca 1A88     		ldrh	r2, [r3]
 1721 00cc 4E4B     		ldr	r3, .L148+24
 1722 00ce 9A42     		cmp	r2, r3
 1723 00d0 05D9     		bls	.L128
 873:.\main.c      ****                     {
 874:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1724              		.loc 1 874 0 is_stmt 1
 1725 00d2 BB1C     		add	r3, r7, #2
 1726 00d4 1B88     		ldrh	r3, [r3]
 1727 00d6 181C     		mov	r0, r3
 1728 00d8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1729 00dc 3EE0     		b	.L129
 1730              	.L128:
 875:.\main.c      ****                     }
 876:.\main.c      ****                     else
 877:.\main.c      ****                     {
 878:.\main.c      ****                         //throw error
 879:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 1731              		.loc 1 879 0
 1732 00de 464B     		ldr	r3, .L148+8
 1733 00e0 181C     		mov	r0, r3
 1734 00e2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1735 00e6 39E0     		b	.L129
 1736              	.L125:
 880:.\main.c      ****                     }
 881:.\main.c      ****                 }
 882:.\main.c      ****             }
 883:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 1737              		.loc 1 883 0
 1738 00e8 3B1D     		add	r3, r7, #4
 1739 00ea 1A88     		ldrh	r2, [r3]
 1740 00ec 474B     		ldr	r3, .L148+28
 1741 00ee 9A42     		cmp	r2, r3
 1742 00f0 1FD9     		bls	.L130
 884:.\main.c      ****             {
 885:.\main.c      ****                 if(avg > 1500)
 1743              		.loc 1 885 0
 1744 00f2 BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 48


 1745 00f4 1A88     		ldrh	r2, [r3]
 1746 00f6 404B     		ldr	r3, .L148+8
 1747 00f8 9A42     		cmp	r2, r3
 1748 00fa 04D9     		bls	.L131
 886:.\main.c      ****                 {
 887:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1749              		.loc 1 887 0
 1750 00fc 3E4B     		ldr	r3, .L148+8
 1751 00fe 181C     		mov	r0, r3
 1752 0100 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1753 0104 2AE0     		b	.L129
 1754              	.L131:
 888:.\main.c      ****                 }
 889:.\main.c      ****                 else
 890:.\main.c      ****                 {
 891:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1755              		.loc 1 891 0
 1756 0106 BB1C     		add	r3, r7, #2
 1757 0108 1A88     		ldrh	r2, [r3]
 1758 010a FA23     		mov	r3, #250
 1759 010c DB00     		lsl	r3, r3, #3
 1760 010e 9A42     		cmp	r2, r3
 1761 0110 0AD8     		bhi	.L133
 1762              		.loc 1 891 0 is_stmt 0 discriminator 1
 1763 0112 BB1C     		add	r3, r7, #2
 1764 0114 1A88     		ldrh	r2, [r3]
 1765 0116 3C4B     		ldr	r3, .L148+24
 1766 0118 9A42     		cmp	r2, r3
 1767 011a 05D9     		bls	.L133
 892:.\main.c      ****                     {
 893:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 1768              		.loc 1 893 0 is_stmt 1
 1769 011c BB1C     		add	r3, r7, #2
 1770 011e 1B88     		ldrh	r3, [r3]
 1771 0120 181C     		mov	r0, r3
 1772 0122 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1773 0126 19E0     		b	.L129
 1774              	.L133:
 894:.\main.c      ****                     }
 895:.\main.c      ****                     else
 896:.\main.c      ****                     {
 897:.\main.c      ****                         //throw error
 898:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 1775              		.loc 1 898 0
 1776 0128 334B     		ldr	r3, .L148+8
 1777 012a 181C     		mov	r0, r3
 1778 012c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1779 0130 14E0     		b	.L129
 1780              	.L130:
 899:.\main.c      ****                     }
 900:.\main.c      ****                 }
 901:.\main.c      ****             }
 902:.\main.c      ****             else
 903:.\main.c      ****             {
 904:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1781              		.loc 1 904 0
 1782 0132 BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 49


 1783 0134 1A88     		ldrh	r2, [r3]
 1784 0136 FA23     		mov	r3, #250
 1785 0138 DB00     		lsl	r3, r3, #3
 1786 013a 9A42     		cmp	r2, r3
 1787 013c 0AD8     		bhi	.L134
 1788              		.loc 1 904 0 is_stmt 0 discriminator 1
 1789 013e BB1C     		add	r3, r7, #2
 1790 0140 1A88     		ldrh	r2, [r3]
 1791 0142 314B     		ldr	r3, .L148+24
 1792 0144 9A42     		cmp	r2, r3
 1793 0146 05D9     		bls	.L134
 905:.\main.c      ****                 {
 906:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 1794              		.loc 1 906 0 is_stmt 1
 1795 0148 BB1C     		add	r3, r7, #2
 1796 014a 1B88     		ldrh	r3, [r3]
 1797 014c 181C     		mov	r0, r3
 1798 014e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1799 0152 03E0     		b	.L129
 1800              	.L134:
 907:.\main.c      ****                 }
 908:.\main.c      ****                 else
 909:.\main.c      ****                 {
 910:.\main.c      ****                     //throw error
 911:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 1801              		.loc 1 911 0
 1802 0154 284B     		ldr	r3, .L148+8
 1803 0156 181C     		mov	r0, r3
 1804 0158 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 1805              	.L129:
 912:.\main.c      ****                 }
 913:.\main.c      ****             }
 914:.\main.c      ****             
 915:.\main.c      ****             fin_exec++;
 1806              		.loc 1 915 0
 1807 015c 2C4B     		ldr	r3, .L148+32
 1808 015e 1B78     		ldrb	r3, [r3]
 1809 0160 0133     		add	r3, r3, #1
 1810 0162 DAB2     		uxtb	r2, r3
 1811 0164 2A4B     		ldr	r3, .L148+32
 1812 0166 1A70     		strb	r2, [r3]
 916:.\main.c      ****             break;
 1813              		.loc 1 916 0
 1814 0168 11E0     		b	.L115
 1815              	.L120:
 917:.\main.c      ****             
 918:.\main.c      ****         case shldr_wait:
 919:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 1816              		.loc 1 919 0
 1817 016a 3B1D     		add	r3, r7, #4
 1818 016c 1A88     		ldrh	r2, [r3]
 1819 016e 8C23     		mov	r3, #140
 1820 0170 5B00     		lsl	r3, r3, #1
 1821 0172 9A42     		cmp	r2, r3
 1822 0174 04D9     		bls	.L135
 1823              		.loc 1 919 0 is_stmt 0 discriminator 1
 1824 0176 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 50


 1825 0178 1A88     		ldrh	r2, [r3]
 1826 017a 244B     		ldr	r3, .L148+28
 1827 017c 9A42     		cmp	r2, r3
 1828 017e 04D9     		bls	.L136
 1829              	.L135:
 920:.\main.c      ****             {
 921:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 1830              		.loc 1 921 0 is_stmt 1
 1831 0180 1D4B     		ldr	r3, .L148+8
 1832 0182 181C     		mov	r0, r3
 1833 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 922:.\main.c      ****             }
 923:.\main.c      ****             break;
 1834              		.loc 1 923 0
 1835 0188 01E0     		b	.L115
 1836              	.L136:
 1837 018a 00E0     		b	.L115
 1838              	.L147:
 839:.\main.c      ****             break;
 1839              		.loc 1 839 0
 1840 018c C046     		mov	r8, r8
 1841              	.L115:
 924:.\main.c      ****     }
 925:.\main.c      ****     
 926:.\main.c      ****     switch(shoulder_state){ //transitions
 1842              		.loc 1 926 0
 1843 018e 184B     		ldr	r3, .L148
 1844 0190 1B78     		ldrb	r3, [r3]
 1845 0192 012B     		cmp	r3, #1
 1846 0194 0CD0     		beq	.L138
 1847 0196 02DC     		bgt	.L139
 1848 0198 002B     		cmp	r3, #0
 1849 019a 05D0     		beq	.L140
 1850 019c 24E0     		b	.L114
 1851              	.L139:
 1852 019e 022B     		cmp	r3, #2
 1853 01a0 0AD0     		beq	.L141
 1854 01a2 032B     		cmp	r3, #3
 1855 01a4 14D0     		beq	.L142
 1856 01a6 1FE0     		b	.L114
 1857              	.L140:
 927:.\main.c      ****         case shldr_start:
 928:.\main.c      ****             shoulder_state = shldr_init;
 1858              		.loc 1 928 0
 1859 01a8 114B     		ldr	r3, .L148
 1860 01aa 0122     		mov	r2, #1
 1861 01ac 1A70     		strb	r2, [r3]
 929:.\main.c      ****             break;
 1862              		.loc 1 929 0
 1863 01ae 1BE0     		b	.L114
 1864              	.L138:
 930:.\main.c      ****         
 931:.\main.c      ****         case shldr_init:
 932:.\main.c      ****             shoulder_state = shldr_wait;
 1865              		.loc 1 932 0
 1866 01b0 0F4B     		ldr	r3, .L148
 1867 01b2 0322     		mov	r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 51


 1868 01b4 1A70     		strb	r2, [r3]
 933:.\main.c      ****             break;
 1869              		.loc 1 933 0
 1870 01b6 17E0     		b	.L114
 1871              	.L141:
 934:.\main.c      ****         
 935:.\main.c      ****         case shldr_execute:
 936:.\main.c      ****             if(new_pack)
 1872              		.loc 1 936 0
 1873 01b8 164B     		ldr	r3, .L148+36
 1874 01ba 1B78     		ldrb	r3, [r3]
 1875 01bc 002B     		cmp	r3, #0
 1876 01be 03D0     		beq	.L143
 937:.\main.c      ****             {
 938:.\main.c      ****                 shoulder_state = shldr_execute;
 1877              		.loc 1 938 0
 1878 01c0 0B4B     		ldr	r3, .L148
 1879 01c2 0222     		mov	r2, #2
 1880 01c4 1A70     		strb	r2, [r3]
 939:.\main.c      ****             }
 940:.\main.c      ****             else
 941:.\main.c      ****             {
 942:.\main.c      ****                 shoulder_state = shldr_wait;
 943:.\main.c      ****             }
 944:.\main.c      ****             break;
 1881              		.loc 1 944 0
 1882 01c6 0FE0     		b	.L114
 1883              	.L143:
 942:.\main.c      ****                 shoulder_state = shldr_wait;
 1884              		.loc 1 942 0
 1885 01c8 094B     		ldr	r3, .L148
 1886 01ca 0322     		mov	r2, #3
 1887 01cc 1A70     		strb	r2, [r3]
 1888              		.loc 1 944 0
 1889 01ce 0BE0     		b	.L114
 1890              	.L142:
 945:.\main.c      ****         
 946:.\main.c      ****         case shldr_wait:
 947:.\main.c      ****             if(new_pack)
 1891              		.loc 1 947 0
 1892 01d0 104B     		ldr	r3, .L148+36
 1893 01d2 1B78     		ldrb	r3, [r3]
 1894 01d4 002B     		cmp	r3, #0
 1895 01d6 03D0     		beq	.L145
 948:.\main.c      ****             {
 949:.\main.c      ****                 shoulder_state = shldr_execute;
 1896              		.loc 1 949 0
 1897 01d8 054B     		ldr	r3, .L148
 1898 01da 0222     		mov	r2, #2
 1899 01dc 1A70     		strb	r2, [r3]
 1900 01de 02E0     		b	.L146
 1901              	.L145:
 950:.\main.c      ****             }
 951:.\main.c      ****             else
 952:.\main.c      ****             {
 953:.\main.c      ****                 shoulder_state = shldr_wait; 
 1902              		.loc 1 953 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 52


 1903 01e0 034B     		ldr	r3, .L148
 1904 01e2 0322     		mov	r2, #3
 1905 01e4 1A70     		strb	r2, [r3]
 1906              	.L146:
 954:.\main.c      ****             }
 955:.\main.c      ****             break;
 1907              		.loc 1 955 0
 1908 01e6 C046     		mov	r8, r8
 1909              	.L114:
 956:.\main.c      ****     }    
 957:.\main.c      **** }
 1910              		.loc 1 957 0
 1911 01e8 BD46     		mov	sp, r7
 1912 01ea 03B0     		add	sp, sp, #12
 1913              		@ sp needed
 1914 01ec 90BD     		pop	{r4, r7, pc}
 1915              	.L149:
 1916 01ee C046     		.align	2
 1917              	.L148:
 1918 01f0 00000000 		.word	shoulder_state
 1919 01f4 00000000 		.word	shoulder_array
 1920 01f8 DC050000 		.word	1500
 1921 01fc 00000000 		.word	shldr_arr_cspot
 1922 0200 00000000 		.word	data_array
 1923 0204 DB050000 		.word	1499
 1924 0208 E7030000 		.word	999
 1925 020c 1F030000 		.word	799
 1926 0210 00000000 		.word	fin_exec
 1927 0214 00000000 		.word	new_pack
 1928              		.cfi_endproc
 1929              	.LFE47:
 1930              		.size	shoulder, .-shoulder
 1931              		.section	.text.make_command,"ax",%progbits
 1932              		.align	2
 1933              		.global	make_command
 1934              		.code	16
 1935              		.thumb_func
 1936              		.type	make_command, %function
 1937              	make_command:
 1938              	.LFB48:
 958:.\main.c      **** 
 959:.\main.c      **** void make_command(uint16* act_array, uint8 act_cspot, int8* info_array, uint8 byte1, uint8 byte2)
 960:.\main.c      **** {
 1939              		.loc 1 960 0
 1940              		.cfi_startproc
 1941 0000 80B5     		push	{r7, lr}
 1942              		.cfi_def_cfa_offset 8
 1943              		.cfi_offset 7, -8
 1944              		.cfi_offset 14, -4
 1945 0002 86B0     		sub	sp, sp, #24
 1946              		.cfi_def_cfa_offset 32
 1947 0004 00AF     		add	r7, sp, #0
 1948              		.cfi_def_cfa_register 7
 1949 0006 F860     		str	r0, [r7, #12]
 1950 0008 7A60     		str	r2, [r7, #4]
 1951 000a 1A1C     		mov	r2, r3
 1952 000c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 53


 1953 000e 0B33     		add	r3, r3, #11
 1954 0010 1970     		strb	r1, [r3]
 1955 0012 3B1C     		mov	r3, r7
 1956 0014 0A33     		add	r3, r3, #10
 1957 0016 1A70     		strb	r2, [r3]
 961:.\main.c      ****     int16 command;
 962:.\main.c      ****     int16 temp1;
 963:.\main.c      ****     int16 temp2;
 964:.\main.c      ****     int16 temp3;
 965:.\main.c      ****     
 966:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1958              		.loc 1 966 0
 1959 0018 3B1C     		mov	r3, r7
 1960 001a 0A33     		add	r3, r3, #10
 1961 001c 1B78     		ldrb	r3, [r3]
 1962 001e 7A68     		ldr	r2, [r7, #4]
 1963 0020 D318     		add	r3, r2, r3
 1964 0022 1B78     		ldrb	r3, [r3]
 1965 0024 5BB2     		sxtb	r3, r3
 1966 0026 1A02     		lsl	r2, r3, #8
 1967 0028 3B1C     		mov	r3, r7
 1968 002a 1633     		add	r3, r3, #22
 1969 002c 1A80     		strh	r2, [r3]
 967:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1970              		.loc 1 967 0
 1971 002e 3B1C     		mov	r3, r7
 1972 0030 2033     		add	r3, r3, #32
 1973 0032 1B78     		ldrb	r3, [r3]
 1974 0034 7A68     		ldr	r2, [r7, #4]
 1975 0036 D318     		add	r3, r2, r3
 1976 0038 1B78     		ldrb	r3, [r3]
 1977 003a 5BB2     		sxtb	r3, r3
 1978 003c 9AB2     		uxth	r2, r3
 1979 003e 3B1C     		mov	r3, r7
 1980 0040 1433     		add	r3, r3, #20
 1981 0042 111C     		add	r1, r2, #0
 1982 0044 FF22     		mov	r2, #255
 1983 0046 0A40     		and	r2, r1
 1984 0048 1A80     		strh	r2, [r3]
 968:.\main.c      ****     temp3 = temp1 | temp2;
 1985              		.loc 1 968 0
 1986 004a 3B1C     		mov	r3, r7
 1987 004c 1233     		add	r3, r3, #18
 1988 004e 391C     		mov	r1, r7
 1989 0050 1631     		add	r1, r1, #22
 1990 0052 3A1C     		mov	r2, r7
 1991 0054 1432     		add	r2, r2, #20
 1992 0056 0988     		ldrh	r1, [r1]
 1993 0058 1288     		ldrh	r2, [r2]
 1994 005a 0A43     		orr	r2, r1
 1995 005c 1A80     		strh	r2, [r3]
 969:.\main.c      ****     command = temp3/2 + 1500;
 1996              		.loc 1 969 0
 1997 005e 3B1C     		mov	r3, r7
 1998 0060 1233     		add	r3, r3, #18
 1999 0062 0022     		mov	r2, #0
 2000 0064 9B5E     		ldrsh	r3, [r3, r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 54


 2001 0066 002B     		cmp	r3, #0
 2002 0068 00DA     		bge	.L151
 2003 006a 0133     		add	r3, r3, #1
 2004              	.L151:
 2005 006c 5B10     		asr	r3, r3, #1
 2006 006e 9BB2     		uxth	r3, r3
 2007 0070 9BB2     		uxth	r3, r3
 2008 0072 094A     		ldr	r2, .L152
 2009 0074 9B18     		add	r3, r3, r2
 2010 0076 9AB2     		uxth	r2, r3
 2011 0078 3B1C     		mov	r3, r7
 2012 007a 1033     		add	r3, r3, #16
 2013 007c 1A80     		strh	r2, [r3]
 970:.\main.c      ****     act_array[act_cspot] = command;
 2014              		.loc 1 970 0
 2015 007e 3B1C     		mov	r3, r7
 2016 0080 0B33     		add	r3, r3, #11
 2017 0082 1B78     		ldrb	r3, [r3]
 2018 0084 5B00     		lsl	r3, r3, #1
 2019 0086 FA68     		ldr	r2, [r7, #12]
 2020 0088 D318     		add	r3, r2, r3
 2021 008a 3A1C     		mov	r2, r7
 2022 008c 1032     		add	r2, r2, #16
 2023 008e 1288     		ldrh	r2, [r2]
 2024 0090 1A80     		strh	r2, [r3]
 971:.\main.c      **** }
 2025              		.loc 1 971 0
 2026 0092 BD46     		mov	sp, r7
 2027 0094 06B0     		add	sp, sp, #24
 2028              		@ sp needed
 2029 0096 80BD     		pop	{r7, pc}
 2030              	.L153:
 2031              		.align	2
 2032              	.L152:
 2033 0098 DC050000 		.word	1500
 2034              		.cfi_endproc
 2035              	.LFE48:
 2036              		.size	make_command, .-make_command
 2037              		.comm	baseAzimuth_state,1,1
 2038              		.section	.text.baseAzimuth,"ax",%progbits
 2039              		.align	2
 2040              		.global	baseAzimuth
 2041              		.code	16
 2042              		.thumb_func
 2043              		.type	baseAzimuth, %function
 2044              	baseAzimuth:
 2045              	.LFB49:
 972:.\main.c      **** 
 973:.\main.c      **** //control the turret
 974:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 975:.\main.c      **** void baseAzimuth()
 976:.\main.c      **** { 
 2046              		.loc 1 976 0
 2047              		.cfi_startproc
 2048 0000 90B5     		push	{r4, r7, lr}
 2049              		.cfi_def_cfa_offset 12
 2050              		.cfi_offset 4, -12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 55


 2051              		.cfi_offset 7, -8
 2052              		.cfi_offset 14, -4
 2053 0002 85B0     		sub	sp, sp, #20
 2054              		.cfi_def_cfa_offset 32
 2055 0004 02AF     		add	r7, sp, #8
 2056              		.cfi_def_cfa 7, 24
 977:.\main.c      ****     //take instruction from data_array
 978:.\main.c      ****     //smooth input
 979:.\main.c      ****     //actuate the turret using PWM
 980:.\main.c      ****     uint8 i;
 981:.\main.c      ****     uint16 avg;
 982:.\main.c      ****     
 983:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2057              		.loc 1 983 0
 2058 0006 474B     		ldr	r3, .L178
 2059 0008 1B78     		ldrb	r3, [r3]
 2060 000a 012B     		cmp	r3, #1
 2061 000c 03D0     		beq	.L156
 2062 000e 57DD     		ble	.L177
 2063 0010 022B     		cmp	r3, #2
 2064 0012 17D0     		beq	.L159
 984:.\main.c      ****         case BA_start:
 985:.\main.c      ****             break;
 986:.\main.c      **** 
 987:.\main.c      ****         case BA_init:
 988:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 989:.\main.c      ****             {
 990:.\main.c      ****                 baseAz_array[i] = 1500;
 991:.\main.c      ****             }
 992:.\main.c      ****             BA_arr_cspot = 0;
 993:.\main.c      ****             break;
 994:.\main.c      **** 
 995:.\main.c      ****         case BA_execute:
 996:.\main.c      ****             make_command(baseAz_array, BA_arr_cspot, data_array, BA_BYTE_1, BA_BYTE_2);
 997:.\main.c      ****             
 998:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 999:.\main.c      ****             {
1000:.\main.c      ****                 BA_arr_cspot++;
1001:.\main.c      ****             }
1002:.\main.c      ****             else
1003:.\main.c      ****             {
1004:.\main.c      ****                 BA_arr_cspot = 0;
1005:.\main.c      ****             }
1006:.\main.c      ****             
1007:.\main.c      ****             //pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
1008:.\main.c      ****             
1009:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
1010:.\main.c      ****             
1011:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
1012:.\main.c      ****             {
1013:.\main.c      ****                 BA_PWM_WriteCompare(avg);
1014:.\main.c      ****             }
1015:.\main.c      ****             else
1016:.\main.c      ****             {
1017:.\main.c      ****                 //throw error
1018:.\main.c      ****                 BA_PWM_WriteCompare(1500);
1019:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 56


1020:.\main.c      ****             fin_exec++;
1021:.\main.c      ****             break;
1022:.\main.c      ****             
1023:.\main.c      ****         case BA_wait:
1024:.\main.c      ****             break;
 2065              		.loc 1 1024 0
 2066 0014 55E0     		b	.L155
 2067              	.L156:
 988:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2068              		.loc 1 988 0
 2069 0016 FB1D     		add	r3, r7, #7
 2070 0018 0022     		mov	r2, #0
 2071 001a 1A70     		strb	r2, [r3]
 2072 001c 0AE0     		b	.L161
 2073              	.L162:
 990:.\main.c      ****                 baseAz_array[i] = 1500;
 2074              		.loc 1 990 0 discriminator 2
 2075 001e FB1D     		add	r3, r7, #7
 2076 0020 1A78     		ldrb	r2, [r3]
 2077 0022 414B     		ldr	r3, .L178+4
 2078 0024 5200     		lsl	r2, r2, #1
 2079 0026 4149     		ldr	r1, .L178+8
 2080 0028 D152     		strh	r1, [r2, r3]
 988:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2081              		.loc 1 988 0 discriminator 2
 2082 002a FB1D     		add	r3, r7, #7
 2083 002c 1A78     		ldrb	r2, [r3]
 2084 002e FB1D     		add	r3, r7, #7
 2085 0030 0132     		add	r2, r2, #1
 2086 0032 1A70     		strb	r2, [r3]
 2087              	.L161:
 988:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2088              		.loc 1 988 0 is_stmt 0 discriminator 1
 2089 0034 FB1D     		add	r3, r7, #7
 2090 0036 1B78     		ldrb	r3, [r3]
 2091 0038 132B     		cmp	r3, #19
 2092 003a F0D9     		bls	.L162
 992:.\main.c      ****             BA_arr_cspot = 0;
 2093              		.loc 1 992 0 is_stmt 1
 2094 003c 3C4B     		ldr	r3, .L178+12
 2095 003e 0022     		mov	r2, #0
 2096 0040 1A70     		strb	r2, [r3]
 993:.\main.c      ****             break;
 2097              		.loc 1 993 0
 2098 0042 3EE0     		b	.L155
 2099              	.L159:
 996:.\main.c      ****             make_command(baseAz_array, BA_arr_cspot, data_array, BA_BYTE_1, BA_BYTE_2);
 2100              		.loc 1 996 0
 2101 0044 3A4B     		ldr	r3, .L178+12
 2102 0046 1A78     		ldrb	r2, [r3]
 2103 0048 3749     		ldr	r1, .L178+4
 2104 004a 3A4B     		ldr	r3, .L178+16
 2105 004c 0520     		mov	r0, #5
 2106 004e 0090     		str	r0, [sp]
 2107 0050 081C     		mov	r0, r1
 2108 0052 111C     		mov	r1, r2
 2109 0054 1A1C     		mov	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 57


 2110 0056 0423     		mov	r3, #4
 2111 0058 FFF7FEFF 		bl	make_command
 998:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 2112              		.loc 1 998 0
 2113 005c 344B     		ldr	r3, .L178+12
 2114 005e 1B78     		ldrb	r3, [r3]
 2115 0060 122B     		cmp	r3, #18
 2116 0062 06D8     		bhi	.L163
1000:.\main.c      ****                 BA_arr_cspot++;
 2117              		.loc 1 1000 0
 2118 0064 324B     		ldr	r3, .L178+12
 2119 0066 1B78     		ldrb	r3, [r3]
 2120 0068 0133     		add	r3, r3, #1
 2121 006a DAB2     		uxtb	r2, r3
 2122 006c 304B     		ldr	r3, .L178+12
 2123 006e 1A70     		strb	r2, [r3]
 2124 0070 02E0     		b	.L164
 2125              	.L163:
1004:.\main.c      ****                 BA_arr_cspot = 0;
 2126              		.loc 1 1004 0
 2127 0072 2F4B     		ldr	r3, .L178+12
 2128 0074 0022     		mov	r2, #0
 2129 0076 1A70     		strb	r2, [r3]
 2130              	.L164:
1009:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2131              		.loc 1 1009 0
 2132 0078 3C1D     		add	r4, r7, #4
 2133 007a 2B4B     		ldr	r3, .L178+4
 2134 007c 181C     		mov	r0, r3
 2135 007e 1421     		mov	r1, #20
 2136 0080 FFF7FEFF 		bl	average
 2137 0084 031C     		mov	r3, r0
 2138 0086 2380     		strh	r3, [r4]
1011:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2139              		.loc 1 1011 0
 2140 0088 3B1D     		add	r3, r7, #4
 2141 008a 1A88     		ldrh	r2, [r3]
 2142 008c FA23     		mov	r3, #250
 2143 008e DB00     		lsl	r3, r3, #3
 2144 0090 9A42     		cmp	r2, r3
 2145 0092 0AD8     		bhi	.L165
1011:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2146              		.loc 1 1011 0 is_stmt 0 discriminator 1
 2147 0094 3B1D     		add	r3, r7, #4
 2148 0096 1A88     		ldrh	r2, [r3]
 2149 0098 274B     		ldr	r3, .L178+20
 2150 009a 9A42     		cmp	r2, r3
 2151 009c 05D9     		bls	.L165
1013:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2152              		.loc 1 1013 0 is_stmt 1
 2153 009e 3B1D     		add	r3, r7, #4
 2154 00a0 1B88     		ldrh	r3, [r3]
 2155 00a2 181C     		mov	r0, r3
 2156 00a4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2157 00a8 03E0     		b	.L166
 2158              	.L165:
1018:.\main.c      ****                 BA_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 58


 2159              		.loc 1 1018 0
 2160 00aa 204B     		ldr	r3, .L178+8
 2161 00ac 181C     		mov	r0, r3
 2162 00ae FFF7FEFF 		bl	BA_PWM_WriteCompare
 2163              	.L166:
1020:.\main.c      ****             fin_exec++;
 2164              		.loc 1 1020 0
 2165 00b2 224B     		ldr	r3, .L178+24
 2166 00b4 1B78     		ldrb	r3, [r3]
 2167 00b6 0133     		add	r3, r3, #1
 2168 00b8 DAB2     		uxtb	r2, r3
 2169 00ba 204B     		ldr	r3, .L178+24
 2170 00bc 1A70     		strb	r2, [r3]
1021:.\main.c      ****             break;
 2171              		.loc 1 1021 0
 2172 00be 00E0     		b	.L155
 2173              	.L177:
 985:.\main.c      ****             break;
 2174              		.loc 1 985 0
 2175 00c0 C046     		mov	r8, r8
 2176              	.L155:
1025:.\main.c      ****     }
1026:.\main.c      ****     
1027:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2177              		.loc 1 1027 0
 2178 00c2 184B     		ldr	r3, .L178
 2179 00c4 1B78     		ldrb	r3, [r3]
 2180 00c6 012B     		cmp	r3, #1
 2181 00c8 0CD0     		beq	.L168
 2182 00ca 02DC     		bgt	.L169
 2183 00cc 002B     		cmp	r3, #0
 2184 00ce 05D0     		beq	.L170
 2185 00d0 24E0     		b	.L154
 2186              	.L169:
 2187 00d2 022B     		cmp	r3, #2
 2188 00d4 0AD0     		beq	.L171
 2189 00d6 032B     		cmp	r3, #3
 2190 00d8 14D0     		beq	.L172
 2191 00da 1FE0     		b	.L154
 2192              	.L170:
1028:.\main.c      ****         case BA_start:
1029:.\main.c      ****             baseAzimuth_state = BA_init;
 2193              		.loc 1 1029 0
 2194 00dc 114B     		ldr	r3, .L178
 2195 00de 0122     		mov	r2, #1
 2196 00e0 1A70     		strb	r2, [r3]
1030:.\main.c      ****             break;
 2197              		.loc 1 1030 0
 2198 00e2 1BE0     		b	.L154
 2199              	.L168:
1031:.\main.c      ****         
1032:.\main.c      ****         case BA_init:
1033:.\main.c      ****             baseAzimuth_state = BA_wait;
 2200              		.loc 1 1033 0
 2201 00e4 0F4B     		ldr	r3, .L178
 2202 00e6 0322     		mov	r2, #3
 2203 00e8 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 59


1034:.\main.c      ****             break;
 2204              		.loc 1 1034 0
 2205 00ea 17E0     		b	.L154
 2206              	.L171:
1035:.\main.c      ****         
1036:.\main.c      ****         case BA_execute:
1037:.\main.c      ****             if(new_pack)
 2207              		.loc 1 1037 0
 2208 00ec 144B     		ldr	r3, .L178+28
 2209 00ee 1B78     		ldrb	r3, [r3]
 2210 00f0 002B     		cmp	r3, #0
 2211 00f2 03D0     		beq	.L173
1038:.\main.c      ****             {
1039:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2212              		.loc 1 1039 0
 2213 00f4 0B4B     		ldr	r3, .L178
 2214 00f6 0222     		mov	r2, #2
 2215 00f8 1A70     		strb	r2, [r3]
1040:.\main.c      ****             }
1041:.\main.c      ****             else
1042:.\main.c      ****             {
1043:.\main.c      ****                 baseAzimuth_state = BA_wait;
1044:.\main.c      ****             }
1045:.\main.c      ****             break;
 2216              		.loc 1 1045 0
 2217 00fa 0FE0     		b	.L154
 2218              	.L173:
1043:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2219              		.loc 1 1043 0
 2220 00fc 094B     		ldr	r3, .L178
 2221 00fe 0322     		mov	r2, #3
 2222 0100 1A70     		strb	r2, [r3]
 2223              		.loc 1 1045 0
 2224 0102 0BE0     		b	.L154
 2225              	.L172:
1046:.\main.c      ****         
1047:.\main.c      ****         case BA_wait:
1048:.\main.c      ****             if(new_pack)
 2226              		.loc 1 1048 0
 2227 0104 0E4B     		ldr	r3, .L178+28
 2228 0106 1B78     		ldrb	r3, [r3]
 2229 0108 002B     		cmp	r3, #0
 2230 010a 03D0     		beq	.L175
1049:.\main.c      ****             {
1050:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2231              		.loc 1 1050 0
 2232 010c 054B     		ldr	r3, .L178
 2233 010e 0222     		mov	r2, #2
 2234 0110 1A70     		strb	r2, [r3]
 2235 0112 02E0     		b	.L176
 2236              	.L175:
1051:.\main.c      ****             }
1052:.\main.c      ****             else
1053:.\main.c      ****             {
1054:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2237              		.loc 1 1054 0
 2238 0114 034B     		ldr	r3, .L178
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 60


 2239 0116 0322     		mov	r2, #3
 2240 0118 1A70     		strb	r2, [r3]
 2241              	.L176:
1055:.\main.c      ****             }
1056:.\main.c      ****             break;
 2242              		.loc 1 1056 0
 2243 011a C046     		mov	r8, r8
 2244              	.L154:
1057:.\main.c      ****     }    
1058:.\main.c      **** }
 2245              		.loc 1 1058 0
 2246 011c BD46     		mov	sp, r7
 2247 011e 03B0     		add	sp, sp, #12
 2248              		@ sp needed
 2249 0120 90BD     		pop	{r4, r7, pc}
 2250              	.L179:
 2251 0122 C046     		.align	2
 2252              	.L178:
 2253 0124 00000000 		.word	baseAzimuth_state
 2254 0128 00000000 		.word	baseAz_array
 2255 012c DC050000 		.word	1500
 2256 0130 00000000 		.word	BA_arr_cspot
 2257 0134 00000000 		.word	data_array
 2258 0138 E7030000 		.word	999
 2259 013c 00000000 		.word	fin_exec
 2260 0140 00000000 		.word	new_pack
 2261              		.cfi_endproc
 2262              	.LFE49:
 2263              		.size	baseAzimuth, .-baseAzimuth
 2264              		.section	.text.main,"ax",%progbits
 2265              		.align	2
 2266              		.global	main
 2267              		.code	16
 2268              		.thumb_func
 2269              		.type	main, %function
 2270              	main:
 2271              	.LFB50:
1059:.\main.c      **** 
1060:.\main.c      **** int main()
1061:.\main.c      **** {  
 2272              		.loc 1 1061 0
 2273              		.cfi_startproc
 2274 0000 80B5     		push	{r7, lr}
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
 2278 0002 86B0     		sub	sp, sp, #24
 2279              		.cfi_def_cfa_offset 32
 2280 0004 00AF     		add	r7, sp, #0
 2281              		.cfi_def_cfa_register 7
1062:.\main.c      ****     
1063:.\main.c      ****     
1064:.\main.c      ****     //Define variables
1065:.\main.c      ****     time_t t;
1066:.\main.c      ****     uint8 counter;
1067:.\main.c      ****     int direction = 0;
 2282              		.loc 1 1067 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 61


 2283 0006 0023     		mov	r3, #0
 2284 0008 BB60     		str	r3, [r7, #8]
1068:.\main.c      ****     int16 temp_val= -1000;
 2285              		.loc 1 1068 0
 2286 000a 3B1C     		mov	r3, r7
 2287 000c 1433     		add	r3, r3, #20
 2288 000e 684A     		ldr	r2, .L192
 2289 0010 1A80     		strh	r2, [r3]
1069:.\main.c      ****     wiznet = 0;
 2290              		.loc 1 1069 0
 2291 0012 684B     		ldr	r3, .L192+4
 2292 0014 0022     		mov	r2, #0
 2293 0016 1A70     		strb	r2, [r3]
1070:.\main.c      ****     baseAzimuth_state = BA_start;
 2294              		.loc 1 1070 0
 2295 0018 674B     		ldr	r3, .L192+8
 2296 001a 0022     		mov	r2, #0
 2297 001c 1A70     		strb	r2, [r3]
1071:.\main.c      ****     wristTilt_state = tilt_start;
 2298              		.loc 1 1071 0
 2299 001e 674B     		ldr	r3, .L192+12
 2300 0020 0022     		mov	r2, #0
 2301 0022 1A70     		strb	r2, [r3]
1072:.\main.c      ****     wristRotate_state = rotate_start;
 2302              		.loc 1 1072 0
 2303 0024 664B     		ldr	r3, .L192+16
 2304 0026 0022     		mov	r2, #0
 2305 0028 1A70     		strb	r2, [r3]
1073:.\main.c      ****     shoulder_state = shldr_start;
 2306              		.loc 1 1073 0
 2307 002a 664B     		ldr	r3, .L192+20
 2308 002c 0022     		mov	r2, #0
 2309 002e 1A70     		strb	r2, [r3]
1074:.\main.c      ****     elbow_state = elbw_start;
 2310              		.loc 1 1074 0
 2311 0030 654B     		ldr	r3, .L192+24
 2312 0032 0022     		mov	r2, #0
 2313 0034 1A70     		strb	r2, [r3]
1075:.\main.c      ****     
1076:.\main.c      ****     //start all of our components
1077:.\main.c      ****     Clock_pwm_Start();
 2314              		.loc 1 1077 0
 2315 0036 FFF7FEFF 		bl	Clock_pwm_Start
1078:.\main.c      ****     Clock_counter_Start();
 2316              		.loc 1 1078 0
 2317 003a FFF7FEFF 		bl	Clock_counter_Start
1079:.\main.c      ****     
1080:.\main.c      ****     UART_1_Start();
 2318              		.loc 1 1080 0
 2319 003e FFF7FEFF 		bl	UART_1_Start
1081:.\main.c      ****     
1082:.\main.c      ****     SHLDR_PWM_Start();
 2320              		.loc 1 1082 0
 2321 0042 FFF7FEFF 		bl	SHLDR_PWM_Start
1083:.\main.c      ****     BA_PWM_Start();
 2322              		.loc 1 1083 0
 2323 0046 FFF7FEFF 		bl	BA_PWM_Start
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 62


1084:.\main.c      ****     ELBW_PWM_Start();
 2324              		.loc 1 1084 0
 2325 004a FFF7FEFF 		bl	ELBW_PWM_Start
1085:.\main.c      ****     
1086:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 2326              		.loc 1 1086 0
 2327 004e 5F4B     		ldr	r3, .L192+28
 2328 0050 0420     		mov	r0, #4
 2329 0052 0121     		mov	r1, #1
 2330 0054 1A1C     		mov	r2, r3
 2331 0056 FFF7FEFF 		bl	wiznetInit
1087:.\main.c      ****     
1088:.\main.c      ****     ServoSpeed(0xFE, 100);
 2332              		.loc 1 1088 0
 2333 005a FE20     		mov	r0, #254
 2334 005c 6421     		mov	r1, #100
 2335 005e FFF7FEFF 		bl	ServoSpeed
1089:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 2336              		.loc 1 1089 0
 2337 0062 5B4B     		ldr	r3, .L192+32
 2338 0064 FE20     		mov	r0, #254
 2339 0066 191C     		mov	r1, r3
 2340 0068 FFF7FEFF 		bl	SetServoTorque
1090:.\main.c      ****     
1091:.\main.c      ****     ELBW_PWM_WriteCompare(1500); //Initialize our motor drivers
 2341              		.loc 1 1091 0
 2342 006c 594B     		ldr	r3, .L192+36
 2343 006e 181C     		mov	r0, r3
 2344 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1092:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 2345              		.loc 1 1092 0
 2346 0074 574B     		ldr	r3, .L192+36
 2347 0076 181C     		mov	r0, r3
 2348 0078 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1093:.\main.c      ****     CyDelay(3000);
 2349              		.loc 1 1093 0
 2350 007c 564B     		ldr	r3, .L192+40
 2351 007e 181C     		mov	r0, r3
 2352 0080 FFF7FEFF 		bl	CyDelay
1094:.\main.c      ****    
1095:.\main.c      ****     ADC_Start();
 2353              		.loc 1 1095 0
 2354 0084 FFF7FEFF 		bl	ADC_Start
1096:.\main.c      ****     ADC_StartConvert();
 2355              		.loc 1 1096 0
 2356 0088 FFF7FEFF 		bl	ADC_StartConvert
1097:.\main.c      ****     
1098:.\main.c      ****     //helps for generating random arrays
1099:.\main.c      ****     srand((unsigned) time(&t));
 2357              		.loc 1 1099 0
 2358 008c 3B1D     		add	r3, r7, #4
 2359 008e 181C     		mov	r0, r3
 2360 0090 FFF7FEFF 		bl	time
 2361 0094 031C     		mov	r3, r0
 2362 0096 181C     		mov	r0, r3
 2363 0098 FFF7FEFF 		bl	srand
1100:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 63


1101:.\main.c      ****     CyGlobalIntEnable;
 2364              		.loc 1 1101 0
 2365              	@ 1101 ".\main.c" 1
 2366 009c 62B6     		CPSIE   i
 2367              	@ 0 "" 2
1102:.\main.c      ****     isr_1_StartEx(timer_isr);
 2368              		.loc 1 1102 0
 2369              		.code	16
 2370 009e 4F4B     		ldr	r3, .L192+44
 2371 00a0 181C     		mov	r0, r3
 2372 00a2 FFF7FEFF 		bl	isr_1_StartEx
1103:.\main.c      ****     Timer_1_Start();
 2373              		.loc 1 1103 0
 2374 00a6 FFF7FEFF 		bl	Timer_1_Start
1104:.\main.c      ****     
1105:.\main.c      ****     int increasing = 1;
 2375              		.loc 1 1105 0
 2376 00aa 0123     		mov	r3, #1
 2377 00ac 3B61     		str	r3, [r7, #16]
 2378              	.L190:
1106:.\main.c      **** 
1107:.\main.c      ****     for(;;)
1108:.\main.c      ****     {
1109:.\main.c      ****         //check addresses
1110:.\main.c      ****         //TODO get the address bytes from Steve
1111:.\main.c      ****         
1112:.\main.c      ****         if(wiznet) //!WIZ_INT_Read()
 2379              		.loc 1 1112 0
 2380 00ae 414B     		ldr	r3, .L192+4
 2381 00b0 1B78     		ldrb	r3, [r3]
 2382 00b2 002B     		cmp	r3, #0
 2383 00b4 0AD0     		beq	.L181
1113:.\main.c      ****         {
1114:.\main.c      ****             //wiznetClearInterrupts();
1115:.\main.c      ****             fill_data_array();
 2384              		.loc 1 1115 0
 2385 00b6 FFF7FEFF 		bl	fill_data_array
1116:.\main.c      ****             new_pack = 1;
 2386              		.loc 1 1116 0
 2387 00ba 494B     		ldr	r3, .L192+48
 2388 00bc 0122     		mov	r2, #1
 2389 00be 1A70     		strb	r2, [r3]
1117:.\main.c      ****             fin_exec = 0;
 2390              		.loc 1 1117 0
 2391 00c0 484B     		ldr	r3, .L192+52
 2392 00c2 0022     		mov	r2, #0
 2393 00c4 1A70     		strb	r2, [r3]
1118:.\main.c      ****             wiznet = 0;
 2394              		.loc 1 1118 0
 2395 00c6 3B4B     		ldr	r3, .L192+4
 2396 00c8 0022     		mov	r2, #0
 2397 00ca 1A70     		strb	r2, [r3]
 2398              	.L181:
1119:.\main.c      ****         }
1120:.\main.c      ****         
1121:.\main.c      ****         baseAzimuth();
 2399              		.loc 1 1121 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 64


 2400 00cc FFF7FEFF 		bl	baseAzimuth
1122:.\main.c      ****         shoulder();
 2401              		.loc 1 1122 0
 2402 00d0 FFF7FEFF 		bl	shoulder
1123:.\main.c      ****         elbow();
 2403              		.loc 1 1123 0
 2404 00d4 FFF7FEFF 		bl	elbow
1124:.\main.c      ****         wristTilt();
 2405              		.loc 1 1124 0
 2406 00d8 FFF7FEFF 		bl	wristTilt
1125:.\main.c      ****         wristRotate();
 2407              		.loc 1 1125 0
 2408 00dc FFF7FEFF 		bl	wristRotate
1126:.\main.c      **** 
1127:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 2409              		.loc 1 1127 0
 2410 00e0 404B     		ldr	r3, .L192+52
 2411 00e2 1B78     		ldrb	r3, [r3]
 2412 00e4 052B     		cmp	r3, #5
 2413 00e6 03D1     		bne	.L182
1128:.\main.c      ****         {
1129:.\main.c      ****             new_pack = 0;
 2414              		.loc 1 1129 0
 2415 00e8 3D4B     		ldr	r3, .L192+48
 2416 00ea 0022     		mov	r2, #0
 2417 00ec 1A70     		strb	r2, [r3]
1130:.\main.c      ****         }
1131:.\main.c      ****         
1132:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 2418              		.loc 1 1132 0
 2419 00ee FFE7     		b	.L191
 2420              	.L182:
 2421              	.L191:
 2422 00f0 C046     		mov	r8, r8
 2423              	.L183:
 2424              		.loc 1 1132 0 is_stmt 0 discriminator 1
 2425 00f2 3D4B     		ldr	r3, .L192+56
 2426 00f4 1B78     		ldrb	r3, [r3]
 2427 00f6 002B     		cmp	r3, #0
 2428 00f8 FBD0     		beq	.L183
1133:.\main.c      ****         timerFlag = 0;
 2429              		.loc 1 1133 0 is_stmt 1
 2430 00fa 3B4B     		ldr	r3, .L192+56
 2431 00fc 0022     		mov	r2, #0
 2432 00fe 1A70     		strb	r2, [r3]
1134:.\main.c      ****         
1135:.\main.c      ****         counter++;
 2433              		.loc 1 1135 0
 2434 0100 3B1C     		mov	r3, r7
 2435 0102 1733     		add	r3, r3, #23
 2436 0104 1A78     		ldrb	r2, [r3]
 2437 0106 3B1C     		mov	r3, r7
 2438 0108 1733     		add	r3, r3, #23
 2439 010a 0132     		add	r2, r2, #1
 2440 010c 1A70     		strb	r2, [r3]
1136:.\main.c      ****         
1137:.\main.c      ****         if(counter == 50)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 65


 2441              		.loc 1 1137 0
 2442 010e 3B1C     		mov	r3, r7
 2443 0110 1733     		add	r3, r3, #23
 2444 0112 1B78     		ldrb	r3, [r3]
 2445 0114 322B     		cmp	r3, #50
 2446 0116 4AD1     		bne	.L184
1138:.\main.c      ****         {
1139:.\main.c      ****         
1140:.\main.c      ****             if(increasing)
 2447              		.loc 1 1140 0
 2448 0118 3B69     		ldr	r3, [r7, #16]
 2449 011a 002B     		cmp	r3, #0
 2450 011c 12D0     		beq	.L185
1141:.\main.c      ****             {
1142:.\main.c      ****                 temp_val += 100;
 2451              		.loc 1 1142 0
 2452 011e 3B1C     		mov	r3, r7
 2453 0120 1433     		add	r3, r3, #20
 2454 0122 1B88     		ldrh	r3, [r3]
 2455 0124 6433     		add	r3, r3, #100
 2456 0126 9AB2     		uxth	r2, r3
 2457 0128 3B1C     		mov	r3, r7
 2458 012a 1433     		add	r3, r3, #20
 2459 012c 1A80     		strh	r2, [r3]
1143:.\main.c      ****                 if(temp_val == 1000)
 2460              		.loc 1 1143 0
 2461 012e 3B1C     		mov	r3, r7
 2462 0130 1433     		add	r3, r3, #20
 2463 0132 0021     		mov	r1, #0
 2464 0134 5A5E     		ldrsh	r2, [r3, r1]
 2465 0136 FA23     		mov	r3, #250
 2466 0138 9B00     		lsl	r3, r3, #2
 2467 013a 9A42     		cmp	r2, r3
 2468 013c 13D1     		bne	.L187
1144:.\main.c      ****                 {
1145:.\main.c      ****                     increasing = 0;
 2469              		.loc 1 1145 0
 2470 013e 0023     		mov	r3, #0
 2471 0140 3B61     		str	r3, [r7, #16]
 2472 0142 10E0     		b	.L187
 2473              	.L185:
1146:.\main.c      ****                 }
1147:.\main.c      ****             }
1148:.\main.c      ****             else
1149:.\main.c      ****             {
1150:.\main.c      ****                 temp_val -= 100;
 2474              		.loc 1 1150 0
 2475 0144 3B1C     		mov	r3, r7
 2476 0146 1433     		add	r3, r3, #20
 2477 0148 1B88     		ldrh	r3, [r3]
 2478 014a 643B     		sub	r3, r3, #100
 2479 014c 9AB2     		uxth	r2, r3
 2480 014e 3B1C     		mov	r3, r7
 2481 0150 1433     		add	r3, r3, #20
 2482 0152 1A80     		strh	r2, [r3]
1151:.\main.c      ****                 if(temp_val == -1000)
 2483              		.loc 1 1151 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 66


 2484 0154 3B1C     		mov	r3, r7
 2485 0156 1433     		add	r3, r3, #20
 2486 0158 0021     		mov	r1, #0
 2487 015a 5A5E     		ldrsh	r2, [r3, r1]
 2488 015c 144B     		ldr	r3, .L192
 2489 015e 9A42     		cmp	r2, r3
 2490 0160 01D1     		bne	.L187
1152:.\main.c      ****                 {
1153:.\main.c      ****                     increasing = 1;   
 2491              		.loc 1 1153 0
 2492 0162 0123     		mov	r3, #1
 2493 0164 3B61     		str	r3, [r7, #16]
 2494              	.L187:
 2495              	.LBB2:
1154:.\main.c      ****                 }
1155:.\main.c      ****             }
1156:.\main.c      ****             
1157:.\main.c      ****             //uint16 feedback1 = ADC_GetResult16(2);
1158:.\main.c      ****             //int16 forward = 1000;
1159:.\main.c      ****             //int16 backward = -1000;
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2496              		.loc 1 1160 0
 2497 0166 0023     		mov	r3, #0
 2498 0168 FB60     		str	r3, [r7, #12]
 2499 016a 15E0     		b	.L188
 2500              	.L189:
1161:.\main.c      ****             {
1162:.\main.c      ****                 //int16 random_number = rand()%2001 - 1000;
1163:.\main.c      ****                 //test_array[i] = random_number >> 8;
1164:.\main.c      ****                 //test_array[i+1] = random_number & 0x00FF;
1165:.\main.c      ****                 test_array[i] = temp_val >> 8;
 2501              		.loc 1 1165 0 discriminator 2
 2502 016c 3B1C     		mov	r3, r7
 2503 016e 1433     		add	r3, r3, #20
 2504 0170 0022     		mov	r2, #0
 2505 0172 9B5E     		ldrsh	r3, [r3, r2]
 2506 0174 1B12     		asr	r3, r3, #8
 2507 0176 9BB2     		uxth	r3, r3
 2508 0178 DAB2     		uxtb	r2, r3
 2509 017a 1C49     		ldr	r1, .L192+60
 2510 017c FB68     		ldr	r3, [r7, #12]
 2511 017e CB18     		add	r3, r1, r3
 2512 0180 1A70     		strb	r2, [r3]
1166:.\main.c      ****                 test_array[i+1] = temp_val & 0x00FF;
 2513              		.loc 1 1166 0 discriminator 2
 2514 0182 FB68     		ldr	r3, [r7, #12]
 2515 0184 0133     		add	r3, r3, #1
 2516 0186 3A1C     		mov	r2, r7
 2517 0188 1432     		add	r2, r2, #20
 2518 018a 1288     		ldrh	r2, [r2]
 2519 018c D1B2     		uxtb	r1, r2
 2520 018e 174A     		ldr	r2, .L192+60
 2521 0190 D154     		strb	r1, [r2, r3]
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2522              		.loc 1 1160 0 discriminator 2
 2523 0192 FB68     		ldr	r3, [r7, #12]
 2524 0194 0233     		add	r3, r3, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 67


 2525 0196 FB60     		str	r3, [r7, #12]
 2526              	.L188:
1160:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 2527              		.loc 1 1160 0 is_stmt 0 discriminator 1
 2528 0198 FB68     		ldr	r3, [r7, #12]
 2529 019a 0D2B     		cmp	r3, #13
 2530 019c E6DD     		ble	.L189
 2531              	.LBE2:
1167:.\main.c      ****             }
1168:.\main.c      ****             counter = 0;
 2532              		.loc 1 1168 0 is_stmt 1
 2533 019e 3B1C     		mov	r3, r7
 2534 01a0 1733     		add	r3, r3, #23
 2535 01a2 0022     		mov	r2, #0
 2536 01a4 1A70     		strb	r2, [r3]
1169:.\main.c      ****             wiznet = 1;
 2537              		.loc 1 1169 0
 2538 01a6 034B     		ldr	r3, .L192+4
 2539 01a8 0122     		mov	r2, #1
 2540 01aa 1A70     		strb	r2, [r3]
1170:.\main.c      ****         }
1171:.\main.c      ****     }
 2541              		.loc 1 1171 0
 2542 01ac 7FE7     		b	.L190
 2543              	.L184:
 2544 01ae 7EE7     		b	.L190
 2545              	.L193:
 2546              		.align	2
 2547              	.L192:
 2548 01b0 18FCFFFF 		.word	-1000
 2549 01b4 00000000 		.word	wiznet
 2550 01b8 00000000 		.word	baseAzimuth_state
 2551 01bc 00000000 		.word	wristTilt_state
 2552 01c0 00000000 		.word	wristRotate_state
 2553 01c4 00000000 		.word	shoulder_state
 2554 01c8 00000000 		.word	elbow_state
 2555 01cc 87690000 		.word	27015
 2556 01d0 FF030000 		.word	1023
 2557 01d4 DC050000 		.word	1500
 2558 01d8 B80B0000 		.word	3000
 2559 01dc 00000000 		.word	timer_isr
 2560 01e0 00000000 		.word	new_pack
 2561 01e4 00000000 		.word	fin_exec
 2562 01e8 00000000 		.word	timerFlag
 2563 01ec 00000000 		.word	test_array
 2564              		.cfi_endproc
 2565              	.LFE50:
 2566              		.size	main, .-main
 2567              		.text
 2568              	.Letext0:
 2569              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 2570              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 2571              		.section	.debug_info,"",%progbits
 2572              	.Ldebug_info0:
 2573 0000 C9070000 		.4byte	0x7c9
 2574 0004 0400     		.2byte	0x4
 2575 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 68


 2576 000a 04       		.byte	0x4
 2577 000b 01       		.uleb128 0x1
 2578 000c B2040000 		.4byte	.LASF107
 2579 0010 01       		.byte	0x1
 2580 0011 71010000 		.4byte	.LASF108
 2581 0015 30030000 		.4byte	.LASF109
 2582 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2583 001d 00000000 		.4byte	0
 2584 0021 00000000 		.4byte	.Ldebug_line0
 2585 0025 02       		.uleb128 0x2
 2586 0026 01       		.byte	0x1
 2587 0027 06       		.byte	0x6
 2588 0028 5A010000 		.4byte	.LASF0
 2589 002c 02       		.uleb128 0x2
 2590 002d 01       		.byte	0x1
 2591 002e 08       		.byte	0x8
 2592 002f 26020000 		.4byte	.LASF1
 2593 0033 02       		.uleb128 0x2
 2594 0034 02       		.byte	0x2
 2595 0035 05       		.byte	0x5
 2596 0036 3C000000 		.4byte	.LASF2
 2597 003a 02       		.uleb128 0x2
 2598 003b 02       		.byte	0x2
 2599 003c 07       		.byte	0x7
 2600 003d E5020000 		.4byte	.LASF3
 2601 0041 02       		.uleb128 0x2
 2602 0042 04       		.byte	0x4
 2603 0043 05       		.byte	0x5
 2604 0044 C5010000 		.4byte	.LASF4
 2605 0048 02       		.uleb128 0x2
 2606 0049 04       		.byte	0x4
 2607 004a 07       		.byte	0x7
 2608 004b B8020000 		.4byte	.LASF5
 2609 004f 02       		.uleb128 0x2
 2610 0050 08       		.byte	0x8
 2611 0051 05       		.byte	0x5
 2612 0052 A3000000 		.4byte	.LASF6
 2613 0056 02       		.uleb128 0x2
 2614 0057 08       		.byte	0x8
 2615 0058 07       		.byte	0x7
 2616 0059 8A020000 		.4byte	.LASF7
 2617 005d 03       		.uleb128 0x3
 2618 005e 04       		.byte	0x4
 2619 005f 05       		.byte	0x5
 2620 0060 696E7400 		.ascii	"int\000"
 2621 0064 02       		.uleb128 0x2
 2622 0065 04       		.byte	0x4
 2623 0066 07       		.byte	0x7
 2624 0067 A1020000 		.4byte	.LASF8
 2625 006b 04       		.uleb128 0x4
 2626 006c 0D020000 		.4byte	.LASF9
 2627 0070 02       		.byte	0x2
 2628 0071 A1       		.byte	0xa1
 2629 0072 2C000000 		.4byte	0x2c
 2630 0076 04       		.uleb128 0x4
 2631 0077 08010000 		.4byte	.LASF10
 2632 007b 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 69


 2633 007c A2       		.byte	0xa2
 2634 007d 3A000000 		.4byte	0x3a
 2635 0081 04       		.uleb128 0x4
 2636 0082 F8030000 		.4byte	.LASF11
 2637 0086 02       		.byte	0x2
 2638 0087 A3       		.byte	0xa3
 2639 0088 48000000 		.4byte	0x48
 2640 008c 04       		.uleb128 0x4
 2641 008d A4010000 		.4byte	.LASF12
 2642 0091 02       		.byte	0x2
 2643 0092 A4       		.byte	0xa4
 2644 0093 25000000 		.4byte	0x25
 2645 0097 04       		.uleb128 0x4
 2646 0098 54010000 		.4byte	.LASF13
 2647 009c 02       		.byte	0x2
 2648 009d A5       		.byte	0xa5
 2649 009e 33000000 		.4byte	0x33
 2650 00a2 02       		.uleb128 0x2
 2651 00a3 04       		.byte	0x4
 2652 00a4 04       		.byte	0x4
 2653 00a5 7A010000 		.4byte	.LASF14
 2654 00a9 02       		.uleb128 0x2
 2655 00aa 08       		.byte	0x8
 2656 00ab 04       		.byte	0x4
 2657 00ac 11040000 		.4byte	.LASF15
 2658 00b0 02       		.uleb128 0x2
 2659 00b1 01       		.byte	0x1
 2660 00b2 08       		.byte	0x8
 2661 00b3 C0010000 		.4byte	.LASF16
 2662 00b7 02       		.uleb128 0x2
 2663 00b8 04       		.byte	0x4
 2664 00b9 07       		.byte	0x7
 2665 00ba 53000000 		.4byte	.LASF17
 2666 00be 05       		.uleb128 0x5
 2667 00bf 04       		.byte	0x4
 2668 00c0 B0000000 		.4byte	0xb0
 2669 00c4 04       		.uleb128 0x4
 2670 00c5 18040000 		.4byte	.LASF18
 2671 00c9 03       		.byte	0x3
 2672 00ca 7A       		.byte	0x7a
 2673 00cb 41000000 		.4byte	0x41
 2674 00cf 06       		.uleb128 0x6
 2675 00d0 F8020000 		.4byte	.LASF24
 2676 00d4 01       		.byte	0x1
 2677 00d5 01       		.byte	0x1
 2678 00d6 D801     		.2byte	0x1d8
 2679 00d8 FB000000 		.4byte	0xfb
 2680 00dc 07       		.uleb128 0x7
 2681 00dd 21000000 		.4byte	.LASF19
 2682 00e1 00       		.sleb128 0
 2683 00e2 07       		.uleb128 0x7
 2684 00e3 03020000 		.4byte	.LASF20
 2685 00e7 01       		.sleb128 1
 2686 00e8 07       		.uleb128 0x7
 2687 00e9 FF030000 		.4byte	.LASF21
 2688 00ed 02       		.sleb128 2
 2689 00ee 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 70


 2690 00ef D0020000 		.4byte	.LASF22
 2691 00f3 03       		.sleb128 3
 2692 00f4 07       		.uleb128 0x7
 2693 00f5 59020000 		.4byte	.LASF23
 2694 00f9 04       		.sleb128 4
 2695 00fa 00       		.byte	0
 2696 00fb 06       		.uleb128 0x6
 2697 00fc 67000000 		.4byte	.LASF25
 2698 0100 01       		.byte	0x1
 2699 0101 01       		.byte	0x1
 2700 0102 3D02     		.2byte	0x23d
 2701 0104 27010000 		.4byte	0x127
 2702 0108 07       		.uleb128 0x7
 2703 0109 46000000 		.4byte	.LASF26
 2704 010d 00       		.sleb128 0
 2705 010e 07       		.uleb128 0x7
 2706 010f A6040000 		.4byte	.LASF27
 2707 0113 01       		.sleb128 1
 2708 0114 07       		.uleb128 0x7
 2709 0115 7B020000 		.4byte	.LASF28
 2710 0119 02       		.sleb128 2
 2711 011a 07       		.uleb128 0x7
 2712 011b E1010000 		.4byte	.LASF29
 2713 011f 03       		.sleb128 3
 2714 0120 07       		.uleb128 0x7
 2715 0121 76050000 		.4byte	.LASF30
 2716 0125 04       		.sleb128 4
 2717 0126 00       		.byte	0
 2718 0127 06       		.uleb128 0x6
 2719 0128 1B030000 		.4byte	.LASF31
 2720 012c 01       		.byte	0x1
 2721 012d 01       		.byte	0x1
 2722 012e AD02     		.2byte	0x2ad
 2723 0130 4D010000 		.4byte	0x14d
 2724 0134 07       		.uleb128 0x7
 2725 0135 80010000 		.4byte	.LASF32
 2726 0139 00       		.sleb128 0
 2727 013a 07       		.uleb128 0x7
 2728 013b 67020000 		.4byte	.LASF33
 2729 013f 01       		.sleb128 1
 2730 0140 07       		.uleb128 0x7
 2731 0141 5E050000 		.4byte	.LASF34
 2732 0145 02       		.sleb128 2
 2733 0146 07       		.uleb128 0x7
 2734 0147 39050000 		.4byte	.LASF35
 2735 014b 03       		.sleb128 3
 2736 014c 00       		.byte	0
 2737 014d 06       		.uleb128 0x6
 2738 014e D0000000 		.4byte	.LASF36
 2739 0152 01       		.byte	0x1
 2740 0153 01       		.byte	0x1
 2741 0154 3903     		.2byte	0x339
 2742 0156 73010000 		.4byte	0x173
 2743 015a 07       		.uleb128 0x7
 2744 015b 88000000 		.4byte	.LASF37
 2745 015f 00       		.sleb128 0
 2746 0160 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 71


 2747 0161 16000000 		.4byte	.LASF38
 2748 0165 01       		.sleb128 1
 2749 0166 07       		.uleb128 0x7
 2750 0167 C2000000 		.4byte	.LASF39
 2751 016b 02       		.sleb128 2
 2752 016c 07       		.uleb128 0x7
 2753 016d DA020000 		.4byte	.LASF40
 2754 0171 03       		.sleb128 3
 2755 0172 00       		.byte	0
 2756 0173 06       		.uleb128 0x6
 2757 0174 CE010000 		.4byte	.LASF41
 2758 0178 01       		.byte	0x1
 2759 0179 01       		.byte	0x1
 2760 017a CE03     		.2byte	0x3ce
 2761 017c 99010000 		.4byte	0x199
 2762 0180 07       		.uleb128 0x7
 2763 0181 0D000000 		.4byte	.LASF42
 2764 0185 00       		.sleb128 0
 2765 0186 07       		.uleb128 0x7
 2766 0187 BA000000 		.4byte	.LASF43
 2767 018b 01       		.sleb128 1
 2768 018c 07       		.uleb128 0x7
 2769 018d 5C000000 		.4byte	.LASF44
 2770 0191 02       		.sleb128 2
 2771 0192 07       		.uleb128 0x7
 2772 0193 3D010000 		.4byte	.LASF45
 2773 0197 03       		.sleb128 3
 2774 0198 00       		.byte	0
 2775 0199 08       		.uleb128 0x8
 2776 019a 88040000 		.4byte	.LASF46
 2777 019e 01       		.byte	0x1
 2778 019f 4A       		.byte	0x4a
 2779 01a0 00000000 		.4byte	.LFB34
 2780 01a4 28000000 		.4byte	.LFE34-.LFB34
 2781 01a8 01       		.uleb128 0x1
 2782 01a9 9C       		.byte	0x9c
 2783 01aa BD010000 		.4byte	0x1bd
 2784 01ae 09       		.uleb128 0x9
 2785 01af 34020000 		.4byte	.LASF48
 2786 01b3 01       		.byte	0x1
 2787 01b4 4C       		.byte	0x4c
 2788 01b5 81000000 		.4byte	0x81
 2789 01b9 02       		.uleb128 0x2
 2790 01ba 91       		.byte	0x91
 2791 01bb 74       		.sleb128 -12
 2792 01bc 00       		.byte	0
 2793 01bd 08       		.uleb128 0x8
 2794 01be 28030000 		.4byte	.LASF47
 2795 01c2 01       		.byte	0x1
 2796 01c3 67       		.byte	0x67
 2797 01c4 00000000 		.4byte	.LFB35
 2798 01c8 62000000 		.4byte	.LFE35-.LFB35
 2799 01cc 01       		.uleb128 0x1
 2800 01cd 9C       		.byte	0x9c
 2801 01ce 03020000 		.4byte	0x203
 2802 01d2 0A       		.uleb128 0xa
 2803 01d3 7300     		.ascii	"s\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 72


 2804 01d5 01       		.byte	0x1
 2805 01d6 67       		.byte	0x67
 2806 01d7 BE000000 		.4byte	0xbe
 2807 01db 02       		.uleb128 0x2
 2808 01dc 91       		.byte	0x91
 2809 01dd 64       		.sleb128 -28
 2810 01de 0B       		.uleb128 0xb
 2811 01df 6900     		.ascii	"i\000"
 2812 01e1 01       		.byte	0x1
 2813 01e2 69       		.byte	0x69
 2814 01e3 5D000000 		.4byte	0x5d
 2815 01e7 02       		.uleb128 0x2
 2816 01e8 91       		.byte	0x91
 2817 01e9 74       		.sleb128 -12
 2818 01ea 0B       		.uleb128 0xb
 2819 01eb 6A00     		.ascii	"j\000"
 2820 01ed 01       		.byte	0x1
 2821 01ee 69       		.byte	0x69
 2822 01ef 5D000000 		.4byte	0x5d
 2823 01f3 02       		.uleb128 0x2
 2824 01f4 91       		.byte	0x91
 2825 01f5 70       		.sleb128 -16
 2826 01f6 0B       		.uleb128 0xb
 2827 01f7 6300     		.ascii	"c\000"
 2828 01f9 01       		.byte	0x1
 2829 01fa 6A       		.byte	0x6a
 2830 01fb B0000000 		.4byte	0xb0
 2831 01ff 02       		.uleb128 0x2
 2832 0200 91       		.byte	0x91
 2833 0201 6F       		.sleb128 -17
 2834 0202 00       		.byte	0
 2835 0203 08       		.uleb128 0x8
 2836 0204 13020000 		.4byte	.LASF49
 2837 0208 01       		.byte	0x1
 2838 0209 73       		.byte	0x73
 2839 020a 00000000 		.4byte	.LFB36
 2840 020e 7C000000 		.4byte	.LFE36-.LFB36
 2841 0212 01       		.uleb128 0x1
 2842 0213 9C       		.byte	0x9c
 2843 0214 4B020000 		.4byte	0x24b
 2844 0218 0A       		.uleb128 0xa
 2845 0219 6E00     		.ascii	"n\000"
 2846 021b 01       		.byte	0x1
 2847 021c 73       		.byte	0x73
 2848 021d 5D000000 		.4byte	0x5d
 2849 0221 02       		.uleb128 0x2
 2850 0222 91       		.byte	0x91
 2851 0223 64       		.sleb128 -28
 2852 0224 0A       		.uleb128 0xa
 2853 0225 7300     		.ascii	"s\000"
 2854 0227 01       		.byte	0x1
 2855 0228 73       		.byte	0x73
 2856 0229 BE000000 		.4byte	0xbe
 2857 022d 02       		.uleb128 0x2
 2858 022e 91       		.byte	0x91
 2859 022f 60       		.sleb128 -32
 2860 0230 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 73


 2861 0231 6900     		.ascii	"i\000"
 2862 0233 01       		.byte	0x1
 2863 0234 75       		.byte	0x75
 2864 0235 5D000000 		.4byte	0x5d
 2865 0239 02       		.uleb128 0x2
 2866 023a 91       		.byte	0x91
 2867 023b 6C       		.sleb128 -20
 2868 023c 09       		.uleb128 0x9
 2869 023d 0C040000 		.4byte	.LASF50
 2870 0241 01       		.byte	0x1
 2871 0242 75       		.byte	0x75
 2872 0243 5D000000 		.4byte	0x5d
 2873 0247 02       		.uleb128 0x2
 2874 0248 91       		.byte	0x91
 2875 0249 68       		.sleb128 -24
 2876 024a 00       		.byte	0
 2877 024b 0C       		.uleb128 0xc
 2878 024c 43050000 		.4byte	.LASF53
 2879 0250 01       		.byte	0x1
 2880 0251 84       		.byte	0x84
 2881 0252 76000000 		.4byte	0x76
 2882 0256 00000000 		.4byte	.LFB37
 2883 025a 78000000 		.4byte	.LFE37-.LFB37
 2884 025e 01       		.uleb128 0x1
 2885 025f 9C       		.byte	0x9c
 2886 0260 A9020000 		.4byte	0x2a9
 2887 0264 0D       		.uleb128 0xd
 2888 0265 09030000 		.4byte	.LASF51
 2889 0269 01       		.byte	0x1
 2890 026a 84       		.byte	0x84
 2891 026b A9020000 		.4byte	0x2a9
 2892 026f 02       		.uleb128 0x2
 2893 0270 91       		.byte	0x91
 2894 0271 64       		.sleb128 -28
 2895 0272 0D       		.uleb128 0xd
 2896 0273 71020000 		.4byte	.LASF52
 2897 0277 01       		.byte	0x1
 2898 0278 84       		.byte	0x84
 2899 0279 6B000000 		.4byte	0x6b
 2900 027d 02       		.uleb128 0x2
 2901 027e 91       		.byte	0x91
 2902 027f 63       		.sleb128 -29
 2903 0280 0B       		.uleb128 0xb
 2904 0281 6900     		.ascii	"i\000"
 2905 0283 01       		.byte	0x1
 2906 0284 86       		.byte	0x86
 2907 0285 6B000000 		.4byte	0x6b
 2908 0289 02       		.uleb128 0x2
 2909 028a 91       		.byte	0x91
 2910 028b 77       		.sleb128 -9
 2911 028c 0B       		.uleb128 0xb
 2912 028d 73756D00 		.ascii	"sum\000"
 2913 0291 01       		.byte	0x1
 2914 0292 87       		.byte	0x87
 2915 0293 81000000 		.4byte	0x81
 2916 0297 02       		.uleb128 0x2
 2917 0298 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 74


 2918 0299 70       		.sleb128 -16
 2919 029a 0B       		.uleb128 0xb
 2920 029b 61766700 		.ascii	"avg\000"
 2921 029f 01       		.byte	0x1
 2922 02a0 88       		.byte	0x88
 2923 02a1 76000000 		.4byte	0x76
 2924 02a5 02       		.uleb128 0x2
 2925 02a6 91       		.byte	0x91
 2926 02a7 6E       		.sleb128 -18
 2927 02a8 00       		.byte	0
 2928 02a9 05       		.uleb128 0x5
 2929 02aa 04       		.byte	0x4
 2930 02ab 76000000 		.4byte	0x76
 2931 02af 0E       		.uleb128 0xe
 2932 02b0 37040000 		.4byte	.LASF54
 2933 02b4 01       		.byte	0x1
 2934 02b5 9301     		.2byte	0x193
 2935 02b7 76000000 		.4byte	0x76
 2936 02bb 00000000 		.4byte	.LFB38
 2937 02bf 20000000 		.4byte	.LFE38-.LFB38
 2938 02c3 01       		.uleb128 0x1
 2939 02c4 9C       		.byte	0x9c
 2940 02c5 E8020000 		.4byte	0x2e8
 2941 02c9 0F       		.uleb128 0xf
 2942 02ca C0030000 		.4byte	.LASF55
 2943 02ce 01       		.byte	0x1
 2944 02cf 9301     		.2byte	0x193
 2945 02d1 81000000 		.4byte	0x81
 2946 02d5 02       		.uleb128 0x2
 2947 02d6 91       		.byte	0x91
 2948 02d7 6C       		.sleb128 -20
 2949 02d8 10       		.uleb128 0x10
 2950 02d9 12030000 		.4byte	.LASF56
 2951 02dd 01       		.byte	0x1
 2952 02de 9501     		.2byte	0x195
 2953 02e0 76000000 		.4byte	0x76
 2954 02e4 02       		.uleb128 0x2
 2955 02e5 91       		.byte	0x91
 2956 02e6 76       		.sleb128 -10
 2957 02e7 00       		.byte	0
 2958 02e8 11       		.uleb128 0x11
 2959 02e9 2C000000 		.4byte	.LASF65
 2960 02ed 01       		.byte	0x1
 2961 02ee 9901     		.2byte	0x199
 2962 02f0 00000000 		.4byte	.LFB39
 2963 02f4 44000000 		.4byte	.LFE39-.LFB39
 2964 02f8 01       		.uleb128 0x1
 2965 02f9 9C       		.byte	0x9c
 2966 02fa 0C030000 		.4byte	0x30c
 2967 02fe 12       		.uleb128 0x12
 2968 02ff 6900     		.ascii	"i\000"
 2969 0301 01       		.byte	0x1
 2970 0302 9C01     		.2byte	0x19c
 2971 0304 6B000000 		.4byte	0x6b
 2972 0308 02       		.uleb128 0x2
 2973 0309 91       		.byte	0x91
 2974 030a 77       		.sleb128 -9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 75


 2975 030b 00       		.byte	0
 2976 030c 13       		.uleb128 0x13
 2977 030d 99030000 		.4byte	.LASF57
 2978 0311 01       		.byte	0x1
 2979 0312 A301     		.2byte	0x1a3
 2980 0314 00000000 		.4byte	.LFB40
 2981 0318 98000000 		.4byte	.LFE40-.LFB40
 2982 031c 01       		.uleb128 0x1
 2983 031d 9C       		.byte	0x9c
 2984 031e 50030000 		.4byte	0x350
 2985 0322 0F       		.uleb128 0xf
 2986 0323 80040000 		.4byte	.LASF58
 2987 0327 01       		.byte	0x1
 2988 0328 A301     		.2byte	0x1a3
 2989 032a 6B000000 		.4byte	0x6b
 2990 032e 02       		.uleb128 0x2
 2991 032f 91       		.byte	0x91
 2992 0330 67       		.sleb128 -25
 2993 0331 0F       		.uleb128 0xf
 2994 0332 77040000 		.4byte	.LASF59
 2995 0336 01       		.byte	0x1
 2996 0337 A301     		.2byte	0x1a3
 2997 0339 76000000 		.4byte	0x76
 2998 033d 02       		.uleb128 0x2
 2999 033e 91       		.byte	0x91
 3000 033f 64       		.sleb128 -28
 3001 0340 10       		.uleb128 0x10
 3002 0341 1F040000 		.4byte	.LASF60
 3003 0345 01       		.byte	0x1
 3004 0346 A501     		.2byte	0x1a5
 3005 0348 50030000 		.4byte	0x350
 3006 034c 02       		.uleb128 0x2
 3007 034d 91       		.byte	0x91
 3008 034e 6C       		.sleb128 -20
 3009 034f 00       		.byte	0
 3010 0350 14       		.uleb128 0x14
 3011 0351 6B000000 		.4byte	0x6b
 3012 0355 60030000 		.4byte	0x360
 3013 0359 15       		.uleb128 0x15
 3014 035a B7000000 		.4byte	0xb7
 3015 035e 08       		.byte	0x8
 3016 035f 00       		.byte	0
 3017 0360 13       		.uleb128 0x13
 3018 0361 45010000 		.4byte	.LASF61
 3019 0365 01       		.byte	0x1
 3020 0366 B401     		.2byte	0x1b4
 3021 0368 00000000 		.4byte	.LFB41
 3022 036c 98000000 		.4byte	.LFE41-.LFB41
 3023 0370 01       		.uleb128 0x1
 3024 0371 9C       		.byte	0x9c
 3025 0372 A4030000 		.4byte	0x3a4
 3026 0376 0F       		.uleb128 0xf
 3027 0377 80040000 		.4byte	.LASF58
 3028 037b 01       		.byte	0x1
 3029 037c B401     		.2byte	0x1b4
 3030 037e 6B000000 		.4byte	0x6b
 3031 0382 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 76


 3032 0383 91       		.byte	0x91
 3033 0384 67       		.sleb128 -25
 3034 0385 0F       		.uleb128 0xf
 3035 0386 7A000000 		.4byte	.LASF62
 3036 038a 01       		.byte	0x1
 3037 038b B401     		.2byte	0x1b4
 3038 038d 76000000 		.4byte	0x76
 3039 0391 02       		.uleb128 0x2
 3040 0392 91       		.byte	0x91
 3041 0393 64       		.sleb128 -28
 3042 0394 10       		.uleb128 0x10
 3043 0395 1F040000 		.4byte	.LASF60
 3044 0399 01       		.byte	0x1
 3045 039a B601     		.2byte	0x1b6
 3046 039c 50030000 		.4byte	0x350
 3047 03a0 02       		.uleb128 0x2
 3048 03a1 91       		.byte	0x91
 3049 03a2 6C       		.sleb128 -20
 3050 03a3 00       		.byte	0
 3051 03a4 13       		.uleb128 0x13
 3052 03a5 9B040000 		.4byte	.LASF63
 3053 03a9 01       		.byte	0x1
 3054 03aa C601     		.2byte	0x1c6
 3055 03ac 00000000 		.4byte	.LFB42
 3056 03b0 98000000 		.4byte	.LFE42-.LFB42
 3057 03b4 01       		.uleb128 0x1
 3058 03b5 9C       		.byte	0x9c
 3059 03b6 E8030000 		.4byte	0x3e8
 3060 03ba 0F       		.uleb128 0xf
 3061 03bb 80040000 		.4byte	.LASF58
 3062 03bf 01       		.byte	0x1
 3063 03c0 C601     		.2byte	0x1c6
 3064 03c2 6B000000 		.4byte	0x6b
 3065 03c6 02       		.uleb128 0x2
 3066 03c7 91       		.byte	0x91
 3067 03c8 67       		.sleb128 -25
 3068 03c9 0F       		.uleb128 0xf
 3069 03ca CA020000 		.4byte	.LASF64
 3070 03ce 01       		.byte	0x1
 3071 03cf C601     		.2byte	0x1c6
 3072 03d1 76000000 		.4byte	0x76
 3073 03d5 02       		.uleb128 0x2
 3074 03d6 91       		.byte	0x91
 3075 03d7 64       		.sleb128 -28
 3076 03d8 10       		.uleb128 0x10
 3077 03d9 1F040000 		.4byte	.LASF60
 3078 03dd 01       		.byte	0x1
 3079 03de C801     		.2byte	0x1c8
 3080 03e0 50030000 		.4byte	0x350
 3081 03e4 02       		.uleb128 0x2
 3082 03e5 91       		.byte	0x91
 3083 03e6 6C       		.sleb128 -20
 3084 03e7 00       		.byte	0
 3085 03e8 16       		.uleb128 0x16
 3086 03e9 A9010000 		.4byte	.LASF66
 3087 03ed 01       		.byte	0x1
 3088 03ee DA01     		.2byte	0x1da
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 77


 3089 03f0 00000000 		.4byte	.LFB43
 3090 03f4 48010000 		.4byte	.LFE43-.LFB43
 3091 03f8 01       		.uleb128 0x1
 3092 03f9 9C       		.byte	0x9c
 3093 03fa 1B040000 		.4byte	0x41b
 3094 03fe 12       		.uleb128 0x12
 3095 03ff 6900     		.ascii	"i\000"
 3096 0401 01       		.byte	0x1
 3097 0402 EA01     		.2byte	0x1ea
 3098 0404 6B000000 		.4byte	0x6b
 3099 0408 02       		.uleb128 0x2
 3100 0409 91       		.byte	0x91
 3101 040a 6F       		.sleb128 -17
 3102 040b 12       		.uleb128 0x12
 3103 040c 61766700 		.ascii	"avg\000"
 3104 0410 01       		.byte	0x1
 3105 0411 EB01     		.2byte	0x1eb
 3106 0413 76000000 		.4byte	0x76
 3107 0417 02       		.uleb128 0x2
 3108 0418 91       		.byte	0x91
 3109 0419 6C       		.sleb128 -20
 3110 041a 00       		.byte	0
 3111 041b 16       		.uleb128 0x16
 3112 041c 1E010000 		.4byte	.LASF67
 3113 0420 01       		.byte	0x1
 3114 0421 3F02     		.2byte	0x23f
 3115 0423 00000000 		.4byte	.LFB44
 3116 0427 48010000 		.4byte	.LFE44-.LFB44
 3117 042b 01       		.uleb128 0x1
 3118 042c 9C       		.byte	0x9c
 3119 042d 4E040000 		.4byte	0x44e
 3120 0431 12       		.uleb128 0x12
 3121 0432 6900     		.ascii	"i\000"
 3122 0434 01       		.byte	0x1
 3123 0435 4F02     		.2byte	0x24f
 3124 0437 6B000000 		.4byte	0x6b
 3125 043b 02       		.uleb128 0x2
 3126 043c 91       		.byte	0x91
 3127 043d 6F       		.sleb128 -17
 3128 043e 12       		.uleb128 0x12
 3129 043f 61766700 		.ascii	"avg\000"
 3130 0443 01       		.byte	0x1
 3131 0444 5002     		.2byte	0x250
 3132 0446 76000000 		.4byte	0x76
 3133 044a 02       		.uleb128 0x2
 3134 044b 91       		.byte	0x91
 3135 044c 6C       		.sleb128 -20
 3136 044d 00       		.byte	0
 3137 044e 17       		.uleb128 0x17
 3138 044f 18020000 		.4byte	.LASF110
 3139 0453 01       		.byte	0x1
 3140 0454 A302     		.2byte	0x2a3
 3141 0456 00000000 		.4byte	.LFB45
 3142 045a 08000000 		.4byte	.LFE45-.LFB45
 3143 045e 01       		.uleb128 0x1
 3144 045f 9C       		.byte	0x9c
 3145 0460 16       		.uleb128 0x16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 78


 3146 0461 02010000 		.4byte	.LASF68
 3147 0465 01       		.byte	0x1
 3148 0466 AE02     		.2byte	0x2ae
 3149 0468 00000000 		.4byte	.LFB46
 3150 046c 0C020000 		.4byte	.LFE46-.LFB46
 3151 0470 01       		.uleb128 0x1
 3152 0471 9C       		.byte	0x9c
 3153 0472 A2040000 		.4byte	0x4a2
 3154 0476 12       		.uleb128 0x12
 3155 0477 6900     		.ascii	"i\000"
 3156 0479 01       		.byte	0x1
 3157 047a B402     		.2byte	0x2b4
 3158 047c 6B000000 		.4byte	0x6b
 3159 0480 02       		.uleb128 0x2
 3160 0481 91       		.byte	0x91
 3161 0482 6F       		.sleb128 -17
 3162 0483 12       		.uleb128 0x12
 3163 0484 61766700 		.ascii	"avg\000"
 3164 0488 01       		.byte	0x1
 3165 0489 B502     		.2byte	0x2b5
 3166 048b 76000000 		.4byte	0x76
 3167 048f 02       		.uleb128 0x2
 3168 0490 91       		.byte	0x91
 3169 0491 6A       		.sleb128 -22
 3170 0492 10       		.uleb128 0x10
 3171 0493 12030000 		.4byte	.LASF56
 3172 0497 01       		.byte	0x1
 3173 0498 B702     		.2byte	0x2b7
 3174 049a 76000000 		.4byte	0x76
 3175 049e 02       		.uleb128 0x2
 3176 049f 91       		.byte	0x91
 3177 04a0 6C       		.sleb128 -20
 3178 04a1 00       		.byte	0
 3179 04a2 16       		.uleb128 0x16
 3180 04a3 EF030000 		.4byte	.LASF69
 3181 04a7 01       		.byte	0x1
 3182 04a8 3A03     		.2byte	0x33a
 3183 04aa 00000000 		.4byte	.LFB47
 3184 04ae 18020000 		.4byte	.LFE47-.LFB47
 3185 04b2 01       		.uleb128 0x1
 3186 04b3 9C       		.byte	0x9c
 3187 04b4 F0040000 		.4byte	0x4f0
 3188 04b8 12       		.uleb128 0x12
 3189 04b9 6900     		.ascii	"i\000"
 3190 04bb 01       		.byte	0x1
 3191 04bc 4003     		.2byte	0x340
 3192 04be 6B000000 		.4byte	0x6b
 3193 04c2 02       		.uleb128 0x2
 3194 04c3 91       		.byte	0x91
 3195 04c4 6F       		.sleb128 -17
 3196 04c5 12       		.uleb128 0x12
 3197 04c6 61766700 		.ascii	"avg\000"
 3198 04ca 01       		.byte	0x1
 3199 04cb 4103     		.2byte	0x341
 3200 04cd 76000000 		.4byte	0x76
 3201 04d1 02       		.uleb128 0x2
 3202 04d2 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 79


 3203 04d3 6A       		.sleb128 -22
 3204 04d4 18       		.uleb128 0x18
 3205 04d5 56050000 		.4byte	.LASF76
 3206 04d9 01       		.byte	0x1
 3207 04da 4203     		.2byte	0x342
 3208 04dc 97000000 		.4byte	0x97
 3209 04e0 10       		.uleb128 0x10
 3210 04e1 12030000 		.4byte	.LASF56
 3211 04e5 01       		.byte	0x1
 3212 04e6 4303     		.2byte	0x343
 3213 04e8 76000000 		.4byte	0x76
 3214 04ec 02       		.uleb128 0x2
 3215 04ed 91       		.byte	0x91
 3216 04ee 6C       		.sleb128 -20
 3217 04ef 00       		.byte	0
 3218 04f0 19       		.uleb128 0x19
 3219 04f1 B3010000 		.4byte	.LASF70
 3220 04f5 01       		.byte	0x1
 3221 04f6 BF03     		.2byte	0x3bf
 3222 04f8 00000000 		.4byte	.LFB48
 3223 04fc 9C000000 		.4byte	.LFE48-.LFB48
 3224 0500 01       		.uleb128 0x1
 3225 0501 9C       		.byte	0x9c
 3226 0502 8E050000 		.4byte	0x58e
 3227 0506 0F       		.uleb128 0xf
 3228 0507 8F030000 		.4byte	.LASF71
 3229 050b 01       		.byte	0x1
 3230 050c BF03     		.2byte	0x3bf
 3231 050e A9020000 		.4byte	0x2a9
 3232 0512 02       		.uleb128 0x2
 3233 0513 91       		.byte	0x91
 3234 0514 6C       		.sleb128 -20
 3235 0515 0F       		.uleb128 0xf
 3236 0516 AE020000 		.4byte	.LASF72
 3237 051a 01       		.byte	0x1
 3238 051b BF03     		.2byte	0x3bf
 3239 051d 6B000000 		.4byte	0x6b
 3240 0521 02       		.uleb128 0x2
 3241 0522 91       		.byte	0x91
 3242 0523 6B       		.sleb128 -21
 3243 0524 0F       		.uleb128 0xf
 3244 0525 E4030000 		.4byte	.LASF73
 3245 0529 01       		.byte	0x1
 3246 052a BF03     		.2byte	0x3bf
 3247 052c 8E050000 		.4byte	0x58e
 3248 0530 02       		.uleb128 0x2
 3249 0531 91       		.byte	0x91
 3250 0532 64       		.sleb128 -28
 3251 0533 0F       		.uleb128 0xf
 3252 0534 53040000 		.4byte	.LASF74
 3253 0538 01       		.byte	0x1
 3254 0539 BF03     		.2byte	0x3bf
 3255 053b 6B000000 		.4byte	0x6b
 3256 053f 02       		.uleb128 0x2
 3257 0540 91       		.byte	0x91
 3258 0541 6A       		.sleb128 -22
 3259 0542 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 80


 3260 0543 53020000 		.4byte	.LASF75
 3261 0547 01       		.byte	0x1
 3262 0548 BF03     		.2byte	0x3bf
 3263 054a 6B000000 		.4byte	0x6b
 3264 054e 02       		.uleb128 0x2
 3265 054f 91       		.byte	0x91
 3266 0550 00       		.sleb128 0
 3267 0551 10       		.uleb128 0x10
 3268 0552 56050000 		.4byte	.LASF76
 3269 0556 01       		.byte	0x1
 3270 0557 C103     		.2byte	0x3c1
 3271 0559 97000000 		.4byte	0x97
 3272 055d 02       		.uleb128 0x2
 3273 055e 91       		.byte	0x91
 3274 055f 70       		.sleb128 -16
 3275 0560 10       		.uleb128 0x10
 3276 0561 65040000 		.4byte	.LASF77
 3277 0565 01       		.byte	0x1
 3278 0566 C203     		.2byte	0x3c2
 3279 0568 97000000 		.4byte	0x97
 3280 056c 02       		.uleb128 0x2
 3281 056d 91       		.byte	0x91
 3282 056e 76       		.sleb128 -10
 3283 056f 10       		.uleb128 0x10
 3284 0570 6B040000 		.4byte	.LASF78
 3285 0574 01       		.byte	0x1
 3286 0575 C303     		.2byte	0x3c3
 3287 0577 97000000 		.4byte	0x97
 3288 057b 02       		.uleb128 0x2
 3289 057c 91       		.byte	0x91
 3290 057d 74       		.sleb128 -12
 3291 057e 10       		.uleb128 0x10
 3292 057f 71040000 		.4byte	.LASF79
 3293 0583 01       		.byte	0x1
 3294 0584 C403     		.2byte	0x3c4
 3295 0586 97000000 		.4byte	0x97
 3296 058a 02       		.uleb128 0x2
 3297 058b 91       		.byte	0x91
 3298 058c 72       		.sleb128 -14
 3299 058d 00       		.byte	0
 3300 058e 05       		.uleb128 0x5
 3301 058f 04       		.byte	0x4
 3302 0590 8C000000 		.4byte	0x8c
 3303 0594 16       		.uleb128 0x16
 3304 0595 98010000 		.4byte	.LASF80
 3305 0599 01       		.byte	0x1
 3306 059a CF03     		.2byte	0x3cf
 3307 059c 00000000 		.4byte	.LFB49
 3308 05a0 44010000 		.4byte	.LFE49-.LFB49
 3309 05a4 01       		.uleb128 0x1
 3310 05a5 9C       		.byte	0x9c
 3311 05a6 C7050000 		.4byte	0x5c7
 3312 05aa 12       		.uleb128 0x12
 3313 05ab 6900     		.ascii	"i\000"
 3314 05ad 01       		.byte	0x1
 3315 05ae D403     		.2byte	0x3d4
 3316 05b0 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 81


 3317 05b4 02       		.uleb128 0x2
 3318 05b5 91       		.byte	0x91
 3319 05b6 6F       		.sleb128 -17
 3320 05b7 12       		.uleb128 0x12
 3321 05b8 61766700 		.ascii	"avg\000"
 3322 05bc 01       		.byte	0x1
 3323 05bd D503     		.2byte	0x3d5
 3324 05bf 76000000 		.4byte	0x76
 3325 05c3 02       		.uleb128 0x2
 3326 05c4 91       		.byte	0x91
 3327 05c5 6C       		.sleb128 -20
 3328 05c6 00       		.byte	0
 3329 05c7 1A       		.uleb128 0x1a
 3330 05c8 94000000 		.4byte	.LASF81
 3331 05cc 01       		.byte	0x1
 3332 05cd 2404     		.2byte	0x424
 3333 05cf 5D000000 		.4byte	0x5d
 3334 05d3 00000000 		.4byte	.LFB50
 3335 05d7 F0010000 		.4byte	.LFE50-.LFB50
 3336 05db 01       		.uleb128 0x1
 3337 05dc 9C       		.byte	0x9c
 3338 05dd 42060000 		.4byte	0x642
 3339 05e1 12       		.uleb128 0x12
 3340 05e2 7400     		.ascii	"t\000"
 3341 05e4 01       		.byte	0x1
 3342 05e5 2904     		.2byte	0x429
 3343 05e7 C4000000 		.4byte	0xc4
 3344 05eb 02       		.uleb128 0x2
 3345 05ec 91       		.byte	0x91
 3346 05ed 64       		.sleb128 -28
 3347 05ee 10       		.uleb128 0x10
 3348 05ef 3C020000 		.4byte	.LASF82
 3349 05f3 01       		.byte	0x1
 3350 05f4 2A04     		.2byte	0x42a
 3351 05f6 6B000000 		.4byte	0x6b
 3352 05fa 02       		.uleb128 0x2
 3353 05fb 91       		.byte	0x91
 3354 05fc 77       		.sleb128 -9
 3355 05fd 10       		.uleb128 0x10
 3356 05fe 99000000 		.4byte	.LASF83
 3357 0602 01       		.byte	0x1
 3358 0603 2B04     		.2byte	0x42b
 3359 0605 5D000000 		.4byte	0x5d
 3360 0609 02       		.uleb128 0x2
 3361 060a 91       		.byte	0x91
 3362 060b 68       		.sleb128 -24
 3363 060c 10       		.uleb128 0x10
 3364 060d AB030000 		.4byte	.LASF84
 3365 0611 01       		.byte	0x1
 3366 0612 2C04     		.2byte	0x42c
 3367 0614 97000000 		.4byte	0x97
 3368 0618 02       		.uleb128 0x2
 3369 0619 91       		.byte	0x91
 3370 061a 74       		.sleb128 -12
 3371 061b 10       		.uleb128 0x10
 3372 061c 6B050000 		.4byte	.LASF85
 3373 0620 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 82


 3374 0621 5104     		.2byte	0x451
 3375 0623 5D000000 		.4byte	0x5d
 3376 0627 02       		.uleb128 0x2
 3377 0628 91       		.byte	0x91
 3378 0629 70       		.sleb128 -16
 3379 062a 1B       		.uleb128 0x1b
 3380 062b 66010000 		.4byte	.LBB2
 3381 062f 38000000 		.4byte	.LBE2-.LBB2
 3382 0633 12       		.uleb128 0x12
 3383 0634 6900     		.ascii	"i\000"
 3384 0636 01       		.byte	0x1
 3385 0637 8804     		.2byte	0x488
 3386 0639 5D000000 		.4byte	0x5d
 3387 063d 02       		.uleb128 0x2
 3388 063e 91       		.byte	0x91
 3389 063f 6C       		.sleb128 -20
 3390 0640 00       		.byte	0
 3391 0641 00       		.byte	0
 3392 0642 14       		.uleb128 0x14
 3393 0643 8C000000 		.4byte	0x8c
 3394 0647 52060000 		.4byte	0x652
 3395 064b 15       		.uleb128 0x15
 3396 064c B7000000 		.4byte	0xb7
 3397 0650 0D       		.byte	0xd
 3398 0651 00       		.byte	0
 3399 0652 1C       		.uleb128 0x1c
 3400 0653 4B050000 		.4byte	.LASF86
 3401 0657 01       		.byte	0x1
 3402 0658 25       		.byte	0x25
 3403 0659 42060000 		.4byte	0x642
 3404 065d 05       		.uleb128 0x5
 3405 065e 03       		.byte	0x3
 3406 065f 00000000 		.4byte	data_array
 3407 0663 1C       		.uleb128 0x1c
 3408 0664 81000000 		.4byte	.LASF87
 3409 0668 01       		.byte	0x1
 3410 0669 27       		.byte	0x27
 3411 066a 6B000000 		.4byte	0x6b
 3412 066e 05       		.uleb128 0x5
 3413 066f 03       		.byte	0x3
 3414 0670 00000000 		.4byte	wiznet
 3415 0674 1C       		.uleb128 0x1c
 3416 0675 92040000 		.4byte	.LASF88
 3417 0679 01       		.byte	0x1
 3418 067a 28       		.byte	0x28
 3419 067b 6B000000 		.4byte	0x6b
 3420 067f 05       		.uleb128 0x5
 3421 0680 03       		.byte	0x3
 3422 0681 00000000 		.4byte	new_pack
 3423 0685 1C       		.uleb128 0x1c
 3424 0686 ED010000 		.4byte	.LASF89
 3425 068a 01       		.byte	0x1
 3426 068b 2B       		.byte	0x2b
 3427 068c 6B000000 		.4byte	0x6b
 3428 0690 05       		.uleb128 0x5
 3429 0691 03       		.byte	0x3
 3430 0692 00000000 		.4byte	fin_exec
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 83


 3431 0696 1C       		.uleb128 0x1c
 3432 0697 66010000 		.4byte	.LASF90
 3433 069b 01       		.byte	0x1
 3434 069c 2E       		.byte	0x2e
 3435 069d 42060000 		.4byte	0x642
 3436 06a1 05       		.uleb128 0x5
 3437 06a2 03       		.byte	0x3
 3438 06a3 00000000 		.4byte	test_array
 3439 06a7 1C       		.uleb128 0x1c
 3440 06a8 0F010000 		.4byte	.LASF91
 3441 06ac 01       		.byte	0x1
 3442 06ad 31       		.byte	0x31
 3443 06ae 6B000000 		.4byte	0x6b
 3444 06b2 05       		.uleb128 0x5
 3445 06b3 03       		.byte	0x3
 3446 06b4 00000000 		.4byte	elbw_arr_cspot
 3447 06b8 14       		.uleb128 0x14
 3448 06b9 76000000 		.4byte	0x76
 3449 06bd C8060000 		.4byte	0x6c8
 3450 06c1 15       		.uleb128 0x15
 3451 06c2 B7000000 		.4byte	0xb7
 3452 06c6 13       		.byte	0x13
 3453 06c7 00       		.byte	0
 3454 06c8 1C       		.uleb128 0x1c
 3455 06c9 B4030000 		.4byte	.LASF92
 3456 06cd 01       		.byte	0x1
 3457 06ce 32       		.byte	0x32
 3458 06cf B8060000 		.4byte	0x6b8
 3459 06d3 05       		.uleb128 0x5
 3460 06d4 03       		.byte	0x3
 3461 06d5 00000000 		.4byte	elbow_array
 3462 06d9 1C       		.uleb128 0x1c
 3463 06da 43040000 		.4byte	.LASF93
 3464 06de 01       		.byte	0x1
 3465 06df 35       		.byte	0x35
 3466 06e0 6B000000 		.4byte	0x6b
 3467 06e4 05       		.uleb128 0x5
 3468 06e5 03       		.byte	0x3
 3469 06e6 00000000 		.4byte	shldr_arr_cspot
 3470 06ea 1C       		.uleb128 0x1c
 3471 06eb D5030000 		.4byte	.LASF94
 3472 06ef 01       		.byte	0x1
 3473 06f0 36       		.byte	0x36
 3474 06f1 B8060000 		.4byte	0x6b8
 3475 06f5 05       		.uleb128 0x5
 3476 06f6 03       		.byte	0x3
 3477 06f7 00000000 		.4byte	shoulder_array
 3478 06fb 1C       		.uleb128 0x1c
 3479 06fc F6010000 		.4byte	.LASF95
 3480 0700 01       		.byte	0x1
 3481 0701 39       		.byte	0x39
 3482 0702 6B000000 		.4byte	0x6b
 3483 0706 05       		.uleb128 0x5
 3484 0707 03       		.byte	0x3
 3485 0708 00000000 		.4byte	BA_arr_cspot
 3486 070c 1C       		.uleb128 0x1c
 3487 070d C8030000 		.4byte	.LASF96
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 84


 3488 0711 01       		.byte	0x1
 3489 0712 3A       		.byte	0x3a
 3490 0713 B8060000 		.4byte	0x6b8
 3491 0717 05       		.uleb128 0x5
 3492 0718 03       		.byte	0x3
 3493 0719 00000000 		.4byte	baseAz_array
 3494 071d 1C       		.uleb128 0x1c
 3495 071e 8B010000 		.4byte	.LASF97
 3496 0722 01       		.byte	0x1
 3497 0723 3D       		.byte	0x3d
 3498 0724 6B000000 		.4byte	0x6b
 3499 0728 05       		.uleb128 0x5
 3500 0729 03       		.byte	0x3
 3501 072a 00000000 		.4byte	WT_arr_cspot
 3502 072e 1C       		.uleb128 0x1c
 3503 072f 2A010000 		.4byte	.LASF98
 3504 0733 01       		.byte	0x1
 3505 0734 3E       		.byte	0x3e
 3506 0735 B8060000 		.4byte	0x6b8
 3507 0739 05       		.uleb128 0x5
 3508 073a 03       		.byte	0x3
 3509 073b 00000000 		.4byte	WT_array
 3510 073f 1C       		.uleb128 0x1c
 3511 0740 00000000 		.4byte	.LASF99
 3512 0744 01       		.byte	0x1
 3513 0745 41       		.byte	0x41
 3514 0746 6B000000 		.4byte	0x6b
 3515 074a 05       		.uleb128 0x5
 3516 074b 03       		.byte	0x3
 3517 074c 00000000 		.4byte	WR_arr_cspot
 3518 0750 1C       		.uleb128 0x1c
 3519 0751 B1000000 		.4byte	.LASF100
 3520 0755 01       		.byte	0x1
 3521 0756 42       		.byte	0x42
 3522 0757 B8060000 		.4byte	0x6b8
 3523 075b 05       		.uleb128 0x5
 3524 075c 03       		.byte	0x3
 3525 075d 00000000 		.4byte	WR_array
 3526 0761 1C       		.uleb128 0x1c
 3527 0762 33010000 		.4byte	.LASF101
 3528 0766 01       		.byte	0x1
 3529 0767 45       		.byte	0x45
 3530 0768 6B000000 		.4byte	0x6b
 3531 076c 05       		.uleb128 0x5
 3532 076d 03       		.byte	0x3
 3533 076e 00000000 		.4byte	timerFlag
 3534 0772 1D       		.uleb128 0x1d
 3535 0773 F2000000 		.4byte	.LASF102
 3536 0777 01       		.byte	0x1
 3537 0778 D801     		.2byte	0x1d8
 3538 077a CF000000 		.4byte	0xcf
 3539 077e 05       		.uleb128 0x5
 3540 077f 03       		.byte	0x3
 3541 0780 00000000 		.4byte	wristTilt_state
 3542 0784 1D       		.uleb128 0x1d
 3543 0785 25040000 		.4byte	.LASF103
 3544 0789 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 85


 3545 078a 3D02     		.2byte	0x23d
 3546 078c FB000000 		.4byte	0xfb
 3547 0790 05       		.uleb128 0x5
 3548 0791 03       		.byte	0x3
 3549 0792 00000000 		.4byte	wristRotate_state
 3550 0796 1D       		.uleb128 0x1d
 3551 0797 59040000 		.4byte	.LASF104
 3552 079b 01       		.byte	0x1
 3553 079c AD02     		.2byte	0x2ad
 3554 079e 27010000 		.4byte	0x127
 3555 07a2 05       		.uleb128 0x5
 3556 07a3 03       		.byte	0x3
 3557 07a4 00000000 		.4byte	elbow_state
 3558 07a8 1D       		.uleb128 0x1d
 3559 07a9 44020000 		.4byte	.LASF105
 3560 07ad 01       		.byte	0x1
 3561 07ae 3903     		.2byte	0x339
 3562 07b0 4D010000 		.4byte	0x14d
 3563 07b4 05       		.uleb128 0x5
 3564 07b5 03       		.byte	0x3
 3565 07b6 00000000 		.4byte	shoulder_state
 3566 07ba 1D       		.uleb128 0x1d
 3567 07bb E0000000 		.4byte	.LASF106
 3568 07bf 01       		.byte	0x1
 3569 07c0 CE03     		.2byte	0x3ce
 3570 07c2 73010000 		.4byte	0x173
 3571 07c6 05       		.uleb128 0x5
 3572 07c7 03       		.byte	0x3
 3573 07c8 00000000 		.4byte	baseAzimuth_state
 3574 07cc 00       		.byte	0
 3575              		.section	.debug_abbrev,"",%progbits
 3576              	.Ldebug_abbrev0:
 3577 0000 01       		.uleb128 0x1
 3578 0001 11       		.uleb128 0x11
 3579 0002 01       		.byte	0x1
 3580 0003 25       		.uleb128 0x25
 3581 0004 0E       		.uleb128 0xe
 3582 0005 13       		.uleb128 0x13
 3583 0006 0B       		.uleb128 0xb
 3584 0007 03       		.uleb128 0x3
 3585 0008 0E       		.uleb128 0xe
 3586 0009 1B       		.uleb128 0x1b
 3587 000a 0E       		.uleb128 0xe
 3588 000b 55       		.uleb128 0x55
 3589 000c 17       		.uleb128 0x17
 3590 000d 11       		.uleb128 0x11
 3591 000e 01       		.uleb128 0x1
 3592 000f 10       		.uleb128 0x10
 3593 0010 17       		.uleb128 0x17
 3594 0011 00       		.byte	0
 3595 0012 00       		.byte	0
 3596 0013 02       		.uleb128 0x2
 3597 0014 24       		.uleb128 0x24
 3598 0015 00       		.byte	0
 3599 0016 0B       		.uleb128 0xb
 3600 0017 0B       		.uleb128 0xb
 3601 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 86


 3602 0019 0B       		.uleb128 0xb
 3603 001a 03       		.uleb128 0x3
 3604 001b 0E       		.uleb128 0xe
 3605 001c 00       		.byte	0
 3606 001d 00       		.byte	0
 3607 001e 03       		.uleb128 0x3
 3608 001f 24       		.uleb128 0x24
 3609 0020 00       		.byte	0
 3610 0021 0B       		.uleb128 0xb
 3611 0022 0B       		.uleb128 0xb
 3612 0023 3E       		.uleb128 0x3e
 3613 0024 0B       		.uleb128 0xb
 3614 0025 03       		.uleb128 0x3
 3615 0026 08       		.uleb128 0x8
 3616 0027 00       		.byte	0
 3617 0028 00       		.byte	0
 3618 0029 04       		.uleb128 0x4
 3619 002a 16       		.uleb128 0x16
 3620 002b 00       		.byte	0
 3621 002c 03       		.uleb128 0x3
 3622 002d 0E       		.uleb128 0xe
 3623 002e 3A       		.uleb128 0x3a
 3624 002f 0B       		.uleb128 0xb
 3625 0030 3B       		.uleb128 0x3b
 3626 0031 0B       		.uleb128 0xb
 3627 0032 49       		.uleb128 0x49
 3628 0033 13       		.uleb128 0x13
 3629 0034 00       		.byte	0
 3630 0035 00       		.byte	0
 3631 0036 05       		.uleb128 0x5
 3632 0037 0F       		.uleb128 0xf
 3633 0038 00       		.byte	0
 3634 0039 0B       		.uleb128 0xb
 3635 003a 0B       		.uleb128 0xb
 3636 003b 49       		.uleb128 0x49
 3637 003c 13       		.uleb128 0x13
 3638 003d 00       		.byte	0
 3639 003e 00       		.byte	0
 3640 003f 06       		.uleb128 0x6
 3641 0040 04       		.uleb128 0x4
 3642 0041 01       		.byte	0x1
 3643 0042 03       		.uleb128 0x3
 3644 0043 0E       		.uleb128 0xe
 3645 0044 0B       		.uleb128 0xb
 3646 0045 0B       		.uleb128 0xb
 3647 0046 3A       		.uleb128 0x3a
 3648 0047 0B       		.uleb128 0xb
 3649 0048 3B       		.uleb128 0x3b
 3650 0049 05       		.uleb128 0x5
 3651 004a 01       		.uleb128 0x1
 3652 004b 13       		.uleb128 0x13
 3653 004c 00       		.byte	0
 3654 004d 00       		.byte	0
 3655 004e 07       		.uleb128 0x7
 3656 004f 28       		.uleb128 0x28
 3657 0050 00       		.byte	0
 3658 0051 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 87


 3659 0052 0E       		.uleb128 0xe
 3660 0053 1C       		.uleb128 0x1c
 3661 0054 0D       		.uleb128 0xd
 3662 0055 00       		.byte	0
 3663 0056 00       		.byte	0
 3664 0057 08       		.uleb128 0x8
 3665 0058 2E       		.uleb128 0x2e
 3666 0059 01       		.byte	0x1
 3667 005a 3F       		.uleb128 0x3f
 3668 005b 19       		.uleb128 0x19
 3669 005c 03       		.uleb128 0x3
 3670 005d 0E       		.uleb128 0xe
 3671 005e 3A       		.uleb128 0x3a
 3672 005f 0B       		.uleb128 0xb
 3673 0060 3B       		.uleb128 0x3b
 3674 0061 0B       		.uleb128 0xb
 3675 0062 27       		.uleb128 0x27
 3676 0063 19       		.uleb128 0x19
 3677 0064 11       		.uleb128 0x11
 3678 0065 01       		.uleb128 0x1
 3679 0066 12       		.uleb128 0x12
 3680 0067 06       		.uleb128 0x6
 3681 0068 40       		.uleb128 0x40
 3682 0069 18       		.uleb128 0x18
 3683 006a 9642     		.uleb128 0x2116
 3684 006c 19       		.uleb128 0x19
 3685 006d 01       		.uleb128 0x1
 3686 006e 13       		.uleb128 0x13
 3687 006f 00       		.byte	0
 3688 0070 00       		.byte	0
 3689 0071 09       		.uleb128 0x9
 3690 0072 34       		.uleb128 0x34
 3691 0073 00       		.byte	0
 3692 0074 03       		.uleb128 0x3
 3693 0075 0E       		.uleb128 0xe
 3694 0076 3A       		.uleb128 0x3a
 3695 0077 0B       		.uleb128 0xb
 3696 0078 3B       		.uleb128 0x3b
 3697 0079 0B       		.uleb128 0xb
 3698 007a 49       		.uleb128 0x49
 3699 007b 13       		.uleb128 0x13
 3700 007c 02       		.uleb128 0x2
 3701 007d 18       		.uleb128 0x18
 3702 007e 00       		.byte	0
 3703 007f 00       		.byte	0
 3704 0080 0A       		.uleb128 0xa
 3705 0081 05       		.uleb128 0x5
 3706 0082 00       		.byte	0
 3707 0083 03       		.uleb128 0x3
 3708 0084 08       		.uleb128 0x8
 3709 0085 3A       		.uleb128 0x3a
 3710 0086 0B       		.uleb128 0xb
 3711 0087 3B       		.uleb128 0x3b
 3712 0088 0B       		.uleb128 0xb
 3713 0089 49       		.uleb128 0x49
 3714 008a 13       		.uleb128 0x13
 3715 008b 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 88


 3716 008c 18       		.uleb128 0x18
 3717 008d 00       		.byte	0
 3718 008e 00       		.byte	0
 3719 008f 0B       		.uleb128 0xb
 3720 0090 34       		.uleb128 0x34
 3721 0091 00       		.byte	0
 3722 0092 03       		.uleb128 0x3
 3723 0093 08       		.uleb128 0x8
 3724 0094 3A       		.uleb128 0x3a
 3725 0095 0B       		.uleb128 0xb
 3726 0096 3B       		.uleb128 0x3b
 3727 0097 0B       		.uleb128 0xb
 3728 0098 49       		.uleb128 0x49
 3729 0099 13       		.uleb128 0x13
 3730 009a 02       		.uleb128 0x2
 3731 009b 18       		.uleb128 0x18
 3732 009c 00       		.byte	0
 3733 009d 00       		.byte	0
 3734 009e 0C       		.uleb128 0xc
 3735 009f 2E       		.uleb128 0x2e
 3736 00a0 01       		.byte	0x1
 3737 00a1 3F       		.uleb128 0x3f
 3738 00a2 19       		.uleb128 0x19
 3739 00a3 03       		.uleb128 0x3
 3740 00a4 0E       		.uleb128 0xe
 3741 00a5 3A       		.uleb128 0x3a
 3742 00a6 0B       		.uleb128 0xb
 3743 00a7 3B       		.uleb128 0x3b
 3744 00a8 0B       		.uleb128 0xb
 3745 00a9 27       		.uleb128 0x27
 3746 00aa 19       		.uleb128 0x19
 3747 00ab 49       		.uleb128 0x49
 3748 00ac 13       		.uleb128 0x13
 3749 00ad 11       		.uleb128 0x11
 3750 00ae 01       		.uleb128 0x1
 3751 00af 12       		.uleb128 0x12
 3752 00b0 06       		.uleb128 0x6
 3753 00b1 40       		.uleb128 0x40
 3754 00b2 18       		.uleb128 0x18
 3755 00b3 9642     		.uleb128 0x2116
 3756 00b5 19       		.uleb128 0x19
 3757 00b6 01       		.uleb128 0x1
 3758 00b7 13       		.uleb128 0x13
 3759 00b8 00       		.byte	0
 3760 00b9 00       		.byte	0
 3761 00ba 0D       		.uleb128 0xd
 3762 00bb 05       		.uleb128 0x5
 3763 00bc 00       		.byte	0
 3764 00bd 03       		.uleb128 0x3
 3765 00be 0E       		.uleb128 0xe
 3766 00bf 3A       		.uleb128 0x3a
 3767 00c0 0B       		.uleb128 0xb
 3768 00c1 3B       		.uleb128 0x3b
 3769 00c2 0B       		.uleb128 0xb
 3770 00c3 49       		.uleb128 0x49
 3771 00c4 13       		.uleb128 0x13
 3772 00c5 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 89


 3773 00c6 18       		.uleb128 0x18
 3774 00c7 00       		.byte	0
 3775 00c8 00       		.byte	0
 3776 00c9 0E       		.uleb128 0xe
 3777 00ca 2E       		.uleb128 0x2e
 3778 00cb 01       		.byte	0x1
 3779 00cc 3F       		.uleb128 0x3f
 3780 00cd 19       		.uleb128 0x19
 3781 00ce 03       		.uleb128 0x3
 3782 00cf 0E       		.uleb128 0xe
 3783 00d0 3A       		.uleb128 0x3a
 3784 00d1 0B       		.uleb128 0xb
 3785 00d2 3B       		.uleb128 0x3b
 3786 00d3 05       		.uleb128 0x5
 3787 00d4 27       		.uleb128 0x27
 3788 00d5 19       		.uleb128 0x19
 3789 00d6 49       		.uleb128 0x49
 3790 00d7 13       		.uleb128 0x13
 3791 00d8 11       		.uleb128 0x11
 3792 00d9 01       		.uleb128 0x1
 3793 00da 12       		.uleb128 0x12
 3794 00db 06       		.uleb128 0x6
 3795 00dc 40       		.uleb128 0x40
 3796 00dd 18       		.uleb128 0x18
 3797 00de 9742     		.uleb128 0x2117
 3798 00e0 19       		.uleb128 0x19
 3799 00e1 01       		.uleb128 0x1
 3800 00e2 13       		.uleb128 0x13
 3801 00e3 00       		.byte	0
 3802 00e4 00       		.byte	0
 3803 00e5 0F       		.uleb128 0xf
 3804 00e6 05       		.uleb128 0x5
 3805 00e7 00       		.byte	0
 3806 00e8 03       		.uleb128 0x3
 3807 00e9 0E       		.uleb128 0xe
 3808 00ea 3A       		.uleb128 0x3a
 3809 00eb 0B       		.uleb128 0xb
 3810 00ec 3B       		.uleb128 0x3b
 3811 00ed 05       		.uleb128 0x5
 3812 00ee 49       		.uleb128 0x49
 3813 00ef 13       		.uleb128 0x13
 3814 00f0 02       		.uleb128 0x2
 3815 00f1 18       		.uleb128 0x18
 3816 00f2 00       		.byte	0
 3817 00f3 00       		.byte	0
 3818 00f4 10       		.uleb128 0x10
 3819 00f5 34       		.uleb128 0x34
 3820 00f6 00       		.byte	0
 3821 00f7 03       		.uleb128 0x3
 3822 00f8 0E       		.uleb128 0xe
 3823 00f9 3A       		.uleb128 0x3a
 3824 00fa 0B       		.uleb128 0xb
 3825 00fb 3B       		.uleb128 0x3b
 3826 00fc 05       		.uleb128 0x5
 3827 00fd 49       		.uleb128 0x49
 3828 00fe 13       		.uleb128 0x13
 3829 00ff 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 90


 3830 0100 18       		.uleb128 0x18
 3831 0101 00       		.byte	0
 3832 0102 00       		.byte	0
 3833 0103 11       		.uleb128 0x11
 3834 0104 2E       		.uleb128 0x2e
 3835 0105 01       		.byte	0x1
 3836 0106 3F       		.uleb128 0x3f
 3837 0107 19       		.uleb128 0x19
 3838 0108 03       		.uleb128 0x3
 3839 0109 0E       		.uleb128 0xe
 3840 010a 3A       		.uleb128 0x3a
 3841 010b 0B       		.uleb128 0xb
 3842 010c 3B       		.uleb128 0x3b
 3843 010d 05       		.uleb128 0x5
 3844 010e 11       		.uleb128 0x11
 3845 010f 01       		.uleb128 0x1
 3846 0110 12       		.uleb128 0x12
 3847 0111 06       		.uleb128 0x6
 3848 0112 40       		.uleb128 0x40
 3849 0113 18       		.uleb128 0x18
 3850 0114 9742     		.uleb128 0x2117
 3851 0116 19       		.uleb128 0x19
 3852 0117 01       		.uleb128 0x1
 3853 0118 13       		.uleb128 0x13
 3854 0119 00       		.byte	0
 3855 011a 00       		.byte	0
 3856 011b 12       		.uleb128 0x12
 3857 011c 34       		.uleb128 0x34
 3858 011d 00       		.byte	0
 3859 011e 03       		.uleb128 0x3
 3860 011f 08       		.uleb128 0x8
 3861 0120 3A       		.uleb128 0x3a
 3862 0121 0B       		.uleb128 0xb
 3863 0122 3B       		.uleb128 0x3b
 3864 0123 05       		.uleb128 0x5
 3865 0124 49       		.uleb128 0x49
 3866 0125 13       		.uleb128 0x13
 3867 0126 02       		.uleb128 0x2
 3868 0127 18       		.uleb128 0x18
 3869 0128 00       		.byte	0
 3870 0129 00       		.byte	0
 3871 012a 13       		.uleb128 0x13
 3872 012b 2E       		.uleb128 0x2e
 3873 012c 01       		.byte	0x1
 3874 012d 3F       		.uleb128 0x3f
 3875 012e 19       		.uleb128 0x19
 3876 012f 03       		.uleb128 0x3
 3877 0130 0E       		.uleb128 0xe
 3878 0131 3A       		.uleb128 0x3a
 3879 0132 0B       		.uleb128 0xb
 3880 0133 3B       		.uleb128 0x3b
 3881 0134 05       		.uleb128 0x5
 3882 0135 27       		.uleb128 0x27
 3883 0136 19       		.uleb128 0x19
 3884 0137 11       		.uleb128 0x11
 3885 0138 01       		.uleb128 0x1
 3886 0139 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 91


 3887 013a 06       		.uleb128 0x6
 3888 013b 40       		.uleb128 0x40
 3889 013c 18       		.uleb128 0x18
 3890 013d 9642     		.uleb128 0x2116
 3891 013f 19       		.uleb128 0x19
 3892 0140 01       		.uleb128 0x1
 3893 0141 13       		.uleb128 0x13
 3894 0142 00       		.byte	0
 3895 0143 00       		.byte	0
 3896 0144 14       		.uleb128 0x14
 3897 0145 01       		.uleb128 0x1
 3898 0146 01       		.byte	0x1
 3899 0147 49       		.uleb128 0x49
 3900 0148 13       		.uleb128 0x13
 3901 0149 01       		.uleb128 0x1
 3902 014a 13       		.uleb128 0x13
 3903 014b 00       		.byte	0
 3904 014c 00       		.byte	0
 3905 014d 15       		.uleb128 0x15
 3906 014e 21       		.uleb128 0x21
 3907 014f 00       		.byte	0
 3908 0150 49       		.uleb128 0x49
 3909 0151 13       		.uleb128 0x13
 3910 0152 2F       		.uleb128 0x2f
 3911 0153 0B       		.uleb128 0xb
 3912 0154 00       		.byte	0
 3913 0155 00       		.byte	0
 3914 0156 16       		.uleb128 0x16
 3915 0157 2E       		.uleb128 0x2e
 3916 0158 01       		.byte	0x1
 3917 0159 3F       		.uleb128 0x3f
 3918 015a 19       		.uleb128 0x19
 3919 015b 03       		.uleb128 0x3
 3920 015c 0E       		.uleb128 0xe
 3921 015d 3A       		.uleb128 0x3a
 3922 015e 0B       		.uleb128 0xb
 3923 015f 3B       		.uleb128 0x3b
 3924 0160 05       		.uleb128 0x5
 3925 0161 11       		.uleb128 0x11
 3926 0162 01       		.uleb128 0x1
 3927 0163 12       		.uleb128 0x12
 3928 0164 06       		.uleb128 0x6
 3929 0165 40       		.uleb128 0x40
 3930 0166 18       		.uleb128 0x18
 3931 0167 9642     		.uleb128 0x2116
 3932 0169 19       		.uleb128 0x19
 3933 016a 01       		.uleb128 0x1
 3934 016b 13       		.uleb128 0x13
 3935 016c 00       		.byte	0
 3936 016d 00       		.byte	0
 3937 016e 17       		.uleb128 0x17
 3938 016f 2E       		.uleb128 0x2e
 3939 0170 00       		.byte	0
 3940 0171 3F       		.uleb128 0x3f
 3941 0172 19       		.uleb128 0x19
 3942 0173 03       		.uleb128 0x3
 3943 0174 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 92


 3944 0175 3A       		.uleb128 0x3a
 3945 0176 0B       		.uleb128 0xb
 3946 0177 3B       		.uleb128 0x3b
 3947 0178 05       		.uleb128 0x5
 3948 0179 11       		.uleb128 0x11
 3949 017a 01       		.uleb128 0x1
 3950 017b 12       		.uleb128 0x12
 3951 017c 06       		.uleb128 0x6
 3952 017d 40       		.uleb128 0x40
 3953 017e 18       		.uleb128 0x18
 3954 017f 9742     		.uleb128 0x2117
 3955 0181 19       		.uleb128 0x19
 3956 0182 00       		.byte	0
 3957 0183 00       		.byte	0
 3958 0184 18       		.uleb128 0x18
 3959 0185 34       		.uleb128 0x34
 3960 0186 00       		.byte	0
 3961 0187 03       		.uleb128 0x3
 3962 0188 0E       		.uleb128 0xe
 3963 0189 3A       		.uleb128 0x3a
 3964 018a 0B       		.uleb128 0xb
 3965 018b 3B       		.uleb128 0x3b
 3966 018c 05       		.uleb128 0x5
 3967 018d 49       		.uleb128 0x49
 3968 018e 13       		.uleb128 0x13
 3969 018f 00       		.byte	0
 3970 0190 00       		.byte	0
 3971 0191 19       		.uleb128 0x19
 3972 0192 2E       		.uleb128 0x2e
 3973 0193 01       		.byte	0x1
 3974 0194 3F       		.uleb128 0x3f
 3975 0195 19       		.uleb128 0x19
 3976 0196 03       		.uleb128 0x3
 3977 0197 0E       		.uleb128 0xe
 3978 0198 3A       		.uleb128 0x3a
 3979 0199 0B       		.uleb128 0xb
 3980 019a 3B       		.uleb128 0x3b
 3981 019b 05       		.uleb128 0x5
 3982 019c 27       		.uleb128 0x27
 3983 019d 19       		.uleb128 0x19
 3984 019e 11       		.uleb128 0x11
 3985 019f 01       		.uleb128 0x1
 3986 01a0 12       		.uleb128 0x12
 3987 01a1 06       		.uleb128 0x6
 3988 01a2 40       		.uleb128 0x40
 3989 01a3 18       		.uleb128 0x18
 3990 01a4 9742     		.uleb128 0x2117
 3991 01a6 19       		.uleb128 0x19
 3992 01a7 01       		.uleb128 0x1
 3993 01a8 13       		.uleb128 0x13
 3994 01a9 00       		.byte	0
 3995 01aa 00       		.byte	0
 3996 01ab 1A       		.uleb128 0x1a
 3997 01ac 2E       		.uleb128 0x2e
 3998 01ad 01       		.byte	0x1
 3999 01ae 3F       		.uleb128 0x3f
 4000 01af 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 93


 4001 01b0 03       		.uleb128 0x3
 4002 01b1 0E       		.uleb128 0xe
 4003 01b2 3A       		.uleb128 0x3a
 4004 01b3 0B       		.uleb128 0xb
 4005 01b4 3B       		.uleb128 0x3b
 4006 01b5 05       		.uleb128 0x5
 4007 01b6 49       		.uleb128 0x49
 4008 01b7 13       		.uleb128 0x13
 4009 01b8 11       		.uleb128 0x11
 4010 01b9 01       		.uleb128 0x1
 4011 01ba 12       		.uleb128 0x12
 4012 01bb 06       		.uleb128 0x6
 4013 01bc 40       		.uleb128 0x40
 4014 01bd 18       		.uleb128 0x18
 4015 01be 9642     		.uleb128 0x2116
 4016 01c0 19       		.uleb128 0x19
 4017 01c1 01       		.uleb128 0x1
 4018 01c2 13       		.uleb128 0x13
 4019 01c3 00       		.byte	0
 4020 01c4 00       		.byte	0
 4021 01c5 1B       		.uleb128 0x1b
 4022 01c6 0B       		.uleb128 0xb
 4023 01c7 01       		.byte	0x1
 4024 01c8 11       		.uleb128 0x11
 4025 01c9 01       		.uleb128 0x1
 4026 01ca 12       		.uleb128 0x12
 4027 01cb 06       		.uleb128 0x6
 4028 01cc 00       		.byte	0
 4029 01cd 00       		.byte	0
 4030 01ce 1C       		.uleb128 0x1c
 4031 01cf 34       		.uleb128 0x34
 4032 01d0 00       		.byte	0
 4033 01d1 03       		.uleb128 0x3
 4034 01d2 0E       		.uleb128 0xe
 4035 01d3 3A       		.uleb128 0x3a
 4036 01d4 0B       		.uleb128 0xb
 4037 01d5 3B       		.uleb128 0x3b
 4038 01d6 0B       		.uleb128 0xb
 4039 01d7 49       		.uleb128 0x49
 4040 01d8 13       		.uleb128 0x13
 4041 01d9 3F       		.uleb128 0x3f
 4042 01da 19       		.uleb128 0x19
 4043 01db 02       		.uleb128 0x2
 4044 01dc 18       		.uleb128 0x18
 4045 01dd 00       		.byte	0
 4046 01de 00       		.byte	0
 4047 01df 1D       		.uleb128 0x1d
 4048 01e0 34       		.uleb128 0x34
 4049 01e1 00       		.byte	0
 4050 01e2 03       		.uleb128 0x3
 4051 01e3 0E       		.uleb128 0xe
 4052 01e4 3A       		.uleb128 0x3a
 4053 01e5 0B       		.uleb128 0xb
 4054 01e6 3B       		.uleb128 0x3b
 4055 01e7 05       		.uleb128 0x5
 4056 01e8 49       		.uleb128 0x49
 4057 01e9 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 94


 4058 01ea 3F       		.uleb128 0x3f
 4059 01eb 19       		.uleb128 0x19
 4060 01ec 02       		.uleb128 0x2
 4061 01ed 18       		.uleb128 0x18
 4062 01ee 00       		.byte	0
 4063 01ef 00       		.byte	0
 4064 01f0 00       		.byte	0
 4065              		.section	.debug_aranges,"",%progbits
 4066 0000 9C000000 		.4byte	0x9c
 4067 0004 0200     		.2byte	0x2
 4068 0006 00000000 		.4byte	.Ldebug_info0
 4069 000a 04       		.byte	0x4
 4070 000b 00       		.byte	0
 4071 000c 0000     		.2byte	0
 4072 000e 0000     		.2byte	0
 4073 0010 00000000 		.4byte	.LFB34
 4074 0014 28000000 		.4byte	.LFE34-.LFB34
 4075 0018 00000000 		.4byte	.LFB35
 4076 001c 62000000 		.4byte	.LFE35-.LFB35
 4077 0020 00000000 		.4byte	.LFB36
 4078 0024 7C000000 		.4byte	.LFE36-.LFB36
 4079 0028 00000000 		.4byte	.LFB37
 4080 002c 78000000 		.4byte	.LFE37-.LFB37
 4081 0030 00000000 		.4byte	.LFB38
 4082 0034 20000000 		.4byte	.LFE38-.LFB38
 4083 0038 00000000 		.4byte	.LFB39
 4084 003c 44000000 		.4byte	.LFE39-.LFB39
 4085 0040 00000000 		.4byte	.LFB40
 4086 0044 98000000 		.4byte	.LFE40-.LFB40
 4087 0048 00000000 		.4byte	.LFB41
 4088 004c 98000000 		.4byte	.LFE41-.LFB41
 4089 0050 00000000 		.4byte	.LFB42
 4090 0054 98000000 		.4byte	.LFE42-.LFB42
 4091 0058 00000000 		.4byte	.LFB43
 4092 005c 48010000 		.4byte	.LFE43-.LFB43
 4093 0060 00000000 		.4byte	.LFB44
 4094 0064 48010000 		.4byte	.LFE44-.LFB44
 4095 0068 00000000 		.4byte	.LFB45
 4096 006c 08000000 		.4byte	.LFE45-.LFB45
 4097 0070 00000000 		.4byte	.LFB46
 4098 0074 0C020000 		.4byte	.LFE46-.LFB46
 4099 0078 00000000 		.4byte	.LFB47
 4100 007c 18020000 		.4byte	.LFE47-.LFB47
 4101 0080 00000000 		.4byte	.LFB48
 4102 0084 9C000000 		.4byte	.LFE48-.LFB48
 4103 0088 00000000 		.4byte	.LFB49
 4104 008c 44010000 		.4byte	.LFE49-.LFB49
 4105 0090 00000000 		.4byte	.LFB50
 4106 0094 F0010000 		.4byte	.LFE50-.LFB50
 4107 0098 00000000 		.4byte	0
 4108 009c 00000000 		.4byte	0
 4109              		.section	.debug_ranges,"",%progbits
 4110              	.Ldebug_ranges0:
 4111 0000 00000000 		.4byte	.LFB34
 4112 0004 28000000 		.4byte	.LFE34
 4113 0008 00000000 		.4byte	.LFB35
 4114 000c 62000000 		.4byte	.LFE35
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 95


 4115 0010 00000000 		.4byte	.LFB36
 4116 0014 7C000000 		.4byte	.LFE36
 4117 0018 00000000 		.4byte	.LFB37
 4118 001c 78000000 		.4byte	.LFE37
 4119 0020 00000000 		.4byte	.LFB38
 4120 0024 20000000 		.4byte	.LFE38
 4121 0028 00000000 		.4byte	.LFB39
 4122 002c 44000000 		.4byte	.LFE39
 4123 0030 00000000 		.4byte	.LFB40
 4124 0034 98000000 		.4byte	.LFE40
 4125 0038 00000000 		.4byte	.LFB41
 4126 003c 98000000 		.4byte	.LFE41
 4127 0040 00000000 		.4byte	.LFB42
 4128 0044 98000000 		.4byte	.LFE42
 4129 0048 00000000 		.4byte	.LFB43
 4130 004c 48010000 		.4byte	.LFE43
 4131 0050 00000000 		.4byte	.LFB44
 4132 0054 48010000 		.4byte	.LFE44
 4133 0058 00000000 		.4byte	.LFB45
 4134 005c 08000000 		.4byte	.LFE45
 4135 0060 00000000 		.4byte	.LFB46
 4136 0064 0C020000 		.4byte	.LFE46
 4137 0068 00000000 		.4byte	.LFB47
 4138 006c 18020000 		.4byte	.LFE47
 4139 0070 00000000 		.4byte	.LFB48
 4140 0074 9C000000 		.4byte	.LFE48
 4141 0078 00000000 		.4byte	.LFB49
 4142 007c 44010000 		.4byte	.LFE49
 4143 0080 00000000 		.4byte	.LFB50
 4144 0084 F0010000 		.4byte	.LFE50
 4145 0088 00000000 		.4byte	0
 4146 008c 00000000 		.4byte	0
 4147              		.section	.debug_line,"",%progbits
 4148              	.Ldebug_line0:
 4149 0000 3B040000 		.section	.debug_str,"MS",%progbits,1
 4149      0200BF00 
 4149      00000201 
 4149      FB0E0D00 
 4149      01010101 
 4150              	.LASF99:
 4151 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 4151      72725F63 
 4151      73706F74 
 4151      00
 4152              	.LASF42:
 4153 000d 42415F73 		.ascii	"BA_start\000"
 4153      74617274 
 4153      00
 4154              	.LASF38:
 4155 0016 73686C64 		.ascii	"shldr_init\000"
 4155      725F696E 
 4155      697400
 4156              	.LASF19:
 4157 0021 74696C74 		.ascii	"tilt_start\000"
 4157      5F737461 
 4157      727400
 4158              	.LASF65:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 96


 4159 002c 66696C6C 		.ascii	"fill_data_array\000"
 4159      5F646174 
 4159      615F6172 
 4159      72617900 
 4160              	.LASF2:
 4161 003c 73686F72 		.ascii	"short int\000"
 4161      7420696E 
 4161      7400
 4162              	.LASF26:
 4163 0046 726F7461 		.ascii	"rotate_start\000"
 4163      74655F73 
 4163      74617274 
 4163      00
 4164              	.LASF17:
 4165 0053 73697A65 		.ascii	"sizetype\000"
 4165      74797065 
 4165      00
 4166              	.LASF44:
 4167 005c 42415F65 		.ascii	"BA_execute\000"
 4167      78656375 
 4167      746500
 4168              	.LASF25:
 4169 0067 77726973 		.ascii	"wristRotate_states\000"
 4169      74526F74 
 4169      6174655F 
 4169      73746174 
 4169      657300
 4170              	.LASF62:
 4171 007a 746F7271 		.ascii	"torque\000"
 4171      756500
 4172              	.LASF87:
 4173 0081 77697A6E 		.ascii	"wiznet\000"
 4173      657400
 4174              	.LASF37:
 4175 0088 73686C64 		.ascii	"shldr_start\000"
 4175      725F7374 
 4175      61727400 
 4176              	.LASF81:
 4177 0094 6D61696E 		.ascii	"main\000"
 4177      00
 4178              	.LASF83:
 4179 0099 64697265 		.ascii	"direction\000"
 4179      6374696F 
 4179      6E00
 4180              	.LASF6:
 4181 00a3 6C6F6E67 		.ascii	"long long int\000"
 4181      206C6F6E 
 4181      6720696E 
 4181      7400
 4182              	.LASF100:
 4183 00b1 57525F61 		.ascii	"WR_array\000"
 4183      72726179 
 4183      00
 4184              	.LASF43:
 4185 00ba 42415F69 		.ascii	"BA_init\000"
 4185      6E697400 
 4186              	.LASF39:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 97


 4187 00c2 73686C64 		.ascii	"shldr_execute\000"
 4187      725F6578 
 4187      65637574 
 4187      6500
 4188              	.LASF36:
 4189 00d0 73686F75 		.ascii	"shoulder_states\000"
 4189      6C646572 
 4189      5F737461 
 4189      74657300 
 4190              	.LASF106:
 4191 00e0 62617365 		.ascii	"baseAzimuth_state\000"
 4191      417A696D 
 4191      7574685F 
 4191      73746174 
 4191      6500
 4192              	.LASF102:
 4193 00f2 77726973 		.ascii	"wristTilt_state\000"
 4193      7454696C 
 4193      745F7374 
 4193      61746500 
 4194              	.LASF68:
 4195 0102 656C626F 		.ascii	"elbow\000"
 4195      7700
 4196              	.LASF10:
 4197 0108 75696E74 		.ascii	"uint16\000"
 4197      313600
 4198              	.LASF91:
 4199 010f 656C6277 		.ascii	"elbw_arr_cspot\000"
 4199      5F617272 
 4199      5F637370 
 4199      6F7400
 4200              	.LASF67:
 4201 011e 77726973 		.ascii	"wristRotate\000"
 4201      74526F74 
 4201      61746500 
 4202              	.LASF98:
 4203 012a 57545F61 		.ascii	"WT_array\000"
 4203      72726179 
 4203      00
 4204              	.LASF101:
 4205 0133 74696D65 		.ascii	"timerFlag\000"
 4205      72466C61 
 4205      6700
 4206              	.LASF45:
 4207 013d 42415F77 		.ascii	"BA_wait\000"
 4207      61697400 
 4208              	.LASF61:
 4209 0145 53657453 		.ascii	"SetServoTorque\000"
 4209      6572766F 
 4209      546F7271 
 4209      756500
 4210              	.LASF13:
 4211 0154 696E7431 		.ascii	"int16\000"
 4211      3600
 4212              	.LASF0:
 4213 015a 7369676E 		.ascii	"signed char\000"
 4213      65642063 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 98


 4213      68617200 
 4214              	.LASF90:
 4215 0166 74657374 		.ascii	"test_array\000"
 4215      5F617272 
 4215      617900
 4216              	.LASF108:
 4217 0171 2E5C6D61 		.ascii	".\\main.c\000"
 4217      696E2E63 
 4217      00
 4218              	.LASF14:
 4219 017a 666C6F61 		.ascii	"float\000"
 4219      7400
 4220              	.LASF32:
 4221 0180 656C6277 		.ascii	"elbw_start\000"
 4221      5F737461 
 4221      727400
 4222              	.LASF97:
 4223 018b 57545F61 		.ascii	"WT_arr_cspot\000"
 4223      72725F63 
 4223      73706F74 
 4223      00
 4224              	.LASF80:
 4225 0198 62617365 		.ascii	"baseAzimuth\000"
 4225      417A696D 
 4225      75746800 
 4226              	.LASF12:
 4227 01a4 696E7438 		.ascii	"int8\000"
 4227      00
 4228              	.LASF66:
 4229 01a9 77726973 		.ascii	"wristTilt\000"
 4229      7454696C 
 4229      7400
 4230              	.LASF70:
 4231 01b3 6D616B65 		.ascii	"make_command\000"
 4231      5F636F6D 
 4231      6D616E64 
 4231      00
 4232              	.LASF16:
 4233 01c0 63686172 		.ascii	"char\000"
 4233      00
 4234              	.LASF4:
 4235 01c5 6C6F6E67 		.ascii	"long int\000"
 4235      20696E74 
 4235      00
 4236              	.LASF41:
 4237 01ce 62617365 		.ascii	"baseAzimuth_states\000"
 4237      417A696D 
 4237      7574685F 
 4237      73746174 
 4237      657300
 4238              	.LASF29:
 4239 01e1 726F7461 		.ascii	"rotate_wait\000"
 4239      74655F77 
 4239      61697400 
 4240              	.LASF89:
 4241 01ed 66696E5F 		.ascii	"fin_exec\000"
 4241      65786563 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 99


 4241      00
 4242              	.LASF95:
 4243 01f6 42415F61 		.ascii	"BA_arr_cspot\000"
 4243      72725F63 
 4243      73706F74 
 4243      00
 4244              	.LASF20:
 4245 0203 74696C74 		.ascii	"tilt_init\000"
 4245      5F696E69 
 4245      7400
 4246              	.LASF9:
 4247 020d 75696E74 		.ascii	"uint8\000"
 4247      3800
 4248              	.LASF49:
 4249 0213 69746F61 		.ascii	"itoa\000"
 4249      00
 4250              	.LASF110:
 4251 0218 73656E64 		.ascii	"send_feedback\000"
 4251      5F666565 
 4251      64626163 
 4251      6B00
 4252              	.LASF1:
 4253 0226 756E7369 		.ascii	"unsigned char\000"
 4253      676E6564 
 4253      20636861 
 4253      7200
 4254              	.LASF48:
 4255 0234 6973725F 		.ascii	"isr_var\000"
 4255      76617200 
 4256              	.LASF82:
 4257 023c 636F756E 		.ascii	"counter\000"
 4257      74657200 
 4258              	.LASF105:
 4259 0244 73686F75 		.ascii	"shoulder_state\000"
 4259      6C646572 
 4259      5F737461 
 4259      746500
 4260              	.LASF75:
 4261 0253 62797465 		.ascii	"byte2\000"
 4261      3200
 4262              	.LASF23:
 4263 0259 74696C74 		.ascii	"tilt_feedback\000"
 4263      5F666565 
 4263      64626163 
 4263      6B00
 4264              	.LASF33:
 4265 0267 656C6277 		.ascii	"elbw_init\000"
 4265      5F696E69 
 4265      7400
 4266              	.LASF52:
 4267 0271 6E756D5F 		.ascii	"num_items\000"
 4267      6974656D 
 4267      7300
 4268              	.LASF28:
 4269 027b 726F7461 		.ascii	"rotate_control\000"
 4269      74655F63 
 4269      6F6E7472 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 100


 4269      6F6C00
 4270              	.LASF7:
 4271 028a 6C6F6E67 		.ascii	"long long unsigned int\000"
 4271      206C6F6E 
 4271      6720756E 
 4271      7369676E 
 4271      65642069 
 4272              	.LASF8:
 4273 02a1 756E7369 		.ascii	"unsigned int\000"
 4273      676E6564 
 4273      20696E74 
 4273      00
 4274              	.LASF72:
 4275 02ae 6163745F 		.ascii	"act_cspot\000"
 4275      6373706F 
 4275      7400
 4276              	.LASF5:
 4277 02b8 6C6F6E67 		.ascii	"long unsigned int\000"
 4277      20756E73 
 4277      69676E65 
 4277      6420696E 
 4277      7400
 4278              	.LASF64:
 4279 02ca 73706565 		.ascii	"speed\000"
 4279      6400
 4280              	.LASF22:
 4281 02d0 74696C74 		.ascii	"tilt_wait\000"
 4281      5F776169 
 4281      7400
 4282              	.LASF40:
 4283 02da 73686C64 		.ascii	"shldr_wait\000"
 4283      725F7761 
 4283      697400
 4284              	.LASF3:
 4285 02e5 73686F72 		.ascii	"short unsigned int\000"
 4285      7420756E 
 4285      7369676E 
 4285      65642069 
 4285      6E7400
 4286              	.LASF24:
 4287 02f8 77726973 		.ascii	"wristTilt_states\000"
 4287      7454696C 
 4287      745F7374 
 4287      61746573 
 4287      00
 4288              	.LASF51:
 4289 0309 61765F61 		.ascii	"av_array\000"
 4289      72726179 
 4289      00
 4290              	.LASF56:
 4291 0312 66656564 		.ascii	"feedback\000"
 4291      6261636B 
 4291      00
 4292              	.LASF31:
 4293 031b 656C626F 		.ascii	"elbow_states\000"
 4293      775F7374 
 4293      61746573 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 101


 4293      00
 4294              	.LASF47:
 4295 0328 72657665 		.ascii	"reverse\000"
 4295      72736500 
 4296              	.LASF109:
 4297 0330 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 4297      73657273 
 4297      5C53616D 
 4297      75656C5C 
 4297      446F6375 
 4298 035e 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 4298      5C61726D 
 4298      5F636F6E 
 4298      74726F6C 
 4298      6C65725F 
 4299 038e 00       		.ascii	"\000"
 4300              	.LASF71:
 4301 038f 6163745F 		.ascii	"act_array\000"
 4301      61727261 
 4301      7900
 4302              	.LASF57:
 4303 0399 53657276 		.ascii	"ServoGoalPosition\000"
 4303      6F476F61 
 4303      6C506F73 
 4303      6974696F 
 4303      6E00
 4304              	.LASF84:
 4305 03ab 74656D70 		.ascii	"temp_val\000"
 4305      5F76616C 
 4305      00
 4306              	.LASF92:
 4307 03b4 656C626F 		.ascii	"elbow_array\000"
 4307      775F6172 
 4307      72617900 
 4308              	.LASF55:
 4309 03c0 6368616E 		.ascii	"channel\000"
 4309      6E656C00 
 4310              	.LASF96:
 4311 03c8 62617365 		.ascii	"baseAz_array\000"
 4311      417A5F61 
 4311      72726179 
 4311      00
 4312              	.LASF94:
 4313 03d5 73686F75 		.ascii	"shoulder_array\000"
 4313      6C646572 
 4313      5F617272 
 4313      617900
 4314              	.LASF73:
 4315 03e4 696E666F 		.ascii	"info_array\000"
 4315      5F617272 
 4315      617900
 4316              	.LASF69:
 4317 03ef 73686F75 		.ascii	"shoulder\000"
 4317      6C646572 
 4317      00
 4318              	.LASF11:
 4319 03f8 75696E74 		.ascii	"uint32\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 102


 4319      333200
 4320              	.LASF21:
 4321 03ff 74696C74 		.ascii	"tilt_control\000"
 4321      5F636F6E 
 4321      74726F6C 
 4321      00
 4322              	.LASF50:
 4323 040c 7369676E 		.ascii	"sign\000"
 4323      00
 4324              	.LASF15:
 4325 0411 646F7562 		.ascii	"double\000"
 4325      6C6500
 4326              	.LASF18:
 4327 0418 74696D65 		.ascii	"time_t\000"
 4327      5F7400
 4328              	.LASF60:
 4329 041f 61727261 		.ascii	"array\000"
 4329      7900
 4330              	.LASF103:
 4331 0425 77726973 		.ascii	"wristRotate_state\000"
 4331      74526F74 
 4331      6174655F 
 4331      73746174 
 4331      6500
 4332              	.LASF54:
 4333 0437 706F7446 		.ascii	"potFeedback\000"
 4333      65656462 
 4333      61636B00 
 4334              	.LASF93:
 4335 0443 73686C64 		.ascii	"shldr_arr_cspot\000"
 4335      725F6172 
 4335      725F6373 
 4335      706F7400 
 4336              	.LASF74:
 4337 0453 62797465 		.ascii	"byte1\000"
 4337      3100
 4338              	.LASF104:
 4339 0459 656C626F 		.ascii	"elbow_state\000"
 4339      775F7374 
 4339      61746500 
 4340              	.LASF77:
 4341 0465 74656D70 		.ascii	"temp1\000"
 4341      3100
 4342              	.LASF78:
 4343 046b 74656D70 		.ascii	"temp2\000"
 4343      3200
 4344              	.LASF79:
 4345 0471 74656D70 		.ascii	"temp3\000"
 4345      3300
 4346              	.LASF59:
 4347 0477 706F7369 		.ascii	"position\000"
 4347      74696F6E 
 4347      00
 4348              	.LASF58:
 4349 0480 73657276 		.ascii	"servoID\000"
 4349      6F494400 
 4350              	.LASF46:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 103


 4351 0488 74696D65 		.ascii	"timer_isr\000"
 4351      725F6973 
 4351      7200
 4352              	.LASF88:
 4353 0492 6E65775F 		.ascii	"new_pack\000"
 4353      7061636B 
 4353      00
 4354              	.LASF63:
 4355 049b 53657276 		.ascii	"ServoSpeed\000"
 4355      6F537065 
 4355      656400
 4356              	.LASF27:
 4357 04a6 726F7461 		.ascii	"rotate_init\000"
 4357      74655F69 
 4357      6E697400 
 4358              	.LASF107:
 4359 04b2 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 4359      4320342E 
 4359      382E3420 
 4359      32303134 
 4359      30353236 
 4360 04e5 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 4360      20726576 
 4360      6973696F 
 4360      6E203231 
 4360      31333538 
 4361 0518 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 4361      74643D67 
 4361      6E753939 
 4361      202D6666 
 4361      756E6374 
 4362              	.LASF35:
 4363 0539 656C6277 		.ascii	"elbw_wait\000"
 4363      5F776169 
 4363      7400
 4364              	.LASF53:
 4365 0543 61766572 		.ascii	"average\000"
 4365      61676500 
 4366              	.LASF86:
 4367 054b 64617461 		.ascii	"data_array\000"
 4367      5F617272 
 4367      617900
 4368              	.LASF76:
 4369 0556 636F6D6D 		.ascii	"command\000"
 4369      616E6400 
 4370              	.LASF34:
 4371 055e 656C6277 		.ascii	"elbw_execute\000"
 4371      5F657865 
 4371      63757465 
 4371      00
 4372              	.LASF85:
 4373 056b 696E6372 		.ascii	"increasing\000"
 4373      65617369 
 4373      6E6700
 4374              	.LASF30:
 4375 0576 726F7461 		.ascii	"rotate_feedback\000"
 4375      74655F66 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5MJxpe.s 			page 104


 4375      65656462 
 4375      61636B00 
 4376              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

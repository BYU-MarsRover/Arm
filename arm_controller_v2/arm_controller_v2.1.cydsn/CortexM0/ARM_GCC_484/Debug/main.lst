ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,22,4
  18              		.comm	wiznet,1,1
  19              		.comm	test_array,22,4
  20              		.comm	elbw_arr_cspot,1,1
  21              		.comm	elbow_array,40,4
  22              		.comm	shldr_arr_cspot,1,1
  23              		.comm	shoulder_array,40,4
  24              		.comm	WT_arr_cspot,1,1
  25              		.comm	WT_array,40,4
  26              		.comm	WR_arr_cspot,1,1
  27              		.comm	WR_array,40,4
  28              		.global	WT_FLAG
  29              		.bss
  30              		.type	WT_FLAG, %object
  31              		.size	WT_FLAG, 1
  32              	WT_FLAG:
  33 0000 00       		.space	1
  34              		.global	WR_FLAG
  35              		.type	WR_FLAG, %object
  36              		.size	WR_FLAG, 1
  37              	WR_FLAG:
  38 0001 00       		.space	1
  39              		.global	ELBOW_FLAG
  40              		.type	ELBOW_FLAG, %object
  41              		.size	ELBOW_FLAG, 1
  42              	ELBOW_FLAG:
  43 0002 00       		.space	1
  44              		.global	SHOULDER_FLAG
  45              		.type	SHOULDER_FLAG, %object
  46              		.size	SHOULDER_FLAG, 1
  47              	SHOULDER_FLAG:
  48 0003 00       		.space	1
  49              		.global	BA_FLAG
  50              		.type	BA_FLAG, %object
  51              		.size	BA_FLAG, 1
  52              	BA_FLAG:
  53 0004 00       		.space	1
  54              		.global	temp_val
  55              		.data
  56              		.align	1
  57              		.type	temp_val, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 2


  58              		.size	temp_val, 2
  59              	temp_val:
  60 0000 0CFE     		.short	-500
  61              		.comm	timerFlag,1,1
  62              		.section	.text.timer_isr,"ax",%progbits
  63              		.align	2
  64              		.global	timer_isr
  65              		.code	16
  66              		.thumb_func
  67              		.type	timer_isr, %function
  68              	timer_isr:
  69              	.LFB34:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
  71              		.loc 1 11 0
  72              		.cfi_startproc
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 82B0     		sub	sp, sp, #8
  78              		.cfi_def_cfa_offset 16
  79 0004 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  81              		.loc 1 12 0
  82 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  83 000a 031C     		mov	r3, r0
  84 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
  85              		.loc 1 13 0
  86 000e 054B     		ldr	r3, .L2
  87 0010 0122     		mov	r2, #1
  88 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  89              		.loc 1 14 0
  90 0014 7B68     		ldr	r3, [r7, #4]
  91 0016 181C     		mov	r0, r3
  92 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
  93              		.loc 1 15 0
  94 001c BD46     		mov	sp, r7
  95 001e 02B0     		add	sp, sp, #8
  96              		@ sp needed
  97 0020 80BD     		pop	{r7, pc}
  98              	.L3:
  99 0022 C046     		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 3


 100              	.L2:
 101 0024 00000000 		.word	timerFlag
 102              		.cfi_endproc
 103              	.LFE34:
 104              		.size	timer_isr, .-timer_isr
 105              		.global	__aeabi_uidiv
 106              		.section	.text.average,"ax",%progbits
 107              		.align	2
 108              		.global	average
 109              		.code	16
 110              		.thumb_func
 111              		.type	average, %function
 112              	average:
 113              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
 114              		.loc 1 51 0
 115              		.cfi_startproc
 116 0000 80B5     		push	{r7, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 4


 121              		.cfi_def_cfa_offset 32
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 124 0006 7860     		str	r0, [r7, #4]
 125 0008 0A1C     		mov	r2, r1
 126 000a FB1C     		add	r3, r7, #3
 127 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
 128              		.loc 1 53 0
 129 000e 0023     		mov	r3, #0
 130 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 131              		.loc 1 54 0
 132 0012 3B1C     		mov	r3, r7
 133 0014 0E33     		add	r3, r3, #14
 134 0016 0022     		mov	r2, #0
 135 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 136              		.loc 1 56 0
 137 001a 3B1C     		mov	r3, r7
 138 001c 1733     		add	r3, r3, #23
 139 001e 0022     		mov	r2, #0
 140 0020 1A70     		strb	r2, [r3]
 141 0022 10E0     		b	.L5
 142              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
 143              		.loc 1 58 0 discriminator 2
 144 0024 3B1C     		mov	r3, r7
 145 0026 1733     		add	r3, r3, #23
 146 0028 1B78     		ldrb	r3, [r3]
 147 002a 5B00     		lsl	r3, r3, #1
 148 002c 7A68     		ldr	r2, [r7, #4]
 149 002e D318     		add	r3, r2, r3
 150 0030 1B88     		ldrh	r3, [r3]
 151 0032 3A69     		ldr	r2, [r7, #16]
 152 0034 D318     		add	r3, r2, r3
 153 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 154              		.loc 1 56 0 discriminator 2
 155 0038 3B1C     		mov	r3, r7
 156 003a 1733     		add	r3, r3, #23
 157 003c 1A78     		ldrb	r2, [r3]
 158 003e 3B1C     		mov	r3, r7
 159 0040 1733     		add	r3, r3, #23
 160 0042 0132     		add	r2, r2, #1
 161 0044 1A70     		strb	r2, [r3]
 162              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 163              		.loc 1 56 0 is_stmt 0 discriminator 1
 164 0046 3A1C     		mov	r2, r7
 165 0048 1732     		add	r2, r2, #23
 166 004a FB1C     		add	r3, r7, #3
 167 004c 1278     		ldrb	r2, [r2]
 168 004e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 5


 169 0050 9A42     		cmp	r2, r3
 170 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
 171              		.loc 1 61 0 is_stmt 1
 172 0054 FB1C     		add	r3, r7, #3
 173 0056 1B78     		ldrb	r3, [r3]
 174 0058 3869     		ldr	r0, [r7, #16]
 175 005a 191C     		mov	r1, r3
 176 005c FFF7FEFF 		bl	__aeabi_uidiv
 177 0060 031C     		mov	r3, r0
 178 0062 1A1C     		mov	r2, r3
 179 0064 3B1C     		mov	r3, r7
 180 0066 0E33     		add	r3, r3, #14
 181 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 182              		.loc 1 63 0
 183 006a 3B1C     		mov	r3, r7
 184 006c 0E33     		add	r3, r3, #14
 185 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 186              		.loc 1 64 0
 187 0070 181C     		mov	r0, r3
 188 0072 BD46     		mov	sp, r7
 189 0074 06B0     		add	sp, sp, #24
 190              		@ sp needed
 191 0076 80BD     		pop	{r7, pc}
 192              		.cfi_endproc
 193              	.LFE35:
 194              		.size	average, .-average
 195              		.section	.text.maintain_array,"ax",%progbits
 196              		.align	2
 197              		.global	maintain_array
 198              		.code	16
 199              		.thumb_func
 200              		.type	maintain_array, %function
 201              	maintain_array:
 202              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
  67:.\main.c      **** {
 203              		.loc 1 67 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 82B0     		sub	sp, sp, #8
 210              		.cfi_def_cfa_offset 16
 211 0004 00AF     		add	r7, sp, #0
 212              		.cfi_def_cfa_register 7
 213 0006 0A1C     		mov	r2, r1
 214 0008 FB1D     		add	r3, r7, #7
 215 000a 011C     		add	r1, r0, #0
 216 000c 1970     		strb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 6


 217 000e BB1D     		add	r3, r7, #6
 218 0010 1A70     		strb	r2, [r3]
  68:.\main.c      ****     if(cpos < (SIZE - 1))
 219              		.loc 1 68 0
 220 0012 FB1D     		add	r3, r7, #7
 221 0014 1A78     		ldrb	r2, [r3]
 222 0016 BB1D     		add	r3, r7, #6
 223 0018 1B78     		ldrb	r3, [r3]
 224 001a 013B     		sub	r3, r3, #1
 225 001c 9A42     		cmp	r2, r3
 226 001e 05DA     		bge	.L9
  69:.\main.c      ****     {
  70:.\main.c      ****         cpos++;
 227              		.loc 1 70 0
 228 0020 FB1D     		add	r3, r7, #7
 229 0022 1A78     		ldrb	r2, [r3]
 230 0024 FB1D     		add	r3, r7, #7
 231 0026 0132     		add	r2, r2, #1
 232 0028 1A70     		strb	r2, [r3]
 233 002a 02E0     		b	.L10
 234              	.L9:
  71:.\main.c      ****     }
  72:.\main.c      ****     else
  73:.\main.c      ****     {
  74:.\main.c      ****         cpos = 0;
 235              		.loc 1 74 0
 236 002c FB1D     		add	r3, r7, #7
 237 002e 0022     		mov	r2, #0
 238 0030 1A70     		strb	r2, [r3]
 239              	.L10:
  75:.\main.c      ****     }
  76:.\main.c      ****     return cpos;
 240              		.loc 1 76 0
 241 0032 FB1D     		add	r3, r7, #7
 242 0034 1B78     		ldrb	r3, [r3]
  77:.\main.c      **** }
 243              		.loc 1 77 0
 244 0036 181C     		mov	r0, r3
 245 0038 BD46     		mov	sp, r7
 246 003a 02B0     		add	sp, sp, #8
 247              		@ sp needed
 248 003c 80BD     		pop	{r7, pc}
 249              		.cfi_endproc
 250              	.LFE36:
 251              		.size	maintain_array, .-maintain_array
 252 003e C046     		.section	.text.check_update,"ax",%progbits
 253              		.align	2
 254              		.global	check_update
 255              		.code	16
 256              		.thumb_func
 257              		.type	check_update, %function
 258              	check_update:
 259              	.LFB37:
  78:.\main.c      **** 
  79:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
  80:.\main.c      **** {
 260              		.loc 1 80 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 7


 261              		.cfi_startproc
 262 0000 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 86B0     		sub	sp, sp, #24
 267              		.cfi_def_cfa_offset 32
 268 0004 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 270 0006 F860     		str	r0, [r7, #12]
 271 0008 7B60     		str	r3, [r7, #4]
 272 000a 3B1C     		mov	r3, r7
 273 000c 0B33     		add	r3, r3, #11
 274 000e 1970     		strb	r1, [r3]
 275 0010 3B1C     		mov	r3, r7
 276 0012 0A33     		add	r3, r3, #10
 277 0014 1A70     		strb	r2, [r3]
  81:.\main.c      ****     uint8 index;
  82:.\main.c      ****     if(arr_pos != 0)
 278              		.loc 1 82 0
 279 0016 3B1C     		mov	r3, r7
 280 0018 0B33     		add	r3, r3, #11
 281 001a 1B78     		ldrb	r3, [r3]
 282 001c 002B     		cmp	r3, #0
 283 001e 07D0     		beq	.L13
  83:.\main.c      ****     {
  84:.\main.c      ****         index = arr_pos - 1;
 284              		.loc 1 84 0
 285 0020 3B1C     		mov	r3, r7
 286 0022 1733     		add	r3, r3, #23
 287 0024 3A1C     		mov	r2, r7
 288 0026 0B32     		add	r2, r2, #11
 289 0028 1278     		ldrb	r2, [r2]
 290 002a 013A     		sub	r2, r2, #1
 291 002c 1A70     		strb	r2, [r3]
 292 002e 06E0     		b	.L14
 293              	.L13:
  85:.\main.c      ****     }
  86:.\main.c      ****     else
  87:.\main.c      ****     {
  88:.\main.c      ****         index = size - 1;
 294              		.loc 1 88 0
 295 0030 3B1C     		mov	r3, r7
 296 0032 1733     		add	r3, r3, #23
 297 0034 3A1C     		mov	r2, r7
 298 0036 0A32     		add	r2, r2, #10
 299 0038 1278     		ldrb	r2, [r2]
 300 003a 013A     		sub	r2, r2, #1
 301 003c 1A70     		strb	r2, [r3]
 302              	.L14:
  89:.\main.c      ****     }
  90:.\main.c      ****     
  91:.\main.c      ****     if(change < 0)
 303              		.loc 1 91 0
 304 003e 7B68     		ldr	r3, [r7, #4]
 305 0040 002B     		cmp	r3, #0
 306 0042 2ADA     		bge	.L15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 8


  92:.\main.c      ****     {
  93:.\main.c      ****         if(array[index] >= (1000 - change))
 307              		.loc 1 93 0
 308 0044 3B1C     		mov	r3, r7
 309 0046 1733     		add	r3, r3, #23
 310 0048 1B78     		ldrb	r3, [r3]
 311 004a 5B00     		lsl	r3, r3, #1
 312 004c FA68     		ldr	r2, [r7, #12]
 313 004e D318     		add	r3, r2, r3
 314 0050 1B88     		ldrh	r3, [r3]
 315 0052 1A1C     		mov	r2, r3
 316 0054 7B68     		ldr	r3, [r7, #4]
 317 0056 FA21     		mov	r1, #250
 318 0058 8900     		lsl	r1, r1, #2
 319 005a CB1A     		sub	r3, r1, r3
 320 005c 9A42     		cmp	r2, r3
 321 005e 12DB     		blt	.L16
  94:.\main.c      ****         {
  95:.\main.c      ****             array[arr_pos] = (array[index] + change);
 322              		.loc 1 95 0
 323 0060 3B1C     		mov	r3, r7
 324 0062 0B33     		add	r3, r3, #11
 325 0064 1B78     		ldrb	r3, [r3]
 326 0066 5B00     		lsl	r3, r3, #1
 327 0068 FA68     		ldr	r2, [r7, #12]
 328 006a D318     		add	r3, r2, r3
 329 006c 3A1C     		mov	r2, r7
 330 006e 1732     		add	r2, r2, #23
 331 0070 1278     		ldrb	r2, [r2]
 332 0072 5200     		lsl	r2, r2, #1
 333 0074 F968     		ldr	r1, [r7, #12]
 334 0076 8A18     		add	r2, r1, r2
 335 0078 1188     		ldrh	r1, [r2]
 336 007a 7A68     		ldr	r2, [r7, #4]
 337 007c 92B2     		uxth	r2, r2
 338 007e 8A18     		add	r2, r1, r2
 339 0080 92B2     		uxth	r2, r2
 340 0082 1A80     		strh	r2, [r3]
 341 0084 33E0     		b	.L18
 342              	.L16:
  96:.\main.c      ****         }
  97:.\main.c      ****         else
  98:.\main.c      ****         {
  99:.\main.c      ****             array[arr_pos] = 1000;
 343              		.loc 1 99 0
 344 0086 3B1C     		mov	r3, r7
 345 0088 0B33     		add	r3, r3, #11
 346 008a 1B78     		ldrb	r3, [r3]
 347 008c 5B00     		lsl	r3, r3, #1
 348 008e FA68     		ldr	r2, [r7, #12]
 349 0090 D318     		add	r3, r2, r3
 350 0092 FA22     		mov	r2, #250
 351 0094 9200     		lsl	r2, r2, #2
 352 0096 1A80     		strh	r2, [r3]
 353 0098 29E0     		b	.L18
 354              	.L15:
 100:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 9


 101:.\main.c      ****     }
 102:.\main.c      ****     else
 103:.\main.c      ****     {
 104:.\main.c      ****         if(array[index] <= (2000 - change))
 355              		.loc 1 104 0
 356 009a 3B1C     		mov	r3, r7
 357 009c 1733     		add	r3, r3, #23
 358 009e 1B78     		ldrb	r3, [r3]
 359 00a0 5B00     		lsl	r3, r3, #1
 360 00a2 FA68     		ldr	r2, [r7, #12]
 361 00a4 D318     		add	r3, r2, r3
 362 00a6 1B88     		ldrh	r3, [r3]
 363 00a8 1A1C     		mov	r2, r3
 364 00aa 7B68     		ldr	r3, [r7, #4]
 365 00ac FA21     		mov	r1, #250
 366 00ae C900     		lsl	r1, r1, #3
 367 00b0 CB1A     		sub	r3, r1, r3
 368 00b2 9A42     		cmp	r2, r3
 369 00b4 12DC     		bgt	.L19
 105:.\main.c      ****         {
 106:.\main.c      ****             array[arr_pos] = (array[index] + change);
 370              		.loc 1 106 0
 371 00b6 3B1C     		mov	r3, r7
 372 00b8 0B33     		add	r3, r3, #11
 373 00ba 1B78     		ldrb	r3, [r3]
 374 00bc 5B00     		lsl	r3, r3, #1
 375 00be FA68     		ldr	r2, [r7, #12]
 376 00c0 D318     		add	r3, r2, r3
 377 00c2 3A1C     		mov	r2, r7
 378 00c4 1732     		add	r2, r2, #23
 379 00c6 1278     		ldrb	r2, [r2]
 380 00c8 5200     		lsl	r2, r2, #1
 381 00ca F968     		ldr	r1, [r7, #12]
 382 00cc 8A18     		add	r2, r1, r2
 383 00ce 1188     		ldrh	r1, [r2]
 384 00d0 7A68     		ldr	r2, [r7, #4]
 385 00d2 92B2     		uxth	r2, r2
 386 00d4 8A18     		add	r2, r1, r2
 387 00d6 92B2     		uxth	r2, r2
 388 00d8 1A80     		strh	r2, [r3]
 389 00da 08E0     		b	.L18
 390              	.L19:
 107:.\main.c      ****         }
 108:.\main.c      ****         else
 109:.\main.c      ****         {
 110:.\main.c      ****             array[arr_pos] = 2000;
 391              		.loc 1 110 0
 392 00dc 3B1C     		mov	r3, r7
 393 00de 0B33     		add	r3, r3, #11
 394 00e0 1B78     		ldrb	r3, [r3]
 395 00e2 5B00     		lsl	r3, r3, #1
 396 00e4 FA68     		ldr	r2, [r7, #12]
 397 00e6 D318     		add	r3, r2, r3
 398 00e8 FA22     		mov	r2, #250
 399 00ea D200     		lsl	r2, r2, #3
 400 00ec 1A80     		strh	r2, [r3]
 401              	.L18:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 10


 111:.\main.c      ****         }
 112:.\main.c      ****     }
 113:.\main.c      ****     
 114:.\main.c      ****     return maintain_array(arr_pos, size);
 402              		.loc 1 114 0
 403 00ee 3B1C     		mov	r3, r7
 404 00f0 0B33     		add	r3, r3, #11
 405 00f2 1A78     		ldrb	r2, [r3]
 406 00f4 3B1C     		mov	r3, r7
 407 00f6 0A33     		add	r3, r3, #10
 408 00f8 1B78     		ldrb	r3, [r3]
 409 00fa 101C     		mov	r0, r2
 410 00fc 191C     		mov	r1, r3
 411 00fe FFF7FEFF 		bl	maintain_array
 412 0102 031C     		mov	r3, r0
 115:.\main.c      **** }
 413              		.loc 1 115 0
 414 0104 181C     		mov	r0, r3
 415 0106 BD46     		mov	sp, r7
 416 0108 06B0     		add	sp, sp, #24
 417              		@ sp needed
 418 010a 80BD     		pop	{r7, pc}
 419              		.cfi_endproc
 420              	.LFE37:
 421              		.size	check_update, .-check_update
 422              		.section	.text.pos_to_vel,"ax",%progbits
 423              		.align	2
 424              		.global	pos_to_vel
 425              		.code	16
 426              		.thumb_func
 427              		.type	pos_to_vel, %function
 428              	pos_to_vel:
 429              	.LFB38:
 116:.\main.c      **** 
 117:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 118:.\main.c      **** {
 430              		.loc 1 118 0
 431              		.cfi_startproc
 432 0000 90B5     		push	{r4, r7, lr}
 433              		.cfi_def_cfa_offset 12
 434              		.cfi_offset 4, -12
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 83B0     		sub	sp, sp, #12
 438              		.cfi_def_cfa_offset 24
 439 0004 00AF     		add	r7, sp, #0
 440              		.cfi_def_cfa_register 7
 441 0006 3960     		str	r1, [r7]
 442 0008 111C     		mov	r1, r2
 443 000a 1A1C     		mov	r2, r3
 444 000c FB1D     		add	r3, r7, #7
 445 000e 1870     		strb	r0, [r3]
 446 0010 BB1D     		add	r3, r7, #6
 447 0012 1970     		strb	r1, [r3]
 448 0014 3B1D     		add	r3, r7, #4
 449 0016 1A80     		strh	r2, [r3]
 119:.\main.c      ****     if(command >= 1000 && command < 1125)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 11


 450              		.loc 1 119 0
 451 0018 3B1D     		add	r3, r7, #4
 452 001a 1A88     		ldrh	r2, [r3]
 453 001c 724B     		ldr	r3, .L33
 454 001e 9A42     		cmp	r2, r3
 455 0020 11D9     		bls	.L22
 456              		.loc 1 119 0 is_stmt 0 discriminator 1
 457 0022 3B1D     		add	r3, r7, #4
 458 0024 1A88     		ldrh	r2, [r3]
 459 0026 714B     		ldr	r3, .L33+4
 460 0028 9A42     		cmp	r2, r3
 461 002a 0CD8     		bhi	.L22
 120:.\main.c      ****     {
 121:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 462              		.loc 1 121 0 is_stmt 1
 463 002c FC1D     		add	r4, r7, #7
 464 002e 3868     		ldr	r0, [r7]
 465 0030 FB1D     		add	r3, r7, #7
 466 0032 1978     		ldrb	r1, [r3]
 467 0034 BB1D     		add	r3, r7, #6
 468 0036 1A78     		ldrb	r2, [r3]
 469 0038 6423     		mov	r3, #100
 470 003a 5B42     		neg	r3, r3
 471 003c FFF7FEFF 		bl	check_update
 472 0040 031C     		mov	r3, r0
 473 0042 2370     		strb	r3, [r4]
 474 0044 CAE0     		b	.L23
 475              	.L22:
 122:.\main.c      ****     }
 123:.\main.c      ****     else if(command >= 1125 && command < 1250)
 476              		.loc 1 123 0
 477 0046 3B1D     		add	r3, r7, #4
 478 0048 1A88     		ldrh	r2, [r3]
 479 004a 684B     		ldr	r3, .L33+4
 480 004c 9A42     		cmp	r2, r3
 481 004e 11D9     		bls	.L24
 482              		.loc 1 123 0 is_stmt 0 discriminator 1
 483 0050 3B1D     		add	r3, r7, #4
 484 0052 1A88     		ldrh	r2, [r3]
 485 0054 664B     		ldr	r3, .L33+8
 486 0056 9A42     		cmp	r2, r3
 487 0058 0CD8     		bhi	.L24
 124:.\main.c      ****     {
 125:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 488              		.loc 1 125 0 is_stmt 1
 489 005a FC1D     		add	r4, r7, #7
 490 005c 3868     		ldr	r0, [r7]
 491 005e FB1D     		add	r3, r7, #7
 492 0060 1978     		ldrb	r1, [r3]
 493 0062 BB1D     		add	r3, r7, #6
 494 0064 1A78     		ldrb	r2, [r3]
 495 0066 3223     		mov	r3, #50
 496 0068 5B42     		neg	r3, r3
 497 006a FFF7FEFF 		bl	check_update
 498 006e 031C     		mov	r3, r0
 499 0070 2370     		strb	r3, [r4]
 500 0072 B3E0     		b	.L23
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 12


 501              	.L24:
 126:.\main.c      ****     }
 127:.\main.c      ****     else if(command >= 1250 && command < 1375)
 502              		.loc 1 127 0
 503 0074 3B1D     		add	r3, r7, #4
 504 0076 1A88     		ldrh	r2, [r3]
 505 0078 5D4B     		ldr	r3, .L33+8
 506 007a 9A42     		cmp	r2, r3
 507 007c 11D9     		bls	.L25
 508              		.loc 1 127 0 is_stmt 0 discriminator 1
 509 007e 3B1D     		add	r3, r7, #4
 510 0080 1A88     		ldrh	r2, [r3]
 511 0082 5C4B     		ldr	r3, .L33+12
 512 0084 9A42     		cmp	r2, r3
 513 0086 0CD8     		bhi	.L25
 128:.\main.c      ****     {
 129:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 514              		.loc 1 129 0 is_stmt 1
 515 0088 FC1D     		add	r4, r7, #7
 516 008a 3868     		ldr	r0, [r7]
 517 008c FB1D     		add	r3, r7, #7
 518 008e 1978     		ldrb	r1, [r3]
 519 0090 BB1D     		add	r3, r7, #6
 520 0092 1A78     		ldrb	r2, [r3]
 521 0094 0A23     		mov	r3, #10
 522 0096 5B42     		neg	r3, r3
 523 0098 FFF7FEFF 		bl	check_update
 524 009c 031C     		mov	r3, r0
 525 009e 2370     		strb	r3, [r4]
 526 00a0 9CE0     		b	.L23
 527              	.L25:
 130:.\main.c      ****     }
 131:.\main.c      ****     else if(command >= 1375 && command < 1490)
 528              		.loc 1 131 0
 529 00a2 3B1D     		add	r3, r7, #4
 530 00a4 1A88     		ldrh	r2, [r3]
 531 00a6 534B     		ldr	r3, .L33+12
 532 00a8 9A42     		cmp	r2, r3
 533 00aa 11D9     		bls	.L26
 534              		.loc 1 131 0 is_stmt 0 discriminator 1
 535 00ac 3B1D     		add	r3, r7, #4
 536 00ae 1A88     		ldrh	r2, [r3]
 537 00b0 514B     		ldr	r3, .L33+16
 538 00b2 9A42     		cmp	r2, r3
 539 00b4 0CD8     		bhi	.L26
 132:.\main.c      ****     {
 133:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 540              		.loc 1 133 0 is_stmt 1
 541 00b6 FC1D     		add	r4, r7, #7
 542 00b8 3868     		ldr	r0, [r7]
 543 00ba FB1D     		add	r3, r7, #7
 544 00bc 1978     		ldrb	r1, [r3]
 545 00be BB1D     		add	r3, r7, #6
 546 00c0 1A78     		ldrb	r2, [r3]
 547 00c2 0523     		mov	r3, #5
 548 00c4 5B42     		neg	r3, r3
 549 00c6 FFF7FEFF 		bl	check_update
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 13


 550 00ca 031C     		mov	r3, r0
 551 00cc 2370     		strb	r3, [r4]
 552 00ce 85E0     		b	.L23
 553              	.L26:
 134:.\main.c      ****     }
 135:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 554              		.loc 1 135 0
 555 00d0 3B1D     		add	r3, r7, #4
 556 00d2 1A88     		ldrh	r2, [r3]
 557 00d4 494B     		ldr	r3, .L33+20
 558 00d6 9A42     		cmp	r2, r3
 559 00d8 10D8     		bhi	.L27
 560              		.loc 1 135 0 is_stmt 0 discriminator 1
 561 00da 3B1D     		add	r3, r7, #4
 562 00dc 1A88     		ldrh	r2, [r3]
 563 00de 464B     		ldr	r3, .L33+16
 564 00e0 9A42     		cmp	r2, r3
 565 00e2 0BD9     		bls	.L27
 136:.\main.c      ****     {
 137:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 566              		.loc 1 137 0 is_stmt 1
 567 00e4 FC1D     		add	r4, r7, #7
 568 00e6 FB1D     		add	r3, r7, #7
 569 00e8 1A78     		ldrb	r2, [r3]
 570 00ea BB1D     		add	r3, r7, #6
 571 00ec 1B78     		ldrb	r3, [r3]
 572 00ee 101C     		mov	r0, r2
 573 00f0 191C     		mov	r1, r3
 574 00f2 FFF7FEFF 		bl	maintain_array
 575 00f6 031C     		mov	r3, r0
 576 00f8 2370     		strb	r3, [r4]
 577 00fa 6FE0     		b	.L23
 578              	.L27:
 138:.\main.c      ****     }
 139:.\main.c      ****     else if(command > 1510 && command <= 1625)
 579              		.loc 1 139 0
 580 00fc 3B1D     		add	r3, r7, #4
 581 00fe 1A88     		ldrh	r2, [r3]
 582 0100 3E4B     		ldr	r3, .L33+20
 583 0102 9A42     		cmp	r2, r3
 584 0104 13D9     		bls	.L28
 585              		.loc 1 139 0 is_stmt 0 discriminator 1
 586 0106 3B1D     		add	r3, r7, #4
 587 0108 1A88     		ldrh	r2, [r3]
 588 010a 3D4B     		ldr	r3, .L33+24
 589 010c 9A42     		cmp	r2, r3
 590 010e 0ED8     		bhi	.L28
 140:.\main.c      ****     {
 141:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 591              		.loc 1 141 0 is_stmt 1
 592 0110 FC1D     		add	r4, r7, #7
 593 0112 3968     		ldr	r1, [r7]
 594 0114 FB1D     		add	r3, r7, #7
 595 0116 1A78     		ldrb	r2, [r3]
 596 0118 BB1D     		add	r3, r7, #6
 597 011a 1B78     		ldrb	r3, [r3]
 598 011c 081C     		mov	r0, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 14


 599 011e 111C     		mov	r1, r2
 600 0120 1A1C     		mov	r2, r3
 601 0122 0523     		mov	r3, #5
 602 0124 FFF7FEFF 		bl	check_update
 603 0128 031C     		mov	r3, r0
 604 012a 2370     		strb	r3, [r4]
 605 012c 56E0     		b	.L23
 606              	.L28:
 142:.\main.c      ****     }
 143:.\main.c      ****     else if(command > 1625 && command <= 1750)
 607              		.loc 1 143 0
 608 012e 3B1D     		add	r3, r7, #4
 609 0130 1A88     		ldrh	r2, [r3]
 610 0132 334B     		ldr	r3, .L33+24
 611 0134 9A42     		cmp	r2, r3
 612 0136 13D9     		bls	.L29
 613              		.loc 1 143 0 is_stmt 0 discriminator 1
 614 0138 3B1D     		add	r3, r7, #4
 615 013a 1A88     		ldrh	r2, [r3]
 616 013c 314B     		ldr	r3, .L33+28
 617 013e 9A42     		cmp	r2, r3
 618 0140 0ED8     		bhi	.L29
 144:.\main.c      ****     {
 145:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 619              		.loc 1 145 0 is_stmt 1
 620 0142 FC1D     		add	r4, r7, #7
 621 0144 3968     		ldr	r1, [r7]
 622 0146 FB1D     		add	r3, r7, #7
 623 0148 1A78     		ldrb	r2, [r3]
 624 014a BB1D     		add	r3, r7, #6
 625 014c 1B78     		ldrb	r3, [r3]
 626 014e 081C     		mov	r0, r1
 627 0150 111C     		mov	r1, r2
 628 0152 1A1C     		mov	r2, r3
 629 0154 0A23     		mov	r3, #10
 630 0156 FFF7FEFF 		bl	check_update
 631 015a 031C     		mov	r3, r0
 632 015c 2370     		strb	r3, [r4]
 633 015e 3DE0     		b	.L23
 634              	.L29:
 146:.\main.c      ****     }
 147:.\main.c      ****     else if(command > 1750 && command <= 1875)
 635              		.loc 1 147 0
 636 0160 3B1D     		add	r3, r7, #4
 637 0162 1A88     		ldrh	r2, [r3]
 638 0164 274B     		ldr	r3, .L33+28
 639 0166 9A42     		cmp	r2, r3
 640 0168 13D9     		bls	.L30
 641              		.loc 1 147 0 is_stmt 0 discriminator 1
 642 016a 3B1D     		add	r3, r7, #4
 643 016c 1A88     		ldrh	r2, [r3]
 644 016e 264B     		ldr	r3, .L33+32
 645 0170 9A42     		cmp	r2, r3
 646 0172 0ED8     		bhi	.L30
 148:.\main.c      ****     {
 149:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 647              		.loc 1 149 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 15


 648 0174 FC1D     		add	r4, r7, #7
 649 0176 3968     		ldr	r1, [r7]
 650 0178 FB1D     		add	r3, r7, #7
 651 017a 1A78     		ldrb	r2, [r3]
 652 017c BB1D     		add	r3, r7, #6
 653 017e 1B78     		ldrb	r3, [r3]
 654 0180 081C     		mov	r0, r1
 655 0182 111C     		mov	r1, r2
 656 0184 1A1C     		mov	r2, r3
 657 0186 3223     		mov	r3, #50
 658 0188 FFF7FEFF 		bl	check_update
 659 018c 031C     		mov	r3, r0
 660 018e 2370     		strb	r3, [r4]
 661 0190 24E0     		b	.L23
 662              	.L30:
 150:.\main.c      ****     }
 151:.\main.c      ****     else if(command > 1875 && command <= 2000)
 663              		.loc 1 151 0
 664 0192 3B1D     		add	r3, r7, #4
 665 0194 1A88     		ldrh	r2, [r3]
 666 0196 1C4B     		ldr	r3, .L33+32
 667 0198 9A42     		cmp	r2, r3
 668 019a 14D9     		bls	.L31
 669              		.loc 1 151 0 is_stmt 0 discriminator 1
 670 019c 3B1D     		add	r3, r7, #4
 671 019e 1A88     		ldrh	r2, [r3]
 672 01a0 FA23     		mov	r3, #250
 673 01a2 DB00     		lsl	r3, r3, #3
 674 01a4 9A42     		cmp	r2, r3
 675 01a6 0ED8     		bhi	.L31
 152:.\main.c      ****     {
 153:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 676              		.loc 1 153 0 is_stmt 1
 677 01a8 FC1D     		add	r4, r7, #7
 678 01aa 3968     		ldr	r1, [r7]
 679 01ac FB1D     		add	r3, r7, #7
 680 01ae 1A78     		ldrb	r2, [r3]
 681 01b0 BB1D     		add	r3, r7, #6
 682 01b2 1B78     		ldrb	r3, [r3]
 683 01b4 081C     		mov	r0, r1
 684 01b6 111C     		mov	r1, r2
 685 01b8 1A1C     		mov	r2, r3
 686 01ba 6423     		mov	r3, #100
 687 01bc FFF7FEFF 		bl	check_update
 688 01c0 031C     		mov	r3, r0
 689 01c2 2370     		strb	r3, [r4]
 690 01c4 0AE0     		b	.L23
 691              	.L31:
 154:.\main.c      ****     }
 155:.\main.c      ****     else
 156:.\main.c      ****     {
 157:.\main.c      ****         //throw error
 158:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 692              		.loc 1 158 0
 693 01c6 FC1D     		add	r4, r7, #7
 694 01c8 FB1D     		add	r3, r7, #7
 695 01ca 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 16


 696 01cc BB1D     		add	r3, r7, #6
 697 01ce 1B78     		ldrb	r3, [r3]
 698 01d0 101C     		mov	r0, r2
 699 01d2 191C     		mov	r1, r3
 700 01d4 FFF7FEFF 		bl	maintain_array
 701 01d8 031C     		mov	r3, r0
 702 01da 2370     		strb	r3, [r4]
 703              	.L23:
 159:.\main.c      ****     }
 160:.\main.c      ****     return cur_pos;
 704              		.loc 1 160 0
 705 01dc FB1D     		add	r3, r7, #7
 706 01de 1B78     		ldrb	r3, [r3]
 161:.\main.c      **** }
 707              		.loc 1 161 0
 708 01e0 181C     		mov	r0, r3
 709 01e2 BD46     		mov	sp, r7
 710 01e4 03B0     		add	sp, sp, #12
 711              		@ sp needed
 712 01e6 90BD     		pop	{r4, r7, pc}
 713              	.L34:
 714              		.align	2
 715              	.L33:
 716 01e8 E7030000 		.word	999
 717 01ec 64040000 		.word	1124
 718 01f0 E1040000 		.word	1249
 719 01f4 5E050000 		.word	1374
 720 01f8 D1050000 		.word	1489
 721 01fc E6050000 		.word	1510
 722 0200 59060000 		.word	1625
 723 0204 D6060000 		.word	1750
 724 0208 53070000 		.word	1875
 725              		.cfi_endproc
 726              	.LFE38:
 727              		.size	pos_to_vel, .-pos_to_vel
 728              		.section	.text.make_command,"ax",%progbits
 729              		.align	2
 730              		.global	make_command
 731              		.code	16
 732              		.thumb_func
 733              		.type	make_command, %function
 734              	make_command:
 735              	.LFB39:
 162:.\main.c      **** 
 163:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 164:.\main.c      **** {
 736              		.loc 1 164 0
 737              		.cfi_startproc
 738 0000 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 0002 84B0     		sub	sp, sp, #16
 743              		.cfi_def_cfa_offset 24
 744 0004 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 17


 747 0008 FB1C     		add	r3, r7, #3
 748 000a 1970     		strb	r1, [r3]
 749 000c BB1C     		add	r3, r7, #2
 750 000e 1A70     		strb	r2, [r3]
 165:.\main.c      ****     uint16 command;
 166:.\main.c      ****     int16 temp1;
 167:.\main.c      ****     int16 temp2;
 168:.\main.c      ****     int16 temp3;
 169:.\main.c      ****     
 170:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 751              		.loc 1 170 0
 752 0010 FB1C     		add	r3, r7, #3
 753 0012 1B78     		ldrb	r3, [r3]
 754 0014 7A68     		ldr	r2, [r7, #4]
 755 0016 D318     		add	r3, r2, r3
 756 0018 1B78     		ldrb	r3, [r3]
 757 001a 5BB2     		sxtb	r3, r3
 758 001c 1A02     		lsl	r2, r3, #8
 759 001e 3B1C     		mov	r3, r7
 760 0020 0E33     		add	r3, r3, #14
 761 0022 1A80     		strh	r2, [r3]
 171:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 762              		.loc 1 171 0
 763 0024 BB1C     		add	r3, r7, #2
 764 0026 1B78     		ldrb	r3, [r3]
 765 0028 7A68     		ldr	r2, [r7, #4]
 766 002a D318     		add	r3, r2, r3
 767 002c 1B78     		ldrb	r3, [r3]
 768 002e 5BB2     		sxtb	r3, r3
 769 0030 9AB2     		uxth	r2, r3
 770 0032 3B1C     		mov	r3, r7
 771 0034 0C33     		add	r3, r3, #12
 772 0036 111C     		add	r1, r2, #0
 773 0038 FF22     		mov	r2, #255
 774 003a 0A40     		and	r2, r1
 775 003c 1A80     		strh	r2, [r3]
 172:.\main.c      ****     temp3 = temp1 | temp2;
 776              		.loc 1 172 0
 777 003e 3B1C     		mov	r3, r7
 778 0040 0A33     		add	r3, r3, #10
 779 0042 391C     		mov	r1, r7
 780 0044 0E31     		add	r1, r1, #14
 781 0046 3A1C     		mov	r2, r7
 782 0048 0C32     		add	r2, r2, #12
 783 004a 0988     		ldrh	r1, [r1]
 784 004c 1288     		ldrh	r2, [r2]
 785 004e 0A43     		orr	r2, r1
 786 0050 1A80     		strh	r2, [r3]
 173:.\main.c      ****     command = (temp3/2) + 1500;
 787              		.loc 1 173 0
 788 0052 3B1C     		mov	r3, r7
 789 0054 0A33     		add	r3, r3, #10
 790 0056 0021     		mov	r1, #0
 791 0058 5B5E     		ldrsh	r3, [r3, r1]
 792 005a 002B     		cmp	r3, #0
 793 005c 00DA     		bge	.L36
 794 005e 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 18


 795              	.L36:
 796 0060 5B10     		asr	r3, r3, #1
 797 0062 9BB2     		uxth	r3, r3
 798 0064 9AB2     		uxth	r2, r3
 799 0066 3B1C     		mov	r3, r7
 800 0068 0833     		add	r3, r3, #8
 801 006a 0549     		ldr	r1, .L38
 802 006c 5218     		add	r2, r2, r1
 803 006e 1A80     		strh	r2, [r3]
 174:.\main.c      ****     return command;
 804              		.loc 1 174 0
 805 0070 3B1C     		mov	r3, r7
 806 0072 0833     		add	r3, r3, #8
 807 0074 1B88     		ldrh	r3, [r3]
 175:.\main.c      **** }
 808              		.loc 1 175 0
 809 0076 181C     		mov	r0, r3
 810 0078 BD46     		mov	sp, r7
 811 007a 04B0     		add	sp, sp, #16
 812              		@ sp needed
 813 007c 80BD     		pop	{r7, pc}
 814              	.L39:
 815 007e C046     		.align	2
 816              	.L38:
 817 0080 DC050000 		.word	1500
 818              		.cfi_endproc
 819              	.LFE39:
 820              		.size	make_command, .-make_command
 821              		.section	.text.potFeedback,"ax",%progbits
 822              		.align	2
 823              		.global	potFeedback
 824              		.code	16
 825              		.thumb_func
 826              		.type	potFeedback, %function
 827              	potFeedback:
 828              	.LFB40:
 176:.\main.c      **** 
 177:.\main.c      **** uint16 potFeedback(uint32 channel)
 178:.\main.c      **** {
 829              		.loc 1 178 0
 830              		.cfi_startproc
 831 0000 80B5     		push	{r7, lr}
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 0002 84B0     		sub	sp, sp, #16
 836              		.cfi_def_cfa_offset 24
 837 0004 00AF     		add	r7, sp, #0
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 179:.\main.c      ****     //TODO: uncomment this section
 180:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 181:.\main.c      ****     uint16 feedback = 500;
 840              		.loc 1 181 0
 841 0008 3B1C     		mov	r3, r7
 842 000a 0E33     		add	r3, r3, #14
 843 000c FA22     		mov	r2, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 19


 844 000e 5200     		lsl	r2, r2, #1
 845 0010 1A80     		strh	r2, [r3]
 182:.\main.c      ****     return feedback;
 846              		.loc 1 182 0
 847 0012 3B1C     		mov	r3, r7
 848 0014 0E33     		add	r3, r3, #14
 849 0016 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 850              		.loc 1 183 0
 851 0018 181C     		mov	r0, r3
 852 001a BD46     		mov	sp, r7
 853 001c 04B0     		add	sp, sp, #16
 854              		@ sp needed
 855 001e 80BD     		pop	{r7, pc}
 856              		.cfi_endproc
 857              	.LFE40:
 858              		.size	potFeedback, .-potFeedback
 859              		.section	.text.send_feedback,"ax",%progbits
 860              		.align	2
 861              		.global	send_feedback
 862              		.code	16
 863              		.thumb_func
 864              		.type	send_feedback, %function
 865              	send_feedback:
 866              	.LFB41:
 184:.\main.c      **** 
 185:.\main.c      **** void send_feedback()
 186:.\main.c      **** {
 867              		.loc 1 186 0
 868              		.cfi_startproc
 869 0000 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 00AF     		add	r7, sp, #0
 874              		.cfi_def_cfa_register 7
 187:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 188:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 189:.\main.c      ****     //TODO define system state
 190:.\main.c      ****     //send packet via serial to wiznet
 191:.\main.c      **** }
 875              		.loc 1 191 0
 876 0004 BD46     		mov	sp, r7
 877              		@ sp needed
 878 0006 80BD     		pop	{r7, pc}
 879              		.cfi_endproc
 880              	.LFE41:
 881              		.size	send_feedback, .-send_feedback
 882              		.section	.text.fill_data_array,"ax",%progbits
 883              		.align	2
 884              		.global	fill_data_array
 885              		.code	16
 886              		.thumb_func
 887              		.type	fill_data_array, %function
 888              	fill_data_array:
 889              	.LFB42:
 192:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 20


 193:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 194:.\main.c      **** void fill_data_array()
 195:.\main.c      **** {
 890              		.loc 1 195 0
 891              		.cfi_startproc
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 00AF     		add	r7, sp, #0
 897              		.cfi_def_cfa_register 7
 196:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 898              		.loc 1 196 0
 899 0004 034B     		ldr	r3, .L44
 900 0006 181C     		mov	r0, r3
 901 0008 1621     		mov	r1, #22
 902 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 197:.\main.c      **** //    uint8 i = 0;
 198:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 199:.\main.c      **** //    {
 200:.\main.c      **** //        data_array[i] = test_array[i];
 201:.\main.c      **** //    }
 202:.\main.c      **** }
 903              		.loc 1 202 0
 904 000e BD46     		mov	sp, r7
 905              		@ sp needed
 906 0010 80BD     		pop	{r7, pc}
 907              	.L45:
 908 0012 C046     		.align	2
 909              	.L44:
 910 0014 00000000 		.word	data_array
 911              		.cfi_endproc
 912              	.LFE42:
 913              		.size	fill_data_array, .-fill_data_array
 914              		.section	.text.ServoGoalPosition,"ax",%progbits
 915              		.align	2
 916              		.global	ServoGoalPosition
 917              		.code	16
 918              		.thumb_func
 919              		.type	ServoGoalPosition, %function
 920              	ServoGoalPosition:
 921              	.LFB43:
 203:.\main.c      **** 
 204:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 205:.\main.c      **** {
 922              		.loc 1 205 0
 923              		.cfi_startproc
 924 0000 80B5     		push	{r7, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 86B0     		sub	sp, sp, #24
 929              		.cfi_def_cfa_offset 32
 930 0004 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0006 0A1C     		mov	r2, r1
 933 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 21


 934 000a 011C     		add	r1, r0, #0
 935 000c 1970     		strb	r1, [r3]
 936 000e 3B1D     		add	r3, r7, #4
 937 0010 1A80     		strh	r2, [r3]
 206:.\main.c      ****     uint8 array[9];
 207:.\main.c      ****     
 208:.\main.c      ****     array[0] = 0xFF;
 938              		.loc 1 208 0
 939 0012 3B1C     		mov	r3, r7
 940 0014 0C33     		add	r3, r3, #12
 941 0016 FF22     		mov	r2, #255
 942 0018 1A70     		strb	r2, [r3]
 209:.\main.c      ****     array[1] = 0xFF;
 943              		.loc 1 209 0
 944 001a 3B1C     		mov	r3, r7
 945 001c 0C33     		add	r3, r3, #12
 946 001e FF22     		mov	r2, #255
 947 0020 5A70     		strb	r2, [r3, #1]
 210:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 948              		.loc 1 210 0
 949 0022 3B1C     		mov	r3, r7
 950 0024 0C33     		add	r3, r3, #12
 951 0026 FA1D     		add	r2, r7, #7
 952 0028 1278     		ldrb	r2, [r2]
 953 002a 9A70     		strb	r2, [r3, #2]
 211:.\main.c      ****     array[3] = 0x05;
 954              		.loc 1 211 0
 955 002c 3B1C     		mov	r3, r7
 956 002e 0C33     		add	r3, r3, #12
 957 0030 0522     		mov	r2, #5
 958 0032 DA70     		strb	r2, [r3, #3]
 212:.\main.c      ****     array[4] = 0x03; //write instruction
 959              		.loc 1 212 0
 960 0034 3B1C     		mov	r3, r7
 961 0036 0C33     		add	r3, r3, #12
 962 0038 0322     		mov	r2, #3
 963 003a 1A71     		strb	r2, [r3, #4]
 213:.\main.c      ****     array[5] = 0x1E;
 964              		.loc 1 213 0
 965 003c 3B1C     		mov	r3, r7
 966 003e 0C33     		add	r3, r3, #12
 967 0040 1E22     		mov	r2, #30
 968 0042 5A71     		strb	r2, [r3, #5]
 214:.\main.c      ****     array[6] = position;
 969              		.loc 1 214 0
 970 0044 3B1D     		add	r3, r7, #4
 971 0046 1B88     		ldrh	r3, [r3]
 972 0048 DAB2     		uxtb	r2, r3
 973 004a 3B1C     		mov	r3, r7
 974 004c 0C33     		add	r3, r3, #12
 975 004e 9A71     		strb	r2, [r3, #6]
 215:.\main.c      ****     array[7] = position >> 8;
 976              		.loc 1 215 0
 977 0050 3B1D     		add	r3, r7, #4
 978 0052 1B88     		ldrh	r3, [r3]
 979 0054 1B0A     		lsr	r3, r3, #8
 980 0056 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 22


 981 0058 DAB2     		uxtb	r2, r3
 982 005a 3B1C     		mov	r3, r7
 983 005c 0C33     		add	r3, r3, #12
 984 005e DA71     		strb	r2, [r3, #7]
 216:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 985              		.loc 1 216 0
 986 0060 3B1C     		mov	r3, r7
 987 0062 0C33     		add	r3, r3, #12
 988 0064 9A79     		ldrb	r2, [r3, #6]
 989 0066 FB1D     		add	r3, r7, #7
 990 0068 1B78     		ldrb	r3, [r3]
 991 006a D318     		add	r3, r2, r3
 992 006c DAB2     		uxtb	r2, r3
 993 006e 3B1C     		mov	r3, r7
 994 0070 0C33     		add	r3, r3, #12
 995 0072 DB79     		ldrb	r3, [r3, #7]
 996 0074 D318     		add	r3, r2, r3
 997 0076 DBB2     		uxtb	r3, r3
 998 0078 2633     		add	r3, r3, #38
 999 007a DBB2     		uxtb	r3, r3
 1000 007c DB43     		mvn	r3, r3
 1001 007e DAB2     		uxtb	r2, r3
 1002 0080 3B1C     		mov	r3, r7
 1003 0082 0C33     		add	r3, r3, #12
 1004 0084 1A72     		strb	r2, [r3, #8]
 217:.\main.c      ****     
 218:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1005              		.loc 1 218 0
 1006 0086 3B1C     		mov	r3, r7
 1007 0088 0C33     		add	r3, r3, #12
 1008 008a 181C     		mov	r0, r3
 1009 008c 0921     		mov	r1, #9
 1010 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 219:.\main.c      **** }
 1011              		.loc 1 219 0
 1012 0092 BD46     		mov	sp, r7
 1013 0094 06B0     		add	sp, sp, #24
 1014              		@ sp needed
 1015 0096 80BD     		pop	{r7, pc}
 1016              		.cfi_endproc
 1017              	.LFE43:
 1018              		.size	ServoGoalPosition, .-ServoGoalPosition
 1019              		.section	.text.SetServoTorque,"ax",%progbits
 1020              		.align	2
 1021              		.global	SetServoTorque
 1022              		.code	16
 1023              		.thumb_func
 1024              		.type	SetServoTorque, %function
 1025              	SetServoTorque:
 1026              	.LFB44:
 220:.\main.c      **** 
 221:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 222:.\main.c      **** {
 1027              		.loc 1 222 0
 1028              		.cfi_startproc
 1029 0000 80B5     		push	{r7, lr}
 1030              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 23


 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 0002 86B0     		sub	sp, sp, #24
 1034              		.cfi_def_cfa_offset 32
 1035 0004 00AF     		add	r7, sp, #0
 1036              		.cfi_def_cfa_register 7
 1037 0006 0A1C     		mov	r2, r1
 1038 0008 FB1D     		add	r3, r7, #7
 1039 000a 011C     		add	r1, r0, #0
 1040 000c 1970     		strb	r1, [r3]
 1041 000e 3B1D     		add	r3, r7, #4
 1042 0010 1A80     		strh	r2, [r3]
 223:.\main.c      ****     uint8 array[9];
 224:.\main.c      ****     
 225:.\main.c      ****     array[0] = 0xFF;
 1043              		.loc 1 225 0
 1044 0012 3B1C     		mov	r3, r7
 1045 0014 0C33     		add	r3, r3, #12
 1046 0016 FF22     		mov	r2, #255
 1047 0018 1A70     		strb	r2, [r3]
 226:.\main.c      ****     array[1] = 0xFF;
 1048              		.loc 1 226 0
 1049 001a 3B1C     		mov	r3, r7
 1050 001c 0C33     		add	r3, r3, #12
 1051 001e FF22     		mov	r2, #255
 1052 0020 5A70     		strb	r2, [r3, #1]
 227:.\main.c      ****     array[2] = servoID; 
 1053              		.loc 1 227 0
 1054 0022 3B1C     		mov	r3, r7
 1055 0024 0C33     		add	r3, r3, #12
 1056 0026 FA1D     		add	r2, r7, #7
 1057 0028 1278     		ldrb	r2, [r2]
 1058 002a 9A70     		strb	r2, [r3, #2]
 228:.\main.c      ****     array[3] = 0x05;
 1059              		.loc 1 228 0
 1060 002c 3B1C     		mov	r3, r7
 1061 002e 0C33     		add	r3, r3, #12
 1062 0030 0522     		mov	r2, #5
 1063 0032 DA70     		strb	r2, [r3, #3]
 229:.\main.c      ****     array[4] = 0x03; //write instruction
 1064              		.loc 1 229 0
 1065 0034 3B1C     		mov	r3, r7
 1066 0036 0C33     		add	r3, r3, #12
 1067 0038 0322     		mov	r2, #3
 1068 003a 1A71     		strb	r2, [r3, #4]
 230:.\main.c      ****     array[5] = 0x0E;
 1069              		.loc 1 230 0
 1070 003c 3B1C     		mov	r3, r7
 1071 003e 0C33     		add	r3, r3, #12
 1072 0040 0E22     		mov	r2, #14
 1073 0042 5A71     		strb	r2, [r3, #5]
 231:.\main.c      ****     array[6] = torque;
 1074              		.loc 1 231 0
 1075 0044 3B1D     		add	r3, r7, #4
 1076 0046 1B88     		ldrh	r3, [r3]
 1077 0048 DAB2     		uxtb	r2, r3
 1078 004a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 24


 1079 004c 0C33     		add	r3, r3, #12
 1080 004e 9A71     		strb	r2, [r3, #6]
 232:.\main.c      ****     array[7] = torque >> 8;
 1081              		.loc 1 232 0
 1082 0050 3B1D     		add	r3, r7, #4
 1083 0052 1B88     		ldrh	r3, [r3]
 1084 0054 1B0A     		lsr	r3, r3, #8
 1085 0056 9BB2     		uxth	r3, r3
 1086 0058 DAB2     		uxtb	r2, r3
 1087 005a 3B1C     		mov	r3, r7
 1088 005c 0C33     		add	r3, r3, #12
 1089 005e DA71     		strb	r2, [r3, #7]
 233:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1090              		.loc 1 233 0
 1091 0060 3B1C     		mov	r3, r7
 1092 0062 0C33     		add	r3, r3, #12
 1093 0064 9A79     		ldrb	r2, [r3, #6]
 1094 0066 FB1D     		add	r3, r7, #7
 1095 0068 1B78     		ldrb	r3, [r3]
 1096 006a D318     		add	r3, r2, r3
 1097 006c DAB2     		uxtb	r2, r3
 1098 006e 3B1C     		mov	r3, r7
 1099 0070 0C33     		add	r3, r3, #12
 1100 0072 DB79     		ldrb	r3, [r3, #7]
 1101 0074 D318     		add	r3, r2, r3
 1102 0076 DBB2     		uxtb	r3, r3
 1103 0078 1633     		add	r3, r3, #22
 1104 007a DBB2     		uxtb	r3, r3
 1105 007c DB43     		mvn	r3, r3
 1106 007e DAB2     		uxtb	r2, r3
 1107 0080 3B1C     		mov	r3, r7
 1108 0082 0C33     		add	r3, r3, #12
 1109 0084 1A72     		strb	r2, [r3, #8]
 234:.\main.c      ****     
 235:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1110              		.loc 1 235 0
 1111 0086 3B1C     		mov	r3, r7
 1112 0088 0C33     		add	r3, r3, #12
 1113 008a 181C     		mov	r0, r3
 1114 008c 0921     		mov	r1, #9
 1115 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 236:.\main.c      ****     
 237:.\main.c      **** }    
 1116              		.loc 1 237 0
 1117 0092 BD46     		mov	sp, r7
 1118 0094 06B0     		add	sp, sp, #24
 1119              		@ sp needed
 1120 0096 80BD     		pop	{r7, pc}
 1121              		.cfi_endproc
 1122              	.LFE44:
 1123              		.size	SetServoTorque, .-SetServoTorque
 1124              		.section	.text.ServoSpeed,"ax",%progbits
 1125              		.align	2
 1126              		.global	ServoSpeed
 1127              		.code	16
 1128              		.thumb_func
 1129              		.type	ServoSpeed, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 25


 1130              	ServoSpeed:
 1131              	.LFB45:
 238:.\main.c      **** 
 239:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 240:.\main.c      **** {
 1132              		.loc 1 240 0
 1133              		.cfi_startproc
 1134 0000 80B5     		push	{r7, lr}
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 86B0     		sub	sp, sp, #24
 1139              		.cfi_def_cfa_offset 32
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 0A1C     		mov	r2, r1
 1143 0008 FB1D     		add	r3, r7, #7
 1144 000a 011C     		add	r1, r0, #0
 1145 000c 1970     		strb	r1, [r3]
 1146 000e 3B1D     		add	r3, r7, #4
 1147 0010 1A80     		strh	r2, [r3]
 241:.\main.c      ****     uint8 array[9];
 242:.\main.c      ****     
 243:.\main.c      ****     array[0] = 0xFF;
 1148              		.loc 1 243 0
 1149 0012 3B1C     		mov	r3, r7
 1150 0014 0C33     		add	r3, r3, #12
 1151 0016 FF22     		mov	r2, #255
 1152 0018 1A70     		strb	r2, [r3]
 244:.\main.c      ****     array[1] = 0xFF;
 1153              		.loc 1 244 0
 1154 001a 3B1C     		mov	r3, r7
 1155 001c 0C33     		add	r3, r3, #12
 1156 001e FF22     		mov	r2, #255
 1157 0020 5A70     		strb	r2, [r3, #1]
 245:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1158              		.loc 1 245 0
 1159 0022 3B1C     		mov	r3, r7
 1160 0024 0C33     		add	r3, r3, #12
 1161 0026 FA1D     		add	r2, r7, #7
 1162 0028 1278     		ldrb	r2, [r2]
 1163 002a 9A70     		strb	r2, [r3, #2]
 246:.\main.c      ****     array[3] = 0x05;
 1164              		.loc 1 246 0
 1165 002c 3B1C     		mov	r3, r7
 1166 002e 0C33     		add	r3, r3, #12
 1167 0030 0522     		mov	r2, #5
 1168 0032 DA70     		strb	r2, [r3, #3]
 247:.\main.c      ****     array[4] = 0x03; //write instruction
 1169              		.loc 1 247 0
 1170 0034 3B1C     		mov	r3, r7
 1171 0036 0C33     		add	r3, r3, #12
 1172 0038 0322     		mov	r2, #3
 1173 003a 1A71     		strb	r2, [r3, #4]
 248:.\main.c      ****     array[5] = 0x20;
 1174              		.loc 1 248 0
 1175 003c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 26


 1176 003e 0C33     		add	r3, r3, #12
 1177 0040 2022     		mov	r2, #32
 1178 0042 5A71     		strb	r2, [r3, #5]
 249:.\main.c      ****     array[6] = speed;
 1179              		.loc 1 249 0
 1180 0044 3B1D     		add	r3, r7, #4
 1181 0046 1B88     		ldrh	r3, [r3]
 1182 0048 DAB2     		uxtb	r2, r3
 1183 004a 3B1C     		mov	r3, r7
 1184 004c 0C33     		add	r3, r3, #12
 1185 004e 9A71     		strb	r2, [r3, #6]
 250:.\main.c      ****     array[7] = speed >> 8;
 1186              		.loc 1 250 0
 1187 0050 3B1D     		add	r3, r7, #4
 1188 0052 1B88     		ldrh	r3, [r3]
 1189 0054 1B0A     		lsr	r3, r3, #8
 1190 0056 9BB2     		uxth	r3, r3
 1191 0058 DAB2     		uxtb	r2, r3
 1192 005a 3B1C     		mov	r3, r7
 1193 005c 0C33     		add	r3, r3, #12
 1194 005e DA71     		strb	r2, [r3, #7]
 251:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1195              		.loc 1 251 0
 1196 0060 3B1C     		mov	r3, r7
 1197 0062 0C33     		add	r3, r3, #12
 1198 0064 9A79     		ldrb	r2, [r3, #6]
 1199 0066 FB1D     		add	r3, r7, #7
 1200 0068 1B78     		ldrb	r3, [r3]
 1201 006a D318     		add	r3, r2, r3
 1202 006c DAB2     		uxtb	r2, r3
 1203 006e 3B1C     		mov	r3, r7
 1204 0070 0C33     		add	r3, r3, #12
 1205 0072 DB79     		ldrb	r3, [r3, #7]
 1206 0074 D318     		add	r3, r2, r3
 1207 0076 DBB2     		uxtb	r3, r3
 1208 0078 2833     		add	r3, r3, #40
 1209 007a DBB2     		uxtb	r3, r3
 1210 007c DB43     		mvn	r3, r3
 1211 007e DAB2     		uxtb	r2, r3
 1212 0080 3B1C     		mov	r3, r7
 1213 0082 0C33     		add	r3, r3, #12
 1214 0084 1A72     		strb	r2, [r3, #8]
 252:.\main.c      ****     
 253:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1215              		.loc 1 253 0
 1216 0086 3B1C     		mov	r3, r7
 1217 0088 0C33     		add	r3, r3, #12
 1218 008a 181C     		mov	r0, r3
 1219 008c 0921     		mov	r1, #9
 1220 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 254:.\main.c      ****     
 255:.\main.c      **** }
 1221              		.loc 1 255 0
 1222 0092 BD46     		mov	sp, r7
 1223 0094 06B0     		add	sp, sp, #24
 1224              		@ sp needed
 1225 0096 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 27


 1226              		.cfi_endproc
 1227              	.LFE45:
 1228              		.size	ServoSpeed, .-ServoSpeed
 1229              		.comm	wristTilt_state,1,1
 1230              		.section	.text.wristTilt,"ax",%progbits
 1231              		.align	2
 1232              		.global	wristTilt
 1233              		.code	16
 1234              		.thumb_func
 1235              		.type	wristTilt, %function
 1236              	wristTilt:
 1237              	.LFB46:
 256:.\main.c      **** 
 257:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 258:.\main.c      **** //control the tilting motion of the wrist
 259:.\main.c      **** void wristTilt()
 260:.\main.c      **** {
 1238              		.loc 1 260 0
 1239              		.cfi_startproc
 1240 0000 90B5     		push	{r4, r7, lr}
 1241              		.cfi_def_cfa_offset 12
 1242              		.cfi_offset 4, -12
 1243              		.cfi_offset 7, -8
 1244              		.cfi_offset 14, -4
 1245 0002 83B0     		sub	sp, sp, #12
 1246              		.cfi_def_cfa_offset 24
 1247 0004 00AF     		add	r7, sp, #0
 1248              		.cfi_def_cfa_register 7
 261:.\main.c      ****     // Overview
 262:.\main.c      ****     //take instruction from data_array
 263:.\main.c      ****     //smooth input
 264:.\main.c      ****     //actuate the tilting using UART
 265:.\main.c      ****     //get feedback
 266:.\main.c      **** 
 267:.\main.c      ****     //-------------------------- 
 268:.\main.c      ****     // Dynamixel Servo specific
 269:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 270:.\main.c      ****     // TODO: Set the desired position
 271:.\main.c      **** 
 272:.\main.c      ****     //--------------------------
 273:.\main.c      ****     // State machine
 274:.\main.c      ****     
 275:.\main.c      ****     uint8 i;
 276:.\main.c      ****     uint16 avg;
 277:.\main.c      ****     uint16 command;
 278:.\main.c      ****     
 279:.\main.c      ****     switch(wristTilt_state){ //actions
 1249              		.loc 1 279 0
 1250 0006 4B4B     		ldr	r3, .L73
 1251 0008 1B78     		ldrb	r3, [r3]
 1252 000a 012B     		cmp	r3, #1
 1253 000c 03D0     		beq	.L51
 1254 000e 60DD     		ble	.L72
 1255 0010 022B     		cmp	r3, #2
 1256 0012 1CD0     		beq	.L54
 280:.\main.c      ****         case tilt_start:
 281:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 28


 282:.\main.c      **** 
 283:.\main.c      ****         case tilt_init:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 285:.\main.c      ****             {
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 287:.\main.c      ****             }
 288:.\main.c      ****             WT_arr_cspot = 0;
 289:.\main.c      ****             
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 291:.\main.c      ****             break;
 292:.\main.c      **** 
 293:.\main.c      ****         case tilt_control:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 295:.\main.c      ****             
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 297:.\main.c      ****             
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 299:.\main.c      ****             {
 300:.\main.c      ****                 WT_arr_cspot++;
 301:.\main.c      ****             }
 302:.\main.c      ****             else
 303:.\main.c      ****             {
 304:.\main.c      ****                 WT_arr_cspot = 0;
 305:.\main.c      ****             }
 306:.\main.c      ****             
 307:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 308:.\main.c      ****             
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 310:.\main.c      ****             
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 312:.\main.c      ****             {
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 314:.\main.c      ****             }
 315:.\main.c      ****             else
 316:.\main.c      ****             {
 317:.\main.c      ****                 //throw error
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 319:.\main.c      ****             }
 320:.\main.c      ****             WT_FLAG = 0;
 321:.\main.c      ****             break;
 322:.\main.c      ****             
 323:.\main.c      ****         case tilt_wait:
 324:.\main.c      ****             break;
 1257              		.loc 1 324 0
 1258 0014 5EE0     		b	.L50
 1259              	.L51:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1260              		.loc 1 284 0
 1261 0016 FB1D     		add	r3, r7, #7
 1262 0018 0022     		mov	r2, #0
 1263 001a 1A70     		strb	r2, [r3]
 1264 001c 0AE0     		b	.L56
 1265              	.L57:
 286:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1266              		.loc 1 286 0 discriminator 2
 1267 001e FB1D     		add	r3, r7, #7
 1268 0020 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 29


 1269 0022 454B     		ldr	r3, .L73+4
 1270 0024 5200     		lsl	r2, r2, #1
 1271 0026 4549     		ldr	r1, .L73+8
 1272 0028 D152     		strh	r1, [r2, r3]
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1273              		.loc 1 284 0 discriminator 2
 1274 002a FB1D     		add	r3, r7, #7
 1275 002c 1A78     		ldrb	r2, [r3]
 1276 002e FB1D     		add	r3, r7, #7
 1277 0030 0132     		add	r2, r2, #1
 1278 0032 1A70     		strb	r2, [r3]
 1279              	.L56:
 284:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1280              		.loc 1 284 0 is_stmt 0 discriminator 1
 1281 0034 FB1D     		add	r3, r7, #7
 1282 0036 1B78     		ldrb	r3, [r3]
 1283 0038 132B     		cmp	r3, #19
 1284 003a F0D9     		bls	.L57
 288:.\main.c      ****             WT_arr_cspot = 0;
 1285              		.loc 1 288 0 is_stmt 1
 1286 003c 404B     		ldr	r3, .L73+12
 1287 003e 0022     		mov	r2, #0
 1288 0040 1A70     		strb	r2, [r3]
 290:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1289              		.loc 1 290 0
 1290 0042 3E4B     		ldr	r3, .L73+8
 1291 0044 0220     		mov	r0, #2
 1292 0046 191C     		mov	r1, r3
 1293 0048 FFF7FEFF 		bl	ServoGoalPosition
 291:.\main.c      ****             break;
 1294              		.loc 1 291 0
 1295 004c 42E0     		b	.L50
 1296              	.L54:
 294:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1297              		.loc 1 294 0
 1298 004e 3C1D     		add	r4, r7, #4
 1299 0050 3C4B     		ldr	r3, .L73+16
 1300 0052 181C     		mov	r0, r3
 1301 0054 1021     		mov	r1, #16
 1302 0056 1122     		mov	r2, #17
 1303 0058 FFF7FEFF 		bl	make_command
 1304 005c 031C     		mov	r3, r0
 1305 005e 2380     		strh	r3, [r4]
 296:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1306              		.loc 1 296 0
 1307 0060 374B     		ldr	r3, .L73+12
 1308 0062 1B78     		ldrb	r3, [r3]
 1309 0064 1A1C     		mov	r2, r3
 1310 0066 344B     		ldr	r3, .L73+4
 1311 0068 5200     		lsl	r2, r2, #1
 1312 006a 391D     		add	r1, r7, #4
 1313 006c 0988     		ldrh	r1, [r1]
 1314 006e D152     		strh	r1, [r2, r3]
 298:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1315              		.loc 1 298 0
 1316 0070 334B     		ldr	r3, .L73+12
 1317 0072 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 30


 1318 0074 122B     		cmp	r3, #18
 1319 0076 06D8     		bhi	.L58
 300:.\main.c      ****                 WT_arr_cspot++;
 1320              		.loc 1 300 0
 1321 0078 314B     		ldr	r3, .L73+12
 1322 007a 1B78     		ldrb	r3, [r3]
 1323 007c 0133     		add	r3, r3, #1
 1324 007e DAB2     		uxtb	r2, r3
 1325 0080 2F4B     		ldr	r3, .L73+12
 1326 0082 1A70     		strb	r2, [r3]
 1327 0084 02E0     		b	.L59
 1328              	.L58:
 304:.\main.c      ****                 WT_arr_cspot = 0;
 1329              		.loc 1 304 0
 1330 0086 2E4B     		ldr	r3, .L73+12
 1331 0088 0022     		mov	r2, #0
 1332 008a 1A70     		strb	r2, [r3]
 1333              	.L59:
 309:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1334              		.loc 1 309 0
 1335 008c BC1C     		add	r4, r7, #2
 1336 008e 2A4B     		ldr	r3, .L73+4
 1337 0090 181C     		mov	r0, r3
 1338 0092 1421     		mov	r1, #20
 1339 0094 FFF7FEFF 		bl	average
 1340 0098 031C     		mov	r3, r0
 1341 009a 2380     		strh	r3, [r4]
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1342              		.loc 1 311 0
 1343 009c BB1C     		add	r3, r7, #2
 1344 009e 1A88     		ldrh	r2, [r3]
 1345 00a0 FA23     		mov	r3, #250
 1346 00a2 DB00     		lsl	r3, r3, #3
 1347 00a4 9A42     		cmp	r2, r3
 1348 00a6 0BD8     		bhi	.L60
 311:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1349              		.loc 1 311 0 is_stmt 0 discriminator 1
 1350 00a8 BB1C     		add	r3, r7, #2
 1351 00aa 1A88     		ldrh	r2, [r3]
 1352 00ac 264B     		ldr	r3, .L73+20
 1353 00ae 9A42     		cmp	r2, r3
 1354 00b0 06D9     		bls	.L60
 313:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1355              		.loc 1 313 0 is_stmt 1
 1356 00b2 BB1C     		add	r3, r7, #2
 1357 00b4 1B88     		ldrh	r3, [r3]
 1358 00b6 0220     		mov	r0, #2
 1359 00b8 191C     		mov	r1, r3
 1360 00ba FFF7FEFF 		bl	ServoGoalPosition
 1361 00be 04E0     		b	.L61
 1362              	.L60:
 318:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1363              		.loc 1 318 0
 1364 00c0 1E4B     		ldr	r3, .L73+8
 1365 00c2 0220     		mov	r0, #2
 1366 00c4 191C     		mov	r1, r3
 1367 00c6 FFF7FEFF 		bl	ServoGoalPosition
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 31


 1368              	.L61:
 320:.\main.c      ****             WT_FLAG = 0;
 1369              		.loc 1 320 0
 1370 00ca 204B     		ldr	r3, .L73+24
 1371 00cc 0022     		mov	r2, #0
 1372 00ce 1A70     		strb	r2, [r3]
 321:.\main.c      ****             break;
 1373              		.loc 1 321 0
 1374 00d0 00E0     		b	.L50
 1375              	.L72:
 281:.\main.c      ****             break;
 1376              		.loc 1 281 0
 1377 00d2 C046     		mov	r8, r8
 1378              	.L50:
 325:.\main.c      ****     }
 326:.\main.c      ****     
 327:.\main.c      ****     switch(wristTilt_state){ //transitions
 1379              		.loc 1 327 0
 1380 00d4 174B     		ldr	r3, .L73
 1381 00d6 1B78     		ldrb	r3, [r3]
 1382 00d8 012B     		cmp	r3, #1
 1383 00da 0CD0     		beq	.L63
 1384 00dc 02DC     		bgt	.L64
 1385 00de 002B     		cmp	r3, #0
 1386 00e0 05D0     		beq	.L65
 1387 00e2 24E0     		b	.L49
 1388              	.L64:
 1389 00e4 022B     		cmp	r3, #2
 1390 00e6 0AD0     		beq	.L66
 1391 00e8 032B     		cmp	r3, #3
 1392 00ea 14D0     		beq	.L67
 1393 00ec 1FE0     		b	.L49
 1394              	.L65:
 328:.\main.c      ****         case tilt_start:
 329:.\main.c      ****             wristTilt_state = tilt_init;
 1395              		.loc 1 329 0
 1396 00ee 114B     		ldr	r3, .L73
 1397 00f0 0122     		mov	r2, #1
 1398 00f2 1A70     		strb	r2, [r3]
 330:.\main.c      ****             break;
 1399              		.loc 1 330 0
 1400 00f4 1BE0     		b	.L49
 1401              	.L63:
 331:.\main.c      ****         
 332:.\main.c      ****         case tilt_init:
 333:.\main.c      ****             wristTilt_state = tilt_wait;
 1402              		.loc 1 333 0
 1403 00f6 0F4B     		ldr	r3, .L73
 1404 00f8 0322     		mov	r2, #3
 1405 00fa 1A70     		strb	r2, [r3]
 334:.\main.c      ****             break;
 1406              		.loc 1 334 0
 1407 00fc 17E0     		b	.L49
 1408              	.L66:
 335:.\main.c      ****         
 336:.\main.c      ****         case tilt_control:
 337:.\main.c      ****             if(WT_FLAG)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 32


 1409              		.loc 1 337 0
 1410 00fe 134B     		ldr	r3, .L73+24
 1411 0100 1B78     		ldrb	r3, [r3]
 1412 0102 002B     		cmp	r3, #0
 1413 0104 03D0     		beq	.L68
 338:.\main.c      ****             {
 339:.\main.c      ****                 wristTilt_state = tilt_control;
 1414              		.loc 1 339 0
 1415 0106 0B4B     		ldr	r3, .L73
 1416 0108 0222     		mov	r2, #2
 1417 010a 1A70     		strb	r2, [r3]
 340:.\main.c      ****             }
 341:.\main.c      ****             else
 342:.\main.c      ****             {
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 344:.\main.c      ****             }
 345:.\main.c      ****             break;
 1418              		.loc 1 345 0
 1419 010c 0FE0     		b	.L49
 1420              	.L68:
 343:.\main.c      ****                 wristTilt_state = tilt_wait;
 1421              		.loc 1 343 0
 1422 010e 094B     		ldr	r3, .L73
 1423 0110 0322     		mov	r2, #3
 1424 0112 1A70     		strb	r2, [r3]
 1425              		.loc 1 345 0
 1426 0114 0BE0     		b	.L49
 1427              	.L67:
 346:.\main.c      ****         
 347:.\main.c      ****         case tilt_wait:
 348:.\main.c      ****             if(WT_FLAG)
 1428              		.loc 1 348 0
 1429 0116 0D4B     		ldr	r3, .L73+24
 1430 0118 1B78     		ldrb	r3, [r3]
 1431 011a 002B     		cmp	r3, #0
 1432 011c 03D0     		beq	.L70
 349:.\main.c      ****             {
 350:.\main.c      ****                 wristTilt_state = tilt_control;
 1433              		.loc 1 350 0
 1434 011e 054B     		ldr	r3, .L73
 1435 0120 0222     		mov	r2, #2
 1436 0122 1A70     		strb	r2, [r3]
 1437 0124 02E0     		b	.L71
 1438              	.L70:
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1439              		.loc 1 354 0
 1440 0126 034B     		ldr	r3, .L73
 1441 0128 0322     		mov	r2, #3
 1442 012a 1A70     		strb	r2, [r3]
 1443              	.L71:
 355:.\main.c      ****             }
 356:.\main.c      ****             break;
 1444              		.loc 1 356 0
 1445 012c C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 33


 1446              	.L49:
 357:.\main.c      ****     }    
 358:.\main.c      **** }
 1447              		.loc 1 358 0
 1448 012e BD46     		mov	sp, r7
 1449 0130 03B0     		add	sp, sp, #12
 1450              		@ sp needed
 1451 0132 90BD     		pop	{r4, r7, pc}
 1452              	.L74:
 1453              		.align	2
 1454              	.L73:
 1455 0134 00000000 		.word	wristTilt_state
 1456 0138 00000000 		.word	WT_array
 1457 013c DC050000 		.word	1500
 1458 0140 00000000 		.word	WT_arr_cspot
 1459 0144 00000000 		.word	data_array
 1460 0148 E7030000 		.word	999
 1461 014c 00000000 		.word	WT_FLAG
 1462              		.cfi_endproc
 1463              	.LFE46:
 1464              		.size	wristTilt, .-wristTilt
 1465              		.comm	wristRotate_state,1,1
 1466              		.section	.text.wristRotate,"ax",%progbits
 1467              		.align	2
 1468              		.global	wristRotate
 1469              		.code	16
 1470              		.thumb_func
 1471              		.type	wristRotate, %function
 1472              	wristRotate:
 1473              	.LFB47:
 359:.\main.c      **** 
 360:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 361:.\main.c      **** //control the rotating motion of the wrist
 362:.\main.c      **** void wristRotate()
 363:.\main.c      **** {
 1474              		.loc 1 363 0
 1475              		.cfi_startproc
 1476 0000 90B5     		push	{r4, r7, lr}
 1477              		.cfi_def_cfa_offset 12
 1478              		.cfi_offset 4, -12
 1479              		.cfi_offset 7, -8
 1480              		.cfi_offset 14, -4
 1481 0002 83B0     		sub	sp, sp, #12
 1482              		.cfi_def_cfa_offset 24
 1483 0004 00AF     		add	r7, sp, #0
 1484              		.cfi_def_cfa_register 7
 364:.\main.c      ****     //Overview
 365:.\main.c      ****     //take instruction from data_array
 366:.\main.c      ****     //smooth input
 367:.\main.c      ****     //actuate the tilting using UART
 368:.\main.c      ****     //get feedback
 369:.\main.c      **** 
 370:.\main.c      ****     //-------------------------- 
 371:.\main.c      ****     // Dynamixel Servo specific
 372:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 373:.\main.c      ****     // TODO: Set the desired position
 374:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 34


 375:.\main.c      ****     //--------------------------
 376:.\main.c      ****     // State machine
 377:.\main.c      ****     
 378:.\main.c      ****     uint8 i;
 379:.\main.c      ****     uint16 avg;
 380:.\main.c      ****     uint16 command;
 381:.\main.c      ****     
 382:.\main.c      ****     switch(wristRotate_state){ //actions
 1485              		.loc 1 382 0
 1486 0006 4B4B     		ldr	r3, .L99
 1487 0008 1B78     		ldrb	r3, [r3]
 1488 000a 012B     		cmp	r3, #1
 1489 000c 03D0     		beq	.L77
 1490 000e 60DD     		ble	.L98
 1491 0010 022B     		cmp	r3, #2
 1492 0012 1CD0     		beq	.L80
 383:.\main.c      ****         case rotate_start:
 384:.\main.c      ****             break;
 385:.\main.c      **** 
 386:.\main.c      ****         case rotate_init:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 388:.\main.c      ****             {
 389:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 390:.\main.c      ****             }
 391:.\main.c      ****             WR_arr_cspot = 0;
 392:.\main.c      ****             
 393:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 394:.\main.c      ****             break;
 395:.\main.c      **** 
 396:.\main.c      ****         case rotate_control:
 397:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 398:.\main.c      ****             
 399:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 400:.\main.c      ****             
 401:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 402:.\main.c      ****             {
 403:.\main.c      ****                 WR_arr_cspot++;
 404:.\main.c      ****             }
 405:.\main.c      ****             else
 406:.\main.c      ****             {
 407:.\main.c      ****                 WR_arr_cspot = 0;
 408:.\main.c      ****             }
 409:.\main.c      ****             
 410:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 411:.\main.c      ****             
 412:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 413:.\main.c      ****             
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 415:.\main.c      ****             {
 416:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 417:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 418:.\main.c      ****             }
 419:.\main.c      ****             else
 420:.\main.c      ****             {
 421:.\main.c      ****                 //throw error
 422:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 423:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 35


 424:.\main.c      ****             }
 425:.\main.c      ****             WR_FLAG = 0;
 426:.\main.c      ****             break;
 427:.\main.c      ****             
 428:.\main.c      ****         case rotate_wait:
 429:.\main.c      ****             break;
 1493              		.loc 1 429 0
 1494 0014 5EE0     		b	.L76
 1495              	.L77:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1496              		.loc 1 387 0
 1497 0016 FB1D     		add	r3, r7, #7
 1498 0018 0022     		mov	r2, #0
 1499 001a 1A70     		strb	r2, [r3]
 1500 001c 0AE0     		b	.L82
 1501              	.L83:
 389:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 1502              		.loc 1 389 0 discriminator 2
 1503 001e FB1D     		add	r3, r7, #7
 1504 0020 1A78     		ldrb	r2, [r3]
 1505 0022 454B     		ldr	r3, .L99+4
 1506 0024 5200     		lsl	r2, r2, #1
 1507 0026 4549     		ldr	r1, .L99+8
 1508 0028 D152     		strh	r1, [r2, r3]
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1509              		.loc 1 387 0 discriminator 2
 1510 002a FB1D     		add	r3, r7, #7
 1511 002c 1A78     		ldrb	r2, [r3]
 1512 002e FB1D     		add	r3, r7, #7
 1513 0030 0132     		add	r2, r2, #1
 1514 0032 1A70     		strb	r2, [r3]
 1515              	.L82:
 387:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1516              		.loc 1 387 0 is_stmt 0 discriminator 1
 1517 0034 FB1D     		add	r3, r7, #7
 1518 0036 1B78     		ldrb	r3, [r3]
 1519 0038 132B     		cmp	r3, #19
 1520 003a F0D9     		bls	.L83
 391:.\main.c      ****             WR_arr_cspot = 0;
 1521              		.loc 1 391 0 is_stmt 1
 1522 003c 404B     		ldr	r3, .L99+12
 1523 003e 0022     		mov	r2, #0
 1524 0040 1A70     		strb	r2, [r3]
 393:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 1525              		.loc 1 393 0
 1526 0042 3E4B     		ldr	r3, .L99+8
 1527 0044 0120     		mov	r0, #1
 1528 0046 191C     		mov	r1, r3
 1529 0048 FFF7FEFF 		bl	ServoGoalPosition
 394:.\main.c      ****             break;
 1530              		.loc 1 394 0
 1531 004c 42E0     		b	.L76
 1532              	.L80:
 397:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1533              		.loc 1 397 0
 1534 004e 3C1D     		add	r4, r7, #4
 1535 0050 3C4B     		ldr	r3, .L99+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 36


 1536 0052 181C     		mov	r0, r3
 1537 0054 1221     		mov	r1, #18
 1538 0056 1322     		mov	r2, #19
 1539 0058 FFF7FEFF 		bl	make_command
 1540 005c 031C     		mov	r3, r0
 1541 005e 2380     		strh	r3, [r4]
 399:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 1542              		.loc 1 399 0
 1543 0060 374B     		ldr	r3, .L99+12
 1544 0062 1B78     		ldrb	r3, [r3]
 1545 0064 1A1C     		mov	r2, r3
 1546 0066 344B     		ldr	r3, .L99+4
 1547 0068 5200     		lsl	r2, r2, #1
 1548 006a 391D     		add	r1, r7, #4
 1549 006c 0988     		ldrh	r1, [r1]
 1550 006e D152     		strh	r1, [r2, r3]
 401:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1551              		.loc 1 401 0
 1552 0070 334B     		ldr	r3, .L99+12
 1553 0072 1B78     		ldrb	r3, [r3]
 1554 0074 122B     		cmp	r3, #18
 1555 0076 06D8     		bhi	.L84
 403:.\main.c      ****                 WR_arr_cspot++;
 1556              		.loc 1 403 0
 1557 0078 314B     		ldr	r3, .L99+12
 1558 007a 1B78     		ldrb	r3, [r3]
 1559 007c 0133     		add	r3, r3, #1
 1560 007e DAB2     		uxtb	r2, r3
 1561 0080 2F4B     		ldr	r3, .L99+12
 1562 0082 1A70     		strb	r2, [r3]
 1563 0084 02E0     		b	.L85
 1564              	.L84:
 407:.\main.c      ****                 WR_arr_cspot = 0;
 1565              		.loc 1 407 0
 1566 0086 2E4B     		ldr	r3, .L99+12
 1567 0088 0022     		mov	r2, #0
 1568 008a 1A70     		strb	r2, [r3]
 1569              	.L85:
 412:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1570              		.loc 1 412 0
 1571 008c BC1C     		add	r4, r7, #2
 1572 008e 2A4B     		ldr	r3, .L99+4
 1573 0090 181C     		mov	r0, r3
 1574 0092 1421     		mov	r1, #20
 1575 0094 FFF7FEFF 		bl	average
 1576 0098 031C     		mov	r3, r0
 1577 009a 2380     		strh	r3, [r4]
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1578              		.loc 1 414 0
 1579 009c BB1C     		add	r3, r7, #2
 1580 009e 1A88     		ldrh	r2, [r3]
 1581 00a0 FA23     		mov	r3, #250
 1582 00a2 DB00     		lsl	r3, r3, #3
 1583 00a4 9A42     		cmp	r2, r3
 1584 00a6 0BD8     		bhi	.L86
 414:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1585              		.loc 1 414 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 37


 1586 00a8 BB1C     		add	r3, r7, #2
 1587 00aa 1A88     		ldrh	r2, [r3]
 1588 00ac 264B     		ldr	r3, .L99+20
 1589 00ae 9A42     		cmp	r2, r3
 1590 00b0 06D9     		bls	.L86
 417:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1591              		.loc 1 417 0 is_stmt 1
 1592 00b2 BB1C     		add	r3, r7, #2
 1593 00b4 1B88     		ldrh	r3, [r3]
 1594 00b6 0120     		mov	r0, #1
 1595 00b8 191C     		mov	r1, r3
 1596 00ba FFF7FEFF 		bl	ServoGoalPosition
 1597 00be 04E0     		b	.L87
 1598              	.L86:
 423:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1599              		.loc 1 423 0
 1600 00c0 1E4B     		ldr	r3, .L99+8
 1601 00c2 0120     		mov	r0, #1
 1602 00c4 191C     		mov	r1, r3
 1603 00c6 FFF7FEFF 		bl	ServoGoalPosition
 1604              	.L87:
 425:.\main.c      ****             WR_FLAG = 0;
 1605              		.loc 1 425 0
 1606 00ca 204B     		ldr	r3, .L99+24
 1607 00cc 0022     		mov	r2, #0
 1608 00ce 1A70     		strb	r2, [r3]
 426:.\main.c      ****             break;
 1609              		.loc 1 426 0
 1610 00d0 00E0     		b	.L76
 1611              	.L98:
 384:.\main.c      ****             break;
 1612              		.loc 1 384 0
 1613 00d2 C046     		mov	r8, r8
 1614              	.L76:
 430:.\main.c      ****     }
 431:.\main.c      ****     
 432:.\main.c      ****     switch(wristRotate_state){ //transitions
 1615              		.loc 1 432 0
 1616 00d4 174B     		ldr	r3, .L99
 1617 00d6 1B78     		ldrb	r3, [r3]
 1618 00d8 012B     		cmp	r3, #1
 1619 00da 0CD0     		beq	.L89
 1620 00dc 02DC     		bgt	.L90
 1621 00de 002B     		cmp	r3, #0
 1622 00e0 05D0     		beq	.L91
 1623 00e2 24E0     		b	.L75
 1624              	.L90:
 1625 00e4 022B     		cmp	r3, #2
 1626 00e6 0AD0     		beq	.L92
 1627 00e8 032B     		cmp	r3, #3
 1628 00ea 14D0     		beq	.L93
 1629 00ec 1FE0     		b	.L75
 1630              	.L91:
 433:.\main.c      ****         case rotate_start:
 434:.\main.c      ****             wristRotate_state = rotate_init;
 1631              		.loc 1 434 0
 1632 00ee 114B     		ldr	r3, .L99
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 38


 1633 00f0 0122     		mov	r2, #1
 1634 00f2 1A70     		strb	r2, [r3]
 435:.\main.c      ****             break;
 1635              		.loc 1 435 0
 1636 00f4 1BE0     		b	.L75
 1637              	.L89:
 436:.\main.c      ****         
 437:.\main.c      ****         case rotate_init:
 438:.\main.c      ****             wristRotate_state = rotate_wait;
 1638              		.loc 1 438 0
 1639 00f6 0F4B     		ldr	r3, .L99
 1640 00f8 0322     		mov	r2, #3
 1641 00fa 1A70     		strb	r2, [r3]
 439:.\main.c      ****             break;
 1642              		.loc 1 439 0
 1643 00fc 17E0     		b	.L75
 1644              	.L92:
 440:.\main.c      ****         
 441:.\main.c      ****         case rotate_control:
 442:.\main.c      ****             if(WR_FLAG)
 1645              		.loc 1 442 0
 1646 00fe 134B     		ldr	r3, .L99+24
 1647 0100 1B78     		ldrb	r3, [r3]
 1648 0102 002B     		cmp	r3, #0
 1649 0104 03D0     		beq	.L94
 443:.\main.c      ****             {
 444:.\main.c      ****                 wristRotate_state = rotate_control;
 1650              		.loc 1 444 0
 1651 0106 0B4B     		ldr	r3, .L99
 1652 0108 0222     		mov	r2, #2
 1653 010a 1A70     		strb	r2, [r3]
 445:.\main.c      ****             }
 446:.\main.c      ****             else
 447:.\main.c      ****             {
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 449:.\main.c      ****             }
 450:.\main.c      ****             break;
 1654              		.loc 1 450 0
 1655 010c 0FE0     		b	.L75
 1656              	.L94:
 448:.\main.c      ****                 wristRotate_state = rotate_wait;
 1657              		.loc 1 448 0
 1658 010e 094B     		ldr	r3, .L99
 1659 0110 0322     		mov	r2, #3
 1660 0112 1A70     		strb	r2, [r3]
 1661              		.loc 1 450 0
 1662 0114 0BE0     		b	.L75
 1663              	.L93:
 451:.\main.c      ****         
 452:.\main.c      ****         case rotate_wait:
 453:.\main.c      ****             if(WR_FLAG)
 1664              		.loc 1 453 0
 1665 0116 0D4B     		ldr	r3, .L99+24
 1666 0118 1B78     		ldrb	r3, [r3]
 1667 011a 002B     		cmp	r3, #0
 1668 011c 03D0     		beq	.L96
 454:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 39


 455:.\main.c      ****                 wristRotate_state = rotate_control;
 1669              		.loc 1 455 0
 1670 011e 054B     		ldr	r3, .L99
 1671 0120 0222     		mov	r2, #2
 1672 0122 1A70     		strb	r2, [r3]
 1673 0124 02E0     		b	.L97
 1674              	.L96:
 456:.\main.c      ****             }
 457:.\main.c      ****             else
 458:.\main.c      ****             {
 459:.\main.c      ****                 wristRotate_state = rotate_wait;
 1675              		.loc 1 459 0
 1676 0126 034B     		ldr	r3, .L99
 1677 0128 0322     		mov	r2, #3
 1678 012a 1A70     		strb	r2, [r3]
 1679              	.L97:
 460:.\main.c      ****             }
 461:.\main.c      ****             break;
 1680              		.loc 1 461 0
 1681 012c C046     		mov	r8, r8
 1682              	.L75:
 462:.\main.c      ****     }    
 463:.\main.c      **** }
 1683              		.loc 1 463 0
 1684 012e BD46     		mov	sp, r7
 1685 0130 03B0     		add	sp, sp, #12
 1686              		@ sp needed
 1687 0132 90BD     		pop	{r4, r7, pc}
 1688              	.L100:
 1689              		.align	2
 1690              	.L99:
 1691 0134 00000000 		.word	wristRotate_state
 1692 0138 00000000 		.word	WR_array
 1693 013c DC050000 		.word	1500
 1694 0140 00000000 		.word	WR_arr_cspot
 1695 0144 00000000 		.word	data_array
 1696 0148 E7030000 		.word	999
 1697 014c 00000000 		.word	WR_FLAG
 1698              		.cfi_endproc
 1699              	.LFE47:
 1700              		.size	wristRotate, .-wristRotate
 1701              		.comm	elbow_state,1,1
 1702              		.section	.text.elbow,"ax",%progbits
 1703              		.align	2
 1704              		.global	elbow
 1705              		.code	16
 1706              		.thumb_func
 1707              		.type	elbow, %function
 1708              	elbow:
 1709              	.LFB48:
 464:.\main.c      **** 
 465:.\main.c      **** //control the elbow
 466:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 467:.\main.c      **** void elbow()
 468:.\main.c      **** { 
 1710              		.loc 1 468 0
 1711              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 40


 1712 0000 90B5     		push	{r4, r7, lr}
 1713              		.cfi_def_cfa_offset 12
 1714              		.cfi_offset 4, -12
 1715              		.cfi_offset 7, -8
 1716              		.cfi_offset 14, -4
 1717 0002 83B0     		sub	sp, sp, #12
 1718              		.cfi_def_cfa_offset 24
 1719 0004 00AF     		add	r7, sp, #0
 1720              		.cfi_def_cfa_register 7
 469:.\main.c      ****     //take instruction from data_array
 470:.\main.c      ****     //smooth input
 471:.\main.c      ****     //actuate the elbow using PWM
 472:.\main.c      ****     //get feedback
 473:.\main.c      ****     uint8 i;
 474:.\main.c      ****     uint16 avg;
 475:.\main.c      ****     uint16 command;
 476:.\main.c      ****     
 477:.\main.c      ****     //TODO: make sure reading from correct pots
 478:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 1721              		.loc 1 478 0
 1722 0006 3C1D     		add	r4, r7, #4
 1723 0008 0120     		mov	r0, #1
 1724 000a FFF7FEFF 		bl	potFeedback
 1725 000e 031C     		mov	r3, r0
 1726 0010 2380     		strh	r3, [r4]
 479:.\main.c      ****     
 480:.\main.c      ****     switch(elbow_state){ //actions
 1727              		.loc 1 480 0
 1728 0012 784B     		ldr	r3, .L135
 1729 0014 1B78     		ldrb	r3, [r3]
 1730 0016 012B     		cmp	r3, #1
 1731 0018 07D0     		beq	.L103
 1732 001a 00DC     		bgt	.LCB1549
 1733 001c B8E0     		b	.L134	@long jump
 1734              	.LCB1549:
 1735 001e 022B     		cmp	r3, #2
 1736 0020 1ED0     		beq	.L106
 1737 0022 032B     		cmp	r3, #3
 1738 0024 00D1     		bne	.LCB1553
 1739 0026 A4E0     		b	.L107	@long jump
 1740              	.LCB1553:
 1741 0028 B3E0     		b	.L102
 1742              	.L103:
 481:.\main.c      ****         case elbw_start:
 482:.\main.c      ****             break;
 483:.\main.c      **** 
 484:.\main.c      ****         case elbw_init:
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1743              		.loc 1 485 0
 1744 002a FB1D     		add	r3, r7, #7
 1745 002c 0022     		mov	r2, #0
 1746 002e 1A70     		strb	r2, [r3]
 1747 0030 0AE0     		b	.L108
 1748              	.L109:
 486:.\main.c      ****             {
 487:.\main.c      ****                 elbow_array[i] = 1500;
 1749              		.loc 1 487 0 discriminator 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 41


 1750 0032 FB1D     		add	r3, r7, #7
 1751 0034 1A78     		ldrb	r2, [r3]
 1752 0036 704B     		ldr	r3, .L135+4
 1753 0038 5200     		lsl	r2, r2, #1
 1754 003a 7049     		ldr	r1, .L135+8
 1755 003c D152     		strh	r1, [r2, r3]
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1756              		.loc 1 485 0 discriminator 2
 1757 003e FB1D     		add	r3, r7, #7
 1758 0040 1A78     		ldrb	r2, [r3]
 1759 0042 FB1D     		add	r3, r7, #7
 1760 0044 0132     		add	r2, r2, #1
 1761 0046 1A70     		strb	r2, [r3]
 1762              	.L108:
 485:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 1763              		.loc 1 485 0 is_stmt 0 discriminator 1
 1764 0048 FB1D     		add	r3, r7, #7
 1765 004a 1B78     		ldrb	r3, [r3]
 1766 004c 132B     		cmp	r3, #19
 1767 004e F0D9     		bls	.L109
 488:.\main.c      ****             }
 489:.\main.c      ****             elbw_arr_cspot = 0;
 1768              		.loc 1 489 0 is_stmt 1
 1769 0050 6B4B     		ldr	r3, .L135+12
 1770 0052 0022     		mov	r2, #0
 1771 0054 1A70     		strb	r2, [r3]
 490:.\main.c      ****             
 491:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 1772              		.loc 1 491 0
 1773 0056 694B     		ldr	r3, .L135+8
 1774 0058 181C     		mov	r0, r3
 1775 005a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 492:.\main.c      ****             break;
 1776              		.loc 1 492 0
 1777 005e 98E0     		b	.L102
 1778              	.L106:
 493:.\main.c      **** 
 494:.\main.c      ****         case elbw_execute:
 495:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 1779              		.loc 1 495 0
 1780 0060 BC1C     		add	r4, r7, #2
 1781 0062 684B     		ldr	r3, .L135+16
 1782 0064 181C     		mov	r0, r3
 1783 0066 0E21     		mov	r1, #14
 1784 0068 0F22     		mov	r2, #15
 1785 006a FFF7FEFF 		bl	make_command
 1786 006e 031C     		mov	r3, r0
 1787 0070 2380     		strh	r3, [r4]
 496:.\main.c      ****             
 497:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 1788              		.loc 1 497 0
 1789 0072 634B     		ldr	r3, .L135+12
 1790 0074 1B78     		ldrb	r3, [r3]
 1791 0076 1A1C     		mov	r2, r3
 1792 0078 5F4B     		ldr	r3, .L135+4
 1793 007a 5200     		lsl	r2, r2, #1
 1794 007c B91C     		add	r1, r7, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 42


 1795 007e 0988     		ldrh	r1, [r1]
 1796 0080 D152     		strh	r1, [r2, r3]
 498:.\main.c      ****             
 499:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 1797              		.loc 1 499 0
 1798 0082 5F4B     		ldr	r3, .L135+12
 1799 0084 1B78     		ldrb	r3, [r3]
 1800 0086 122B     		cmp	r3, #18
 1801 0088 06D8     		bhi	.L110
 500:.\main.c      ****             {
 501:.\main.c      ****                 elbw_arr_cspot++;
 1802              		.loc 1 501 0
 1803 008a 5D4B     		ldr	r3, .L135+12
 1804 008c 1B78     		ldrb	r3, [r3]
 1805 008e 0133     		add	r3, r3, #1
 1806 0090 DAB2     		uxtb	r2, r3
 1807 0092 5B4B     		ldr	r3, .L135+12
 1808 0094 1A70     		strb	r2, [r3]
 1809 0096 02E0     		b	.L111
 1810              	.L110:
 502:.\main.c      ****             }
 503:.\main.c      ****             else
 504:.\main.c      ****             {
 505:.\main.c      ****                 elbw_arr_cspot = 0;
 1811              		.loc 1 505 0
 1812 0098 594B     		ldr	r3, .L135+12
 1813 009a 0022     		mov	r2, #0
 1814 009c 1A70     		strb	r2, [r3]
 1815              	.L111:
 506:.\main.c      ****             }
 507:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 1816              		.loc 1 507 0
 1817 009e 3C1C     		mov	r4, r7
 1818 00a0 554B     		ldr	r3, .L135+4
 1819 00a2 181C     		mov	r0, r3
 1820 00a4 1421     		mov	r1, #20
 1821 00a6 FFF7FEFF 		bl	average
 1822 00aa 031C     		mov	r3, r0
 1823 00ac 2380     		strh	r3, [r4]
 508:.\main.c      ****             
 509:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 1824              		.loc 1 509 0
 1825 00ae 3B1D     		add	r3, r7, #4
 1826 00b0 1B88     		ldrh	r3, [r3]
 1827 00b2 642B     		cmp	r3, #100
 1828 00b4 1FD8     		bhi	.L112
 510:.\main.c      ****             {
 511:.\main.c      ****                 if (avg < 1500)
 1829              		.loc 1 511 0
 1830 00b6 3B1C     		mov	r3, r7
 1831 00b8 1A88     		ldrh	r2, [r3]
 1832 00ba 534B     		ldr	r3, .L135+20
 1833 00bc 9A42     		cmp	r2, r3
 1834 00be 04D8     		bhi	.L113
 512:.\main.c      ****                 {
 513:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1835              		.loc 1 513 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 43


 1836 00c0 4E4B     		ldr	r3, .L135+8
 1837 00c2 181C     		mov	r0, r3
 1838 00c4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1839 00c8 4FE0     		b	.L116
 1840              	.L113:
 514:.\main.c      ****                 }
 515:.\main.c      ****                 else
 516:.\main.c      ****                 {
 517:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1841              		.loc 1 517 0
 1842 00ca 3B1C     		mov	r3, r7
 1843 00cc 1A88     		ldrh	r2, [r3]
 1844 00ce FA23     		mov	r3, #250
 1845 00d0 DB00     		lsl	r3, r3, #3
 1846 00d2 9A42     		cmp	r2, r3
 1847 00d4 0AD8     		bhi	.L115
 1848              		.loc 1 517 0 is_stmt 0 discriminator 1
 1849 00d6 3B1C     		mov	r3, r7
 1850 00d8 1A88     		ldrh	r2, [r3]
 1851 00da 4C4B     		ldr	r3, .L135+24
 1852 00dc 9A42     		cmp	r2, r3
 1853 00de 05D9     		bls	.L115
 518:.\main.c      ****                     {
 519:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1854              		.loc 1 519 0 is_stmt 1
 1855 00e0 3B1C     		mov	r3, r7
 1856 00e2 1B88     		ldrh	r3, [r3]
 1857 00e4 181C     		mov	r0, r3
 1858 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1859 00ea 3EE0     		b	.L116
 1860              	.L115:
 520:.\main.c      ****                     }
 521:.\main.c      ****                     else
 522:.\main.c      ****                     {
 523:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1861              		.loc 1 523 0
 1862 00ec 434B     		ldr	r3, .L135+8
 1863 00ee 181C     		mov	r0, r3
 1864 00f0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1865 00f4 39E0     		b	.L116
 1866              	.L112:
 524:.\main.c      ****                     }
 525:.\main.c      ****                 }
 526:.\main.c      ****             }
 527:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 1867              		.loc 1 527 0
 1868 00f6 3B1D     		add	r3, r7, #4
 1869 00f8 1A88     		ldrh	r2, [r3]
 1870 00fa 444B     		ldr	r3, .L135+24
 1871 00fc 9A42     		cmp	r2, r3
 1872 00fe 1FD9     		bls	.L117
 528:.\main.c      ****             {
 529:.\main.c      ****                 if(avg > 1500)
 1873              		.loc 1 529 0
 1874 0100 3B1C     		mov	r3, r7
 1875 0102 1A88     		ldrh	r2, [r3]
 1876 0104 3D4B     		ldr	r3, .L135+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 44


 1877 0106 9A42     		cmp	r2, r3
 1878 0108 04D9     		bls	.L118
 530:.\main.c      ****                 {
 531:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1879              		.loc 1 531 0
 1880 010a 3C4B     		ldr	r3, .L135+8
 1881 010c 181C     		mov	r0, r3
 1882 010e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1883 0112 2AE0     		b	.L116
 1884              	.L118:
 532:.\main.c      ****                 }
 533:.\main.c      ****                 else
 534:.\main.c      ****                 {
 535:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 1885              		.loc 1 535 0
 1886 0114 3B1C     		mov	r3, r7
 1887 0116 1A88     		ldrh	r2, [r3]
 1888 0118 FA23     		mov	r3, #250
 1889 011a DB00     		lsl	r3, r3, #3
 1890 011c 9A42     		cmp	r2, r3
 1891 011e 0AD8     		bhi	.L120
 1892              		.loc 1 535 0 is_stmt 0 discriminator 1
 1893 0120 3B1C     		mov	r3, r7
 1894 0122 1A88     		ldrh	r2, [r3]
 1895 0124 394B     		ldr	r3, .L135+24
 1896 0126 9A42     		cmp	r2, r3
 1897 0128 05D9     		bls	.L120
 536:.\main.c      ****                     {
 537:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 1898              		.loc 1 537 0 is_stmt 1
 1899 012a 3B1C     		mov	r3, r7
 1900 012c 1B88     		ldrh	r3, [r3]
 1901 012e 181C     		mov	r0, r3
 1902 0130 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1903 0134 19E0     		b	.L116
 1904              	.L120:
 538:.\main.c      ****                     }
 539:.\main.c      ****                     else
 540:.\main.c      ****                     {
 541:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 1905              		.loc 1 541 0
 1906 0136 314B     		ldr	r3, .L135+8
 1907 0138 181C     		mov	r0, r3
 1908 013a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1909 013e 14E0     		b	.L116
 1910              	.L117:
 542:.\main.c      ****                     }
 543:.\main.c      ****                 }
 544:.\main.c      ****             }
 545:.\main.c      ****             else
 546:.\main.c      ****             {
 547:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 1911              		.loc 1 547 0
 1912 0140 3B1C     		mov	r3, r7
 1913 0142 1A88     		ldrh	r2, [r3]
 1914 0144 FA23     		mov	r3, #250
 1915 0146 DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 45


 1916 0148 9A42     		cmp	r2, r3
 1917 014a 0AD8     		bhi	.L121
 1918              		.loc 1 547 0 is_stmt 0 discriminator 1
 1919 014c 3B1C     		mov	r3, r7
 1920 014e 1A88     		ldrh	r2, [r3]
 1921 0150 2E4B     		ldr	r3, .L135+24
 1922 0152 9A42     		cmp	r2, r3
 1923 0154 05D9     		bls	.L121
 548:.\main.c      ****                 {
 549:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 1924              		.loc 1 549 0 is_stmt 1
 1925 0156 3B1C     		mov	r3, r7
 1926 0158 1B88     		ldrh	r3, [r3]
 1927 015a 181C     		mov	r0, r3
 1928 015c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1929 0160 03E0     		b	.L116
 1930              	.L121:
 550:.\main.c      ****                 }
 551:.\main.c      ****                 else
 552:.\main.c      ****                 {
 553:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 1931              		.loc 1 553 0
 1932 0162 264B     		ldr	r3, .L135+8
 1933 0164 181C     		mov	r0, r3
 1934 0166 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 1935              	.L116:
 554:.\main.c      ****                 }
 555:.\main.c      ****             }
 556:.\main.c      ****             
 557:.\main.c      ****             ELBOW_FLAG = 0;
 1936              		.loc 1 557 0
 1937 016a 294B     		ldr	r3, .L135+28
 1938 016c 0022     		mov	r2, #0
 1939 016e 1A70     		strb	r2, [r3]
 558:.\main.c      ****             break;
 1940              		.loc 1 558 0
 1941 0170 0FE0     		b	.L102
 1942              	.L107:
 559:.\main.c      ****             
 560:.\main.c      ****         case elbw_wait:
 561:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 1943              		.loc 1 561 0
 1944 0172 3B1D     		add	r3, r7, #4
 1945 0174 1B88     		ldrh	r3, [r3]
 1946 0176 642B     		cmp	r3, #100
 1947 0178 04D9     		bls	.L122
 1948              		.loc 1 561 0 is_stmt 0 discriminator 1
 1949 017a 3B1D     		add	r3, r7, #4
 1950 017c 1A88     		ldrh	r2, [r3]
 1951 017e 234B     		ldr	r3, .L135+24
 1952 0180 9A42     		cmp	r2, r3
 1953 0182 04D9     		bls	.L123
 1954              	.L122:
 562:.\main.c      ****             {
 563:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 1955              		.loc 1 563 0 is_stmt 1
 1956 0184 1D4B     		ldr	r3, .L135+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 46


 1957 0186 181C     		mov	r0, r3
 1958 0188 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 564:.\main.c      ****             }
 565:.\main.c      ****             break;
 1959              		.loc 1 565 0
 1960 018c 01E0     		b	.L102
 1961              	.L123:
 1962 018e 00E0     		b	.L102
 1963              	.L134:
 482:.\main.c      ****             break;
 1964              		.loc 1 482 0
 1965 0190 C046     		mov	r8, r8
 1966              	.L102:
 566:.\main.c      ****     }
 567:.\main.c      ****     
 568:.\main.c      ****     switch(elbow_state){ //transitions
 1967              		.loc 1 568 0
 1968 0192 184B     		ldr	r3, .L135
 1969 0194 1B78     		ldrb	r3, [r3]
 1970 0196 012B     		cmp	r3, #1
 1971 0198 0CD0     		beq	.L125
 1972 019a 02DC     		bgt	.L126
 1973 019c 002B     		cmp	r3, #0
 1974 019e 05D0     		beq	.L127
 1975 01a0 24E0     		b	.L101
 1976              	.L126:
 1977 01a2 022B     		cmp	r3, #2
 1978 01a4 0AD0     		beq	.L128
 1979 01a6 032B     		cmp	r3, #3
 1980 01a8 14D0     		beq	.L129
 1981 01aa 1FE0     		b	.L101
 1982              	.L127:
 569:.\main.c      ****         case elbw_start:
 570:.\main.c      ****             elbow_state = elbw_init;
 1983              		.loc 1 570 0
 1984 01ac 114B     		ldr	r3, .L135
 1985 01ae 0122     		mov	r2, #1
 1986 01b0 1A70     		strb	r2, [r3]
 571:.\main.c      ****             break;
 1987              		.loc 1 571 0
 1988 01b2 1BE0     		b	.L101
 1989              	.L125:
 572:.\main.c      ****         
 573:.\main.c      ****         case elbw_init:
 574:.\main.c      ****             elbow_state = elbw_wait;
 1990              		.loc 1 574 0
 1991 01b4 0F4B     		ldr	r3, .L135
 1992 01b6 0322     		mov	r2, #3
 1993 01b8 1A70     		strb	r2, [r3]
 575:.\main.c      ****             break;
 1994              		.loc 1 575 0
 1995 01ba 17E0     		b	.L101
 1996              	.L128:
 576:.\main.c      ****         
 577:.\main.c      ****         case elbw_execute:
 578:.\main.c      ****             if(ELBOW_FLAG)
 1997              		.loc 1 578 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 47


 1998 01bc 144B     		ldr	r3, .L135+28
 1999 01be 1B78     		ldrb	r3, [r3]
 2000 01c0 002B     		cmp	r3, #0
 2001 01c2 03D0     		beq	.L130
 579:.\main.c      ****             {
 580:.\main.c      ****                 elbow_state = elbw_execute;
 2002              		.loc 1 580 0
 2003 01c4 0B4B     		ldr	r3, .L135
 2004 01c6 0222     		mov	r2, #2
 2005 01c8 1A70     		strb	r2, [r3]
 581:.\main.c      ****             }
 582:.\main.c      ****             else
 583:.\main.c      ****             {
 584:.\main.c      ****                 elbow_state = elbw_wait;
 585:.\main.c      ****             }
 586:.\main.c      ****             break;
 2006              		.loc 1 586 0
 2007 01ca 0FE0     		b	.L101
 2008              	.L130:
 584:.\main.c      ****                 elbow_state = elbw_wait;
 2009              		.loc 1 584 0
 2010 01cc 094B     		ldr	r3, .L135
 2011 01ce 0322     		mov	r2, #3
 2012 01d0 1A70     		strb	r2, [r3]
 2013              		.loc 1 586 0
 2014 01d2 0BE0     		b	.L101
 2015              	.L129:
 587:.\main.c      ****         
 588:.\main.c      ****         case elbw_wait:
 589:.\main.c      ****             if(ELBOW_FLAG)
 2016              		.loc 1 589 0
 2017 01d4 0E4B     		ldr	r3, .L135+28
 2018 01d6 1B78     		ldrb	r3, [r3]
 2019 01d8 002B     		cmp	r3, #0
 2020 01da 03D0     		beq	.L132
 590:.\main.c      ****             {
 591:.\main.c      ****                 elbow_state = elbw_execute;
 2021              		.loc 1 591 0
 2022 01dc 054B     		ldr	r3, .L135
 2023 01de 0222     		mov	r2, #2
 2024 01e0 1A70     		strb	r2, [r3]
 2025 01e2 02E0     		b	.L133
 2026              	.L132:
 592:.\main.c      ****             }
 593:.\main.c      ****             else
 594:.\main.c      ****             {
 595:.\main.c      ****                 elbow_state = elbw_wait; 
 2027              		.loc 1 595 0
 2028 01e4 034B     		ldr	r3, .L135
 2029 01e6 0322     		mov	r2, #3
 2030 01e8 1A70     		strb	r2, [r3]
 2031              	.L133:
 596:.\main.c      ****             }
 597:.\main.c      ****             break;
 2032              		.loc 1 597 0
 2033 01ea C046     		mov	r8, r8
 2034              	.L101:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 48


 598:.\main.c      ****     }    
 599:.\main.c      **** }
 2035              		.loc 1 599 0
 2036 01ec BD46     		mov	sp, r7
 2037 01ee 03B0     		add	sp, sp, #12
 2038              		@ sp needed
 2039 01f0 90BD     		pop	{r4, r7, pc}
 2040              	.L136:
 2041 01f2 C046     		.align	2
 2042              	.L135:
 2043 01f4 00000000 		.word	elbow_state
 2044 01f8 00000000 		.word	elbow_array
 2045 01fc DC050000 		.word	1500
 2046 0200 00000000 		.word	elbw_arr_cspot
 2047 0204 00000000 		.word	data_array
 2048 0208 DB050000 		.word	1499
 2049 020c E7030000 		.word	999
 2050 0210 00000000 		.word	ELBOW_FLAG
 2051              		.cfi_endproc
 2052              	.LFE48:
 2053              		.size	elbow, .-elbow
 2054              		.comm	shoulder_state,1,1
 2055              		.section	.text.shoulder,"ax",%progbits
 2056              		.align	2
 2057              		.global	shoulder
 2058              		.code	16
 2059              		.thumb_func
 2060              		.type	shoulder, %function
 2061              	shoulder:
 2062              	.LFB49:
 600:.\main.c      **** 
 601:.\main.c      **** //control the shoulder
 602:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 603:.\main.c      **** void shoulder()
 604:.\main.c      **** { 
 2063              		.loc 1 604 0
 2064              		.cfi_startproc
 2065 0000 90B5     		push	{r4, r7, lr}
 2066              		.cfi_def_cfa_offset 12
 2067              		.cfi_offset 4, -12
 2068              		.cfi_offset 7, -8
 2069              		.cfi_offset 14, -4
 2070 0002 83B0     		sub	sp, sp, #12
 2071              		.cfi_def_cfa_offset 24
 2072 0004 00AF     		add	r7, sp, #0
 2073              		.cfi_def_cfa_register 7
 605:.\main.c      ****     //take instruction from data_array
 606:.\main.c      ****     //smooth input
 607:.\main.c      ****     //actuate the shoulder using PWM
 608:.\main.c      ****     //get feedback
 609:.\main.c      ****     uint8 i;
 610:.\main.c      ****     uint16 avg;
 611:.\main.c      ****     uint16 command;
 612:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2074              		.loc 1 612 0
 2075 0006 3C1D     		add	r4, r7, #4
 2076 0008 0020     		mov	r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 49


 2077 000a FFF7FEFF 		bl	potFeedback
 2078 000e 031C     		mov	r3, r0
 2079 0010 2380     		strh	r3, [r4]
 613:.\main.c      ****     
 614:.\main.c      ****     switch(shoulder_state){ //actions
 2080              		.loc 1 614 0
 2081 0012 7A4B     		ldr	r3, .L171
 2082 0014 1B78     		ldrb	r3, [r3]
 2083 0016 012B     		cmp	r3, #1
 2084 0018 07D0     		beq	.L139
 2085 001a 00DC     		bgt	.LCB1891
 2086 001c BCE0     		b	.L170	@long jump
 2087              	.LCB1891:
 2088 001e 022B     		cmp	r3, #2
 2089 0020 1ED0     		beq	.L142
 2090 0022 032B     		cmp	r3, #3
 2091 0024 00D1     		bne	.LCB1895
 2092 0026 A6E0     		b	.L143	@long jump
 2093              	.LCB1895:
 2094 0028 B7E0     		b	.L138
 2095              	.L139:
 615:.\main.c      ****         case shldr_start:
 616:.\main.c      ****             break;
 617:.\main.c      **** 
 618:.\main.c      ****         case shldr_init:
 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2096              		.loc 1 619 0
 2097 002a FB1D     		add	r3, r7, #7
 2098 002c 0022     		mov	r2, #0
 2099 002e 1A70     		strb	r2, [r3]
 2100 0030 0AE0     		b	.L144
 2101              	.L145:
 620:.\main.c      ****             {
 621:.\main.c      ****                 shoulder_array[i] = 1500;
 2102              		.loc 1 621 0 discriminator 2
 2103 0032 FB1D     		add	r3, r7, #7
 2104 0034 1A78     		ldrb	r2, [r3]
 2105 0036 724B     		ldr	r3, .L171+4
 2106 0038 5200     		lsl	r2, r2, #1
 2107 003a 7249     		ldr	r1, .L171+8
 2108 003c D152     		strh	r1, [r2, r3]
 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2109              		.loc 1 619 0 discriminator 2
 2110 003e FB1D     		add	r3, r7, #7
 2111 0040 1A78     		ldrb	r2, [r3]
 2112 0042 FB1D     		add	r3, r7, #7
 2113 0044 0132     		add	r2, r2, #1
 2114 0046 1A70     		strb	r2, [r3]
 2115              	.L144:
 619:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2116              		.loc 1 619 0 is_stmt 0 discriminator 1
 2117 0048 FB1D     		add	r3, r7, #7
 2118 004a 1B78     		ldrb	r3, [r3]
 2119 004c 132B     		cmp	r3, #19
 2120 004e F0D9     		bls	.L145
 622:.\main.c      ****             }
 623:.\main.c      ****             shldr_arr_cspot = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 50


 2121              		.loc 1 623 0 is_stmt 1
 2122 0050 6D4B     		ldr	r3, .L171+12
 2123 0052 0022     		mov	r2, #0
 2124 0054 1A70     		strb	r2, [r3]
 624:.\main.c      ****                         
 625:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2125              		.loc 1 625 0
 2126 0056 6B4B     		ldr	r3, .L171+8
 2127 0058 181C     		mov	r0, r3
 2128 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 626:.\main.c      ****             break;
 2129              		.loc 1 626 0
 2130 005e 9CE0     		b	.L138
 2131              	.L142:
 627:.\main.c      **** 
 628:.\main.c      ****         case shldr_execute:
 629:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2132              		.loc 1 629 0
 2133 0060 BC1C     		add	r4, r7, #2
 2134 0062 6A4B     		ldr	r3, .L171+16
 2135 0064 181C     		mov	r0, r3
 2136 0066 0C21     		mov	r1, #12
 2137 0068 0D22     		mov	r2, #13
 2138 006a FFF7FEFF 		bl	make_command
 2139 006e 031C     		mov	r3, r0
 2140 0070 2380     		strh	r3, [r4]
 630:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2141              		.loc 1 630 0
 2142 0072 654B     		ldr	r3, .L171+12
 2143 0074 1B78     		ldrb	r3, [r3]
 2144 0076 1A1C     		mov	r2, r3
 2145 0078 614B     		ldr	r3, .L171+4
 2146 007a 5200     		lsl	r2, r2, #1
 2147 007c B91C     		add	r1, r7, #2
 2148 007e 0988     		ldrh	r1, [r1]
 2149 0080 D152     		strh	r1, [r2, r3]
 631:.\main.c      ****         
 632:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2150              		.loc 1 632 0
 2151 0082 614B     		ldr	r3, .L171+12
 2152 0084 1B78     		ldrb	r3, [r3]
 2153 0086 122B     		cmp	r3, #18
 2154 0088 06D8     		bhi	.L146
 633:.\main.c      ****             {
 634:.\main.c      ****                 shldr_arr_cspot++;
 2155              		.loc 1 634 0
 2156 008a 5F4B     		ldr	r3, .L171+12
 2157 008c 1B78     		ldrb	r3, [r3]
 2158 008e 0133     		add	r3, r3, #1
 2159 0090 DAB2     		uxtb	r2, r3
 2160 0092 5D4B     		ldr	r3, .L171+12
 2161 0094 1A70     		strb	r2, [r3]
 2162 0096 02E0     		b	.L147
 2163              	.L146:
 635:.\main.c      ****             }
 636:.\main.c      ****             else
 637:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 51


 638:.\main.c      ****                 shldr_arr_cspot = 0;
 2164              		.loc 1 638 0
 2165 0098 5B4B     		ldr	r3, .L171+12
 2166 009a 0022     		mov	r2, #0
 2167 009c 1A70     		strb	r2, [r3]
 2168              	.L147:
 639:.\main.c      ****             }
 640:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2169              		.loc 1 640 0
 2170 009e 3C1C     		mov	r4, r7
 2171 00a0 574B     		ldr	r3, .L171+4
 2172 00a2 181C     		mov	r0, r3
 2173 00a4 1421     		mov	r1, #20
 2174 00a6 FFF7FEFF 		bl	average
 2175 00aa 031C     		mov	r3, r0
 2176 00ac 2380     		strh	r3, [r4]
 641:.\main.c      ****             
 642:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2177              		.loc 1 642 0
 2178 00ae 3B1D     		add	r3, r7, #4
 2179 00b0 1A88     		ldrh	r2, [r3]
 2180 00b2 8C23     		mov	r3, #140
 2181 00b4 5B00     		lsl	r3, r3, #1
 2182 00b6 9A42     		cmp	r2, r3
 2183 00b8 1FD8     		bhi	.L148
 643:.\main.c      ****             {
 644:.\main.c      ****                 if (avg < 1500)
 2184              		.loc 1 644 0
 2185 00ba 3B1C     		mov	r3, r7
 2186 00bc 1A88     		ldrh	r2, [r3]
 2187 00be 544B     		ldr	r3, .L171+20
 2188 00c0 9A42     		cmp	r2, r3
 2189 00c2 04D8     		bhi	.L149
 645:.\main.c      ****                 {
 646:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2190              		.loc 1 646 0
 2191 00c4 4F4B     		ldr	r3, .L171+8
 2192 00c6 181C     		mov	r0, r3
 2193 00c8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2194 00cc 4FE0     		b	.L152
 2195              	.L149:
 647:.\main.c      ****                 }
 648:.\main.c      ****                 else
 649:.\main.c      ****                 {
 650:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2196              		.loc 1 650 0
 2197 00ce 3B1C     		mov	r3, r7
 2198 00d0 1A88     		ldrh	r2, [r3]
 2199 00d2 FA23     		mov	r3, #250
 2200 00d4 DB00     		lsl	r3, r3, #3
 2201 00d6 9A42     		cmp	r2, r3
 2202 00d8 0AD8     		bhi	.L151
 2203              		.loc 1 650 0 is_stmt 0 discriminator 1
 2204 00da 3B1C     		mov	r3, r7
 2205 00dc 1A88     		ldrh	r2, [r3]
 2206 00de 4D4B     		ldr	r3, .L171+24
 2207 00e0 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 52


 2208 00e2 05D9     		bls	.L151
 651:.\main.c      ****                     {
 652:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2209              		.loc 1 652 0 is_stmt 1
 2210 00e4 3B1C     		mov	r3, r7
 2211 00e6 1B88     		ldrh	r3, [r3]
 2212 00e8 181C     		mov	r0, r3
 2213 00ea FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2214 00ee 3EE0     		b	.L152
 2215              	.L151:
 653:.\main.c      ****                     }
 654:.\main.c      ****                     else
 655:.\main.c      ****                     {
 656:.\main.c      ****                         //throw error
 657:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2216              		.loc 1 657 0
 2217 00f0 444B     		ldr	r3, .L171+8
 2218 00f2 181C     		mov	r0, r3
 2219 00f4 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2220 00f8 39E0     		b	.L152
 2221              	.L148:
 658:.\main.c      ****                     }
 659:.\main.c      ****                 }
 660:.\main.c      ****             }
 661:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2222              		.loc 1 661 0
 2223 00fa 3B1D     		add	r3, r7, #4
 2224 00fc 1A88     		ldrh	r2, [r3]
 2225 00fe 464B     		ldr	r3, .L171+28
 2226 0100 9A42     		cmp	r2, r3
 2227 0102 1FD9     		bls	.L153
 662:.\main.c      ****             {
 663:.\main.c      ****                 if(avg > 1500)
 2228              		.loc 1 663 0
 2229 0104 3B1C     		mov	r3, r7
 2230 0106 1A88     		ldrh	r2, [r3]
 2231 0108 3E4B     		ldr	r3, .L171+8
 2232 010a 9A42     		cmp	r2, r3
 2233 010c 04D9     		bls	.L154
 664:.\main.c      ****                 {
 665:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2234              		.loc 1 665 0
 2235 010e 3D4B     		ldr	r3, .L171+8
 2236 0110 181C     		mov	r0, r3
 2237 0112 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2238 0116 2AE0     		b	.L152
 2239              	.L154:
 666:.\main.c      ****                 }
 667:.\main.c      ****                 else
 668:.\main.c      ****                 {
 669:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2240              		.loc 1 669 0
 2241 0118 3B1C     		mov	r3, r7
 2242 011a 1A88     		ldrh	r2, [r3]
 2243 011c FA23     		mov	r3, #250
 2244 011e DB00     		lsl	r3, r3, #3
 2245 0120 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 53


 2246 0122 0AD8     		bhi	.L156
 2247              		.loc 1 669 0 is_stmt 0 discriminator 1
 2248 0124 3B1C     		mov	r3, r7
 2249 0126 1A88     		ldrh	r2, [r3]
 2250 0128 3A4B     		ldr	r3, .L171+24
 2251 012a 9A42     		cmp	r2, r3
 2252 012c 05D9     		bls	.L156
 670:.\main.c      ****                     {
 671:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2253              		.loc 1 671 0 is_stmt 1
 2254 012e 3B1C     		mov	r3, r7
 2255 0130 1B88     		ldrh	r3, [r3]
 2256 0132 181C     		mov	r0, r3
 2257 0134 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2258 0138 19E0     		b	.L152
 2259              	.L156:
 672:.\main.c      ****                     }
 673:.\main.c      ****                     else
 674:.\main.c      ****                     {
 675:.\main.c      ****                         //throw error
 676:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2260              		.loc 1 676 0
 2261 013a 324B     		ldr	r3, .L171+8
 2262 013c 181C     		mov	r0, r3
 2263 013e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2264 0142 14E0     		b	.L152
 2265              	.L153:
 677:.\main.c      ****                     }
 678:.\main.c      ****                 }
 679:.\main.c      ****             }
 680:.\main.c      ****             else
 681:.\main.c      ****             {
 682:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2266              		.loc 1 682 0
 2267 0144 3B1C     		mov	r3, r7
 2268 0146 1A88     		ldrh	r2, [r3]
 2269 0148 FA23     		mov	r3, #250
 2270 014a DB00     		lsl	r3, r3, #3
 2271 014c 9A42     		cmp	r2, r3
 2272 014e 0AD8     		bhi	.L157
 2273              		.loc 1 682 0 is_stmt 0 discriminator 1
 2274 0150 3B1C     		mov	r3, r7
 2275 0152 1A88     		ldrh	r2, [r3]
 2276 0154 2F4B     		ldr	r3, .L171+24
 2277 0156 9A42     		cmp	r2, r3
 2278 0158 05D9     		bls	.L157
 683:.\main.c      ****                 {
 684:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2279              		.loc 1 684 0 is_stmt 1
 2280 015a 3B1C     		mov	r3, r7
 2281 015c 1B88     		ldrh	r3, [r3]
 2282 015e 181C     		mov	r0, r3
 2283 0160 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2284 0164 03E0     		b	.L152
 2285              	.L157:
 685:.\main.c      ****                 }
 686:.\main.c      ****                 else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 54


 687:.\main.c      ****                 {
 688:.\main.c      ****                     //throw error
 689:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2286              		.loc 1 689 0
 2287 0166 274B     		ldr	r3, .L171+8
 2288 0168 181C     		mov	r0, r3
 2289 016a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2290              	.L152:
 690:.\main.c      ****                 }
 691:.\main.c      ****             }
 692:.\main.c      ****             SHOULDER_FLAG = 0;
 2291              		.loc 1 692 0
 2292 016e 2B4B     		ldr	r3, .L171+32
 2293 0170 0022     		mov	r2, #0
 2294 0172 1A70     		strb	r2, [r3]
 693:.\main.c      ****             break;
 2295              		.loc 1 693 0
 2296 0174 11E0     		b	.L138
 2297              	.L143:
 694:.\main.c      ****             
 695:.\main.c      ****         case shldr_wait:
 696:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2298              		.loc 1 696 0
 2299 0176 3B1D     		add	r3, r7, #4
 2300 0178 1A88     		ldrh	r2, [r3]
 2301 017a 8C23     		mov	r3, #140
 2302 017c 5B00     		lsl	r3, r3, #1
 2303 017e 9A42     		cmp	r2, r3
 2304 0180 04D9     		bls	.L158
 2305              		.loc 1 696 0 is_stmt 0 discriminator 1
 2306 0182 3B1D     		add	r3, r7, #4
 2307 0184 1A88     		ldrh	r2, [r3]
 2308 0186 244B     		ldr	r3, .L171+28
 2309 0188 9A42     		cmp	r2, r3
 2310 018a 04D9     		bls	.L159
 2311              	.L158:
 697:.\main.c      ****             {
 698:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2312              		.loc 1 698 0 is_stmt 1
 2313 018c 1D4B     		ldr	r3, .L171+8
 2314 018e 181C     		mov	r0, r3
 2315 0190 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 699:.\main.c      ****             }
 700:.\main.c      ****             break;
 2316              		.loc 1 700 0
 2317 0194 01E0     		b	.L138
 2318              	.L159:
 2319 0196 00E0     		b	.L138
 2320              	.L170:
 616:.\main.c      ****             break;
 2321              		.loc 1 616 0
 2322 0198 C046     		mov	r8, r8
 2323              	.L138:
 701:.\main.c      ****     }
 702:.\main.c      ****     
 703:.\main.c      ****     switch(shoulder_state){ //transitions
 2324              		.loc 1 703 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 55


 2325 019a 184B     		ldr	r3, .L171
 2326 019c 1B78     		ldrb	r3, [r3]
 2327 019e 012B     		cmp	r3, #1
 2328 01a0 0CD0     		beq	.L161
 2329 01a2 02DC     		bgt	.L162
 2330 01a4 002B     		cmp	r3, #0
 2331 01a6 05D0     		beq	.L163
 2332 01a8 24E0     		b	.L137
 2333              	.L162:
 2334 01aa 022B     		cmp	r3, #2
 2335 01ac 0AD0     		beq	.L164
 2336 01ae 032B     		cmp	r3, #3
 2337 01b0 14D0     		beq	.L165
 2338 01b2 1FE0     		b	.L137
 2339              	.L163:
 704:.\main.c      ****         case shldr_start:
 705:.\main.c      ****             shoulder_state = shldr_init;
 2340              		.loc 1 705 0
 2341 01b4 114B     		ldr	r3, .L171
 2342 01b6 0122     		mov	r2, #1
 2343 01b8 1A70     		strb	r2, [r3]
 706:.\main.c      ****             break;
 2344              		.loc 1 706 0
 2345 01ba 1BE0     		b	.L137
 2346              	.L161:
 707:.\main.c      ****         
 708:.\main.c      ****         case shldr_init:
 709:.\main.c      ****             shoulder_state = shldr_wait;
 2347              		.loc 1 709 0
 2348 01bc 0F4B     		ldr	r3, .L171
 2349 01be 0322     		mov	r2, #3
 2350 01c0 1A70     		strb	r2, [r3]
 710:.\main.c      ****             break;
 2351              		.loc 1 710 0
 2352 01c2 17E0     		b	.L137
 2353              	.L164:
 711:.\main.c      ****         
 712:.\main.c      ****         case shldr_execute:
 713:.\main.c      ****             if(SHOULDER_FLAG)
 2354              		.loc 1 713 0
 2355 01c4 154B     		ldr	r3, .L171+32
 2356 01c6 1B78     		ldrb	r3, [r3]
 2357 01c8 002B     		cmp	r3, #0
 2358 01ca 03D0     		beq	.L166
 714:.\main.c      ****             {
 715:.\main.c      ****                 shoulder_state = shldr_execute;
 2359              		.loc 1 715 0
 2360 01cc 0B4B     		ldr	r3, .L171
 2361 01ce 0222     		mov	r2, #2
 2362 01d0 1A70     		strb	r2, [r3]
 716:.\main.c      ****             }
 717:.\main.c      ****             else
 718:.\main.c      ****             {
 719:.\main.c      ****                 shoulder_state = shldr_wait;
 720:.\main.c      ****             }
 721:.\main.c      ****             break;
 2363              		.loc 1 721 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 56


 2364 01d2 0FE0     		b	.L137
 2365              	.L166:
 719:.\main.c      ****                 shoulder_state = shldr_wait;
 2366              		.loc 1 719 0
 2367 01d4 094B     		ldr	r3, .L171
 2368 01d6 0322     		mov	r2, #3
 2369 01d8 1A70     		strb	r2, [r3]
 2370              		.loc 1 721 0
 2371 01da 0BE0     		b	.L137
 2372              	.L165:
 722:.\main.c      ****         
 723:.\main.c      ****         case shldr_wait:
 724:.\main.c      ****             if(SHOULDER_FLAG)
 2373              		.loc 1 724 0
 2374 01dc 0F4B     		ldr	r3, .L171+32
 2375 01de 1B78     		ldrb	r3, [r3]
 2376 01e0 002B     		cmp	r3, #0
 2377 01e2 03D0     		beq	.L168
 725:.\main.c      ****             {
 726:.\main.c      ****                 shoulder_state = shldr_execute;
 2378              		.loc 1 726 0
 2379 01e4 054B     		ldr	r3, .L171
 2380 01e6 0222     		mov	r2, #2
 2381 01e8 1A70     		strb	r2, [r3]
 2382 01ea 02E0     		b	.L169
 2383              	.L168:
 727:.\main.c      ****             }
 728:.\main.c      ****             else
 729:.\main.c      ****             {
 730:.\main.c      ****                 shoulder_state = shldr_wait; 
 2384              		.loc 1 730 0
 2385 01ec 034B     		ldr	r3, .L171
 2386 01ee 0322     		mov	r2, #3
 2387 01f0 1A70     		strb	r2, [r3]
 2388              	.L169:
 731:.\main.c      ****             }
 732:.\main.c      ****             break;
 2389              		.loc 1 732 0
 2390 01f2 C046     		mov	r8, r8
 2391              	.L137:
 733:.\main.c      ****     }    
 734:.\main.c      **** }
 2392              		.loc 1 734 0
 2393 01f4 BD46     		mov	sp, r7
 2394 01f6 03B0     		add	sp, sp, #12
 2395              		@ sp needed
 2396 01f8 90BD     		pop	{r4, r7, pc}
 2397              	.L172:
 2398 01fa C046     		.align	2
 2399              	.L171:
 2400 01fc 00000000 		.word	shoulder_state
 2401 0200 00000000 		.word	shoulder_array
 2402 0204 DC050000 		.word	1500
 2403 0208 00000000 		.word	shldr_arr_cspot
 2404 020c 00000000 		.word	data_array
 2405 0210 DB050000 		.word	1499
 2406 0214 E7030000 		.word	999
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 57


 2407 0218 1F030000 		.word	799
 2408 021c 00000000 		.word	SHOULDER_FLAG
 2409              		.cfi_endproc
 2410              	.LFE49:
 2411              		.size	shoulder, .-shoulder
 2412              		.comm	baseAzimuth_state,1,1
 2413              		.section	.text.baseAzimuth,"ax",%progbits
 2414              		.align	2
 2415              		.global	baseAzimuth
 2416              		.code	16
 2417              		.thumb_func
 2418              		.type	baseAzimuth, %function
 2419              	baseAzimuth:
 2420              	.LFB50:
 735:.\main.c      **** 
 736:.\main.c      **** //control the turret
 737:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 738:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 739:.\main.c      **** { 
 2421              		.loc 1 739 0
 2422              		.cfi_startproc
 2423 0000 90B5     		push	{r4, r7, lr}
 2424              		.cfi_def_cfa_offset 12
 2425              		.cfi_offset 4, -12
 2426              		.cfi_offset 7, -8
 2427              		.cfi_offset 14, -4
 2428 0002 85B0     		sub	sp, sp, #20
 2429              		.cfi_def_cfa_offset 32
 2430 0004 00AF     		add	r7, sp, #0
 2431              		.cfi_def_cfa_register 7
 2432 0006 021C     		mov	r2, r0
 2433 0008 3960     		str	r1, [r7]
 2434 000a FB1D     		add	r3, r7, #7
 2435 000c 1A70     		strb	r2, [r3]
 740:.\main.c      ****     //take instruction from data_array
 741:.\main.c      ****     //smooth input
 742:.\main.c      ****     //actuate the turret using PWM
 743:.\main.c      ****     uint8 i;
 744:.\main.c      ****     uint16 avg;
 745:.\main.c      ****     uint16 command;
 746:.\main.c      ****     
 747:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2436              		.loc 1 747 0
 2437 000e 4E4B     		ldr	r3, .L197
 2438 0010 1B78     		ldrb	r3, [r3]
 2439 0012 012B     		cmp	r3, #1
 2440 0014 03D0     		beq	.L175
 2441 0016 63DD     		ble	.L195
 2442 0018 022B     		cmp	r3, #2
 2443 001a 21D0     		beq	.L178
 748:.\main.c      ****         case BA_start:
 749:.\main.c      ****             break;
 750:.\main.c      **** 
 751:.\main.c      ****         case BA_init:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 753:.\main.c      ****             {
 754:.\main.c      ****                 baseAz_array[i] = 1500;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 58


 755:.\main.c      ****             }
 756:.\main.c      ****             BA_arr_cspot = 0;
 757:.\main.c      ****             
 758:.\main.c      ****             BA_PWM_WriteCompare(1500);
 759:.\main.c      ****             break;
 760:.\main.c      **** 
 761:.\main.c      ****         case BA_execute:
 762:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 763:.\main.c      ****             
 764:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 765:.\main.c      **** //            
 766:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 767:.\main.c      **** //            {
 768:.\main.c      **** //                BA_arr_cspot++;
 769:.\main.c      **** //            }
 770:.\main.c      **** //            else
 771:.\main.c      **** //            {
 772:.\main.c      **** //                BA_arr_cspot = 0;
 773:.\main.c      **** //            }
 774:.\main.c      ****             
 775:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 776:.\main.c      ****             
 777:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 778:.\main.c      ****             
 779:.\main.c      **** //            if(avg == 1000 || avg == 2000)
 780:.\main.c      **** //            {
 781:.\main.c      **** //
 782:.\main.c      **** //                temp_val = temp_val*(-1);
 783:.\main.c      **** //            }
 784:.\main.c      ****             
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 786:.\main.c      ****             {
 787:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 788:.\main.c      ****             }
 789:.\main.c      ****             else
 790:.\main.c      ****             {
 791:.\main.c      ****                 LED_Write(1);
 792:.\main.c      **** 
 793:.\main.c      ****                 //throw error
 794:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 795:.\main.c      ****             }
 796:.\main.c      ****             BA_FLAG = 0;
 797:.\main.c      ****             break;
 798:.\main.c      ****             
 799:.\main.c      ****         case BA_wait:
 800:.\main.c      ****             break;
 2444              		.loc 1 800 0
 2445 001c 61E0     		b	.L174
 2446              	.L175:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2447              		.loc 1 752 0
 2448 001e 3B1C     		mov	r3, r7
 2449 0020 0F33     		add	r3, r3, #15
 2450 0022 0022     		mov	r2, #0
 2451 0024 1A70     		strb	r2, [r3]
 2452 0026 0EE0     		b	.L180
 2453              	.L181:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 59


 754:.\main.c      ****                 baseAz_array[i] = 1500;
 2454              		.loc 1 754 0 discriminator 2
 2455 0028 3B1C     		mov	r3, r7
 2456 002a 0F33     		add	r3, r3, #15
 2457 002c 1B78     		ldrb	r3, [r3]
 2458 002e 5B00     		lsl	r3, r3, #1
 2459 0030 3A68     		ldr	r2, [r7]
 2460 0032 D318     		add	r3, r2, r3
 2461 0034 454A     		ldr	r2, .L197+4
 2462 0036 1A80     		strh	r2, [r3]
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2463              		.loc 1 752 0 discriminator 2
 2464 0038 3B1C     		mov	r3, r7
 2465 003a 0F33     		add	r3, r3, #15
 2466 003c 1A78     		ldrb	r2, [r3]
 2467 003e 3B1C     		mov	r3, r7
 2468 0040 0F33     		add	r3, r3, #15
 2469 0042 0132     		add	r2, r2, #1
 2470 0044 1A70     		strb	r2, [r3]
 2471              	.L180:
 752:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2472              		.loc 1 752 0 is_stmt 0 discriminator 1
 2473 0046 3B1C     		mov	r3, r7
 2474 0048 0F33     		add	r3, r3, #15
 2475 004a 1B78     		ldrb	r3, [r3]
 2476 004c 132B     		cmp	r3, #19
 2477 004e EBD9     		bls	.L181
 756:.\main.c      ****             BA_arr_cspot = 0;
 2478              		.loc 1 756 0 is_stmt 1
 2479 0050 FB1D     		add	r3, r7, #7
 2480 0052 0022     		mov	r2, #0
 2481 0054 1A70     		strb	r2, [r3]
 758:.\main.c      ****             BA_PWM_WriteCompare(1500);
 2482              		.loc 1 758 0
 2483 0056 3D4B     		ldr	r3, .L197+4
 2484 0058 181C     		mov	r0, r3
 2485 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
 759:.\main.c      ****             break;
 2486              		.loc 1 759 0
 2487 005e 40E0     		b	.L174
 2488              	.L178:
 762:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2489              		.loc 1 762 0
 2490 0060 3C1C     		mov	r4, r7
 2491 0062 0C34     		add	r4, r4, #12
 2492 0064 3A4B     		ldr	r3, .L197+8
 2493 0066 181C     		mov	r0, r3
 2494 0068 0A21     		mov	r1, #10
 2495 006a 0B22     		mov	r2, #11
 2496 006c FFF7FEFF 		bl	make_command
 2497 0070 031C     		mov	r3, r0
 2498 0072 2380     		strh	r3, [r4]
 775:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 2499              		.loc 1 775 0
 2500 0074 FC1D     		add	r4, r7, #7
 2501 0076 FB1D     		add	r3, r7, #7
 2502 0078 1978     		ldrb	r1, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 60


 2503 007a 3A68     		ldr	r2, [r7]
 2504 007c 3B1C     		mov	r3, r7
 2505 007e 0C33     		add	r3, r3, #12
 2506 0080 1B88     		ldrh	r3, [r3]
 2507 0082 081C     		mov	r0, r1
 2508 0084 111C     		mov	r1, r2
 2509 0086 1422     		mov	r2, #20
 2510 0088 FFF7FEFF 		bl	pos_to_vel
 2511 008c 031C     		mov	r3, r0
 2512 008e 2370     		strb	r3, [r4]
 777:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2513              		.loc 1 777 0
 2514 0090 3C1C     		mov	r4, r7
 2515 0092 0A34     		add	r4, r4, #10
 2516 0094 3B68     		ldr	r3, [r7]
 2517 0096 181C     		mov	r0, r3
 2518 0098 1421     		mov	r1, #20
 2519 009a FFF7FEFF 		bl	average
 2520 009e 031C     		mov	r3, r0
 2521 00a0 2380     		strh	r3, [r4]
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2522              		.loc 1 785 0
 2523 00a2 3B1C     		mov	r3, r7
 2524 00a4 0A33     		add	r3, r3, #10
 2525 00a6 1A88     		ldrh	r2, [r3]
 2526 00a8 FA23     		mov	r3, #250
 2527 00aa DB00     		lsl	r3, r3, #3
 2528 00ac 9A42     		cmp	r2, r3
 2529 00ae 0CD8     		bhi	.L182
 785:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2530              		.loc 1 785 0 is_stmt 0 discriminator 1
 2531 00b0 3B1C     		mov	r3, r7
 2532 00b2 0A33     		add	r3, r3, #10
 2533 00b4 1A88     		ldrh	r2, [r3]
 2534 00b6 274B     		ldr	r3, .L197+12
 2535 00b8 9A42     		cmp	r2, r3
 2536 00ba 06D9     		bls	.L182
 787:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2537              		.loc 1 787 0 is_stmt 1
 2538 00bc 3B1C     		mov	r3, r7
 2539 00be 0A33     		add	r3, r3, #10
 2540 00c0 1B88     		ldrh	r3, [r3]
 2541 00c2 181C     		mov	r0, r3
 2542 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2543 00c8 06E0     		b	.L183
 2544              	.L182:
 791:.\main.c      ****                 LED_Write(1);
 2545              		.loc 1 791 0
 2546 00ca 0120     		mov	r0, #1
 2547 00cc FFF7FEFF 		bl	LED_Write
 794:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2548              		.loc 1 794 0
 2549 00d0 1E4B     		ldr	r3, .L197+4
 2550 00d2 181C     		mov	r0, r3
 2551 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2552              	.L183:
 796:.\main.c      ****             BA_FLAG = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 61


 2553              		.loc 1 796 0
 2554 00d8 1F4B     		ldr	r3, .L197+16
 2555 00da 0022     		mov	r2, #0
 2556 00dc 1A70     		strb	r2, [r3]
 797:.\main.c      ****             break;
 2557              		.loc 1 797 0
 2558 00de 00E0     		b	.L174
 2559              	.L195:
 749:.\main.c      ****             break;
 2560              		.loc 1 749 0
 2561 00e0 C046     		mov	r8, r8
 2562              	.L174:
 801:.\main.c      ****     }
 802:.\main.c      ****     
 803:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2563              		.loc 1 803 0
 2564 00e2 194B     		ldr	r3, .L197
 2565 00e4 1B78     		ldrb	r3, [r3]
 2566 00e6 012B     		cmp	r3, #1
 2567 00e8 0CD0     		beq	.L185
 2568 00ea 02DC     		bgt	.L186
 2569 00ec 002B     		cmp	r3, #0
 2570 00ee 05D0     		beq	.L187
 2571 00f0 24E0     		b	.L184
 2572              	.L186:
 2573 00f2 022B     		cmp	r3, #2
 2574 00f4 0AD0     		beq	.L188
 2575 00f6 032B     		cmp	r3, #3
 2576 00f8 14D0     		beq	.L189
 2577 00fa 1FE0     		b	.L184
 2578              	.L187:
 804:.\main.c      ****         case BA_start:
 805:.\main.c      ****             baseAzimuth_state = BA_init;
 2579              		.loc 1 805 0
 2580 00fc 124B     		ldr	r3, .L197
 2581 00fe 0122     		mov	r2, #1
 2582 0100 1A70     		strb	r2, [r3]
 806:.\main.c      ****             break;
 2583              		.loc 1 806 0
 2584 0102 1BE0     		b	.L184
 2585              	.L185:
 807:.\main.c      ****         
 808:.\main.c      ****         case BA_init:
 809:.\main.c      ****             baseAzimuth_state = BA_wait;
 2586              		.loc 1 809 0
 2587 0104 104B     		ldr	r3, .L197
 2588 0106 0322     		mov	r2, #3
 2589 0108 1A70     		strb	r2, [r3]
 810:.\main.c      ****             break;
 2590              		.loc 1 810 0
 2591 010a 17E0     		b	.L184
 2592              	.L188:
 811:.\main.c      ****         
 812:.\main.c      ****         case BA_execute:
 813:.\main.c      ****             if(BA_FLAG)
 2593              		.loc 1 813 0
 2594 010c 124B     		ldr	r3, .L197+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 62


 2595 010e 1B78     		ldrb	r3, [r3]
 2596 0110 002B     		cmp	r3, #0
 2597 0112 03D0     		beq	.L190
 814:.\main.c      ****             {
 815:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2598              		.loc 1 815 0
 2599 0114 0C4B     		ldr	r3, .L197
 2600 0116 0222     		mov	r2, #2
 2601 0118 1A70     		strb	r2, [r3]
 816:.\main.c      ****             }
 817:.\main.c      ****             else
 818:.\main.c      ****             {
 819:.\main.c      ****                 baseAzimuth_state = BA_wait;
 820:.\main.c      ****             }
 821:.\main.c      ****             break;
 2602              		.loc 1 821 0
 2603 011a 0FE0     		b	.L184
 2604              	.L190:
 819:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2605              		.loc 1 819 0
 2606 011c 0A4B     		ldr	r3, .L197
 2607 011e 0322     		mov	r2, #3
 2608 0120 1A70     		strb	r2, [r3]
 2609              		.loc 1 821 0
 2610 0122 0BE0     		b	.L184
 2611              	.L189:
 822:.\main.c      ****         
 823:.\main.c      ****         case BA_wait:
 824:.\main.c      ****             if(BA_FLAG)
 2612              		.loc 1 824 0
 2613 0124 0C4B     		ldr	r3, .L197+16
 2614 0126 1B78     		ldrb	r3, [r3]
 2615 0128 002B     		cmp	r3, #0
 2616 012a 03D0     		beq	.L192
 825:.\main.c      ****             {
 826:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2617              		.loc 1 826 0
 2618 012c 064B     		ldr	r3, .L197
 2619 012e 0222     		mov	r2, #2
 2620 0130 1A70     		strb	r2, [r3]
 827:.\main.c      ****             }
 828:.\main.c      ****             else
 829:.\main.c      ****             {
 830:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 831:.\main.c      ****             }
 832:.\main.c      ****             break;
 2621              		.loc 1 832 0
 2622 0132 02E0     		b	.L196
 2623              	.L192:
 830:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2624              		.loc 1 830 0
 2625 0134 044B     		ldr	r3, .L197
 2626 0136 0322     		mov	r2, #3
 2627 0138 1A70     		strb	r2, [r3]
 2628              	.L196:
 2629              		.loc 1 832 0
 2630 013a C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 63


 2631              	.L184:
 833:.\main.c      ****     }  
 834:.\main.c      ****     return BA_arr_cspot;
 2632              		.loc 1 834 0
 2633 013c FB1D     		add	r3, r7, #7
 2634 013e 1B78     		ldrb	r3, [r3]
 835:.\main.c      **** }
 2635              		.loc 1 835 0
 2636 0140 181C     		mov	r0, r3
 2637 0142 BD46     		mov	sp, r7
 2638 0144 05B0     		add	sp, sp, #20
 2639              		@ sp needed
 2640 0146 90BD     		pop	{r4, r7, pc}
 2641              	.L198:
 2642              		.align	2
 2643              	.L197:
 2644 0148 00000000 		.word	baseAzimuth_state
 2645 014c DC050000 		.word	1500
 2646 0150 00000000 		.word	data_array
 2647 0154 E7030000 		.word	999
 2648 0158 00000000 		.word	BA_FLAG
 2649              		.cfi_endproc
 2650              	.LFE50:
 2651              		.size	baseAzimuth, .-baseAzimuth
 2652              		.section	.text.initialize,"ax",%progbits
 2653              		.align	2
 2654              		.global	initialize
 2655              		.code	16
 2656              		.thumb_func
 2657              		.type	initialize, %function
 2658              	initialize:
 2659              	.LFB51:
 836:.\main.c      **** 
 837:.\main.c      **** //Initialization function for the program
 838:.\main.c      **** void initialize()
 839:.\main.c      **** {
 2660              		.loc 1 839 0
 2661              		.cfi_startproc
 2662 0000 80B5     		push	{r7, lr}
 2663              		.cfi_def_cfa_offset 8
 2664              		.cfi_offset 7, -8
 2665              		.cfi_offset 14, -4
 2666 0002 82B0     		sub	sp, sp, #8
 2667              		.cfi_def_cfa_offset 16
 2668 0004 00AF     		add	r7, sp, #0
 2669              		.cfi_def_cfa_register 7
 840:.\main.c      ****     WIZ_RST_Write(0);
 2670              		.loc 1 840 0
 2671 0006 0020     		mov	r0, #0
 2672 0008 FFF7FEFF 		bl	WIZ_RST_Write
 841:.\main.c      ****     CyDelay(10);
 2673              		.loc 1 841 0
 2674 000c 0A20     		mov	r0, #10
 2675 000e FFF7FEFF 		bl	CyDelay
 842:.\main.c      ****     WIZ_RST_Write(1);
 2676              		.loc 1 842 0
 2677 0012 0120     		mov	r0, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 64


 2678 0014 FFF7FEFF 		bl	WIZ_RST_Write
 843:.\main.c      ****     WIZ_SS_Write(1);
 2679              		.loc 1 843 0
 2680 0018 0120     		mov	r0, #1
 2681 001a FFF7FEFF 		bl	WIZ_SS_Write
 2682              	.LBB2:
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2683              		.loc 1 844 0
 2684 001e FB1D     		add	r3, r7, #7
 2685 0020 0022     		mov	r2, #0
 2686 0022 1A70     		strb	r2, [r3]
 2687 0024 0DE0     		b	.L200
 2688              	.L203:
 845:.\main.c      ****     {
 846:.\main.c      ****         if(WIZ_RDY_Read())
 2689              		.loc 1 846 0
 2690 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 2691 002a 031C     		mov	r3, r0
 2692 002c 002B     		cmp	r3, #0
 2693 002e 00D0     		beq	.L201
 847:.\main.c      ****         {
 848:.\main.c      ****             break;
 2694              		.loc 1 848 0
 2695 0030 0BE0     		b	.L202
 2696              	.L201:
 849:.\main.c      ****         }
 850:.\main.c      ****         else
 851:.\main.c      ****         {
 852:.\main.c      ****             CyDelay(4);
 2697              		.loc 1 852 0
 2698 0032 0420     		mov	r0, #4
 2699 0034 FFF7FEFF 		bl	CyDelay
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2700              		.loc 1 844 0
 2701 0038 FB1D     		add	r3, r7, #7
 2702 003a 1A78     		ldrb	r2, [r3]
 2703 003c FB1D     		add	r3, r7, #7
 2704 003e 0132     		add	r2, r2, #1
 2705 0040 1A70     		strb	r2, [r3]
 2706              	.L200:
 844:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2707              		.loc 1 844 0 is_stmt 0 discriminator 1
 2708 0042 FB1D     		add	r3, r7, #7
 2709 0044 1B78     		ldrb	r3, [r3]
 2710 0046 632B     		cmp	r3, #99
 2711 0048 EDD9     		bls	.L203
 2712              	.L202:
 2713              	.LBE2:
 853:.\main.c      ****         }
 854:.\main.c      ****     }
 855:.\main.c      ****     
 856:.\main.c      ****     //Initialize state variables
 857:.\main.c      ****     baseAzimuth_state = BA_start;
 2714              		.loc 1 857 0 is_stmt 1
 2715 004a 234B     		ldr	r3, .L204
 2716 004c 0022     		mov	r2, #0
 2717 004e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 65


 858:.\main.c      ****     wristTilt_state = tilt_start;
 2718              		.loc 1 858 0
 2719 0050 224B     		ldr	r3, .L204+4
 2720 0052 0022     		mov	r2, #0
 2721 0054 1A70     		strb	r2, [r3]
 859:.\main.c      ****     wristRotate_state = rotate_start;
 2722              		.loc 1 859 0
 2723 0056 224B     		ldr	r3, .L204+8
 2724 0058 0022     		mov	r2, #0
 2725 005a 1A70     		strb	r2, [r3]
 860:.\main.c      ****     shoulder_state = shldr_start;
 2726              		.loc 1 860 0
 2727 005c 214B     		ldr	r3, .L204+12
 2728 005e 0022     		mov	r2, #0
 2729 0060 1A70     		strb	r2, [r3]
 861:.\main.c      ****     elbow_state = elbw_start;
 2730              		.loc 1 861 0
 2731 0062 214B     		ldr	r3, .L204+16
 2732 0064 0022     		mov	r2, #0
 2733 0066 1A70     		strb	r2, [r3]
 862:.\main.c      ****     
 863:.\main.c      ****     //start all of our components
 864:.\main.c      ****     //SPI_1_Start();
 865:.\main.c      ****     SPIM_1_Start();
 2734              		.loc 1 865 0
 2735 0068 FFF7FEFF 		bl	SPIM_1_Start
 866:.\main.c      ****     
 867:.\main.c      ****     Clock_pwm_Start();
 2736              		.loc 1 867 0
 2737 006c FFF7FEFF 		bl	Clock_pwm_Start
 868:.\main.c      ****     Clock_counter_Start();
 2738              		.loc 1 868 0
 2739 0070 FFF7FEFF 		bl	Clock_counter_Start
 869:.\main.c      ****     UART_1_Start();
 2740              		.loc 1 869 0
 2741 0074 FFF7FEFF 		bl	UART_1_Start
 870:.\main.c      ****     SHLDR_PWM_Start();
 2742              		.loc 1 870 0
 2743 0078 FFF7FEFF 		bl	SHLDR_PWM_Start
 871:.\main.c      ****     BA_PWM_Start();
 2744              		.loc 1 871 0
 2745 007c FFF7FEFF 		bl	BA_PWM_Start
 872:.\main.c      ****     ELBW_PWM_Start();
 2746              		.loc 1 872 0
 2747 0080 FFF7FEFF 		bl	ELBW_PWM_Start
 873:.\main.c      ****     
 874:.\main.c      ****     //uint8_t test_byte;
 875:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 2748              		.loc 1 875 0
 2749 0084 194B     		ldr	r3, .L204+20
 2750 0086 0420     		mov	r0, #4
 2751 0088 0121     		mov	r1, #1
 2752 008a 1A1C     		mov	r2, r3
 2753 008c FFF7FEFF 		bl	wiznetInit
 876:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
 877:.\main.c      ****     
 878:.\main.c      ****     //Initialize the dynamixels
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 66


 879:.\main.c      ****     ServoSpeed(0xFE, 100);
 2754              		.loc 1 879 0
 2755 0090 FE20     		mov	r0, #254
 2756 0092 6421     		mov	r1, #100
 2757 0094 FFF7FEFF 		bl	ServoSpeed
 880:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 2758              		.loc 1 880 0
 2759 0098 154B     		ldr	r3, .L204+24
 2760 009a FE20     		mov	r0, #254
 2761 009c 191C     		mov	r1, r3
 2762 009e FFF7FEFF 		bl	SetServoTorque
 881:.\main.c      ****     
 882:.\main.c      ****     //Initialize our motor drivers
 883:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 2763              		.loc 1 883 0
 2764 00a2 144B     		ldr	r3, .L204+28
 2765 00a4 181C     		mov	r0, r3
 2766 00a6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 884:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 2767              		.loc 1 884 0
 2768 00aa 124B     		ldr	r3, .L204+28
 2769 00ac 181C     		mov	r0, r3
 2770 00ae FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 885:.\main.c      ****     CyDelay(3000);
 2771              		.loc 1 885 0
 2772 00b2 114B     		ldr	r3, .L204+32
 2773 00b4 181C     		mov	r0, r3
 2774 00b6 FFF7FEFF 		bl	CyDelay
 886:.\main.c      ****    
 887:.\main.c      ****     ADC_Start();
 2775              		.loc 1 887 0
 2776 00ba FFF7FEFF 		bl	ADC_Start
 888:.\main.c      ****     ADC_StartConvert();
 2777              		.loc 1 888 0
 2778 00be FFF7FEFF 		bl	ADC_StartConvert
 889:.\main.c      ****     
 890:.\main.c      ****     //helps for generating random arrays
 891:.\main.c      ****     //srand((unsigned) time(&t));
 892:.\main.c      ****     
 893:.\main.c      ****     CyGlobalIntEnable;
 2779              		.loc 1 893 0
 2780              	@ 893 ".\main.c" 1
 2781 00c2 62B6     		CPSIE   i
 2782              	@ 0 "" 2
 894:.\main.c      ****     isr_1_StartEx(timer_isr);
 2783              		.loc 1 894 0
 2784              		.code	16
 2785 00c4 0D4B     		ldr	r3, .L204+36
 2786 00c6 181C     		mov	r0, r3
 2787 00c8 FFF7FEFF 		bl	isr_1_StartEx
 895:.\main.c      ****     Timer_1_Start();
 2788              		.loc 1 895 0
 2789 00cc FFF7FEFF 		bl	Timer_1_Start
 896:.\main.c      ****     
 897:.\main.c      ****     //UART_TEST_Start();
 898:.\main.c      ****     
 899:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 67


 2790              		.loc 1 899 0
 2791 00d0 BD46     		mov	sp, r7
 2792 00d2 02B0     		add	sp, sp, #8
 2793              		@ sp needed
 2794 00d4 80BD     		pop	{r7, pc}
 2795              	.L205:
 2796 00d6 C046     		.align	2
 2797              	.L204:
 2798 00d8 00000000 		.word	baseAzimuth_state
 2799 00dc 00000000 		.word	wristTilt_state
 2800 00e0 00000000 		.word	wristRotate_state
 2801 00e4 00000000 		.word	shoulder_state
 2802 00e8 00000000 		.word	elbow_state
 2803 00ec 87690000 		.word	27015
 2804 00f0 FF030000 		.word	1023
 2805 00f4 DC050000 		.word	1500
 2806 00f8 B80B0000 		.word	3000
 2807 00fc 00000000 		.word	timer_isr
 2808              		.cfi_endproc
 2809              	.LFE51:
 2810              		.size	initialize, .-initialize
 2811              		.section	.text.main,"ax",%progbits
 2812              		.align	2
 2813              		.global	main
 2814              		.code	16
 2815              		.thumb_func
 2816              		.type	main, %function
 2817              	main:
 2818              	.LFB52:
 900:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
 901:.\main.c      **** int main()
 902:.\main.c      **** {  
 2819              		.loc 1 902 0
 2820              		.cfi_startproc
 2821 0000 90B5     		push	{r4, r7, lr}
 2822              		.cfi_def_cfa_offset 12
 2823              		.cfi_offset 4, -12
 2824              		.cfi_offset 7, -8
 2825              		.cfi_offset 14, -4
 2826 0002 91B0     		sub	sp, sp, #68
 2827              		.cfi_def_cfa_offset 80
 2828 0004 00AF     		add	r7, sp, #0
 2829              		.cfi_def_cfa_register 7
 903:.\main.c      ****     //Define variables
 904:.\main.c      ****     time_t t; //for testing
 905:.\main.c      ****     char time_array[8];
 906:.\main.c      ****     uint8 counter; //for testing
 907:.\main.c      ****     int direction = 0; //for testing
 2830              		.loc 1 907 0
 2831 0006 0023     		mov	r3, #0
 2832 0008 BB63     		str	r3, [r7, #56]
 908:.\main.c      ****     
 909:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
 910:.\main.c      ****     
 911:.\main.c      ****     uint8 BA_cspot;
 912:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
 913:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 68


 914:.\main.c      ****     
 915:.\main.c      ****     
 916:.\main.c      ****     //for testing
 917:.\main.c      ****     int increasing = 1;
 2833              		.loc 1 917 0
 2834 000a 0123     		mov	r3, #1
 2835 000c 7B63     		str	r3, [r7, #52]
 918:.\main.c      ****     int first_count;
 919:.\main.c      ****     int second_count;
 920:.\main.c      ****     //uint16 dropped_packets; -- potential error variable
 921:.\main.c      ****     int temp_code_time;
 922:.\main.c      ****     int code_time = 0;
 2836              		.loc 1 922 0
 2837 000e 0023     		mov	r3, #0
 2838 0010 3B63     		str	r3, [r7, #48]
 923:.\main.c      ****     
 924:.\main.c      ****     
 925:.\main.c      ****     initialize();
 2839              		.loc 1 925 0
 2840 0012 FFF7FEFF 		bl	initialize
 2841              	.L209:
 926:.\main.c      **** //    uint8 i;
 927:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
 928:.\main.c      **** //    {
 929:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
 930:.\main.c      **** //    }
 931:.\main.c      **** 
 932:.\main.c      ****     for(;;)
 933:.\main.c      ****     {
 934:.\main.c      ****         
 935:.\main.c      ****         //UART_TEST_UartPutChar(31);
 936:.\main.c      ****         //check addresses
 937:.\main.c      ****         //TODO get the address bytes from Steve
 938:.\main.c      ****         //TODO at what point should we send feedback?
 939:.\main.c      ****         //first_count = Timer_1_ReadCounter();
 940:.\main.c      ****         
 941:.\main.c      ****         
 942:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 2842              		.loc 1 942 0
 2843 0016 FFF7FEFF 		bl	WIZ_INT_Read
 2844 001a 031C     		mov	r3, r0
 2845 001c 002B     		cmp	r3, #0
 2846 001e 12D1     		bne	.L207
 943:.\main.c      ****         {
 944:.\main.c      ****             wiznetClearInterrupts();
 2847              		.loc 1 944 0
 2848 0020 FFF7FEFF 		bl	wiznetClearInterrupts
 945:.\main.c      ****             fill_data_array();
 2849              		.loc 1 945 0
 2850 0024 FFF7FEFF 		bl	fill_data_array
 946:.\main.c      ****             BA_FLAG = 1;
 2851              		.loc 1 946 0
 2852 0028 174B     		ldr	r3, .L210
 2853 002a 0122     		mov	r2, #1
 2854 002c 1A70     		strb	r2, [r3]
 947:.\main.c      ****             WR_FLAG = 1;
 2855              		.loc 1 947 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 69


 2856 002e 174B     		ldr	r3, .L210+4
 2857 0030 0122     		mov	r2, #1
 2858 0032 1A70     		strb	r2, [r3]
 948:.\main.c      ****             WT_FLAG = 1;
 2859              		.loc 1 948 0
 2860 0034 164B     		ldr	r3, .L210+8
 2861 0036 0122     		mov	r2, #1
 2862 0038 1A70     		strb	r2, [r3]
 949:.\main.c      ****             SHOULDER_FLAG = 1;
 2863              		.loc 1 949 0
 2864 003a 164B     		ldr	r3, .L210+12
 2865 003c 0122     		mov	r2, #1
 2866 003e 1A70     		strb	r2, [r3]
 950:.\main.c      ****             ELBOW_FLAG = 1;
 2867              		.loc 1 950 0
 2868 0040 154B     		ldr	r3, .L210+16
 2869 0042 0122     		mov	r2, #1
 2870 0044 1A70     		strb	r2, [r3]
 2871              	.L207:
 951:.\main.c      ****             //wiznet = 0; //for testing
 952:.\main.c      ****         }
 953:.\main.c      ****         
 954:.\main.c      ****         
 955:.\main.c      ****         //if(wiznet gives a complete packet)
 956:.\main.c      ****         BA_cspot = baseAzimuth(BA_cspot, BA_array);
 2872              		.loc 1 956 0
 2873 0046 3C1C     		mov	r4, r7
 2874 0048 3F34     		add	r4, r4, #63
 2875 004a 3B1C     		mov	r3, r7
 2876 004c 3F33     		add	r3, r3, #63
 2877 004e 1A78     		ldrb	r2, [r3]
 2878 0050 3B1C     		mov	r3, r7
 2879 0052 101C     		mov	r0, r2
 2880 0054 191C     		mov	r1, r3
 2881 0056 FFF7FEFF 		bl	baseAzimuth
 2882 005a 031C     		mov	r3, r0
 2883 005c 2370     		strb	r3, [r4]
 957:.\main.c      ****         shoulder();
 2884              		.loc 1 957 0
 2885 005e FFF7FEFF 		bl	shoulder
 958:.\main.c      ****         elbow();
 2886              		.loc 1 958 0
 2887 0062 FFF7FEFF 		bl	elbow
 959:.\main.c      ****         wristTilt();
 2888              		.loc 1 959 0
 2889 0066 FFF7FEFF 		bl	wristTilt
 960:.\main.c      ****         wristRotate();
 2890              		.loc 1 960 0
 2891 006a FFF7FEFF 		bl	wristRotate
 961:.\main.c      ****         send_feedback();
 2892              		.loc 1 961 0
 2893 006e FFF7FEFF 		bl	send_feedback
 962:.\main.c      **** 
 963:.\main.c      ****         //else{dropped_packets++}
 964:.\main.c      ****         //second_count = Timer_1_ReadCounter();
 965:.\main.c      ****        // LED_Write(0);
 966:.\main.c      ****         //temp_code_time = second_count - first_count;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 70


 967:.\main.c      **** //        if(temp_code_time > code_time)
 968:.\main.c      **** //        {
 969:.\main.c      **** //            code_time = temp_code_time;
 970:.\main.c      **** //            itoa(code_time, time_array);
 971:.\main.c      **** //            UART_TEST_UartPutString(time_array);
 972:.\main.c      **** //        }
 973:.\main.c      ****         
 974:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 2894              		.loc 1 974 0
 2895 0072 C046     		mov	r8, r8
 2896              	.L208:
 2897              		.loc 1 974 0 is_stmt 0 discriminator 1
 2898 0074 094B     		ldr	r3, .L210+20
 2899 0076 1B78     		ldrb	r3, [r3]
 2900 0078 DBB2     		uxtb	r3, r3
 2901 007a 002B     		cmp	r3, #0
 2902 007c FAD0     		beq	.L208
 975:.\main.c      ****         timerFlag = 0;
 2903              		.loc 1 975 0 is_stmt 1
 2904 007e 074B     		ldr	r3, .L210+20
 2905 0080 0022     		mov	r2, #0
 2906 0082 1A70     		strb	r2, [r3]
 976:.\main.c      ****     
 977:.\main.c      ****         
 978:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
 979:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
 980:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
 981:.\main.c      **** //        counter++;
 982:.\main.c      **** //        
 983:.\main.c      **** //        if(counter == 50)
 984:.\main.c      **** //        {
 985:.\main.c      **** //        
 986:.\main.c      **** //            if(increasing)
 987:.\main.c      **** //            {
 988:.\main.c      **** //                temp_val += 100;
 989:.\main.c      **** //                if(temp_val == 1000)
 990:.\main.c      **** //                {
 991:.\main.c      **** //                    increasing = 0;
 992:.\main.c      **** //                }
 993:.\main.c      **** //            }
 994:.\main.c      **** //            else
 995:.\main.c      **** //            {
 996:.\main.c      **** //                temp_val -= 100;
 997:.\main.c      **** //                if(temp_val == -1000)
 998:.\main.c      **** //                {
 999:.\main.c      **** //                    increasing = 1;   
1000:.\main.c      **** //                }
1001:.\main.c      **** //            }
1002:.\main.c      **** //            
1003:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1004:.\main.c      **** //            //int16 forward = 1000;
1005:.\main.c      **** //            //int16 backward = -1000;
1006:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1007:.\main.c      **** //            {
1008:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1009:.\main.c      **** //                //test_array[i] = random_number >> 8;
1010:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 71


1011:.\main.c      **** //                test_array[i] = temp_val >> 8;
1012:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1013:.\main.c      **** //            }
1014:.\main.c      **** ////            counter = 0;
1015:.\main.c      **** //            wiznet = 1;
1016:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 2907              		.loc 1 1016 0
 2908 0084 C7E7     		b	.L209
 2909              	.L211:
 2910 0086 C046     		.align	2
 2911              	.L210:
 2912 0088 00000000 		.word	BA_FLAG
 2913 008c 00000000 		.word	WR_FLAG
 2914 0090 00000000 		.word	WT_FLAG
 2915 0094 00000000 		.word	SHOULDER_FLAG
 2916 0098 00000000 		.word	ELBOW_FLAG
 2917 009c 00000000 		.word	timerFlag
 2918              		.cfi_endproc
 2919              	.LFE52:
 2920              		.size	main, .-main
 2921              		.text
 2922              	.Letext0:
 2923              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 2924              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 2925              		.file 4 ".\\main.h"
 2926              		.section	.debug_info,"",%progbits
 2927              	.Ldebug_info0:
 2928 0000 D3080000 		.4byte	0x8d3
 2929 0004 0400     		.2byte	0x4
 2930 0006 00000000 		.4byte	.Ldebug_abbrev0
 2931 000a 04       		.byte	0x4
 2932 000b 01       		.uleb128 0x1
 2933 000c D7040000 		.4byte	.LASF125
 2934 0010 01       		.byte	0x1
 2935 0011 24060000 		.4byte	.LASF126
 2936 0015 B9000000 		.4byte	.LASF127
 2937 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2938 001d 00000000 		.4byte	0
 2939 0021 00000000 		.4byte	.Ldebug_line0
 2940 0025 02       		.uleb128 0x2
 2941 0026 01       		.byte	0x1
 2942 0027 06       		.byte	0x6
 2943 0028 87050000 		.4byte	.LASF0
 2944 002c 02       		.uleb128 0x2
 2945 002d 01       		.byte	0x1
 2946 002e 08       		.byte	0x8
 2947 002f 7C040000 		.4byte	.LASF1
 2948 0033 02       		.uleb128 0x2
 2949 0034 02       		.byte	0x2
 2950 0035 05       		.byte	0x5
 2951 0036 62030000 		.4byte	.LASF2
 2952 003a 02       		.uleb128 0x2
 2953 003b 02       		.byte	0x2
 2954 003c 07       		.byte	0x7
 2955 003d 9B050000 		.4byte	.LASF3
 2956 0041 02       		.uleb128 0x2
 2957 0042 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 72


 2958 0043 05       		.byte	0x5
 2959 0044 87030000 		.4byte	.LASF4
 2960 0048 02       		.uleb128 0x2
 2961 0049 04       		.byte	0x4
 2962 004a 07       		.byte	0x7
 2963 004b 20040000 		.4byte	.LASF5
 2964 004f 02       		.uleb128 0x2
 2965 0050 08       		.byte	0x8
 2966 0051 05       		.byte	0x5
 2967 0052 73020000 		.4byte	.LASF6
 2968 0056 02       		.uleb128 0x2
 2969 0057 08       		.byte	0x8
 2970 0058 07       		.byte	0x7
 2971 0059 70010000 		.4byte	.LASF7
 2972 005d 03       		.uleb128 0x3
 2973 005e 04       		.byte	0x4
 2974 005f 05       		.byte	0x5
 2975 0060 696E7400 		.ascii	"int\000"
 2976 0064 02       		.uleb128 0x2
 2977 0065 04       		.byte	0x4
 2978 0066 07       		.byte	0x7
 2979 0067 5D000000 		.4byte	.LASF8
 2980 006b 04       		.uleb128 0x4
 2981 006c D9050000 		.4byte	.LASF9
 2982 0070 02       		.byte	0x2
 2983 0071 A1       		.byte	0xa1
 2984 0072 2C000000 		.4byte	0x2c
 2985 0076 04       		.uleb128 0x4
 2986 0077 3D020000 		.4byte	.LASF10
 2987 007b 02       		.byte	0x2
 2988 007c A2       		.byte	0xa2
 2989 007d 3A000000 		.4byte	0x3a
 2990 0081 04       		.uleb128 0x4
 2991 0082 AE020000 		.4byte	.LASF11
 2992 0086 02       		.byte	0x2
 2993 0087 A3       		.byte	0xa3
 2994 0088 48000000 		.4byte	0x48
 2995 008c 04       		.uleb128 0x4
 2996 008d 4B020000 		.4byte	.LASF12
 2997 0091 02       		.byte	0x2
 2998 0092 A4       		.byte	0xa4
 2999 0093 25000000 		.4byte	0x25
 3000 0097 04       		.uleb128 0x4
 3001 0098 7D000000 		.4byte	.LASF13
 3002 009c 02       		.byte	0x2
 3003 009d A5       		.byte	0xa5
 3004 009e 33000000 		.4byte	0x33
 3005 00a2 02       		.uleb128 0x2
 3006 00a3 04       		.byte	0x4
 3007 00a4 04       		.byte	0x4
 3008 00a5 5C010000 		.4byte	.LASF14
 3009 00a9 02       		.uleb128 0x2
 3010 00aa 08       		.byte	0x8
 3011 00ab 04       		.byte	0x4
 3012 00ac DF050000 		.4byte	.LASF15
 3013 00b0 02       		.uleb128 0x2
 3014 00b1 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 73


 3015 00b2 08       		.byte	0x8
 3016 00b3 30020000 		.4byte	.LASF16
 3017 00b7 05       		.uleb128 0x5
 3018 00b8 6B000000 		.4byte	0x6b
 3019 00bc 02       		.uleb128 0x2
 3020 00bd 04       		.byte	0x4
 3021 00be 07       		.byte	0x7
 3022 00bf 17040000 		.4byte	.LASF17
 3023 00c3 06       		.uleb128 0x6
 3024 00c4 B0000000 		.4byte	0xb0
 3025 00c8 D3000000 		.4byte	0xd3
 3026 00cc 07       		.uleb128 0x7
 3027 00cd BC000000 		.4byte	0xbc
 3028 00d1 07       		.byte	0x7
 3029 00d2 00       		.byte	0
 3030 00d3 04       		.uleb128 0x4
 3031 00d4 61020000 		.4byte	.LASF18
 3032 00d8 03       		.byte	0x3
 3033 00d9 7A       		.byte	0x7a
 3034 00da 41000000 		.4byte	0x41
 3035 00de 08       		.uleb128 0x8
 3036 00df CB030000 		.4byte	.LASF24
 3037 00e3 01       		.byte	0x1
 3038 00e4 01       		.byte	0x1
 3039 00e5 0101     		.2byte	0x101
 3040 00e7 0A010000 		.4byte	0x10a
 3041 00eb 09       		.uleb128 0x9
 3042 00ec 3A010000 		.4byte	.LASF19
 3043 00f0 00       		.sleb128 0
 3044 00f1 09       		.uleb128 0x9
 3045 00f2 0C000000 		.4byte	.LASF20
 3046 00f6 01       		.sleb128 1
 3047 00f7 09       		.uleb128 0x9
 3048 00f8 90030000 		.4byte	.LASF21
 3049 00fc 02       		.sleb128 2
 3050 00fd 09       		.uleb128 0x9
 3051 00fe C6050000 		.4byte	.LASF22
 3052 0102 03       		.sleb128 3
 3053 0103 09       		.uleb128 0x9
 3054 0104 F0030000 		.4byte	.LASF23
 3055 0108 04       		.sleb128 4
 3056 0109 00       		.byte	0
 3057 010a 08       		.uleb128 0x8
 3058 010b 96020000 		.4byte	.LASF25
 3059 010f 01       		.byte	0x1
 3060 0110 01       		.byte	0x1
 3061 0111 6801     		.2byte	0x168
 3062 0113 36010000 		.4byte	0x136
 3063 0117 09       		.uleb128 0x9
 3064 0118 18010000 		.4byte	.LASF26
 3065 011c 00       		.sleb128 0
 3066 011d 09       		.uleb128 0x9
 3067 011e CB040000 		.4byte	.LASF27
 3068 0122 01       		.sleb128 1
 3069 0123 09       		.uleb128 0x9
 3070 0124 53030000 		.4byte	.LASF28
 3071 0128 02       		.sleb128 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 74


 3072 0129 09       		.uleb128 0x9
 3073 012a 4C040000 		.4byte	.LASF29
 3074 012e 03       		.sleb128 3
 3075 012f 09       		.uleb128 0x9
 3076 0130 16000000 		.4byte	.LASF30
 3077 0134 04       		.sleb128 4
 3078 0135 00       		.byte	0
 3079 0136 08       		.uleb128 0x8
 3080 0137 47000000 		.4byte	.LASF31
 3081 013b 01       		.byte	0x1
 3082 013c 01       		.byte	0x1
 3083 013d D201     		.2byte	0x1d2
 3084 013f 5C010000 		.4byte	0x15c
 3085 0143 09       		.uleb128 0x9
 3086 0144 E2020000 		.4byte	.LASF32
 3087 0148 00       		.sleb128 0
 3088 0149 09       		.uleb128 0x9
 3089 014a 2D060000 		.4byte	.LASF33
 3090 014e 01       		.sleb128 1
 3091 014f 09       		.uleb128 0x9
 3092 0150 32040000 		.4byte	.LASF34
 3093 0154 02       		.sleb128 2
 3094 0155 09       		.uleb128 0x9
 3095 0156 AE050000 		.4byte	.LASF35
 3096 015a 03       		.sleb128 3
 3097 015b 00       		.byte	0
 3098 015c 08       		.uleb128 0x8
 3099 015d 81020000 		.4byte	.LASF36
 3100 0161 01       		.byte	0x1
 3101 0162 01       		.byte	0x1
 3102 0163 5A02     		.2byte	0x25a
 3103 0165 82010000 		.4byte	0x182
 3104 0169 09       		.uleb128 0x9
 3105 016a 65040000 		.4byte	.LASF37
 3106 016e 00       		.sleb128 0
 3107 016f 09       		.uleb128 0x9
 3108 0170 68020000 		.4byte	.LASF38
 3109 0174 01       		.sleb128 1
 3110 0175 09       		.uleb128 0x9
 3111 0176 BD040000 		.4byte	.LASF39
 3112 017a 02       		.sleb128 2
 3113 017b 09       		.uleb128 0x9
 3114 017c 0A020000 		.4byte	.LASF40
 3115 0180 03       		.sleb128 3
 3116 0181 00       		.byte	0
 3117 0182 08       		.uleb128 0x8
 3118 0183 6A000000 		.4byte	.LASF41
 3119 0187 01       		.byte	0x1
 3120 0188 01       		.byte	0x1
 3121 0189 E102     		.2byte	0x2e1
 3122 018b A8010000 		.4byte	0x1a8
 3123 018f 09       		.uleb128 0x9
 3124 0190 83000000 		.4byte	.LASF42
 3125 0194 00       		.sleb128 0
 3126 0195 09       		.uleb128 0x9
 3127 0196 62010000 		.4byte	.LASF43
 3128 019a 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 75


 3129 019b 09       		.uleb128 0x9
 3130 019c 3C000000 		.4byte	.LASF44
 3131 01a0 02       		.sleb128 2
 3132 01a1 09       		.uleb128 0x9
 3133 01a2 B9030000 		.4byte	.LASF45
 3134 01a6 03       		.sleb128 3
 3135 01a7 00       		.byte	0
 3136 01a8 0A       		.uleb128 0xa
 3137 01a9 9D030000 		.4byte	.LASF75
 3138 01ad 01       		.byte	0x1
 3139 01ae 0A       		.byte	0xa
 3140 01af 00000000 		.4byte	.LFB34
 3141 01b3 28000000 		.4byte	.LFE34-.LFB34
 3142 01b7 01       		.uleb128 0x1
 3143 01b8 9C       		.byte	0x9c
 3144 01b9 CC010000 		.4byte	0x1cc
 3145 01bd 0B       		.uleb128 0xb
 3146 01be F9050000 		.4byte	.LASF48
 3147 01c2 01       		.byte	0x1
 3148 01c3 0C       		.byte	0xc
 3149 01c4 81000000 		.4byte	0x81
 3150 01c8 02       		.uleb128 0x2
 3151 01c9 91       		.byte	0x91
 3152 01ca 74       		.sleb128 -12
 3153 01cb 00       		.byte	0
 3154 01cc 0C       		.uleb128 0xc
 3155 01cd 93050000 		.4byte	.LASF49
 3156 01d1 01       		.byte	0x1
 3157 01d2 32       		.byte	0x32
 3158 01d3 76000000 		.4byte	0x76
 3159 01d7 00000000 		.4byte	.LFB35
 3160 01db 78000000 		.4byte	.LFE35-.LFB35
 3161 01df 01       		.uleb128 0x1
 3162 01e0 9C       		.byte	0x9c
 3163 01e1 2A020000 		.4byte	0x22a
 3164 01e5 0D       		.uleb128 0xd
 3165 01e6 7E030000 		.4byte	.LASF46
 3166 01ea 01       		.byte	0x1
 3167 01eb 32       		.byte	0x32
 3168 01ec 2A020000 		.4byte	0x22a
 3169 01f0 02       		.uleb128 0x2
 3170 01f1 91       		.byte	0x91
 3171 01f2 64       		.sleb128 -28
 3172 01f3 0D       		.uleb128 0xd
 3173 01f4 26000000 		.4byte	.LASF47
 3174 01f8 01       		.byte	0x1
 3175 01f9 32       		.byte	0x32
 3176 01fa 6B000000 		.4byte	0x6b
 3177 01fe 02       		.uleb128 0x2
 3178 01ff 91       		.byte	0x91
 3179 0200 63       		.sleb128 -29
 3180 0201 0E       		.uleb128 0xe
 3181 0202 6900     		.ascii	"i\000"
 3182 0204 01       		.byte	0x1
 3183 0205 34       		.byte	0x34
 3184 0206 6B000000 		.4byte	0x6b
 3185 020a 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 76


 3186 020b 91       		.byte	0x91
 3187 020c 77       		.sleb128 -9
 3188 020d 0E       		.uleb128 0xe
 3189 020e 73756D00 		.ascii	"sum\000"
 3190 0212 01       		.byte	0x1
 3191 0213 35       		.byte	0x35
 3192 0214 81000000 		.4byte	0x81
 3193 0218 02       		.uleb128 0x2
 3194 0219 91       		.byte	0x91
 3195 021a 70       		.sleb128 -16
 3196 021b 0E       		.uleb128 0xe
 3197 021c 61766700 		.ascii	"avg\000"
 3198 0220 01       		.byte	0x1
 3199 0221 36       		.byte	0x36
 3200 0222 76000000 		.4byte	0x76
 3201 0226 02       		.uleb128 0x2
 3202 0227 91       		.byte	0x91
 3203 0228 6E       		.sleb128 -18
 3204 0229 00       		.byte	0
 3205 022a 0F       		.uleb128 0xf
 3206 022b 04       		.byte	0x4
 3207 022c 76000000 		.4byte	0x76
 3208 0230 10       		.uleb128 0x10
 3209 0231 9B000000 		.4byte	.LASF50
 3210 0235 01       		.byte	0x1
 3211 0236 42       		.byte	0x42
 3212 0237 6B000000 		.4byte	0x6b
 3213 023b 00000000 		.4byte	.LFB36
 3214 023f 3E000000 		.4byte	.LFE36-.LFB36
 3215 0243 01       		.uleb128 0x1
 3216 0244 9C       		.byte	0x9c
 3217 0245 66020000 		.4byte	0x266
 3218 0249 0D       		.uleb128 0xd
 3219 024a 91020000 		.4byte	.LASF51
 3220 024e 01       		.byte	0x1
 3221 024f 42       		.byte	0x42
 3222 0250 6B000000 		.4byte	0x6b
 3223 0254 02       		.uleb128 0x2
 3224 0255 91       		.byte	0x91
 3225 0256 77       		.sleb128 -9
 3226 0257 0D       		.uleb128 0xd
 3227 0258 05020000 		.4byte	.LASF52
 3228 025c 01       		.byte	0x1
 3229 025d 42       		.byte	0x42
 3230 025e 6B000000 		.4byte	0x6b
 3231 0262 02       		.uleb128 0x2
 3232 0263 91       		.byte	0x91
 3233 0264 76       		.sleb128 -10
 3234 0265 00       		.byte	0
 3235 0266 0C       		.uleb128 0xc
 3236 0267 E3030000 		.4byte	.LASF53
 3237 026b 01       		.byte	0x1
 3238 026c 4F       		.byte	0x4f
 3239 026d 6B000000 		.4byte	0x6b
 3240 0271 00000000 		.4byte	.LFB37
 3241 0275 0C010000 		.4byte	.LFE37-.LFB37
 3242 0279 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 77


 3243 027a 9C       		.byte	0x9c
 3244 027b C6020000 		.4byte	0x2c6
 3245 027f 0D       		.uleb128 0xd
 3246 0280 FD020000 		.4byte	.LASF54
 3247 0284 01       		.byte	0x1
 3248 0285 4F       		.byte	0x4f
 3249 0286 2A020000 		.4byte	0x22a
 3250 028a 02       		.uleb128 0x2
 3251 028b 91       		.byte	0x91
 3252 028c 6C       		.sleb128 -20
 3253 028d 0D       		.uleb128 0xd
 3254 028e 35020000 		.4byte	.LASF55
 3255 0292 01       		.byte	0x1
 3256 0293 4F       		.byte	0x4f
 3257 0294 6B000000 		.4byte	0x6b
 3258 0298 02       		.uleb128 0x2
 3259 0299 91       		.byte	0x91
 3260 029a 6B       		.sleb128 -21
 3261 029b 0D       		.uleb128 0xd
 3262 029c A9020000 		.4byte	.LASF56
 3263 02a0 01       		.byte	0x1
 3264 02a1 4F       		.byte	0x4f
 3265 02a2 6B000000 		.4byte	0x6b
 3266 02a6 02       		.uleb128 0x2
 3267 02a7 91       		.byte	0x91
 3268 02a8 6A       		.sleb128 -22
 3269 02a9 0D       		.uleb128 0xd
 3270 02aa 20030000 		.4byte	.LASF57
 3271 02ae 01       		.byte	0x1
 3272 02af 4F       		.byte	0x4f
 3273 02b0 5D000000 		.4byte	0x5d
 3274 02b4 02       		.uleb128 0x2
 3275 02b5 91       		.byte	0x91
 3276 02b6 64       		.sleb128 -28
 3277 02b7 0B       		.uleb128 0xb
 3278 02b8 6A010000 		.4byte	.LASF58
 3279 02bc 01       		.byte	0x1
 3280 02bd 51       		.byte	0x51
 3281 02be 6B000000 		.4byte	0x6b
 3282 02c2 02       		.uleb128 0x2
 3283 02c3 91       		.byte	0x91
 3284 02c4 77       		.sleb128 -9
 3285 02c5 00       		.byte	0
 3286 02c6 0C       		.uleb128 0xc
 3287 02c7 45010000 		.4byte	.LASF59
 3288 02cb 01       		.byte	0x1
 3289 02cc 75       		.byte	0x75
 3290 02cd 6B000000 		.4byte	0x6b
 3291 02d1 00000000 		.4byte	.LFB38
 3292 02d5 0C020000 		.4byte	.LFE38-.LFB38
 3293 02d9 01       		.uleb128 0x1
 3294 02da 9C       		.byte	0x9c
 3295 02db 18030000 		.4byte	0x318
 3296 02df 0D       		.uleb128 0xd
 3297 02e0 20020000 		.4byte	.LASF60
 3298 02e4 01       		.byte	0x1
 3299 02e5 75       		.byte	0x75
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 78


 3300 02e6 6B000000 		.4byte	0x6b
 3301 02ea 02       		.uleb128 0x2
 3302 02eb 91       		.byte	0x91
 3303 02ec 6F       		.sleb128 -17
 3304 02ed 0D       		.uleb128 0xd
 3305 02ee FD020000 		.4byte	.LASF54
 3306 02f2 01       		.byte	0x1
 3307 02f3 75       		.byte	0x75
 3308 02f4 2A020000 		.4byte	0x22a
 3309 02f8 02       		.uleb128 0x2
 3310 02f9 91       		.byte	0x91
 3311 02fa 68       		.sleb128 -24
 3312 02fb 0D       		.uleb128 0xd
 3313 02fc 3B030000 		.4byte	.LASF61
 3314 0300 01       		.byte	0x1
 3315 0301 75       		.byte	0x75
 3316 0302 6B000000 		.4byte	0x6b
 3317 0306 02       		.uleb128 0x2
 3318 0307 91       		.byte	0x91
 3319 0308 6E       		.sleb128 -18
 3320 0309 0D       		.uleb128 0xd
 3321 030a 5E050000 		.4byte	.LASF62
 3322 030e 01       		.byte	0x1
 3323 030f 75       		.byte	0x75
 3324 0310 76000000 		.4byte	0x76
 3325 0314 02       		.uleb128 0x2
 3326 0315 91       		.byte	0x91
 3327 0316 6C       		.sleb128 -20
 3328 0317 00       		.byte	0
 3329 0318 10       		.uleb128 0x10
 3330 0319 BD020000 		.4byte	.LASF63
 3331 031d 01       		.byte	0x1
 3332 031e A3       		.byte	0xa3
 3333 031f 76000000 		.4byte	0x76
 3334 0323 00000000 		.4byte	.LFB39
 3335 0327 84000000 		.4byte	.LFE39-.LFB39
 3336 032b 01       		.uleb128 0x1
 3337 032c 9C       		.byte	0x9c
 3338 032d 94030000 		.4byte	0x394
 3339 0331 0D       		.uleb128 0xd
 3340 0332 71040000 		.4byte	.LASF64
 3341 0336 01       		.byte	0x1
 3342 0337 A3       		.byte	0xa3
 3343 0338 94030000 		.4byte	0x394
 3344 033c 02       		.uleb128 0x2
 3345 033d 91       		.byte	0x91
 3346 033e 6C       		.sleb128 -20
 3347 033f 0D       		.uleb128 0xd
 3348 0340 AC010000 		.4byte	.LASF65
 3349 0344 01       		.byte	0x1
 3350 0345 A3       		.byte	0xa3
 3351 0346 6B000000 		.4byte	0x6b
 3352 034a 02       		.uleb128 0x2
 3353 034b 91       		.byte	0x91
 3354 034c 6B       		.sleb128 -21
 3355 034d 0D       		.uleb128 0xd
 3356 034e B2010000 		.4byte	.LASF66
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 79


 3357 0352 01       		.byte	0x1
 3358 0353 A3       		.byte	0xa3
 3359 0354 6B000000 		.4byte	0x6b
 3360 0358 02       		.uleb128 0x2
 3361 0359 91       		.byte	0x91
 3362 035a 6A       		.sleb128 -22
 3363 035b 0B       		.uleb128 0xb
 3364 035c 5E050000 		.4byte	.LASF62
 3365 0360 01       		.byte	0x1
 3366 0361 A5       		.byte	0xa5
 3367 0362 76000000 		.4byte	0x76
 3368 0366 02       		.uleb128 0x2
 3369 0367 91       		.byte	0x91
 3370 0368 70       		.sleb128 -16
 3371 0369 0B       		.uleb128 0xb
 3372 036a C0010000 		.4byte	.LASF67
 3373 036e 01       		.byte	0x1
 3374 036f A6       		.byte	0xa6
 3375 0370 97000000 		.4byte	0x97
 3376 0374 02       		.uleb128 0x2
 3377 0375 91       		.byte	0x91
 3378 0376 76       		.sleb128 -10
 3379 0377 0B       		.uleb128 0xb
 3380 0378 C6010000 		.4byte	.LASF68
 3381 037c 01       		.byte	0x1
 3382 037d A7       		.byte	0xa7
 3383 037e 97000000 		.4byte	0x97
 3384 0382 02       		.uleb128 0x2
 3385 0383 91       		.byte	0x91
 3386 0384 74       		.sleb128 -12
 3387 0385 0B       		.uleb128 0xb
 3388 0386 CC010000 		.4byte	.LASF69
 3389 038a 01       		.byte	0x1
 3390 038b A8       		.byte	0xa8
 3391 038c 97000000 		.4byte	0x97
 3392 0390 02       		.uleb128 0x2
 3393 0391 91       		.byte	0x91
 3394 0392 72       		.sleb128 -14
 3395 0393 00       		.byte	0
 3396 0394 0F       		.uleb128 0xf
 3397 0395 04       		.byte	0x4
 3398 0396 8C000000 		.4byte	0x8c
 3399 039a 10       		.uleb128 0x10
 3400 039b 2F030000 		.4byte	.LASF70
 3401 039f 01       		.byte	0x1
 3402 03a0 B1       		.byte	0xb1
 3403 03a1 76000000 		.4byte	0x76
 3404 03a5 00000000 		.4byte	.LFB40
 3405 03a9 20000000 		.4byte	.LFE40-.LFB40
 3406 03ad 01       		.uleb128 0x1
 3407 03ae 9C       		.byte	0x9c
 3408 03af D0030000 		.4byte	0x3d0
 3409 03b3 0D       		.uleb128 0xd
 3410 03b4 27030000 		.4byte	.LASF71
 3411 03b8 01       		.byte	0x1
 3412 03b9 B1       		.byte	0xb1
 3413 03ba 81000000 		.4byte	0x81
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 80


 3414 03be 02       		.uleb128 0x2
 3415 03bf 91       		.byte	0x91
 3416 03c0 6C       		.sleb128 -20
 3417 03c1 0B       		.uleb128 0xb
 3418 03c2 50020000 		.4byte	.LASF72
 3419 03c6 01       		.byte	0x1
 3420 03c7 B5       		.byte	0xb5
 3421 03c8 76000000 		.4byte	0x76
 3422 03cc 02       		.uleb128 0x2
 3423 03cd 91       		.byte	0x91
 3424 03ce 76       		.sleb128 -10
 3425 03cf 00       		.byte	0
 3426 03d0 11       		.uleb128 0x11
 3427 03d1 09040000 		.4byte	.LASF73
 3428 03d5 01       		.byte	0x1
 3429 03d6 B9       		.byte	0xb9
 3430 03d7 00000000 		.4byte	.LFB41
 3431 03db 08000000 		.4byte	.LFE41-.LFB41
 3432 03df 01       		.uleb128 0x1
 3433 03e0 9C       		.byte	0x9c
 3434 03e1 12       		.uleb128 0x12
 3435 03e2 8A040000 		.4byte	.LASF74
 3436 03e6 01       		.byte	0x1
 3437 03e7 C2       		.byte	0xc2
 3438 03e8 00000000 		.4byte	.LFB42
 3439 03ec 18000000 		.4byte	.LFE42-.LFB42
 3440 03f0 01       		.uleb128 0x1
 3441 03f1 9C       		.byte	0x9c
 3442 03f2 0A       		.uleb128 0xa
 3443 03f3 87010000 		.4byte	.LASF76
 3444 03f7 01       		.byte	0x1
 3445 03f8 CC       		.byte	0xcc
 3446 03f9 00000000 		.4byte	.LFB43
 3447 03fd 98000000 		.4byte	.LFE43-.LFB43
 3448 0401 01       		.uleb128 0x1
 3449 0402 9C       		.byte	0x9c
 3450 0403 32040000 		.4byte	0x432
 3451 0407 0D       		.uleb128 0xd
 3452 0408 F1050000 		.4byte	.LASF77
 3453 040c 01       		.byte	0x1
 3454 040d CC       		.byte	0xcc
 3455 040e 6B000000 		.4byte	0x6b
 3456 0412 02       		.uleb128 0x2
 3457 0413 91       		.byte	0x91
 3458 0414 67       		.sleb128 -25
 3459 0415 0D       		.uleb128 0xd
 3460 0416 1B060000 		.4byte	.LASF78
 3461 041a 01       		.byte	0x1
 3462 041b CC       		.byte	0xcc
 3463 041c 76000000 		.4byte	0x76
 3464 0420 02       		.uleb128 0x2
 3465 0421 91       		.byte	0x91
 3466 0422 64       		.sleb128 -28
 3467 0423 0B       		.uleb128 0xb
 3468 0424 FD020000 		.4byte	.LASF54
 3469 0428 01       		.byte	0x1
 3470 0429 CE       		.byte	0xce
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 81


 3471 042a 32040000 		.4byte	0x432
 3472 042e 02       		.uleb128 0x2
 3473 042f 91       		.byte	0x91
 3474 0430 6C       		.sleb128 -20
 3475 0431 00       		.byte	0
 3476 0432 06       		.uleb128 0x6
 3477 0433 6B000000 		.4byte	0x6b
 3478 0437 42040000 		.4byte	0x442
 3479 043b 07       		.uleb128 0x7
 3480 043c BC000000 		.4byte	0xbc
 3481 0440 08       		.byte	0x8
 3482 0441 00       		.byte	0
 3483 0442 0A       		.uleb128 0xa
 3484 0443 0C060000 		.4byte	.LASF79
 3485 0447 01       		.byte	0x1
 3486 0448 DD       		.byte	0xdd
 3487 0449 00000000 		.4byte	.LFB44
 3488 044d 98000000 		.4byte	.LFE44-.LFB44
 3489 0451 01       		.uleb128 0x1
 3490 0452 9C       		.byte	0x9c
 3491 0453 82040000 		.4byte	0x482
 3492 0457 0D       		.uleb128 0xd
 3493 0458 F1050000 		.4byte	.LASF77
 3494 045c 01       		.byte	0x1
 3495 045d DD       		.byte	0xdd
 3496 045e 6B000000 		.4byte	0x6b
 3497 0462 02       		.uleb128 0x2
 3498 0463 91       		.byte	0x91
 3499 0464 67       		.sleb128 -25
 3500 0465 0D       		.uleb128 0xd
 3501 0466 44020000 		.4byte	.LASF80
 3502 046a 01       		.byte	0x1
 3503 046b DD       		.byte	0xdd
 3504 046c 76000000 		.4byte	0x76
 3505 0470 02       		.uleb128 0x2
 3506 0471 91       		.byte	0x91
 3507 0472 64       		.sleb128 -28
 3508 0473 0B       		.uleb128 0xb
 3509 0474 FD020000 		.4byte	.LASF54
 3510 0478 01       		.byte	0x1
 3511 0479 DF       		.byte	0xdf
 3512 047a 32040000 		.4byte	0x432
 3513 047e 02       		.uleb128 0x2
 3514 047f 91       		.byte	0x91
 3515 0480 6C       		.sleb128 -20
 3516 0481 00       		.byte	0
 3517 0482 0A       		.uleb128 0xa
 3518 0483 FE030000 		.4byte	.LASF81
 3519 0487 01       		.byte	0x1
 3520 0488 EF       		.byte	0xef
 3521 0489 00000000 		.4byte	.LFB45
 3522 048d 98000000 		.4byte	.LFE45-.LFB45
 3523 0491 01       		.uleb128 0x1
 3524 0492 9C       		.byte	0x9c
 3525 0493 C2040000 		.4byte	0x4c2
 3526 0497 0D       		.uleb128 0xd
 3527 0498 F1050000 		.4byte	.LASF77
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 82


 3528 049c 01       		.byte	0x1
 3529 049d EF       		.byte	0xef
 3530 049e 6B000000 		.4byte	0x6b
 3531 04a2 02       		.uleb128 0x2
 3532 04a3 91       		.byte	0x91
 3533 04a4 67       		.sleb128 -25
 3534 04a5 0D       		.uleb128 0xd
 3535 04a6 25010000 		.4byte	.LASF82
 3536 04aa 01       		.byte	0x1
 3537 04ab EF       		.byte	0xef
 3538 04ac 76000000 		.4byte	0x76
 3539 04b0 02       		.uleb128 0x2
 3540 04b1 91       		.byte	0x91
 3541 04b2 64       		.sleb128 -28
 3542 04b3 0B       		.uleb128 0xb
 3543 04b4 FD020000 		.4byte	.LASF54
 3544 04b8 01       		.byte	0x1
 3545 04b9 F1       		.byte	0xf1
 3546 04ba 32040000 		.4byte	0x432
 3547 04be 02       		.uleb128 0x2
 3548 04bf 91       		.byte	0x91
 3549 04c0 6C       		.sleb128 -20
 3550 04c1 00       		.byte	0
 3551 04c2 13       		.uleb128 0x13
 3552 04c3 CA020000 		.4byte	.LASF83
 3553 04c7 01       		.byte	0x1
 3554 04c8 0301     		.2byte	0x103
 3555 04ca 00000000 		.4byte	.LFB46
 3556 04ce 50010000 		.4byte	.LFE46-.LFB46
 3557 04d2 01       		.uleb128 0x1
 3558 04d3 9C       		.byte	0x9c
 3559 04d4 04050000 		.4byte	0x504
 3560 04d8 14       		.uleb128 0x14
 3561 04d9 6900     		.ascii	"i\000"
 3562 04db 01       		.byte	0x1
 3563 04dc 1301     		.2byte	0x113
 3564 04de 6B000000 		.4byte	0x6b
 3565 04e2 02       		.uleb128 0x2
 3566 04e3 91       		.byte	0x91
 3567 04e4 6F       		.sleb128 -17
 3568 04e5 14       		.uleb128 0x14
 3569 04e6 61766700 		.ascii	"avg\000"
 3570 04ea 01       		.byte	0x1
 3571 04eb 1401     		.2byte	0x114
 3572 04ed 76000000 		.4byte	0x76
 3573 04f1 02       		.uleb128 0x2
 3574 04f2 91       		.byte	0x91
 3575 04f3 6A       		.sleb128 -22
 3576 04f4 15       		.uleb128 0x15
 3577 04f5 5E050000 		.4byte	.LASF62
 3578 04f9 01       		.byte	0x1
 3579 04fa 1501     		.2byte	0x115
 3580 04fc 76000000 		.4byte	0x76
 3581 0500 02       		.uleb128 0x2
 3582 0501 91       		.byte	0x91
 3583 0502 6C       		.sleb128 -20
 3584 0503 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 83


 3585 0504 13       		.uleb128 0x13
 3586 0505 9A040000 		.4byte	.LASF84
 3587 0509 01       		.byte	0x1
 3588 050a 6A01     		.2byte	0x16a
 3589 050c 00000000 		.4byte	.LFB47
 3590 0510 50010000 		.4byte	.LFE47-.LFB47
 3591 0514 01       		.uleb128 0x1
 3592 0515 9C       		.byte	0x9c
 3593 0516 46050000 		.4byte	0x546
 3594 051a 14       		.uleb128 0x14
 3595 051b 6900     		.ascii	"i\000"
 3596 051d 01       		.byte	0x1
 3597 051e 7A01     		.2byte	0x17a
 3598 0520 6B000000 		.4byte	0x6b
 3599 0524 02       		.uleb128 0x2
 3600 0525 91       		.byte	0x91
 3601 0526 6F       		.sleb128 -17
 3602 0527 14       		.uleb128 0x14
 3603 0528 61766700 		.ascii	"avg\000"
 3604 052c 01       		.byte	0x1
 3605 052d 7B01     		.2byte	0x17b
 3606 052f 76000000 		.4byte	0x76
 3607 0533 02       		.uleb128 0x2
 3608 0534 91       		.byte	0x91
 3609 0535 6A       		.sleb128 -22
 3610 0536 15       		.uleb128 0x15
 3611 0537 5E050000 		.4byte	.LASF62
 3612 053b 01       		.byte	0x1
 3613 053c 7C01     		.2byte	0x17c
 3614 053e 76000000 		.4byte	0x76
 3615 0542 02       		.uleb128 0x2
 3616 0543 91       		.byte	0x91
 3617 0544 6C       		.sleb128 -20
 3618 0545 00       		.byte	0
 3619 0546 13       		.uleb128 0x13
 3620 0547 E7010000 		.4byte	.LASF85
 3621 054b 01       		.byte	0x1
 3622 054c D301     		.2byte	0x1d3
 3623 054e 00000000 		.4byte	.LFB48
 3624 0552 14020000 		.4byte	.LFE48-.LFB48
 3625 0556 01       		.uleb128 0x1
 3626 0557 9C       		.byte	0x9c
 3627 0558 97050000 		.4byte	0x597
 3628 055c 14       		.uleb128 0x14
 3629 055d 6900     		.ascii	"i\000"
 3630 055f 01       		.byte	0x1
 3631 0560 D901     		.2byte	0x1d9
 3632 0562 6B000000 		.4byte	0x6b
 3633 0566 02       		.uleb128 0x2
 3634 0567 91       		.byte	0x91
 3635 0568 6F       		.sleb128 -17
 3636 0569 14       		.uleb128 0x14
 3637 056a 61766700 		.ascii	"avg\000"
 3638 056e 01       		.byte	0x1
 3639 056f DA01     		.2byte	0x1da
 3640 0571 76000000 		.4byte	0x76
 3641 0575 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 84


 3642 0576 91       		.byte	0x91
 3643 0577 68       		.sleb128 -24
 3644 0578 15       		.uleb128 0x15
 3645 0579 5E050000 		.4byte	.LASF62
 3646 057d 01       		.byte	0x1
 3647 057e DB01     		.2byte	0x1db
 3648 0580 76000000 		.4byte	0x76
 3649 0584 02       		.uleb128 0x2
 3650 0585 91       		.byte	0x91
 3651 0586 6A       		.sleb128 -22
 3652 0587 15       		.uleb128 0x15
 3653 0588 50020000 		.4byte	.LASF72
 3654 058c 01       		.byte	0x1
 3655 058d DE01     		.2byte	0x1de
 3656 058f 76000000 		.4byte	0x76
 3657 0593 02       		.uleb128 0x2
 3658 0594 91       		.byte	0x91
 3659 0595 6C       		.sleb128 -20
 3660 0596 00       		.byte	0
 3661 0597 13       		.uleb128 0x13
 3662 0598 A3010000 		.4byte	.LASF86
 3663 059c 01       		.byte	0x1
 3664 059d 5B02     		.2byte	0x25b
 3665 059f 00000000 		.4byte	.LFB49
 3666 05a3 20020000 		.4byte	.LFE49-.LFB49
 3667 05a7 01       		.uleb128 0x1
 3668 05a8 9C       		.byte	0x9c
 3669 05a9 E8050000 		.4byte	0x5e8
 3670 05ad 14       		.uleb128 0x14
 3671 05ae 6900     		.ascii	"i\000"
 3672 05b0 01       		.byte	0x1
 3673 05b1 6102     		.2byte	0x261
 3674 05b3 6B000000 		.4byte	0x6b
 3675 05b7 02       		.uleb128 0x2
 3676 05b8 91       		.byte	0x91
 3677 05b9 6F       		.sleb128 -17
 3678 05ba 14       		.uleb128 0x14
 3679 05bb 61766700 		.ascii	"avg\000"
 3680 05bf 01       		.byte	0x1
 3681 05c0 6202     		.2byte	0x262
 3682 05c2 76000000 		.4byte	0x76
 3683 05c6 02       		.uleb128 0x2
 3684 05c7 91       		.byte	0x91
 3685 05c8 68       		.sleb128 -24
 3686 05c9 15       		.uleb128 0x15
 3687 05ca 5E050000 		.4byte	.LASF62
 3688 05ce 01       		.byte	0x1
 3689 05cf 6302     		.2byte	0x263
 3690 05d1 76000000 		.4byte	0x76
 3691 05d5 02       		.uleb128 0x2
 3692 05d6 91       		.byte	0x91
 3693 05d7 6A       		.sleb128 -22
 3694 05d8 15       		.uleb128 0x15
 3695 05d9 50020000 		.4byte	.LASF72
 3696 05dd 01       		.byte	0x1
 3697 05de 6402     		.2byte	0x264
 3698 05e0 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 85


 3699 05e4 02       		.uleb128 0x2
 3700 05e5 91       		.byte	0x91
 3701 05e6 6C       		.sleb128 -20
 3702 05e7 00       		.byte	0
 3703 05e8 16       		.uleb128 0x16
 3704 05e9 00000000 		.4byte	.LASF87
 3705 05ed 01       		.byte	0x1
 3706 05ee E202     		.2byte	0x2e2
 3707 05f0 6B000000 		.4byte	0x6b
 3708 05f4 00000000 		.4byte	.LFB50
 3709 05f8 5C010000 		.4byte	.LFE50-.LFB50
 3710 05fc 01       		.uleb128 0x1
 3711 05fd 9C       		.byte	0x9c
 3712 05fe 4C060000 		.4byte	0x64c
 3713 0602 17       		.uleb128 0x17
 3714 0603 13030000 		.4byte	.LASF88
 3715 0607 01       		.byte	0x1
 3716 0608 E202     		.2byte	0x2e2
 3717 060a 6B000000 		.4byte	0x6b
 3718 060e 02       		.uleb128 0x2
 3719 060f 91       		.byte	0x91
 3720 0610 67       		.sleb128 -25
 3721 0611 17       		.uleb128 0x17
 3722 0612 3F040000 		.4byte	.LASF89
 3723 0616 01       		.byte	0x1
 3724 0617 E202     		.2byte	0x2e2
 3725 0619 2A020000 		.4byte	0x22a
 3726 061d 02       		.uleb128 0x2
 3727 061e 91       		.byte	0x91
 3728 061f 60       		.sleb128 -32
 3729 0620 14       		.uleb128 0x14
 3730 0621 6900     		.ascii	"i\000"
 3731 0623 01       		.byte	0x1
 3732 0624 E702     		.2byte	0x2e7
 3733 0626 6B000000 		.4byte	0x6b
 3734 062a 02       		.uleb128 0x2
 3735 062b 91       		.byte	0x91
 3736 062c 6F       		.sleb128 -17
 3737 062d 14       		.uleb128 0x14
 3738 062e 61766700 		.ascii	"avg\000"
 3739 0632 01       		.byte	0x1
 3740 0633 E802     		.2byte	0x2e8
 3741 0635 76000000 		.4byte	0x76
 3742 0639 02       		.uleb128 0x2
 3743 063a 91       		.byte	0x91
 3744 063b 6A       		.sleb128 -22
 3745 063c 15       		.uleb128 0x15
 3746 063d 5E050000 		.4byte	.LASF62
 3747 0641 01       		.byte	0x1
 3748 0642 E902     		.2byte	0x2e9
 3749 0644 76000000 		.4byte	0x76
 3750 0648 02       		.uleb128 0x2
 3751 0649 91       		.byte	0x91
 3752 064a 6C       		.sleb128 -20
 3753 064b 00       		.byte	0
 3754 064c 13       		.uleb128 0x13
 3755 064d D2010000 		.4byte	.LASF90
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 86


 3756 0651 01       		.byte	0x1
 3757 0652 4603     		.2byte	0x346
 3758 0654 00000000 		.4byte	.LFB51
 3759 0658 00010000 		.4byte	.LFE51-.LFB51
 3760 065c 01       		.uleb128 0x1
 3761 065d 9C       		.byte	0x9c
 3762 065e 7A060000 		.4byte	0x67a
 3763 0662 18       		.uleb128 0x18
 3764 0663 1E000000 		.4byte	.LBB2
 3765 0667 2C000000 		.4byte	.LBE2-.LBB2
 3766 066b 14       		.uleb128 0x14
 3767 066c 6A00     		.ascii	"j\000"
 3768 066e 01       		.byte	0x1
 3769 066f 4C03     		.2byte	0x34c
 3770 0671 6B000000 		.4byte	0x6b
 3771 0675 02       		.uleb128 0x2
 3772 0676 91       		.byte	0x91
 3773 0677 77       		.sleb128 -9
 3774 0678 00       		.byte	0
 3775 0679 00       		.byte	0
 3776 067a 19       		.uleb128 0x19
 3777 067b B8050000 		.4byte	.LASF91
 3778 067f 01       		.byte	0x1
 3779 0680 8503     		.2byte	0x385
 3780 0682 5D000000 		.4byte	0x5d
 3781 0686 00000000 		.4byte	.LFB52
 3782 068a A0000000 		.4byte	.LFE52-.LFB52
 3783 068e 01       		.uleb128 0x1
 3784 068f 9C       		.byte	0x9c
 3785 0690 2A070000 		.4byte	0x72a
 3786 0694 1A       		.uleb128 0x1a
 3787 0695 7400     		.ascii	"t\000"
 3788 0697 01       		.byte	0x1
 3789 0698 8803     		.2byte	0x388
 3790 069a D3000000 		.4byte	0xd3
 3791 069e 15       		.uleb128 0x15
 3792 069f 01060000 		.4byte	.LASF92
 3793 06a3 01       		.byte	0x1
 3794 06a4 8903     		.2byte	0x389
 3795 06a6 C3000000 		.4byte	0xc3
 3796 06aa 02       		.uleb128 0x2
 3797 06ab 91       		.byte	0x91
 3798 06ac 58       		.sleb128 -40
 3799 06ad 1B       		.uleb128 0x1b
 3800 06ae B8010000 		.4byte	.LASF93
 3801 06b2 01       		.byte	0x1
 3802 06b3 8A03     		.2byte	0x38a
 3803 06b5 6B000000 		.4byte	0x6b
 3804 06b9 15       		.uleb128 0x15
 3805 06ba C1030000 		.4byte	.LASF94
 3806 06be 01       		.byte	0x1
 3807 06bf 8B03     		.2byte	0x38b
 3808 06c1 5D000000 		.4byte	0x5d
 3809 06c5 02       		.uleb128 0x2
 3810 06c6 91       		.byte	0x91
 3811 06c7 68       		.sleb128 -24
 3812 06c8 15       		.uleb128 0x15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 87


 3813 06c9 66050000 		.4byte	.LASF95
 3814 06cd 01       		.byte	0x1
 3815 06ce 8F03     		.2byte	0x38f
 3816 06d0 6B000000 		.4byte	0x6b
 3817 06d4 02       		.uleb128 0x2
 3818 06d5 91       		.byte	0x91
 3819 06d6 6F       		.sleb128 -17
 3820 06d7 15       		.uleb128 0x15
 3821 06d8 BD050000 		.4byte	.LASF96
 3822 06dc 01       		.byte	0x1
 3823 06dd 9003     		.2byte	0x390
 3824 06df 2A070000 		.4byte	0x72a
 3825 06e3 03       		.uleb128 0x3
 3826 06e4 91       		.byte	0x91
 3827 06e5 B07F     		.sleb128 -80
 3828 06e7 15       		.uleb128 0x15
 3829 06e8 A6040000 		.4byte	.LASF97
 3830 06ec 01       		.byte	0x1
 3831 06ed 9503     		.2byte	0x395
 3832 06ef 5D000000 		.4byte	0x5d
 3833 06f3 02       		.uleb128 0x2
 3834 06f4 91       		.byte	0x91
 3835 06f5 64       		.sleb128 -28
 3836 06f6 1B       		.uleb128 0x1b
 3837 06f7 30000000 		.4byte	.LASF98
 3838 06fb 01       		.byte	0x1
 3839 06fc 9603     		.2byte	0x396
 3840 06fe 5D000000 		.4byte	0x5d
 3841 0702 1B       		.uleb128 0x1b
 3842 0703 58040000 		.4byte	.LASF99
 3843 0707 01       		.byte	0x1
 3844 0708 9703     		.2byte	0x397
 3845 070a 5D000000 		.4byte	0x5d
 3846 070e 1B       		.uleb128 0x1b
 3847 070f 6F050000 		.4byte	.LASF100
 3848 0713 01       		.byte	0x1
 3849 0714 9903     		.2byte	0x399
 3850 0716 5D000000 		.4byte	0x5d
 3851 071a 15       		.uleb128 0x15
 3852 071b DD010000 		.4byte	.LASF101
 3853 071f 01       		.byte	0x1
 3854 0720 9A03     		.2byte	0x39a
 3855 0722 5D000000 		.4byte	0x5d
 3856 0726 02       		.uleb128 0x2
 3857 0727 91       		.byte	0x91
 3858 0728 60       		.sleb128 -32
 3859 0729 00       		.byte	0
 3860 072a 06       		.uleb128 0x6
 3861 072b 76000000 		.4byte	0x76
 3862 072f 3A070000 		.4byte	0x73a
 3863 0733 07       		.uleb128 0x7
 3864 0734 BC000000 		.4byte	0xbc
 3865 0738 13       		.byte	0x13
 3866 0739 00       		.byte	0
 3867 073a 06       		.uleb128 0x6
 3868 073b 8C000000 		.4byte	0x8c
 3869 073f 4A070000 		.4byte	0x74a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 88


 3870 0743 07       		.uleb128 0x7
 3871 0744 BC000000 		.4byte	0xbc
 3872 0748 15       		.byte	0x15
 3873 0749 00       		.byte	0
 3874 074a 1C       		.uleb128 0x1c
 3875 074b 15020000 		.4byte	.LASF102
 3876 074f 04       		.byte	0x4
 3877 0750 2D       		.byte	0x2d
 3878 0751 3A070000 		.4byte	0x73a
 3879 0755 05       		.uleb128 0x5
 3880 0756 03       		.byte	0x3
 3881 0757 00000000 		.4byte	data_array
 3882 075b 1C       		.uleb128 0x1c
 3883 075c DC030000 		.4byte	.LASF103
 3884 0760 04       		.byte	0x4
 3885 0761 30       		.byte	0x30
 3886 0762 6B000000 		.4byte	0x6b
 3887 0766 05       		.uleb128 0x5
 3888 0767 03       		.byte	0x3
 3889 0768 00000000 		.4byte	wiznet
 3890 076c 1C       		.uleb128 0x1c
 3891 076d ED010000 		.4byte	.LASF104
 3892 0771 04       		.byte	0x4
 3893 0772 34       		.byte	0x34
 3894 0773 3A070000 		.4byte	0x73a
 3895 0777 05       		.uleb128 0x5
 3896 0778 03       		.byte	0x3
 3897 0779 00000000 		.4byte	test_array
 3898 077d 1C       		.uleb128 0x1c
 3899 077e 2B010000 		.4byte	.LASF105
 3900 0782 04       		.byte	0x4
 3901 0783 37       		.byte	0x37
 3902 0784 6B000000 		.4byte	0x6b
 3903 0788 05       		.uleb128 0x5
 3904 0789 03       		.byte	0x3
 3905 078a 00000000 		.4byte	elbw_arr_cspot
 3906 078e 1C       		.uleb128 0x1c
 3907 078f B1040000 		.4byte	.LASF106
 3908 0793 04       		.byte	0x4
 3909 0794 38       		.byte	0x38
 3910 0795 2A070000 		.4byte	0x72a
 3911 0799 05       		.uleb128 0x5
 3912 079a 03       		.byte	0x3
 3913 079b 00000000 		.4byte	elbow_array
 3914 079f 1C       		.uleb128 0x1c
 3915 07a0 03030000 		.4byte	.LASF107
 3916 07a4 04       		.byte	0x4
 3917 07a5 3B       		.byte	0x3b
 3918 07a6 6B000000 		.4byte	0x6b
 3919 07aa 05       		.uleb128 0x5
 3920 07ab 03       		.byte	0x3
 3921 07ac 00000000 		.4byte	shldr_arr_cspot
 3922 07b0 1C       		.uleb128 0x1c
 3923 07b1 8C000000 		.4byte	.LASF108
 3924 07b5 04       		.byte	0x4
 3925 07b6 3C       		.byte	0x3c
 3926 07b7 2A070000 		.4byte	0x72a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 89


 3927 07bb 05       		.uleb128 0x5
 3928 07bc 03       		.byte	0x3
 3929 07bd 00000000 		.4byte	shoulder_array
 3930 07c1 1C       		.uleb128 0x1c
 3931 07c2 46030000 		.4byte	.LASF109
 3932 07c6 04       		.byte	0x4
 3933 07c7 42       		.byte	0x42
 3934 07c8 6B000000 		.4byte	0x6b
 3935 07cc 05       		.uleb128 0x5
 3936 07cd 03       		.byte	0x3
 3937 07ce 00000000 		.4byte	WT_arr_cspot
 3938 07d2 1C       		.uleb128 0x1c
 3939 07d3 54000000 		.4byte	.LASF110
 3940 07d7 04       		.byte	0x4
 3941 07d8 43       		.byte	0x43
 3942 07d9 2A070000 		.4byte	0x72a
 3943 07dd 05       		.uleb128 0x5
 3944 07de 03       		.byte	0x3
 3945 07df 00000000 		.4byte	WT_array
 3946 07e3 1C       		.uleb128 0x1c
 3947 07e4 F8010000 		.4byte	.LASF111
 3948 07e8 04       		.byte	0x4
 3949 07e9 46       		.byte	0x46
 3950 07ea 6B000000 		.4byte	0x6b
 3951 07ee 05       		.uleb128 0x5
 3952 07ef 03       		.byte	0x3
 3953 07f0 00000000 		.4byte	WR_arr_cspot
 3954 07f4 1C       		.uleb128 0x1c
 3955 07f5 D0050000 		.4byte	.LASF112
 3956 07f9 04       		.byte	0x4
 3957 07fa 47       		.byte	0x47
 3958 07fb 2A070000 		.4byte	0x72a
 3959 07ff 05       		.uleb128 0x5
 3960 0800 03       		.byte	0x3
 3961 0801 00000000 		.4byte	WR_array
 3962 0805 1C       		.uleb128 0x1c
 3963 0806 B5020000 		.4byte	.LASF113
 3964 080a 04       		.byte	0x4
 3965 080b 4A       		.byte	0x4a
 3966 080c 6B000000 		.4byte	0x6b
 3967 0810 05       		.uleb128 0x5
 3968 0811 03       		.byte	0x3
 3969 0812 00000000 		.4byte	WT_FLAG
 3970 0816 1C       		.uleb128 0x1c
 3971 0817 28020000 		.4byte	.LASF114
 3972 081b 04       		.byte	0x4
 3973 081c 4B       		.byte	0x4b
 3974 081d 6B000000 		.4byte	0x6b
 3975 0821 05       		.uleb128 0x5
 3976 0822 03       		.byte	0x3
 3977 0823 00000000 		.4byte	WR_FLAG
 3978 0827 1C       		.uleb128 0x1c
 3979 0828 E6050000 		.4byte	.LASF115
 3980 082c 04       		.byte	0x4
 3981 082d 4C       		.byte	0x4c
 3982 082e 6B000000 		.4byte	0x6b
 3983 0832 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 90


 3984 0833 03       		.byte	0x3
 3985 0834 00000000 		.4byte	ELBOW_FLAG
 3986 0838 1C       		.uleb128 0x1c
 3987 0839 D4020000 		.4byte	.LASF116
 3988 083d 04       		.byte	0x4
 3989 083e 4D       		.byte	0x4d
 3990 083f 6B000000 		.4byte	0x6b
 3991 0843 05       		.uleb128 0x5
 3992 0844 03       		.byte	0x3
 3993 0845 00000000 		.4byte	SHOULDER_FLAG
 3994 0849 1C       		.uleb128 0x1c
 3995 084a 59020000 		.4byte	.LASF117
 3996 084e 04       		.byte	0x4
 3997 084f 4E       		.byte	0x4e
 3998 0850 6B000000 		.4byte	0x6b
 3999 0854 05       		.uleb128 0x5
 4000 0855 03       		.byte	0x3
 4001 0856 00000000 		.4byte	BA_FLAG
 4002 085a 1C       		.uleb128 0x1c
 4003 085b 7E050000 		.4byte	.LASF118
 4004 085f 04       		.byte	0x4
 4005 0860 50       		.byte	0x50
 4006 0861 97000000 		.4byte	0x97
 4007 0865 05       		.uleb128 0x5
 4008 0866 03       		.byte	0x3
 4009 0867 00000000 		.4byte	temp_val
 4010 086b 1C       		.uleb128 0x1c
 4011 086c 99010000 		.4byte	.LASF119
 4012 0870 04       		.byte	0x4
 4013 0871 53       		.byte	0x53
 4014 0872 B7000000 		.4byte	0xb7
 4015 0876 05       		.uleb128 0x5
 4016 0877 03       		.byte	0x3
 4017 0878 00000000 		.4byte	timerFlag
 4018 087c 1D       		.uleb128 0x1d
 4019 087d ED020000 		.4byte	.LASF120
 4020 0881 01       		.byte	0x1
 4021 0882 0101     		.2byte	0x101
 4022 0884 DE000000 		.4byte	0xde
 4023 0888 05       		.uleb128 0x5
 4024 0889 03       		.byte	0x3
 4025 088a 00000000 		.4byte	wristTilt_state
 4026 088e 1D       		.uleb128 0x1d
 4027 088f A7030000 		.4byte	.LASF121
 4028 0893 01       		.byte	0x1
 4029 0894 6801     		.2byte	0x168
 4030 0896 0A010000 		.4byte	0x10a
 4031 089a 05       		.uleb128 0x5
 4032 089b 03       		.byte	0x3
 4033 089c 00000000 		.4byte	wristRotate_state
 4034 08a0 1D       		.uleb128 0x1d
 4035 08a1 50010000 		.4byte	.LASF122
 4036 08a5 01       		.byte	0x1
 4037 08a6 D201     		.2byte	0x1d2
 4038 08a8 36010000 		.4byte	0x136
 4039 08ac 05       		.uleb128 0x5
 4040 08ad 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 91


 4041 08ae 00000000 		.4byte	elbow_state
 4042 08b2 1D       		.uleb128 0x1d
 4043 08b3 AA000000 		.4byte	.LASF123
 4044 08b7 01       		.byte	0x1
 4045 08b8 5A02     		.2byte	0x25a
 4046 08ba 5C010000 		.4byte	0x15c
 4047 08be 05       		.uleb128 0x5
 4048 08bf 03       		.byte	0x3
 4049 08c0 00000000 		.4byte	shoulder_state
 4050 08c4 1D       		.uleb128 0x1d
 4051 08c5 6C030000 		.4byte	.LASF124
 4052 08c9 01       		.byte	0x1
 4053 08ca E102     		.2byte	0x2e1
 4054 08cc 82010000 		.4byte	0x182
 4055 08d0 05       		.uleb128 0x5
 4056 08d1 03       		.byte	0x3
 4057 08d2 00000000 		.4byte	baseAzimuth_state
 4058 08d6 00       		.byte	0
 4059              		.section	.debug_abbrev,"",%progbits
 4060              	.Ldebug_abbrev0:
 4061 0000 01       		.uleb128 0x1
 4062 0001 11       		.uleb128 0x11
 4063 0002 01       		.byte	0x1
 4064 0003 25       		.uleb128 0x25
 4065 0004 0E       		.uleb128 0xe
 4066 0005 13       		.uleb128 0x13
 4067 0006 0B       		.uleb128 0xb
 4068 0007 03       		.uleb128 0x3
 4069 0008 0E       		.uleb128 0xe
 4070 0009 1B       		.uleb128 0x1b
 4071 000a 0E       		.uleb128 0xe
 4072 000b 55       		.uleb128 0x55
 4073 000c 17       		.uleb128 0x17
 4074 000d 11       		.uleb128 0x11
 4075 000e 01       		.uleb128 0x1
 4076 000f 10       		.uleb128 0x10
 4077 0010 17       		.uleb128 0x17
 4078 0011 00       		.byte	0
 4079 0012 00       		.byte	0
 4080 0013 02       		.uleb128 0x2
 4081 0014 24       		.uleb128 0x24
 4082 0015 00       		.byte	0
 4083 0016 0B       		.uleb128 0xb
 4084 0017 0B       		.uleb128 0xb
 4085 0018 3E       		.uleb128 0x3e
 4086 0019 0B       		.uleb128 0xb
 4087 001a 03       		.uleb128 0x3
 4088 001b 0E       		.uleb128 0xe
 4089 001c 00       		.byte	0
 4090 001d 00       		.byte	0
 4091 001e 03       		.uleb128 0x3
 4092 001f 24       		.uleb128 0x24
 4093 0020 00       		.byte	0
 4094 0021 0B       		.uleb128 0xb
 4095 0022 0B       		.uleb128 0xb
 4096 0023 3E       		.uleb128 0x3e
 4097 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 92


 4098 0025 03       		.uleb128 0x3
 4099 0026 08       		.uleb128 0x8
 4100 0027 00       		.byte	0
 4101 0028 00       		.byte	0
 4102 0029 04       		.uleb128 0x4
 4103 002a 16       		.uleb128 0x16
 4104 002b 00       		.byte	0
 4105 002c 03       		.uleb128 0x3
 4106 002d 0E       		.uleb128 0xe
 4107 002e 3A       		.uleb128 0x3a
 4108 002f 0B       		.uleb128 0xb
 4109 0030 3B       		.uleb128 0x3b
 4110 0031 0B       		.uleb128 0xb
 4111 0032 49       		.uleb128 0x49
 4112 0033 13       		.uleb128 0x13
 4113 0034 00       		.byte	0
 4114 0035 00       		.byte	0
 4115 0036 05       		.uleb128 0x5
 4116 0037 35       		.uleb128 0x35
 4117 0038 00       		.byte	0
 4118 0039 49       		.uleb128 0x49
 4119 003a 13       		.uleb128 0x13
 4120 003b 00       		.byte	0
 4121 003c 00       		.byte	0
 4122 003d 06       		.uleb128 0x6
 4123 003e 01       		.uleb128 0x1
 4124 003f 01       		.byte	0x1
 4125 0040 49       		.uleb128 0x49
 4126 0041 13       		.uleb128 0x13
 4127 0042 01       		.uleb128 0x1
 4128 0043 13       		.uleb128 0x13
 4129 0044 00       		.byte	0
 4130 0045 00       		.byte	0
 4131 0046 07       		.uleb128 0x7
 4132 0047 21       		.uleb128 0x21
 4133 0048 00       		.byte	0
 4134 0049 49       		.uleb128 0x49
 4135 004a 13       		.uleb128 0x13
 4136 004b 2F       		.uleb128 0x2f
 4137 004c 0B       		.uleb128 0xb
 4138 004d 00       		.byte	0
 4139 004e 00       		.byte	0
 4140 004f 08       		.uleb128 0x8
 4141 0050 04       		.uleb128 0x4
 4142 0051 01       		.byte	0x1
 4143 0052 03       		.uleb128 0x3
 4144 0053 0E       		.uleb128 0xe
 4145 0054 0B       		.uleb128 0xb
 4146 0055 0B       		.uleb128 0xb
 4147 0056 3A       		.uleb128 0x3a
 4148 0057 0B       		.uleb128 0xb
 4149 0058 3B       		.uleb128 0x3b
 4150 0059 05       		.uleb128 0x5
 4151 005a 01       		.uleb128 0x1
 4152 005b 13       		.uleb128 0x13
 4153 005c 00       		.byte	0
 4154 005d 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 93


 4155 005e 09       		.uleb128 0x9
 4156 005f 28       		.uleb128 0x28
 4157 0060 00       		.byte	0
 4158 0061 03       		.uleb128 0x3
 4159 0062 0E       		.uleb128 0xe
 4160 0063 1C       		.uleb128 0x1c
 4161 0064 0D       		.uleb128 0xd
 4162 0065 00       		.byte	0
 4163 0066 00       		.byte	0
 4164 0067 0A       		.uleb128 0xa
 4165 0068 2E       		.uleb128 0x2e
 4166 0069 01       		.byte	0x1
 4167 006a 3F       		.uleb128 0x3f
 4168 006b 19       		.uleb128 0x19
 4169 006c 03       		.uleb128 0x3
 4170 006d 0E       		.uleb128 0xe
 4171 006e 3A       		.uleb128 0x3a
 4172 006f 0B       		.uleb128 0xb
 4173 0070 3B       		.uleb128 0x3b
 4174 0071 0B       		.uleb128 0xb
 4175 0072 27       		.uleb128 0x27
 4176 0073 19       		.uleb128 0x19
 4177 0074 11       		.uleb128 0x11
 4178 0075 01       		.uleb128 0x1
 4179 0076 12       		.uleb128 0x12
 4180 0077 06       		.uleb128 0x6
 4181 0078 40       		.uleb128 0x40
 4182 0079 18       		.uleb128 0x18
 4183 007a 9642     		.uleb128 0x2116
 4184 007c 19       		.uleb128 0x19
 4185 007d 01       		.uleb128 0x1
 4186 007e 13       		.uleb128 0x13
 4187 007f 00       		.byte	0
 4188 0080 00       		.byte	0
 4189 0081 0B       		.uleb128 0xb
 4190 0082 34       		.uleb128 0x34
 4191 0083 00       		.byte	0
 4192 0084 03       		.uleb128 0x3
 4193 0085 0E       		.uleb128 0xe
 4194 0086 3A       		.uleb128 0x3a
 4195 0087 0B       		.uleb128 0xb
 4196 0088 3B       		.uleb128 0x3b
 4197 0089 0B       		.uleb128 0xb
 4198 008a 49       		.uleb128 0x49
 4199 008b 13       		.uleb128 0x13
 4200 008c 02       		.uleb128 0x2
 4201 008d 18       		.uleb128 0x18
 4202 008e 00       		.byte	0
 4203 008f 00       		.byte	0
 4204 0090 0C       		.uleb128 0xc
 4205 0091 2E       		.uleb128 0x2e
 4206 0092 01       		.byte	0x1
 4207 0093 3F       		.uleb128 0x3f
 4208 0094 19       		.uleb128 0x19
 4209 0095 03       		.uleb128 0x3
 4210 0096 0E       		.uleb128 0xe
 4211 0097 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 94


 4212 0098 0B       		.uleb128 0xb
 4213 0099 3B       		.uleb128 0x3b
 4214 009a 0B       		.uleb128 0xb
 4215 009b 27       		.uleb128 0x27
 4216 009c 19       		.uleb128 0x19
 4217 009d 49       		.uleb128 0x49
 4218 009e 13       		.uleb128 0x13
 4219 009f 11       		.uleb128 0x11
 4220 00a0 01       		.uleb128 0x1
 4221 00a1 12       		.uleb128 0x12
 4222 00a2 06       		.uleb128 0x6
 4223 00a3 40       		.uleb128 0x40
 4224 00a4 18       		.uleb128 0x18
 4225 00a5 9642     		.uleb128 0x2116
 4226 00a7 19       		.uleb128 0x19
 4227 00a8 01       		.uleb128 0x1
 4228 00a9 13       		.uleb128 0x13
 4229 00aa 00       		.byte	0
 4230 00ab 00       		.byte	0
 4231 00ac 0D       		.uleb128 0xd
 4232 00ad 05       		.uleb128 0x5
 4233 00ae 00       		.byte	0
 4234 00af 03       		.uleb128 0x3
 4235 00b0 0E       		.uleb128 0xe
 4236 00b1 3A       		.uleb128 0x3a
 4237 00b2 0B       		.uleb128 0xb
 4238 00b3 3B       		.uleb128 0x3b
 4239 00b4 0B       		.uleb128 0xb
 4240 00b5 49       		.uleb128 0x49
 4241 00b6 13       		.uleb128 0x13
 4242 00b7 02       		.uleb128 0x2
 4243 00b8 18       		.uleb128 0x18
 4244 00b9 00       		.byte	0
 4245 00ba 00       		.byte	0
 4246 00bb 0E       		.uleb128 0xe
 4247 00bc 34       		.uleb128 0x34
 4248 00bd 00       		.byte	0
 4249 00be 03       		.uleb128 0x3
 4250 00bf 08       		.uleb128 0x8
 4251 00c0 3A       		.uleb128 0x3a
 4252 00c1 0B       		.uleb128 0xb
 4253 00c2 3B       		.uleb128 0x3b
 4254 00c3 0B       		.uleb128 0xb
 4255 00c4 49       		.uleb128 0x49
 4256 00c5 13       		.uleb128 0x13
 4257 00c6 02       		.uleb128 0x2
 4258 00c7 18       		.uleb128 0x18
 4259 00c8 00       		.byte	0
 4260 00c9 00       		.byte	0
 4261 00ca 0F       		.uleb128 0xf
 4262 00cb 0F       		.uleb128 0xf
 4263 00cc 00       		.byte	0
 4264 00cd 0B       		.uleb128 0xb
 4265 00ce 0B       		.uleb128 0xb
 4266 00cf 49       		.uleb128 0x49
 4267 00d0 13       		.uleb128 0x13
 4268 00d1 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 95


 4269 00d2 00       		.byte	0
 4270 00d3 10       		.uleb128 0x10
 4271 00d4 2E       		.uleb128 0x2e
 4272 00d5 01       		.byte	0x1
 4273 00d6 3F       		.uleb128 0x3f
 4274 00d7 19       		.uleb128 0x19
 4275 00d8 03       		.uleb128 0x3
 4276 00d9 0E       		.uleb128 0xe
 4277 00da 3A       		.uleb128 0x3a
 4278 00db 0B       		.uleb128 0xb
 4279 00dc 3B       		.uleb128 0x3b
 4280 00dd 0B       		.uleb128 0xb
 4281 00de 27       		.uleb128 0x27
 4282 00df 19       		.uleb128 0x19
 4283 00e0 49       		.uleb128 0x49
 4284 00e1 13       		.uleb128 0x13
 4285 00e2 11       		.uleb128 0x11
 4286 00e3 01       		.uleb128 0x1
 4287 00e4 12       		.uleb128 0x12
 4288 00e5 06       		.uleb128 0x6
 4289 00e6 40       		.uleb128 0x40
 4290 00e7 18       		.uleb128 0x18
 4291 00e8 9742     		.uleb128 0x2117
 4292 00ea 19       		.uleb128 0x19
 4293 00eb 01       		.uleb128 0x1
 4294 00ec 13       		.uleb128 0x13
 4295 00ed 00       		.byte	0
 4296 00ee 00       		.byte	0
 4297 00ef 11       		.uleb128 0x11
 4298 00f0 2E       		.uleb128 0x2e
 4299 00f1 00       		.byte	0
 4300 00f2 3F       		.uleb128 0x3f
 4301 00f3 19       		.uleb128 0x19
 4302 00f4 03       		.uleb128 0x3
 4303 00f5 0E       		.uleb128 0xe
 4304 00f6 3A       		.uleb128 0x3a
 4305 00f7 0B       		.uleb128 0xb
 4306 00f8 3B       		.uleb128 0x3b
 4307 00f9 0B       		.uleb128 0xb
 4308 00fa 11       		.uleb128 0x11
 4309 00fb 01       		.uleb128 0x1
 4310 00fc 12       		.uleb128 0x12
 4311 00fd 06       		.uleb128 0x6
 4312 00fe 40       		.uleb128 0x40
 4313 00ff 18       		.uleb128 0x18
 4314 0100 9742     		.uleb128 0x2117
 4315 0102 19       		.uleb128 0x19
 4316 0103 00       		.byte	0
 4317 0104 00       		.byte	0
 4318 0105 12       		.uleb128 0x12
 4319 0106 2E       		.uleb128 0x2e
 4320 0107 00       		.byte	0
 4321 0108 3F       		.uleb128 0x3f
 4322 0109 19       		.uleb128 0x19
 4323 010a 03       		.uleb128 0x3
 4324 010b 0E       		.uleb128 0xe
 4325 010c 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 96


 4326 010d 0B       		.uleb128 0xb
 4327 010e 3B       		.uleb128 0x3b
 4328 010f 0B       		.uleb128 0xb
 4329 0110 11       		.uleb128 0x11
 4330 0111 01       		.uleb128 0x1
 4331 0112 12       		.uleb128 0x12
 4332 0113 06       		.uleb128 0x6
 4333 0114 40       		.uleb128 0x40
 4334 0115 18       		.uleb128 0x18
 4335 0116 9642     		.uleb128 0x2116
 4336 0118 19       		.uleb128 0x19
 4337 0119 00       		.byte	0
 4338 011a 00       		.byte	0
 4339 011b 13       		.uleb128 0x13
 4340 011c 2E       		.uleb128 0x2e
 4341 011d 01       		.byte	0x1
 4342 011e 3F       		.uleb128 0x3f
 4343 011f 19       		.uleb128 0x19
 4344 0120 03       		.uleb128 0x3
 4345 0121 0E       		.uleb128 0xe
 4346 0122 3A       		.uleb128 0x3a
 4347 0123 0B       		.uleb128 0xb
 4348 0124 3B       		.uleb128 0x3b
 4349 0125 05       		.uleb128 0x5
 4350 0126 11       		.uleb128 0x11
 4351 0127 01       		.uleb128 0x1
 4352 0128 12       		.uleb128 0x12
 4353 0129 06       		.uleb128 0x6
 4354 012a 40       		.uleb128 0x40
 4355 012b 18       		.uleb128 0x18
 4356 012c 9642     		.uleb128 0x2116
 4357 012e 19       		.uleb128 0x19
 4358 012f 01       		.uleb128 0x1
 4359 0130 13       		.uleb128 0x13
 4360 0131 00       		.byte	0
 4361 0132 00       		.byte	0
 4362 0133 14       		.uleb128 0x14
 4363 0134 34       		.uleb128 0x34
 4364 0135 00       		.byte	0
 4365 0136 03       		.uleb128 0x3
 4366 0137 08       		.uleb128 0x8
 4367 0138 3A       		.uleb128 0x3a
 4368 0139 0B       		.uleb128 0xb
 4369 013a 3B       		.uleb128 0x3b
 4370 013b 05       		.uleb128 0x5
 4371 013c 49       		.uleb128 0x49
 4372 013d 13       		.uleb128 0x13
 4373 013e 02       		.uleb128 0x2
 4374 013f 18       		.uleb128 0x18
 4375 0140 00       		.byte	0
 4376 0141 00       		.byte	0
 4377 0142 15       		.uleb128 0x15
 4378 0143 34       		.uleb128 0x34
 4379 0144 00       		.byte	0
 4380 0145 03       		.uleb128 0x3
 4381 0146 0E       		.uleb128 0xe
 4382 0147 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 97


 4383 0148 0B       		.uleb128 0xb
 4384 0149 3B       		.uleb128 0x3b
 4385 014a 05       		.uleb128 0x5
 4386 014b 49       		.uleb128 0x49
 4387 014c 13       		.uleb128 0x13
 4388 014d 02       		.uleb128 0x2
 4389 014e 18       		.uleb128 0x18
 4390 014f 00       		.byte	0
 4391 0150 00       		.byte	0
 4392 0151 16       		.uleb128 0x16
 4393 0152 2E       		.uleb128 0x2e
 4394 0153 01       		.byte	0x1
 4395 0154 3F       		.uleb128 0x3f
 4396 0155 19       		.uleb128 0x19
 4397 0156 03       		.uleb128 0x3
 4398 0157 0E       		.uleb128 0xe
 4399 0158 3A       		.uleb128 0x3a
 4400 0159 0B       		.uleb128 0xb
 4401 015a 3B       		.uleb128 0x3b
 4402 015b 05       		.uleb128 0x5
 4403 015c 27       		.uleb128 0x27
 4404 015d 19       		.uleb128 0x19
 4405 015e 49       		.uleb128 0x49
 4406 015f 13       		.uleb128 0x13
 4407 0160 11       		.uleb128 0x11
 4408 0161 01       		.uleb128 0x1
 4409 0162 12       		.uleb128 0x12
 4410 0163 06       		.uleb128 0x6
 4411 0164 40       		.uleb128 0x40
 4412 0165 18       		.uleb128 0x18
 4413 0166 9642     		.uleb128 0x2116
 4414 0168 19       		.uleb128 0x19
 4415 0169 01       		.uleb128 0x1
 4416 016a 13       		.uleb128 0x13
 4417 016b 00       		.byte	0
 4418 016c 00       		.byte	0
 4419 016d 17       		.uleb128 0x17
 4420 016e 05       		.uleb128 0x5
 4421 016f 00       		.byte	0
 4422 0170 03       		.uleb128 0x3
 4423 0171 0E       		.uleb128 0xe
 4424 0172 3A       		.uleb128 0x3a
 4425 0173 0B       		.uleb128 0xb
 4426 0174 3B       		.uleb128 0x3b
 4427 0175 05       		.uleb128 0x5
 4428 0176 49       		.uleb128 0x49
 4429 0177 13       		.uleb128 0x13
 4430 0178 02       		.uleb128 0x2
 4431 0179 18       		.uleb128 0x18
 4432 017a 00       		.byte	0
 4433 017b 00       		.byte	0
 4434 017c 18       		.uleb128 0x18
 4435 017d 0B       		.uleb128 0xb
 4436 017e 01       		.byte	0x1
 4437 017f 11       		.uleb128 0x11
 4438 0180 01       		.uleb128 0x1
 4439 0181 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 98


 4440 0182 06       		.uleb128 0x6
 4441 0183 00       		.byte	0
 4442 0184 00       		.byte	0
 4443 0185 19       		.uleb128 0x19
 4444 0186 2E       		.uleb128 0x2e
 4445 0187 01       		.byte	0x1
 4446 0188 3F       		.uleb128 0x3f
 4447 0189 19       		.uleb128 0x19
 4448 018a 03       		.uleb128 0x3
 4449 018b 0E       		.uleb128 0xe
 4450 018c 3A       		.uleb128 0x3a
 4451 018d 0B       		.uleb128 0xb
 4452 018e 3B       		.uleb128 0x3b
 4453 018f 05       		.uleb128 0x5
 4454 0190 49       		.uleb128 0x49
 4455 0191 13       		.uleb128 0x13
 4456 0192 11       		.uleb128 0x11
 4457 0193 01       		.uleb128 0x1
 4458 0194 12       		.uleb128 0x12
 4459 0195 06       		.uleb128 0x6
 4460 0196 40       		.uleb128 0x40
 4461 0197 18       		.uleb128 0x18
 4462 0198 9642     		.uleb128 0x2116
 4463 019a 19       		.uleb128 0x19
 4464 019b 01       		.uleb128 0x1
 4465 019c 13       		.uleb128 0x13
 4466 019d 00       		.byte	0
 4467 019e 00       		.byte	0
 4468 019f 1A       		.uleb128 0x1a
 4469 01a0 34       		.uleb128 0x34
 4470 01a1 00       		.byte	0
 4471 01a2 03       		.uleb128 0x3
 4472 01a3 08       		.uleb128 0x8
 4473 01a4 3A       		.uleb128 0x3a
 4474 01a5 0B       		.uleb128 0xb
 4475 01a6 3B       		.uleb128 0x3b
 4476 01a7 05       		.uleb128 0x5
 4477 01a8 49       		.uleb128 0x49
 4478 01a9 13       		.uleb128 0x13
 4479 01aa 00       		.byte	0
 4480 01ab 00       		.byte	0
 4481 01ac 1B       		.uleb128 0x1b
 4482 01ad 34       		.uleb128 0x34
 4483 01ae 00       		.byte	0
 4484 01af 03       		.uleb128 0x3
 4485 01b0 0E       		.uleb128 0xe
 4486 01b1 3A       		.uleb128 0x3a
 4487 01b2 0B       		.uleb128 0xb
 4488 01b3 3B       		.uleb128 0x3b
 4489 01b4 05       		.uleb128 0x5
 4490 01b5 49       		.uleb128 0x49
 4491 01b6 13       		.uleb128 0x13
 4492 01b7 00       		.byte	0
 4493 01b8 00       		.byte	0
 4494 01b9 1C       		.uleb128 0x1c
 4495 01ba 34       		.uleb128 0x34
 4496 01bb 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 99


 4497 01bc 03       		.uleb128 0x3
 4498 01bd 0E       		.uleb128 0xe
 4499 01be 3A       		.uleb128 0x3a
 4500 01bf 0B       		.uleb128 0xb
 4501 01c0 3B       		.uleb128 0x3b
 4502 01c1 0B       		.uleb128 0xb
 4503 01c2 49       		.uleb128 0x49
 4504 01c3 13       		.uleb128 0x13
 4505 01c4 3F       		.uleb128 0x3f
 4506 01c5 19       		.uleb128 0x19
 4507 01c6 02       		.uleb128 0x2
 4508 01c7 18       		.uleb128 0x18
 4509 01c8 00       		.byte	0
 4510 01c9 00       		.byte	0
 4511 01ca 1D       		.uleb128 0x1d
 4512 01cb 34       		.uleb128 0x34
 4513 01cc 00       		.byte	0
 4514 01cd 03       		.uleb128 0x3
 4515 01ce 0E       		.uleb128 0xe
 4516 01cf 3A       		.uleb128 0x3a
 4517 01d0 0B       		.uleb128 0xb
 4518 01d1 3B       		.uleb128 0x3b
 4519 01d2 05       		.uleb128 0x5
 4520 01d3 49       		.uleb128 0x49
 4521 01d4 13       		.uleb128 0x13
 4522 01d5 3F       		.uleb128 0x3f
 4523 01d6 19       		.uleb128 0x19
 4524 01d7 02       		.uleb128 0x2
 4525 01d8 18       		.uleb128 0x18
 4526 01d9 00       		.byte	0
 4527 01da 00       		.byte	0
 4528 01db 00       		.byte	0
 4529              		.section	.debug_aranges,"",%progbits
 4530 0000 AC000000 		.4byte	0xac
 4531 0004 0200     		.2byte	0x2
 4532 0006 00000000 		.4byte	.Ldebug_info0
 4533 000a 04       		.byte	0x4
 4534 000b 00       		.byte	0
 4535 000c 0000     		.2byte	0
 4536 000e 0000     		.2byte	0
 4537 0010 00000000 		.4byte	.LFB34
 4538 0014 28000000 		.4byte	.LFE34-.LFB34
 4539 0018 00000000 		.4byte	.LFB35
 4540 001c 78000000 		.4byte	.LFE35-.LFB35
 4541 0020 00000000 		.4byte	.LFB36
 4542 0024 3E000000 		.4byte	.LFE36-.LFB36
 4543 0028 00000000 		.4byte	.LFB37
 4544 002c 0C010000 		.4byte	.LFE37-.LFB37
 4545 0030 00000000 		.4byte	.LFB38
 4546 0034 0C020000 		.4byte	.LFE38-.LFB38
 4547 0038 00000000 		.4byte	.LFB39
 4548 003c 84000000 		.4byte	.LFE39-.LFB39
 4549 0040 00000000 		.4byte	.LFB40
 4550 0044 20000000 		.4byte	.LFE40-.LFB40
 4551 0048 00000000 		.4byte	.LFB41
 4552 004c 08000000 		.4byte	.LFE41-.LFB41
 4553 0050 00000000 		.4byte	.LFB42
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 100


 4554 0054 18000000 		.4byte	.LFE42-.LFB42
 4555 0058 00000000 		.4byte	.LFB43
 4556 005c 98000000 		.4byte	.LFE43-.LFB43
 4557 0060 00000000 		.4byte	.LFB44
 4558 0064 98000000 		.4byte	.LFE44-.LFB44
 4559 0068 00000000 		.4byte	.LFB45
 4560 006c 98000000 		.4byte	.LFE45-.LFB45
 4561 0070 00000000 		.4byte	.LFB46
 4562 0074 50010000 		.4byte	.LFE46-.LFB46
 4563 0078 00000000 		.4byte	.LFB47
 4564 007c 50010000 		.4byte	.LFE47-.LFB47
 4565 0080 00000000 		.4byte	.LFB48
 4566 0084 14020000 		.4byte	.LFE48-.LFB48
 4567 0088 00000000 		.4byte	.LFB49
 4568 008c 20020000 		.4byte	.LFE49-.LFB49
 4569 0090 00000000 		.4byte	.LFB50
 4570 0094 5C010000 		.4byte	.LFE50-.LFB50
 4571 0098 00000000 		.4byte	.LFB51
 4572 009c 00010000 		.4byte	.LFE51-.LFB51
 4573 00a0 00000000 		.4byte	.LFB52
 4574 00a4 A0000000 		.4byte	.LFE52-.LFB52
 4575 00a8 00000000 		.4byte	0
 4576 00ac 00000000 		.4byte	0
 4577              		.section	.debug_ranges,"",%progbits
 4578              	.Ldebug_ranges0:
 4579 0000 00000000 		.4byte	.LFB34
 4580 0004 28000000 		.4byte	.LFE34
 4581 0008 00000000 		.4byte	.LFB35
 4582 000c 78000000 		.4byte	.LFE35
 4583 0010 00000000 		.4byte	.LFB36
 4584 0014 3E000000 		.4byte	.LFE36
 4585 0018 00000000 		.4byte	.LFB37
 4586 001c 0C010000 		.4byte	.LFE37
 4587 0020 00000000 		.4byte	.LFB38
 4588 0024 0C020000 		.4byte	.LFE38
 4589 0028 00000000 		.4byte	.LFB39
 4590 002c 84000000 		.4byte	.LFE39
 4591 0030 00000000 		.4byte	.LFB40
 4592 0034 20000000 		.4byte	.LFE40
 4593 0038 00000000 		.4byte	.LFB41
 4594 003c 08000000 		.4byte	.LFE41
 4595 0040 00000000 		.4byte	.LFB42
 4596 0044 18000000 		.4byte	.LFE42
 4597 0048 00000000 		.4byte	.LFB43
 4598 004c 98000000 		.4byte	.LFE43
 4599 0050 00000000 		.4byte	.LFB44
 4600 0054 98000000 		.4byte	.LFE44
 4601 0058 00000000 		.4byte	.LFB45
 4602 005c 98000000 		.4byte	.LFE45
 4603 0060 00000000 		.4byte	.LFB46
 4604 0064 50010000 		.4byte	.LFE46
 4605 0068 00000000 		.4byte	.LFB47
 4606 006c 50010000 		.4byte	.LFE47
 4607 0070 00000000 		.4byte	.LFB48
 4608 0074 14020000 		.4byte	.LFE48
 4609 0078 00000000 		.4byte	.LFB49
 4610 007c 20020000 		.4byte	.LFE49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 101


 4611 0080 00000000 		.4byte	.LFB50
 4612 0084 5C010000 		.4byte	.LFE50
 4613 0088 00000000 		.4byte	.LFB51
 4614 008c 00010000 		.4byte	.LFE51
 4615 0090 00000000 		.4byte	.LFB52
 4616 0094 A0000000 		.4byte	.LFE52
 4617 0098 00000000 		.4byte	0
 4618 009c 00000000 		.4byte	0
 4619              		.section	.debug_line,"",%progbits
 4620              	.Ldebug_line0:
 4621 0000 90040000 		.section	.debug_str,"MS",%progbits,1
 4621      0200CB00 
 4621      00000201 
 4621      FB0E0D00 
 4621      01010101 
 4622              	.LASF87:
 4623 0000 62617365 		.ascii	"baseAzimuth\000"
 4623      417A696D 
 4623      75746800 
 4624              	.LASF20:
 4625 000c 74696C74 		.ascii	"tilt_init\000"
 4625      5F696E69 
 4625      7400
 4626              	.LASF30:
 4627 0016 726F7461 		.ascii	"rotate_feedback\000"
 4627      74655F66 
 4627      65656462 
 4627      61636B00 
 4628              	.LASF47:
 4629 0026 6E756D5F 		.ascii	"num_items\000"
 4629      6974656D 
 4629      7300
 4630              	.LASF98:
 4631 0030 66697273 		.ascii	"first_count\000"
 4631      745F636F 
 4631      756E7400 
 4632              	.LASF44:
 4633 003c 42415F65 		.ascii	"BA_execute\000"
 4633      78656375 
 4633      746500
 4634              	.LASF31:
 4635 0047 656C626F 		.ascii	"elbow_states\000"
 4635      775F7374 
 4635      61746573 
 4635      00
 4636              	.LASF110:
 4637 0054 57545F61 		.ascii	"WT_array\000"
 4637      72726179 
 4637      00
 4638              	.LASF8:
 4639 005d 756E7369 		.ascii	"unsigned int\000"
 4639      676E6564 
 4639      20696E74 
 4639      00
 4640              	.LASF41:
 4641 006a 62617365 		.ascii	"baseAzimuth_states\000"
 4641      417A696D 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 102


 4641      7574685F 
 4641      73746174 
 4641      657300
 4642              	.LASF13:
 4643 007d 696E7431 		.ascii	"int16\000"
 4643      3600
 4644              	.LASF42:
 4645 0083 42415F73 		.ascii	"BA_start\000"
 4645      74617274 
 4645      00
 4646              	.LASF108:
 4647 008c 73686F75 		.ascii	"shoulder_array\000"
 4647      6C646572 
 4647      5F617272 
 4647      617900
 4648              	.LASF50:
 4649 009b 6D61696E 		.ascii	"maintain_array\000"
 4649      7461696E 
 4649      5F617272 
 4649      617900
 4650              	.LASF123:
 4651 00aa 73686F75 		.ascii	"shoulder_state\000"
 4651      6C646572 
 4651      5F737461 
 4651      746500
 4652              	.LASF127:
 4653 00b9 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 4653      73657273 
 4653      5C53616D 
 4653      75656C5C 
 4653      446F6375 
 4654 00e7 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 4654      5C61726D 
 4654      5F636F6E 
 4654      74726F6C 
 4654      6C65725F 
 4655 0117 00       		.ascii	"\000"
 4656              	.LASF26:
 4657 0118 726F7461 		.ascii	"rotate_start\000"
 4657      74655F73 
 4657      74617274 
 4657      00
 4658              	.LASF82:
 4659 0125 73706565 		.ascii	"speed\000"
 4659      6400
 4660              	.LASF105:
 4661 012b 656C6277 		.ascii	"elbw_arr_cspot\000"
 4661      5F617272 
 4661      5F637370 
 4661      6F7400
 4662              	.LASF19:
 4663 013a 74696C74 		.ascii	"tilt_start\000"
 4663      5F737461 
 4663      727400
 4664              	.LASF59:
 4665 0145 706F735F 		.ascii	"pos_to_vel\000"
 4665      746F5F76 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 103


 4665      656C00
 4666              	.LASF122:
 4667 0150 656C626F 		.ascii	"elbow_state\000"
 4667      775F7374 
 4667      61746500 
 4668              	.LASF14:
 4669 015c 666C6F61 		.ascii	"float\000"
 4669      7400
 4670              	.LASF43:
 4671 0162 42415F69 		.ascii	"BA_init\000"
 4671      6E697400 
 4672              	.LASF58:
 4673 016a 696E6465 		.ascii	"index\000"
 4673      7800
 4674              	.LASF7:
 4675 0170 6C6F6E67 		.ascii	"long long unsigned int\000"
 4675      206C6F6E 
 4675      6720756E 
 4675      7369676E 
 4675      65642069 
 4676              	.LASF76:
 4677 0187 53657276 		.ascii	"ServoGoalPosition\000"
 4677      6F476F61 
 4677      6C506F73 
 4677      6974696F 
 4677      6E00
 4678              	.LASF119:
 4679 0199 74696D65 		.ascii	"timerFlag\000"
 4679      72466C61 
 4679      6700
 4680              	.LASF86:
 4681 01a3 73686F75 		.ascii	"shoulder\000"
 4681      6C646572 
 4681      00
 4682              	.LASF65:
 4683 01ac 62797465 		.ascii	"byte1\000"
 4683      3100
 4684              	.LASF66:
 4685 01b2 62797465 		.ascii	"byte2\000"
 4685      3200
 4686              	.LASF93:
 4687 01b8 636F756E 		.ascii	"counter\000"
 4687      74657200 
 4688              	.LASF67:
 4689 01c0 74656D70 		.ascii	"temp1\000"
 4689      3100
 4690              	.LASF68:
 4691 01c6 74656D70 		.ascii	"temp2\000"
 4691      3200
 4692              	.LASF69:
 4693 01cc 74656D70 		.ascii	"temp3\000"
 4693      3300
 4694              	.LASF90:
 4695 01d2 696E6974 		.ascii	"initialize\000"
 4695      69616C69 
 4695      7A6500
 4696              	.LASF101:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 104


 4697 01dd 636F6465 		.ascii	"code_time\000"
 4697      5F74696D 
 4697      6500
 4698              	.LASF85:
 4699 01e7 656C626F 		.ascii	"elbow\000"
 4699      7700
 4700              	.LASF104:
 4701 01ed 74657374 		.ascii	"test_array\000"
 4701      5F617272 
 4701      617900
 4702              	.LASF111:
 4703 01f8 57525F61 		.ascii	"WR_arr_cspot\000"
 4703      72725F63 
 4703      73706F74 
 4703      00
 4704              	.LASF52:
 4705 0205 53495A45 		.ascii	"SIZE\000"
 4705      00
 4706              	.LASF40:
 4707 020a 73686C64 		.ascii	"shldr_wait\000"
 4707      725F7761 
 4707      697400
 4708              	.LASF102:
 4709 0215 64617461 		.ascii	"data_array\000"
 4709      5F617272 
 4709      617900
 4710              	.LASF60:
 4711 0220 6375725F 		.ascii	"cur_pos\000"
 4711      706F7300 
 4712              	.LASF114:
 4713 0228 57525F46 		.ascii	"WR_FLAG\000"
 4713      4C414700 
 4714              	.LASF16:
 4715 0230 63686172 		.ascii	"char\000"
 4715      00
 4716              	.LASF55:
 4717 0235 6172725F 		.ascii	"arr_pos\000"
 4717      706F7300 
 4718              	.LASF10:
 4719 023d 75696E74 		.ascii	"uint16\000"
 4719      313600
 4720              	.LASF80:
 4721 0244 746F7271 		.ascii	"torque\000"
 4721      756500
 4722              	.LASF12:
 4723 024b 696E7438 		.ascii	"int8\000"
 4723      00
 4724              	.LASF72:
 4725 0250 66656564 		.ascii	"feedback\000"
 4725      6261636B 
 4725      00
 4726              	.LASF117:
 4727 0259 42415F46 		.ascii	"BA_FLAG\000"
 4727      4C414700 
 4728              	.LASF18:
 4729 0261 74696D65 		.ascii	"time_t\000"
 4729      5F7400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 105


 4730              	.LASF38:
 4731 0268 73686C64 		.ascii	"shldr_init\000"
 4731      725F696E 
 4731      697400
 4732              	.LASF6:
 4733 0273 6C6F6E67 		.ascii	"long long int\000"
 4733      206C6F6E 
 4733      6720696E 
 4733      7400
 4734              	.LASF36:
 4735 0281 73686F75 		.ascii	"shoulder_states\000"
 4735      6C646572 
 4735      5F737461 
 4735      74657300 
 4736              	.LASF51:
 4737 0291 63706F73 		.ascii	"cpos\000"
 4737      00
 4738              	.LASF25:
 4739 0296 77726973 		.ascii	"wristRotate_states\000"
 4739      74526F74 
 4739      6174655F 
 4739      73746174 
 4739      657300
 4740              	.LASF56:
 4741 02a9 73697A65 		.ascii	"size\000"
 4741      00
 4742              	.LASF11:
 4743 02ae 75696E74 		.ascii	"uint32\000"
 4743      333200
 4744              	.LASF113:
 4745 02b5 57545F46 		.ascii	"WT_FLAG\000"
 4745      4C414700 
 4746              	.LASF63:
 4747 02bd 6D616B65 		.ascii	"make_command\000"
 4747      5F636F6D 
 4747      6D616E64 
 4747      00
 4748              	.LASF83:
 4749 02ca 77726973 		.ascii	"wristTilt\000"
 4749      7454696C 
 4749      7400
 4750              	.LASF116:
 4751 02d4 53484F55 		.ascii	"SHOULDER_FLAG\000"
 4751      4C444552 
 4751      5F464C41 
 4751      4700
 4752              	.LASF32:
 4753 02e2 656C6277 		.ascii	"elbw_start\000"
 4753      5F737461 
 4753      727400
 4754              	.LASF120:
 4755 02ed 77726973 		.ascii	"wristTilt_state\000"
 4755      7454696C 
 4755      745F7374 
 4755      61746500 
 4756              	.LASF54:
 4757 02fd 61727261 		.ascii	"array\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 106


 4757      7900
 4758              	.LASF107:
 4759 0303 73686C64 		.ascii	"shldr_arr_cspot\000"
 4759      725F6172 
 4759      725F6373 
 4759      706F7400 
 4760              	.LASF88:
 4761 0313 42415F61 		.ascii	"BA_arr_cspot\000"
 4761      72725F63 
 4761      73706F74 
 4761      00
 4762              	.LASF57:
 4763 0320 6368616E 		.ascii	"change\000"
 4763      676500
 4764              	.LASF71:
 4765 0327 6368616E 		.ascii	"channel\000"
 4765      6E656C00 
 4766              	.LASF70:
 4767 032f 706F7446 		.ascii	"potFeedback\000"
 4767      65656462 
 4767      61636B00 
 4768              	.LASF61:
 4769 033b 41525241 		.ascii	"ARRAY_SIZE\000"
 4769      595F5349 
 4769      5A4500
 4770              	.LASF109:
 4771 0346 57545F61 		.ascii	"WT_arr_cspot\000"
 4771      72725F63 
 4771      73706F74 
 4771      00
 4772              	.LASF28:
 4773 0353 726F7461 		.ascii	"rotate_control\000"
 4773      74655F63 
 4773      6F6E7472 
 4773      6F6C00
 4774              	.LASF2:
 4775 0362 73686F72 		.ascii	"short int\000"
 4775      7420696E 
 4775      7400
 4776              	.LASF124:
 4777 036c 62617365 		.ascii	"baseAzimuth_state\000"
 4777      417A696D 
 4777      7574685F 
 4777      73746174 
 4777      6500
 4778              	.LASF46:
 4779 037e 61765F61 		.ascii	"av_array\000"
 4779      72726179 
 4779      00
 4780              	.LASF4:
 4781 0387 6C6F6E67 		.ascii	"long int\000"
 4781      20696E74 
 4781      00
 4782              	.LASF21:
 4783 0390 74696C74 		.ascii	"tilt_control\000"
 4783      5F636F6E 
 4783      74726F6C 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 107


 4783      00
 4784              	.LASF75:
 4785 039d 74696D65 		.ascii	"timer_isr\000"
 4785      725F6973 
 4785      7200
 4786              	.LASF121:
 4787 03a7 77726973 		.ascii	"wristRotate_state\000"
 4787      74526F74 
 4787      6174655F 
 4787      73746174 
 4787      6500
 4788              	.LASF45:
 4789 03b9 42415F77 		.ascii	"BA_wait\000"
 4789      61697400 
 4790              	.LASF94:
 4791 03c1 64697265 		.ascii	"direction\000"
 4791      6374696F 
 4791      6E00
 4792              	.LASF24:
 4793 03cb 77726973 		.ascii	"wristTilt_states\000"
 4793      7454696C 
 4793      745F7374 
 4793      61746573 
 4793      00
 4794              	.LASF103:
 4795 03dc 77697A6E 		.ascii	"wiznet\000"
 4795      657400
 4796              	.LASF53:
 4797 03e3 63686563 		.ascii	"check_update\000"
 4797      6B5F7570 
 4797      64617465 
 4797      00
 4798              	.LASF23:
 4799 03f0 74696C74 		.ascii	"tilt_feedback\000"
 4799      5F666565 
 4799      64626163 
 4799      6B00
 4800              	.LASF81:
 4801 03fe 53657276 		.ascii	"ServoSpeed\000"
 4801      6F537065 
 4801      656400
 4802              	.LASF73:
 4803 0409 73656E64 		.ascii	"send_feedback\000"
 4803      5F666565 
 4803      64626163 
 4803      6B00
 4804              	.LASF17:
 4805 0417 73697A65 		.ascii	"sizetype\000"
 4805      74797065 
 4805      00
 4806              	.LASF5:
 4807 0420 6C6F6E67 		.ascii	"long unsigned int\000"
 4807      20756E73 
 4807      69676E65 
 4807      6420696E 
 4807      7400
 4808              	.LASF34:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 108


 4809 0432 656C6277 		.ascii	"elbw_execute\000"
 4809      5F657865 
 4809      63757465 
 4809      00
 4810              	.LASF89:
 4811 043f 62617365 		.ascii	"baseAz_array\000"
 4811      417A5F61 
 4811      72726179 
 4811      00
 4812              	.LASF29:
 4813 044c 726F7461 		.ascii	"rotate_wait\000"
 4813      74655F77 
 4813      61697400 
 4814              	.LASF99:
 4815 0458 7365636F 		.ascii	"second_count\000"
 4815      6E645F63 
 4815      6F756E74 
 4815      00
 4816              	.LASF37:
 4817 0465 73686C64 		.ascii	"shldr_start\000"
 4817      725F7374 
 4817      61727400 
 4818              	.LASF64:
 4819 0471 696E666F 		.ascii	"info_array\000"
 4819      5F617272 
 4819      617900
 4820              	.LASF1:
 4821 047c 756E7369 		.ascii	"unsigned char\000"
 4821      676E6564 
 4821      20636861 
 4821      7200
 4822              	.LASF74:
 4823 048a 66696C6C 		.ascii	"fill_data_array\000"
 4823      5F646174 
 4823      615F6172 
 4823      72617900 
 4824              	.LASF84:
 4825 049a 77726973 		.ascii	"wristRotate\000"
 4825      74526F74 
 4825      61746500 
 4826              	.LASF97:
 4827 04a6 696E6372 		.ascii	"increasing\000"
 4827      65617369 
 4827      6E6700
 4828              	.LASF106:
 4829 04b1 656C626F 		.ascii	"elbow_array\000"
 4829      775F6172 
 4829      72617900 
 4830              	.LASF39:
 4831 04bd 73686C64 		.ascii	"shldr_execute\000"
 4831      725F6578 
 4831      65637574 
 4831      6500
 4832              	.LASF27:
 4833 04cb 726F7461 		.ascii	"rotate_init\000"
 4833      74655F69 
 4833      6E697400 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 109


 4834              	.LASF125:
 4835 04d7 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 4835      4320342E 
 4835      382E3420 
 4835      32303134 
 4835      30353236 
 4836 050a 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 4836      20726576 
 4836      6973696F 
 4836      6E203231 
 4836      31333538 
 4837 053d 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 4837      74643D67 
 4837      6E753939 
 4837      202D6666 
 4837      756E6374 
 4838              	.LASF62:
 4839 055e 636F6D6D 		.ascii	"command\000"
 4839      616E6400 
 4840              	.LASF95:
 4841 0566 42415F63 		.ascii	"BA_cspot\000"
 4841      73706F74 
 4841      00
 4842              	.LASF100:
 4843 056f 74656D70 		.ascii	"temp_code_time\000"
 4843      5F636F64 
 4843      655F7469 
 4843      6D6500
 4844              	.LASF118:
 4845 057e 74656D70 		.ascii	"temp_val\000"
 4845      5F76616C 
 4845      00
 4846              	.LASF0:
 4847 0587 7369676E 		.ascii	"signed char\000"
 4847      65642063 
 4847      68617200 
 4848              	.LASF49:
 4849 0593 61766572 		.ascii	"average\000"
 4849      61676500 
 4850              	.LASF3:
 4851 059b 73686F72 		.ascii	"short unsigned int\000"
 4851      7420756E 
 4851      7369676E 
 4851      65642069 
 4851      6E7400
 4852              	.LASF35:
 4853 05ae 656C6277 		.ascii	"elbw_wait\000"
 4853      5F776169 
 4853      7400
 4854              	.LASF91:
 4855 05b8 6D61696E 		.ascii	"main\000"
 4855      00
 4856              	.LASF96:
 4857 05bd 42415F61 		.ascii	"BA_array\000"
 4857      72726179 
 4857      00
 4858              	.LASF22:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccEHsIEO.s 			page 110


 4859 05c6 74696C74 		.ascii	"tilt_wait\000"
 4859      5F776169 
 4859      7400
 4860              	.LASF112:
 4861 05d0 57525F61 		.ascii	"WR_array\000"
 4861      72726179 
 4861      00
 4862              	.LASF9:
 4863 05d9 75696E74 		.ascii	"uint8\000"
 4863      3800
 4864              	.LASF15:
 4865 05df 646F7562 		.ascii	"double\000"
 4865      6C6500
 4866              	.LASF115:
 4867 05e6 454C424F 		.ascii	"ELBOW_FLAG\000"
 4867      575F464C 
 4867      414700
 4868              	.LASF77:
 4869 05f1 73657276 		.ascii	"servoID\000"
 4869      6F494400 
 4870              	.LASF48:
 4871 05f9 6973725F 		.ascii	"isr_var\000"
 4871      76617200 
 4872              	.LASF92:
 4873 0601 74696D65 		.ascii	"time_array\000"
 4873      5F617272 
 4873      617900
 4874              	.LASF79:
 4875 060c 53657453 		.ascii	"SetServoTorque\000"
 4875      6572766F 
 4875      546F7271 
 4875      756500
 4876              	.LASF78:
 4877 061b 706F7369 		.ascii	"position\000"
 4877      74696F6E 
 4877      00
 4878              	.LASF126:
 4879 0624 2E5C6D61 		.ascii	".\\main.c\000"
 4879      696E2E63 
 4879      00
 4880              	.LASF33:
 4881 062d 656C6277 		.ascii	"elbw_init\000"
 4881      5F696E69 
 4881      7400
 4882              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

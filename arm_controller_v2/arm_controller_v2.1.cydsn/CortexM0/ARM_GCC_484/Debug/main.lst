ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	feedback_count,2,2
  29              		.comm	timerFlag,1,1
  30              		.section	.text.timer_isr,"ax",%progbits
  31              		.align	2
  32              		.global	timer_isr
  33              		.code	16
  34              		.thumb_func
  35              		.type	timer_isr, %function
  36              	timer_isr:
  37              	.LFB33:
  38              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define ELBOW_UPPER_BOUND 1000
  14:.\main.c      **** #define ELBOW_LOWER_BOUND 100
  15:.\main.c      **** #define SHOULDER_UPPER_BOUND 64000
  16:.\main.c      **** #define SHOULDER_LOWER_BOUND 0
  17:.\main.c      **** #define SHOULDER_POT 0
  18:.\main.c      **** #define ELBOW_POT 1
  19:.\main.c      **** #define DATA_ARRAY_SIZE 14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 2


  20:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  21:.\main.c      **** 
  22:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  23:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  24:.\main.c      **** 
  25:.\main.c      **** #define NUM_OF_SM 2
  26:.\main.c      **** uint8 fin_exec; //counts
  27:.\main.c      **** 
  28:.\main.c      **** #define TEST_ARRAY_SIZE 10
  29:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  30:.\main.c      **** 
  31:.\main.c      **** #define ELBW_ARR_SIZE 20
  32:.\main.c      **** uint8 elbw_arr_cspot;
  33:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  34:.\main.c      **** 
  35:.\main.c      **** #define SHLDR_ARR_SIZE 20
  36:.\main.c      **** uint8 shldr_arr_cspot;
  37:.\main.c      **** uint16 shoulder_array[SHLDR_ARR_SIZE];
  38:.\main.c      **** 
  39:.\main.c      **** #define BA_ARR_SIZE 20
  40:.\main.c      **** uint8 BA_arr_cspot;
  41:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  42:.\main.c      **** 
  43:.\main.c      **** uint16 feedback_count;
  44:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  45:.\main.c      **** 
  46:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  47:.\main.c      **** ///set to the time of the longest path for our code
  48:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  49:.\main.c      **** CY_ISR(timer_isr)
  50:.\main.c      **** {
  39              		.loc 1 50 0
  40              		.cfi_startproc
  41 0000 80B5     		push	{r7, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 82B0     		sub	sp, sp, #8
  46              		.cfi_def_cfa_offset 16
  47 0004 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  51:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  49              		.loc 1 51 0
  50 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  51 000a 031C     		mov	r3, r0
  52 000c 7B60     		str	r3, [r7, #4]
  52:.\main.c      ****     timerFlag = 1;
  53              		.loc 1 52 0
  54 000e 054B     		ldr	r3, .L2
  55 0010 0122     		mov	r2, #1
  56 0012 1A70     		strb	r2, [r3]
  53:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  57              		.loc 1 53 0
  58 0014 7B68     		ldr	r3, [r7, #4]
  59 0016 181C     		mov	r0, r3
  60 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  54:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 3


  61              		.loc 1 54 0
  62 001c BD46     		mov	sp, r7
  63 001e 02B0     		add	sp, sp, #8
  64              		@ sp needed
  65 0020 80BD     		pop	{r7, pc}
  66              	.L3:
  67 0022 C046     		.align	2
  68              	.L2:
  69 0024 00000000 		.word	timerFlag
  70              		.cfi_endproc
  71              	.LFE33:
  72              		.size	timer_isr, .-timer_isr
  73              		.section	.text.reverse,"ax",%progbits
  74              		.align	2
  75              		.global	reverse
  76              		.code	16
  77              		.thumb_func
  78              		.type	reverse, %function
  79              	reverse:
  80              	.LFB34:
  55:.\main.c      **** 
  56:.\main.c      **** 
  57:.\main.c      **** //Funtion declarations/definitions
  58:.\main.c      **** //TODO do we need to make a header for good practice?
  59:.\main.c      **** 
  60:.\main.c      **** //---------------------------------------------------
  61:.\main.c      **** //    Function stubs for the header
  62:.\main.c      **** //---------------------------------------------------
  63:.\main.c      **** void fill_data_array();
  64:.\main.c      **** void baseAzimuth();
  65:.\main.c      **** void shoulder();
  66:.\main.c      **** void elbow();
  67:.\main.c      **** void wristTilt();
  68:.\main.c      **** void wristRotate();
  69:.\main.c      **** void send_feedback();
  70:.\main.c      **** uint16 potFeedback();
  71:.\main.c      **** //--------------------------------------------------- END Function Stubs
  72:.\main.c      **** 
  73:.\main.c      **** // function to convert int to string
  74:.\main.c      **** void reverse(char s[])
  75:.\main.c      ****  {
  81              		.loc 1 75 0
  82              		.cfi_startproc
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 86B0     		sub	sp, sp, #24
  88              		.cfi_def_cfa_offset 32
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  91 0006 7860     		str	r0, [r7, #4]
  76:.\main.c      ****      int i, j;
  77:.\main.c      ****      char c;
  78:.\main.c      ****  
  79:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  92              		.loc 1 79 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 4


  93 0008 0023     		mov	r3, #0
  94 000a 7B61     		str	r3, [r7, #20]
  95 000c 7B68     		ldr	r3, [r7, #4]
  96 000e 181C     		mov	r0, r3
  97 0010 FFF7FEFF 		bl	strlen
  98 0014 031C     		mov	r3, r0
  99 0016 013B     		sub	r3, r3, #1
 100 0018 3B61     		str	r3, [r7, #16]
 101 001a 1BE0     		b	.L5
 102              	.L6:
  80:.\main.c      ****          c = s[i];
 103              		.loc 1 80 0 discriminator 2
 104 001c 7B69     		ldr	r3, [r7, #20]
 105 001e 7A68     		ldr	r2, [r7, #4]
 106 0020 D218     		add	r2, r2, r3
 107 0022 3B1C     		mov	r3, r7
 108 0024 0F33     		add	r3, r3, #15
 109 0026 1278     		ldrb	r2, [r2]
 110 0028 1A70     		strb	r2, [r3]
  81:.\main.c      ****          s[i] = s[j];
 111              		.loc 1 81 0 discriminator 2
 112 002a 7B69     		ldr	r3, [r7, #20]
 113 002c 7A68     		ldr	r2, [r7, #4]
 114 002e D318     		add	r3, r2, r3
 115 0030 3A69     		ldr	r2, [r7, #16]
 116 0032 7968     		ldr	r1, [r7, #4]
 117 0034 8A18     		add	r2, r1, r2
 118 0036 1278     		ldrb	r2, [r2]
 119 0038 1A70     		strb	r2, [r3]
  82:.\main.c      ****          s[j] = c;
 120              		.loc 1 82 0 discriminator 2
 121 003a 3B69     		ldr	r3, [r7, #16]
 122 003c 7A68     		ldr	r2, [r7, #4]
 123 003e D318     		add	r3, r2, r3
 124 0040 3A1C     		mov	r2, r7
 125 0042 0F32     		add	r2, r2, #15
 126 0044 1278     		ldrb	r2, [r2]
 127 0046 1A70     		strb	r2, [r3]
  79:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 128              		.loc 1 79 0 discriminator 2
 129 0048 7B69     		ldr	r3, [r7, #20]
 130 004a 0133     		add	r3, r3, #1
 131 004c 7B61     		str	r3, [r7, #20]
 132 004e 3B69     		ldr	r3, [r7, #16]
 133 0050 013B     		sub	r3, r3, #1
 134 0052 3B61     		str	r3, [r7, #16]
 135              	.L5:
  79:.\main.c      ****      for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 136              		.loc 1 79 0 is_stmt 0 discriminator 1
 137 0054 7A69     		ldr	r2, [r7, #20]
 138 0056 3B69     		ldr	r3, [r7, #16]
 139 0058 9A42     		cmp	r2, r3
 140 005a DFDB     		blt	.L6
  83:.\main.c      ****      }
  84:.\main.c      ****  }
 141              		.loc 1 84 0 is_stmt 1
 142 005c BD46     		mov	sp, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 5


 143 005e 06B0     		add	sp, sp, #24
 144              		@ sp needed
 145 0060 80BD     		pop	{r7, pc}
 146              		.cfi_endproc
 147              	.LFE34:
 148              		.size	reverse, .-reverse
 149              		.global	__aeabi_idivmod
 150              		.global	__aeabi_idiv
 151              		.section	.text.itoa,"ax",%progbits
 152              		.align	2
 153              		.global	itoa
 154              		.code	16
 155              		.thumb_func
 156              		.type	itoa, %function
 157              	itoa:
 158              	.LFB35:
  85:.\main.c      **** /* itoa:  convert n to characters in s */
  86:.\main.c      ****  void itoa(int n, char s[])
  87:.\main.c      ****  {
 159              		.loc 1 87 0
 160              		.cfi_startproc
 161 0000 90B5     		push	{r4, r7, lr}
 162              		.cfi_def_cfa_offset 12
 163              		.cfi_offset 4, -12
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 85B0     		sub	sp, sp, #20
 167              		.cfi_def_cfa_offset 32
 168 0004 00AF     		add	r7, sp, #0
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 171 0008 3960     		str	r1, [r7]
  88:.\main.c      ****      int i, sign;
  89:.\main.c      ****  
  90:.\main.c      ****      if ((sign = n) < 0)  /* record sign */
 172              		.loc 1 90 0
 173 000a 7B68     		ldr	r3, [r7, #4]
 174 000c BB60     		str	r3, [r7, #8]
 175 000e BB68     		ldr	r3, [r7, #8]
 176 0010 002B     		cmp	r3, #0
 177 0012 02DA     		bge	.L8
  91:.\main.c      ****          n = -n;          /* make n positive */
 178              		.loc 1 91 0
 179 0014 7B68     		ldr	r3, [r7, #4]
 180 0016 5B42     		neg	r3, r3
 181 0018 7B60     		str	r3, [r7, #4]
 182              	.L8:
  92:.\main.c      ****      i = 0;
 183              		.loc 1 92 0
 184 001a 0023     		mov	r3, #0
 185 001c FB60     		str	r3, [r7, #12]
 186              	.L9:
  93:.\main.c      ****      do {       /* generate digits in reverse order */
  94:.\main.c      ****          s[i++] = n % 10 + '0';   /* get next digit */
 187              		.loc 1 94 0 discriminator 1
 188 001e FB68     		ldr	r3, [r7, #12]
 189 0020 5A1C     		add	r2, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 6


 190 0022 FA60     		str	r2, [r7, #12]
 191 0024 3A68     		ldr	r2, [r7]
 192 0026 D418     		add	r4, r2, r3
 193 0028 7B68     		ldr	r3, [r7, #4]
 194 002a 181C     		mov	r0, r3
 195 002c 0A21     		mov	r1, #10
 196 002e FFF7FEFF 		bl	__aeabi_idivmod
 197 0032 0B1C     		mov	r3, r1
 198 0034 DBB2     		uxtb	r3, r3
 199 0036 3033     		add	r3, r3, #48
 200 0038 DBB2     		uxtb	r3, r3
 201 003a 2370     		strb	r3, [r4]
  95:.\main.c      ****      } while ((n /= 10) > 0);     /* delete it */
 202              		.loc 1 95 0 discriminator 1
 203 003c 7B68     		ldr	r3, [r7, #4]
 204 003e 181C     		mov	r0, r3
 205 0040 0A21     		mov	r1, #10
 206 0042 FFF7FEFF 		bl	__aeabi_idiv
 207 0046 031C     		mov	r3, r0
 208 0048 7B60     		str	r3, [r7, #4]
 209 004a 7B68     		ldr	r3, [r7, #4]
 210 004c 002B     		cmp	r3, #0
 211 004e E6DC     		bgt	.L9
  96:.\main.c      ****      if (sign < 0)
 212              		.loc 1 96 0
 213 0050 BB68     		ldr	r3, [r7, #8]
 214 0052 002B     		cmp	r3, #0
 215 0054 06DA     		bge	.L10
  97:.\main.c      ****          s[i++] = '-';
 216              		.loc 1 97 0
 217 0056 FB68     		ldr	r3, [r7, #12]
 218 0058 5A1C     		add	r2, r3, #1
 219 005a FA60     		str	r2, [r7, #12]
 220 005c 3A68     		ldr	r2, [r7]
 221 005e D318     		add	r3, r2, r3
 222 0060 2D22     		mov	r2, #45
 223 0062 1A70     		strb	r2, [r3]
 224              	.L10:
  98:.\main.c      ****      s[i] = '\0';
 225              		.loc 1 98 0
 226 0064 FB68     		ldr	r3, [r7, #12]
 227 0066 3A68     		ldr	r2, [r7]
 228 0068 D318     		add	r3, r2, r3
 229 006a 0022     		mov	r2, #0
 230 006c 1A70     		strb	r2, [r3]
  99:.\main.c      ****      reverse(s);
 231              		.loc 1 99 0
 232 006e 3B68     		ldr	r3, [r7]
 233 0070 181C     		mov	r0, r3
 234 0072 FFF7FEFF 		bl	reverse
 100:.\main.c      ****  }
 235              		.loc 1 100 0
 236 0076 BD46     		mov	sp, r7
 237 0078 05B0     		add	sp, sp, #20
 238              		@ sp needed
 239 007a 90BD     		pop	{r4, r7, pc}
 240              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 7


 241              	.LFE35:
 242              		.size	itoa, .-itoa
 243              		.section	.text.potFeedback,"ax",%progbits
 244              		.align	2
 245              		.global	potFeedback
 246              		.code	16
 247              		.thumb_func
 248              		.type	potFeedback, %function
 249              	potFeedback:
 250              	.LFB36:
 101:.\main.c      **** 
 102:.\main.c      **** 
 103:.\main.c      **** 
 104:.\main.c      **** uint16 potFeedback(uint32 channel){
 251              		.loc 1 104 0
 252              		.cfi_startproc
 253 0000 80B5     		push	{r7, lr}
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 84B0     		sub	sp, sp, #16
 258              		.cfi_def_cfa_offset 24
 259 0004 00AF     		add	r7, sp, #0
 260              		.cfi_def_cfa_register 7
 261 0006 7860     		str	r0, [r7, #4]
 105:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 262              		.loc 1 105 0
 263 0008 7B68     		ldr	r3, [r7, #4]
 264 000a 181C     		mov	r0, r3
 265 000c FFF7FEFF 		bl	ADC_GetResult16
 266 0010 031C     		mov	r3, r0
 267 0012 1A1C     		mov	r2, r3
 268 0014 3B1C     		mov	r3, r7
 269 0016 0E33     		add	r3, r3, #14
 270 0018 1A80     		strh	r2, [r3]
 106:.\main.c      ****     return feedback;
 271              		.loc 1 106 0
 272 001a 3B1C     		mov	r3, r7
 273 001c 0E33     		add	r3, r3, #14
 274 001e 1B88     		ldrh	r3, [r3]
 107:.\main.c      **** }
 275              		.loc 1 107 0
 276 0020 181C     		mov	r0, r3
 277 0022 BD46     		mov	sp, r7
 278 0024 04B0     		add	sp, sp, #16
 279              		@ sp needed
 280 0026 80BD     		pop	{r7, pc}
 281              		.cfi_endproc
 282              	.LFE36:
 283              		.size	potFeedback, .-potFeedback
 284              		.section	.text.fill_data_array,"ax",%progbits
 285              		.align	2
 286              		.global	fill_data_array
 287              		.code	16
 288              		.thumb_func
 289              		.type	fill_data_array, %function
 290              	fill_data_array:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 8


 291              	.LFB37:
 108:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 109:.\main.c      **** void fill_data_array()
 110:.\main.c      **** {
 292              		.loc 1 110 0
 293              		.cfi_startproc
 294 0000 80B5     		push	{r7, lr}
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 82B0     		sub	sp, sp, #8
 299              		.cfi_def_cfa_offset 16
 300 0004 00AF     		add	r7, sp, #0
 301              		.cfi_def_cfa_register 7
 111:.\main.c      ****     uint8 i = 0;
 302              		.loc 1 111 0
 303 0006 FB1D     		add	r3, r7, #7
 304 0008 0022     		mov	r2, #0
 305 000a 1A70     		strb	r2, [r3]
 112:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 306              		.loc 1 112 0
 307 000c FB1D     		add	r3, r7, #7
 308 000e 0022     		mov	r2, #0
 309 0010 1A70     		strb	r2, [r3]
 310 0012 0FE0     		b	.L14
 311              	.L15:
 113:.\main.c      ****     {
 114:.\main.c      ****         data_array[i] = test_array[i];
 312              		.loc 1 114 0 discriminator 2
 313 0014 FB1D     		add	r3, r7, #7
 314 0016 1A78     		ldrb	r2, [r3]
 315 0018 FB1D     		add	r3, r7, #7
 316 001a 1978     		ldrb	r1, [r3]
 317 001c 094B     		ldr	r3, .L16
 318 001e 4900     		lsl	r1, r1, #1
 319 0020 CB5A     		ldrh	r3, [r1, r3]
 320 0022 99B2     		uxth	r1, r3
 321 0024 084B     		ldr	r3, .L16+4
 322 0026 5200     		lsl	r2, r2, #1
 323 0028 D152     		strh	r1, [r2, r3]
 112:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 324              		.loc 1 112 0 discriminator 2
 325 002a FB1D     		add	r3, r7, #7
 326 002c 1A78     		ldrb	r2, [r3]
 327 002e FB1D     		add	r3, r7, #7
 328 0030 0132     		add	r2, r2, #1
 329 0032 1A70     		strb	r2, [r3]
 330              	.L14:
 112:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 331              		.loc 1 112 0 is_stmt 0 discriminator 1
 332 0034 FB1D     		add	r3, r7, #7
 333 0036 1B78     		ldrb	r3, [r3]
 334 0038 092B     		cmp	r3, #9
 335 003a EBD9     		bls	.L15
 115:.\main.c      ****     }
 116:.\main.c      **** }
 336              		.loc 1 116 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 9


 337 003c BD46     		mov	sp, r7
 338 003e 02B0     		add	sp, sp, #8
 339              		@ sp needed
 340 0040 80BD     		pop	{r7, pc}
 341              	.L17:
 342 0042 C046     		.align	2
 343              	.L16:
 344 0044 00000000 		.word	test_array
 345 0048 00000000 		.word	data_array
 346              		.cfi_endproc
 347              	.LFE37:
 348              		.size	fill_data_array, .-fill_data_array
 349              		.comm	wristTilt_state,1,1
 350              		.section	.text.wristTilt,"ax",%progbits
 351              		.align	2
 352              		.global	wristTilt
 353              		.code	16
 354              		.thumb_func
 355              		.type	wristTilt, %function
 356              	wristTilt:
 357              	.LFB38:
 117:.\main.c      **** 
 118:.\main.c      **** 
 119:.\main.c      **** 
 120:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 121:.\main.c      **** //control the tilting motion of the wrist
 122:.\main.c      **** void wristTilt()
 123:.\main.c      **** {
 358              		.loc 1 123 0
 359              		.cfi_startproc
 360 0000 80B5     		push	{r7, lr}
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 00AF     		add	r7, sp, #0
 365              		.cfi_def_cfa_register 7
 124:.\main.c      ****     // Overview
 125:.\main.c      ****     //take instruction from data_array
 126:.\main.c      ****     //smooth input
 127:.\main.c      ****     //actuate the tilting using UART
 128:.\main.c      ****     //get feedback
 129:.\main.c      **** 
 130:.\main.c      ****     //-------------------------- 
 131:.\main.c      ****     // Dynamixel Servo specific
 132:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 133:.\main.c      ****     // TODO: Set the desired position
 134:.\main.c      **** 
 135:.\main.c      ****     //--------------------------
 136:.\main.c      ****     // State machine
 137:.\main.c      ****     
 138:.\main.c      ****         // Action
 139:.\main.c      ****     switch(wristTilt_state)
 366              		.loc 1 139 0
 367 0004 0F4B     		ldr	r3, .L34
 368 0006 1B78     		ldrb	r3, [r3]
 369 0008 012B     		cmp	r3, #1
 370 000a 06D0     		beq	.L31
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 10


 371 000c 07DC     		bgt	.L32
 372 000e 002B     		cmp	r3, #0
 373 0010 06D1     		bne	.L19
 140:.\main.c      ****     {
 141:.\main.c      ****         case tilt_init:
 142:.\main.c      ****             wristTilt_state = tilt_start;
 374              		.loc 1 142 0
 375 0012 0C4B     		ldr	r3, .L34
 376 0014 0122     		mov	r2, #1
 377 0016 1A70     		strb	r2, [r3]
 143:.\main.c      ****             break;
 378              		.loc 1 143 0
 379 0018 02E0     		b	.L19
 380              	.L31:
 144:.\main.c      ****         case tilt_start:
 145:.\main.c      ****             // Set the torque - this is a one time thing
 146:.\main.c      ****             // Set the speed - I think this is a one time thing
 147:.\main.c      ****             break;
 381              		.loc 1 147 0
 382 001a C046     		mov	r8, r8
 383 001c 00E0     		b	.L19
 384              	.L32:
 148:.\main.c      ****         case tilt_control:
 149:.\main.c      ****             break;
 385              		.loc 1 149 0
 386 001e C046     		mov	r8, r8
 387              	.L19:
 150:.\main.c      ****         case tilt_feedback:
 151:.\main.c      ****             break;
 152:.\main.c      ****     }
 153:.\main.c      ****         // Transistion
 154:.\main.c      ****     switch(wristTilt_state)
 388              		.loc 1 154 0
 389 0020 084B     		ldr	r3, .L34
 390 0022 1B78     		ldrb	r3, [r3]
 391 0024 012B     		cmp	r3, #1
 392 0026 06D0     		beq	.L26
 393 0028 09DC     		bgt	.L33
 394 002a 002B     		cmp	r3, #0
 395 002c 08D1     		bne	.L18
 155:.\main.c      ****     {
 156:.\main.c      ****         case tilt_init:
 157:.\main.c      ****             wristTilt_state = tilt_start;
 396              		.loc 1 157 0
 397 002e 054B     		ldr	r3, .L34
 398 0030 0122     		mov	r2, #1
 399 0032 1A70     		strb	r2, [r3]
 158:.\main.c      ****             break;
 400              		.loc 1 158 0
 401 0034 04E0     		b	.L18
 402              	.L26:
 159:.\main.c      ****         case tilt_start:
 160:.\main.c      ****             wristTilt_state = tilt_control;
 403              		.loc 1 160 0
 404 0036 034B     		ldr	r3, .L34
 405 0038 0222     		mov	r2, #2
 406 003a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 11


 161:.\main.c      ****             break;
 407              		.loc 1 161 0
 408 003c 00E0     		b	.L18
 409              	.L33:
 162:.\main.c      ****         case tilt_control:
 163:.\main.c      ****             break;
 410              		.loc 1 163 0
 411 003e C046     		mov	r8, r8
 412              	.L18:
 164:.\main.c      ****         case tilt_feedback:
 165:.\main.c      ****             break;
 166:.\main.c      ****     }
 167:.\main.c      **** }
 413              		.loc 1 167 0
 414 0040 BD46     		mov	sp, r7
 415              		@ sp needed
 416 0042 80BD     		pop	{r7, pc}
 417              	.L35:
 418              		.align	2
 419              	.L34:
 420 0044 00000000 		.word	wristTilt_state
 421              		.cfi_endproc
 422              	.LFE38:
 423              		.size	wristTilt, .-wristTilt
 424              		.comm	wristRotate_state,1,1
 425              		.section	.text.wristRotate,"ax",%progbits
 426              		.align	2
 427              		.global	wristRotate
 428              		.code	16
 429              		.thumb_func
 430              		.type	wristRotate, %function
 431              	wristRotate:
 432              	.LFB39:
 168:.\main.c      **** 
 169:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 170:.\main.c      **** //control the rotating motion of the wrist
 171:.\main.c      **** void wristRotate()
 172:.\main.c      **** {
 433              		.loc 1 172 0
 434              		.cfi_startproc
 435 0000 80B5     		push	{r7, lr}
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 7, -8
 438              		.cfi_offset 14, -4
 439 0002 00AF     		add	r7, sp, #0
 440              		.cfi_def_cfa_register 7
 173:.\main.c      ****     //Overview
 174:.\main.c      ****     //take instruction from data_array
 175:.\main.c      ****     //smooth input
 176:.\main.c      ****     //actuate the tilting using UART
 177:.\main.c      ****     //get feedback
 178:.\main.c      **** 
 179:.\main.c      ****     //-------------------------- 
 180:.\main.c      ****     // Dynamixel Servo specific
 181:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 182:.\main.c      ****     // TODO: Set the desired position
 183:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 12


 184:.\main.c      ****     //--------------------------
 185:.\main.c      ****     // State machine
 186:.\main.c      ****     
 187:.\main.c      ****         // Action
 188:.\main.c      ****     switch(wristRotate_state)
 441              		.loc 1 188 0
 442 0004 0F4B     		ldr	r3, .L52
 443 0006 1B78     		ldrb	r3, [r3]
 444 0008 012B     		cmp	r3, #1
 445 000a 06D0     		beq	.L49
 446 000c 07DC     		bgt	.L50
 447 000e 002B     		cmp	r3, #0
 448 0010 06D1     		bne	.L37
 189:.\main.c      ****     {
 190:.\main.c      ****         case rotate_init:
 191:.\main.c      ****             wristRotate_state = rotate_start;
 449              		.loc 1 191 0
 450 0012 0C4B     		ldr	r3, .L52
 451 0014 0122     		mov	r2, #1
 452 0016 1A70     		strb	r2, [r3]
 192:.\main.c      ****             break;
 453              		.loc 1 192 0
 454 0018 02E0     		b	.L37
 455              	.L49:
 193:.\main.c      ****         case rotate_start:
 194:.\main.c      ****             // Set the torque - this is a one time thing
 195:.\main.c      ****             // Set the speed - I think this is a one time thing
 196:.\main.c      ****             break;
 456              		.loc 1 196 0
 457 001a C046     		mov	r8, r8
 458 001c 00E0     		b	.L37
 459              	.L50:
 197:.\main.c      ****         case rotate_control:
 198:.\main.c      ****             break;
 460              		.loc 1 198 0
 461 001e C046     		mov	r8, r8
 462              	.L37:
 199:.\main.c      ****         case rotate_feedback:
 200:.\main.c      ****             break;
 201:.\main.c      ****     }
 202:.\main.c      ****         // Transistion
 203:.\main.c      ****     switch(wristRotate_state)
 463              		.loc 1 203 0
 464 0020 084B     		ldr	r3, .L52
 465 0022 1B78     		ldrb	r3, [r3]
 466 0024 012B     		cmp	r3, #1
 467 0026 06D0     		beq	.L44
 468 0028 09DC     		bgt	.L51
 469 002a 002B     		cmp	r3, #0
 470 002c 08D1     		bne	.L36
 204:.\main.c      ****     {
 205:.\main.c      ****         case rotate_init:
 206:.\main.c      ****             wristRotate_state = rotate_start;
 471              		.loc 1 206 0
 472 002e 054B     		ldr	r3, .L52
 473 0030 0122     		mov	r2, #1
 474 0032 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 13


 207:.\main.c      ****             break;
 475              		.loc 1 207 0
 476 0034 04E0     		b	.L36
 477              	.L44:
 208:.\main.c      ****         case rotate_start:
 209:.\main.c      ****             wristRotate_state = rotate_control;
 478              		.loc 1 209 0
 479 0036 034B     		ldr	r3, .L52
 480 0038 0222     		mov	r2, #2
 481 003a 1A70     		strb	r2, [r3]
 210:.\main.c      ****             break;
 482              		.loc 1 210 0
 483 003c 00E0     		b	.L36
 484              	.L51:
 211:.\main.c      ****         case rotate_control:
 212:.\main.c      ****             break;
 485              		.loc 1 212 0
 486 003e C046     		mov	r8, r8
 487              	.L36:
 213:.\main.c      ****         case rotate_feedback:
 214:.\main.c      ****             break;
 215:.\main.c      ****     }
 216:.\main.c      **** }
 488              		.loc 1 216 0
 489 0040 BD46     		mov	sp, r7
 490              		@ sp needed
 491 0042 80BD     		pop	{r7, pc}
 492              	.L53:
 493              		.align	2
 494              	.L52:
 495 0044 00000000 		.word	wristRotate_state
 496              		.cfi_endproc
 497              	.LFE39:
 498              		.size	wristRotate, .-wristRotate
 499              		.section	.text.send_feedback,"ax",%progbits
 500              		.align	2
 501              		.global	send_feedback
 502              		.code	16
 503              		.thumb_func
 504              		.type	send_feedback, %function
 505              	send_feedback:
 506              	.LFB40:
 217:.\main.c      **** 
 218:.\main.c      **** void send_feedback()
 219:.\main.c      **** {
 507              		.loc 1 219 0
 508              		.cfi_startproc
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 220:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 221:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 222:.\main.c      ****     //TODO define system state
 223:.\main.c      ****     //send packet via serial to wiznet
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 14


 224:.\main.c      **** }
 515              		.loc 1 224 0
 516 0004 BD46     		mov	sp, r7
 517              		@ sp needed
 518 0006 80BD     		pop	{r7, pc}
 519              		.cfi_endproc
 520              	.LFE40:
 521              		.size	send_feedback, .-send_feedback
 522              		.global	__aeabi_uidiv
 523              		.section	.text.average,"ax",%progbits
 524              		.align	2
 525              		.global	average
 526              		.code	16
 527              		.thumb_func
 528              		.type	average, %function
 529              	average:
 530              	.LFB41:
 225:.\main.c      **** 
 226:.\main.c      **** 
 227:.\main.c      **** //Average function to be used in smoothing our input
 228:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 229:.\main.c      **** {
 531              		.loc 1 229 0
 532              		.cfi_startproc
 533 0000 80B5     		push	{r7, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 86B0     		sub	sp, sp, #24
 538              		.cfi_def_cfa_offset 32
 539 0004 00AF     		add	r7, sp, #0
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
 542 0008 0A1C     		mov	r2, r1
 543 000a FB1C     		add	r3, r7, #3
 544 000c 1A70     		strb	r2, [r3]
 230:.\main.c      ****     uint8 i;
 231:.\main.c      ****     uint32 sum = 0;
 545              		.loc 1 231 0
 546 000e 0023     		mov	r3, #0
 547 0010 3B61     		str	r3, [r7, #16]
 232:.\main.c      ****     uint16 avg = 0;
 548              		.loc 1 232 0
 549 0012 3B1C     		mov	r3, r7
 550 0014 0E33     		add	r3, r3, #14
 551 0016 0022     		mov	r2, #0
 552 0018 1A80     		strh	r2, [r3]
 233:.\main.c      ****     
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 553              		.loc 1 234 0
 554 001a 3B1C     		mov	r3, r7
 555 001c 1733     		add	r3, r3, #23
 556 001e 0022     		mov	r2, #0
 557 0020 1A70     		strb	r2, [r3]
 558 0022 10E0     		b	.L56
 559              	.L57:
 235:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 15


 236:.\main.c      ****         sum += array[i];
 560              		.loc 1 236 0 discriminator 2
 561 0024 3B1C     		mov	r3, r7
 562 0026 1733     		add	r3, r3, #23
 563 0028 1B78     		ldrb	r3, [r3]
 564 002a 5B00     		lsl	r3, r3, #1
 565 002c 7A68     		ldr	r2, [r7, #4]
 566 002e D318     		add	r3, r2, r3
 567 0030 1B88     		ldrh	r3, [r3]
 568 0032 3A69     		ldr	r2, [r7, #16]
 569 0034 D318     		add	r3, r2, r3
 570 0036 3B61     		str	r3, [r7, #16]
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 571              		.loc 1 234 0 discriminator 2
 572 0038 3B1C     		mov	r3, r7
 573 003a 1733     		add	r3, r3, #23
 574 003c 1A78     		ldrb	r2, [r3]
 575 003e 3B1C     		mov	r3, r7
 576 0040 1733     		add	r3, r3, #23
 577 0042 0132     		add	r2, r2, #1
 578 0044 1A70     		strb	r2, [r3]
 579              	.L56:
 234:.\main.c      ****     for(i = 0; i < num_items; i++)
 580              		.loc 1 234 0 is_stmt 0 discriminator 1
 581 0046 3A1C     		mov	r2, r7
 582 0048 1732     		add	r2, r2, #23
 583 004a FB1C     		add	r3, r7, #3
 584 004c 1278     		ldrb	r2, [r2]
 585 004e 1B78     		ldrb	r3, [r3]
 586 0050 9A42     		cmp	r2, r3
 587 0052 E7D3     		bcc	.L57
 237:.\main.c      ****     }
 238:.\main.c      ****     
 239:.\main.c      ****     avg = sum/num_items;
 588              		.loc 1 239 0 is_stmt 1
 589 0054 FB1C     		add	r3, r7, #3
 590 0056 1B78     		ldrb	r3, [r3]
 591 0058 3869     		ldr	r0, [r7, #16]
 592 005a 191C     		mov	r1, r3
 593 005c FFF7FEFF 		bl	__aeabi_uidiv
 594 0060 031C     		mov	r3, r0
 595 0062 1A1C     		mov	r2, r3
 596 0064 3B1C     		mov	r3, r7
 597 0066 0E33     		add	r3, r3, #14
 598 0068 1A80     		strh	r2, [r3]
 240:.\main.c      ****     
 241:.\main.c      ****     return avg;
 599              		.loc 1 241 0
 600 006a 3B1C     		mov	r3, r7
 601 006c 0E33     		add	r3, r3, #14
 602 006e 1B88     		ldrh	r3, [r3]
 242:.\main.c      **** }
 603              		.loc 1 242 0
 604 0070 181C     		mov	r0, r3
 605 0072 BD46     		mov	sp, r7
 606 0074 06B0     		add	sp, sp, #24
 607              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 16


 608 0076 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
 610              	.LFE41:
 611              		.size	average, .-average
 612              		.comm	elbow_state,1,1
 613              		.section	.rodata
 614              		.align	2
 615              	.LC9:
 616 0000 0D0A00   		.ascii	"\015\012\000"
 617 0003 00       		.section	.text.elbow,"ax",%progbits
 618              		.align	2
 619              		.global	elbow
 620              		.code	16
 621              		.thumb_func
 622              		.type	elbow, %function
 623              	elbow:
 624              	.LFB42:
 243:.\main.c      **** 
 244:.\main.c      **** 
 245:.\main.c      **** //control the elbow
 246:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 247:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 248:.\main.c      **** void elbow()
 249:.\main.c      **** { 
 625              		.loc 1 249 0
 626              		.cfi_startproc
 627 0000 90B5     		push	{r4, r7, lr}
 628              		.cfi_def_cfa_offset 12
 629              		.cfi_offset 4, -12
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 89B0     		sub	sp, sp, #36
 633              		.cfi_def_cfa_offset 48
 634 0004 00AF     		add	r7, sp, #0
 635              		.cfi_def_cfa_register 7
 250:.\main.c      ****     //take instruction from data_array
 251:.\main.c      ****     //smooth input
 252:.\main.c      ****     //actuate the elbow using PWM
 253:.\main.c      ****     //get feedback
 254:.\main.c      ****     uint8 i;
 255:.\main.c      ****     uint16 avg;
 256:.\main.c      ****     uint16 command;
 257:.\main.c      ****     
 258:.\main.c      ****     switch(elbow_state){ //actions
 636              		.loc 1 258 0
 637 0006 6C4B     		ldr	r3, .L90
 638 0008 1B78     		ldrb	r3, [r3]
 639 000a 012B     		cmp	r3, #1
 640 000c 04D0     		beq	.L61
 641 000e 00DC     		bgt	.LCB542
 642 0010 A1E0     		b	.L89	@long jump
 643              	.LCB542:
 644 0012 022B     		cmp	r3, #2
 645 0014 1CD0     		beq	.L64
 646              	.LBB2:
 259:.\main.c      ****         case elbw_start:
 260:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 17


 261:.\main.c      **** 
 262:.\main.c      ****         case elbw_init:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 264:.\main.c      ****             {
 265:.\main.c      ****                 elbow_array[i] = 1500;
 266:.\main.c      ****             }
 267:.\main.c      ****             elbw_arr_cspot = 0;
 268:.\main.c      ****             break;
 269:.\main.c      **** 
 270:.\main.c      ****         case elbw_execute:
 271:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 272:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 273:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 274:.\main.c      ****             {
 275:.\main.c      ****                 elbw_arr_cspot++;
 276:.\main.c      ****             }
 277:.\main.c      ****             else
 278:.\main.c      ****             {
 279:.\main.c      ****                 elbw_arr_cspot = 0;
 280:.\main.c      ****             }
 281:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 282:.\main.c      ****            
 283:.\main.c      ****             uint16 feedback = potFeedback(ELBOW_POT);
 284:.\main.c      ****             //TODO make sure reading from correct pots
 285:.\main.c      ****             char buffer[20];
 286:.\main.c      ****             
 287:.\main.c      ****             itoa(avg, buffer);
 288:.\main.c      ****             
 289:.\main.c      ****             UART_1_UartPutString(buffer);      
 290:.\main.c      ****             UART_1_UartPutString("\r\n");      
 291:.\main.c      ****             
 292:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 293:.\main.c      ****             {
 294:.\main.c      ****                 if (avg < 1500)
 295:.\main.c      ****                 {
 296:.\main.c      ****                     PWM_3_WriteCompare(1500);
 297:.\main.c      ****                 }
 298:.\main.c      ****                 else
 299:.\main.c      ****                 {
 300:.\main.c      ****                     PWM_3_WriteCompare(avg);
 301:.\main.c      ****                 }
 302:.\main.c      ****                
 303:.\main.c      ****                 fin_exec++;
 304:.\main.c      ****             }
 305:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 306:.\main.c      ****             {
 307:.\main.c      ****                 if(avg > 1500)
 308:.\main.c      ****                 {
 309:.\main.c      ****                     PWM_3_WriteCompare(1500);
 310:.\main.c      ****                 }
 311:.\main.c      ****                 else
 312:.\main.c      ****                 {
 313:.\main.c      ****                     PWM_3_WriteCompare(avg);
 314:.\main.c      ****                 }
 315:.\main.c      ****             }
 316:.\main.c      ****             else
 317:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 18


 318:.\main.c      ****                 PWM_3_WriteCompare(avg);
 319:.\main.c      ****             }
 320:.\main.c      ****           
 321:.\main.c      ****             break;
 322:.\main.c      ****             
 323:.\main.c      ****         case elbw_wait:
 324:.\main.c      ****             break;
 647              		.loc 1 324 0
 648 0016 9FE0     		b	.L60
 649              	.L61:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 650              		.loc 1 263 0
 651 0018 3B1C     		mov	r3, r7
 652 001a 1F33     		add	r3, r3, #31
 653 001c 0022     		mov	r2, #0
 654 001e 1A70     		strb	r2, [r3]
 655 0020 0DE0     		b	.L67
 656              	.L68:
 265:.\main.c      ****                 elbow_array[i] = 1500;
 657              		.loc 1 265 0 discriminator 2
 658 0022 3B1C     		mov	r3, r7
 659 0024 1F33     		add	r3, r3, #31
 660 0026 1A78     		ldrb	r2, [r3]
 661 0028 644B     		ldr	r3, .L90+4
 662 002a 5200     		lsl	r2, r2, #1
 663 002c 6449     		ldr	r1, .L90+8
 664 002e D152     		strh	r1, [r2, r3]
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 665              		.loc 1 263 0 discriminator 2
 666 0030 3B1C     		mov	r3, r7
 667 0032 1F33     		add	r3, r3, #31
 668 0034 1A78     		ldrb	r2, [r3]
 669 0036 3B1C     		mov	r3, r7
 670 0038 1F33     		add	r3, r3, #31
 671 003a 0132     		add	r2, r2, #1
 672 003c 1A70     		strb	r2, [r3]
 673              	.L67:
 263:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 674              		.loc 1 263 0 is_stmt 0 discriminator 1
 675 003e 3B1C     		mov	r3, r7
 676 0040 1F33     		add	r3, r3, #31
 677 0042 1B78     		ldrb	r3, [r3]
 678 0044 132B     		cmp	r3, #19
 679 0046 ECD9     		bls	.L68
 267:.\main.c      ****             elbw_arr_cspot = 0;
 680              		.loc 1 267 0 is_stmt 1
 681 0048 5E4B     		ldr	r3, .L90+12
 682 004a 0022     		mov	r2, #0
 683 004c 1A70     		strb	r2, [r3]
 268:.\main.c      ****             break;
 684              		.loc 1 268 0
 685 004e 83E0     		b	.L60
 686              	.L64:
 271:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 687              		.loc 1 271 0
 688 0050 5D4B     		ldr	r3, .L90+16
 689 0052 9B88     		ldrh	r3, [r3, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 19


 690 0054 1A02     		lsl	r2, r3, #8
 691 0056 5C4B     		ldr	r3, .L90+16
 692 0058 DB88     		ldrh	r3, [r3, #6]
 693 005a 1343     		orr	r3, r2
 694 005c 00D5     		bpl	.L69
 695 005e 0133     		add	r3, r3, #1
 696              	.L69:
 697 0060 5B10     		asr	r3, r3, #1
 698 0062 9AB2     		uxth	r2, r3
 699 0064 3B1C     		mov	r3, r7
 700 0066 1C33     		add	r3, r3, #28
 701 0068 5549     		ldr	r1, .L90+8
 702 006a 5218     		add	r2, r2, r1
 703 006c 1A80     		strh	r2, [r3]
 272:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 704              		.loc 1 272 0
 705 006e 554B     		ldr	r3, .L90+12
 706 0070 1B78     		ldrb	r3, [r3]
 707 0072 1A1C     		mov	r2, r3
 708 0074 514B     		ldr	r3, .L90+4
 709 0076 5200     		lsl	r2, r2, #1
 710 0078 391C     		mov	r1, r7
 711 007a 1C31     		add	r1, r1, #28
 712 007c 0988     		ldrh	r1, [r1]
 713 007e D152     		strh	r1, [r2, r3]
 273:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 714              		.loc 1 273 0
 715 0080 504B     		ldr	r3, .L90+12
 716 0082 1B78     		ldrb	r3, [r3]
 717 0084 122B     		cmp	r3, #18
 718 0086 06D8     		bhi	.L70
 275:.\main.c      ****                 elbw_arr_cspot++;
 719              		.loc 1 275 0
 720 0088 4E4B     		ldr	r3, .L90+12
 721 008a 1B78     		ldrb	r3, [r3]
 722 008c 0133     		add	r3, r3, #1
 723 008e DAB2     		uxtb	r2, r3
 724 0090 4C4B     		ldr	r3, .L90+12
 725 0092 1A70     		strb	r2, [r3]
 726 0094 02E0     		b	.L71
 727              	.L70:
 279:.\main.c      ****                 elbw_arr_cspot = 0;
 728              		.loc 1 279 0
 729 0096 4B4B     		ldr	r3, .L90+12
 730 0098 0022     		mov	r2, #0
 731 009a 1A70     		strb	r2, [r3]
 732              	.L71:
 281:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 733              		.loc 1 281 0
 734 009c 3C1C     		mov	r4, r7
 735 009e 1A34     		add	r4, r4, #26
 736 00a0 464B     		ldr	r3, .L90+4
 737 00a2 181C     		mov	r0, r3
 738 00a4 1421     		mov	r1, #20
 739 00a6 FFF7FEFF 		bl	average
 740 00aa 031C     		mov	r3, r0
 741 00ac 2380     		strh	r3, [r4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 20


 283:.\main.c      ****             uint16 feedback = potFeedback(ELBOW_POT);
 742              		.loc 1 283 0
 743 00ae 3C1C     		mov	r4, r7
 744 00b0 1834     		add	r4, r4, #24
 745 00b2 0120     		mov	r0, #1
 746 00b4 FFF7FEFF 		bl	potFeedback
 747 00b8 031C     		mov	r3, r0
 748 00ba 2380     		strh	r3, [r4]
 287:.\main.c      ****             itoa(avg, buffer);
 749              		.loc 1 287 0
 750 00bc 3B1C     		mov	r3, r7
 751 00be 1A33     		add	r3, r3, #26
 752 00c0 1A88     		ldrh	r2, [r3]
 753 00c2 3B1D     		add	r3, r7, #4
 754 00c4 101C     		mov	r0, r2
 755 00c6 191C     		mov	r1, r3
 756 00c8 FFF7FEFF 		bl	itoa
 289:.\main.c      ****             UART_1_UartPutString(buffer);      
 757              		.loc 1 289 0
 758 00cc 3B1D     		add	r3, r7, #4
 759 00ce 181C     		mov	r0, r3
 760 00d0 FFF7FEFF 		bl	UART_1_UartPutString
 290:.\main.c      ****             UART_1_UartPutString("\r\n");      
 761              		.loc 1 290 0
 762 00d4 3D4B     		ldr	r3, .L90+20
 763 00d6 181C     		mov	r0, r3
 764 00d8 FFF7FEFF 		bl	UART_1_UartPutString
 292:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 765              		.loc 1 292 0
 766 00dc 3B1C     		mov	r3, r7
 767 00de 1833     		add	r3, r3, #24
 768 00e0 1B88     		ldrh	r3, [r3]
 769 00e2 642B     		cmp	r3, #100
 770 00e4 17D8     		bhi	.L72
 294:.\main.c      ****                 if (avg < 1500)
 771              		.loc 1 294 0
 772 00e6 3B1C     		mov	r3, r7
 773 00e8 1A33     		add	r3, r3, #26
 774 00ea 1A88     		ldrh	r2, [r3]
 775 00ec 384B     		ldr	r3, .L90+24
 776 00ee 9A42     		cmp	r2, r3
 777 00f0 04D8     		bhi	.L73
 296:.\main.c      ****                     PWM_3_WriteCompare(1500);
 778              		.loc 1 296 0
 779 00f2 334B     		ldr	r3, .L90+8
 780 00f4 181C     		mov	r0, r3
 781 00f6 FFF7FEFF 		bl	PWM_3_WriteCompare
 782 00fa 05E0     		b	.L74
 783              	.L73:
 300:.\main.c      ****                     PWM_3_WriteCompare(avg);
 784              		.loc 1 300 0
 785 00fc 3B1C     		mov	r3, r7
 786 00fe 1A33     		add	r3, r3, #26
 787 0100 1B88     		ldrh	r3, [r3]
 788 0102 181C     		mov	r0, r3
 789 0104 FFF7FEFF 		bl	PWM_3_WriteCompare
 790              	.L74:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 21


 303:.\main.c      ****                 fin_exec++;
 791              		.loc 1 303 0 discriminator 1
 792 0108 324B     		ldr	r3, .L90+28
 793 010a 1B78     		ldrb	r3, [r3]
 794 010c 0133     		add	r3, r3, #1
 795 010e DAB2     		uxtb	r2, r3
 796 0110 304B     		ldr	r3, .L90+28
 797 0112 1A70     		strb	r2, [r3]
 798 0114 1EE0     		b	.L75
 799              	.L72:
 305:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 800              		.loc 1 305 0
 801 0116 3B1C     		mov	r3, r7
 802 0118 1833     		add	r3, r3, #24
 803 011a 1A88     		ldrh	r2, [r3]
 804 011c 2E4B     		ldr	r3, .L90+32
 805 011e 9A42     		cmp	r2, r3
 806 0120 11D9     		bls	.L76
 307:.\main.c      ****                 if(avg > 1500)
 807              		.loc 1 307 0
 808 0122 3B1C     		mov	r3, r7
 809 0124 1A33     		add	r3, r3, #26
 810 0126 1A88     		ldrh	r2, [r3]
 811 0128 254B     		ldr	r3, .L90+8
 812 012a 9A42     		cmp	r2, r3
 813 012c 04D9     		bls	.L77
 309:.\main.c      ****                     PWM_3_WriteCompare(1500);
 814              		.loc 1 309 0
 815 012e 244B     		ldr	r3, .L90+8
 816 0130 181C     		mov	r0, r3
 817 0132 FFF7FEFF 		bl	PWM_3_WriteCompare
 818 0136 0DE0     		b	.L75
 819              	.L77:
 313:.\main.c      ****                     PWM_3_WriteCompare(avg);
 820              		.loc 1 313 0
 821 0138 3B1C     		mov	r3, r7
 822 013a 1A33     		add	r3, r3, #26
 823 013c 1B88     		ldrh	r3, [r3]
 824 013e 181C     		mov	r0, r3
 825 0140 FFF7FEFF 		bl	PWM_3_WriteCompare
 321:.\main.c      ****             break;
 826              		.loc 1 321 0
 827 0144 08E0     		b	.L60
 828              	.L76:
 318:.\main.c      ****                 PWM_3_WriteCompare(avg);
 829              		.loc 1 318 0
 830 0146 3B1C     		mov	r3, r7
 831 0148 1A33     		add	r3, r3, #26
 832 014a 1B88     		ldrh	r3, [r3]
 833 014c 181C     		mov	r0, r3
 834 014e FFF7FEFF 		bl	PWM_3_WriteCompare
 321:.\main.c      ****             break;
 835              		.loc 1 321 0
 836 0152 01E0     		b	.L60
 837              	.L75:
 838 0154 00E0     		b	.L60
 839              	.L89:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 22


 260:.\main.c      ****             break;
 840              		.loc 1 260 0
 841 0156 C046     		mov	r8, r8
 842              	.L60:
 843              	.LBE2:
 325:.\main.c      ****     }
 326:.\main.c      ****     
 327:.\main.c      ****     switch(elbow_state){ //transitions
 844              		.loc 1 327 0
 845 0158 174B     		ldr	r3, .L90
 846 015a 1B78     		ldrb	r3, [r3]
 847 015c 012B     		cmp	r3, #1
 848 015e 0CD0     		beq	.L80
 849 0160 02DC     		bgt	.L81
 850 0162 002B     		cmp	r3, #0
 851 0164 05D0     		beq	.L82
 852 0166 24E0     		b	.L59
 853              	.L81:
 854 0168 022B     		cmp	r3, #2
 855 016a 0AD0     		beq	.L83
 856 016c 032B     		cmp	r3, #3
 857 016e 14D0     		beq	.L84
 858 0170 1FE0     		b	.L59
 859              	.L82:
 328:.\main.c      ****         case elbw_start:
 329:.\main.c      ****             elbow_state = elbw_init;
 860              		.loc 1 329 0
 861 0172 114B     		ldr	r3, .L90
 862 0174 0122     		mov	r2, #1
 863 0176 1A70     		strb	r2, [r3]
 330:.\main.c      ****             break;
 864              		.loc 1 330 0
 865 0178 1BE0     		b	.L59
 866              	.L80:
 331:.\main.c      ****         
 332:.\main.c      ****         case elbw_init:
 333:.\main.c      ****             elbow_state = elbw_wait;
 867              		.loc 1 333 0
 868 017a 0F4B     		ldr	r3, .L90
 869 017c 0322     		mov	r2, #3
 870 017e 1A70     		strb	r2, [r3]
 334:.\main.c      ****             break;
 871              		.loc 1 334 0
 872 0180 17E0     		b	.L59
 873              	.L83:
 335:.\main.c      ****         
 336:.\main.c      ****         case elbw_execute:
 337:.\main.c      ****             if(new_pack)
 874              		.loc 1 337 0
 875 0182 164B     		ldr	r3, .L90+36
 876 0184 1B78     		ldrb	r3, [r3]
 877 0186 002B     		cmp	r3, #0
 878 0188 03D0     		beq	.L85
 338:.\main.c      ****             {
 339:.\main.c      ****                 elbow_state = elbw_execute;
 879              		.loc 1 339 0
 880 018a 0B4B     		ldr	r3, .L90
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 23


 881 018c 0222     		mov	r2, #2
 882 018e 1A70     		strb	r2, [r3]
 340:.\main.c      ****             }
 341:.\main.c      ****             else
 342:.\main.c      ****             {
 343:.\main.c      ****                 elbow_state = elbw_wait;
 344:.\main.c      ****             }
 345:.\main.c      ****             break;
 883              		.loc 1 345 0
 884 0190 0FE0     		b	.L59
 885              	.L85:
 343:.\main.c      ****                 elbow_state = elbw_wait;
 886              		.loc 1 343 0
 887 0192 094B     		ldr	r3, .L90
 888 0194 0322     		mov	r2, #3
 889 0196 1A70     		strb	r2, [r3]
 890              		.loc 1 345 0
 891 0198 0BE0     		b	.L59
 892              	.L84:
 346:.\main.c      ****         
 347:.\main.c      ****         case elbw_wait:
 348:.\main.c      ****             if(new_pack)
 893              		.loc 1 348 0
 894 019a 104B     		ldr	r3, .L90+36
 895 019c 1B78     		ldrb	r3, [r3]
 896 019e 002B     		cmp	r3, #0
 897 01a0 03D0     		beq	.L87
 349:.\main.c      ****             {
 350:.\main.c      ****                 elbow_state = elbw_execute;
 898              		.loc 1 350 0
 899 01a2 054B     		ldr	r3, .L90
 900 01a4 0222     		mov	r2, #2
 901 01a6 1A70     		strb	r2, [r3]
 902 01a8 02E0     		b	.L88
 903              	.L87:
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 elbow_state = elbw_wait; 
 904              		.loc 1 354 0
 905 01aa 034B     		ldr	r3, .L90
 906 01ac 0322     		mov	r2, #3
 907 01ae 1A70     		strb	r2, [r3]
 908              	.L88:
 355:.\main.c      ****             }
 356:.\main.c      ****             break;
 909              		.loc 1 356 0
 910 01b0 C046     		mov	r8, r8
 911              	.L59:
 357:.\main.c      ****     }    
 358:.\main.c      **** }
 912              		.loc 1 358 0
 913 01b2 BD46     		mov	sp, r7
 914 01b4 09B0     		add	sp, sp, #36
 915              		@ sp needed
 916 01b6 90BD     		pop	{r4, r7, pc}
 917              	.L91:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 24


 918              		.align	2
 919              	.L90:
 920 01b8 00000000 		.word	elbow_state
 921 01bc 00000000 		.word	elbow_array
 922 01c0 DC050000 		.word	1500
 923 01c4 00000000 		.word	elbw_arr_cspot
 924 01c8 00000000 		.word	data_array
 925 01cc 00000000 		.word	.LC9
 926 01d0 DB050000 		.word	1499
 927 01d4 00000000 		.word	fin_exec
 928 01d8 E7030000 		.word	999
 929 01dc 00000000 		.word	new_pack
 930              		.cfi_endproc
 931              	.LFE42:
 932              		.size	elbow, .-elbow
 933              		.comm	shoulder_state,1,1
 934              		.section	.text.shoulder,"ax",%progbits
 935              		.align	2
 936              		.global	shoulder
 937              		.code	16
 938              		.thumb_func
 939              		.type	shoulder, %function
 940              	shoulder:
 941              	.LFB43:
 359:.\main.c      **** 
 360:.\main.c      **** //control the shoulder
 361:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 362:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 363:.\main.c      **** void shoulder()
 364:.\main.c      **** { 
 942              		.loc 1 364 0
 943              		.cfi_startproc
 944 0000 90B5     		push	{r4, r7, lr}
 945              		.cfi_def_cfa_offset 12
 946              		.cfi_offset 4, -12
 947              		.cfi_offset 7, -8
 948              		.cfi_offset 14, -4
 949 0002 83B0     		sub	sp, sp, #12
 950              		.cfi_def_cfa_offset 24
 951 0004 00AF     		add	r7, sp, #0
 952              		.cfi_def_cfa_register 7
 365:.\main.c      ****     //take instruction from data_array
 366:.\main.c      ****     //smooth input
 367:.\main.c      ****     //actuate the shoulder using PWM
 368:.\main.c      ****     //get feedback
 369:.\main.c      ****     uint8 i;
 370:.\main.c      ****     uint16 avg;
 371:.\main.c      ****     uint16 command;
 372:.\main.c      ****     
 373:.\main.c      ****     switch(shoulder_state){ //actions
 953              		.loc 1 373 0
 954 0006 5C4B     		ldr	r3, .L122
 955 0008 1B78     		ldrb	r3, [r3]
 956 000a 012B     		cmp	r3, #1
 957 000c 04D0     		beq	.L94
 958 000e 00DC     		bgt	.LCB853
 959 0010 81E0     		b	.L121	@long jump
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 25


 960              	.LCB853:
 961 0012 022B     		cmp	r3, #2
 962 0014 17D0     		beq	.L97
 963              	.LBB3:
 374:.\main.c      ****         case shldr_start:
 375:.\main.c      ****             break;
 376:.\main.c      **** 
 377:.\main.c      ****         case shldr_init:
 378:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 379:.\main.c      ****             {
 380:.\main.c      ****                 shoulder_array[i] = 1500;
 381:.\main.c      ****             }
 382:.\main.c      ****             shldr_arr_cspot = 0;
 383:.\main.c      ****             break;
 384:.\main.c      **** 
 385:.\main.c      ****         case shldr_execute:
 386:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 387:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;
 388:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 389:.\main.c      ****             {
 390:.\main.c      ****                 shldr_arr_cspot++;
 391:.\main.c      ****             }
 392:.\main.c      ****             else
 393:.\main.c      ****             {
 394:.\main.c      ****                 shldr_arr_cspot = 0;
 395:.\main.c      ****             }
 396:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 397:.\main.c      ****            
 398:.\main.c      ****             uint16 feedback = potFeedback(SHOULDER_POT);
 399:.\main.c      ****             
 400:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 401:.\main.c      ****             {
 402:.\main.c      ****                 if (avg < 1500)
 403:.\main.c      ****                 {
 404:.\main.c      ****                     PWM_1_WriteCompare(1500);
 405:.\main.c      ****                 }
 406:.\main.c      ****                 else
 407:.\main.c      ****                 {
 408:.\main.c      ****                     PWM_1_WriteCompare(avg);
 409:.\main.c      ****                 }
 410:.\main.c      ****                
 411:.\main.c      ****                 fin_exec++;
 412:.\main.c      ****             }
 413:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 414:.\main.c      ****             {
 415:.\main.c      ****                 if(avg > 1500)
 416:.\main.c      ****                 {
 417:.\main.c      ****                     PWM_1_WriteCompare(1500);
 418:.\main.c      ****                 }
 419:.\main.c      ****                 else
 420:.\main.c      ****                 {
 421:.\main.c      ****                     PWM_1_WriteCompare(avg);
 422:.\main.c      ****                 }
 423:.\main.c      ****             }
 424:.\main.c      ****             else
 425:.\main.c      ****             {
 426:.\main.c      ****                 PWM_1_WriteCompare(avg);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 26


 427:.\main.c      ****             }
 428:.\main.c      ****           
 429:.\main.c      ****             break;
 430:.\main.c      ****             
 431:.\main.c      ****         case shldr_wait:
 432:.\main.c      ****             break;
 964              		.loc 1 432 0
 965 0016 7FE0     		b	.L93
 966              	.L94:
 378:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 967              		.loc 1 378 0
 968 0018 FB1D     		add	r3, r7, #7
 969 001a 0022     		mov	r2, #0
 970 001c 1A70     		strb	r2, [r3]
 971 001e 0AE0     		b	.L99
 972              	.L100:
 380:.\main.c      ****                 shoulder_array[i] = 1500;
 973              		.loc 1 380 0 discriminator 2
 974 0020 FB1D     		add	r3, r7, #7
 975 0022 1A78     		ldrb	r2, [r3]
 976 0024 554B     		ldr	r3, .L122+4
 977 0026 5200     		lsl	r2, r2, #1
 978 0028 5549     		ldr	r1, .L122+8
 979 002a D152     		strh	r1, [r2, r3]
 378:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 980              		.loc 1 378 0 discriminator 2
 981 002c FB1D     		add	r3, r7, #7
 982 002e 1A78     		ldrb	r2, [r3]
 983 0030 FB1D     		add	r3, r7, #7
 984 0032 0132     		add	r2, r2, #1
 985 0034 1A70     		strb	r2, [r3]
 986              	.L99:
 378:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 987              		.loc 1 378 0 is_stmt 0 discriminator 1
 988 0036 FB1D     		add	r3, r7, #7
 989 0038 1B78     		ldrb	r3, [r3]
 990 003a 132B     		cmp	r3, #19
 991 003c F0D9     		bls	.L100
 382:.\main.c      ****             shldr_arr_cspot = 0;
 992              		.loc 1 382 0 is_stmt 1
 993 003e 514B     		ldr	r3, .L122+12
 994 0040 0022     		mov	r2, #0
 995 0042 1A70     		strb	r2, [r3]
 383:.\main.c      ****             break;
 996              		.loc 1 383 0
 997 0044 68E0     		b	.L93
 998              	.L97:
 386:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 999              		.loc 1 386 0
 1000 0046 504B     		ldr	r3, .L122+16
 1001 0048 9B88     		ldrh	r3, [r3, #4]
 1002 004a 1A02     		lsl	r2, r3, #8
 1003 004c 4E4B     		ldr	r3, .L122+16
 1004 004e DB88     		ldrh	r3, [r3, #6]
 1005 0050 1343     		orr	r3, r2
 1006 0052 00D5     		bpl	.L101
 1007 0054 0133     		add	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 27


 1008              	.L101:
 1009 0056 5B10     		asr	r3, r3, #1
 1010 0058 9AB2     		uxth	r2, r3
 1011 005a 3B1D     		add	r3, r7, #4
 1012 005c 4849     		ldr	r1, .L122+8
 1013 005e 5218     		add	r2, r2, r1
 1014 0060 1A80     		strh	r2, [r3]
 387:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;
 1015              		.loc 1 387 0
 1016 0062 484B     		ldr	r3, .L122+12
 1017 0064 1B78     		ldrb	r3, [r3]
 1018 0066 1A1C     		mov	r2, r3
 1019 0068 444B     		ldr	r3, .L122+4
 1020 006a 5200     		lsl	r2, r2, #1
 1021 006c 391D     		add	r1, r7, #4
 1022 006e 0988     		ldrh	r1, [r1]
 1023 0070 D152     		strh	r1, [r2, r3]
 388:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 1024              		.loc 1 388 0
 1025 0072 444B     		ldr	r3, .L122+12
 1026 0074 1B78     		ldrb	r3, [r3]
 1027 0076 122B     		cmp	r3, #18
 1028 0078 06D8     		bhi	.L102
 390:.\main.c      ****                 shldr_arr_cspot++;
 1029              		.loc 1 390 0
 1030 007a 424B     		ldr	r3, .L122+12
 1031 007c 1B78     		ldrb	r3, [r3]
 1032 007e 0133     		add	r3, r3, #1
 1033 0080 DAB2     		uxtb	r2, r3
 1034 0082 404B     		ldr	r3, .L122+12
 1035 0084 1A70     		strb	r2, [r3]
 1036 0086 02E0     		b	.L103
 1037              	.L102:
 394:.\main.c      ****                 shldr_arr_cspot = 0;
 1038              		.loc 1 394 0
 1039 0088 3E4B     		ldr	r3, .L122+12
 1040 008a 0022     		mov	r2, #0
 1041 008c 1A70     		strb	r2, [r3]
 1042              	.L103:
 396:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 1043              		.loc 1 396 0
 1044 008e BC1C     		add	r4, r7, #2
 1045 0090 3A4B     		ldr	r3, .L122+4
 1046 0092 181C     		mov	r0, r3
 1047 0094 1421     		mov	r1, #20
 1048 0096 FFF7FEFF 		bl	average
 1049 009a 031C     		mov	r3, r0
 1050 009c 2380     		strh	r3, [r4]
 398:.\main.c      ****             uint16 feedback = potFeedback(SHOULDER_POT);
 1051              		.loc 1 398 0
 1052 009e 3C1C     		mov	r4, r7
 1053 00a0 0020     		mov	r0, #0
 1054 00a2 FFF7FEFF 		bl	potFeedback
 1055 00a6 031C     		mov	r3, r0
 1056 00a8 2380     		strh	r3, [r4]
 400:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 1057              		.loc 1 400 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 28


 1058 00aa 3B1C     		mov	r3, r7
 1059 00ac 1B88     		ldrh	r3, [r3]
 1060 00ae 002B     		cmp	r3, #0
 1061 00b0 15D1     		bne	.L104
 402:.\main.c      ****                 if (avg < 1500)
 1062              		.loc 1 402 0
 1063 00b2 BB1C     		add	r3, r7, #2
 1064 00b4 1A88     		ldrh	r2, [r3]
 1065 00b6 354B     		ldr	r3, .L122+20
 1066 00b8 9A42     		cmp	r2, r3
 1067 00ba 04D8     		bhi	.L105
 404:.\main.c      ****                     PWM_1_WriteCompare(1500);
 1068              		.loc 1 404 0
 1069 00bc 304B     		ldr	r3, .L122+8
 1070 00be 181C     		mov	r0, r3
 1071 00c0 FFF7FEFF 		bl	PWM_1_WriteCompare
 1072 00c4 04E0     		b	.L106
 1073              	.L105:
 408:.\main.c      ****                     PWM_1_WriteCompare(avg);
 1074              		.loc 1 408 0
 1075 00c6 BB1C     		add	r3, r7, #2
 1076 00c8 1B88     		ldrh	r3, [r3]
 1077 00ca 181C     		mov	r0, r3
 1078 00cc FFF7FEFF 		bl	PWM_1_WriteCompare
 1079              	.L106:
 411:.\main.c      ****                 fin_exec++;
 1080              		.loc 1 411 0 discriminator 1
 1081 00d0 2F4B     		ldr	r3, .L122+24
 1082 00d2 1B78     		ldrb	r3, [r3]
 1083 00d4 0133     		add	r3, r3, #1
 1084 00d6 DAB2     		uxtb	r2, r3
 1085 00d8 2D4B     		ldr	r3, .L122+24
 1086 00da 1A70     		strb	r2, [r3]
 1087 00dc 1AE0     		b	.L107
 1088              	.L104:
 413:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 1089              		.loc 1 413 0
 1090 00de 3B1C     		mov	r3, r7
 1091 00e0 1A88     		ldrh	r2, [r3]
 1092 00e2 2C4B     		ldr	r3, .L122+28
 1093 00e4 9A42     		cmp	r2, r3
 1094 00e6 0FD9     		bls	.L108
 415:.\main.c      ****                 if(avg > 1500)
 1095              		.loc 1 415 0
 1096 00e8 BB1C     		add	r3, r7, #2
 1097 00ea 1A88     		ldrh	r2, [r3]
 1098 00ec 244B     		ldr	r3, .L122+8
 1099 00ee 9A42     		cmp	r2, r3
 1100 00f0 04D9     		bls	.L109
 417:.\main.c      ****                     PWM_1_WriteCompare(1500);
 1101              		.loc 1 417 0
 1102 00f2 234B     		ldr	r3, .L122+8
 1103 00f4 181C     		mov	r0, r3
 1104 00f6 FFF7FEFF 		bl	PWM_1_WriteCompare
 1105 00fa 0BE0     		b	.L107
 1106              	.L109:
 421:.\main.c      ****                     PWM_1_WriteCompare(avg);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 29


 1107              		.loc 1 421 0
 1108 00fc BB1C     		add	r3, r7, #2
 1109 00fe 1B88     		ldrh	r3, [r3]
 1110 0100 181C     		mov	r0, r3
 1111 0102 FFF7FEFF 		bl	PWM_1_WriteCompare
 429:.\main.c      ****             break;
 1112              		.loc 1 429 0
 1113 0106 07E0     		b	.L93
 1114              	.L108:
 426:.\main.c      ****                 PWM_1_WriteCompare(avg);
 1115              		.loc 1 426 0
 1116 0108 BB1C     		add	r3, r7, #2
 1117 010a 1B88     		ldrh	r3, [r3]
 1118 010c 181C     		mov	r0, r3
 1119 010e FFF7FEFF 		bl	PWM_1_WriteCompare
 429:.\main.c      ****             break;
 1120              		.loc 1 429 0
 1121 0112 01E0     		b	.L93
 1122              	.L107:
 1123 0114 00E0     		b	.L93
 1124              	.L121:
 375:.\main.c      ****             break;
 1125              		.loc 1 375 0
 1126 0116 C046     		mov	r8, r8
 1127              	.L93:
 1128              	.LBE3:
 433:.\main.c      ****     }
 434:.\main.c      ****     
 435:.\main.c      ****     switch(shoulder_state){ //transitions
 1129              		.loc 1 435 0
 1130 0118 174B     		ldr	r3, .L122
 1131 011a 1B78     		ldrb	r3, [r3]
 1132 011c 012B     		cmp	r3, #1
 1133 011e 0CD0     		beq	.L112
 1134 0120 02DC     		bgt	.L113
 1135 0122 002B     		cmp	r3, #0
 1136 0124 05D0     		beq	.L114
 1137 0126 24E0     		b	.L92
 1138              	.L113:
 1139 0128 022B     		cmp	r3, #2
 1140 012a 0AD0     		beq	.L115
 1141 012c 032B     		cmp	r3, #3
 1142 012e 14D0     		beq	.L116
 1143 0130 1FE0     		b	.L92
 1144              	.L114:
 436:.\main.c      ****         case shldr_start:
 437:.\main.c      ****             shoulder_state = shldr_init;
 1145              		.loc 1 437 0
 1146 0132 114B     		ldr	r3, .L122
 1147 0134 0122     		mov	r2, #1
 1148 0136 1A70     		strb	r2, [r3]
 438:.\main.c      ****             break;
 1149              		.loc 1 438 0
 1150 0138 1BE0     		b	.L92
 1151              	.L112:
 439:.\main.c      ****         
 440:.\main.c      ****         case shldr_init:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 30


 441:.\main.c      ****             shoulder_state = shldr_wait;
 1152              		.loc 1 441 0
 1153 013a 0F4B     		ldr	r3, .L122
 1154 013c 0322     		mov	r2, #3
 1155 013e 1A70     		strb	r2, [r3]
 442:.\main.c      ****             break;
 1156              		.loc 1 442 0
 1157 0140 17E0     		b	.L92
 1158              	.L115:
 443:.\main.c      ****         
 444:.\main.c      ****         case shldr_execute:
 445:.\main.c      ****             if(new_pack)
 1159              		.loc 1 445 0
 1160 0142 154B     		ldr	r3, .L122+32
 1161 0144 1B78     		ldrb	r3, [r3]
 1162 0146 002B     		cmp	r3, #0
 1163 0148 03D0     		beq	.L117
 446:.\main.c      ****             {
 447:.\main.c      ****                 shoulder_state = shldr_execute;
 1164              		.loc 1 447 0
 1165 014a 0B4B     		ldr	r3, .L122
 1166 014c 0222     		mov	r2, #2
 1167 014e 1A70     		strb	r2, [r3]
 448:.\main.c      ****             }
 449:.\main.c      ****             else
 450:.\main.c      ****             {
 451:.\main.c      ****                 shoulder_state = shldr_wait;
 452:.\main.c      ****             }
 453:.\main.c      ****             break;
 1168              		.loc 1 453 0
 1169 0150 0FE0     		b	.L92
 1170              	.L117:
 451:.\main.c      ****                 shoulder_state = shldr_wait;
 1171              		.loc 1 451 0
 1172 0152 094B     		ldr	r3, .L122
 1173 0154 0322     		mov	r2, #3
 1174 0156 1A70     		strb	r2, [r3]
 1175              		.loc 1 453 0
 1176 0158 0BE0     		b	.L92
 1177              	.L116:
 454:.\main.c      ****         
 455:.\main.c      ****         case shldr_wait:
 456:.\main.c      ****             if(new_pack)
 1178              		.loc 1 456 0
 1179 015a 0F4B     		ldr	r3, .L122+32
 1180 015c 1B78     		ldrb	r3, [r3]
 1181 015e 002B     		cmp	r3, #0
 1182 0160 03D0     		beq	.L119
 457:.\main.c      ****             {
 458:.\main.c      ****                 shoulder_state = shldr_execute;
 1183              		.loc 1 458 0
 1184 0162 054B     		ldr	r3, .L122
 1185 0164 0222     		mov	r2, #2
 1186 0166 1A70     		strb	r2, [r3]
 1187 0168 02E0     		b	.L120
 1188              	.L119:
 459:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 31


 460:.\main.c      ****             else
 461:.\main.c      ****             {
 462:.\main.c      ****                 shoulder_state = shldr_wait; 
 1189              		.loc 1 462 0
 1190 016a 034B     		ldr	r3, .L122
 1191 016c 0322     		mov	r2, #3
 1192 016e 1A70     		strb	r2, [r3]
 1193              	.L120:
 463:.\main.c      ****             }
 464:.\main.c      ****             break;
 1194              		.loc 1 464 0
 1195 0170 C046     		mov	r8, r8
 1196              	.L92:
 465:.\main.c      ****     }    
 466:.\main.c      **** }
 1197              		.loc 1 466 0
 1198 0172 BD46     		mov	sp, r7
 1199 0174 03B0     		add	sp, sp, #12
 1200              		@ sp needed
 1201 0176 90BD     		pop	{r4, r7, pc}
 1202              	.L123:
 1203              		.align	2
 1204              	.L122:
 1205 0178 00000000 		.word	shoulder_state
 1206 017c 00000000 		.word	shoulder_array
 1207 0180 DC050000 		.word	1500
 1208 0184 00000000 		.word	shldr_arr_cspot
 1209 0188 00000000 		.word	data_array
 1210 018c DB050000 		.word	1499
 1211 0190 00000000 		.word	fin_exec
 1212 0194 FFF90000 		.word	63999
 1213 0198 00000000 		.word	new_pack
 1214              		.cfi_endproc
 1215              	.LFE43:
 1216              		.size	shoulder, .-shoulder
 1217              		.comm	baseAzimuth_state,1,1
 1218              		.section	.text.baseAzimuth,"ax",%progbits
 1219              		.align	2
 1220              		.global	baseAzimuth
 1221              		.code	16
 1222              		.thumb_func
 1223              		.type	baseAzimuth, %function
 1224              	baseAzimuth:
 1225              	.LFB44:
 467:.\main.c      **** 
 468:.\main.c      **** //control the turret
 469:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 470:.\main.c      **** void baseAzimuth()
 471:.\main.c      **** { 
 1226              		.loc 1 471 0
 1227              		.cfi_startproc
 1228 0000 90B5     		push	{r4, r7, lr}
 1229              		.cfi_def_cfa_offset 12
 1230              		.cfi_offset 4, -12
 1231              		.cfi_offset 7, -8
 1232              		.cfi_offset 14, -4
 1233 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 32


 1234              		.cfi_def_cfa_offset 24
 1235 0004 00AF     		add	r7, sp, #0
 1236              		.cfi_def_cfa_register 7
 472:.\main.c      ****     //take instruction from data_array
 473:.\main.c      ****     //smooth input
 474:.\main.c      ****     //actuate the turret using PWM
 475:.\main.c      ****     uint8 i;
 476:.\main.c      ****     uint16 avg;
 477:.\main.c      ****     uint16 command;
 478:.\main.c      ****     
 479:.\main.c      ****     switch(baseAzimuth_state){ //actions
 1237              		.loc 1 479 0
 1238 0006 444B     		ldr	r3, .L147
 1239 0008 1B78     		ldrb	r3, [r3]
 1240 000a 012B     		cmp	r3, #1
 1241 000c 03D0     		beq	.L126
 1242 000e 51DD     		ble	.L146
 1243 0010 022B     		cmp	r3, #2
 1244 0012 17D0     		beq	.L129
 480:.\main.c      ****         case BA_start:
 481:.\main.c      ****             break;
 482:.\main.c      **** 
 483:.\main.c      ****         case BA_init:
 484:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 485:.\main.c      ****             {
 486:.\main.c      ****                 baseAz_array[i] = 1500;
 487:.\main.c      ****             }
 488:.\main.c      ****             BA_arr_cspot = 0;
 489:.\main.c      ****             break;
 490:.\main.c      **** 
 491:.\main.c      ****         case BA_execute:
 492:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 493:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 494:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 495:.\main.c      ****             {
 496:.\main.c      ****                 BA_arr_cspot++;
 497:.\main.c      ****             }
 498:.\main.c      ****             else
 499:.\main.c      ****             {
 500:.\main.c      ****                 BA_arr_cspot = 0;
 501:.\main.c      ****             }
 502:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 503:.\main.c      ****             
 504:.\main.c      ****             PWM_2_WriteCompare(avg);
 505:.\main.c      ****             fin_exec++;
 506:.\main.c      ****             break;
 507:.\main.c      ****             
 508:.\main.c      ****         case BA_wait:
 509:.\main.c      ****             break;
 1245              		.loc 1 509 0
 1246 0014 4FE0     		b	.L125
 1247              	.L126:
 484:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1248              		.loc 1 484 0
 1249 0016 FB1D     		add	r3, r7, #7
 1250 0018 0022     		mov	r2, #0
 1251 001a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 33


 1252 001c 0AE0     		b	.L131
 1253              	.L132:
 486:.\main.c      ****                 baseAz_array[i] = 1500;
 1254              		.loc 1 486 0 discriminator 2
 1255 001e FB1D     		add	r3, r7, #7
 1256 0020 1A78     		ldrb	r2, [r3]
 1257 0022 3E4B     		ldr	r3, .L147+4
 1258 0024 5200     		lsl	r2, r2, #1
 1259 0026 3E49     		ldr	r1, .L147+8
 1260 0028 D152     		strh	r1, [r2, r3]
 484:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1261              		.loc 1 484 0 discriminator 2
 1262 002a FB1D     		add	r3, r7, #7
 1263 002c 1A78     		ldrb	r2, [r3]
 1264 002e FB1D     		add	r3, r7, #7
 1265 0030 0132     		add	r2, r2, #1
 1266 0032 1A70     		strb	r2, [r3]
 1267              	.L131:
 484:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 1268              		.loc 1 484 0 is_stmt 0 discriminator 1
 1269 0034 FB1D     		add	r3, r7, #7
 1270 0036 1B78     		ldrb	r3, [r3]
 1271 0038 132B     		cmp	r3, #19
 1272 003a F0D9     		bls	.L132
 488:.\main.c      ****             BA_arr_cspot = 0;
 1273              		.loc 1 488 0 is_stmt 1
 1274 003c 394B     		ldr	r3, .L147+12
 1275 003e 0022     		mov	r2, #0
 1276 0040 1A70     		strb	r2, [r3]
 489:.\main.c      ****             break;
 1277              		.loc 1 489 0
 1278 0042 38E0     		b	.L125
 1279              	.L129:
 492:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 1280              		.loc 1 492 0
 1281 0044 384B     		ldr	r3, .L147+16
 1282 0046 1B89     		ldrh	r3, [r3, #8]
 1283 0048 1A02     		lsl	r2, r3, #8
 1284 004a 374B     		ldr	r3, .L147+16
 1285 004c 5B89     		ldrh	r3, [r3, #10]
 1286 004e 1343     		orr	r3, r2
 1287 0050 00D5     		bpl	.L133
 1288 0052 0133     		add	r3, r3, #1
 1289              	.L133:
 1290 0054 5B10     		asr	r3, r3, #1
 1291 0056 9AB2     		uxth	r2, r3
 1292 0058 3B1D     		add	r3, r7, #4
 1293 005a 3149     		ldr	r1, .L147+8
 1294 005c 5218     		add	r2, r2, r1
 1295 005e 1A80     		strh	r2, [r3]
 493:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 1296              		.loc 1 493 0
 1297 0060 304B     		ldr	r3, .L147+12
 1298 0062 1B78     		ldrb	r3, [r3]
 1299 0064 1A1C     		mov	r2, r3
 1300 0066 2D4B     		ldr	r3, .L147+4
 1301 0068 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 34


 1302 006a 391D     		add	r1, r7, #4
 1303 006c 0988     		ldrh	r1, [r1]
 1304 006e D152     		strh	r1, [r2, r3]
 494:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 1305              		.loc 1 494 0
 1306 0070 2C4B     		ldr	r3, .L147+12
 1307 0072 1B78     		ldrb	r3, [r3]
 1308 0074 122B     		cmp	r3, #18
 1309 0076 06D8     		bhi	.L134
 496:.\main.c      ****                 BA_arr_cspot++;
 1310              		.loc 1 496 0
 1311 0078 2A4B     		ldr	r3, .L147+12
 1312 007a 1B78     		ldrb	r3, [r3]
 1313 007c 0133     		add	r3, r3, #1
 1314 007e DAB2     		uxtb	r2, r3
 1315 0080 284B     		ldr	r3, .L147+12
 1316 0082 1A70     		strb	r2, [r3]
 1317 0084 02E0     		b	.L135
 1318              	.L134:
 500:.\main.c      ****                 BA_arr_cspot = 0;
 1319              		.loc 1 500 0
 1320 0086 274B     		ldr	r3, .L147+12
 1321 0088 0022     		mov	r2, #0
 1322 008a 1A70     		strb	r2, [r3]
 1323              	.L135:
 502:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 1324              		.loc 1 502 0
 1325 008c BC1C     		add	r4, r7, #2
 1326 008e 234B     		ldr	r3, .L147+4
 1327 0090 181C     		mov	r0, r3
 1328 0092 1421     		mov	r1, #20
 1329 0094 FFF7FEFF 		bl	average
 1330 0098 031C     		mov	r3, r0
 1331 009a 2380     		strh	r3, [r4]
 504:.\main.c      ****             PWM_2_WriteCompare(avg);
 1332              		.loc 1 504 0
 1333 009c BB1C     		add	r3, r7, #2
 1334 009e 1B88     		ldrh	r3, [r3]
 1335 00a0 181C     		mov	r0, r3
 1336 00a2 FFF7FEFF 		bl	PWM_2_WriteCompare
 505:.\main.c      ****             fin_exec++;
 1337              		.loc 1 505 0
 1338 00a6 214B     		ldr	r3, .L147+20
 1339 00a8 1B78     		ldrb	r3, [r3]
 1340 00aa 0133     		add	r3, r3, #1
 1341 00ac DAB2     		uxtb	r2, r3
 1342 00ae 1F4B     		ldr	r3, .L147+20
 1343 00b0 1A70     		strb	r2, [r3]
 506:.\main.c      ****             break;
 1344              		.loc 1 506 0
 1345 00b2 00E0     		b	.L125
 1346              	.L146:
 481:.\main.c      ****             break;
 1347              		.loc 1 481 0
 1348 00b4 C046     		mov	r8, r8
 1349              	.L125:
 510:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 35


 511:.\main.c      ****     
 512:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 1350              		.loc 1 512 0
 1351 00b6 184B     		ldr	r3, .L147
 1352 00b8 1B78     		ldrb	r3, [r3]
 1353 00ba 012B     		cmp	r3, #1
 1354 00bc 0CD0     		beq	.L137
 1355 00be 02DC     		bgt	.L138
 1356 00c0 002B     		cmp	r3, #0
 1357 00c2 05D0     		beq	.L139
 1358 00c4 24E0     		b	.L124
 1359              	.L138:
 1360 00c6 022B     		cmp	r3, #2
 1361 00c8 0AD0     		beq	.L140
 1362 00ca 032B     		cmp	r3, #3
 1363 00cc 14D0     		beq	.L141
 1364 00ce 1FE0     		b	.L124
 1365              	.L139:
 513:.\main.c      ****         case BA_start:
 514:.\main.c      ****             baseAzimuth_state = BA_init;
 1366              		.loc 1 514 0
 1367 00d0 114B     		ldr	r3, .L147
 1368 00d2 0122     		mov	r2, #1
 1369 00d4 1A70     		strb	r2, [r3]
 515:.\main.c      ****             break;
 1370              		.loc 1 515 0
 1371 00d6 1BE0     		b	.L124
 1372              	.L137:
 516:.\main.c      ****         
 517:.\main.c      ****         case BA_init:
 518:.\main.c      ****             baseAzimuth_state = BA_wait;
 1373              		.loc 1 518 0
 1374 00d8 0F4B     		ldr	r3, .L147
 1375 00da 0322     		mov	r2, #3
 1376 00dc 1A70     		strb	r2, [r3]
 519:.\main.c      ****             break;
 1377              		.loc 1 519 0
 1378 00de 17E0     		b	.L124
 1379              	.L140:
 520:.\main.c      ****         
 521:.\main.c      ****         case BA_execute:
 522:.\main.c      ****             if(new_pack)
 1380              		.loc 1 522 0
 1381 00e0 134B     		ldr	r3, .L147+24
 1382 00e2 1B78     		ldrb	r3, [r3]
 1383 00e4 002B     		cmp	r3, #0
 1384 00e6 03D0     		beq	.L142
 523:.\main.c      ****             {
 524:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1385              		.loc 1 524 0
 1386 00e8 0B4B     		ldr	r3, .L147
 1387 00ea 0222     		mov	r2, #2
 1388 00ec 1A70     		strb	r2, [r3]
 525:.\main.c      ****             }
 526:.\main.c      ****             else
 527:.\main.c      ****             {
 528:.\main.c      ****                 baseAzimuth_state = BA_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 36


 529:.\main.c      ****             }
 530:.\main.c      ****             break;
 1389              		.loc 1 530 0
 1390 00ee 0FE0     		b	.L124
 1391              	.L142:
 528:.\main.c      ****                 baseAzimuth_state = BA_wait;
 1392              		.loc 1 528 0
 1393 00f0 094B     		ldr	r3, .L147
 1394 00f2 0322     		mov	r2, #3
 1395 00f4 1A70     		strb	r2, [r3]
 1396              		.loc 1 530 0
 1397 00f6 0BE0     		b	.L124
 1398              	.L141:
 531:.\main.c      ****         
 532:.\main.c      ****         case BA_wait:
 533:.\main.c      ****             if(new_pack)
 1399              		.loc 1 533 0
 1400 00f8 0D4B     		ldr	r3, .L147+24
 1401 00fa 1B78     		ldrb	r3, [r3]
 1402 00fc 002B     		cmp	r3, #0
 1403 00fe 03D0     		beq	.L144
 534:.\main.c      ****             {
 535:.\main.c      ****                 baseAzimuth_state = BA_execute;
 1404              		.loc 1 535 0
 1405 0100 054B     		ldr	r3, .L147
 1406 0102 0222     		mov	r2, #2
 1407 0104 1A70     		strb	r2, [r3]
 1408 0106 02E0     		b	.L145
 1409              	.L144:
 536:.\main.c      ****             }
 537:.\main.c      ****             else
 538:.\main.c      ****             {
 539:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 1410              		.loc 1 539 0
 1411 0108 034B     		ldr	r3, .L147
 1412 010a 0322     		mov	r2, #3
 1413 010c 1A70     		strb	r2, [r3]
 1414              	.L145:
 540:.\main.c      ****             }
 541:.\main.c      ****             break;
 1415              		.loc 1 541 0
 1416 010e C046     		mov	r8, r8
 1417              	.L124:
 542:.\main.c      ****     }    
 543:.\main.c      **** }
 1418              		.loc 1 543 0
 1419 0110 BD46     		mov	sp, r7
 1420 0112 03B0     		add	sp, sp, #12
 1421              		@ sp needed
 1422 0114 90BD     		pop	{r4, r7, pc}
 1423              	.L148:
 1424 0116 C046     		.align	2
 1425              	.L147:
 1426 0118 00000000 		.word	baseAzimuth_state
 1427 011c 00000000 		.word	baseAz_array
 1428 0120 DC050000 		.word	1500
 1429 0124 00000000 		.word	BA_arr_cspot
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 37


 1430 0128 00000000 		.word	data_array
 1431 012c 00000000 		.word	fin_exec
 1432 0130 00000000 		.word	new_pack
 1433              		.cfi_endproc
 1434              	.LFE44:
 1435              		.size	baseAzimuth, .-baseAzimuth
 1436              		.section	.text.main,"ax",%progbits
 1437              		.align	2
 1438              		.global	main
 1439              		.code	16
 1440              		.thumb_func
 1441              		.type	main, %function
 1442              	main:
 1443              	.LFB45:
 544:.\main.c      **** 
 545:.\main.c      **** int main()
 546:.\main.c      **** {  
 1444              		.loc 1 546 0
 1445              		.cfi_startproc
 1446 0000 80B5     		push	{r7, lr}
 1447              		.cfi_def_cfa_offset 8
 1448              		.cfi_offset 7, -8
 1449              		.cfi_offset 14, -4
 1450 0002 86B0     		sub	sp, sp, #24
 1451              		.cfi_def_cfa_offset 32
 1452 0004 00AF     		add	r7, sp, #0
 1453              		.cfi_def_cfa_register 7
 547:.\main.c      ****     CyGlobalIntEnable;
 1454              		.loc 1 547 0
 1455              	@ 547 ".\main.c" 1
 1456 0006 62B6     		CPSIE   i
 1457              	@ 0 "" 2
 548:.\main.c      ****     
 549:.\main.c      ****     //Define variables
 550:.\main.c      ****     time_t t;
 551:.\main.c      ****     uint8 counter;
 552:.\main.c      ****     
 553:.\main.c      ****     //start all of our components
 554:.\main.c      ****     Clock_pwm_Start();
 1458              		.loc 1 554 0
 1459              		.code	16
 1460 0008 FFF7FEFF 		bl	Clock_pwm_Start
 555:.\main.c      ****     Clock_counter_Start();
 1461              		.loc 1 555 0
 1462 000c FFF7FEFF 		bl	Clock_counter_Start
 556:.\main.c      ****     
 557:.\main.c      ****     UART_1_Start();
 1463              		.loc 1 557 0
 1464 0010 FFF7FEFF 		bl	UART_1_Start
 558:.\main.c      ****     
 559:.\main.c      ****     PWM_1_Start();
 1465              		.loc 1 559 0
 1466 0014 FFF7FEFF 		bl	PWM_1_Start
 560:.\main.c      ****     PWM_2_Start();
 1467              		.loc 1 560 0
 1468 0018 FFF7FEFF 		bl	PWM_2_Start
 561:.\main.c      ****     PWM_3_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 38


 1469              		.loc 1 561 0
 1470 001c FFF7FEFF 		bl	PWM_3_Start
 562:.\main.c      ****     
 563:.\main.c      ****     PWM_3_WriteCompare(1500); //Initialize our motor drivers
 1471              		.loc 1 563 0
 1472 0020 564B     		ldr	r3, .L161
 1473 0022 181C     		mov	r0, r3
 1474 0024 FFF7FEFF 		bl	PWM_3_WriteCompare
 564:.\main.c      ****     CyDelay(10000);
 1475              		.loc 1 564 0
 1476 0028 554B     		ldr	r3, .L161+4
 1477 002a 181C     		mov	r0, r3
 1478 002c FFF7FEFF 		bl	CyDelay
 565:.\main.c      ****    
 566:.\main.c      ****     Timer_1_Start();
 1479              		.loc 1 566 0
 1480 0030 FFF7FEFF 		bl	Timer_1_Start
 567:.\main.c      ****     
 568:.\main.c      ****     ADC_Start();
 1481              		.loc 1 568 0
 1482 0034 FFF7FEFF 		bl	ADC_Start
 569:.\main.c      ****     ADC_StartConvert();
 1483              		.loc 1 569 0
 1484 0038 FFF7FEFF 		bl	ADC_StartConvert
 570:.\main.c      ****     
 571:.\main.c      ****     isr_1_StartEx(timer_isr);
 1485              		.loc 1 571 0
 1486 003c 514B     		ldr	r3, .L161+8
 1487 003e 181C     		mov	r0, r3
 1488 0040 FFF7FEFF 		bl	isr_1_StartEx
 572:.\main.c      ****     
 573:.\main.c      **** //    uint8 second_counter = 0;
 574:.\main.c      ****     
 575:.\main.c      ****     
 576:.\main.c      ****     
 577:.\main.c      ****     
 578:.\main.c      ****     //helpers for generating random arrays
 579:.\main.c      ****     srand((unsigned) time(&t));
 1489              		.loc 1 579 0
 1490 0044 3B1C     		mov	r3, r7
 1491 0046 181C     		mov	r0, r3
 1492 0048 FFF7FEFF 		bl	time
 1493 004c 031C     		mov	r3, r0
 1494 004e 181C     		mov	r0, r3
 1495 0050 FFF7FEFF 		bl	srand
 580:.\main.c      ****     int direction = 0;
 1496              		.loc 1 580 0
 1497 0054 0023     		mov	r3, #0
 1498 0056 FB60     		str	r3, [r7, #12]
 1499              	.L159:
 581:.\main.c      ****     for(;;)
 582:.\main.c      ****     {
 583:.\main.c      ****         //check addresses
 584:.\main.c      ****         //TODO get the address bytes from Steve
 585:.\main.c      ****         
 586:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1500              		.loc 1 586 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 39


 1501 0058 4B4B     		ldr	r3, .L161+12
 1502 005a 1B78     		ldrb	r3, [r3]
 1503 005c 002B     		cmp	r3, #0
 1504 005e 07D0     		beq	.L150
 587:.\main.c      ****         {
 588:.\main.c      ****             fill_data_array();
 1505              		.loc 1 588 0
 1506 0060 FFF7FEFF 		bl	fill_data_array
 589:.\main.c      ****             new_pack = 1;
 1507              		.loc 1 589 0
 1508 0064 494B     		ldr	r3, .L161+16
 1509 0066 0122     		mov	r2, #1
 1510 0068 1A70     		strb	r2, [r3]
 590:.\main.c      ****             fin_exec = 0;
 1511              		.loc 1 590 0
 1512 006a 494B     		ldr	r3, .L161+20
 1513 006c 0022     		mov	r2, #0
 1514 006e 1A70     		strb	r2, [r3]
 1515              	.L150:
 591:.\main.c      ****         }
 592:.\main.c      ****         
 593:.\main.c      ****         baseAzimuth();
 1516              		.loc 1 593 0
 1517 0070 FFF7FEFF 		bl	baseAzimuth
 594:.\main.c      **** //        shoulder();
 595:.\main.c      ****         elbow();
 1518              		.loc 1 595 0
 1519 0074 FFF7FEFF 		bl	elbow
 596:.\main.c      **** //        wristTilt();
 597:.\main.c      **** //        wristRotate();
 598:.\main.c      **** 
 599:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1520              		.loc 1 599 0
 1521 0078 454B     		ldr	r3, .L161+20
 1522 007a 1B78     		ldrb	r3, [r3]
 1523 007c 022B     		cmp	r3, #2
 1524 007e 03D1     		bne	.L151
 600:.\main.c      ****         {
 601:.\main.c      ****             new_pack = 0;
 1525              		.loc 1 601 0
 1526 0080 424B     		ldr	r3, .L161+16
 1527 0082 0022     		mov	r2, #0
 1528 0084 1A70     		strb	r2, [r3]
 602:.\main.c      ****         }
 603:.\main.c      ****         
 604:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 1529              		.loc 1 604 0
 1530 0086 FFE7     		b	.L160
 1531              	.L151:
 1532              	.L160:
 1533 0088 C046     		mov	r8, r8
 1534              	.L152:
 1535              		.loc 1 604 0 is_stmt 0 discriminator 1
 1536 008a 424B     		ldr	r3, .L161+24
 1537 008c 1B78     		ldrb	r3, [r3]
 1538 008e 002B     		cmp	r3, #0
 1539 0090 FBD0     		beq	.L152
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 40


 605:.\main.c      ****         timerFlag = 0;
 1540              		.loc 1 605 0 is_stmt 1
 1541 0092 404B     		ldr	r3, .L161+24
 1542 0094 0022     		mov	r2, #0
 1543 0096 1A70     		strb	r2, [r3]
 606:.\main.c      ****         
 607:.\main.c      ****         counter++;
 1544              		.loc 1 607 0
 1545 0098 3B1C     		mov	r3, r7
 1546 009a 1733     		add	r3, r3, #23
 1547 009c 1A78     		ldrb	r2, [r3]
 1548 009e 3B1C     		mov	r3, r7
 1549 00a0 1733     		add	r3, r3, #23
 1550 00a2 0132     		add	r2, r2, #1
 1551 00a4 1A70     		strb	r2, [r3]
 608:.\main.c      ****         
 609:.\main.c      ****         if(counter == 20)
 1552              		.loc 1 609 0
 1553 00a6 3B1C     		mov	r3, r7
 1554 00a8 1733     		add	r3, r3, #23
 1555 00aa 1B78     		ldrb	r3, [r3]
 1556 00ac 142B     		cmp	r3, #20
 1557 00ae 63D1     		bne	.L153
 1558              	.LBB4:
 610:.\main.c      ****         {
 611:.\main.c      ****             uint16 feedback1 = ADC_GetResult16(2);
 1559              		.loc 1 611 0
 1560 00b0 0220     		mov	r0, #2
 1561 00b2 FFF7FEFF 		bl	ADC_GetResult16
 1562 00b6 031C     		mov	r3, r0
 1563 00b8 1A1C     		mov	r2, r3
 1564 00ba 3B1C     		mov	r3, r7
 1565 00bc 0A33     		add	r3, r3, #10
 1566 00be 1A80     		strh	r2, [r3]
 612:.\main.c      ****             int16 forward = 1000;
 1567              		.loc 1 612 0
 1568 00c0 3B1C     		mov	r3, r7
 1569 00c2 0833     		add	r3, r3, #8
 1570 00c4 FA22     		mov	r2, #250
 1571 00c6 9200     		lsl	r2, r2, #2
 1572 00c8 1A80     		strh	r2, [r3]
 613:.\main.c      ****             int16 backward = -1000;
 1573              		.loc 1 613 0
 1574 00ca BB1D     		add	r3, r7, #6
 1575 00cc 324A     		ldr	r2, .L161+28
 1576 00ce 1A80     		strh	r2, [r3]
 1577              	.LBB5:
 614:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1578              		.loc 1 614 0
 1579 00d0 0023     		mov	r3, #0
 1580 00d2 3B61     		str	r3, [r7, #16]
 1581 00d4 45E0     		b	.L154
 1582              	.L158:
 615:.\main.c      ****             {
 616:.\main.c      **** //                int16 random_number = rand()%2001 - 1000;
 617:.\main.c      **** //                test_array[i] = random_number >> 8;
 618:.\main.c      **** //                test_array[i+1] = random_number & 0x00FF;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 41


 619:.\main.c      **** //                if((second_counter%2) == 0)
 620:.\main.c      **** //                {
 621:.\main.c      **** //                    test_array[i] = ;
 622:.\main.c      **** //                }
 623:.\main.c      ****                 if (feedback1 > 500)
 1583              		.loc 1 623 0
 1584 00d6 3B1C     		mov	r3, r7
 1585 00d8 0A33     		add	r3, r3, #10
 1586 00da 1A88     		ldrh	r2, [r3]
 1587 00dc FA23     		mov	r3, #250
 1588 00de 5B00     		lsl	r3, r3, #1
 1589 00e0 9A42     		cmp	r2, r3
 1590 00e2 15D9     		bls	.L155
 624:.\main.c      ****                 {
 625:.\main.c      ****                     test_array[i] = forward >> 8;
 1591              		.loc 1 625 0
 1592 00e4 3B1C     		mov	r3, r7
 1593 00e6 0833     		add	r3, r3, #8
 1594 00e8 0022     		mov	r2, #0
 1595 00ea 9B5E     		ldrsh	r3, [r3, r2]
 1596 00ec 1B12     		asr	r3, r3, #8
 1597 00ee 99B2     		uxth	r1, r3
 1598 00f0 2A4B     		ldr	r3, .L161+32
 1599 00f2 3A69     		ldr	r2, [r7, #16]
 1600 00f4 5200     		lsl	r2, r2, #1
 1601 00f6 D152     		strh	r1, [r2, r3]
 626:.\main.c      ****                     test_array[i+1] = forward & 0x00FF;
 1602              		.loc 1 626 0
 1603 00f8 3B69     		ldr	r3, [r7, #16]
 1604 00fa 5A1C     		add	r2, r3, #1
 1605 00fc 3B1C     		mov	r3, r7
 1606 00fe 0833     		add	r3, r3, #8
 1607 0100 1988     		ldrh	r1, [r3]
 1608 0102 FF23     		mov	r3, #255
 1609 0104 0B40     		and	r3, r1
 1610 0106 99B2     		uxth	r1, r3
 1611 0108 244B     		ldr	r3, .L161+32
 1612 010a 5200     		lsl	r2, r2, #1
 1613 010c D152     		strh	r1, [r2, r3]
 1614 010e 25E0     		b	.L156
 1615              	.L155:
 627:.\main.c      ****                 }
 628:.\main.c      ****                 else if (feedback1 < 500)
 1616              		.loc 1 628 0
 1617 0110 3B1C     		mov	r3, r7
 1618 0112 0A33     		add	r3, r3, #10
 1619 0114 1A88     		ldrh	r2, [r3]
 1620 0116 F423     		mov	r3, #244
 1621 0118 FF33     		add	r3, r3, #255
 1622 011a 9A42     		cmp	r2, r3
 1623 011c 13D8     		bhi	.L157
 629:.\main.c      ****                 {
 630:.\main.c      ****                     test_array[i] = backward >> 8;
 1624              		.loc 1 630 0
 1625 011e BB1D     		add	r3, r7, #6
 1626 0120 0022     		mov	r2, #0
 1627 0122 9B5E     		ldrsh	r3, [r3, r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 42


 1628 0124 1B12     		asr	r3, r3, #8
 1629 0126 99B2     		uxth	r1, r3
 1630 0128 1C4B     		ldr	r3, .L161+32
 1631 012a 3A69     		ldr	r2, [r7, #16]
 1632 012c 5200     		lsl	r2, r2, #1
 1633 012e D152     		strh	r1, [r2, r3]
 631:.\main.c      ****                     test_array[i+1] = backward & 0x00FF;
 1634              		.loc 1 631 0
 1635 0130 3B69     		ldr	r3, [r7, #16]
 1636 0132 5A1C     		add	r2, r3, #1
 1637 0134 BB1D     		add	r3, r7, #6
 1638 0136 1988     		ldrh	r1, [r3]
 1639 0138 FF23     		mov	r3, #255
 1640 013a 0B40     		and	r3, r1
 1641 013c 99B2     		uxth	r1, r3
 1642 013e 174B     		ldr	r3, .L161+32
 1643 0140 5200     		lsl	r2, r2, #1
 1644 0142 D152     		strh	r1, [r2, r3]
 1645 0144 0AE0     		b	.L156
 1646              	.L157:
 632:.\main.c      ****                 }
 633:.\main.c      ****                 else
 634:.\main.c      ****                 {
 635:.\main.c      ****                     test_array[i] = 0;
 1647              		.loc 1 635 0
 1648 0146 154B     		ldr	r3, .L161+32
 1649 0148 3A69     		ldr	r2, [r7, #16]
 1650 014a 5200     		lsl	r2, r2, #1
 1651 014c 0021     		mov	r1, #0
 1652 014e D152     		strh	r1, [r2, r3]
 636:.\main.c      ****                     test_array[i+1] = 0;
 1653              		.loc 1 636 0
 1654 0150 3B69     		ldr	r3, [r7, #16]
 1655 0152 5A1C     		add	r2, r3, #1
 1656 0154 114B     		ldr	r3, .L161+32
 1657 0156 5200     		lsl	r2, r2, #1
 1658 0158 0021     		mov	r1, #0
 1659 015a D152     		strh	r1, [r2, r3]
 1660              	.L156:
 614:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1661              		.loc 1 614 0
 1662 015c 3B69     		ldr	r3, [r7, #16]
 1663 015e 0233     		add	r3, r3, #2
 1664 0160 3B61     		str	r3, [r7, #16]
 1665              	.L154:
 614:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 1666              		.loc 1 614 0 is_stmt 0 discriminator 1
 1667 0162 3B69     		ldr	r3, [r7, #16]
 1668 0164 092B     		cmp	r3, #9
 1669 0166 B6DD     		ble	.L158
 1670              	.LBE5:
 637:.\main.c      ****                 }
 638:.\main.c      ****                 
 639:.\main.c      ****                 
 640:.\main.c      ****                  
 641:.\main.c      ****             }
 642:.\main.c      ****             counter = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 43


 1671              		.loc 1 642 0 is_stmt 1
 1672 0168 3B1C     		mov	r3, r7
 1673 016a 1733     		add	r3, r3, #23
 1674 016c 0022     		mov	r2, #0
 1675 016e 1A70     		strb	r2, [r3]
 643:.\main.c      ****             wiznet = 1;
 1676              		.loc 1 643 0
 1677 0170 054B     		ldr	r3, .L161+12
 1678 0172 0122     		mov	r2, #1
 1679 0174 1A70     		strb	r2, [r3]
 1680              	.LBE4:
 644:.\main.c      ****         }
 645:.\main.c      ****         
 646:.\main.c      **** //            //Potential solution to how we will want to send feedback
 647:.\main.c      **** //            feedback_count++;
 648:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 649:.\main.c      **** //            {                                        //time through the full set of instructions
 650:.\main.c      **** //                send_feedback();
 651:.\main.c      **** //            }
 652:.\main.c      ****     }
 1681              		.loc 1 652 0
 1682 0176 6FE7     		b	.L159
 1683              	.L153:
 1684 0178 6EE7     		b	.L159
 1685              	.L162:
 1686 017a C046     		.align	2
 1687              	.L161:
 1688 017c DC050000 		.word	1500
 1689 0180 10270000 		.word	10000
 1690 0184 00000000 		.word	timer_isr
 1691 0188 00000000 		.word	wiznet
 1692 018c 00000000 		.word	new_pack
 1693 0190 00000000 		.word	fin_exec
 1694 0194 00000000 		.word	timerFlag
 1695 0198 18FCFFFF 		.word	-1000
 1696 019c 00000000 		.word	test_array
 1697              		.cfi_endproc
 1698              	.LFE45:
 1699              		.size	main, .-main
 1700              		.text
 1701              	.Letext0:
 1702              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1703              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1704              		.section	.debug_info,"",%progbits
 1705              	.Ldebug_info0:
 1706 0000 29060000 		.4byte	0x629
 1707 0004 0400     		.2byte	0x4
 1708 0006 00000000 		.4byte	.Ldebug_abbrev0
 1709 000a 04       		.byte	0x4
 1710 000b 01       		.uleb128 0x1
 1711 000c F6030000 		.4byte	.LASF87
 1712 0010 01       		.byte	0x1
 1713 0011 C7030000 		.4byte	.LASF88
 1714 0015 BA020000 		.4byte	.LASF89
 1715 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1716 001d 00000000 		.4byte	0
 1717 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 44


 1718 0025 02       		.uleb128 0x2
 1719 0026 01       		.byte	0x1
 1720 0027 06       		.byte	0x6
 1721 0028 20010000 		.4byte	.LASF0
 1722 002c 02       		.uleb128 0x2
 1723 002d 01       		.byte	0x1
 1724 002e 08       		.byte	0x8
 1725 002f C5010000 		.4byte	.LASF1
 1726 0033 02       		.uleb128 0x2
 1727 0034 02       		.byte	0x2
 1728 0035 05       		.byte	0x5
 1729 0036 2F000000 		.4byte	.LASF2
 1730 003a 02       		.uleb128 0x2
 1731 003b 02       		.byte	0x2
 1732 003c 07       		.byte	0x7
 1733 003d 78020000 		.4byte	.LASF3
 1734 0041 02       		.uleb128 0x2
 1735 0042 04       		.byte	0x4
 1736 0043 05       		.byte	0x5
 1737 0044 67010000 		.4byte	.LASF4
 1738 0048 02       		.uleb128 0x2
 1739 0049 04       		.byte	0x4
 1740 004a 07       		.byte	0x7
 1741 004b 52020000 		.4byte	.LASF5
 1742 004f 02       		.uleb128 0x2
 1743 0050 08       		.byte	0x8
 1744 0051 05       		.byte	0x5
 1745 0052 8A000000 		.4byte	.LASF6
 1746 0056 02       		.uleb128 0x2
 1747 0057 08       		.byte	0x8
 1748 0058 07       		.byte	0x7
 1749 0059 2E020000 		.4byte	.LASF7
 1750 005d 03       		.uleb128 0x3
 1751 005e 04       		.byte	0x4
 1752 005f 05       		.byte	0x5
 1753 0060 696E7400 		.ascii	"int\000"
 1754 0064 02       		.uleb128 0x2
 1755 0065 04       		.byte	0x4
 1756 0066 07       		.byte	0x7
 1757 0067 45020000 		.4byte	.LASF8
 1758 006b 04       		.uleb128 0x4
 1759 006c A4010000 		.4byte	.LASF9
 1760 0070 02       		.byte	0x2
 1761 0071 A1       		.byte	0xa1
 1762 0072 2C000000 		.4byte	0x2c
 1763 0076 04       		.uleb128 0x4
 1764 0077 E6000000 		.4byte	.LASF10
 1765 007b 02       		.byte	0x2
 1766 007c A2       		.byte	0xa2
 1767 007d 3A000000 		.4byte	0x3a
 1768 0081 04       		.uleb128 0x4
 1769 0082 5E030000 		.4byte	.LASF11
 1770 0086 02       		.byte	0x2
 1771 0087 A3       		.byte	0xa3
 1772 0088 48000000 		.4byte	0x48
 1773 008c 04       		.uleb128 0x4
 1774 008d 08010000 		.4byte	.LASF12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 45


 1775 0091 02       		.byte	0x2
 1776 0092 A5       		.byte	0xa5
 1777 0093 33000000 		.4byte	0x33
 1778 0097 02       		.uleb128 0x2
 1779 0098 04       		.byte	0x4
 1780 0099 04       		.byte	0x4
 1781 009a 2C010000 		.4byte	.LASF13
 1782 009e 02       		.uleb128 0x2
 1783 009f 08       		.byte	0x8
 1784 00a0 04       		.byte	0x4
 1785 00a1 D0030000 		.4byte	.LASF14
 1786 00a5 02       		.uleb128 0x2
 1787 00a6 01       		.byte	0x1
 1788 00a7 08       		.byte	0x8
 1789 00a8 62010000 		.4byte	.LASF15
 1790 00ac 02       		.uleb128 0x2
 1791 00ad 04       		.byte	0x4
 1792 00ae 07       		.byte	0x7
 1793 00af 46000000 		.4byte	.LASF16
 1794 00b3 05       		.uleb128 0x5
 1795 00b4 04       		.byte	0x4
 1796 00b5 A5000000 		.4byte	0xa5
 1797 00b9 04       		.uleb128 0x4
 1798 00ba 80030000 		.4byte	.LASF17
 1799 00be 03       		.byte	0x3
 1800 00bf 7A       		.byte	0x7a
 1801 00c0 41000000 		.4byte	0x41
 1802 00c4 06       		.uleb128 0x6
 1803 00c5 8B020000 		.4byte	.LASF22
 1804 00c9 01       		.byte	0x1
 1805 00ca 01       		.byte	0x1
 1806 00cb 78       		.byte	0x78
 1807 00cc E9000000 		.4byte	0xe9
 1808 00d0 07       		.uleb128 0x7
 1809 00d1 9A010000 		.4byte	.LASF18
 1810 00d5 00       		.sleb128 0
 1811 00d6 07       		.uleb128 0x7
 1812 00d7 14000000 		.4byte	.LASF19
 1813 00db 01       		.sleb128 1
 1814 00dc 07       		.uleb128 0x7
 1815 00dd 65030000 		.4byte	.LASF20
 1816 00e1 02       		.sleb128 2
 1817 00e2 07       		.uleb128 0x7
 1818 00e3 FD010000 		.4byte	.LASF21
 1819 00e7 03       		.sleb128 3
 1820 00e8 00       		.byte	0
 1821 00e9 06       		.uleb128 0x6
 1822 00ea 5A000000 		.4byte	.LASF23
 1823 00ee 01       		.byte	0x1
 1824 00ef 01       		.byte	0x1
 1825 00f0 A9       		.byte	0xa9
 1826 00f1 0E010000 		.4byte	0x10e
 1827 00f5 07       		.uleb128 0x7
 1828 00f6 EA030000 		.4byte	.LASF24
 1829 00fa 00       		.sleb128 0
 1830 00fb 07       		.uleb128 0x7
 1831 00fc 39000000 		.4byte	.LASF25
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 46


 1832 0100 01       		.sleb128 1
 1833 0101 07       		.uleb128 0x7
 1834 0102 53010000 		.4byte	.LASF26
 1835 0106 02       		.sleb128 2
 1836 0107 07       		.uleb128 0x7
 1837 0108 AF040000 		.4byte	.LASF27
 1838 010c 03       		.sleb128 3
 1839 010d 00       		.byte	0
 1840 010e 06       		.uleb128 0x6
 1841 010f A5020000 		.4byte	.LASF28
 1842 0113 01       		.byte	0x1
 1843 0114 01       		.byte	0x1
 1844 0115 F7       		.byte	0xf7
 1845 0116 33010000 		.4byte	0x133
 1846 011a 07       		.uleb128 0x7
 1847 011b 32010000 		.4byte	.LASF29
 1848 011f 00       		.sleb128 0
 1849 0120 07       		.uleb128 0x7
 1850 0121 0B020000 		.4byte	.LASF30
 1851 0125 01       		.sleb128 1
 1852 0126 07       		.uleb128 0x7
 1853 0127 A2040000 		.4byte	.LASF31
 1854 012b 02       		.sleb128 2
 1855 012c 07       		.uleb128 0x7
 1856 012d 7D040000 		.4byte	.LASF32
 1857 0131 03       		.sleb128 3
 1858 0132 00       		.byte	0
 1859 0133 08       		.uleb128 0x8
 1860 0134 AE000000 		.4byte	.LASF33
 1861 0138 01       		.byte	0x1
 1862 0139 01       		.byte	0x1
 1863 013a 6A01     		.2byte	0x16a
 1864 013c 59010000 		.4byte	0x159
 1865 0140 07       		.uleb128 0x7
 1866 0141 74000000 		.4byte	.LASF34
 1867 0145 00       		.sleb128 0
 1868 0146 07       		.uleb128 0x7
 1869 0147 09000000 		.4byte	.LASF35
 1870 014b 01       		.sleb128 1
 1871 014c 07       		.uleb128 0x7
 1872 014d A0000000 		.4byte	.LASF36
 1873 0151 02       		.sleb128 2
 1874 0152 07       		.uleb128 0x7
 1875 0153 6D020000 		.4byte	.LASF37
 1876 0157 03       		.sleb128 3
 1877 0158 00       		.byte	0
 1878 0159 08       		.uleb128 0x8
 1879 015a 70010000 		.4byte	.LASF38
 1880 015e 01       		.byte	0x1
 1881 015f 01       		.byte	0x1
 1882 0160 D501     		.2byte	0x1d5
 1883 0162 7F010000 		.4byte	0x17f
 1884 0166 07       		.uleb128 0x7
 1885 0167 00000000 		.4byte	.LASF39
 1886 016b 00       		.sleb128 0
 1887 016c 07       		.uleb128 0x7
 1888 016d 98000000 		.4byte	.LASF40
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 47


 1889 0171 01       		.sleb128 1
 1890 0172 07       		.uleb128 0x7
 1891 0173 4F000000 		.4byte	.LASF41
 1892 0177 02       		.sleb128 2
 1893 0178 07       		.uleb128 0x7
 1894 0179 18010000 		.4byte	.LASF42
 1895 017d 03       		.sleb128 3
 1896 017e 00       		.byte	0
 1897 017f 09       		.uleb128 0x9
 1898 0180 D7030000 		.4byte	.LASF43
 1899 0184 01       		.byte	0x1
 1900 0185 31       		.byte	0x31
 1901 0186 00000000 		.4byte	.LFB33
 1902 018a 28000000 		.4byte	.LFE33-.LFB33
 1903 018e 01       		.uleb128 0x1
 1904 018f 9C       		.byte	0x9c
 1905 0190 A3010000 		.4byte	0x1a3
 1906 0194 0A       		.uleb128 0xa
 1907 0195 D3010000 		.4byte	.LASF45
 1908 0199 01       		.byte	0x1
 1909 019a 33       		.byte	0x33
 1910 019b 81000000 		.4byte	0x81
 1911 019f 02       		.uleb128 0x2
 1912 01a0 91       		.byte	0x91
 1913 01a1 74       		.sleb128 -12
 1914 01a2 00       		.byte	0
 1915 01a3 09       		.uleb128 0x9
 1916 01a4 B2020000 		.4byte	.LASF44
 1917 01a8 01       		.byte	0x1
 1918 01a9 4A       		.byte	0x4a
 1919 01aa 00000000 		.4byte	.LFB34
 1920 01ae 62000000 		.4byte	.LFE34-.LFB34
 1921 01b2 01       		.uleb128 0x1
 1922 01b3 9C       		.byte	0x9c
 1923 01b4 E9010000 		.4byte	0x1e9
 1924 01b8 0B       		.uleb128 0xb
 1925 01b9 7300     		.ascii	"s\000"
 1926 01bb 01       		.byte	0x1
 1927 01bc 4A       		.byte	0x4a
 1928 01bd B3000000 		.4byte	0xb3
 1929 01c1 02       		.uleb128 0x2
 1930 01c2 91       		.byte	0x91
 1931 01c3 64       		.sleb128 -28
 1932 01c4 0C       		.uleb128 0xc
 1933 01c5 6900     		.ascii	"i\000"
 1934 01c7 01       		.byte	0x1
 1935 01c8 4C       		.byte	0x4c
 1936 01c9 5D000000 		.4byte	0x5d
 1937 01cd 02       		.uleb128 0x2
 1938 01ce 91       		.byte	0x91
 1939 01cf 74       		.sleb128 -12
 1940 01d0 0C       		.uleb128 0xc
 1941 01d1 6A00     		.ascii	"j\000"
 1942 01d3 01       		.byte	0x1
 1943 01d4 4C       		.byte	0x4c
 1944 01d5 5D000000 		.4byte	0x5d
 1945 01d9 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 48


 1946 01da 91       		.byte	0x91
 1947 01db 70       		.sleb128 -16
 1948 01dc 0C       		.uleb128 0xc
 1949 01dd 6300     		.ascii	"c\000"
 1950 01df 01       		.byte	0x1
 1951 01e0 4D       		.byte	0x4d
 1952 01e1 A5000000 		.4byte	0xa5
 1953 01e5 02       		.uleb128 0x2
 1954 01e6 91       		.byte	0x91
 1955 01e7 6F       		.sleb128 -17
 1956 01e8 00       		.byte	0
 1957 01e9 09       		.uleb128 0x9
 1958 01ea B2010000 		.4byte	.LASF46
 1959 01ee 01       		.byte	0x1
 1960 01ef 56       		.byte	0x56
 1961 01f0 00000000 		.4byte	.LFB35
 1962 01f4 7C000000 		.4byte	.LFE35-.LFB35
 1963 01f8 01       		.uleb128 0x1
 1964 01f9 9C       		.byte	0x9c
 1965 01fa 31020000 		.4byte	0x231
 1966 01fe 0B       		.uleb128 0xb
 1967 01ff 6E00     		.ascii	"n\000"
 1968 0201 01       		.byte	0x1
 1969 0202 56       		.byte	0x56
 1970 0203 5D000000 		.4byte	0x5d
 1971 0207 02       		.uleb128 0x2
 1972 0208 91       		.byte	0x91
 1973 0209 64       		.sleb128 -28
 1974 020a 0B       		.uleb128 0xb
 1975 020b 7300     		.ascii	"s\000"
 1976 020d 01       		.byte	0x1
 1977 020e 56       		.byte	0x56
 1978 020f B3000000 		.4byte	0xb3
 1979 0213 02       		.uleb128 0x2
 1980 0214 91       		.byte	0x91
 1981 0215 60       		.sleb128 -32
 1982 0216 0C       		.uleb128 0xc
 1983 0217 6900     		.ascii	"i\000"
 1984 0219 01       		.byte	0x1
 1985 021a 58       		.byte	0x58
 1986 021b 5D000000 		.4byte	0x5d
 1987 021f 02       		.uleb128 0x2
 1988 0220 91       		.byte	0x91
 1989 0221 6C       		.sleb128 -20
 1990 0222 0A       		.uleb128 0xa
 1991 0223 72030000 		.4byte	.LASF47
 1992 0227 01       		.byte	0x1
 1993 0228 58       		.byte	0x58
 1994 0229 5D000000 		.4byte	0x5d
 1995 022d 02       		.uleb128 0x2
 1996 022e 91       		.byte	0x91
 1997 022f 68       		.sleb128 -24
 1998 0230 00       		.byte	0
 1999 0231 0D       		.uleb128 0xd
 2000 0232 9F030000 		.4byte	.LASF53
 2001 0236 01       		.byte	0x1
 2002 0237 68       		.byte	0x68
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 49


 2003 0238 76000000 		.4byte	0x76
 2004 023c 00000000 		.4byte	.LFB36
 2005 0240 28000000 		.4byte	.LFE36-.LFB36
 2006 0244 01       		.uleb128 0x1
 2007 0245 9C       		.byte	0x9c
 2008 0246 67020000 		.4byte	0x267
 2009 024a 0E       		.uleb128 0xe
 2010 024b 2A030000 		.4byte	.LASF48
 2011 024f 01       		.byte	0x1
 2012 0250 68       		.byte	0x68
 2013 0251 81000000 		.4byte	0x81
 2014 0255 02       		.uleb128 0x2
 2015 0256 91       		.byte	0x91
 2016 0257 6C       		.sleb128 -20
 2017 0258 0A       		.uleb128 0xa
 2018 0259 9C020000 		.4byte	.LASF49
 2019 025d 01       		.byte	0x1
 2020 025e 69       		.byte	0x69
 2021 025f 76000000 		.4byte	0x76
 2022 0263 02       		.uleb128 0x2
 2023 0264 91       		.byte	0x91
 2024 0265 76       		.sleb128 -10
 2025 0266 00       		.byte	0
 2026 0267 0F       		.uleb128 0xf
 2027 0268 1F000000 		.4byte	.LASF57
 2028 026c 01       		.byte	0x1
 2029 026d 6D       		.byte	0x6d
 2030 026e 00000000 		.4byte	.LFB37
 2031 0272 4C000000 		.4byte	.LFE37-.LFB37
 2032 0276 01       		.uleb128 0x1
 2033 0277 9C       		.byte	0x9c
 2034 0278 89020000 		.4byte	0x289
 2035 027c 0C       		.uleb128 0xc
 2036 027d 6900     		.ascii	"i\000"
 2037 027f 01       		.byte	0x1
 2038 0280 6F       		.byte	0x6f
 2039 0281 6B000000 		.4byte	0x6b
 2040 0285 02       		.uleb128 0x2
 2041 0286 91       		.byte	0x91
 2042 0287 77       		.sleb128 -9
 2043 0288 00       		.byte	0
 2044 0289 10       		.uleb128 0x10
 2045 028a 49010000 		.4byte	.LASF50
 2046 028e 01       		.byte	0x1
 2047 028f 7A       		.byte	0x7a
 2048 0290 00000000 		.4byte	.LFB38
 2049 0294 48000000 		.4byte	.LFE38-.LFB38
 2050 0298 01       		.uleb128 0x1
 2051 0299 9C       		.byte	0x9c
 2052 029a 10       		.uleb128 0x10
 2053 029b FC000000 		.4byte	.LASF51
 2054 029f 01       		.byte	0x1
 2055 02a0 AB       		.byte	0xab
 2056 02a1 00000000 		.4byte	.LFB39
 2057 02a5 48000000 		.4byte	.LFE39-.LFB39
 2058 02a9 01       		.uleb128 0x1
 2059 02aa 9C       		.byte	0x9c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 50


 2060 02ab 10       		.uleb128 0x10
 2061 02ac B7010000 		.4byte	.LASF52
 2062 02b0 01       		.byte	0x1
 2063 02b1 DA       		.byte	0xda
 2064 02b2 00000000 		.4byte	.LFB40
 2065 02b6 08000000 		.4byte	.LFE40-.LFB40
 2066 02ba 01       		.uleb128 0x1
 2067 02bb 9C       		.byte	0x9c
 2068 02bc 0D       		.uleb128 0xd
 2069 02bd 87040000 		.4byte	.LASF54
 2070 02c1 01       		.byte	0x1
 2071 02c2 E4       		.byte	0xe4
 2072 02c3 76000000 		.4byte	0x76
 2073 02c7 00000000 		.4byte	.LFB41
 2074 02cb 78000000 		.4byte	.LFE41-.LFB41
 2075 02cf 01       		.uleb128 0x1
 2076 02d0 9C       		.byte	0x9c
 2077 02d1 1A030000 		.4byte	0x31a
 2078 02d5 0E       		.uleb128 0xe
 2079 02d6 87030000 		.4byte	.LASF55
 2080 02da 01       		.byte	0x1
 2081 02db E4       		.byte	0xe4
 2082 02dc 1A030000 		.4byte	0x31a
 2083 02e0 02       		.uleb128 0x2
 2084 02e1 91       		.byte	0x91
 2085 02e2 64       		.sleb128 -28
 2086 02e3 0E       		.uleb128 0xe
 2087 02e4 15020000 		.4byte	.LASF56
 2088 02e8 01       		.byte	0x1
 2089 02e9 E4       		.byte	0xe4
 2090 02ea 6B000000 		.4byte	0x6b
 2091 02ee 02       		.uleb128 0x2
 2092 02ef 91       		.byte	0x91
 2093 02f0 63       		.sleb128 -29
 2094 02f1 0C       		.uleb128 0xc
 2095 02f2 6900     		.ascii	"i\000"
 2096 02f4 01       		.byte	0x1
 2097 02f5 E6       		.byte	0xe6
 2098 02f6 6B000000 		.4byte	0x6b
 2099 02fa 02       		.uleb128 0x2
 2100 02fb 91       		.byte	0x91
 2101 02fc 77       		.sleb128 -9
 2102 02fd 0C       		.uleb128 0xc
 2103 02fe 73756D00 		.ascii	"sum\000"
 2104 0302 01       		.byte	0x1
 2105 0303 E7       		.byte	0xe7
 2106 0304 81000000 		.4byte	0x81
 2107 0308 02       		.uleb128 0x2
 2108 0309 91       		.byte	0x91
 2109 030a 70       		.sleb128 -16
 2110 030b 0C       		.uleb128 0xc
 2111 030c 61766700 		.ascii	"avg\000"
 2112 0310 01       		.byte	0x1
 2113 0311 E8       		.byte	0xe8
 2114 0312 76000000 		.4byte	0x76
 2115 0316 02       		.uleb128 0x2
 2116 0317 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 51


 2117 0318 6E       		.sleb128 -18
 2118 0319 00       		.byte	0
 2119 031a 05       		.uleb128 0x5
 2120 031b 04       		.byte	0x4
 2121 031c 76000000 		.4byte	0x76
 2122 0320 11       		.uleb128 0x11
 2123 0321 E0000000 		.4byte	.LASF58
 2124 0325 01       		.byte	0x1
 2125 0326 F8       		.byte	0xf8
 2126 0327 00000000 		.4byte	.LFB42
 2127 032b E0010000 		.4byte	.LFE42-.LFB42
 2128 032f 01       		.uleb128 0x1
 2129 0330 9C       		.byte	0x9c
 2130 0331 87030000 		.4byte	0x387
 2131 0335 0C       		.uleb128 0xc
 2132 0336 6900     		.ascii	"i\000"
 2133 0338 01       		.byte	0x1
 2134 0339 FE       		.byte	0xfe
 2135 033a 6B000000 		.4byte	0x6b
 2136 033e 02       		.uleb128 0x2
 2137 033f 91       		.byte	0x91
 2138 0340 6F       		.sleb128 -17
 2139 0341 0C       		.uleb128 0xc
 2140 0342 61766700 		.ascii	"avg\000"
 2141 0346 01       		.byte	0x1
 2142 0347 FF       		.byte	0xff
 2143 0348 76000000 		.4byte	0x76
 2144 034c 02       		.uleb128 0x2
 2145 034d 91       		.byte	0x91
 2146 034e 6A       		.sleb128 -22
 2147 034f 12       		.uleb128 0x12
 2148 0350 9A040000 		.4byte	.LASF59
 2149 0354 01       		.byte	0x1
 2150 0355 0001     		.2byte	0x100
 2151 0357 76000000 		.4byte	0x76
 2152 035b 02       		.uleb128 0x2
 2153 035c 91       		.byte	0x91
 2154 035d 6C       		.sleb128 -20
 2155 035e 13       		.uleb128 0x13
 2156 035f 16000000 		.4byte	.LBB2
 2157 0363 42010000 		.4byte	.LBE2-.LBB2
 2158 0367 12       		.uleb128 0x12
 2159 0368 9C020000 		.4byte	.LASF49
 2160 036c 01       		.byte	0x1
 2161 036d 1B01     		.2byte	0x11b
 2162 036f 76000000 		.4byte	0x76
 2163 0373 02       		.uleb128 0x2
 2164 0374 91       		.byte	0x91
 2165 0375 68       		.sleb128 -24
 2166 0376 12       		.uleb128 0x12
 2167 0377 4E030000 		.4byte	.LASF60
 2168 037b 01       		.byte	0x1
 2169 037c 1D01     		.2byte	0x11d
 2170 037e 87030000 		.4byte	0x387
 2171 0382 02       		.uleb128 0x2
 2172 0383 91       		.byte	0x91
 2173 0384 54       		.sleb128 -44
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 52


 2174 0385 00       		.byte	0
 2175 0386 00       		.byte	0
 2176 0387 14       		.uleb128 0x14
 2177 0388 A5000000 		.4byte	0xa5
 2178 038c 97030000 		.4byte	0x397
 2179 0390 15       		.uleb128 0x15
 2180 0391 AC000000 		.4byte	0xac
 2181 0395 13       		.byte	0x13
 2182 0396 00       		.byte	0
 2183 0397 16       		.uleb128 0x16
 2184 0398 55030000 		.4byte	.LASF61
 2185 039c 01       		.byte	0x1
 2186 039d 6B01     		.2byte	0x16b
 2187 039f 00000000 		.4byte	.LFB43
 2188 03a3 9C010000 		.4byte	.LFE43-.LFB43
 2189 03a7 01       		.uleb128 0x1
 2190 03a8 9C       		.byte	0x9c
 2191 03a9 F2030000 		.4byte	0x3f2
 2192 03ad 17       		.uleb128 0x17
 2193 03ae 6900     		.ascii	"i\000"
 2194 03b0 01       		.byte	0x1
 2195 03b1 7101     		.2byte	0x171
 2196 03b3 6B000000 		.4byte	0x6b
 2197 03b7 02       		.uleb128 0x2
 2198 03b8 91       		.byte	0x91
 2199 03b9 6F       		.sleb128 -17
 2200 03ba 17       		.uleb128 0x17
 2201 03bb 61766700 		.ascii	"avg\000"
 2202 03bf 01       		.byte	0x1
 2203 03c0 7201     		.2byte	0x172
 2204 03c2 76000000 		.4byte	0x76
 2205 03c6 02       		.uleb128 0x2
 2206 03c7 91       		.byte	0x91
 2207 03c8 6A       		.sleb128 -22
 2208 03c9 12       		.uleb128 0x12
 2209 03ca 9A040000 		.4byte	.LASF59
 2210 03ce 01       		.byte	0x1
 2211 03cf 7301     		.2byte	0x173
 2212 03d1 76000000 		.4byte	0x76
 2213 03d5 02       		.uleb128 0x2
 2214 03d6 91       		.byte	0x91
 2215 03d7 6C       		.sleb128 -20
 2216 03d8 13       		.uleb128 0x13
 2217 03d9 16000000 		.4byte	.LBB3
 2218 03dd 02010000 		.4byte	.LBE3-.LBB3
 2219 03e1 12       		.uleb128 0x12
 2220 03e2 9C020000 		.4byte	.LASF49
 2221 03e6 01       		.byte	0x1
 2222 03e7 8E01     		.2byte	0x18e
 2223 03e9 76000000 		.4byte	0x76
 2224 03ed 02       		.uleb128 0x2
 2225 03ee 91       		.byte	0x91
 2226 03ef 68       		.sleb128 -24
 2227 03f0 00       		.byte	0
 2228 03f1 00       		.byte	0
 2229 03f2 16       		.uleb128 0x16
 2230 03f3 3D010000 		.4byte	.LASF62
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 53


 2231 03f7 01       		.byte	0x1
 2232 03f8 D601     		.2byte	0x1d6
 2233 03fa 00000000 		.4byte	.LFB44
 2234 03fe 34010000 		.4byte	.LFE44-.LFB44
 2235 0402 01       		.uleb128 0x1
 2236 0403 9C       		.byte	0x9c
 2237 0404 34040000 		.4byte	0x434
 2238 0408 17       		.uleb128 0x17
 2239 0409 6900     		.ascii	"i\000"
 2240 040b 01       		.byte	0x1
 2241 040c DB01     		.2byte	0x1db
 2242 040e 6B000000 		.4byte	0x6b
 2243 0412 02       		.uleb128 0x2
 2244 0413 91       		.byte	0x91
 2245 0414 6F       		.sleb128 -17
 2246 0415 17       		.uleb128 0x17
 2247 0416 61766700 		.ascii	"avg\000"
 2248 041a 01       		.byte	0x1
 2249 041b DC01     		.2byte	0x1dc
 2250 041d 76000000 		.4byte	0x76
 2251 0421 02       		.uleb128 0x2
 2252 0422 91       		.byte	0x91
 2253 0423 6A       		.sleb128 -22
 2254 0424 12       		.uleb128 0x12
 2255 0425 9A040000 		.4byte	.LASF59
 2256 0429 01       		.byte	0x1
 2257 042a DD01     		.2byte	0x1dd
 2258 042c 76000000 		.4byte	0x76
 2259 0430 02       		.uleb128 0x2
 2260 0431 91       		.byte	0x91
 2261 0432 6C       		.sleb128 -20
 2262 0433 00       		.byte	0
 2263 0434 18       		.uleb128 0x18
 2264 0435 19030000 		.4byte	.LASF63
 2265 0439 01       		.byte	0x1
 2266 043a 2102     		.2byte	0x221
 2267 043c 5D000000 		.4byte	0x5d
 2268 0440 00000000 		.4byte	.LFB45
 2269 0444 A0010000 		.4byte	.LFE45-.LFB45
 2270 0448 01       		.uleb128 0x1
 2271 0449 9C       		.byte	0x9c
 2272 044a C8040000 		.4byte	0x4c8
 2273 044e 17       		.uleb128 0x17
 2274 044f 7400     		.ascii	"t\000"
 2275 0451 01       		.byte	0x1
 2276 0452 2602     		.2byte	0x226
 2277 0454 B9000000 		.4byte	0xb9
 2278 0458 02       		.uleb128 0x2
 2279 0459 91       		.byte	0x91
 2280 045a 60       		.sleb128 -32
 2281 045b 12       		.uleb128 0x12
 2282 045c DB010000 		.4byte	.LASF64
 2283 0460 01       		.byte	0x1
 2284 0461 2702     		.2byte	0x227
 2285 0463 6B000000 		.4byte	0x6b
 2286 0467 02       		.uleb128 0x2
 2287 0468 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 54


 2288 0469 77       		.sleb128 -9
 2289 046a 12       		.uleb128 0x12
 2290 046b 80000000 		.4byte	.LASF65
 2291 046f 01       		.byte	0x1
 2292 0470 4402     		.2byte	0x244
 2293 0472 5D000000 		.4byte	0x5d
 2294 0476 02       		.uleb128 0x2
 2295 0477 91       		.byte	0x91
 2296 0478 6C       		.sleb128 -20
 2297 0479 13       		.uleb128 0x13
 2298 047a B0000000 		.4byte	.LBB4
 2299 047e C6000000 		.4byte	.LBE4-.LBB4
 2300 0482 12       		.uleb128 0x12
 2301 0483 83010000 		.4byte	.LASF66
 2302 0487 01       		.byte	0x1
 2303 0488 6302     		.2byte	0x263
 2304 048a 76000000 		.4byte	0x76
 2305 048e 02       		.uleb128 0x2
 2306 048f 91       		.byte	0x91
 2307 0490 6A       		.sleb128 -22
 2308 0491 12       		.uleb128 0x12
 2309 0492 AA010000 		.4byte	.LASF67
 2310 0496 01       		.byte	0x1
 2311 0497 6402     		.2byte	0x264
 2312 0499 8C000000 		.4byte	0x8c
 2313 049d 02       		.uleb128 0x2
 2314 049e 91       		.byte	0x91
 2315 049f 68       		.sleb128 -24
 2316 04a0 12       		.uleb128 0x12
 2317 04a1 77030000 		.4byte	.LASF68
 2318 04a5 01       		.byte	0x1
 2319 04a6 6502     		.2byte	0x265
 2320 04a8 8C000000 		.4byte	0x8c
 2321 04ac 02       		.uleb128 0x2
 2322 04ad 91       		.byte	0x91
 2323 04ae 66       		.sleb128 -26
 2324 04af 13       		.uleb128 0x13
 2325 04b0 D0000000 		.4byte	.LBB5
 2326 04b4 98000000 		.4byte	.LBE5-.LBB5
 2327 04b8 17       		.uleb128 0x17
 2328 04b9 6900     		.ascii	"i\000"
 2329 04bb 01       		.byte	0x1
 2330 04bc 6602     		.2byte	0x266
 2331 04be 5D000000 		.4byte	0x5d
 2332 04c2 02       		.uleb128 0x2
 2333 04c3 91       		.byte	0x91
 2334 04c4 70       		.sleb128 -16
 2335 04c5 00       		.byte	0
 2336 04c6 00       		.byte	0
 2337 04c7 00       		.byte	0
 2338 04c8 14       		.uleb128 0x14
 2339 04c9 76000000 		.4byte	0x76
 2340 04cd D8040000 		.4byte	0x4d8
 2341 04d1 15       		.uleb128 0x15
 2342 04d2 AC000000 		.4byte	0xac
 2343 04d6 0D       		.byte	0xd
 2344 04d7 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 55


 2345 04d8 19       		.uleb128 0x19
 2346 04d9 8F040000 		.4byte	.LASF69
 2347 04dd 01       		.byte	0x1
 2348 04de 14       		.byte	0x14
 2349 04df C8040000 		.4byte	0x4c8
 2350 04e3 05       		.uleb128 0x5
 2351 04e4 03       		.byte	0x3
 2352 04e5 00000000 		.4byte	data_array
 2353 04e9 19       		.uleb128 0x19
 2354 04ea 6D000000 		.4byte	.LASF70
 2355 04ee 01       		.byte	0x1
 2356 04ef 16       		.byte	0x16
 2357 04f0 6B000000 		.4byte	0x6b
 2358 04f4 05       		.uleb128 0x5
 2359 04f5 03       		.byte	0x3
 2360 04f6 00000000 		.4byte	wiznet
 2361 04fa 19       		.uleb128 0x19
 2362 04fb E1030000 		.4byte	.LASF71
 2363 04ff 01       		.byte	0x1
 2364 0500 17       		.byte	0x17
 2365 0501 6B000000 		.4byte	0x6b
 2366 0505 05       		.uleb128 0x5
 2367 0506 03       		.byte	0x3
 2368 0507 00000000 		.4byte	new_pack
 2369 050b 19       		.uleb128 0x19
 2370 050c 64020000 		.4byte	.LASF72
 2371 0510 01       		.byte	0x1
 2372 0511 1A       		.byte	0x1a
 2373 0512 6B000000 		.4byte	0x6b
 2374 0516 05       		.uleb128 0x5
 2375 0517 03       		.byte	0x3
 2376 0518 00000000 		.4byte	fin_exec
 2377 051c 14       		.uleb128 0x14
 2378 051d 8C000000 		.4byte	0x8c
 2379 0521 2C050000 		.4byte	0x52c
 2380 0525 15       		.uleb128 0x15
 2381 0526 AC000000 		.4byte	0xac
 2382 052a 09       		.byte	0x9
 2383 052b 00       		.byte	0
 2384 052c 19       		.uleb128 0x19
 2385 052d F2010000 		.4byte	.LASF73
 2386 0531 01       		.byte	0x1
 2387 0532 1D       		.byte	0x1d
 2388 0533 1C050000 		.4byte	0x51c
 2389 0537 05       		.uleb128 0x5
 2390 0538 03       		.byte	0x3
 2391 0539 00000000 		.4byte	test_array
 2392 053d 19       		.uleb128 0x19
 2393 053e ED000000 		.4byte	.LASF74
 2394 0542 01       		.byte	0x1
 2395 0543 20       		.byte	0x20
 2396 0544 6B000000 		.4byte	0x6b
 2397 0548 05       		.uleb128 0x5
 2398 0549 03       		.byte	0x3
 2399 054a 00000000 		.4byte	elbw_arr_cspot
 2400 054e 14       		.uleb128 0x14
 2401 054f 76000000 		.4byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 56


 2402 0553 5E050000 		.4byte	0x55e
 2403 0557 15       		.uleb128 0x15
 2404 0558 AC000000 		.4byte	0xac
 2405 055c 13       		.byte	0x13
 2406 055d 00       		.byte	0
 2407 055e 19       		.uleb128 0x19
 2408 055f 1E030000 		.4byte	.LASF75
 2409 0563 01       		.byte	0x1
 2410 0564 21       		.byte	0x21
 2411 0565 4E050000 		.4byte	0x54e
 2412 0569 05       		.uleb128 0x5
 2413 056a 03       		.byte	0x3
 2414 056b 00000000 		.4byte	elbow_array
 2415 056f 19       		.uleb128 0x19
 2416 0570 AB030000 		.4byte	.LASF76
 2417 0574 01       		.byte	0x1
 2418 0575 24       		.byte	0x24
 2419 0576 6B000000 		.4byte	0x6b
 2420 057a 05       		.uleb128 0x5
 2421 057b 03       		.byte	0x3
 2422 057c 00000000 		.4byte	shldr_arr_cspot
 2423 0580 19       		.uleb128 0x19
 2424 0581 3F030000 		.4byte	.LASF77
 2425 0585 01       		.byte	0x1
 2426 0586 25       		.byte	0x25
 2427 0587 4E050000 		.4byte	0x54e
 2428 058b 05       		.uleb128 0x5
 2429 058c 03       		.byte	0x3
 2430 058d 00000000 		.4byte	shoulder_array
 2431 0591 19       		.uleb128 0x19
 2432 0592 8D010000 		.4byte	.LASF78
 2433 0596 01       		.byte	0x1
 2434 0597 28       		.byte	0x28
 2435 0598 6B000000 		.4byte	0x6b
 2436 059c 05       		.uleb128 0x5
 2437 059d 03       		.byte	0x3
 2438 059e 00000000 		.4byte	BA_arr_cspot
 2439 05a2 19       		.uleb128 0x19
 2440 05a3 32030000 		.4byte	.LASF79
 2441 05a7 01       		.byte	0x1
 2442 05a8 29       		.byte	0x29
 2443 05a9 4E050000 		.4byte	0x54e
 2444 05ad 05       		.uleb128 0x5
 2445 05ae 03       		.byte	0x3
 2446 05af 00000000 		.4byte	baseAz_array
 2447 05b3 19       		.uleb128 0x19
 2448 05b4 1F020000 		.4byte	.LASF80
 2449 05b8 01       		.byte	0x1
 2450 05b9 2B       		.byte	0x2b
 2451 05ba 76000000 		.4byte	0x76
 2452 05be 05       		.uleb128 0x5
 2453 05bf 03       		.byte	0x3
 2454 05c0 00000000 		.4byte	feedback_count
 2455 05c4 19       		.uleb128 0x19
 2456 05c5 0E010000 		.4byte	.LASF81
 2457 05c9 01       		.byte	0x1
 2458 05ca 2C       		.byte	0x2c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 57


 2459 05cb 6B000000 		.4byte	0x6b
 2460 05cf 05       		.uleb128 0x5
 2461 05d0 03       		.byte	0x3
 2462 05d1 00000000 		.4byte	timerFlag
 2463 05d5 19       		.uleb128 0x19
 2464 05d6 D0000000 		.4byte	.LASF82
 2465 05da 01       		.byte	0x1
 2466 05db 78       		.byte	0x78
 2467 05dc C4000000 		.4byte	0xc4
 2468 05e0 05       		.uleb128 0x5
 2469 05e1 03       		.byte	0x3
 2470 05e2 00000000 		.4byte	wristTilt_state
 2471 05e6 19       		.uleb128 0x19
 2472 05e7 8D030000 		.4byte	.LASF83
 2473 05eb 01       		.byte	0x1
 2474 05ec A9       		.byte	0xa9
 2475 05ed E9000000 		.4byte	0xe9
 2476 05f1 05       		.uleb128 0x5
 2477 05f2 03       		.byte	0x3
 2478 05f3 00000000 		.4byte	wristRotate_state
 2479 05f7 19       		.uleb128 0x19
 2480 05f8 BB030000 		.4byte	.LASF84
 2481 05fc 01       		.byte	0x1
 2482 05fd F7       		.byte	0xf7
 2483 05fe 0E010000 		.4byte	0x10e
 2484 0602 05       		.uleb128 0x5
 2485 0603 03       		.byte	0x3
 2486 0604 00000000 		.4byte	elbow_state
 2487 0608 1A       		.uleb128 0x1a
 2488 0609 E3010000 		.4byte	.LASF85
 2489 060d 01       		.byte	0x1
 2490 060e 6A01     		.2byte	0x16a
 2491 0610 33010000 		.4byte	0x133
 2492 0614 05       		.uleb128 0x5
 2493 0615 03       		.byte	0x3
 2494 0616 00000000 		.4byte	shoulder_state
 2495 061a 1A       		.uleb128 0x1a
 2496 061b BE000000 		.4byte	.LASF86
 2497 061f 01       		.byte	0x1
 2498 0620 D501     		.2byte	0x1d5
 2499 0622 59010000 		.4byte	0x159
 2500 0626 05       		.uleb128 0x5
 2501 0627 03       		.byte	0x3
 2502 0628 00000000 		.4byte	baseAzimuth_state
 2503 062c 00       		.byte	0
 2504              		.section	.debug_abbrev,"",%progbits
 2505              	.Ldebug_abbrev0:
 2506 0000 01       		.uleb128 0x1
 2507 0001 11       		.uleb128 0x11
 2508 0002 01       		.byte	0x1
 2509 0003 25       		.uleb128 0x25
 2510 0004 0E       		.uleb128 0xe
 2511 0005 13       		.uleb128 0x13
 2512 0006 0B       		.uleb128 0xb
 2513 0007 03       		.uleb128 0x3
 2514 0008 0E       		.uleb128 0xe
 2515 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 58


 2516 000a 0E       		.uleb128 0xe
 2517 000b 55       		.uleb128 0x55
 2518 000c 17       		.uleb128 0x17
 2519 000d 11       		.uleb128 0x11
 2520 000e 01       		.uleb128 0x1
 2521 000f 10       		.uleb128 0x10
 2522 0010 17       		.uleb128 0x17
 2523 0011 00       		.byte	0
 2524 0012 00       		.byte	0
 2525 0013 02       		.uleb128 0x2
 2526 0014 24       		.uleb128 0x24
 2527 0015 00       		.byte	0
 2528 0016 0B       		.uleb128 0xb
 2529 0017 0B       		.uleb128 0xb
 2530 0018 3E       		.uleb128 0x3e
 2531 0019 0B       		.uleb128 0xb
 2532 001a 03       		.uleb128 0x3
 2533 001b 0E       		.uleb128 0xe
 2534 001c 00       		.byte	0
 2535 001d 00       		.byte	0
 2536 001e 03       		.uleb128 0x3
 2537 001f 24       		.uleb128 0x24
 2538 0020 00       		.byte	0
 2539 0021 0B       		.uleb128 0xb
 2540 0022 0B       		.uleb128 0xb
 2541 0023 3E       		.uleb128 0x3e
 2542 0024 0B       		.uleb128 0xb
 2543 0025 03       		.uleb128 0x3
 2544 0026 08       		.uleb128 0x8
 2545 0027 00       		.byte	0
 2546 0028 00       		.byte	0
 2547 0029 04       		.uleb128 0x4
 2548 002a 16       		.uleb128 0x16
 2549 002b 00       		.byte	0
 2550 002c 03       		.uleb128 0x3
 2551 002d 0E       		.uleb128 0xe
 2552 002e 3A       		.uleb128 0x3a
 2553 002f 0B       		.uleb128 0xb
 2554 0030 3B       		.uleb128 0x3b
 2555 0031 0B       		.uleb128 0xb
 2556 0032 49       		.uleb128 0x49
 2557 0033 13       		.uleb128 0x13
 2558 0034 00       		.byte	0
 2559 0035 00       		.byte	0
 2560 0036 05       		.uleb128 0x5
 2561 0037 0F       		.uleb128 0xf
 2562 0038 00       		.byte	0
 2563 0039 0B       		.uleb128 0xb
 2564 003a 0B       		.uleb128 0xb
 2565 003b 49       		.uleb128 0x49
 2566 003c 13       		.uleb128 0x13
 2567 003d 00       		.byte	0
 2568 003e 00       		.byte	0
 2569 003f 06       		.uleb128 0x6
 2570 0040 04       		.uleb128 0x4
 2571 0041 01       		.byte	0x1
 2572 0042 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 59


 2573 0043 0E       		.uleb128 0xe
 2574 0044 0B       		.uleb128 0xb
 2575 0045 0B       		.uleb128 0xb
 2576 0046 3A       		.uleb128 0x3a
 2577 0047 0B       		.uleb128 0xb
 2578 0048 3B       		.uleb128 0x3b
 2579 0049 0B       		.uleb128 0xb
 2580 004a 01       		.uleb128 0x1
 2581 004b 13       		.uleb128 0x13
 2582 004c 00       		.byte	0
 2583 004d 00       		.byte	0
 2584 004e 07       		.uleb128 0x7
 2585 004f 28       		.uleb128 0x28
 2586 0050 00       		.byte	0
 2587 0051 03       		.uleb128 0x3
 2588 0052 0E       		.uleb128 0xe
 2589 0053 1C       		.uleb128 0x1c
 2590 0054 0D       		.uleb128 0xd
 2591 0055 00       		.byte	0
 2592 0056 00       		.byte	0
 2593 0057 08       		.uleb128 0x8
 2594 0058 04       		.uleb128 0x4
 2595 0059 01       		.byte	0x1
 2596 005a 03       		.uleb128 0x3
 2597 005b 0E       		.uleb128 0xe
 2598 005c 0B       		.uleb128 0xb
 2599 005d 0B       		.uleb128 0xb
 2600 005e 3A       		.uleb128 0x3a
 2601 005f 0B       		.uleb128 0xb
 2602 0060 3B       		.uleb128 0x3b
 2603 0061 05       		.uleb128 0x5
 2604 0062 01       		.uleb128 0x1
 2605 0063 13       		.uleb128 0x13
 2606 0064 00       		.byte	0
 2607 0065 00       		.byte	0
 2608 0066 09       		.uleb128 0x9
 2609 0067 2E       		.uleb128 0x2e
 2610 0068 01       		.byte	0x1
 2611 0069 3F       		.uleb128 0x3f
 2612 006a 19       		.uleb128 0x19
 2613 006b 03       		.uleb128 0x3
 2614 006c 0E       		.uleb128 0xe
 2615 006d 3A       		.uleb128 0x3a
 2616 006e 0B       		.uleb128 0xb
 2617 006f 3B       		.uleb128 0x3b
 2618 0070 0B       		.uleb128 0xb
 2619 0071 27       		.uleb128 0x27
 2620 0072 19       		.uleb128 0x19
 2621 0073 11       		.uleb128 0x11
 2622 0074 01       		.uleb128 0x1
 2623 0075 12       		.uleb128 0x12
 2624 0076 06       		.uleb128 0x6
 2625 0077 40       		.uleb128 0x40
 2626 0078 18       		.uleb128 0x18
 2627 0079 9642     		.uleb128 0x2116
 2628 007b 19       		.uleb128 0x19
 2629 007c 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 60


 2630 007d 13       		.uleb128 0x13
 2631 007e 00       		.byte	0
 2632 007f 00       		.byte	0
 2633 0080 0A       		.uleb128 0xa
 2634 0081 34       		.uleb128 0x34
 2635 0082 00       		.byte	0
 2636 0083 03       		.uleb128 0x3
 2637 0084 0E       		.uleb128 0xe
 2638 0085 3A       		.uleb128 0x3a
 2639 0086 0B       		.uleb128 0xb
 2640 0087 3B       		.uleb128 0x3b
 2641 0088 0B       		.uleb128 0xb
 2642 0089 49       		.uleb128 0x49
 2643 008a 13       		.uleb128 0x13
 2644 008b 02       		.uleb128 0x2
 2645 008c 18       		.uleb128 0x18
 2646 008d 00       		.byte	0
 2647 008e 00       		.byte	0
 2648 008f 0B       		.uleb128 0xb
 2649 0090 05       		.uleb128 0x5
 2650 0091 00       		.byte	0
 2651 0092 03       		.uleb128 0x3
 2652 0093 08       		.uleb128 0x8
 2653 0094 3A       		.uleb128 0x3a
 2654 0095 0B       		.uleb128 0xb
 2655 0096 3B       		.uleb128 0x3b
 2656 0097 0B       		.uleb128 0xb
 2657 0098 49       		.uleb128 0x49
 2658 0099 13       		.uleb128 0x13
 2659 009a 02       		.uleb128 0x2
 2660 009b 18       		.uleb128 0x18
 2661 009c 00       		.byte	0
 2662 009d 00       		.byte	0
 2663 009e 0C       		.uleb128 0xc
 2664 009f 34       		.uleb128 0x34
 2665 00a0 00       		.byte	0
 2666 00a1 03       		.uleb128 0x3
 2667 00a2 08       		.uleb128 0x8
 2668 00a3 3A       		.uleb128 0x3a
 2669 00a4 0B       		.uleb128 0xb
 2670 00a5 3B       		.uleb128 0x3b
 2671 00a6 0B       		.uleb128 0xb
 2672 00a7 49       		.uleb128 0x49
 2673 00a8 13       		.uleb128 0x13
 2674 00a9 02       		.uleb128 0x2
 2675 00aa 18       		.uleb128 0x18
 2676 00ab 00       		.byte	0
 2677 00ac 00       		.byte	0
 2678 00ad 0D       		.uleb128 0xd
 2679 00ae 2E       		.uleb128 0x2e
 2680 00af 01       		.byte	0x1
 2681 00b0 3F       		.uleb128 0x3f
 2682 00b1 19       		.uleb128 0x19
 2683 00b2 03       		.uleb128 0x3
 2684 00b3 0E       		.uleb128 0xe
 2685 00b4 3A       		.uleb128 0x3a
 2686 00b5 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 61


 2687 00b6 3B       		.uleb128 0x3b
 2688 00b7 0B       		.uleb128 0xb
 2689 00b8 27       		.uleb128 0x27
 2690 00b9 19       		.uleb128 0x19
 2691 00ba 49       		.uleb128 0x49
 2692 00bb 13       		.uleb128 0x13
 2693 00bc 11       		.uleb128 0x11
 2694 00bd 01       		.uleb128 0x1
 2695 00be 12       		.uleb128 0x12
 2696 00bf 06       		.uleb128 0x6
 2697 00c0 40       		.uleb128 0x40
 2698 00c1 18       		.uleb128 0x18
 2699 00c2 9642     		.uleb128 0x2116
 2700 00c4 19       		.uleb128 0x19
 2701 00c5 01       		.uleb128 0x1
 2702 00c6 13       		.uleb128 0x13
 2703 00c7 00       		.byte	0
 2704 00c8 00       		.byte	0
 2705 00c9 0E       		.uleb128 0xe
 2706 00ca 05       		.uleb128 0x5
 2707 00cb 00       		.byte	0
 2708 00cc 03       		.uleb128 0x3
 2709 00cd 0E       		.uleb128 0xe
 2710 00ce 3A       		.uleb128 0x3a
 2711 00cf 0B       		.uleb128 0xb
 2712 00d0 3B       		.uleb128 0x3b
 2713 00d1 0B       		.uleb128 0xb
 2714 00d2 49       		.uleb128 0x49
 2715 00d3 13       		.uleb128 0x13
 2716 00d4 02       		.uleb128 0x2
 2717 00d5 18       		.uleb128 0x18
 2718 00d6 00       		.byte	0
 2719 00d7 00       		.byte	0
 2720 00d8 0F       		.uleb128 0xf
 2721 00d9 2E       		.uleb128 0x2e
 2722 00da 01       		.byte	0x1
 2723 00db 3F       		.uleb128 0x3f
 2724 00dc 19       		.uleb128 0x19
 2725 00dd 03       		.uleb128 0x3
 2726 00de 0E       		.uleb128 0xe
 2727 00df 3A       		.uleb128 0x3a
 2728 00e0 0B       		.uleb128 0xb
 2729 00e1 3B       		.uleb128 0x3b
 2730 00e2 0B       		.uleb128 0xb
 2731 00e3 11       		.uleb128 0x11
 2732 00e4 01       		.uleb128 0x1
 2733 00e5 12       		.uleb128 0x12
 2734 00e6 06       		.uleb128 0x6
 2735 00e7 40       		.uleb128 0x40
 2736 00e8 18       		.uleb128 0x18
 2737 00e9 9742     		.uleb128 0x2117
 2738 00eb 19       		.uleb128 0x19
 2739 00ec 01       		.uleb128 0x1
 2740 00ed 13       		.uleb128 0x13
 2741 00ee 00       		.byte	0
 2742 00ef 00       		.byte	0
 2743 00f0 10       		.uleb128 0x10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 62


 2744 00f1 2E       		.uleb128 0x2e
 2745 00f2 00       		.byte	0
 2746 00f3 3F       		.uleb128 0x3f
 2747 00f4 19       		.uleb128 0x19
 2748 00f5 03       		.uleb128 0x3
 2749 00f6 0E       		.uleb128 0xe
 2750 00f7 3A       		.uleb128 0x3a
 2751 00f8 0B       		.uleb128 0xb
 2752 00f9 3B       		.uleb128 0x3b
 2753 00fa 0B       		.uleb128 0xb
 2754 00fb 11       		.uleb128 0x11
 2755 00fc 01       		.uleb128 0x1
 2756 00fd 12       		.uleb128 0x12
 2757 00fe 06       		.uleb128 0x6
 2758 00ff 40       		.uleb128 0x40
 2759 0100 18       		.uleb128 0x18
 2760 0101 9742     		.uleb128 0x2117
 2761 0103 19       		.uleb128 0x19
 2762 0104 00       		.byte	0
 2763 0105 00       		.byte	0
 2764 0106 11       		.uleb128 0x11
 2765 0107 2E       		.uleb128 0x2e
 2766 0108 01       		.byte	0x1
 2767 0109 3F       		.uleb128 0x3f
 2768 010a 19       		.uleb128 0x19
 2769 010b 03       		.uleb128 0x3
 2770 010c 0E       		.uleb128 0xe
 2771 010d 3A       		.uleb128 0x3a
 2772 010e 0B       		.uleb128 0xb
 2773 010f 3B       		.uleb128 0x3b
 2774 0110 0B       		.uleb128 0xb
 2775 0111 11       		.uleb128 0x11
 2776 0112 01       		.uleb128 0x1
 2777 0113 12       		.uleb128 0x12
 2778 0114 06       		.uleb128 0x6
 2779 0115 40       		.uleb128 0x40
 2780 0116 18       		.uleb128 0x18
 2781 0117 9642     		.uleb128 0x2116
 2782 0119 19       		.uleb128 0x19
 2783 011a 01       		.uleb128 0x1
 2784 011b 13       		.uleb128 0x13
 2785 011c 00       		.byte	0
 2786 011d 00       		.byte	0
 2787 011e 12       		.uleb128 0x12
 2788 011f 34       		.uleb128 0x34
 2789 0120 00       		.byte	0
 2790 0121 03       		.uleb128 0x3
 2791 0122 0E       		.uleb128 0xe
 2792 0123 3A       		.uleb128 0x3a
 2793 0124 0B       		.uleb128 0xb
 2794 0125 3B       		.uleb128 0x3b
 2795 0126 05       		.uleb128 0x5
 2796 0127 49       		.uleb128 0x49
 2797 0128 13       		.uleb128 0x13
 2798 0129 02       		.uleb128 0x2
 2799 012a 18       		.uleb128 0x18
 2800 012b 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 63


 2801 012c 00       		.byte	0
 2802 012d 13       		.uleb128 0x13
 2803 012e 0B       		.uleb128 0xb
 2804 012f 01       		.byte	0x1
 2805 0130 11       		.uleb128 0x11
 2806 0131 01       		.uleb128 0x1
 2807 0132 12       		.uleb128 0x12
 2808 0133 06       		.uleb128 0x6
 2809 0134 00       		.byte	0
 2810 0135 00       		.byte	0
 2811 0136 14       		.uleb128 0x14
 2812 0137 01       		.uleb128 0x1
 2813 0138 01       		.byte	0x1
 2814 0139 49       		.uleb128 0x49
 2815 013a 13       		.uleb128 0x13
 2816 013b 01       		.uleb128 0x1
 2817 013c 13       		.uleb128 0x13
 2818 013d 00       		.byte	0
 2819 013e 00       		.byte	0
 2820 013f 15       		.uleb128 0x15
 2821 0140 21       		.uleb128 0x21
 2822 0141 00       		.byte	0
 2823 0142 49       		.uleb128 0x49
 2824 0143 13       		.uleb128 0x13
 2825 0144 2F       		.uleb128 0x2f
 2826 0145 0B       		.uleb128 0xb
 2827 0146 00       		.byte	0
 2828 0147 00       		.byte	0
 2829 0148 16       		.uleb128 0x16
 2830 0149 2E       		.uleb128 0x2e
 2831 014a 01       		.byte	0x1
 2832 014b 3F       		.uleb128 0x3f
 2833 014c 19       		.uleb128 0x19
 2834 014d 03       		.uleb128 0x3
 2835 014e 0E       		.uleb128 0xe
 2836 014f 3A       		.uleb128 0x3a
 2837 0150 0B       		.uleb128 0xb
 2838 0151 3B       		.uleb128 0x3b
 2839 0152 05       		.uleb128 0x5
 2840 0153 11       		.uleb128 0x11
 2841 0154 01       		.uleb128 0x1
 2842 0155 12       		.uleb128 0x12
 2843 0156 06       		.uleb128 0x6
 2844 0157 40       		.uleb128 0x40
 2845 0158 18       		.uleb128 0x18
 2846 0159 9642     		.uleb128 0x2116
 2847 015b 19       		.uleb128 0x19
 2848 015c 01       		.uleb128 0x1
 2849 015d 13       		.uleb128 0x13
 2850 015e 00       		.byte	0
 2851 015f 00       		.byte	0
 2852 0160 17       		.uleb128 0x17
 2853 0161 34       		.uleb128 0x34
 2854 0162 00       		.byte	0
 2855 0163 03       		.uleb128 0x3
 2856 0164 08       		.uleb128 0x8
 2857 0165 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 64


 2858 0166 0B       		.uleb128 0xb
 2859 0167 3B       		.uleb128 0x3b
 2860 0168 05       		.uleb128 0x5
 2861 0169 49       		.uleb128 0x49
 2862 016a 13       		.uleb128 0x13
 2863 016b 02       		.uleb128 0x2
 2864 016c 18       		.uleb128 0x18
 2865 016d 00       		.byte	0
 2866 016e 00       		.byte	0
 2867 016f 18       		.uleb128 0x18
 2868 0170 2E       		.uleb128 0x2e
 2869 0171 01       		.byte	0x1
 2870 0172 3F       		.uleb128 0x3f
 2871 0173 19       		.uleb128 0x19
 2872 0174 03       		.uleb128 0x3
 2873 0175 0E       		.uleb128 0xe
 2874 0176 3A       		.uleb128 0x3a
 2875 0177 0B       		.uleb128 0xb
 2876 0178 3B       		.uleb128 0x3b
 2877 0179 05       		.uleb128 0x5
 2878 017a 49       		.uleb128 0x49
 2879 017b 13       		.uleb128 0x13
 2880 017c 11       		.uleb128 0x11
 2881 017d 01       		.uleb128 0x1
 2882 017e 12       		.uleb128 0x12
 2883 017f 06       		.uleb128 0x6
 2884 0180 40       		.uleb128 0x40
 2885 0181 18       		.uleb128 0x18
 2886 0182 9642     		.uleb128 0x2116
 2887 0184 19       		.uleb128 0x19
 2888 0185 01       		.uleb128 0x1
 2889 0186 13       		.uleb128 0x13
 2890 0187 00       		.byte	0
 2891 0188 00       		.byte	0
 2892 0189 19       		.uleb128 0x19
 2893 018a 34       		.uleb128 0x34
 2894 018b 00       		.byte	0
 2895 018c 03       		.uleb128 0x3
 2896 018d 0E       		.uleb128 0xe
 2897 018e 3A       		.uleb128 0x3a
 2898 018f 0B       		.uleb128 0xb
 2899 0190 3B       		.uleb128 0x3b
 2900 0191 0B       		.uleb128 0xb
 2901 0192 49       		.uleb128 0x49
 2902 0193 13       		.uleb128 0x13
 2903 0194 3F       		.uleb128 0x3f
 2904 0195 19       		.uleb128 0x19
 2905 0196 02       		.uleb128 0x2
 2906 0197 18       		.uleb128 0x18
 2907 0198 00       		.byte	0
 2908 0199 00       		.byte	0
 2909 019a 1A       		.uleb128 0x1a
 2910 019b 34       		.uleb128 0x34
 2911 019c 00       		.byte	0
 2912 019d 03       		.uleb128 0x3
 2913 019e 0E       		.uleb128 0xe
 2914 019f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 65


 2915 01a0 0B       		.uleb128 0xb
 2916 01a1 3B       		.uleb128 0x3b
 2917 01a2 05       		.uleb128 0x5
 2918 01a3 49       		.uleb128 0x49
 2919 01a4 13       		.uleb128 0x13
 2920 01a5 3F       		.uleb128 0x3f
 2921 01a6 19       		.uleb128 0x19
 2922 01a7 02       		.uleb128 0x2
 2923 01a8 18       		.uleb128 0x18
 2924 01a9 00       		.byte	0
 2925 01aa 00       		.byte	0
 2926 01ab 00       		.byte	0
 2927              		.section	.debug_aranges,"",%progbits
 2928 0000 7C000000 		.4byte	0x7c
 2929 0004 0200     		.2byte	0x2
 2930 0006 00000000 		.4byte	.Ldebug_info0
 2931 000a 04       		.byte	0x4
 2932 000b 00       		.byte	0
 2933 000c 0000     		.2byte	0
 2934 000e 0000     		.2byte	0
 2935 0010 00000000 		.4byte	.LFB33
 2936 0014 28000000 		.4byte	.LFE33-.LFB33
 2937 0018 00000000 		.4byte	.LFB34
 2938 001c 62000000 		.4byte	.LFE34-.LFB34
 2939 0020 00000000 		.4byte	.LFB35
 2940 0024 7C000000 		.4byte	.LFE35-.LFB35
 2941 0028 00000000 		.4byte	.LFB36
 2942 002c 28000000 		.4byte	.LFE36-.LFB36
 2943 0030 00000000 		.4byte	.LFB37
 2944 0034 4C000000 		.4byte	.LFE37-.LFB37
 2945 0038 00000000 		.4byte	.LFB38
 2946 003c 48000000 		.4byte	.LFE38-.LFB38
 2947 0040 00000000 		.4byte	.LFB39
 2948 0044 48000000 		.4byte	.LFE39-.LFB39
 2949 0048 00000000 		.4byte	.LFB40
 2950 004c 08000000 		.4byte	.LFE40-.LFB40
 2951 0050 00000000 		.4byte	.LFB41
 2952 0054 78000000 		.4byte	.LFE41-.LFB41
 2953 0058 00000000 		.4byte	.LFB42
 2954 005c E0010000 		.4byte	.LFE42-.LFB42
 2955 0060 00000000 		.4byte	.LFB43
 2956 0064 9C010000 		.4byte	.LFE43-.LFB43
 2957 0068 00000000 		.4byte	.LFB44
 2958 006c 34010000 		.4byte	.LFE44-.LFB44
 2959 0070 00000000 		.4byte	.LFB45
 2960 0074 A0010000 		.4byte	.LFE45-.LFB45
 2961 0078 00000000 		.4byte	0
 2962 007c 00000000 		.4byte	0
 2963              		.section	.debug_ranges,"",%progbits
 2964              	.Ldebug_ranges0:
 2965 0000 00000000 		.4byte	.LFB33
 2966 0004 28000000 		.4byte	.LFE33
 2967 0008 00000000 		.4byte	.LFB34
 2968 000c 62000000 		.4byte	.LFE34
 2969 0010 00000000 		.4byte	.LFB35
 2970 0014 7C000000 		.4byte	.LFE35
 2971 0018 00000000 		.4byte	.LFB36
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 66


 2972 001c 28000000 		.4byte	.LFE36
 2973 0020 00000000 		.4byte	.LFB37
 2974 0024 4C000000 		.4byte	.LFE37
 2975 0028 00000000 		.4byte	.LFB38
 2976 002c 48000000 		.4byte	.LFE38
 2977 0030 00000000 		.4byte	.LFB39
 2978 0034 48000000 		.4byte	.LFE39
 2979 0038 00000000 		.4byte	.LFB40
 2980 003c 08000000 		.4byte	.LFE40
 2981 0040 00000000 		.4byte	.LFB41
 2982 0044 78000000 		.4byte	.LFE41
 2983 0048 00000000 		.4byte	.LFB42
 2984 004c E0010000 		.4byte	.LFE42
 2985 0050 00000000 		.4byte	.LFB43
 2986 0054 9C010000 		.4byte	.LFE43
 2987 0058 00000000 		.4byte	.LFB44
 2988 005c 34010000 		.4byte	.LFE44
 2989 0060 00000000 		.4byte	.LFB45
 2990 0064 A0010000 		.4byte	.LFE45
 2991 0068 00000000 		.4byte	0
 2992 006c 00000000 		.4byte	0
 2993              		.section	.debug_line,"",%progbits
 2994              	.Ldebug_line0:
 2995 0000 1D030000 		.section	.debug_str,"MS",%progbits,1
 2995      0200BF00 
 2995      00000201 
 2995      FB0E0D00 
 2995      01010101 
 2996              	.LASF39:
 2997 0000 42415F73 		.ascii	"BA_start\000"
 2997      74617274 
 2997      00
 2998              	.LASF35:
 2999 0009 73686C64 		.ascii	"shldr_init\000"
 2999      725F696E 
 2999      697400
 3000              	.LASF19:
 3001 0014 74696C74 		.ascii	"tilt_start\000"
 3001      5F737461 
 3001      727400
 3002              	.LASF57:
 3003 001f 66696C6C 		.ascii	"fill_data_array\000"
 3003      5F646174 
 3003      615F6172 
 3003      72617900 
 3004              	.LASF2:
 3005 002f 73686F72 		.ascii	"short int\000"
 3005      7420696E 
 3005      7400
 3006              	.LASF25:
 3007 0039 726F7461 		.ascii	"rotate_start\000"
 3007      74655F73 
 3007      74617274 
 3007      00
 3008              	.LASF16:
 3009 0046 73697A65 		.ascii	"sizetype\000"
 3009      74797065 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 67


 3009      00
 3010              	.LASF41:
 3011 004f 42415F65 		.ascii	"BA_execute\000"
 3011      78656375 
 3011      746500
 3012              	.LASF23:
 3013 005a 77726973 		.ascii	"wristRotate_states\000"
 3013      74526F74 
 3013      6174655F 
 3013      73746174 
 3013      657300
 3014              	.LASF70:
 3015 006d 77697A6E 		.ascii	"wiznet\000"
 3015      657400
 3016              	.LASF34:
 3017 0074 73686C64 		.ascii	"shldr_start\000"
 3017      725F7374 
 3017      61727400 
 3018              	.LASF65:
 3019 0080 64697265 		.ascii	"direction\000"
 3019      6374696F 
 3019      6E00
 3020              	.LASF6:
 3021 008a 6C6F6E67 		.ascii	"long long int\000"
 3021      206C6F6E 
 3021      6720696E 
 3021      7400
 3022              	.LASF40:
 3023 0098 42415F69 		.ascii	"BA_init\000"
 3023      6E697400 
 3024              	.LASF36:
 3025 00a0 73686C64 		.ascii	"shldr_execute\000"
 3025      725F6578 
 3025      65637574 
 3025      6500
 3026              	.LASF33:
 3027 00ae 73686F75 		.ascii	"shoulder_states\000"
 3027      6C646572 
 3027      5F737461 
 3027      74657300 
 3028              	.LASF86:
 3029 00be 62617365 		.ascii	"baseAzimuth_state\000"
 3029      417A696D 
 3029      7574685F 
 3029      73746174 
 3029      6500
 3030              	.LASF82:
 3031 00d0 77726973 		.ascii	"wristTilt_state\000"
 3031      7454696C 
 3031      745F7374 
 3031      61746500 
 3032              	.LASF58:
 3033 00e0 656C626F 		.ascii	"elbow\000"
 3033      7700
 3034              	.LASF10:
 3035 00e6 75696E74 		.ascii	"uint16\000"
 3035      313600
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 68


 3036              	.LASF74:
 3037 00ed 656C6277 		.ascii	"elbw_arr_cspot\000"
 3037      5F617272 
 3037      5F637370 
 3037      6F7400
 3038              	.LASF51:
 3039 00fc 77726973 		.ascii	"wristRotate\000"
 3039      74526F74 
 3039      61746500 
 3040              	.LASF12:
 3041 0108 696E7431 		.ascii	"int16\000"
 3041      3600
 3042              	.LASF81:
 3043 010e 74696D65 		.ascii	"timerFlag\000"
 3043      72466C61 
 3043      6700
 3044              	.LASF42:
 3045 0118 42415F77 		.ascii	"BA_wait\000"
 3045      61697400 
 3046              	.LASF0:
 3047 0120 7369676E 		.ascii	"signed char\000"
 3047      65642063 
 3047      68617200 
 3048              	.LASF13:
 3049 012c 666C6F61 		.ascii	"float\000"
 3049      7400
 3050              	.LASF29:
 3051 0132 656C6277 		.ascii	"elbw_start\000"
 3051      5F737461 
 3051      727400
 3052              	.LASF62:
 3053 013d 62617365 		.ascii	"baseAzimuth\000"
 3053      417A696D 
 3053      75746800 
 3054              	.LASF50:
 3055 0149 77726973 		.ascii	"wristTilt\000"
 3055      7454696C 
 3055      7400
 3056              	.LASF26:
 3057 0153 726F7461 		.ascii	"rotate_control\000"
 3057      74655F63 
 3057      6F6E7472 
 3057      6F6C00
 3058              	.LASF15:
 3059 0162 63686172 		.ascii	"char\000"
 3059      00
 3060              	.LASF4:
 3061 0167 6C6F6E67 		.ascii	"long int\000"
 3061      20696E74 
 3061      00
 3062              	.LASF38:
 3063 0170 62617365 		.ascii	"baseAzimuth_states\000"
 3063      417A696D 
 3063      7574685F 
 3063      73746174 
 3063      657300
 3064              	.LASF66:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 69


 3065 0183 66656564 		.ascii	"feedback1\000"
 3065      6261636B 
 3065      3100
 3066              	.LASF78:
 3067 018d 42415F61 		.ascii	"BA_arr_cspot\000"
 3067      72725F63 
 3067      73706F74 
 3067      00
 3068              	.LASF18:
 3069 019a 74696C74 		.ascii	"tilt_init\000"
 3069      5F696E69 
 3069      7400
 3070              	.LASF9:
 3071 01a4 75696E74 		.ascii	"uint8\000"
 3071      3800
 3072              	.LASF67:
 3073 01aa 666F7277 		.ascii	"forward\000"
 3073      61726400 
 3074              	.LASF46:
 3075 01b2 69746F61 		.ascii	"itoa\000"
 3075      00
 3076              	.LASF52:
 3077 01b7 73656E64 		.ascii	"send_feedback\000"
 3077      5F666565 
 3077      64626163 
 3077      6B00
 3078              	.LASF1:
 3079 01c5 756E7369 		.ascii	"unsigned char\000"
 3079      676E6564 
 3079      20636861 
 3079      7200
 3080              	.LASF45:
 3081 01d3 6973725F 		.ascii	"isr_var\000"
 3081      76617200 
 3082              	.LASF64:
 3083 01db 636F756E 		.ascii	"counter\000"
 3083      74657200 
 3084              	.LASF85:
 3085 01e3 73686F75 		.ascii	"shoulder_state\000"
 3085      6C646572 
 3085      5F737461 
 3085      746500
 3086              	.LASF73:
 3087 01f2 74657374 		.ascii	"test_array\000"
 3087      5F617272 
 3087      617900
 3088              	.LASF21:
 3089 01fd 74696C74 		.ascii	"tilt_feedback\000"
 3089      5F666565 
 3089      64626163 
 3089      6B00
 3090              	.LASF30:
 3091 020b 656C6277 		.ascii	"elbw_init\000"
 3091      5F696E69 
 3091      7400
 3092              	.LASF56:
 3093 0215 6E756D5F 		.ascii	"num_items\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 70


 3093      6974656D 
 3093      7300
 3094              	.LASF80:
 3095 021f 66656564 		.ascii	"feedback_count\000"
 3095      6261636B 
 3095      5F636F75 
 3095      6E7400
 3096              	.LASF7:
 3097 022e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3097      206C6F6E 
 3097      6720756E 
 3097      7369676E 
 3097      65642069 
 3098              	.LASF8:
 3099 0245 756E7369 		.ascii	"unsigned int\000"
 3099      676E6564 
 3099      20696E74 
 3099      00
 3100              	.LASF5:
 3101 0252 6C6F6E67 		.ascii	"long unsigned int\000"
 3101      20756E73 
 3101      69676E65 
 3101      6420696E 
 3101      7400
 3102              	.LASF72:
 3103 0264 66696E5F 		.ascii	"fin_exec\000"
 3103      65786563 
 3103      00
 3104              	.LASF37:
 3105 026d 73686C64 		.ascii	"shldr_wait\000"
 3105      725F7761 
 3105      697400
 3106              	.LASF3:
 3107 0278 73686F72 		.ascii	"short unsigned int\000"
 3107      7420756E 
 3107      7369676E 
 3107      65642069 
 3107      6E7400
 3108              	.LASF22:
 3109 028b 77726973 		.ascii	"wristTilt_states\000"
 3109      7454696C 
 3109      745F7374 
 3109      61746573 
 3109      00
 3110              	.LASF49:
 3111 029c 66656564 		.ascii	"feedback\000"
 3111      6261636B 
 3111      00
 3112              	.LASF28:
 3113 02a5 656C626F 		.ascii	"elbow_states\000"
 3113      775F7374 
 3113      61746573 
 3113      00
 3114              	.LASF44:
 3115 02b2 72657665 		.ascii	"reverse\000"
 3115      72736500 
 3116              	.LASF89:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 71


 3117 02ba 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 3117      73657273 
 3117      5C53616D 
 3117      75656C5C 
 3117      446F6375 
 3118 02e8 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 3118      5C61726D 
 3118      5F636F6E 
 3118      74726F6C 
 3118      6C65725F 
 3119 0318 00       		.ascii	"\000"
 3120              	.LASF63:
 3121 0319 6D61696E 		.ascii	"main\000"
 3121      00
 3122              	.LASF75:
 3123 031e 656C626F 		.ascii	"elbow_array\000"
 3123      775F6172 
 3123      72617900 
 3124              	.LASF48:
 3125 032a 6368616E 		.ascii	"channel\000"
 3125      6E656C00 
 3126              	.LASF79:
 3127 0332 62617365 		.ascii	"baseAz_array\000"
 3127      417A5F61 
 3127      72726179 
 3127      00
 3128              	.LASF77:
 3129 033f 73686F75 		.ascii	"shoulder_array\000"
 3129      6C646572 
 3129      5F617272 
 3129      617900
 3130              	.LASF60:
 3131 034e 62756666 		.ascii	"buffer\000"
 3131      657200
 3132              	.LASF61:
 3133 0355 73686F75 		.ascii	"shoulder\000"
 3133      6C646572 
 3133      00
 3134              	.LASF11:
 3135 035e 75696E74 		.ascii	"uint32\000"
 3135      333200
 3136              	.LASF20:
 3137 0365 74696C74 		.ascii	"tilt_control\000"
 3137      5F636F6E 
 3137      74726F6C 
 3137      00
 3138              	.LASF47:
 3139 0372 7369676E 		.ascii	"sign\000"
 3139      00
 3140              	.LASF68:
 3141 0377 6261636B 		.ascii	"backward\000"
 3141      77617264 
 3141      00
 3142              	.LASF17:
 3143 0380 74696D65 		.ascii	"time_t\000"
 3143      5F7400
 3144              	.LASF55:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 72


 3145 0387 61727261 		.ascii	"array\000"
 3145      7900
 3146              	.LASF83:
 3147 038d 77726973 		.ascii	"wristRotate_state\000"
 3147      74526F74 
 3147      6174655F 
 3147      73746174 
 3147      6500
 3148              	.LASF53:
 3149 039f 706F7446 		.ascii	"potFeedback\000"
 3149      65656462 
 3149      61636B00 
 3150              	.LASF76:
 3151 03ab 73686C64 		.ascii	"shldr_arr_cspot\000"
 3151      725F6172 
 3151      725F6373 
 3151      706F7400 
 3152              	.LASF84:
 3153 03bb 656C626F 		.ascii	"elbow_state\000"
 3153      775F7374 
 3153      61746500 
 3154              	.LASF88:
 3155 03c7 2E5C6D61 		.ascii	".\\main.c\000"
 3155      696E2E63 
 3155      00
 3156              	.LASF14:
 3157 03d0 646F7562 		.ascii	"double\000"
 3157      6C6500
 3158              	.LASF43:
 3159 03d7 74696D65 		.ascii	"timer_isr\000"
 3159      725F6973 
 3159      7200
 3160              	.LASF71:
 3161 03e1 6E65775F 		.ascii	"new_pack\000"
 3161      7061636B 
 3161      00
 3162              	.LASF24:
 3163 03ea 726F7461 		.ascii	"rotate_init\000"
 3163      74655F69 
 3163      6E697400 
 3164              	.LASF87:
 3165 03f6 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3165      4320342E 
 3165      382E3420 
 3165      32303134 
 3165      30353236 
 3166 0429 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3166      20726576 
 3166      6973696F 
 3166      6E203231 
 3166      31333538 
 3167 045c 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 3167      74643D67 
 3167      6E753939 
 3167      202D6666 
 3167      756E6374 
 3168              	.LASF32:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccbVeich.s 			page 73


 3169 047d 656C6277 		.ascii	"elbw_wait\000"
 3169      5F776169 
 3169      7400
 3170              	.LASF54:
 3171 0487 61766572 		.ascii	"average\000"
 3171      61676500 
 3172              	.LASF69:
 3173 048f 64617461 		.ascii	"data_array\000"
 3173      5F617272 
 3173      617900
 3174              	.LASF59:
 3175 049a 636F6D6D 		.ascii	"command\000"
 3175      616E6400 
 3176              	.LASF31:
 3177 04a2 656C6277 		.ascii	"elbw_execute\000"
 3177      5F657865 
 3177      63757465 
 3177      00
 3178              	.LASF27:
 3179 04af 726F7461 		.ascii	"rotate_feedback\000"
 3179      74655F66 
 3179      65656462 
 3179      61636B00 
 3180              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

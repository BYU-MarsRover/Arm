ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	wiznet,1,1
  44              		.comm	test_array,22,4
  45              		.global	WT_FLAG
  46              		.bss
  47              		.type	WT_FLAG, %object
  48              		.size	WT_FLAG, 1
  49              	WT_FLAG:
  50 0000 00       		.space	1
  51              		.global	WR_FLAG
  52              		.type	WR_FLAG, %object
  53              		.size	WR_FLAG, 1
  54              	WR_FLAG:
  55 0001 00       		.space	1
  56              		.global	ELBOW_FLAG
  57              		.type	ELBOW_FLAG, %object
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 2


  58              		.size	ELBOW_FLAG, 1
  59              	ELBOW_FLAG:
  60 0002 00       		.space	1
  61              		.global	SHOULDER_FLAG
  62              		.type	SHOULDER_FLAG, %object
  63              		.size	SHOULDER_FLAG, 1
  64              	SHOULDER_FLAG:
  65 0003 00       		.space	1
  66              		.global	BA_FLAG
  67              		.type	BA_FLAG, %object
  68              		.size	BA_FLAG, 1
  69              	BA_FLAG:
  70 0004 00       		.space	1
  71              		.global	EFFECTOR_FLAG
  72              		.type	EFFECTOR_FLAG, %object
  73              		.size	EFFECTOR_FLAG, 1
  74              	EFFECTOR_FLAG:
  75 0005 00       		.space	1
  76              		.global	PH_FLAG
  77              		.type	PH_FLAG, %object
  78              		.size	PH_FLAG, 1
  79              	PH_FLAG:
  80 0006 00       		.space	1
  81              		.global	dropped_packets
  82 0007 00       		.align	1
  83              		.type	dropped_packets, %object
  84              		.size	dropped_packets, 2
  85              	dropped_packets:
  86 0008 0000     		.space	2
  87              		.global	fail_safe_errors
  88              		.align	1
  89              		.type	fail_safe_errors, %object
  90              		.size	fail_safe_errors, 2
  91              	fail_safe_errors:
  92 000a 0000     		.space	2
  93              		.global	shldr_errors
  94              		.align	1
  95              		.type	shldr_errors, %object
  96              		.size	shldr_errors, 2
  97              	shldr_errors:
  98 000c 0000     		.space	2
  99              		.global	elbw_errors
 100              		.align	1
 101              		.type	elbw_errors, %object
 102              		.size	elbw_errors, 2
 103              	elbw_errors:
 104 000e 0000     		.space	2
 105              		.global	BA_errors
 106              		.align	1
 107              		.type	BA_errors, %object
 108              		.size	BA_errors, 2
 109              	BA_errors:
 110 0010 0000     		.space	2
 111              		.global	WT_errors
 112              		.align	1
 113              		.type	WT_errors, %object
 114              		.size	WT_errors, 2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 3


 115              	WT_errors:
 116 0012 0000     		.space	2
 117              		.global	WR_errors
 118              		.align	1
 119              		.type	WR_errors, %object
 120              		.size	WR_errors, 2
 121              	WR_errors:
 122 0014 0000     		.space	2
 123              		.global	eff_errors
 124              		.align	1
 125              		.type	eff_errors, %object
 126              		.size	eff_errors, 2
 127              	eff_errors:
 128 0016 0000     		.space	2
 129              		.comm	timerFlag,1,1
 130              		.section	.text.timer_isr,"ax",%progbits
 131              		.align	2
 132              		.global	timer_isr
 133              		.code	16
 134              		.thumb_func
 135              		.type	timer_isr, %function
 136              	timer_isr:
 137              	.LFB34:
 138              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 139              		.loc 1 11 0
 140              		.cfi_startproc
 141 0000 80B5     		push	{r7, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 82B0     		sub	sp, sp, #8
 146              		.cfi_def_cfa_offset 16
 147 0004 00AF     		add	r7, sp, #0
 148              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 149              		.loc 1 12 0
 150 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 151 000a 031C     		mov	r3, r0
 152 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 153              		.loc 1 13 0
 154 000e 054B     		ldr	r3, .L2
 155 0010 0122     		mov	r2, #1
 156 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 157              		.loc 1 14 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 4


 158 0014 7B68     		ldr	r3, [r7, #4]
 159 0016 181C     		mov	r0, r3
 160 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 161              		.loc 1 15 0
 162 001c BD46     		mov	sp, r7
 163 001e 02B0     		add	sp, sp, #8
 164              		@ sp needed
 165 0020 80BD     		pop	{r7, pc}
 166              	.L3:
 167 0022 C046     		.align	2
 168              	.L2:
 169 0024 00000000 		.word	timerFlag
 170              		.cfi_endproc
 171              	.LFE34:
 172              		.size	timer_isr, .-timer_isr
 173              		.global	__aeabi_idiv
 174              		.global	__aeabi_i2d
 175              		.global	__aeabi_dmul
 176              		.global	__aeabi_d2uiz
 177              		.section	.text.CalibrationElbow,"ax",%progbits
 178              		.align	2
 179              		.global	CalibrationElbow
 180              		.code	16
 181              		.thumb_func
 182              		.type	CalibrationElbow, %function
 183              	CalibrationElbow:
 184              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 5


  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 185              		.loc 1 48 0
 186              		.cfi_startproc
 187 0000 B0B5     		push	{r4, r5, r7, lr}
 188              		.cfi_def_cfa_offset 16
 189              		.cfi_offset 4, -16
 190              		.cfi_offset 5, -12
 191              		.cfi_offset 7, -8
 192              		.cfi_offset 14, -4
 193 0002 86B0     		sub	sp, sp, #24
 194              		.cfi_def_cfa_offset 40
 195 0004 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
 197 0006 021C     		mov	r2, r0
 198 0008 BB1D     		add	r3, r7, #6
 199 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 200              		.loc 1 49 0
 201 000c 3B1C     		mov	r3, r7
 202 000e 1133     		add	r3, r3, #17
 203 0010 0322     		mov	r2, #3
 204 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 205              		.loc 1 56 0
 206 0014 3B1C     		mov	r3, r7
 207 0016 1733     		add	r3, r3, #23
 208 0018 0022     		mov	r2, #0
 209 001a 1A70     		strb	r2, [r3]
 210 001c 3B1C     		mov	r3, r7
 211 001e 1233     		add	r3, r3, #18
 212 0020 0022     		mov	r2, #0
 213 0022 1A80     		strh	r2, [r3]
 214 0024 5DE0     		b	.L5
 215              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Test stop switch
  59:.\main.c      ****         LED_Write(0);
 216              		.loc 1 59 0
 217 0026 0020     		mov	r0, #0
 218 0028 FFF7FEFF 		bl	LED_Write
  60:.\main.c      ****         
  61:.\main.c      ****         // Move till stop switch presses down
  62:.\main.c      ****         if(velocity < 1500)
 219              		.loc 1 62 0
 220 002c BB1D     		add	r3, r7, #6
 221 002e 1A88     		ldrh	r2, [r3]
 222 0030 5F4B     		ldr	r3, .L18+16
 223 0032 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 6


 224 0034 0BD8     		bhi	.L6
  63:.\main.c      ****         {
  64:.\main.c      ****             while(stop_elb_dn_Read())
 225              		.loc 1 64 0
 226 0036 04E0     		b	.L7
 227              	.L8:
  65:.\main.c      ****             {
  66:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 228              		.loc 1 66 0
 229 0038 BB1D     		add	r3, r7, #6
 230 003a 1B88     		ldrh	r3, [r3]
 231 003c 181C     		mov	r0, r3
 232 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 233              	.L7:
  64:.\main.c      ****             while(stop_elb_dn_Read())
 234              		.loc 1 64 0 discriminator 1
 235 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 236 0046 031C     		mov	r3, r0
 237 0048 002B     		cmp	r3, #0
 238 004a F5D1     		bne	.L8
 239 004c 15E0     		b	.L9
 240              	.L6:
  67:.\main.c      ****             }
  68:.\main.c      ****         }
  69:.\main.c      ****         else if(velocity > 1500)
 241              		.loc 1 69 0
 242 004e BB1D     		add	r3, r7, #6
 243 0050 1A88     		ldrh	r2, [r3]
 244 0052 584B     		ldr	r3, .L18+20
 245 0054 9A42     		cmp	r2, r3
 246 0056 0BD9     		bls	.L10
  70:.\main.c      ****         {
  71:.\main.c      ****             while(stop_elb_up_Read())
 247              		.loc 1 71 0
 248 0058 04E0     		b	.L11
 249              	.L12:
  72:.\main.c      ****             {
  73:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 250              		.loc 1 73 0
 251 005a BB1D     		add	r3, r7, #6
 252 005c 1B88     		ldrh	r3, [r3]
 253 005e 181C     		mov	r0, r3
 254 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 255              	.L11:
  71:.\main.c      ****             while(stop_elb_up_Read())
 256              		.loc 1 71 0 discriminator 1
 257 0064 FFF7FEFF 		bl	stop_elb_up_Read
 258 0068 031C     		mov	r3, r0
 259 006a 002B     		cmp	r3, #0
 260 006c F5D1     		bne	.L12
 261 006e 04E0     		b	.L9
 262              	.L10:
  74:.\main.c      ****             }
  75:.\main.c      ****         }
  76:.\main.c      ****         else
  77:.\main.c      ****         {
  78:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 7


 263              		.loc 1 78 0
 264 0070 BB1D     		add	r3, r7, #6
 265 0072 1B88     		ldrh	r3, [r3]
 266 0074 181C     		mov	r0, r3
 267 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 268              	.L9:
  79:.\main.c      ****             //LED_Write(1);
  80:.\main.c      ****         }
  81:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 269              		.loc 1 81 0
 270 007a 4E4B     		ldr	r3, .L18+20
 271 007c 181C     		mov	r0, r3
 272 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  82:.\main.c      ****         channel = ELBOW_POT;
 273              		.loc 1 82 0
 274 0082 0123     		mov	r3, #1
 275 0084 FB60     		str	r3, [r7, #12]
  83:.\main.c      ****         
  84:.\main.c      ****         // Add the value to average
  85:.\main.c      ****         average+=potFeedback(channel);
 276              		.loc 1 85 0
 277 0086 FB68     		ldr	r3, [r7, #12]
 278 0088 181C     		mov	r0, r3
 279 008a FFF7FEFF 		bl	potFeedback
 280 008e 031C     		mov	r3, r0
 281 0090 191C     		mov	r1, r3
 282 0092 3B1C     		mov	r3, r7
 283 0094 1233     		add	r3, r3, #18
 284 0096 3A1C     		mov	r2, r7
 285 0098 1232     		add	r2, r2, #18
 286 009a 1288     		ldrh	r2, [r2]
 287 009c 8A18     		add	r2, r1, r2
 288 009e 1A80     		strh	r2, [r3]
  86:.\main.c      ****  
  87:.\main.c      **** 		// Move away for 2 seconds
  88:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  89:.\main.c      ****         difference = 1500-velocity;
 289              		.loc 1 89 0
 290 00a0 BB1D     		add	r3, r7, #6
 291 00a2 1B88     		ldrh	r3, [r3]
 292 00a4 434A     		ldr	r2, .L18+20
 293 00a6 D31A     		sub	r3, r2, r3
 294 00a8 9AB2     		uxth	r2, r3
 295 00aa 3B1C     		mov	r3, r7
 296 00ac 0A33     		add	r3, r3, #10
 297 00ae 1A80     		strh	r2, [r3]
  90:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 298              		.loc 1 90 0
 299 00b0 3B1C     		mov	r3, r7
 300 00b2 0A33     		add	r3, r3, #10
 301 00b4 1B88     		ldrh	r3, [r3]
 302 00b6 3F4A     		ldr	r2, .L18+20
 303 00b8 9B18     		add	r3, r3, r2
 304 00ba 9BB2     		uxth	r3, r3
 305 00bc 181C     		mov	r0, r3
 306 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  91:.\main.c      ****         CyDelay(1000);
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 8


 307              		.loc 1 91 0
 308 00c2 FA23     		mov	r3, #250
 309 00c4 9B00     		lsl	r3, r3, #2
 310 00c6 181C     		mov	r0, r3
 311 00c8 FFF7FEFF 		bl	CyDelay
  92:.\main.c      ****  
  93:.\main.c      **** 		// Stop moving
  94:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 312              		.loc 1 94 0
 313 00cc 394B     		ldr	r3, .L18+20
 314 00ce 181C     		mov	r0, r3
 315 00d0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 316              		.loc 1 56 0
 317 00d4 3B1C     		mov	r3, r7
 318 00d6 1733     		add	r3, r3, #23
 319 00d8 1A78     		ldrb	r2, [r3]
 320 00da 3B1C     		mov	r3, r7
 321 00dc 1733     		add	r3, r3, #23
 322 00de 0132     		add	r2, r2, #1
 323 00e0 1A70     		strb	r2, [r3]
 324              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 325              		.loc 1 56 0 is_stmt 0 discriminator 1
 326 00e2 3A1C     		mov	r2, r7
 327 00e4 1732     		add	r2, r2, #23
 328 00e6 3B1C     		mov	r3, r7
 329 00e8 1133     		add	r3, r3, #17
 330 00ea 1278     		ldrb	r2, [r2]
 331 00ec 1B78     		ldrb	r3, [r3]
 332 00ee 9A42     		cmp	r2, r3
 333 00f0 99D3     		bcc	.L13
  95:.\main.c      ****         
  96:.\main.c      ****         // Test stop switch
  97:.\main.c      ****         //LED_Write(1);
  98:.\main.c      ****         //CyDelay(1000);
  99:.\main.c      **** 	}
 100:.\main.c      ****     
 101:.\main.c      ****     if(velocity > 1500)
 334              		.loc 1 101 0 is_stmt 1
 335 00f2 BB1D     		add	r3, r7, #6
 336 00f4 1A88     		ldrh	r2, [r3]
 337 00f6 2F4B     		ldr	r3, .L18+20
 338 00f8 9A42     		cmp	r2, r3
 339 00fa 20D9     		bls	.L14
 102:.\main.c      **** 	    bound = ((average / CYCLES) * .9);
 340              		.loc 1 102 0
 341 00fc 3B1C     		mov	r3, r7
 342 00fe 1233     		add	r3, r3, #18
 343 0100 1A88     		ldrh	r2, [r3]
 344 0102 3B1C     		mov	r3, r7
 345 0104 1133     		add	r3, r3, #17
 346 0106 1B78     		ldrb	r3, [r3]
 347 0108 101C     		mov	r0, r2
 348 010a 191C     		mov	r1, r3
 349 010c FFF7FEFF 		bl	__aeabi_idiv
 350 0110 031C     		mov	r3, r0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 9


 351 0112 181C     		mov	r0, r3
 352 0114 FFF7FEFF 		bl	__aeabi_i2d
 353 0118 031C     		mov	r3, r0
 354 011a 0C1C     		mov	r4, r1
 355 011c 181C     		mov	r0, r3
 356 011e 211C     		mov	r1, r4
 357 0120 204B     		ldr	r3, .L18+4
 358 0122 1F4A     		ldr	r2, .L18
 359 0124 FFF7FEFF 		bl	__aeabi_dmul
 360 0128 031C     		mov	r3, r0
 361 012a 0C1C     		mov	r4, r1
 362 012c 3D1C     		mov	r5, r7
 363 012e 1435     		add	r5, r5, #20
 364 0130 181C     		mov	r0, r3
 365 0132 211C     		mov	r1, r4
 366 0134 FFF7FEFF 		bl	__aeabi_d2uiz
 367 0138 031C     		mov	r3, r0
 368 013a 2B80     		strh	r3, [r5]
 369 013c 28E0     		b	.L15
 370              	.L14:
 103:.\main.c      ****     else if(velocity < 1500)
 371              		.loc 1 103 0
 372 013e BB1D     		add	r3, r7, #6
 373 0140 1A88     		ldrh	r2, [r3]
 374 0142 1B4B     		ldr	r3, .L18+16
 375 0144 9A42     		cmp	r2, r3
 376 0146 20D8     		bhi	.L16
 104:.\main.c      ****         bound = ((average / CYCLES) * 1.1);
 377              		.loc 1 104 0
 378 0148 3B1C     		mov	r3, r7
 379 014a 1233     		add	r3, r3, #18
 380 014c 1A88     		ldrh	r2, [r3]
 381 014e 3B1C     		mov	r3, r7
 382 0150 1133     		add	r3, r3, #17
 383 0152 1B78     		ldrb	r3, [r3]
 384 0154 101C     		mov	r0, r2
 385 0156 191C     		mov	r1, r3
 386 0158 FFF7FEFF 		bl	__aeabi_idiv
 387 015c 031C     		mov	r3, r0
 388 015e 181C     		mov	r0, r3
 389 0160 FFF7FEFF 		bl	__aeabi_i2d
 390 0164 031C     		mov	r3, r0
 391 0166 0C1C     		mov	r4, r1
 392 0168 181C     		mov	r0, r3
 393 016a 211C     		mov	r1, r4
 394 016c 0E4A     		ldr	r2, .L18+8
 395 016e 0F4B     		ldr	r3, .L18+12
 396 0170 FFF7FEFF 		bl	__aeabi_dmul
 397 0174 031C     		mov	r3, r0
 398 0176 0C1C     		mov	r4, r1
 399 0178 3D1C     		mov	r5, r7
 400 017a 1435     		add	r5, r5, #20
 401 017c 181C     		mov	r0, r3
 402 017e 211C     		mov	r1, r4
 403 0180 FFF7FEFF 		bl	__aeabi_d2uiz
 404 0184 031C     		mov	r3, r0
 405 0186 2B80     		strh	r3, [r5]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 10


 406 0188 02E0     		b	.L15
 407              	.L16:
 105:.\main.c      ****     else // velocity == 1500
 106:.\main.c      ****         LED_Write(1); 
 408              		.loc 1 106 0
 409 018a 0120     		mov	r0, #1
 410 018c FFF7FEFF 		bl	LED_Write
 411              	.L15:
 107:.\main.c      ****  
 108:.\main.c      **** 	return bound;
 412              		.loc 1 108 0
 413 0190 3B1C     		mov	r3, r7
 414 0192 1433     		add	r3, r3, #20
 415 0194 1B88     		ldrh	r3, [r3]
 109:.\main.c      **** }
 416              		.loc 1 109 0
 417 0196 181C     		mov	r0, r3
 418 0198 BD46     		mov	sp, r7
 419 019a 06B0     		add	sp, sp, #24
 420              		@ sp needed
 421 019c B0BD     		pop	{r4, r5, r7, pc}
 422              	.L19:
 423 019e C046     		.align	3
 424              	.L18:
 425 01a0 CDCCCCCC 		.word	-858993459
 426 01a4 CCCCEC3F 		.word	1072483532
 427 01a8 9A999999 		.word	-1717986918
 428 01ac 9999F13F 		.word	1072798105
 429 01b0 DB050000 		.word	1499
 430 01b4 DC050000 		.word	1500
 431              		.cfi_endproc
 432              	.LFE35:
 433              		.size	CalibrationElbow, .-CalibrationElbow
 434              		.section	.text.CalibrationShoulder,"ax",%progbits
 435              		.align	2
 436              		.global	CalibrationShoulder
 437              		.code	16
 438              		.thumb_func
 439              		.type	CalibrationShoulder, %function
 440              	CalibrationShoulder:
 441              	.LFB36:
 110:.\main.c      **** 
 111:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 112:.\main.c      **** {
 442              		.loc 1 112 0
 443              		.cfi_startproc
 444 0000 B0B5     		push	{r4, r5, r7, lr}
 445              		.cfi_def_cfa_offset 16
 446              		.cfi_offset 4, -16
 447              		.cfi_offset 5, -12
 448              		.cfi_offset 7, -8
 449              		.cfi_offset 14, -4
 450 0002 86B0     		sub	sp, sp, #24
 451              		.cfi_def_cfa_offset 40
 452 0004 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 454 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 11


 455 0008 BB1D     		add	r3, r7, #6
 456 000a 1A80     		strh	r2, [r3]
 113:.\main.c      **** 	uint8 	CYCLES = 3;
 457              		.loc 1 113 0
 458 000c 3B1C     		mov	r3, r7
 459 000e 1133     		add	r3, r3, #17
 460 0010 0322     		mov	r2, #3
 461 0012 1A70     		strb	r2, [r3]
 114:.\main.c      **** 	uint8 	i;
 115:.\main.c      **** 	uint16 	bound;
 116:.\main.c      **** 	uint16 	average;
 117:.\main.c      ****     uint32  channel;
 118:.\main.c      ****     int16 difference;
 119:.\main.c      ****  
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 462              		.loc 1 120 0
 463 0014 3B1C     		mov	r3, r7
 464 0016 1733     		add	r3, r3, #23
 465 0018 0022     		mov	r2, #0
 466 001a 1A70     		strb	r2, [r3]
 467 001c 3B1C     		mov	r3, r7
 468 001e 1233     		add	r3, r3, #18
 469 0020 0022     		mov	r2, #0
 470 0022 1A80     		strh	r2, [r3]
 471 0024 5DE0     		b	.L21
 472              	.L29:
 121:.\main.c      **** 	{
 122:.\main.c      **** 		// Move till stop switch presses down
 123:.\main.c      ****         if(velocity < 1500)
 473              		.loc 1 123 0
 474 0026 BB1D     		add	r3, r7, #6
 475 0028 1A88     		ldrh	r2, [r3]
 476 002a 614B     		ldr	r3, .L34+16
 477 002c 9A42     		cmp	r2, r3
 478 002e 0BD8     		bhi	.L22
 124:.\main.c      ****         {
 125:.\main.c      ****             while(stop_shdr_dn_Read())
 479              		.loc 1 125 0
 480 0030 04E0     		b	.L23
 481              	.L24:
 126:.\main.c      ****             {
 127:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 482              		.loc 1 127 0
 483 0032 BB1D     		add	r3, r7, #6
 484 0034 1B88     		ldrh	r3, [r3]
 485 0036 181C     		mov	r0, r3
 486 0038 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 487              	.L23:
 125:.\main.c      ****             while(stop_shdr_dn_Read())
 488              		.loc 1 125 0 discriminator 1
 489 003c FFF7FEFF 		bl	stop_shdr_dn_Read
 490 0040 031C     		mov	r3, r0
 491 0042 002B     		cmp	r3, #0
 492 0044 F5D1     		bne	.L24
 493 0046 18E0     		b	.L25
 494              	.L22:
 128:.\main.c      ****             }
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 12


 129:.\main.c      ****         }
 130:.\main.c      ****         else if(velocity > 1500)
 495              		.loc 1 130 0
 496 0048 BB1D     		add	r3, r7, #6
 497 004a 1A88     		ldrh	r2, [r3]
 498 004c 594B     		ldr	r3, .L34+20
 499 004e 9A42     		cmp	r2, r3
 500 0050 0BD9     		bls	.L26
 131:.\main.c      ****         {
 132:.\main.c      ****             while(stop_shdr_up_Read())
 501              		.loc 1 132 0
 502 0052 04E0     		b	.L27
 503              	.L28:
 133:.\main.c      ****             {
 134:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 504              		.loc 1 134 0
 505 0054 BB1D     		add	r3, r7, #6
 506 0056 1B88     		ldrh	r3, [r3]
 507 0058 181C     		mov	r0, r3
 508 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 509              	.L27:
 132:.\main.c      ****             while(stop_shdr_up_Read())
 510              		.loc 1 132 0 discriminator 1
 511 005e FFF7FEFF 		bl	stop_shdr_up_Read
 512 0062 031C     		mov	r3, r0
 513 0064 002B     		cmp	r3, #0
 514 0066 F5D1     		bne	.L28
 515 0068 07E0     		b	.L25
 516              	.L26:
 135:.\main.c      ****             }
 136:.\main.c      ****         }
 137:.\main.c      ****         else
 138:.\main.c      ****         {
 139:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 517              		.loc 1 139 0
 518 006a BB1D     		add	r3, r7, #6
 519 006c 1B88     		ldrh	r3, [r3]
 520 006e 181C     		mov	r0, r3
 521 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 140:.\main.c      ****             LED_Write(1);
 522              		.loc 1 140 0
 523 0074 0120     		mov	r0, #1
 524 0076 FFF7FEFF 		bl	LED_Write
 525              	.L25:
 141:.\main.c      ****         }
 142:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 526              		.loc 1 142 0
 527 007a 4E4B     		ldr	r3, .L34+20
 528 007c 181C     		mov	r0, r3
 529 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 143:.\main.c      ****         channel = SHOULDER_POT;
 530              		.loc 1 143 0
 531 0082 0023     		mov	r3, #0
 532 0084 FB60     		str	r3, [r7, #12]
 144:.\main.c      ****  
 145:.\main.c      **** 		// Add the value to average
 146:.\main.c      ****         average+=potFeedback(channel);
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 13


 533              		.loc 1 146 0
 534 0086 FB68     		ldr	r3, [r7, #12]
 535 0088 181C     		mov	r0, r3
 536 008a FFF7FEFF 		bl	potFeedback
 537 008e 031C     		mov	r3, r0
 538 0090 191C     		mov	r1, r3
 539 0092 3B1C     		mov	r3, r7
 540 0094 1233     		add	r3, r3, #18
 541 0096 3A1C     		mov	r2, r7
 542 0098 1232     		add	r2, r2, #18
 543 009a 1288     		ldrh	r2, [r2]
 544 009c 8A18     		add	r2, r1, r2
 545 009e 1A80     		strh	r2, [r3]
 147:.\main.c      ****  
 148:.\main.c      **** 		// Move away for 2 seconds
 149:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 150:.\main.c      ****         difference = 1500-velocity;
 546              		.loc 1 150 0
 547 00a0 BB1D     		add	r3, r7, #6
 548 00a2 1B88     		ldrh	r3, [r3]
 549 00a4 434A     		ldr	r2, .L34+20
 550 00a6 D31A     		sub	r3, r2, r3
 551 00a8 9AB2     		uxth	r2, r3
 552 00aa 3B1C     		mov	r3, r7
 553 00ac 0A33     		add	r3, r3, #10
 554 00ae 1A80     		strh	r2, [r3]
 151:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 555              		.loc 1 151 0
 556 00b0 3B1C     		mov	r3, r7
 557 00b2 0A33     		add	r3, r3, #10
 558 00b4 1B88     		ldrh	r3, [r3]
 559 00b6 3F4A     		ldr	r2, .L34+20
 560 00b8 9B18     		add	r3, r3, r2
 561 00ba 9BB2     		uxth	r3, r3
 562 00bc 181C     		mov	r0, r3
 563 00be FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 152:.\main.c      ****         CyDelay(1000);
 564              		.loc 1 152 0
 565 00c2 FA23     		mov	r3, #250
 566 00c4 9B00     		lsl	r3, r3, #2
 567 00c6 181C     		mov	r0, r3
 568 00c8 FFF7FEFF 		bl	CyDelay
 153:.\main.c      ****  
 154:.\main.c      **** 		// Stop moving
 155:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 569              		.loc 1 155 0
 570 00cc 394B     		ldr	r3, .L34+20
 571 00ce 181C     		mov	r0, r3
 572 00d0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 573              		.loc 1 120 0
 574 00d4 3B1C     		mov	r3, r7
 575 00d6 1733     		add	r3, r3, #23
 576 00d8 1A78     		ldrb	r2, [r3]
 577 00da 3B1C     		mov	r3, r7
 578 00dc 1733     		add	r3, r3, #23
 579 00de 0132     		add	r2, r2, #1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 14


 580 00e0 1A70     		strb	r2, [r3]
 581              	.L21:
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 582              		.loc 1 120 0 is_stmt 0 discriminator 1
 583 00e2 3A1C     		mov	r2, r7
 584 00e4 1732     		add	r2, r2, #23
 585 00e6 3B1C     		mov	r3, r7
 586 00e8 1133     		add	r3, r3, #17
 587 00ea 1278     		ldrb	r2, [r2]
 588 00ec 1B78     		ldrb	r3, [r3]
 589 00ee 9A42     		cmp	r2, r3
 590 00f0 99D3     		bcc	.L29
 156:.\main.c      **** 	}
 157:.\main.c      ****  
 158:.\main.c      **** 	if(velocity > 1500)
 591              		.loc 1 158 0 is_stmt 1
 592 00f2 BB1D     		add	r3, r7, #6
 593 00f4 1A88     		ldrh	r2, [r3]
 594 00f6 2F4B     		ldr	r3, .L34+20
 595 00f8 9A42     		cmp	r2, r3
 596 00fa 20D9     		bls	.L30
 159:.\main.c      **** 	    bound = ((average / CYCLES) * .9);
 597              		.loc 1 159 0
 598 00fc 3B1C     		mov	r3, r7
 599 00fe 1233     		add	r3, r3, #18
 600 0100 1A88     		ldrh	r2, [r3]
 601 0102 3B1C     		mov	r3, r7
 602 0104 1133     		add	r3, r3, #17
 603 0106 1B78     		ldrb	r3, [r3]
 604 0108 101C     		mov	r0, r2
 605 010a 191C     		mov	r1, r3
 606 010c FFF7FEFF 		bl	__aeabi_idiv
 607 0110 031C     		mov	r3, r0
 608 0112 181C     		mov	r0, r3
 609 0114 FFF7FEFF 		bl	__aeabi_i2d
 610 0118 031C     		mov	r3, r0
 611 011a 0C1C     		mov	r4, r1
 612 011c 181C     		mov	r0, r3
 613 011e 211C     		mov	r1, r4
 614 0120 204B     		ldr	r3, .L34+4
 615 0122 1F4A     		ldr	r2, .L34
 616 0124 FFF7FEFF 		bl	__aeabi_dmul
 617 0128 031C     		mov	r3, r0
 618 012a 0C1C     		mov	r4, r1
 619 012c 3D1C     		mov	r5, r7
 620 012e 1435     		add	r5, r5, #20
 621 0130 181C     		mov	r0, r3
 622 0132 211C     		mov	r1, r4
 623 0134 FFF7FEFF 		bl	__aeabi_d2uiz
 624 0138 031C     		mov	r3, r0
 625 013a 2B80     		strh	r3, [r5]
 626 013c 28E0     		b	.L31
 627              	.L30:
 160:.\main.c      ****     else if(velocity < 1500)
 628              		.loc 1 160 0
 629 013e BB1D     		add	r3, r7, #6
 630 0140 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 15


 631 0142 1B4B     		ldr	r3, .L34+16
 632 0144 9A42     		cmp	r2, r3
 633 0146 20D8     		bhi	.L32
 161:.\main.c      ****         bound = ((average / CYCLES) * 1.1);
 634              		.loc 1 161 0
 635 0148 3B1C     		mov	r3, r7
 636 014a 1233     		add	r3, r3, #18
 637 014c 1A88     		ldrh	r2, [r3]
 638 014e 3B1C     		mov	r3, r7
 639 0150 1133     		add	r3, r3, #17
 640 0152 1B78     		ldrb	r3, [r3]
 641 0154 101C     		mov	r0, r2
 642 0156 191C     		mov	r1, r3
 643 0158 FFF7FEFF 		bl	__aeabi_idiv
 644 015c 031C     		mov	r3, r0
 645 015e 181C     		mov	r0, r3
 646 0160 FFF7FEFF 		bl	__aeabi_i2d
 647 0164 031C     		mov	r3, r0
 648 0166 0C1C     		mov	r4, r1
 649 0168 181C     		mov	r0, r3
 650 016a 211C     		mov	r1, r4
 651 016c 0E4A     		ldr	r2, .L34+8
 652 016e 0F4B     		ldr	r3, .L34+12
 653 0170 FFF7FEFF 		bl	__aeabi_dmul
 654 0174 031C     		mov	r3, r0
 655 0176 0C1C     		mov	r4, r1
 656 0178 3D1C     		mov	r5, r7
 657 017a 1435     		add	r5, r5, #20
 658 017c 181C     		mov	r0, r3
 659 017e 211C     		mov	r1, r4
 660 0180 FFF7FEFF 		bl	__aeabi_d2uiz
 661 0184 031C     		mov	r3, r0
 662 0186 2B80     		strh	r3, [r5]
 663 0188 02E0     		b	.L31
 664              	.L32:
 162:.\main.c      ****     else // velocity == 1500
 163:.\main.c      ****         LED_Write(1); 
 665              		.loc 1 163 0
 666 018a 0120     		mov	r0, #1
 667 018c FFF7FEFF 		bl	LED_Write
 668              	.L31:
 164:.\main.c      ****  
 165:.\main.c      **** 	return bound;
 669              		.loc 1 165 0
 670 0190 3B1C     		mov	r3, r7
 671 0192 1433     		add	r3, r3, #20
 672 0194 1B88     		ldrh	r3, [r3]
 166:.\main.c      **** }
 673              		.loc 1 166 0
 674 0196 181C     		mov	r0, r3
 675 0198 BD46     		mov	sp, r7
 676 019a 06B0     		add	sp, sp, #24
 677              		@ sp needed
 678 019c B0BD     		pop	{r4, r5, r7, pc}
 679              	.L35:
 680 019e C046     		.align	3
 681              	.L34:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 16


 682 01a0 CDCCCCCC 		.word	-858993459
 683 01a4 CCCCEC3F 		.word	1072483532
 684 01a8 9A999999 		.word	-1717986918
 685 01ac 9999F13F 		.word	1072798105
 686 01b0 DB050000 		.word	1499
 687 01b4 DC050000 		.word	1500
 688              		.cfi_endproc
 689              	.LFE36:
 690              		.size	CalibrationShoulder, .-CalibrationShoulder
 691              		.global	__aeabi_uidiv
 692              		.section	.text.average,"ax",%progbits
 693              		.align	2
 694              		.global	average
 695              		.code	16
 696              		.thumb_func
 697              		.type	average, %function
 698              	average:
 699              	.LFB37:
 167:.\main.c      **** 
 168:.\main.c      **** //Average function to be used in smoothing our input
 169:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 170:.\main.c      **** {
 700              		.loc 1 170 0
 701              		.cfi_startproc
 702 0000 80B5     		push	{r7, lr}
 703              		.cfi_def_cfa_offset 8
 704              		.cfi_offset 7, -8
 705              		.cfi_offset 14, -4
 706 0002 86B0     		sub	sp, sp, #24
 707              		.cfi_def_cfa_offset 32
 708 0004 00AF     		add	r7, sp, #0
 709              		.cfi_def_cfa_register 7
 710 0006 7860     		str	r0, [r7, #4]
 711 0008 0A1C     		mov	r2, r1
 712 000a FB1C     		add	r3, r7, #3
 713 000c 1A70     		strb	r2, [r3]
 171:.\main.c      ****     uint8 i;
 172:.\main.c      ****     uint32 sum = 0;
 714              		.loc 1 172 0
 715 000e 0023     		mov	r3, #0
 716 0010 3B61     		str	r3, [r7, #16]
 173:.\main.c      ****     uint16 avg = 0;
 717              		.loc 1 173 0
 718 0012 3B1C     		mov	r3, r7
 719 0014 0E33     		add	r3, r3, #14
 720 0016 0022     		mov	r2, #0
 721 0018 1A80     		strh	r2, [r3]
 174:.\main.c      ****     
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 722              		.loc 1 175 0
 723 001a 3B1C     		mov	r3, r7
 724 001c 1733     		add	r3, r3, #23
 725 001e 0022     		mov	r2, #0
 726 0020 1A70     		strb	r2, [r3]
 727 0022 10E0     		b	.L37
 728              	.L38:
 176:.\main.c      ****     {
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 17


 177:.\main.c      ****         sum += av_array[i];
 729              		.loc 1 177 0 discriminator 2
 730 0024 3B1C     		mov	r3, r7
 731 0026 1733     		add	r3, r3, #23
 732 0028 1B78     		ldrb	r3, [r3]
 733 002a 5B00     		lsl	r3, r3, #1
 734 002c 7A68     		ldr	r2, [r7, #4]
 735 002e D318     		add	r3, r2, r3
 736 0030 1B88     		ldrh	r3, [r3]
 737 0032 3A69     		ldr	r2, [r7, #16]
 738 0034 D318     		add	r3, r2, r3
 739 0036 3B61     		str	r3, [r7, #16]
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 740              		.loc 1 175 0 discriminator 2
 741 0038 3B1C     		mov	r3, r7
 742 003a 1733     		add	r3, r3, #23
 743 003c 1A78     		ldrb	r2, [r3]
 744 003e 3B1C     		mov	r3, r7
 745 0040 1733     		add	r3, r3, #23
 746 0042 0132     		add	r2, r2, #1
 747 0044 1A70     		strb	r2, [r3]
 748              	.L37:
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 749              		.loc 1 175 0 is_stmt 0 discriminator 1
 750 0046 3A1C     		mov	r2, r7
 751 0048 1732     		add	r2, r2, #23
 752 004a FB1C     		add	r3, r7, #3
 753 004c 1278     		ldrb	r2, [r2]
 754 004e 1B78     		ldrb	r3, [r3]
 755 0050 9A42     		cmp	r2, r3
 756 0052 E7D3     		bcc	.L38
 178:.\main.c      ****     }
 179:.\main.c      ****     
 180:.\main.c      ****     avg = sum/num_items;
 757              		.loc 1 180 0 is_stmt 1
 758 0054 FB1C     		add	r3, r7, #3
 759 0056 1B78     		ldrb	r3, [r3]
 760 0058 3869     		ldr	r0, [r7, #16]
 761 005a 191C     		mov	r1, r3
 762 005c FFF7FEFF 		bl	__aeabi_uidiv
 763 0060 031C     		mov	r3, r0
 764 0062 1A1C     		mov	r2, r3
 765 0064 3B1C     		mov	r3, r7
 766 0066 0E33     		add	r3, r3, #14
 767 0068 1A80     		strh	r2, [r3]
 181:.\main.c      ****     
 182:.\main.c      ****     return avg;
 768              		.loc 1 182 0
 769 006a 3B1C     		mov	r3, r7
 770 006c 0E33     		add	r3, r3, #14
 771 006e 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 772              		.loc 1 183 0
 773 0070 181C     		mov	r0, r3
 774 0072 BD46     		mov	sp, r7
 775 0074 06B0     		add	sp, sp, #24
 776              		@ sp needed
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 18


 777 0076 80BD     		pop	{r7, pc}
 778              		.cfi_endproc
 779              	.LFE37:
 780              		.size	average, .-average
 781              		.section	.text.maintain_array,"ax",%progbits
 782              		.align	2
 783              		.global	maintain_array
 784              		.code	16
 785              		.thumb_func
 786              		.type	maintain_array, %function
 787              	maintain_array:
 788              	.LFB38:
 184:.\main.c      **** 
 185:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 186:.\main.c      **** {
 789              		.loc 1 186 0
 790              		.cfi_startproc
 791 0000 80B5     		push	{r7, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 7, -8
 794              		.cfi_offset 14, -4
 795 0002 82B0     		sub	sp, sp, #8
 796              		.cfi_def_cfa_offset 16
 797 0004 00AF     		add	r7, sp, #0
 798              		.cfi_def_cfa_register 7
 799 0006 0A1C     		mov	r2, r1
 800 0008 FB1D     		add	r3, r7, #7
 801 000a 011C     		add	r1, r0, #0
 802 000c 1970     		strb	r1, [r3]
 803 000e BB1D     		add	r3, r7, #6
 804 0010 1A70     		strb	r2, [r3]
 187:.\main.c      ****     if(cpos < (SIZE - 1))
 805              		.loc 1 187 0
 806 0012 FB1D     		add	r3, r7, #7
 807 0014 1A78     		ldrb	r2, [r3]
 808 0016 BB1D     		add	r3, r7, #6
 809 0018 1B78     		ldrb	r3, [r3]
 810 001a 013B     		sub	r3, r3, #1
 811 001c 9A42     		cmp	r2, r3
 812 001e 05DA     		bge	.L41
 188:.\main.c      ****     {
 189:.\main.c      ****         cpos++;
 813              		.loc 1 189 0
 814 0020 FB1D     		add	r3, r7, #7
 815 0022 1A78     		ldrb	r2, [r3]
 816 0024 FB1D     		add	r3, r7, #7
 817 0026 0132     		add	r2, r2, #1
 818 0028 1A70     		strb	r2, [r3]
 819 002a 02E0     		b	.L42
 820              	.L41:
 190:.\main.c      ****     }
 191:.\main.c      ****     else
 192:.\main.c      ****     {
 193:.\main.c      ****         cpos = 0;
 821              		.loc 1 193 0
 822 002c FB1D     		add	r3, r7, #7
 823 002e 0022     		mov	r2, #0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 19


 824 0030 1A70     		strb	r2, [r3]
 825              	.L42:
 194:.\main.c      ****     }
 195:.\main.c      ****     return cpos;
 826              		.loc 1 195 0
 827 0032 FB1D     		add	r3, r7, #7
 828 0034 1B78     		ldrb	r3, [r3]
 196:.\main.c      **** }
 829              		.loc 1 196 0
 830 0036 181C     		mov	r0, r3
 831 0038 BD46     		mov	sp, r7
 832 003a 02B0     		add	sp, sp, #8
 833              		@ sp needed
 834 003c 80BD     		pop	{r7, pc}
 835              		.cfi_endproc
 836              	.LFE38:
 837              		.size	maintain_array, .-maintain_array
 838 003e C046     		.section	.text.check_update,"ax",%progbits
 839              		.align	2
 840              		.global	check_update
 841              		.code	16
 842              		.thumb_func
 843              		.type	check_update, %function
 844              	check_update:
 845              	.LFB39:
 197:.\main.c      **** 
 198:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 199:.\main.c      **** {
 846              		.loc 1 199 0
 847              		.cfi_startproc
 848 0000 80B5     		push	{r7, lr}
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 86B0     		sub	sp, sp, #24
 853              		.cfi_def_cfa_offset 32
 854 0004 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 0006 F860     		str	r0, [r7, #12]
 857 0008 7B60     		str	r3, [r7, #4]
 858 000a 3B1C     		mov	r3, r7
 859 000c 0B33     		add	r3, r3, #11
 860 000e 1970     		strb	r1, [r3]
 861 0010 3B1C     		mov	r3, r7
 862 0012 0A33     		add	r3, r3, #10
 863 0014 1A70     		strb	r2, [r3]
 200:.\main.c      ****     uint8 index;
 201:.\main.c      ****     if(arr_pos != 0)
 864              		.loc 1 201 0
 865 0016 3B1C     		mov	r3, r7
 866 0018 0B33     		add	r3, r3, #11
 867 001a 1B78     		ldrb	r3, [r3]
 868 001c 002B     		cmp	r3, #0
 869 001e 07D0     		beq	.L45
 202:.\main.c      ****     {
 203:.\main.c      ****         index = arr_pos - 1;
 870              		.loc 1 203 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 20


 871 0020 3B1C     		mov	r3, r7
 872 0022 1733     		add	r3, r3, #23
 873 0024 3A1C     		mov	r2, r7
 874 0026 0B32     		add	r2, r2, #11
 875 0028 1278     		ldrb	r2, [r2]
 876 002a 013A     		sub	r2, r2, #1
 877 002c 1A70     		strb	r2, [r3]
 878 002e 06E0     		b	.L46
 879              	.L45:
 204:.\main.c      ****     }
 205:.\main.c      ****     else
 206:.\main.c      ****     {
 207:.\main.c      ****         index = size - 1;
 880              		.loc 1 207 0
 881 0030 3B1C     		mov	r3, r7
 882 0032 1733     		add	r3, r3, #23
 883 0034 3A1C     		mov	r2, r7
 884 0036 0A32     		add	r2, r2, #10
 885 0038 1278     		ldrb	r2, [r2]
 886 003a 013A     		sub	r2, r2, #1
 887 003c 1A70     		strb	r2, [r3]
 888              	.L46:
 208:.\main.c      ****     }
 209:.\main.c      ****     
 210:.\main.c      ****     if(change < 0)
 889              		.loc 1 210 0
 890 003e 7B68     		ldr	r3, [r7, #4]
 891 0040 002B     		cmp	r3, #0
 892 0042 2ADA     		bge	.L47
 211:.\main.c      ****     {
 212:.\main.c      ****         if(array[index] >= (1000 - change))
 893              		.loc 1 212 0
 894 0044 3B1C     		mov	r3, r7
 895 0046 1733     		add	r3, r3, #23
 896 0048 1B78     		ldrb	r3, [r3]
 897 004a 5B00     		lsl	r3, r3, #1
 898 004c FA68     		ldr	r2, [r7, #12]
 899 004e D318     		add	r3, r2, r3
 900 0050 1B88     		ldrh	r3, [r3]
 901 0052 1A1C     		mov	r2, r3
 902 0054 7B68     		ldr	r3, [r7, #4]
 903 0056 FA21     		mov	r1, #250
 904 0058 8900     		lsl	r1, r1, #2
 905 005a CB1A     		sub	r3, r1, r3
 906 005c 9A42     		cmp	r2, r3
 907 005e 12DB     		blt	.L48
 213:.\main.c      ****         {
 214:.\main.c      ****             array[arr_pos] = (array[index] + change);
 908              		.loc 1 214 0
 909 0060 3B1C     		mov	r3, r7
 910 0062 0B33     		add	r3, r3, #11
 911 0064 1B78     		ldrb	r3, [r3]
 912 0066 5B00     		lsl	r3, r3, #1
 913 0068 FA68     		ldr	r2, [r7, #12]
 914 006a D318     		add	r3, r2, r3
 915 006c 3A1C     		mov	r2, r7
 916 006e 1732     		add	r2, r2, #23
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 21


 917 0070 1278     		ldrb	r2, [r2]
 918 0072 5200     		lsl	r2, r2, #1
 919 0074 F968     		ldr	r1, [r7, #12]
 920 0076 8A18     		add	r2, r1, r2
 921 0078 1188     		ldrh	r1, [r2]
 922 007a 7A68     		ldr	r2, [r7, #4]
 923 007c 92B2     		uxth	r2, r2
 924 007e 8A18     		add	r2, r1, r2
 925 0080 92B2     		uxth	r2, r2
 926 0082 1A80     		strh	r2, [r3]
 927 0084 33E0     		b	.L50
 928              	.L48:
 215:.\main.c      ****         }
 216:.\main.c      ****         else
 217:.\main.c      ****         {
 218:.\main.c      ****             array[arr_pos] = 1000;
 929              		.loc 1 218 0
 930 0086 3B1C     		mov	r3, r7
 931 0088 0B33     		add	r3, r3, #11
 932 008a 1B78     		ldrb	r3, [r3]
 933 008c 5B00     		lsl	r3, r3, #1
 934 008e FA68     		ldr	r2, [r7, #12]
 935 0090 D318     		add	r3, r2, r3
 936 0092 FA22     		mov	r2, #250
 937 0094 9200     		lsl	r2, r2, #2
 938 0096 1A80     		strh	r2, [r3]
 939 0098 29E0     		b	.L50
 940              	.L47:
 219:.\main.c      ****         }
 220:.\main.c      ****     }
 221:.\main.c      ****     else
 222:.\main.c      ****     {
 223:.\main.c      ****         if(array[index] <= (2000 - change))
 941              		.loc 1 223 0
 942 009a 3B1C     		mov	r3, r7
 943 009c 1733     		add	r3, r3, #23
 944 009e 1B78     		ldrb	r3, [r3]
 945 00a0 5B00     		lsl	r3, r3, #1
 946 00a2 FA68     		ldr	r2, [r7, #12]
 947 00a4 D318     		add	r3, r2, r3
 948 00a6 1B88     		ldrh	r3, [r3]
 949 00a8 1A1C     		mov	r2, r3
 950 00aa 7B68     		ldr	r3, [r7, #4]
 951 00ac FA21     		mov	r1, #250
 952 00ae C900     		lsl	r1, r1, #3
 953 00b0 CB1A     		sub	r3, r1, r3
 954 00b2 9A42     		cmp	r2, r3
 955 00b4 12DC     		bgt	.L51
 224:.\main.c      ****         {
 225:.\main.c      ****             array[arr_pos] = (array[index] + change);
 956              		.loc 1 225 0
 957 00b6 3B1C     		mov	r3, r7
 958 00b8 0B33     		add	r3, r3, #11
 959 00ba 1B78     		ldrb	r3, [r3]
 960 00bc 5B00     		lsl	r3, r3, #1
 961 00be FA68     		ldr	r2, [r7, #12]
 962 00c0 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 22


 963 00c2 3A1C     		mov	r2, r7
 964 00c4 1732     		add	r2, r2, #23
 965 00c6 1278     		ldrb	r2, [r2]
 966 00c8 5200     		lsl	r2, r2, #1
 967 00ca F968     		ldr	r1, [r7, #12]
 968 00cc 8A18     		add	r2, r1, r2
 969 00ce 1188     		ldrh	r1, [r2]
 970 00d0 7A68     		ldr	r2, [r7, #4]
 971 00d2 92B2     		uxth	r2, r2
 972 00d4 8A18     		add	r2, r1, r2
 973 00d6 92B2     		uxth	r2, r2
 974 00d8 1A80     		strh	r2, [r3]
 975 00da 08E0     		b	.L50
 976              	.L51:
 226:.\main.c      ****         }
 227:.\main.c      ****         else
 228:.\main.c      ****         {
 229:.\main.c      ****             array[arr_pos] = 2000;
 977              		.loc 1 229 0
 978 00dc 3B1C     		mov	r3, r7
 979 00de 0B33     		add	r3, r3, #11
 980 00e0 1B78     		ldrb	r3, [r3]
 981 00e2 5B00     		lsl	r3, r3, #1
 982 00e4 FA68     		ldr	r2, [r7, #12]
 983 00e6 D318     		add	r3, r2, r3
 984 00e8 FA22     		mov	r2, #250
 985 00ea D200     		lsl	r2, r2, #3
 986 00ec 1A80     		strh	r2, [r3]
 987              	.L50:
 230:.\main.c      ****         }
 231:.\main.c      ****     }
 232:.\main.c      ****     
 233:.\main.c      ****     return maintain_array(arr_pos, size);
 988              		.loc 1 233 0
 989 00ee 3B1C     		mov	r3, r7
 990 00f0 0B33     		add	r3, r3, #11
 991 00f2 1A78     		ldrb	r2, [r3]
 992 00f4 3B1C     		mov	r3, r7
 993 00f6 0A33     		add	r3, r3, #10
 994 00f8 1B78     		ldrb	r3, [r3]
 995 00fa 101C     		mov	r0, r2
 996 00fc 191C     		mov	r1, r3
 997 00fe FFF7FEFF 		bl	maintain_array
 998 0102 031C     		mov	r3, r0
 234:.\main.c      **** }
 999              		.loc 1 234 0
 1000 0104 181C     		mov	r0, r3
 1001 0106 BD46     		mov	sp, r7
 1002 0108 06B0     		add	sp, sp, #24
 1003              		@ sp needed
 1004 010a 80BD     		pop	{r7, pc}
 1005              		.cfi_endproc
 1006              	.LFE39:
 1007              		.size	check_update, .-check_update
 1008              		.section	.text.pos_to_vel,"ax",%progbits
 1009              		.align	2
 1010              		.global	pos_to_vel
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 23


 1011              		.code	16
 1012              		.thumb_func
 1013              		.type	pos_to_vel, %function
 1014              	pos_to_vel:
 1015              	.LFB40:
 235:.\main.c      **** 
 236:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 237:.\main.c      **** {
 1016              		.loc 1 237 0
 1017              		.cfi_startproc
 1018 0000 90B5     		push	{r4, r7, lr}
 1019              		.cfi_def_cfa_offset 12
 1020              		.cfi_offset 4, -12
 1021              		.cfi_offset 7, -8
 1022              		.cfi_offset 14, -4
 1023 0002 83B0     		sub	sp, sp, #12
 1024              		.cfi_def_cfa_offset 24
 1025 0004 00AF     		add	r7, sp, #0
 1026              		.cfi_def_cfa_register 7
 1027 0006 3960     		str	r1, [r7]
 1028 0008 111C     		mov	r1, r2
 1029 000a 1A1C     		mov	r2, r3
 1030 000c FB1D     		add	r3, r7, #7
 1031 000e 1870     		strb	r0, [r3]
 1032 0010 BB1D     		add	r3, r7, #6
 1033 0012 1970     		strb	r1, [r3]
 1034 0014 3B1D     		add	r3, r7, #4
 1035 0016 1A80     		strh	r2, [r3]
 238:.\main.c      ****     if(command >= 1000 && command < 1125)
 1036              		.loc 1 238 0
 1037 0018 3B1D     		add	r3, r7, #4
 1038 001a 1A88     		ldrh	r2, [r3]
 1039 001c 724B     		ldr	r3, .L65
 1040 001e 9A42     		cmp	r2, r3
 1041 0020 11D9     		bls	.L54
 1042              		.loc 1 238 0 is_stmt 0 discriminator 1
 1043 0022 3B1D     		add	r3, r7, #4
 1044 0024 1A88     		ldrh	r2, [r3]
 1045 0026 714B     		ldr	r3, .L65+4
 1046 0028 9A42     		cmp	r2, r3
 1047 002a 0CD8     		bhi	.L54
 239:.\main.c      ****     {
 240:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 1048              		.loc 1 240 0 is_stmt 1
 1049 002c FC1D     		add	r4, r7, #7
 1050 002e 3868     		ldr	r0, [r7]
 1051 0030 FB1D     		add	r3, r7, #7
 1052 0032 1978     		ldrb	r1, [r3]
 1053 0034 BB1D     		add	r3, r7, #6
 1054 0036 1A78     		ldrb	r2, [r3]
 1055 0038 6423     		mov	r3, #100
 1056 003a 5B42     		neg	r3, r3
 1057 003c FFF7FEFF 		bl	check_update
 1058 0040 031C     		mov	r3, r0
 1059 0042 2370     		strb	r3, [r4]
 1060 0044 CAE0     		b	.L55
 1061              	.L54:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 24


 241:.\main.c      ****     }
 242:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1062              		.loc 1 242 0
 1063 0046 3B1D     		add	r3, r7, #4
 1064 0048 1A88     		ldrh	r2, [r3]
 1065 004a 684B     		ldr	r3, .L65+4
 1066 004c 9A42     		cmp	r2, r3
 1067 004e 11D9     		bls	.L56
 1068              		.loc 1 242 0 is_stmt 0 discriminator 1
 1069 0050 3B1D     		add	r3, r7, #4
 1070 0052 1A88     		ldrh	r2, [r3]
 1071 0054 664B     		ldr	r3, .L65+8
 1072 0056 9A42     		cmp	r2, r3
 1073 0058 0CD8     		bhi	.L56
 243:.\main.c      ****     {
 244:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1074              		.loc 1 244 0 is_stmt 1
 1075 005a FC1D     		add	r4, r7, #7
 1076 005c 3868     		ldr	r0, [r7]
 1077 005e FB1D     		add	r3, r7, #7
 1078 0060 1978     		ldrb	r1, [r3]
 1079 0062 BB1D     		add	r3, r7, #6
 1080 0064 1A78     		ldrb	r2, [r3]
 1081 0066 3223     		mov	r3, #50
 1082 0068 5B42     		neg	r3, r3
 1083 006a FFF7FEFF 		bl	check_update
 1084 006e 031C     		mov	r3, r0
 1085 0070 2370     		strb	r3, [r4]
 1086 0072 B3E0     		b	.L55
 1087              	.L56:
 245:.\main.c      ****     }
 246:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1088              		.loc 1 246 0
 1089 0074 3B1D     		add	r3, r7, #4
 1090 0076 1A88     		ldrh	r2, [r3]
 1091 0078 5D4B     		ldr	r3, .L65+8
 1092 007a 9A42     		cmp	r2, r3
 1093 007c 11D9     		bls	.L57
 1094              		.loc 1 246 0 is_stmt 0 discriminator 1
 1095 007e 3B1D     		add	r3, r7, #4
 1096 0080 1A88     		ldrh	r2, [r3]
 1097 0082 5C4B     		ldr	r3, .L65+12
 1098 0084 9A42     		cmp	r2, r3
 1099 0086 0CD8     		bhi	.L57
 247:.\main.c      ****     {
 248:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 1100              		.loc 1 248 0 is_stmt 1
 1101 0088 FC1D     		add	r4, r7, #7
 1102 008a 3868     		ldr	r0, [r7]
 1103 008c FB1D     		add	r3, r7, #7
 1104 008e 1978     		ldrb	r1, [r3]
 1105 0090 BB1D     		add	r3, r7, #6
 1106 0092 1A78     		ldrb	r2, [r3]
 1107 0094 0A23     		mov	r3, #10
 1108 0096 5B42     		neg	r3, r3
 1109 0098 FFF7FEFF 		bl	check_update
 1110 009c 031C     		mov	r3, r0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 25


 1111 009e 2370     		strb	r3, [r4]
 1112 00a0 9CE0     		b	.L55
 1113              	.L57:
 249:.\main.c      ****     }
 250:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1114              		.loc 1 250 0
 1115 00a2 3B1D     		add	r3, r7, #4
 1116 00a4 1A88     		ldrh	r2, [r3]
 1117 00a6 534B     		ldr	r3, .L65+12
 1118 00a8 9A42     		cmp	r2, r3
 1119 00aa 11D9     		bls	.L58
 1120              		.loc 1 250 0 is_stmt 0 discriminator 1
 1121 00ac 3B1D     		add	r3, r7, #4
 1122 00ae 1A88     		ldrh	r2, [r3]
 1123 00b0 514B     		ldr	r3, .L65+16
 1124 00b2 9A42     		cmp	r2, r3
 1125 00b4 0CD8     		bhi	.L58
 251:.\main.c      ****     {
 252:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1126              		.loc 1 252 0 is_stmt 1
 1127 00b6 FC1D     		add	r4, r7, #7
 1128 00b8 3868     		ldr	r0, [r7]
 1129 00ba FB1D     		add	r3, r7, #7
 1130 00bc 1978     		ldrb	r1, [r3]
 1131 00be BB1D     		add	r3, r7, #6
 1132 00c0 1A78     		ldrb	r2, [r3]
 1133 00c2 0523     		mov	r3, #5
 1134 00c4 5B42     		neg	r3, r3
 1135 00c6 FFF7FEFF 		bl	check_update
 1136 00ca 031C     		mov	r3, r0
 1137 00cc 2370     		strb	r3, [r4]
 1138 00ce 85E0     		b	.L55
 1139              	.L58:
 253:.\main.c      ****     }
 254:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1140              		.loc 1 254 0
 1141 00d0 3B1D     		add	r3, r7, #4
 1142 00d2 1A88     		ldrh	r2, [r3]
 1143 00d4 494B     		ldr	r3, .L65+20
 1144 00d6 9A42     		cmp	r2, r3
 1145 00d8 10D8     		bhi	.L59
 1146              		.loc 1 254 0 is_stmt 0 discriminator 1
 1147 00da 3B1D     		add	r3, r7, #4
 1148 00dc 1A88     		ldrh	r2, [r3]
 1149 00de 464B     		ldr	r3, .L65+16
 1150 00e0 9A42     		cmp	r2, r3
 1151 00e2 0BD9     		bls	.L59
 255:.\main.c      ****     {
 256:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1152              		.loc 1 256 0 is_stmt 1
 1153 00e4 FC1D     		add	r4, r7, #7
 1154 00e6 FB1D     		add	r3, r7, #7
 1155 00e8 1A78     		ldrb	r2, [r3]
 1156 00ea BB1D     		add	r3, r7, #6
 1157 00ec 1B78     		ldrb	r3, [r3]
 1158 00ee 101C     		mov	r0, r2
 1159 00f0 191C     		mov	r1, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 26


 1160 00f2 FFF7FEFF 		bl	maintain_array
 1161 00f6 031C     		mov	r3, r0
 1162 00f8 2370     		strb	r3, [r4]
 1163 00fa 6FE0     		b	.L55
 1164              	.L59:
 257:.\main.c      ****     }
 258:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1165              		.loc 1 258 0
 1166 00fc 3B1D     		add	r3, r7, #4
 1167 00fe 1A88     		ldrh	r2, [r3]
 1168 0100 3E4B     		ldr	r3, .L65+20
 1169 0102 9A42     		cmp	r2, r3
 1170 0104 13D9     		bls	.L60
 1171              		.loc 1 258 0 is_stmt 0 discriminator 1
 1172 0106 3B1D     		add	r3, r7, #4
 1173 0108 1A88     		ldrh	r2, [r3]
 1174 010a 3D4B     		ldr	r3, .L65+24
 1175 010c 9A42     		cmp	r2, r3
 1176 010e 0ED8     		bhi	.L60
 259:.\main.c      ****     {
 260:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1177              		.loc 1 260 0 is_stmt 1
 1178 0110 FC1D     		add	r4, r7, #7
 1179 0112 3968     		ldr	r1, [r7]
 1180 0114 FB1D     		add	r3, r7, #7
 1181 0116 1A78     		ldrb	r2, [r3]
 1182 0118 BB1D     		add	r3, r7, #6
 1183 011a 1B78     		ldrb	r3, [r3]
 1184 011c 081C     		mov	r0, r1
 1185 011e 111C     		mov	r1, r2
 1186 0120 1A1C     		mov	r2, r3
 1187 0122 0523     		mov	r3, #5
 1188 0124 FFF7FEFF 		bl	check_update
 1189 0128 031C     		mov	r3, r0
 1190 012a 2370     		strb	r3, [r4]
 1191 012c 56E0     		b	.L55
 1192              	.L60:
 261:.\main.c      ****     }
 262:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1193              		.loc 1 262 0
 1194 012e 3B1D     		add	r3, r7, #4
 1195 0130 1A88     		ldrh	r2, [r3]
 1196 0132 334B     		ldr	r3, .L65+24
 1197 0134 9A42     		cmp	r2, r3
 1198 0136 13D9     		bls	.L61
 1199              		.loc 1 262 0 is_stmt 0 discriminator 1
 1200 0138 3B1D     		add	r3, r7, #4
 1201 013a 1A88     		ldrh	r2, [r3]
 1202 013c 314B     		ldr	r3, .L65+28
 1203 013e 9A42     		cmp	r2, r3
 1204 0140 0ED8     		bhi	.L61
 263:.\main.c      ****     {
 264:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1205              		.loc 1 264 0 is_stmt 1
 1206 0142 FC1D     		add	r4, r7, #7
 1207 0144 3968     		ldr	r1, [r7]
 1208 0146 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 27


 1209 0148 1A78     		ldrb	r2, [r3]
 1210 014a BB1D     		add	r3, r7, #6
 1211 014c 1B78     		ldrb	r3, [r3]
 1212 014e 081C     		mov	r0, r1
 1213 0150 111C     		mov	r1, r2
 1214 0152 1A1C     		mov	r2, r3
 1215 0154 0A23     		mov	r3, #10
 1216 0156 FFF7FEFF 		bl	check_update
 1217 015a 031C     		mov	r3, r0
 1218 015c 2370     		strb	r3, [r4]
 1219 015e 3DE0     		b	.L55
 1220              	.L61:
 265:.\main.c      ****     }
 266:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1221              		.loc 1 266 0
 1222 0160 3B1D     		add	r3, r7, #4
 1223 0162 1A88     		ldrh	r2, [r3]
 1224 0164 274B     		ldr	r3, .L65+28
 1225 0166 9A42     		cmp	r2, r3
 1226 0168 13D9     		bls	.L62
 1227              		.loc 1 266 0 is_stmt 0 discriminator 1
 1228 016a 3B1D     		add	r3, r7, #4
 1229 016c 1A88     		ldrh	r2, [r3]
 1230 016e 264B     		ldr	r3, .L65+32
 1231 0170 9A42     		cmp	r2, r3
 1232 0172 0ED8     		bhi	.L62
 267:.\main.c      ****     {
 268:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1233              		.loc 1 268 0 is_stmt 1
 1234 0174 FC1D     		add	r4, r7, #7
 1235 0176 3968     		ldr	r1, [r7]
 1236 0178 FB1D     		add	r3, r7, #7
 1237 017a 1A78     		ldrb	r2, [r3]
 1238 017c BB1D     		add	r3, r7, #6
 1239 017e 1B78     		ldrb	r3, [r3]
 1240 0180 081C     		mov	r0, r1
 1241 0182 111C     		mov	r1, r2
 1242 0184 1A1C     		mov	r2, r3
 1243 0186 3223     		mov	r3, #50
 1244 0188 FFF7FEFF 		bl	check_update
 1245 018c 031C     		mov	r3, r0
 1246 018e 2370     		strb	r3, [r4]
 1247 0190 24E0     		b	.L55
 1248              	.L62:
 269:.\main.c      ****     }
 270:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1249              		.loc 1 270 0
 1250 0192 3B1D     		add	r3, r7, #4
 1251 0194 1A88     		ldrh	r2, [r3]
 1252 0196 1C4B     		ldr	r3, .L65+32
 1253 0198 9A42     		cmp	r2, r3
 1254 019a 14D9     		bls	.L63
 1255              		.loc 1 270 0 is_stmt 0 discriminator 1
 1256 019c 3B1D     		add	r3, r7, #4
 1257 019e 1A88     		ldrh	r2, [r3]
 1258 01a0 FA23     		mov	r3, #250
 1259 01a2 DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 28


 1260 01a4 9A42     		cmp	r2, r3
 1261 01a6 0ED8     		bhi	.L63
 271:.\main.c      ****     {
 272:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1262              		.loc 1 272 0 is_stmt 1
 1263 01a8 FC1D     		add	r4, r7, #7
 1264 01aa 3968     		ldr	r1, [r7]
 1265 01ac FB1D     		add	r3, r7, #7
 1266 01ae 1A78     		ldrb	r2, [r3]
 1267 01b0 BB1D     		add	r3, r7, #6
 1268 01b2 1B78     		ldrb	r3, [r3]
 1269 01b4 081C     		mov	r0, r1
 1270 01b6 111C     		mov	r1, r2
 1271 01b8 1A1C     		mov	r2, r3
 1272 01ba 6423     		mov	r3, #100
 1273 01bc FFF7FEFF 		bl	check_update
 1274 01c0 031C     		mov	r3, r0
 1275 01c2 2370     		strb	r3, [r4]
 1276 01c4 0AE0     		b	.L55
 1277              	.L63:
 273:.\main.c      ****     }
 274:.\main.c      ****     else
 275:.\main.c      ****     {
 276:.\main.c      ****         //throw error
 277:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1278              		.loc 1 277 0
 1279 01c6 FC1D     		add	r4, r7, #7
 1280 01c8 FB1D     		add	r3, r7, #7
 1281 01ca 1A78     		ldrb	r2, [r3]
 1282 01cc BB1D     		add	r3, r7, #6
 1283 01ce 1B78     		ldrb	r3, [r3]
 1284 01d0 101C     		mov	r0, r2
 1285 01d2 191C     		mov	r1, r3
 1286 01d4 FFF7FEFF 		bl	maintain_array
 1287 01d8 031C     		mov	r3, r0
 1288 01da 2370     		strb	r3, [r4]
 1289              	.L55:
 278:.\main.c      ****     }
 279:.\main.c      ****     return cur_pos;
 1290              		.loc 1 279 0
 1291 01dc FB1D     		add	r3, r7, #7
 1292 01de 1B78     		ldrb	r3, [r3]
 280:.\main.c      **** }
 1293              		.loc 1 280 0
 1294 01e0 181C     		mov	r0, r3
 1295 01e2 BD46     		mov	sp, r7
 1296 01e4 03B0     		add	sp, sp, #12
 1297              		@ sp needed
 1298 01e6 90BD     		pop	{r4, r7, pc}
 1299              	.L66:
 1300              		.align	2
 1301              	.L65:
 1302 01e8 E7030000 		.word	999
 1303 01ec 64040000 		.word	1124
 1304 01f0 E1040000 		.word	1249
 1305 01f4 5E050000 		.word	1374
 1306 01f8 D1050000 		.word	1489
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 29


 1307 01fc E6050000 		.word	1510
 1308 0200 59060000 		.word	1625
 1309 0204 D6060000 		.word	1750
 1310 0208 53070000 		.word	1875
 1311              		.cfi_endproc
 1312              	.LFE40:
 1313              		.size	pos_to_vel, .-pos_to_vel
 1314              		.section	.text.make_command,"ax",%progbits
 1315              		.align	2
 1316              		.global	make_command
 1317              		.code	16
 1318              		.thumb_func
 1319              		.type	make_command, %function
 1320              	make_command:
 1321              	.LFB41:
 281:.\main.c      **** 
 282:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 283:.\main.c      **** {
 1322              		.loc 1 283 0
 1323              		.cfi_startproc
 1324 0000 80B5     		push	{r7, lr}
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 84B0     		sub	sp, sp, #16
 1329              		.cfi_def_cfa_offset 24
 1330 0004 00AF     		add	r7, sp, #0
 1331              		.cfi_def_cfa_register 7
 1332 0006 7860     		str	r0, [r7, #4]
 1333 0008 FB1C     		add	r3, r7, #3
 1334 000a 1970     		strb	r1, [r3]
 1335 000c BB1C     		add	r3, r7, #2
 1336 000e 1A70     		strb	r2, [r3]
 284:.\main.c      ****     uint16 command;
 285:.\main.c      ****     int16 temp1;
 286:.\main.c      ****     int16 temp2;
 287:.\main.c      ****     int16 temp3;
 288:.\main.c      ****     
 289:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1337              		.loc 1 289 0
 1338 0010 FB1C     		add	r3, r7, #3
 1339 0012 1B78     		ldrb	r3, [r3]
 1340 0014 7A68     		ldr	r2, [r7, #4]
 1341 0016 D318     		add	r3, r2, r3
 1342 0018 1B78     		ldrb	r3, [r3]
 1343 001a 5BB2     		sxtb	r3, r3
 1344 001c 1A02     		lsl	r2, r3, #8
 1345 001e 3B1C     		mov	r3, r7
 1346 0020 0E33     		add	r3, r3, #14
 1347 0022 1A80     		strh	r2, [r3]
 290:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1348              		.loc 1 290 0
 1349 0024 BB1C     		add	r3, r7, #2
 1350 0026 1B78     		ldrb	r3, [r3]
 1351 0028 7A68     		ldr	r2, [r7, #4]
 1352 002a D318     		add	r3, r2, r3
 1353 002c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 30


 1354 002e 5BB2     		sxtb	r3, r3
 1355 0030 9AB2     		uxth	r2, r3
 1356 0032 3B1C     		mov	r3, r7
 1357 0034 0C33     		add	r3, r3, #12
 1358 0036 111C     		add	r1, r2, #0
 1359 0038 FF22     		mov	r2, #255
 1360 003a 0A40     		and	r2, r1
 1361 003c 1A80     		strh	r2, [r3]
 291:.\main.c      ****     temp3 = temp1 | temp2;
 1362              		.loc 1 291 0
 1363 003e 3B1C     		mov	r3, r7
 1364 0040 0A33     		add	r3, r3, #10
 1365 0042 391C     		mov	r1, r7
 1366 0044 0E31     		add	r1, r1, #14
 1367 0046 3A1C     		mov	r2, r7
 1368 0048 0C32     		add	r2, r2, #12
 1369 004a 0988     		ldrh	r1, [r1]
 1370 004c 1288     		ldrh	r2, [r2]
 1371 004e 0A43     		orr	r2, r1
 1372 0050 1A80     		strh	r2, [r3]
 292:.\main.c      ****     command = (temp3/2) + 1500;
 1373              		.loc 1 292 0
 1374 0052 3B1C     		mov	r3, r7
 1375 0054 0A33     		add	r3, r3, #10
 1376 0056 0021     		mov	r1, #0
 1377 0058 5B5E     		ldrsh	r3, [r3, r1]
 1378 005a 002B     		cmp	r3, #0
 1379 005c 00DA     		bge	.L68
 1380 005e 0133     		add	r3, r3, #1
 1381              	.L68:
 1382 0060 5B10     		asr	r3, r3, #1
 1383 0062 9BB2     		uxth	r3, r3
 1384 0064 9AB2     		uxth	r2, r3
 1385 0066 3B1C     		mov	r3, r7
 1386 0068 0833     		add	r3, r3, #8
 1387 006a 0549     		ldr	r1, .L70
 1388 006c 5218     		add	r2, r2, r1
 1389 006e 1A80     		strh	r2, [r3]
 293:.\main.c      ****     return command;
 1390              		.loc 1 293 0
 1391 0070 3B1C     		mov	r3, r7
 1392 0072 0833     		add	r3, r3, #8
 1393 0074 1B88     		ldrh	r3, [r3]
 294:.\main.c      **** }
 1394              		.loc 1 294 0
 1395 0076 181C     		mov	r0, r3
 1396 0078 BD46     		mov	sp, r7
 1397 007a 04B0     		add	sp, sp, #16
 1398              		@ sp needed
 1399 007c 80BD     		pop	{r7, pc}
 1400              	.L71:
 1401 007e C046     		.align	2
 1402              	.L70:
 1403 0080 DC050000 		.word	1500
 1404              		.cfi_endproc
 1405              	.LFE41:
 1406              		.size	make_command, .-make_command
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 31


 1407              		.section	.text.potFeedback,"ax",%progbits
 1408              		.align	2
 1409              		.global	potFeedback
 1410              		.code	16
 1411              		.thumb_func
 1412              		.type	potFeedback, %function
 1413              	potFeedback:
 1414              	.LFB42:
 295:.\main.c      **** 
 296:.\main.c      **** uint16 potFeedback(uint32 channel)
 297:.\main.c      **** {
 1415              		.loc 1 297 0
 1416              		.cfi_startproc
 1417 0000 80B5     		push	{r7, lr}
 1418              		.cfi_def_cfa_offset 8
 1419              		.cfi_offset 7, -8
 1420              		.cfi_offset 14, -4
 1421 0002 84B0     		sub	sp, sp, #16
 1422              		.cfi_def_cfa_offset 24
 1423 0004 00AF     		add	r7, sp, #0
 1424              		.cfi_def_cfa_register 7
 1425 0006 7860     		str	r0, [r7, #4]
 298:.\main.c      ****     //TODO: uncomment this section
 299:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1426              		.loc 1 299 0
 1427 0008 7B68     		ldr	r3, [r7, #4]
 1428 000a 181C     		mov	r0, r3
 1429 000c FFF7FEFF 		bl	ADC_GetResult16
 1430 0010 031C     		mov	r3, r0
 1431 0012 1A1C     		mov	r2, r3
 1432 0014 3B1C     		mov	r3, r7
 1433 0016 0E33     		add	r3, r3, #14
 1434 0018 1A80     		strh	r2, [r3]
 300:.\main.c      ****     //uint16 feedback = 500;
 301:.\main.c      ****     return feedback;
 1435              		.loc 1 301 0
 1436 001a 3B1C     		mov	r3, r7
 1437 001c 0E33     		add	r3, r3, #14
 1438 001e 1B88     		ldrh	r3, [r3]
 302:.\main.c      **** }
 1439              		.loc 1 302 0
 1440 0020 181C     		mov	r0, r3
 1441 0022 BD46     		mov	sp, r7
 1442 0024 04B0     		add	sp, sp, #16
 1443              		@ sp needed
 1444 0026 80BD     		pop	{r7, pc}
 1445              		.cfi_endproc
 1446              	.LFE42:
 1447              		.size	potFeedback, .-potFeedback
 1448              		.section	.text.send_feedback,"ax",%progbits
 1449              		.align	2
 1450              		.global	send_feedback
 1451              		.code	16
 1452              		.thumb_func
 1453              		.type	send_feedback, %function
 1454              	send_feedback:
 1455              	.LFB43:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 32


 303:.\main.c      **** 
 304:.\main.c      **** void send_feedback()
 305:.\main.c      **** {
 1456              		.loc 1 305 0
 1457              		.cfi_startproc
 1458 0000 80B5     		push	{r7, lr}
 1459              		.cfi_def_cfa_offset 8
 1460              		.cfi_offset 7, -8
 1461              		.cfi_offset 14, -4
 1462 0002 00AF     		add	r7, sp, #0
 1463              		.cfi_def_cfa_register 7
 306:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 307:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 308:.\main.c      ****     //TODO define system state
 309:.\main.c      ****     //send packet via serial to wiznet
 310:.\main.c      **** }
 1464              		.loc 1 310 0
 1465 0004 BD46     		mov	sp, r7
 1466              		@ sp needed
 1467 0006 80BD     		pop	{r7, pc}
 1468              		.cfi_endproc
 1469              	.LFE43:
 1470              		.size	send_feedback, .-send_feedback
 1471              		.section	.text.fill_data_array,"ax",%progbits
 1472              		.align	2
 1473              		.global	fill_data_array
 1474              		.code	16
 1475              		.thumb_func
 1476              		.type	fill_data_array, %function
 1477              	fill_data_array:
 1478              	.LFB44:
 311:.\main.c      **** 
 312:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 313:.\main.c      **** void fill_data_array()
 314:.\main.c      **** {
 1479              		.loc 1 314 0
 1480              		.cfi_startproc
 1481 0000 80B5     		push	{r7, lr}
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 00AF     		add	r7, sp, #0
 1486              		.cfi_def_cfa_register 7
 315:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1487              		.loc 1 315 0
 1488 0004 034B     		ldr	r3, .L76
 1489 0006 181C     		mov	r0, r3
 1490 0008 1621     		mov	r1, #22
 1491 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 316:.\main.c      **** //    uint8 i = 0;
 317:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 318:.\main.c      **** //    {
 319:.\main.c      **** //        data_array[i] = test_array[i];
 320:.\main.c      **** //    }
 321:.\main.c      **** }
 1492              		.loc 1 321 0
 1493 000e BD46     		mov	sp, r7
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 33


 1494              		@ sp needed
 1495 0010 80BD     		pop	{r7, pc}
 1496              	.L77:
 1497 0012 C046     		.align	2
 1498              	.L76:
 1499 0014 00000000 		.word	data_array
 1500              		.cfi_endproc
 1501              	.LFE44:
 1502              		.size	fill_data_array, .-fill_data_array
 1503              		.section	.text.ServoGoalPosition,"ax",%progbits
 1504              		.align	2
 1505              		.global	ServoGoalPosition
 1506              		.code	16
 1507              		.thumb_func
 1508              		.type	ServoGoalPosition, %function
 1509              	ServoGoalPosition:
 1510              	.LFB45:
 322:.\main.c      **** 
 323:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 324:.\main.c      **** {
 1511              		.loc 1 324 0
 1512              		.cfi_startproc
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 86B0     		sub	sp, sp, #24
 1518              		.cfi_def_cfa_offset 32
 1519 0004 00AF     		add	r7, sp, #0
 1520              		.cfi_def_cfa_register 7
 1521 0006 0A1C     		mov	r2, r1
 1522 0008 FB1D     		add	r3, r7, #7
 1523 000a 011C     		add	r1, r0, #0
 1524 000c 1970     		strb	r1, [r3]
 1525 000e 3B1D     		add	r3, r7, #4
 1526 0010 1A80     		strh	r2, [r3]
 325:.\main.c      ****     uint8 array[9];
 326:.\main.c      ****     
 327:.\main.c      ****     array[0] = 0xFF;
 1527              		.loc 1 327 0
 1528 0012 3B1C     		mov	r3, r7
 1529 0014 0C33     		add	r3, r3, #12
 1530 0016 FF22     		mov	r2, #255
 1531 0018 1A70     		strb	r2, [r3]
 328:.\main.c      ****     array[1] = 0xFF;
 1532              		.loc 1 328 0
 1533 001a 3B1C     		mov	r3, r7
 1534 001c 0C33     		add	r3, r3, #12
 1535 001e FF22     		mov	r2, #255
 1536 0020 5A70     		strb	r2, [r3, #1]
 329:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1537              		.loc 1 329 0
 1538 0022 3B1C     		mov	r3, r7
 1539 0024 0C33     		add	r3, r3, #12
 1540 0026 FA1D     		add	r2, r7, #7
 1541 0028 1278     		ldrb	r2, [r2]
 1542 002a 9A70     		strb	r2, [r3, #2]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 34


 330:.\main.c      ****     array[3] = 0x05;
 1543              		.loc 1 330 0
 1544 002c 3B1C     		mov	r3, r7
 1545 002e 0C33     		add	r3, r3, #12
 1546 0030 0522     		mov	r2, #5
 1547 0032 DA70     		strb	r2, [r3, #3]
 331:.\main.c      ****     array[4] = 0x03; //write instruction
 1548              		.loc 1 331 0
 1549 0034 3B1C     		mov	r3, r7
 1550 0036 0C33     		add	r3, r3, #12
 1551 0038 0322     		mov	r2, #3
 1552 003a 1A71     		strb	r2, [r3, #4]
 332:.\main.c      ****     array[5] = 0x1E;
 1553              		.loc 1 332 0
 1554 003c 3B1C     		mov	r3, r7
 1555 003e 0C33     		add	r3, r3, #12
 1556 0040 1E22     		mov	r2, #30
 1557 0042 5A71     		strb	r2, [r3, #5]
 333:.\main.c      ****     array[6] = position;
 1558              		.loc 1 333 0
 1559 0044 3B1D     		add	r3, r7, #4
 1560 0046 1B88     		ldrh	r3, [r3]
 1561 0048 DAB2     		uxtb	r2, r3
 1562 004a 3B1C     		mov	r3, r7
 1563 004c 0C33     		add	r3, r3, #12
 1564 004e 9A71     		strb	r2, [r3, #6]
 334:.\main.c      ****     array[7] = position >> 8;
 1565              		.loc 1 334 0
 1566 0050 3B1D     		add	r3, r7, #4
 1567 0052 1B88     		ldrh	r3, [r3]
 1568 0054 1B0A     		lsr	r3, r3, #8
 1569 0056 9BB2     		uxth	r3, r3
 1570 0058 DAB2     		uxtb	r2, r3
 1571 005a 3B1C     		mov	r3, r7
 1572 005c 0C33     		add	r3, r3, #12
 1573 005e DA71     		strb	r2, [r3, #7]
 335:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1574              		.loc 1 335 0
 1575 0060 3B1C     		mov	r3, r7
 1576 0062 0C33     		add	r3, r3, #12
 1577 0064 9A79     		ldrb	r2, [r3, #6]
 1578 0066 FB1D     		add	r3, r7, #7
 1579 0068 1B78     		ldrb	r3, [r3]
 1580 006a D318     		add	r3, r2, r3
 1581 006c DAB2     		uxtb	r2, r3
 1582 006e 3B1C     		mov	r3, r7
 1583 0070 0C33     		add	r3, r3, #12
 1584 0072 DB79     		ldrb	r3, [r3, #7]
 1585 0074 D318     		add	r3, r2, r3
 1586 0076 DBB2     		uxtb	r3, r3
 1587 0078 2633     		add	r3, r3, #38
 1588 007a DBB2     		uxtb	r3, r3
 1589 007c DB43     		mvn	r3, r3
 1590 007e DAB2     		uxtb	r2, r3
 1591 0080 3B1C     		mov	r3, r7
 1592 0082 0C33     		add	r3, r3, #12
 1593 0084 1A72     		strb	r2, [r3, #8]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 35


 336:.\main.c      ****     
 337:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1594              		.loc 1 337 0
 1595 0086 3B1C     		mov	r3, r7
 1596 0088 0C33     		add	r3, r3, #12
 1597 008a 181C     		mov	r0, r3
 1598 008c 0921     		mov	r1, #9
 1599 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 338:.\main.c      **** }
 1600              		.loc 1 338 0
 1601 0092 BD46     		mov	sp, r7
 1602 0094 06B0     		add	sp, sp, #24
 1603              		@ sp needed
 1604 0096 80BD     		pop	{r7, pc}
 1605              		.cfi_endproc
 1606              	.LFE45:
 1607              		.size	ServoGoalPosition, .-ServoGoalPosition
 1608              		.section	.text.SetServoTorque,"ax",%progbits
 1609              		.align	2
 1610              		.global	SetServoTorque
 1611              		.code	16
 1612              		.thumb_func
 1613              		.type	SetServoTorque, %function
 1614              	SetServoTorque:
 1615              	.LFB46:
 339:.\main.c      **** 
 340:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 341:.\main.c      **** {
 1616              		.loc 1 341 0
 1617              		.cfi_startproc
 1618 0000 80B5     		push	{r7, lr}
 1619              		.cfi_def_cfa_offset 8
 1620              		.cfi_offset 7, -8
 1621              		.cfi_offset 14, -4
 1622 0002 86B0     		sub	sp, sp, #24
 1623              		.cfi_def_cfa_offset 32
 1624 0004 00AF     		add	r7, sp, #0
 1625              		.cfi_def_cfa_register 7
 1626 0006 0A1C     		mov	r2, r1
 1627 0008 FB1D     		add	r3, r7, #7
 1628 000a 011C     		add	r1, r0, #0
 1629 000c 1970     		strb	r1, [r3]
 1630 000e 3B1D     		add	r3, r7, #4
 1631 0010 1A80     		strh	r2, [r3]
 342:.\main.c      ****     uint8 array[9];
 343:.\main.c      ****     
 344:.\main.c      ****     array[0] = 0xFF;
 1632              		.loc 1 344 0
 1633 0012 3B1C     		mov	r3, r7
 1634 0014 0C33     		add	r3, r3, #12
 1635 0016 FF22     		mov	r2, #255
 1636 0018 1A70     		strb	r2, [r3]
 345:.\main.c      ****     array[1] = 0xFF;
 1637              		.loc 1 345 0
 1638 001a 3B1C     		mov	r3, r7
 1639 001c 0C33     		add	r3, r3, #12
 1640 001e FF22     		mov	r2, #255
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 36


 1641 0020 5A70     		strb	r2, [r3, #1]
 346:.\main.c      ****     array[2] = servoID; 
 1642              		.loc 1 346 0
 1643 0022 3B1C     		mov	r3, r7
 1644 0024 0C33     		add	r3, r3, #12
 1645 0026 FA1D     		add	r2, r7, #7
 1646 0028 1278     		ldrb	r2, [r2]
 1647 002a 9A70     		strb	r2, [r3, #2]
 347:.\main.c      ****     array[3] = 0x05;
 1648              		.loc 1 347 0
 1649 002c 3B1C     		mov	r3, r7
 1650 002e 0C33     		add	r3, r3, #12
 1651 0030 0522     		mov	r2, #5
 1652 0032 DA70     		strb	r2, [r3, #3]
 348:.\main.c      ****     array[4] = 0x03; //write instruction
 1653              		.loc 1 348 0
 1654 0034 3B1C     		mov	r3, r7
 1655 0036 0C33     		add	r3, r3, #12
 1656 0038 0322     		mov	r2, #3
 1657 003a 1A71     		strb	r2, [r3, #4]
 349:.\main.c      ****     array[5] = 0x0E;
 1658              		.loc 1 349 0
 1659 003c 3B1C     		mov	r3, r7
 1660 003e 0C33     		add	r3, r3, #12
 1661 0040 0E22     		mov	r2, #14
 1662 0042 5A71     		strb	r2, [r3, #5]
 350:.\main.c      ****     array[6] = torque;
 1663              		.loc 1 350 0
 1664 0044 3B1D     		add	r3, r7, #4
 1665 0046 1B88     		ldrh	r3, [r3]
 1666 0048 DAB2     		uxtb	r2, r3
 1667 004a 3B1C     		mov	r3, r7
 1668 004c 0C33     		add	r3, r3, #12
 1669 004e 9A71     		strb	r2, [r3, #6]
 351:.\main.c      ****     array[7] = torque >> 8;
 1670              		.loc 1 351 0
 1671 0050 3B1D     		add	r3, r7, #4
 1672 0052 1B88     		ldrh	r3, [r3]
 1673 0054 1B0A     		lsr	r3, r3, #8
 1674 0056 9BB2     		uxth	r3, r3
 1675 0058 DAB2     		uxtb	r2, r3
 1676 005a 3B1C     		mov	r3, r7
 1677 005c 0C33     		add	r3, r3, #12
 1678 005e DA71     		strb	r2, [r3, #7]
 352:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1679              		.loc 1 352 0
 1680 0060 3B1C     		mov	r3, r7
 1681 0062 0C33     		add	r3, r3, #12
 1682 0064 9A79     		ldrb	r2, [r3, #6]
 1683 0066 FB1D     		add	r3, r7, #7
 1684 0068 1B78     		ldrb	r3, [r3]
 1685 006a D318     		add	r3, r2, r3
 1686 006c DAB2     		uxtb	r2, r3
 1687 006e 3B1C     		mov	r3, r7
 1688 0070 0C33     		add	r3, r3, #12
 1689 0072 DB79     		ldrb	r3, [r3, #7]
 1690 0074 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 37


 1691 0076 DBB2     		uxtb	r3, r3
 1692 0078 1633     		add	r3, r3, #22
 1693 007a DBB2     		uxtb	r3, r3
 1694 007c DB43     		mvn	r3, r3
 1695 007e DAB2     		uxtb	r2, r3
 1696 0080 3B1C     		mov	r3, r7
 1697 0082 0C33     		add	r3, r3, #12
 1698 0084 1A72     		strb	r2, [r3, #8]
 353:.\main.c      ****     
 354:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1699              		.loc 1 354 0
 1700 0086 3B1C     		mov	r3, r7
 1701 0088 0C33     		add	r3, r3, #12
 1702 008a 181C     		mov	r0, r3
 1703 008c 0921     		mov	r1, #9
 1704 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 355:.\main.c      ****     
 356:.\main.c      **** }    
 1705              		.loc 1 356 0
 1706 0092 BD46     		mov	sp, r7
 1707 0094 06B0     		add	sp, sp, #24
 1708              		@ sp needed
 1709 0096 80BD     		pop	{r7, pc}
 1710              		.cfi_endproc
 1711              	.LFE46:
 1712              		.size	SetServoTorque, .-SetServoTorque
 1713              		.section	.text.ServoSpeed,"ax",%progbits
 1714              		.align	2
 1715              		.global	ServoSpeed
 1716              		.code	16
 1717              		.thumb_func
 1718              		.type	ServoSpeed, %function
 1719              	ServoSpeed:
 1720              	.LFB47:
 357:.\main.c      **** 
 358:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 359:.\main.c      **** {
 1721              		.loc 1 359 0
 1722              		.cfi_startproc
 1723 0000 80B5     		push	{r7, lr}
 1724              		.cfi_def_cfa_offset 8
 1725              		.cfi_offset 7, -8
 1726              		.cfi_offset 14, -4
 1727 0002 86B0     		sub	sp, sp, #24
 1728              		.cfi_def_cfa_offset 32
 1729 0004 00AF     		add	r7, sp, #0
 1730              		.cfi_def_cfa_register 7
 1731 0006 0A1C     		mov	r2, r1
 1732 0008 FB1D     		add	r3, r7, #7
 1733 000a 011C     		add	r1, r0, #0
 1734 000c 1970     		strb	r1, [r3]
 1735 000e 3B1D     		add	r3, r7, #4
 1736 0010 1A80     		strh	r2, [r3]
 360:.\main.c      ****     uint8 array[9];
 361:.\main.c      ****     
 362:.\main.c      ****     array[0] = 0xFF;
 1737              		.loc 1 362 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 38


 1738 0012 3B1C     		mov	r3, r7
 1739 0014 0C33     		add	r3, r3, #12
 1740 0016 FF22     		mov	r2, #255
 1741 0018 1A70     		strb	r2, [r3]
 363:.\main.c      ****     array[1] = 0xFF;
 1742              		.loc 1 363 0
 1743 001a 3B1C     		mov	r3, r7
 1744 001c 0C33     		add	r3, r3, #12
 1745 001e FF22     		mov	r2, #255
 1746 0020 5A70     		strb	r2, [r3, #1]
 364:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1747              		.loc 1 364 0
 1748 0022 3B1C     		mov	r3, r7
 1749 0024 0C33     		add	r3, r3, #12
 1750 0026 FA1D     		add	r2, r7, #7
 1751 0028 1278     		ldrb	r2, [r2]
 1752 002a 9A70     		strb	r2, [r3, #2]
 365:.\main.c      ****     array[3] = 0x05;
 1753              		.loc 1 365 0
 1754 002c 3B1C     		mov	r3, r7
 1755 002e 0C33     		add	r3, r3, #12
 1756 0030 0522     		mov	r2, #5
 1757 0032 DA70     		strb	r2, [r3, #3]
 366:.\main.c      ****     array[4] = 0x03; //write instruction
 1758              		.loc 1 366 0
 1759 0034 3B1C     		mov	r3, r7
 1760 0036 0C33     		add	r3, r3, #12
 1761 0038 0322     		mov	r2, #3
 1762 003a 1A71     		strb	r2, [r3, #4]
 367:.\main.c      ****     array[5] = 0x20;
 1763              		.loc 1 367 0
 1764 003c 3B1C     		mov	r3, r7
 1765 003e 0C33     		add	r3, r3, #12
 1766 0040 2022     		mov	r2, #32
 1767 0042 5A71     		strb	r2, [r3, #5]
 368:.\main.c      ****     array[6] = speed;
 1768              		.loc 1 368 0
 1769 0044 3B1D     		add	r3, r7, #4
 1770 0046 1B88     		ldrh	r3, [r3]
 1771 0048 DAB2     		uxtb	r2, r3
 1772 004a 3B1C     		mov	r3, r7
 1773 004c 0C33     		add	r3, r3, #12
 1774 004e 9A71     		strb	r2, [r3, #6]
 369:.\main.c      ****     array[7] = speed >> 8;
 1775              		.loc 1 369 0
 1776 0050 3B1D     		add	r3, r7, #4
 1777 0052 1B88     		ldrh	r3, [r3]
 1778 0054 1B0A     		lsr	r3, r3, #8
 1779 0056 9BB2     		uxth	r3, r3
 1780 0058 DAB2     		uxtb	r2, r3
 1781 005a 3B1C     		mov	r3, r7
 1782 005c 0C33     		add	r3, r3, #12
 1783 005e DA71     		strb	r2, [r3, #7]
 370:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1784              		.loc 1 370 0
 1785 0060 3B1C     		mov	r3, r7
 1786 0062 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 39


 1787 0064 9A79     		ldrb	r2, [r3, #6]
 1788 0066 FB1D     		add	r3, r7, #7
 1789 0068 1B78     		ldrb	r3, [r3]
 1790 006a D318     		add	r3, r2, r3
 1791 006c DAB2     		uxtb	r2, r3
 1792 006e 3B1C     		mov	r3, r7
 1793 0070 0C33     		add	r3, r3, #12
 1794 0072 DB79     		ldrb	r3, [r3, #7]
 1795 0074 D318     		add	r3, r2, r3
 1796 0076 DBB2     		uxtb	r3, r3
 1797 0078 2833     		add	r3, r3, #40
 1798 007a DBB2     		uxtb	r3, r3
 1799 007c DB43     		mvn	r3, r3
 1800 007e DAB2     		uxtb	r2, r3
 1801 0080 3B1C     		mov	r3, r7
 1802 0082 0C33     		add	r3, r3, #12
 1803 0084 1A72     		strb	r2, [r3, #8]
 371:.\main.c      ****     
 372:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1804              		.loc 1 372 0
 1805 0086 3B1C     		mov	r3, r7
 1806 0088 0C33     		add	r3, r3, #12
 1807 008a 181C     		mov	r0, r3
 1808 008c 0921     		mov	r1, #9
 1809 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 373:.\main.c      ****     
 374:.\main.c      **** }
 1810              		.loc 1 374 0
 1811 0092 BD46     		mov	sp, r7
 1812 0094 06B0     		add	sp, sp, #24
 1813              		@ sp needed
 1814 0096 80BD     		pop	{r7, pc}
 1815              		.cfi_endproc
 1816              	.LFE47:
 1817              		.size	ServoSpeed, .-ServoSpeed
 1818              		.comm	wristTilt_state,1,1
 1819              		.section	.text.wristTilt,"ax",%progbits
 1820              		.align	2
 1821              		.global	wristTilt
 1822              		.code	16
 1823              		.thumb_func
 1824              		.type	wristTilt, %function
 1825              	wristTilt:
 1826              	.LFB48:
 375:.\main.c      **** 
 376:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 377:.\main.c      **** //control the tilting motion of the wrist
 378:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 379:.\main.c      **** {
 1827              		.loc 1 379 0
 1828              		.cfi_startproc
 1829 0000 90B5     		push	{r4, r7, lr}
 1830              		.cfi_def_cfa_offset 12
 1831              		.cfi_offset 4, -12
 1832              		.cfi_offset 7, -8
 1833              		.cfi_offset 14, -4
 1834 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 40


 1835              		.cfi_def_cfa_offset 32
 1836 0004 00AF     		add	r7, sp, #0
 1837              		.cfi_def_cfa_register 7
 1838 0006 021C     		mov	r2, r0
 1839 0008 3960     		str	r1, [r7]
 1840 000a FB1D     		add	r3, r7, #7
 1841 000c 1A70     		strb	r2, [r3]
 380:.\main.c      ****     // Overview
 381:.\main.c      ****     //take instruction from data_array
 382:.\main.c      ****     //smooth input
 383:.\main.c      ****     //actuate the tilting using UART
 384:.\main.c      ****     //get feedback
 385:.\main.c      **** 
 386:.\main.c      ****     //-------------------------- 
 387:.\main.c      ****     // Dynamixel Servo specific
 388:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 389:.\main.c      ****     // TODO: Set the desired position
 390:.\main.c      **** 
 391:.\main.c      ****     //--------------------------
 392:.\main.c      ****     // State machine
 393:.\main.c      ****     
 394:.\main.c      ****     uint8 i;
 395:.\main.c      ****     uint16 avg;
 396:.\main.c      ****     uint16 command;
 397:.\main.c      ****     
 398:.\main.c      ****     switch(wristTilt_state){ //actions
 1842              		.loc 1 398 0
 1843 000e 524B     		ldr	r3, .L107
 1844 0010 1B78     		ldrb	r3, [r3]
 1845 0012 012B     		cmp	r3, #1
 1846 0014 03D0     		beq	.L83
 1847 0016 6BDD     		ble	.L105
 1848 0018 022B     		cmp	r3, #2
 1849 001a 22D0     		beq	.L86
 399:.\main.c      ****         case tilt_start:
 400:.\main.c      ****             break;
 401:.\main.c      **** 
 402:.\main.c      ****         case tilt_init:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 404:.\main.c      ****             {
 405:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 406:.\main.c      ****             }
 407:.\main.c      ****             WT_arr_cspot = 0;
 408:.\main.c      ****             
 409:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 410:.\main.c      ****             break;
 411:.\main.c      **** 
 412:.\main.c      ****         case tilt_control:
 413:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 414:.\main.c      ****             
 415:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 416:.\main.c      ****             
 417:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 418:.\main.c      ****             {
 419:.\main.c      ****                 WT_arr_cspot++;
 420:.\main.c      ****             }
 421:.\main.c      ****             else
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 41


 422:.\main.c      ****             {
 423:.\main.c      ****                 WT_arr_cspot = 0;
 424:.\main.c      ****             }
 425:.\main.c      ****             
 426:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 427:.\main.c      ****             
 428:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 429:.\main.c      ****             
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 431:.\main.c      ****             {
 432:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 433:.\main.c      ****             }
 434:.\main.c      ****             else
 435:.\main.c      ****             {
 436:.\main.c      ****                 //throw error
 437:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 438:.\main.c      ****             }
 439:.\main.c      ****             WT_FLAG = 0;
 440:.\main.c      ****             break;
 441:.\main.c      ****             
 442:.\main.c      ****         case tilt_wait:
 443:.\main.c      ****             break;
 1850              		.loc 1 443 0
 1851 001c 69E0     		b	.L82
 1852              	.L83:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1853              		.loc 1 403 0
 1854 001e 3B1C     		mov	r3, r7
 1855 0020 0F33     		add	r3, r3, #15
 1856 0022 0022     		mov	r2, #0
 1857 0024 1A70     		strb	r2, [r3]
 1858 0026 0EE0     		b	.L88
 1859              	.L89:
 405:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1860              		.loc 1 405 0 discriminator 2
 1861 0028 3B1C     		mov	r3, r7
 1862 002a 0F33     		add	r3, r3, #15
 1863 002c 1B78     		ldrb	r3, [r3]
 1864 002e 5B00     		lsl	r3, r3, #1
 1865 0030 3A68     		ldr	r2, [r7]
 1866 0032 D318     		add	r3, r2, r3
 1867 0034 494A     		ldr	r2, .L107+4
 1868 0036 1A80     		strh	r2, [r3]
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1869              		.loc 1 403 0 discriminator 2
 1870 0038 3B1C     		mov	r3, r7
 1871 003a 0F33     		add	r3, r3, #15
 1872 003c 1A78     		ldrb	r2, [r3]
 1873 003e 3B1C     		mov	r3, r7
 1874 0040 0F33     		add	r3, r3, #15
 1875 0042 0132     		add	r2, r2, #1
 1876 0044 1A70     		strb	r2, [r3]
 1877              	.L88:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1878              		.loc 1 403 0 is_stmt 0 discriminator 1
 1879 0046 3B1C     		mov	r3, r7
 1880 0048 0F33     		add	r3, r3, #15
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 42


 1881 004a 1B78     		ldrb	r3, [r3]
 1882 004c 132B     		cmp	r3, #19
 1883 004e EBD9     		bls	.L89
 407:.\main.c      ****             WT_arr_cspot = 0;
 1884              		.loc 1 407 0 is_stmt 1
 1885 0050 FB1D     		add	r3, r7, #7
 1886 0052 0022     		mov	r2, #0
 1887 0054 1A70     		strb	r2, [r3]
 409:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1888              		.loc 1 409 0
 1889 0056 414B     		ldr	r3, .L107+4
 1890 0058 0220     		mov	r0, #2
 1891 005a 191C     		mov	r1, r3
 1892 005c FFF7FEFF 		bl	ServoGoalPosition
 410:.\main.c      ****             break;
 1893              		.loc 1 410 0
 1894 0060 47E0     		b	.L82
 1895              	.L86:
 413:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1896              		.loc 1 413 0
 1897 0062 3C1C     		mov	r4, r7
 1898 0064 0C34     		add	r4, r4, #12
 1899 0066 3E4B     		ldr	r3, .L107+8
 1900 0068 181C     		mov	r0, r3
 1901 006a 1021     		mov	r1, #16
 1902 006c 1122     		mov	r2, #17
 1903 006e FFF7FEFF 		bl	make_command
 1904 0072 031C     		mov	r3, r0
 1905 0074 2380     		strh	r3, [r4]
 415:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1906              		.loc 1 415 0
 1907 0076 FB1D     		add	r3, r7, #7
 1908 0078 1B78     		ldrb	r3, [r3]
 1909 007a 5B00     		lsl	r3, r3, #1
 1910 007c 3A68     		ldr	r2, [r7]
 1911 007e D318     		add	r3, r2, r3
 1912 0080 3A1C     		mov	r2, r7
 1913 0082 0C32     		add	r2, r2, #12
 1914 0084 1288     		ldrh	r2, [r2]
 1915 0086 1A80     		strh	r2, [r3]
 417:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1916              		.loc 1 417 0
 1917 0088 FB1D     		add	r3, r7, #7
 1918 008a 1B78     		ldrb	r3, [r3]
 1919 008c 122B     		cmp	r3, #18
 1920 008e 05D8     		bhi	.L90
 419:.\main.c      ****                 WT_arr_cspot++;
 1921              		.loc 1 419 0
 1922 0090 FB1D     		add	r3, r7, #7
 1923 0092 1A78     		ldrb	r2, [r3]
 1924 0094 FB1D     		add	r3, r7, #7
 1925 0096 0132     		add	r2, r2, #1
 1926 0098 1A70     		strb	r2, [r3]
 1927 009a 02E0     		b	.L91
 1928              	.L90:
 423:.\main.c      ****                 WT_arr_cspot = 0;
 1929              		.loc 1 423 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 43


 1930 009c FB1D     		add	r3, r7, #7
 1931 009e 0022     		mov	r2, #0
 1932 00a0 1A70     		strb	r2, [r3]
 1933              	.L91:
 428:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1934              		.loc 1 428 0
 1935 00a2 3C1C     		mov	r4, r7
 1936 00a4 0A34     		add	r4, r4, #10
 1937 00a6 3B68     		ldr	r3, [r7]
 1938 00a8 181C     		mov	r0, r3
 1939 00aa 1421     		mov	r1, #20
 1940 00ac FFF7FEFF 		bl	average
 1941 00b0 031C     		mov	r3, r0
 1942 00b2 2380     		strh	r3, [r4]
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1943              		.loc 1 430 0
 1944 00b4 3B1C     		mov	r3, r7
 1945 00b6 0A33     		add	r3, r3, #10
 1946 00b8 1A88     		ldrh	r2, [r3]
 1947 00ba FA23     		mov	r3, #250
 1948 00bc DB00     		lsl	r3, r3, #3
 1949 00be 9A42     		cmp	r2, r3
 1950 00c0 0DD8     		bhi	.L92
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1951              		.loc 1 430 0 is_stmt 0 discriminator 1
 1952 00c2 3B1C     		mov	r3, r7
 1953 00c4 0A33     		add	r3, r3, #10
 1954 00c6 1A88     		ldrh	r2, [r3]
 1955 00c8 264B     		ldr	r3, .L107+12
 1956 00ca 9A42     		cmp	r2, r3
 1957 00cc 07D9     		bls	.L92
 432:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1958              		.loc 1 432 0 is_stmt 1
 1959 00ce 3B1C     		mov	r3, r7
 1960 00d0 0A33     		add	r3, r3, #10
 1961 00d2 1B88     		ldrh	r3, [r3]
 1962 00d4 0220     		mov	r0, #2
 1963 00d6 191C     		mov	r1, r3
 1964 00d8 FFF7FEFF 		bl	ServoGoalPosition
 1965 00dc 04E0     		b	.L93
 1966              	.L92:
 437:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1967              		.loc 1 437 0
 1968 00de 1F4B     		ldr	r3, .L107+4
 1969 00e0 0220     		mov	r0, #2
 1970 00e2 191C     		mov	r1, r3
 1971 00e4 FFF7FEFF 		bl	ServoGoalPosition
 1972              	.L93:
 439:.\main.c      ****             WT_FLAG = 0;
 1973              		.loc 1 439 0
 1974 00e8 1F4B     		ldr	r3, .L107+16
 1975 00ea 0022     		mov	r2, #0
 1976 00ec 1A70     		strb	r2, [r3]
 440:.\main.c      ****             break;
 1977              		.loc 1 440 0
 1978 00ee 00E0     		b	.L82
 1979              	.L105:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 44


 400:.\main.c      ****             break;
 1980              		.loc 1 400 0
 1981 00f0 C046     		mov	r8, r8
 1982              	.L82:
 444:.\main.c      ****     }
 445:.\main.c      ****     
 446:.\main.c      ****     switch(wristTilt_state){ //transitions
 1983              		.loc 1 446 0
 1984 00f2 194B     		ldr	r3, .L107
 1985 00f4 1B78     		ldrb	r3, [r3]
 1986 00f6 012B     		cmp	r3, #1
 1987 00f8 0CD0     		beq	.L95
 1988 00fa 02DC     		bgt	.L96
 1989 00fc 002B     		cmp	r3, #0
 1990 00fe 05D0     		beq	.L97
 1991 0100 24E0     		b	.L94
 1992              	.L96:
 1993 0102 022B     		cmp	r3, #2
 1994 0104 0AD0     		beq	.L98
 1995 0106 032B     		cmp	r3, #3
 1996 0108 14D0     		beq	.L99
 1997 010a 1FE0     		b	.L94
 1998              	.L97:
 447:.\main.c      ****         case tilt_start:
 448:.\main.c      ****             wristTilt_state = tilt_init;
 1999              		.loc 1 448 0
 2000 010c 124B     		ldr	r3, .L107
 2001 010e 0122     		mov	r2, #1
 2002 0110 1A70     		strb	r2, [r3]
 449:.\main.c      ****             break;
 2003              		.loc 1 449 0
 2004 0112 1BE0     		b	.L94
 2005              	.L95:
 450:.\main.c      ****         
 451:.\main.c      ****         case tilt_init:
 452:.\main.c      ****             wristTilt_state = tilt_wait;
 2006              		.loc 1 452 0
 2007 0114 104B     		ldr	r3, .L107
 2008 0116 0322     		mov	r2, #3
 2009 0118 1A70     		strb	r2, [r3]
 453:.\main.c      ****             break;
 2010              		.loc 1 453 0
 2011 011a 17E0     		b	.L94
 2012              	.L98:
 454:.\main.c      ****         
 455:.\main.c      ****         case tilt_control:
 456:.\main.c      ****             if(WT_FLAG)
 2013              		.loc 1 456 0
 2014 011c 124B     		ldr	r3, .L107+16
 2015 011e 1B78     		ldrb	r3, [r3]
 2016 0120 002B     		cmp	r3, #0
 2017 0122 03D0     		beq	.L100
 457:.\main.c      ****             {
 458:.\main.c      ****                 wristTilt_state = tilt_control;
 2018              		.loc 1 458 0
 2019 0124 0C4B     		ldr	r3, .L107
 2020 0126 0222     		mov	r2, #2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 45


 2021 0128 1A70     		strb	r2, [r3]
 459:.\main.c      ****             }
 460:.\main.c      ****             else
 461:.\main.c      ****             {
 462:.\main.c      ****                 wristTilt_state = tilt_wait;
 463:.\main.c      ****             }
 464:.\main.c      ****             break;
 2022              		.loc 1 464 0
 2023 012a 0FE0     		b	.L94
 2024              	.L100:
 462:.\main.c      ****                 wristTilt_state = tilt_wait;
 2025              		.loc 1 462 0
 2026 012c 0A4B     		ldr	r3, .L107
 2027 012e 0322     		mov	r2, #3
 2028 0130 1A70     		strb	r2, [r3]
 2029              		.loc 1 464 0
 2030 0132 0BE0     		b	.L94
 2031              	.L99:
 465:.\main.c      ****         
 466:.\main.c      ****         case tilt_wait:
 467:.\main.c      ****             if(WT_FLAG)
 2032              		.loc 1 467 0
 2033 0134 0C4B     		ldr	r3, .L107+16
 2034 0136 1B78     		ldrb	r3, [r3]
 2035 0138 002B     		cmp	r3, #0
 2036 013a 03D0     		beq	.L102
 468:.\main.c      ****             {
 469:.\main.c      ****                 wristTilt_state = tilt_control;
 2037              		.loc 1 469 0
 2038 013c 064B     		ldr	r3, .L107
 2039 013e 0222     		mov	r2, #2
 2040 0140 1A70     		strb	r2, [r3]
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 wristTilt_state = tilt_wait; 
 474:.\main.c      ****             }
 475:.\main.c      ****             break;
 2041              		.loc 1 475 0
 2042 0142 02E0     		b	.L106
 2043              	.L102:
 473:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2044              		.loc 1 473 0
 2045 0144 044B     		ldr	r3, .L107
 2046 0146 0322     		mov	r2, #3
 2047 0148 1A70     		strb	r2, [r3]
 2048              	.L106:
 2049              		.loc 1 475 0
 2050 014a C046     		mov	r8, r8
 2051              	.L94:
 476:.\main.c      ****     }  
 477:.\main.c      ****     return WT_arr_cspot;
 2052              		.loc 1 477 0
 2053 014c FB1D     		add	r3, r7, #7
 2054 014e 1B78     		ldrb	r3, [r3]
 478:.\main.c      **** }
 2055              		.loc 1 478 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 46


 2056 0150 181C     		mov	r0, r3
 2057 0152 BD46     		mov	sp, r7
 2058 0154 05B0     		add	sp, sp, #20
 2059              		@ sp needed
 2060 0156 90BD     		pop	{r4, r7, pc}
 2061              	.L108:
 2062              		.align	2
 2063              	.L107:
 2064 0158 00000000 		.word	wristTilt_state
 2065 015c DC050000 		.word	1500
 2066 0160 00000000 		.word	data_array
 2067 0164 E7030000 		.word	999
 2068 0168 00000000 		.word	WT_FLAG
 2069              		.cfi_endproc
 2070              	.LFE48:
 2071              		.size	wristTilt, .-wristTilt
 2072              		.comm	wristRotate_state,1,1
 2073              		.section	.text.wristRotate,"ax",%progbits
 2074              		.align	2
 2075              		.global	wristRotate
 2076              		.code	16
 2077              		.thumb_func
 2078              		.type	wristRotate, %function
 2079              	wristRotate:
 2080              	.LFB49:
 479:.\main.c      **** 
 480:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 481:.\main.c      **** //control the rotating motion of the wrist
 482:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 483:.\main.c      **** {
 2081              		.loc 1 483 0
 2082              		.cfi_startproc
 2083 0000 90B5     		push	{r4, r7, lr}
 2084              		.cfi_def_cfa_offset 12
 2085              		.cfi_offset 4, -12
 2086              		.cfi_offset 7, -8
 2087              		.cfi_offset 14, -4
 2088 0002 85B0     		sub	sp, sp, #20
 2089              		.cfi_def_cfa_offset 32
 2090 0004 00AF     		add	r7, sp, #0
 2091              		.cfi_def_cfa_register 7
 2092 0006 021C     		mov	r2, r0
 2093 0008 3960     		str	r1, [r7]
 2094 000a FB1D     		add	r3, r7, #7
 2095 000c 1A70     		strb	r2, [r3]
 484:.\main.c      ****     //Overview
 485:.\main.c      ****     //take instruction from data_array
 486:.\main.c      ****     //smooth input
 487:.\main.c      ****     //actuate the tilting using UART
 488:.\main.c      ****     //get feedback
 489:.\main.c      **** 
 490:.\main.c      ****     //-------------------------- 
 491:.\main.c      ****     // Dynamixel Servo specific
 492:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 493:.\main.c      ****     // TODO: Set the desired position
 494:.\main.c      **** 
 495:.\main.c      ****     //--------------------------
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 47


 496:.\main.c      ****     // State machine
 497:.\main.c      ****     
 498:.\main.c      ****     uint8 i;
 499:.\main.c      ****     uint16 avg;
 500:.\main.c      ****     uint16 command;
 501:.\main.c      ****     
 502:.\main.c      ****     switch(wristRotate_state){ //actions
 2096              		.loc 1 502 0
 2097 000e 524B     		ldr	r3, .L135
 2098 0010 1B78     		ldrb	r3, [r3]
 2099 0012 012B     		cmp	r3, #1
 2100 0014 03D0     		beq	.L111
 2101 0016 6BDD     		ble	.L133
 2102 0018 022B     		cmp	r3, #2
 2103 001a 22D0     		beq	.L114
 503:.\main.c      ****         case rotate_start:
 504:.\main.c      ****             break;
 505:.\main.c      **** 
 506:.\main.c      ****         case rotate_init:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 508:.\main.c      ****             {
 509:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 510:.\main.c      ****             }
 511:.\main.c      ****             WR_arr_cspot = 0;
 512:.\main.c      ****             
 513:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 514:.\main.c      ****             break;
 515:.\main.c      **** 
 516:.\main.c      ****         case rotate_control:
 517:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 518:.\main.c      ****             
 519:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 520:.\main.c      ****             
 521:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 522:.\main.c      ****             {
 523:.\main.c      ****                 WR_arr_cspot++;
 524:.\main.c      ****             }
 525:.\main.c      ****             else
 526:.\main.c      ****             {
 527:.\main.c      ****                 WR_arr_cspot = 0;
 528:.\main.c      ****             }
 529:.\main.c      ****             
 530:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 531:.\main.c      ****             
 532:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 533:.\main.c      ****             
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 535:.\main.c      ****             {
 536:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 537:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 538:.\main.c      ****             }
 539:.\main.c      ****             else
 540:.\main.c      ****             {
 541:.\main.c      ****                 //throw error
 542:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 543:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 544:.\main.c      ****             }
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 48


 545:.\main.c      ****             WR_FLAG = 0;
 546:.\main.c      ****             break;
 547:.\main.c      ****             
 548:.\main.c      ****         case rotate_wait:
 549:.\main.c      ****             break;
 2104              		.loc 1 549 0
 2105 001c 69E0     		b	.L110
 2106              	.L111:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2107              		.loc 1 507 0
 2108 001e 3B1C     		mov	r3, r7
 2109 0020 0F33     		add	r3, r3, #15
 2110 0022 0022     		mov	r2, #0
 2111 0024 1A70     		strb	r2, [r3]
 2112 0026 0EE0     		b	.L116
 2113              	.L117:
 509:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2114              		.loc 1 509 0 discriminator 2
 2115 0028 3B1C     		mov	r3, r7
 2116 002a 0F33     		add	r3, r3, #15
 2117 002c 1B78     		ldrb	r3, [r3]
 2118 002e 5B00     		lsl	r3, r3, #1
 2119 0030 3A68     		ldr	r2, [r7]
 2120 0032 D318     		add	r3, r2, r3
 2121 0034 494A     		ldr	r2, .L135+4
 2122 0036 1A80     		strh	r2, [r3]
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2123              		.loc 1 507 0 discriminator 2
 2124 0038 3B1C     		mov	r3, r7
 2125 003a 0F33     		add	r3, r3, #15
 2126 003c 1A78     		ldrb	r2, [r3]
 2127 003e 3B1C     		mov	r3, r7
 2128 0040 0F33     		add	r3, r3, #15
 2129 0042 0132     		add	r2, r2, #1
 2130 0044 1A70     		strb	r2, [r3]
 2131              	.L116:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2132              		.loc 1 507 0 is_stmt 0 discriminator 1
 2133 0046 3B1C     		mov	r3, r7
 2134 0048 0F33     		add	r3, r3, #15
 2135 004a 1B78     		ldrb	r3, [r3]
 2136 004c 132B     		cmp	r3, #19
 2137 004e EBD9     		bls	.L117
 511:.\main.c      ****             WR_arr_cspot = 0;
 2138              		.loc 1 511 0 is_stmt 1
 2139 0050 FB1D     		add	r3, r7, #7
 2140 0052 0022     		mov	r2, #0
 2141 0054 1A70     		strb	r2, [r3]
 513:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2142              		.loc 1 513 0
 2143 0056 414B     		ldr	r3, .L135+4
 2144 0058 0120     		mov	r0, #1
 2145 005a 191C     		mov	r1, r3
 2146 005c FFF7FEFF 		bl	ServoGoalPosition
 514:.\main.c      ****             break;
 2147              		.loc 1 514 0
 2148 0060 47E0     		b	.L110
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 49


 2149              	.L114:
 517:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2150              		.loc 1 517 0
 2151 0062 3C1C     		mov	r4, r7
 2152 0064 0C34     		add	r4, r4, #12
 2153 0066 3E4B     		ldr	r3, .L135+8
 2154 0068 181C     		mov	r0, r3
 2155 006a 1221     		mov	r1, #18
 2156 006c 1322     		mov	r2, #19
 2157 006e FFF7FEFF 		bl	make_command
 2158 0072 031C     		mov	r3, r0
 2159 0074 2380     		strh	r3, [r4]
 519:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2160              		.loc 1 519 0
 2161 0076 FB1D     		add	r3, r7, #7
 2162 0078 1B78     		ldrb	r3, [r3]
 2163 007a 5B00     		lsl	r3, r3, #1
 2164 007c 3A68     		ldr	r2, [r7]
 2165 007e D318     		add	r3, r2, r3
 2166 0080 3A1C     		mov	r2, r7
 2167 0082 0C32     		add	r2, r2, #12
 2168 0084 1288     		ldrh	r2, [r2]
 2169 0086 1A80     		strh	r2, [r3]
 521:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2170              		.loc 1 521 0
 2171 0088 FB1D     		add	r3, r7, #7
 2172 008a 1B78     		ldrb	r3, [r3]
 2173 008c 122B     		cmp	r3, #18
 2174 008e 05D8     		bhi	.L118
 523:.\main.c      ****                 WR_arr_cspot++;
 2175              		.loc 1 523 0
 2176 0090 FB1D     		add	r3, r7, #7
 2177 0092 1A78     		ldrb	r2, [r3]
 2178 0094 FB1D     		add	r3, r7, #7
 2179 0096 0132     		add	r2, r2, #1
 2180 0098 1A70     		strb	r2, [r3]
 2181 009a 02E0     		b	.L119
 2182              	.L118:
 527:.\main.c      ****                 WR_arr_cspot = 0;
 2183              		.loc 1 527 0
 2184 009c FB1D     		add	r3, r7, #7
 2185 009e 0022     		mov	r2, #0
 2186 00a0 1A70     		strb	r2, [r3]
 2187              	.L119:
 532:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2188              		.loc 1 532 0
 2189 00a2 3C1C     		mov	r4, r7
 2190 00a4 0A34     		add	r4, r4, #10
 2191 00a6 3B68     		ldr	r3, [r7]
 2192 00a8 181C     		mov	r0, r3
 2193 00aa 1421     		mov	r1, #20
 2194 00ac FFF7FEFF 		bl	average
 2195 00b0 031C     		mov	r3, r0
 2196 00b2 2380     		strh	r3, [r4]
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2197              		.loc 1 534 0
 2198 00b4 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 50


 2199 00b6 0A33     		add	r3, r3, #10
 2200 00b8 1A88     		ldrh	r2, [r3]
 2201 00ba FA23     		mov	r3, #250
 2202 00bc DB00     		lsl	r3, r3, #3
 2203 00be 9A42     		cmp	r2, r3
 2204 00c0 0DD8     		bhi	.L120
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2205              		.loc 1 534 0 is_stmt 0 discriminator 1
 2206 00c2 3B1C     		mov	r3, r7
 2207 00c4 0A33     		add	r3, r3, #10
 2208 00c6 1A88     		ldrh	r2, [r3]
 2209 00c8 264B     		ldr	r3, .L135+12
 2210 00ca 9A42     		cmp	r2, r3
 2211 00cc 07D9     		bls	.L120
 537:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2212              		.loc 1 537 0 is_stmt 1
 2213 00ce 3B1C     		mov	r3, r7
 2214 00d0 0A33     		add	r3, r3, #10
 2215 00d2 1B88     		ldrh	r3, [r3]
 2216 00d4 0120     		mov	r0, #1
 2217 00d6 191C     		mov	r1, r3
 2218 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2219 00dc 04E0     		b	.L121
 2220              	.L120:
 543:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2221              		.loc 1 543 0
 2222 00de 1F4B     		ldr	r3, .L135+4
 2223 00e0 0120     		mov	r0, #1
 2224 00e2 191C     		mov	r1, r3
 2225 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2226              	.L121:
 545:.\main.c      ****             WR_FLAG = 0;
 2227              		.loc 1 545 0
 2228 00e8 1F4B     		ldr	r3, .L135+16
 2229 00ea 0022     		mov	r2, #0
 2230 00ec 1A70     		strb	r2, [r3]
 546:.\main.c      ****             break;
 2231              		.loc 1 546 0
 2232 00ee 00E0     		b	.L110
 2233              	.L133:
 504:.\main.c      ****             break;
 2234              		.loc 1 504 0
 2235 00f0 C046     		mov	r8, r8
 2236              	.L110:
 550:.\main.c      ****     }
 551:.\main.c      ****     
 552:.\main.c      ****     switch(wristRotate_state){ //transitions
 2237              		.loc 1 552 0
 2238 00f2 194B     		ldr	r3, .L135
 2239 00f4 1B78     		ldrb	r3, [r3]
 2240 00f6 012B     		cmp	r3, #1
 2241 00f8 0CD0     		beq	.L123
 2242 00fa 02DC     		bgt	.L124
 2243 00fc 002B     		cmp	r3, #0
 2244 00fe 05D0     		beq	.L125
 2245 0100 24E0     		b	.L122
 2246              	.L124:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 51


 2247 0102 022B     		cmp	r3, #2
 2248 0104 0AD0     		beq	.L126
 2249 0106 032B     		cmp	r3, #3
 2250 0108 14D0     		beq	.L127
 2251 010a 1FE0     		b	.L122
 2252              	.L125:
 553:.\main.c      ****         case rotate_start:
 554:.\main.c      ****             wristRotate_state = rotate_init;
 2253              		.loc 1 554 0
 2254 010c 124B     		ldr	r3, .L135
 2255 010e 0122     		mov	r2, #1
 2256 0110 1A70     		strb	r2, [r3]
 555:.\main.c      ****             break;
 2257              		.loc 1 555 0
 2258 0112 1BE0     		b	.L122
 2259              	.L123:
 556:.\main.c      ****         
 557:.\main.c      ****         case rotate_init:
 558:.\main.c      ****             wristRotate_state = rotate_wait;
 2260              		.loc 1 558 0
 2261 0114 104B     		ldr	r3, .L135
 2262 0116 0322     		mov	r2, #3
 2263 0118 1A70     		strb	r2, [r3]
 559:.\main.c      ****             break;
 2264              		.loc 1 559 0
 2265 011a 17E0     		b	.L122
 2266              	.L126:
 560:.\main.c      ****         
 561:.\main.c      ****         case rotate_control:
 562:.\main.c      ****             if(WR_FLAG)
 2267              		.loc 1 562 0
 2268 011c 124B     		ldr	r3, .L135+16
 2269 011e 1B78     		ldrb	r3, [r3]
 2270 0120 002B     		cmp	r3, #0
 2271 0122 03D0     		beq	.L128
 563:.\main.c      ****             {
 564:.\main.c      ****                 wristRotate_state = rotate_control;
 2272              		.loc 1 564 0
 2273 0124 0C4B     		ldr	r3, .L135
 2274 0126 0222     		mov	r2, #2
 2275 0128 1A70     		strb	r2, [r3]
 565:.\main.c      ****             }
 566:.\main.c      ****             else
 567:.\main.c      ****             {
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 569:.\main.c      ****             }
 570:.\main.c      ****             break;
 2276              		.loc 1 570 0
 2277 012a 0FE0     		b	.L122
 2278              	.L128:
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 2279              		.loc 1 568 0
 2280 012c 0A4B     		ldr	r3, .L135
 2281 012e 0322     		mov	r2, #3
 2282 0130 1A70     		strb	r2, [r3]
 2283              		.loc 1 570 0
 2284 0132 0BE0     		b	.L122
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 52


 2285              	.L127:
 571:.\main.c      ****         
 572:.\main.c      ****         case rotate_wait:
 573:.\main.c      ****             if(WR_FLAG)
 2286              		.loc 1 573 0
 2287 0134 0C4B     		ldr	r3, .L135+16
 2288 0136 1B78     		ldrb	r3, [r3]
 2289 0138 002B     		cmp	r3, #0
 2290 013a 03D0     		beq	.L130
 574:.\main.c      ****             {
 575:.\main.c      ****                 wristRotate_state = rotate_control;
 2291              		.loc 1 575 0
 2292 013c 064B     		ldr	r3, .L135
 2293 013e 0222     		mov	r2, #2
 2294 0140 1A70     		strb	r2, [r3]
 576:.\main.c      ****             }
 577:.\main.c      ****             else
 578:.\main.c      ****             {
 579:.\main.c      ****                 wristRotate_state = rotate_wait;
 580:.\main.c      ****             }
 581:.\main.c      ****             break;
 2295              		.loc 1 581 0
 2296 0142 02E0     		b	.L134
 2297              	.L130:
 579:.\main.c      ****                 wristRotate_state = rotate_wait;
 2298              		.loc 1 579 0
 2299 0144 044B     		ldr	r3, .L135
 2300 0146 0322     		mov	r2, #3
 2301 0148 1A70     		strb	r2, [r3]
 2302              	.L134:
 2303              		.loc 1 581 0
 2304 014a C046     		mov	r8, r8
 2305              	.L122:
 582:.\main.c      ****     }  
 583:.\main.c      ****     return WR_arr_cspot;
 2306              		.loc 1 583 0
 2307 014c FB1D     		add	r3, r7, #7
 2308 014e 1B78     		ldrb	r3, [r3]
 584:.\main.c      **** }
 2309              		.loc 1 584 0
 2310 0150 181C     		mov	r0, r3
 2311 0152 BD46     		mov	sp, r7
 2312 0154 05B0     		add	sp, sp, #20
 2313              		@ sp needed
 2314 0156 90BD     		pop	{r4, r7, pc}
 2315              	.L136:
 2316              		.align	2
 2317              	.L135:
 2318 0158 00000000 		.word	wristRotate_state
 2319 015c DC050000 		.word	1500
 2320 0160 00000000 		.word	data_array
 2321 0164 E7030000 		.word	999
 2322 0168 00000000 		.word	WR_FLAG
 2323              		.cfi_endproc
 2324              	.LFE49:
 2325              		.size	wristRotate, .-wristRotate
 2326              		.comm	elbow_state,1,1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 53


 2327              		.section	.text.elbow,"ax",%progbits
 2328              		.align	2
 2329              		.global	elbow
 2330              		.code	16
 2331              		.thumb_func
 2332              		.type	elbow, %function
 2333              	elbow:
 2334              	.LFB50:
 585:.\main.c      **** 
 586:.\main.c      **** //control the elbow
 587:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 588:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 589:.\main.c      **** { 
 2335              		.loc 1 589 0
 2336              		.cfi_startproc
 2337 0000 90B5     		push	{r4, r7, lr}
 2338              		.cfi_def_cfa_offset 12
 2339              		.cfi_offset 4, -12
 2340              		.cfi_offset 7, -8
 2341              		.cfi_offset 14, -4
 2342 0002 85B0     		sub	sp, sp, #20
 2343              		.cfi_def_cfa_offset 32
 2344 0004 00AF     		add	r7, sp, #0
 2345              		.cfi_def_cfa_register 7
 2346 0006 021C     		mov	r2, r0
 2347 0008 3960     		str	r1, [r7]
 2348 000a FB1D     		add	r3, r7, #7
 2349 000c 1A70     		strb	r2, [r3]
 590:.\main.c      ****     //take instruction from data_array
 591:.\main.c      ****     //smooth input
 592:.\main.c      ****     //actuate the elbow using PWM
 593:.\main.c      ****     //get feedback
 594:.\main.c      ****     uint8 i;
 595:.\main.c      ****     uint16 avg;
 596:.\main.c      ****     uint16 command;
 597:.\main.c      ****     
 598:.\main.c      ****     //TODO: make sure reading from correct pots
 599:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2350              		.loc 1 599 0
 2351 000e 3C1C     		mov	r4, r7
 2352 0010 0C34     		add	r4, r4, #12
 2353 0012 0120     		mov	r0, #1
 2354 0014 FFF7FEFF 		bl	potFeedback
 2355 0018 031C     		mov	r3, r0
 2356 001a 2380     		strh	r3, [r4]
 600:.\main.c      ****     
 601:.\main.c      ****     switch(elbow_state){ //actions
 2357              		.loc 1 601 0
 2358 001c B24B     		ldr	r3, .L178+16
 2359 001e 1B78     		ldrb	r3, [r3]
 2360 0020 012B     		cmp	r3, #1
 2361 0022 07D0     		beq	.L139
 2362 0024 00DC     		bgt	.LCB2080
 2363 0026 21E1     		b	.L176	@long jump
 2364              	.LCB2080:
 2365 0028 022B     		cmp	r3, #2
 2366 002a 24D0     		beq	.L142
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 54


 2367 002c 032B     		cmp	r3, #3
 2368 002e 00D1     		bne	.LCB2084
 2369 0030 08E1     		b	.L143	@long jump
 2370              	.LCB2084:
 2371 0032 1CE1     		b	.L138
 2372              	.L139:
 602:.\main.c      ****         case elbw_start:
 603:.\main.c      ****             break;
 604:.\main.c      **** 
 605:.\main.c      ****         case elbw_init:
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2373              		.loc 1 606 0
 2374 0034 3B1C     		mov	r3, r7
 2375 0036 0F33     		add	r3, r3, #15
 2376 0038 0022     		mov	r2, #0
 2377 003a 1A70     		strb	r2, [r3]
 2378 003c 0EE0     		b	.L144
 2379              	.L145:
 607:.\main.c      ****             {
 608:.\main.c      ****                 elbow_array[i] = 1500;
 2380              		.loc 1 608 0 discriminator 2
 2381 003e 3B1C     		mov	r3, r7
 2382 0040 0F33     		add	r3, r3, #15
 2383 0042 1B78     		ldrb	r3, [r3]
 2384 0044 5B00     		lsl	r3, r3, #1
 2385 0046 3A68     		ldr	r2, [r7]
 2386 0048 D318     		add	r3, r2, r3
 2387 004a A84A     		ldr	r2, .L178+20
 2388 004c 1A80     		strh	r2, [r3]
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2389              		.loc 1 606 0 discriminator 2
 2390 004e 3B1C     		mov	r3, r7
 2391 0050 0F33     		add	r3, r3, #15
 2392 0052 1A78     		ldrb	r2, [r3]
 2393 0054 3B1C     		mov	r3, r7
 2394 0056 0F33     		add	r3, r3, #15
 2395 0058 0132     		add	r2, r2, #1
 2396 005a 1A70     		strb	r2, [r3]
 2397              	.L144:
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2398              		.loc 1 606 0 is_stmt 0 discriminator 1
 2399 005c 3B1C     		mov	r3, r7
 2400 005e 0F33     		add	r3, r3, #15
 2401 0060 1B78     		ldrb	r3, [r3]
 2402 0062 132B     		cmp	r3, #19
 2403 0064 EBD9     		bls	.L145
 609:.\main.c      ****             }
 610:.\main.c      ****             elbw_arr_cspot = 0;
 2404              		.loc 1 610 0 is_stmt 1
 2405 0066 FB1D     		add	r3, r7, #7
 2406 0068 0022     		mov	r2, #0
 2407 006a 1A70     		strb	r2, [r3]
 611:.\main.c      ****             
 612:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2408              		.loc 1 612 0
 2409 006c 9F4B     		ldr	r3, .L178+20
 2410 006e 181C     		mov	r0, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 55


 2411 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 613:.\main.c      ****             break;
 2412              		.loc 1 613 0
 2413 0074 FBE0     		b	.L138
 2414              	.L142:
 614:.\main.c      **** 
 615:.\main.c      ****         case elbw_execute:
 616:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2415              		.loc 1 616 0
 2416 0076 3C1C     		mov	r4, r7
 2417 0078 0A34     		add	r4, r4, #10
 2418 007a 9D4B     		ldr	r3, .L178+24
 2419 007c 181C     		mov	r0, r3
 2420 007e 0E21     		mov	r1, #14
 2421 0080 0F22     		mov	r2, #15
 2422 0082 FFF7FEFF 		bl	make_command
 2423 0086 031C     		mov	r3, r0
 2424 0088 2380     		strh	r3, [r4]
 617:.\main.c      ****             
 618:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2425              		.loc 1 618 0
 2426 008a FB1D     		add	r3, r7, #7
 2427 008c 1B78     		ldrb	r3, [r3]
 2428 008e 5B00     		lsl	r3, r3, #1
 2429 0090 3A68     		ldr	r2, [r7]
 2430 0092 D318     		add	r3, r2, r3
 2431 0094 3A1C     		mov	r2, r7
 2432 0096 0A32     		add	r2, r2, #10
 2433 0098 1288     		ldrh	r2, [r2]
 2434 009a 1A80     		strh	r2, [r3]
 619:.\main.c      ****             
 620:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2435              		.loc 1 620 0
 2436 009c FB1D     		add	r3, r7, #7
 2437 009e 1B78     		ldrb	r3, [r3]
 2438 00a0 122B     		cmp	r3, #18
 2439 00a2 05D8     		bhi	.L146
 621:.\main.c      ****             {
 622:.\main.c      ****                 elbw_arr_cspot++;
 2440              		.loc 1 622 0
 2441 00a4 FB1D     		add	r3, r7, #7
 2442 00a6 1A78     		ldrb	r2, [r3]
 2443 00a8 FB1D     		add	r3, r7, #7
 2444 00aa 0132     		add	r2, r2, #1
 2445 00ac 1A70     		strb	r2, [r3]
 2446 00ae 02E0     		b	.L147
 2447              	.L146:
 623:.\main.c      ****             }
 624:.\main.c      ****             else
 625:.\main.c      ****             {
 626:.\main.c      ****                 elbw_arr_cspot = 0;
 2448              		.loc 1 626 0
 2449 00b0 FB1D     		add	r3, r7, #7
 2450 00b2 0022     		mov	r2, #0
 2451 00b4 1A70     		strb	r2, [r3]
 2452              	.L147:
 627:.\main.c      ****             }
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 56


 628:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2453              		.loc 1 628 0
 2454 00b6 3C1C     		mov	r4, r7
 2455 00b8 0834     		add	r4, r4, #8
 2456 00ba 3B68     		ldr	r3, [r7]
 2457 00bc 181C     		mov	r0, r3
 2458 00be 1421     		mov	r1, #20
 2459 00c0 FFF7FEFF 		bl	average
 2460 00c4 031C     		mov	r3, r0
 2461 00c6 2380     		strh	r3, [r4]
 629:.\main.c      ****             
 630:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2462              		.loc 1 630 0
 2463 00c8 FFF7FEFF 		bl	stop_elb_dn_Read
 2464 00cc 031C     		mov	r3, r0
 2465 00ce 002B     		cmp	r3, #0
 2466 00d0 05D0     		beq	.L148
 2467              		.loc 1 630 0 is_stmt 0 discriminator 1
 2468 00d2 FFF7FEFF 		bl	stop_elb_up_Read
 2469 00d6 031C     		mov	r3, r0
 2470 00d8 002B     		cmp	r3, #0
 2471 00da 00D0     		beq	.LCB2180
 2472 00dc 6FE0     		b	.L149	@long jump
 2473              	.LCB2180:
 2474              	.L148:
 631:.\main.c      ****             {
 632:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )
 2475              		.loc 1 632 0 is_stmt 1
 2476 00de 3B1C     		mov	r3, r7
 2477 00e0 0C33     		add	r3, r3, #12
 2478 00e2 1A88     		ldrh	r2, [r3]
 2479 00e4 834B     		ldr	r3, .L178+28
 2480 00e6 1B68     		ldr	r3, [r3]
 2481 00e8 9A42     		cmp	r2, r3
 2482 00ea 23D8     		bhi	.L150
 633:.\main.c      ****                 {
 634:.\main.c      ****                     if (avg < 1500)
 2483              		.loc 1 634 0
 2484 00ec 3B1C     		mov	r3, r7
 2485 00ee 0833     		add	r3, r3, #8
 2486 00f0 1A88     		ldrh	r2, [r3]
 2487 00f2 814B     		ldr	r3, .L178+32
 2488 00f4 9A42     		cmp	r2, r3
 2489 00f6 04D8     		bhi	.L151
 635:.\main.c      ****                     {
 636:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2490              		.loc 1 636 0
 2491 00f8 7C4B     		ldr	r3, .L178+20
 2492 00fa 181C     		mov	r0, r3
 2493 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2494 0100 5CE0     		b	.L154
 2495              	.L151:
 637:.\main.c      ****                     }
 638:.\main.c      ****                     else
 639:.\main.c      ****                     {
 640:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2496              		.loc 1 640 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 57


 2497 0102 3B1C     		mov	r3, r7
 2498 0104 0833     		add	r3, r3, #8
 2499 0106 1A88     		ldrh	r2, [r3]
 2500 0108 FA23     		mov	r3, #250
 2501 010a DB00     		lsl	r3, r3, #3
 2502 010c 9A42     		cmp	r2, r3
 2503 010e 0CD8     		bhi	.L153
 2504              		.loc 1 640 0 is_stmt 0 discriminator 1
 2505 0110 3B1C     		mov	r3, r7
 2506 0112 0833     		add	r3, r3, #8
 2507 0114 1A88     		ldrh	r2, [r3]
 2508 0116 794B     		ldr	r3, .L178+36
 2509 0118 9A42     		cmp	r2, r3
 2510 011a 06D9     		bls	.L153
 641:.\main.c      ****                         {
 642:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2511              		.loc 1 642 0 is_stmt 1
 2512 011c 3B1C     		mov	r3, r7
 2513 011e 0833     		add	r3, r3, #8
 2514 0120 1B88     		ldrh	r3, [r3]
 2515 0122 181C     		mov	r0, r3
 2516 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2517 0128 48E0     		b	.L154
 2518              	.L153:
 643:.\main.c      ****                         }
 644:.\main.c      ****                         else
 645:.\main.c      ****                         {
 646:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2519              		.loc 1 646 0
 2520 012a 704B     		ldr	r3, .L178+20
 2521 012c 181C     		mov	r0, r3
 2522 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2523 0132 43E0     		b	.L154
 2524              	.L150:
 647:.\main.c      ****                         }
 648:.\main.c      ****                     }
 649:.\main.c      ****                 }
 650:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND)
 2525              		.loc 1 650 0
 2526 0134 3B1C     		mov	r3, r7
 2527 0136 0C33     		add	r3, r3, #12
 2528 0138 1A88     		ldrh	r2, [r3]
 2529 013a 714B     		ldr	r3, .L178+40
 2530 013c 1B68     		ldr	r3, [r3]
 2531 013e 9A42     		cmp	r2, r3
 2532 0140 23D3     		bcc	.L155
 651:.\main.c      ****                 {
 652:.\main.c      ****                     if(avg > 1500)
 2533              		.loc 1 652 0
 2534 0142 3B1C     		mov	r3, r7
 2535 0144 0833     		add	r3, r3, #8
 2536 0146 1A88     		ldrh	r2, [r3]
 2537 0148 684B     		ldr	r3, .L178+20
 2538 014a 9A42     		cmp	r2, r3
 2539 014c 04D9     		bls	.L156
 653:.\main.c      ****                     {
 654:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 58


 2540              		.loc 1 654 0
 2541 014e 674B     		ldr	r3, .L178+20
 2542 0150 181C     		mov	r0, r3
 2543 0152 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2544 0156 31E0     		b	.L154
 2545              	.L156:
 655:.\main.c      ****                     }
 656:.\main.c      ****                     else
 657:.\main.c      ****                     {
 658:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2546              		.loc 1 658 0
 2547 0158 3B1C     		mov	r3, r7
 2548 015a 0833     		add	r3, r3, #8
 2549 015c 1A88     		ldrh	r2, [r3]
 2550 015e FA23     		mov	r3, #250
 2551 0160 DB00     		lsl	r3, r3, #3
 2552 0162 9A42     		cmp	r2, r3
 2553 0164 0CD8     		bhi	.L158
 2554              		.loc 1 658 0 is_stmt 0 discriminator 1
 2555 0166 3B1C     		mov	r3, r7
 2556 0168 0833     		add	r3, r3, #8
 2557 016a 1A88     		ldrh	r2, [r3]
 2558 016c 634B     		ldr	r3, .L178+36
 2559 016e 9A42     		cmp	r2, r3
 2560 0170 06D9     		bls	.L158
 659:.\main.c      ****                         {
 660:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2561              		.loc 1 660 0 is_stmt 1
 2562 0172 3B1C     		mov	r3, r7
 2563 0174 0833     		add	r3, r3, #8
 2564 0176 1B88     		ldrh	r3, [r3]
 2565 0178 181C     		mov	r0, r3
 2566 017a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2567 017e 1DE0     		b	.L154
 2568              	.L158:
 661:.\main.c      ****                         }
 662:.\main.c      ****                         else
 663:.\main.c      ****                         {
 664:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2569              		.loc 1 664 0
 2570 0180 5A4B     		ldr	r3, .L178+20
 2571 0182 181C     		mov	r0, r3
 2572 0184 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2573 0188 18E0     		b	.L154
 2574              	.L155:
 665:.\main.c      ****                         }
 666:.\main.c      ****                     }
 667:.\main.c      ****                 }
 668:.\main.c      ****                 else
 669:.\main.c      ****                 {
 670:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2575              		.loc 1 670 0
 2576 018a 3B1C     		mov	r3, r7
 2577 018c 0833     		add	r3, r3, #8
 2578 018e 1A88     		ldrh	r2, [r3]
 2579 0190 FA23     		mov	r3, #250
 2580 0192 DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 59


 2581 0194 9A42     		cmp	r2, r3
 2582 0196 0CD8     		bhi	.L159
 2583              		.loc 1 670 0 is_stmt 0 discriminator 1
 2584 0198 3B1C     		mov	r3, r7
 2585 019a 0833     		add	r3, r3, #8
 2586 019c 1A88     		ldrh	r2, [r3]
 2587 019e 574B     		ldr	r3, .L178+36
 2588 01a0 9A42     		cmp	r2, r3
 2589 01a2 06D9     		bls	.L159
 671:.\main.c      ****                     {
 672:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2590              		.loc 1 672 0 is_stmt 1
 2591 01a4 3B1C     		mov	r3, r7
 2592 01a6 0833     		add	r3, r3, #8
 2593 01a8 1B88     		ldrh	r3, [r3]
 2594 01aa 181C     		mov	r0, r3
 2595 01ac FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2596 01b0 04E0     		b	.L154
 2597              	.L159:
 673:.\main.c      ****                     }
 674:.\main.c      ****                     else
 675:.\main.c      ****                     {
 676:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2598              		.loc 1 676 0
 2599 01b2 4E4B     		ldr	r3, .L178+20
 2600 01b4 181C     		mov	r0, r3
 2601 01b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 632:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )
 2602              		.loc 1 632 0
 2603 01ba 3FE0     		b	.L160
 2604              	.L154:
 2605 01bc 3EE0     		b	.L160
 2606              	.L149:
 677:.\main.c      ****                     }
 678:.\main.c      ****                 }
 679:.\main.c      ****             }
 680:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 681:.\main.c      ****             {
 682:.\main.c      ****                 if(!stop_elb_dn_Read())
 2607              		.loc 1 682 0
 2608 01be FFF7FEFF 		bl	stop_elb_dn_Read
 2609 01c2 031C     		mov	r3, r0
 2610 01c4 002B     		cmp	r3, #0
 2611 01c6 18D1     		bne	.L161
 683:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) * 1.1;
 2612              		.loc 1 683 0
 2613 01c8 0120     		mov	r0, #1
 2614 01ca FFF7FEFF 		bl	potFeedback
 2615 01ce 031C     		mov	r3, r0
 2616 01d0 181C     		mov	r0, r3
 2617 01d2 FFF7FEFF 		bl	__aeabi_i2d
 2618 01d6 031C     		mov	r3, r0
 2619 01d8 0C1C     		mov	r4, r1
 2620 01da 181C     		mov	r0, r3
 2621 01dc 211C     		mov	r1, r4
 2622 01de 3F4B     		ldr	r3, .L178+4
 2623 01e0 3D4A     		ldr	r2, .L178
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 60


 2624 01e2 FFF7FEFF 		bl	__aeabi_dmul
 2625 01e6 031C     		mov	r3, r0
 2626 01e8 0C1C     		mov	r4, r1
 2627 01ea 181C     		mov	r0, r3
 2628 01ec 211C     		mov	r1, r4
 2629 01ee FFF7FEFF 		bl	__aeabi_d2uiz
 2630 01f2 021C     		mov	r2, r0
 2631 01f4 3F4B     		ldr	r3, .L178+28
 2632 01f6 1A60     		str	r2, [r3]
 2633 01f8 20E0     		b	.L160
 2634              	.L161:
 684:.\main.c      ****                 else if(!stop_elb_up_Read())
 2635              		.loc 1 684 0
 2636 01fa FFF7FEFF 		bl	stop_elb_up_Read
 2637 01fe 031C     		mov	r3, r0
 2638 0200 002B     		cmp	r3, #0
 2639 0202 18D1     		bne	.L162
 685:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) * .9;
 2640              		.loc 1 685 0
 2641 0204 0120     		mov	r0, #1
 2642 0206 FFF7FEFF 		bl	potFeedback
 2643 020a 031C     		mov	r3, r0
 2644 020c 181C     		mov	r0, r3
 2645 020e FFF7FEFF 		bl	__aeabi_i2d
 2646 0212 031C     		mov	r3, r0
 2647 0214 0C1C     		mov	r4, r1
 2648 0216 181C     		mov	r0, r3
 2649 0218 211C     		mov	r1, r4
 2650 021a 314A     		ldr	r2, .L178+8
 2651 021c 314B     		ldr	r3, .L178+12
 2652 021e FFF7FEFF 		bl	__aeabi_dmul
 2653 0222 031C     		mov	r3, r0
 2654 0224 0C1C     		mov	r4, r1
 2655 0226 181C     		mov	r0, r3
 2656 0228 211C     		mov	r1, r4
 2657 022a FFF7FEFF 		bl	__aeabi_d2uiz
 2658 022e 021C     		mov	r2, r0
 2659 0230 334B     		ldr	r3, .L178+40
 2660 0232 1A60     		str	r2, [r3]
 2661 0234 02E0     		b	.L160
 2662              	.L162:
 686:.\main.c      ****                 else
 687:.\main.c      ****                     LED_Write(1);
 2663              		.loc 1 687 0
 2664 0236 0120     		mov	r0, #1
 2665 0238 FFF7FEFF 		bl	LED_Write
 2666              	.L160:
 688:.\main.c      ****             }
 689:.\main.c      ****             ELBOW_FLAG = 0;
 2667              		.loc 1 689 0
 2668 023c 314B     		ldr	r3, .L178+44
 2669 023e 0022     		mov	r2, #0
 2670 0240 1A70     		strb	r2, [r3]
 690:.\main.c      ****             break;
 2671              		.loc 1 690 0
 2672 0242 14E0     		b	.L138
 2673              	.L143:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 61


 691:.\main.c      ****             
 692:.\main.c      ****         case elbw_wait:
 693:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2674              		.loc 1 693 0
 2675 0244 3B1C     		mov	r3, r7
 2676 0246 0C33     		add	r3, r3, #12
 2677 0248 1A88     		ldrh	r2, [r3]
 2678 024a 2A4B     		ldr	r3, .L178+28
 2679 024c 1B68     		ldr	r3, [r3]
 2680 024e 9A42     		cmp	r2, r3
 2681 0250 06D9     		bls	.L163
 2682              		.loc 1 693 0 is_stmt 0 discriminator 1
 2683 0252 3B1C     		mov	r3, r7
 2684 0254 0C33     		add	r3, r3, #12
 2685 0256 1A88     		ldrh	r2, [r3]
 2686 0258 294B     		ldr	r3, .L178+40
 2687 025a 1B68     		ldr	r3, [r3]
 2688 025c 9A42     		cmp	r2, r3
 2689 025e 04D3     		bcc	.L164
 2690              	.L163:
 694:.\main.c      ****             {
 695:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2691              		.loc 1 695 0 is_stmt 1
 2692 0260 224B     		ldr	r3, .L178+20
 2693 0262 181C     		mov	r0, r3
 2694 0264 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 696:.\main.c      ****             }
 697:.\main.c      ****             break;
 2695              		.loc 1 697 0
 2696 0268 01E0     		b	.L138
 2697              	.L164:
 2698 026a 00E0     		b	.L138
 2699              	.L176:
 603:.\main.c      ****             break;
 2700              		.loc 1 603 0
 2701 026c C046     		mov	r8, r8
 2702              	.L138:
 698:.\main.c      ****     }
 699:.\main.c      ****     
 700:.\main.c      ****     switch(elbow_state){ //transitions
 2703              		.loc 1 700 0
 2704 026e 1E4B     		ldr	r3, .L178+16
 2705 0270 1B78     		ldrb	r3, [r3]
 2706 0272 012B     		cmp	r3, #1
 2707 0274 0CD0     		beq	.L166
 2708 0276 02DC     		bgt	.L167
 2709 0278 002B     		cmp	r3, #0
 2710 027a 05D0     		beq	.L168
 2711 027c 24E0     		b	.L165
 2712              	.L167:
 2713 027e 022B     		cmp	r3, #2
 2714 0280 0AD0     		beq	.L169
 2715 0282 032B     		cmp	r3, #3
 2716 0284 14D0     		beq	.L170
 2717 0286 1FE0     		b	.L165
 2718              	.L168:
 701:.\main.c      ****         case elbw_start:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 62


 702:.\main.c      ****             elbow_state = elbw_init;
 2719              		.loc 1 702 0
 2720 0288 174B     		ldr	r3, .L178+16
 2721 028a 0122     		mov	r2, #1
 2722 028c 1A70     		strb	r2, [r3]
 703:.\main.c      ****             break;
 2723              		.loc 1 703 0
 2724 028e 1BE0     		b	.L165
 2725              	.L166:
 704:.\main.c      ****         
 705:.\main.c      ****         case elbw_init:
 706:.\main.c      ****             elbow_state = elbw_wait;
 2726              		.loc 1 706 0
 2727 0290 154B     		ldr	r3, .L178+16
 2728 0292 0322     		mov	r2, #3
 2729 0294 1A70     		strb	r2, [r3]
 707:.\main.c      ****             break;
 2730              		.loc 1 707 0
 2731 0296 17E0     		b	.L165
 2732              	.L169:
 708:.\main.c      ****         
 709:.\main.c      ****         case elbw_execute:
 710:.\main.c      ****             if(ELBOW_FLAG)
 2733              		.loc 1 710 0
 2734 0298 1A4B     		ldr	r3, .L178+44
 2735 029a 1B78     		ldrb	r3, [r3]
 2736 029c 002B     		cmp	r3, #0
 2737 029e 03D0     		beq	.L171
 711:.\main.c      ****             {
 712:.\main.c      ****                 elbow_state = elbw_execute;
 2738              		.loc 1 712 0
 2739 02a0 114B     		ldr	r3, .L178+16
 2740 02a2 0222     		mov	r2, #2
 2741 02a4 1A70     		strb	r2, [r3]
 713:.\main.c      ****             }
 714:.\main.c      ****             else
 715:.\main.c      ****             {
 716:.\main.c      ****                 elbow_state = elbw_wait;
 717:.\main.c      ****             }
 718:.\main.c      ****             break;
 2742              		.loc 1 718 0
 2743 02a6 0FE0     		b	.L165
 2744              	.L171:
 716:.\main.c      ****                 elbow_state = elbw_wait;
 2745              		.loc 1 716 0
 2746 02a8 0F4B     		ldr	r3, .L178+16
 2747 02aa 0322     		mov	r2, #3
 2748 02ac 1A70     		strb	r2, [r3]
 2749              		.loc 1 718 0
 2750 02ae 0BE0     		b	.L165
 2751              	.L170:
 719:.\main.c      ****         
 720:.\main.c      ****         case elbw_wait:
 721:.\main.c      ****             if(ELBOW_FLAG)
 2752              		.loc 1 721 0
 2753 02b0 144B     		ldr	r3, .L178+44
 2754 02b2 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 63


 2755 02b4 002B     		cmp	r3, #0
 2756 02b6 03D0     		beq	.L173
 722:.\main.c      ****             {
 723:.\main.c      ****                 elbow_state = elbw_execute;
 2757              		.loc 1 723 0
 2758 02b8 0B4B     		ldr	r3, .L178+16
 2759 02ba 0222     		mov	r2, #2
 2760 02bc 1A70     		strb	r2, [r3]
 724:.\main.c      ****             }
 725:.\main.c      ****             else
 726:.\main.c      ****             {
 727:.\main.c      ****                 elbow_state = elbw_wait; 
 728:.\main.c      ****             }
 729:.\main.c      ****             break;
 2761              		.loc 1 729 0
 2762 02be 02E0     		b	.L177
 2763              	.L173:
 727:.\main.c      ****                 elbow_state = elbw_wait; 
 2764              		.loc 1 727 0
 2765 02c0 094B     		ldr	r3, .L178+16
 2766 02c2 0322     		mov	r2, #3
 2767 02c4 1A70     		strb	r2, [r3]
 2768              	.L177:
 2769              		.loc 1 729 0
 2770 02c6 C046     		mov	r8, r8
 2771              	.L165:
 730:.\main.c      ****     }  
 731:.\main.c      ****     return elbw_arr_cspot;
 2772              		.loc 1 731 0
 2773 02c8 FB1D     		add	r3, r7, #7
 2774 02ca 1B78     		ldrb	r3, [r3]
 732:.\main.c      **** }
 2775              		.loc 1 732 0
 2776 02cc 181C     		mov	r0, r3
 2777 02ce BD46     		mov	sp, r7
 2778 02d0 05B0     		add	sp, sp, #20
 2779              		@ sp needed
 2780 02d2 90BD     		pop	{r4, r7, pc}
 2781              	.L179:
 2782 02d4 C046C046 		.align	3
 2783              	.L178:
 2784 02d8 9A999999 		.word	-1717986918
 2785 02dc 9999F13F 		.word	1072798105
 2786 02e0 CDCCCCCC 		.word	-858993459
 2787 02e4 CCCCEC3F 		.word	1072483532
 2788 02e8 00000000 		.word	elbow_state
 2789 02ec DC050000 		.word	1500
 2790 02f0 00000000 		.word	data_array
 2791 02f4 00000000 		.word	ELBOW_LOWER_BOUND
 2792 02f8 DB050000 		.word	1499
 2793 02fc E7030000 		.word	999
 2794 0300 00000000 		.word	ELBOW_UPPER_BOUND
 2795 0304 00000000 		.word	ELBOW_FLAG
 2796              		.cfi_endproc
 2797              	.LFE50:
 2798              		.size	elbow, .-elbow
 2799              		.comm	shoulder_state,1,1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 64


 2800              		.section	.text.shoulder,"ax",%progbits
 2801              		.align	2
 2802              		.global	shoulder
 2803              		.code	16
 2804              		.thumb_func
 2805              		.type	shoulder, %function
 2806              	shoulder:
 2807              	.LFB51:
 733:.\main.c      **** 
 734:.\main.c      **** //control the shoulder
 735:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 736:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 737:.\main.c      **** { 
 2808              		.loc 1 737 0
 2809              		.cfi_startproc
 2810 0000 90B5     		push	{r4, r7, lr}
 2811              		.cfi_def_cfa_offset 12
 2812              		.cfi_offset 4, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 2815 0002 85B0     		sub	sp, sp, #20
 2816              		.cfi_def_cfa_offset 32
 2817 0004 00AF     		add	r7, sp, #0
 2818              		.cfi_def_cfa_register 7
 2819 0006 021C     		mov	r2, r0
 2820 0008 3960     		str	r1, [r7]
 2821 000a FB1D     		add	r3, r7, #7
 2822 000c 1A70     		strb	r2, [r3]
 738:.\main.c      ****     //take instruction from data_array
 739:.\main.c      ****     //smooth input
 740:.\main.c      ****     //actuate the shoulder using PWM
 741:.\main.c      ****     //get feedback
 742:.\main.c      ****     uint8 i;
 743:.\main.c      ****     uint16 avg;
 744:.\main.c      ****     uint16 command;
 745:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2823              		.loc 1 745 0
 2824 000e 3C1C     		mov	r4, r7
 2825 0010 0C34     		add	r4, r4, #12
 2826 0012 0020     		mov	r0, #0
 2827 0014 FFF7FEFF 		bl	potFeedback
 2828 0018 031C     		mov	r3, r0
 2829 001a 2380     		strh	r3, [r4]
 746:.\main.c      ****     
 747:.\main.c      ****     switch(shoulder_state){ //actions
 2830              		.loc 1 747 0
 2831 001c B24B     		ldr	r3, .L221+16
 2832 001e 1B78     		ldrb	r3, [r3]
 2833 0020 012B     		cmp	r3, #1
 2834 0022 07D0     		beq	.L182
 2835 0024 00DC     		bgt	.LCB2535
 2836 0026 21E1     		b	.L219	@long jump
 2837              	.LCB2535:
 2838 0028 022B     		cmp	r3, #2
 2839 002a 24D0     		beq	.L185
 2840 002c 032B     		cmp	r3, #3
 2841 002e 00D1     		bne	.LCB2539
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 65


 2842 0030 08E1     		b	.L186	@long jump
 2843              	.LCB2539:
 2844 0032 1CE1     		b	.L181
 2845              	.L182:
 748:.\main.c      ****         case shldr_start:
 749:.\main.c      ****             break;
 750:.\main.c      **** 
 751:.\main.c      ****         case shldr_init:
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2846              		.loc 1 752 0
 2847 0034 3B1C     		mov	r3, r7
 2848 0036 0F33     		add	r3, r3, #15
 2849 0038 0022     		mov	r2, #0
 2850 003a 1A70     		strb	r2, [r3]
 2851 003c 0EE0     		b	.L187
 2852              	.L188:
 753:.\main.c      ****             {
 754:.\main.c      ****                 shoulder_array[i] = 1500;
 2853              		.loc 1 754 0 discriminator 2
 2854 003e 3B1C     		mov	r3, r7
 2855 0040 0F33     		add	r3, r3, #15
 2856 0042 1B78     		ldrb	r3, [r3]
 2857 0044 5B00     		lsl	r3, r3, #1
 2858 0046 3A68     		ldr	r2, [r7]
 2859 0048 D318     		add	r3, r2, r3
 2860 004a A84A     		ldr	r2, .L221+20
 2861 004c 1A80     		strh	r2, [r3]
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2862              		.loc 1 752 0 discriminator 2
 2863 004e 3B1C     		mov	r3, r7
 2864 0050 0F33     		add	r3, r3, #15
 2865 0052 1A78     		ldrb	r2, [r3]
 2866 0054 3B1C     		mov	r3, r7
 2867 0056 0F33     		add	r3, r3, #15
 2868 0058 0132     		add	r2, r2, #1
 2869 005a 1A70     		strb	r2, [r3]
 2870              	.L187:
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2871              		.loc 1 752 0 is_stmt 0 discriminator 1
 2872 005c 3B1C     		mov	r3, r7
 2873 005e 0F33     		add	r3, r3, #15
 2874 0060 1B78     		ldrb	r3, [r3]
 2875 0062 132B     		cmp	r3, #19
 2876 0064 EBD9     		bls	.L188
 755:.\main.c      ****             }
 756:.\main.c      ****             shldr_arr_cspot = 0;
 2877              		.loc 1 756 0 is_stmt 1
 2878 0066 FB1D     		add	r3, r7, #7
 2879 0068 0022     		mov	r2, #0
 2880 006a 1A70     		strb	r2, [r3]
 757:.\main.c      ****                         
 758:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2881              		.loc 1 758 0
 2882 006c 9F4B     		ldr	r3, .L221+20
 2883 006e 181C     		mov	r0, r3
 2884 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 759:.\main.c      ****             break;
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 66


 2885              		.loc 1 759 0
 2886 0074 FBE0     		b	.L181
 2887              	.L185:
 760:.\main.c      **** 
 761:.\main.c      ****         case shldr_execute:
 762:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2888              		.loc 1 762 0
 2889 0076 3C1C     		mov	r4, r7
 2890 0078 0A34     		add	r4, r4, #10
 2891 007a 9D4B     		ldr	r3, .L221+24
 2892 007c 181C     		mov	r0, r3
 2893 007e 0C21     		mov	r1, #12
 2894 0080 0D22     		mov	r2, #13
 2895 0082 FFF7FEFF 		bl	make_command
 2896 0086 031C     		mov	r3, r0
 2897 0088 2380     		strh	r3, [r4]
 763:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2898              		.loc 1 763 0
 2899 008a FB1D     		add	r3, r7, #7
 2900 008c 1B78     		ldrb	r3, [r3]
 2901 008e 5B00     		lsl	r3, r3, #1
 2902 0090 3A68     		ldr	r2, [r7]
 2903 0092 D318     		add	r3, r2, r3
 2904 0094 3A1C     		mov	r2, r7
 2905 0096 0A32     		add	r2, r2, #10
 2906 0098 1288     		ldrh	r2, [r2]
 2907 009a 1A80     		strh	r2, [r3]
 764:.\main.c      ****         
 765:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2908              		.loc 1 765 0
 2909 009c FB1D     		add	r3, r7, #7
 2910 009e 1B78     		ldrb	r3, [r3]
 2911 00a0 122B     		cmp	r3, #18
 2912 00a2 05D8     		bhi	.L189
 766:.\main.c      ****             {
 767:.\main.c      ****                 shldr_arr_cspot++;
 2913              		.loc 1 767 0
 2914 00a4 FB1D     		add	r3, r7, #7
 2915 00a6 1A78     		ldrb	r2, [r3]
 2916 00a8 FB1D     		add	r3, r7, #7
 2917 00aa 0132     		add	r2, r2, #1
 2918 00ac 1A70     		strb	r2, [r3]
 2919 00ae 02E0     		b	.L190
 2920              	.L189:
 768:.\main.c      ****             }
 769:.\main.c      ****             else
 770:.\main.c      ****             {
 771:.\main.c      ****                 shldr_arr_cspot = 0;
 2921              		.loc 1 771 0
 2922 00b0 FB1D     		add	r3, r7, #7
 2923 00b2 0022     		mov	r2, #0
 2924 00b4 1A70     		strb	r2, [r3]
 2925              	.L190:
 772:.\main.c      ****             }
 773:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2926              		.loc 1 773 0
 2927 00b6 3C1C     		mov	r4, r7
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 67


 2928 00b8 0834     		add	r4, r4, #8
 2929 00ba 3B68     		ldr	r3, [r7]
 2930 00bc 181C     		mov	r0, r3
 2931 00be 1421     		mov	r1, #20
 2932 00c0 FFF7FEFF 		bl	average
 2933 00c4 031C     		mov	r3, r0
 2934 00c6 2380     		strh	r3, [r4]
 774:.\main.c      ****             
 775:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 2935              		.loc 1 775 0
 2936 00c8 FFF7FEFF 		bl	stop_shdr_dn_Read
 2937 00cc 031C     		mov	r3, r0
 2938 00ce 002B     		cmp	r3, #0
 2939 00d0 05D0     		beq	.L191
 2940              		.loc 1 775 0 is_stmt 0 discriminator 1
 2941 00d2 FFF7FEFF 		bl	stop_shdr_up_Read
 2942 00d6 031C     		mov	r3, r0
 2943 00d8 002B     		cmp	r3, #0
 2944 00da 00D0     		beq	.LCB2635
 2945 00dc 6FE0     		b	.L192	@long jump
 2946              	.LCB2635:
 2947              	.L191:
 776:.\main.c      ****             {
 777:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 2948              		.loc 1 777 0 is_stmt 1
 2949 00de 3B1C     		mov	r3, r7
 2950 00e0 0C33     		add	r3, r3, #12
 2951 00e2 1A88     		ldrh	r2, [r3]
 2952 00e4 834B     		ldr	r3, .L221+28
 2953 00e6 1B68     		ldr	r3, [r3]
 2954 00e8 9A42     		cmp	r2, r3
 2955 00ea 23D8     		bhi	.L193
 778:.\main.c      ****                 {
 779:.\main.c      ****                     if (avg < 1500)
 2956              		.loc 1 779 0
 2957 00ec 3B1C     		mov	r3, r7
 2958 00ee 0833     		add	r3, r3, #8
 2959 00f0 1A88     		ldrh	r2, [r3]
 2960 00f2 814B     		ldr	r3, .L221+32
 2961 00f4 9A42     		cmp	r2, r3
 2962 00f6 04D8     		bhi	.L194
 780:.\main.c      ****                     {
 781:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2963              		.loc 1 781 0
 2964 00f8 7C4B     		ldr	r3, .L221+20
 2965 00fa 181C     		mov	r0, r3
 2966 00fc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2967 0100 5CE0     		b	.L197
 2968              	.L194:
 782:.\main.c      ****                     }
 783:.\main.c      ****                     else
 784:.\main.c      ****                     {
 785:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2969              		.loc 1 785 0
 2970 0102 3B1C     		mov	r3, r7
 2971 0104 0833     		add	r3, r3, #8
 2972 0106 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 68


 2973 0108 FA23     		mov	r3, #250
 2974 010a DB00     		lsl	r3, r3, #3
 2975 010c 9A42     		cmp	r2, r3
 2976 010e 0CD8     		bhi	.L196
 2977              		.loc 1 785 0 is_stmt 0 discriminator 1
 2978 0110 3B1C     		mov	r3, r7
 2979 0112 0833     		add	r3, r3, #8
 2980 0114 1A88     		ldrh	r2, [r3]
 2981 0116 794B     		ldr	r3, .L221+36
 2982 0118 9A42     		cmp	r2, r3
 2983 011a 06D9     		bls	.L196
 786:.\main.c      ****                         {
 787:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 2984              		.loc 1 787 0 is_stmt 1
 2985 011c 3B1C     		mov	r3, r7
 2986 011e 0833     		add	r3, r3, #8
 2987 0120 1B88     		ldrh	r3, [r3]
 2988 0122 181C     		mov	r0, r3
 2989 0124 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2990 0128 48E0     		b	.L197
 2991              	.L196:
 788:.\main.c      ****                         }
 789:.\main.c      ****                         else
 790:.\main.c      ****                         {
 791:.\main.c      ****                             //throw error
 792:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 2992              		.loc 1 792 0
 2993 012a 704B     		ldr	r3, .L221+20
 2994 012c 181C     		mov	r0, r3
 2995 012e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2996 0132 43E0     		b	.L197
 2997              	.L193:
 793:.\main.c      ****                         }
 794:.\main.c      ****                     }
 795:.\main.c      ****                 }
 796:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 2998              		.loc 1 796 0
 2999 0134 3B1C     		mov	r3, r7
 3000 0136 0C33     		add	r3, r3, #12
 3001 0138 1A88     		ldrh	r2, [r3]
 3002 013a 714B     		ldr	r3, .L221+40
 3003 013c 1B68     		ldr	r3, [r3]
 3004 013e 9A42     		cmp	r2, r3
 3005 0140 23D3     		bcc	.L198
 797:.\main.c      ****                 {
 798:.\main.c      ****                     if(avg > 1500)
 3006              		.loc 1 798 0
 3007 0142 3B1C     		mov	r3, r7
 3008 0144 0833     		add	r3, r3, #8
 3009 0146 1A88     		ldrh	r2, [r3]
 3010 0148 684B     		ldr	r3, .L221+20
 3011 014a 9A42     		cmp	r2, r3
 3012 014c 04D9     		bls	.L199
 799:.\main.c      ****                     {
 800:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3013              		.loc 1 800 0
 3014 014e 674B     		ldr	r3, .L221+20
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 69


 3015 0150 181C     		mov	r0, r3
 3016 0152 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3017 0156 31E0     		b	.L197
 3018              	.L199:
 801:.\main.c      ****                     }
 802:.\main.c      ****                     else
 803:.\main.c      ****                     {
 804:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3019              		.loc 1 804 0
 3020 0158 3B1C     		mov	r3, r7
 3021 015a 0833     		add	r3, r3, #8
 3022 015c 1A88     		ldrh	r2, [r3]
 3023 015e FA23     		mov	r3, #250
 3024 0160 DB00     		lsl	r3, r3, #3
 3025 0162 9A42     		cmp	r2, r3
 3026 0164 0CD8     		bhi	.L201
 3027              		.loc 1 804 0 is_stmt 0 discriminator 1
 3028 0166 3B1C     		mov	r3, r7
 3029 0168 0833     		add	r3, r3, #8
 3030 016a 1A88     		ldrh	r2, [r3]
 3031 016c 634B     		ldr	r3, .L221+36
 3032 016e 9A42     		cmp	r2, r3
 3033 0170 06D9     		bls	.L201
 805:.\main.c      ****                         {
 806:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3034              		.loc 1 806 0 is_stmt 1
 3035 0172 3B1C     		mov	r3, r7
 3036 0174 0833     		add	r3, r3, #8
 3037 0176 1B88     		ldrh	r3, [r3]
 3038 0178 181C     		mov	r0, r3
 3039 017a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3040 017e 1DE0     		b	.L197
 3041              	.L201:
 807:.\main.c      ****                         }
 808:.\main.c      ****                         else
 809:.\main.c      ****                         {
 810:.\main.c      ****                             //throw error
 811:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3042              		.loc 1 811 0
 3043 0180 5A4B     		ldr	r3, .L221+20
 3044 0182 181C     		mov	r0, r3
 3045 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3046 0188 18E0     		b	.L197
 3047              	.L198:
 812:.\main.c      ****                         }
 813:.\main.c      ****                     }
 814:.\main.c      ****                 }
 815:.\main.c      ****                 else
 816:.\main.c      ****                 {
 817:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3048              		.loc 1 817 0
 3049 018a 3B1C     		mov	r3, r7
 3050 018c 0833     		add	r3, r3, #8
 3051 018e 1A88     		ldrh	r2, [r3]
 3052 0190 FA23     		mov	r3, #250
 3053 0192 DB00     		lsl	r3, r3, #3
 3054 0194 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 70


 3055 0196 0CD8     		bhi	.L202
 3056              		.loc 1 817 0 is_stmt 0 discriminator 1
 3057 0198 3B1C     		mov	r3, r7
 3058 019a 0833     		add	r3, r3, #8
 3059 019c 1A88     		ldrh	r2, [r3]
 3060 019e 574B     		ldr	r3, .L221+36
 3061 01a0 9A42     		cmp	r2, r3
 3062 01a2 06D9     		bls	.L202
 818:.\main.c      ****                     {
 819:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3063              		.loc 1 819 0 is_stmt 1
 3064 01a4 3B1C     		mov	r3, r7
 3065 01a6 0833     		add	r3, r3, #8
 3066 01a8 1B88     		ldrh	r3, [r3]
 3067 01aa 181C     		mov	r0, r3
 3068 01ac FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3069 01b0 04E0     		b	.L197
 3070              	.L202:
 820:.\main.c      ****                     }
 821:.\main.c      ****                     else
 822:.\main.c      ****                     {
 823:.\main.c      ****                         //throw error
 824:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3071              		.loc 1 824 0
 3072 01b2 4E4B     		ldr	r3, .L221+20
 3073 01b4 181C     		mov	r0, r3
 3074 01b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 777:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3075              		.loc 1 777 0
 3076 01ba 3FE0     		b	.L203
 3077              	.L197:
 3078 01bc 3EE0     		b	.L203
 3079              	.L192:
 825:.\main.c      ****                     }
 826:.\main.c      ****                 }
 827:.\main.c      ****             }
 828:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 829:.\main.c      ****             {
 830:.\main.c      ****                 if(!stop_shdr_dn_Read()) // TODO: Needs to move away so the switch doesn't stay pre
 3080              		.loc 1 830 0
 3081 01be FFF7FEFF 		bl	stop_shdr_dn_Read
 3082 01c2 031C     		mov	r3, r0
 3083 01c4 002B     		cmp	r3, #0
 3084 01c6 18D1     		bne	.L204
 831:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) * 1.1; // TODO: Fix to be inte
 3085              		.loc 1 831 0
 3086 01c8 0020     		mov	r0, #0
 3087 01ca FFF7FEFF 		bl	potFeedback
 3088 01ce 031C     		mov	r3, r0
 3089 01d0 181C     		mov	r0, r3
 3090 01d2 FFF7FEFF 		bl	__aeabi_i2d
 3091 01d6 031C     		mov	r3, r0
 3092 01d8 0C1C     		mov	r4, r1
 3093 01da 181C     		mov	r0, r3
 3094 01dc 211C     		mov	r1, r4
 3095 01de 3F4B     		ldr	r3, .L221+4
 3096 01e0 3D4A     		ldr	r2, .L221
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 71


 3097 01e2 FFF7FEFF 		bl	__aeabi_dmul
 3098 01e6 031C     		mov	r3, r0
 3099 01e8 0C1C     		mov	r4, r1
 3100 01ea 181C     		mov	r0, r3
 3101 01ec 211C     		mov	r1, r4
 3102 01ee FFF7FEFF 		bl	__aeabi_d2uiz
 3103 01f2 021C     		mov	r2, r0
 3104 01f4 3F4B     		ldr	r3, .L221+28
 3105 01f6 1A60     		str	r2, [r3]
 3106 01f8 20E0     		b	.L203
 3107              	.L204:
 832:.\main.c      ****                 else if(!stop_shdr_up_Read())
 3108              		.loc 1 832 0
 3109 01fa FFF7FEFF 		bl	stop_shdr_up_Read
 3110 01fe 031C     		mov	r3, r0
 3111 0200 002B     		cmp	r3, #0
 3112 0202 18D1     		bne	.L205
 833:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) * .9;
 3113              		.loc 1 833 0
 3114 0204 0020     		mov	r0, #0
 3115 0206 FFF7FEFF 		bl	potFeedback
 3116 020a 031C     		mov	r3, r0
 3117 020c 181C     		mov	r0, r3
 3118 020e FFF7FEFF 		bl	__aeabi_i2d
 3119 0212 031C     		mov	r3, r0
 3120 0214 0C1C     		mov	r4, r1
 3121 0216 181C     		mov	r0, r3
 3122 0218 211C     		mov	r1, r4
 3123 021a 314A     		ldr	r2, .L221+8
 3124 021c 314B     		ldr	r3, .L221+12
 3125 021e FFF7FEFF 		bl	__aeabi_dmul
 3126 0222 031C     		mov	r3, r0
 3127 0224 0C1C     		mov	r4, r1
 3128 0226 181C     		mov	r0, r3
 3129 0228 211C     		mov	r1, r4
 3130 022a FFF7FEFF 		bl	__aeabi_d2uiz
 3131 022e 021C     		mov	r2, r0
 3132 0230 334B     		ldr	r3, .L221+40
 3133 0232 1A60     		str	r2, [r3]
 3134 0234 02E0     		b	.L203
 3135              	.L205:
 834:.\main.c      ****                 else
 835:.\main.c      ****                     LED_Write(1);
 3136              		.loc 1 835 0
 3137 0236 0120     		mov	r0, #1
 3138 0238 FFF7FEFF 		bl	LED_Write
 3139              	.L203:
 836:.\main.c      ****             }
 837:.\main.c      ****             SHOULDER_FLAG = 0;
 3140              		.loc 1 837 0
 3141 023c 314B     		ldr	r3, .L221+44
 3142 023e 0022     		mov	r2, #0
 3143 0240 1A70     		strb	r2, [r3]
 838:.\main.c      ****             break;
 3144              		.loc 1 838 0
 3145 0242 14E0     		b	.L181
 3146              	.L186:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 72


 839:.\main.c      ****             
 840:.\main.c      ****         case shldr_wait:
 841:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3147              		.loc 1 841 0
 3148 0244 3B1C     		mov	r3, r7
 3149 0246 0C33     		add	r3, r3, #12
 3150 0248 1A88     		ldrh	r2, [r3]
 3151 024a 2A4B     		ldr	r3, .L221+28
 3152 024c 1B68     		ldr	r3, [r3]
 3153 024e 9A42     		cmp	r2, r3
 3154 0250 06D9     		bls	.L206
 3155              		.loc 1 841 0 is_stmt 0 discriminator 1
 3156 0252 3B1C     		mov	r3, r7
 3157 0254 0C33     		add	r3, r3, #12
 3158 0256 1A88     		ldrh	r2, [r3]
 3159 0258 294B     		ldr	r3, .L221+40
 3160 025a 1B68     		ldr	r3, [r3]
 3161 025c 9A42     		cmp	r2, r3
 3162 025e 04D3     		bcc	.L207
 3163              	.L206:
 842:.\main.c      ****             {
 843:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3164              		.loc 1 843 0 is_stmt 1
 3165 0260 224B     		ldr	r3, .L221+20
 3166 0262 181C     		mov	r0, r3
 3167 0264 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 844:.\main.c      ****             }
 845:.\main.c      ****             break;
 3168              		.loc 1 845 0
 3169 0268 01E0     		b	.L181
 3170              	.L207:
 3171 026a 00E0     		b	.L181
 3172              	.L219:
 749:.\main.c      ****             break;
 3173              		.loc 1 749 0
 3174 026c C046     		mov	r8, r8
 3175              	.L181:
 846:.\main.c      ****     }
 847:.\main.c      ****     
 848:.\main.c      ****     switch(shoulder_state){ //transitions
 3176              		.loc 1 848 0
 3177 026e 1E4B     		ldr	r3, .L221+16
 3178 0270 1B78     		ldrb	r3, [r3]
 3179 0272 012B     		cmp	r3, #1
 3180 0274 0CD0     		beq	.L209
 3181 0276 02DC     		bgt	.L210
 3182 0278 002B     		cmp	r3, #0
 3183 027a 05D0     		beq	.L211
 3184 027c 24E0     		b	.L208
 3185              	.L210:
 3186 027e 022B     		cmp	r3, #2
 3187 0280 0AD0     		beq	.L212
 3188 0282 032B     		cmp	r3, #3
 3189 0284 14D0     		beq	.L213
 3190 0286 1FE0     		b	.L208
 3191              	.L211:
 849:.\main.c      ****         case shldr_start:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 73


 850:.\main.c      ****             shoulder_state = shldr_init;
 3192              		.loc 1 850 0
 3193 0288 174B     		ldr	r3, .L221+16
 3194 028a 0122     		mov	r2, #1
 3195 028c 1A70     		strb	r2, [r3]
 851:.\main.c      ****             break;
 3196              		.loc 1 851 0
 3197 028e 1BE0     		b	.L208
 3198              	.L209:
 852:.\main.c      ****         
 853:.\main.c      ****         case shldr_init:
 854:.\main.c      ****             shoulder_state = shldr_wait;
 3199              		.loc 1 854 0
 3200 0290 154B     		ldr	r3, .L221+16
 3201 0292 0322     		mov	r2, #3
 3202 0294 1A70     		strb	r2, [r3]
 855:.\main.c      ****             break;
 3203              		.loc 1 855 0
 3204 0296 17E0     		b	.L208
 3205              	.L212:
 856:.\main.c      ****         
 857:.\main.c      ****         case shldr_execute:
 858:.\main.c      ****             if(SHOULDER_FLAG)
 3206              		.loc 1 858 0
 3207 0298 1A4B     		ldr	r3, .L221+44
 3208 029a 1B78     		ldrb	r3, [r3]
 3209 029c 002B     		cmp	r3, #0
 3210 029e 03D0     		beq	.L214
 859:.\main.c      ****             {
 860:.\main.c      ****                 shoulder_state = shldr_execute;
 3211              		.loc 1 860 0
 3212 02a0 114B     		ldr	r3, .L221+16
 3213 02a2 0222     		mov	r2, #2
 3214 02a4 1A70     		strb	r2, [r3]
 861:.\main.c      ****             }
 862:.\main.c      ****             else
 863:.\main.c      ****             {
 864:.\main.c      ****                 shoulder_state = shldr_wait;
 865:.\main.c      ****             }
 866:.\main.c      ****             break;
 3215              		.loc 1 866 0
 3216 02a6 0FE0     		b	.L208
 3217              	.L214:
 864:.\main.c      ****                 shoulder_state = shldr_wait;
 3218              		.loc 1 864 0
 3219 02a8 0F4B     		ldr	r3, .L221+16
 3220 02aa 0322     		mov	r2, #3
 3221 02ac 1A70     		strb	r2, [r3]
 3222              		.loc 1 866 0
 3223 02ae 0BE0     		b	.L208
 3224              	.L213:
 867:.\main.c      ****         
 868:.\main.c      ****         case shldr_wait:
 869:.\main.c      ****             if(SHOULDER_FLAG)
 3225              		.loc 1 869 0
 3226 02b0 144B     		ldr	r3, .L221+44
 3227 02b2 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 74


 3228 02b4 002B     		cmp	r3, #0
 3229 02b6 03D0     		beq	.L216
 870:.\main.c      ****             {
 871:.\main.c      ****                 shoulder_state = shldr_execute;
 3230              		.loc 1 871 0
 3231 02b8 0B4B     		ldr	r3, .L221+16
 3232 02ba 0222     		mov	r2, #2
 3233 02bc 1A70     		strb	r2, [r3]
 872:.\main.c      ****             }
 873:.\main.c      ****             else
 874:.\main.c      ****             {
 875:.\main.c      ****                 shoulder_state = shldr_wait; 
 876:.\main.c      ****             }
 877:.\main.c      ****             break;
 3234              		.loc 1 877 0
 3235 02be 02E0     		b	.L220
 3236              	.L216:
 875:.\main.c      ****                 shoulder_state = shldr_wait; 
 3237              		.loc 1 875 0
 3238 02c0 094B     		ldr	r3, .L221+16
 3239 02c2 0322     		mov	r2, #3
 3240 02c4 1A70     		strb	r2, [r3]
 3241              	.L220:
 3242              		.loc 1 877 0
 3243 02c6 C046     		mov	r8, r8
 3244              	.L208:
 878:.\main.c      ****     }  
 879:.\main.c      ****     return shldr_arr_cspot;
 3245              		.loc 1 879 0
 3246 02c8 FB1D     		add	r3, r7, #7
 3247 02ca 1B78     		ldrb	r3, [r3]
 880:.\main.c      **** }
 3248              		.loc 1 880 0
 3249 02cc 181C     		mov	r0, r3
 3250 02ce BD46     		mov	sp, r7
 3251 02d0 05B0     		add	sp, sp, #20
 3252              		@ sp needed
 3253 02d2 90BD     		pop	{r4, r7, pc}
 3254              	.L222:
 3255 02d4 C046C046 		.align	3
 3256              	.L221:
 3257 02d8 9A999999 		.word	-1717986918
 3258 02dc 9999F13F 		.word	1072798105
 3259 02e0 CDCCCCCC 		.word	-858993459
 3260 02e4 CCCCEC3F 		.word	1072483532
 3261 02e8 00000000 		.word	shoulder_state
 3262 02ec DC050000 		.word	1500
 3263 02f0 00000000 		.word	data_array
 3264 02f4 00000000 		.word	SHOULDER_LOWER_BOUND
 3265 02f8 DB050000 		.word	1499
 3266 02fc E7030000 		.word	999
 3267 0300 00000000 		.word	SHOULDER_UPPER_BOUND
 3268 0304 00000000 		.word	SHOULDER_FLAG
 3269              		.cfi_endproc
 3270              	.LFE51:
 3271              		.size	shoulder, .-shoulder
 3272              		.comm	baseAzimuth_state,1,1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 75


 3273              		.section	.text.baseAzimuth,"ax",%progbits
 3274              		.align	2
 3275              		.global	baseAzimuth
 3276              		.code	16
 3277              		.thumb_func
 3278              		.type	baseAzimuth, %function
 3279              	baseAzimuth:
 3280              	.LFB52:
 881:.\main.c      **** 
 882:.\main.c      **** //control the turret
 883:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 884:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 885:.\main.c      **** { 
 3281              		.loc 1 885 0
 3282              		.cfi_startproc
 3283 0000 90B5     		push	{r4, r7, lr}
 3284              		.cfi_def_cfa_offset 12
 3285              		.cfi_offset 4, -12
 3286              		.cfi_offset 7, -8
 3287              		.cfi_offset 14, -4
 3288 0002 85B0     		sub	sp, sp, #20
 3289              		.cfi_def_cfa_offset 32
 3290 0004 00AF     		add	r7, sp, #0
 3291              		.cfi_def_cfa_register 7
 3292 0006 021C     		mov	r2, r0
 3293 0008 3960     		str	r1, [r7]
 3294 000a FB1D     		add	r3, r7, #7
 3295 000c 1A70     		strb	r2, [r3]
 886:.\main.c      ****     //take instruction from data_array
 887:.\main.c      ****     //smooth input
 888:.\main.c      ****     //actuate the turret using PWM
 889:.\main.c      ****     uint8 i;
 890:.\main.c      ****     uint16 avg;
 891:.\main.c      ****     uint16 command;
 892:.\main.c      ****     
 893:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3296              		.loc 1 893 0
 3297 000e 4E4B     		ldr	r3, .L247
 3298 0010 1B78     		ldrb	r3, [r3]
 3299 0012 012B     		cmp	r3, #1
 3300 0014 03D0     		beq	.L225
 3301 0016 63DD     		ble	.L245
 3302 0018 022B     		cmp	r3, #2
 3303 001a 21D0     		beq	.L228
 894:.\main.c      ****         case BA_start:
 895:.\main.c      ****             break;
 896:.\main.c      **** 
 897:.\main.c      ****         case BA_init:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 899:.\main.c      ****             {
 900:.\main.c      ****                 baseAz_array[i] = 1500;
 901:.\main.c      ****             }
 902:.\main.c      ****             BA_arr_cspot = 0;
 903:.\main.c      ****             
 904:.\main.c      ****             BA_PWM_WriteCompare(1500);
 905:.\main.c      ****             break;
 906:.\main.c      **** 
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 76


 907:.\main.c      ****         case BA_execute:
 908:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 909:.\main.c      ****             
 910:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 911:.\main.c      **** //            
 912:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 913:.\main.c      **** //            {
 914:.\main.c      **** //                BA_arr_cspot++;
 915:.\main.c      **** //            }
 916:.\main.c      **** //            else
 917:.\main.c      **** //            {
 918:.\main.c      **** //                BA_arr_cspot = 0;
 919:.\main.c      **** //            }
 920:.\main.c      ****             
 921:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 922:.\main.c      ****             
 923:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 924:.\main.c      ****             
 925:.\main.c      **** //            if(avg == 1000 || avg == 2000)
 926:.\main.c      **** //            {
 927:.\main.c      **** //
 928:.\main.c      **** //                temp_val = temp_val*(-1);
 929:.\main.c      **** //            }
 930:.\main.c      ****             
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 932:.\main.c      ****             {
 933:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 934:.\main.c      ****             }
 935:.\main.c      ****             else
 936:.\main.c      ****             {
 937:.\main.c      ****                 LED_Write(1);
 938:.\main.c      **** 
 939:.\main.c      ****                 //throw error
 940:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 941:.\main.c      ****             }
 942:.\main.c      ****             BA_FLAG = 0;
 943:.\main.c      ****             break;
 944:.\main.c      ****             
 945:.\main.c      ****         case BA_wait:
 946:.\main.c      ****             break;
 3304              		.loc 1 946 0
 3305 001c 61E0     		b	.L224
 3306              	.L225:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3307              		.loc 1 898 0
 3308 001e 3B1C     		mov	r3, r7
 3309 0020 0F33     		add	r3, r3, #15
 3310 0022 0022     		mov	r2, #0
 3311 0024 1A70     		strb	r2, [r3]
 3312 0026 0EE0     		b	.L230
 3313              	.L231:
 900:.\main.c      ****                 baseAz_array[i] = 1500;
 3314              		.loc 1 900 0 discriminator 2
 3315 0028 3B1C     		mov	r3, r7
 3316 002a 0F33     		add	r3, r3, #15
 3317 002c 1B78     		ldrb	r3, [r3]
 3318 002e 5B00     		lsl	r3, r3, #1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 77


 3319 0030 3A68     		ldr	r2, [r7]
 3320 0032 D318     		add	r3, r2, r3
 3321 0034 454A     		ldr	r2, .L247+4
 3322 0036 1A80     		strh	r2, [r3]
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3323              		.loc 1 898 0 discriminator 2
 3324 0038 3B1C     		mov	r3, r7
 3325 003a 0F33     		add	r3, r3, #15
 3326 003c 1A78     		ldrb	r2, [r3]
 3327 003e 3B1C     		mov	r3, r7
 3328 0040 0F33     		add	r3, r3, #15
 3329 0042 0132     		add	r2, r2, #1
 3330 0044 1A70     		strb	r2, [r3]
 3331              	.L230:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3332              		.loc 1 898 0 is_stmt 0 discriminator 1
 3333 0046 3B1C     		mov	r3, r7
 3334 0048 0F33     		add	r3, r3, #15
 3335 004a 1B78     		ldrb	r3, [r3]
 3336 004c 132B     		cmp	r3, #19
 3337 004e EBD9     		bls	.L231
 902:.\main.c      ****             BA_arr_cspot = 0;
 3338              		.loc 1 902 0 is_stmt 1
 3339 0050 FB1D     		add	r3, r7, #7
 3340 0052 0022     		mov	r2, #0
 3341 0054 1A70     		strb	r2, [r3]
 904:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3342              		.loc 1 904 0
 3343 0056 3D4B     		ldr	r3, .L247+4
 3344 0058 181C     		mov	r0, r3
 3345 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
 905:.\main.c      ****             break;
 3346              		.loc 1 905 0
 3347 005e 40E0     		b	.L224
 3348              	.L228:
 908:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3349              		.loc 1 908 0
 3350 0060 3C1C     		mov	r4, r7
 3351 0062 0C34     		add	r4, r4, #12
 3352 0064 3A4B     		ldr	r3, .L247+8
 3353 0066 181C     		mov	r0, r3
 3354 0068 0A21     		mov	r1, #10
 3355 006a 0B22     		mov	r2, #11
 3356 006c FFF7FEFF 		bl	make_command
 3357 0070 031C     		mov	r3, r0
 3358 0072 2380     		strh	r3, [r4]
 921:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3359              		.loc 1 921 0
 3360 0074 FC1D     		add	r4, r7, #7
 3361 0076 FB1D     		add	r3, r7, #7
 3362 0078 1978     		ldrb	r1, [r3]
 3363 007a 3A68     		ldr	r2, [r7]
 3364 007c 3B1C     		mov	r3, r7
 3365 007e 0C33     		add	r3, r3, #12
 3366 0080 1B88     		ldrh	r3, [r3]
 3367 0082 081C     		mov	r0, r1
 3368 0084 111C     		mov	r1, r2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 78


 3369 0086 1422     		mov	r2, #20
 3370 0088 FFF7FEFF 		bl	pos_to_vel
 3371 008c 031C     		mov	r3, r0
 3372 008e 2370     		strb	r3, [r4]
 923:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3373              		.loc 1 923 0
 3374 0090 3C1C     		mov	r4, r7
 3375 0092 0A34     		add	r4, r4, #10
 3376 0094 3B68     		ldr	r3, [r7]
 3377 0096 181C     		mov	r0, r3
 3378 0098 1421     		mov	r1, #20
 3379 009a FFF7FEFF 		bl	average
 3380 009e 031C     		mov	r3, r0
 3381 00a0 2380     		strh	r3, [r4]
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3382              		.loc 1 931 0
 3383 00a2 3B1C     		mov	r3, r7
 3384 00a4 0A33     		add	r3, r3, #10
 3385 00a6 1A88     		ldrh	r2, [r3]
 3386 00a8 FA23     		mov	r3, #250
 3387 00aa DB00     		lsl	r3, r3, #3
 3388 00ac 9A42     		cmp	r2, r3
 3389 00ae 0CD8     		bhi	.L232
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3390              		.loc 1 931 0 is_stmt 0 discriminator 1
 3391 00b0 3B1C     		mov	r3, r7
 3392 00b2 0A33     		add	r3, r3, #10
 3393 00b4 1A88     		ldrh	r2, [r3]
 3394 00b6 274B     		ldr	r3, .L247+12
 3395 00b8 9A42     		cmp	r2, r3
 3396 00ba 06D9     		bls	.L232
 933:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3397              		.loc 1 933 0 is_stmt 1
 3398 00bc 3B1C     		mov	r3, r7
 3399 00be 0A33     		add	r3, r3, #10
 3400 00c0 1B88     		ldrh	r3, [r3]
 3401 00c2 181C     		mov	r0, r3
 3402 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3403 00c8 06E0     		b	.L233
 3404              	.L232:
 937:.\main.c      ****                 LED_Write(1);
 3405              		.loc 1 937 0
 3406 00ca 0120     		mov	r0, #1
 3407 00cc FFF7FEFF 		bl	LED_Write
 940:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3408              		.loc 1 940 0
 3409 00d0 1E4B     		ldr	r3, .L247+4
 3410 00d2 181C     		mov	r0, r3
 3411 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3412              	.L233:
 942:.\main.c      ****             BA_FLAG = 0;
 3413              		.loc 1 942 0
 3414 00d8 1F4B     		ldr	r3, .L247+16
 3415 00da 0022     		mov	r2, #0
 3416 00dc 1A70     		strb	r2, [r3]
 943:.\main.c      ****             break;
 3417              		.loc 1 943 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 79


 3418 00de 00E0     		b	.L224
 3419              	.L245:
 895:.\main.c      ****             break;
 3420              		.loc 1 895 0
 3421 00e0 C046     		mov	r8, r8
 3422              	.L224:
 947:.\main.c      ****     }
 948:.\main.c      ****     
 949:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3423              		.loc 1 949 0
 3424 00e2 194B     		ldr	r3, .L247
 3425 00e4 1B78     		ldrb	r3, [r3]
 3426 00e6 012B     		cmp	r3, #1
 3427 00e8 0CD0     		beq	.L235
 3428 00ea 02DC     		bgt	.L236
 3429 00ec 002B     		cmp	r3, #0
 3430 00ee 05D0     		beq	.L237
 3431 00f0 24E0     		b	.L234
 3432              	.L236:
 3433 00f2 022B     		cmp	r3, #2
 3434 00f4 0AD0     		beq	.L238
 3435 00f6 032B     		cmp	r3, #3
 3436 00f8 14D0     		beq	.L239
 3437 00fa 1FE0     		b	.L234
 3438              	.L237:
 950:.\main.c      ****         case BA_start:
 951:.\main.c      ****             baseAzimuth_state = BA_init;
 3439              		.loc 1 951 0
 3440 00fc 124B     		ldr	r3, .L247
 3441 00fe 0122     		mov	r2, #1
 3442 0100 1A70     		strb	r2, [r3]
 952:.\main.c      ****             break;
 3443              		.loc 1 952 0
 3444 0102 1BE0     		b	.L234
 3445              	.L235:
 953:.\main.c      ****         
 954:.\main.c      ****         case BA_init:
 955:.\main.c      ****             baseAzimuth_state = BA_wait;
 3446              		.loc 1 955 0
 3447 0104 104B     		ldr	r3, .L247
 3448 0106 0322     		mov	r2, #3
 3449 0108 1A70     		strb	r2, [r3]
 956:.\main.c      ****             break;
 3450              		.loc 1 956 0
 3451 010a 17E0     		b	.L234
 3452              	.L238:
 957:.\main.c      ****         
 958:.\main.c      ****         case BA_execute:
 959:.\main.c      ****             if(BA_FLAG)
 3453              		.loc 1 959 0
 3454 010c 124B     		ldr	r3, .L247+16
 3455 010e 1B78     		ldrb	r3, [r3]
 3456 0110 002B     		cmp	r3, #0
 3457 0112 03D0     		beq	.L240
 960:.\main.c      ****             {
 961:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3458              		.loc 1 961 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 80


 3459 0114 0C4B     		ldr	r3, .L247
 3460 0116 0222     		mov	r2, #2
 3461 0118 1A70     		strb	r2, [r3]
 962:.\main.c      ****             }
 963:.\main.c      ****             else
 964:.\main.c      ****             {
 965:.\main.c      ****                 baseAzimuth_state = BA_wait;
 966:.\main.c      ****             }
 967:.\main.c      ****             break;
 3462              		.loc 1 967 0
 3463 011a 0FE0     		b	.L234
 3464              	.L240:
 965:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3465              		.loc 1 965 0
 3466 011c 0A4B     		ldr	r3, .L247
 3467 011e 0322     		mov	r2, #3
 3468 0120 1A70     		strb	r2, [r3]
 3469              		.loc 1 967 0
 3470 0122 0BE0     		b	.L234
 3471              	.L239:
 968:.\main.c      ****         
 969:.\main.c      ****         case BA_wait:
 970:.\main.c      ****             if(BA_FLAG)
 3472              		.loc 1 970 0
 3473 0124 0C4B     		ldr	r3, .L247+16
 3474 0126 1B78     		ldrb	r3, [r3]
 3475 0128 002B     		cmp	r3, #0
 3476 012a 03D0     		beq	.L242
 971:.\main.c      ****             {
 972:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3477              		.loc 1 972 0
 3478 012c 064B     		ldr	r3, .L247
 3479 012e 0222     		mov	r2, #2
 3480 0130 1A70     		strb	r2, [r3]
 973:.\main.c      ****             }
 974:.\main.c      ****             else
 975:.\main.c      ****             {
 976:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 977:.\main.c      ****             }
 978:.\main.c      ****             break;
 3481              		.loc 1 978 0
 3482 0132 02E0     		b	.L246
 3483              	.L242:
 976:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3484              		.loc 1 976 0
 3485 0134 044B     		ldr	r3, .L247
 3486 0136 0322     		mov	r2, #3
 3487 0138 1A70     		strb	r2, [r3]
 3488              	.L246:
 3489              		.loc 1 978 0
 3490 013a C046     		mov	r8, r8
 3491              	.L234:
 979:.\main.c      ****     }  
 980:.\main.c      ****     return BA_arr_cspot;
 3492              		.loc 1 980 0
 3493 013c FB1D     		add	r3, r7, #7
 3494 013e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 81


 981:.\main.c      **** }
 3495              		.loc 1 981 0
 3496 0140 181C     		mov	r0, r3
 3497 0142 BD46     		mov	sp, r7
 3498 0144 05B0     		add	sp, sp, #20
 3499              		@ sp needed
 3500 0146 90BD     		pop	{r4, r7, pc}
 3501              	.L248:
 3502              		.align	2
 3503              	.L247:
 3504 0148 00000000 		.word	baseAzimuth_state
 3505 014c DC050000 		.word	1500
 3506 0150 00000000 		.word	data_array
 3507 0154 E7030000 		.word	999
 3508 0158 00000000 		.word	BA_FLAG
 3509              		.cfi_endproc
 3510              	.LFE52:
 3511              		.size	baseAzimuth, .-baseAzimuth
 3512              		.comm	effector_state,1,1
 3513              		.section	.text.effector,"ax",%progbits
 3514              		.align	2
 3515              		.global	effector
 3516              		.code	16
 3517              		.thumb_func
 3518              		.type	effector, %function
 3519              	effector:
 3520              	.LFB53:
 982:.\main.c      **** 
 983:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 984:.\main.c      **** void effector()
 985:.\main.c      **** {
 3521              		.loc 1 985 0
 3522              		.cfi_startproc
 3523 0000 90B5     		push	{r4, r7, lr}
 3524              		.cfi_def_cfa_offset 12
 3525              		.cfi_offset 4, -12
 3526              		.cfi_offset 7, -8
 3527              		.cfi_offset 14, -4
 3528 0002 83B0     		sub	sp, sp, #12
 3529              		.cfi_def_cfa_offset 24
 3530 0004 00AF     		add	r7, sp, #0
 3531              		.cfi_def_cfa_register 7
 986:.\main.c      ****     uint16 command;
 987:.\main.c      **** 
 988:.\main.c      ****     switch(effector_state){ //actions
 3532              		.loc 1 988 0
 3533 0006 304B     		ldr	r3, .L269
 3534 0008 1B78     		ldrb	r3, [r3]
 3535 000a 012B     		cmp	r3, #1
 3536 000c 03D0     		beq	.L251
 3537 000e 29DD     		ble	.L268
 3538 0010 022B     		cmp	r3, #2
 3539 0012 05D0     		beq	.L254
 989:.\main.c      ****         case shldr_start:
 990:.\main.c      ****             break;
 991:.\main.c      **** 
 992:.\main.c      ****         case eff_init:           
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 82


 993:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 994:.\main.c      ****            break;
 995:.\main.c      **** 
 996:.\main.c      ****         case eff_execute:
 997:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 998:.\main.c      **** 
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
1000:.\main.c      ****             {
1001:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
1002:.\main.c      ****             }
1003:.\main.c      ****             else
1004:.\main.c      ****             {
1005:.\main.c      ****                 //throw error
1006:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
1007:.\main.c      ****             }
1008:.\main.c      ****             
1009:.\main.c      ****             EFFECTOR_FLAG = 0;
1010:.\main.c      ****             break;
1011:.\main.c      ****             
1012:.\main.c      ****         case eff_wait:
1013:.\main.c      ****             break;
 3540              		.loc 1 1013 0
 3541 0014 27E0     		b	.L250
 3542              	.L251:
 993:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3543              		.loc 1 993 0
 3544 0016 2D4B     		ldr	r3, .L269+4
 3545 0018 181C     		mov	r0, r3
 3546 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 994:.\main.c      ****            break;
 3547              		.loc 1 994 0
 3548 001e 22E0     		b	.L250
 3549              	.L254:
 997:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3550              		.loc 1 997 0
 3551 0020 BC1D     		add	r4, r7, #6
 3552 0022 2B4B     		ldr	r3, .L269+8
 3553 0024 181C     		mov	r0, r3
 3554 0026 1421     		mov	r1, #20
 3555 0028 1522     		mov	r2, #21
 3556 002a FFF7FEFF 		bl	make_command
 3557 002e 031C     		mov	r3, r0
 3558 0030 2380     		strh	r3, [r4]
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3559              		.loc 1 999 0
 3560 0032 BB1D     		add	r3, r7, #6
 3561 0034 1A88     		ldrh	r2, [r3]
 3562 0036 FA23     		mov	r3, #250
 3563 0038 DB00     		lsl	r3, r3, #3
 3564 003a 9A42     		cmp	r2, r3
 3565 003c 0AD8     		bhi	.L256
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3566              		.loc 1 999 0 is_stmt 0 discriminator 1
 3567 003e BB1D     		add	r3, r7, #6
 3568 0040 1A88     		ldrh	r2, [r3]
 3569 0042 244B     		ldr	r3, .L269+12
 3570 0044 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 83


 3571 0046 05D9     		bls	.L256
1001:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3572              		.loc 1 1001 0 is_stmt 1
 3573 0048 BB1D     		add	r3, r7, #6
 3574 004a 1B88     		ldrh	r3, [r3]
 3575 004c 181C     		mov	r0, r3
 3576 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3577 0052 03E0     		b	.L257
 3578              	.L256:
1006:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3579              		.loc 1 1006 0
 3580 0054 1D4B     		ldr	r3, .L269+4
 3581 0056 181C     		mov	r0, r3
 3582 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3583              	.L257:
1009:.\main.c      ****             EFFECTOR_FLAG = 0;
 3584              		.loc 1 1009 0
 3585 005c 1E4B     		ldr	r3, .L269+16
 3586 005e 0022     		mov	r2, #0
 3587 0060 1A70     		strb	r2, [r3]
1010:.\main.c      ****             break;
 3588              		.loc 1 1010 0
 3589 0062 00E0     		b	.L250
 3590              	.L268:
 990:.\main.c      ****             break;
 3591              		.loc 1 990 0
 3592 0064 C046     		mov	r8, r8
 3593              	.L250:
1014:.\main.c      ****     }
1015:.\main.c      ****     
1016:.\main.c      ****     switch(effector_state){ //transitions
 3594              		.loc 1 1016 0
 3595 0066 184B     		ldr	r3, .L269
 3596 0068 1B78     		ldrb	r3, [r3]
 3597 006a 012B     		cmp	r3, #1
 3598 006c 0CD0     		beq	.L259
 3599 006e 02DC     		bgt	.L260
 3600 0070 002B     		cmp	r3, #0
 3601 0072 05D0     		beq	.L261
 3602 0074 24E0     		b	.L249
 3603              	.L260:
 3604 0076 022B     		cmp	r3, #2
 3605 0078 0AD0     		beq	.L262
 3606 007a 032B     		cmp	r3, #3
 3607 007c 14D0     		beq	.L263
 3608 007e 1FE0     		b	.L249
 3609              	.L261:
1017:.\main.c      ****         case eff_start:
1018:.\main.c      ****             effector_state = eff_init;
 3610              		.loc 1 1018 0
 3611 0080 114B     		ldr	r3, .L269
 3612 0082 0122     		mov	r2, #1
 3613 0084 1A70     		strb	r2, [r3]
1019:.\main.c      ****             break;
 3614              		.loc 1 1019 0
 3615 0086 1BE0     		b	.L249
 3616              	.L259:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 84


1020:.\main.c      ****         
1021:.\main.c      ****         case eff_init:
1022:.\main.c      ****             effector_state = eff_wait;
 3617              		.loc 1 1022 0
 3618 0088 0F4B     		ldr	r3, .L269
 3619 008a 0322     		mov	r2, #3
 3620 008c 1A70     		strb	r2, [r3]
1023:.\main.c      ****             break;
 3621              		.loc 1 1023 0
 3622 008e 17E0     		b	.L249
 3623              	.L262:
1024:.\main.c      ****         
1025:.\main.c      ****         case eff_execute:
1026:.\main.c      ****             if(EFFECTOR_FLAG)
 3624              		.loc 1 1026 0
 3625 0090 114B     		ldr	r3, .L269+16
 3626 0092 1B78     		ldrb	r3, [r3]
 3627 0094 002B     		cmp	r3, #0
 3628 0096 03D0     		beq	.L264
1027:.\main.c      ****             {
1028:.\main.c      ****                 effector_state = eff_execute;
 3629              		.loc 1 1028 0
 3630 0098 0B4B     		ldr	r3, .L269
 3631 009a 0222     		mov	r2, #2
 3632 009c 1A70     		strb	r2, [r3]
1029:.\main.c      ****             }
1030:.\main.c      ****             else
1031:.\main.c      ****             {
1032:.\main.c      ****                 effector_state = eff_wait;
1033:.\main.c      ****             }
1034:.\main.c      ****             break;
 3633              		.loc 1 1034 0
 3634 009e 0FE0     		b	.L249
 3635              	.L264:
1032:.\main.c      ****                 effector_state = eff_wait;
 3636              		.loc 1 1032 0
 3637 00a0 094B     		ldr	r3, .L269
 3638 00a2 0322     		mov	r2, #3
 3639 00a4 1A70     		strb	r2, [r3]
 3640              		.loc 1 1034 0
 3641 00a6 0BE0     		b	.L249
 3642              	.L263:
1035:.\main.c      ****         
1036:.\main.c      ****         case eff_wait:
1037:.\main.c      ****             if(EFFECTOR_FLAG)
 3643              		.loc 1 1037 0
 3644 00a8 0B4B     		ldr	r3, .L269+16
 3645 00aa 1B78     		ldrb	r3, [r3]
 3646 00ac 002B     		cmp	r3, #0
 3647 00ae 03D0     		beq	.L266
1038:.\main.c      ****             {
1039:.\main.c      ****                 effector_state = eff_execute;
 3648              		.loc 1 1039 0
 3649 00b0 054B     		ldr	r3, .L269
 3650 00b2 0222     		mov	r2, #2
 3651 00b4 1A70     		strb	r2, [r3]
 3652 00b6 02E0     		b	.L267
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 85


 3653              	.L266:
1040:.\main.c      ****             }
1041:.\main.c      ****             else
1042:.\main.c      ****             {
1043:.\main.c      ****                 effector_state = eff_wait; 
 3654              		.loc 1 1043 0
 3655 00b8 034B     		ldr	r3, .L269
 3656 00ba 0322     		mov	r2, #3
 3657 00bc 1A70     		strb	r2, [r3]
 3658              	.L267:
1044:.\main.c      ****             }
1045:.\main.c      ****             break;
 3659              		.loc 1 1045 0
 3660 00be C046     		mov	r8, r8
 3661              	.L249:
1046:.\main.c      ****     }    
1047:.\main.c      **** }
 3662              		.loc 1 1047 0
 3663 00c0 BD46     		mov	sp, r7
 3664 00c2 03B0     		add	sp, sp, #12
 3665              		@ sp needed
 3666 00c4 90BD     		pop	{r4, r7, pc}
 3667              	.L270:
 3668 00c6 C046     		.align	2
 3669              	.L269:
 3670 00c8 00000000 		.word	effector_state
 3671 00cc DC050000 		.word	1500
 3672 00d0 00000000 		.word	data_array
 3673 00d4 E7030000 		.word	999
 3674 00d8 00000000 		.word	EFFECTOR_FLAG
 3675              		.cfi_endproc
 3676              	.LFE53:
 3677              		.size	effector, .-effector
 3678              		.comm	phSensor_state,1,1
 3679              		.section	.text.phSensor,"ax",%progbits
 3680              		.align	2
 3681              		.global	phSensor
 3682              		.code	16
 3683              		.thumb_func
 3684              		.type	phSensor, %function
 3685              	phSensor:
 3686              	.LFB54:
1048:.\main.c      **** 
1049:.\main.c      **** enum phSensor_states {ph_start, ph_init, ph_execute, ph_wait} phSensor_state;
1050:.\main.c      **** void phSensor()
1051:.\main.c      **** {
 3687              		.loc 1 1051 0
 3688              		.cfi_startproc
 3689 0000 80B5     		push	{r7, lr}
 3690              		.cfi_def_cfa_offset 8
 3691              		.cfi_offset 7, -8
 3692              		.cfi_offset 14, -4
 3693 0002 00AF     		add	r7, sp, #0
 3694              		.cfi_def_cfa_register 7
1052:.\main.c      ****     switch(phSensor_state)
 3695              		.loc 1 1052 0
 3696 0004 1F4B     		ldr	r3, .L291
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 86


 3697 0006 1B78     		ldrb	r3, [r3]
 3698 0008 012B     		cmp	r3, #1
 3699 000a 06D0     		beq	.L288
 3700 000c 07DD     		ble	.L289
 3701 000e 022B     		cmp	r3, #2
 3702 0010 07D1     		bne	.L290
1053:.\main.c      ****     { //actions
1054:.\main.c      ****         case ph_start:
1055:.\main.c      ****             // Do nothing
1056:.\main.c      ****             break;
1057:.\main.c      **** 
1058:.\main.c      ****         case ph_init:           
1059:.\main.c      ****            // TODO: Add initialization code. might not need
1060:.\main.c      ****            break;
1061:.\main.c      **** 
1062:.\main.c      ****         case ph_execute:
1063:.\main.c      ****             // TODO:  Call Marshalls code for phSensor
1064:.\main.c      ****             PH_FLAG = 0;
 3703              		.loc 1 1064 0
 3704 0012 1D4B     		ldr	r3, .L291+4
 3705 0014 0022     		mov	r2, #0
 3706 0016 1A70     		strb	r2, [r3]
1065:.\main.c      ****             break;
 3707              		.loc 1 1065 0
 3708 0018 04E0     		b	.L272
 3709              	.L288:
1060:.\main.c      ****            break;
 3710              		.loc 1 1060 0
 3711 001a C046     		mov	r8, r8
 3712 001c 02E0     		b	.L272
 3713              	.L289:
1056:.\main.c      ****             break;
 3714              		.loc 1 1056 0
 3715 001e C046     		mov	r8, r8
 3716 0020 00E0     		b	.L272
 3717              	.L290:
1066:.\main.c      ****             
1067:.\main.c      ****         case ph_wait:
1068:.\main.c      ****             break;
 3718              		.loc 1 1068 0
 3719 0022 C046     		mov	r8, r8
 3720              	.L272:
1069:.\main.c      ****     }
1070:.\main.c      ****     
1071:.\main.c      ****     switch(phSensor_state)
 3721              		.loc 1 1071 0
 3722 0024 174B     		ldr	r3, .L291
 3723 0026 1B78     		ldrb	r3, [r3]
 3724 0028 012B     		cmp	r3, #1
 3725 002a 0CD0     		beq	.L279
 3726 002c 02DC     		bgt	.L280
 3727 002e 002B     		cmp	r3, #0
 3728 0030 05D0     		beq	.L281
 3729 0032 24E0     		b	.L271
 3730              	.L280:
 3731 0034 022B     		cmp	r3, #2
 3732 0036 0AD0     		beq	.L282
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 87


 3733 0038 032B     		cmp	r3, #3
 3734 003a 14D0     		beq	.L283
 3735 003c 1FE0     		b	.L271
 3736              	.L281:
1072:.\main.c      ****     { //transitions
1073:.\main.c      ****         case ph_start:
1074:.\main.c      ****             phSensor_state = ph_init;
 3737              		.loc 1 1074 0
 3738 003e 114B     		ldr	r3, .L291
 3739 0040 0122     		mov	r2, #1
 3740 0042 1A70     		strb	r2, [r3]
1075:.\main.c      ****             break;
 3741              		.loc 1 1075 0
 3742 0044 1BE0     		b	.L271
 3743              	.L279:
1076:.\main.c      ****         
1077:.\main.c      ****         case ph_init:
1078:.\main.c      ****             phSensor_state = ph_wait;
 3744              		.loc 1 1078 0
 3745 0046 0F4B     		ldr	r3, .L291
 3746 0048 0322     		mov	r2, #3
 3747 004a 1A70     		strb	r2, [r3]
1079:.\main.c      ****             break;
 3748              		.loc 1 1079 0
 3749 004c 17E0     		b	.L271
 3750              	.L282:
1080:.\main.c      ****         
1081:.\main.c      ****         case ph_execute:
1082:.\main.c      ****             if(PH_FLAG)
 3751              		.loc 1 1082 0
 3752 004e 0E4B     		ldr	r3, .L291+4
 3753 0050 1B78     		ldrb	r3, [r3]
 3754 0052 002B     		cmp	r3, #0
 3755 0054 03D0     		beq	.L284
1083:.\main.c      ****                 phSensor_state = ph_execute;
 3756              		.loc 1 1083 0
 3757 0056 0B4B     		ldr	r3, .L291
 3758 0058 0222     		mov	r2, #2
 3759 005a 1A70     		strb	r2, [r3]
1084:.\main.c      ****             else
1085:.\main.c      ****                 phSensor_state = ph_wait;
1086:.\main.c      ****             break;
 3760              		.loc 1 1086 0
 3761 005c 0FE0     		b	.L271
 3762              	.L284:
1085:.\main.c      ****                 phSensor_state = ph_wait;
 3763              		.loc 1 1085 0
 3764 005e 094B     		ldr	r3, .L291
 3765 0060 0322     		mov	r2, #3
 3766 0062 1A70     		strb	r2, [r3]
 3767              		.loc 1 1086 0
 3768 0064 0BE0     		b	.L271
 3769              	.L283:
1087:.\main.c      ****         
1088:.\main.c      ****         case ph_wait:
1089:.\main.c      ****             if(PH_FLAG)
 3770              		.loc 1 1089 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 88


 3771 0066 084B     		ldr	r3, .L291+4
 3772 0068 1B78     		ldrb	r3, [r3]
 3773 006a 002B     		cmp	r3, #0
 3774 006c 03D0     		beq	.L286
1090:.\main.c      ****                 phSensor_state = ph_execute;
 3775              		.loc 1 1090 0
 3776 006e 054B     		ldr	r3, .L291
 3777 0070 0222     		mov	r2, #2
 3778 0072 1A70     		strb	r2, [r3]
 3779 0074 02E0     		b	.L287
 3780              	.L286:
1091:.\main.c      ****             else
1092:.\main.c      ****                 phSensor_state = ph_wait; 
 3781              		.loc 1 1092 0
 3782 0076 034B     		ldr	r3, .L291
 3783 0078 0322     		mov	r2, #3
 3784 007a 1A70     		strb	r2, [r3]
 3785              	.L287:
1093:.\main.c      ****             break;
 3786              		.loc 1 1093 0
 3787 007c C046     		mov	r8, r8
 3788              	.L271:
1094:.\main.c      ****     }    
1095:.\main.c      **** }
 3789              		.loc 1 1095 0
 3790 007e BD46     		mov	sp, r7
 3791              		@ sp needed
 3792 0080 80BD     		pop	{r7, pc}
 3793              	.L292:
 3794 0082 C046     		.align	2
 3795              	.L291:
 3796 0084 00000000 		.word	phSensor_state
 3797 0088 00000000 		.word	PH_FLAG
 3798              		.cfi_endproc
 3799              	.LFE54:
 3800              		.size	phSensor, .-phSensor
 3801              		.section	.text.initialize,"ax",%progbits
 3802              		.align	2
 3803              		.global	initialize
 3804              		.code	16
 3805              		.thumb_func
 3806              		.type	initialize, %function
 3807              	initialize:
 3808              	.LFB55:
1096:.\main.c      **** 
1097:.\main.c      **** //Initialization function for the program
1098:.\main.c      **** void initialize()
1099:.\main.c      **** {
 3809              		.loc 1 1099 0
 3810              		.cfi_startproc
 3811 0000 80B5     		push	{r7, lr}
 3812              		.cfi_def_cfa_offset 8
 3813              		.cfi_offset 7, -8
 3814              		.cfi_offset 14, -4
 3815 0002 82B0     		sub	sp, sp, #8
 3816              		.cfi_def_cfa_offset 16
 3817 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 89


 3818              		.cfi_def_cfa_register 7
1100:.\main.c      ****     //initialize the wiznet
1101:.\main.c      ****     WIZ_RST_Write(0);
 3819              		.loc 1 1101 0
 3820 0006 0020     		mov	r0, #0
 3821 0008 FFF7FEFF 		bl	WIZ_RST_Write
1102:.\main.c      ****     CyDelay(10);
 3822              		.loc 1 1102 0
 3823 000c 0A20     		mov	r0, #10
 3824 000e FFF7FEFF 		bl	CyDelay
1103:.\main.c      ****     WIZ_RST_Write(1);
 3825              		.loc 1 1103 0
 3826 0012 0120     		mov	r0, #1
 3827 0014 FFF7FEFF 		bl	WIZ_RST_Write
1104:.\main.c      ****     WIZ_SS_Write(1);
 3828              		.loc 1 1104 0
 3829 0018 0120     		mov	r0, #1
 3830 001a FFF7FEFF 		bl	WIZ_SS_Write
 3831              	.LBB2:
1105:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3832              		.loc 1 1105 0
 3833 001e FB1D     		add	r3, r7, #7
 3834 0020 0022     		mov	r2, #0
 3835 0022 1A70     		strb	r2, [r3]
 3836 0024 0DE0     		b	.L294
 3837              	.L297:
1106:.\main.c      ****     {
1107:.\main.c      ****         if(WIZ_RDY_Read())
 3838              		.loc 1 1107 0
 3839 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3840 002a 031C     		mov	r3, r0
 3841 002c 002B     		cmp	r3, #0
 3842 002e 00D0     		beq	.L295
1108:.\main.c      ****         {
1109:.\main.c      ****             break;
 3843              		.loc 1 1109 0
 3844 0030 0BE0     		b	.L296
 3845              	.L295:
1110:.\main.c      ****         }
1111:.\main.c      ****         else
1112:.\main.c      ****         {
1113:.\main.c      ****             CyDelay(4);
 3846              		.loc 1 1113 0
 3847 0032 0420     		mov	r0, #4
 3848 0034 FFF7FEFF 		bl	CyDelay
1105:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3849              		.loc 1 1105 0
 3850 0038 FB1D     		add	r3, r7, #7
 3851 003a 1A78     		ldrb	r2, [r3]
 3852 003c FB1D     		add	r3, r7, #7
 3853 003e 0132     		add	r2, r2, #1
 3854 0040 1A70     		strb	r2, [r3]
 3855              	.L294:
1105:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3856              		.loc 1 1105 0 is_stmt 0 discriminator 1
 3857 0042 FB1D     		add	r3, r7, #7
 3858 0044 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 90


 3859 0046 632B     		cmp	r3, #99
 3860 0048 EDD9     		bls	.L297
 3861              	.L296:
 3862              	.LBE2:
1114:.\main.c      ****         }
1115:.\main.c      ****     }
1116:.\main.c      ****     
1117:.\main.c      ****     //Initialize state variables
1118:.\main.c      ****     baseAzimuth_state = BA_start;
 3863              		.loc 1 1118 0 is_stmt 1
 3864 004a 304B     		ldr	r3, .L298
 3865 004c 0022     		mov	r2, #0
 3866 004e 1A70     		strb	r2, [r3]
1119:.\main.c      ****     wristTilt_state = tilt_start;
 3867              		.loc 1 1119 0
 3868 0050 2F4B     		ldr	r3, .L298+4
 3869 0052 0022     		mov	r2, #0
 3870 0054 1A70     		strb	r2, [r3]
1120:.\main.c      ****     wristRotate_state = rotate_start;
 3871              		.loc 1 1120 0
 3872 0056 2F4B     		ldr	r3, .L298+8
 3873 0058 0022     		mov	r2, #0
 3874 005a 1A70     		strb	r2, [r3]
1121:.\main.c      ****     shoulder_state = shldr_start;
 3875              		.loc 1 1121 0
 3876 005c 2E4B     		ldr	r3, .L298+12
 3877 005e 0022     		mov	r2, #0
 3878 0060 1A70     		strb	r2, [r3]
1122:.\main.c      ****     elbow_state = elbw_start;
 3879              		.loc 1 1122 0
 3880 0062 2E4B     		ldr	r3, .L298+16
 3881 0064 0022     		mov	r2, #0
 3882 0066 1A70     		strb	r2, [r3]
1123:.\main.c      ****     effector_state = eff_start;
 3883              		.loc 1 1123 0
 3884 0068 2D4B     		ldr	r3, .L298+20
 3885 006a 0022     		mov	r2, #0
 3886 006c 1A70     		strb	r2, [r3]
1124:.\main.c      ****     
1125:.\main.c      ****     //start all of our components
1126:.\main.c      ****     SPIM_1_Start();
 3887              		.loc 1 1126 0
 3888 006e FFF7FEFF 		bl	SPIM_1_Start
1127:.\main.c      ****     Clock_pwm_Start();
 3889              		.loc 1 1127 0
 3890 0072 FFF7FEFF 		bl	Clock_pwm_Start
1128:.\main.c      ****     Clock_counter_Start();
 3891              		.loc 1 1128 0
 3892 0076 FFF7FEFF 		bl	Clock_counter_Start
1129:.\main.c      ****     UART_1_Start();
 3893              		.loc 1 1129 0
 3894 007a FFF7FEFF 		bl	UART_1_Start
1130:.\main.c      ****     SHLDR_PWM_Start();
 3895              		.loc 1 1130 0
 3896 007e FFF7FEFF 		bl	SHLDR_PWM_Start
1131:.\main.c      ****     BA_PWM_Start();
 3897              		.loc 1 1131 0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 91


 3898 0082 FFF7FEFF 		bl	BA_PWM_Start
1132:.\main.c      ****     ELBW_PWM_Start();
 3899              		.loc 1 1132 0
 3900 0086 FFF7FEFF 		bl	ELBW_PWM_Start
1133:.\main.c      ****     EFFECTOR_PWM_Start();
 3901              		.loc 1 1133 0
 3902 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
1134:.\main.c      ****     ADC_Start();
 3903              		.loc 1 1134 0
 3904 008e FFF7FEFF 		bl	ADC_Start
1135:.\main.c      ****     ADC_StartConvert();
 3905              		.loc 1 1135 0
 3906 0092 FFF7FEFF 		bl	ADC_StartConvert
1136:.\main.c      ****     
1137:.\main.c      ****     //uint8_t test_byte;
1138:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3907              		.loc 1 1138 0
 3908 0096 234B     		ldr	r3, .L298+24
 3909 0098 0420     		mov	r0, #4
 3910 009a 0121     		mov	r1, #1
 3911 009c 1A1C     		mov	r2, r3
 3912 009e FFF7FEFF 		bl	wiznetInit
1139:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1140:.\main.c      ****     
1141:.\main.c      ****     //Initialize the dynamixels
1142:.\main.c      ****     ServoSpeed(0xFE, 100);
 3913              		.loc 1 1142 0
 3914 00a2 FE20     		mov	r0, #254
 3915 00a4 6421     		mov	r1, #100
 3916 00a6 FFF7FEFF 		bl	ServoSpeed
1143:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3917              		.loc 1 1143 0
 3918 00aa 1F4B     		ldr	r3, .L298+28
 3919 00ac FE20     		mov	r0, #254
 3920 00ae 191C     		mov	r1, r3
 3921 00b0 FFF7FEFF 		bl	SetServoTorque
1144:.\main.c      ****     
1145:.\main.c      ****     LED_Write(1);
 3922              		.loc 1 1145 0
 3923 00b4 0120     		mov	r0, #1
 3924 00b6 FFF7FEFF 		bl	LED_Write
1146:.\main.c      ****     //Initialize our motor drivers
1147:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3925              		.loc 1 1147 0
 3926 00ba 1C4B     		ldr	r3, .L298+32
 3927 00bc 181C     		mov	r0, r3
 3928 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1148:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3929              		.loc 1 1148 0
 3930 00c2 1A4B     		ldr	r3, .L298+32
 3931 00c4 181C     		mov	r0, r3
 3932 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1149:.\main.c      ****     CyDelay(3000);
 3933              		.loc 1 1149 0
 3934 00ca 194B     		ldr	r3, .L298+36
 3935 00cc 181C     		mov	r0, r3
 3936 00ce FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 92


1150:.\main.c      ****     LED_Write(0);
 3937              		.loc 1 1150 0
 3938 00d2 0020     		mov	r0, #0
 3939 00d4 FFF7FEFF 		bl	LED_Write
1151:.\main.c      ****     
1152:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1153:.\main.c      ****     //SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
1154:.\main.c      ****     //SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
1155:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 3940              		.loc 1 1155 0
 3941 00d8 164B     		ldr	r3, .L298+40
 3942 00da 181C     		mov	r0, r3
 3943 00dc FFF7FEFF 		bl	CalibrationElbow
 3944 00e0 031C     		mov	r3, r0
 3945 00e2 1A1C     		mov	r2, r3
 3946 00e4 144B     		ldr	r3, .L298+44
 3947 00e6 1A60     		str	r2, [r3]
1156:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 3948              		.loc 1 1156 0
 3949 00e8 144B     		ldr	r3, .L298+48
 3950 00ea 181C     		mov	r0, r3
 3951 00ec FFF7FEFF 		bl	CalibrationElbow
 3952 00f0 031C     		mov	r3, r0
 3953 00f2 1A1C     		mov	r2, r3
 3954 00f4 124B     		ldr	r3, .L298+52
 3955 00f6 1A60     		str	r2, [r3]
1157:.\main.c      ****     
1158:.\main.c      ****     //helps for generating random arrays
1159:.\main.c      ****     //srand((unsigned) time(&t));
1160:.\main.c      ****     
1161:.\main.c      ****     CyGlobalIntEnable;
 3956              		.loc 1 1161 0
 3957              	@ 1161 ".\main.c" 1
 3958 00f8 62B6     		CPSIE   i
 3959              	@ 0 "" 2
1162:.\main.c      ****     isr_1_StartEx(timer_isr);
 3960              		.loc 1 1162 0
 3961              		.code	16
 3962 00fa 124B     		ldr	r3, .L298+56
 3963 00fc 181C     		mov	r0, r3
 3964 00fe FFF7FEFF 		bl	isr_1_StartEx
1163:.\main.c      ****     Timer_1_Start();
 3965              		.loc 1 1163 0
 3966 0102 FFF7FEFF 		bl	Timer_1_Start
1164:.\main.c      ****     
1165:.\main.c      ****     //UART_TEST_Start();
1166:.\main.c      ****     
1167:.\main.c      **** }
 3967              		.loc 1 1167 0
 3968 0106 BD46     		mov	sp, r7
 3969 0108 02B0     		add	sp, sp, #8
 3970              		@ sp needed
 3971 010a 80BD     		pop	{r7, pc}
 3972              	.L299:
 3973              		.align	2
 3974              	.L298:
 3975 010c 00000000 		.word	baseAzimuth_state
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 93


 3976 0110 00000000 		.word	wristTilt_state
 3977 0114 00000000 		.word	wristRotate_state
 3978 0118 00000000 		.word	shoulder_state
 3979 011c 00000000 		.word	elbow_state
 3980 0120 00000000 		.word	effector_state
 3981 0124 87690000 		.word	27015
 3982 0128 FF030000 		.word	1023
 3983 012c DC050000 		.word	1500
 3984 0130 B80B0000 		.word	3000
 3985 0134 A4060000 		.word	1700
 3986 0138 00000000 		.word	ELBOW_UPPER_BOUND
 3987 013c 14050000 		.word	1300
 3988 0140 00000000 		.word	ELBOW_LOWER_BOUND
 3989 0144 00000000 		.word	timer_isr
 3990              		.cfi_endproc
 3991              	.LFE55:
 3992              		.size	initialize, .-initialize
 3993              		.section	.text.main,"ax",%progbits
 3994              		.align	2
 3995              		.global	main
 3996              		.code	16
 3997              		.thumb_func
 3998              		.type	main, %function
 3999              	main:
 4000              	.LFB56:
1168:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1169:.\main.c      **** int main()
1170:.\main.c      **** {  
 4001              		.loc 1 1170 0
 4002              		.cfi_startproc
 4003 0000 90B5     		push	{r4, r7, lr}
 4004              		.cfi_def_cfa_offset 12
 4005              		.cfi_offset 4, -12
 4006              		.cfi_offset 7, -8
 4007              		.cfi_offset 14, -4
 4008 0002 B7B0     		sub	sp, sp, #220
 4009              		.cfi_def_cfa_offset 232
 4010 0004 00AF     		add	r7, sp, #0
 4011              		.cfi_def_cfa_register 7
1171:.\main.c      ****     //Define variables
1172:.\main.c      ****     //for testing
1173:.\main.c      **** //    time_t t; 
1174:.\main.c      **** //    char time_array[8];
1175:.\main.c      **** //    uint8 counter;
1176:.\main.c      **** //    int direction = 0;
1177:.\main.c      ****     
1178:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1179:.\main.c      ****     
1180:.\main.c      ****     uint8 BA_cspot;
1181:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1182:.\main.c      ****     uint8 shldr_cspot;
1183:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1184:.\main.c      ****     uint8 elbw_cspot;
1185:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1186:.\main.c      ****     uint8 WT_cspot;
1187:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1188:.\main.c      ****     uint8 WR_cspot;
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 94


1189:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1190:.\main.c      ****     
1191:.\main.c      ****     //for testing
1192:.\main.c      **** //    int increasing = 1;
1193:.\main.c      **** //    int first_count;
1194:.\main.c      **** //    int second_count;
1195:.\main.c      **** //    int temp_code_time;
1196:.\main.c      **** //    int code_time = 0;
1197:.\main.c      ****     
1198:.\main.c      ****     
1199:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4012              		.loc 1 1199 0
 4013 0006 3B1C     		mov	r3, r7
 4014 0008 D233     		add	r3, r3, #210
 4015 000a 0022     		mov	r2, #0
 4016 000c 1A70     		strb	r2, [r3]
1200:.\main.c      ****     int16 temp_val = 1500; 
 4017              		.loc 1 1200 0
 4018 000e 3B1C     		mov	r3, r7
 4019 0010 CA33     		add	r3, r3, #202
 4020 0012 5D4A     		ldr	r2, .L312
 4021 0014 1A80     		strh	r2, [r3]
1201:.\main.c      ****     
1202:.\main.c      ****     initialize();
 4022              		.loc 1 1202 0
 4023 0016 FFF7FEFF 		bl	initialize
 4024              	.L310:
1203:.\main.c      **** //    uint8 i;
1204:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1205:.\main.c      **** //    {
1206:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1207:.\main.c      **** //    }
1208:.\main.c      **** 
1209:.\main.c      ****     for(;;)
1210:.\main.c      ****     {
1211:.\main.c      ****         //UART_TEST_UartPutChar(31);
1212:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1213:.\main.c      ****         
1214:.\main.c      ****         if(stop_elb_dn_Read())
 4025              		.loc 1 1214 0
 4026 001a FFF7FEFF 		bl	stop_elb_dn_Read
 4027 001e 031C     		mov	r3, r0
 4028 0020 002B     		cmp	r3, #0
 4029 0022 03D0     		beq	.L301
1215:.\main.c      ****         {
1216:.\main.c      ****             LED_Write(1);
 4030              		.loc 1 1216 0
 4031 0024 0120     		mov	r0, #1
 4032 0026 FFF7FEFF 		bl	LED_Write
 4033 002a 02E0     		b	.L302
 4034              	.L301:
1217:.\main.c      ****         }
1218:.\main.c      ****         else
1219:.\main.c      ****         {
1220:.\main.c      ****             LED_Write(0);
 4035              		.loc 1 1220 0
 4036 002c 0020     		mov	r0, #0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 95


 4037 002e FFF7FEFF 		bl	LED_Write
 4038              	.L302:
1221:.\main.c      ****         }
1222:.\main.c      ****         
1223:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4039              		.loc 1 1223 0
 4040 0032 FFF7FEFF 		bl	WIZ_INT_Read
 4041 0036 031C     		mov	r3, r0
 4042 0038 002B     		cmp	r3, #0
 4043 003a 1DD1     		bne	.L303
1224:.\main.c      ****         {
1225:.\main.c      ****             wiznetClearInterrupts();
 4044              		.loc 1 1225 0
 4045 003c FFF7FEFF 		bl	wiznetClearInterrupts
1226:.\main.c      ****             fill_data_array();
 4046              		.loc 1 1226 0
 4047 0040 FFF7FEFF 		bl	fill_data_array
1227:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1228:.\main.c      ****             BA_FLAG = 1;
 4048              		.loc 1 1228 0
 4049 0044 514B     		ldr	r3, .L312+4
 4050 0046 0122     		mov	r2, #1
 4051 0048 1A70     		strb	r2, [r3]
1229:.\main.c      ****             WR_FLAG = 1;
 4052              		.loc 1 1229 0
 4053 004a 514B     		ldr	r3, .L312+8
 4054 004c 0122     		mov	r2, #1
 4055 004e 1A70     		strb	r2, [r3]
1230:.\main.c      ****             WT_FLAG = 1;
 4056              		.loc 1 1230 0
 4057 0050 504B     		ldr	r3, .L312+12
 4058 0052 0122     		mov	r2, #1
 4059 0054 1A70     		strb	r2, [r3]
1231:.\main.c      ****             SHOULDER_FLAG = 1;
 4060              		.loc 1 1231 0
 4061 0056 504B     		ldr	r3, .L312+16
 4062 0058 0122     		mov	r2, #1
 4063 005a 1A70     		strb	r2, [r3]
1232:.\main.c      ****             ELBOW_FLAG = 1;
 4064              		.loc 1 1232 0
 4065 005c 4F4B     		ldr	r3, .L312+20
 4066 005e 0122     		mov	r2, #1
 4067 0060 1A70     		strb	r2, [r3]
1233:.\main.c      ****             EFFECTOR_FLAG = 1;
 4068              		.loc 1 1233 0
 4069 0062 4F4B     		ldr	r3, .L312+24
 4070 0064 0122     		mov	r2, #1
 4071 0066 1A70     		strb	r2, [r3]
1234:.\main.c      ****             PH_FLAG = 1;
 4072              		.loc 1 1234 0
 4073 0068 4E4B     		ldr	r3, .L312+28
 4074 006a 0122     		mov	r2, #1
 4075 006c 1A70     		strb	r2, [r3]
1235:.\main.c      ****             fs_count = 0;
 4076              		.loc 1 1235 0
 4077 006e 3B1C     		mov	r3, r7
 4078 0070 D233     		add	r3, r3, #210
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 96


 4079 0072 0022     		mov	r2, #0
 4080 0074 1A70     		strb	r2, [r3]
 4081 0076 06E0     		b	.L304
 4082              	.L303:
1236:.\main.c      ****             //wiznet = 0; //for testing
1237:.\main.c      ****         }
1238:.\main.c      ****         else
1239:.\main.c      ****         {
1240:.\main.c      ****             fs_count += 1;
 4083              		.loc 1 1240 0
 4084 0078 3B1C     		mov	r3, r7
 4085 007a D233     		add	r3, r3, #210
 4086 007c 3A1C     		mov	r2, r7
 4087 007e D232     		add	r2, r2, #210
 4088 0080 1278     		ldrb	r2, [r2]
 4089 0082 0132     		add	r2, r2, #1
 4090 0084 1A70     		strb	r2, [r3]
 4091              	.L304:
1241:.\main.c      ****         }
1242:.\main.c      ****         
1243:.\main.c      ****         if(fs_count >= 50)
 4092              		.loc 1 1243 0
 4093 0086 3B1C     		mov	r3, r7
 4094 0088 D233     		add	r3, r3, #210
 4095 008a 1B78     		ldrb	r3, [r3]
 4096 008c 312B     		cmp	r3, #49
 4097 008e 2CD9     		bls	.L305
1244:.\main.c      ****         {
1245:.\main.c      ****             temp_val = 1500;
 4098              		.loc 1 1245 0
 4099 0090 3B1C     		mov	r3, r7
 4100 0092 CA33     		add	r3, r3, #202
 4101 0094 3C4A     		ldr	r2, .L312
 4102 0096 1A80     		strh	r2, [r3]
 4103              	.LBB3:
1246:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4104              		.loc 1 1246 0
 4105 0098 0023     		mov	r3, #0
 4106 009a CC20     		mov	r0, #204
 4107 009c C019     		add	r0, r0, r7
 4108 009e 0360     		str	r3, [r0]
 4109 00a0 1DE0     		b	.L306
 4110              	.L307:
1247:.\main.c      ****             {
1248:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4111              		.loc 1 1248 0 discriminator 2
 4112 00a2 3B1C     		mov	r3, r7
 4113 00a4 CA33     		add	r3, r3, #202
 4114 00a6 0022     		mov	r2, #0
 4115 00a8 9B5E     		ldrsh	r3, [r3, r2]
 4116 00aa 1B12     		asr	r3, r3, #8
 4117 00ac 9BB2     		uxth	r3, r3
 4118 00ae DAB2     		uxtb	r2, r3
 4119 00b0 3D49     		ldr	r1, .L312+32
 4120 00b2 CC20     		mov	r0, #204
 4121 00b4 C019     		add	r0, r0, r7
 4122 00b6 0368     		ldr	r3, [r0]
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 97


 4123 00b8 CB18     		add	r3, r1, r3
 4124 00ba 1A70     		strb	r2, [r3]
1249:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4125              		.loc 1 1249 0 discriminator 2
 4126 00bc CC22     		mov	r2, #204
 4127 00be D219     		add	r2, r2, r7
 4128 00c0 1368     		ldr	r3, [r2]
 4129 00c2 0133     		add	r3, r3, #1
 4130 00c4 3A1C     		mov	r2, r7
 4131 00c6 CA32     		add	r2, r2, #202
 4132 00c8 1288     		ldrh	r2, [r2]
 4133 00ca D1B2     		uxtb	r1, r2
 4134 00cc 364A     		ldr	r2, .L312+32
 4135 00ce D154     		strb	r1, [r2, r3]
1246:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4136              		.loc 1 1246 0 discriminator 2
 4137 00d0 CC20     		mov	r0, #204
 4138 00d2 C019     		add	r0, r0, r7
 4139 00d4 0368     		ldr	r3, [r0]
 4140 00d6 0233     		add	r3, r3, #2
 4141 00d8 CC22     		mov	r2, #204
 4142 00da D219     		add	r2, r2, r7
 4143 00dc 1360     		str	r3, [r2]
 4144              	.L306:
1246:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4145              		.loc 1 1246 0 is_stmt 0 discriminator 1
 4146 00de CC20     		mov	r0, #204
 4147 00e0 C019     		add	r0, r0, r7
 4148 00e2 0368     		ldr	r3, [r0]
 4149 00e4 152B     		cmp	r3, #21
 4150 00e6 DCDD     		ble	.L307
 4151              	.LBE3:
1250:.\main.c      ****             }
1251:.\main.c      ****         }
1252:.\main.c      ****         else
1253:.\main.c      ****         {
1254:.\main.c      ****         
1255:.\main.c      ****         //if(wiznet gives a complete packet)
1256:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1257:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1258:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1259:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1260:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1261:.\main.c      ****             effector();
1262:.\main.c      ****             send_feedback(); //send feedback onece every tick
1263:.\main.c      ****         }
1264:.\main.c      **** 
1265:.\main.c      **** //        else{dropped_packets++}
1266:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1267:.\main.c      **** //        LED_Write(0);
1268:.\main.c      **** //        temp_code_time = second_count - first_count;
1269:.\main.c      **** //        if(temp_code_time > code_time)
1270:.\main.c      **** //        {
1271:.\main.c      **** //            code_time = temp_code_time;
1272:.\main.c      **** //            itoa(code_time, time_array);
1273:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1274:.\main.c      **** //        }
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 98


1275:.\main.c      ****         
1276:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4152              		.loc 1 1276 0 is_stmt 1
 4153 00e8 43E0     		b	.L311
 4154              	.L305:
1256:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4155              		.loc 1 1256 0
 4156 00ea 3C1C     		mov	r4, r7
 4157 00ec D734     		add	r4, r4, #215
 4158 00ee 3B1C     		mov	r3, r7
 4159 00f0 D733     		add	r3, r3, #215
 4160 00f2 1A78     		ldrb	r2, [r3]
 4161 00f4 3B1C     		mov	r3, r7
 4162 00f6 A033     		add	r3, r3, #160
 4163 00f8 101C     		mov	r0, r2
 4164 00fa 191C     		mov	r1, r3
 4165 00fc FFF7FEFF 		bl	baseAzimuth
 4166 0100 031C     		mov	r3, r0
 4167 0102 2370     		strb	r3, [r4]
1257:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4168              		.loc 1 1257 0
 4169 0104 3C1C     		mov	r4, r7
 4170 0106 D634     		add	r4, r4, #214
 4171 0108 3B1C     		mov	r3, r7
 4172 010a D633     		add	r3, r3, #214
 4173 010c 1A78     		ldrb	r2, [r3]
 4174 010e 3B1C     		mov	r3, r7
 4175 0110 7833     		add	r3, r3, #120
 4176 0112 101C     		mov	r0, r2
 4177 0114 191C     		mov	r1, r3
 4178 0116 FFF7FEFF 		bl	shoulder
 4179 011a 031C     		mov	r3, r0
 4180 011c 2370     		strb	r3, [r4]
1258:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4181              		.loc 1 1258 0
 4182 011e 3C1C     		mov	r4, r7
 4183 0120 D534     		add	r4, r4, #213
 4184 0122 3B1C     		mov	r3, r7
 4185 0124 D533     		add	r3, r3, #213
 4186 0126 1A78     		ldrb	r2, [r3]
 4187 0128 3B1C     		mov	r3, r7
 4188 012a 5033     		add	r3, r3, #80
 4189 012c 101C     		mov	r0, r2
 4190 012e 191C     		mov	r1, r3
 4191 0130 FFF7FEFF 		bl	elbow
 4192 0134 031C     		mov	r3, r0
 4193 0136 2370     		strb	r3, [r4]
1259:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4194              		.loc 1 1259 0
 4195 0138 3C1C     		mov	r4, r7
 4196 013a D434     		add	r4, r4, #212
 4197 013c 3B1C     		mov	r3, r7
 4198 013e D433     		add	r3, r3, #212
 4199 0140 1A78     		ldrb	r2, [r3]
 4200 0142 3B1C     		mov	r3, r7
 4201 0144 2833     		add	r3, r3, #40
 4202 0146 101C     		mov	r0, r2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 99


 4203 0148 191C     		mov	r1, r3
 4204 014a FFF7FEFF 		bl	wristTilt
 4205 014e 031C     		mov	r3, r0
 4206 0150 2370     		strb	r3, [r4]
1260:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4207              		.loc 1 1260 0
 4208 0152 3C1C     		mov	r4, r7
 4209 0154 D334     		add	r4, r4, #211
 4210 0156 3B1C     		mov	r3, r7
 4211 0158 D333     		add	r3, r3, #211
 4212 015a 1A78     		ldrb	r2, [r3]
 4213 015c 3B1C     		mov	r3, r7
 4214 015e 101C     		mov	r0, r2
 4215 0160 191C     		mov	r1, r3
 4216 0162 FFF7FEFF 		bl	wristRotate
 4217 0166 031C     		mov	r3, r0
 4218 0168 2370     		strb	r3, [r4]
1261:.\main.c      ****             effector();
 4219              		.loc 1 1261 0
 4220 016a FFF7FEFF 		bl	effector
1262:.\main.c      ****             send_feedback(); //send feedback onece every tick
 4221              		.loc 1 1262 0
 4222 016e FFF7FEFF 		bl	send_feedback
 4223              	.L311:
 4224              		.loc 1 1276 0
 4225 0172 C046     		mov	r8, r8
 4226              	.L309:
 4227              		.loc 1 1276 0 is_stmt 0 discriminator 1
 4228 0174 0D4B     		ldr	r3, .L312+36
 4229 0176 1B78     		ldrb	r3, [r3]
 4230 0178 DBB2     		uxtb	r3, r3
 4231 017a 002B     		cmp	r3, #0
 4232 017c FAD0     		beq	.L309
1277:.\main.c      ****         timerFlag = 0;
 4233              		.loc 1 1277 0 is_stmt 1
 4234 017e 0B4B     		ldr	r3, .L312+36
 4235 0180 0022     		mov	r2, #0
 4236 0182 1A70     		strb	r2, [r3]
1278:.\main.c      ****     
1279:.\main.c      ****         
1280:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1281:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1282:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1283:.\main.c      **** //        counter++;
1284:.\main.c      **** //        
1285:.\main.c      **** //        if(counter == 50)
1286:.\main.c      **** //        {
1287:.\main.c      **** //        
1288:.\main.c      **** //            if(increasing)
1289:.\main.c      **** //            {
1290:.\main.c      **** //                temp_val += 100;
1291:.\main.c      **** //                if(temp_val == 1000)
1292:.\main.c      **** //                {
1293:.\main.c      **** //                    increasing = 0;
1294:.\main.c      **** //                }
1295:.\main.c      **** //            }
1296:.\main.c      **** //            else
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 100


1297:.\main.c      **** //            {
1298:.\main.c      **** //                temp_val -= 100;
1299:.\main.c      **** //                if(temp_val == -1000)
1300:.\main.c      **** //                {
1301:.\main.c      **** //                    increasing = 1;   
1302:.\main.c      **** //                }
1303:.\main.c      **** //            }
1304:.\main.c      **** //            
1305:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1306:.\main.c      **** //            //int16 forward = 1000;
1307:.\main.c      **** //            //int16 backward = -1000;
1308:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1309:.\main.c      **** //            {
1310:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1311:.\main.c      **** //                //test_array[i] = random_number >> 8;
1312:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1313:.\main.c      **** //                test_array[i] = temp_val >> 8;
1314:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1315:.\main.c      **** //            }
1316:.\main.c      **** ////            counter = 0;
1317:.\main.c      **** //            wiznet = 1;
1318:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 4237              		.loc 1 1318 0
 4238 0184 49E7     		b	.L310
 4239              	.L313:
 4240 0186 C046     		.align	2
 4241              	.L312:
 4242 0188 DC050000 		.word	1500
 4243 018c 00000000 		.word	BA_FLAG
 4244 0190 00000000 		.word	WR_FLAG
 4245 0194 00000000 		.word	WT_FLAG
 4246 0198 00000000 		.word	SHOULDER_FLAG
 4247 019c 00000000 		.word	ELBOW_FLAG
 4248 01a0 00000000 		.word	EFFECTOR_FLAG
 4249 01a4 00000000 		.word	PH_FLAG
 4250 01a8 00000000 		.word	data_array
 4251 01ac 00000000 		.word	timerFlag
 4252              		.cfi_endproc
 4253              	.LFE56:
 4254              		.size	main, .-main
 4255              		.text
 4256              	.Letext0:
 4257              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 4258              		.file 3 ".\\main.h"
 4259              		.section	.debug_info,"",%progbits
 4260              	.Ldebug_info0:
 4261 0000 790B0000 		.4byte	0xb79
 4262 0004 0400     		.2byte	0x4
 4263 0006 00000000 		.4byte	.Ldebug_abbrev0
 4264 000a 04       		.byte	0x4
 4265 000b 01       		.uleb128 0x1
 4266 000c 12060000 		.4byte	.LASF155
 4267 0010 01       		.byte	0x1
 4268 0011 87070000 		.4byte	.LASF156
 4269 0015 89030000 		.4byte	.LASF157
 4270 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4271 001d 00000000 		.4byte	0
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 101


 4272 0021 00000000 		.4byte	.Ldebug_line0
 4273 0025 02       		.uleb128 0x2
 4274 0026 01       		.byte	0x1
 4275 0027 06       		.byte	0x6
 4276 0028 B5060000 		.4byte	.LASF0
 4277 002c 02       		.uleb128 0x2
 4278 002d 01       		.byte	0x1
 4279 002e 08       		.byte	0x8
 4280 002f 9F050000 		.4byte	.LASF1
 4281 0033 02       		.uleb128 0x2
 4282 0034 02       		.byte	0x2
 4283 0035 05       		.byte	0x5
 4284 0036 79040000 		.4byte	.LASF2
 4285 003a 02       		.uleb128 0x2
 4286 003b 02       		.byte	0x2
 4287 003c 07       		.byte	0x7
 4288 003d D8060000 		.4byte	.LASF3
 4289 0041 02       		.uleb128 0x2
 4290 0042 04       		.byte	0x4
 4291 0043 05       		.byte	0x5
 4292 0044 9E040000 		.4byte	.LASF4
 4293 0048 02       		.uleb128 0x2
 4294 0049 04       		.byte	0x4
 4295 004a 07       		.byte	0x7
 4296 004b 3B050000 		.4byte	.LASF5
 4297 004f 02       		.uleb128 0x2
 4298 0050 08       		.byte	0x8
 4299 0051 05       		.byte	0x5
 4300 0052 BE020000 		.4byte	.LASF6
 4301 0056 02       		.uleb128 0x2
 4302 0057 08       		.byte	0x8
 4303 0058 07       		.byte	0x7
 4304 0059 78010000 		.4byte	.LASF7
 4305 005d 03       		.uleb128 0x3
 4306 005e 04       		.byte	0x4
 4307 005f 05       		.byte	0x5
 4308 0060 696E7400 		.ascii	"int\000"
 4309 0064 02       		.uleb128 0x2
 4310 0065 04       		.byte	0x4
 4311 0066 07       		.byte	0x7
 4312 0067 80000000 		.4byte	.LASF8
 4313 006b 04       		.uleb128 0x4
 4314 006c 26070000 		.4byte	.LASF9
 4315 0070 02       		.byte	0x2
 4316 0071 A1       		.byte	0xa1
 4317 0072 2C000000 		.4byte	0x2c
 4318 0076 04       		.uleb128 0x4
 4319 0077 80020000 		.4byte	.LASF10
 4320 007b 02       		.byte	0x2
 4321 007c A2       		.byte	0xa2
 4322 007d 3A000000 		.4byte	0x3a
 4323 0081 04       		.uleb128 0x4
 4324 0082 61030000 		.4byte	.LASF11
 4325 0086 02       		.byte	0x2
 4326 0087 A3       		.byte	0xa3
 4327 0088 48000000 		.4byte	0x48
 4328 008c 04       		.uleb128 0x4
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 102


 4329 008d 8E020000 		.4byte	.LASF12
 4330 0091 02       		.byte	0x2
 4331 0092 A4       		.byte	0xa4
 4332 0093 25000000 		.4byte	0x25
 4333 0097 04       		.uleb128 0x4
 4334 0098 A0000000 		.4byte	.LASF13
 4335 009c 02       		.byte	0x2
 4336 009d A5       		.byte	0xa5
 4337 009e 33000000 		.4byte	0x33
 4338 00a2 02       		.uleb128 0x2
 4339 00a3 04       		.byte	0x4
 4340 00a4 04       		.byte	0x4
 4341 00a5 52010000 		.4byte	.LASF14
 4342 00a9 02       		.uleb128 0x2
 4343 00aa 08       		.byte	0x8
 4344 00ab 04       		.byte	0x4
 4345 00ac 2C070000 		.4byte	.LASF15
 4346 00b0 02       		.uleb128 0x2
 4347 00b1 01       		.byte	0x1
 4348 00b2 08       		.byte	0x8
 4349 00b3 7B020000 		.4byte	.LASF16
 4350 00b7 05       		.uleb128 0x5
 4351 00b8 6B000000 		.4byte	0x6b
 4352 00bc 02       		.uleb128 0x2
 4353 00bd 04       		.byte	0x4
 4354 00be 07       		.byte	0x7
 4355 00bf 32050000 		.4byte	.LASF17
 4356 00c3 06       		.uleb128 0x6
 4357 00c4 E2040000 		.4byte	.LASF22
 4358 00c8 01       		.byte	0x1
 4359 00c9 01       		.byte	0x1
 4360 00ca 7801     		.2byte	0x178
 4361 00cc E9000000 		.4byte	0xe9
 4362 00d0 07       		.uleb128 0x7
 4363 00d1 1A010000 		.4byte	.LASF18
 4364 00d5 00       		.sleb128 0
 4365 00d6 07       		.uleb128 0x7
 4366 00d7 0C000000 		.4byte	.LASF19
 4367 00db 01       		.sleb128 1
 4368 00dc 07       		.uleb128 0x7
 4369 00dd A7040000 		.4byte	.LASF20
 4370 00e1 02       		.sleb128 2
 4371 00e2 07       		.uleb128 0x7
 4372 00e3 13070000 		.4byte	.LASF21
 4373 00e7 03       		.sleb128 3
 4374 00e8 00       		.byte	0
 4375 00e9 06       		.uleb128 0x6
 4376 00ea FD020000 		.4byte	.LASF23
 4377 00ee 01       		.byte	0x1
 4378 00ef 01       		.byte	0x1
 4379 00f0 E001     		.2byte	0x1e0
 4380 00f2 0F010000 		.4byte	0x10f
 4381 00f6 07       		.uleb128 0x7
 4382 00f7 F8000000 		.4byte	.LASF24
 4383 00fb 00       		.sleb128 0
 4384 00fc 07       		.uleb128 0x7
 4385 00fd 06060000 		.4byte	.LASF25
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 103


 4386 0101 01       		.sleb128 1
 4387 0102 07       		.uleb128 0x7
 4388 0103 61040000 		.4byte	.LASF26
 4389 0107 02       		.sleb128 2
 4390 0108 07       		.uleb128 0x7
 4391 0109 67050000 		.4byte	.LASF27
 4392 010d 03       		.sleb128 3
 4393 010e 00       		.byte	0
 4394 010f 06       		.uleb128 0x6
 4395 0110 61000000 		.4byte	.LASF28
 4396 0114 01       		.byte	0x1
 4397 0115 01       		.byte	0x1
 4398 0116 4B02     		.2byte	0x24b
 4399 0118 35010000 		.4byte	0x135
 4400 011c 07       		.uleb128 0x7
 4401 011d F0030000 		.4byte	.LASF29
 4402 0121 00       		.sleb128 0
 4403 0122 07       		.uleb128 0x7
 4404 0123 90070000 		.4byte	.LASF30
 4405 0127 01       		.sleb128 1
 4406 0128 07       		.uleb128 0x7
 4407 0129 4D050000 		.4byte	.LASF31
 4408 012d 02       		.sleb128 2
 4409 012e 07       		.uleb128 0x7
 4410 012f EB060000 		.4byte	.LASF32
 4411 0133 03       		.sleb128 3
 4412 0134 00       		.byte	0
 4413 0135 06       		.uleb128 0x6
 4414 0136 D4020000 		.4byte	.LASF33
 4415 013a 01       		.byte	0x1
 4416 013b 01       		.byte	0x1
 4417 013c DF02     		.2byte	0x2df
 4418 013e 5B010000 		.4byte	0x15b
 4419 0142 07       		.uleb128 0x7
 4420 0143 88050000 		.4byte	.LASF34
 4421 0147 00       		.sleb128 0
 4422 0148 07       		.uleb128 0x7
 4423 0149 B3020000 		.4byte	.LASF35
 4424 014d 01       		.sleb128 1
 4425 014e 07       		.uleb128 0x7
 4426 014f DE050000 		.4byte	.LASF36
 4427 0153 02       		.sleb128 2
 4428 0154 07       		.uleb128 0x7
 4429 0155 45020000 		.4byte	.LASF37
 4430 0159 03       		.sleb128 3
 4431 015a 00       		.byte	0
 4432 015b 06       		.uleb128 0x6
 4433 015c 8D000000 		.4byte	.LASF38
 4434 0160 01       		.byte	0x1
 4435 0161 01       		.byte	0x1
 4436 0162 7303     		.2byte	0x373
 4437 0164 81010000 		.4byte	0x181
 4438 0168 07       		.uleb128 0x7
 4439 0169 C2000000 		.4byte	.LASF39
 4440 016d 00       		.sleb128 0
 4441 016e 07       		.uleb128 0x7
 4442 016f 58010000 		.4byte	.LASF40
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 104


 4443 0173 01       		.sleb128 1
 4444 0174 07       		.uleb128 0x7
 4445 0175 56000000 		.4byte	.LASF41
 4446 0179 02       		.sleb128 2
 4447 017a 07       		.uleb128 0x7
 4448 017b DA040000 		.4byte	.LASF42
 4449 017f 03       		.sleb128 3
 4450 0180 00       		.byte	0
 4451 0181 06       		.uleb128 0x6
 4452 0182 3C030000 		.4byte	.LASF43
 4453 0186 01       		.byte	0x1
 4454 0187 01       		.byte	0x1
 4455 0188 D703     		.2byte	0x3d7
 4456 018a A7010000 		.4byte	0x1a7
 4457 018e 07       		.uleb128 0x7
 4458 018f 04020000 		.4byte	.LASF44
 4459 0193 00       		.sleb128 0
 4460 0194 07       		.uleb128 0x7
 4461 0195 C9050000 		.4byte	.LASF45
 4462 0199 01       		.sleb128 1
 4463 019a 07       		.uleb128 0x7
 4464 019b B4010000 		.4byte	.LASF46
 4465 019f 02       		.sleb128 2
 4466 01a0 07       		.uleb128 0x7
 4467 01a1 12050000 		.4byte	.LASF47
 4468 01a5 03       		.sleb128 3
 4469 01a6 00       		.byte	0
 4470 01a7 06       		.uleb128 0x6
 4471 01a8 50020000 		.4byte	.LASF48
 4472 01ac 01       		.byte	0x1
 4473 01ad 01       		.byte	0x1
 4474 01ae 1904     		.2byte	0x419
 4475 01b0 CD010000 		.4byte	0x1cd
 4476 01b4 07       		.uleb128 0x7
 4477 01b5 33030000 		.4byte	.LASF49
 4478 01b9 00       		.sleb128 0
 4479 01ba 07       		.uleb128 0x7
 4480 01bb 3E070000 		.4byte	.LASF50
 4481 01bf 01       		.sleb128 1
 4482 01c0 07       		.uleb128 0x7
 4483 01c1 B7000000 		.4byte	.LASF51
 4484 01c5 02       		.sleb128 2
 4485 01c6 07       		.uleb128 0x7
 4486 01c7 FE050000 		.4byte	.LASF52
 4487 01cb 03       		.sleb128 3
 4488 01cc 00       		.byte	0
 4489 01cd 08       		.uleb128 0x8
 4490 01ce B4040000 		.4byte	.LASF88
 4491 01d2 01       		.byte	0x1
 4492 01d3 0A       		.byte	0xa
 4493 01d4 00000000 		.4byte	.LFB34
 4494 01d8 28000000 		.4byte	.LFE34-.LFB34
 4495 01dc 01       		.uleb128 0x1
 4496 01dd 9C       		.byte	0x9c
 4497 01de F1010000 		.4byte	0x1f1
 4498 01e2 09       		.uleb128 0x9
 4499 01e3 4E070000 		.4byte	.LASF53
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 105


 4500 01e7 01       		.byte	0x1
 4501 01e8 0C       		.byte	0xc
 4502 01e9 81000000 		.4byte	0x81
 4503 01ed 02       		.uleb128 0x2
 4504 01ee 91       		.byte	0x91
 4505 01ef 74       		.sleb128 -12
 4506 01f0 00       		.byte	0
 4507 01f1 0A       		.uleb128 0xa
 4508 01f2 A6000000 		.4byte	.LASF59
 4509 01f6 01       		.byte	0x1
 4510 01f7 2F       		.byte	0x2f
 4511 01f8 76000000 		.4byte	0x76
 4512 01fc 00000000 		.4byte	.LFB35
 4513 0200 B8010000 		.4byte	.LFE35-.LFB35
 4514 0204 01       		.uleb128 0x1
 4515 0205 9C       		.byte	0x9c
 4516 0206 6B020000 		.4byte	0x26b
 4517 020a 0B       		.uleb128 0xb
 4518 020b 1B050000 		.4byte	.LASF61
 4519 020f 01       		.byte	0x1
 4520 0210 2F       		.byte	0x2f
 4521 0211 76000000 		.4byte	0x76
 4522 0215 02       		.uleb128 0x2
 4523 0216 91       		.byte	0x91
 4524 0217 5E       		.sleb128 -34
 4525 0218 09       		.uleb128 0x9
 4526 0219 A4020000 		.4byte	.LASF54
 4527 021d 01       		.byte	0x1
 4528 021e 31       		.byte	0x31
 4529 021f 6B000000 		.4byte	0x6b
 4530 0223 02       		.uleb128 0x2
 4531 0224 91       		.byte	0x91
 4532 0225 69       		.sleb128 -23
 4533 0226 0C       		.uleb128 0xc
 4534 0227 6900     		.ascii	"i\000"
 4535 0229 01       		.byte	0x1
 4536 022a 32       		.byte	0x32
 4537 022b 6B000000 		.4byte	0x6b
 4538 022f 02       		.uleb128 0x2
 4539 0230 91       		.byte	0x91
 4540 0231 6F       		.sleb128 -17
 4541 0232 09       		.uleb128 0x9
 4542 0233 5B030000 		.4byte	.LASF55
 4543 0237 01       		.byte	0x1
 4544 0238 33       		.byte	0x33
 4545 0239 76000000 		.4byte	0x76
 4546 023d 02       		.uleb128 0x2
 4547 023e 91       		.byte	0x91
 4548 023f 6C       		.sleb128 -20
 4549 0240 09       		.uleb128 0x9
 4550 0241 D0060000 		.4byte	.LASF56
 4551 0245 01       		.byte	0x1
 4552 0246 34       		.byte	0x34
 4553 0247 76000000 		.4byte	0x76
 4554 024b 02       		.uleb128 0x2
 4555 024c 91       		.byte	0x91
 4556 024d 6A       		.sleb128 -22
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 106


 4557 024e 09       		.uleb128 0x9
 4558 024f 35040000 		.4byte	.LASF57
 4559 0253 01       		.byte	0x1
 4560 0254 35       		.byte	0x35
 4561 0255 81000000 		.4byte	0x81
 4562 0259 02       		.uleb128 0x2
 4563 025a 91       		.byte	0x91
 4564 025b 64       		.sleb128 -28
 4565 025c 09       		.uleb128 0x9
 4566 025d A1060000 		.4byte	.LASF58
 4567 0261 01       		.byte	0x1
 4568 0262 36       		.byte	0x36
 4569 0263 97000000 		.4byte	0x97
 4570 0267 02       		.uleb128 0x2
 4571 0268 91       		.byte	0x91
 4572 0269 62       		.sleb128 -30
 4573 026a 00       		.byte	0
 4574 026b 0A       		.uleb128 0xa
 4575 026c 23020000 		.4byte	.LASF60
 4576 0270 01       		.byte	0x1
 4577 0271 6F       		.byte	0x6f
 4578 0272 76000000 		.4byte	0x76
 4579 0276 00000000 		.4byte	.LFB36
 4580 027a B8010000 		.4byte	.LFE36-.LFB36
 4581 027e 01       		.uleb128 0x1
 4582 027f 9C       		.byte	0x9c
 4583 0280 E5020000 		.4byte	0x2e5
 4584 0284 0B       		.uleb128 0xb
 4585 0285 1B050000 		.4byte	.LASF61
 4586 0289 01       		.byte	0x1
 4587 028a 6F       		.byte	0x6f
 4588 028b 76000000 		.4byte	0x76
 4589 028f 02       		.uleb128 0x2
 4590 0290 91       		.byte	0x91
 4591 0291 5E       		.sleb128 -34
 4592 0292 09       		.uleb128 0x9
 4593 0293 A4020000 		.4byte	.LASF54
 4594 0297 01       		.byte	0x1
 4595 0298 71       		.byte	0x71
 4596 0299 6B000000 		.4byte	0x6b
 4597 029d 02       		.uleb128 0x2
 4598 029e 91       		.byte	0x91
 4599 029f 69       		.sleb128 -23
 4600 02a0 0C       		.uleb128 0xc
 4601 02a1 6900     		.ascii	"i\000"
 4602 02a3 01       		.byte	0x1
 4603 02a4 72       		.byte	0x72
 4604 02a5 6B000000 		.4byte	0x6b
 4605 02a9 02       		.uleb128 0x2
 4606 02aa 91       		.byte	0x91
 4607 02ab 6F       		.sleb128 -17
 4608 02ac 09       		.uleb128 0x9
 4609 02ad 5B030000 		.4byte	.LASF55
 4610 02b1 01       		.byte	0x1
 4611 02b2 73       		.byte	0x73
 4612 02b3 76000000 		.4byte	0x76
 4613 02b7 02       		.uleb128 0x2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 107


 4614 02b8 91       		.byte	0x91
 4615 02b9 6C       		.sleb128 -20
 4616 02ba 09       		.uleb128 0x9
 4617 02bb D0060000 		.4byte	.LASF56
 4618 02bf 01       		.byte	0x1
 4619 02c0 74       		.byte	0x74
 4620 02c1 76000000 		.4byte	0x76
 4621 02c5 02       		.uleb128 0x2
 4622 02c6 91       		.byte	0x91
 4623 02c7 6A       		.sleb128 -22
 4624 02c8 09       		.uleb128 0x9
 4625 02c9 35040000 		.4byte	.LASF57
 4626 02cd 01       		.byte	0x1
 4627 02ce 75       		.byte	0x75
 4628 02cf 81000000 		.4byte	0x81
 4629 02d3 02       		.uleb128 0x2
 4630 02d4 91       		.byte	0x91
 4631 02d5 64       		.sleb128 -28
 4632 02d6 09       		.uleb128 0x9
 4633 02d7 A1060000 		.4byte	.LASF58
 4634 02db 01       		.byte	0x1
 4635 02dc 76       		.byte	0x76
 4636 02dd 97000000 		.4byte	0x97
 4637 02e1 02       		.uleb128 0x2
 4638 02e2 91       		.byte	0x91
 4639 02e3 62       		.sleb128 -30
 4640 02e4 00       		.byte	0
 4641 02e5 0A       		.uleb128 0xa
 4642 02e6 D0060000 		.4byte	.LASF56
 4643 02ea 01       		.byte	0x1
 4644 02eb A9       		.byte	0xa9
 4645 02ec 76000000 		.4byte	0x76
 4646 02f0 00000000 		.4byte	.LFB37
 4647 02f4 78000000 		.4byte	.LFE37-.LFB37
 4648 02f8 01       		.uleb128 0x1
 4649 02f9 9C       		.byte	0x9c
 4650 02fa 43030000 		.4byte	0x343
 4651 02fe 0B       		.uleb128 0xb
 4652 02ff 95040000 		.4byte	.LASF62
 4653 0303 01       		.byte	0x1
 4654 0304 A9       		.byte	0xa9
 4655 0305 43030000 		.4byte	0x343
 4656 0309 02       		.uleb128 0x2
 4657 030a 91       		.byte	0x91
 4658 030b 64       		.sleb128 -28
 4659 030c 0B       		.uleb128 0xb
 4660 030d 16000000 		.4byte	.LASF63
 4661 0311 01       		.byte	0x1
 4662 0312 A9       		.byte	0xa9
 4663 0313 6B000000 		.4byte	0x6b
 4664 0317 02       		.uleb128 0x2
 4665 0318 91       		.byte	0x91
 4666 0319 63       		.sleb128 -29
 4667 031a 0C       		.uleb128 0xc
 4668 031b 6900     		.ascii	"i\000"
 4669 031d 01       		.byte	0x1
 4670 031e AB       		.byte	0xab
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 108


 4671 031f 6B000000 		.4byte	0x6b
 4672 0323 02       		.uleb128 0x2
 4673 0324 91       		.byte	0x91
 4674 0325 77       		.sleb128 -9
 4675 0326 0C       		.uleb128 0xc
 4676 0327 73756D00 		.ascii	"sum\000"
 4677 032b 01       		.byte	0x1
 4678 032c AC       		.byte	0xac
 4679 032d 81000000 		.4byte	0x81
 4680 0331 02       		.uleb128 0x2
 4681 0332 91       		.byte	0x91
 4682 0333 70       		.sleb128 -16
 4683 0334 0C       		.uleb128 0xc
 4684 0335 61766700 		.ascii	"avg\000"
 4685 0339 01       		.byte	0x1
 4686 033a AD       		.byte	0xad
 4687 033b 76000000 		.4byte	0x76
 4688 033f 02       		.uleb128 0x2
 4689 0340 91       		.byte	0x91
 4690 0341 6E       		.sleb128 -18
 4691 0342 00       		.byte	0
 4692 0343 0D       		.uleb128 0xd
 4693 0344 04       		.byte	0x4
 4694 0345 76000000 		.4byte	0x76
 4695 0349 0E       		.uleb128 0xe
 4696 034a DA000000 		.4byte	.LASF64
 4697 034e 01       		.byte	0x1
 4698 034f B9       		.byte	0xb9
 4699 0350 6B000000 		.4byte	0x6b
 4700 0354 00000000 		.4byte	.LFB38
 4701 0358 3E000000 		.4byte	.LFE38-.LFB38
 4702 035c 01       		.uleb128 0x1
 4703 035d 9C       		.byte	0x9c
 4704 035e 7F030000 		.4byte	0x37f
 4705 0362 0B       		.uleb128 0xb
 4706 0363 E4020000 		.4byte	.LASF65
 4707 0367 01       		.byte	0x1
 4708 0368 B9       		.byte	0xb9
 4709 0369 6B000000 		.4byte	0x6b
 4710 036d 02       		.uleb128 0x2
 4711 036e 91       		.byte	0x91
 4712 036f 77       		.sleb128 -9
 4713 0370 0B       		.uleb128 0xb
 4714 0371 40020000 		.4byte	.LASF66
 4715 0375 01       		.byte	0x1
 4716 0376 B9       		.byte	0xb9
 4717 0377 6B000000 		.4byte	0x6b
 4718 037b 02       		.uleb128 0x2
 4719 037c 91       		.byte	0x91
 4720 037d 76       		.sleb128 -10
 4721 037e 00       		.byte	0
 4722 037f 0A       		.uleb128 0xa
 4723 0380 FA040000 		.4byte	.LASF67
 4724 0384 01       		.byte	0x1
 4725 0385 C6       		.byte	0xc6
 4726 0386 6B000000 		.4byte	0x6b
 4727 038a 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 109


 4728 038e 0C010000 		.4byte	.LFE39-.LFB39
 4729 0392 01       		.uleb128 0x1
 4730 0393 9C       		.byte	0x9c
 4731 0394 DF030000 		.4byte	0x3df
 4732 0398 0B       		.uleb128 0xb
 4733 0399 0B040000 		.4byte	.LASF68
 4734 039d 01       		.byte	0x1
 4735 039e C6       		.byte	0xc6
 4736 039f 43030000 		.4byte	0x343
 4737 03a3 02       		.uleb128 0x2
 4738 03a4 91       		.byte	0x91
 4739 03a5 6C       		.sleb128 -20
 4740 03a6 0B       		.uleb128 0xb
 4741 03a7 AB020000 		.4byte	.LASF69
 4742 03ab 01       		.byte	0x1
 4743 03ac C6       		.byte	0xc6
 4744 03ad 6B000000 		.4byte	0x6b
 4745 03b1 02       		.uleb128 0x2
 4746 03b2 91       		.byte	0x91
 4747 03b3 6B       		.sleb128 -21
 4748 03b4 0B       		.uleb128 0xb
 4749 03b5 25010000 		.4byte	.LASF70
 4750 03b9 01       		.byte	0x1
 4751 03ba C6       		.byte	0xc6
 4752 03bb 6B000000 		.4byte	0x6b
 4753 03bf 02       		.uleb128 0x2
 4754 03c0 91       		.byte	0x91
 4755 03c1 6A       		.sleb128 -22
 4756 03c2 0B       		.uleb128 0xb
 4757 03c3 2E040000 		.4byte	.LASF71
 4758 03c7 01       		.byte	0x1
 4759 03c8 C6       		.byte	0xc6
 4760 03c9 5D000000 		.4byte	0x5d
 4761 03cd 02       		.uleb128 0x2
 4762 03ce 91       		.byte	0x91
 4763 03cf 64       		.sleb128 -28
 4764 03d0 09       		.uleb128 0x9
 4765 03d1 60010000 		.4byte	.LASF72
 4766 03d5 01       		.byte	0x1
 4767 03d6 C8       		.byte	0xc8
 4768 03d7 6B000000 		.4byte	0x6b
 4769 03db 02       		.uleb128 0x2
 4770 03dc 91       		.byte	0x91
 4771 03dd 77       		.sleb128 -9
 4772 03de 00       		.byte	0
 4773 03df 0A       		.uleb128 0xa
 4774 03e0 3B010000 		.4byte	.LASF73
 4775 03e4 01       		.byte	0x1
 4776 03e5 EC       		.byte	0xec
 4777 03e6 6B000000 		.4byte	0x6b
 4778 03ea 00000000 		.4byte	.LFB40
 4779 03ee 0C020000 		.4byte	.LFE40-.LFB40
 4780 03f2 01       		.uleb128 0x1
 4781 03f3 9C       		.byte	0x9c
 4782 03f4 31040000 		.4byte	0x431
 4783 03f8 0B       		.uleb128 0xb
 4784 03f9 6B020000 		.4byte	.LASF74
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 110


 4785 03fd 01       		.byte	0x1
 4786 03fe EC       		.byte	0xec
 4787 03ff 6B000000 		.4byte	0x6b
 4788 0403 02       		.uleb128 0x2
 4789 0404 91       		.byte	0x91
 4790 0405 6F       		.sleb128 -17
 4791 0406 0B       		.uleb128 0xb
 4792 0407 0B040000 		.4byte	.LASF68
 4793 040b 01       		.byte	0x1
 4794 040c EC       		.byte	0xec
 4795 040d 43030000 		.4byte	0x343
 4796 0411 02       		.uleb128 0x2
 4797 0412 91       		.byte	0x91
 4798 0413 68       		.sleb128 -24
 4799 0414 0B       		.uleb128 0xb
 4800 0415 49040000 		.4byte	.LASF75
 4801 0419 01       		.byte	0x1
 4802 041a EC       		.byte	0xec
 4803 041b 6B000000 		.4byte	0x6b
 4804 041f 02       		.uleb128 0x2
 4805 0420 91       		.byte	0x91
 4806 0421 6E       		.sleb128 -18
 4807 0422 0B       		.uleb128 0xb
 4808 0423 99060000 		.4byte	.LASF76
 4809 0427 01       		.byte	0x1
 4810 0428 EC       		.byte	0xec
 4811 0429 76000000 		.4byte	0x76
 4812 042d 02       		.uleb128 0x2
 4813 042e 91       		.byte	0x91
 4814 042f 6C       		.sleb128 -20
 4815 0430 00       		.byte	0
 4816 0431 0F       		.uleb128 0xf
 4817 0432 7C030000 		.4byte	.LASF77
 4818 0436 01       		.byte	0x1
 4819 0437 1A01     		.2byte	0x11a
 4820 0439 76000000 		.4byte	0x76
 4821 043d 00000000 		.4byte	.LFB41
 4822 0441 84000000 		.4byte	.LFE41-.LFB41
 4823 0445 01       		.uleb128 0x1
 4824 0446 9C       		.byte	0x9c
 4825 0447 B5040000 		.4byte	0x4b5
 4826 044b 10       		.uleb128 0x10
 4827 044c 94050000 		.4byte	.LASF78
 4828 0450 01       		.byte	0x1
 4829 0451 1A01     		.2byte	0x11a
 4830 0453 B5040000 		.4byte	0x4b5
 4831 0457 02       		.uleb128 0x2
 4832 0458 91       		.byte	0x91
 4833 0459 6C       		.sleb128 -20
 4834 045a 10       		.uleb128 0x10
 4835 045b C0010000 		.4byte	.LASF79
 4836 045f 01       		.byte	0x1
 4837 0460 1A01     		.2byte	0x11a
 4838 0462 6B000000 		.4byte	0x6b
 4839 0466 02       		.uleb128 0x2
 4840 0467 91       		.byte	0x91
 4841 0468 6B       		.sleb128 -21
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 111


 4842 0469 10       		.uleb128 0x10
 4843 046a C6010000 		.4byte	.LASF80
 4844 046e 01       		.byte	0x1
 4845 046f 1A01     		.2byte	0x11a
 4846 0471 6B000000 		.4byte	0x6b
 4847 0475 02       		.uleb128 0x2
 4848 0476 91       		.byte	0x91
 4849 0477 6A       		.sleb128 -22
 4850 0478 11       		.uleb128 0x11
 4851 0479 99060000 		.4byte	.LASF76
 4852 047d 01       		.byte	0x1
 4853 047e 1C01     		.2byte	0x11c
 4854 0480 76000000 		.4byte	0x76
 4855 0484 02       		.uleb128 0x2
 4856 0485 91       		.byte	0x91
 4857 0486 70       		.sleb128 -16
 4858 0487 11       		.uleb128 0x11
 4859 0488 E1010000 		.4byte	.LASF81
 4860 048c 01       		.byte	0x1
 4861 048d 1D01     		.2byte	0x11d
 4862 048f 97000000 		.4byte	0x97
 4863 0493 02       		.uleb128 0x2
 4864 0494 91       		.byte	0x91
 4865 0495 76       		.sleb128 -10
 4866 0496 11       		.uleb128 0x11
 4867 0497 E7010000 		.4byte	.LASF82
 4868 049b 01       		.byte	0x1
 4869 049c 1E01     		.2byte	0x11e
 4870 049e 97000000 		.4byte	0x97
 4871 04a2 02       		.uleb128 0x2
 4872 04a3 91       		.byte	0x91
 4873 04a4 74       		.sleb128 -12
 4874 04a5 11       		.uleb128 0x11
 4875 04a6 ED010000 		.4byte	.LASF83
 4876 04aa 01       		.byte	0x1
 4877 04ab 1F01     		.2byte	0x11f
 4878 04ad 97000000 		.4byte	0x97
 4879 04b1 02       		.uleb128 0x2
 4880 04b2 91       		.byte	0x91
 4881 04b3 72       		.sleb128 -14
 4882 04b4 00       		.byte	0
 4883 04b5 0D       		.uleb128 0xd
 4884 04b6 04       		.byte	0x4
 4885 04b7 8C000000 		.4byte	0x8c
 4886 04bb 12       		.uleb128 0x12
 4887 04bc 3D040000 		.4byte	.LASF84
 4888 04c0 01       		.byte	0x1
 4889 04c1 2801     		.2byte	0x128
 4890 04c3 76000000 		.4byte	0x76
 4891 04c7 00000000 		.4byte	.LFB42
 4892 04cb 28000000 		.4byte	.LFE42-.LFB42
 4893 04cf 01       		.uleb128 0x1
 4894 04d0 9C       		.byte	0x9c
 4895 04d1 F4040000 		.4byte	0x4f4
 4896 04d5 10       		.uleb128 0x10
 4897 04d6 35040000 		.4byte	.LASF57
 4898 04da 01       		.byte	0x1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 112


 4899 04db 2801     		.2byte	0x128
 4900 04dd 81000000 		.4byte	0x81
 4901 04e1 02       		.uleb128 0x2
 4902 04e2 91       		.byte	0x91
 4903 04e3 6C       		.sleb128 -20
 4904 04e4 11       		.uleb128 0x11
 4905 04e5 93020000 		.4byte	.LASF85
 4906 04e9 01       		.byte	0x1
 4907 04ea 2B01     		.2byte	0x12b
 4908 04ec 76000000 		.4byte	0x76
 4909 04f0 02       		.uleb128 0x2
 4910 04f1 91       		.byte	0x91
 4911 04f2 76       		.sleb128 -10
 4912 04f3 00       		.byte	0
 4913 04f4 13       		.uleb128 0x13
 4914 04f5 24050000 		.4byte	.LASF86
 4915 04f9 01       		.byte	0x1
 4916 04fa 3001     		.2byte	0x130
 4917 04fc 00000000 		.4byte	.LFB43
 4918 0500 08000000 		.4byte	.LFE43-.LFB43
 4919 0504 01       		.uleb128 0x1
 4920 0505 9C       		.byte	0x9c
 4921 0506 14       		.uleb128 0x14
 4922 0507 AD050000 		.4byte	.LASF87
 4923 050b 01       		.byte	0x1
 4924 050c 3901     		.2byte	0x139
 4925 050e 00000000 		.4byte	.LFB44
 4926 0512 18000000 		.4byte	.LFE44-.LFB44
 4927 0516 01       		.uleb128 0x1
 4928 0517 9C       		.byte	0x9c
 4929 0518 15       		.uleb128 0x15
 4930 0519 8F010000 		.4byte	.LASF89
 4931 051d 01       		.byte	0x1
 4932 051e 4301     		.2byte	0x143
 4933 0520 00000000 		.4byte	.LFB45
 4934 0524 98000000 		.4byte	.LFE45-.LFB45
 4935 0528 01       		.uleb128 0x1
 4936 0529 9C       		.byte	0x9c
 4937 052a 5C050000 		.4byte	0x55c
 4938 052e 10       		.uleb128 0x10
 4939 052f 46070000 		.4byte	.LASF90
 4940 0533 01       		.byte	0x1
 4941 0534 4301     		.2byte	0x143
 4942 0536 6B000000 		.4byte	0x6b
 4943 053a 02       		.uleb128 0x2
 4944 053b 91       		.byte	0x91
 4945 053c 67       		.sleb128 -25
 4946 053d 10       		.uleb128 0x10
 4947 053e 7E070000 		.4byte	.LASF91
 4948 0542 01       		.byte	0x1
 4949 0543 4301     		.2byte	0x143
 4950 0545 76000000 		.4byte	0x76
 4951 0549 02       		.uleb128 0x2
 4952 054a 91       		.byte	0x91
 4953 054b 64       		.sleb128 -28
 4954 054c 11       		.uleb128 0x11
 4955 054d 0B040000 		.4byte	.LASF68
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 113


 4956 0551 01       		.byte	0x1
 4957 0552 4501     		.2byte	0x145
 4958 0554 5C050000 		.4byte	0x55c
 4959 0558 02       		.uleb128 0x2
 4960 0559 91       		.byte	0x91
 4961 055a 6C       		.sleb128 -20
 4962 055b 00       		.byte	0
 4963 055c 16       		.uleb128 0x16
 4964 055d 6B000000 		.4byte	0x6b
 4965 0561 6C050000 		.4byte	0x56c
 4966 0565 17       		.uleb128 0x17
 4967 0566 BC000000 		.4byte	0xbc
 4968 056a 08       		.byte	0x8
 4969 056b 00       		.byte	0
 4970 056c 15       		.uleb128 0x15
 4971 056d 63070000 		.4byte	.LASF92
 4972 0571 01       		.byte	0x1
 4973 0572 5401     		.2byte	0x154
 4974 0574 00000000 		.4byte	.LFB46
 4975 0578 98000000 		.4byte	.LFE46-.LFB46
 4976 057c 01       		.uleb128 0x1
 4977 057d 9C       		.byte	0x9c
 4978 057e B0050000 		.4byte	0x5b0
 4979 0582 10       		.uleb128 0x10
 4980 0583 46070000 		.4byte	.LASF90
 4981 0587 01       		.byte	0x1
 4982 0588 5401     		.2byte	0x154
 4983 058a 6B000000 		.4byte	0x6b
 4984 058e 02       		.uleb128 0x2
 4985 058f 91       		.byte	0x91
 4986 0590 67       		.sleb128 -25
 4987 0591 10       		.uleb128 0x10
 4988 0592 87020000 		.4byte	.LASF93
 4989 0596 01       		.byte	0x1
 4990 0597 5401     		.2byte	0x154
 4991 0599 76000000 		.4byte	0x76
 4992 059d 02       		.uleb128 0x2
 4993 059e 91       		.byte	0x91
 4994 059f 64       		.sleb128 -28
 4995 05a0 11       		.uleb128 0x11
 4996 05a1 0B040000 		.4byte	.LASF68
 4997 05a5 01       		.byte	0x1
 4998 05a6 5601     		.2byte	0x156
 4999 05a8 5C050000 		.4byte	0x55c
 5000 05ac 02       		.uleb128 0x2
 5001 05ad 91       		.byte	0x91
 5002 05ae 6C       		.sleb128 -20
 5003 05af 00       		.byte	0
 5004 05b0 15       		.uleb128 0x15
 5005 05b1 07050000 		.4byte	.LASF94
 5006 05b5 01       		.byte	0x1
 5007 05b6 6601     		.2byte	0x166
 5008 05b8 00000000 		.4byte	.LFB47
 5009 05bc 98000000 		.4byte	.LFE47-.LFB47
 5010 05c0 01       		.uleb128 0x1
 5011 05c1 9C       		.byte	0x9c
 5012 05c2 F4050000 		.4byte	0x5f4
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 114


 5013 05c6 10       		.uleb128 0x10
 5014 05c7 46070000 		.4byte	.LASF90
 5015 05cb 01       		.byte	0x1
 5016 05cc 6601     		.2byte	0x166
 5017 05ce 6B000000 		.4byte	0x6b
 5018 05d2 02       		.uleb128 0x2
 5019 05d3 91       		.byte	0x91
 5020 05d4 67       		.sleb128 -25
 5021 05d5 10       		.uleb128 0x10
 5022 05d6 05010000 		.4byte	.LASF95
 5023 05da 01       		.byte	0x1
 5024 05db 6601     		.2byte	0x166
 5025 05dd 76000000 		.4byte	0x76
 5026 05e1 02       		.uleb128 0x2
 5027 05e2 91       		.byte	0x91
 5028 05e3 64       		.sleb128 -28
 5029 05e4 11       		.uleb128 0x11
 5030 05e5 0B040000 		.4byte	.LASF68
 5031 05e9 01       		.byte	0x1
 5032 05ea 6801     		.2byte	0x168
 5033 05ec 5C050000 		.4byte	0x55c
 5034 05f0 02       		.uleb128 0x2
 5035 05f1 91       		.byte	0x91
 5036 05f2 6C       		.sleb128 -20
 5037 05f3 00       		.byte	0
 5038 05f4 12       		.uleb128 0x12
 5039 05f5 D8030000 		.4byte	.LASF96
 5040 05f9 01       		.byte	0x1
 5041 05fa 7A01     		.2byte	0x17a
 5042 05fc 6B000000 		.4byte	0x6b
 5043 0600 00000000 		.4byte	.LFB48
 5044 0604 6C010000 		.4byte	.LFE48-.LFB48
 5045 0608 01       		.uleb128 0x1
 5046 0609 9C       		.byte	0x9c
 5047 060a 58060000 		.4byte	0x658
 5048 060e 10       		.uleb128 0x10
 5049 060f 54040000 		.4byte	.LASF97
 5050 0613 01       		.byte	0x1
 5051 0614 7A01     		.2byte	0x17a
 5052 0616 6B000000 		.4byte	0x6b
 5053 061a 02       		.uleb128 0x2
 5054 061b 91       		.byte	0x91
 5055 061c 67       		.sleb128 -25
 5056 061d 10       		.uleb128 0x10
 5057 061e 6E000000 		.4byte	.LASF98
 5058 0622 01       		.byte	0x1
 5059 0623 7A01     		.2byte	0x17a
 5060 0625 43030000 		.4byte	0x343
 5061 0629 02       		.uleb128 0x2
 5062 062a 91       		.byte	0x91
 5063 062b 60       		.sleb128 -32
 5064 062c 18       		.uleb128 0x18
 5065 062d 6900     		.ascii	"i\000"
 5066 062f 01       		.byte	0x1
 5067 0630 8A01     		.2byte	0x18a
 5068 0632 6B000000 		.4byte	0x6b
 5069 0636 02       		.uleb128 0x2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 115


 5070 0637 91       		.byte	0x91
 5071 0638 6F       		.sleb128 -17
 5072 0639 18       		.uleb128 0x18
 5073 063a 61766700 		.ascii	"avg\000"
 5074 063e 01       		.byte	0x1
 5075 063f 8B01     		.2byte	0x18b
 5076 0641 76000000 		.4byte	0x76
 5077 0645 02       		.uleb128 0x2
 5078 0646 91       		.byte	0x91
 5079 0647 6A       		.sleb128 -22
 5080 0648 11       		.uleb128 0x11
 5081 0649 99060000 		.4byte	.LASF76
 5082 064d 01       		.byte	0x1
 5083 064e 8C01     		.2byte	0x18c
 5084 0650 76000000 		.4byte	0x76
 5085 0654 02       		.uleb128 0x2
 5086 0655 91       		.byte	0x91
 5087 0656 6C       		.sleb128 -20
 5088 0657 00       		.byte	0
 5089 0658 12       		.uleb128 0x12
 5090 0659 BD050000 		.4byte	.LASF99
 5091 065d 01       		.byte	0x1
 5092 065e E201     		.2byte	0x1e2
 5093 0660 6B000000 		.4byte	0x6b
 5094 0664 00000000 		.4byte	.LFB49
 5095 0668 6C010000 		.4byte	.LFE49-.LFB49
 5096 066c 01       		.uleb128 0x1
 5097 066d 9C       		.byte	0x9c
 5098 066e BC060000 		.4byte	0x6bc
 5099 0672 10       		.uleb128 0x10
 5100 0673 49000000 		.4byte	.LASF100
 5101 0677 01       		.byte	0x1
 5102 0678 E201     		.2byte	0x1e2
 5103 067a 6B000000 		.4byte	0x6b
 5104 067e 02       		.uleb128 0x2
 5105 067f 91       		.byte	0x91
 5106 0680 67       		.sleb128 -25
 5107 0681 10       		.uleb128 0x10
 5108 0682 1D070000 		.4byte	.LASF101
 5109 0686 01       		.byte	0x1
 5110 0687 E201     		.2byte	0x1e2
 5111 0689 43030000 		.4byte	0x343
 5112 068d 02       		.uleb128 0x2
 5113 068e 91       		.byte	0x91
 5114 068f 60       		.sleb128 -32
 5115 0690 18       		.uleb128 0x18
 5116 0691 6900     		.ascii	"i\000"
 5117 0693 01       		.byte	0x1
 5118 0694 F201     		.2byte	0x1f2
 5119 0696 6B000000 		.4byte	0x6b
 5120 069a 02       		.uleb128 0x2
 5121 069b 91       		.byte	0x91
 5122 069c 6F       		.sleb128 -17
 5123 069d 18       		.uleb128 0x18
 5124 069e 61766700 		.ascii	"avg\000"
 5125 06a2 01       		.byte	0x1
 5126 06a3 F301     		.2byte	0x1f3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 116


 5127 06a5 76000000 		.4byte	0x76
 5128 06a9 02       		.uleb128 0x2
 5129 06aa 91       		.byte	0x91
 5130 06ab 6A       		.sleb128 -22
 5131 06ac 11       		.uleb128 0x11
 5132 06ad 99060000 		.4byte	.LASF76
 5133 06b1 01       		.byte	0x1
 5134 06b2 F401     		.2byte	0x1f4
 5135 06b4 76000000 		.4byte	0x76
 5136 06b8 02       		.uleb128 0x2
 5137 06b9 91       		.byte	0x91
 5138 06ba 6C       		.sleb128 -20
 5139 06bb 00       		.byte	0
 5140 06bc 12       		.uleb128 0x12
 5141 06bd FE010000 		.4byte	.LASF102
 5142 06c1 01       		.byte	0x1
 5143 06c2 4C02     		.2byte	0x24c
 5144 06c4 6B000000 		.4byte	0x6b
 5145 06c8 00000000 		.4byte	.LFB50
 5146 06cc 08030000 		.4byte	.LFE50-.LFB50
 5147 06d0 01       		.uleb128 0x1
 5148 06d1 9C       		.byte	0x9c
 5149 06d2 2F070000 		.4byte	0x72f
 5150 06d6 10       		.uleb128 0x10
 5151 06d7 0B010000 		.4byte	.LASF103
 5152 06db 01       		.byte	0x1
 5153 06dc 4C02     		.2byte	0x24c
 5154 06de 6B000000 		.4byte	0x6b
 5155 06e2 02       		.uleb128 0x2
 5156 06e3 91       		.byte	0x91
 5157 06e4 67       		.sleb128 -25
 5158 06e5 10       		.uleb128 0x10
 5159 06e6 D2050000 		.4byte	.LASF104
 5160 06ea 01       		.byte	0x1
 5161 06eb 4C02     		.2byte	0x24c
 5162 06ed 43030000 		.4byte	0x343
 5163 06f1 02       		.uleb128 0x2
 5164 06f2 91       		.byte	0x91
 5165 06f3 60       		.sleb128 -32
 5166 06f4 18       		.uleb128 0x18
 5167 06f5 6900     		.ascii	"i\000"
 5168 06f7 01       		.byte	0x1
 5169 06f8 5202     		.2byte	0x252
 5170 06fa 6B000000 		.4byte	0x6b
 5171 06fe 02       		.uleb128 0x2
 5172 06ff 91       		.byte	0x91
 5173 0700 6F       		.sleb128 -17
 5174 0701 18       		.uleb128 0x18
 5175 0702 61766700 		.ascii	"avg\000"
 5176 0706 01       		.byte	0x1
 5177 0707 5302     		.2byte	0x253
 5178 0709 76000000 		.4byte	0x76
 5179 070d 02       		.uleb128 0x2
 5180 070e 91       		.byte	0x91
 5181 070f 68       		.sleb128 -24
 5182 0710 11       		.uleb128 0x11
 5183 0711 99060000 		.4byte	.LASF76
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 117


 5184 0715 01       		.byte	0x1
 5185 0716 5402     		.2byte	0x254
 5186 0718 76000000 		.4byte	0x76
 5187 071c 02       		.uleb128 0x2
 5188 071d 91       		.byte	0x91
 5189 071e 6A       		.sleb128 -22
 5190 071f 11       		.uleb128 0x11
 5191 0720 93020000 		.4byte	.LASF85
 5192 0724 01       		.byte	0x1
 5193 0725 5702     		.2byte	0x257
 5194 0727 76000000 		.4byte	0x76
 5195 072b 02       		.uleb128 0x2
 5196 072c 91       		.byte	0x91
 5197 072d 6C       		.sleb128 -20
 5198 072e 00       		.byte	0
 5199 072f 12       		.uleb128 0x12
 5200 0730 AB010000 		.4byte	.LASF105
 5201 0734 01       		.byte	0x1
 5202 0735 E002     		.2byte	0x2e0
 5203 0737 6B000000 		.4byte	0x6b
 5204 073b 00000000 		.4byte	.LFB51
 5205 073f 08030000 		.4byte	.LFE51-.LFB51
 5206 0743 01       		.uleb128 0x1
 5207 0744 9C       		.byte	0x9c
 5208 0745 A2070000 		.4byte	0x7a2
 5209 0749 10       		.uleb128 0x10
 5210 074a 11040000 		.4byte	.LASF106
 5211 074e 01       		.byte	0x1
 5212 074f E002     		.2byte	0x2e0
 5213 0751 6B000000 		.4byte	0x6b
 5214 0755 02       		.uleb128 0x2
 5215 0756 91       		.byte	0x91
 5216 0757 67       		.sleb128 -25
 5217 0758 10       		.uleb128 0x10
 5218 0759 CB000000 		.4byte	.LASF107
 5219 075d 01       		.byte	0x1
 5220 075e E002     		.2byte	0x2e0
 5221 0760 43030000 		.4byte	0x343
 5222 0764 02       		.uleb128 0x2
 5223 0765 91       		.byte	0x91
 5224 0766 60       		.sleb128 -32
 5225 0767 18       		.uleb128 0x18
 5226 0768 6900     		.ascii	"i\000"
 5227 076a 01       		.byte	0x1
 5228 076b E602     		.2byte	0x2e6
 5229 076d 6B000000 		.4byte	0x6b
 5230 0771 02       		.uleb128 0x2
 5231 0772 91       		.byte	0x91
 5232 0773 6F       		.sleb128 -17
 5233 0774 18       		.uleb128 0x18
 5234 0775 61766700 		.ascii	"avg\000"
 5235 0779 01       		.byte	0x1
 5236 077a E702     		.2byte	0x2e7
 5237 077c 76000000 		.4byte	0x76
 5238 0780 02       		.uleb128 0x2
 5239 0781 91       		.byte	0x91
 5240 0782 68       		.sleb128 -24
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 118


 5241 0783 11       		.uleb128 0x11
 5242 0784 99060000 		.4byte	.LASF76
 5243 0788 01       		.byte	0x1
 5244 0789 E802     		.2byte	0x2e8
 5245 078b 76000000 		.4byte	0x76
 5246 078f 02       		.uleb128 0x2
 5247 0790 91       		.byte	0x91
 5248 0791 6A       		.sleb128 -22
 5249 0792 11       		.uleb128 0x11
 5250 0793 93020000 		.4byte	.LASF85
 5251 0797 01       		.byte	0x1
 5252 0798 E902     		.2byte	0x2e9
 5253 079a 76000000 		.4byte	0x76
 5254 079e 02       		.uleb128 0x2
 5255 079f 91       		.byte	0x91
 5256 07a0 6C       		.sleb128 -20
 5257 07a1 00       		.byte	0
 5258 07a2 12       		.uleb128 0x12
 5259 07a3 00000000 		.4byte	.LASF108
 5260 07a7 01       		.byte	0x1
 5261 07a8 7403     		.2byte	0x374
 5262 07aa 6B000000 		.4byte	0x6b
 5263 07ae 00000000 		.4byte	.LFB52
 5264 07b2 5C010000 		.4byte	.LFE52-.LFB52
 5265 07b6 01       		.uleb128 0x1
 5266 07b7 9C       		.byte	0x9c
 5267 07b8 06080000 		.4byte	0x806
 5268 07bc 10       		.uleb128 0x10
 5269 07bd 21040000 		.4byte	.LASF109
 5270 07c1 01       		.byte	0x1
 5271 07c2 7403     		.2byte	0x374
 5272 07c4 6B000000 		.4byte	0x6b
 5273 07c8 02       		.uleb128 0x2
 5274 07c9 91       		.byte	0x91
 5275 07ca 67       		.sleb128 -25
 5276 07cb 10       		.uleb128 0x10
 5277 07cc 5A050000 		.4byte	.LASF110
 5278 07d0 01       		.byte	0x1
 5279 07d1 7403     		.2byte	0x374
 5280 07d3 43030000 		.4byte	0x343
 5281 07d7 02       		.uleb128 0x2
 5282 07d8 91       		.byte	0x91
 5283 07d9 60       		.sleb128 -32
 5284 07da 18       		.uleb128 0x18
 5285 07db 6900     		.ascii	"i\000"
 5286 07dd 01       		.byte	0x1
 5287 07de 7903     		.2byte	0x379
 5288 07e0 6B000000 		.4byte	0x6b
 5289 07e4 02       		.uleb128 0x2
 5290 07e5 91       		.byte	0x91
 5291 07e6 6F       		.sleb128 -17
 5292 07e7 18       		.uleb128 0x18
 5293 07e8 61766700 		.ascii	"avg\000"
 5294 07ec 01       		.byte	0x1
 5295 07ed 7A03     		.2byte	0x37a
 5296 07ef 76000000 		.4byte	0x76
 5297 07f3 02       		.uleb128 0x2
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 119


 5298 07f4 91       		.byte	0x91
 5299 07f5 6A       		.sleb128 -22
 5300 07f6 11       		.uleb128 0x11
 5301 07f7 99060000 		.4byte	.LASF76
 5302 07fb 01       		.byte	0x1
 5303 07fc 7B03     		.2byte	0x37b
 5304 07fe 76000000 		.4byte	0x76
 5305 0802 02       		.uleb128 0x2
 5306 0803 91       		.byte	0x91
 5307 0804 6C       		.sleb128 -20
 5308 0805 00       		.byte	0
 5309 0806 19       		.uleb128 0x19
 5310 0807 77000000 		.4byte	.LASF112
 5311 080b 01       		.byte	0x1
 5312 080c D803     		.2byte	0x3d8
 5313 080e 00000000 		.4byte	.LFB53
 5314 0812 DC000000 		.4byte	.LFE53-.LFB53
 5315 0816 01       		.uleb128 0x1
 5316 0817 9C       		.byte	0x9c
 5317 0818 2C080000 		.4byte	0x82c
 5318 081c 11       		.uleb128 0x11
 5319 081d 99060000 		.4byte	.LASF76
 5320 0821 01       		.byte	0x1
 5321 0822 DA03     		.2byte	0x3da
 5322 0824 76000000 		.4byte	0x76
 5323 0828 02       		.uleb128 0x2
 5324 0829 91       		.byte	0x91
 5325 082a 6E       		.sleb128 -18
 5326 082b 00       		.byte	0
 5327 082c 13       		.uleb128 0x13
 5328 082d 70040000 		.4byte	.LASF111
 5329 0831 01       		.byte	0x1
 5330 0832 1A04     		.2byte	0x41a
 5331 0834 00000000 		.4byte	.LFB54
 5332 0838 8C000000 		.4byte	.LFE54-.LFB54
 5333 083c 01       		.uleb128 0x1
 5334 083d 9C       		.byte	0x9c
 5335 083e 19       		.uleb128 0x19
 5336 083f F3010000 		.4byte	.LASF113
 5337 0843 01       		.byte	0x1
 5338 0844 4A04     		.2byte	0x44a
 5339 0846 00000000 		.4byte	.LFB55
 5340 084a 48010000 		.4byte	.LFE55-.LFB55
 5341 084e 01       		.uleb128 0x1
 5342 084f 9C       		.byte	0x9c
 5343 0850 6C080000 		.4byte	0x86c
 5344 0854 1A       		.uleb128 0x1a
 5345 0855 1E000000 		.4byte	.LBB2
 5346 0859 2C000000 		.4byte	.LBE2-.LBB2
 5347 085d 18       		.uleb128 0x18
 5348 085e 6A00     		.ascii	"j\000"
 5349 0860 01       		.byte	0x1
 5350 0861 5104     		.2byte	0x451
 5351 0863 6B000000 		.4byte	0x6b
 5352 0867 02       		.uleb128 0x2
 5353 0868 91       		.byte	0x91
 5354 0869 77       		.sleb128 -9
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 120


 5355 086a 00       		.byte	0
 5356 086b 00       		.byte	0
 5357 086c 1B       		.uleb128 0x1b
 5358 086d 05070000 		.4byte	.LASF114
 5359 0871 01       		.byte	0x1
 5360 0872 9104     		.2byte	0x491
 5361 0874 5D000000 		.4byte	0x5d
 5362 0878 00000000 		.4byte	.LFB56
 5363 087c B0010000 		.4byte	.LFE56-.LFB56
 5364 0880 01       		.uleb128 0x1
 5365 0881 9C       		.byte	0x9c
 5366 0882 57090000 		.4byte	0x957
 5367 0886 11       		.uleb128 0x11
 5368 0887 2B000000 		.4byte	.LASF115
 5369 088b 01       		.byte	0x1
 5370 088c 9C04     		.2byte	0x49c
 5371 088e 6B000000 		.4byte	0x6b
 5372 0892 02       		.uleb128 0x2
 5373 0893 91       		.byte	0x91
 5374 0894 6F       		.sleb128 -17
 5375 0895 11       		.uleb128 0x11
 5376 0896 0A070000 		.4byte	.LASF116
 5377 089a 01       		.byte	0x1
 5378 089b 9D04     		.2byte	0x49d
 5379 089d 57090000 		.4byte	0x957
 5380 08a1 03       		.uleb128 0x3
 5381 08a2 91       		.byte	0x91
 5382 08a3 B87F     		.sleb128 -72
 5383 08a5 11       		.uleb128 0x11
 5384 08a6 68030000 		.4byte	.LASF117
 5385 08aa 01       		.byte	0x1
 5386 08ab 9E04     		.2byte	0x49e
 5387 08ad 6B000000 		.4byte	0x6b
 5388 08b1 02       		.uleb128 0x2
 5389 08b2 91       		.byte	0x91
 5390 08b3 6E       		.sleb128 -18
 5391 08b4 11       		.uleb128 0x11
 5392 08b5 72070000 		.4byte	.LASF118
 5393 08b9 01       		.byte	0x1
 5394 08ba 9F04     		.2byte	0x49f
 5395 08bc 57090000 		.4byte	0x957
 5396 08c0 03       		.uleb128 0x3
 5397 08c1 91       		.byte	0x91
 5398 08c2 907F     		.sleb128 -112
 5399 08c4 11       		.uleb128 0x11
 5400 08c5 0E020000 		.4byte	.LASF119
 5401 08c9 01       		.byte	0x1
 5402 08ca A004     		.2byte	0x4a0
 5403 08cc 6B000000 		.4byte	0x6b
 5404 08d0 02       		.uleb128 0x2
 5405 08d1 91       		.byte	0x91
 5406 08d2 6D       		.sleb128 -19
 5407 08d3 11       		.uleb128 0x11
 5408 08d4 F2020000 		.4byte	.LASF120
 5409 08d8 01       		.byte	0x1
 5410 08d9 A104     		.2byte	0x4a1
 5411 08db 57090000 		.4byte	0x957
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 121


 5412 08df 03       		.uleb128 0x3
 5413 08e0 91       		.byte	0x91
 5414 08e1 E87E     		.sleb128 -152
 5415 08e3 11       		.uleb128 0x11
 5416 08e4 40000000 		.4byte	.LASF121
 5417 08e8 01       		.byte	0x1
 5418 08e9 A204     		.2byte	0x4a2
 5419 08eb 6B000000 		.4byte	0x6b
 5420 08ef 02       		.uleb128 0x2
 5421 08f0 91       		.byte	0x91
 5422 08f1 6C       		.sleb128 -20
 5423 08f2 11       		.uleb128 0x11
 5424 08f3 6E000000 		.4byte	.LASF98
 5425 08f7 01       		.byte	0x1
 5426 08f8 A304     		.2byte	0x4a3
 5427 08fa 57090000 		.4byte	0x957
 5428 08fe 03       		.uleb128 0x3
 5429 08ff 91       		.byte	0x91
 5430 0900 C07E     		.sleb128 -192
 5431 0902 11       		.uleb128 0x11
 5432 0903 E9020000 		.4byte	.LASF122
 5433 0907 01       		.byte	0x1
 5434 0908 A404     		.2byte	0x4a4
 5435 090a 6B000000 		.4byte	0x6b
 5436 090e 02       		.uleb128 0x2
 5437 090f 91       		.byte	0x91
 5438 0910 6B       		.sleb128 -21
 5439 0911 11       		.uleb128 0x11
 5440 0912 1D070000 		.4byte	.LASF101
 5441 0916 01       		.byte	0x1
 5442 0917 A504     		.2byte	0x4a5
 5443 0919 57090000 		.4byte	0x957
 5444 091d 03       		.uleb128 0x3
 5445 091e 91       		.byte	0x91
 5446 091f 987E     		.sleb128 -232
 5447 0921 11       		.uleb128 0x11
 5448 0922 37020000 		.4byte	.LASF123
 5449 0926 01       		.byte	0x1
 5450 0927 AF04     		.2byte	0x4af
 5451 0929 6B000000 		.4byte	0x6b
 5452 092d 02       		.uleb128 0x2
 5453 092e 91       		.byte	0x91
 5454 092f 6A       		.sleb128 -22
 5455 0930 11       		.uleb128 0x11
 5456 0931 AC060000 		.4byte	.LASF124
 5457 0935 01       		.byte	0x1
 5458 0936 B004     		.2byte	0x4b0
 5459 0938 97000000 		.4byte	0x97
 5460 093c 02       		.uleb128 0x2
 5461 093d 91       		.byte	0x91
 5462 093e 62       		.sleb128 -30
 5463 093f 1A       		.uleb128 0x1a
 5464 0940 98000000 		.4byte	.LBB3
 5465 0944 50000000 		.4byte	.LBE3-.LBB3
 5466 0948 18       		.uleb128 0x18
 5467 0949 6900     		.ascii	"i\000"
 5468 094b 01       		.byte	0x1
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 122


 5469 094c DE04     		.2byte	0x4de
 5470 094e 5D000000 		.4byte	0x5d
 5471 0952 02       		.uleb128 0x2
 5472 0953 91       		.byte	0x91
 5473 0954 64       		.sleb128 -28
 5474 0955 00       		.byte	0
 5475 0956 00       		.byte	0
 5476 0957 16       		.uleb128 0x16
 5477 0958 76000000 		.4byte	0x76
 5478 095c 67090000 		.4byte	0x967
 5479 0960 17       		.uleb128 0x17
 5480 0961 BC000000 		.4byte	0xbc
 5481 0965 13       		.byte	0x13
 5482 0966 00       		.byte	0
 5483 0967 1C       		.uleb128 0x1c
 5484 0968 EC050000 		.4byte	.LASF125
 5485 096c 03       		.byte	0x3
 5486 096d 19       		.byte	0x19
 5487 096e 81000000 		.4byte	0x81
 5488 0972 05       		.uleb128 0x5
 5489 0973 03       		.byte	0x3
 5490 0974 00000000 		.4byte	ELBOW_UPPER_BOUND
 5491 0978 1C       		.uleb128 0x1c
 5492 0979 66010000 		.4byte	.LASF126
 5493 097d 03       		.byte	0x3
 5494 097e 1B       		.byte	0x1b
 5495 097f 81000000 		.4byte	0x81
 5496 0983 05       		.uleb128 0x5
 5497 0984 03       		.byte	0x3
 5498 0985 00000000 		.4byte	ELBOW_LOWER_BOUND
 5499 0989 1C       		.uleb128 0x1c
 5500 098a 1E030000 		.4byte	.LASF127
 5501 098e 03       		.byte	0x3
 5502 098f 1D       		.byte	0x1d
 5503 0990 81000000 		.4byte	0x81
 5504 0994 05       		.uleb128 0x5
 5505 0995 03       		.byte	0x3
 5506 0996 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5507 099a 1C       		.uleb128 0x1c
 5508 099b 73050000 		.4byte	.LASF128
 5509 099f 03       		.byte	0x3
 5510 09a0 1F       		.byte	0x1f
 5511 09a1 81000000 		.4byte	0x81
 5512 09a5 05       		.uleb128 0x5
 5513 09a6 03       		.byte	0x3
 5514 09a7 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5515 09ab 16       		.uleb128 0x16
 5516 09ac 8C000000 		.4byte	0x8c
 5517 09b0 BB090000 		.4byte	0x9bb
 5518 09b4 17       		.uleb128 0x17
 5519 09b5 BC000000 		.4byte	0xbc
 5520 09b9 15       		.byte	0x15
 5521 09ba 00       		.byte	0
 5522 09bb 1C       		.uleb128 0x1c
 5523 09bc 60020000 		.4byte	.LASF129
 5524 09c0 03       		.byte	0x3
 5525 09c1 37       		.byte	0x37
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 123


 5526 09c2 AB090000 		.4byte	0x9ab
 5527 09c6 05       		.uleb128 0x5
 5528 09c7 03       		.byte	0x3
 5529 09c8 00000000 		.4byte	data_array
 5530 09cc 1C       		.uleb128 0x1c
 5531 09cd F3040000 		.4byte	.LASF130
 5532 09d1 03       		.byte	0x3
 5533 09d2 3A       		.byte	0x3a
 5534 09d3 6B000000 		.4byte	0x6b
 5535 09d7 05       		.uleb128 0x5
 5536 09d8 03       		.byte	0x3
 5537 09d9 00000000 		.4byte	wiznet
 5538 09dd 1C       		.uleb128 0x1c
 5539 09de 20000000 		.4byte	.LASF131
 5540 09e2 03       		.byte	0x3
 5541 09e3 3E       		.byte	0x3e
 5542 09e4 AB090000 		.4byte	0x9ab
 5543 09e8 05       		.uleb128 0x5
 5544 09e9 03       		.byte	0x3
 5545 09ea 00000000 		.4byte	test_array
 5546 09ee 1C       		.uleb128 0x1c
 5547 09ef 74030000 		.4byte	.LASF132
 5548 09f3 03       		.byte	0x3
 5549 09f4 47       		.byte	0x47
 5550 09f5 6B000000 		.4byte	0x6b
 5551 09f9 05       		.uleb128 0x5
 5552 09fa 03       		.byte	0x3
 5553 09fb 00000000 		.4byte	WT_FLAG
 5554 09ff 1C       		.uleb128 0x1c
 5555 0a00 73020000 		.4byte	.LASF133
 5556 0a04 03       		.byte	0x3
 5557 0a05 48       		.byte	0x48
 5558 0a06 6B000000 		.4byte	0x6b
 5559 0a0a 05       		.uleb128 0x5
 5560 0a0b 03       		.byte	0x3
 5561 0a0c 00000000 		.4byte	WR_FLAG
 5562 0a10 1C       		.uleb128 0x1c
 5563 0a11 33070000 		.4byte	.LASF134
 5564 0a15 03       		.byte	0x3
 5565 0a16 49       		.byte	0x49
 5566 0a17 6B000000 		.4byte	0x6b
 5567 0a1b 05       		.uleb128 0x5
 5568 0a1c 03       		.byte	0x3
 5569 0a1d 00000000 		.4byte	ELBOW_FLAG
 5570 0a21 1C       		.uleb128 0x1c
 5571 0a22 E2030000 		.4byte	.LASF135
 5572 0a26 03       		.byte	0x3
 5573 0a27 4A       		.byte	0x4a
 5574 0a28 6B000000 		.4byte	0x6b
 5575 0a2c 05       		.uleb128 0x5
 5576 0a2d 03       		.byte	0x3
 5577 0a2e 00000000 		.4byte	SHOULDER_FLAG
 5578 0a32 1C       		.uleb128 0x1c
 5579 0a33 9C020000 		.4byte	.LASF136
 5580 0a37 03       		.byte	0x3
 5581 0a38 4B       		.byte	0x4b
 5582 0a39 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 124


 5583 0a3d 05       		.uleb128 0x5
 5584 0a3e 03       		.byte	0x3
 5585 0a3f 00000000 		.4byte	BA_FLAG
 5586 0a43 1C       		.uleb128 0x1c
 5587 0a44 10030000 		.4byte	.LASF137
 5588 0a48 03       		.byte	0x3
 5589 0a49 4C       		.byte	0x4c
 5590 0a4a 6B000000 		.4byte	0x6b
 5591 0a4e 05       		.uleb128 0x5
 5592 0a4f 03       		.byte	0x3
 5593 0a50 00000000 		.4byte	EFFECTOR_FLAG
 5594 0a54 1C       		.uleb128 0x1c
 5595 0a55 CC020000 		.4byte	.LASF138
 5596 0a59 03       		.byte	0x3
 5597 0a5a 4D       		.byte	0x4d
 5598 0a5b 6B000000 		.4byte	0x6b
 5599 0a5f 05       		.uleb128 0x5
 5600 0a60 03       		.byte	0x3
 5601 0a61 00000000 		.4byte	PH_FLAG
 5602 0a65 1C       		.uleb128 0x1c
 5603 0a66 F5060000 		.4byte	.LASF139
 5604 0a6a 03       		.byte	0x3
 5605 0a6b 50       		.byte	0x50
 5606 0a6c 76000000 		.4byte	0x76
 5607 0a70 05       		.uleb128 0x5
 5608 0a71 03       		.byte	0x3
 5609 0a72 00000000 		.4byte	dropped_packets
 5610 0a76 1C       		.uleb128 0x1c
 5611 0a77 2A010000 		.4byte	.LASF140
 5612 0a7b 03       		.byte	0x3
 5613 0a7c 51       		.byte	0x51
 5614 0a7d 76000000 		.4byte	0x76
 5615 0a81 05       		.uleb128 0x5
 5616 0a82 03       		.byte	0x3
 5617 0a83 00000000 		.4byte	fail_safe_errors
 5618 0a87 1C       		.uleb128 0x1c
 5619 0a88 56070000 		.4byte	.LASF141
 5620 0a8c 03       		.byte	0x3
 5621 0a8d 52       		.byte	0x52
 5622 0a8e 76000000 		.4byte	0x76
 5623 0a92 05       		.uleb128 0x5
 5624 0a93 03       		.byte	0x3
 5625 0a94 00000000 		.4byte	shldr_errors
 5626 0a98 1C       		.uleb128 0x1c
 5627 0a99 34000000 		.4byte	.LASF142
 5628 0a9d 03       		.byte	0x3
 5629 0a9e 53       		.byte	0x53
 5630 0a9f 76000000 		.4byte	0x76
 5631 0aa3 05       		.uleb128 0x5
 5632 0aa4 03       		.byte	0x3
 5633 0aa5 00000000 		.4byte	elbw_errors
 5634 0aa9 1C       		.uleb128 0x1c
 5635 0aaa 19020000 		.4byte	.LASF143
 5636 0aae 03       		.byte	0x3
 5637 0aaf 54       		.byte	0x54
 5638 0ab0 76000000 		.4byte	0x76
 5639 0ab4 05       		.uleb128 0x5
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 125


 5640 0ab5 03       		.byte	0x3
 5641 0ab6 00000000 		.4byte	BA_errors
 5642 0aba 1C       		.uleb128 0x1c
 5643 0abb CC010000 		.4byte	.LASF144
 5644 0abf 03       		.byte	0x3
 5645 0ac0 55       		.byte	0x55
 5646 0ac1 76000000 		.4byte	0x76
 5647 0ac5 05       		.uleb128 0x5
 5648 0ac6 03       		.byte	0x3
 5649 0ac7 00000000 		.4byte	WT_errors
 5650 0acb 1C       		.uleb128 0x1c
 5651 0acc BE040000 		.4byte	.LASF145
 5652 0ad0 03       		.byte	0x3
 5653 0ad1 56       		.byte	0x56
 5654 0ad2 76000000 		.4byte	0x76
 5655 0ad6 05       		.uleb128 0x5
 5656 0ad7 03       		.byte	0x3
 5657 0ad8 00000000 		.4byte	WR_errors
 5658 0adc 1C       		.uleb128 0x1c
 5659 0add D6010000 		.4byte	.LASF146
 5660 0ae1 03       		.byte	0x3
 5661 0ae2 57       		.byte	0x57
 5662 0ae3 76000000 		.4byte	0x76
 5663 0ae7 05       		.uleb128 0x5
 5664 0ae8 03       		.byte	0x3
 5665 0ae9 00000000 		.4byte	eff_errors
 5666 0aed 1C       		.uleb128 0x1c
 5667 0aee A1010000 		.4byte	.LASF147
 5668 0af2 03       		.byte	0x3
 5669 0af3 59       		.byte	0x59
 5670 0af4 B7000000 		.4byte	0xb7
 5671 0af8 05       		.uleb128 0x5
 5672 0af9 03       		.byte	0x3
 5673 0afa 00000000 		.4byte	timerFlag
 5674 0afe 1D       		.uleb128 0x1d
 5675 0aff FB030000 		.4byte	.LASF148
 5676 0b03 01       		.byte	0x1
 5677 0b04 7801     		.2byte	0x178
 5678 0b06 C3000000 		.4byte	0xc3
 5679 0b0a 05       		.uleb128 0x5
 5680 0b0b 03       		.byte	0x3
 5681 0b0c 00000000 		.4byte	wristTilt_state
 5682 0b10 1D       		.uleb128 0x1d
 5683 0b11 C8040000 		.4byte	.LASF149
 5684 0b15 01       		.byte	0x1
 5685 0b16 E001     		.2byte	0x1e0
 5686 0b18 E9000000 		.4byte	0xe9
 5687 0b1c 05       		.uleb128 0x5
 5688 0b1d 03       		.byte	0x3
 5689 0b1e 00000000 		.4byte	wristRotate_state
 5690 0b22 1D       		.uleb128 0x1d
 5691 0b23 46010000 		.4byte	.LASF150
 5692 0b27 01       		.byte	0x1
 5693 0b28 4B02     		.2byte	0x24b
 5694 0b2a 0F010000 		.4byte	0x10f
 5695 0b2e 05       		.uleb128 0x5
 5696 0b2f 03       		.byte	0x3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 126


 5697 0b30 00000000 		.4byte	elbow_state
 5698 0b34 1D       		.uleb128 0x1d
 5699 0b35 E9000000 		.4byte	.LASF151
 5700 0b39 01       		.byte	0x1
 5701 0b3a DF02     		.2byte	0x2df
 5702 0b3c 35010000 		.4byte	0x135
 5703 0b40 05       		.uleb128 0x5
 5704 0b41 03       		.byte	0x3
 5705 0b42 00000000 		.4byte	shoulder_state
 5706 0b46 1D       		.uleb128 0x1d
 5707 0b47 83040000 		.4byte	.LASF152
 5708 0b4b 01       		.byte	0x1
 5709 0b4c 7303     		.2byte	0x373
 5710 0b4e 5B010000 		.4byte	0x15b
 5711 0b52 05       		.uleb128 0x5
 5712 0b53 03       		.byte	0x3
 5713 0b54 00000000 		.4byte	baseAzimuth_state
 5714 0b58 1D       		.uleb128 0x1d
 5715 0b59 4C030000 		.4byte	.LASF153
 5716 0b5d 01       		.byte	0x1
 5717 0b5e D703     		.2byte	0x3d7
 5718 0b60 81010000 		.4byte	0x181
 5719 0b64 05       		.uleb128 0x5
 5720 0b65 03       		.byte	0x3
 5721 0b66 00000000 		.4byte	effector_state
 5722 0b6a 1D       		.uleb128 0x1d
 5723 0b6b C1060000 		.4byte	.LASF154
 5724 0b6f 01       		.byte	0x1
 5725 0b70 1904     		.2byte	0x419
 5726 0b72 A7010000 		.4byte	0x1a7
 5727 0b76 05       		.uleb128 0x5
 5728 0b77 03       		.byte	0x3
 5729 0b78 00000000 		.4byte	phSensor_state
 5730 0b7c 00       		.byte	0
 5731              		.section	.debug_abbrev,"",%progbits
 5732              	.Ldebug_abbrev0:
 5733 0000 01       		.uleb128 0x1
 5734 0001 11       		.uleb128 0x11
 5735 0002 01       		.byte	0x1
 5736 0003 25       		.uleb128 0x25
 5737 0004 0E       		.uleb128 0xe
 5738 0005 13       		.uleb128 0x13
 5739 0006 0B       		.uleb128 0xb
 5740 0007 03       		.uleb128 0x3
 5741 0008 0E       		.uleb128 0xe
 5742 0009 1B       		.uleb128 0x1b
 5743 000a 0E       		.uleb128 0xe
 5744 000b 55       		.uleb128 0x55
 5745 000c 17       		.uleb128 0x17
 5746 000d 11       		.uleb128 0x11
 5747 000e 01       		.uleb128 0x1
 5748 000f 10       		.uleb128 0x10
 5749 0010 17       		.uleb128 0x17
 5750 0011 00       		.byte	0
 5751 0012 00       		.byte	0
 5752 0013 02       		.uleb128 0x2
 5753 0014 24       		.uleb128 0x24
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 127


 5754 0015 00       		.byte	0
 5755 0016 0B       		.uleb128 0xb
 5756 0017 0B       		.uleb128 0xb
 5757 0018 3E       		.uleb128 0x3e
 5758 0019 0B       		.uleb128 0xb
 5759 001a 03       		.uleb128 0x3
 5760 001b 0E       		.uleb128 0xe
 5761 001c 00       		.byte	0
 5762 001d 00       		.byte	0
 5763 001e 03       		.uleb128 0x3
 5764 001f 24       		.uleb128 0x24
 5765 0020 00       		.byte	0
 5766 0021 0B       		.uleb128 0xb
 5767 0022 0B       		.uleb128 0xb
 5768 0023 3E       		.uleb128 0x3e
 5769 0024 0B       		.uleb128 0xb
 5770 0025 03       		.uleb128 0x3
 5771 0026 08       		.uleb128 0x8
 5772 0027 00       		.byte	0
 5773 0028 00       		.byte	0
 5774 0029 04       		.uleb128 0x4
 5775 002a 16       		.uleb128 0x16
 5776 002b 00       		.byte	0
 5777 002c 03       		.uleb128 0x3
 5778 002d 0E       		.uleb128 0xe
 5779 002e 3A       		.uleb128 0x3a
 5780 002f 0B       		.uleb128 0xb
 5781 0030 3B       		.uleb128 0x3b
 5782 0031 0B       		.uleb128 0xb
 5783 0032 49       		.uleb128 0x49
 5784 0033 13       		.uleb128 0x13
 5785 0034 00       		.byte	0
 5786 0035 00       		.byte	0
 5787 0036 05       		.uleb128 0x5
 5788 0037 35       		.uleb128 0x35
 5789 0038 00       		.byte	0
 5790 0039 49       		.uleb128 0x49
 5791 003a 13       		.uleb128 0x13
 5792 003b 00       		.byte	0
 5793 003c 00       		.byte	0
 5794 003d 06       		.uleb128 0x6
 5795 003e 04       		.uleb128 0x4
 5796 003f 01       		.byte	0x1
 5797 0040 03       		.uleb128 0x3
 5798 0041 0E       		.uleb128 0xe
 5799 0042 0B       		.uleb128 0xb
 5800 0043 0B       		.uleb128 0xb
 5801 0044 3A       		.uleb128 0x3a
 5802 0045 0B       		.uleb128 0xb
 5803 0046 3B       		.uleb128 0x3b
 5804 0047 05       		.uleb128 0x5
 5805 0048 01       		.uleb128 0x1
 5806 0049 13       		.uleb128 0x13
 5807 004a 00       		.byte	0
 5808 004b 00       		.byte	0
 5809 004c 07       		.uleb128 0x7
 5810 004d 28       		.uleb128 0x28
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 128


 5811 004e 00       		.byte	0
 5812 004f 03       		.uleb128 0x3
 5813 0050 0E       		.uleb128 0xe
 5814 0051 1C       		.uleb128 0x1c
 5815 0052 0D       		.uleb128 0xd
 5816 0053 00       		.byte	0
 5817 0054 00       		.byte	0
 5818 0055 08       		.uleb128 0x8
 5819 0056 2E       		.uleb128 0x2e
 5820 0057 01       		.byte	0x1
 5821 0058 3F       		.uleb128 0x3f
 5822 0059 19       		.uleb128 0x19
 5823 005a 03       		.uleb128 0x3
 5824 005b 0E       		.uleb128 0xe
 5825 005c 3A       		.uleb128 0x3a
 5826 005d 0B       		.uleb128 0xb
 5827 005e 3B       		.uleb128 0x3b
 5828 005f 0B       		.uleb128 0xb
 5829 0060 27       		.uleb128 0x27
 5830 0061 19       		.uleb128 0x19
 5831 0062 11       		.uleb128 0x11
 5832 0063 01       		.uleb128 0x1
 5833 0064 12       		.uleb128 0x12
 5834 0065 06       		.uleb128 0x6
 5835 0066 40       		.uleb128 0x40
 5836 0067 18       		.uleb128 0x18
 5837 0068 9642     		.uleb128 0x2116
 5838 006a 19       		.uleb128 0x19
 5839 006b 01       		.uleb128 0x1
 5840 006c 13       		.uleb128 0x13
 5841 006d 00       		.byte	0
 5842 006e 00       		.byte	0
 5843 006f 09       		.uleb128 0x9
 5844 0070 34       		.uleb128 0x34
 5845 0071 00       		.byte	0
 5846 0072 03       		.uleb128 0x3
 5847 0073 0E       		.uleb128 0xe
 5848 0074 3A       		.uleb128 0x3a
 5849 0075 0B       		.uleb128 0xb
 5850 0076 3B       		.uleb128 0x3b
 5851 0077 0B       		.uleb128 0xb
 5852 0078 49       		.uleb128 0x49
 5853 0079 13       		.uleb128 0x13
 5854 007a 02       		.uleb128 0x2
 5855 007b 18       		.uleb128 0x18
 5856 007c 00       		.byte	0
 5857 007d 00       		.byte	0
 5858 007e 0A       		.uleb128 0xa
 5859 007f 2E       		.uleb128 0x2e
 5860 0080 01       		.byte	0x1
 5861 0081 3F       		.uleb128 0x3f
 5862 0082 19       		.uleb128 0x19
 5863 0083 03       		.uleb128 0x3
 5864 0084 0E       		.uleb128 0xe
 5865 0085 3A       		.uleb128 0x3a
 5866 0086 0B       		.uleb128 0xb
 5867 0087 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 129


 5868 0088 0B       		.uleb128 0xb
 5869 0089 27       		.uleb128 0x27
 5870 008a 19       		.uleb128 0x19
 5871 008b 49       		.uleb128 0x49
 5872 008c 13       		.uleb128 0x13
 5873 008d 11       		.uleb128 0x11
 5874 008e 01       		.uleb128 0x1
 5875 008f 12       		.uleb128 0x12
 5876 0090 06       		.uleb128 0x6
 5877 0091 40       		.uleb128 0x40
 5878 0092 18       		.uleb128 0x18
 5879 0093 9642     		.uleb128 0x2116
 5880 0095 19       		.uleb128 0x19
 5881 0096 01       		.uleb128 0x1
 5882 0097 13       		.uleb128 0x13
 5883 0098 00       		.byte	0
 5884 0099 00       		.byte	0
 5885 009a 0B       		.uleb128 0xb
 5886 009b 05       		.uleb128 0x5
 5887 009c 00       		.byte	0
 5888 009d 03       		.uleb128 0x3
 5889 009e 0E       		.uleb128 0xe
 5890 009f 3A       		.uleb128 0x3a
 5891 00a0 0B       		.uleb128 0xb
 5892 00a1 3B       		.uleb128 0x3b
 5893 00a2 0B       		.uleb128 0xb
 5894 00a3 49       		.uleb128 0x49
 5895 00a4 13       		.uleb128 0x13
 5896 00a5 02       		.uleb128 0x2
 5897 00a6 18       		.uleb128 0x18
 5898 00a7 00       		.byte	0
 5899 00a8 00       		.byte	0
 5900 00a9 0C       		.uleb128 0xc
 5901 00aa 34       		.uleb128 0x34
 5902 00ab 00       		.byte	0
 5903 00ac 03       		.uleb128 0x3
 5904 00ad 08       		.uleb128 0x8
 5905 00ae 3A       		.uleb128 0x3a
 5906 00af 0B       		.uleb128 0xb
 5907 00b0 3B       		.uleb128 0x3b
 5908 00b1 0B       		.uleb128 0xb
 5909 00b2 49       		.uleb128 0x49
 5910 00b3 13       		.uleb128 0x13
 5911 00b4 02       		.uleb128 0x2
 5912 00b5 18       		.uleb128 0x18
 5913 00b6 00       		.byte	0
 5914 00b7 00       		.byte	0
 5915 00b8 0D       		.uleb128 0xd
 5916 00b9 0F       		.uleb128 0xf
 5917 00ba 00       		.byte	0
 5918 00bb 0B       		.uleb128 0xb
 5919 00bc 0B       		.uleb128 0xb
 5920 00bd 49       		.uleb128 0x49
 5921 00be 13       		.uleb128 0x13
 5922 00bf 00       		.byte	0
 5923 00c0 00       		.byte	0
 5924 00c1 0E       		.uleb128 0xe
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 130


 5925 00c2 2E       		.uleb128 0x2e
 5926 00c3 01       		.byte	0x1
 5927 00c4 3F       		.uleb128 0x3f
 5928 00c5 19       		.uleb128 0x19
 5929 00c6 03       		.uleb128 0x3
 5930 00c7 0E       		.uleb128 0xe
 5931 00c8 3A       		.uleb128 0x3a
 5932 00c9 0B       		.uleb128 0xb
 5933 00ca 3B       		.uleb128 0x3b
 5934 00cb 0B       		.uleb128 0xb
 5935 00cc 27       		.uleb128 0x27
 5936 00cd 19       		.uleb128 0x19
 5937 00ce 49       		.uleb128 0x49
 5938 00cf 13       		.uleb128 0x13
 5939 00d0 11       		.uleb128 0x11
 5940 00d1 01       		.uleb128 0x1
 5941 00d2 12       		.uleb128 0x12
 5942 00d3 06       		.uleb128 0x6
 5943 00d4 40       		.uleb128 0x40
 5944 00d5 18       		.uleb128 0x18
 5945 00d6 9742     		.uleb128 0x2117
 5946 00d8 19       		.uleb128 0x19
 5947 00d9 01       		.uleb128 0x1
 5948 00da 13       		.uleb128 0x13
 5949 00db 00       		.byte	0
 5950 00dc 00       		.byte	0
 5951 00dd 0F       		.uleb128 0xf
 5952 00de 2E       		.uleb128 0x2e
 5953 00df 01       		.byte	0x1
 5954 00e0 3F       		.uleb128 0x3f
 5955 00e1 19       		.uleb128 0x19
 5956 00e2 03       		.uleb128 0x3
 5957 00e3 0E       		.uleb128 0xe
 5958 00e4 3A       		.uleb128 0x3a
 5959 00e5 0B       		.uleb128 0xb
 5960 00e6 3B       		.uleb128 0x3b
 5961 00e7 05       		.uleb128 0x5
 5962 00e8 27       		.uleb128 0x27
 5963 00e9 19       		.uleb128 0x19
 5964 00ea 49       		.uleb128 0x49
 5965 00eb 13       		.uleb128 0x13
 5966 00ec 11       		.uleb128 0x11
 5967 00ed 01       		.uleb128 0x1
 5968 00ee 12       		.uleb128 0x12
 5969 00ef 06       		.uleb128 0x6
 5970 00f0 40       		.uleb128 0x40
 5971 00f1 18       		.uleb128 0x18
 5972 00f2 9742     		.uleb128 0x2117
 5973 00f4 19       		.uleb128 0x19
 5974 00f5 01       		.uleb128 0x1
 5975 00f6 13       		.uleb128 0x13
 5976 00f7 00       		.byte	0
 5977 00f8 00       		.byte	0
 5978 00f9 10       		.uleb128 0x10
 5979 00fa 05       		.uleb128 0x5
 5980 00fb 00       		.byte	0
 5981 00fc 03       		.uleb128 0x3
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 131


 5982 00fd 0E       		.uleb128 0xe
 5983 00fe 3A       		.uleb128 0x3a
 5984 00ff 0B       		.uleb128 0xb
 5985 0100 3B       		.uleb128 0x3b
 5986 0101 05       		.uleb128 0x5
 5987 0102 49       		.uleb128 0x49
 5988 0103 13       		.uleb128 0x13
 5989 0104 02       		.uleb128 0x2
 5990 0105 18       		.uleb128 0x18
 5991 0106 00       		.byte	0
 5992 0107 00       		.byte	0
 5993 0108 11       		.uleb128 0x11
 5994 0109 34       		.uleb128 0x34
 5995 010a 00       		.byte	0
 5996 010b 03       		.uleb128 0x3
 5997 010c 0E       		.uleb128 0xe
 5998 010d 3A       		.uleb128 0x3a
 5999 010e 0B       		.uleb128 0xb
 6000 010f 3B       		.uleb128 0x3b
 6001 0110 05       		.uleb128 0x5
 6002 0111 49       		.uleb128 0x49
 6003 0112 13       		.uleb128 0x13
 6004 0113 02       		.uleb128 0x2
 6005 0114 18       		.uleb128 0x18
 6006 0115 00       		.byte	0
 6007 0116 00       		.byte	0
 6008 0117 12       		.uleb128 0x12
 6009 0118 2E       		.uleb128 0x2e
 6010 0119 01       		.byte	0x1
 6011 011a 3F       		.uleb128 0x3f
 6012 011b 19       		.uleb128 0x19
 6013 011c 03       		.uleb128 0x3
 6014 011d 0E       		.uleb128 0xe
 6015 011e 3A       		.uleb128 0x3a
 6016 011f 0B       		.uleb128 0xb
 6017 0120 3B       		.uleb128 0x3b
 6018 0121 05       		.uleb128 0x5
 6019 0122 27       		.uleb128 0x27
 6020 0123 19       		.uleb128 0x19
 6021 0124 49       		.uleb128 0x49
 6022 0125 13       		.uleb128 0x13
 6023 0126 11       		.uleb128 0x11
 6024 0127 01       		.uleb128 0x1
 6025 0128 12       		.uleb128 0x12
 6026 0129 06       		.uleb128 0x6
 6027 012a 40       		.uleb128 0x40
 6028 012b 18       		.uleb128 0x18
 6029 012c 9642     		.uleb128 0x2116
 6030 012e 19       		.uleb128 0x19
 6031 012f 01       		.uleb128 0x1
 6032 0130 13       		.uleb128 0x13
 6033 0131 00       		.byte	0
 6034 0132 00       		.byte	0
 6035 0133 13       		.uleb128 0x13
 6036 0134 2E       		.uleb128 0x2e
 6037 0135 00       		.byte	0
 6038 0136 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 132


 6039 0137 19       		.uleb128 0x19
 6040 0138 03       		.uleb128 0x3
 6041 0139 0E       		.uleb128 0xe
 6042 013a 3A       		.uleb128 0x3a
 6043 013b 0B       		.uleb128 0xb
 6044 013c 3B       		.uleb128 0x3b
 6045 013d 05       		.uleb128 0x5
 6046 013e 11       		.uleb128 0x11
 6047 013f 01       		.uleb128 0x1
 6048 0140 12       		.uleb128 0x12
 6049 0141 06       		.uleb128 0x6
 6050 0142 40       		.uleb128 0x40
 6051 0143 18       		.uleb128 0x18
 6052 0144 9742     		.uleb128 0x2117
 6053 0146 19       		.uleb128 0x19
 6054 0147 00       		.byte	0
 6055 0148 00       		.byte	0
 6056 0149 14       		.uleb128 0x14
 6057 014a 2E       		.uleb128 0x2e
 6058 014b 00       		.byte	0
 6059 014c 3F       		.uleb128 0x3f
 6060 014d 19       		.uleb128 0x19
 6061 014e 03       		.uleb128 0x3
 6062 014f 0E       		.uleb128 0xe
 6063 0150 3A       		.uleb128 0x3a
 6064 0151 0B       		.uleb128 0xb
 6065 0152 3B       		.uleb128 0x3b
 6066 0153 05       		.uleb128 0x5
 6067 0154 11       		.uleb128 0x11
 6068 0155 01       		.uleb128 0x1
 6069 0156 12       		.uleb128 0x12
 6070 0157 06       		.uleb128 0x6
 6071 0158 40       		.uleb128 0x40
 6072 0159 18       		.uleb128 0x18
 6073 015a 9642     		.uleb128 0x2116
 6074 015c 19       		.uleb128 0x19
 6075 015d 00       		.byte	0
 6076 015e 00       		.byte	0
 6077 015f 15       		.uleb128 0x15
 6078 0160 2E       		.uleb128 0x2e
 6079 0161 01       		.byte	0x1
 6080 0162 3F       		.uleb128 0x3f
 6081 0163 19       		.uleb128 0x19
 6082 0164 03       		.uleb128 0x3
 6083 0165 0E       		.uleb128 0xe
 6084 0166 3A       		.uleb128 0x3a
 6085 0167 0B       		.uleb128 0xb
 6086 0168 3B       		.uleb128 0x3b
 6087 0169 05       		.uleb128 0x5
 6088 016a 27       		.uleb128 0x27
 6089 016b 19       		.uleb128 0x19
 6090 016c 11       		.uleb128 0x11
 6091 016d 01       		.uleb128 0x1
 6092 016e 12       		.uleb128 0x12
 6093 016f 06       		.uleb128 0x6
 6094 0170 40       		.uleb128 0x40
 6095 0171 18       		.uleb128 0x18
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 133


 6096 0172 9642     		.uleb128 0x2116
 6097 0174 19       		.uleb128 0x19
 6098 0175 01       		.uleb128 0x1
 6099 0176 13       		.uleb128 0x13
 6100 0177 00       		.byte	0
 6101 0178 00       		.byte	0
 6102 0179 16       		.uleb128 0x16
 6103 017a 01       		.uleb128 0x1
 6104 017b 01       		.byte	0x1
 6105 017c 49       		.uleb128 0x49
 6106 017d 13       		.uleb128 0x13
 6107 017e 01       		.uleb128 0x1
 6108 017f 13       		.uleb128 0x13
 6109 0180 00       		.byte	0
 6110 0181 00       		.byte	0
 6111 0182 17       		.uleb128 0x17
 6112 0183 21       		.uleb128 0x21
 6113 0184 00       		.byte	0
 6114 0185 49       		.uleb128 0x49
 6115 0186 13       		.uleb128 0x13
 6116 0187 2F       		.uleb128 0x2f
 6117 0188 0B       		.uleb128 0xb
 6118 0189 00       		.byte	0
 6119 018a 00       		.byte	0
 6120 018b 18       		.uleb128 0x18
 6121 018c 34       		.uleb128 0x34
 6122 018d 00       		.byte	0
 6123 018e 03       		.uleb128 0x3
 6124 018f 08       		.uleb128 0x8
 6125 0190 3A       		.uleb128 0x3a
 6126 0191 0B       		.uleb128 0xb
 6127 0192 3B       		.uleb128 0x3b
 6128 0193 05       		.uleb128 0x5
 6129 0194 49       		.uleb128 0x49
 6130 0195 13       		.uleb128 0x13
 6131 0196 02       		.uleb128 0x2
 6132 0197 18       		.uleb128 0x18
 6133 0198 00       		.byte	0
 6134 0199 00       		.byte	0
 6135 019a 19       		.uleb128 0x19
 6136 019b 2E       		.uleb128 0x2e
 6137 019c 01       		.byte	0x1
 6138 019d 3F       		.uleb128 0x3f
 6139 019e 19       		.uleb128 0x19
 6140 019f 03       		.uleb128 0x3
 6141 01a0 0E       		.uleb128 0xe
 6142 01a1 3A       		.uleb128 0x3a
 6143 01a2 0B       		.uleb128 0xb
 6144 01a3 3B       		.uleb128 0x3b
 6145 01a4 05       		.uleb128 0x5
 6146 01a5 11       		.uleb128 0x11
 6147 01a6 01       		.uleb128 0x1
 6148 01a7 12       		.uleb128 0x12
 6149 01a8 06       		.uleb128 0x6
 6150 01a9 40       		.uleb128 0x40
 6151 01aa 18       		.uleb128 0x18
 6152 01ab 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 134


 6153 01ad 19       		.uleb128 0x19
 6154 01ae 01       		.uleb128 0x1
 6155 01af 13       		.uleb128 0x13
 6156 01b0 00       		.byte	0
 6157 01b1 00       		.byte	0
 6158 01b2 1A       		.uleb128 0x1a
 6159 01b3 0B       		.uleb128 0xb
 6160 01b4 01       		.byte	0x1
 6161 01b5 11       		.uleb128 0x11
 6162 01b6 01       		.uleb128 0x1
 6163 01b7 12       		.uleb128 0x12
 6164 01b8 06       		.uleb128 0x6
 6165 01b9 00       		.byte	0
 6166 01ba 00       		.byte	0
 6167 01bb 1B       		.uleb128 0x1b
 6168 01bc 2E       		.uleb128 0x2e
 6169 01bd 01       		.byte	0x1
 6170 01be 3F       		.uleb128 0x3f
 6171 01bf 19       		.uleb128 0x19
 6172 01c0 03       		.uleb128 0x3
 6173 01c1 0E       		.uleb128 0xe
 6174 01c2 3A       		.uleb128 0x3a
 6175 01c3 0B       		.uleb128 0xb
 6176 01c4 3B       		.uleb128 0x3b
 6177 01c5 05       		.uleb128 0x5
 6178 01c6 49       		.uleb128 0x49
 6179 01c7 13       		.uleb128 0x13
 6180 01c8 11       		.uleb128 0x11
 6181 01c9 01       		.uleb128 0x1
 6182 01ca 12       		.uleb128 0x12
 6183 01cb 06       		.uleb128 0x6
 6184 01cc 40       		.uleb128 0x40
 6185 01cd 18       		.uleb128 0x18
 6186 01ce 9642     		.uleb128 0x2116
 6187 01d0 19       		.uleb128 0x19
 6188 01d1 01       		.uleb128 0x1
 6189 01d2 13       		.uleb128 0x13
 6190 01d3 00       		.byte	0
 6191 01d4 00       		.byte	0
 6192 01d5 1C       		.uleb128 0x1c
 6193 01d6 34       		.uleb128 0x34
 6194 01d7 00       		.byte	0
 6195 01d8 03       		.uleb128 0x3
 6196 01d9 0E       		.uleb128 0xe
 6197 01da 3A       		.uleb128 0x3a
 6198 01db 0B       		.uleb128 0xb
 6199 01dc 3B       		.uleb128 0x3b
 6200 01dd 0B       		.uleb128 0xb
 6201 01de 49       		.uleb128 0x49
 6202 01df 13       		.uleb128 0x13
 6203 01e0 3F       		.uleb128 0x3f
 6204 01e1 19       		.uleb128 0x19
 6205 01e2 02       		.uleb128 0x2
 6206 01e3 18       		.uleb128 0x18
 6207 01e4 00       		.byte	0
 6208 01e5 00       		.byte	0
 6209 01e6 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 135


 6210 01e7 34       		.uleb128 0x34
 6211 01e8 00       		.byte	0
 6212 01e9 03       		.uleb128 0x3
 6213 01ea 0E       		.uleb128 0xe
 6214 01eb 3A       		.uleb128 0x3a
 6215 01ec 0B       		.uleb128 0xb
 6216 01ed 3B       		.uleb128 0x3b
 6217 01ee 05       		.uleb128 0x5
 6218 01ef 49       		.uleb128 0x49
 6219 01f0 13       		.uleb128 0x13
 6220 01f1 3F       		.uleb128 0x3f
 6221 01f2 19       		.uleb128 0x19
 6222 01f3 02       		.uleb128 0x2
 6223 01f4 18       		.uleb128 0x18
 6224 01f5 00       		.byte	0
 6225 01f6 00       		.byte	0
 6226 01f7 00       		.byte	0
 6227              		.section	.debug_aranges,"",%progbits
 6228 0000 CC000000 		.4byte	0xcc
 6229 0004 0200     		.2byte	0x2
 6230 0006 00000000 		.4byte	.Ldebug_info0
 6231 000a 04       		.byte	0x4
 6232 000b 00       		.byte	0
 6233 000c 0000     		.2byte	0
 6234 000e 0000     		.2byte	0
 6235 0010 00000000 		.4byte	.LFB34
 6236 0014 28000000 		.4byte	.LFE34-.LFB34
 6237 0018 00000000 		.4byte	.LFB35
 6238 001c B8010000 		.4byte	.LFE35-.LFB35
 6239 0020 00000000 		.4byte	.LFB36
 6240 0024 B8010000 		.4byte	.LFE36-.LFB36
 6241 0028 00000000 		.4byte	.LFB37
 6242 002c 78000000 		.4byte	.LFE37-.LFB37
 6243 0030 00000000 		.4byte	.LFB38
 6244 0034 3E000000 		.4byte	.LFE38-.LFB38
 6245 0038 00000000 		.4byte	.LFB39
 6246 003c 0C010000 		.4byte	.LFE39-.LFB39
 6247 0040 00000000 		.4byte	.LFB40
 6248 0044 0C020000 		.4byte	.LFE40-.LFB40
 6249 0048 00000000 		.4byte	.LFB41
 6250 004c 84000000 		.4byte	.LFE41-.LFB41
 6251 0050 00000000 		.4byte	.LFB42
 6252 0054 28000000 		.4byte	.LFE42-.LFB42
 6253 0058 00000000 		.4byte	.LFB43
 6254 005c 08000000 		.4byte	.LFE43-.LFB43
 6255 0060 00000000 		.4byte	.LFB44
 6256 0064 18000000 		.4byte	.LFE44-.LFB44
 6257 0068 00000000 		.4byte	.LFB45
 6258 006c 98000000 		.4byte	.LFE45-.LFB45
 6259 0070 00000000 		.4byte	.LFB46
 6260 0074 98000000 		.4byte	.LFE46-.LFB46
 6261 0078 00000000 		.4byte	.LFB47
 6262 007c 98000000 		.4byte	.LFE47-.LFB47
 6263 0080 00000000 		.4byte	.LFB48
 6264 0084 6C010000 		.4byte	.LFE48-.LFB48
 6265 0088 00000000 		.4byte	.LFB49
 6266 008c 6C010000 		.4byte	.LFE49-.LFB49
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 136


 6267 0090 00000000 		.4byte	.LFB50
 6268 0094 08030000 		.4byte	.LFE50-.LFB50
 6269 0098 00000000 		.4byte	.LFB51
 6270 009c 08030000 		.4byte	.LFE51-.LFB51
 6271 00a0 00000000 		.4byte	.LFB52
 6272 00a4 5C010000 		.4byte	.LFE52-.LFB52
 6273 00a8 00000000 		.4byte	.LFB53
 6274 00ac DC000000 		.4byte	.LFE53-.LFB53
 6275 00b0 00000000 		.4byte	.LFB54
 6276 00b4 8C000000 		.4byte	.LFE54-.LFB54
 6277 00b8 00000000 		.4byte	.LFB55
 6278 00bc 48010000 		.4byte	.LFE55-.LFB55
 6279 00c0 00000000 		.4byte	.LFB56
 6280 00c4 B0010000 		.4byte	.LFE56-.LFB56
 6281 00c8 00000000 		.4byte	0
 6282 00cc 00000000 		.4byte	0
 6283              		.section	.debug_ranges,"",%progbits
 6284              	.Ldebug_ranges0:
 6285 0000 00000000 		.4byte	.LFB34
 6286 0004 28000000 		.4byte	.LFE34
 6287 0008 00000000 		.4byte	.LFB35
 6288 000c B8010000 		.4byte	.LFE35
 6289 0010 00000000 		.4byte	.LFB36
 6290 0014 B8010000 		.4byte	.LFE36
 6291 0018 00000000 		.4byte	.LFB37
 6292 001c 78000000 		.4byte	.LFE37
 6293 0020 00000000 		.4byte	.LFB38
 6294 0024 3E000000 		.4byte	.LFE38
 6295 0028 00000000 		.4byte	.LFB39
 6296 002c 0C010000 		.4byte	.LFE39
 6297 0030 00000000 		.4byte	.LFB40
 6298 0034 0C020000 		.4byte	.LFE40
 6299 0038 00000000 		.4byte	.LFB41
 6300 003c 84000000 		.4byte	.LFE41
 6301 0040 00000000 		.4byte	.LFB42
 6302 0044 28000000 		.4byte	.LFE42
 6303 0048 00000000 		.4byte	.LFB43
 6304 004c 08000000 		.4byte	.LFE43
 6305 0050 00000000 		.4byte	.LFB44
 6306 0054 18000000 		.4byte	.LFE44
 6307 0058 00000000 		.4byte	.LFB45
 6308 005c 98000000 		.4byte	.LFE45
 6309 0060 00000000 		.4byte	.LFB46
 6310 0064 98000000 		.4byte	.LFE46
 6311 0068 00000000 		.4byte	.LFB47
 6312 006c 98000000 		.4byte	.LFE47
 6313 0070 00000000 		.4byte	.LFB48
 6314 0074 6C010000 		.4byte	.LFE48
 6315 0078 00000000 		.4byte	.LFB49
 6316 007c 6C010000 		.4byte	.LFE49
 6317 0080 00000000 		.4byte	.LFB50
 6318 0084 08030000 		.4byte	.LFE50
 6319 0088 00000000 		.4byte	.LFB51
 6320 008c 08030000 		.4byte	.LFE51
 6321 0090 00000000 		.4byte	.LFB52
 6322 0094 5C010000 		.4byte	.LFE52
 6323 0098 00000000 		.4byte	.LFB53
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 137


 6324 009c DC000000 		.4byte	.LFE53
 6325 00a0 00000000 		.4byte	.LFB54
 6326 00a4 8C000000 		.4byte	.LFE54
 6327 00a8 00000000 		.4byte	.LFB55
 6328 00ac 48010000 		.4byte	.LFE55
 6329 00b0 00000000 		.4byte	.LFB56
 6330 00b4 B0010000 		.4byte	.LFE56
 6331 00b8 00000000 		.4byte	0
 6332 00bc 00000000 		.4byte	0
 6333              		.section	.debug_line,"",%progbits
 6334              	.Ldebug_line0:
 6335 0000 53050000 		.section	.debug_str,"MS",%progbits,1
 6335      02005100 
 6335      00000201 
 6335      FB0E0D00 
 6335      01010101 
 6336              	.LASF108:
 6337 0000 62617365 		.ascii	"baseAzimuth\000"
 6337      417A696D 
 6337      75746800 
 6338              	.LASF19:
 6339 000c 74696C74 		.ascii	"tilt_init\000"
 6339      5F696E69 
 6339      7400
 6340              	.LASF63:
 6341 0016 6E756D5F 		.ascii	"num_items\000"
 6341      6974656D 
 6341      7300
 6342              	.LASF131:
 6343 0020 74657374 		.ascii	"test_array\000"
 6343      5F617272 
 6343      617900
 6344              	.LASF115:
 6345 002b 42415F63 		.ascii	"BA_cspot\000"
 6345      73706F74 
 6345      00
 6346              	.LASF142:
 6347 0034 656C6277 		.ascii	"elbw_errors\000"
 6347      5F657272 
 6347      6F727300 
 6348              	.LASF121:
 6349 0040 57545F63 		.ascii	"WT_cspot\000"
 6349      73706F74 
 6349      00
 6350              	.LASF100:
 6351 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6351      72725F63 
 6351      73706F74 
 6351      00
 6352              	.LASF41:
 6353 0056 42415F65 		.ascii	"BA_execute\000"
 6353      78656375 
 6353      746500
 6354              	.LASF28:
 6355 0061 656C626F 		.ascii	"elbow_states\000"
 6355      775F7374 
 6355      61746573 
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 138


 6355      00
 6356              	.LASF98:
 6357 006e 57545F61 		.ascii	"WT_array\000"
 6357      72726179 
 6357      00
 6358              	.LASF112:
 6359 0077 65666665 		.ascii	"effector\000"
 6359      63746F72 
 6359      00
 6360              	.LASF8:
 6361 0080 756E7369 		.ascii	"unsigned int\000"
 6361      676E6564 
 6361      20696E74 
 6361      00
 6362              	.LASF38:
 6363 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6363      417A696D 
 6363      7574685F 
 6363      73746174 
 6363      657300
 6364              	.LASF13:
 6365 00a0 696E7431 		.ascii	"int16\000"
 6365      3600
 6366              	.LASF59:
 6367 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 6367      62726174 
 6367      696F6E45 
 6367      6C626F77 
 6367      00
 6368              	.LASF51:
 6369 00b7 70685F65 		.ascii	"ph_execute\000"
 6369      78656375 
 6369      746500
 6370              	.LASF39:
 6371 00c2 42415F73 		.ascii	"BA_start\000"
 6371      74617274 
 6371      00
 6372              	.LASF107:
 6373 00cb 73686F75 		.ascii	"shoulder_array\000"
 6373      6C646572 
 6373      5F617272 
 6373      617900
 6374              	.LASF64:
 6375 00da 6D61696E 		.ascii	"maintain_array\000"
 6375      7461696E 
 6375      5F617272 
 6375      617900
 6376              	.LASF151:
 6377 00e9 73686F75 		.ascii	"shoulder_state\000"
 6377      6C646572 
 6377      5F737461 
 6377      746500
 6378              	.LASF24:
 6379 00f8 726F7461 		.ascii	"rotate_start\000"
 6379      74655F73 
 6379      74617274 
 6379      00
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 139


 6380              	.LASF95:
 6381 0105 73706565 		.ascii	"speed\000"
 6381      6400
 6382              	.LASF103:
 6383 010b 656C6277 		.ascii	"elbw_arr_cspot\000"
 6383      5F617272 
 6383      5F637370 
 6383      6F7400
 6384              	.LASF18:
 6385 011a 74696C74 		.ascii	"tilt_start\000"
 6385      5F737461 
 6385      727400
 6386              	.LASF70:
 6387 0125 73697A65 		.ascii	"size\000"
 6387      00
 6388              	.LASF140:
 6389 012a 6661696C 		.ascii	"fail_safe_errors\000"
 6389      5F736166 
 6389      655F6572 
 6389      726F7273 
 6389      00
 6390              	.LASF73:
 6391 013b 706F735F 		.ascii	"pos_to_vel\000"
 6391      746F5F76 
 6391      656C00
 6392              	.LASF150:
 6393 0146 656C626F 		.ascii	"elbow_state\000"
 6393      775F7374 
 6393      61746500 
 6394              	.LASF14:
 6395 0152 666C6F61 		.ascii	"float\000"
 6395      7400
 6396              	.LASF40:
 6397 0158 42415F69 		.ascii	"BA_init\000"
 6397      6E697400 
 6398              	.LASF72:
 6399 0160 696E6465 		.ascii	"index\000"
 6399      7800
 6400              	.LASF126:
 6401 0166 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6401      575F4C4F 
 6401      5745525F 
 6401      424F554E 
 6401      4400
 6402              	.LASF7:
 6403 0178 6C6F6E67 		.ascii	"long long unsigned int\000"
 6403      206C6F6E 
 6403      6720756E 
 6403      7369676E 
 6403      65642069 
 6404              	.LASF89:
 6405 018f 53657276 		.ascii	"ServoGoalPosition\000"
 6405      6F476F61 
 6405      6C506F73 
 6405      6974696F 
 6405      6E00
 6406              	.LASF147:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 140


 6407 01a1 74696D65 		.ascii	"timerFlag\000"
 6407      72466C61 
 6407      6700
 6408              	.LASF105:
 6409 01ab 73686F75 		.ascii	"shoulder\000"
 6409      6C646572 
 6409      00
 6410              	.LASF46:
 6411 01b4 6566665F 		.ascii	"eff_execute\000"
 6411      65786563 
 6411      75746500 
 6412              	.LASF79:
 6413 01c0 62797465 		.ascii	"byte1\000"
 6413      3100
 6414              	.LASF80:
 6415 01c6 62797465 		.ascii	"byte2\000"
 6415      3200
 6416              	.LASF144:
 6417 01cc 57545F65 		.ascii	"WT_errors\000"
 6417      72726F72 
 6417      7300
 6418              	.LASF146:
 6419 01d6 6566665F 		.ascii	"eff_errors\000"
 6419      6572726F 
 6419      727300
 6420              	.LASF81:
 6421 01e1 74656D70 		.ascii	"temp1\000"
 6421      3100
 6422              	.LASF82:
 6423 01e7 74656D70 		.ascii	"temp2\000"
 6423      3200
 6424              	.LASF83:
 6425 01ed 74656D70 		.ascii	"temp3\000"
 6425      3300
 6426              	.LASF113:
 6427 01f3 696E6974 		.ascii	"initialize\000"
 6427      69616C69 
 6427      7A6500
 6428              	.LASF102:
 6429 01fe 656C626F 		.ascii	"elbow\000"
 6429      7700
 6430              	.LASF44:
 6431 0204 6566665F 		.ascii	"eff_start\000"
 6431      73746172 
 6431      7400
 6432              	.LASF119:
 6433 020e 656C6277 		.ascii	"elbw_cspot\000"
 6433      5F637370 
 6433      6F7400
 6434              	.LASF143:
 6435 0219 42415F65 		.ascii	"BA_errors\000"
 6435      72726F72 
 6435      7300
 6436              	.LASF60:
 6437 0223 43616C69 		.ascii	"CalibrationShoulder\000"
 6437      62726174 
 6437      696F6E53 
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 141


 6437      686F756C 
 6437      64657200 
 6438              	.LASF123:
 6439 0237 66735F63 		.ascii	"fs_count\000"
 6439      6F756E74 
 6439      00
 6440              	.LASF66:
 6441 0240 53495A45 		.ascii	"SIZE\000"
 6441      00
 6442              	.LASF37:
 6443 0245 73686C64 		.ascii	"shldr_wait\000"
 6443      725F7761 
 6443      697400
 6444              	.LASF48:
 6445 0250 70685365 		.ascii	"phSensor_states\000"
 6445      6E736F72 
 6445      5F737461 
 6445      74657300 
 6446              	.LASF129:
 6447 0260 64617461 		.ascii	"data_array\000"
 6447      5F617272 
 6447      617900
 6448              	.LASF74:
 6449 026b 6375725F 		.ascii	"cur_pos\000"
 6449      706F7300 
 6450              	.LASF133:
 6451 0273 57525F46 		.ascii	"WR_FLAG\000"
 6451      4C414700 
 6452              	.LASF16:
 6453 027b 63686172 		.ascii	"char\000"
 6453      00
 6454              	.LASF10:
 6455 0280 75696E74 		.ascii	"uint16\000"
 6455      313600
 6456              	.LASF93:
 6457 0287 746F7271 		.ascii	"torque\000"
 6457      756500
 6458              	.LASF12:
 6459 028e 696E7438 		.ascii	"int8\000"
 6459      00
 6460              	.LASF85:
 6461 0293 66656564 		.ascii	"feedback\000"
 6461      6261636B 
 6461      00
 6462              	.LASF136:
 6463 029c 42415F46 		.ascii	"BA_FLAG\000"
 6463      4C414700 
 6464              	.LASF54:
 6465 02a4 4359434C 		.ascii	"CYCLES\000"
 6465      455300
 6466              	.LASF69:
 6467 02ab 6172725F 		.ascii	"arr_pos\000"
 6467      706F7300 
 6468              	.LASF35:
 6469 02b3 73686C64 		.ascii	"shldr_init\000"
 6469      725F696E 
 6469      697400
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 142


 6470              	.LASF6:
 6471 02be 6C6F6E67 		.ascii	"long long int\000"
 6471      206C6F6E 
 6471      6720696E 
 6471      7400
 6472              	.LASF138:
 6473 02cc 50485F46 		.ascii	"PH_FLAG\000"
 6473      4C414700 
 6474              	.LASF33:
 6475 02d4 73686F75 		.ascii	"shoulder_states\000"
 6475      6C646572 
 6475      5F737461 
 6475      74657300 
 6476              	.LASF65:
 6477 02e4 63706F73 		.ascii	"cpos\000"
 6477      00
 6478              	.LASF122:
 6479 02e9 57525F63 		.ascii	"WR_cspot\000"
 6479      73706F74 
 6479      00
 6480              	.LASF120:
 6481 02f2 656C6277 		.ascii	"elbw_array\000"
 6481      5F617272 
 6481      617900
 6482              	.LASF23:
 6483 02fd 77726973 		.ascii	"wristRotate_states\000"
 6483      74526F74 
 6483      6174655F 
 6483      73746174 
 6483      657300
 6484              	.LASF137:
 6485 0310 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6485      43544F52 
 6485      5F464C41 
 6485      4700
 6486              	.LASF127:
 6487 031e 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6487      4C444552 
 6487      5F555050 
 6487      45525F42 
 6487      4F554E44 
 6488              	.LASF49:
 6489 0333 70685F73 		.ascii	"ph_start\000"
 6489      74617274 
 6489      00
 6490              	.LASF43:
 6491 033c 65666665 		.ascii	"effector_states\000"
 6491      63746F72 
 6491      5F737461 
 6491      74657300 
 6492              	.LASF153:
 6493 034c 65666665 		.ascii	"effector_state\000"
 6493      63746F72 
 6493      5F737461 
 6493      746500
 6494              	.LASF55:
 6495 035b 626F756E 		.ascii	"bound\000"
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 143


 6495      6400
 6496              	.LASF11:
 6497 0361 75696E74 		.ascii	"uint32\000"
 6497      333200
 6498              	.LASF117:
 6499 0368 73686C64 		.ascii	"shldr_cspot\000"
 6499      725F6373 
 6499      706F7400 
 6500              	.LASF132:
 6501 0374 57545F46 		.ascii	"WT_FLAG\000"
 6501      4C414700 
 6502              	.LASF77:
 6503 037c 6D616B65 		.ascii	"make_command\000"
 6503      5F636F6D 
 6503      6D616E64 
 6503      00
 6504              	.LASF157:
 6505 0389 433A5C55 		.ascii	"C:\\Users\\Matt\\repos\\BYU_Mars_Rover\\arm_control"
 6505      73657273 
 6505      5C4D6174 
 6505      745C7265 
 6505      706F735C 
 6506 03b7 6C65725F 		.ascii	"ler_v2\\arm_controller_v2.1.cydsn\000"
 6506      76325C61 
 6506      726D5F63 
 6506      6F6E7472 
 6506      6F6C6C65 
 6507              	.LASF96:
 6508 03d8 77726973 		.ascii	"wristTilt\000"
 6508      7454696C 
 6508      7400
 6509              	.LASF135:
 6510 03e2 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6510      4C444552 
 6510      5F464C41 
 6510      4700
 6511              	.LASF29:
 6512 03f0 656C6277 		.ascii	"elbw_start\000"
 6512      5F737461 
 6512      727400
 6513              	.LASF148:
 6514 03fb 77726973 		.ascii	"wristTilt_state\000"
 6514      7454696C 
 6514      745F7374 
 6514      61746500 
 6515              	.LASF68:
 6516 040b 61727261 		.ascii	"array\000"
 6516      7900
 6517              	.LASF106:
 6518 0411 73686C64 		.ascii	"shldr_arr_cspot\000"
 6518      725F6172 
 6518      725F6373 
 6518      706F7400 
 6519              	.LASF109:
 6520 0421 42415F61 		.ascii	"BA_arr_cspot\000"
 6520      72725F63 
 6520      73706F74 
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 144


 6520      00
 6521              	.LASF71:
 6522 042e 6368616E 		.ascii	"change\000"
 6522      676500
 6523              	.LASF57:
 6524 0435 6368616E 		.ascii	"channel\000"
 6524      6E656C00 
 6525              	.LASF84:
 6526 043d 706F7446 		.ascii	"potFeedback\000"
 6526      65656462 
 6526      61636B00 
 6527              	.LASF75:
 6528 0449 41525241 		.ascii	"ARRAY_SIZE\000"
 6528      595F5349 
 6528      5A4500
 6529              	.LASF97:
 6530 0454 57545F61 		.ascii	"WT_arr_cspot\000"
 6530      72725F63 
 6530      73706F74 
 6530      00
 6531              	.LASF26:
 6532 0461 726F7461 		.ascii	"rotate_control\000"
 6532      74655F63 
 6532      6F6E7472 
 6532      6F6C00
 6533              	.LASF111:
 6534 0470 70685365 		.ascii	"phSensor\000"
 6534      6E736F72 
 6534      00
 6535              	.LASF2:
 6536 0479 73686F72 		.ascii	"short int\000"
 6536      7420696E 
 6536      7400
 6537              	.LASF152:
 6538 0483 62617365 		.ascii	"baseAzimuth_state\000"
 6538      417A696D 
 6538      7574685F 
 6538      73746174 
 6538      6500
 6539              	.LASF62:
 6540 0495 61765F61 		.ascii	"av_array\000"
 6540      72726179 
 6540      00
 6541              	.LASF4:
 6542 049e 6C6F6E67 		.ascii	"long int\000"
 6542      20696E74 
 6542      00
 6543              	.LASF20:
 6544 04a7 74696C74 		.ascii	"tilt_control\000"
 6544      5F636F6E 
 6544      74726F6C 
 6544      00
 6545              	.LASF88:
 6546 04b4 74696D65 		.ascii	"timer_isr\000"
 6546      725F6973 
 6546      7200
 6547              	.LASF145:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 145


 6548 04be 57525F65 		.ascii	"WR_errors\000"
 6548      72726F72 
 6548      7300
 6549              	.LASF149:
 6550 04c8 77726973 		.ascii	"wristRotate_state\000"
 6550      74526F74 
 6550      6174655F 
 6550      73746174 
 6550      6500
 6551              	.LASF42:
 6552 04da 42415F77 		.ascii	"BA_wait\000"
 6552      61697400 
 6553              	.LASF22:
 6554 04e2 77726973 		.ascii	"wristTilt_states\000"
 6554      7454696C 
 6554      745F7374 
 6554      61746573 
 6554      00
 6555              	.LASF130:
 6556 04f3 77697A6E 		.ascii	"wiznet\000"
 6556      657400
 6557              	.LASF67:
 6558 04fa 63686563 		.ascii	"check_update\000"
 6558      6B5F7570 
 6558      64617465 
 6558      00
 6559              	.LASF94:
 6560 0507 53657276 		.ascii	"ServoSpeed\000"
 6560      6F537065 
 6560      656400
 6561              	.LASF47:
 6562 0512 6566665F 		.ascii	"eff_wait\000"
 6562      77616974 
 6562      00
 6563              	.LASF61:
 6564 051b 76656C6F 		.ascii	"velocity\000"
 6564      63697479 
 6564      00
 6565              	.LASF86:
 6566 0524 73656E64 		.ascii	"send_feedback\000"
 6566      5F666565 
 6566      64626163 
 6566      6B00
 6567              	.LASF17:
 6568 0532 73697A65 		.ascii	"sizetype\000"
 6568      74797065 
 6568      00
 6569              	.LASF5:
 6570 053b 6C6F6E67 		.ascii	"long unsigned int\000"
 6570      20756E73 
 6570      69676E65 
 6570      6420696E 
 6570      7400
 6571              	.LASF31:
 6572 054d 656C6277 		.ascii	"elbw_execute\000"
 6572      5F657865 
 6572      63757465 
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 146


 6572      00
 6573              	.LASF110:
 6574 055a 62617365 		.ascii	"baseAz_array\000"
 6574      417A5F61 
 6574      72726179 
 6574      00
 6575              	.LASF27:
 6576 0567 726F7461 		.ascii	"rotate_wait\000"
 6576      74655F77 
 6576      61697400 
 6577              	.LASF128:
 6578 0573 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6578      4C444552 
 6578      5F4C4F57 
 6578      45525F42 
 6578      4F554E44 
 6579              	.LASF34:
 6580 0588 73686C64 		.ascii	"shldr_start\000"
 6580      725F7374 
 6580      61727400 
 6581              	.LASF78:
 6582 0594 696E666F 		.ascii	"info_array\000"
 6582      5F617272 
 6582      617900
 6583              	.LASF1:
 6584 059f 756E7369 		.ascii	"unsigned char\000"
 6584      676E6564 
 6584      20636861 
 6584      7200
 6585              	.LASF87:
 6586 05ad 66696C6C 		.ascii	"fill_data_array\000"
 6586      5F646174 
 6586      615F6172 
 6586      72617900 
 6587              	.LASF99:
 6588 05bd 77726973 		.ascii	"wristRotate\000"
 6588      74526F74 
 6588      61746500 
 6589              	.LASF45:
 6590 05c9 6566665F 		.ascii	"eff_init\000"
 6590      696E6974 
 6590      00
 6591              	.LASF104:
 6592 05d2 656C626F 		.ascii	"elbow_array\000"
 6592      775F6172 
 6592      72617900 
 6593              	.LASF36:
 6594 05de 73686C64 		.ascii	"shldr_execute\000"
 6594      725F6578 
 6594      65637574 
 6594      6500
 6595              	.LASF125:
 6596 05ec 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6596      575F5550 
 6596      5045525F 
 6596      424F554E 
 6596      4400
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 147


 6597              	.LASF52:
 6598 05fe 70685F77 		.ascii	"ph_wait\000"
 6598      61697400 
 6599              	.LASF25:
 6600 0606 726F7461 		.ascii	"rotate_init\000"
 6600      74655F69 
 6600      6E697400 
 6601              	.LASF155:
 6602 0612 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6602      4320342E 
 6602      382E3420 
 6602      32303134 
 6602      30353236 
 6603 0645 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6603      20726576 
 6603      6973696F 
 6603      6E203231 
 6603      31333538 
 6604 0678 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6604      74643D67 
 6604      6E753939 
 6604      202D6666 
 6604      756E6374 
 6605              	.LASF76:
 6606 0699 636F6D6D 		.ascii	"command\000"
 6606      616E6400 
 6607              	.LASF58:
 6608 06a1 64696666 		.ascii	"difference\000"
 6608      6572656E 
 6608      636500
 6609              	.LASF124:
 6610 06ac 74656D70 		.ascii	"temp_val\000"
 6610      5F76616C 
 6610      00
 6611              	.LASF0:
 6612 06b5 7369676E 		.ascii	"signed char\000"
 6612      65642063 
 6612      68617200 
 6613              	.LASF154:
 6614 06c1 70685365 		.ascii	"phSensor_state\000"
 6614      6E736F72 
 6614      5F737461 
 6614      746500
 6615              	.LASF56:
 6616 06d0 61766572 		.ascii	"average\000"
 6616      61676500 
 6617              	.LASF3:
 6618 06d8 73686F72 		.ascii	"short unsigned int\000"
 6618      7420756E 
 6618      7369676E 
 6618      65642069 
 6618      6E7400
 6619              	.LASF32:
 6620 06eb 656C6277 		.ascii	"elbw_wait\000"
 6620      5F776169 
 6620      7400
 6621              	.LASF139:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 148


 6622 06f5 64726F70 		.ascii	"dropped_packets\000"
 6622      7065645F 
 6622      7061636B 
 6622      65747300 
 6623              	.LASF114:
 6624 0705 6D61696E 		.ascii	"main\000"
 6624      00
 6625              	.LASF116:
 6626 070a 42415F61 		.ascii	"BA_array\000"
 6626      72726179 
 6626      00
 6627              	.LASF21:
 6628 0713 74696C74 		.ascii	"tilt_wait\000"
 6628      5F776169 
 6628      7400
 6629              	.LASF101:
 6630 071d 57525F61 		.ascii	"WR_array\000"
 6630      72726179 
 6630      00
 6631              	.LASF9:
 6632 0726 75696E74 		.ascii	"uint8\000"
 6632      3800
 6633              	.LASF15:
 6634 072c 646F7562 		.ascii	"double\000"
 6634      6C6500
 6635              	.LASF134:
 6636 0733 454C424F 		.ascii	"ELBOW_FLAG\000"
 6636      575F464C 
 6636      414700
 6637              	.LASF50:
 6638 073e 70685F69 		.ascii	"ph_init\000"
 6638      6E697400 
 6639              	.LASF90:
 6640 0746 73657276 		.ascii	"servoID\000"
 6640      6F494400 
 6641              	.LASF53:
 6642 074e 6973725F 		.ascii	"isr_var\000"
 6642      76617200 
 6643              	.LASF141:
 6644 0756 73686C64 		.ascii	"shldr_errors\000"
 6644      725F6572 
 6644      726F7273 
 6644      00
 6645              	.LASF92:
 6646 0763 53657453 		.ascii	"SetServoTorque\000"
 6646      6572766F 
 6646      546F7271 
 6646      756500
 6647              	.LASF118:
 6648 0772 73686C64 		.ascii	"shldr_array\000"
 6648      725F6172 
 6648      72617900 
 6649              	.LASF91:
 6650 077e 706F7369 		.ascii	"position\000"
 6650      74696F6E 
 6650      00
 6651              	.LASF156:
ARM GAS  C:\Users\Matt\AppData\Local\Temp\ccH7kHtL.s 			page 149


 6652 0787 2E5C6D61 		.ascii	".\\main.c\000"
 6652      696E2E63 
 6652      00
 6653              	.LASF30:
 6654 0790 656C6277 		.ascii	"elbw_init\000"
 6654      5F696E69 
 6654      7400
 6655              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

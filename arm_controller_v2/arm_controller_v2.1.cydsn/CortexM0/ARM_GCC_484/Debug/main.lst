ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,14,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,14,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	WT_arr_cspot,1,1
  29              		.comm	WT_array,40,4
  30              		.comm	WR_arr_cspot,1,1
  31              		.comm	WR_array,40,4
  32              		.comm	timerFlag,1,1
  33              		.section	.text.timer_isr,"ax",%progbits
  34              		.align	2
  35              		.global	timer_isr
  36              		.code	16
  37              		.thumb_func
  38              		.type	timer_isr, %function
  39              	timer_isr:
  40              	.LFB34:
  41              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
  42              		.loc 1 11 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 2


  47              		.cfi_offset 14, -4
  48 0002 82B0     		sub	sp, sp, #8
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  52              		.loc 1 12 0
  53 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  54 000a 031C     		mov	r3, r0
  55 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
  56              		.loc 1 13 0
  57 000e 054B     		ldr	r3, .L2
  58 0010 0122     		mov	r2, #1
  59 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  60              		.loc 1 14 0
  61 0014 7B68     		ldr	r3, [r7, #4]
  62 0016 181C     		mov	r0, r3
  63 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
  64              		.loc 1 15 0
  65 001c BD46     		mov	sp, r7
  66 001e 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              	.L3:
  70 0022 C046     		.align	2
  71              	.L2:
  72 0024 00000000 		.word	timerFlag
  73              		.cfi_endproc
  74              	.LFE34:
  75              		.size	timer_isr, .-timer_isr
  76              		.global	__aeabi_uidiv
  77              		.section	.text.average,"ax",%progbits
  78              		.align	2
  79              		.global	average
  80              		.code	16
  81              		.thumb_func
  82              		.type	average, %function
  83              	average:
  84              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** //// function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 3


  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
  85              		.loc 1 51 0
  86              		.cfi_startproc
  87 0000 80B5     		push	{r7, lr}
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 86B0     		sub	sp, sp, #24
  92              		.cfi_def_cfa_offset 32
  93 0004 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  95 0006 7860     		str	r0, [r7, #4]
  96 0008 0A1C     		mov	r2, r1
  97 000a FB1C     		add	r3, r7, #3
  98 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
  99              		.loc 1 53 0
 100 000e 0023     		mov	r3, #0
 101 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 102              		.loc 1 54 0
 103 0012 3B1C     		mov	r3, r7
 104 0014 0E33     		add	r3, r3, #14
 105 0016 0022     		mov	r2, #0
 106 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 107              		.loc 1 56 0
 108 001a 3B1C     		mov	r3, r7
 109 001c 1733     		add	r3, r3, #23
 110 001e 0022     		mov	r2, #0
 111 0020 1A70     		strb	r2, [r3]
 112 0022 10E0     		b	.L5
 113              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 4


 114              		.loc 1 58 0 discriminator 2
 115 0024 3B1C     		mov	r3, r7
 116 0026 1733     		add	r3, r3, #23
 117 0028 1B78     		ldrb	r3, [r3]
 118 002a 5B00     		lsl	r3, r3, #1
 119 002c 7A68     		ldr	r2, [r7, #4]
 120 002e D318     		add	r3, r2, r3
 121 0030 1B88     		ldrh	r3, [r3]
 122 0032 3A69     		ldr	r2, [r7, #16]
 123 0034 D318     		add	r3, r2, r3
 124 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 125              		.loc 1 56 0 discriminator 2
 126 0038 3B1C     		mov	r3, r7
 127 003a 1733     		add	r3, r3, #23
 128 003c 1A78     		ldrb	r2, [r3]
 129 003e 3B1C     		mov	r3, r7
 130 0040 1733     		add	r3, r3, #23
 131 0042 0132     		add	r2, r2, #1
 132 0044 1A70     		strb	r2, [r3]
 133              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 134              		.loc 1 56 0 is_stmt 0 discriminator 1
 135 0046 3A1C     		mov	r2, r7
 136 0048 1732     		add	r2, r2, #23
 137 004a FB1C     		add	r3, r7, #3
 138 004c 1278     		ldrb	r2, [r2]
 139 004e 1B78     		ldrb	r3, [r3]
 140 0050 9A42     		cmp	r2, r3
 141 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
 142              		.loc 1 61 0 is_stmt 1
 143 0054 FB1C     		add	r3, r7, #3
 144 0056 1B78     		ldrb	r3, [r3]
 145 0058 3869     		ldr	r0, [r7, #16]
 146 005a 191C     		mov	r1, r3
 147 005c FFF7FEFF 		bl	__aeabi_uidiv
 148 0060 031C     		mov	r3, r0
 149 0062 1A1C     		mov	r2, r3
 150 0064 3B1C     		mov	r3, r7
 151 0066 0E33     		add	r3, r3, #14
 152 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 153              		.loc 1 63 0
 154 006a 3B1C     		mov	r3, r7
 155 006c 0E33     		add	r3, r3, #14
 156 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 157              		.loc 1 64 0
 158 0070 181C     		mov	r0, r3
 159 0072 BD46     		mov	sp, r7
 160 0074 06B0     		add	sp, sp, #24
 161              		@ sp needed
 162 0076 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 5


 163              		.cfi_endproc
 164              	.LFE35:
 165              		.size	average, .-average
 166              		.section	.text.pos_to_vel,"ax",%progbits
 167              		.align	2
 168              		.global	pos_to_vel
 169              		.code	16
 170              		.thumb_func
 171              		.type	pos_to_vel, %function
 172              	pos_to_vel:
 173              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** void pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
  67:.\main.c      **** {
 174              		.loc 1 67 0
 175              		.cfi_startproc
 176 0000 80B5     		push	{r7, lr}
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 7, -8
 179              		.cfi_offset 14, -4
 180 0002 82B0     		sub	sp, sp, #8
 181              		.cfi_def_cfa_offset 16
 182 0004 00AF     		add	r7, sp, #0
 183              		.cfi_def_cfa_register 7
 184 0006 3960     		str	r1, [r7]
 185 0008 111C     		mov	r1, r2
 186 000a 1A1C     		mov	r2, r3
 187 000c FB1D     		add	r3, r7, #7
 188 000e 1870     		strb	r0, [r3]
 189 0010 BB1D     		add	r3, r7, #6
 190 0012 1970     		strb	r1, [r3]
 191 0014 3B1D     		add	r3, r7, #4
 192 0016 1A80     		strh	r2, [r3]
  68:.\main.c      ****     if(command >= 1000 && command < 1100)
 193              		.loc 1 68 0
 194 0018 3B1D     		add	r3, r7, #4
 195 001a 1A88     		ldrh	r2, [r3]
 196 001c C54B     		ldr	r3, .L70
 197 001e 9A42     		cmp	r2, r3
 198 0020 00D8     		bhi	.LCB141
 199 0022 7CE0     		b	.L9	@long jump
 200              	.LCB141:
 201              		.loc 1 68 0 is_stmt 0 discriminator 1
 202 0024 3B1D     		add	r3, r7, #4
 203 0026 1A88     		ldrh	r2, [r3]
 204 0028 C34B     		ldr	r3, .L70+4
 205 002a 9A42     		cmp	r2, r3
 206 002c 00D9     		bls	.LCB146
 207 002e 76E0     		b	.L9	@long jump
 208              	.LCB146:
  69:.\main.c      ****     {
  70:.\main.c      ****         if(cur_pos != 0)
 209              		.loc 1 70 0 is_stmt 1
 210 0030 FB1D     		add	r3, r7, #7
 211 0032 1B78     		ldrb	r3, [r3]
 212 0034 002B     		cmp	r3, #0
 213 0036 34D0     		beq	.L10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 6


  71:.\main.c      ****         {
  72:.\main.c      ****             if(array[cur_pos - 1] >= 1020)
 214              		.loc 1 72 0
 215 0038 FB1D     		add	r3, r7, #7
 216 003a 1B78     		ldrb	r3, [r3]
 217 003c BF49     		ldr	r1, .L70+8
 218 003e 5B18     		add	r3, r3, r1
 219 0040 5B00     		lsl	r3, r3, #1
 220 0042 3A68     		ldr	r2, [r7]
 221 0044 D318     		add	r3, r2, r3
 222 0046 1A88     		ldrh	r2, [r3]
 223 0048 BD4B     		ldr	r3, .L70+12
 224 004a 9A42     		cmp	r2, r3
 225 004c 10D9     		bls	.L11
  73:.\main.c      ****             {
  74:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] - 20);
 226              		.loc 1 74 0
 227 004e FB1D     		add	r3, r7, #7
 228 0050 1B78     		ldrb	r3, [r3]
 229 0052 5B00     		lsl	r3, r3, #1
 230 0054 3A68     		ldr	r2, [r7]
 231 0056 D318     		add	r3, r2, r3
 232 0058 FA1D     		add	r2, r7, #7
 233 005a 1278     		ldrb	r2, [r2]
 234 005c B749     		ldr	r1, .L70+8
 235 005e 5218     		add	r2, r2, r1
 236 0060 5200     		lsl	r2, r2, #1
 237 0062 3968     		ldr	r1, [r7]
 238 0064 8A18     		add	r2, r1, r2
 239 0066 1288     		ldrh	r2, [r2]
 240 0068 143A     		sub	r2, r2, #20
 241 006a 92B2     		uxth	r2, r2
 242 006c 1A80     		strh	r2, [r3]
 243 006e 07E0     		b	.L12
 244              	.L11:
  75:.\main.c      ****             }
  76:.\main.c      ****             else
  77:.\main.c      ****             {
  78:.\main.c      ****                 array[cur_pos] = 1000;
 245              		.loc 1 78 0
 246 0070 FB1D     		add	r3, r7, #7
 247 0072 1B78     		ldrb	r3, [r3]
 248 0074 5B00     		lsl	r3, r3, #1
 249 0076 3A68     		ldr	r2, [r7]
 250 0078 D318     		add	r3, r2, r3
 251 007a FA22     		mov	r2, #250
 252 007c 9200     		lsl	r2, r2, #2
 253 007e 1A80     		strh	r2, [r3]
 254              	.L12:
  79:.\main.c      ****             }
  80:.\main.c      ****             
  81:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 255              		.loc 1 81 0
 256 0080 FB1D     		add	r3, r7, #7
 257 0082 1A78     		ldrb	r2, [r3]
 258 0084 BB1D     		add	r3, r7, #6
 259 0086 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 7


 260 0088 013B     		sub	r3, r3, #1
 261 008a 9A42     		cmp	r2, r3
 262 008c 05DA     		bge	.L13
  82:.\main.c      ****             {
  83:.\main.c      ****                 cur_pos++;
 263              		.loc 1 83 0
 264 008e FB1D     		add	r3, r7, #7
 265 0090 1A78     		ldrb	r2, [r3]
 266 0092 FB1D     		add	r3, r7, #7
 267 0094 0132     		add	r2, r2, #1
 268 0096 1A70     		strb	r2, [r3]
 269 0098 40E0     		b	.L15
 270              	.L13:
  84:.\main.c      ****             }
  85:.\main.c      ****             else
  86:.\main.c      ****             {
  87:.\main.c      ****                 cur_pos = 0;
 271              		.loc 1 87 0
 272 009a FB1D     		add	r3, r7, #7
 273 009c 0022     		mov	r2, #0
 274 009e 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 275              		.loc 1 70 0
 276 00a0 60E2     		b	.L8
 277              	.L10:
  88:.\main.c      ****             }
  89:.\main.c      ****         }
  90:.\main.c      ****         else if(cur_pos == 0)
 278              		.loc 1 90 0
 279 00a2 FB1D     		add	r3, r7, #7
 280 00a4 1B78     		ldrb	r3, [r3]
 281 00a6 002B     		cmp	r3, #0
 282 00a8 34D1     		bne	.L16
  91:.\main.c      ****         {
  92:.\main.c      ****             if(array[ARRAY_SIZE - 1] >= 1020)
 283              		.loc 1 92 0
 284 00aa BB1D     		add	r3, r7, #6
 285 00ac 1B78     		ldrb	r3, [r3]
 286 00ae A34A     		ldr	r2, .L70+8
 287 00b0 9B18     		add	r3, r3, r2
 288 00b2 5B00     		lsl	r3, r3, #1
 289 00b4 3A68     		ldr	r2, [r7]
 290 00b6 D318     		add	r3, r2, r3
 291 00b8 1A88     		ldrh	r2, [r3]
 292 00ba A14B     		ldr	r3, .L70+12
 293 00bc 9A42     		cmp	r2, r3
 294 00be 10D9     		bls	.L17
  93:.\main.c      ****             {
  94:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] - 20);
 295              		.loc 1 94 0
 296 00c0 FB1D     		add	r3, r7, #7
 297 00c2 1B78     		ldrb	r3, [r3]
 298 00c4 5B00     		lsl	r3, r3, #1
 299 00c6 3A68     		ldr	r2, [r7]
 300 00c8 D318     		add	r3, r2, r3
 301 00ca BA1D     		add	r2, r7, #6
 302 00cc 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 8


 303 00ce 9B49     		ldr	r1, .L70+8
 304 00d0 5218     		add	r2, r2, r1
 305 00d2 5200     		lsl	r2, r2, #1
 306 00d4 3968     		ldr	r1, [r7]
 307 00d6 8A18     		add	r2, r1, r2
 308 00d8 1288     		ldrh	r2, [r2]
 309 00da 143A     		sub	r2, r2, #20
 310 00dc 92B2     		uxth	r2, r2
 311 00de 1A80     		strh	r2, [r3]
 312 00e0 07E0     		b	.L18
 313              	.L17:
  95:.\main.c      ****             }
  96:.\main.c      ****             else
  97:.\main.c      ****             {
  98:.\main.c      ****                 array[cur_pos] = 1000;
 314              		.loc 1 98 0
 315 00e2 FB1D     		add	r3, r7, #7
 316 00e4 1B78     		ldrb	r3, [r3]
 317 00e6 5B00     		lsl	r3, r3, #1
 318 00e8 3A68     		ldr	r2, [r7]
 319 00ea D318     		add	r3, r2, r3
 320 00ec FA22     		mov	r2, #250
 321 00ee 9200     		lsl	r2, r2, #2
 322 00f0 1A80     		strh	r2, [r3]
 323              	.L18:
  99:.\main.c      ****             }
 100:.\main.c      ****             
 101:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 324              		.loc 1 101 0
 325 00f2 FB1D     		add	r3, r7, #7
 326 00f4 1A78     		ldrb	r2, [r3]
 327 00f6 BB1D     		add	r3, r7, #6
 328 00f8 1B78     		ldrb	r3, [r3]
 329 00fa 013B     		sub	r3, r3, #1
 330 00fc 9A42     		cmp	r2, r3
 331 00fe 05DA     		bge	.L19
 102:.\main.c      ****             {
 103:.\main.c      ****                 cur_pos++;
 332              		.loc 1 103 0
 333 0100 FB1D     		add	r3, r7, #7
 334 0102 1A78     		ldrb	r2, [r3]
 335 0104 FB1D     		add	r3, r7, #7
 336 0106 0132     		add	r2, r2, #1
 337 0108 1A70     		strb	r2, [r3]
 338 010a 07E0     		b	.L15
 339              	.L19:
 104:.\main.c      ****             }
 105:.\main.c      ****             else
 106:.\main.c      ****             {
 107:.\main.c      ****                 cur_pos = 0;
 340              		.loc 1 107 0
 341 010c FB1D     		add	r3, r7, #7
 342 010e 0022     		mov	r2, #0
 343 0110 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 344              		.loc 1 70 0
 345 0112 27E2     		b	.L8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 9


 346              	.L16:
 108:.\main.c      ****             }
 109:.\main.c      ****         }
 110:.\main.c      ****         else
 111:.\main.c      ****         {
 112:.\main.c      ****             cur_pos = 0;
 347              		.loc 1 112 0
 348 0114 FB1D     		add	r3, r7, #7
 349 0116 0022     		mov	r2, #0
 350 0118 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 351              		.loc 1 70 0
 352 011a 23E2     		b	.L8
 353              	.L15:
 354 011c 22E2     		b	.L8
 355              	.L9:
 113:.\main.c      ****         }
 114:.\main.c      ****     }
 115:.\main.c      ****     else if(command >= 1100 && command < 1300)
 356              		.loc 1 115 0
 357 011e 3B1D     		add	r3, r7, #4
 358 0120 1A88     		ldrh	r2, [r3]
 359 0122 854B     		ldr	r3, .L70+4
 360 0124 9A42     		cmp	r2, r3
 361 0126 53D9     		bls	.L22
 362              		.loc 1 115 0 is_stmt 0 discriminator 1
 363 0128 3B1D     		add	r3, r7, #4
 364 012a 1A88     		ldrh	r2, [r3]
 365 012c 854B     		ldr	r3, .L70+16
 366 012e 9A42     		cmp	r2, r3
 367 0130 4ED8     		bhi	.L22
 116:.\main.c      ****     {
 117:.\main.c      ****         if(cur_pos != 0)
 368              		.loc 1 117 0 is_stmt 1
 369 0132 FB1D     		add	r3, r7, #7
 370 0134 1B78     		ldrb	r3, [r3]
 371 0136 002B     		cmp	r3, #0
 372 0138 20D0     		beq	.L23
 118:.\main.c      ****         {
 119:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 10);
 373              		.loc 1 119 0
 374 013a FB1D     		add	r3, r7, #7
 375 013c 1B78     		ldrb	r3, [r3]
 376 013e 5B00     		lsl	r3, r3, #1
 377 0140 3A68     		ldr	r2, [r7]
 378 0142 D318     		add	r3, r2, r3
 379 0144 FA1D     		add	r2, r7, #7
 380 0146 1278     		ldrb	r2, [r2]
 381 0148 7C49     		ldr	r1, .L70+8
 382 014a 5218     		add	r2, r2, r1
 383 014c 5200     		lsl	r2, r2, #1
 384 014e 3968     		ldr	r1, [r7]
 385 0150 8A18     		add	r2, r1, r2
 386 0152 1288     		ldrh	r2, [r2]
 387 0154 0A3A     		sub	r2, r2, #10
 388 0156 92B2     		uxth	r2, r2
 389 0158 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 10


 120:.\main.c      ****             
 121:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 390              		.loc 1 121 0
 391 015a FB1D     		add	r3, r7, #7
 392 015c 1A78     		ldrb	r2, [r3]
 393 015e BB1D     		add	r3, r7, #6
 394 0160 1B78     		ldrb	r3, [r3]
 395 0162 013B     		sub	r3, r3, #1
 396 0164 9A42     		cmp	r2, r3
 397 0166 05DA     		bge	.L24
 122:.\main.c      ****             {
 123:.\main.c      ****                 cur_pos++;
 398              		.loc 1 123 0
 399 0168 FB1D     		add	r3, r7, #7
 400 016a 1A78     		ldrb	r2, [r3]
 401 016c FB1D     		add	r3, r7, #7
 402 016e 0132     		add	r2, r2, #1
 403 0170 1A70     		strb	r2, [r3]
 404 0172 2CE0     		b	.L26
 405              	.L24:
 124:.\main.c      ****             }
 125:.\main.c      ****             else
 126:.\main.c      ****             {
 127:.\main.c      ****                 cur_pos = 0;
 406              		.loc 1 127 0
 407 0174 FB1D     		add	r3, r7, #7
 408 0176 0022     		mov	r2, #0
 409 0178 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 410              		.loc 1 117 0
 411 017a F3E1     		b	.L8
 412              	.L23:
 128:.\main.c      ****             }
 129:.\main.c      ****         }
 130:.\main.c      ****         else if(cur_pos == 0)
 413              		.loc 1 130 0
 414 017c FB1D     		add	r3, r7, #7
 415 017e 1B78     		ldrb	r3, [r3]
 416 0180 002B     		cmp	r3, #0
 417 0182 20D1     		bne	.L27
 131:.\main.c      ****         {
 132:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 10);
 418              		.loc 1 132 0
 419 0184 FB1D     		add	r3, r7, #7
 420 0186 1B78     		ldrb	r3, [r3]
 421 0188 5B00     		lsl	r3, r3, #1
 422 018a 3A68     		ldr	r2, [r7]
 423 018c D318     		add	r3, r2, r3
 424 018e BA1D     		add	r2, r7, #6
 425 0190 1278     		ldrb	r2, [r2]
 426 0192 6A49     		ldr	r1, .L70+8
 427 0194 5218     		add	r2, r2, r1
 428 0196 5200     		lsl	r2, r2, #1
 429 0198 3968     		ldr	r1, [r7]
 430 019a 8A18     		add	r2, r1, r2
 431 019c 1288     		ldrh	r2, [r2]
 432 019e 0A3A     		sub	r2, r2, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 11


 433 01a0 92B2     		uxth	r2, r2
 434 01a2 1A80     		strh	r2, [r3]
 133:.\main.c      ****            
 134:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 435              		.loc 1 134 0
 436 01a4 FB1D     		add	r3, r7, #7
 437 01a6 1A78     		ldrb	r2, [r3]
 438 01a8 BB1D     		add	r3, r7, #6
 439 01aa 1B78     		ldrb	r3, [r3]
 440 01ac 013B     		sub	r3, r3, #1
 441 01ae 9A42     		cmp	r2, r3
 442 01b0 05DA     		bge	.L28
 135:.\main.c      ****             {
 136:.\main.c      ****                 cur_pos++;
 443              		.loc 1 136 0
 444 01b2 FB1D     		add	r3, r7, #7
 445 01b4 1A78     		ldrb	r2, [r3]
 446 01b6 FB1D     		add	r3, r7, #7
 447 01b8 0132     		add	r2, r2, #1
 448 01ba 1A70     		strb	r2, [r3]
 449 01bc 07E0     		b	.L26
 450              	.L28:
 137:.\main.c      ****             }
 138:.\main.c      ****             else
 139:.\main.c      ****             {
 140:.\main.c      ****                 cur_pos = 0;
 451              		.loc 1 140 0
 452 01be FB1D     		add	r3, r7, #7
 453 01c0 0022     		mov	r2, #0
 454 01c2 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 455              		.loc 1 117 0
 456 01c4 CEE1     		b	.L8
 457              	.L27:
 141:.\main.c      ****             }
 142:.\main.c      ****         }
 143:.\main.c      ****         else
 144:.\main.c      ****         {
 145:.\main.c      ****             cur_pos = 0;   
 458              		.loc 1 145 0
 459 01c6 FB1D     		add	r3, r7, #7
 460 01c8 0022     		mov	r2, #0
 461 01ca 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 462              		.loc 1 117 0
 463 01cc CAE1     		b	.L8
 464              	.L26:
 465 01ce C9E1     		b	.L8
 466              	.L22:
 146:.\main.c      ****         }    
 147:.\main.c      ****     }
 148:.\main.c      ****     else if(command >= 1300 && command < 1490)
 467              		.loc 1 148 0
 468 01d0 3B1D     		add	r3, r7, #4
 469 01d2 1A88     		ldrh	r2, [r3]
 470 01d4 5B4B     		ldr	r3, .L70+16
 471 01d6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 12


 472 01d8 53D9     		bls	.L30
 473              		.loc 1 148 0 is_stmt 0 discriminator 1
 474 01da 3B1D     		add	r3, r7, #4
 475 01dc 1A88     		ldrh	r2, [r3]
 476 01de 5A4B     		ldr	r3, .L70+20
 477 01e0 9A42     		cmp	r2, r3
 478 01e2 4ED8     		bhi	.L30
 149:.\main.c      ****     {
 150:.\main.c      ****         if(cur_pos != 0)
 479              		.loc 1 150 0 is_stmt 1
 480 01e4 FB1D     		add	r3, r7, #7
 481 01e6 1B78     		ldrb	r3, [r3]
 482 01e8 002B     		cmp	r3, #0
 483 01ea 20D0     		beq	.L31
 151:.\main.c      ****         {
 152:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 5);
 484              		.loc 1 152 0
 485 01ec FB1D     		add	r3, r7, #7
 486 01ee 1B78     		ldrb	r3, [r3]
 487 01f0 5B00     		lsl	r3, r3, #1
 488 01f2 3A68     		ldr	r2, [r7]
 489 01f4 D318     		add	r3, r2, r3
 490 01f6 FA1D     		add	r2, r7, #7
 491 01f8 1278     		ldrb	r2, [r2]
 492 01fa 5049     		ldr	r1, .L70+8
 493 01fc 5218     		add	r2, r2, r1
 494 01fe 5200     		lsl	r2, r2, #1
 495 0200 3968     		ldr	r1, [r7]
 496 0202 8A18     		add	r2, r1, r2
 497 0204 1288     		ldrh	r2, [r2]
 498 0206 053A     		sub	r2, r2, #5
 499 0208 92B2     		uxth	r2, r2
 500 020a 1A80     		strh	r2, [r3]
 153:.\main.c      ****             
 154:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 501              		.loc 1 154 0
 502 020c FB1D     		add	r3, r7, #7
 503 020e 1A78     		ldrb	r2, [r3]
 504 0210 BB1D     		add	r3, r7, #6
 505 0212 1B78     		ldrb	r3, [r3]
 506 0214 013B     		sub	r3, r3, #1
 507 0216 9A42     		cmp	r2, r3
 508 0218 05DA     		bge	.L32
 155:.\main.c      ****             {
 156:.\main.c      ****                 cur_pos++;
 509              		.loc 1 156 0
 510 021a FB1D     		add	r3, r7, #7
 511 021c 1A78     		ldrb	r2, [r3]
 512 021e FB1D     		add	r3, r7, #7
 513 0220 0132     		add	r2, r2, #1
 514 0222 1A70     		strb	r2, [r3]
 515 0224 2CE0     		b	.L34
 516              	.L32:
 157:.\main.c      ****             }
 158:.\main.c      ****             else
 159:.\main.c      ****             {
 160:.\main.c      ****                 cur_pos = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 13


 517              		.loc 1 160 0
 518 0226 FB1D     		add	r3, r7, #7
 519 0228 0022     		mov	r2, #0
 520 022a 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 521              		.loc 1 150 0
 522 022c 9AE1     		b	.L8
 523              	.L31:
 161:.\main.c      ****             }
 162:.\main.c      ****         }
 163:.\main.c      ****         else if(cur_pos == 0)
 524              		.loc 1 163 0
 525 022e FB1D     		add	r3, r7, #7
 526 0230 1B78     		ldrb	r3, [r3]
 527 0232 002B     		cmp	r3, #0
 528 0234 20D1     		bne	.L35
 164:.\main.c      ****         {
 165:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 5);
 529              		.loc 1 165 0
 530 0236 FB1D     		add	r3, r7, #7
 531 0238 1B78     		ldrb	r3, [r3]
 532 023a 5B00     		lsl	r3, r3, #1
 533 023c 3A68     		ldr	r2, [r7]
 534 023e D318     		add	r3, r2, r3
 535 0240 BA1D     		add	r2, r7, #6
 536 0242 1278     		ldrb	r2, [r2]
 537 0244 3D49     		ldr	r1, .L70+8
 538 0246 5218     		add	r2, r2, r1
 539 0248 5200     		lsl	r2, r2, #1
 540 024a 3968     		ldr	r1, [r7]
 541 024c 8A18     		add	r2, r1, r2
 542 024e 1288     		ldrh	r2, [r2]
 543 0250 053A     		sub	r2, r2, #5
 544 0252 92B2     		uxth	r2, r2
 545 0254 1A80     		strh	r2, [r3]
 166:.\main.c      ****            
 167:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 546              		.loc 1 167 0
 547 0256 FB1D     		add	r3, r7, #7
 548 0258 1A78     		ldrb	r2, [r3]
 549 025a BB1D     		add	r3, r7, #6
 550 025c 1B78     		ldrb	r3, [r3]
 551 025e 013B     		sub	r3, r3, #1
 552 0260 9A42     		cmp	r2, r3
 553 0262 05DA     		bge	.L36
 168:.\main.c      ****             {
 169:.\main.c      ****                 cur_pos++;
 554              		.loc 1 169 0
 555 0264 FB1D     		add	r3, r7, #7
 556 0266 1A78     		ldrb	r2, [r3]
 557 0268 FB1D     		add	r3, r7, #7
 558 026a 0132     		add	r2, r2, #1
 559 026c 1A70     		strb	r2, [r3]
 560 026e 07E0     		b	.L34
 561              	.L36:
 170:.\main.c      ****             }
 171:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 14


 172:.\main.c      ****             {
 173:.\main.c      ****                 cur_pos = 0;
 562              		.loc 1 173 0
 563 0270 FB1D     		add	r3, r7, #7
 564 0272 0022     		mov	r2, #0
 565 0274 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 566              		.loc 1 150 0
 567 0276 75E1     		b	.L8
 568              	.L35:
 174:.\main.c      ****             }
 175:.\main.c      ****         }
 176:.\main.c      ****         else
 177:.\main.c      ****         {
 178:.\main.c      ****             cur_pos = 0;   
 569              		.loc 1 178 0
 570 0278 FB1D     		add	r3, r7, #7
 571 027a 0022     		mov	r2, #0
 572 027c 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 573              		.loc 1 150 0
 574 027e 71E1     		b	.L8
 575              	.L34:
 576 0280 70E1     		b	.L8
 577              	.L30:
 179:.\main.c      ****         }    
 180:.\main.c      ****     }
 181:.\main.c      ****     else if(command > 1510 && command <= 1700)
 578              		.loc 1 181 0
 579 0282 3B1D     		add	r3, r7, #4
 580 0284 1A88     		ldrh	r2, [r3]
 581 0286 314B     		ldr	r3, .L70+24
 582 0288 9A42     		cmp	r2, r3
 583 028a 63D9     		bls	.L38
 584              		.loc 1 181 0 is_stmt 0 discriminator 1
 585 028c 3B1D     		add	r3, r7, #4
 586 028e 1A88     		ldrh	r2, [r3]
 587 0290 2F4B     		ldr	r3, .L70+28
 588 0292 9A42     		cmp	r2, r3
 589 0294 5ED8     		bhi	.L38
 182:.\main.c      ****     {
 183:.\main.c      ****         if(cur_pos != 0)
 590              		.loc 1 183 0 is_stmt 1
 591 0296 FB1D     		add	r3, r7, #7
 592 0298 1B78     		ldrb	r3, [r3]
 593 029a 002B     		cmp	r3, #0
 594 029c 20D0     		beq	.L39
 184:.\main.c      ****         {
 185:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 5);
 595              		.loc 1 185 0
 596 029e FB1D     		add	r3, r7, #7
 597 02a0 1B78     		ldrb	r3, [r3]
 598 02a2 5B00     		lsl	r3, r3, #1
 599 02a4 3A68     		ldr	r2, [r7]
 600 02a6 D318     		add	r3, r2, r3
 601 02a8 FA1D     		add	r2, r7, #7
 602 02aa 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 15


 603 02ac 2349     		ldr	r1, .L70+8
 604 02ae 5218     		add	r2, r2, r1
 605 02b0 5200     		lsl	r2, r2, #1
 606 02b2 3968     		ldr	r1, [r7]
 607 02b4 8A18     		add	r2, r1, r2
 608 02b6 1288     		ldrh	r2, [r2]
 609 02b8 0532     		add	r2, r2, #5
 610 02ba 92B2     		uxth	r2, r2
 611 02bc 1A80     		strh	r2, [r3]
 186:.\main.c      ****             
 187:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 612              		.loc 1 187 0
 613 02be FB1D     		add	r3, r7, #7
 614 02c0 1A78     		ldrb	r2, [r3]
 615 02c2 BB1D     		add	r3, r7, #6
 616 02c4 1B78     		ldrb	r3, [r3]
 617 02c6 013B     		sub	r3, r3, #1
 618 02c8 9A42     		cmp	r2, r3
 619 02ca 05DA     		bge	.L40
 188:.\main.c      ****             {
 189:.\main.c      ****                 cur_pos++;
 620              		.loc 1 189 0
 621 02cc FB1D     		add	r3, r7, #7
 622 02ce 1A78     		ldrb	r2, [r3]
 623 02d0 FB1D     		add	r3, r7, #7
 624 02d2 0132     		add	r2, r2, #1
 625 02d4 1A70     		strb	r2, [r3]
 626 02d6 2CE0     		b	.L42
 627              	.L40:
 190:.\main.c      ****             }
 191:.\main.c      ****             else
 192:.\main.c      ****             {
 193:.\main.c      ****                 cur_pos = 0;
 628              		.loc 1 193 0
 629 02d8 FB1D     		add	r3, r7, #7
 630 02da 0022     		mov	r2, #0
 631 02dc 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 632              		.loc 1 183 0
 633 02de 41E1     		b	.L8
 634              	.L39:
 194:.\main.c      ****             }
 195:.\main.c      ****         }
 196:.\main.c      ****         else if(cur_pos == 0)
 635              		.loc 1 196 0
 636 02e0 FB1D     		add	r3, r7, #7
 637 02e2 1B78     		ldrb	r3, [r3]
 638 02e4 002B     		cmp	r3, #0
 639 02e6 20D1     		bne	.L43
 197:.\main.c      ****         {
 198:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 5);
 640              		.loc 1 198 0
 641 02e8 FB1D     		add	r3, r7, #7
 642 02ea 1B78     		ldrb	r3, [r3]
 643 02ec 5B00     		lsl	r3, r3, #1
 644 02ee 3A68     		ldr	r2, [r7]
 645 02f0 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 16


 646 02f2 BA1D     		add	r2, r7, #6
 647 02f4 1278     		ldrb	r2, [r2]
 648 02f6 1149     		ldr	r1, .L70+8
 649 02f8 5218     		add	r2, r2, r1
 650 02fa 5200     		lsl	r2, r2, #1
 651 02fc 3968     		ldr	r1, [r7]
 652 02fe 8A18     		add	r2, r1, r2
 653 0300 1288     		ldrh	r2, [r2]
 654 0302 0532     		add	r2, r2, #5
 655 0304 92B2     		uxth	r2, r2
 656 0306 1A80     		strh	r2, [r3]
 199:.\main.c      ****            
 200:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 657              		.loc 1 200 0
 658 0308 FB1D     		add	r3, r7, #7
 659 030a 1A78     		ldrb	r2, [r3]
 660 030c BB1D     		add	r3, r7, #6
 661 030e 1B78     		ldrb	r3, [r3]
 662 0310 013B     		sub	r3, r3, #1
 663 0312 9A42     		cmp	r2, r3
 664 0314 05DA     		bge	.L44
 201:.\main.c      ****             {
 202:.\main.c      ****                 cur_pos++;
 665              		.loc 1 202 0
 666 0316 FB1D     		add	r3, r7, #7
 667 0318 1A78     		ldrb	r2, [r3]
 668 031a FB1D     		add	r3, r7, #7
 669 031c 0132     		add	r2, r2, #1
 670 031e 1A70     		strb	r2, [r3]
 671 0320 07E0     		b	.L42
 672              	.L44:
 203:.\main.c      ****             }
 204:.\main.c      ****             else
 205:.\main.c      ****             {
 206:.\main.c      ****                 cur_pos = 0;
 673              		.loc 1 206 0
 674 0322 FB1D     		add	r3, r7, #7
 675 0324 0022     		mov	r2, #0
 676 0326 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 677              		.loc 1 183 0
 678 0328 1CE1     		b	.L8
 679              	.L43:
 207:.\main.c      ****             }
 208:.\main.c      ****         }
 209:.\main.c      ****         else
 210:.\main.c      ****         {
 211:.\main.c      ****             cur_pos = 0;   
 680              		.loc 1 211 0
 681 032a FB1D     		add	r3, r7, #7
 682 032c 0022     		mov	r2, #0
 683 032e 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 684              		.loc 1 183 0
 685 0330 18E1     		b	.L8
 686              	.L42:
 687 0332 17E1     		b	.L8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 17


 688              	.L71:
 689              		.align	2
 690              	.L70:
 691 0334 E7030000 		.word	999
 692 0338 4B040000 		.word	1099
 693 033c FFFFFF7F 		.word	2147483647
 694 0340 FB030000 		.word	1019
 695 0344 13050000 		.word	1299
 696 0348 D1050000 		.word	1489
 697 034c E6050000 		.word	1510
 698 0350 A4060000 		.word	1700
 699              	.L38:
 212:.\main.c      ****         }    
 213:.\main.c      ****     }
 214:.\main.c      ****     else if(command > 1700 && command <= 1900)
 700              		.loc 1 214 0
 701 0354 3B1D     		add	r3, r7, #4
 702 0356 1A88     		ldrh	r2, [r3]
 703 0358 844B     		ldr	r3, .L72
 704 035a 9A42     		cmp	r2, r3
 705 035c 53D9     		bls	.L46
 706              		.loc 1 214 0 is_stmt 0 discriminator 1
 707 035e 3B1D     		add	r3, r7, #4
 708 0360 1A88     		ldrh	r2, [r3]
 709 0362 834B     		ldr	r3, .L72+4
 710 0364 9A42     		cmp	r2, r3
 711 0366 4ED8     		bhi	.L46
 215:.\main.c      ****     {
 216:.\main.c      ****         if(cur_pos != 0)
 712              		.loc 1 216 0 is_stmt 1
 713 0368 FB1D     		add	r3, r7, #7
 714 036a 1B78     		ldrb	r3, [r3]
 715 036c 002B     		cmp	r3, #0
 716 036e 20D0     		beq	.L47
 217:.\main.c      ****         {
 218:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 10);
 717              		.loc 1 218 0
 718 0370 FB1D     		add	r3, r7, #7
 719 0372 1B78     		ldrb	r3, [r3]
 720 0374 5B00     		lsl	r3, r3, #1
 721 0376 3A68     		ldr	r2, [r7]
 722 0378 D318     		add	r3, r2, r3
 723 037a FA1D     		add	r2, r7, #7
 724 037c 1278     		ldrb	r2, [r2]
 725 037e 7D49     		ldr	r1, .L72+8
 726 0380 5218     		add	r2, r2, r1
 727 0382 5200     		lsl	r2, r2, #1
 728 0384 3968     		ldr	r1, [r7]
 729 0386 8A18     		add	r2, r1, r2
 730 0388 1288     		ldrh	r2, [r2]
 731 038a 0A32     		add	r2, r2, #10
 732 038c 92B2     		uxth	r2, r2
 733 038e 1A80     		strh	r2, [r3]
 219:.\main.c      ****             
 220:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 734              		.loc 1 220 0
 735 0390 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 18


 736 0392 1A78     		ldrb	r2, [r3]
 737 0394 BB1D     		add	r3, r7, #6
 738 0396 1B78     		ldrb	r3, [r3]
 739 0398 013B     		sub	r3, r3, #1
 740 039a 9A42     		cmp	r2, r3
 741 039c 05DA     		bge	.L48
 221:.\main.c      ****             {
 222:.\main.c      ****                 cur_pos++;
 742              		.loc 1 222 0
 743 039e FB1D     		add	r3, r7, #7
 744 03a0 1A78     		ldrb	r2, [r3]
 745 03a2 FB1D     		add	r3, r7, #7
 746 03a4 0132     		add	r2, r2, #1
 747 03a6 1A70     		strb	r2, [r3]
 748 03a8 2CE0     		b	.L50
 749              	.L48:
 223:.\main.c      ****             }
 224:.\main.c      ****             else
 225:.\main.c      ****             {
 226:.\main.c      ****                 cur_pos = 0;
 750              		.loc 1 226 0
 751 03aa FB1D     		add	r3, r7, #7
 752 03ac 0022     		mov	r2, #0
 753 03ae 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 754              		.loc 1 216 0
 755 03b0 D8E0     		b	.L8
 756              	.L47:
 227:.\main.c      ****             }
 228:.\main.c      ****         }
 229:.\main.c      ****         else if(cur_pos == 0)
 757              		.loc 1 229 0
 758 03b2 FB1D     		add	r3, r7, #7
 759 03b4 1B78     		ldrb	r3, [r3]
 760 03b6 002B     		cmp	r3, #0
 761 03b8 20D1     		bne	.L51
 230:.\main.c      ****         {
 231:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 10);
 762              		.loc 1 231 0
 763 03ba FB1D     		add	r3, r7, #7
 764 03bc 1B78     		ldrb	r3, [r3]
 765 03be 5B00     		lsl	r3, r3, #1
 766 03c0 3A68     		ldr	r2, [r7]
 767 03c2 D318     		add	r3, r2, r3
 768 03c4 BA1D     		add	r2, r7, #6
 769 03c6 1278     		ldrb	r2, [r2]
 770 03c8 6A49     		ldr	r1, .L72+8
 771 03ca 5218     		add	r2, r2, r1
 772 03cc 5200     		lsl	r2, r2, #1
 773 03ce 3968     		ldr	r1, [r7]
 774 03d0 8A18     		add	r2, r1, r2
 775 03d2 1288     		ldrh	r2, [r2]
 776 03d4 0A32     		add	r2, r2, #10
 777 03d6 92B2     		uxth	r2, r2
 778 03d8 1A80     		strh	r2, [r3]
 232:.\main.c      ****            
 233:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 19


 779              		.loc 1 233 0
 780 03da FB1D     		add	r3, r7, #7
 781 03dc 1A78     		ldrb	r2, [r3]
 782 03de BB1D     		add	r3, r7, #6
 783 03e0 1B78     		ldrb	r3, [r3]
 784 03e2 013B     		sub	r3, r3, #1
 785 03e4 9A42     		cmp	r2, r3
 786 03e6 05DA     		bge	.L52
 234:.\main.c      ****             {
 235:.\main.c      ****                 cur_pos++;
 787              		.loc 1 235 0
 788 03e8 FB1D     		add	r3, r7, #7
 789 03ea 1A78     		ldrb	r2, [r3]
 790 03ec FB1D     		add	r3, r7, #7
 791 03ee 0132     		add	r2, r2, #1
 792 03f0 1A70     		strb	r2, [r3]
 793 03f2 07E0     		b	.L50
 794              	.L52:
 236:.\main.c      ****             }
 237:.\main.c      ****             else
 238:.\main.c      ****             {
 239:.\main.c      ****                 cur_pos = 0;
 795              		.loc 1 239 0
 796 03f4 FB1D     		add	r3, r7, #7
 797 03f6 0022     		mov	r2, #0
 798 03f8 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 799              		.loc 1 216 0
 800 03fa B3E0     		b	.L8
 801              	.L51:
 240:.\main.c      ****             }
 241:.\main.c      ****         }
 242:.\main.c      ****         else
 243:.\main.c      ****         {
 244:.\main.c      ****             cur_pos = 0;   
 802              		.loc 1 244 0
 803 03fc FB1D     		add	r3, r7, #7
 804 03fe 0022     		mov	r2, #0
 805 0400 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 806              		.loc 1 216 0
 807 0402 AFE0     		b	.L8
 808              	.L50:
 809 0404 AEE0     		b	.L8
 810              	.L46:
 245:.\main.c      ****         }
 246:.\main.c      ****     }
 247:.\main.c      ****     else if(command > 1900 && command <= 2000)
 811              		.loc 1 247 0
 812 0406 3B1D     		add	r3, r7, #4
 813 0408 1A88     		ldrh	r2, [r3]
 814 040a 594B     		ldr	r3, .L72+4
 815 040c 9A42     		cmp	r2, r3
 816 040e 00D8     		bhi	.LCB739
 817 0410 7DE0     		b	.L54	@long jump
 818              	.LCB739:
 819              		.loc 1 247 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 20


 820 0412 3B1D     		add	r3, r7, #4
 821 0414 1A88     		ldrh	r2, [r3]
 822 0416 FA23     		mov	r3, #250
 823 0418 DB00     		lsl	r3, r3, #3
 824 041a 9A42     		cmp	r2, r3
 825 041c 00D9     		bls	.LCB745
 826 041e 76E0     		b	.L54	@long jump
 827              	.LCB745:
 248:.\main.c      ****     {
 249:.\main.c      ****         if(cur_pos != 0)
 828              		.loc 1 249 0 is_stmt 1
 829 0420 FB1D     		add	r3, r7, #7
 830 0422 1B78     		ldrb	r3, [r3]
 831 0424 002B     		cmp	r3, #0
 832 0426 34D0     		beq	.L55
 250:.\main.c      ****         {
 251:.\main.c      ****             if(array[cur_pos - 1] <= 1980)
 833              		.loc 1 251 0
 834 0428 FB1D     		add	r3, r7, #7
 835 042a 1B78     		ldrb	r3, [r3]
 836 042c 514A     		ldr	r2, .L72+8
 837 042e 9B18     		add	r3, r3, r2
 838 0430 5B00     		lsl	r3, r3, #1
 839 0432 3A68     		ldr	r2, [r7]
 840 0434 D318     		add	r3, r2, r3
 841 0436 1A88     		ldrh	r2, [r3]
 842 0438 4F4B     		ldr	r3, .L72+12
 843 043a 9A42     		cmp	r2, r3
 844 043c 10D8     		bhi	.L56
 252:.\main.c      ****             {
 253:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] + 20);
 845              		.loc 1 253 0
 846 043e FB1D     		add	r3, r7, #7
 847 0440 1B78     		ldrb	r3, [r3]
 848 0442 5B00     		lsl	r3, r3, #1
 849 0444 3A68     		ldr	r2, [r7]
 850 0446 D318     		add	r3, r2, r3
 851 0448 FA1D     		add	r2, r7, #7
 852 044a 1278     		ldrb	r2, [r2]
 853 044c 4949     		ldr	r1, .L72+8
 854 044e 5218     		add	r2, r2, r1
 855 0450 5200     		lsl	r2, r2, #1
 856 0452 3968     		ldr	r1, [r7]
 857 0454 8A18     		add	r2, r1, r2
 858 0456 1288     		ldrh	r2, [r2]
 859 0458 1432     		add	r2, r2, #20
 860 045a 92B2     		uxth	r2, r2
 861 045c 1A80     		strh	r2, [r3]
 862 045e 07E0     		b	.L57
 863              	.L56:
 254:.\main.c      ****             }
 255:.\main.c      ****             else
 256:.\main.c      ****             {
 257:.\main.c      ****                 array[cur_pos] = 2000;
 864              		.loc 1 257 0
 865 0460 FB1D     		add	r3, r7, #7
 866 0462 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 21


 867 0464 5B00     		lsl	r3, r3, #1
 868 0466 3A68     		ldr	r2, [r7]
 869 0468 D318     		add	r3, r2, r3
 870 046a FA22     		mov	r2, #250
 871 046c D200     		lsl	r2, r2, #3
 872 046e 1A80     		strh	r2, [r3]
 873              	.L57:
 258:.\main.c      ****             }
 259:.\main.c      ****             
 260:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 874              		.loc 1 260 0
 875 0470 FB1D     		add	r3, r7, #7
 876 0472 1A78     		ldrb	r2, [r3]
 877 0474 BB1D     		add	r3, r7, #6
 878 0476 1B78     		ldrb	r3, [r3]
 879 0478 013B     		sub	r3, r3, #1
 880 047a 9A42     		cmp	r2, r3
 881 047c 05DA     		bge	.L58
 261:.\main.c      ****             {
 262:.\main.c      ****                 cur_pos++;
 882              		.loc 1 262 0
 883 047e FB1D     		add	r3, r7, #7
 884 0480 1A78     		ldrb	r2, [r3]
 885 0482 FB1D     		add	r3, r7, #7
 886 0484 0132     		add	r2, r2, #1
 887 0486 1A70     		strb	r2, [r3]
 888 0488 40E0     		b	.L60
 889              	.L58:
 263:.\main.c      ****             }
 264:.\main.c      ****             else
 265:.\main.c      ****             {
 266:.\main.c      ****                 cur_pos = 0;
 890              		.loc 1 266 0
 891 048a FB1D     		add	r3, r7, #7
 892 048c 0022     		mov	r2, #0
 893 048e 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 894              		.loc 1 249 0
 895 0490 68E0     		b	.L8
 896              	.L55:
 267:.\main.c      ****             }
 268:.\main.c      ****         }
 269:.\main.c      ****         else if(cur_pos == 0)
 897              		.loc 1 269 0
 898 0492 FB1D     		add	r3, r7, #7
 899 0494 1B78     		ldrb	r3, [r3]
 900 0496 002B     		cmp	r3, #0
 901 0498 34D1     		bne	.L61
 270:.\main.c      ****         {
 271:.\main.c      ****             if(array[ARRAY_SIZE - 1] <= 1980)
 902              		.loc 1 271 0
 903 049a BB1D     		add	r3, r7, #6
 904 049c 1B78     		ldrb	r3, [r3]
 905 049e 354A     		ldr	r2, .L72+8
 906 04a0 9B18     		add	r3, r3, r2
 907 04a2 5B00     		lsl	r3, r3, #1
 908 04a4 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 22


 909 04a6 D318     		add	r3, r2, r3
 910 04a8 1A88     		ldrh	r2, [r3]
 911 04aa 334B     		ldr	r3, .L72+12
 912 04ac 9A42     		cmp	r2, r3
 913 04ae 10D8     		bhi	.L62
 272:.\main.c      ****             {
 273:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] + 20);
 914              		.loc 1 273 0
 915 04b0 FB1D     		add	r3, r7, #7
 916 04b2 1B78     		ldrb	r3, [r3]
 917 04b4 5B00     		lsl	r3, r3, #1
 918 04b6 3A68     		ldr	r2, [r7]
 919 04b8 D318     		add	r3, r2, r3
 920 04ba BA1D     		add	r2, r7, #6
 921 04bc 1278     		ldrb	r2, [r2]
 922 04be 2D49     		ldr	r1, .L72+8
 923 04c0 5218     		add	r2, r2, r1
 924 04c2 5200     		lsl	r2, r2, #1
 925 04c4 3968     		ldr	r1, [r7]
 926 04c6 8A18     		add	r2, r1, r2
 927 04c8 1288     		ldrh	r2, [r2]
 928 04ca 1432     		add	r2, r2, #20
 929 04cc 92B2     		uxth	r2, r2
 930 04ce 1A80     		strh	r2, [r3]
 931 04d0 07E0     		b	.L63
 932              	.L62:
 274:.\main.c      ****             }
 275:.\main.c      ****             else
 276:.\main.c      ****             {
 277:.\main.c      ****                 array[cur_pos] = 2000;
 933              		.loc 1 277 0
 934 04d2 FB1D     		add	r3, r7, #7
 935 04d4 1B78     		ldrb	r3, [r3]
 936 04d6 5B00     		lsl	r3, r3, #1
 937 04d8 3A68     		ldr	r2, [r7]
 938 04da D318     		add	r3, r2, r3
 939 04dc FA22     		mov	r2, #250
 940 04de D200     		lsl	r2, r2, #3
 941 04e0 1A80     		strh	r2, [r3]
 942              	.L63:
 278:.\main.c      ****             }
 279:.\main.c      ****             
 280:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 943              		.loc 1 280 0
 944 04e2 FB1D     		add	r3, r7, #7
 945 04e4 1A78     		ldrb	r2, [r3]
 946 04e6 BB1D     		add	r3, r7, #6
 947 04e8 1B78     		ldrb	r3, [r3]
 948 04ea 013B     		sub	r3, r3, #1
 949 04ec 9A42     		cmp	r2, r3
 950 04ee 05DA     		bge	.L64
 281:.\main.c      ****             {
 282:.\main.c      ****                 cur_pos++;
 951              		.loc 1 282 0
 952 04f0 FB1D     		add	r3, r7, #7
 953 04f2 1A78     		ldrb	r2, [r3]
 954 04f4 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 23


 955 04f6 0132     		add	r2, r2, #1
 956 04f8 1A70     		strb	r2, [r3]
 957 04fa 07E0     		b	.L60
 958              	.L64:
 283:.\main.c      ****             }
 284:.\main.c      ****             else
 285:.\main.c      ****             {
 286:.\main.c      ****                 cur_pos = 0;
 959              		.loc 1 286 0
 960 04fc FB1D     		add	r3, r7, #7
 961 04fe 0022     		mov	r2, #0
 962 0500 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 963              		.loc 1 249 0
 964 0502 2FE0     		b	.L8
 965              	.L61:
 287:.\main.c      ****             }
 288:.\main.c      ****         }
 289:.\main.c      ****         else
 290:.\main.c      ****         {
 291:.\main.c      ****             cur_pos = 0;
 966              		.loc 1 291 0
 967 0504 FB1D     		add	r3, r7, #7
 968 0506 0022     		mov	r2, #0
 969 0508 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 970              		.loc 1 249 0
 971 050a 2BE0     		b	.L8
 972              	.L60:
 973 050c 2AE0     		b	.L8
 974              	.L54:
 292:.\main.c      ****         }
 293:.\main.c      ****     }
 294:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 975              		.loc 1 294 0
 976 050e 3B1D     		add	r3, r7, #4
 977 0510 1A88     		ldrh	r2, [r3]
 978 0512 1A4B     		ldr	r3, .L72+16
 979 0514 9A42     		cmp	r2, r3
 980 0516 15D8     		bhi	.L66
 981              		.loc 1 294 0 is_stmt 0 discriminator 1
 982 0518 3B1D     		add	r3, r7, #4
 983 051a 1A88     		ldrh	r2, [r3]
 984 051c 184B     		ldr	r3, .L72+20
 985 051e 9A42     		cmp	r2, r3
 986 0520 10D9     		bls	.L66
 295:.\main.c      ****     {
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 987              		.loc 1 296 0 is_stmt 1
 988 0522 FB1D     		add	r3, r7, #7
 989 0524 1A78     		ldrb	r2, [r3]
 990 0526 BB1D     		add	r3, r7, #6
 991 0528 1B78     		ldrb	r3, [r3]
 992 052a 013B     		sub	r3, r3, #1
 993 052c 9A42     		cmp	r2, r3
 994 052e 05DA     		bge	.L67
 297:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 24


 298:.\main.c      ****             cur_pos++;
 995              		.loc 1 298 0
 996 0530 FB1D     		add	r3, r7, #7
 997 0532 1A78     		ldrb	r2, [r3]
 998 0534 FB1D     		add	r3, r7, #7
 999 0536 0132     		add	r2, r2, #1
 1000 0538 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1001              		.loc 1 296 0
 1002 053a 13E0     		b	.L8
 1003              	.L67:
 299:.\main.c      ****         }
 300:.\main.c      ****         else
 301:.\main.c      ****         {
 302:.\main.c      ****             cur_pos = 0;
 1004              		.loc 1 302 0
 1005 053c FB1D     		add	r3, r7, #7
 1006 053e 0022     		mov	r2, #0
 1007 0540 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1008              		.loc 1 296 0
 1009 0542 0FE0     		b	.L8
 1010              	.L66:
 303:.\main.c      ****         }
 304:.\main.c      ****     }
 305:.\main.c      ****     else
 306:.\main.c      ****     {
 307:.\main.c      ****         //throw error
 308:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1011              		.loc 1 308 0
 1012 0544 FB1D     		add	r3, r7, #7
 1013 0546 1A78     		ldrb	r2, [r3]
 1014 0548 BB1D     		add	r3, r7, #6
 1015 054a 1B78     		ldrb	r3, [r3]
 1016 054c 013B     		sub	r3, r3, #1
 1017 054e 9A42     		cmp	r2, r3
 1018 0550 05DA     		bge	.L69
 309:.\main.c      ****         {
 310:.\main.c      ****             cur_pos++;
 1019              		.loc 1 310 0
 1020 0552 FB1D     		add	r3, r7, #7
 1021 0554 1A78     		ldrb	r2, [r3]
 1022 0556 FB1D     		add	r3, r7, #7
 1023 0558 0132     		add	r2, r2, #1
 1024 055a 1A70     		strb	r2, [r3]
 1025 055c 02E0     		b	.L8
 1026              	.L69:
 311:.\main.c      ****         }
 312:.\main.c      ****         else
 313:.\main.c      ****         {
 314:.\main.c      ****             cur_pos = 0;
 1027              		.loc 1 314 0
 1028 055e FB1D     		add	r3, r7, #7
 1029 0560 0022     		mov	r2, #0
 1030 0562 1A70     		strb	r2, [r3]
 1031              	.L8:
 315:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 25


 316:.\main.c      ****     }
 317:.\main.c      **** }
 1032              		.loc 1 317 0
 1033 0564 BD46     		mov	sp, r7
 1034 0566 02B0     		add	sp, sp, #8
 1035              		@ sp needed
 1036 0568 80BD     		pop	{r7, pc}
 1037              	.L73:
 1038 056a C046     		.align	2
 1039              	.L72:
 1040 056c A4060000 		.word	1700
 1041 0570 6C070000 		.word	1900
 1042 0574 FFFFFF7F 		.word	2147483647
 1043 0578 BC070000 		.word	1980
 1044 057c E6050000 		.word	1510
 1045 0580 D1050000 		.word	1489
 1046              		.cfi_endproc
 1047              	.LFE36:
 1048              		.size	pos_to_vel, .-pos_to_vel
 1049              		.section	.text.make_command,"ax",%progbits
 1050              		.align	2
 1051              		.global	make_command
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	make_command, %function
 1055              	make_command:
 1056              	.LFB37:
 318:.\main.c      **** 
 319:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 320:.\main.c      **** {
 1057              		.loc 1 320 0
 1058              		.cfi_startproc
 1059 0000 80B5     		push	{r7, lr}
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 84B0     		sub	sp, sp, #16
 1064              		.cfi_def_cfa_offset 24
 1065 0004 00AF     		add	r7, sp, #0
 1066              		.cfi_def_cfa_register 7
 1067 0006 7860     		str	r0, [r7, #4]
 1068 0008 FB1C     		add	r3, r7, #3
 1069 000a 1970     		strb	r1, [r3]
 1070 000c BB1C     		add	r3, r7, #2
 1071 000e 1A70     		strb	r2, [r3]
 321:.\main.c      ****     uint16 command;
 322:.\main.c      ****     int16 temp1;
 323:.\main.c      ****     int16 temp2;
 324:.\main.c      ****     int16 temp3;
 325:.\main.c      ****     
 326:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1072              		.loc 1 326 0
 1073 0010 FB1C     		add	r3, r7, #3
 1074 0012 1B78     		ldrb	r3, [r3]
 1075 0014 7A68     		ldr	r2, [r7, #4]
 1076 0016 D318     		add	r3, r2, r3
 1077 0018 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 26


 1078 001a 5BB2     		sxtb	r3, r3
 1079 001c 1A02     		lsl	r2, r3, #8
 1080 001e 3B1C     		mov	r3, r7
 1081 0020 0E33     		add	r3, r3, #14
 1082 0022 1A80     		strh	r2, [r3]
 327:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1083              		.loc 1 327 0
 1084 0024 BB1C     		add	r3, r7, #2
 1085 0026 1B78     		ldrb	r3, [r3]
 1086 0028 7A68     		ldr	r2, [r7, #4]
 1087 002a D318     		add	r3, r2, r3
 1088 002c 1B78     		ldrb	r3, [r3]
 1089 002e 5BB2     		sxtb	r3, r3
 1090 0030 9AB2     		uxth	r2, r3
 1091 0032 3B1C     		mov	r3, r7
 1092 0034 0C33     		add	r3, r3, #12
 1093 0036 111C     		add	r1, r2, #0
 1094 0038 FF22     		mov	r2, #255
 1095 003a 0A40     		and	r2, r1
 1096 003c 1A80     		strh	r2, [r3]
 328:.\main.c      ****     temp3 = temp1 | temp2;
 1097              		.loc 1 328 0
 1098 003e 3B1C     		mov	r3, r7
 1099 0040 0A33     		add	r3, r3, #10
 1100 0042 391C     		mov	r1, r7
 1101 0044 0E31     		add	r1, r1, #14
 1102 0046 3A1C     		mov	r2, r7
 1103 0048 0C32     		add	r2, r2, #12
 1104 004a 0988     		ldrh	r1, [r1]
 1105 004c 1288     		ldrh	r2, [r2]
 1106 004e 0A43     		orr	r2, r1
 1107 0050 1A80     		strh	r2, [r3]
 329:.\main.c      ****     command = (temp3/2) + 1500;
 1108              		.loc 1 329 0
 1109 0052 3B1C     		mov	r3, r7
 1110 0054 0A33     		add	r3, r3, #10
 1111 0056 0021     		mov	r1, #0
 1112 0058 5B5E     		ldrsh	r3, [r3, r1]
 1113 005a 002B     		cmp	r3, #0
 1114 005c 00DA     		bge	.L75
 1115 005e 0133     		add	r3, r3, #1
 1116              	.L75:
 1117 0060 5B10     		asr	r3, r3, #1
 1118 0062 9BB2     		uxth	r3, r3
 1119 0064 9AB2     		uxth	r2, r3
 1120 0066 3B1C     		mov	r3, r7
 1121 0068 0833     		add	r3, r3, #8
 1122 006a 0549     		ldr	r1, .L77
 1123 006c 5218     		add	r2, r2, r1
 1124 006e 1A80     		strh	r2, [r3]
 330:.\main.c      ****     return command;
 1125              		.loc 1 330 0
 1126 0070 3B1C     		mov	r3, r7
 1127 0072 0833     		add	r3, r3, #8
 1128 0074 1B88     		ldrh	r3, [r3]
 331:.\main.c      ****     //act_array[act_cspot] = command;
 332:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 27


 1129              		.loc 1 332 0
 1130 0076 181C     		mov	r0, r3
 1131 0078 BD46     		mov	sp, r7
 1132 007a 04B0     		add	sp, sp, #16
 1133              		@ sp needed
 1134 007c 80BD     		pop	{r7, pc}
 1135              	.L78:
 1136 007e C046     		.align	2
 1137              	.L77:
 1138 0080 DC050000 		.word	1500
 1139              		.cfi_endproc
 1140              	.LFE37:
 1141              		.size	make_command, .-make_command
 1142              		.section	.text.potFeedback,"ax",%progbits
 1143              		.align	2
 1144              		.global	potFeedback
 1145              		.code	16
 1146              		.thumb_func
 1147              		.type	potFeedback, %function
 1148              	potFeedback:
 1149              	.LFB38:
 333:.\main.c      **** 
 334:.\main.c      **** uint16 potFeedback(uint32 channel)
 335:.\main.c      **** {
 1150              		.loc 1 335 0
 1151              		.cfi_startproc
 1152 0000 80B5     		push	{r7, lr}
 1153              		.cfi_def_cfa_offset 8
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 84B0     		sub	sp, sp, #16
 1157              		.cfi_def_cfa_offset 24
 1158 0004 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 0006 7860     		str	r0, [r7, #4]
 336:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 337:.\main.c      ****     uint16 feedback = 500;
 1161              		.loc 1 337 0
 1162 0008 3B1C     		mov	r3, r7
 1163 000a 0E33     		add	r3, r3, #14
 1164 000c FA22     		mov	r2, #250
 1165 000e 5200     		lsl	r2, r2, #1
 1166 0010 1A80     		strh	r2, [r3]
 338:.\main.c      ****     return feedback;
 1167              		.loc 1 338 0
 1168 0012 3B1C     		mov	r3, r7
 1169 0014 0E33     		add	r3, r3, #14
 1170 0016 1B88     		ldrh	r3, [r3]
 339:.\main.c      **** }
 1171              		.loc 1 339 0
 1172 0018 181C     		mov	r0, r3
 1173 001a BD46     		mov	sp, r7
 1174 001c 04B0     		add	sp, sp, #16
 1175              		@ sp needed
 1176 001e 80BD     		pop	{r7, pc}
 1177              		.cfi_endproc
 1178              	.LFE38:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 28


 1179              		.size	potFeedback, .-potFeedback
 1180              		.section	.text.send_feedback,"ax",%progbits
 1181              		.align	2
 1182              		.global	send_feedback
 1183              		.code	16
 1184              		.thumb_func
 1185              		.type	send_feedback, %function
 1186              	send_feedback:
 1187              	.LFB39:
 340:.\main.c      **** 
 341:.\main.c      **** void send_feedback()
 342:.\main.c      **** {
 1188              		.loc 1 342 0
 1189              		.cfi_startproc
 1190 0000 80B5     		push	{r7, lr}
 1191              		.cfi_def_cfa_offset 8
 1192              		.cfi_offset 7, -8
 1193              		.cfi_offset 14, -4
 1194 0002 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 343:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 344:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 345:.\main.c      ****     //TODO define system state
 346:.\main.c      ****     //send packet via serial to wiznet
 347:.\main.c      **** }
 1196              		.loc 1 347 0
 1197 0004 BD46     		mov	sp, r7
 1198              		@ sp needed
 1199 0006 80BD     		pop	{r7, pc}
 1200              		.cfi_endproc
 1201              	.LFE39:
 1202              		.size	send_feedback, .-send_feedback
 1203              		.section	.text.fill_data_array,"ax",%progbits
 1204              		.align	2
 1205              		.global	fill_data_array
 1206              		.code	16
 1207              		.thumb_func
 1208              		.type	fill_data_array, %function
 1209              	fill_data_array:
 1210              	.LFB40:
 348:.\main.c      **** 
 349:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 350:.\main.c      **** void fill_data_array()
 351:.\main.c      **** {
 1211              		.loc 1 351 0
 1212              		.cfi_startproc
 1213 0000 80B5     		push	{r7, lr}
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 00AF     		add	r7, sp, #0
 1218              		.cfi_def_cfa_register 7
 352:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1219              		.loc 1 352 0
 1220 0004 034B     		ldr	r3, .L83
 1221 0006 181C     		mov	r0, r3
 1222 0008 0E21     		mov	r1, #14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 29


 1223 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 353:.\main.c      **** //    uint8 i = 0;
 354:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 355:.\main.c      **** //    {
 356:.\main.c      **** //        data_array[i] = test_array[i];
 357:.\main.c      **** //    }
 358:.\main.c      **** }
 1224              		.loc 1 358 0
 1225 000e BD46     		mov	sp, r7
 1226              		@ sp needed
 1227 0010 80BD     		pop	{r7, pc}
 1228              	.L84:
 1229 0012 C046     		.align	2
 1230              	.L83:
 1231 0014 00000000 		.word	data_array
 1232              		.cfi_endproc
 1233              	.LFE40:
 1234              		.size	fill_data_array, .-fill_data_array
 1235              		.section	.text.ServoGoalPosition,"ax",%progbits
 1236              		.align	2
 1237              		.global	ServoGoalPosition
 1238              		.code	16
 1239              		.thumb_func
 1240              		.type	ServoGoalPosition, %function
 1241              	ServoGoalPosition:
 1242              	.LFB41:
 359:.\main.c      **** 
 360:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 361:.\main.c      **** {
 1243              		.loc 1 361 0
 1244              		.cfi_startproc
 1245 0000 80B5     		push	{r7, lr}
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 7, -8
 1248              		.cfi_offset 14, -4
 1249 0002 86B0     		sub	sp, sp, #24
 1250              		.cfi_def_cfa_offset 32
 1251 0004 00AF     		add	r7, sp, #0
 1252              		.cfi_def_cfa_register 7
 1253 0006 0A1C     		mov	r2, r1
 1254 0008 FB1D     		add	r3, r7, #7
 1255 000a 011C     		add	r1, r0, #0
 1256 000c 1970     		strb	r1, [r3]
 1257 000e 3B1D     		add	r3, r7, #4
 1258 0010 1A80     		strh	r2, [r3]
 362:.\main.c      ****     uint8 array[9];
 363:.\main.c      ****     
 364:.\main.c      ****     array[0] = 0xFF;
 1259              		.loc 1 364 0
 1260 0012 3B1C     		mov	r3, r7
 1261 0014 0C33     		add	r3, r3, #12
 1262 0016 FF22     		mov	r2, #255
 1263 0018 1A70     		strb	r2, [r3]
 365:.\main.c      ****     array[1] = 0xFF;
 1264              		.loc 1 365 0
 1265 001a 3B1C     		mov	r3, r7
 1266 001c 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 30


 1267 001e FF22     		mov	r2, #255
 1268 0020 5A70     		strb	r2, [r3, #1]
 366:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1269              		.loc 1 366 0
 1270 0022 3B1C     		mov	r3, r7
 1271 0024 0C33     		add	r3, r3, #12
 1272 0026 FA1D     		add	r2, r7, #7
 1273 0028 1278     		ldrb	r2, [r2]
 1274 002a 9A70     		strb	r2, [r3, #2]
 367:.\main.c      ****     array[3] = 0x05;
 1275              		.loc 1 367 0
 1276 002c 3B1C     		mov	r3, r7
 1277 002e 0C33     		add	r3, r3, #12
 1278 0030 0522     		mov	r2, #5
 1279 0032 DA70     		strb	r2, [r3, #3]
 368:.\main.c      ****     array[4] = 0x03; //write instruction
 1280              		.loc 1 368 0
 1281 0034 3B1C     		mov	r3, r7
 1282 0036 0C33     		add	r3, r3, #12
 1283 0038 0322     		mov	r2, #3
 1284 003a 1A71     		strb	r2, [r3, #4]
 369:.\main.c      ****     array[5] = 0x1E;
 1285              		.loc 1 369 0
 1286 003c 3B1C     		mov	r3, r7
 1287 003e 0C33     		add	r3, r3, #12
 1288 0040 1E22     		mov	r2, #30
 1289 0042 5A71     		strb	r2, [r3, #5]
 370:.\main.c      ****     array[6] = position;
 1290              		.loc 1 370 0
 1291 0044 3B1D     		add	r3, r7, #4
 1292 0046 1B88     		ldrh	r3, [r3]
 1293 0048 DAB2     		uxtb	r2, r3
 1294 004a 3B1C     		mov	r3, r7
 1295 004c 0C33     		add	r3, r3, #12
 1296 004e 9A71     		strb	r2, [r3, #6]
 371:.\main.c      ****     array[7] = position >> 8;
 1297              		.loc 1 371 0
 1298 0050 3B1D     		add	r3, r7, #4
 1299 0052 1B88     		ldrh	r3, [r3]
 1300 0054 1B0A     		lsr	r3, r3, #8
 1301 0056 9BB2     		uxth	r3, r3
 1302 0058 DAB2     		uxtb	r2, r3
 1303 005a 3B1C     		mov	r3, r7
 1304 005c 0C33     		add	r3, r3, #12
 1305 005e DA71     		strb	r2, [r3, #7]
 372:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1306              		.loc 1 372 0
 1307 0060 3B1C     		mov	r3, r7
 1308 0062 0C33     		add	r3, r3, #12
 1309 0064 9A79     		ldrb	r2, [r3, #6]
 1310 0066 FB1D     		add	r3, r7, #7
 1311 0068 1B78     		ldrb	r3, [r3]
 1312 006a D318     		add	r3, r2, r3
 1313 006c DAB2     		uxtb	r2, r3
 1314 006e 3B1C     		mov	r3, r7
 1315 0070 0C33     		add	r3, r3, #12
 1316 0072 DB79     		ldrb	r3, [r3, #7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 31


 1317 0074 D318     		add	r3, r2, r3
 1318 0076 DBB2     		uxtb	r3, r3
 1319 0078 2633     		add	r3, r3, #38
 1320 007a DBB2     		uxtb	r3, r3
 1321 007c DB43     		mvn	r3, r3
 1322 007e DAB2     		uxtb	r2, r3
 1323 0080 3B1C     		mov	r3, r7
 1324 0082 0C33     		add	r3, r3, #12
 1325 0084 1A72     		strb	r2, [r3, #8]
 373:.\main.c      ****     
 374:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1326              		.loc 1 374 0
 1327 0086 3B1C     		mov	r3, r7
 1328 0088 0C33     		add	r3, r3, #12
 1329 008a 181C     		mov	r0, r3
 1330 008c 0921     		mov	r1, #9
 1331 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 375:.\main.c      **** }
 1332              		.loc 1 375 0
 1333 0092 BD46     		mov	sp, r7
 1334 0094 06B0     		add	sp, sp, #24
 1335              		@ sp needed
 1336 0096 80BD     		pop	{r7, pc}
 1337              		.cfi_endproc
 1338              	.LFE41:
 1339              		.size	ServoGoalPosition, .-ServoGoalPosition
 1340              		.section	.text.SetServoTorque,"ax",%progbits
 1341              		.align	2
 1342              		.global	SetServoTorque
 1343              		.code	16
 1344              		.thumb_func
 1345              		.type	SetServoTorque, %function
 1346              	SetServoTorque:
 1347              	.LFB42:
 376:.\main.c      **** 
 377:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 378:.\main.c      **** {
 1348              		.loc 1 378 0
 1349              		.cfi_startproc
 1350 0000 80B5     		push	{r7, lr}
 1351              		.cfi_def_cfa_offset 8
 1352              		.cfi_offset 7, -8
 1353              		.cfi_offset 14, -4
 1354 0002 86B0     		sub	sp, sp, #24
 1355              		.cfi_def_cfa_offset 32
 1356 0004 00AF     		add	r7, sp, #0
 1357              		.cfi_def_cfa_register 7
 1358 0006 0A1C     		mov	r2, r1
 1359 0008 FB1D     		add	r3, r7, #7
 1360 000a 011C     		add	r1, r0, #0
 1361 000c 1970     		strb	r1, [r3]
 1362 000e 3B1D     		add	r3, r7, #4
 1363 0010 1A80     		strh	r2, [r3]
 379:.\main.c      ****     uint8 array[9];
 380:.\main.c      ****     
 381:.\main.c      ****     array[0] = 0xFF;
 1364              		.loc 1 381 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 32


 1365 0012 3B1C     		mov	r3, r7
 1366 0014 0C33     		add	r3, r3, #12
 1367 0016 FF22     		mov	r2, #255
 1368 0018 1A70     		strb	r2, [r3]
 382:.\main.c      ****     array[1] = 0xFF;
 1369              		.loc 1 382 0
 1370 001a 3B1C     		mov	r3, r7
 1371 001c 0C33     		add	r3, r3, #12
 1372 001e FF22     		mov	r2, #255
 1373 0020 5A70     		strb	r2, [r3, #1]
 383:.\main.c      ****     array[2] = servoID; 
 1374              		.loc 1 383 0
 1375 0022 3B1C     		mov	r3, r7
 1376 0024 0C33     		add	r3, r3, #12
 1377 0026 FA1D     		add	r2, r7, #7
 1378 0028 1278     		ldrb	r2, [r2]
 1379 002a 9A70     		strb	r2, [r3, #2]
 384:.\main.c      ****     array[3] = 0x05;
 1380              		.loc 1 384 0
 1381 002c 3B1C     		mov	r3, r7
 1382 002e 0C33     		add	r3, r3, #12
 1383 0030 0522     		mov	r2, #5
 1384 0032 DA70     		strb	r2, [r3, #3]
 385:.\main.c      ****     array[4] = 0x03; //write instruction
 1385              		.loc 1 385 0
 1386 0034 3B1C     		mov	r3, r7
 1387 0036 0C33     		add	r3, r3, #12
 1388 0038 0322     		mov	r2, #3
 1389 003a 1A71     		strb	r2, [r3, #4]
 386:.\main.c      ****     array[5] = 0x0E;
 1390              		.loc 1 386 0
 1391 003c 3B1C     		mov	r3, r7
 1392 003e 0C33     		add	r3, r3, #12
 1393 0040 0E22     		mov	r2, #14
 1394 0042 5A71     		strb	r2, [r3, #5]
 387:.\main.c      ****     array[6] = torque;
 1395              		.loc 1 387 0
 1396 0044 3B1D     		add	r3, r7, #4
 1397 0046 1B88     		ldrh	r3, [r3]
 1398 0048 DAB2     		uxtb	r2, r3
 1399 004a 3B1C     		mov	r3, r7
 1400 004c 0C33     		add	r3, r3, #12
 1401 004e 9A71     		strb	r2, [r3, #6]
 388:.\main.c      ****     array[7] = torque >> 8;
 1402              		.loc 1 388 0
 1403 0050 3B1D     		add	r3, r7, #4
 1404 0052 1B88     		ldrh	r3, [r3]
 1405 0054 1B0A     		lsr	r3, r3, #8
 1406 0056 9BB2     		uxth	r3, r3
 1407 0058 DAB2     		uxtb	r2, r3
 1408 005a 3B1C     		mov	r3, r7
 1409 005c 0C33     		add	r3, r3, #12
 1410 005e DA71     		strb	r2, [r3, #7]
 389:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1411              		.loc 1 389 0
 1412 0060 3B1C     		mov	r3, r7
 1413 0062 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 33


 1414 0064 9A79     		ldrb	r2, [r3, #6]
 1415 0066 FB1D     		add	r3, r7, #7
 1416 0068 1B78     		ldrb	r3, [r3]
 1417 006a D318     		add	r3, r2, r3
 1418 006c DAB2     		uxtb	r2, r3
 1419 006e 3B1C     		mov	r3, r7
 1420 0070 0C33     		add	r3, r3, #12
 1421 0072 DB79     		ldrb	r3, [r3, #7]
 1422 0074 D318     		add	r3, r2, r3
 1423 0076 DBB2     		uxtb	r3, r3
 1424 0078 1633     		add	r3, r3, #22
 1425 007a DBB2     		uxtb	r3, r3
 1426 007c DB43     		mvn	r3, r3
 1427 007e DAB2     		uxtb	r2, r3
 1428 0080 3B1C     		mov	r3, r7
 1429 0082 0C33     		add	r3, r3, #12
 1430 0084 1A72     		strb	r2, [r3, #8]
 390:.\main.c      ****     
 391:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1431              		.loc 1 391 0
 1432 0086 3B1C     		mov	r3, r7
 1433 0088 0C33     		add	r3, r3, #12
 1434 008a 181C     		mov	r0, r3
 1435 008c 0921     		mov	r1, #9
 1436 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 392:.\main.c      ****     
 393:.\main.c      **** }    
 1437              		.loc 1 393 0
 1438 0092 BD46     		mov	sp, r7
 1439 0094 06B0     		add	sp, sp, #24
 1440              		@ sp needed
 1441 0096 80BD     		pop	{r7, pc}
 1442              		.cfi_endproc
 1443              	.LFE42:
 1444              		.size	SetServoTorque, .-SetServoTorque
 1445              		.section	.text.ServoSpeed,"ax",%progbits
 1446              		.align	2
 1447              		.global	ServoSpeed
 1448              		.code	16
 1449              		.thumb_func
 1450              		.type	ServoSpeed, %function
 1451              	ServoSpeed:
 1452              	.LFB43:
 394:.\main.c      **** 
 395:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 396:.\main.c      **** {
 1453              		.loc 1 396 0
 1454              		.cfi_startproc
 1455 0000 80B5     		push	{r7, lr}
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 86B0     		sub	sp, sp, #24
 1460              		.cfi_def_cfa_offset 32
 1461 0004 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
 1463 0006 0A1C     		mov	r2, r1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 34


 1464 0008 FB1D     		add	r3, r7, #7
 1465 000a 011C     		add	r1, r0, #0
 1466 000c 1970     		strb	r1, [r3]
 1467 000e 3B1D     		add	r3, r7, #4
 1468 0010 1A80     		strh	r2, [r3]
 397:.\main.c      ****     uint8 array[9];
 398:.\main.c      ****     
 399:.\main.c      ****     array[0] = 0xFF;
 1469              		.loc 1 399 0
 1470 0012 3B1C     		mov	r3, r7
 1471 0014 0C33     		add	r3, r3, #12
 1472 0016 FF22     		mov	r2, #255
 1473 0018 1A70     		strb	r2, [r3]
 400:.\main.c      ****     array[1] = 0xFF;
 1474              		.loc 1 400 0
 1475 001a 3B1C     		mov	r3, r7
 1476 001c 0C33     		add	r3, r3, #12
 1477 001e FF22     		mov	r2, #255
 1478 0020 5A70     		strb	r2, [r3, #1]
 401:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1479              		.loc 1 401 0
 1480 0022 3B1C     		mov	r3, r7
 1481 0024 0C33     		add	r3, r3, #12
 1482 0026 FA1D     		add	r2, r7, #7
 1483 0028 1278     		ldrb	r2, [r2]
 1484 002a 9A70     		strb	r2, [r3, #2]
 402:.\main.c      ****     array[3] = 0x05;
 1485              		.loc 1 402 0
 1486 002c 3B1C     		mov	r3, r7
 1487 002e 0C33     		add	r3, r3, #12
 1488 0030 0522     		mov	r2, #5
 1489 0032 DA70     		strb	r2, [r3, #3]
 403:.\main.c      ****     array[4] = 0x03; //write instruction
 1490              		.loc 1 403 0
 1491 0034 3B1C     		mov	r3, r7
 1492 0036 0C33     		add	r3, r3, #12
 1493 0038 0322     		mov	r2, #3
 1494 003a 1A71     		strb	r2, [r3, #4]
 404:.\main.c      ****     array[5] = 0x20;
 1495              		.loc 1 404 0
 1496 003c 3B1C     		mov	r3, r7
 1497 003e 0C33     		add	r3, r3, #12
 1498 0040 2022     		mov	r2, #32
 1499 0042 5A71     		strb	r2, [r3, #5]
 405:.\main.c      ****     array[6] = speed;
 1500              		.loc 1 405 0
 1501 0044 3B1D     		add	r3, r7, #4
 1502 0046 1B88     		ldrh	r3, [r3]
 1503 0048 DAB2     		uxtb	r2, r3
 1504 004a 3B1C     		mov	r3, r7
 1505 004c 0C33     		add	r3, r3, #12
 1506 004e 9A71     		strb	r2, [r3, #6]
 406:.\main.c      ****     array[7] = speed >> 8;
 1507              		.loc 1 406 0
 1508 0050 3B1D     		add	r3, r7, #4
 1509 0052 1B88     		ldrh	r3, [r3]
 1510 0054 1B0A     		lsr	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 35


 1511 0056 9BB2     		uxth	r3, r3
 1512 0058 DAB2     		uxtb	r2, r3
 1513 005a 3B1C     		mov	r3, r7
 1514 005c 0C33     		add	r3, r3, #12
 1515 005e DA71     		strb	r2, [r3, #7]
 407:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1516              		.loc 1 407 0
 1517 0060 3B1C     		mov	r3, r7
 1518 0062 0C33     		add	r3, r3, #12
 1519 0064 9A79     		ldrb	r2, [r3, #6]
 1520 0066 FB1D     		add	r3, r7, #7
 1521 0068 1B78     		ldrb	r3, [r3]
 1522 006a D318     		add	r3, r2, r3
 1523 006c DAB2     		uxtb	r2, r3
 1524 006e 3B1C     		mov	r3, r7
 1525 0070 0C33     		add	r3, r3, #12
 1526 0072 DB79     		ldrb	r3, [r3, #7]
 1527 0074 D318     		add	r3, r2, r3
 1528 0076 DBB2     		uxtb	r3, r3
 1529 0078 2833     		add	r3, r3, #40
 1530 007a DBB2     		uxtb	r3, r3
 1531 007c DB43     		mvn	r3, r3
 1532 007e DAB2     		uxtb	r2, r3
 1533 0080 3B1C     		mov	r3, r7
 1534 0082 0C33     		add	r3, r3, #12
 1535 0084 1A72     		strb	r2, [r3, #8]
 408:.\main.c      ****     
 409:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1536              		.loc 1 409 0
 1537 0086 3B1C     		mov	r3, r7
 1538 0088 0C33     		add	r3, r3, #12
 1539 008a 181C     		mov	r0, r3
 1540 008c 0921     		mov	r1, #9
 1541 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 410:.\main.c      ****     
 411:.\main.c      **** }
 1542              		.loc 1 411 0
 1543 0092 BD46     		mov	sp, r7
 1544 0094 06B0     		add	sp, sp, #24
 1545              		@ sp needed
 1546 0096 80BD     		pop	{r7, pc}
 1547              		.cfi_endproc
 1548              	.LFE43:
 1549              		.size	ServoSpeed, .-ServoSpeed
 1550              		.comm	wristTilt_state,1,1
 1551              		.section	.text.wristTilt,"ax",%progbits
 1552              		.align	2
 1553              		.global	wristTilt
 1554              		.code	16
 1555              		.thumb_func
 1556              		.type	wristTilt, %function
 1557              	wristTilt:
 1558              	.LFB44:
 412:.\main.c      **** 
 413:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 414:.\main.c      **** //control the tilting motion of the wrist
 415:.\main.c      **** void wristTilt()
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 36


 416:.\main.c      **** {
 1559              		.loc 1 416 0
 1560              		.cfi_startproc
 1561 0000 90B5     		push	{r4, r7, lr}
 1562              		.cfi_def_cfa_offset 12
 1563              		.cfi_offset 4, -12
 1564              		.cfi_offset 7, -8
 1565              		.cfi_offset 14, -4
 1566 0002 83B0     		sub	sp, sp, #12
 1567              		.cfi_def_cfa_offset 24
 1568 0004 00AF     		add	r7, sp, #0
 1569              		.cfi_def_cfa_register 7
 417:.\main.c      ****     // Overview
 418:.\main.c      ****     //take instruction from data_array
 419:.\main.c      ****     //smooth input
 420:.\main.c      ****     //actuate the tilting using UART
 421:.\main.c      ****     //get feedback
 422:.\main.c      **** 
 423:.\main.c      ****     //-------------------------- 
 424:.\main.c      ****     // Dynamixel Servo specific
 425:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 426:.\main.c      ****     // TODO: Set the desired position
 427:.\main.c      **** 
 428:.\main.c      ****     //--------------------------
 429:.\main.c      ****     // State machine
 430:.\main.c      ****     
 431:.\main.c      ****     uint8 i;
 432:.\main.c      ****     uint16 avg;
 433:.\main.c      ****     uint16 command;
 434:.\main.c      ****     
 435:.\main.c      ****     switch(wristTilt_state){ //actions
 1570              		.loc 1 435 0
 1571 0006 4A4B     		ldr	r3, .L112
 1572 0008 1B78     		ldrb	r3, [r3]
 1573 000a 012B     		cmp	r3, #1
 1574 000c 03D0     		beq	.L90
 1575 000e 5EDD     		ble	.L111
 1576 0010 022B     		cmp	r3, #2
 1577 0012 17D0     		beq	.L93
 436:.\main.c      ****         case tilt_start:
 437:.\main.c      ****             break;
 438:.\main.c      **** 
 439:.\main.c      ****         case tilt_init:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 441:.\main.c      ****             {
 442:.\main.c      ****                 WT_array[i] = 1500;
 443:.\main.c      ****             }
 444:.\main.c      ****             WT_arr_cspot = 0;
 445:.\main.c      ****             
 446:.\main.c      ****             break;
 447:.\main.c      **** 
 448:.\main.c      ****         case tilt_control:
 449:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 450:.\main.c      ****             
 451:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 452:.\main.c      ****             
 453:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 37


 454:.\main.c      ****             {
 455:.\main.c      ****                 WT_arr_cspot++;
 456:.\main.c      ****             }
 457:.\main.c      ****             else
 458:.\main.c      ****             {
 459:.\main.c      ****                 WT_arr_cspot = 0;
 460:.\main.c      ****             }
 461:.\main.c      ****             
 462:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 463:.\main.c      ****             
 464:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 465:.\main.c      ****             
 466:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 467:.\main.c      ****             {
 468:.\main.c      ****                 //UART_1_SpiUartPutArray(avg);
 469:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 //throw error
 474:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 475:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 476:.\main.c      ****             }
 477:.\main.c      ****             fin_exec++;
 478:.\main.c      ****             break;
 479:.\main.c      ****             
 480:.\main.c      ****         case tilt_wait:
 481:.\main.c      ****             break;
 1578              		.loc 1 481 0
 1579 0014 5CE0     		b	.L89
 1580              	.L90:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1581              		.loc 1 440 0
 1582 0016 FB1D     		add	r3, r7, #7
 1583 0018 0022     		mov	r2, #0
 1584 001a 1A70     		strb	r2, [r3]
 1585 001c 0AE0     		b	.L95
 1586              	.L96:
 442:.\main.c      ****                 WT_array[i] = 1500;
 1587              		.loc 1 442 0 discriminator 2
 1588 001e FB1D     		add	r3, r7, #7
 1589 0020 1A78     		ldrb	r2, [r3]
 1590 0022 444B     		ldr	r3, .L112+4
 1591 0024 5200     		lsl	r2, r2, #1
 1592 0026 4449     		ldr	r1, .L112+8
 1593 0028 D152     		strh	r1, [r2, r3]
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1594              		.loc 1 440 0 discriminator 2
 1595 002a FB1D     		add	r3, r7, #7
 1596 002c 1A78     		ldrb	r2, [r3]
 1597 002e FB1D     		add	r3, r7, #7
 1598 0030 0132     		add	r2, r2, #1
 1599 0032 1A70     		strb	r2, [r3]
 1600              	.L95:
 440:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1601              		.loc 1 440 0 is_stmt 0 discriminator 1
 1602 0034 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 38


 1603 0036 1B78     		ldrb	r3, [r3]
 1604 0038 132B     		cmp	r3, #19
 1605 003a F0D9     		bls	.L96
 444:.\main.c      ****             WT_arr_cspot = 0;
 1606              		.loc 1 444 0 is_stmt 1
 1607 003c 3F4B     		ldr	r3, .L112+12
 1608 003e 0022     		mov	r2, #0
 1609 0040 1A70     		strb	r2, [r3]
 446:.\main.c      ****             break;
 1610              		.loc 1 446 0
 1611 0042 45E0     		b	.L89
 1612              	.L93:
 449:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1613              		.loc 1 449 0
 1614 0044 3C1D     		add	r4, r7, #4
 1615 0046 3E4B     		ldr	r3, .L112+16
 1616 0048 181C     		mov	r0, r3
 1617 004a 0A21     		mov	r1, #10
 1618 004c 0B22     		mov	r2, #11
 1619 004e FFF7FEFF 		bl	make_command
 1620 0052 031C     		mov	r3, r0
 1621 0054 2380     		strh	r3, [r4]
 451:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1622              		.loc 1 451 0
 1623 0056 394B     		ldr	r3, .L112+12
 1624 0058 1B78     		ldrb	r3, [r3]
 1625 005a 1A1C     		mov	r2, r3
 1626 005c 354B     		ldr	r3, .L112+4
 1627 005e 5200     		lsl	r2, r2, #1
 1628 0060 391D     		add	r1, r7, #4
 1629 0062 0988     		ldrh	r1, [r1]
 1630 0064 D152     		strh	r1, [r2, r3]
 453:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1631              		.loc 1 453 0
 1632 0066 354B     		ldr	r3, .L112+12
 1633 0068 1B78     		ldrb	r3, [r3]
 1634 006a 122B     		cmp	r3, #18
 1635 006c 06D8     		bhi	.L97
 455:.\main.c      ****                 WT_arr_cspot++;
 1636              		.loc 1 455 0
 1637 006e 334B     		ldr	r3, .L112+12
 1638 0070 1B78     		ldrb	r3, [r3]
 1639 0072 0133     		add	r3, r3, #1
 1640 0074 DAB2     		uxtb	r2, r3
 1641 0076 314B     		ldr	r3, .L112+12
 1642 0078 1A70     		strb	r2, [r3]
 1643 007a 02E0     		b	.L98
 1644              	.L97:
 459:.\main.c      ****                 WT_arr_cspot = 0;
 1645              		.loc 1 459 0
 1646 007c 2F4B     		ldr	r3, .L112+12
 1647 007e 0022     		mov	r2, #0
 1648 0080 1A70     		strb	r2, [r3]
 1649              	.L98:
 464:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1650              		.loc 1 464 0
 1651 0082 BC1C     		add	r4, r7, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 39


 1652 0084 2B4B     		ldr	r3, .L112+4
 1653 0086 181C     		mov	r0, r3
 1654 0088 1421     		mov	r1, #20
 1655 008a FFF7FEFF 		bl	average
 1656 008e 031C     		mov	r3, r0
 1657 0090 2380     		strh	r3, [r4]
 466:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1658              		.loc 1 466 0
 1659 0092 BB1C     		add	r3, r7, #2
 1660 0094 1A88     		ldrh	r2, [r3]
 1661 0096 FA23     		mov	r3, #250
 1662 0098 DB00     		lsl	r3, r3, #3
 1663 009a 9A42     		cmp	r2, r3
 1664 009c 0BD8     		bhi	.L99
 466:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1665              		.loc 1 466 0 is_stmt 0 discriminator 1
 1666 009e BB1C     		add	r3, r7, #2
 1667 00a0 1A88     		ldrh	r2, [r3]
 1668 00a2 284B     		ldr	r3, .L112+20
 1669 00a4 9A42     		cmp	r2, r3
 1670 00a6 06D9     		bls	.L99
 469:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1671              		.loc 1 469 0 is_stmt 1
 1672 00a8 BB1C     		add	r3, r7, #2
 1673 00aa 1B88     		ldrh	r3, [r3]
 1674 00ac 0220     		mov	r0, #2
 1675 00ae 191C     		mov	r1, r3
 1676 00b0 FFF7FEFF 		bl	ServoGoalPosition
 1677 00b4 04E0     		b	.L100
 1678              	.L99:
 475:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 1679              		.loc 1 475 0
 1680 00b6 204B     		ldr	r3, .L112+8
 1681 00b8 0220     		mov	r0, #2
 1682 00ba 191C     		mov	r1, r3
 1683 00bc FFF7FEFF 		bl	ServoGoalPosition
 1684              	.L100:
 477:.\main.c      ****             fin_exec++;
 1685              		.loc 1 477 0
 1686 00c0 214B     		ldr	r3, .L112+24
 1687 00c2 1B78     		ldrb	r3, [r3]
 1688 00c4 0133     		add	r3, r3, #1
 1689 00c6 DAB2     		uxtb	r2, r3
 1690 00c8 1F4B     		ldr	r3, .L112+24
 1691 00ca 1A70     		strb	r2, [r3]
 478:.\main.c      ****             break;
 1692              		.loc 1 478 0
 1693 00cc 00E0     		b	.L89
 1694              	.L111:
 437:.\main.c      ****             break;
 1695              		.loc 1 437 0
 1696 00ce C046     		mov	r8, r8
 1697              	.L89:
 482:.\main.c      ****     }
 483:.\main.c      ****     
 484:.\main.c      ****     switch(wristTilt_state){ //transitions
 1698              		.loc 1 484 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 40


 1699 00d0 174B     		ldr	r3, .L112
 1700 00d2 1B78     		ldrb	r3, [r3]
 1701 00d4 012B     		cmp	r3, #1
 1702 00d6 0CD0     		beq	.L102
 1703 00d8 02DC     		bgt	.L103
 1704 00da 002B     		cmp	r3, #0
 1705 00dc 05D0     		beq	.L104
 1706 00de 24E0     		b	.L88
 1707              	.L103:
 1708 00e0 022B     		cmp	r3, #2
 1709 00e2 0AD0     		beq	.L105
 1710 00e4 032B     		cmp	r3, #3
 1711 00e6 14D0     		beq	.L106
 1712 00e8 1FE0     		b	.L88
 1713              	.L104:
 485:.\main.c      ****         case tilt_start:
 486:.\main.c      ****             wristTilt_state = tilt_init;
 1714              		.loc 1 486 0
 1715 00ea 114B     		ldr	r3, .L112
 1716 00ec 0122     		mov	r2, #1
 1717 00ee 1A70     		strb	r2, [r3]
 487:.\main.c      ****             break;
 1718              		.loc 1 487 0
 1719 00f0 1BE0     		b	.L88
 1720              	.L102:
 488:.\main.c      ****         
 489:.\main.c      ****         case tilt_init:
 490:.\main.c      ****             wristTilt_state = tilt_wait;
 1721              		.loc 1 490 0
 1722 00f2 0F4B     		ldr	r3, .L112
 1723 00f4 0322     		mov	r2, #3
 1724 00f6 1A70     		strb	r2, [r3]
 491:.\main.c      ****             break;
 1725              		.loc 1 491 0
 1726 00f8 17E0     		b	.L88
 1727              	.L105:
 492:.\main.c      ****         
 493:.\main.c      ****         case tilt_control:
 494:.\main.c      ****             if(new_pack)
 1728              		.loc 1 494 0
 1729 00fa 144B     		ldr	r3, .L112+28
 1730 00fc 1B78     		ldrb	r3, [r3]
 1731 00fe 002B     		cmp	r3, #0
 1732 0100 03D0     		beq	.L107
 495:.\main.c      ****             {
 496:.\main.c      ****                 wristTilt_state = tilt_control;
 1733              		.loc 1 496 0
 1734 0102 0B4B     		ldr	r3, .L112
 1735 0104 0222     		mov	r2, #2
 1736 0106 1A70     		strb	r2, [r3]
 497:.\main.c      ****             }
 498:.\main.c      ****             else
 499:.\main.c      ****             {
 500:.\main.c      ****                 wristTilt_state = tilt_wait;
 501:.\main.c      ****             }
 502:.\main.c      ****             break;
 1737              		.loc 1 502 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 41


 1738 0108 0FE0     		b	.L88
 1739              	.L107:
 500:.\main.c      ****                 wristTilt_state = tilt_wait;
 1740              		.loc 1 500 0
 1741 010a 094B     		ldr	r3, .L112
 1742 010c 0322     		mov	r2, #3
 1743 010e 1A70     		strb	r2, [r3]
 1744              		.loc 1 502 0
 1745 0110 0BE0     		b	.L88
 1746              	.L106:
 503:.\main.c      ****         
 504:.\main.c      ****         case tilt_wait:
 505:.\main.c      ****             if(new_pack)
 1747              		.loc 1 505 0
 1748 0112 0E4B     		ldr	r3, .L112+28
 1749 0114 1B78     		ldrb	r3, [r3]
 1750 0116 002B     		cmp	r3, #0
 1751 0118 03D0     		beq	.L109
 506:.\main.c      ****             {
 507:.\main.c      ****                 wristTilt_state = tilt_control;
 1752              		.loc 1 507 0
 1753 011a 054B     		ldr	r3, .L112
 1754 011c 0222     		mov	r2, #2
 1755 011e 1A70     		strb	r2, [r3]
 1756 0120 02E0     		b	.L110
 1757              	.L109:
 508:.\main.c      ****             }
 509:.\main.c      ****             else
 510:.\main.c      ****             {
 511:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1758              		.loc 1 511 0
 1759 0122 034B     		ldr	r3, .L112
 1760 0124 0322     		mov	r2, #3
 1761 0126 1A70     		strb	r2, [r3]
 1762              	.L110:
 512:.\main.c      ****             }
 513:.\main.c      ****             break;
 1763              		.loc 1 513 0
 1764 0128 C046     		mov	r8, r8
 1765              	.L88:
 514:.\main.c      ****     }    
 515:.\main.c      **** }
 1766              		.loc 1 515 0
 1767 012a BD46     		mov	sp, r7
 1768 012c 03B0     		add	sp, sp, #12
 1769              		@ sp needed
 1770 012e 90BD     		pop	{r4, r7, pc}
 1771              	.L113:
 1772              		.align	2
 1773              	.L112:
 1774 0130 00000000 		.word	wristTilt_state
 1775 0134 00000000 		.word	WT_array
 1776 0138 DC050000 		.word	1500
 1777 013c 00000000 		.word	WT_arr_cspot
 1778 0140 00000000 		.word	data_array
 1779 0144 E7030000 		.word	999
 1780 0148 00000000 		.word	fin_exec
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 42


 1781 014c 00000000 		.word	new_pack
 1782              		.cfi_endproc
 1783              	.LFE44:
 1784              		.size	wristTilt, .-wristTilt
 1785              		.comm	wristRotate_state,1,1
 1786              		.section	.text.wristRotate,"ax",%progbits
 1787              		.align	2
 1788              		.global	wristRotate
 1789              		.code	16
 1790              		.thumb_func
 1791              		.type	wristRotate, %function
 1792              	wristRotate:
 1793              	.LFB45:
 516:.\main.c      **** 
 517:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 518:.\main.c      **** //control the rotating motion of the wrist
 519:.\main.c      **** void wristRotate()
 520:.\main.c      **** {
 1794              		.loc 1 520 0
 1795              		.cfi_startproc
 1796 0000 90B5     		push	{r4, r7, lr}
 1797              		.cfi_def_cfa_offset 12
 1798              		.cfi_offset 4, -12
 1799              		.cfi_offset 7, -8
 1800              		.cfi_offset 14, -4
 1801 0002 83B0     		sub	sp, sp, #12
 1802              		.cfi_def_cfa_offset 24
 1803 0004 00AF     		add	r7, sp, #0
 1804              		.cfi_def_cfa_register 7
 521:.\main.c      ****     //Overview
 522:.\main.c      ****     //take instruction from data_array
 523:.\main.c      ****     //smooth input
 524:.\main.c      ****     //actuate the tilting using UART
 525:.\main.c      ****     //get feedback
 526:.\main.c      **** 
 527:.\main.c      ****     //-------------------------- 
 528:.\main.c      ****     // Dynamixel Servo specific
 529:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 530:.\main.c      ****     // TODO: Set the desired position
 531:.\main.c      **** 
 532:.\main.c      ****     //--------------------------
 533:.\main.c      ****     // State machine
 534:.\main.c      ****     
 535:.\main.c      ****     uint8 i;
 536:.\main.c      ****     uint16 avg;
 537:.\main.c      ****     uint16 command;
 538:.\main.c      ****     
 539:.\main.c      ****     switch(wristRotate_state){ //actions
 1805              		.loc 1 539 0
 1806 0006 4A4B     		ldr	r3, .L138
 1807 0008 1B78     		ldrb	r3, [r3]
 1808 000a 012B     		cmp	r3, #1
 1809 000c 03D0     		beq	.L116
 1810 000e 5EDD     		ble	.L137
 1811 0010 022B     		cmp	r3, #2
 1812 0012 17D0     		beq	.L119
 540:.\main.c      ****         case rotate_start:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 43


 541:.\main.c      ****             break;
 542:.\main.c      **** 
 543:.\main.c      ****         case rotate_init:
 544:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 545:.\main.c      ****             {
 546:.\main.c      ****                 WR_array[i] = 1500;
 547:.\main.c      ****             }
 548:.\main.c      ****             WR_arr_cspot = 0;
 549:.\main.c      ****             break;
 550:.\main.c      **** 
 551:.\main.c      ****         case rotate_control:
 552:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 553:.\main.c      ****             
 554:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 555:.\main.c      ****             
 556:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 557:.\main.c      ****             {
 558:.\main.c      ****                 WR_arr_cspot++;
 559:.\main.c      ****             }
 560:.\main.c      ****             else
 561:.\main.c      ****             {
 562:.\main.c      ****                 WR_arr_cspot = 0;
 563:.\main.c      ****             }
 564:.\main.c      ****             
 565:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 566:.\main.c      ****             
 567:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 568:.\main.c      ****             
 569:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 570:.\main.c      ****             {
 571:.\main.c      ****                 //BA_PWM_WriteCompare(avg);
 572:.\main.c      ****                 //TODO maybe scale avg between 0 and 3000
 573:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 574:.\main.c      ****             }
 575:.\main.c      ****             else
 576:.\main.c      ****             {
 577:.\main.c      ****                 //throw error
 578:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 579:.\main.c      ****                 //TODO if we scale change the "neutral" value
 580:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 581:.\main.c      ****             }
 582:.\main.c      ****             fin_exec++;
 583:.\main.c      ****             break;
 584:.\main.c      ****             
 585:.\main.c      ****         case rotate_wait:
 586:.\main.c      ****             break;
 1813              		.loc 1 586 0
 1814 0014 5CE0     		b	.L115
 1815              	.L116:
 544:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1816              		.loc 1 544 0
 1817 0016 FB1D     		add	r3, r7, #7
 1818 0018 0022     		mov	r2, #0
 1819 001a 1A70     		strb	r2, [r3]
 1820 001c 0AE0     		b	.L121
 1821              	.L122:
 546:.\main.c      ****                 WR_array[i] = 1500;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 44


 1822              		.loc 1 546 0 discriminator 2
 1823 001e FB1D     		add	r3, r7, #7
 1824 0020 1A78     		ldrb	r2, [r3]
 1825 0022 444B     		ldr	r3, .L138+4
 1826 0024 5200     		lsl	r2, r2, #1
 1827 0026 4449     		ldr	r1, .L138+8
 1828 0028 D152     		strh	r1, [r2, r3]
 544:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1829              		.loc 1 544 0 discriminator 2
 1830 002a FB1D     		add	r3, r7, #7
 1831 002c 1A78     		ldrb	r2, [r3]
 1832 002e FB1D     		add	r3, r7, #7
 1833 0030 0132     		add	r2, r2, #1
 1834 0032 1A70     		strb	r2, [r3]
 1835              	.L121:
 544:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1836              		.loc 1 544 0 is_stmt 0 discriminator 1
 1837 0034 FB1D     		add	r3, r7, #7
 1838 0036 1B78     		ldrb	r3, [r3]
 1839 0038 132B     		cmp	r3, #19
 1840 003a F0D9     		bls	.L122
 548:.\main.c      ****             WR_arr_cspot = 0;
 1841              		.loc 1 548 0 is_stmt 1
 1842 003c 3F4B     		ldr	r3, .L138+12
 1843 003e 0022     		mov	r2, #0
 1844 0040 1A70     		strb	r2, [r3]
 549:.\main.c      ****             break;
 1845              		.loc 1 549 0
 1846 0042 45E0     		b	.L115
 1847              	.L119:
 552:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1848              		.loc 1 552 0
 1849 0044 3C1D     		add	r4, r7, #4
 1850 0046 3E4B     		ldr	r3, .L138+16
 1851 0048 181C     		mov	r0, r3
 1852 004a 0C21     		mov	r1, #12
 1853 004c 0D22     		mov	r2, #13
 1854 004e FFF7FEFF 		bl	make_command
 1855 0052 031C     		mov	r3, r0
 1856 0054 2380     		strh	r3, [r4]
 554:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 1857              		.loc 1 554 0
 1858 0056 394B     		ldr	r3, .L138+12
 1859 0058 1B78     		ldrb	r3, [r3]
 1860 005a 1A1C     		mov	r2, r3
 1861 005c 354B     		ldr	r3, .L138+4
 1862 005e 5200     		lsl	r2, r2, #1
 1863 0060 391D     		add	r1, r7, #4
 1864 0062 0988     		ldrh	r1, [r1]
 1865 0064 D152     		strh	r1, [r2, r3]
 556:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1866              		.loc 1 556 0
 1867 0066 354B     		ldr	r3, .L138+12
 1868 0068 1B78     		ldrb	r3, [r3]
 1869 006a 122B     		cmp	r3, #18
 1870 006c 06D8     		bhi	.L123
 558:.\main.c      ****                 WR_arr_cspot++;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 45


 1871              		.loc 1 558 0
 1872 006e 334B     		ldr	r3, .L138+12
 1873 0070 1B78     		ldrb	r3, [r3]
 1874 0072 0133     		add	r3, r3, #1
 1875 0074 DAB2     		uxtb	r2, r3
 1876 0076 314B     		ldr	r3, .L138+12
 1877 0078 1A70     		strb	r2, [r3]
 1878 007a 02E0     		b	.L124
 1879              	.L123:
 562:.\main.c      ****                 WR_arr_cspot = 0;
 1880              		.loc 1 562 0
 1881 007c 2F4B     		ldr	r3, .L138+12
 1882 007e 0022     		mov	r2, #0
 1883 0080 1A70     		strb	r2, [r3]
 1884              	.L124:
 567:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1885              		.loc 1 567 0
 1886 0082 BC1C     		add	r4, r7, #2
 1887 0084 2B4B     		ldr	r3, .L138+4
 1888 0086 181C     		mov	r0, r3
 1889 0088 1421     		mov	r1, #20
 1890 008a FFF7FEFF 		bl	average
 1891 008e 031C     		mov	r3, r0
 1892 0090 2380     		strh	r3, [r4]
 569:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1893              		.loc 1 569 0
 1894 0092 BB1C     		add	r3, r7, #2
 1895 0094 1A88     		ldrh	r2, [r3]
 1896 0096 FA23     		mov	r3, #250
 1897 0098 DB00     		lsl	r3, r3, #3
 1898 009a 9A42     		cmp	r2, r3
 1899 009c 0BD8     		bhi	.L125
 569:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1900              		.loc 1 569 0 is_stmt 0 discriminator 1
 1901 009e BB1C     		add	r3, r7, #2
 1902 00a0 1A88     		ldrh	r2, [r3]
 1903 00a2 284B     		ldr	r3, .L138+20
 1904 00a4 9A42     		cmp	r2, r3
 1905 00a6 06D9     		bls	.L125
 573:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1906              		.loc 1 573 0 is_stmt 1
 1907 00a8 BB1C     		add	r3, r7, #2
 1908 00aa 1B88     		ldrh	r3, [r3]
 1909 00ac 0120     		mov	r0, #1
 1910 00ae 191C     		mov	r1, r3
 1911 00b0 FFF7FEFF 		bl	ServoGoalPosition
 1912 00b4 04E0     		b	.L126
 1913              	.L125:
 580:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1914              		.loc 1 580 0
 1915 00b6 204B     		ldr	r3, .L138+8
 1916 00b8 0120     		mov	r0, #1
 1917 00ba 191C     		mov	r1, r3
 1918 00bc FFF7FEFF 		bl	ServoGoalPosition
 1919              	.L126:
 582:.\main.c      ****             fin_exec++;
 1920              		.loc 1 582 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 46


 1921 00c0 214B     		ldr	r3, .L138+24
 1922 00c2 1B78     		ldrb	r3, [r3]
 1923 00c4 0133     		add	r3, r3, #1
 1924 00c6 DAB2     		uxtb	r2, r3
 1925 00c8 1F4B     		ldr	r3, .L138+24
 1926 00ca 1A70     		strb	r2, [r3]
 583:.\main.c      ****             break;
 1927              		.loc 1 583 0
 1928 00cc 00E0     		b	.L115
 1929              	.L137:
 541:.\main.c      ****             break;
 1930              		.loc 1 541 0
 1931 00ce C046     		mov	r8, r8
 1932              	.L115:
 587:.\main.c      ****     }
 588:.\main.c      ****     
 589:.\main.c      ****     switch(wristRotate_state){ //transitions
 1933              		.loc 1 589 0
 1934 00d0 174B     		ldr	r3, .L138
 1935 00d2 1B78     		ldrb	r3, [r3]
 1936 00d4 012B     		cmp	r3, #1
 1937 00d6 0CD0     		beq	.L128
 1938 00d8 02DC     		bgt	.L129
 1939 00da 002B     		cmp	r3, #0
 1940 00dc 05D0     		beq	.L130
 1941 00de 24E0     		b	.L114
 1942              	.L129:
 1943 00e0 022B     		cmp	r3, #2
 1944 00e2 0AD0     		beq	.L131
 1945 00e4 032B     		cmp	r3, #3
 1946 00e6 14D0     		beq	.L132
 1947 00e8 1FE0     		b	.L114
 1948              	.L130:
 590:.\main.c      ****         case rotate_start:
 591:.\main.c      ****             wristRotate_state = rotate_init;
 1949              		.loc 1 591 0
 1950 00ea 114B     		ldr	r3, .L138
 1951 00ec 0122     		mov	r2, #1
 1952 00ee 1A70     		strb	r2, [r3]
 592:.\main.c      ****             break;
 1953              		.loc 1 592 0
 1954 00f0 1BE0     		b	.L114
 1955              	.L128:
 593:.\main.c      ****         
 594:.\main.c      ****         case rotate_init:
 595:.\main.c      ****             wristRotate_state = rotate_wait;
 1956              		.loc 1 595 0
 1957 00f2 0F4B     		ldr	r3, .L138
 1958 00f4 0322     		mov	r2, #3
 1959 00f6 1A70     		strb	r2, [r3]
 596:.\main.c      ****             break;
 1960              		.loc 1 596 0
 1961 00f8 17E0     		b	.L114
 1962              	.L131:
 597:.\main.c      ****         
 598:.\main.c      ****         case rotate_control:
 599:.\main.c      ****             if(new_pack)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 47


 1963              		.loc 1 599 0
 1964 00fa 144B     		ldr	r3, .L138+28
 1965 00fc 1B78     		ldrb	r3, [r3]
 1966 00fe 002B     		cmp	r3, #0
 1967 0100 03D0     		beq	.L133
 600:.\main.c      ****             {
 601:.\main.c      ****                 wristRotate_state = rotate_control;
 1968              		.loc 1 601 0
 1969 0102 0B4B     		ldr	r3, .L138
 1970 0104 0222     		mov	r2, #2
 1971 0106 1A70     		strb	r2, [r3]
 602:.\main.c      ****             }
 603:.\main.c      ****             else
 604:.\main.c      ****             {
 605:.\main.c      ****                 wristRotate_state = rotate_wait;
 606:.\main.c      ****             }
 607:.\main.c      ****             break;
 1972              		.loc 1 607 0
 1973 0108 0FE0     		b	.L114
 1974              	.L133:
 605:.\main.c      ****                 wristRotate_state = rotate_wait;
 1975              		.loc 1 605 0
 1976 010a 094B     		ldr	r3, .L138
 1977 010c 0322     		mov	r2, #3
 1978 010e 1A70     		strb	r2, [r3]
 1979              		.loc 1 607 0
 1980 0110 0BE0     		b	.L114
 1981              	.L132:
 608:.\main.c      ****         
 609:.\main.c      ****         case rotate_wait:
 610:.\main.c      ****             if(new_pack)
 1982              		.loc 1 610 0
 1983 0112 0E4B     		ldr	r3, .L138+28
 1984 0114 1B78     		ldrb	r3, [r3]
 1985 0116 002B     		cmp	r3, #0
 1986 0118 03D0     		beq	.L135
 611:.\main.c      ****             {
 612:.\main.c      ****                 wristRotate_state = rotate_control;
 1987              		.loc 1 612 0
 1988 011a 054B     		ldr	r3, .L138
 1989 011c 0222     		mov	r2, #2
 1990 011e 1A70     		strb	r2, [r3]
 1991 0120 02E0     		b	.L136
 1992              	.L135:
 613:.\main.c      ****             }
 614:.\main.c      ****             else
 615:.\main.c      ****             {
 616:.\main.c      ****                 wristRotate_state = rotate_wait;
 1993              		.loc 1 616 0
 1994 0122 034B     		ldr	r3, .L138
 1995 0124 0322     		mov	r2, #3
 1996 0126 1A70     		strb	r2, [r3]
 1997              	.L136:
 617:.\main.c      ****             }
 618:.\main.c      ****             break;
 1998              		.loc 1 618 0
 1999 0128 C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 48


 2000              	.L114:
 619:.\main.c      ****     }    
 620:.\main.c      **** }
 2001              		.loc 1 620 0
 2002 012a BD46     		mov	sp, r7
 2003 012c 03B0     		add	sp, sp, #12
 2004              		@ sp needed
 2005 012e 90BD     		pop	{r4, r7, pc}
 2006              	.L139:
 2007              		.align	2
 2008              	.L138:
 2009 0130 00000000 		.word	wristRotate_state
 2010 0134 00000000 		.word	WR_array
 2011 0138 DC050000 		.word	1500
 2012 013c 00000000 		.word	WR_arr_cspot
 2013 0140 00000000 		.word	data_array
 2014 0144 E7030000 		.word	999
 2015 0148 00000000 		.word	fin_exec
 2016 014c 00000000 		.word	new_pack
 2017              		.cfi_endproc
 2018              	.LFE45:
 2019              		.size	wristRotate, .-wristRotate
 2020              		.comm	elbow_state,1,1
 2021              		.section	.text.elbow,"ax",%progbits
 2022              		.align	2
 2023              		.global	elbow
 2024              		.code	16
 2025              		.thumb_func
 2026              		.type	elbow, %function
 2027              	elbow:
 2028              	.LFB46:
 621:.\main.c      **** 
 622:.\main.c      **** //control the elbow
 623:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 624:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 625:.\main.c      **** void elbow()
 626:.\main.c      **** { 
 2029              		.loc 1 626 0
 2030              		.cfi_startproc
 2031 0000 90B5     		push	{r4, r7, lr}
 2032              		.cfi_def_cfa_offset 12
 2033              		.cfi_offset 4, -12
 2034              		.cfi_offset 7, -8
 2035              		.cfi_offset 14, -4
 2036 0002 83B0     		sub	sp, sp, #12
 2037              		.cfi_def_cfa_offset 24
 2038 0004 00AF     		add	r7, sp, #0
 2039              		.cfi_def_cfa_register 7
 627:.\main.c      ****     //take instruction from data_array
 628:.\main.c      ****     //smooth input
 629:.\main.c      ****     //actuate the elbow using PWM
 630:.\main.c      ****     //get feedback
 631:.\main.c      ****     uint8 i;
 632:.\main.c      ****     uint16 avg;
 633:.\main.c      ****     uint16 command;
 634:.\main.c      ****     
 635:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 49


 2040              		.loc 1 635 0
 2041 0006 3C1D     		add	r4, r7, #4
 2042 0008 0120     		mov	r0, #1
 2043 000a FFF7FEFF 		bl	potFeedback
 2044 000e 031C     		mov	r3, r0
 2045 0010 2380     		strh	r3, [r4]
 636:.\main.c      ****     
 637:.\main.c      ****     switch(elbow_state){ //actions
 2046              		.loc 1 637 0
 2047 0012 774B     		ldr	r3, .L174
 2048 0014 1B78     		ldrb	r3, [r3]
 2049 0016 012B     		cmp	r3, #1
 2050 0018 07D0     		beq	.L142
 2051 001a 00DC     		bgt	.LCB1888
 2052 001c B7E0     		b	.L173	@long jump
 2053              	.LCB1888:
 2054 001e 022B     		cmp	r3, #2
 2055 0020 1AD0     		beq	.L145
 2056 0022 032B     		cmp	r3, #3
 2057 0024 00D1     		bne	.LCB1892
 2058 0026 A3E0     		b	.L146	@long jump
 2059              	.LCB1892:
 2060 0028 B2E0     		b	.L141
 2061              	.L142:
 638:.\main.c      ****         case elbw_start:
 639:.\main.c      ****             break;
 640:.\main.c      **** 
 641:.\main.c      ****         case elbw_init:
 642:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2062              		.loc 1 642 0
 2063 002a FB1D     		add	r3, r7, #7
 2064 002c 0022     		mov	r2, #0
 2065 002e 1A70     		strb	r2, [r3]
 2066 0030 0AE0     		b	.L147
 2067              	.L148:
 643:.\main.c      ****             {
 644:.\main.c      ****                 elbow_array[i] = 1500;
 2068              		.loc 1 644 0 discriminator 2
 2069 0032 FB1D     		add	r3, r7, #7
 2070 0034 1A78     		ldrb	r2, [r3]
 2071 0036 6F4B     		ldr	r3, .L174+4
 2072 0038 5200     		lsl	r2, r2, #1
 2073 003a 6F49     		ldr	r1, .L174+8
 2074 003c D152     		strh	r1, [r2, r3]
 642:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2075              		.loc 1 642 0 discriminator 2
 2076 003e FB1D     		add	r3, r7, #7
 2077 0040 1A78     		ldrb	r2, [r3]
 2078 0042 FB1D     		add	r3, r7, #7
 2079 0044 0132     		add	r2, r2, #1
 2080 0046 1A70     		strb	r2, [r3]
 2081              	.L147:
 642:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2082              		.loc 1 642 0 is_stmt 0 discriminator 1
 2083 0048 FB1D     		add	r3, r7, #7
 2084 004a 1B78     		ldrb	r3, [r3]
 2085 004c 132B     		cmp	r3, #19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 50


 2086 004e F0D9     		bls	.L148
 645:.\main.c      ****             }
 646:.\main.c      ****             elbw_arr_cspot = 0;
 2087              		.loc 1 646 0 is_stmt 1
 2088 0050 6A4B     		ldr	r3, .L174+12
 2089 0052 0022     		mov	r2, #0
 2090 0054 1A70     		strb	r2, [r3]
 647:.\main.c      ****             break;
 2091              		.loc 1 647 0
 2092 0056 9BE0     		b	.L141
 2093              	.L145:
 648:.\main.c      **** 
 649:.\main.c      ****         case elbw_execute:
 650:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2094              		.loc 1 650 0
 2095 0058 BC1C     		add	r4, r7, #2
 2096 005a 694B     		ldr	r3, .L174+16
 2097 005c 181C     		mov	r0, r3
 2098 005e 0821     		mov	r1, #8
 2099 0060 0922     		mov	r2, #9
 2100 0062 FFF7FEFF 		bl	make_command
 2101 0066 031C     		mov	r3, r0
 2102 0068 2380     		strh	r3, [r4]
 651:.\main.c      ****             
 652:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2103              		.loc 1 652 0
 2104 006a 644B     		ldr	r3, .L174+12
 2105 006c 1B78     		ldrb	r3, [r3]
 2106 006e 1A1C     		mov	r2, r3
 2107 0070 604B     		ldr	r3, .L174+4
 2108 0072 5200     		lsl	r2, r2, #1
 2109 0074 B91C     		add	r1, r7, #2
 2110 0076 0988     		ldrh	r1, [r1]
 2111 0078 D152     		strh	r1, [r2, r3]
 653:.\main.c      ****             
 654:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2112              		.loc 1 654 0
 2113 007a 604B     		ldr	r3, .L174+12
 2114 007c 1B78     		ldrb	r3, [r3]
 2115 007e 122B     		cmp	r3, #18
 2116 0080 06D8     		bhi	.L149
 655:.\main.c      ****             {
 656:.\main.c      ****                 elbw_arr_cspot++;
 2117              		.loc 1 656 0
 2118 0082 5E4B     		ldr	r3, .L174+12
 2119 0084 1B78     		ldrb	r3, [r3]
 2120 0086 0133     		add	r3, r3, #1
 2121 0088 DAB2     		uxtb	r2, r3
 2122 008a 5C4B     		ldr	r3, .L174+12
 2123 008c 1A70     		strb	r2, [r3]
 2124 008e 02E0     		b	.L150
 2125              	.L149:
 657:.\main.c      ****             }
 658:.\main.c      ****             else
 659:.\main.c      ****             {
 660:.\main.c      ****                 elbw_arr_cspot = 0;
 2126              		.loc 1 660 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 51


 2127 0090 5A4B     		ldr	r3, .L174+12
 2128 0092 0022     		mov	r2, #0
 2129 0094 1A70     		strb	r2, [r3]
 2130              	.L150:
 661:.\main.c      ****             }
 662:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 2131              		.loc 1 662 0
 2132 0096 3C1C     		mov	r4, r7
 2133 0098 564B     		ldr	r3, .L174+4
 2134 009a 181C     		mov	r0, r3
 2135 009c 1421     		mov	r1, #20
 2136 009e FFF7FEFF 		bl	average
 2137 00a2 031C     		mov	r3, r0
 2138 00a4 2380     		strh	r3, [r4]
 663:.\main.c      ****            
 664:.\main.c      ****             //uint16 feedback = potFeedback(ELBOW_POT); --see above
 665:.\main.c      ****             //TODO make sure reading from correct pots
 666:.\main.c      **** //            char buffer[20];
 667:.\main.c      **** //            
 668:.\main.c      **** //            itoa(avg, buffer);
 669:.\main.c      **** //            
 670:.\main.c      **** //            UART_1_UartPutString(buffer);      
 671:.\main.c      **** //            UART_1_UartPutString("\r\n");      
 672:.\main.c      ****             
 673:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 2139              		.loc 1 673 0
 2140 00a6 3B1D     		add	r3, r7, #4
 2141 00a8 1B88     		ldrh	r3, [r3]
 2142 00aa 642B     		cmp	r3, #100
 2143 00ac 1FD8     		bhi	.L151
 674:.\main.c      ****             {
 675:.\main.c      ****                 if (avg < 1500)
 2144              		.loc 1 675 0
 2145 00ae 3B1C     		mov	r3, r7
 2146 00b0 1A88     		ldrh	r2, [r3]
 2147 00b2 544B     		ldr	r3, .L174+20
 2148 00b4 9A42     		cmp	r2, r3
 2149 00b6 04D8     		bhi	.L152
 676:.\main.c      ****                 {
 677:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2150              		.loc 1 677 0
 2151 00b8 4F4B     		ldr	r3, .L174+8
 2152 00ba 181C     		mov	r0, r3
 2153 00bc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2154 00c0 4FE0     		b	.L155
 2155              	.L152:
 678:.\main.c      ****                 }
 679:.\main.c      ****                 else
 680:.\main.c      ****                 {
 681:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2156              		.loc 1 681 0
 2157 00c2 3B1C     		mov	r3, r7
 2158 00c4 1A88     		ldrh	r2, [r3]
 2159 00c6 FA23     		mov	r3, #250
 2160 00c8 DB00     		lsl	r3, r3, #3
 2161 00ca 9A42     		cmp	r2, r3
 2162 00cc 0AD8     		bhi	.L154
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 52


 2163              		.loc 1 681 0 is_stmt 0 discriminator 1
 2164 00ce 3B1C     		mov	r3, r7
 2165 00d0 1A88     		ldrh	r2, [r3]
 2166 00d2 4D4B     		ldr	r3, .L174+24
 2167 00d4 9A42     		cmp	r2, r3
 2168 00d6 05D9     		bls	.L154
 682:.\main.c      ****                     {
 683:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2169              		.loc 1 683 0 is_stmt 1
 2170 00d8 3B1C     		mov	r3, r7
 2171 00da 1B88     		ldrh	r3, [r3]
 2172 00dc 181C     		mov	r0, r3
 2173 00de FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2174 00e2 3EE0     		b	.L155
 2175              	.L154:
 684:.\main.c      ****                     }
 685:.\main.c      ****                     else
 686:.\main.c      ****                     {
 687:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2176              		.loc 1 687 0
 2177 00e4 444B     		ldr	r3, .L174+8
 2178 00e6 181C     		mov	r0, r3
 2179 00e8 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2180 00ec 39E0     		b	.L155
 2181              	.L151:
 688:.\main.c      ****                     }
 689:.\main.c      ****                 }
 690:.\main.c      ****             }
 691:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 2182              		.loc 1 691 0
 2183 00ee 3B1D     		add	r3, r7, #4
 2184 00f0 1A88     		ldrh	r2, [r3]
 2185 00f2 454B     		ldr	r3, .L174+24
 2186 00f4 9A42     		cmp	r2, r3
 2187 00f6 1FD9     		bls	.L156
 692:.\main.c      ****             {
 693:.\main.c      ****                 if(avg > 1500)
 2188              		.loc 1 693 0
 2189 00f8 3B1C     		mov	r3, r7
 2190 00fa 1A88     		ldrh	r2, [r3]
 2191 00fc 3E4B     		ldr	r3, .L174+8
 2192 00fe 9A42     		cmp	r2, r3
 2193 0100 04D9     		bls	.L157
 694:.\main.c      ****                 {
 695:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2194              		.loc 1 695 0
 2195 0102 3D4B     		ldr	r3, .L174+8
 2196 0104 181C     		mov	r0, r3
 2197 0106 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2198 010a 2AE0     		b	.L155
 2199              	.L157:
 696:.\main.c      ****                 }
 697:.\main.c      ****                 else
 698:.\main.c      ****                 {
 699:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2200              		.loc 1 699 0
 2201 010c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 53


 2202 010e 1A88     		ldrh	r2, [r3]
 2203 0110 FA23     		mov	r3, #250
 2204 0112 DB00     		lsl	r3, r3, #3
 2205 0114 9A42     		cmp	r2, r3
 2206 0116 0AD8     		bhi	.L159
 2207              		.loc 1 699 0 is_stmt 0 discriminator 1
 2208 0118 3B1C     		mov	r3, r7
 2209 011a 1A88     		ldrh	r2, [r3]
 2210 011c 3A4B     		ldr	r3, .L174+24
 2211 011e 9A42     		cmp	r2, r3
 2212 0120 05D9     		bls	.L159
 700:.\main.c      ****                     {
 701:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2213              		.loc 1 701 0 is_stmt 1
 2214 0122 3B1C     		mov	r3, r7
 2215 0124 1B88     		ldrh	r3, [r3]
 2216 0126 181C     		mov	r0, r3
 2217 0128 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2218 012c 19E0     		b	.L155
 2219              	.L159:
 702:.\main.c      ****                     }
 703:.\main.c      ****                     else
 704:.\main.c      ****                     {
 705:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2220              		.loc 1 705 0
 2221 012e 324B     		ldr	r3, .L174+8
 2222 0130 181C     		mov	r0, r3
 2223 0132 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2224 0136 14E0     		b	.L155
 2225              	.L156:
 706:.\main.c      ****                     }
 707:.\main.c      ****                 }
 708:.\main.c      ****             }
 709:.\main.c      ****             else
 710:.\main.c      ****             {
 711:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2226              		.loc 1 711 0
 2227 0138 3B1C     		mov	r3, r7
 2228 013a 1A88     		ldrh	r2, [r3]
 2229 013c FA23     		mov	r3, #250
 2230 013e DB00     		lsl	r3, r3, #3
 2231 0140 9A42     		cmp	r2, r3
 2232 0142 0AD8     		bhi	.L160
 2233              		.loc 1 711 0 is_stmt 0 discriminator 1
 2234 0144 3B1C     		mov	r3, r7
 2235 0146 1A88     		ldrh	r2, [r3]
 2236 0148 2F4B     		ldr	r3, .L174+24
 2237 014a 9A42     		cmp	r2, r3
 2238 014c 05D9     		bls	.L160
 712:.\main.c      ****                 {
 713:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 2239              		.loc 1 713 0 is_stmt 1
 2240 014e 3B1C     		mov	r3, r7
 2241 0150 1B88     		ldrh	r3, [r3]
 2242 0152 181C     		mov	r0, r3
 2243 0154 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2244 0158 03E0     		b	.L155
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 54


 2245              	.L160:
 714:.\main.c      ****                 }
 715:.\main.c      ****                 else
 716:.\main.c      ****                 {
 717:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2246              		.loc 1 717 0
 2247 015a 274B     		ldr	r3, .L174+8
 2248 015c 181C     		mov	r0, r3
 2249 015e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2250              	.L155:
 718:.\main.c      ****                 }
 719:.\main.c      ****             }
 720:.\main.c      ****             
 721:.\main.c      ****             fin_exec++;
 2251              		.loc 1 721 0
 2252 0162 2A4B     		ldr	r3, .L174+28
 2253 0164 1B78     		ldrb	r3, [r3]
 2254 0166 0133     		add	r3, r3, #1
 2255 0168 DAB2     		uxtb	r2, r3
 2256 016a 284B     		ldr	r3, .L174+28
 2257 016c 1A70     		strb	r2, [r3]
 722:.\main.c      ****             break;
 2258              		.loc 1 722 0
 2259 016e 0FE0     		b	.L141
 2260              	.L146:
 723:.\main.c      ****             
 724:.\main.c      ****         case elbw_wait:
 725:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2261              		.loc 1 725 0
 2262 0170 3B1D     		add	r3, r7, #4
 2263 0172 1B88     		ldrh	r3, [r3]
 2264 0174 642B     		cmp	r3, #100
 2265 0176 04D9     		bls	.L161
 2266              		.loc 1 725 0 is_stmt 0 discriminator 1
 2267 0178 3B1D     		add	r3, r7, #4
 2268 017a 1A88     		ldrh	r2, [r3]
 2269 017c 224B     		ldr	r3, .L174+24
 2270 017e 9A42     		cmp	r2, r3
 2271 0180 04D9     		bls	.L162
 2272              	.L161:
 726:.\main.c      ****             {
 727:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2273              		.loc 1 727 0 is_stmt 1
 2274 0182 1D4B     		ldr	r3, .L174+8
 2275 0184 181C     		mov	r0, r3
 2276 0186 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 728:.\main.c      ****             }
 729:.\main.c      ****             break;
 2277              		.loc 1 729 0
 2278 018a 01E0     		b	.L141
 2279              	.L162:
 2280 018c 00E0     		b	.L141
 2281              	.L173:
 639:.\main.c      ****             break;
 2282              		.loc 1 639 0
 2283 018e C046     		mov	r8, r8
 2284              	.L141:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 55


 730:.\main.c      ****     }
 731:.\main.c      ****     
 732:.\main.c      ****     switch(elbow_state){ //transitions
 2285              		.loc 1 732 0
 2286 0190 174B     		ldr	r3, .L174
 2287 0192 1B78     		ldrb	r3, [r3]
 2288 0194 012B     		cmp	r3, #1
 2289 0196 0CD0     		beq	.L164
 2290 0198 02DC     		bgt	.L165
 2291 019a 002B     		cmp	r3, #0
 2292 019c 05D0     		beq	.L166
 2293 019e 24E0     		b	.L140
 2294              	.L165:
 2295 01a0 022B     		cmp	r3, #2
 2296 01a2 0AD0     		beq	.L167
 2297 01a4 032B     		cmp	r3, #3
 2298 01a6 14D0     		beq	.L168
 2299 01a8 1FE0     		b	.L140
 2300              	.L166:
 733:.\main.c      ****         case elbw_start:
 734:.\main.c      ****             elbow_state = elbw_init;
 2301              		.loc 1 734 0
 2302 01aa 114B     		ldr	r3, .L174
 2303 01ac 0122     		mov	r2, #1
 2304 01ae 1A70     		strb	r2, [r3]
 735:.\main.c      ****             break;
 2305              		.loc 1 735 0
 2306 01b0 1BE0     		b	.L140
 2307              	.L164:
 736:.\main.c      ****         
 737:.\main.c      ****         case elbw_init:
 738:.\main.c      ****             elbow_state = elbw_wait;
 2308              		.loc 1 738 0
 2309 01b2 0F4B     		ldr	r3, .L174
 2310 01b4 0322     		mov	r2, #3
 2311 01b6 1A70     		strb	r2, [r3]
 739:.\main.c      ****             break;
 2312              		.loc 1 739 0
 2313 01b8 17E0     		b	.L140
 2314              	.L167:
 740:.\main.c      ****         
 741:.\main.c      ****         case elbw_execute:
 742:.\main.c      ****             if(new_pack)
 2315              		.loc 1 742 0
 2316 01ba 154B     		ldr	r3, .L174+32
 2317 01bc 1B78     		ldrb	r3, [r3]
 2318 01be 002B     		cmp	r3, #0
 2319 01c0 03D0     		beq	.L169
 743:.\main.c      ****             {
 744:.\main.c      ****                 elbow_state = elbw_execute;
 2320              		.loc 1 744 0
 2321 01c2 0B4B     		ldr	r3, .L174
 2322 01c4 0222     		mov	r2, #2
 2323 01c6 1A70     		strb	r2, [r3]
 745:.\main.c      ****             }
 746:.\main.c      ****             else
 747:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 56


 748:.\main.c      ****                 elbow_state = elbw_wait;
 749:.\main.c      ****             }
 750:.\main.c      ****             break;
 2324              		.loc 1 750 0
 2325 01c8 0FE0     		b	.L140
 2326              	.L169:
 748:.\main.c      ****                 elbow_state = elbw_wait;
 2327              		.loc 1 748 0
 2328 01ca 094B     		ldr	r3, .L174
 2329 01cc 0322     		mov	r2, #3
 2330 01ce 1A70     		strb	r2, [r3]
 2331              		.loc 1 750 0
 2332 01d0 0BE0     		b	.L140
 2333              	.L168:
 751:.\main.c      ****         
 752:.\main.c      ****         case elbw_wait:
 753:.\main.c      ****             if(new_pack)
 2334              		.loc 1 753 0
 2335 01d2 0F4B     		ldr	r3, .L174+32
 2336 01d4 1B78     		ldrb	r3, [r3]
 2337 01d6 002B     		cmp	r3, #0
 2338 01d8 03D0     		beq	.L171
 754:.\main.c      ****             {
 755:.\main.c      ****                 elbow_state = elbw_execute;
 2339              		.loc 1 755 0
 2340 01da 054B     		ldr	r3, .L174
 2341 01dc 0222     		mov	r2, #2
 2342 01de 1A70     		strb	r2, [r3]
 2343 01e0 02E0     		b	.L172
 2344              	.L171:
 756:.\main.c      ****             }
 757:.\main.c      ****             else
 758:.\main.c      ****             {
 759:.\main.c      ****                 elbow_state = elbw_wait; 
 2345              		.loc 1 759 0
 2346 01e2 034B     		ldr	r3, .L174
 2347 01e4 0322     		mov	r2, #3
 2348 01e6 1A70     		strb	r2, [r3]
 2349              	.L172:
 760:.\main.c      ****             }
 761:.\main.c      ****             break;
 2350              		.loc 1 761 0
 2351 01e8 C046     		mov	r8, r8
 2352              	.L140:
 762:.\main.c      ****     }    
 763:.\main.c      **** }
 2353              		.loc 1 763 0
 2354 01ea BD46     		mov	sp, r7
 2355 01ec 03B0     		add	sp, sp, #12
 2356              		@ sp needed
 2357 01ee 90BD     		pop	{r4, r7, pc}
 2358              	.L175:
 2359              		.align	2
 2360              	.L174:
 2361 01f0 00000000 		.word	elbow_state
 2362 01f4 00000000 		.word	elbow_array
 2363 01f8 DC050000 		.word	1500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 57


 2364 01fc 00000000 		.word	elbw_arr_cspot
 2365 0200 00000000 		.word	data_array
 2366 0204 DB050000 		.word	1499
 2367 0208 E7030000 		.word	999
 2368 020c 00000000 		.word	fin_exec
 2369 0210 00000000 		.word	new_pack
 2370              		.cfi_endproc
 2371              	.LFE46:
 2372              		.size	elbow, .-elbow
 2373              		.comm	shoulder_state,1,1
 2374              		.section	.text.shoulder,"ax",%progbits
 2375              		.align	2
 2376              		.global	shoulder
 2377              		.code	16
 2378              		.thumb_func
 2379              		.type	shoulder, %function
 2380              	shoulder:
 2381              	.LFB47:
 764:.\main.c      **** 
 765:.\main.c      **** //control the shoulder
 766:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 767:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 768:.\main.c      **** void shoulder()
 769:.\main.c      **** { 
 2382              		.loc 1 769 0
 2383              		.cfi_startproc
 2384 0000 90B5     		push	{r4, r7, lr}
 2385              		.cfi_def_cfa_offset 12
 2386              		.cfi_offset 4, -12
 2387              		.cfi_offset 7, -8
 2388              		.cfi_offset 14, -4
 2389 0002 83B0     		sub	sp, sp, #12
 2390              		.cfi_def_cfa_offset 24
 2391 0004 00AF     		add	r7, sp, #0
 2392              		.cfi_def_cfa_register 7
 770:.\main.c      ****     //take instruction from data_array
 771:.\main.c      ****     //smooth input
 772:.\main.c      ****     //actuate the shoulder using PWM
 773:.\main.c      ****     //get feedback
 774:.\main.c      ****     uint8 i;
 775:.\main.c      ****     uint16 avg;
 776:.\main.c      ****     uint16 command;
 777:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 2393              		.loc 1 777 0
 2394 0006 3C1D     		add	r4, r7, #4
 2395 0008 0020     		mov	r0, #0
 2396 000a FFF7FEFF 		bl	potFeedback
 2397 000e 031C     		mov	r3, r0
 2398 0010 2380     		strh	r3, [r4]
 778:.\main.c      ****     
 779:.\main.c      ****     switch(shoulder_state){ //actions
 2399              		.loc 1 779 0
 2400 0012 794B     		ldr	r3, .L210
 2401 0014 1B78     		ldrb	r3, [r3]
 2402 0016 012B     		cmp	r3, #1
 2403 0018 07D0     		beq	.L178
 2404 001a 00DC     		bgt	.LCB2231
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 58


 2405 001c BBE0     		b	.L209	@long jump
 2406              	.LCB2231:
 2407 001e 022B     		cmp	r3, #2
 2408 0020 1AD0     		beq	.L181
 2409 0022 032B     		cmp	r3, #3
 2410 0024 00D1     		bne	.LCB2235
 2411 0026 A5E0     		b	.L182	@long jump
 2412              	.LCB2235:
 2413 0028 B6E0     		b	.L177
 2414              	.L178:
 780:.\main.c      ****         case shldr_start:
 781:.\main.c      ****             break;
 782:.\main.c      **** 
 783:.\main.c      ****         case shldr_init:
 784:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2415              		.loc 1 784 0
 2416 002a FB1D     		add	r3, r7, #7
 2417 002c 0022     		mov	r2, #0
 2418 002e 1A70     		strb	r2, [r3]
 2419 0030 0AE0     		b	.L183
 2420              	.L184:
 785:.\main.c      ****             {
 786:.\main.c      ****                 shoulder_array[i] = 1500;
 2421              		.loc 1 786 0 discriminator 2
 2422 0032 FB1D     		add	r3, r7, #7
 2423 0034 1A78     		ldrb	r2, [r3]
 2424 0036 714B     		ldr	r3, .L210+4
 2425 0038 5200     		lsl	r2, r2, #1
 2426 003a 7149     		ldr	r1, .L210+8
 2427 003c D152     		strh	r1, [r2, r3]
 784:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2428              		.loc 1 784 0 discriminator 2
 2429 003e FB1D     		add	r3, r7, #7
 2430 0040 1A78     		ldrb	r2, [r3]
 2431 0042 FB1D     		add	r3, r7, #7
 2432 0044 0132     		add	r2, r2, #1
 2433 0046 1A70     		strb	r2, [r3]
 2434              	.L183:
 784:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2435              		.loc 1 784 0 is_stmt 0 discriminator 1
 2436 0048 FB1D     		add	r3, r7, #7
 2437 004a 1B78     		ldrb	r3, [r3]
 2438 004c 132B     		cmp	r3, #19
 2439 004e F0D9     		bls	.L184
 787:.\main.c      ****             }
 788:.\main.c      ****             shldr_arr_cspot = 0;
 2440              		.loc 1 788 0 is_stmt 1
 2441 0050 6C4B     		ldr	r3, .L210+12
 2442 0052 0022     		mov	r2, #0
 2443 0054 1A70     		strb	r2, [r3]
 789:.\main.c      ****             break;
 2444              		.loc 1 789 0
 2445 0056 9FE0     		b	.L177
 2446              	.L181:
 790:.\main.c      **** 
 791:.\main.c      ****         case shldr_execute:
 792:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 59


 2447              		.loc 1 792 0
 2448 0058 BC1C     		add	r4, r7, #2
 2449 005a 6B4B     		ldr	r3, .L210+16
 2450 005c 181C     		mov	r0, r3
 2451 005e 0621     		mov	r1, #6
 2452 0060 0722     		mov	r2, #7
 2453 0062 FFF7FEFF 		bl	make_command
 2454 0066 031C     		mov	r3, r0
 2455 0068 2380     		strh	r3, [r4]
 793:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2456              		.loc 1 793 0
 2457 006a 664B     		ldr	r3, .L210+12
 2458 006c 1B78     		ldrb	r3, [r3]
 2459 006e 1A1C     		mov	r2, r3
 2460 0070 624B     		ldr	r3, .L210+4
 2461 0072 5200     		lsl	r2, r2, #1
 2462 0074 B91C     		add	r1, r7, #2
 2463 0076 0988     		ldrh	r1, [r1]
 2464 0078 D152     		strh	r1, [r2, r3]
 794:.\main.c      ****         
 795:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2465              		.loc 1 795 0
 2466 007a 624B     		ldr	r3, .L210+12
 2467 007c 1B78     		ldrb	r3, [r3]
 2468 007e 122B     		cmp	r3, #18
 2469 0080 06D8     		bhi	.L185
 796:.\main.c      ****             {
 797:.\main.c      ****                 shldr_arr_cspot++;
 2470              		.loc 1 797 0
 2471 0082 604B     		ldr	r3, .L210+12
 2472 0084 1B78     		ldrb	r3, [r3]
 2473 0086 0133     		add	r3, r3, #1
 2474 0088 DAB2     		uxtb	r2, r3
 2475 008a 5E4B     		ldr	r3, .L210+12
 2476 008c 1A70     		strb	r2, [r3]
 2477 008e 02E0     		b	.L186
 2478              	.L185:
 798:.\main.c      ****             }
 799:.\main.c      ****             else
 800:.\main.c      ****             {
 801:.\main.c      ****                 shldr_arr_cspot = 0;
 2479              		.loc 1 801 0
 2480 0090 5C4B     		ldr	r3, .L210+12
 2481 0092 0022     		mov	r2, #0
 2482 0094 1A70     		strb	r2, [r3]
 2483              	.L186:
 802:.\main.c      ****             }
 803:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2484              		.loc 1 803 0
 2485 0096 3C1C     		mov	r4, r7
 2486 0098 584B     		ldr	r3, .L210+4
 2487 009a 181C     		mov	r0, r3
 2488 009c 1421     		mov	r1, #20
 2489 009e FFF7FEFF 		bl	average
 2490 00a2 031C     		mov	r3, r0
 2491 00a4 2380     		strh	r3, [r4]
 804:.\main.c      ****            
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 60


 805:.\main.c      ****             //uint16 feedback = potFeedback(SHOULDER_POT); -- see above
 806:.\main.c      ****             
 807:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2492              		.loc 1 807 0
 2493 00a6 3B1D     		add	r3, r7, #4
 2494 00a8 1A88     		ldrh	r2, [r3]
 2495 00aa 8C23     		mov	r3, #140
 2496 00ac 5B00     		lsl	r3, r3, #1
 2497 00ae 9A42     		cmp	r2, r3
 2498 00b0 1FD8     		bhi	.L187
 808:.\main.c      ****             {
 809:.\main.c      ****                 if (avg < 1500)
 2499              		.loc 1 809 0
 2500 00b2 3B1C     		mov	r3, r7
 2501 00b4 1A88     		ldrh	r2, [r3]
 2502 00b6 554B     		ldr	r3, .L210+20
 2503 00b8 9A42     		cmp	r2, r3
 2504 00ba 04D8     		bhi	.L188
 810:.\main.c      ****                 {
 811:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2505              		.loc 1 811 0
 2506 00bc 504B     		ldr	r3, .L210+8
 2507 00be 181C     		mov	r0, r3
 2508 00c0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2509 00c4 4FE0     		b	.L191
 2510              	.L188:
 812:.\main.c      ****                 }
 813:.\main.c      ****                 else
 814:.\main.c      ****                 {
 815:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2511              		.loc 1 815 0
 2512 00c6 3B1C     		mov	r3, r7
 2513 00c8 1A88     		ldrh	r2, [r3]
 2514 00ca FA23     		mov	r3, #250
 2515 00cc DB00     		lsl	r3, r3, #3
 2516 00ce 9A42     		cmp	r2, r3
 2517 00d0 0AD8     		bhi	.L190
 2518              		.loc 1 815 0 is_stmt 0 discriminator 1
 2519 00d2 3B1C     		mov	r3, r7
 2520 00d4 1A88     		ldrh	r2, [r3]
 2521 00d6 4E4B     		ldr	r3, .L210+24
 2522 00d8 9A42     		cmp	r2, r3
 2523 00da 05D9     		bls	.L190
 816:.\main.c      ****                     {
 817:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2524              		.loc 1 817 0 is_stmt 1
 2525 00dc 3B1C     		mov	r3, r7
 2526 00de 1B88     		ldrh	r3, [r3]
 2527 00e0 181C     		mov	r0, r3
 2528 00e2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2529 00e6 3EE0     		b	.L191
 2530              	.L190:
 818:.\main.c      ****                     }
 819:.\main.c      ****                     else
 820:.\main.c      ****                     {
 821:.\main.c      ****                         //throw error
 822:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 61


 2531              		.loc 1 822 0
 2532 00e8 454B     		ldr	r3, .L210+8
 2533 00ea 181C     		mov	r0, r3
 2534 00ec FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2535 00f0 39E0     		b	.L191
 2536              	.L187:
 823:.\main.c      ****                     }
 824:.\main.c      ****                 }
 825:.\main.c      ****             }
 826:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2537              		.loc 1 826 0
 2538 00f2 3B1D     		add	r3, r7, #4
 2539 00f4 1A88     		ldrh	r2, [r3]
 2540 00f6 474B     		ldr	r3, .L210+28
 2541 00f8 9A42     		cmp	r2, r3
 2542 00fa 1FD9     		bls	.L192
 827:.\main.c      ****             {
 828:.\main.c      ****                 if(avg > 1500)
 2543              		.loc 1 828 0
 2544 00fc 3B1C     		mov	r3, r7
 2545 00fe 1A88     		ldrh	r2, [r3]
 2546 0100 3F4B     		ldr	r3, .L210+8
 2547 0102 9A42     		cmp	r2, r3
 2548 0104 04D9     		bls	.L193
 829:.\main.c      ****                 {
 830:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2549              		.loc 1 830 0
 2550 0106 3E4B     		ldr	r3, .L210+8
 2551 0108 181C     		mov	r0, r3
 2552 010a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2553 010e 2AE0     		b	.L191
 2554              	.L193:
 831:.\main.c      ****                 }
 832:.\main.c      ****                 else
 833:.\main.c      ****                 {
 834:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2555              		.loc 1 834 0
 2556 0110 3B1C     		mov	r3, r7
 2557 0112 1A88     		ldrh	r2, [r3]
 2558 0114 FA23     		mov	r3, #250
 2559 0116 DB00     		lsl	r3, r3, #3
 2560 0118 9A42     		cmp	r2, r3
 2561 011a 0AD8     		bhi	.L195
 2562              		.loc 1 834 0 is_stmt 0 discriminator 1
 2563 011c 3B1C     		mov	r3, r7
 2564 011e 1A88     		ldrh	r2, [r3]
 2565 0120 3B4B     		ldr	r3, .L210+24
 2566 0122 9A42     		cmp	r2, r3
 2567 0124 05D9     		bls	.L195
 835:.\main.c      ****                     {
 836:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2568              		.loc 1 836 0 is_stmt 1
 2569 0126 3B1C     		mov	r3, r7
 2570 0128 1B88     		ldrh	r3, [r3]
 2571 012a 181C     		mov	r0, r3
 2572 012c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2573 0130 19E0     		b	.L191
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 62


 2574              	.L195:
 837:.\main.c      ****                     }
 838:.\main.c      ****                     else
 839:.\main.c      ****                     {
 840:.\main.c      ****                         //throw error
 841:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2575              		.loc 1 841 0
 2576 0132 334B     		ldr	r3, .L210+8
 2577 0134 181C     		mov	r0, r3
 2578 0136 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2579 013a 14E0     		b	.L191
 2580              	.L192:
 842:.\main.c      ****                     }
 843:.\main.c      ****                 }
 844:.\main.c      ****             }
 845:.\main.c      ****             else
 846:.\main.c      ****             {
 847:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2581              		.loc 1 847 0
 2582 013c 3B1C     		mov	r3, r7
 2583 013e 1A88     		ldrh	r2, [r3]
 2584 0140 FA23     		mov	r3, #250
 2585 0142 DB00     		lsl	r3, r3, #3
 2586 0144 9A42     		cmp	r2, r3
 2587 0146 0AD8     		bhi	.L196
 2588              		.loc 1 847 0 is_stmt 0 discriminator 1
 2589 0148 3B1C     		mov	r3, r7
 2590 014a 1A88     		ldrh	r2, [r3]
 2591 014c 304B     		ldr	r3, .L210+24
 2592 014e 9A42     		cmp	r2, r3
 2593 0150 05D9     		bls	.L196
 848:.\main.c      ****                 {
 849:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2594              		.loc 1 849 0 is_stmt 1
 2595 0152 3B1C     		mov	r3, r7
 2596 0154 1B88     		ldrh	r3, [r3]
 2597 0156 181C     		mov	r0, r3
 2598 0158 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2599 015c 03E0     		b	.L191
 2600              	.L196:
 850:.\main.c      ****                 }
 851:.\main.c      ****                 else
 852:.\main.c      ****                 {
 853:.\main.c      ****                     //throw error
 854:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2601              		.loc 1 854 0
 2602 015e 284B     		ldr	r3, .L210+8
 2603 0160 181C     		mov	r0, r3
 2604 0162 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2605              	.L191:
 855:.\main.c      ****                 }
 856:.\main.c      ****             }
 857:.\main.c      ****             
 858:.\main.c      ****             fin_exec++;
 2606              		.loc 1 858 0
 2607 0166 2C4B     		ldr	r3, .L210+32
 2608 0168 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 63


 2609 016a 0133     		add	r3, r3, #1
 2610 016c DAB2     		uxtb	r2, r3
 2611 016e 2A4B     		ldr	r3, .L210+32
 2612 0170 1A70     		strb	r2, [r3]
 859:.\main.c      ****             break;
 2613              		.loc 1 859 0
 2614 0172 11E0     		b	.L177
 2615              	.L182:
 860:.\main.c      ****             
 861:.\main.c      ****         case shldr_wait:
 862:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2616              		.loc 1 862 0
 2617 0174 3B1D     		add	r3, r7, #4
 2618 0176 1A88     		ldrh	r2, [r3]
 2619 0178 8C23     		mov	r3, #140
 2620 017a 5B00     		lsl	r3, r3, #1
 2621 017c 9A42     		cmp	r2, r3
 2622 017e 04D9     		bls	.L197
 2623              		.loc 1 862 0 is_stmt 0 discriminator 1
 2624 0180 3B1D     		add	r3, r7, #4
 2625 0182 1A88     		ldrh	r2, [r3]
 2626 0184 234B     		ldr	r3, .L210+28
 2627 0186 9A42     		cmp	r2, r3
 2628 0188 04D9     		bls	.L198
 2629              	.L197:
 863:.\main.c      ****             {
 864:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2630              		.loc 1 864 0 is_stmt 1
 2631 018a 1D4B     		ldr	r3, .L210+8
 2632 018c 181C     		mov	r0, r3
 2633 018e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 865:.\main.c      ****             }
 866:.\main.c      ****             break;
 2634              		.loc 1 866 0
 2635 0192 01E0     		b	.L177
 2636              	.L198:
 2637 0194 00E0     		b	.L177
 2638              	.L209:
 781:.\main.c      ****             break;
 2639              		.loc 1 781 0
 2640 0196 C046     		mov	r8, r8
 2641              	.L177:
 867:.\main.c      ****     }
 868:.\main.c      ****     
 869:.\main.c      ****     switch(shoulder_state){ //transitions
 2642              		.loc 1 869 0
 2643 0198 174B     		ldr	r3, .L210
 2644 019a 1B78     		ldrb	r3, [r3]
 2645 019c 012B     		cmp	r3, #1
 2646 019e 0CD0     		beq	.L200
 2647 01a0 02DC     		bgt	.L201
 2648 01a2 002B     		cmp	r3, #0
 2649 01a4 05D0     		beq	.L202
 2650 01a6 24E0     		b	.L176
 2651              	.L201:
 2652 01a8 022B     		cmp	r3, #2
 2653 01aa 0AD0     		beq	.L203
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 64


 2654 01ac 032B     		cmp	r3, #3
 2655 01ae 14D0     		beq	.L204
 2656 01b0 1FE0     		b	.L176
 2657              	.L202:
 870:.\main.c      ****         case shldr_start:
 871:.\main.c      ****             shoulder_state = shldr_init;
 2658              		.loc 1 871 0
 2659 01b2 114B     		ldr	r3, .L210
 2660 01b4 0122     		mov	r2, #1
 2661 01b6 1A70     		strb	r2, [r3]
 872:.\main.c      ****             break;
 2662              		.loc 1 872 0
 2663 01b8 1BE0     		b	.L176
 2664              	.L200:
 873:.\main.c      ****         
 874:.\main.c      ****         case shldr_init:
 875:.\main.c      ****             shoulder_state = shldr_wait;
 2665              		.loc 1 875 0
 2666 01ba 0F4B     		ldr	r3, .L210
 2667 01bc 0322     		mov	r2, #3
 2668 01be 1A70     		strb	r2, [r3]
 876:.\main.c      ****             break;
 2669              		.loc 1 876 0
 2670 01c0 17E0     		b	.L176
 2671              	.L203:
 877:.\main.c      ****         
 878:.\main.c      ****         case shldr_execute:
 879:.\main.c      ****             if(new_pack)
 2672              		.loc 1 879 0
 2673 01c2 164B     		ldr	r3, .L210+36
 2674 01c4 1B78     		ldrb	r3, [r3]
 2675 01c6 002B     		cmp	r3, #0
 2676 01c8 03D0     		beq	.L205
 880:.\main.c      ****             {
 881:.\main.c      ****                 shoulder_state = shldr_execute;
 2677              		.loc 1 881 0
 2678 01ca 0B4B     		ldr	r3, .L210
 2679 01cc 0222     		mov	r2, #2
 2680 01ce 1A70     		strb	r2, [r3]
 882:.\main.c      ****             }
 883:.\main.c      ****             else
 884:.\main.c      ****             {
 885:.\main.c      ****                 shoulder_state = shldr_wait;
 886:.\main.c      ****             }
 887:.\main.c      ****             break;
 2681              		.loc 1 887 0
 2682 01d0 0FE0     		b	.L176
 2683              	.L205:
 885:.\main.c      ****                 shoulder_state = shldr_wait;
 2684              		.loc 1 885 0
 2685 01d2 094B     		ldr	r3, .L210
 2686 01d4 0322     		mov	r2, #3
 2687 01d6 1A70     		strb	r2, [r3]
 2688              		.loc 1 887 0
 2689 01d8 0BE0     		b	.L176
 2690              	.L204:
 888:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 65


 889:.\main.c      ****         case shldr_wait:
 890:.\main.c      ****             if(new_pack)
 2691              		.loc 1 890 0
 2692 01da 104B     		ldr	r3, .L210+36
 2693 01dc 1B78     		ldrb	r3, [r3]
 2694 01de 002B     		cmp	r3, #0
 2695 01e0 03D0     		beq	.L207
 891:.\main.c      ****             {
 892:.\main.c      ****                 shoulder_state = shldr_execute;
 2696              		.loc 1 892 0
 2697 01e2 054B     		ldr	r3, .L210
 2698 01e4 0222     		mov	r2, #2
 2699 01e6 1A70     		strb	r2, [r3]
 2700 01e8 02E0     		b	.L208
 2701              	.L207:
 893:.\main.c      ****             }
 894:.\main.c      ****             else
 895:.\main.c      ****             {
 896:.\main.c      ****                 shoulder_state = shldr_wait; 
 2702              		.loc 1 896 0
 2703 01ea 034B     		ldr	r3, .L210
 2704 01ec 0322     		mov	r2, #3
 2705 01ee 1A70     		strb	r2, [r3]
 2706              	.L208:
 897:.\main.c      ****             }
 898:.\main.c      ****             break;
 2707              		.loc 1 898 0
 2708 01f0 C046     		mov	r8, r8
 2709              	.L176:
 899:.\main.c      ****     }    
 900:.\main.c      **** }
 2710              		.loc 1 900 0
 2711 01f2 BD46     		mov	sp, r7
 2712 01f4 03B0     		add	sp, sp, #12
 2713              		@ sp needed
 2714 01f6 90BD     		pop	{r4, r7, pc}
 2715              	.L211:
 2716              		.align	2
 2717              	.L210:
 2718 01f8 00000000 		.word	shoulder_state
 2719 01fc 00000000 		.word	shoulder_array
 2720 0200 DC050000 		.word	1500
 2721 0204 00000000 		.word	shldr_arr_cspot
 2722 0208 00000000 		.word	data_array
 2723 020c DB050000 		.word	1499
 2724 0210 E7030000 		.word	999
 2725 0214 1F030000 		.word	799
 2726 0218 00000000 		.word	fin_exec
 2727 021c 00000000 		.word	new_pack
 2728              		.cfi_endproc
 2729              	.LFE47:
 2730              		.size	shoulder, .-shoulder
 2731              		.comm	baseAzimuth_state,1,1
 2732              		.section	.text.baseAzimuth,"ax",%progbits
 2733              		.align	2
 2734              		.global	baseAzimuth
 2735              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 66


 2736              		.thumb_func
 2737              		.type	baseAzimuth, %function
 2738              	baseAzimuth:
 2739              	.LFB48:
 901:.\main.c      **** 
 902:.\main.c      **** //control the turret
 903:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 904:.\main.c      **** void baseAzimuth()
 905:.\main.c      **** { 
 2740              		.loc 1 905 0
 2741              		.cfi_startproc
 2742 0000 90B5     		push	{r4, r7, lr}
 2743              		.cfi_def_cfa_offset 12
 2744              		.cfi_offset 4, -12
 2745              		.cfi_offset 7, -8
 2746              		.cfi_offset 14, -4
 2747 0002 83B0     		sub	sp, sp, #12
 2748              		.cfi_def_cfa_offset 24
 2749 0004 00AF     		add	r7, sp, #0
 2750              		.cfi_def_cfa_register 7
 906:.\main.c      ****     //take instruction from data_array
 907:.\main.c      ****     //smooth input
 908:.\main.c      ****     //actuate the turret using PWM
 909:.\main.c      ****     uint8 i;
 910:.\main.c      ****     uint16 avg;
 911:.\main.c      ****     uint16 command;
 912:.\main.c      ****     
 913:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2751              		.loc 1 913 0
 2752 0006 4B4B     		ldr	r3, .L236
 2753 0008 1B78     		ldrb	r3, [r3]
 2754 000a 012B     		cmp	r3, #1
 2755 000c 03D0     		beq	.L214
 2756 000e 60DD     		ble	.L235
 2757 0010 022B     		cmp	r3, #2
 2758 0012 1BD0     		beq	.L217
 914:.\main.c      ****         case BA_start:
 915:.\main.c      ****             break;
 916:.\main.c      **** 
 917:.\main.c      ****         case BA_init:
 918:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 919:.\main.c      ****             {
 920:.\main.c      ****                 baseAz_array[i] = 1500;
 921:.\main.c      ****             }
 922:.\main.c      ****             BA_arr_cspot = 0;
 923:.\main.c      ****             BA_PWM_WriteCompare(1500);
 924:.\main.c      ****             break;
 925:.\main.c      **** 
 926:.\main.c      ****         case BA_execute:
 927:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 928:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 929:.\main.c      ****             
 930:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 931:.\main.c      ****             {
 932:.\main.c      ****                 BA_arr_cspot++;
 933:.\main.c      ****             }
 934:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 67


 935:.\main.c      ****             {
 936:.\main.c      ****                 BA_arr_cspot = 0;
 937:.\main.c      ****             }
 938:.\main.c      ****             
 939:.\main.c      ****             //pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 940:.\main.c      ****             
 941:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 942:.\main.c      ****             
 943:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 944:.\main.c      ****             {
 945:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 946:.\main.c      ****             }
 947:.\main.c      ****             else
 948:.\main.c      ****             {
 949:.\main.c      ****                 //throw error
 950:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 951:.\main.c      ****             }
 952:.\main.c      ****             fin_exec++;
 953:.\main.c      ****             break;
 954:.\main.c      ****             
 955:.\main.c      ****         case BA_wait:
 956:.\main.c      ****             break;
 2759              		.loc 1 956 0
 2760 0014 5EE0     		b	.L213
 2761              	.L214:
 918:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2762              		.loc 1 918 0
 2763 0016 FB1D     		add	r3, r7, #7
 2764 0018 0022     		mov	r2, #0
 2765 001a 1A70     		strb	r2, [r3]
 2766 001c 0AE0     		b	.L219
 2767              	.L220:
 920:.\main.c      ****                 baseAz_array[i] = 1500;
 2768              		.loc 1 920 0 discriminator 2
 2769 001e FB1D     		add	r3, r7, #7
 2770 0020 1A78     		ldrb	r2, [r3]
 2771 0022 454B     		ldr	r3, .L236+4
 2772 0024 5200     		lsl	r2, r2, #1
 2773 0026 4549     		ldr	r1, .L236+8
 2774 0028 D152     		strh	r1, [r2, r3]
 918:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2775              		.loc 1 918 0 discriminator 2
 2776 002a FB1D     		add	r3, r7, #7
 2777 002c 1A78     		ldrb	r2, [r3]
 2778 002e FB1D     		add	r3, r7, #7
 2779 0030 0132     		add	r2, r2, #1
 2780 0032 1A70     		strb	r2, [r3]
 2781              	.L219:
 918:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2782              		.loc 1 918 0 is_stmt 0 discriminator 1
 2783 0034 FB1D     		add	r3, r7, #7
 2784 0036 1B78     		ldrb	r3, [r3]
 2785 0038 132B     		cmp	r3, #19
 2786 003a F0D9     		bls	.L220
 922:.\main.c      ****             BA_arr_cspot = 0;
 2787              		.loc 1 922 0 is_stmt 1
 2788 003c 404B     		ldr	r3, .L236+12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 68


 2789 003e 0022     		mov	r2, #0
 2790 0040 1A70     		strb	r2, [r3]
 923:.\main.c      ****             BA_PWM_WriteCompare(1500);
 2791              		.loc 1 923 0
 2792 0042 3E4B     		ldr	r3, .L236+8
 2793 0044 181C     		mov	r0, r3
 2794 0046 FFF7FEFF 		bl	BA_PWM_WriteCompare
 924:.\main.c      ****             break;
 2795              		.loc 1 924 0
 2796 004a 43E0     		b	.L213
 2797              	.L217:
 927:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2798              		.loc 1 927 0
 2799 004c 3C1D     		add	r4, r7, #4
 2800 004e 3D4B     		ldr	r3, .L236+16
 2801 0050 181C     		mov	r0, r3
 2802 0052 0821     		mov	r1, #8
 2803 0054 0922     		mov	r2, #9
 2804 0056 FFF7FEFF 		bl	make_command
 2805 005a 031C     		mov	r3, r0
 2806 005c 2380     		strh	r3, [r4]
 928:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 2807              		.loc 1 928 0
 2808 005e 384B     		ldr	r3, .L236+12
 2809 0060 1B78     		ldrb	r3, [r3]
 2810 0062 1A1C     		mov	r2, r3
 2811 0064 344B     		ldr	r3, .L236+4
 2812 0066 5200     		lsl	r2, r2, #1
 2813 0068 391D     		add	r1, r7, #4
 2814 006a 0988     		ldrh	r1, [r1]
 2815 006c D152     		strh	r1, [r2, r3]
 930:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 2816              		.loc 1 930 0
 2817 006e 344B     		ldr	r3, .L236+12
 2818 0070 1B78     		ldrb	r3, [r3]
 2819 0072 122B     		cmp	r3, #18
 2820 0074 06D8     		bhi	.L221
 932:.\main.c      ****                 BA_arr_cspot++;
 2821              		.loc 1 932 0
 2822 0076 324B     		ldr	r3, .L236+12
 2823 0078 1B78     		ldrb	r3, [r3]
 2824 007a 0133     		add	r3, r3, #1
 2825 007c DAB2     		uxtb	r2, r3
 2826 007e 304B     		ldr	r3, .L236+12
 2827 0080 1A70     		strb	r2, [r3]
 2828 0082 02E0     		b	.L222
 2829              	.L221:
 936:.\main.c      ****                 BA_arr_cspot = 0;
 2830              		.loc 1 936 0
 2831 0084 2E4B     		ldr	r3, .L236+12
 2832 0086 0022     		mov	r2, #0
 2833 0088 1A70     		strb	r2, [r3]
 2834              	.L222:
 941:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2835              		.loc 1 941 0
 2836 008a BC1C     		add	r4, r7, #2
 2837 008c 2A4B     		ldr	r3, .L236+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 69


 2838 008e 181C     		mov	r0, r3
 2839 0090 1421     		mov	r1, #20
 2840 0092 FFF7FEFF 		bl	average
 2841 0096 031C     		mov	r3, r0
 2842 0098 2380     		strh	r3, [r4]
 943:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2843              		.loc 1 943 0
 2844 009a BB1C     		add	r3, r7, #2
 2845 009c 1A88     		ldrh	r2, [r3]
 2846 009e FA23     		mov	r3, #250
 2847 00a0 DB00     		lsl	r3, r3, #3
 2848 00a2 9A42     		cmp	r2, r3
 2849 00a4 0AD8     		bhi	.L223
 943:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2850              		.loc 1 943 0 is_stmt 0 discriminator 1
 2851 00a6 BB1C     		add	r3, r7, #2
 2852 00a8 1A88     		ldrh	r2, [r3]
 2853 00aa 274B     		ldr	r3, .L236+20
 2854 00ac 9A42     		cmp	r2, r3
 2855 00ae 05D9     		bls	.L223
 945:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2856              		.loc 1 945 0 is_stmt 1
 2857 00b0 BB1C     		add	r3, r7, #2
 2858 00b2 1B88     		ldrh	r3, [r3]
 2859 00b4 181C     		mov	r0, r3
 2860 00b6 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2861 00ba 03E0     		b	.L224
 2862              	.L223:
 950:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2863              		.loc 1 950 0
 2864 00bc 1F4B     		ldr	r3, .L236+8
 2865 00be 181C     		mov	r0, r3
 2866 00c0 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2867              	.L224:
 952:.\main.c      ****             fin_exec++;
 2868              		.loc 1 952 0
 2869 00c4 214B     		ldr	r3, .L236+24
 2870 00c6 1B78     		ldrb	r3, [r3]
 2871 00c8 0133     		add	r3, r3, #1
 2872 00ca DAB2     		uxtb	r2, r3
 2873 00cc 1F4B     		ldr	r3, .L236+24
 2874 00ce 1A70     		strb	r2, [r3]
 953:.\main.c      ****             break;
 2875              		.loc 1 953 0
 2876 00d0 00E0     		b	.L213
 2877              	.L235:
 915:.\main.c      ****             break;
 2878              		.loc 1 915 0
 2879 00d2 C046     		mov	r8, r8
 2880              	.L213:
 957:.\main.c      ****     }
 958:.\main.c      ****     
 959:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2881              		.loc 1 959 0
 2882 00d4 174B     		ldr	r3, .L236
 2883 00d6 1B78     		ldrb	r3, [r3]
 2884 00d8 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 70


 2885 00da 0CD0     		beq	.L226
 2886 00dc 02DC     		bgt	.L227
 2887 00de 002B     		cmp	r3, #0
 2888 00e0 05D0     		beq	.L228
 2889 00e2 24E0     		b	.L212
 2890              	.L227:
 2891 00e4 022B     		cmp	r3, #2
 2892 00e6 0AD0     		beq	.L229
 2893 00e8 032B     		cmp	r3, #3
 2894 00ea 14D0     		beq	.L230
 2895 00ec 1FE0     		b	.L212
 2896              	.L228:
 960:.\main.c      ****         case BA_start:
 961:.\main.c      ****             baseAzimuth_state = BA_init;
 2897              		.loc 1 961 0
 2898 00ee 114B     		ldr	r3, .L236
 2899 00f0 0122     		mov	r2, #1
 2900 00f2 1A70     		strb	r2, [r3]
 962:.\main.c      ****             break;
 2901              		.loc 1 962 0
 2902 00f4 1BE0     		b	.L212
 2903              	.L226:
 963:.\main.c      ****         
 964:.\main.c      ****         case BA_init:
 965:.\main.c      ****             baseAzimuth_state = BA_wait;
 2904              		.loc 1 965 0
 2905 00f6 0F4B     		ldr	r3, .L236
 2906 00f8 0322     		mov	r2, #3
 2907 00fa 1A70     		strb	r2, [r3]
 966:.\main.c      ****             break;
 2908              		.loc 1 966 0
 2909 00fc 17E0     		b	.L212
 2910              	.L229:
 967:.\main.c      ****         
 968:.\main.c      ****         case BA_execute:
 969:.\main.c      ****             if(new_pack)
 2911              		.loc 1 969 0
 2912 00fe 144B     		ldr	r3, .L236+28
 2913 0100 1B78     		ldrb	r3, [r3]
 2914 0102 002B     		cmp	r3, #0
 2915 0104 03D0     		beq	.L231
 970:.\main.c      ****             {
 971:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2916              		.loc 1 971 0
 2917 0106 0B4B     		ldr	r3, .L236
 2918 0108 0222     		mov	r2, #2
 2919 010a 1A70     		strb	r2, [r3]
 972:.\main.c      ****             }
 973:.\main.c      ****             else
 974:.\main.c      ****             {
 975:.\main.c      ****                 baseAzimuth_state = BA_wait;
 976:.\main.c      ****             }
 977:.\main.c      ****             break;
 2920              		.loc 1 977 0
 2921 010c 0FE0     		b	.L212
 2922              	.L231:
 975:.\main.c      ****                 baseAzimuth_state = BA_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 71


 2923              		.loc 1 975 0
 2924 010e 094B     		ldr	r3, .L236
 2925 0110 0322     		mov	r2, #3
 2926 0112 1A70     		strb	r2, [r3]
 2927              		.loc 1 977 0
 2928 0114 0BE0     		b	.L212
 2929              	.L230:
 978:.\main.c      ****         
 979:.\main.c      ****         case BA_wait:
 980:.\main.c      ****             if(new_pack)
 2930              		.loc 1 980 0
 2931 0116 0E4B     		ldr	r3, .L236+28
 2932 0118 1B78     		ldrb	r3, [r3]
 2933 011a 002B     		cmp	r3, #0
 2934 011c 03D0     		beq	.L233
 981:.\main.c      ****             {
 982:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2935              		.loc 1 982 0
 2936 011e 054B     		ldr	r3, .L236
 2937 0120 0222     		mov	r2, #2
 2938 0122 1A70     		strb	r2, [r3]
 2939 0124 02E0     		b	.L234
 2940              	.L233:
 983:.\main.c      ****             }
 984:.\main.c      ****             else
 985:.\main.c      ****             {
 986:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2941              		.loc 1 986 0
 2942 0126 034B     		ldr	r3, .L236
 2943 0128 0322     		mov	r2, #3
 2944 012a 1A70     		strb	r2, [r3]
 2945              	.L234:
 987:.\main.c      ****             }
 988:.\main.c      ****             break;
 2946              		.loc 1 988 0
 2947 012c C046     		mov	r8, r8
 2948              	.L212:
 989:.\main.c      ****     }    
 990:.\main.c      **** }
 2949              		.loc 1 990 0
 2950 012e BD46     		mov	sp, r7
 2951 0130 03B0     		add	sp, sp, #12
 2952              		@ sp needed
 2953 0132 90BD     		pop	{r4, r7, pc}
 2954              	.L237:
 2955              		.align	2
 2956              	.L236:
 2957 0134 00000000 		.word	baseAzimuth_state
 2958 0138 00000000 		.word	baseAz_array
 2959 013c DC050000 		.word	1500
 2960 0140 00000000 		.word	BA_arr_cspot
 2961 0144 00000000 		.word	data_array
 2962 0148 E7030000 		.word	999
 2963 014c 00000000 		.word	fin_exec
 2964 0150 00000000 		.word	new_pack
 2965              		.cfi_endproc
 2966              	.LFE48:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 72


 2967              		.size	baseAzimuth, .-baseAzimuth
 2968              		.section	.text.initialize,"ax",%progbits
 2969              		.align	2
 2970              		.global	initialize
 2971              		.code	16
 2972              		.thumb_func
 2973              		.type	initialize, %function
 2974              	initialize:
 2975              	.LFB49:
 991:.\main.c      **** 
 992:.\main.c      **** //Initialization function for the program
 993:.\main.c      **** void initialize()
 994:.\main.c      **** {
 2976              		.loc 1 994 0
 2977              		.cfi_startproc
 2978 0000 80B5     		push	{r7, lr}
 2979              		.cfi_def_cfa_offset 8
 2980              		.cfi_offset 7, -8
 2981              		.cfi_offset 14, -4
 2982 0002 82B0     		sub	sp, sp, #8
 2983              		.cfi_def_cfa_offset 16
 2984 0004 00AF     		add	r7, sp, #0
 2985              		.cfi_def_cfa_register 7
 995:.\main.c      ****     WIZ_RST_Write(0);
 2986              		.loc 1 995 0
 2987 0006 0020     		mov	r0, #0
 2988 0008 FFF7FEFF 		bl	WIZ_RST_Write
 996:.\main.c      ****     CyDelay(10);
 2989              		.loc 1 996 0
 2990 000c 0A20     		mov	r0, #10
 2991 000e FFF7FEFF 		bl	CyDelay
 997:.\main.c      ****     WIZ_RST_Write(1);
 2992              		.loc 1 997 0
 2993 0012 0120     		mov	r0, #1
 2994 0014 FFF7FEFF 		bl	WIZ_RST_Write
 998:.\main.c      ****     WIZ_SS_Write(1);
 2995              		.loc 1 998 0
 2996 0018 0120     		mov	r0, #1
 2997 001a FFF7FEFF 		bl	WIZ_SS_Write
 2998              	.LBB2:
 999:.\main.c      ****     for(uint8 j=0; j<100; j++)
 2999              		.loc 1 999 0
 3000 001e FB1D     		add	r3, r7, #7
 3001 0020 0022     		mov	r2, #0
 3002 0022 1A70     		strb	r2, [r3]
 3003 0024 0DE0     		b	.L239
 3004              	.L242:
1000:.\main.c      ****     {
1001:.\main.c      ****         if(WIZ_RDY_Read())
 3005              		.loc 1 1001 0
 3006 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3007 002a 031C     		mov	r3, r0
 3008 002c 002B     		cmp	r3, #0
 3009 002e 00D0     		beq	.L240
1002:.\main.c      ****         {
1003:.\main.c      ****             break;
 3010              		.loc 1 1003 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 73


 3011 0030 0BE0     		b	.L241
 3012              	.L240:
1004:.\main.c      ****         }
1005:.\main.c      ****         else
1006:.\main.c      ****         {
1007:.\main.c      ****             CyDelay(4);
 3013              		.loc 1 1007 0
 3014 0032 0420     		mov	r0, #4
 3015 0034 FFF7FEFF 		bl	CyDelay
 999:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3016              		.loc 1 999 0
 3017 0038 FB1D     		add	r3, r7, #7
 3018 003a 1A78     		ldrb	r2, [r3]
 3019 003c FB1D     		add	r3, r7, #7
 3020 003e 0132     		add	r2, r2, #1
 3021 0040 1A70     		strb	r2, [r3]
 3022              	.L239:
 999:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3023              		.loc 1 999 0 is_stmt 0 discriminator 1
 3024 0042 FB1D     		add	r3, r7, #7
 3025 0044 1B78     		ldrb	r3, [r3]
 3026 0046 632B     		cmp	r3, #99
 3027 0048 EDD9     		bls	.L242
 3028              	.L241:
 3029              	.LBE2:
1008:.\main.c      ****         }
1009:.\main.c      ****     }
1010:.\main.c      ****     //Initialize state variables
1011:.\main.c      ****     baseAzimuth_state = BA_start;
 3030              		.loc 1 1011 0 is_stmt 1
 3031 004a 234B     		ldr	r3, .L243
 3032 004c 0022     		mov	r2, #0
 3033 004e 1A70     		strb	r2, [r3]
1012:.\main.c      ****     wristTilt_state = tilt_start;
 3034              		.loc 1 1012 0
 3035 0050 224B     		ldr	r3, .L243+4
 3036 0052 0022     		mov	r2, #0
 3037 0054 1A70     		strb	r2, [r3]
1013:.\main.c      ****     wristRotate_state = rotate_start;
 3038              		.loc 1 1013 0
 3039 0056 224B     		ldr	r3, .L243+8
 3040 0058 0022     		mov	r2, #0
 3041 005a 1A70     		strb	r2, [r3]
1014:.\main.c      ****     shoulder_state = shldr_start;
 3042              		.loc 1 1014 0
 3043 005c 214B     		ldr	r3, .L243+12
 3044 005e 0022     		mov	r2, #0
 3045 0060 1A70     		strb	r2, [r3]
1015:.\main.c      ****     elbow_state = elbw_start;
 3046              		.loc 1 1015 0
 3047 0062 214B     		ldr	r3, .L243+16
 3048 0064 0022     		mov	r2, #0
 3049 0066 1A70     		strb	r2, [r3]
1016:.\main.c      ****     
1017:.\main.c      ****     //start all of our components
1018:.\main.c      ****     //SPI_1_Start();
1019:.\main.c      ****     SPIM_1_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 74


 3050              		.loc 1 1019 0
 3051 0068 FFF7FEFF 		bl	SPIM_1_Start
1020:.\main.c      ****     
1021:.\main.c      ****     Clock_pwm_Start();
 3052              		.loc 1 1021 0
 3053 006c FFF7FEFF 		bl	Clock_pwm_Start
1022:.\main.c      ****     Clock_counter_Start();
 3054              		.loc 1 1022 0
 3055 0070 FFF7FEFF 		bl	Clock_counter_Start
1023:.\main.c      ****     UART_1_Start();
 3056              		.loc 1 1023 0
 3057 0074 FFF7FEFF 		bl	UART_1_Start
1024:.\main.c      ****     SHLDR_PWM_Start();
 3058              		.loc 1 1024 0
 3059 0078 FFF7FEFF 		bl	SHLDR_PWM_Start
1025:.\main.c      ****     BA_PWM_Start();
 3060              		.loc 1 1025 0
 3061 007c FFF7FEFF 		bl	BA_PWM_Start
1026:.\main.c      ****     ELBW_PWM_Start();
 3062              		.loc 1 1026 0
 3063 0080 FFF7FEFF 		bl	ELBW_PWM_Start
1027:.\main.c      ****     
1028:.\main.c      ****     //uint8_t test_byte;
1029:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3064              		.loc 1 1029 0
 3065 0084 194B     		ldr	r3, .L243+20
 3066 0086 0420     		mov	r0, #4
 3067 0088 0121     		mov	r1, #1
 3068 008a 1A1C     		mov	r2, r3
 3069 008c FFF7FEFF 		bl	wiznetInit
1030:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1031:.\main.c      ****     
1032:.\main.c      ****     //Initialize the dynamixels
1033:.\main.c      ****     ServoSpeed(0xFE, 100);
 3070              		.loc 1 1033 0
 3071 0090 FE20     		mov	r0, #254
 3072 0092 6421     		mov	r1, #100
 3073 0094 FFF7FEFF 		bl	ServoSpeed
1034:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3074              		.loc 1 1034 0
 3075 0098 154B     		ldr	r3, .L243+24
 3076 009a FE20     		mov	r0, #254
 3077 009c 191C     		mov	r1, r3
 3078 009e FFF7FEFF 		bl	SetServoTorque
1035:.\main.c      ****     
1036:.\main.c      ****     //Initialize our motor drivers
1037:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3079              		.loc 1 1037 0
 3080 00a2 144B     		ldr	r3, .L243+28
 3081 00a4 181C     		mov	r0, r3
 3082 00a6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1038:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3083              		.loc 1 1038 0
 3084 00aa 124B     		ldr	r3, .L243+28
 3085 00ac 181C     		mov	r0, r3
 3086 00ae FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1039:.\main.c      ****     CyDelay(3000);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 75


 3087              		.loc 1 1039 0
 3088 00b2 114B     		ldr	r3, .L243+32
 3089 00b4 181C     		mov	r0, r3
 3090 00b6 FFF7FEFF 		bl	CyDelay
1040:.\main.c      ****    
1041:.\main.c      ****     ADC_Start();
 3091              		.loc 1 1041 0
 3092 00ba FFF7FEFF 		bl	ADC_Start
1042:.\main.c      ****     ADC_StartConvert();
 3093              		.loc 1 1042 0
 3094 00be FFF7FEFF 		bl	ADC_StartConvert
1043:.\main.c      ****     
1044:.\main.c      ****     //helps for generating random arrays
1045:.\main.c      ****     //srand((unsigned) time(&t));
1046:.\main.c      ****     
1047:.\main.c      ****     CyGlobalIntEnable;
 3095              		.loc 1 1047 0
 3096              	@ 1047 ".\main.c" 1
 3097 00c2 62B6     		CPSIE   i
 3098              	@ 0 "" 2
1048:.\main.c      ****     isr_1_StartEx(timer_isr);
 3099              		.loc 1 1048 0
 3100              		.code	16
 3101 00c4 0D4B     		ldr	r3, .L243+36
 3102 00c6 181C     		mov	r0, r3
 3103 00c8 FFF7FEFF 		bl	isr_1_StartEx
1049:.\main.c      ****     Timer_1_Start();
 3104              		.loc 1 1049 0
 3105 00cc FFF7FEFF 		bl	Timer_1_Start
1050:.\main.c      **** }
 3106              		.loc 1 1050 0
 3107 00d0 BD46     		mov	sp, r7
 3108 00d2 02B0     		add	sp, sp, #8
 3109              		@ sp needed
 3110 00d4 80BD     		pop	{r7, pc}
 3111              	.L244:
 3112 00d6 C046     		.align	2
 3113              	.L243:
 3114 00d8 00000000 		.word	baseAzimuth_state
 3115 00dc 00000000 		.word	wristTilt_state
 3116 00e0 00000000 		.word	wristRotate_state
 3117 00e4 00000000 		.word	shoulder_state
 3118 00e8 00000000 		.word	elbow_state
 3119 00ec 87690000 		.word	27015
 3120 00f0 FF030000 		.word	1023
 3121 00f4 DC050000 		.word	1500
 3122 00f8 B80B0000 		.word	3000
 3123 00fc 00000000 		.word	timer_isr
 3124              		.cfi_endproc
 3125              	.LFE49:
 3126              		.size	initialize, .-initialize
 3127              		.section	.text.main,"ax",%progbits
 3128              		.align	2
 3129              		.global	main
 3130              		.code	16
 3131              		.thumb_func
 3132              		.type	main, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 76


 3133              	main:
 3134              	.LFB50:
1051:.\main.c      **** 
1052:.\main.c      **** int main()
1053:.\main.c      **** {  
 3135              		.loc 1 1053 0
 3136              		.cfi_startproc
 3137 0000 80B5     		push	{r7, lr}
 3138              		.cfi_def_cfa_offset 8
 3139              		.cfi_offset 7, -8
 3140              		.cfi_offset 14, -4
 3141 0002 84B0     		sub	sp, sp, #16
 3142              		.cfi_def_cfa_offset 24
 3143 0004 00AF     		add	r7, sp, #0
 3144              		.cfi_def_cfa_register 7
1054:.\main.c      ****     //Define variables
1055:.\main.c      ****     time_t t; //for testing
1056:.\main.c      ****     uint8 counter; //for testing
1057:.\main.c      ****     int direction = 0; //for testing
 3145              		.loc 1 1057 0
 3146 0006 0023     		mov	r3, #0
 3147 0008 FB60     		str	r3, [r7, #12]
1058:.\main.c      ****     int16 temp_val= -1000; //for testing
 3148              		.loc 1 1058 0
 3149 000a 3B1C     		mov	r3, r7
 3150 000c 0A33     		add	r3, r3, #10
 3151 000e 184A     		ldr	r2, .L251
 3152 0010 1A80     		strh	r2, [r3]
1059:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1060:.\main.c      ****     
1061:.\main.c      ****     //for testing
1062:.\main.c      ****     int increasing = 1;
 3153              		.loc 1 1062 0
 3154 0012 0123     		mov	r3, #1
 3155 0014 7B60     		str	r3, [r7, #4]
1063:.\main.c      ****     
1064:.\main.c      ****     initialize();
 3156              		.loc 1 1064 0
 3157 0016 FFF7FEFF 		bl	initialize
 3158              	.L249:
1065:.\main.c      **** 
1066:.\main.c      ****     for(;;)
1067:.\main.c      ****     {
1068:.\main.c      ****         //check addresses
1069:.\main.c      ****         //TODO get the address bytes from Steve
1070:.\main.c      ****         //TODO at what point should we send feedback?
1071:.\main.c      ****         
1072:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 3159              		.loc 1 1072 0
 3160 001a FFF7FEFF 		bl	WIZ_INT_Read
 3161 001e 031C     		mov	r3, r0
 3162 0020 002B     		cmp	r3, #0
 3163 0022 09D1     		bne	.L246
1073:.\main.c      ****         {
1074:.\main.c      ****             wiznetClearInterrupts();
 3164              		.loc 1 1074 0
 3165 0024 FFF7FEFF 		bl	wiznetClearInterrupts
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 77


1075:.\main.c      ****             fill_data_array();
 3166              		.loc 1 1075 0
 3167 0028 FFF7FEFF 		bl	fill_data_array
1076:.\main.c      ****             new_pack = 1;
 3168              		.loc 1 1076 0
 3169 002c 114B     		ldr	r3, .L251+4
 3170 002e 0122     		mov	r2, #1
 3171 0030 1A70     		strb	r2, [r3]
1077:.\main.c      ****             fin_exec = 0;
 3172              		.loc 1 1077 0
 3173 0032 114B     		ldr	r3, .L251+8
 3174 0034 0022     		mov	r2, #0
 3175 0036 1A70     		strb	r2, [r3]
 3176              	.L246:
1078:.\main.c      ****             //wiznet = 0; //for testing
1079:.\main.c      ****         }
1080:.\main.c      ****         
1081:.\main.c      ****         baseAzimuth();
 3177              		.loc 1 1081 0
 3178 0038 FFF7FEFF 		bl	baseAzimuth
1082:.\main.c      ****         shoulder();
 3179              		.loc 1 1082 0
 3180 003c FFF7FEFF 		bl	shoulder
1083:.\main.c      ****         elbow();
 3181              		.loc 1 1083 0
 3182 0040 FFF7FEFF 		bl	elbow
1084:.\main.c      ****         wristTilt();
 3183              		.loc 1 1084 0
 3184 0044 FFF7FEFF 		bl	wristTilt
1085:.\main.c      ****         wristRotate();
 3185              		.loc 1 1085 0
 3186 0048 FFF7FEFF 		bl	wristRotate
1086:.\main.c      **** 
1087:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 3187              		.loc 1 1087 0
 3188 004c 0A4B     		ldr	r3, .L251+8
 3189 004e 1B78     		ldrb	r3, [r3]
 3190 0050 052B     		cmp	r3, #5
 3191 0052 03D1     		bne	.L247
1088:.\main.c      ****         {
1089:.\main.c      ****             new_pack = 0;
 3192              		.loc 1 1089 0
 3193 0054 074B     		ldr	r3, .L251+4
 3194 0056 0022     		mov	r2, #0
 3195 0058 1A70     		strb	r2, [r3]
1090:.\main.c      ****         }
1091:.\main.c      ****         
1092:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3196              		.loc 1 1092 0
 3197 005a FFE7     		b	.L250
 3198              	.L247:
 3199              	.L250:
 3200 005c C046     		mov	r8, r8
 3201              	.L248:
 3202              		.loc 1 1092 0 is_stmt 0 discriminator 1
 3203 005e 074B     		ldr	r3, .L251+12
 3204 0060 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 78


 3205 0062 DBB2     		uxtb	r3, r3
 3206 0064 002B     		cmp	r3, #0
 3207 0066 FAD0     		beq	.L248
1093:.\main.c      ****         timerFlag = 0;
 3208              		.loc 1 1093 0 is_stmt 1
 3209 0068 044B     		ldr	r3, .L251+12
 3210 006a 0022     		mov	r2, #0
 3211 006c 1A70     		strb	r2, [r3]
1094:.\main.c      ****     }
 3212              		.loc 1 1094 0
 3213 006e D4E7     		b	.L249
 3214              	.L252:
 3215              		.align	2
 3216              	.L251:
 3217 0070 18FCFFFF 		.word	-1000
 3218 0074 00000000 		.word	new_pack
 3219 0078 00000000 		.word	fin_exec
 3220 007c 00000000 		.word	timerFlag
 3221              		.cfi_endproc
 3222              	.LFE50:
 3223              		.size	main, .-main
 3224              		.text
 3225              	.Letext0:
 3226              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3227              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3228              		.file 4 ".\\main.h"
 3229              		.section	.debug_info,"",%progbits
 3230              	.Ldebug_info0:
 3231 0000 AC070000 		.4byte	0x7ac
 3232 0004 0400     		.2byte	0x4
 3233 0006 00000000 		.4byte	.Ldebug_abbrev0
 3234 000a 04       		.byte	0x4
 3235 000b 01       		.uleb128 0x1
 3236 000c B5040000 		.4byte	.LASF107
 3237 0010 01       		.byte	0x1
 3238 0011 2C020000 		.4byte	.LASF108
 3239 0015 34030000 		.4byte	.LASF109
 3240 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3241 001d 00000000 		.4byte	0
 3242 0021 00000000 		.4byte	.Ldebug_line0
 3243 0025 02       		.uleb128 0x2
 3244 0026 01       		.byte	0x1
 3245 0027 06       		.byte	0x6
 3246 0028 5E010000 		.4byte	.LASF0
 3247 002c 02       		.uleb128 0x2
 3248 002d 01       		.byte	0x1
 3249 002e 08       		.byte	0x8
 3250 002f 40020000 		.4byte	.LASF1
 3251 0033 02       		.uleb128 0x2
 3252 0034 02       		.byte	0x2
 3253 0035 05       		.byte	0x5
 3254 0036 45000000 		.4byte	.LASF2
 3255 003a 02       		.uleb128 0x2
 3256 003b 02       		.byte	0x2
 3257 003c 07       		.byte	0x7
 3258 003d F5020000 		.4byte	.LASF3
 3259 0041 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 79


 3260 0042 04       		.byte	0x4
 3261 0043 05       		.byte	0x5
 3262 0044 BB010000 		.4byte	.LASF4
 3263 0048 02       		.uleb128 0x2
 3264 0049 04       		.byte	0x4
 3265 004a 07       		.byte	0x7
 3266 004b C8020000 		.4byte	.LASF5
 3267 004f 02       		.uleb128 0x2
 3268 0050 08       		.byte	0x8
 3269 0051 05       		.byte	0x5
 3270 0052 9B000000 		.4byte	.LASF6
 3271 0056 02       		.uleb128 0x2
 3272 0057 08       		.byte	0x8
 3273 0058 07       		.byte	0x7
 3274 0059 A4020000 		.4byte	.LASF7
 3275 005d 03       		.uleb128 0x3
 3276 005e 04       		.byte	0x4
 3277 005f 05       		.byte	0x5
 3278 0060 696E7400 		.ascii	"int\000"
 3279 0064 02       		.uleb128 0x2
 3280 0065 04       		.byte	0x4
 3281 0066 07       		.byte	0x7
 3282 0067 BB020000 		.4byte	.LASF8
 3283 006b 04       		.uleb128 0x4
 3284 006c 1A020000 		.4byte	.LASF9
 3285 0070 02       		.byte	0x2
 3286 0071 A1       		.byte	0xa1
 3287 0072 2C000000 		.4byte	0x2c
 3288 0076 04       		.uleb128 0x4
 3289 0077 00010000 		.4byte	.LASF10
 3290 007b 02       		.byte	0x2
 3291 007c A2       		.byte	0xa2
 3292 007d 3A000000 		.4byte	0x3a
 3293 0081 04       		.uleb128 0x4
 3294 0082 FF030000 		.4byte	.LASF11
 3295 0086 02       		.byte	0x2
 3296 0087 A3       		.byte	0xa3
 3297 0088 48000000 		.4byte	0x48
 3298 008c 04       		.uleb128 0x4
 3299 008d 9F010000 		.4byte	.LASF12
 3300 0091 02       		.byte	0x2
 3301 0092 A4       		.byte	0xa4
 3302 0093 25000000 		.4byte	0x25
 3303 0097 04       		.uleb128 0x4
 3304 0098 58010000 		.4byte	.LASF13
 3305 009c 02       		.byte	0x2
 3306 009d A5       		.byte	0xa5
 3307 009e 33000000 		.4byte	0x33
 3308 00a2 02       		.uleb128 0x2
 3309 00a3 04       		.byte	0x4
 3310 00a4 04       		.byte	0x4
 3311 00a5 75010000 		.4byte	.LASF14
 3312 00a9 02       		.uleb128 0x2
 3313 00aa 08       		.byte	0x8
 3314 00ab 04       		.byte	0x4
 3315 00ac 88040000 		.4byte	.LASF15
 3316 00b0 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 80


 3317 00b1 01       		.byte	0x1
 3318 00b2 08       		.byte	0x8
 3319 00b3 2F030000 		.4byte	.LASF16
 3320 00b7 05       		.uleb128 0x5
 3321 00b8 6B000000 		.4byte	0x6b
 3322 00bc 02       		.uleb128 0x2
 3323 00bd 04       		.byte	0x4
 3324 00be 07       		.byte	0x7
 3325 00bf 5C000000 		.4byte	.LASF17
 3326 00c3 04       		.uleb128 0x4
 3327 00c4 1E040000 		.4byte	.LASF18
 3328 00c8 03       		.byte	0x3
 3329 00c9 7A       		.byte	0x7a
 3330 00ca 41000000 		.4byte	0x41
 3331 00ce 06       		.uleb128 0x6
 3332 00cf 08030000 		.4byte	.LASF24
 3333 00d3 01       		.byte	0x1
 3334 00d4 01       		.byte	0x1
 3335 00d5 9D01     		.2byte	0x19d
 3336 00d7 FA000000 		.4byte	0xfa
 3337 00db 07       		.uleb128 0x7
 3338 00dc 2A000000 		.4byte	.LASF19
 3339 00e0 00       		.sleb128 0
 3340 00e1 07       		.uleb128 0x7
 3341 00e2 10020000 		.4byte	.LASF20
 3342 00e6 01       		.sleb128 1
 3343 00e7 07       		.uleb128 0x7
 3344 00e8 06040000 		.4byte	.LASF21
 3345 00ec 02       		.sleb128 2
 3346 00ed 07       		.uleb128 0x7
 3347 00ee E0020000 		.4byte	.LASF22
 3348 00f2 03       		.sleb128 3
 3349 00f3 07       		.uleb128 0x7
 3350 00f4 73020000 		.4byte	.LASF23
 3351 00f8 04       		.sleb128 4
 3352 00f9 00       		.byte	0
 3353 00fa 06       		.uleb128 0x6
 3354 00fb 70000000 		.4byte	.LASF25
 3355 00ff 01       		.byte	0x1
 3356 0100 01       		.byte	0x1
 3357 0101 0502     		.2byte	0x205
 3358 0103 26010000 		.4byte	0x126
 3359 0107 07       		.uleb128 0x7
 3360 0108 4F000000 		.4byte	.LASF26
 3361 010c 00       		.sleb128 0
 3362 010d 07       		.uleb128 0x7
 3363 010e 2B010000 		.4byte	.LASF27
 3364 0112 01       		.sleb128 1
 3365 0113 07       		.uleb128 0x7
 3366 0114 95020000 		.4byte	.LASF28
 3367 0118 02       		.sleb128 2
 3368 0119 07       		.uleb128 0x7
 3369 011a D7010000 		.4byte	.LASF29
 3370 011e 03       		.sleb128 3
 3371 011f 07       		.uleb128 0x7
 3372 0120 79050000 		.4byte	.LASF30
 3373 0124 04       		.sleb128 4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 81


 3374 0125 00       		.byte	0
 3375 0126 06       		.uleb128 0x6
 3376 0127 22030000 		.4byte	.LASF31
 3377 012b 01       		.byte	0x1
 3378 012c 01       		.byte	0x1
 3379 012d 7002     		.2byte	0x270
 3380 012f 4C010000 		.4byte	0x14c
 3381 0133 07       		.uleb128 0x7
 3382 0134 7B010000 		.4byte	.LASF32
 3383 0138 00       		.sleb128 0
 3384 0139 07       		.uleb128 0x7
 3385 013a 81020000 		.4byte	.LASF33
 3386 013e 01       		.sleb128 1
 3387 013f 07       		.uleb128 0x7
 3388 0140 61050000 		.4byte	.LASF34
 3389 0144 02       		.sleb128 2
 3390 0145 07       		.uleb128 0x7
 3391 0146 3C050000 		.4byte	.LASF35
 3392 014a 03       		.sleb128 3
 3393 014b 00       		.byte	0
 3394 014c 06       		.uleb128 0x6
 3395 014d C8000000 		.4byte	.LASF36
 3396 0151 01       		.byte	0x1
 3397 0152 01       		.byte	0x1
 3398 0153 FF02     		.2byte	0x2ff
 3399 0155 72010000 		.4byte	0x172
 3400 0159 07       		.uleb128 0x7
 3401 015a 20020000 		.4byte	.LASF37
 3402 015e 00       		.sleb128 0
 3403 015f 07       		.uleb128 0x7
 3404 0160 1F000000 		.4byte	.LASF38
 3405 0164 01       		.sleb128 1
 3406 0165 07       		.uleb128 0x7
 3407 0166 BA000000 		.4byte	.LASF39
 3408 016a 02       		.sleb128 2
 3409 016b 07       		.uleb128 0x7
 3410 016c EA020000 		.4byte	.LASF40
 3411 0170 03       		.sleb128 3
 3412 0171 00       		.byte	0
 3413 0172 06       		.uleb128 0x6
 3414 0173 C4010000 		.4byte	.LASF41
 3415 0177 01       		.byte	0x1
 3416 0178 01       		.byte	0x1
 3417 0179 8703     		.2byte	0x387
 3418 017b 98010000 		.4byte	0x198
 3419 017f 07       		.uleb128 0x7
 3420 0180 16000000 		.4byte	.LASF42
 3421 0184 00       		.sleb128 0
 3422 0185 07       		.uleb128 0x7
 3423 0186 B2000000 		.4byte	.LASF43
 3424 018a 01       		.sleb128 1
 3425 018b 07       		.uleb128 0x7
 3426 018c 65000000 		.4byte	.LASF44
 3427 0190 02       		.sleb128 2
 3428 0191 07       		.uleb128 0x7
 3429 0192 41010000 		.4byte	.LASF45
 3430 0196 03       		.sleb128 3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 82


 3431 0197 00       		.byte	0
 3432 0198 08       		.uleb128 0x8
 3433 0199 97040000 		.4byte	.LASF49
 3434 019d 01       		.byte	0x1
 3435 019e 0A       		.byte	0xa
 3436 019f 00000000 		.4byte	.LFB34
 3437 01a3 28000000 		.4byte	.LFE34-.LFB34
 3438 01a7 01       		.uleb128 0x1
 3439 01a8 9C       		.byte	0x9c
 3440 01a9 BC010000 		.4byte	0x1bc
 3441 01ad 09       		.uleb128 0x9
 3442 01ae 4E020000 		.4byte	.LASF48
 3443 01b2 01       		.byte	0x1
 3444 01b3 0C       		.byte	0xc
 3445 01b4 81000000 		.4byte	0x81
 3446 01b8 02       		.uleb128 0x2
 3447 01b9 91       		.byte	0x91
 3448 01ba 74       		.sleb128 -12
 3449 01bb 00       		.byte	0
 3450 01bc 0A       		.uleb128 0xa
 3451 01bd 46050000 		.4byte	.LASF55
 3452 01c1 01       		.byte	0x1
 3453 01c2 32       		.byte	0x32
 3454 01c3 76000000 		.4byte	0x76
 3455 01c7 00000000 		.4byte	.LFB35
 3456 01cb 78000000 		.4byte	.LFE35-.LFB35
 3457 01cf 01       		.uleb128 0x1
 3458 01d0 9C       		.byte	0x9c
 3459 01d1 1A020000 		.4byte	0x21a
 3460 01d5 0B       		.uleb128 0xb
 3461 01d6 19030000 		.4byte	.LASF46
 3462 01da 01       		.byte	0x1
 3463 01db 32       		.byte	0x32
 3464 01dc 1A020000 		.4byte	0x21a
 3465 01e0 02       		.uleb128 0x2
 3466 01e1 91       		.byte	0x91
 3467 01e2 64       		.sleb128 -28
 3468 01e3 0B       		.uleb128 0xb
 3469 01e4 8B020000 		.4byte	.LASF47
 3470 01e8 01       		.byte	0x1
 3471 01e9 32       		.byte	0x32
 3472 01ea 6B000000 		.4byte	0x6b
 3473 01ee 02       		.uleb128 0x2
 3474 01ef 91       		.byte	0x91
 3475 01f0 63       		.sleb128 -29
 3476 01f1 0C       		.uleb128 0xc
 3477 01f2 6900     		.ascii	"i\000"
 3478 01f4 01       		.byte	0x1
 3479 01f5 34       		.byte	0x34
 3480 01f6 6B000000 		.4byte	0x6b
 3481 01fa 02       		.uleb128 0x2
 3482 01fb 91       		.byte	0x91
 3483 01fc 77       		.sleb128 -9
 3484 01fd 0C       		.uleb128 0xc
 3485 01fe 73756D00 		.ascii	"sum\000"
 3486 0202 01       		.byte	0x1
 3487 0203 35       		.byte	0x35
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 83


 3488 0204 81000000 		.4byte	0x81
 3489 0208 02       		.uleb128 0x2
 3490 0209 91       		.byte	0x91
 3491 020a 70       		.sleb128 -16
 3492 020b 0C       		.uleb128 0xc
 3493 020c 61766700 		.ascii	"avg\000"
 3494 0210 01       		.byte	0x1
 3495 0211 36       		.byte	0x36
 3496 0212 76000000 		.4byte	0x76
 3497 0216 02       		.uleb128 0x2
 3498 0217 91       		.byte	0x91
 3499 0218 6E       		.sleb128 -18
 3500 0219 00       		.byte	0
 3501 021a 0D       		.uleb128 0xd
 3502 021b 04       		.byte	0x4
 3503 021c 76000000 		.4byte	0x76
 3504 0220 0E       		.uleb128 0xe
 3505 0221 13040000 		.4byte	.LASF50
 3506 0225 01       		.byte	0x1
 3507 0226 42       		.byte	0x42
 3508 0227 00000000 		.4byte	.LFB36
 3509 022b 84050000 		.4byte	.LFE36-.LFB36
 3510 022f 01       		.uleb128 0x1
 3511 0230 9C       		.byte	0x9c
 3512 0231 6E020000 		.4byte	0x26e
 3513 0235 0B       		.uleb128 0xb
 3514 0236 98030000 		.4byte	.LASF51
 3515 023a 01       		.byte	0x1
 3516 023b 42       		.byte	0x42
 3517 023c 6B000000 		.4byte	0x6b
 3518 0240 02       		.uleb128 0x2
 3519 0241 91       		.byte	0x91
 3520 0242 77       		.sleb128 -9
 3521 0243 0B       		.uleb128 0xb
 3522 0244 25040000 		.4byte	.LASF52
 3523 0248 01       		.byte	0x1
 3524 0249 42       		.byte	0x42
 3525 024a 1A020000 		.4byte	0x21a
 3526 024e 02       		.uleb128 0x2
 3527 024f 91       		.byte	0x91
 3528 0250 70       		.sleb128 -16
 3529 0251 0B       		.uleb128 0xb
 3530 0252 2B040000 		.4byte	.LASF53
 3531 0256 01       		.byte	0x1
 3532 0257 42       		.byte	0x42
 3533 0258 6B000000 		.4byte	0x6b
 3534 025c 02       		.uleb128 0x2
 3535 025d 91       		.byte	0x91
 3536 025e 76       		.sleb128 -10
 3537 025f 0B       		.uleb128 0xb
 3538 0260 59050000 		.4byte	.LASF54
 3539 0264 01       		.byte	0x1
 3540 0265 42       		.byte	0x42
 3541 0266 76000000 		.4byte	0x76
 3542 026a 02       		.uleb128 0x2
 3543 026b 91       		.byte	0x91
 3544 026c 74       		.sleb128 -12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 84


 3545 026d 00       		.byte	0
 3546 026e 0F       		.uleb128 0xf
 3547 026f AE010000 		.4byte	.LASF56
 3548 0273 01       		.byte	0x1
 3549 0274 3F01     		.2byte	0x13f
 3550 0276 76000000 		.4byte	0x76
 3551 027a 00000000 		.4byte	.LFB37
 3552 027e 84000000 		.4byte	.LFE37-.LFB37
 3553 0282 01       		.uleb128 0x1
 3554 0283 9C       		.byte	0x9c
 3555 0284 F2020000 		.4byte	0x2f2
 3556 0288 10       		.uleb128 0x10
 3557 0289 EB030000 		.4byte	.LASF57
 3558 028d 01       		.byte	0x1
 3559 028e 3F01     		.2byte	0x13f
 3560 0290 F2020000 		.4byte	0x2f2
 3561 0294 02       		.uleb128 0x2
 3562 0295 91       		.byte	0x91
 3563 0296 6C       		.sleb128 -20
 3564 0297 10       		.uleb128 0x10
 3565 0298 64040000 		.4byte	.LASF58
 3566 029c 01       		.byte	0x1
 3567 029d 3F01     		.2byte	0x13f
 3568 029f 6B000000 		.4byte	0x6b
 3569 02a3 02       		.uleb128 0x2
 3570 02a4 91       		.byte	0x91
 3571 02a5 6B       		.sleb128 -21
 3572 02a6 10       		.uleb128 0x10
 3573 02a7 6D020000 		.4byte	.LASF59
 3574 02ab 01       		.byte	0x1
 3575 02ac 3F01     		.2byte	0x13f
 3576 02ae 6B000000 		.4byte	0x6b
 3577 02b2 02       		.uleb128 0x2
 3578 02b3 91       		.byte	0x91
 3579 02b4 6A       		.sleb128 -22
 3580 02b5 11       		.uleb128 0x11
 3581 02b6 59050000 		.4byte	.LASF54
 3582 02ba 01       		.byte	0x1
 3583 02bb 4101     		.2byte	0x141
 3584 02bd 76000000 		.4byte	0x76
 3585 02c1 02       		.uleb128 0x2
 3586 02c2 91       		.byte	0x91
 3587 02c3 70       		.sleb128 -16
 3588 02c4 11       		.uleb128 0x11
 3589 02c5 76040000 		.4byte	.LASF60
 3590 02c9 01       		.byte	0x1
 3591 02ca 4201     		.2byte	0x142
 3592 02cc 97000000 		.4byte	0x97
 3593 02d0 02       		.uleb128 0x2
 3594 02d1 91       		.byte	0x91
 3595 02d2 76       		.sleb128 -10
 3596 02d3 11       		.uleb128 0x11
 3597 02d4 7C040000 		.4byte	.LASF61
 3598 02d8 01       		.byte	0x1
 3599 02d9 4301     		.2byte	0x143
 3600 02db 97000000 		.4byte	0x97
 3601 02df 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 85


 3602 02e0 91       		.byte	0x91
 3603 02e1 74       		.sleb128 -12
 3604 02e2 11       		.uleb128 0x11
 3605 02e3 82040000 		.4byte	.LASF62
 3606 02e7 01       		.byte	0x1
 3607 02e8 4401     		.2byte	0x144
 3608 02ea 97000000 		.4byte	0x97
 3609 02ee 02       		.uleb128 0x2
 3610 02ef 91       		.byte	0x91
 3611 02f0 72       		.sleb128 -14
 3612 02f1 00       		.byte	0
 3613 02f2 0D       		.uleb128 0xd
 3614 02f3 04       		.byte	0x4
 3615 02f4 8C000000 		.4byte	0x8c
 3616 02f8 0F       		.uleb128 0xf
 3617 02f9 48040000 		.4byte	.LASF63
 3618 02fd 01       		.byte	0x1
 3619 02fe 4E01     		.2byte	0x14e
 3620 0300 76000000 		.4byte	0x76
 3621 0304 00000000 		.4byte	.LFB38
 3622 0308 20000000 		.4byte	.LFE38-.LFB38
 3623 030c 01       		.uleb128 0x1
 3624 030d 9C       		.byte	0x9c
 3625 030e 31030000 		.4byte	0x331
 3626 0312 10       		.uleb128 0x10
 3627 0313 C7030000 		.4byte	.LASF64
 3628 0317 01       		.byte	0x1
 3629 0318 4E01     		.2byte	0x14e
 3630 031a 81000000 		.4byte	0x81
 3631 031e 02       		.uleb128 0x2
 3632 031f 91       		.byte	0x91
 3633 0320 6C       		.sleb128 -20
 3634 0321 11       		.uleb128 0x11
 3635 0322 FA010000 		.4byte	.LASF65
 3636 0326 01       		.byte	0x1
 3637 0327 5101     		.2byte	0x151
 3638 0329 76000000 		.4byte	0x76
 3639 032d 02       		.uleb128 0x2
 3640 032e 91       		.byte	0x91
 3641 032f 76       		.sleb128 -10
 3642 0330 00       		.byte	0
 3643 0331 12       		.uleb128 0x12
 3644 0332 EC010000 		.4byte	.LASF66
 3645 0336 01       		.byte	0x1
 3646 0337 5501     		.2byte	0x155
 3647 0339 00000000 		.4byte	.LFB39
 3648 033d 08000000 		.4byte	.LFE39-.LFB39
 3649 0341 01       		.uleb128 0x1
 3650 0342 9C       		.byte	0x9c
 3651 0343 13       		.uleb128 0x13
 3652 0344 35000000 		.4byte	.LASF67
 3653 0348 01       		.byte	0x1
 3654 0349 5E01     		.2byte	0x15e
 3655 034b 00000000 		.4byte	.LFB40
 3656 034f 18000000 		.4byte	.LFE40-.LFB40
 3657 0353 01       		.uleb128 0x1
 3658 0354 9C       		.byte	0x9c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 86


 3659 0355 14       		.uleb128 0x14
 3660 0356 A0030000 		.4byte	.LASF68
 3661 035a 01       		.byte	0x1
 3662 035b 6801     		.2byte	0x168
 3663 035d 00000000 		.4byte	.LFB41
 3664 0361 98000000 		.4byte	.LFE41-.LFB41
 3665 0365 01       		.uleb128 0x1
 3666 0366 9C       		.byte	0x9c
 3667 0367 99030000 		.4byte	0x399
 3668 036b 10       		.uleb128 0x10
 3669 036c 8F040000 		.4byte	.LASF69
 3670 0370 01       		.byte	0x1
 3671 0371 6801     		.2byte	0x168
 3672 0373 6B000000 		.4byte	0x6b
 3673 0377 02       		.uleb128 0x2
 3674 0378 91       		.byte	0x91
 3675 0379 67       		.sleb128 -25
 3676 037a 10       		.uleb128 0x10
 3677 037b 0D000000 		.4byte	.LASF70
 3678 037f 01       		.byte	0x1
 3679 0380 6801     		.2byte	0x168
 3680 0382 76000000 		.4byte	0x76
 3681 0386 02       		.uleb128 0x2
 3682 0387 91       		.byte	0x91
 3683 0388 64       		.sleb128 -28
 3684 0389 11       		.uleb128 0x11
 3685 038a 25040000 		.4byte	.LASF52
 3686 038e 01       		.byte	0x1
 3687 038f 6A01     		.2byte	0x16a
 3688 0391 99030000 		.4byte	0x399
 3689 0395 02       		.uleb128 0x2
 3690 0396 91       		.byte	0x91
 3691 0397 6C       		.sleb128 -20
 3692 0398 00       		.byte	0
 3693 0399 15       		.uleb128 0x15
 3694 039a 6B000000 		.4byte	0x6b
 3695 039e A9030000 		.4byte	0x3a9
 3696 03a2 16       		.uleb128 0x16
 3697 03a3 BC000000 		.4byte	0xbc
 3698 03a7 08       		.byte	0x8
 3699 03a8 00       		.byte	0
 3700 03a9 14       		.uleb128 0x14
 3701 03aa 49010000 		.4byte	.LASF71
 3702 03ae 01       		.byte	0x1
 3703 03af 7901     		.2byte	0x179
 3704 03b1 00000000 		.4byte	.LFB42
 3705 03b5 98000000 		.4byte	.LFE42-.LFB42
 3706 03b9 01       		.uleb128 0x1
 3707 03ba 9C       		.byte	0x9c
 3708 03bb ED030000 		.4byte	0x3ed
 3709 03bf 10       		.uleb128 0x10
 3710 03c0 8F040000 		.4byte	.LASF69
 3711 03c4 01       		.byte	0x1
 3712 03c5 7901     		.2byte	0x179
 3713 03c7 6B000000 		.4byte	0x6b
 3714 03cb 02       		.uleb128 0x2
 3715 03cc 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 87


 3716 03cd 67       		.sleb128 -25
 3717 03ce 10       		.uleb128 0x10
 3718 03cf 83000000 		.4byte	.LASF72
 3719 03d3 01       		.byte	0x1
 3720 03d4 7901     		.2byte	0x179
 3721 03d6 76000000 		.4byte	0x76
 3722 03da 02       		.uleb128 0x2
 3723 03db 91       		.byte	0x91
 3724 03dc 64       		.sleb128 -28
 3725 03dd 11       		.uleb128 0x11
 3726 03de 25040000 		.4byte	.LASF52
 3727 03e2 01       		.byte	0x1
 3728 03e3 7B01     		.2byte	0x17b
 3729 03e5 99030000 		.4byte	0x399
 3730 03e9 02       		.uleb128 0x2
 3731 03ea 91       		.byte	0x91
 3732 03eb 6C       		.sleb128 -20
 3733 03ec 00       		.byte	0
 3734 03ed 14       		.uleb128 0x14
 3735 03ee AA040000 		.4byte	.LASF73
 3736 03f2 01       		.byte	0x1
 3737 03f3 8B01     		.2byte	0x18b
 3738 03f5 00000000 		.4byte	.LFB43
 3739 03f9 98000000 		.4byte	.LFE43-.LFB43
 3740 03fd 01       		.uleb128 0x1
 3741 03fe 9C       		.byte	0x9c
 3742 03ff 31040000 		.4byte	0x431
 3743 0403 10       		.uleb128 0x10
 3744 0404 8F040000 		.4byte	.LASF69
 3745 0408 01       		.byte	0x1
 3746 0409 8B01     		.2byte	0x18b
 3747 040b 6B000000 		.4byte	0x6b
 3748 040f 02       		.uleb128 0x2
 3749 0410 91       		.byte	0x91
 3750 0411 67       		.sleb128 -25
 3751 0412 10       		.uleb128 0x10
 3752 0413 DA020000 		.4byte	.LASF74
 3753 0417 01       		.byte	0x1
 3754 0418 8B01     		.2byte	0x18b
 3755 041a 76000000 		.4byte	0x76
 3756 041e 02       		.uleb128 0x2
 3757 041f 91       		.byte	0x91
 3758 0420 64       		.sleb128 -28
 3759 0421 11       		.uleb128 0x11
 3760 0422 25040000 		.4byte	.LASF52
 3761 0426 01       		.byte	0x1
 3762 0427 8D01     		.2byte	0x18d
 3763 0429 99030000 		.4byte	0x399
 3764 042d 02       		.uleb128 0x2
 3765 042e 91       		.byte	0x91
 3766 042f 6C       		.sleb128 -20
 3767 0430 00       		.byte	0
 3768 0431 17       		.uleb128 0x17
 3769 0432 A4010000 		.4byte	.LASF75
 3770 0436 01       		.byte	0x1
 3771 0437 9F01     		.2byte	0x19f
 3772 0439 00000000 		.4byte	.LFB44
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 88


 3773 043d 50010000 		.4byte	.LFE44-.LFB44
 3774 0441 01       		.uleb128 0x1
 3775 0442 9C       		.byte	0x9c
 3776 0443 73040000 		.4byte	0x473
 3777 0447 18       		.uleb128 0x18
 3778 0448 6900     		.ascii	"i\000"
 3779 044a 01       		.byte	0x1
 3780 044b AF01     		.2byte	0x1af
 3781 044d 6B000000 		.4byte	0x6b
 3782 0451 02       		.uleb128 0x2
 3783 0452 91       		.byte	0x91
 3784 0453 6F       		.sleb128 -17
 3785 0454 18       		.uleb128 0x18
 3786 0455 61766700 		.ascii	"avg\000"
 3787 0459 01       		.byte	0x1
 3788 045a B001     		.2byte	0x1b0
 3789 045c 76000000 		.4byte	0x76
 3790 0460 02       		.uleb128 0x2
 3791 0461 91       		.byte	0x91
 3792 0462 6A       		.sleb128 -22
 3793 0463 11       		.uleb128 0x11
 3794 0464 59050000 		.4byte	.LASF54
 3795 0468 01       		.byte	0x1
 3796 0469 B101     		.2byte	0x1b1
 3797 046b 76000000 		.4byte	0x76
 3798 046f 02       		.uleb128 0x2
 3799 0470 91       		.byte	0x91
 3800 0471 6C       		.sleb128 -20
 3801 0472 00       		.byte	0
 3802 0473 17       		.uleb128 0x17
 3803 0474 16010000 		.4byte	.LASF76
 3804 0478 01       		.byte	0x1
 3805 0479 0702     		.2byte	0x207
 3806 047b 00000000 		.4byte	.LFB45
 3807 047f 50010000 		.4byte	.LFE45-.LFB45
 3808 0483 01       		.uleb128 0x1
 3809 0484 9C       		.byte	0x9c
 3810 0485 B5040000 		.4byte	0x4b5
 3811 0489 18       		.uleb128 0x18
 3812 048a 6900     		.ascii	"i\000"
 3813 048c 01       		.byte	0x1
 3814 048d 1702     		.2byte	0x217
 3815 048f 6B000000 		.4byte	0x6b
 3816 0493 02       		.uleb128 0x2
 3817 0494 91       		.byte	0x91
 3818 0495 6F       		.sleb128 -17
 3819 0496 18       		.uleb128 0x18
 3820 0497 61766700 		.ascii	"avg\000"
 3821 049b 01       		.byte	0x1
 3822 049c 1802     		.2byte	0x218
 3823 049e 76000000 		.4byte	0x76
 3824 04a2 02       		.uleb128 0x2
 3825 04a3 91       		.byte	0x91
 3826 04a4 6A       		.sleb128 -22
 3827 04a5 11       		.uleb128 0x11
 3828 04a6 59050000 		.4byte	.LASF54
 3829 04aa 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 89


 3830 04ab 1902     		.2byte	0x219
 3831 04ad 76000000 		.4byte	0x76
 3832 04b1 02       		.uleb128 0x2
 3833 04b2 91       		.byte	0x91
 3834 04b3 6C       		.sleb128 -20
 3835 04b4 00       		.byte	0
 3836 04b5 17       		.uleb128 0x17
 3837 04b6 FA000000 		.4byte	.LASF77
 3838 04ba 01       		.byte	0x1
 3839 04bb 7102     		.2byte	0x271
 3840 04bd 00000000 		.4byte	.LFB46
 3841 04c1 14020000 		.4byte	.LFE46-.LFB46
 3842 04c5 01       		.uleb128 0x1
 3843 04c6 9C       		.byte	0x9c
 3844 04c7 06050000 		.4byte	0x506
 3845 04cb 18       		.uleb128 0x18
 3846 04cc 6900     		.ascii	"i\000"
 3847 04ce 01       		.byte	0x1
 3848 04cf 7702     		.2byte	0x277
 3849 04d1 6B000000 		.4byte	0x6b
 3850 04d5 02       		.uleb128 0x2
 3851 04d6 91       		.byte	0x91
 3852 04d7 6F       		.sleb128 -17
 3853 04d8 18       		.uleb128 0x18
 3854 04d9 61766700 		.ascii	"avg\000"
 3855 04dd 01       		.byte	0x1
 3856 04de 7802     		.2byte	0x278
 3857 04e0 76000000 		.4byte	0x76
 3858 04e4 02       		.uleb128 0x2
 3859 04e5 91       		.byte	0x91
 3860 04e6 68       		.sleb128 -24
 3861 04e7 11       		.uleb128 0x11
 3862 04e8 59050000 		.4byte	.LASF54
 3863 04ec 01       		.byte	0x1
 3864 04ed 7902     		.2byte	0x279
 3865 04ef 76000000 		.4byte	0x76
 3866 04f3 02       		.uleb128 0x2
 3867 04f4 91       		.byte	0x91
 3868 04f5 6A       		.sleb128 -22
 3869 04f6 11       		.uleb128 0x11
 3870 04f7 FA010000 		.4byte	.LASF65
 3871 04fb 01       		.byte	0x1
 3872 04fc 7B02     		.2byte	0x27b
 3873 04fe 76000000 		.4byte	0x76
 3874 0502 02       		.uleb128 0x2
 3875 0503 91       		.byte	0x91
 3876 0504 6C       		.sleb128 -20
 3877 0505 00       		.byte	0
 3878 0506 17       		.uleb128 0x17
 3879 0507 F6030000 		.4byte	.LASF78
 3880 050b 01       		.byte	0x1
 3881 050c 0003     		.2byte	0x300
 3882 050e 00000000 		.4byte	.LFB47
 3883 0512 20020000 		.4byte	.LFE47-.LFB47
 3884 0516 01       		.uleb128 0x1
 3885 0517 9C       		.byte	0x9c
 3886 0518 57050000 		.4byte	0x557
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 90


 3887 051c 18       		.uleb128 0x18
 3888 051d 6900     		.ascii	"i\000"
 3889 051f 01       		.byte	0x1
 3890 0520 0603     		.2byte	0x306
 3891 0522 6B000000 		.4byte	0x6b
 3892 0526 02       		.uleb128 0x2
 3893 0527 91       		.byte	0x91
 3894 0528 6F       		.sleb128 -17
 3895 0529 18       		.uleb128 0x18
 3896 052a 61766700 		.ascii	"avg\000"
 3897 052e 01       		.byte	0x1
 3898 052f 0703     		.2byte	0x307
 3899 0531 76000000 		.4byte	0x76
 3900 0535 02       		.uleb128 0x2
 3901 0536 91       		.byte	0x91
 3902 0537 68       		.sleb128 -24
 3903 0538 11       		.uleb128 0x11
 3904 0539 59050000 		.4byte	.LASF54
 3905 053d 01       		.byte	0x1
 3906 053e 0803     		.2byte	0x308
 3907 0540 76000000 		.4byte	0x76
 3908 0544 02       		.uleb128 0x2
 3909 0545 91       		.byte	0x91
 3910 0546 6A       		.sleb128 -22
 3911 0547 11       		.uleb128 0x11
 3912 0548 FA010000 		.4byte	.LASF65
 3913 054c 01       		.byte	0x1
 3914 054d 0903     		.2byte	0x309
 3915 054f 76000000 		.4byte	0x76
 3916 0553 02       		.uleb128 0x2
 3917 0554 91       		.byte	0x91
 3918 0555 6C       		.sleb128 -20
 3919 0556 00       		.byte	0
 3920 0557 17       		.uleb128 0x17
 3921 0558 93010000 		.4byte	.LASF79
 3922 055c 01       		.byte	0x1
 3923 055d 8803     		.2byte	0x388
 3924 055f 00000000 		.4byte	.LFB48
 3925 0563 54010000 		.4byte	.LFE48-.LFB48
 3926 0567 01       		.uleb128 0x1
 3927 0568 9C       		.byte	0x9c
 3928 0569 99050000 		.4byte	0x599
 3929 056d 18       		.uleb128 0x18
 3930 056e 6900     		.ascii	"i\000"
 3931 0570 01       		.byte	0x1
 3932 0571 8D03     		.2byte	0x38d
 3933 0573 6B000000 		.4byte	0x6b
 3934 0577 02       		.uleb128 0x2
 3935 0578 91       		.byte	0x91
 3936 0579 6F       		.sleb128 -17
 3937 057a 18       		.uleb128 0x18
 3938 057b 61766700 		.ascii	"avg\000"
 3939 057f 01       		.byte	0x1
 3940 0580 8E03     		.2byte	0x38e
 3941 0582 76000000 		.4byte	0x76
 3942 0586 02       		.uleb128 0x2
 3943 0587 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 91


 3944 0588 6A       		.sleb128 -22
 3945 0589 11       		.uleb128 0x11
 3946 058a 59050000 		.4byte	.LASF54
 3947 058e 01       		.byte	0x1
 3948 058f 8F03     		.2byte	0x38f
 3949 0591 76000000 		.4byte	0x76
 3950 0595 02       		.uleb128 0x2
 3951 0596 91       		.byte	0x91
 3952 0597 6C       		.sleb128 -20
 3953 0598 00       		.byte	0
 3954 0599 17       		.uleb128 0x17
 3955 059a 35020000 		.4byte	.LASF80
 3956 059e 01       		.byte	0x1
 3957 059f E103     		.2byte	0x3e1
 3958 05a1 00000000 		.4byte	.LFB49
 3959 05a5 00010000 		.4byte	.LFE49-.LFB49
 3960 05a9 01       		.uleb128 0x1
 3961 05aa 9C       		.byte	0x9c
 3962 05ab C7050000 		.4byte	0x5c7
 3963 05af 19       		.uleb128 0x19
 3964 05b0 1E000000 		.4byte	.LBB2
 3965 05b4 2C000000 		.4byte	.LBE2-.LBB2
 3966 05b8 18       		.uleb128 0x18
 3967 05b9 6A00     		.ascii	"j\000"
 3968 05bb 01       		.byte	0x1
 3969 05bc E703     		.2byte	0x3e7
 3970 05be 6B000000 		.4byte	0x6b
 3971 05c2 02       		.uleb128 0x2
 3972 05c3 91       		.byte	0x91
 3973 05c4 77       		.sleb128 -9
 3974 05c5 00       		.byte	0
 3975 05c6 00       		.byte	0
 3976 05c7 1A       		.uleb128 0x1a
 3977 05c8 93030000 		.4byte	.LASF81
 3978 05cc 01       		.byte	0x1
 3979 05cd 1C04     		.2byte	0x41c
 3980 05cf 5D000000 		.4byte	0x5d
 3981 05d3 00000000 		.4byte	.LFB50
 3982 05d7 80000000 		.4byte	.LFE50-.LFB50
 3983 05db 01       		.uleb128 0x1
 3984 05dc 9C       		.byte	0x9c
 3985 05dd 25060000 		.4byte	0x625
 3986 05e1 1B       		.uleb128 0x1b
 3987 05e2 7400     		.ascii	"t\000"
 3988 05e4 01       		.byte	0x1
 3989 05e5 1F04     		.2byte	0x41f
 3990 05e7 C3000000 		.4byte	0xc3
 3991 05eb 1C       		.uleb128 0x1c
 3992 05ec 56020000 		.4byte	.LASF82
 3993 05f0 01       		.byte	0x1
 3994 05f1 2004     		.2byte	0x420
 3995 05f3 6B000000 		.4byte	0x6b
 3996 05f7 11       		.uleb128 0x11
 3997 05f8 91000000 		.4byte	.LASF83
 3998 05fc 01       		.byte	0x1
 3999 05fd 2104     		.2byte	0x421
 4000 05ff 5D000000 		.4byte	0x5d
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 92


 4001 0603 02       		.uleb128 0x2
 4002 0604 91       		.byte	0x91
 4003 0605 74       		.sleb128 -12
 4004 0606 11       		.uleb128 0x11
 4005 0607 B2030000 		.4byte	.LASF84
 4006 060b 01       		.byte	0x1
 4007 060c 2204     		.2byte	0x422
 4008 060e 97000000 		.4byte	0x97
 4009 0612 02       		.uleb128 0x2
 4010 0613 91       		.byte	0x91
 4011 0614 72       		.sleb128 -14
 4012 0615 11       		.uleb128 0x11
 4013 0616 6E050000 		.4byte	.LASF85
 4014 061a 01       		.byte	0x1
 4015 061b 2604     		.2byte	0x426
 4016 061d 5D000000 		.4byte	0x5d
 4017 0621 02       		.uleb128 0x2
 4018 0622 91       		.byte	0x91
 4019 0623 6C       		.sleb128 -20
 4020 0624 00       		.byte	0
 4021 0625 15       		.uleb128 0x15
 4022 0626 8C000000 		.4byte	0x8c
 4023 062a 35060000 		.4byte	0x635
 4024 062e 16       		.uleb128 0x16
 4025 062f BC000000 		.4byte	0xbc
 4026 0633 0D       		.byte	0xd
 4027 0634 00       		.byte	0
 4028 0635 1D       		.uleb128 0x1d
 4029 0636 4E050000 		.4byte	.LASF86
 4030 063a 04       		.byte	0x4
 4031 063b 2A       		.byte	0x2a
 4032 063c 25060000 		.4byte	0x625
 4033 0640 05       		.uleb128 0x5
 4034 0641 03       		.byte	0x3
 4035 0642 00000000 		.4byte	data_array
 4036 0646 1D       		.uleb128 0x1d
 4037 0647 8A000000 		.4byte	.LASF87
 4038 064b 04       		.byte	0x4
 4039 064c 2C       		.byte	0x2c
 4040 064d 6B000000 		.4byte	0x6b
 4041 0651 05       		.uleb128 0x5
 4042 0652 03       		.byte	0x3
 4043 0653 00000000 		.4byte	wiznet
 4044 0657 1D       		.uleb128 0x1d
 4045 0658 A1040000 		.4byte	.LASF88
 4046 065c 04       		.byte	0x4
 4047 065d 2D       		.byte	0x2d
 4048 065e 6B000000 		.4byte	0x6b
 4049 0662 05       		.uleb128 0x5
 4050 0663 03       		.byte	0x3
 4051 0664 00000000 		.4byte	new_pack
 4052 0668 1D       		.uleb128 0x1d
 4053 0669 E3010000 		.4byte	.LASF89
 4054 066d 04       		.byte	0x4
 4055 066e 30       		.byte	0x30
 4056 066f 6B000000 		.4byte	0x6b
 4057 0673 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 93


 4058 0674 03       		.byte	0x3
 4059 0675 00000000 		.4byte	fin_exec
 4060 0679 1D       		.uleb128 0x1d
 4061 067a 6A010000 		.4byte	.LASF90
 4062 067e 04       		.byte	0x4
 4063 067f 33       		.byte	0x33
 4064 0680 25060000 		.4byte	0x625
 4065 0684 05       		.uleb128 0x5
 4066 0685 03       		.byte	0x3
 4067 0686 00000000 		.4byte	test_array
 4068 068a 1D       		.uleb128 0x1d
 4069 068b 07010000 		.4byte	.LASF91
 4070 068f 04       		.byte	0x4
 4071 0690 36       		.byte	0x36
 4072 0691 6B000000 		.4byte	0x6b
 4073 0695 05       		.uleb128 0x5
 4074 0696 03       		.byte	0x3
 4075 0697 00000000 		.4byte	elbw_arr_cspot
 4076 069b 15       		.uleb128 0x15
 4077 069c 76000000 		.4byte	0x76
 4078 06a0 AB060000 		.4byte	0x6ab
 4079 06a4 16       		.uleb128 0x16
 4080 06a5 BC000000 		.4byte	0xbc
 4081 06a9 13       		.byte	0x13
 4082 06aa 00       		.byte	0
 4083 06ab 1D       		.uleb128 0x1d
 4084 06ac BB030000 		.4byte	.LASF92
 4085 06b0 04       		.byte	0x4
 4086 06b1 37       		.byte	0x37
 4087 06b2 9B060000 		.4byte	0x69b
 4088 06b6 05       		.uleb128 0x5
 4089 06b7 03       		.byte	0x3
 4090 06b8 00000000 		.4byte	elbow_array
 4091 06bc 1D       		.uleb128 0x1d
 4092 06bd 54040000 		.4byte	.LASF93
 4093 06c1 04       		.byte	0x4
 4094 06c2 3A       		.byte	0x3a
 4095 06c3 6B000000 		.4byte	0x6b
 4096 06c7 05       		.uleb128 0x5
 4097 06c8 03       		.byte	0x3
 4098 06c9 00000000 		.4byte	shldr_arr_cspot
 4099 06cd 1D       		.uleb128 0x1d
 4100 06ce DC030000 		.4byte	.LASF94
 4101 06d2 04       		.byte	0x4
 4102 06d3 3B       		.byte	0x3b
 4103 06d4 9B060000 		.4byte	0x69b
 4104 06d8 05       		.uleb128 0x5
 4105 06d9 03       		.byte	0x3
 4106 06da 00000000 		.4byte	shoulder_array
 4107 06de 1D       		.uleb128 0x1d
 4108 06df 03020000 		.4byte	.LASF95
 4109 06e3 04       		.byte	0x4
 4110 06e4 3E       		.byte	0x3e
 4111 06e5 6B000000 		.4byte	0x6b
 4112 06e9 05       		.uleb128 0x5
 4113 06ea 03       		.byte	0x3
 4114 06eb 00000000 		.4byte	BA_arr_cspot
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 94


 4115 06ef 1D       		.uleb128 0x1d
 4116 06f0 CF030000 		.4byte	.LASF96
 4117 06f4 04       		.byte	0x4
 4118 06f5 3F       		.byte	0x3f
 4119 06f6 9B060000 		.4byte	0x69b
 4120 06fa 05       		.uleb128 0x5
 4121 06fb 03       		.byte	0x3
 4122 06fc 00000000 		.4byte	baseAz_array
 4123 0700 1D       		.uleb128 0x1d
 4124 0701 86010000 		.4byte	.LASF97
 4125 0705 04       		.byte	0x4
 4126 0706 42       		.byte	0x42
 4127 0707 6B000000 		.4byte	0x6b
 4128 070b 05       		.uleb128 0x5
 4129 070c 03       		.byte	0x3
 4130 070d 00000000 		.4byte	WT_arr_cspot
 4131 0711 1D       		.uleb128 0x1d
 4132 0712 22010000 		.4byte	.LASF98
 4133 0716 04       		.byte	0x4
 4134 0717 43       		.byte	0x43
 4135 0718 9B060000 		.4byte	0x69b
 4136 071c 05       		.uleb128 0x5
 4137 071d 03       		.byte	0x3
 4138 071e 00000000 		.4byte	WT_array
 4139 0722 1D       		.uleb128 0x1d
 4140 0723 00000000 		.4byte	.LASF99
 4141 0727 04       		.byte	0x4
 4142 0728 46       		.byte	0x46
 4143 0729 6B000000 		.4byte	0x6b
 4144 072d 05       		.uleb128 0x5
 4145 072e 03       		.byte	0x3
 4146 072f 00000000 		.4byte	WR_arr_cspot
 4147 0733 1D       		.uleb128 0x1d
 4148 0734 A9000000 		.4byte	.LASF100
 4149 0738 04       		.byte	0x4
 4150 0739 47       		.byte	0x47
 4151 073a 9B060000 		.4byte	0x69b
 4152 073e 05       		.uleb128 0x5
 4153 073f 03       		.byte	0x3
 4154 0740 00000000 		.4byte	WR_array
 4155 0744 1D       		.uleb128 0x1d
 4156 0745 37010000 		.4byte	.LASF101
 4157 0749 04       		.byte	0x4
 4158 074a 4A       		.byte	0x4a
 4159 074b B7000000 		.4byte	0xb7
 4160 074f 05       		.uleb128 0x5
 4161 0750 03       		.byte	0x3
 4162 0751 00000000 		.4byte	timerFlag
 4163 0755 1E       		.uleb128 0x1e
 4164 0756 EA000000 		.4byte	.LASF102
 4165 075a 01       		.byte	0x1
 4166 075b 9D01     		.2byte	0x19d
 4167 075d CE000000 		.4byte	0xce
 4168 0761 05       		.uleb128 0x5
 4169 0762 03       		.byte	0x3
 4170 0763 00000000 		.4byte	wristTilt_state
 4171 0767 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 95


 4172 0768 36040000 		.4byte	.LASF103
 4173 076c 01       		.byte	0x1
 4174 076d 0502     		.2byte	0x205
 4175 076f FA000000 		.4byte	0xfa
 4176 0773 05       		.uleb128 0x5
 4177 0774 03       		.byte	0x3
 4178 0775 00000000 		.4byte	wristRotate_state
 4179 0779 1E       		.uleb128 0x1e
 4180 077a 6A040000 		.4byte	.LASF104
 4181 077e 01       		.byte	0x1
 4182 077f 7002     		.2byte	0x270
 4183 0781 26010000 		.4byte	0x126
 4184 0785 05       		.uleb128 0x5
 4185 0786 03       		.byte	0x3
 4186 0787 00000000 		.4byte	elbow_state
 4187 078b 1E       		.uleb128 0x1e
 4188 078c 5E020000 		.4byte	.LASF105
 4189 0790 01       		.byte	0x1
 4190 0791 FF02     		.2byte	0x2ff
 4191 0793 4C010000 		.4byte	0x14c
 4192 0797 05       		.uleb128 0x5
 4193 0798 03       		.byte	0x3
 4194 0799 00000000 		.4byte	shoulder_state
 4195 079d 1E       		.uleb128 0x1e
 4196 079e D8000000 		.4byte	.LASF106
 4197 07a2 01       		.byte	0x1
 4198 07a3 8703     		.2byte	0x387
 4199 07a5 72010000 		.4byte	0x172
 4200 07a9 05       		.uleb128 0x5
 4201 07aa 03       		.byte	0x3
 4202 07ab 00000000 		.4byte	baseAzimuth_state
 4203 07af 00       		.byte	0
 4204              		.section	.debug_abbrev,"",%progbits
 4205              	.Ldebug_abbrev0:
 4206 0000 01       		.uleb128 0x1
 4207 0001 11       		.uleb128 0x11
 4208 0002 01       		.byte	0x1
 4209 0003 25       		.uleb128 0x25
 4210 0004 0E       		.uleb128 0xe
 4211 0005 13       		.uleb128 0x13
 4212 0006 0B       		.uleb128 0xb
 4213 0007 03       		.uleb128 0x3
 4214 0008 0E       		.uleb128 0xe
 4215 0009 1B       		.uleb128 0x1b
 4216 000a 0E       		.uleb128 0xe
 4217 000b 55       		.uleb128 0x55
 4218 000c 17       		.uleb128 0x17
 4219 000d 11       		.uleb128 0x11
 4220 000e 01       		.uleb128 0x1
 4221 000f 10       		.uleb128 0x10
 4222 0010 17       		.uleb128 0x17
 4223 0011 00       		.byte	0
 4224 0012 00       		.byte	0
 4225 0013 02       		.uleb128 0x2
 4226 0014 24       		.uleb128 0x24
 4227 0015 00       		.byte	0
 4228 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 96


 4229 0017 0B       		.uleb128 0xb
 4230 0018 3E       		.uleb128 0x3e
 4231 0019 0B       		.uleb128 0xb
 4232 001a 03       		.uleb128 0x3
 4233 001b 0E       		.uleb128 0xe
 4234 001c 00       		.byte	0
 4235 001d 00       		.byte	0
 4236 001e 03       		.uleb128 0x3
 4237 001f 24       		.uleb128 0x24
 4238 0020 00       		.byte	0
 4239 0021 0B       		.uleb128 0xb
 4240 0022 0B       		.uleb128 0xb
 4241 0023 3E       		.uleb128 0x3e
 4242 0024 0B       		.uleb128 0xb
 4243 0025 03       		.uleb128 0x3
 4244 0026 08       		.uleb128 0x8
 4245 0027 00       		.byte	0
 4246 0028 00       		.byte	0
 4247 0029 04       		.uleb128 0x4
 4248 002a 16       		.uleb128 0x16
 4249 002b 00       		.byte	0
 4250 002c 03       		.uleb128 0x3
 4251 002d 0E       		.uleb128 0xe
 4252 002e 3A       		.uleb128 0x3a
 4253 002f 0B       		.uleb128 0xb
 4254 0030 3B       		.uleb128 0x3b
 4255 0031 0B       		.uleb128 0xb
 4256 0032 49       		.uleb128 0x49
 4257 0033 13       		.uleb128 0x13
 4258 0034 00       		.byte	0
 4259 0035 00       		.byte	0
 4260 0036 05       		.uleb128 0x5
 4261 0037 35       		.uleb128 0x35
 4262 0038 00       		.byte	0
 4263 0039 49       		.uleb128 0x49
 4264 003a 13       		.uleb128 0x13
 4265 003b 00       		.byte	0
 4266 003c 00       		.byte	0
 4267 003d 06       		.uleb128 0x6
 4268 003e 04       		.uleb128 0x4
 4269 003f 01       		.byte	0x1
 4270 0040 03       		.uleb128 0x3
 4271 0041 0E       		.uleb128 0xe
 4272 0042 0B       		.uleb128 0xb
 4273 0043 0B       		.uleb128 0xb
 4274 0044 3A       		.uleb128 0x3a
 4275 0045 0B       		.uleb128 0xb
 4276 0046 3B       		.uleb128 0x3b
 4277 0047 05       		.uleb128 0x5
 4278 0048 01       		.uleb128 0x1
 4279 0049 13       		.uleb128 0x13
 4280 004a 00       		.byte	0
 4281 004b 00       		.byte	0
 4282 004c 07       		.uleb128 0x7
 4283 004d 28       		.uleb128 0x28
 4284 004e 00       		.byte	0
 4285 004f 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 97


 4286 0050 0E       		.uleb128 0xe
 4287 0051 1C       		.uleb128 0x1c
 4288 0052 0D       		.uleb128 0xd
 4289 0053 00       		.byte	0
 4290 0054 00       		.byte	0
 4291 0055 08       		.uleb128 0x8
 4292 0056 2E       		.uleb128 0x2e
 4293 0057 01       		.byte	0x1
 4294 0058 3F       		.uleb128 0x3f
 4295 0059 19       		.uleb128 0x19
 4296 005a 03       		.uleb128 0x3
 4297 005b 0E       		.uleb128 0xe
 4298 005c 3A       		.uleb128 0x3a
 4299 005d 0B       		.uleb128 0xb
 4300 005e 3B       		.uleb128 0x3b
 4301 005f 0B       		.uleb128 0xb
 4302 0060 27       		.uleb128 0x27
 4303 0061 19       		.uleb128 0x19
 4304 0062 11       		.uleb128 0x11
 4305 0063 01       		.uleb128 0x1
 4306 0064 12       		.uleb128 0x12
 4307 0065 06       		.uleb128 0x6
 4308 0066 40       		.uleb128 0x40
 4309 0067 18       		.uleb128 0x18
 4310 0068 9642     		.uleb128 0x2116
 4311 006a 19       		.uleb128 0x19
 4312 006b 01       		.uleb128 0x1
 4313 006c 13       		.uleb128 0x13
 4314 006d 00       		.byte	0
 4315 006e 00       		.byte	0
 4316 006f 09       		.uleb128 0x9
 4317 0070 34       		.uleb128 0x34
 4318 0071 00       		.byte	0
 4319 0072 03       		.uleb128 0x3
 4320 0073 0E       		.uleb128 0xe
 4321 0074 3A       		.uleb128 0x3a
 4322 0075 0B       		.uleb128 0xb
 4323 0076 3B       		.uleb128 0x3b
 4324 0077 0B       		.uleb128 0xb
 4325 0078 49       		.uleb128 0x49
 4326 0079 13       		.uleb128 0x13
 4327 007a 02       		.uleb128 0x2
 4328 007b 18       		.uleb128 0x18
 4329 007c 00       		.byte	0
 4330 007d 00       		.byte	0
 4331 007e 0A       		.uleb128 0xa
 4332 007f 2E       		.uleb128 0x2e
 4333 0080 01       		.byte	0x1
 4334 0081 3F       		.uleb128 0x3f
 4335 0082 19       		.uleb128 0x19
 4336 0083 03       		.uleb128 0x3
 4337 0084 0E       		.uleb128 0xe
 4338 0085 3A       		.uleb128 0x3a
 4339 0086 0B       		.uleb128 0xb
 4340 0087 3B       		.uleb128 0x3b
 4341 0088 0B       		.uleb128 0xb
 4342 0089 27       		.uleb128 0x27
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 98


 4343 008a 19       		.uleb128 0x19
 4344 008b 49       		.uleb128 0x49
 4345 008c 13       		.uleb128 0x13
 4346 008d 11       		.uleb128 0x11
 4347 008e 01       		.uleb128 0x1
 4348 008f 12       		.uleb128 0x12
 4349 0090 06       		.uleb128 0x6
 4350 0091 40       		.uleb128 0x40
 4351 0092 18       		.uleb128 0x18
 4352 0093 9642     		.uleb128 0x2116
 4353 0095 19       		.uleb128 0x19
 4354 0096 01       		.uleb128 0x1
 4355 0097 13       		.uleb128 0x13
 4356 0098 00       		.byte	0
 4357 0099 00       		.byte	0
 4358 009a 0B       		.uleb128 0xb
 4359 009b 05       		.uleb128 0x5
 4360 009c 00       		.byte	0
 4361 009d 03       		.uleb128 0x3
 4362 009e 0E       		.uleb128 0xe
 4363 009f 3A       		.uleb128 0x3a
 4364 00a0 0B       		.uleb128 0xb
 4365 00a1 3B       		.uleb128 0x3b
 4366 00a2 0B       		.uleb128 0xb
 4367 00a3 49       		.uleb128 0x49
 4368 00a4 13       		.uleb128 0x13
 4369 00a5 02       		.uleb128 0x2
 4370 00a6 18       		.uleb128 0x18
 4371 00a7 00       		.byte	0
 4372 00a8 00       		.byte	0
 4373 00a9 0C       		.uleb128 0xc
 4374 00aa 34       		.uleb128 0x34
 4375 00ab 00       		.byte	0
 4376 00ac 03       		.uleb128 0x3
 4377 00ad 08       		.uleb128 0x8
 4378 00ae 3A       		.uleb128 0x3a
 4379 00af 0B       		.uleb128 0xb
 4380 00b0 3B       		.uleb128 0x3b
 4381 00b1 0B       		.uleb128 0xb
 4382 00b2 49       		.uleb128 0x49
 4383 00b3 13       		.uleb128 0x13
 4384 00b4 02       		.uleb128 0x2
 4385 00b5 18       		.uleb128 0x18
 4386 00b6 00       		.byte	0
 4387 00b7 00       		.byte	0
 4388 00b8 0D       		.uleb128 0xd
 4389 00b9 0F       		.uleb128 0xf
 4390 00ba 00       		.byte	0
 4391 00bb 0B       		.uleb128 0xb
 4392 00bc 0B       		.uleb128 0xb
 4393 00bd 49       		.uleb128 0x49
 4394 00be 13       		.uleb128 0x13
 4395 00bf 00       		.byte	0
 4396 00c0 00       		.byte	0
 4397 00c1 0E       		.uleb128 0xe
 4398 00c2 2E       		.uleb128 0x2e
 4399 00c3 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 99


 4400 00c4 3F       		.uleb128 0x3f
 4401 00c5 19       		.uleb128 0x19
 4402 00c6 03       		.uleb128 0x3
 4403 00c7 0E       		.uleb128 0xe
 4404 00c8 3A       		.uleb128 0x3a
 4405 00c9 0B       		.uleb128 0xb
 4406 00ca 3B       		.uleb128 0x3b
 4407 00cb 0B       		.uleb128 0xb
 4408 00cc 27       		.uleb128 0x27
 4409 00cd 19       		.uleb128 0x19
 4410 00ce 11       		.uleb128 0x11
 4411 00cf 01       		.uleb128 0x1
 4412 00d0 12       		.uleb128 0x12
 4413 00d1 06       		.uleb128 0x6
 4414 00d2 40       		.uleb128 0x40
 4415 00d3 18       		.uleb128 0x18
 4416 00d4 9742     		.uleb128 0x2117
 4417 00d6 19       		.uleb128 0x19
 4418 00d7 01       		.uleb128 0x1
 4419 00d8 13       		.uleb128 0x13
 4420 00d9 00       		.byte	0
 4421 00da 00       		.byte	0
 4422 00db 0F       		.uleb128 0xf
 4423 00dc 2E       		.uleb128 0x2e
 4424 00dd 01       		.byte	0x1
 4425 00de 3F       		.uleb128 0x3f
 4426 00df 19       		.uleb128 0x19
 4427 00e0 03       		.uleb128 0x3
 4428 00e1 0E       		.uleb128 0xe
 4429 00e2 3A       		.uleb128 0x3a
 4430 00e3 0B       		.uleb128 0xb
 4431 00e4 3B       		.uleb128 0x3b
 4432 00e5 05       		.uleb128 0x5
 4433 00e6 27       		.uleb128 0x27
 4434 00e7 19       		.uleb128 0x19
 4435 00e8 49       		.uleb128 0x49
 4436 00e9 13       		.uleb128 0x13
 4437 00ea 11       		.uleb128 0x11
 4438 00eb 01       		.uleb128 0x1
 4439 00ec 12       		.uleb128 0x12
 4440 00ed 06       		.uleb128 0x6
 4441 00ee 40       		.uleb128 0x40
 4442 00ef 18       		.uleb128 0x18
 4443 00f0 9742     		.uleb128 0x2117
 4444 00f2 19       		.uleb128 0x19
 4445 00f3 01       		.uleb128 0x1
 4446 00f4 13       		.uleb128 0x13
 4447 00f5 00       		.byte	0
 4448 00f6 00       		.byte	0
 4449 00f7 10       		.uleb128 0x10
 4450 00f8 05       		.uleb128 0x5
 4451 00f9 00       		.byte	0
 4452 00fa 03       		.uleb128 0x3
 4453 00fb 0E       		.uleb128 0xe
 4454 00fc 3A       		.uleb128 0x3a
 4455 00fd 0B       		.uleb128 0xb
 4456 00fe 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 100


 4457 00ff 05       		.uleb128 0x5
 4458 0100 49       		.uleb128 0x49
 4459 0101 13       		.uleb128 0x13
 4460 0102 02       		.uleb128 0x2
 4461 0103 18       		.uleb128 0x18
 4462 0104 00       		.byte	0
 4463 0105 00       		.byte	0
 4464 0106 11       		.uleb128 0x11
 4465 0107 34       		.uleb128 0x34
 4466 0108 00       		.byte	0
 4467 0109 03       		.uleb128 0x3
 4468 010a 0E       		.uleb128 0xe
 4469 010b 3A       		.uleb128 0x3a
 4470 010c 0B       		.uleb128 0xb
 4471 010d 3B       		.uleb128 0x3b
 4472 010e 05       		.uleb128 0x5
 4473 010f 49       		.uleb128 0x49
 4474 0110 13       		.uleb128 0x13
 4475 0111 02       		.uleb128 0x2
 4476 0112 18       		.uleb128 0x18
 4477 0113 00       		.byte	0
 4478 0114 00       		.byte	0
 4479 0115 12       		.uleb128 0x12
 4480 0116 2E       		.uleb128 0x2e
 4481 0117 00       		.byte	0
 4482 0118 3F       		.uleb128 0x3f
 4483 0119 19       		.uleb128 0x19
 4484 011a 03       		.uleb128 0x3
 4485 011b 0E       		.uleb128 0xe
 4486 011c 3A       		.uleb128 0x3a
 4487 011d 0B       		.uleb128 0xb
 4488 011e 3B       		.uleb128 0x3b
 4489 011f 05       		.uleb128 0x5
 4490 0120 11       		.uleb128 0x11
 4491 0121 01       		.uleb128 0x1
 4492 0122 12       		.uleb128 0x12
 4493 0123 06       		.uleb128 0x6
 4494 0124 40       		.uleb128 0x40
 4495 0125 18       		.uleb128 0x18
 4496 0126 9742     		.uleb128 0x2117
 4497 0128 19       		.uleb128 0x19
 4498 0129 00       		.byte	0
 4499 012a 00       		.byte	0
 4500 012b 13       		.uleb128 0x13
 4501 012c 2E       		.uleb128 0x2e
 4502 012d 00       		.byte	0
 4503 012e 3F       		.uleb128 0x3f
 4504 012f 19       		.uleb128 0x19
 4505 0130 03       		.uleb128 0x3
 4506 0131 0E       		.uleb128 0xe
 4507 0132 3A       		.uleb128 0x3a
 4508 0133 0B       		.uleb128 0xb
 4509 0134 3B       		.uleb128 0x3b
 4510 0135 05       		.uleb128 0x5
 4511 0136 11       		.uleb128 0x11
 4512 0137 01       		.uleb128 0x1
 4513 0138 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 101


 4514 0139 06       		.uleb128 0x6
 4515 013a 40       		.uleb128 0x40
 4516 013b 18       		.uleb128 0x18
 4517 013c 9642     		.uleb128 0x2116
 4518 013e 19       		.uleb128 0x19
 4519 013f 00       		.byte	0
 4520 0140 00       		.byte	0
 4521 0141 14       		.uleb128 0x14
 4522 0142 2E       		.uleb128 0x2e
 4523 0143 01       		.byte	0x1
 4524 0144 3F       		.uleb128 0x3f
 4525 0145 19       		.uleb128 0x19
 4526 0146 03       		.uleb128 0x3
 4527 0147 0E       		.uleb128 0xe
 4528 0148 3A       		.uleb128 0x3a
 4529 0149 0B       		.uleb128 0xb
 4530 014a 3B       		.uleb128 0x3b
 4531 014b 05       		.uleb128 0x5
 4532 014c 27       		.uleb128 0x27
 4533 014d 19       		.uleb128 0x19
 4534 014e 11       		.uleb128 0x11
 4535 014f 01       		.uleb128 0x1
 4536 0150 12       		.uleb128 0x12
 4537 0151 06       		.uleb128 0x6
 4538 0152 40       		.uleb128 0x40
 4539 0153 18       		.uleb128 0x18
 4540 0154 9642     		.uleb128 0x2116
 4541 0156 19       		.uleb128 0x19
 4542 0157 01       		.uleb128 0x1
 4543 0158 13       		.uleb128 0x13
 4544 0159 00       		.byte	0
 4545 015a 00       		.byte	0
 4546 015b 15       		.uleb128 0x15
 4547 015c 01       		.uleb128 0x1
 4548 015d 01       		.byte	0x1
 4549 015e 49       		.uleb128 0x49
 4550 015f 13       		.uleb128 0x13
 4551 0160 01       		.uleb128 0x1
 4552 0161 13       		.uleb128 0x13
 4553 0162 00       		.byte	0
 4554 0163 00       		.byte	0
 4555 0164 16       		.uleb128 0x16
 4556 0165 21       		.uleb128 0x21
 4557 0166 00       		.byte	0
 4558 0167 49       		.uleb128 0x49
 4559 0168 13       		.uleb128 0x13
 4560 0169 2F       		.uleb128 0x2f
 4561 016a 0B       		.uleb128 0xb
 4562 016b 00       		.byte	0
 4563 016c 00       		.byte	0
 4564 016d 17       		.uleb128 0x17
 4565 016e 2E       		.uleb128 0x2e
 4566 016f 01       		.byte	0x1
 4567 0170 3F       		.uleb128 0x3f
 4568 0171 19       		.uleb128 0x19
 4569 0172 03       		.uleb128 0x3
 4570 0173 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 102


 4571 0174 3A       		.uleb128 0x3a
 4572 0175 0B       		.uleb128 0xb
 4573 0176 3B       		.uleb128 0x3b
 4574 0177 05       		.uleb128 0x5
 4575 0178 11       		.uleb128 0x11
 4576 0179 01       		.uleb128 0x1
 4577 017a 12       		.uleb128 0x12
 4578 017b 06       		.uleb128 0x6
 4579 017c 40       		.uleb128 0x40
 4580 017d 18       		.uleb128 0x18
 4581 017e 9642     		.uleb128 0x2116
 4582 0180 19       		.uleb128 0x19
 4583 0181 01       		.uleb128 0x1
 4584 0182 13       		.uleb128 0x13
 4585 0183 00       		.byte	0
 4586 0184 00       		.byte	0
 4587 0185 18       		.uleb128 0x18
 4588 0186 34       		.uleb128 0x34
 4589 0187 00       		.byte	0
 4590 0188 03       		.uleb128 0x3
 4591 0189 08       		.uleb128 0x8
 4592 018a 3A       		.uleb128 0x3a
 4593 018b 0B       		.uleb128 0xb
 4594 018c 3B       		.uleb128 0x3b
 4595 018d 05       		.uleb128 0x5
 4596 018e 49       		.uleb128 0x49
 4597 018f 13       		.uleb128 0x13
 4598 0190 02       		.uleb128 0x2
 4599 0191 18       		.uleb128 0x18
 4600 0192 00       		.byte	0
 4601 0193 00       		.byte	0
 4602 0194 19       		.uleb128 0x19
 4603 0195 0B       		.uleb128 0xb
 4604 0196 01       		.byte	0x1
 4605 0197 11       		.uleb128 0x11
 4606 0198 01       		.uleb128 0x1
 4607 0199 12       		.uleb128 0x12
 4608 019a 06       		.uleb128 0x6
 4609 019b 00       		.byte	0
 4610 019c 00       		.byte	0
 4611 019d 1A       		.uleb128 0x1a
 4612 019e 2E       		.uleb128 0x2e
 4613 019f 01       		.byte	0x1
 4614 01a0 3F       		.uleb128 0x3f
 4615 01a1 19       		.uleb128 0x19
 4616 01a2 03       		.uleb128 0x3
 4617 01a3 0E       		.uleb128 0xe
 4618 01a4 3A       		.uleb128 0x3a
 4619 01a5 0B       		.uleb128 0xb
 4620 01a6 3B       		.uleb128 0x3b
 4621 01a7 05       		.uleb128 0x5
 4622 01a8 49       		.uleb128 0x49
 4623 01a9 13       		.uleb128 0x13
 4624 01aa 11       		.uleb128 0x11
 4625 01ab 01       		.uleb128 0x1
 4626 01ac 12       		.uleb128 0x12
 4627 01ad 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 103


 4628 01ae 40       		.uleb128 0x40
 4629 01af 18       		.uleb128 0x18
 4630 01b0 9642     		.uleb128 0x2116
 4631 01b2 19       		.uleb128 0x19
 4632 01b3 01       		.uleb128 0x1
 4633 01b4 13       		.uleb128 0x13
 4634 01b5 00       		.byte	0
 4635 01b6 00       		.byte	0
 4636 01b7 1B       		.uleb128 0x1b
 4637 01b8 34       		.uleb128 0x34
 4638 01b9 00       		.byte	0
 4639 01ba 03       		.uleb128 0x3
 4640 01bb 08       		.uleb128 0x8
 4641 01bc 3A       		.uleb128 0x3a
 4642 01bd 0B       		.uleb128 0xb
 4643 01be 3B       		.uleb128 0x3b
 4644 01bf 05       		.uleb128 0x5
 4645 01c0 49       		.uleb128 0x49
 4646 01c1 13       		.uleb128 0x13
 4647 01c2 00       		.byte	0
 4648 01c3 00       		.byte	0
 4649 01c4 1C       		.uleb128 0x1c
 4650 01c5 34       		.uleb128 0x34
 4651 01c6 00       		.byte	0
 4652 01c7 03       		.uleb128 0x3
 4653 01c8 0E       		.uleb128 0xe
 4654 01c9 3A       		.uleb128 0x3a
 4655 01ca 0B       		.uleb128 0xb
 4656 01cb 3B       		.uleb128 0x3b
 4657 01cc 05       		.uleb128 0x5
 4658 01cd 49       		.uleb128 0x49
 4659 01ce 13       		.uleb128 0x13
 4660 01cf 00       		.byte	0
 4661 01d0 00       		.byte	0
 4662 01d1 1D       		.uleb128 0x1d
 4663 01d2 34       		.uleb128 0x34
 4664 01d3 00       		.byte	0
 4665 01d4 03       		.uleb128 0x3
 4666 01d5 0E       		.uleb128 0xe
 4667 01d6 3A       		.uleb128 0x3a
 4668 01d7 0B       		.uleb128 0xb
 4669 01d8 3B       		.uleb128 0x3b
 4670 01d9 0B       		.uleb128 0xb
 4671 01da 49       		.uleb128 0x49
 4672 01db 13       		.uleb128 0x13
 4673 01dc 3F       		.uleb128 0x3f
 4674 01dd 19       		.uleb128 0x19
 4675 01de 02       		.uleb128 0x2
 4676 01df 18       		.uleb128 0x18
 4677 01e0 00       		.byte	0
 4678 01e1 00       		.byte	0
 4679 01e2 1E       		.uleb128 0x1e
 4680 01e3 34       		.uleb128 0x34
 4681 01e4 00       		.byte	0
 4682 01e5 03       		.uleb128 0x3
 4683 01e6 0E       		.uleb128 0xe
 4684 01e7 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 104


 4685 01e8 0B       		.uleb128 0xb
 4686 01e9 3B       		.uleb128 0x3b
 4687 01ea 05       		.uleb128 0x5
 4688 01eb 49       		.uleb128 0x49
 4689 01ec 13       		.uleb128 0x13
 4690 01ed 3F       		.uleb128 0x3f
 4691 01ee 19       		.uleb128 0x19
 4692 01ef 02       		.uleb128 0x2
 4693 01f0 18       		.uleb128 0x18
 4694 01f1 00       		.byte	0
 4695 01f2 00       		.byte	0
 4696 01f3 00       		.byte	0
 4697              		.section	.debug_aranges,"",%progbits
 4698 0000 9C000000 		.4byte	0x9c
 4699 0004 0200     		.2byte	0x2
 4700 0006 00000000 		.4byte	.Ldebug_info0
 4701 000a 04       		.byte	0x4
 4702 000b 00       		.byte	0
 4703 000c 0000     		.2byte	0
 4704 000e 0000     		.2byte	0
 4705 0010 00000000 		.4byte	.LFB34
 4706 0014 28000000 		.4byte	.LFE34-.LFB34
 4707 0018 00000000 		.4byte	.LFB35
 4708 001c 78000000 		.4byte	.LFE35-.LFB35
 4709 0020 00000000 		.4byte	.LFB36
 4710 0024 84050000 		.4byte	.LFE36-.LFB36
 4711 0028 00000000 		.4byte	.LFB37
 4712 002c 84000000 		.4byte	.LFE37-.LFB37
 4713 0030 00000000 		.4byte	.LFB38
 4714 0034 20000000 		.4byte	.LFE38-.LFB38
 4715 0038 00000000 		.4byte	.LFB39
 4716 003c 08000000 		.4byte	.LFE39-.LFB39
 4717 0040 00000000 		.4byte	.LFB40
 4718 0044 18000000 		.4byte	.LFE40-.LFB40
 4719 0048 00000000 		.4byte	.LFB41
 4720 004c 98000000 		.4byte	.LFE41-.LFB41
 4721 0050 00000000 		.4byte	.LFB42
 4722 0054 98000000 		.4byte	.LFE42-.LFB42
 4723 0058 00000000 		.4byte	.LFB43
 4724 005c 98000000 		.4byte	.LFE43-.LFB43
 4725 0060 00000000 		.4byte	.LFB44
 4726 0064 50010000 		.4byte	.LFE44-.LFB44
 4727 0068 00000000 		.4byte	.LFB45
 4728 006c 50010000 		.4byte	.LFE45-.LFB45
 4729 0070 00000000 		.4byte	.LFB46
 4730 0074 14020000 		.4byte	.LFE46-.LFB46
 4731 0078 00000000 		.4byte	.LFB47
 4732 007c 20020000 		.4byte	.LFE47-.LFB47
 4733 0080 00000000 		.4byte	.LFB48
 4734 0084 54010000 		.4byte	.LFE48-.LFB48
 4735 0088 00000000 		.4byte	.LFB49
 4736 008c 00010000 		.4byte	.LFE49-.LFB49
 4737 0090 00000000 		.4byte	.LFB50
 4738 0094 80000000 		.4byte	.LFE50-.LFB50
 4739 0098 00000000 		.4byte	0
 4740 009c 00000000 		.4byte	0
 4741              		.section	.debug_ranges,"",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 105


 4742              	.Ldebug_ranges0:
 4743 0000 00000000 		.4byte	.LFB34
 4744 0004 28000000 		.4byte	.LFE34
 4745 0008 00000000 		.4byte	.LFB35
 4746 000c 78000000 		.4byte	.LFE35
 4747 0010 00000000 		.4byte	.LFB36
 4748 0014 84050000 		.4byte	.LFE36
 4749 0018 00000000 		.4byte	.LFB37
 4750 001c 84000000 		.4byte	.LFE37
 4751 0020 00000000 		.4byte	.LFB38
 4752 0024 20000000 		.4byte	.LFE38
 4753 0028 00000000 		.4byte	.LFB39
 4754 002c 08000000 		.4byte	.LFE39
 4755 0030 00000000 		.4byte	.LFB40
 4756 0034 18000000 		.4byte	.LFE40
 4757 0038 00000000 		.4byte	.LFB41
 4758 003c 98000000 		.4byte	.LFE41
 4759 0040 00000000 		.4byte	.LFB42
 4760 0044 98000000 		.4byte	.LFE42
 4761 0048 00000000 		.4byte	.LFB43
 4762 004c 98000000 		.4byte	.LFE43
 4763 0050 00000000 		.4byte	.LFB44
 4764 0054 50010000 		.4byte	.LFE44
 4765 0058 00000000 		.4byte	.LFB45
 4766 005c 50010000 		.4byte	.LFE45
 4767 0060 00000000 		.4byte	.LFB46
 4768 0064 14020000 		.4byte	.LFE46
 4769 0068 00000000 		.4byte	.LFB47
 4770 006c 20020000 		.4byte	.LFE47
 4771 0070 00000000 		.4byte	.LFB48
 4772 0074 54010000 		.4byte	.LFE48
 4773 0078 00000000 		.4byte	.LFB49
 4774 007c 00010000 		.4byte	.LFE49
 4775 0080 00000000 		.4byte	.LFB50
 4776 0084 80000000 		.4byte	.LFE50
 4777 0088 00000000 		.4byte	0
 4778 008c 00000000 		.4byte	0
 4779              		.section	.debug_line,"",%progbits
 4780              	.Ldebug_line0:
 4781 0000 EB040000 		.section	.debug_str,"MS",%progbits,1
 4781      0200CB00 
 4781      00000201 
 4781      FB0E0D00 
 4781      01010101 
 4782              	.LASF99:
 4783 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 4783      72725F63 
 4783      73706F74 
 4783      00
 4784              	.LASF70:
 4785 000d 706F7369 		.ascii	"position\000"
 4785      74696F6E 
 4785      00
 4786              	.LASF42:
 4787 0016 42415F73 		.ascii	"BA_start\000"
 4787      74617274 
 4787      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 106


 4788              	.LASF38:
 4789 001f 73686C64 		.ascii	"shldr_init\000"
 4789      725F696E 
 4789      697400
 4790              	.LASF19:
 4791 002a 74696C74 		.ascii	"tilt_start\000"
 4791      5F737461 
 4791      727400
 4792              	.LASF67:
 4793 0035 66696C6C 		.ascii	"fill_data_array\000"
 4793      5F646174 
 4793      615F6172 
 4793      72617900 
 4794              	.LASF2:
 4795 0045 73686F72 		.ascii	"short int\000"
 4795      7420696E 
 4795      7400
 4796              	.LASF26:
 4797 004f 726F7461 		.ascii	"rotate_start\000"
 4797      74655F73 
 4797      74617274 
 4797      00
 4798              	.LASF17:
 4799 005c 73697A65 		.ascii	"sizetype\000"
 4799      74797065 
 4799      00
 4800              	.LASF44:
 4801 0065 42415F65 		.ascii	"BA_execute\000"
 4801      78656375 
 4801      746500
 4802              	.LASF25:
 4803 0070 77726973 		.ascii	"wristRotate_states\000"
 4803      74526F74 
 4803      6174655F 
 4803      73746174 
 4803      657300
 4804              	.LASF72:
 4805 0083 746F7271 		.ascii	"torque\000"
 4805      756500
 4806              	.LASF87:
 4807 008a 77697A6E 		.ascii	"wiznet\000"
 4807      657400
 4808              	.LASF83:
 4809 0091 64697265 		.ascii	"direction\000"
 4809      6374696F 
 4809      6E00
 4810              	.LASF6:
 4811 009b 6C6F6E67 		.ascii	"long long int\000"
 4811      206C6F6E 
 4811      6720696E 
 4811      7400
 4812              	.LASF100:
 4813 00a9 57525F61 		.ascii	"WR_array\000"
 4813      72726179 
 4813      00
 4814              	.LASF43:
 4815 00b2 42415F69 		.ascii	"BA_init\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 107


 4815      6E697400 
 4816              	.LASF39:
 4817 00ba 73686C64 		.ascii	"shldr_execute\000"
 4817      725F6578 
 4817      65637574 
 4817      6500
 4818              	.LASF36:
 4819 00c8 73686F75 		.ascii	"shoulder_states\000"
 4819      6C646572 
 4819      5F737461 
 4819      74657300 
 4820              	.LASF106:
 4821 00d8 62617365 		.ascii	"baseAzimuth_state\000"
 4821      417A696D 
 4821      7574685F 
 4821      73746174 
 4821      6500
 4822              	.LASF102:
 4823 00ea 77726973 		.ascii	"wristTilt_state\000"
 4823      7454696C 
 4823      745F7374 
 4823      61746500 
 4824              	.LASF77:
 4825 00fa 656C626F 		.ascii	"elbow\000"
 4825      7700
 4826              	.LASF10:
 4827 0100 75696E74 		.ascii	"uint16\000"
 4827      313600
 4828              	.LASF91:
 4829 0107 656C6277 		.ascii	"elbw_arr_cspot\000"
 4829      5F617272 
 4829      5F637370 
 4829      6F7400
 4830              	.LASF76:
 4831 0116 77726973 		.ascii	"wristRotate\000"
 4831      74526F74 
 4831      61746500 
 4832              	.LASF98:
 4833 0122 57545F61 		.ascii	"WT_array\000"
 4833      72726179 
 4833      00
 4834              	.LASF27:
 4835 012b 726F7461 		.ascii	"rotate_init\000"
 4835      74655F69 
 4835      6E697400 
 4836              	.LASF101:
 4837 0137 74696D65 		.ascii	"timerFlag\000"
 4837      72466C61 
 4837      6700
 4838              	.LASF45:
 4839 0141 42415F77 		.ascii	"BA_wait\000"
 4839      61697400 
 4840              	.LASF71:
 4841 0149 53657453 		.ascii	"SetServoTorque\000"
 4841      6572766F 
 4841      546F7271 
 4841      756500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 108


 4842              	.LASF13:
 4843 0158 696E7431 		.ascii	"int16\000"
 4843      3600
 4844              	.LASF0:
 4845 015e 7369676E 		.ascii	"signed char\000"
 4845      65642063 
 4845      68617200 
 4846              	.LASF90:
 4847 016a 74657374 		.ascii	"test_array\000"
 4847      5F617272 
 4847      617900
 4848              	.LASF14:
 4849 0175 666C6F61 		.ascii	"float\000"
 4849      7400
 4850              	.LASF32:
 4851 017b 656C6277 		.ascii	"elbw_start\000"
 4851      5F737461 
 4851      727400
 4852              	.LASF97:
 4853 0186 57545F61 		.ascii	"WT_arr_cspot\000"
 4853      72725F63 
 4853      73706F74 
 4853      00
 4854              	.LASF79:
 4855 0193 62617365 		.ascii	"baseAzimuth\000"
 4855      417A696D 
 4855      75746800 
 4856              	.LASF12:
 4857 019f 696E7438 		.ascii	"int8\000"
 4857      00
 4858              	.LASF75:
 4859 01a4 77726973 		.ascii	"wristTilt\000"
 4859      7454696C 
 4859      7400
 4860              	.LASF56:
 4861 01ae 6D616B65 		.ascii	"make_command\000"
 4861      5F636F6D 
 4861      6D616E64 
 4861      00
 4862              	.LASF4:
 4863 01bb 6C6F6E67 		.ascii	"long int\000"
 4863      20696E74 
 4863      00
 4864              	.LASF41:
 4865 01c4 62617365 		.ascii	"baseAzimuth_states\000"
 4865      417A696D 
 4865      7574685F 
 4865      73746174 
 4865      657300
 4866              	.LASF29:
 4867 01d7 726F7461 		.ascii	"rotate_wait\000"
 4867      74655F77 
 4867      61697400 
 4868              	.LASF89:
 4869 01e3 66696E5F 		.ascii	"fin_exec\000"
 4869      65786563 
 4869      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 109


 4870              	.LASF66:
 4871 01ec 73656E64 		.ascii	"send_feedback\000"
 4871      5F666565 
 4871      64626163 
 4871      6B00
 4872              	.LASF65:
 4873 01fa 66656564 		.ascii	"feedback\000"
 4873      6261636B 
 4873      00
 4874              	.LASF95:
 4875 0203 42415F61 		.ascii	"BA_arr_cspot\000"
 4875      72725F63 
 4875      73706F74 
 4875      00
 4876              	.LASF20:
 4877 0210 74696C74 		.ascii	"tilt_init\000"
 4877      5F696E69 
 4877      7400
 4878              	.LASF9:
 4879 021a 75696E74 		.ascii	"uint8\000"
 4879      3800
 4880              	.LASF37:
 4881 0220 73686C64 		.ascii	"shldr_start\000"
 4881      725F7374 
 4881      61727400 
 4882              	.LASF108:
 4883 022c 2E5C6D61 		.ascii	".\\main.c\000"
 4883      696E2E63 
 4883      00
 4884              	.LASF80:
 4885 0235 696E6974 		.ascii	"initialize\000"
 4885      69616C69 
 4885      7A6500
 4886              	.LASF1:
 4887 0240 756E7369 		.ascii	"unsigned char\000"
 4887      676E6564 
 4887      20636861 
 4887      7200
 4888              	.LASF48:
 4889 024e 6973725F 		.ascii	"isr_var\000"
 4889      76617200 
 4890              	.LASF82:
 4891 0256 636F756E 		.ascii	"counter\000"
 4891      74657200 
 4892              	.LASF105:
 4893 025e 73686F75 		.ascii	"shoulder_state\000"
 4893      6C646572 
 4893      5F737461 
 4893      746500
 4894              	.LASF59:
 4895 026d 62797465 		.ascii	"byte2\000"
 4895      3200
 4896              	.LASF23:
 4897 0273 74696C74 		.ascii	"tilt_feedback\000"
 4897      5F666565 
 4897      64626163 
 4897      6B00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 110


 4898              	.LASF33:
 4899 0281 656C6277 		.ascii	"elbw_init\000"
 4899      5F696E69 
 4899      7400
 4900              	.LASF47:
 4901 028b 6E756D5F 		.ascii	"num_items\000"
 4901      6974656D 
 4901      7300
 4902              	.LASF28:
 4903 0295 726F7461 		.ascii	"rotate_control\000"
 4903      74655F63 
 4903      6F6E7472 
 4903      6F6C00
 4904              	.LASF7:
 4905 02a4 6C6F6E67 		.ascii	"long long unsigned int\000"
 4905      206C6F6E 
 4905      6720756E 
 4905      7369676E 
 4905      65642069 
 4906              	.LASF8:
 4907 02bb 756E7369 		.ascii	"unsigned int\000"
 4907      676E6564 
 4907      20696E74 
 4907      00
 4908              	.LASF5:
 4909 02c8 6C6F6E67 		.ascii	"long unsigned int\000"
 4909      20756E73 
 4909      69676E65 
 4909      6420696E 
 4909      7400
 4910              	.LASF74:
 4911 02da 73706565 		.ascii	"speed\000"
 4911      6400
 4912              	.LASF22:
 4913 02e0 74696C74 		.ascii	"tilt_wait\000"
 4913      5F776169 
 4913      7400
 4914              	.LASF40:
 4915 02ea 73686C64 		.ascii	"shldr_wait\000"
 4915      725F7761 
 4915      697400
 4916              	.LASF3:
 4917 02f5 73686F72 		.ascii	"short unsigned int\000"
 4917      7420756E 
 4917      7369676E 
 4917      65642069 
 4917      6E7400
 4918              	.LASF24:
 4919 0308 77726973 		.ascii	"wristTilt_states\000"
 4919      7454696C 
 4919      745F7374 
 4919      61746573 
 4919      00
 4920              	.LASF46:
 4921 0319 61765F61 		.ascii	"av_array\000"
 4921      72726179 
 4921      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 111


 4922              	.LASF31:
 4923 0322 656C626F 		.ascii	"elbow_states\000"
 4923      775F7374 
 4923      61746573 
 4923      00
 4924              	.LASF16:
 4925 032f 63686172 		.ascii	"char\000"
 4925      00
 4926              	.LASF109:
 4927 0334 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 4927      73657273 
 4927      5C53616D 
 4927      75656C5C 
 4927      446F6375 
 4928 0362 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 4928      5C61726D 
 4928      5F636F6E 
 4928      74726F6C 
 4928      6C65725F 
 4929 0392 00       		.ascii	"\000"
 4930              	.LASF81:
 4931 0393 6D61696E 		.ascii	"main\000"
 4931      00
 4932              	.LASF51:
 4933 0398 6375725F 		.ascii	"cur_pos\000"
 4933      706F7300 
 4934              	.LASF68:
 4935 03a0 53657276 		.ascii	"ServoGoalPosition\000"
 4935      6F476F61 
 4935      6C506F73 
 4935      6974696F 
 4935      6E00
 4936              	.LASF84:
 4937 03b2 74656D70 		.ascii	"temp_val\000"
 4937      5F76616C 
 4937      00
 4938              	.LASF92:
 4939 03bb 656C626F 		.ascii	"elbow_array\000"
 4939      775F6172 
 4939      72617900 
 4940              	.LASF64:
 4941 03c7 6368616E 		.ascii	"channel\000"
 4941      6E656C00 
 4942              	.LASF96:
 4943 03cf 62617365 		.ascii	"baseAz_array\000"
 4943      417A5F61 
 4943      72726179 
 4943      00
 4944              	.LASF94:
 4945 03dc 73686F75 		.ascii	"shoulder_array\000"
 4945      6C646572 
 4945      5F617272 
 4945      617900
 4946              	.LASF57:
 4947 03eb 696E666F 		.ascii	"info_array\000"
 4947      5F617272 
 4947      617900
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 112


 4948              	.LASF78:
 4949 03f6 73686F75 		.ascii	"shoulder\000"
 4949      6C646572 
 4949      00
 4950              	.LASF11:
 4951 03ff 75696E74 		.ascii	"uint32\000"
 4951      333200
 4952              	.LASF21:
 4953 0406 74696C74 		.ascii	"tilt_control\000"
 4953      5F636F6E 
 4953      74726F6C 
 4953      00
 4954              	.LASF50:
 4955 0413 706F735F 		.ascii	"pos_to_vel\000"
 4955      746F5F76 
 4955      656C00
 4956              	.LASF18:
 4957 041e 74696D65 		.ascii	"time_t\000"
 4957      5F7400
 4958              	.LASF52:
 4959 0425 61727261 		.ascii	"array\000"
 4959      7900
 4960              	.LASF53:
 4961 042b 41525241 		.ascii	"ARRAY_SIZE\000"
 4961      595F5349 
 4961      5A4500
 4962              	.LASF103:
 4963 0436 77726973 		.ascii	"wristRotate_state\000"
 4963      74526F74 
 4963      6174655F 
 4963      73746174 
 4963      6500
 4964              	.LASF63:
 4965 0448 706F7446 		.ascii	"potFeedback\000"
 4965      65656462 
 4965      61636B00 
 4966              	.LASF93:
 4967 0454 73686C64 		.ascii	"shldr_arr_cspot\000"
 4967      725F6172 
 4967      725F6373 
 4967      706F7400 
 4968              	.LASF58:
 4969 0464 62797465 		.ascii	"byte1\000"
 4969      3100
 4970              	.LASF104:
 4971 046a 656C626F 		.ascii	"elbow_state\000"
 4971      775F7374 
 4971      61746500 
 4972              	.LASF60:
 4973 0476 74656D70 		.ascii	"temp1\000"
 4973      3100
 4974              	.LASF61:
 4975 047c 74656D70 		.ascii	"temp2\000"
 4975      3200
 4976              	.LASF62:
 4977 0482 74656D70 		.ascii	"temp3\000"
 4977      3300
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 113


 4978              	.LASF15:
 4979 0488 646F7562 		.ascii	"double\000"
 4979      6C6500
 4980              	.LASF69:
 4981 048f 73657276 		.ascii	"servoID\000"
 4981      6F494400 
 4982              	.LASF49:
 4983 0497 74696D65 		.ascii	"timer_isr\000"
 4983      725F6973 
 4983      7200
 4984              	.LASF88:
 4985 04a1 6E65775F 		.ascii	"new_pack\000"
 4985      7061636B 
 4985      00
 4986              	.LASF73:
 4987 04aa 53657276 		.ascii	"ServoSpeed\000"
 4987      6F537065 
 4987      656400
 4988              	.LASF107:
 4989 04b5 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 4989      4320342E 
 4989      382E3420 
 4989      32303134 
 4989      30353236 
 4990 04e8 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 4990      20726576 
 4990      6973696F 
 4990      6E203231 
 4990      31333538 
 4991 051b 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 4991      74643D67 
 4991      6E753939 
 4991      202D6666 
 4991      756E6374 
 4992              	.LASF35:
 4993 053c 656C6277 		.ascii	"elbw_wait\000"
 4993      5F776169 
 4993      7400
 4994              	.LASF55:
 4995 0546 61766572 		.ascii	"average\000"
 4995      61676500 
 4996              	.LASF86:
 4997 054e 64617461 		.ascii	"data_array\000"
 4997      5F617272 
 4997      617900
 4998              	.LASF54:
 4999 0559 636F6D6D 		.ascii	"command\000"
 4999      616E6400 
 5000              	.LASF34:
 5001 0561 656C6277 		.ascii	"elbw_execute\000"
 5001      5F657865 
 5001      63757465 
 5001      00
 5002              	.LASF85:
 5003 056e 696E6372 		.ascii	"increasing\000"
 5003      65617369 
 5003      6E6700
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc5Uyw6h.s 			page 114


 5004              	.LASF30:
 5005 0579 726F7461 		.ascii	"rotate_feedback\000"
 5005      74655F66 
 5005      65656462 
 5005      61636B00 
 5006              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

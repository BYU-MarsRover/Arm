ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	wiznet,1,1
  44              		.comm	test_array,22,4
  45              		.global	WT_FLAG
  46              		.bss
  47              		.type	WT_FLAG, %object
  48              		.size	WT_FLAG, 1
  49              	WT_FLAG:
  50 0000 00       		.space	1
  51              		.global	WR_FLAG
  52              		.type	WR_FLAG, %object
  53              		.size	WR_FLAG, 1
  54              	WR_FLAG:
  55 0001 00       		.space	1
  56              		.global	ELBOW_FLAG
  57              		.type	ELBOW_FLAG, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 2


  58              		.size	ELBOW_FLAG, 1
  59              	ELBOW_FLAG:
  60 0002 00       		.space	1
  61              		.global	SHOULDER_FLAG
  62              		.type	SHOULDER_FLAG, %object
  63              		.size	SHOULDER_FLAG, 1
  64              	SHOULDER_FLAG:
  65 0003 00       		.space	1
  66              		.global	BA_FLAG
  67              		.type	BA_FLAG, %object
  68              		.size	BA_FLAG, 1
  69              	BA_FLAG:
  70 0004 00       		.space	1
  71              		.global	EFFECTOR_FLAG
  72              		.type	EFFECTOR_FLAG, %object
  73              		.size	EFFECTOR_FLAG, 1
  74              	EFFECTOR_FLAG:
  75 0005 00       		.space	1
  76              		.global	dropped_packets
  77              		.align	1
  78              		.type	dropped_packets, %object
  79              		.size	dropped_packets, 2
  80              	dropped_packets:
  81 0006 0000     		.space	2
  82              		.global	fail_safe_errors
  83              		.align	1
  84              		.type	fail_safe_errors, %object
  85              		.size	fail_safe_errors, 2
  86              	fail_safe_errors:
  87 0008 0000     		.space	2
  88              		.global	shldr_errors
  89              		.align	1
  90              		.type	shldr_errors, %object
  91              		.size	shldr_errors, 2
  92              	shldr_errors:
  93 000a 0000     		.space	2
  94              		.global	elbw_errors
  95              		.align	1
  96              		.type	elbw_errors, %object
  97              		.size	elbw_errors, 2
  98              	elbw_errors:
  99 000c 0000     		.space	2
 100              		.global	BA_errors
 101              		.align	1
 102              		.type	BA_errors, %object
 103              		.size	BA_errors, 2
 104              	BA_errors:
 105 000e 0000     		.space	2
 106              		.global	WT_errors
 107              		.align	1
 108              		.type	WT_errors, %object
 109              		.size	WT_errors, 2
 110              	WT_errors:
 111 0010 0000     		.space	2
 112              		.global	WR_errors
 113              		.align	1
 114              		.type	WR_errors, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 3


 115              		.size	WR_errors, 2
 116              	WR_errors:
 117 0012 0000     		.space	2
 118              		.global	eff_errors
 119              		.align	1
 120              		.type	eff_errors, %object
 121              		.size	eff_errors, 2
 122              	eff_errors:
 123 0014 0000     		.space	2
 124              		.comm	timerFlag,1,1
 125              		.section	.text.timer_isr,"ax",%progbits
 126              		.align	2
 127              		.global	timer_isr
 128              		.code	16
 129              		.thumb_func
 130              		.type	timer_isr, %function
 131              	timer_isr:
 132              	.LFB34:
 133              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 134              		.loc 1 11 0
 135              		.cfi_startproc
 136 0000 80B5     		push	{r7, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 7, -8
 139              		.cfi_offset 14, -4
 140 0002 82B0     		sub	sp, sp, #8
 141              		.cfi_def_cfa_offset 16
 142 0004 00AF     		add	r7, sp, #0
 143              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 144              		.loc 1 12 0
 145 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 146 000a 031C     		mov	r3, r0
 147 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 148              		.loc 1 13 0
 149 000e 054B     		ldr	r3, .L2
 150 0010 0122     		mov	r2, #1
 151 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 152              		.loc 1 14 0
 153 0014 7B68     		ldr	r3, [r7, #4]
 154 0016 181C     		mov	r0, r3
 155 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 156              		.loc 1 15 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 4


 157 001c BD46     		mov	sp, r7
 158 001e 02B0     		add	sp, sp, #8
 159              		@ sp needed
 160 0020 80BD     		pop	{r7, pc}
 161              	.L3:
 162 0022 C046     		.align	2
 163              	.L2:
 164 0024 00000000 		.word	timerFlag
 165              		.cfi_endproc
 166              	.LFE34:
 167              		.size	timer_isr, .-timer_isr
 168              		.global	__aeabi_idiv
 169              		.global	__aeabi_i2d
 170              		.global	__aeabi_dmul
 171              		.global	__aeabi_d2uiz
 172              		.section	.text.CalibrationElbow,"ax",%progbits
 173              		.align	2
 174              		.global	CalibrationElbow
 175              		.code	16
 176              		.thumb_func
 177              		.type	CalibrationElbow, %function
 178              	CalibrationElbow:
 179              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 180              		.loc 1 48 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 5


 181              		.cfi_startproc
 182 0000 B0B5     		push	{r4, r5, r7, lr}
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 4, -16
 185              		.cfi_offset 5, -12
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 86B0     		sub	sp, sp, #24
 189              		.cfi_def_cfa_offset 40
 190 0004 00AF     		add	r7, sp, #0
 191              		.cfi_def_cfa_register 7
 192 0006 021C     		mov	r2, r0
 193 0008 BB1D     		add	r3, r7, #6
 194 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 195              		.loc 1 49 0
 196 000c 3B1C     		mov	r3, r7
 197 000e 1133     		add	r3, r3, #17
 198 0010 0322     		mov	r2, #3
 199 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 200              		.loc 1 56 0
 201 0014 3B1C     		mov	r3, r7
 202 0016 1733     		add	r3, r3, #23
 203 0018 0022     		mov	r2, #0
 204 001a 1A70     		strb	r2, [r3]
 205 001c 3B1C     		mov	r3, r7
 206 001e 1233     		add	r3, r3, #18
 207 0020 0022     		mov	r2, #0
 208 0022 1A80     		strh	r2, [r3]
 209 0024 5DE0     		b	.L5
 210              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Test stop switch
  59:.\main.c      ****         LED_Write(0);
 211              		.loc 1 59 0
 212 0026 0020     		mov	r0, #0
 213 0028 FFF7FEFF 		bl	LED_Write
  60:.\main.c      ****         
  61:.\main.c      ****         // Move till stop switch presses down
  62:.\main.c      ****         if(velocity < 1500)
 214              		.loc 1 62 0
 215 002c BB1D     		add	r3, r7, #6
 216 002e 1A88     		ldrh	r2, [r3]
 217 0030 5F4B     		ldr	r3, .L18+16
 218 0032 9A42     		cmp	r2, r3
 219 0034 0BD8     		bhi	.L6
  63:.\main.c      ****         {
  64:.\main.c      ****             while(stop_elb_dn_Read())
 220              		.loc 1 64 0
 221 0036 04E0     		b	.L7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 6


 222              	.L8:
  65:.\main.c      ****             {
  66:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 223              		.loc 1 66 0
 224 0038 BB1D     		add	r3, r7, #6
 225 003a 1B88     		ldrh	r3, [r3]
 226 003c 181C     		mov	r0, r3
 227 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 228              	.L7:
  64:.\main.c      ****             while(stop_elb_dn_Read())
 229              		.loc 1 64 0 discriminator 1
 230 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 231 0046 031C     		mov	r3, r0
 232 0048 002B     		cmp	r3, #0
 233 004a F5D1     		bne	.L8
 234 004c 15E0     		b	.L9
 235              	.L6:
  67:.\main.c      ****             }
  68:.\main.c      ****         }
  69:.\main.c      ****         else if(velocity > 1500)
 236              		.loc 1 69 0
 237 004e BB1D     		add	r3, r7, #6
 238 0050 1A88     		ldrh	r2, [r3]
 239 0052 584B     		ldr	r3, .L18+20
 240 0054 9A42     		cmp	r2, r3
 241 0056 0BD9     		bls	.L10
  70:.\main.c      ****         {
  71:.\main.c      ****             while(stop_elb_up_Read())
 242              		.loc 1 71 0
 243 0058 04E0     		b	.L11
 244              	.L12:
  72:.\main.c      ****             {
  73:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 245              		.loc 1 73 0
 246 005a BB1D     		add	r3, r7, #6
 247 005c 1B88     		ldrh	r3, [r3]
 248 005e 181C     		mov	r0, r3
 249 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 250              	.L11:
  71:.\main.c      ****             while(stop_elb_up_Read())
 251              		.loc 1 71 0 discriminator 1
 252 0064 FFF7FEFF 		bl	stop_elb_up_Read
 253 0068 031C     		mov	r3, r0
 254 006a 002B     		cmp	r3, #0
 255 006c F5D1     		bne	.L12
 256 006e 04E0     		b	.L9
 257              	.L10:
  74:.\main.c      ****             }
  75:.\main.c      ****         }
  76:.\main.c      ****         else
  77:.\main.c      ****         {
  78:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 258              		.loc 1 78 0
 259 0070 BB1D     		add	r3, r7, #6
 260 0072 1B88     		ldrh	r3, [r3]
 261 0074 181C     		mov	r0, r3
 262 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 7


 263              	.L9:
  79:.\main.c      ****             //LED_Write(1);
  80:.\main.c      ****         }
  81:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 264              		.loc 1 81 0
 265 007a 4E4B     		ldr	r3, .L18+20
 266 007c 181C     		mov	r0, r3
 267 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  82:.\main.c      ****         channel = ELBOW_POT;
 268              		.loc 1 82 0
 269 0082 0123     		mov	r3, #1
 270 0084 FB60     		str	r3, [r7, #12]
  83:.\main.c      ****         
  84:.\main.c      ****         // Add the value to average
  85:.\main.c      ****         average+=potFeedback(channel);
 271              		.loc 1 85 0
 272 0086 FB68     		ldr	r3, [r7, #12]
 273 0088 181C     		mov	r0, r3
 274 008a FFF7FEFF 		bl	potFeedback
 275 008e 031C     		mov	r3, r0
 276 0090 191C     		mov	r1, r3
 277 0092 3B1C     		mov	r3, r7
 278 0094 1233     		add	r3, r3, #18
 279 0096 3A1C     		mov	r2, r7
 280 0098 1232     		add	r2, r2, #18
 281 009a 1288     		ldrh	r2, [r2]
 282 009c 8A18     		add	r2, r1, r2
 283 009e 1A80     		strh	r2, [r3]
  86:.\main.c      ****  
  87:.\main.c      **** 		// Move away for 2 seconds
  88:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  89:.\main.c      ****         difference = 1500-velocity;
 284              		.loc 1 89 0
 285 00a0 BB1D     		add	r3, r7, #6
 286 00a2 1B88     		ldrh	r3, [r3]
 287 00a4 434A     		ldr	r2, .L18+20
 288 00a6 D31A     		sub	r3, r2, r3
 289 00a8 9AB2     		uxth	r2, r3
 290 00aa 3B1C     		mov	r3, r7
 291 00ac 0A33     		add	r3, r3, #10
 292 00ae 1A80     		strh	r2, [r3]
  90:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 293              		.loc 1 90 0
 294 00b0 3B1C     		mov	r3, r7
 295 00b2 0A33     		add	r3, r3, #10
 296 00b4 1B88     		ldrh	r3, [r3]
 297 00b6 3F4A     		ldr	r2, .L18+20
 298 00b8 9B18     		add	r3, r3, r2
 299 00ba 9BB2     		uxth	r3, r3
 300 00bc 181C     		mov	r0, r3
 301 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  91:.\main.c      ****         CyDelay(1000);
 302              		.loc 1 91 0
 303 00c2 FA23     		mov	r3, #250
 304 00c4 9B00     		lsl	r3, r3, #2
 305 00c6 181C     		mov	r0, r3
 306 00c8 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 8


  92:.\main.c      ****  
  93:.\main.c      **** 		// Stop moving
  94:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 307              		.loc 1 94 0
 308 00cc 394B     		ldr	r3, .L18+20
 309 00ce 181C     		mov	r0, r3
 310 00d0 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 311              		.loc 1 56 0
 312 00d4 3B1C     		mov	r3, r7
 313 00d6 1733     		add	r3, r3, #23
 314 00d8 1A78     		ldrb	r2, [r3]
 315 00da 3B1C     		mov	r3, r7
 316 00dc 1733     		add	r3, r3, #23
 317 00de 0132     		add	r2, r2, #1
 318 00e0 1A70     		strb	r2, [r3]
 319              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 320              		.loc 1 56 0 is_stmt 0 discriminator 1
 321 00e2 3A1C     		mov	r2, r7
 322 00e4 1732     		add	r2, r2, #23
 323 00e6 3B1C     		mov	r3, r7
 324 00e8 1133     		add	r3, r3, #17
 325 00ea 1278     		ldrb	r2, [r2]
 326 00ec 1B78     		ldrb	r3, [r3]
 327 00ee 9A42     		cmp	r2, r3
 328 00f0 99D3     		bcc	.L13
  95:.\main.c      ****         
  96:.\main.c      ****         // Test stop switch
  97:.\main.c      ****         //LED_Write(1);
  98:.\main.c      ****         //CyDelay(1000);
  99:.\main.c      **** 	}
 100:.\main.c      ****     
 101:.\main.c      ****     if(velocity > 1500)
 329              		.loc 1 101 0 is_stmt 1
 330 00f2 BB1D     		add	r3, r7, #6
 331 00f4 1A88     		ldrh	r2, [r3]
 332 00f6 2F4B     		ldr	r3, .L18+20
 333 00f8 9A42     		cmp	r2, r3
 334 00fa 20D9     		bls	.L14
 102:.\main.c      **** 	    bound = ((average / CYCLES) * .9);
 335              		.loc 1 102 0
 336 00fc 3B1C     		mov	r3, r7
 337 00fe 1233     		add	r3, r3, #18
 338 0100 1A88     		ldrh	r2, [r3]
 339 0102 3B1C     		mov	r3, r7
 340 0104 1133     		add	r3, r3, #17
 341 0106 1B78     		ldrb	r3, [r3]
 342 0108 101C     		mov	r0, r2
 343 010a 191C     		mov	r1, r3
 344 010c FFF7FEFF 		bl	__aeabi_idiv
 345 0110 031C     		mov	r3, r0
 346 0112 181C     		mov	r0, r3
 347 0114 FFF7FEFF 		bl	__aeabi_i2d
 348 0118 031C     		mov	r3, r0
 349 011a 0C1C     		mov	r4, r1
 350 011c 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 9


 351 011e 211C     		mov	r1, r4
 352 0120 204B     		ldr	r3, .L18+4
 353 0122 1F4A     		ldr	r2, .L18
 354 0124 FFF7FEFF 		bl	__aeabi_dmul
 355 0128 031C     		mov	r3, r0
 356 012a 0C1C     		mov	r4, r1
 357 012c 3D1C     		mov	r5, r7
 358 012e 1435     		add	r5, r5, #20
 359 0130 181C     		mov	r0, r3
 360 0132 211C     		mov	r1, r4
 361 0134 FFF7FEFF 		bl	__aeabi_d2uiz
 362 0138 031C     		mov	r3, r0
 363 013a 2B80     		strh	r3, [r5]
 364 013c 28E0     		b	.L15
 365              	.L14:
 103:.\main.c      ****     else if(velocity < 1500)
 366              		.loc 1 103 0
 367 013e BB1D     		add	r3, r7, #6
 368 0140 1A88     		ldrh	r2, [r3]
 369 0142 1B4B     		ldr	r3, .L18+16
 370 0144 9A42     		cmp	r2, r3
 371 0146 20D8     		bhi	.L16
 104:.\main.c      ****         bound = ((average / CYCLES) * 1.1);
 372              		.loc 1 104 0
 373 0148 3B1C     		mov	r3, r7
 374 014a 1233     		add	r3, r3, #18
 375 014c 1A88     		ldrh	r2, [r3]
 376 014e 3B1C     		mov	r3, r7
 377 0150 1133     		add	r3, r3, #17
 378 0152 1B78     		ldrb	r3, [r3]
 379 0154 101C     		mov	r0, r2
 380 0156 191C     		mov	r1, r3
 381 0158 FFF7FEFF 		bl	__aeabi_idiv
 382 015c 031C     		mov	r3, r0
 383 015e 181C     		mov	r0, r3
 384 0160 FFF7FEFF 		bl	__aeabi_i2d
 385 0164 031C     		mov	r3, r0
 386 0166 0C1C     		mov	r4, r1
 387 0168 181C     		mov	r0, r3
 388 016a 211C     		mov	r1, r4
 389 016c 0E4A     		ldr	r2, .L18+8
 390 016e 0F4B     		ldr	r3, .L18+12
 391 0170 FFF7FEFF 		bl	__aeabi_dmul
 392 0174 031C     		mov	r3, r0
 393 0176 0C1C     		mov	r4, r1
 394 0178 3D1C     		mov	r5, r7
 395 017a 1435     		add	r5, r5, #20
 396 017c 181C     		mov	r0, r3
 397 017e 211C     		mov	r1, r4
 398 0180 FFF7FEFF 		bl	__aeabi_d2uiz
 399 0184 031C     		mov	r3, r0
 400 0186 2B80     		strh	r3, [r5]
 401 0188 02E0     		b	.L15
 402              	.L16:
 105:.\main.c      ****     else // velocity == 1500
 106:.\main.c      ****         LED_Write(1); 
 403              		.loc 1 106 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 10


 404 018a 0120     		mov	r0, #1
 405 018c FFF7FEFF 		bl	LED_Write
 406              	.L15:
 107:.\main.c      ****  
 108:.\main.c      **** 	return bound;
 407              		.loc 1 108 0
 408 0190 3B1C     		mov	r3, r7
 409 0192 1433     		add	r3, r3, #20
 410 0194 1B88     		ldrh	r3, [r3]
 109:.\main.c      **** }
 411              		.loc 1 109 0
 412 0196 181C     		mov	r0, r3
 413 0198 BD46     		mov	sp, r7
 414 019a 06B0     		add	sp, sp, #24
 415              		@ sp needed
 416 019c B0BD     		pop	{r4, r5, r7, pc}
 417              	.L19:
 418 019e C046     		.align	3
 419              	.L18:
 420 01a0 CDCCCCCC 		.word	-858993459
 421 01a4 CCCCEC3F 		.word	1072483532
 422 01a8 9A999999 		.word	-1717986918
 423 01ac 9999F13F 		.word	1072798105
 424 01b0 DB050000 		.word	1499
 425 01b4 DC050000 		.word	1500
 426              		.cfi_endproc
 427              	.LFE35:
 428              		.size	CalibrationElbow, .-CalibrationElbow
 429              		.section	.text.CalibrationShoulder,"ax",%progbits
 430              		.align	2
 431              		.global	CalibrationShoulder
 432              		.code	16
 433              		.thumb_func
 434              		.type	CalibrationShoulder, %function
 435              	CalibrationShoulder:
 436              	.LFB36:
 110:.\main.c      **** 
 111:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 112:.\main.c      **** {
 437              		.loc 1 112 0
 438              		.cfi_startproc
 439 0000 B0B5     		push	{r4, r5, r7, lr}
 440              		.cfi_def_cfa_offset 16
 441              		.cfi_offset 4, -16
 442              		.cfi_offset 5, -12
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 86B0     		sub	sp, sp, #24
 446              		.cfi_def_cfa_offset 40
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 021C     		mov	r2, r0
 450 0008 BB1D     		add	r3, r7, #6
 451 000a 1A80     		strh	r2, [r3]
 113:.\main.c      **** 	uint8 	CYCLES = 3;
 452              		.loc 1 113 0
 453 000c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 11


 454 000e 1133     		add	r3, r3, #17
 455 0010 0322     		mov	r2, #3
 456 0012 1A70     		strb	r2, [r3]
 114:.\main.c      **** 	uint8 	i;
 115:.\main.c      **** 	uint16 	bound;
 116:.\main.c      **** 	uint16 	average;
 117:.\main.c      ****     uint32  channel;
 118:.\main.c      ****     int16 difference;
 119:.\main.c      ****  
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 457              		.loc 1 120 0
 458 0014 3B1C     		mov	r3, r7
 459 0016 1733     		add	r3, r3, #23
 460 0018 0022     		mov	r2, #0
 461 001a 1A70     		strb	r2, [r3]
 462 001c 3B1C     		mov	r3, r7
 463 001e 1233     		add	r3, r3, #18
 464 0020 0022     		mov	r2, #0
 465 0022 1A80     		strh	r2, [r3]
 466 0024 5DE0     		b	.L21
 467              	.L29:
 121:.\main.c      **** 	{
 122:.\main.c      **** 		// Move till stop switch presses down
 123:.\main.c      ****         if(velocity < 1500)
 468              		.loc 1 123 0
 469 0026 BB1D     		add	r3, r7, #6
 470 0028 1A88     		ldrh	r2, [r3]
 471 002a 614B     		ldr	r3, .L34+16
 472 002c 9A42     		cmp	r2, r3
 473 002e 0BD8     		bhi	.L22
 124:.\main.c      ****         {
 125:.\main.c      ****             while(stop_shdr_dn_Read())
 474              		.loc 1 125 0
 475 0030 04E0     		b	.L23
 476              	.L24:
 126:.\main.c      ****             {
 127:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 477              		.loc 1 127 0
 478 0032 BB1D     		add	r3, r7, #6
 479 0034 1B88     		ldrh	r3, [r3]
 480 0036 181C     		mov	r0, r3
 481 0038 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 482              	.L23:
 125:.\main.c      ****             while(stop_shdr_dn_Read())
 483              		.loc 1 125 0 discriminator 1
 484 003c FFF7FEFF 		bl	stop_shdr_dn_Read
 485 0040 031C     		mov	r3, r0
 486 0042 002B     		cmp	r3, #0
 487 0044 F5D1     		bne	.L24
 488 0046 18E0     		b	.L25
 489              	.L22:
 128:.\main.c      ****             }
 129:.\main.c      ****         }
 130:.\main.c      ****         else if(velocity > 1500)
 490              		.loc 1 130 0
 491 0048 BB1D     		add	r3, r7, #6
 492 004a 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 12


 493 004c 594B     		ldr	r3, .L34+20
 494 004e 9A42     		cmp	r2, r3
 495 0050 0BD9     		bls	.L26
 131:.\main.c      ****         {
 132:.\main.c      ****             while(stop_shdr_up_Read())
 496              		.loc 1 132 0
 497 0052 04E0     		b	.L27
 498              	.L28:
 133:.\main.c      ****             {
 134:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 499              		.loc 1 134 0
 500 0054 BB1D     		add	r3, r7, #6
 501 0056 1B88     		ldrh	r3, [r3]
 502 0058 181C     		mov	r0, r3
 503 005a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 504              	.L27:
 132:.\main.c      ****             while(stop_shdr_up_Read())
 505              		.loc 1 132 0 discriminator 1
 506 005e FFF7FEFF 		bl	stop_shdr_up_Read
 507 0062 031C     		mov	r3, r0
 508 0064 002B     		cmp	r3, #0
 509 0066 F5D1     		bne	.L28
 510 0068 07E0     		b	.L25
 511              	.L26:
 135:.\main.c      ****             }
 136:.\main.c      ****         }
 137:.\main.c      ****         else
 138:.\main.c      ****         {
 139:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 512              		.loc 1 139 0
 513 006a BB1D     		add	r3, r7, #6
 514 006c 1B88     		ldrh	r3, [r3]
 515 006e 181C     		mov	r0, r3
 516 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 140:.\main.c      ****             LED_Write(1);
 517              		.loc 1 140 0
 518 0074 0120     		mov	r0, #1
 519 0076 FFF7FEFF 		bl	LED_Write
 520              	.L25:
 141:.\main.c      ****         }
 142:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 521              		.loc 1 142 0
 522 007a 4E4B     		ldr	r3, .L34+20
 523 007c 181C     		mov	r0, r3
 524 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 143:.\main.c      ****         channel = SHOULDER_POT;
 525              		.loc 1 143 0
 526 0082 0023     		mov	r3, #0
 527 0084 FB60     		str	r3, [r7, #12]
 144:.\main.c      ****  
 145:.\main.c      **** 		// Add the value to average
 146:.\main.c      ****         average+=potFeedback(channel);
 528              		.loc 1 146 0
 529 0086 FB68     		ldr	r3, [r7, #12]
 530 0088 181C     		mov	r0, r3
 531 008a FFF7FEFF 		bl	potFeedback
 532 008e 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 13


 533 0090 191C     		mov	r1, r3
 534 0092 3B1C     		mov	r3, r7
 535 0094 1233     		add	r3, r3, #18
 536 0096 3A1C     		mov	r2, r7
 537 0098 1232     		add	r2, r2, #18
 538 009a 1288     		ldrh	r2, [r2]
 539 009c 8A18     		add	r2, r1, r2
 540 009e 1A80     		strh	r2, [r3]
 147:.\main.c      ****  
 148:.\main.c      **** 		// Move away for 2 seconds
 149:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 150:.\main.c      ****         difference = 1500-velocity;
 541              		.loc 1 150 0
 542 00a0 BB1D     		add	r3, r7, #6
 543 00a2 1B88     		ldrh	r3, [r3]
 544 00a4 434A     		ldr	r2, .L34+20
 545 00a6 D31A     		sub	r3, r2, r3
 546 00a8 9AB2     		uxth	r2, r3
 547 00aa 3B1C     		mov	r3, r7
 548 00ac 0A33     		add	r3, r3, #10
 549 00ae 1A80     		strh	r2, [r3]
 151:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 550              		.loc 1 151 0
 551 00b0 3B1C     		mov	r3, r7
 552 00b2 0A33     		add	r3, r3, #10
 553 00b4 1B88     		ldrh	r3, [r3]
 554 00b6 3F4A     		ldr	r2, .L34+20
 555 00b8 9B18     		add	r3, r3, r2
 556 00ba 9BB2     		uxth	r3, r3
 557 00bc 181C     		mov	r0, r3
 558 00be FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 152:.\main.c      ****         CyDelay(1000);
 559              		.loc 1 152 0
 560 00c2 FA23     		mov	r3, #250
 561 00c4 9B00     		lsl	r3, r3, #2
 562 00c6 181C     		mov	r0, r3
 563 00c8 FFF7FEFF 		bl	CyDelay
 153:.\main.c      ****  
 154:.\main.c      **** 		// Stop moving
 155:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 564              		.loc 1 155 0
 565 00cc 394B     		ldr	r3, .L34+20
 566 00ce 181C     		mov	r0, r3
 567 00d0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 568              		.loc 1 120 0
 569 00d4 3B1C     		mov	r3, r7
 570 00d6 1733     		add	r3, r3, #23
 571 00d8 1A78     		ldrb	r2, [r3]
 572 00da 3B1C     		mov	r3, r7
 573 00dc 1733     		add	r3, r3, #23
 574 00de 0132     		add	r2, r2, #1
 575 00e0 1A70     		strb	r2, [r3]
 576              	.L21:
 120:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 577              		.loc 1 120 0 is_stmt 0 discriminator 1
 578 00e2 3A1C     		mov	r2, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 14


 579 00e4 1732     		add	r2, r2, #23
 580 00e6 3B1C     		mov	r3, r7
 581 00e8 1133     		add	r3, r3, #17
 582 00ea 1278     		ldrb	r2, [r2]
 583 00ec 1B78     		ldrb	r3, [r3]
 584 00ee 9A42     		cmp	r2, r3
 585 00f0 99D3     		bcc	.L29
 156:.\main.c      **** 	}
 157:.\main.c      ****  
 158:.\main.c      **** 	if(velocity > 1500)
 586              		.loc 1 158 0 is_stmt 1
 587 00f2 BB1D     		add	r3, r7, #6
 588 00f4 1A88     		ldrh	r2, [r3]
 589 00f6 2F4B     		ldr	r3, .L34+20
 590 00f8 9A42     		cmp	r2, r3
 591 00fa 20D9     		bls	.L30
 159:.\main.c      **** 	    bound = ((average / CYCLES) * .9);
 592              		.loc 1 159 0
 593 00fc 3B1C     		mov	r3, r7
 594 00fe 1233     		add	r3, r3, #18
 595 0100 1A88     		ldrh	r2, [r3]
 596 0102 3B1C     		mov	r3, r7
 597 0104 1133     		add	r3, r3, #17
 598 0106 1B78     		ldrb	r3, [r3]
 599 0108 101C     		mov	r0, r2
 600 010a 191C     		mov	r1, r3
 601 010c FFF7FEFF 		bl	__aeabi_idiv
 602 0110 031C     		mov	r3, r0
 603 0112 181C     		mov	r0, r3
 604 0114 FFF7FEFF 		bl	__aeabi_i2d
 605 0118 031C     		mov	r3, r0
 606 011a 0C1C     		mov	r4, r1
 607 011c 181C     		mov	r0, r3
 608 011e 211C     		mov	r1, r4
 609 0120 204B     		ldr	r3, .L34+4
 610 0122 1F4A     		ldr	r2, .L34
 611 0124 FFF7FEFF 		bl	__aeabi_dmul
 612 0128 031C     		mov	r3, r0
 613 012a 0C1C     		mov	r4, r1
 614 012c 3D1C     		mov	r5, r7
 615 012e 1435     		add	r5, r5, #20
 616 0130 181C     		mov	r0, r3
 617 0132 211C     		mov	r1, r4
 618 0134 FFF7FEFF 		bl	__aeabi_d2uiz
 619 0138 031C     		mov	r3, r0
 620 013a 2B80     		strh	r3, [r5]
 621 013c 28E0     		b	.L31
 622              	.L30:
 160:.\main.c      ****     else if(velocity < 1500)
 623              		.loc 1 160 0
 624 013e BB1D     		add	r3, r7, #6
 625 0140 1A88     		ldrh	r2, [r3]
 626 0142 1B4B     		ldr	r3, .L34+16
 627 0144 9A42     		cmp	r2, r3
 628 0146 20D8     		bhi	.L32
 161:.\main.c      ****         bound = ((average / CYCLES) * 1.1);
 629              		.loc 1 161 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 15


 630 0148 3B1C     		mov	r3, r7
 631 014a 1233     		add	r3, r3, #18
 632 014c 1A88     		ldrh	r2, [r3]
 633 014e 3B1C     		mov	r3, r7
 634 0150 1133     		add	r3, r3, #17
 635 0152 1B78     		ldrb	r3, [r3]
 636 0154 101C     		mov	r0, r2
 637 0156 191C     		mov	r1, r3
 638 0158 FFF7FEFF 		bl	__aeabi_idiv
 639 015c 031C     		mov	r3, r0
 640 015e 181C     		mov	r0, r3
 641 0160 FFF7FEFF 		bl	__aeabi_i2d
 642 0164 031C     		mov	r3, r0
 643 0166 0C1C     		mov	r4, r1
 644 0168 181C     		mov	r0, r3
 645 016a 211C     		mov	r1, r4
 646 016c 0E4A     		ldr	r2, .L34+8
 647 016e 0F4B     		ldr	r3, .L34+12
 648 0170 FFF7FEFF 		bl	__aeabi_dmul
 649 0174 031C     		mov	r3, r0
 650 0176 0C1C     		mov	r4, r1
 651 0178 3D1C     		mov	r5, r7
 652 017a 1435     		add	r5, r5, #20
 653 017c 181C     		mov	r0, r3
 654 017e 211C     		mov	r1, r4
 655 0180 FFF7FEFF 		bl	__aeabi_d2uiz
 656 0184 031C     		mov	r3, r0
 657 0186 2B80     		strh	r3, [r5]
 658 0188 02E0     		b	.L31
 659              	.L32:
 162:.\main.c      ****     else // velocity == 1500
 163:.\main.c      ****         LED_Write(1); 
 660              		.loc 1 163 0
 661 018a 0120     		mov	r0, #1
 662 018c FFF7FEFF 		bl	LED_Write
 663              	.L31:
 164:.\main.c      ****  
 165:.\main.c      **** 	return bound;
 664              		.loc 1 165 0
 665 0190 3B1C     		mov	r3, r7
 666 0192 1433     		add	r3, r3, #20
 667 0194 1B88     		ldrh	r3, [r3]
 166:.\main.c      **** }
 668              		.loc 1 166 0
 669 0196 181C     		mov	r0, r3
 670 0198 BD46     		mov	sp, r7
 671 019a 06B0     		add	sp, sp, #24
 672              		@ sp needed
 673 019c B0BD     		pop	{r4, r5, r7, pc}
 674              	.L35:
 675 019e C046     		.align	3
 676              	.L34:
 677 01a0 CDCCCCCC 		.word	-858993459
 678 01a4 CCCCEC3F 		.word	1072483532
 679 01a8 9A999999 		.word	-1717986918
 680 01ac 9999F13F 		.word	1072798105
 681 01b0 DB050000 		.word	1499
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 16


 682 01b4 DC050000 		.word	1500
 683              		.cfi_endproc
 684              	.LFE36:
 685              		.size	CalibrationShoulder, .-CalibrationShoulder
 686              		.global	__aeabi_uidiv
 687              		.section	.text.average,"ax",%progbits
 688              		.align	2
 689              		.global	average
 690              		.code	16
 691              		.thumb_func
 692              		.type	average, %function
 693              	average:
 694              	.LFB37:
 167:.\main.c      **** 
 168:.\main.c      **** //Average function to be used in smoothing our input
 169:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 170:.\main.c      **** {
 695              		.loc 1 170 0
 696              		.cfi_startproc
 697 0000 80B5     		push	{r7, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 86B0     		sub	sp, sp, #24
 702              		.cfi_def_cfa_offset 32
 703 0004 00AF     		add	r7, sp, #0
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 706 0008 0A1C     		mov	r2, r1
 707 000a FB1C     		add	r3, r7, #3
 708 000c 1A70     		strb	r2, [r3]
 171:.\main.c      ****     uint8 i;
 172:.\main.c      ****     uint32 sum = 0;
 709              		.loc 1 172 0
 710 000e 0023     		mov	r3, #0
 711 0010 3B61     		str	r3, [r7, #16]
 173:.\main.c      ****     uint16 avg = 0;
 712              		.loc 1 173 0
 713 0012 3B1C     		mov	r3, r7
 714 0014 0E33     		add	r3, r3, #14
 715 0016 0022     		mov	r2, #0
 716 0018 1A80     		strh	r2, [r3]
 174:.\main.c      ****     
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 717              		.loc 1 175 0
 718 001a 3B1C     		mov	r3, r7
 719 001c 1733     		add	r3, r3, #23
 720 001e 0022     		mov	r2, #0
 721 0020 1A70     		strb	r2, [r3]
 722 0022 10E0     		b	.L37
 723              	.L38:
 176:.\main.c      ****     {
 177:.\main.c      ****         sum += av_array[i];
 724              		.loc 1 177 0 discriminator 2
 725 0024 3B1C     		mov	r3, r7
 726 0026 1733     		add	r3, r3, #23
 727 0028 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 17


 728 002a 5B00     		lsl	r3, r3, #1
 729 002c 7A68     		ldr	r2, [r7, #4]
 730 002e D318     		add	r3, r2, r3
 731 0030 1B88     		ldrh	r3, [r3]
 732 0032 3A69     		ldr	r2, [r7, #16]
 733 0034 D318     		add	r3, r2, r3
 734 0036 3B61     		str	r3, [r7, #16]
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 735              		.loc 1 175 0 discriminator 2
 736 0038 3B1C     		mov	r3, r7
 737 003a 1733     		add	r3, r3, #23
 738 003c 1A78     		ldrb	r2, [r3]
 739 003e 3B1C     		mov	r3, r7
 740 0040 1733     		add	r3, r3, #23
 741 0042 0132     		add	r2, r2, #1
 742 0044 1A70     		strb	r2, [r3]
 743              	.L37:
 175:.\main.c      ****     for(i = 0; i < num_items; i++)
 744              		.loc 1 175 0 is_stmt 0 discriminator 1
 745 0046 3A1C     		mov	r2, r7
 746 0048 1732     		add	r2, r2, #23
 747 004a FB1C     		add	r3, r7, #3
 748 004c 1278     		ldrb	r2, [r2]
 749 004e 1B78     		ldrb	r3, [r3]
 750 0050 9A42     		cmp	r2, r3
 751 0052 E7D3     		bcc	.L38
 178:.\main.c      ****     }
 179:.\main.c      ****     
 180:.\main.c      ****     avg = sum/num_items;
 752              		.loc 1 180 0 is_stmt 1
 753 0054 FB1C     		add	r3, r7, #3
 754 0056 1B78     		ldrb	r3, [r3]
 755 0058 3869     		ldr	r0, [r7, #16]
 756 005a 191C     		mov	r1, r3
 757 005c FFF7FEFF 		bl	__aeabi_uidiv
 758 0060 031C     		mov	r3, r0
 759 0062 1A1C     		mov	r2, r3
 760 0064 3B1C     		mov	r3, r7
 761 0066 0E33     		add	r3, r3, #14
 762 0068 1A80     		strh	r2, [r3]
 181:.\main.c      ****     
 182:.\main.c      ****     return avg;
 763              		.loc 1 182 0
 764 006a 3B1C     		mov	r3, r7
 765 006c 0E33     		add	r3, r3, #14
 766 006e 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 767              		.loc 1 183 0
 768 0070 181C     		mov	r0, r3
 769 0072 BD46     		mov	sp, r7
 770 0074 06B0     		add	sp, sp, #24
 771              		@ sp needed
 772 0076 80BD     		pop	{r7, pc}
 773              		.cfi_endproc
 774              	.LFE37:
 775              		.size	average, .-average
 776              		.section	.text.maintain_array,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 18


 777              		.align	2
 778              		.global	maintain_array
 779              		.code	16
 780              		.thumb_func
 781              		.type	maintain_array, %function
 782              	maintain_array:
 783              	.LFB38:
 184:.\main.c      **** 
 185:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 186:.\main.c      **** {
 784              		.loc 1 186 0
 785              		.cfi_startproc
 786 0000 80B5     		push	{r7, lr}
 787              		.cfi_def_cfa_offset 8
 788              		.cfi_offset 7, -8
 789              		.cfi_offset 14, -4
 790 0002 82B0     		sub	sp, sp, #8
 791              		.cfi_def_cfa_offset 16
 792 0004 00AF     		add	r7, sp, #0
 793              		.cfi_def_cfa_register 7
 794 0006 0A1C     		mov	r2, r1
 795 0008 FB1D     		add	r3, r7, #7
 796 000a 011C     		add	r1, r0, #0
 797 000c 1970     		strb	r1, [r3]
 798 000e BB1D     		add	r3, r7, #6
 799 0010 1A70     		strb	r2, [r3]
 187:.\main.c      ****     if(cpos < (SIZE - 1))
 800              		.loc 1 187 0
 801 0012 FB1D     		add	r3, r7, #7
 802 0014 1A78     		ldrb	r2, [r3]
 803 0016 BB1D     		add	r3, r7, #6
 804 0018 1B78     		ldrb	r3, [r3]
 805 001a 013B     		sub	r3, r3, #1
 806 001c 9A42     		cmp	r2, r3
 807 001e 05DA     		bge	.L41
 188:.\main.c      ****     {
 189:.\main.c      ****         cpos++;
 808              		.loc 1 189 0
 809 0020 FB1D     		add	r3, r7, #7
 810 0022 1A78     		ldrb	r2, [r3]
 811 0024 FB1D     		add	r3, r7, #7
 812 0026 0132     		add	r2, r2, #1
 813 0028 1A70     		strb	r2, [r3]
 814 002a 02E0     		b	.L42
 815              	.L41:
 190:.\main.c      ****     }
 191:.\main.c      ****     else
 192:.\main.c      ****     {
 193:.\main.c      ****         cpos = 0;
 816              		.loc 1 193 0
 817 002c FB1D     		add	r3, r7, #7
 818 002e 0022     		mov	r2, #0
 819 0030 1A70     		strb	r2, [r3]
 820              	.L42:
 194:.\main.c      ****     }
 195:.\main.c      ****     return cpos;
 821              		.loc 1 195 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 19


 822 0032 FB1D     		add	r3, r7, #7
 823 0034 1B78     		ldrb	r3, [r3]
 196:.\main.c      **** }
 824              		.loc 1 196 0
 825 0036 181C     		mov	r0, r3
 826 0038 BD46     		mov	sp, r7
 827 003a 02B0     		add	sp, sp, #8
 828              		@ sp needed
 829 003c 80BD     		pop	{r7, pc}
 830              		.cfi_endproc
 831              	.LFE38:
 832              		.size	maintain_array, .-maintain_array
 833 003e C046     		.section	.text.check_update,"ax",%progbits
 834              		.align	2
 835              		.global	check_update
 836              		.code	16
 837              		.thumb_func
 838              		.type	check_update, %function
 839              	check_update:
 840              	.LFB39:
 197:.\main.c      **** 
 198:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 199:.\main.c      **** {
 841              		.loc 1 199 0
 842              		.cfi_startproc
 843 0000 80B5     		push	{r7, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 7, -8
 846              		.cfi_offset 14, -4
 847 0002 86B0     		sub	sp, sp, #24
 848              		.cfi_def_cfa_offset 32
 849 0004 00AF     		add	r7, sp, #0
 850              		.cfi_def_cfa_register 7
 851 0006 F860     		str	r0, [r7, #12]
 852 0008 7B60     		str	r3, [r7, #4]
 853 000a 3B1C     		mov	r3, r7
 854 000c 0B33     		add	r3, r3, #11
 855 000e 1970     		strb	r1, [r3]
 856 0010 3B1C     		mov	r3, r7
 857 0012 0A33     		add	r3, r3, #10
 858 0014 1A70     		strb	r2, [r3]
 200:.\main.c      ****     uint8 index;
 201:.\main.c      ****     if(arr_pos != 0)
 859              		.loc 1 201 0
 860 0016 3B1C     		mov	r3, r7
 861 0018 0B33     		add	r3, r3, #11
 862 001a 1B78     		ldrb	r3, [r3]
 863 001c 002B     		cmp	r3, #0
 864 001e 07D0     		beq	.L45
 202:.\main.c      ****     {
 203:.\main.c      ****         index = arr_pos - 1;
 865              		.loc 1 203 0
 866 0020 3B1C     		mov	r3, r7
 867 0022 1733     		add	r3, r3, #23
 868 0024 3A1C     		mov	r2, r7
 869 0026 0B32     		add	r2, r2, #11
 870 0028 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 20


 871 002a 013A     		sub	r2, r2, #1
 872 002c 1A70     		strb	r2, [r3]
 873 002e 06E0     		b	.L46
 874              	.L45:
 204:.\main.c      ****     }
 205:.\main.c      ****     else
 206:.\main.c      ****     {
 207:.\main.c      ****         index = size - 1;
 875              		.loc 1 207 0
 876 0030 3B1C     		mov	r3, r7
 877 0032 1733     		add	r3, r3, #23
 878 0034 3A1C     		mov	r2, r7
 879 0036 0A32     		add	r2, r2, #10
 880 0038 1278     		ldrb	r2, [r2]
 881 003a 013A     		sub	r2, r2, #1
 882 003c 1A70     		strb	r2, [r3]
 883              	.L46:
 208:.\main.c      ****     }
 209:.\main.c      ****     
 210:.\main.c      ****     if(change < 0)
 884              		.loc 1 210 0
 885 003e 7B68     		ldr	r3, [r7, #4]
 886 0040 002B     		cmp	r3, #0
 887 0042 2ADA     		bge	.L47
 211:.\main.c      ****     {
 212:.\main.c      ****         if(array[index] >= (1000 - change))
 888              		.loc 1 212 0
 889 0044 3B1C     		mov	r3, r7
 890 0046 1733     		add	r3, r3, #23
 891 0048 1B78     		ldrb	r3, [r3]
 892 004a 5B00     		lsl	r3, r3, #1
 893 004c FA68     		ldr	r2, [r7, #12]
 894 004e D318     		add	r3, r2, r3
 895 0050 1B88     		ldrh	r3, [r3]
 896 0052 1A1C     		mov	r2, r3
 897 0054 7B68     		ldr	r3, [r7, #4]
 898 0056 FA21     		mov	r1, #250
 899 0058 8900     		lsl	r1, r1, #2
 900 005a CB1A     		sub	r3, r1, r3
 901 005c 9A42     		cmp	r2, r3
 902 005e 12DB     		blt	.L48
 213:.\main.c      ****         {
 214:.\main.c      ****             array[arr_pos] = (array[index] + change);
 903              		.loc 1 214 0
 904 0060 3B1C     		mov	r3, r7
 905 0062 0B33     		add	r3, r3, #11
 906 0064 1B78     		ldrb	r3, [r3]
 907 0066 5B00     		lsl	r3, r3, #1
 908 0068 FA68     		ldr	r2, [r7, #12]
 909 006a D318     		add	r3, r2, r3
 910 006c 3A1C     		mov	r2, r7
 911 006e 1732     		add	r2, r2, #23
 912 0070 1278     		ldrb	r2, [r2]
 913 0072 5200     		lsl	r2, r2, #1
 914 0074 F968     		ldr	r1, [r7, #12]
 915 0076 8A18     		add	r2, r1, r2
 916 0078 1188     		ldrh	r1, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 21


 917 007a 7A68     		ldr	r2, [r7, #4]
 918 007c 92B2     		uxth	r2, r2
 919 007e 8A18     		add	r2, r1, r2
 920 0080 92B2     		uxth	r2, r2
 921 0082 1A80     		strh	r2, [r3]
 922 0084 33E0     		b	.L50
 923              	.L48:
 215:.\main.c      ****         }
 216:.\main.c      ****         else
 217:.\main.c      ****         {
 218:.\main.c      ****             array[arr_pos] = 1000;
 924              		.loc 1 218 0
 925 0086 3B1C     		mov	r3, r7
 926 0088 0B33     		add	r3, r3, #11
 927 008a 1B78     		ldrb	r3, [r3]
 928 008c 5B00     		lsl	r3, r3, #1
 929 008e FA68     		ldr	r2, [r7, #12]
 930 0090 D318     		add	r3, r2, r3
 931 0092 FA22     		mov	r2, #250
 932 0094 9200     		lsl	r2, r2, #2
 933 0096 1A80     		strh	r2, [r3]
 934 0098 29E0     		b	.L50
 935              	.L47:
 219:.\main.c      ****         }
 220:.\main.c      ****     }
 221:.\main.c      ****     else
 222:.\main.c      ****     {
 223:.\main.c      ****         if(array[index] <= (2000 - change))
 936              		.loc 1 223 0
 937 009a 3B1C     		mov	r3, r7
 938 009c 1733     		add	r3, r3, #23
 939 009e 1B78     		ldrb	r3, [r3]
 940 00a0 5B00     		lsl	r3, r3, #1
 941 00a2 FA68     		ldr	r2, [r7, #12]
 942 00a4 D318     		add	r3, r2, r3
 943 00a6 1B88     		ldrh	r3, [r3]
 944 00a8 1A1C     		mov	r2, r3
 945 00aa 7B68     		ldr	r3, [r7, #4]
 946 00ac FA21     		mov	r1, #250
 947 00ae C900     		lsl	r1, r1, #3
 948 00b0 CB1A     		sub	r3, r1, r3
 949 00b2 9A42     		cmp	r2, r3
 950 00b4 12DC     		bgt	.L51
 224:.\main.c      ****         {
 225:.\main.c      ****             array[arr_pos] = (array[index] + change);
 951              		.loc 1 225 0
 952 00b6 3B1C     		mov	r3, r7
 953 00b8 0B33     		add	r3, r3, #11
 954 00ba 1B78     		ldrb	r3, [r3]
 955 00bc 5B00     		lsl	r3, r3, #1
 956 00be FA68     		ldr	r2, [r7, #12]
 957 00c0 D318     		add	r3, r2, r3
 958 00c2 3A1C     		mov	r2, r7
 959 00c4 1732     		add	r2, r2, #23
 960 00c6 1278     		ldrb	r2, [r2]
 961 00c8 5200     		lsl	r2, r2, #1
 962 00ca F968     		ldr	r1, [r7, #12]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 22


 963 00cc 8A18     		add	r2, r1, r2
 964 00ce 1188     		ldrh	r1, [r2]
 965 00d0 7A68     		ldr	r2, [r7, #4]
 966 00d2 92B2     		uxth	r2, r2
 967 00d4 8A18     		add	r2, r1, r2
 968 00d6 92B2     		uxth	r2, r2
 969 00d8 1A80     		strh	r2, [r3]
 970 00da 08E0     		b	.L50
 971              	.L51:
 226:.\main.c      ****         }
 227:.\main.c      ****         else
 228:.\main.c      ****         {
 229:.\main.c      ****             array[arr_pos] = 2000;
 972              		.loc 1 229 0
 973 00dc 3B1C     		mov	r3, r7
 974 00de 0B33     		add	r3, r3, #11
 975 00e0 1B78     		ldrb	r3, [r3]
 976 00e2 5B00     		lsl	r3, r3, #1
 977 00e4 FA68     		ldr	r2, [r7, #12]
 978 00e6 D318     		add	r3, r2, r3
 979 00e8 FA22     		mov	r2, #250
 980 00ea D200     		lsl	r2, r2, #3
 981 00ec 1A80     		strh	r2, [r3]
 982              	.L50:
 230:.\main.c      ****         }
 231:.\main.c      ****     }
 232:.\main.c      ****     
 233:.\main.c      ****     return maintain_array(arr_pos, size);
 983              		.loc 1 233 0
 984 00ee 3B1C     		mov	r3, r7
 985 00f0 0B33     		add	r3, r3, #11
 986 00f2 1A78     		ldrb	r2, [r3]
 987 00f4 3B1C     		mov	r3, r7
 988 00f6 0A33     		add	r3, r3, #10
 989 00f8 1B78     		ldrb	r3, [r3]
 990 00fa 101C     		mov	r0, r2
 991 00fc 191C     		mov	r1, r3
 992 00fe FFF7FEFF 		bl	maintain_array
 993 0102 031C     		mov	r3, r0
 234:.\main.c      **** }
 994              		.loc 1 234 0
 995 0104 181C     		mov	r0, r3
 996 0106 BD46     		mov	sp, r7
 997 0108 06B0     		add	sp, sp, #24
 998              		@ sp needed
 999 010a 80BD     		pop	{r7, pc}
 1000              		.cfi_endproc
 1001              	.LFE39:
 1002              		.size	check_update, .-check_update
 1003              		.section	.text.pos_to_vel,"ax",%progbits
 1004              		.align	2
 1005              		.global	pos_to_vel
 1006              		.code	16
 1007              		.thumb_func
 1008              		.type	pos_to_vel, %function
 1009              	pos_to_vel:
 1010              	.LFB40:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 23


 235:.\main.c      **** 
 236:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 237:.\main.c      **** {
 1011              		.loc 1 237 0
 1012              		.cfi_startproc
 1013 0000 90B5     		push	{r4, r7, lr}
 1014              		.cfi_def_cfa_offset 12
 1015              		.cfi_offset 4, -12
 1016              		.cfi_offset 7, -8
 1017              		.cfi_offset 14, -4
 1018 0002 83B0     		sub	sp, sp, #12
 1019              		.cfi_def_cfa_offset 24
 1020 0004 00AF     		add	r7, sp, #0
 1021              		.cfi_def_cfa_register 7
 1022 0006 3960     		str	r1, [r7]
 1023 0008 111C     		mov	r1, r2
 1024 000a 1A1C     		mov	r2, r3
 1025 000c FB1D     		add	r3, r7, #7
 1026 000e 1870     		strb	r0, [r3]
 1027 0010 BB1D     		add	r3, r7, #6
 1028 0012 1970     		strb	r1, [r3]
 1029 0014 3B1D     		add	r3, r7, #4
 1030 0016 1A80     		strh	r2, [r3]
 238:.\main.c      ****     if(command >= 1000 && command < 1125)
 1031              		.loc 1 238 0
 1032 0018 3B1D     		add	r3, r7, #4
 1033 001a 1A88     		ldrh	r2, [r3]
 1034 001c 724B     		ldr	r3, .L65
 1035 001e 9A42     		cmp	r2, r3
 1036 0020 11D9     		bls	.L54
 1037              		.loc 1 238 0 is_stmt 0 discriminator 1
 1038 0022 3B1D     		add	r3, r7, #4
 1039 0024 1A88     		ldrh	r2, [r3]
 1040 0026 714B     		ldr	r3, .L65+4
 1041 0028 9A42     		cmp	r2, r3
 1042 002a 0CD8     		bhi	.L54
 239:.\main.c      ****     {
 240:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 1043              		.loc 1 240 0 is_stmt 1
 1044 002c FC1D     		add	r4, r7, #7
 1045 002e 3868     		ldr	r0, [r7]
 1046 0030 FB1D     		add	r3, r7, #7
 1047 0032 1978     		ldrb	r1, [r3]
 1048 0034 BB1D     		add	r3, r7, #6
 1049 0036 1A78     		ldrb	r2, [r3]
 1050 0038 6423     		mov	r3, #100
 1051 003a 5B42     		neg	r3, r3
 1052 003c FFF7FEFF 		bl	check_update
 1053 0040 031C     		mov	r3, r0
 1054 0042 2370     		strb	r3, [r4]
 1055 0044 CAE0     		b	.L55
 1056              	.L54:
 241:.\main.c      ****     }
 242:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1057              		.loc 1 242 0
 1058 0046 3B1D     		add	r3, r7, #4
 1059 0048 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 24


 1060 004a 684B     		ldr	r3, .L65+4
 1061 004c 9A42     		cmp	r2, r3
 1062 004e 11D9     		bls	.L56
 1063              		.loc 1 242 0 is_stmt 0 discriminator 1
 1064 0050 3B1D     		add	r3, r7, #4
 1065 0052 1A88     		ldrh	r2, [r3]
 1066 0054 664B     		ldr	r3, .L65+8
 1067 0056 9A42     		cmp	r2, r3
 1068 0058 0CD8     		bhi	.L56
 243:.\main.c      ****     {
 244:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1069              		.loc 1 244 0 is_stmt 1
 1070 005a FC1D     		add	r4, r7, #7
 1071 005c 3868     		ldr	r0, [r7]
 1072 005e FB1D     		add	r3, r7, #7
 1073 0060 1978     		ldrb	r1, [r3]
 1074 0062 BB1D     		add	r3, r7, #6
 1075 0064 1A78     		ldrb	r2, [r3]
 1076 0066 3223     		mov	r3, #50
 1077 0068 5B42     		neg	r3, r3
 1078 006a FFF7FEFF 		bl	check_update
 1079 006e 031C     		mov	r3, r0
 1080 0070 2370     		strb	r3, [r4]
 1081 0072 B3E0     		b	.L55
 1082              	.L56:
 245:.\main.c      ****     }
 246:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1083              		.loc 1 246 0
 1084 0074 3B1D     		add	r3, r7, #4
 1085 0076 1A88     		ldrh	r2, [r3]
 1086 0078 5D4B     		ldr	r3, .L65+8
 1087 007a 9A42     		cmp	r2, r3
 1088 007c 11D9     		bls	.L57
 1089              		.loc 1 246 0 is_stmt 0 discriminator 1
 1090 007e 3B1D     		add	r3, r7, #4
 1091 0080 1A88     		ldrh	r2, [r3]
 1092 0082 5C4B     		ldr	r3, .L65+12
 1093 0084 9A42     		cmp	r2, r3
 1094 0086 0CD8     		bhi	.L57
 247:.\main.c      ****     {
 248:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 1095              		.loc 1 248 0 is_stmt 1
 1096 0088 FC1D     		add	r4, r7, #7
 1097 008a 3868     		ldr	r0, [r7]
 1098 008c FB1D     		add	r3, r7, #7
 1099 008e 1978     		ldrb	r1, [r3]
 1100 0090 BB1D     		add	r3, r7, #6
 1101 0092 1A78     		ldrb	r2, [r3]
 1102 0094 0A23     		mov	r3, #10
 1103 0096 5B42     		neg	r3, r3
 1104 0098 FFF7FEFF 		bl	check_update
 1105 009c 031C     		mov	r3, r0
 1106 009e 2370     		strb	r3, [r4]
 1107 00a0 9CE0     		b	.L55
 1108              	.L57:
 249:.\main.c      ****     }
 250:.\main.c      ****     else if(command >= 1375 && command < 1490)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 25


 1109              		.loc 1 250 0
 1110 00a2 3B1D     		add	r3, r7, #4
 1111 00a4 1A88     		ldrh	r2, [r3]
 1112 00a6 534B     		ldr	r3, .L65+12
 1113 00a8 9A42     		cmp	r2, r3
 1114 00aa 11D9     		bls	.L58
 1115              		.loc 1 250 0 is_stmt 0 discriminator 1
 1116 00ac 3B1D     		add	r3, r7, #4
 1117 00ae 1A88     		ldrh	r2, [r3]
 1118 00b0 514B     		ldr	r3, .L65+16
 1119 00b2 9A42     		cmp	r2, r3
 1120 00b4 0CD8     		bhi	.L58
 251:.\main.c      ****     {
 252:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1121              		.loc 1 252 0 is_stmt 1
 1122 00b6 FC1D     		add	r4, r7, #7
 1123 00b8 3868     		ldr	r0, [r7]
 1124 00ba FB1D     		add	r3, r7, #7
 1125 00bc 1978     		ldrb	r1, [r3]
 1126 00be BB1D     		add	r3, r7, #6
 1127 00c0 1A78     		ldrb	r2, [r3]
 1128 00c2 0523     		mov	r3, #5
 1129 00c4 5B42     		neg	r3, r3
 1130 00c6 FFF7FEFF 		bl	check_update
 1131 00ca 031C     		mov	r3, r0
 1132 00cc 2370     		strb	r3, [r4]
 1133 00ce 85E0     		b	.L55
 1134              	.L58:
 253:.\main.c      ****     }
 254:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1135              		.loc 1 254 0
 1136 00d0 3B1D     		add	r3, r7, #4
 1137 00d2 1A88     		ldrh	r2, [r3]
 1138 00d4 494B     		ldr	r3, .L65+20
 1139 00d6 9A42     		cmp	r2, r3
 1140 00d8 10D8     		bhi	.L59
 1141              		.loc 1 254 0 is_stmt 0 discriminator 1
 1142 00da 3B1D     		add	r3, r7, #4
 1143 00dc 1A88     		ldrh	r2, [r3]
 1144 00de 464B     		ldr	r3, .L65+16
 1145 00e0 9A42     		cmp	r2, r3
 1146 00e2 0BD9     		bls	.L59
 255:.\main.c      ****     {
 256:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1147              		.loc 1 256 0 is_stmt 1
 1148 00e4 FC1D     		add	r4, r7, #7
 1149 00e6 FB1D     		add	r3, r7, #7
 1150 00e8 1A78     		ldrb	r2, [r3]
 1151 00ea BB1D     		add	r3, r7, #6
 1152 00ec 1B78     		ldrb	r3, [r3]
 1153 00ee 101C     		mov	r0, r2
 1154 00f0 191C     		mov	r1, r3
 1155 00f2 FFF7FEFF 		bl	maintain_array
 1156 00f6 031C     		mov	r3, r0
 1157 00f8 2370     		strb	r3, [r4]
 1158 00fa 6FE0     		b	.L55
 1159              	.L59:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 26


 257:.\main.c      ****     }
 258:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1160              		.loc 1 258 0
 1161 00fc 3B1D     		add	r3, r7, #4
 1162 00fe 1A88     		ldrh	r2, [r3]
 1163 0100 3E4B     		ldr	r3, .L65+20
 1164 0102 9A42     		cmp	r2, r3
 1165 0104 13D9     		bls	.L60
 1166              		.loc 1 258 0 is_stmt 0 discriminator 1
 1167 0106 3B1D     		add	r3, r7, #4
 1168 0108 1A88     		ldrh	r2, [r3]
 1169 010a 3D4B     		ldr	r3, .L65+24
 1170 010c 9A42     		cmp	r2, r3
 1171 010e 0ED8     		bhi	.L60
 259:.\main.c      ****     {
 260:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1172              		.loc 1 260 0 is_stmt 1
 1173 0110 FC1D     		add	r4, r7, #7
 1174 0112 3968     		ldr	r1, [r7]
 1175 0114 FB1D     		add	r3, r7, #7
 1176 0116 1A78     		ldrb	r2, [r3]
 1177 0118 BB1D     		add	r3, r7, #6
 1178 011a 1B78     		ldrb	r3, [r3]
 1179 011c 081C     		mov	r0, r1
 1180 011e 111C     		mov	r1, r2
 1181 0120 1A1C     		mov	r2, r3
 1182 0122 0523     		mov	r3, #5
 1183 0124 FFF7FEFF 		bl	check_update
 1184 0128 031C     		mov	r3, r0
 1185 012a 2370     		strb	r3, [r4]
 1186 012c 56E0     		b	.L55
 1187              	.L60:
 261:.\main.c      ****     }
 262:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1188              		.loc 1 262 0
 1189 012e 3B1D     		add	r3, r7, #4
 1190 0130 1A88     		ldrh	r2, [r3]
 1191 0132 334B     		ldr	r3, .L65+24
 1192 0134 9A42     		cmp	r2, r3
 1193 0136 13D9     		bls	.L61
 1194              		.loc 1 262 0 is_stmt 0 discriminator 1
 1195 0138 3B1D     		add	r3, r7, #4
 1196 013a 1A88     		ldrh	r2, [r3]
 1197 013c 314B     		ldr	r3, .L65+28
 1198 013e 9A42     		cmp	r2, r3
 1199 0140 0ED8     		bhi	.L61
 263:.\main.c      ****     {
 264:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1200              		.loc 1 264 0 is_stmt 1
 1201 0142 FC1D     		add	r4, r7, #7
 1202 0144 3968     		ldr	r1, [r7]
 1203 0146 FB1D     		add	r3, r7, #7
 1204 0148 1A78     		ldrb	r2, [r3]
 1205 014a BB1D     		add	r3, r7, #6
 1206 014c 1B78     		ldrb	r3, [r3]
 1207 014e 081C     		mov	r0, r1
 1208 0150 111C     		mov	r1, r2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 27


 1209 0152 1A1C     		mov	r2, r3
 1210 0154 0A23     		mov	r3, #10
 1211 0156 FFF7FEFF 		bl	check_update
 1212 015a 031C     		mov	r3, r0
 1213 015c 2370     		strb	r3, [r4]
 1214 015e 3DE0     		b	.L55
 1215              	.L61:
 265:.\main.c      ****     }
 266:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1216              		.loc 1 266 0
 1217 0160 3B1D     		add	r3, r7, #4
 1218 0162 1A88     		ldrh	r2, [r3]
 1219 0164 274B     		ldr	r3, .L65+28
 1220 0166 9A42     		cmp	r2, r3
 1221 0168 13D9     		bls	.L62
 1222              		.loc 1 266 0 is_stmt 0 discriminator 1
 1223 016a 3B1D     		add	r3, r7, #4
 1224 016c 1A88     		ldrh	r2, [r3]
 1225 016e 264B     		ldr	r3, .L65+32
 1226 0170 9A42     		cmp	r2, r3
 1227 0172 0ED8     		bhi	.L62
 267:.\main.c      ****     {
 268:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1228              		.loc 1 268 0 is_stmt 1
 1229 0174 FC1D     		add	r4, r7, #7
 1230 0176 3968     		ldr	r1, [r7]
 1231 0178 FB1D     		add	r3, r7, #7
 1232 017a 1A78     		ldrb	r2, [r3]
 1233 017c BB1D     		add	r3, r7, #6
 1234 017e 1B78     		ldrb	r3, [r3]
 1235 0180 081C     		mov	r0, r1
 1236 0182 111C     		mov	r1, r2
 1237 0184 1A1C     		mov	r2, r3
 1238 0186 3223     		mov	r3, #50
 1239 0188 FFF7FEFF 		bl	check_update
 1240 018c 031C     		mov	r3, r0
 1241 018e 2370     		strb	r3, [r4]
 1242 0190 24E0     		b	.L55
 1243              	.L62:
 269:.\main.c      ****     }
 270:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1244              		.loc 1 270 0
 1245 0192 3B1D     		add	r3, r7, #4
 1246 0194 1A88     		ldrh	r2, [r3]
 1247 0196 1C4B     		ldr	r3, .L65+32
 1248 0198 9A42     		cmp	r2, r3
 1249 019a 14D9     		bls	.L63
 1250              		.loc 1 270 0 is_stmt 0 discriminator 1
 1251 019c 3B1D     		add	r3, r7, #4
 1252 019e 1A88     		ldrh	r2, [r3]
 1253 01a0 FA23     		mov	r3, #250
 1254 01a2 DB00     		lsl	r3, r3, #3
 1255 01a4 9A42     		cmp	r2, r3
 1256 01a6 0ED8     		bhi	.L63
 271:.\main.c      ****     {
 272:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1257              		.loc 1 272 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 28


 1258 01a8 FC1D     		add	r4, r7, #7
 1259 01aa 3968     		ldr	r1, [r7]
 1260 01ac FB1D     		add	r3, r7, #7
 1261 01ae 1A78     		ldrb	r2, [r3]
 1262 01b0 BB1D     		add	r3, r7, #6
 1263 01b2 1B78     		ldrb	r3, [r3]
 1264 01b4 081C     		mov	r0, r1
 1265 01b6 111C     		mov	r1, r2
 1266 01b8 1A1C     		mov	r2, r3
 1267 01ba 6423     		mov	r3, #100
 1268 01bc FFF7FEFF 		bl	check_update
 1269 01c0 031C     		mov	r3, r0
 1270 01c2 2370     		strb	r3, [r4]
 1271 01c4 0AE0     		b	.L55
 1272              	.L63:
 273:.\main.c      ****     }
 274:.\main.c      ****     else
 275:.\main.c      ****     {
 276:.\main.c      ****         //throw error
 277:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1273              		.loc 1 277 0
 1274 01c6 FC1D     		add	r4, r7, #7
 1275 01c8 FB1D     		add	r3, r7, #7
 1276 01ca 1A78     		ldrb	r2, [r3]
 1277 01cc BB1D     		add	r3, r7, #6
 1278 01ce 1B78     		ldrb	r3, [r3]
 1279 01d0 101C     		mov	r0, r2
 1280 01d2 191C     		mov	r1, r3
 1281 01d4 FFF7FEFF 		bl	maintain_array
 1282 01d8 031C     		mov	r3, r0
 1283 01da 2370     		strb	r3, [r4]
 1284              	.L55:
 278:.\main.c      ****     }
 279:.\main.c      ****     return cur_pos;
 1285              		.loc 1 279 0
 1286 01dc FB1D     		add	r3, r7, #7
 1287 01de 1B78     		ldrb	r3, [r3]
 280:.\main.c      **** }
 1288              		.loc 1 280 0
 1289 01e0 181C     		mov	r0, r3
 1290 01e2 BD46     		mov	sp, r7
 1291 01e4 03B0     		add	sp, sp, #12
 1292              		@ sp needed
 1293 01e6 90BD     		pop	{r4, r7, pc}
 1294              	.L66:
 1295              		.align	2
 1296              	.L65:
 1297 01e8 E7030000 		.word	999
 1298 01ec 64040000 		.word	1124
 1299 01f0 E1040000 		.word	1249
 1300 01f4 5E050000 		.word	1374
 1301 01f8 D1050000 		.word	1489
 1302 01fc E6050000 		.word	1510
 1303 0200 59060000 		.word	1625
 1304 0204 D6060000 		.word	1750
 1305 0208 53070000 		.word	1875
 1306              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 29


 1307              	.LFE40:
 1308              		.size	pos_to_vel, .-pos_to_vel
 1309              		.section	.text.make_command,"ax",%progbits
 1310              		.align	2
 1311              		.global	make_command
 1312              		.code	16
 1313              		.thumb_func
 1314              		.type	make_command, %function
 1315              	make_command:
 1316              	.LFB41:
 281:.\main.c      **** 
 282:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 283:.\main.c      **** {
 1317              		.loc 1 283 0
 1318              		.cfi_startproc
 1319 0000 80B5     		push	{r7, lr}
 1320              		.cfi_def_cfa_offset 8
 1321              		.cfi_offset 7, -8
 1322              		.cfi_offset 14, -4
 1323 0002 84B0     		sub	sp, sp, #16
 1324              		.cfi_def_cfa_offset 24
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 1327 0006 7860     		str	r0, [r7, #4]
 1328 0008 FB1C     		add	r3, r7, #3
 1329 000a 1970     		strb	r1, [r3]
 1330 000c BB1C     		add	r3, r7, #2
 1331 000e 1A70     		strb	r2, [r3]
 284:.\main.c      ****     uint16 command;
 285:.\main.c      ****     int16 temp1;
 286:.\main.c      ****     int16 temp2;
 287:.\main.c      ****     int16 temp3;
 288:.\main.c      ****     
 289:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1332              		.loc 1 289 0
 1333 0010 FB1C     		add	r3, r7, #3
 1334 0012 1B78     		ldrb	r3, [r3]
 1335 0014 7A68     		ldr	r2, [r7, #4]
 1336 0016 D318     		add	r3, r2, r3
 1337 0018 1B78     		ldrb	r3, [r3]
 1338 001a 5BB2     		sxtb	r3, r3
 1339 001c 1A02     		lsl	r2, r3, #8
 1340 001e 3B1C     		mov	r3, r7
 1341 0020 0E33     		add	r3, r3, #14
 1342 0022 1A80     		strh	r2, [r3]
 290:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1343              		.loc 1 290 0
 1344 0024 BB1C     		add	r3, r7, #2
 1345 0026 1B78     		ldrb	r3, [r3]
 1346 0028 7A68     		ldr	r2, [r7, #4]
 1347 002a D318     		add	r3, r2, r3
 1348 002c 1B78     		ldrb	r3, [r3]
 1349 002e 5BB2     		sxtb	r3, r3
 1350 0030 9AB2     		uxth	r2, r3
 1351 0032 3B1C     		mov	r3, r7
 1352 0034 0C33     		add	r3, r3, #12
 1353 0036 111C     		add	r1, r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 30


 1354 0038 FF22     		mov	r2, #255
 1355 003a 0A40     		and	r2, r1
 1356 003c 1A80     		strh	r2, [r3]
 291:.\main.c      ****     temp3 = temp1 | temp2;
 1357              		.loc 1 291 0
 1358 003e 3B1C     		mov	r3, r7
 1359 0040 0A33     		add	r3, r3, #10
 1360 0042 391C     		mov	r1, r7
 1361 0044 0E31     		add	r1, r1, #14
 1362 0046 3A1C     		mov	r2, r7
 1363 0048 0C32     		add	r2, r2, #12
 1364 004a 0988     		ldrh	r1, [r1]
 1365 004c 1288     		ldrh	r2, [r2]
 1366 004e 0A43     		orr	r2, r1
 1367 0050 1A80     		strh	r2, [r3]
 292:.\main.c      ****     command = (temp3/2) + 1500;
 1368              		.loc 1 292 0
 1369 0052 3B1C     		mov	r3, r7
 1370 0054 0A33     		add	r3, r3, #10
 1371 0056 0021     		mov	r1, #0
 1372 0058 5B5E     		ldrsh	r3, [r3, r1]
 1373 005a 002B     		cmp	r3, #0
 1374 005c 00DA     		bge	.L68
 1375 005e 0133     		add	r3, r3, #1
 1376              	.L68:
 1377 0060 5B10     		asr	r3, r3, #1
 1378 0062 9BB2     		uxth	r3, r3
 1379 0064 9AB2     		uxth	r2, r3
 1380 0066 3B1C     		mov	r3, r7
 1381 0068 0833     		add	r3, r3, #8
 1382 006a 0549     		ldr	r1, .L70
 1383 006c 5218     		add	r2, r2, r1
 1384 006e 1A80     		strh	r2, [r3]
 293:.\main.c      ****     return command;
 1385              		.loc 1 293 0
 1386 0070 3B1C     		mov	r3, r7
 1387 0072 0833     		add	r3, r3, #8
 1388 0074 1B88     		ldrh	r3, [r3]
 294:.\main.c      **** }
 1389              		.loc 1 294 0
 1390 0076 181C     		mov	r0, r3
 1391 0078 BD46     		mov	sp, r7
 1392 007a 04B0     		add	sp, sp, #16
 1393              		@ sp needed
 1394 007c 80BD     		pop	{r7, pc}
 1395              	.L71:
 1396 007e C046     		.align	2
 1397              	.L70:
 1398 0080 DC050000 		.word	1500
 1399              		.cfi_endproc
 1400              	.LFE41:
 1401              		.size	make_command, .-make_command
 1402              		.section	.text.potFeedback,"ax",%progbits
 1403              		.align	2
 1404              		.global	potFeedback
 1405              		.code	16
 1406              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 31


 1407              		.type	potFeedback, %function
 1408              	potFeedback:
 1409              	.LFB42:
 295:.\main.c      **** 
 296:.\main.c      **** uint16 potFeedback(uint32 channel)
 297:.\main.c      **** {
 1410              		.loc 1 297 0
 1411              		.cfi_startproc
 1412 0000 80B5     		push	{r7, lr}
 1413              		.cfi_def_cfa_offset 8
 1414              		.cfi_offset 7, -8
 1415              		.cfi_offset 14, -4
 1416 0002 84B0     		sub	sp, sp, #16
 1417              		.cfi_def_cfa_offset 24
 1418 0004 00AF     		add	r7, sp, #0
 1419              		.cfi_def_cfa_register 7
 1420 0006 7860     		str	r0, [r7, #4]
 298:.\main.c      ****     //TODO: uncomment this section
 299:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1421              		.loc 1 299 0
 1422 0008 7B68     		ldr	r3, [r7, #4]
 1423 000a 181C     		mov	r0, r3
 1424 000c FFF7FEFF 		bl	ADC_GetResult16
 1425 0010 031C     		mov	r3, r0
 1426 0012 1A1C     		mov	r2, r3
 1427 0014 3B1C     		mov	r3, r7
 1428 0016 0E33     		add	r3, r3, #14
 1429 0018 1A80     		strh	r2, [r3]
 300:.\main.c      ****     //uint16 feedback = 500;
 301:.\main.c      ****     return feedback;
 1430              		.loc 1 301 0
 1431 001a 3B1C     		mov	r3, r7
 1432 001c 0E33     		add	r3, r3, #14
 1433 001e 1B88     		ldrh	r3, [r3]
 302:.\main.c      **** }
 1434              		.loc 1 302 0
 1435 0020 181C     		mov	r0, r3
 1436 0022 BD46     		mov	sp, r7
 1437 0024 04B0     		add	sp, sp, #16
 1438              		@ sp needed
 1439 0026 80BD     		pop	{r7, pc}
 1440              		.cfi_endproc
 1441              	.LFE42:
 1442              		.size	potFeedback, .-potFeedback
 1443              		.section	.text.send_feedback,"ax",%progbits
 1444              		.align	2
 1445              		.global	send_feedback
 1446              		.code	16
 1447              		.thumb_func
 1448              		.type	send_feedback, %function
 1449              	send_feedback:
 1450              	.LFB43:
 303:.\main.c      **** 
 304:.\main.c      **** void send_feedback()
 305:.\main.c      **** {
 1451              		.loc 1 305 0
 1452              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 32


 1453 0000 80B5     		push	{r7, lr}
 1454              		.cfi_def_cfa_offset 8
 1455              		.cfi_offset 7, -8
 1456              		.cfi_offset 14, -4
 1457 0002 00AF     		add	r7, sp, #0
 1458              		.cfi_def_cfa_register 7
 306:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 307:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 308:.\main.c      ****     //TODO define system state
 309:.\main.c      ****     //send packet via serial to wiznet
 310:.\main.c      **** }
 1459              		.loc 1 310 0
 1460 0004 BD46     		mov	sp, r7
 1461              		@ sp needed
 1462 0006 80BD     		pop	{r7, pc}
 1463              		.cfi_endproc
 1464              	.LFE43:
 1465              		.size	send_feedback, .-send_feedback
 1466              		.section	.text.fill_data_array,"ax",%progbits
 1467              		.align	2
 1468              		.global	fill_data_array
 1469              		.code	16
 1470              		.thumb_func
 1471              		.type	fill_data_array, %function
 1472              	fill_data_array:
 1473              	.LFB44:
 311:.\main.c      **** 
 312:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 313:.\main.c      **** void fill_data_array()
 314:.\main.c      **** {
 1474              		.loc 1 314 0
 1475              		.cfi_startproc
 1476 0000 80B5     		push	{r7, lr}
 1477              		.cfi_def_cfa_offset 8
 1478              		.cfi_offset 7, -8
 1479              		.cfi_offset 14, -4
 1480 0002 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 315:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1482              		.loc 1 315 0
 1483 0004 034B     		ldr	r3, .L76
 1484 0006 181C     		mov	r0, r3
 1485 0008 1621     		mov	r1, #22
 1486 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 316:.\main.c      **** //    uint8 i = 0;
 317:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 318:.\main.c      **** //    {
 319:.\main.c      **** //        data_array[i] = test_array[i];
 320:.\main.c      **** //    }
 321:.\main.c      **** }
 1487              		.loc 1 321 0
 1488 000e BD46     		mov	sp, r7
 1489              		@ sp needed
 1490 0010 80BD     		pop	{r7, pc}
 1491              	.L77:
 1492 0012 C046     		.align	2
 1493              	.L76:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 33


 1494 0014 00000000 		.word	data_array
 1495              		.cfi_endproc
 1496              	.LFE44:
 1497              		.size	fill_data_array, .-fill_data_array
 1498              		.section	.text.ServoGoalPosition,"ax",%progbits
 1499              		.align	2
 1500              		.global	ServoGoalPosition
 1501              		.code	16
 1502              		.thumb_func
 1503              		.type	ServoGoalPosition, %function
 1504              	ServoGoalPosition:
 1505              	.LFB45:
 322:.\main.c      **** 
 323:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 324:.\main.c      **** {
 1506              		.loc 1 324 0
 1507              		.cfi_startproc
 1508 0000 80B5     		push	{r7, lr}
 1509              		.cfi_def_cfa_offset 8
 1510              		.cfi_offset 7, -8
 1511              		.cfi_offset 14, -4
 1512 0002 86B0     		sub	sp, sp, #24
 1513              		.cfi_def_cfa_offset 32
 1514 0004 00AF     		add	r7, sp, #0
 1515              		.cfi_def_cfa_register 7
 1516 0006 0A1C     		mov	r2, r1
 1517 0008 FB1D     		add	r3, r7, #7
 1518 000a 011C     		add	r1, r0, #0
 1519 000c 1970     		strb	r1, [r3]
 1520 000e 3B1D     		add	r3, r7, #4
 1521 0010 1A80     		strh	r2, [r3]
 325:.\main.c      ****     uint8 array[9];
 326:.\main.c      ****     
 327:.\main.c      ****     array[0] = 0xFF;
 1522              		.loc 1 327 0
 1523 0012 3B1C     		mov	r3, r7
 1524 0014 0C33     		add	r3, r3, #12
 1525 0016 FF22     		mov	r2, #255
 1526 0018 1A70     		strb	r2, [r3]
 328:.\main.c      ****     array[1] = 0xFF;
 1527              		.loc 1 328 0
 1528 001a 3B1C     		mov	r3, r7
 1529 001c 0C33     		add	r3, r3, #12
 1530 001e FF22     		mov	r2, #255
 1531 0020 5A70     		strb	r2, [r3, #1]
 329:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1532              		.loc 1 329 0
 1533 0022 3B1C     		mov	r3, r7
 1534 0024 0C33     		add	r3, r3, #12
 1535 0026 FA1D     		add	r2, r7, #7
 1536 0028 1278     		ldrb	r2, [r2]
 1537 002a 9A70     		strb	r2, [r3, #2]
 330:.\main.c      ****     array[3] = 0x05;
 1538              		.loc 1 330 0
 1539 002c 3B1C     		mov	r3, r7
 1540 002e 0C33     		add	r3, r3, #12
 1541 0030 0522     		mov	r2, #5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 34


 1542 0032 DA70     		strb	r2, [r3, #3]
 331:.\main.c      ****     array[4] = 0x03; //write instruction
 1543              		.loc 1 331 0
 1544 0034 3B1C     		mov	r3, r7
 1545 0036 0C33     		add	r3, r3, #12
 1546 0038 0322     		mov	r2, #3
 1547 003a 1A71     		strb	r2, [r3, #4]
 332:.\main.c      ****     array[5] = 0x1E;
 1548              		.loc 1 332 0
 1549 003c 3B1C     		mov	r3, r7
 1550 003e 0C33     		add	r3, r3, #12
 1551 0040 1E22     		mov	r2, #30
 1552 0042 5A71     		strb	r2, [r3, #5]
 333:.\main.c      ****     array[6] = position;
 1553              		.loc 1 333 0
 1554 0044 3B1D     		add	r3, r7, #4
 1555 0046 1B88     		ldrh	r3, [r3]
 1556 0048 DAB2     		uxtb	r2, r3
 1557 004a 3B1C     		mov	r3, r7
 1558 004c 0C33     		add	r3, r3, #12
 1559 004e 9A71     		strb	r2, [r3, #6]
 334:.\main.c      ****     array[7] = position >> 8;
 1560              		.loc 1 334 0
 1561 0050 3B1D     		add	r3, r7, #4
 1562 0052 1B88     		ldrh	r3, [r3]
 1563 0054 1B0A     		lsr	r3, r3, #8
 1564 0056 9BB2     		uxth	r3, r3
 1565 0058 DAB2     		uxtb	r2, r3
 1566 005a 3B1C     		mov	r3, r7
 1567 005c 0C33     		add	r3, r3, #12
 1568 005e DA71     		strb	r2, [r3, #7]
 335:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1569              		.loc 1 335 0
 1570 0060 3B1C     		mov	r3, r7
 1571 0062 0C33     		add	r3, r3, #12
 1572 0064 9A79     		ldrb	r2, [r3, #6]
 1573 0066 FB1D     		add	r3, r7, #7
 1574 0068 1B78     		ldrb	r3, [r3]
 1575 006a D318     		add	r3, r2, r3
 1576 006c DAB2     		uxtb	r2, r3
 1577 006e 3B1C     		mov	r3, r7
 1578 0070 0C33     		add	r3, r3, #12
 1579 0072 DB79     		ldrb	r3, [r3, #7]
 1580 0074 D318     		add	r3, r2, r3
 1581 0076 DBB2     		uxtb	r3, r3
 1582 0078 2633     		add	r3, r3, #38
 1583 007a DBB2     		uxtb	r3, r3
 1584 007c DB43     		mvn	r3, r3
 1585 007e DAB2     		uxtb	r2, r3
 1586 0080 3B1C     		mov	r3, r7
 1587 0082 0C33     		add	r3, r3, #12
 1588 0084 1A72     		strb	r2, [r3, #8]
 336:.\main.c      ****     
 337:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1589              		.loc 1 337 0
 1590 0086 3B1C     		mov	r3, r7
 1591 0088 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 35


 1592 008a 181C     		mov	r0, r3
 1593 008c 0921     		mov	r1, #9
 1594 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 338:.\main.c      **** }
 1595              		.loc 1 338 0
 1596 0092 BD46     		mov	sp, r7
 1597 0094 06B0     		add	sp, sp, #24
 1598              		@ sp needed
 1599 0096 80BD     		pop	{r7, pc}
 1600              		.cfi_endproc
 1601              	.LFE45:
 1602              		.size	ServoGoalPosition, .-ServoGoalPosition
 1603              		.section	.text.SetServoTorque,"ax",%progbits
 1604              		.align	2
 1605              		.global	SetServoTorque
 1606              		.code	16
 1607              		.thumb_func
 1608              		.type	SetServoTorque, %function
 1609              	SetServoTorque:
 1610              	.LFB46:
 339:.\main.c      **** 
 340:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 341:.\main.c      **** {
 1611              		.loc 1 341 0
 1612              		.cfi_startproc
 1613 0000 80B5     		push	{r7, lr}
 1614              		.cfi_def_cfa_offset 8
 1615              		.cfi_offset 7, -8
 1616              		.cfi_offset 14, -4
 1617 0002 86B0     		sub	sp, sp, #24
 1618              		.cfi_def_cfa_offset 32
 1619 0004 00AF     		add	r7, sp, #0
 1620              		.cfi_def_cfa_register 7
 1621 0006 0A1C     		mov	r2, r1
 1622 0008 FB1D     		add	r3, r7, #7
 1623 000a 011C     		add	r1, r0, #0
 1624 000c 1970     		strb	r1, [r3]
 1625 000e 3B1D     		add	r3, r7, #4
 1626 0010 1A80     		strh	r2, [r3]
 342:.\main.c      ****     uint8 array[9];
 343:.\main.c      ****     
 344:.\main.c      ****     array[0] = 0xFF;
 1627              		.loc 1 344 0
 1628 0012 3B1C     		mov	r3, r7
 1629 0014 0C33     		add	r3, r3, #12
 1630 0016 FF22     		mov	r2, #255
 1631 0018 1A70     		strb	r2, [r3]
 345:.\main.c      ****     array[1] = 0xFF;
 1632              		.loc 1 345 0
 1633 001a 3B1C     		mov	r3, r7
 1634 001c 0C33     		add	r3, r3, #12
 1635 001e FF22     		mov	r2, #255
 1636 0020 5A70     		strb	r2, [r3, #1]
 346:.\main.c      ****     array[2] = servoID; 
 1637              		.loc 1 346 0
 1638 0022 3B1C     		mov	r3, r7
 1639 0024 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 36


 1640 0026 FA1D     		add	r2, r7, #7
 1641 0028 1278     		ldrb	r2, [r2]
 1642 002a 9A70     		strb	r2, [r3, #2]
 347:.\main.c      ****     array[3] = 0x05;
 1643              		.loc 1 347 0
 1644 002c 3B1C     		mov	r3, r7
 1645 002e 0C33     		add	r3, r3, #12
 1646 0030 0522     		mov	r2, #5
 1647 0032 DA70     		strb	r2, [r3, #3]
 348:.\main.c      ****     array[4] = 0x03; //write instruction
 1648              		.loc 1 348 0
 1649 0034 3B1C     		mov	r3, r7
 1650 0036 0C33     		add	r3, r3, #12
 1651 0038 0322     		mov	r2, #3
 1652 003a 1A71     		strb	r2, [r3, #4]
 349:.\main.c      ****     array[5] = 0x0E;
 1653              		.loc 1 349 0
 1654 003c 3B1C     		mov	r3, r7
 1655 003e 0C33     		add	r3, r3, #12
 1656 0040 0E22     		mov	r2, #14
 1657 0042 5A71     		strb	r2, [r3, #5]
 350:.\main.c      ****     array[6] = torque;
 1658              		.loc 1 350 0
 1659 0044 3B1D     		add	r3, r7, #4
 1660 0046 1B88     		ldrh	r3, [r3]
 1661 0048 DAB2     		uxtb	r2, r3
 1662 004a 3B1C     		mov	r3, r7
 1663 004c 0C33     		add	r3, r3, #12
 1664 004e 9A71     		strb	r2, [r3, #6]
 351:.\main.c      ****     array[7] = torque >> 8;
 1665              		.loc 1 351 0
 1666 0050 3B1D     		add	r3, r7, #4
 1667 0052 1B88     		ldrh	r3, [r3]
 1668 0054 1B0A     		lsr	r3, r3, #8
 1669 0056 9BB2     		uxth	r3, r3
 1670 0058 DAB2     		uxtb	r2, r3
 1671 005a 3B1C     		mov	r3, r7
 1672 005c 0C33     		add	r3, r3, #12
 1673 005e DA71     		strb	r2, [r3, #7]
 352:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1674              		.loc 1 352 0
 1675 0060 3B1C     		mov	r3, r7
 1676 0062 0C33     		add	r3, r3, #12
 1677 0064 9A79     		ldrb	r2, [r3, #6]
 1678 0066 FB1D     		add	r3, r7, #7
 1679 0068 1B78     		ldrb	r3, [r3]
 1680 006a D318     		add	r3, r2, r3
 1681 006c DAB2     		uxtb	r2, r3
 1682 006e 3B1C     		mov	r3, r7
 1683 0070 0C33     		add	r3, r3, #12
 1684 0072 DB79     		ldrb	r3, [r3, #7]
 1685 0074 D318     		add	r3, r2, r3
 1686 0076 DBB2     		uxtb	r3, r3
 1687 0078 1633     		add	r3, r3, #22
 1688 007a DBB2     		uxtb	r3, r3
 1689 007c DB43     		mvn	r3, r3
 1690 007e DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 37


 1691 0080 3B1C     		mov	r3, r7
 1692 0082 0C33     		add	r3, r3, #12
 1693 0084 1A72     		strb	r2, [r3, #8]
 353:.\main.c      ****     
 354:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1694              		.loc 1 354 0
 1695 0086 3B1C     		mov	r3, r7
 1696 0088 0C33     		add	r3, r3, #12
 1697 008a 181C     		mov	r0, r3
 1698 008c 0921     		mov	r1, #9
 1699 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 355:.\main.c      ****     
 356:.\main.c      **** }    
 1700              		.loc 1 356 0
 1701 0092 BD46     		mov	sp, r7
 1702 0094 06B0     		add	sp, sp, #24
 1703              		@ sp needed
 1704 0096 80BD     		pop	{r7, pc}
 1705              		.cfi_endproc
 1706              	.LFE46:
 1707              		.size	SetServoTorque, .-SetServoTorque
 1708              		.section	.text.ServoSpeed,"ax",%progbits
 1709              		.align	2
 1710              		.global	ServoSpeed
 1711              		.code	16
 1712              		.thumb_func
 1713              		.type	ServoSpeed, %function
 1714              	ServoSpeed:
 1715              	.LFB47:
 357:.\main.c      **** 
 358:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 359:.\main.c      **** {
 1716              		.loc 1 359 0
 1717              		.cfi_startproc
 1718 0000 80B5     		push	{r7, lr}
 1719              		.cfi_def_cfa_offset 8
 1720              		.cfi_offset 7, -8
 1721              		.cfi_offset 14, -4
 1722 0002 86B0     		sub	sp, sp, #24
 1723              		.cfi_def_cfa_offset 32
 1724 0004 00AF     		add	r7, sp, #0
 1725              		.cfi_def_cfa_register 7
 1726 0006 0A1C     		mov	r2, r1
 1727 0008 FB1D     		add	r3, r7, #7
 1728 000a 011C     		add	r1, r0, #0
 1729 000c 1970     		strb	r1, [r3]
 1730 000e 3B1D     		add	r3, r7, #4
 1731 0010 1A80     		strh	r2, [r3]
 360:.\main.c      ****     uint8 array[9];
 361:.\main.c      ****     
 362:.\main.c      ****     array[0] = 0xFF;
 1732              		.loc 1 362 0
 1733 0012 3B1C     		mov	r3, r7
 1734 0014 0C33     		add	r3, r3, #12
 1735 0016 FF22     		mov	r2, #255
 1736 0018 1A70     		strb	r2, [r3]
 363:.\main.c      ****     array[1] = 0xFF;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 38


 1737              		.loc 1 363 0
 1738 001a 3B1C     		mov	r3, r7
 1739 001c 0C33     		add	r3, r3, #12
 1740 001e FF22     		mov	r2, #255
 1741 0020 5A70     		strb	r2, [r3, #1]
 364:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1742              		.loc 1 364 0
 1743 0022 3B1C     		mov	r3, r7
 1744 0024 0C33     		add	r3, r3, #12
 1745 0026 FA1D     		add	r2, r7, #7
 1746 0028 1278     		ldrb	r2, [r2]
 1747 002a 9A70     		strb	r2, [r3, #2]
 365:.\main.c      ****     array[3] = 0x05;
 1748              		.loc 1 365 0
 1749 002c 3B1C     		mov	r3, r7
 1750 002e 0C33     		add	r3, r3, #12
 1751 0030 0522     		mov	r2, #5
 1752 0032 DA70     		strb	r2, [r3, #3]
 366:.\main.c      ****     array[4] = 0x03; //write instruction
 1753              		.loc 1 366 0
 1754 0034 3B1C     		mov	r3, r7
 1755 0036 0C33     		add	r3, r3, #12
 1756 0038 0322     		mov	r2, #3
 1757 003a 1A71     		strb	r2, [r3, #4]
 367:.\main.c      ****     array[5] = 0x20;
 1758              		.loc 1 367 0
 1759 003c 3B1C     		mov	r3, r7
 1760 003e 0C33     		add	r3, r3, #12
 1761 0040 2022     		mov	r2, #32
 1762 0042 5A71     		strb	r2, [r3, #5]
 368:.\main.c      ****     array[6] = speed;
 1763              		.loc 1 368 0
 1764 0044 3B1D     		add	r3, r7, #4
 1765 0046 1B88     		ldrh	r3, [r3]
 1766 0048 DAB2     		uxtb	r2, r3
 1767 004a 3B1C     		mov	r3, r7
 1768 004c 0C33     		add	r3, r3, #12
 1769 004e 9A71     		strb	r2, [r3, #6]
 369:.\main.c      ****     array[7] = speed >> 8;
 1770              		.loc 1 369 0
 1771 0050 3B1D     		add	r3, r7, #4
 1772 0052 1B88     		ldrh	r3, [r3]
 1773 0054 1B0A     		lsr	r3, r3, #8
 1774 0056 9BB2     		uxth	r3, r3
 1775 0058 DAB2     		uxtb	r2, r3
 1776 005a 3B1C     		mov	r3, r7
 1777 005c 0C33     		add	r3, r3, #12
 1778 005e DA71     		strb	r2, [r3, #7]
 370:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1779              		.loc 1 370 0
 1780 0060 3B1C     		mov	r3, r7
 1781 0062 0C33     		add	r3, r3, #12
 1782 0064 9A79     		ldrb	r2, [r3, #6]
 1783 0066 FB1D     		add	r3, r7, #7
 1784 0068 1B78     		ldrb	r3, [r3]
 1785 006a D318     		add	r3, r2, r3
 1786 006c DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 39


 1787 006e 3B1C     		mov	r3, r7
 1788 0070 0C33     		add	r3, r3, #12
 1789 0072 DB79     		ldrb	r3, [r3, #7]
 1790 0074 D318     		add	r3, r2, r3
 1791 0076 DBB2     		uxtb	r3, r3
 1792 0078 2833     		add	r3, r3, #40
 1793 007a DBB2     		uxtb	r3, r3
 1794 007c DB43     		mvn	r3, r3
 1795 007e DAB2     		uxtb	r2, r3
 1796 0080 3B1C     		mov	r3, r7
 1797 0082 0C33     		add	r3, r3, #12
 1798 0084 1A72     		strb	r2, [r3, #8]
 371:.\main.c      ****     
 372:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1799              		.loc 1 372 0
 1800 0086 3B1C     		mov	r3, r7
 1801 0088 0C33     		add	r3, r3, #12
 1802 008a 181C     		mov	r0, r3
 1803 008c 0921     		mov	r1, #9
 1804 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 373:.\main.c      ****     
 374:.\main.c      **** }
 1805              		.loc 1 374 0
 1806 0092 BD46     		mov	sp, r7
 1807 0094 06B0     		add	sp, sp, #24
 1808              		@ sp needed
 1809 0096 80BD     		pop	{r7, pc}
 1810              		.cfi_endproc
 1811              	.LFE47:
 1812              		.size	ServoSpeed, .-ServoSpeed
 1813              		.comm	wristTilt_state,1,1
 1814              		.section	.text.wristTilt,"ax",%progbits
 1815              		.align	2
 1816              		.global	wristTilt
 1817              		.code	16
 1818              		.thumb_func
 1819              		.type	wristTilt, %function
 1820              	wristTilt:
 1821              	.LFB48:
 375:.\main.c      **** 
 376:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 377:.\main.c      **** //control the tilting motion of the wrist
 378:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 379:.\main.c      **** {
 1822              		.loc 1 379 0
 1823              		.cfi_startproc
 1824 0000 90B5     		push	{r4, r7, lr}
 1825              		.cfi_def_cfa_offset 12
 1826              		.cfi_offset 4, -12
 1827              		.cfi_offset 7, -8
 1828              		.cfi_offset 14, -4
 1829 0002 85B0     		sub	sp, sp, #20
 1830              		.cfi_def_cfa_offset 32
 1831 0004 00AF     		add	r7, sp, #0
 1832              		.cfi_def_cfa_register 7
 1833 0006 021C     		mov	r2, r0
 1834 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 40


 1835 000a FB1D     		add	r3, r7, #7
 1836 000c 1A70     		strb	r2, [r3]
 380:.\main.c      ****     // Overview
 381:.\main.c      ****     //take instruction from data_array
 382:.\main.c      ****     //smooth input
 383:.\main.c      ****     //actuate the tilting using UART
 384:.\main.c      ****     //get feedback
 385:.\main.c      **** 
 386:.\main.c      ****     //-------------------------- 
 387:.\main.c      ****     // Dynamixel Servo specific
 388:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 389:.\main.c      ****     // TODO: Set the desired position
 390:.\main.c      **** 
 391:.\main.c      ****     //--------------------------
 392:.\main.c      ****     // State machine
 393:.\main.c      ****     
 394:.\main.c      ****     uint8 i;
 395:.\main.c      ****     uint16 avg;
 396:.\main.c      ****     uint16 command;
 397:.\main.c      ****     
 398:.\main.c      ****     switch(wristTilt_state){ //actions
 1837              		.loc 1 398 0
 1838 000e 524B     		ldr	r3, .L107
 1839 0010 1B78     		ldrb	r3, [r3]
 1840 0012 012B     		cmp	r3, #1
 1841 0014 03D0     		beq	.L83
 1842 0016 6BDD     		ble	.L105
 1843 0018 022B     		cmp	r3, #2
 1844 001a 22D0     		beq	.L86
 399:.\main.c      ****         case tilt_start:
 400:.\main.c      ****             break;
 401:.\main.c      **** 
 402:.\main.c      ****         case tilt_init:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 404:.\main.c      ****             {
 405:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 406:.\main.c      ****             }
 407:.\main.c      ****             WT_arr_cspot = 0;
 408:.\main.c      ****             
 409:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 410:.\main.c      ****             break;
 411:.\main.c      **** 
 412:.\main.c      ****         case tilt_control:
 413:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 414:.\main.c      ****             
 415:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 416:.\main.c      ****             
 417:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 418:.\main.c      ****             {
 419:.\main.c      ****                 WT_arr_cspot++;
 420:.\main.c      ****             }
 421:.\main.c      ****             else
 422:.\main.c      ****             {
 423:.\main.c      ****                 WT_arr_cspot = 0;
 424:.\main.c      ****             }
 425:.\main.c      ****             
 426:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 41


 427:.\main.c      ****             
 428:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 429:.\main.c      ****             
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 431:.\main.c      ****             {
 432:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 433:.\main.c      ****             }
 434:.\main.c      ****             else
 435:.\main.c      ****             {
 436:.\main.c      ****                 //throw error
 437:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 438:.\main.c      ****             }
 439:.\main.c      ****             WT_FLAG = 0;
 440:.\main.c      ****             break;
 441:.\main.c      ****             
 442:.\main.c      ****         case tilt_wait:
 443:.\main.c      ****             break;
 1845              		.loc 1 443 0
 1846 001c 69E0     		b	.L82
 1847              	.L83:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1848              		.loc 1 403 0
 1849 001e 3B1C     		mov	r3, r7
 1850 0020 0F33     		add	r3, r3, #15
 1851 0022 0022     		mov	r2, #0
 1852 0024 1A70     		strb	r2, [r3]
 1853 0026 0EE0     		b	.L88
 1854              	.L89:
 405:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 1855              		.loc 1 405 0 discriminator 2
 1856 0028 3B1C     		mov	r3, r7
 1857 002a 0F33     		add	r3, r3, #15
 1858 002c 1B78     		ldrb	r3, [r3]
 1859 002e 5B00     		lsl	r3, r3, #1
 1860 0030 3A68     		ldr	r2, [r7]
 1861 0032 D318     		add	r3, r2, r3
 1862 0034 494A     		ldr	r2, .L107+4
 1863 0036 1A80     		strh	r2, [r3]
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1864              		.loc 1 403 0 discriminator 2
 1865 0038 3B1C     		mov	r3, r7
 1866 003a 0F33     		add	r3, r3, #15
 1867 003c 1A78     		ldrb	r2, [r3]
 1868 003e 3B1C     		mov	r3, r7
 1869 0040 0F33     		add	r3, r3, #15
 1870 0042 0132     		add	r2, r2, #1
 1871 0044 1A70     		strb	r2, [r3]
 1872              	.L88:
 403:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1873              		.loc 1 403 0 is_stmt 0 discriminator 1
 1874 0046 3B1C     		mov	r3, r7
 1875 0048 0F33     		add	r3, r3, #15
 1876 004a 1B78     		ldrb	r3, [r3]
 1877 004c 132B     		cmp	r3, #19
 1878 004e EBD9     		bls	.L89
 407:.\main.c      ****             WT_arr_cspot = 0;
 1879              		.loc 1 407 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 42


 1880 0050 FB1D     		add	r3, r7, #7
 1881 0052 0022     		mov	r2, #0
 1882 0054 1A70     		strb	r2, [r3]
 409:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 1883              		.loc 1 409 0
 1884 0056 414B     		ldr	r3, .L107+4
 1885 0058 0220     		mov	r0, #2
 1886 005a 191C     		mov	r1, r3
 1887 005c FFF7FEFF 		bl	ServoGoalPosition
 410:.\main.c      ****             break;
 1888              		.loc 1 410 0
 1889 0060 47E0     		b	.L82
 1890              	.L86:
 413:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1891              		.loc 1 413 0
 1892 0062 3C1C     		mov	r4, r7
 1893 0064 0C34     		add	r4, r4, #12
 1894 0066 3E4B     		ldr	r3, .L107+8
 1895 0068 181C     		mov	r0, r3
 1896 006a 1021     		mov	r1, #16
 1897 006c 1122     		mov	r2, #17
 1898 006e FFF7FEFF 		bl	make_command
 1899 0072 031C     		mov	r3, r0
 1900 0074 2380     		strh	r3, [r4]
 415:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 1901              		.loc 1 415 0
 1902 0076 FB1D     		add	r3, r7, #7
 1903 0078 1B78     		ldrb	r3, [r3]
 1904 007a 5B00     		lsl	r3, r3, #1
 1905 007c 3A68     		ldr	r2, [r7]
 1906 007e D318     		add	r3, r2, r3
 1907 0080 3A1C     		mov	r2, r7
 1908 0082 0C32     		add	r2, r2, #12
 1909 0084 1288     		ldrh	r2, [r2]
 1910 0086 1A80     		strh	r2, [r3]
 417:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1911              		.loc 1 417 0
 1912 0088 FB1D     		add	r3, r7, #7
 1913 008a 1B78     		ldrb	r3, [r3]
 1914 008c 122B     		cmp	r3, #18
 1915 008e 05D8     		bhi	.L90
 419:.\main.c      ****                 WT_arr_cspot++;
 1916              		.loc 1 419 0
 1917 0090 FB1D     		add	r3, r7, #7
 1918 0092 1A78     		ldrb	r2, [r3]
 1919 0094 FB1D     		add	r3, r7, #7
 1920 0096 0132     		add	r2, r2, #1
 1921 0098 1A70     		strb	r2, [r3]
 1922 009a 02E0     		b	.L91
 1923              	.L90:
 423:.\main.c      ****                 WT_arr_cspot = 0;
 1924              		.loc 1 423 0
 1925 009c FB1D     		add	r3, r7, #7
 1926 009e 0022     		mov	r2, #0
 1927 00a0 1A70     		strb	r2, [r3]
 1928              	.L91:
 428:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 43


 1929              		.loc 1 428 0
 1930 00a2 3C1C     		mov	r4, r7
 1931 00a4 0A34     		add	r4, r4, #10
 1932 00a6 3B68     		ldr	r3, [r7]
 1933 00a8 181C     		mov	r0, r3
 1934 00aa 1421     		mov	r1, #20
 1935 00ac FFF7FEFF 		bl	average
 1936 00b0 031C     		mov	r3, r0
 1937 00b2 2380     		strh	r3, [r4]
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1938              		.loc 1 430 0
 1939 00b4 3B1C     		mov	r3, r7
 1940 00b6 0A33     		add	r3, r3, #10
 1941 00b8 1A88     		ldrh	r2, [r3]
 1942 00ba FA23     		mov	r3, #250
 1943 00bc DB00     		lsl	r3, r3, #3
 1944 00be 9A42     		cmp	r2, r3
 1945 00c0 0DD8     		bhi	.L92
 430:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1946              		.loc 1 430 0 is_stmt 0 discriminator 1
 1947 00c2 3B1C     		mov	r3, r7
 1948 00c4 0A33     		add	r3, r3, #10
 1949 00c6 1A88     		ldrh	r2, [r3]
 1950 00c8 264B     		ldr	r3, .L107+12
 1951 00ca 9A42     		cmp	r2, r3
 1952 00cc 07D9     		bls	.L92
 432:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1953              		.loc 1 432 0 is_stmt 1
 1954 00ce 3B1C     		mov	r3, r7
 1955 00d0 0A33     		add	r3, r3, #10
 1956 00d2 1B88     		ldrh	r3, [r3]
 1957 00d4 0220     		mov	r0, #2
 1958 00d6 191C     		mov	r1, r3
 1959 00d8 FFF7FEFF 		bl	ServoGoalPosition
 1960 00dc 04E0     		b	.L93
 1961              	.L92:
 437:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 1962              		.loc 1 437 0
 1963 00de 1F4B     		ldr	r3, .L107+4
 1964 00e0 0220     		mov	r0, #2
 1965 00e2 191C     		mov	r1, r3
 1966 00e4 FFF7FEFF 		bl	ServoGoalPosition
 1967              	.L93:
 439:.\main.c      ****             WT_FLAG = 0;
 1968              		.loc 1 439 0
 1969 00e8 1F4B     		ldr	r3, .L107+16
 1970 00ea 0022     		mov	r2, #0
 1971 00ec 1A70     		strb	r2, [r3]
 440:.\main.c      ****             break;
 1972              		.loc 1 440 0
 1973 00ee 00E0     		b	.L82
 1974              	.L105:
 400:.\main.c      ****             break;
 1975              		.loc 1 400 0
 1976 00f0 C046     		mov	r8, r8
 1977              	.L82:
 444:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 44


 445:.\main.c      ****     
 446:.\main.c      ****     switch(wristTilt_state){ //transitions
 1978              		.loc 1 446 0
 1979 00f2 194B     		ldr	r3, .L107
 1980 00f4 1B78     		ldrb	r3, [r3]
 1981 00f6 012B     		cmp	r3, #1
 1982 00f8 0CD0     		beq	.L95
 1983 00fa 02DC     		bgt	.L96
 1984 00fc 002B     		cmp	r3, #0
 1985 00fe 05D0     		beq	.L97
 1986 0100 24E0     		b	.L94
 1987              	.L96:
 1988 0102 022B     		cmp	r3, #2
 1989 0104 0AD0     		beq	.L98
 1990 0106 032B     		cmp	r3, #3
 1991 0108 14D0     		beq	.L99
 1992 010a 1FE0     		b	.L94
 1993              	.L97:
 447:.\main.c      ****         case tilt_start:
 448:.\main.c      ****             wristTilt_state = tilt_init;
 1994              		.loc 1 448 0
 1995 010c 124B     		ldr	r3, .L107
 1996 010e 0122     		mov	r2, #1
 1997 0110 1A70     		strb	r2, [r3]
 449:.\main.c      ****             break;
 1998              		.loc 1 449 0
 1999 0112 1BE0     		b	.L94
 2000              	.L95:
 450:.\main.c      ****         
 451:.\main.c      ****         case tilt_init:
 452:.\main.c      ****             wristTilt_state = tilt_wait;
 2001              		.loc 1 452 0
 2002 0114 104B     		ldr	r3, .L107
 2003 0116 0322     		mov	r2, #3
 2004 0118 1A70     		strb	r2, [r3]
 453:.\main.c      ****             break;
 2005              		.loc 1 453 0
 2006 011a 17E0     		b	.L94
 2007              	.L98:
 454:.\main.c      ****         
 455:.\main.c      ****         case tilt_control:
 456:.\main.c      ****             if(WT_FLAG)
 2008              		.loc 1 456 0
 2009 011c 124B     		ldr	r3, .L107+16
 2010 011e 1B78     		ldrb	r3, [r3]
 2011 0120 002B     		cmp	r3, #0
 2012 0122 03D0     		beq	.L100
 457:.\main.c      ****             {
 458:.\main.c      ****                 wristTilt_state = tilt_control;
 2013              		.loc 1 458 0
 2014 0124 0C4B     		ldr	r3, .L107
 2015 0126 0222     		mov	r2, #2
 2016 0128 1A70     		strb	r2, [r3]
 459:.\main.c      ****             }
 460:.\main.c      ****             else
 461:.\main.c      ****             {
 462:.\main.c      ****                 wristTilt_state = tilt_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 45


 463:.\main.c      ****             }
 464:.\main.c      ****             break;
 2017              		.loc 1 464 0
 2018 012a 0FE0     		b	.L94
 2019              	.L100:
 462:.\main.c      ****                 wristTilt_state = tilt_wait;
 2020              		.loc 1 462 0
 2021 012c 0A4B     		ldr	r3, .L107
 2022 012e 0322     		mov	r2, #3
 2023 0130 1A70     		strb	r2, [r3]
 2024              		.loc 1 464 0
 2025 0132 0BE0     		b	.L94
 2026              	.L99:
 465:.\main.c      ****         
 466:.\main.c      ****         case tilt_wait:
 467:.\main.c      ****             if(WT_FLAG)
 2027              		.loc 1 467 0
 2028 0134 0C4B     		ldr	r3, .L107+16
 2029 0136 1B78     		ldrb	r3, [r3]
 2030 0138 002B     		cmp	r3, #0
 2031 013a 03D0     		beq	.L102
 468:.\main.c      ****             {
 469:.\main.c      ****                 wristTilt_state = tilt_control;
 2032              		.loc 1 469 0
 2033 013c 064B     		ldr	r3, .L107
 2034 013e 0222     		mov	r2, #2
 2035 0140 1A70     		strb	r2, [r3]
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 wristTilt_state = tilt_wait; 
 474:.\main.c      ****             }
 475:.\main.c      ****             break;
 2036              		.loc 1 475 0
 2037 0142 02E0     		b	.L106
 2038              	.L102:
 473:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2039              		.loc 1 473 0
 2040 0144 044B     		ldr	r3, .L107
 2041 0146 0322     		mov	r2, #3
 2042 0148 1A70     		strb	r2, [r3]
 2043              	.L106:
 2044              		.loc 1 475 0
 2045 014a C046     		mov	r8, r8
 2046              	.L94:
 476:.\main.c      ****     }  
 477:.\main.c      ****     return WT_arr_cspot;
 2047              		.loc 1 477 0
 2048 014c FB1D     		add	r3, r7, #7
 2049 014e 1B78     		ldrb	r3, [r3]
 478:.\main.c      **** }
 2050              		.loc 1 478 0
 2051 0150 181C     		mov	r0, r3
 2052 0152 BD46     		mov	sp, r7
 2053 0154 05B0     		add	sp, sp, #20
 2054              		@ sp needed
 2055 0156 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 46


 2056              	.L108:
 2057              		.align	2
 2058              	.L107:
 2059 0158 00000000 		.word	wristTilt_state
 2060 015c DC050000 		.word	1500
 2061 0160 00000000 		.word	data_array
 2062 0164 E7030000 		.word	999
 2063 0168 00000000 		.word	WT_FLAG
 2064              		.cfi_endproc
 2065              	.LFE48:
 2066              		.size	wristTilt, .-wristTilt
 2067              		.comm	wristRotate_state,1,1
 2068              		.section	.text.wristRotate,"ax",%progbits
 2069              		.align	2
 2070              		.global	wristRotate
 2071              		.code	16
 2072              		.thumb_func
 2073              		.type	wristRotate, %function
 2074              	wristRotate:
 2075              	.LFB49:
 479:.\main.c      **** 
 480:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 481:.\main.c      **** //control the rotating motion of the wrist
 482:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 483:.\main.c      **** {
 2076              		.loc 1 483 0
 2077              		.cfi_startproc
 2078 0000 90B5     		push	{r4, r7, lr}
 2079              		.cfi_def_cfa_offset 12
 2080              		.cfi_offset 4, -12
 2081              		.cfi_offset 7, -8
 2082              		.cfi_offset 14, -4
 2083 0002 85B0     		sub	sp, sp, #20
 2084              		.cfi_def_cfa_offset 32
 2085 0004 00AF     		add	r7, sp, #0
 2086              		.cfi_def_cfa_register 7
 2087 0006 021C     		mov	r2, r0
 2088 0008 3960     		str	r1, [r7]
 2089 000a FB1D     		add	r3, r7, #7
 2090 000c 1A70     		strb	r2, [r3]
 484:.\main.c      ****     //Overview
 485:.\main.c      ****     //take instruction from data_array
 486:.\main.c      ****     //smooth input
 487:.\main.c      ****     //actuate the tilting using UART
 488:.\main.c      ****     //get feedback
 489:.\main.c      **** 
 490:.\main.c      ****     //-------------------------- 
 491:.\main.c      ****     // Dynamixel Servo specific
 492:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 493:.\main.c      ****     // TODO: Set the desired position
 494:.\main.c      **** 
 495:.\main.c      ****     //--------------------------
 496:.\main.c      ****     // State machine
 497:.\main.c      ****     
 498:.\main.c      ****     uint8 i;
 499:.\main.c      ****     uint16 avg;
 500:.\main.c      ****     uint16 command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 47


 501:.\main.c      ****     
 502:.\main.c      ****     switch(wristRotate_state){ //actions
 2091              		.loc 1 502 0
 2092 000e 524B     		ldr	r3, .L135
 2093 0010 1B78     		ldrb	r3, [r3]
 2094 0012 012B     		cmp	r3, #1
 2095 0014 03D0     		beq	.L111
 2096 0016 6BDD     		ble	.L133
 2097 0018 022B     		cmp	r3, #2
 2098 001a 22D0     		beq	.L114
 503:.\main.c      ****         case rotate_start:
 504:.\main.c      ****             break;
 505:.\main.c      **** 
 506:.\main.c      ****         case rotate_init:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 508:.\main.c      ****             {
 509:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 510:.\main.c      ****             }
 511:.\main.c      ****             WR_arr_cspot = 0;
 512:.\main.c      ****             
 513:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 514:.\main.c      ****             break;
 515:.\main.c      **** 
 516:.\main.c      ****         case rotate_control:
 517:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 518:.\main.c      ****             
 519:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 520:.\main.c      ****             
 521:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 522:.\main.c      ****             {
 523:.\main.c      ****                 WR_arr_cspot++;
 524:.\main.c      ****             }
 525:.\main.c      ****             else
 526:.\main.c      ****             {
 527:.\main.c      ****                 WR_arr_cspot = 0;
 528:.\main.c      ****             }
 529:.\main.c      ****             
 530:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 531:.\main.c      ****             
 532:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 533:.\main.c      ****             
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 535:.\main.c      ****             {
 536:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 537:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 538:.\main.c      ****             }
 539:.\main.c      ****             else
 540:.\main.c      ****             {
 541:.\main.c      ****                 //throw error
 542:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 543:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 544:.\main.c      ****             }
 545:.\main.c      ****             WR_FLAG = 0;
 546:.\main.c      ****             break;
 547:.\main.c      ****             
 548:.\main.c      ****         case rotate_wait:
 549:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 48


 2099              		.loc 1 549 0
 2100 001c 69E0     		b	.L110
 2101              	.L111:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2102              		.loc 1 507 0
 2103 001e 3B1C     		mov	r3, r7
 2104 0020 0F33     		add	r3, r3, #15
 2105 0022 0022     		mov	r2, #0
 2106 0024 1A70     		strb	r2, [r3]
 2107 0026 0EE0     		b	.L116
 2108              	.L117:
 509:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2109              		.loc 1 509 0 discriminator 2
 2110 0028 3B1C     		mov	r3, r7
 2111 002a 0F33     		add	r3, r3, #15
 2112 002c 1B78     		ldrb	r3, [r3]
 2113 002e 5B00     		lsl	r3, r3, #1
 2114 0030 3A68     		ldr	r2, [r7]
 2115 0032 D318     		add	r3, r2, r3
 2116 0034 494A     		ldr	r2, .L135+4
 2117 0036 1A80     		strh	r2, [r3]
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2118              		.loc 1 507 0 discriminator 2
 2119 0038 3B1C     		mov	r3, r7
 2120 003a 0F33     		add	r3, r3, #15
 2121 003c 1A78     		ldrb	r2, [r3]
 2122 003e 3B1C     		mov	r3, r7
 2123 0040 0F33     		add	r3, r3, #15
 2124 0042 0132     		add	r2, r2, #1
 2125 0044 1A70     		strb	r2, [r3]
 2126              	.L116:
 507:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2127              		.loc 1 507 0 is_stmt 0 discriminator 1
 2128 0046 3B1C     		mov	r3, r7
 2129 0048 0F33     		add	r3, r3, #15
 2130 004a 1B78     		ldrb	r3, [r3]
 2131 004c 132B     		cmp	r3, #19
 2132 004e EBD9     		bls	.L117
 511:.\main.c      ****             WR_arr_cspot = 0;
 2133              		.loc 1 511 0 is_stmt 1
 2134 0050 FB1D     		add	r3, r7, #7
 2135 0052 0022     		mov	r2, #0
 2136 0054 1A70     		strb	r2, [r3]
 513:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2137              		.loc 1 513 0
 2138 0056 414B     		ldr	r3, .L135+4
 2139 0058 0120     		mov	r0, #1
 2140 005a 191C     		mov	r1, r3
 2141 005c FFF7FEFF 		bl	ServoGoalPosition
 514:.\main.c      ****             break;
 2142              		.loc 1 514 0
 2143 0060 47E0     		b	.L110
 2144              	.L114:
 517:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2145              		.loc 1 517 0
 2146 0062 3C1C     		mov	r4, r7
 2147 0064 0C34     		add	r4, r4, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 49


 2148 0066 3E4B     		ldr	r3, .L135+8
 2149 0068 181C     		mov	r0, r3
 2150 006a 1221     		mov	r1, #18
 2151 006c 1322     		mov	r2, #19
 2152 006e FFF7FEFF 		bl	make_command
 2153 0072 031C     		mov	r3, r0
 2154 0074 2380     		strh	r3, [r4]
 519:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2155              		.loc 1 519 0
 2156 0076 FB1D     		add	r3, r7, #7
 2157 0078 1B78     		ldrb	r3, [r3]
 2158 007a 5B00     		lsl	r3, r3, #1
 2159 007c 3A68     		ldr	r2, [r7]
 2160 007e D318     		add	r3, r2, r3
 2161 0080 3A1C     		mov	r2, r7
 2162 0082 0C32     		add	r2, r2, #12
 2163 0084 1288     		ldrh	r2, [r2]
 2164 0086 1A80     		strh	r2, [r3]
 521:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2165              		.loc 1 521 0
 2166 0088 FB1D     		add	r3, r7, #7
 2167 008a 1B78     		ldrb	r3, [r3]
 2168 008c 122B     		cmp	r3, #18
 2169 008e 05D8     		bhi	.L118
 523:.\main.c      ****                 WR_arr_cspot++;
 2170              		.loc 1 523 0
 2171 0090 FB1D     		add	r3, r7, #7
 2172 0092 1A78     		ldrb	r2, [r3]
 2173 0094 FB1D     		add	r3, r7, #7
 2174 0096 0132     		add	r2, r2, #1
 2175 0098 1A70     		strb	r2, [r3]
 2176 009a 02E0     		b	.L119
 2177              	.L118:
 527:.\main.c      ****                 WR_arr_cspot = 0;
 2178              		.loc 1 527 0
 2179 009c FB1D     		add	r3, r7, #7
 2180 009e 0022     		mov	r2, #0
 2181 00a0 1A70     		strb	r2, [r3]
 2182              	.L119:
 532:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2183              		.loc 1 532 0
 2184 00a2 3C1C     		mov	r4, r7
 2185 00a4 0A34     		add	r4, r4, #10
 2186 00a6 3B68     		ldr	r3, [r7]
 2187 00a8 181C     		mov	r0, r3
 2188 00aa 1421     		mov	r1, #20
 2189 00ac FFF7FEFF 		bl	average
 2190 00b0 031C     		mov	r3, r0
 2191 00b2 2380     		strh	r3, [r4]
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2192              		.loc 1 534 0
 2193 00b4 3B1C     		mov	r3, r7
 2194 00b6 0A33     		add	r3, r3, #10
 2195 00b8 1A88     		ldrh	r2, [r3]
 2196 00ba FA23     		mov	r3, #250
 2197 00bc DB00     		lsl	r3, r3, #3
 2198 00be 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 50


 2199 00c0 0DD8     		bhi	.L120
 534:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2200              		.loc 1 534 0 is_stmt 0 discriminator 1
 2201 00c2 3B1C     		mov	r3, r7
 2202 00c4 0A33     		add	r3, r3, #10
 2203 00c6 1A88     		ldrh	r2, [r3]
 2204 00c8 264B     		ldr	r3, .L135+12
 2205 00ca 9A42     		cmp	r2, r3
 2206 00cc 07D9     		bls	.L120
 537:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2207              		.loc 1 537 0 is_stmt 1
 2208 00ce 3B1C     		mov	r3, r7
 2209 00d0 0A33     		add	r3, r3, #10
 2210 00d2 1B88     		ldrh	r3, [r3]
 2211 00d4 0120     		mov	r0, #1
 2212 00d6 191C     		mov	r1, r3
 2213 00d8 FFF7FEFF 		bl	ServoGoalPosition
 2214 00dc 04E0     		b	.L121
 2215              	.L120:
 543:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2216              		.loc 1 543 0
 2217 00de 1F4B     		ldr	r3, .L135+4
 2218 00e0 0120     		mov	r0, #1
 2219 00e2 191C     		mov	r1, r3
 2220 00e4 FFF7FEFF 		bl	ServoGoalPosition
 2221              	.L121:
 545:.\main.c      ****             WR_FLAG = 0;
 2222              		.loc 1 545 0
 2223 00e8 1F4B     		ldr	r3, .L135+16
 2224 00ea 0022     		mov	r2, #0
 2225 00ec 1A70     		strb	r2, [r3]
 546:.\main.c      ****             break;
 2226              		.loc 1 546 0
 2227 00ee 00E0     		b	.L110
 2228              	.L133:
 504:.\main.c      ****             break;
 2229              		.loc 1 504 0
 2230 00f0 C046     		mov	r8, r8
 2231              	.L110:
 550:.\main.c      ****     }
 551:.\main.c      ****     
 552:.\main.c      ****     switch(wristRotate_state){ //transitions
 2232              		.loc 1 552 0
 2233 00f2 194B     		ldr	r3, .L135
 2234 00f4 1B78     		ldrb	r3, [r3]
 2235 00f6 012B     		cmp	r3, #1
 2236 00f8 0CD0     		beq	.L123
 2237 00fa 02DC     		bgt	.L124
 2238 00fc 002B     		cmp	r3, #0
 2239 00fe 05D0     		beq	.L125
 2240 0100 24E0     		b	.L122
 2241              	.L124:
 2242 0102 022B     		cmp	r3, #2
 2243 0104 0AD0     		beq	.L126
 2244 0106 032B     		cmp	r3, #3
 2245 0108 14D0     		beq	.L127
 2246 010a 1FE0     		b	.L122
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 51


 2247              	.L125:
 553:.\main.c      ****         case rotate_start:
 554:.\main.c      ****             wristRotate_state = rotate_init;
 2248              		.loc 1 554 0
 2249 010c 124B     		ldr	r3, .L135
 2250 010e 0122     		mov	r2, #1
 2251 0110 1A70     		strb	r2, [r3]
 555:.\main.c      ****             break;
 2252              		.loc 1 555 0
 2253 0112 1BE0     		b	.L122
 2254              	.L123:
 556:.\main.c      ****         
 557:.\main.c      ****         case rotate_init:
 558:.\main.c      ****             wristRotate_state = rotate_wait;
 2255              		.loc 1 558 0
 2256 0114 104B     		ldr	r3, .L135
 2257 0116 0322     		mov	r2, #3
 2258 0118 1A70     		strb	r2, [r3]
 559:.\main.c      ****             break;
 2259              		.loc 1 559 0
 2260 011a 17E0     		b	.L122
 2261              	.L126:
 560:.\main.c      ****         
 561:.\main.c      ****         case rotate_control:
 562:.\main.c      ****             if(WR_FLAG)
 2262              		.loc 1 562 0
 2263 011c 124B     		ldr	r3, .L135+16
 2264 011e 1B78     		ldrb	r3, [r3]
 2265 0120 002B     		cmp	r3, #0
 2266 0122 03D0     		beq	.L128
 563:.\main.c      ****             {
 564:.\main.c      ****                 wristRotate_state = rotate_control;
 2267              		.loc 1 564 0
 2268 0124 0C4B     		ldr	r3, .L135
 2269 0126 0222     		mov	r2, #2
 2270 0128 1A70     		strb	r2, [r3]
 565:.\main.c      ****             }
 566:.\main.c      ****             else
 567:.\main.c      ****             {
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 569:.\main.c      ****             }
 570:.\main.c      ****             break;
 2271              		.loc 1 570 0
 2272 012a 0FE0     		b	.L122
 2273              	.L128:
 568:.\main.c      ****                 wristRotate_state = rotate_wait;
 2274              		.loc 1 568 0
 2275 012c 0A4B     		ldr	r3, .L135
 2276 012e 0322     		mov	r2, #3
 2277 0130 1A70     		strb	r2, [r3]
 2278              		.loc 1 570 0
 2279 0132 0BE0     		b	.L122
 2280              	.L127:
 571:.\main.c      ****         
 572:.\main.c      ****         case rotate_wait:
 573:.\main.c      ****             if(WR_FLAG)
 2281              		.loc 1 573 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 52


 2282 0134 0C4B     		ldr	r3, .L135+16
 2283 0136 1B78     		ldrb	r3, [r3]
 2284 0138 002B     		cmp	r3, #0
 2285 013a 03D0     		beq	.L130
 574:.\main.c      ****             {
 575:.\main.c      ****                 wristRotate_state = rotate_control;
 2286              		.loc 1 575 0
 2287 013c 064B     		ldr	r3, .L135
 2288 013e 0222     		mov	r2, #2
 2289 0140 1A70     		strb	r2, [r3]
 576:.\main.c      ****             }
 577:.\main.c      ****             else
 578:.\main.c      ****             {
 579:.\main.c      ****                 wristRotate_state = rotate_wait;
 580:.\main.c      ****             }
 581:.\main.c      ****             break;
 2290              		.loc 1 581 0
 2291 0142 02E0     		b	.L134
 2292              	.L130:
 579:.\main.c      ****                 wristRotate_state = rotate_wait;
 2293              		.loc 1 579 0
 2294 0144 044B     		ldr	r3, .L135
 2295 0146 0322     		mov	r2, #3
 2296 0148 1A70     		strb	r2, [r3]
 2297              	.L134:
 2298              		.loc 1 581 0
 2299 014a C046     		mov	r8, r8
 2300              	.L122:
 582:.\main.c      ****     }  
 583:.\main.c      ****     return WR_arr_cspot;
 2301              		.loc 1 583 0
 2302 014c FB1D     		add	r3, r7, #7
 2303 014e 1B78     		ldrb	r3, [r3]
 584:.\main.c      **** }
 2304              		.loc 1 584 0
 2305 0150 181C     		mov	r0, r3
 2306 0152 BD46     		mov	sp, r7
 2307 0154 05B0     		add	sp, sp, #20
 2308              		@ sp needed
 2309 0156 90BD     		pop	{r4, r7, pc}
 2310              	.L136:
 2311              		.align	2
 2312              	.L135:
 2313 0158 00000000 		.word	wristRotate_state
 2314 015c DC050000 		.word	1500
 2315 0160 00000000 		.word	data_array
 2316 0164 E7030000 		.word	999
 2317 0168 00000000 		.word	WR_FLAG
 2318              		.cfi_endproc
 2319              	.LFE49:
 2320              		.size	wristRotate, .-wristRotate
 2321              		.comm	elbow_state,1,1
 2322              		.section	.text.elbow,"ax",%progbits
 2323              		.align	2
 2324              		.global	elbow
 2325              		.code	16
 2326              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 53


 2327              		.type	elbow, %function
 2328              	elbow:
 2329              	.LFB50:
 585:.\main.c      **** 
 586:.\main.c      **** //control the elbow
 587:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 588:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 589:.\main.c      **** { 
 2330              		.loc 1 589 0
 2331              		.cfi_startproc
 2332 0000 90B5     		push	{r4, r7, lr}
 2333              		.cfi_def_cfa_offset 12
 2334              		.cfi_offset 4, -12
 2335              		.cfi_offset 7, -8
 2336              		.cfi_offset 14, -4
 2337 0002 85B0     		sub	sp, sp, #20
 2338              		.cfi_def_cfa_offset 32
 2339 0004 00AF     		add	r7, sp, #0
 2340              		.cfi_def_cfa_register 7
 2341 0006 021C     		mov	r2, r0
 2342 0008 3960     		str	r1, [r7]
 2343 000a FB1D     		add	r3, r7, #7
 2344 000c 1A70     		strb	r2, [r3]
 590:.\main.c      ****     //take instruction from data_array
 591:.\main.c      ****     //smooth input
 592:.\main.c      ****     //actuate the elbow using PWM
 593:.\main.c      ****     //get feedback
 594:.\main.c      ****     uint8 i;
 595:.\main.c      ****     uint16 avg;
 596:.\main.c      ****     uint16 command;
 597:.\main.c      ****     
 598:.\main.c      ****     //TODO: make sure reading from correct pots
 599:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2345              		.loc 1 599 0
 2346 000e 3C1C     		mov	r4, r7
 2347 0010 0C34     		add	r4, r4, #12
 2348 0012 0120     		mov	r0, #1
 2349 0014 FFF7FEFF 		bl	potFeedback
 2350 0018 031C     		mov	r3, r0
 2351 001a 2380     		strh	r3, [r4]
 600:.\main.c      ****     
 601:.\main.c      ****     switch(elbow_state){ //actions
 2352              		.loc 1 601 0
 2353 001c B24B     		ldr	r3, .L178+16
 2354 001e 1B78     		ldrb	r3, [r3]
 2355 0020 012B     		cmp	r3, #1
 2356 0022 07D0     		beq	.L139
 2357 0024 00DC     		bgt	.LCB2080
 2358 0026 21E1     		b	.L176	@long jump
 2359              	.LCB2080:
 2360 0028 022B     		cmp	r3, #2
 2361 002a 24D0     		beq	.L142
 2362 002c 032B     		cmp	r3, #3
 2363 002e 00D1     		bne	.LCB2084
 2364 0030 08E1     		b	.L143	@long jump
 2365              	.LCB2084:
 2366 0032 1CE1     		b	.L138
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 54


 2367              	.L139:
 602:.\main.c      ****         case elbw_start:
 603:.\main.c      ****             break;
 604:.\main.c      **** 
 605:.\main.c      ****         case elbw_init:
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2368              		.loc 1 606 0
 2369 0034 3B1C     		mov	r3, r7
 2370 0036 0F33     		add	r3, r3, #15
 2371 0038 0022     		mov	r2, #0
 2372 003a 1A70     		strb	r2, [r3]
 2373 003c 0EE0     		b	.L144
 2374              	.L145:
 607:.\main.c      ****             {
 608:.\main.c      ****                 elbow_array[i] = 1500;
 2375              		.loc 1 608 0 discriminator 2
 2376 003e 3B1C     		mov	r3, r7
 2377 0040 0F33     		add	r3, r3, #15
 2378 0042 1B78     		ldrb	r3, [r3]
 2379 0044 5B00     		lsl	r3, r3, #1
 2380 0046 3A68     		ldr	r2, [r7]
 2381 0048 D318     		add	r3, r2, r3
 2382 004a A84A     		ldr	r2, .L178+20
 2383 004c 1A80     		strh	r2, [r3]
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2384              		.loc 1 606 0 discriminator 2
 2385 004e 3B1C     		mov	r3, r7
 2386 0050 0F33     		add	r3, r3, #15
 2387 0052 1A78     		ldrb	r2, [r3]
 2388 0054 3B1C     		mov	r3, r7
 2389 0056 0F33     		add	r3, r3, #15
 2390 0058 0132     		add	r2, r2, #1
 2391 005a 1A70     		strb	r2, [r3]
 2392              	.L144:
 606:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2393              		.loc 1 606 0 is_stmt 0 discriminator 1
 2394 005c 3B1C     		mov	r3, r7
 2395 005e 0F33     		add	r3, r3, #15
 2396 0060 1B78     		ldrb	r3, [r3]
 2397 0062 132B     		cmp	r3, #19
 2398 0064 EBD9     		bls	.L145
 609:.\main.c      ****             }
 610:.\main.c      ****             elbw_arr_cspot = 0;
 2399              		.loc 1 610 0 is_stmt 1
 2400 0066 FB1D     		add	r3, r7, #7
 2401 0068 0022     		mov	r2, #0
 2402 006a 1A70     		strb	r2, [r3]
 611:.\main.c      ****             
 612:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2403              		.loc 1 612 0
 2404 006c 9F4B     		ldr	r3, .L178+20
 2405 006e 181C     		mov	r0, r3
 2406 0070 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 613:.\main.c      ****             break;
 2407              		.loc 1 613 0
 2408 0074 FBE0     		b	.L138
 2409              	.L142:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 55


 614:.\main.c      **** 
 615:.\main.c      ****         case elbw_execute:
 616:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2410              		.loc 1 616 0
 2411 0076 3C1C     		mov	r4, r7
 2412 0078 0A34     		add	r4, r4, #10
 2413 007a 9D4B     		ldr	r3, .L178+24
 2414 007c 181C     		mov	r0, r3
 2415 007e 0E21     		mov	r1, #14
 2416 0080 0F22     		mov	r2, #15
 2417 0082 FFF7FEFF 		bl	make_command
 2418 0086 031C     		mov	r3, r0
 2419 0088 2380     		strh	r3, [r4]
 617:.\main.c      ****             
 618:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2420              		.loc 1 618 0
 2421 008a FB1D     		add	r3, r7, #7
 2422 008c 1B78     		ldrb	r3, [r3]
 2423 008e 5B00     		lsl	r3, r3, #1
 2424 0090 3A68     		ldr	r2, [r7]
 2425 0092 D318     		add	r3, r2, r3
 2426 0094 3A1C     		mov	r2, r7
 2427 0096 0A32     		add	r2, r2, #10
 2428 0098 1288     		ldrh	r2, [r2]
 2429 009a 1A80     		strh	r2, [r3]
 619:.\main.c      ****             
 620:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2430              		.loc 1 620 0
 2431 009c FB1D     		add	r3, r7, #7
 2432 009e 1B78     		ldrb	r3, [r3]
 2433 00a0 122B     		cmp	r3, #18
 2434 00a2 05D8     		bhi	.L146
 621:.\main.c      ****             {
 622:.\main.c      ****                 elbw_arr_cspot++;
 2435              		.loc 1 622 0
 2436 00a4 FB1D     		add	r3, r7, #7
 2437 00a6 1A78     		ldrb	r2, [r3]
 2438 00a8 FB1D     		add	r3, r7, #7
 2439 00aa 0132     		add	r2, r2, #1
 2440 00ac 1A70     		strb	r2, [r3]
 2441 00ae 02E0     		b	.L147
 2442              	.L146:
 623:.\main.c      ****             }
 624:.\main.c      ****             else
 625:.\main.c      ****             {
 626:.\main.c      ****                 elbw_arr_cspot = 0;
 2443              		.loc 1 626 0
 2444 00b0 FB1D     		add	r3, r7, #7
 2445 00b2 0022     		mov	r2, #0
 2446 00b4 1A70     		strb	r2, [r3]
 2447              	.L147:
 627:.\main.c      ****             }
 628:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
 2448              		.loc 1 628 0
 2449 00b6 3C1C     		mov	r4, r7
 2450 00b8 0834     		add	r4, r4, #8
 2451 00ba 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 56


 2452 00bc 181C     		mov	r0, r3
 2453 00be 1421     		mov	r1, #20
 2454 00c0 FFF7FEFF 		bl	average
 2455 00c4 031C     		mov	r3, r0
 2456 00c6 2380     		strh	r3, [r4]
 629:.\main.c      ****             
 630:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2457              		.loc 1 630 0
 2458 00c8 FFF7FEFF 		bl	stop_elb_dn_Read
 2459 00cc 031C     		mov	r3, r0
 2460 00ce 002B     		cmp	r3, #0
 2461 00d0 05D0     		beq	.L148
 2462              		.loc 1 630 0 is_stmt 0 discriminator 1
 2463 00d2 FFF7FEFF 		bl	stop_elb_up_Read
 2464 00d6 031C     		mov	r3, r0
 2465 00d8 002B     		cmp	r3, #0
 2466 00da 00D0     		beq	.LCB2180
 2467 00dc 6FE0     		b	.L149	@long jump
 2468              	.LCB2180:
 2469              	.L148:
 631:.\main.c      ****             {
 632:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )
 2470              		.loc 1 632 0 is_stmt 1
 2471 00de 3B1C     		mov	r3, r7
 2472 00e0 0C33     		add	r3, r3, #12
 2473 00e2 1A88     		ldrh	r2, [r3]
 2474 00e4 834B     		ldr	r3, .L178+28
 2475 00e6 1B68     		ldr	r3, [r3]
 2476 00e8 9A42     		cmp	r2, r3
 2477 00ea 23D8     		bhi	.L150
 633:.\main.c      ****                 {
 634:.\main.c      ****                     if (avg < 1500)
 2478              		.loc 1 634 0
 2479 00ec 3B1C     		mov	r3, r7
 2480 00ee 0833     		add	r3, r3, #8
 2481 00f0 1A88     		ldrh	r2, [r3]
 2482 00f2 814B     		ldr	r3, .L178+32
 2483 00f4 9A42     		cmp	r2, r3
 2484 00f6 04D8     		bhi	.L151
 635:.\main.c      ****                     {
 636:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2485              		.loc 1 636 0
 2486 00f8 7C4B     		ldr	r3, .L178+20
 2487 00fa 181C     		mov	r0, r3
 2488 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2489 0100 5CE0     		b	.L154
 2490              	.L151:
 637:.\main.c      ****                     }
 638:.\main.c      ****                     else
 639:.\main.c      ****                     {
 640:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2491              		.loc 1 640 0
 2492 0102 3B1C     		mov	r3, r7
 2493 0104 0833     		add	r3, r3, #8
 2494 0106 1A88     		ldrh	r2, [r3]
 2495 0108 FA23     		mov	r3, #250
 2496 010a DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 57


 2497 010c 9A42     		cmp	r2, r3
 2498 010e 0CD8     		bhi	.L153
 2499              		.loc 1 640 0 is_stmt 0 discriminator 1
 2500 0110 3B1C     		mov	r3, r7
 2501 0112 0833     		add	r3, r3, #8
 2502 0114 1A88     		ldrh	r2, [r3]
 2503 0116 794B     		ldr	r3, .L178+36
 2504 0118 9A42     		cmp	r2, r3
 2505 011a 06D9     		bls	.L153
 641:.\main.c      ****                         {
 642:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2506              		.loc 1 642 0 is_stmt 1
 2507 011c 3B1C     		mov	r3, r7
 2508 011e 0833     		add	r3, r3, #8
 2509 0120 1B88     		ldrh	r3, [r3]
 2510 0122 181C     		mov	r0, r3
 2511 0124 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2512 0128 48E0     		b	.L154
 2513              	.L153:
 643:.\main.c      ****                         }
 644:.\main.c      ****                         else
 645:.\main.c      ****                         {
 646:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2514              		.loc 1 646 0
 2515 012a 704B     		ldr	r3, .L178+20
 2516 012c 181C     		mov	r0, r3
 2517 012e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2518 0132 43E0     		b	.L154
 2519              	.L150:
 647:.\main.c      ****                         }
 648:.\main.c      ****                     }
 649:.\main.c      ****                 }
 650:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND)
 2520              		.loc 1 650 0
 2521 0134 3B1C     		mov	r3, r7
 2522 0136 0C33     		add	r3, r3, #12
 2523 0138 1A88     		ldrh	r2, [r3]
 2524 013a 714B     		ldr	r3, .L178+40
 2525 013c 1B68     		ldr	r3, [r3]
 2526 013e 9A42     		cmp	r2, r3
 2527 0140 23D3     		bcc	.L155
 651:.\main.c      ****                 {
 652:.\main.c      ****                     if(avg > 1500)
 2528              		.loc 1 652 0
 2529 0142 3B1C     		mov	r3, r7
 2530 0144 0833     		add	r3, r3, #8
 2531 0146 1A88     		ldrh	r2, [r3]
 2532 0148 684B     		ldr	r3, .L178+20
 2533 014a 9A42     		cmp	r2, r3
 2534 014c 04D9     		bls	.L156
 653:.\main.c      ****                     {
 654:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2535              		.loc 1 654 0
 2536 014e 674B     		ldr	r3, .L178+20
 2537 0150 181C     		mov	r0, r3
 2538 0152 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2539 0156 31E0     		b	.L154
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 58


 2540              	.L156:
 655:.\main.c      ****                     }
 656:.\main.c      ****                     else
 657:.\main.c      ****                     {
 658:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2541              		.loc 1 658 0
 2542 0158 3B1C     		mov	r3, r7
 2543 015a 0833     		add	r3, r3, #8
 2544 015c 1A88     		ldrh	r2, [r3]
 2545 015e FA23     		mov	r3, #250
 2546 0160 DB00     		lsl	r3, r3, #3
 2547 0162 9A42     		cmp	r2, r3
 2548 0164 0CD8     		bhi	.L158
 2549              		.loc 1 658 0 is_stmt 0 discriminator 1
 2550 0166 3B1C     		mov	r3, r7
 2551 0168 0833     		add	r3, r3, #8
 2552 016a 1A88     		ldrh	r2, [r3]
 2553 016c 634B     		ldr	r3, .L178+36
 2554 016e 9A42     		cmp	r2, r3
 2555 0170 06D9     		bls	.L158
 659:.\main.c      ****                         {
 660:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2556              		.loc 1 660 0 is_stmt 1
 2557 0172 3B1C     		mov	r3, r7
 2558 0174 0833     		add	r3, r3, #8
 2559 0176 1B88     		ldrh	r3, [r3]
 2560 0178 181C     		mov	r0, r3
 2561 017a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2562 017e 1DE0     		b	.L154
 2563              	.L158:
 661:.\main.c      ****                         }
 662:.\main.c      ****                         else
 663:.\main.c      ****                         {
 664:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2564              		.loc 1 664 0
 2565 0180 5A4B     		ldr	r3, .L178+20
 2566 0182 181C     		mov	r0, r3
 2567 0184 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2568 0188 18E0     		b	.L154
 2569              	.L155:
 665:.\main.c      ****                         }
 666:.\main.c      ****                     }
 667:.\main.c      ****                 }
 668:.\main.c      ****                 else
 669:.\main.c      ****                 {
 670:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2570              		.loc 1 670 0
 2571 018a 3B1C     		mov	r3, r7
 2572 018c 0833     		add	r3, r3, #8
 2573 018e 1A88     		ldrh	r2, [r3]
 2574 0190 FA23     		mov	r3, #250
 2575 0192 DB00     		lsl	r3, r3, #3
 2576 0194 9A42     		cmp	r2, r3
 2577 0196 0CD8     		bhi	.L159
 2578              		.loc 1 670 0 is_stmt 0 discriminator 1
 2579 0198 3B1C     		mov	r3, r7
 2580 019a 0833     		add	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 59


 2581 019c 1A88     		ldrh	r2, [r3]
 2582 019e 574B     		ldr	r3, .L178+36
 2583 01a0 9A42     		cmp	r2, r3
 2584 01a2 06D9     		bls	.L159
 671:.\main.c      ****                     {
 672:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2585              		.loc 1 672 0 is_stmt 1
 2586 01a4 3B1C     		mov	r3, r7
 2587 01a6 0833     		add	r3, r3, #8
 2588 01a8 1B88     		ldrh	r3, [r3]
 2589 01aa 181C     		mov	r0, r3
 2590 01ac FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2591 01b0 04E0     		b	.L154
 2592              	.L159:
 673:.\main.c      ****                     }
 674:.\main.c      ****                     else
 675:.\main.c      ****                     {
 676:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2593              		.loc 1 676 0
 2594 01b2 4E4B     		ldr	r3, .L178+20
 2595 01b4 181C     		mov	r0, r3
 2596 01b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 632:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )
 2597              		.loc 1 632 0
 2598 01ba 3FE0     		b	.L160
 2599              	.L154:
 2600 01bc 3EE0     		b	.L160
 2601              	.L149:
 677:.\main.c      ****                     }
 678:.\main.c      ****                 }
 679:.\main.c      ****             }
 680:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 681:.\main.c      ****             {
 682:.\main.c      ****                 if(!stop_elb_dn_Read())
 2602              		.loc 1 682 0
 2603 01be FFF7FEFF 		bl	stop_elb_dn_Read
 2604 01c2 031C     		mov	r3, r0
 2605 01c4 002B     		cmp	r3, #0
 2606 01c6 18D1     		bne	.L161
 683:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) * 1.1;
 2607              		.loc 1 683 0
 2608 01c8 0120     		mov	r0, #1
 2609 01ca FFF7FEFF 		bl	potFeedback
 2610 01ce 031C     		mov	r3, r0
 2611 01d0 181C     		mov	r0, r3
 2612 01d2 FFF7FEFF 		bl	__aeabi_i2d
 2613 01d6 031C     		mov	r3, r0
 2614 01d8 0C1C     		mov	r4, r1
 2615 01da 181C     		mov	r0, r3
 2616 01dc 211C     		mov	r1, r4
 2617 01de 3F4B     		ldr	r3, .L178+4
 2618 01e0 3D4A     		ldr	r2, .L178
 2619 01e2 FFF7FEFF 		bl	__aeabi_dmul
 2620 01e6 031C     		mov	r3, r0
 2621 01e8 0C1C     		mov	r4, r1
 2622 01ea 181C     		mov	r0, r3
 2623 01ec 211C     		mov	r1, r4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 60


 2624 01ee FFF7FEFF 		bl	__aeabi_d2uiz
 2625 01f2 021C     		mov	r2, r0
 2626 01f4 3F4B     		ldr	r3, .L178+28
 2627 01f6 1A60     		str	r2, [r3]
 2628 01f8 20E0     		b	.L160
 2629              	.L161:
 684:.\main.c      ****                 else if(!stop_elb_up_Read())
 2630              		.loc 1 684 0
 2631 01fa FFF7FEFF 		bl	stop_elb_up_Read
 2632 01fe 031C     		mov	r3, r0
 2633 0200 002B     		cmp	r3, #0
 2634 0202 18D1     		bne	.L162
 685:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) * .9;
 2635              		.loc 1 685 0
 2636 0204 0120     		mov	r0, #1
 2637 0206 FFF7FEFF 		bl	potFeedback
 2638 020a 031C     		mov	r3, r0
 2639 020c 181C     		mov	r0, r3
 2640 020e FFF7FEFF 		bl	__aeabi_i2d
 2641 0212 031C     		mov	r3, r0
 2642 0214 0C1C     		mov	r4, r1
 2643 0216 181C     		mov	r0, r3
 2644 0218 211C     		mov	r1, r4
 2645 021a 314A     		ldr	r2, .L178+8
 2646 021c 314B     		ldr	r3, .L178+12
 2647 021e FFF7FEFF 		bl	__aeabi_dmul
 2648 0222 031C     		mov	r3, r0
 2649 0224 0C1C     		mov	r4, r1
 2650 0226 181C     		mov	r0, r3
 2651 0228 211C     		mov	r1, r4
 2652 022a FFF7FEFF 		bl	__aeabi_d2uiz
 2653 022e 021C     		mov	r2, r0
 2654 0230 334B     		ldr	r3, .L178+40
 2655 0232 1A60     		str	r2, [r3]
 2656 0234 02E0     		b	.L160
 2657              	.L162:
 686:.\main.c      ****                 else
 687:.\main.c      ****                     LED_Write(1);
 2658              		.loc 1 687 0
 2659 0236 0120     		mov	r0, #1
 2660 0238 FFF7FEFF 		bl	LED_Write
 2661              	.L160:
 688:.\main.c      ****             }
 689:.\main.c      ****             ELBOW_FLAG = 0;
 2662              		.loc 1 689 0
 2663 023c 314B     		ldr	r3, .L178+44
 2664 023e 0022     		mov	r2, #0
 2665 0240 1A70     		strb	r2, [r3]
 690:.\main.c      ****             break;
 2666              		.loc 1 690 0
 2667 0242 14E0     		b	.L138
 2668              	.L143:
 691:.\main.c      ****             
 692:.\main.c      ****         case elbw_wait:
 693:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2669              		.loc 1 693 0
 2670 0244 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 61


 2671 0246 0C33     		add	r3, r3, #12
 2672 0248 1A88     		ldrh	r2, [r3]
 2673 024a 2A4B     		ldr	r3, .L178+28
 2674 024c 1B68     		ldr	r3, [r3]
 2675 024e 9A42     		cmp	r2, r3
 2676 0250 06D9     		bls	.L163
 2677              		.loc 1 693 0 is_stmt 0 discriminator 1
 2678 0252 3B1C     		mov	r3, r7
 2679 0254 0C33     		add	r3, r3, #12
 2680 0256 1A88     		ldrh	r2, [r3]
 2681 0258 294B     		ldr	r3, .L178+40
 2682 025a 1B68     		ldr	r3, [r3]
 2683 025c 9A42     		cmp	r2, r3
 2684 025e 04D3     		bcc	.L164
 2685              	.L163:
 694:.\main.c      ****             {
 695:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2686              		.loc 1 695 0 is_stmt 1
 2687 0260 224B     		ldr	r3, .L178+20
 2688 0262 181C     		mov	r0, r3
 2689 0264 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 696:.\main.c      ****             }
 697:.\main.c      ****             break;
 2690              		.loc 1 697 0
 2691 0268 01E0     		b	.L138
 2692              	.L164:
 2693 026a 00E0     		b	.L138
 2694              	.L176:
 603:.\main.c      ****             break;
 2695              		.loc 1 603 0
 2696 026c C046     		mov	r8, r8
 2697              	.L138:
 698:.\main.c      ****     }
 699:.\main.c      ****     
 700:.\main.c      ****     switch(elbow_state){ //transitions
 2698              		.loc 1 700 0
 2699 026e 1E4B     		ldr	r3, .L178+16
 2700 0270 1B78     		ldrb	r3, [r3]
 2701 0272 012B     		cmp	r3, #1
 2702 0274 0CD0     		beq	.L166
 2703 0276 02DC     		bgt	.L167
 2704 0278 002B     		cmp	r3, #0
 2705 027a 05D0     		beq	.L168
 2706 027c 24E0     		b	.L165
 2707              	.L167:
 2708 027e 022B     		cmp	r3, #2
 2709 0280 0AD0     		beq	.L169
 2710 0282 032B     		cmp	r3, #3
 2711 0284 14D0     		beq	.L170
 2712 0286 1FE0     		b	.L165
 2713              	.L168:
 701:.\main.c      ****         case elbw_start:
 702:.\main.c      ****             elbow_state = elbw_init;
 2714              		.loc 1 702 0
 2715 0288 174B     		ldr	r3, .L178+16
 2716 028a 0122     		mov	r2, #1
 2717 028c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 62


 703:.\main.c      ****             break;
 2718              		.loc 1 703 0
 2719 028e 1BE0     		b	.L165
 2720              	.L166:
 704:.\main.c      ****         
 705:.\main.c      ****         case elbw_init:
 706:.\main.c      ****             elbow_state = elbw_wait;
 2721              		.loc 1 706 0
 2722 0290 154B     		ldr	r3, .L178+16
 2723 0292 0322     		mov	r2, #3
 2724 0294 1A70     		strb	r2, [r3]
 707:.\main.c      ****             break;
 2725              		.loc 1 707 0
 2726 0296 17E0     		b	.L165
 2727              	.L169:
 708:.\main.c      ****         
 709:.\main.c      ****         case elbw_execute:
 710:.\main.c      ****             if(ELBOW_FLAG)
 2728              		.loc 1 710 0
 2729 0298 1A4B     		ldr	r3, .L178+44
 2730 029a 1B78     		ldrb	r3, [r3]
 2731 029c 002B     		cmp	r3, #0
 2732 029e 03D0     		beq	.L171
 711:.\main.c      ****             {
 712:.\main.c      ****                 elbow_state = elbw_execute;
 2733              		.loc 1 712 0
 2734 02a0 114B     		ldr	r3, .L178+16
 2735 02a2 0222     		mov	r2, #2
 2736 02a4 1A70     		strb	r2, [r3]
 713:.\main.c      ****             }
 714:.\main.c      ****             else
 715:.\main.c      ****             {
 716:.\main.c      ****                 elbow_state = elbw_wait;
 717:.\main.c      ****             }
 718:.\main.c      ****             break;
 2737              		.loc 1 718 0
 2738 02a6 0FE0     		b	.L165
 2739              	.L171:
 716:.\main.c      ****                 elbow_state = elbw_wait;
 2740              		.loc 1 716 0
 2741 02a8 0F4B     		ldr	r3, .L178+16
 2742 02aa 0322     		mov	r2, #3
 2743 02ac 1A70     		strb	r2, [r3]
 2744              		.loc 1 718 0
 2745 02ae 0BE0     		b	.L165
 2746              	.L170:
 719:.\main.c      ****         
 720:.\main.c      ****         case elbw_wait:
 721:.\main.c      ****             if(ELBOW_FLAG)
 2747              		.loc 1 721 0
 2748 02b0 144B     		ldr	r3, .L178+44
 2749 02b2 1B78     		ldrb	r3, [r3]
 2750 02b4 002B     		cmp	r3, #0
 2751 02b6 03D0     		beq	.L173
 722:.\main.c      ****             {
 723:.\main.c      ****                 elbow_state = elbw_execute;
 2752              		.loc 1 723 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 63


 2753 02b8 0B4B     		ldr	r3, .L178+16
 2754 02ba 0222     		mov	r2, #2
 2755 02bc 1A70     		strb	r2, [r3]
 724:.\main.c      ****             }
 725:.\main.c      ****             else
 726:.\main.c      ****             {
 727:.\main.c      ****                 elbow_state = elbw_wait; 
 728:.\main.c      ****             }
 729:.\main.c      ****             break;
 2756              		.loc 1 729 0
 2757 02be 02E0     		b	.L177
 2758              	.L173:
 727:.\main.c      ****                 elbow_state = elbw_wait; 
 2759              		.loc 1 727 0
 2760 02c0 094B     		ldr	r3, .L178+16
 2761 02c2 0322     		mov	r2, #3
 2762 02c4 1A70     		strb	r2, [r3]
 2763              	.L177:
 2764              		.loc 1 729 0
 2765 02c6 C046     		mov	r8, r8
 2766              	.L165:
 730:.\main.c      ****     }  
 731:.\main.c      ****     return elbw_arr_cspot;
 2767              		.loc 1 731 0
 2768 02c8 FB1D     		add	r3, r7, #7
 2769 02ca 1B78     		ldrb	r3, [r3]
 732:.\main.c      **** }
 2770              		.loc 1 732 0
 2771 02cc 181C     		mov	r0, r3
 2772 02ce BD46     		mov	sp, r7
 2773 02d0 05B0     		add	sp, sp, #20
 2774              		@ sp needed
 2775 02d2 90BD     		pop	{r4, r7, pc}
 2776              	.L179:
 2777 02d4 C046C046 		.align	3
 2778              	.L178:
 2779 02d8 9A999999 		.word	-1717986918
 2780 02dc 9999F13F 		.word	1072798105
 2781 02e0 CDCCCCCC 		.word	-858993459
 2782 02e4 CCCCEC3F 		.word	1072483532
 2783 02e8 00000000 		.word	elbow_state
 2784 02ec DC050000 		.word	1500
 2785 02f0 00000000 		.word	data_array
 2786 02f4 00000000 		.word	ELBOW_LOWER_BOUND
 2787 02f8 DB050000 		.word	1499
 2788 02fc E7030000 		.word	999
 2789 0300 00000000 		.word	ELBOW_UPPER_BOUND
 2790 0304 00000000 		.word	ELBOW_FLAG
 2791              		.cfi_endproc
 2792              	.LFE50:
 2793              		.size	elbow, .-elbow
 2794              		.comm	shoulder_state,1,1
 2795              		.section	.text.shoulder,"ax",%progbits
 2796              		.align	2
 2797              		.global	shoulder
 2798              		.code	16
 2799              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 64


 2800              		.type	shoulder, %function
 2801              	shoulder:
 2802              	.LFB51:
 733:.\main.c      **** 
 734:.\main.c      **** //control the shoulder
 735:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 736:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 737:.\main.c      **** { 
 2803              		.loc 1 737 0
 2804              		.cfi_startproc
 2805 0000 90B5     		push	{r4, r7, lr}
 2806              		.cfi_def_cfa_offset 12
 2807              		.cfi_offset 4, -12
 2808              		.cfi_offset 7, -8
 2809              		.cfi_offset 14, -4
 2810 0002 85B0     		sub	sp, sp, #20
 2811              		.cfi_def_cfa_offset 32
 2812 0004 00AF     		add	r7, sp, #0
 2813              		.cfi_def_cfa_register 7
 2814 0006 021C     		mov	r2, r0
 2815 0008 3960     		str	r1, [r7]
 2816 000a FB1D     		add	r3, r7, #7
 2817 000c 1A70     		strb	r2, [r3]
 738:.\main.c      ****     //take instruction from data_array
 739:.\main.c      ****     //smooth input
 740:.\main.c      ****     //actuate the shoulder using PWM
 741:.\main.c      ****     //get feedback
 742:.\main.c      ****     uint8 i;
 743:.\main.c      ****     uint16 avg;
 744:.\main.c      ****     uint16 command;
 745:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 2818              		.loc 1 745 0
 2819 000e 3C1C     		mov	r4, r7
 2820 0010 0C34     		add	r4, r4, #12
 2821 0012 0020     		mov	r0, #0
 2822 0014 FFF7FEFF 		bl	potFeedback
 2823 0018 031C     		mov	r3, r0
 2824 001a 2380     		strh	r3, [r4]
 746:.\main.c      ****     
 747:.\main.c      ****     switch(shoulder_state){ //actions
 2825              		.loc 1 747 0
 2826 001c B24B     		ldr	r3, .L221+16
 2827 001e 1B78     		ldrb	r3, [r3]
 2828 0020 012B     		cmp	r3, #1
 2829 0022 07D0     		beq	.L182
 2830 0024 00DC     		bgt	.LCB2535
 2831 0026 21E1     		b	.L219	@long jump
 2832              	.LCB2535:
 2833 0028 022B     		cmp	r3, #2
 2834 002a 24D0     		beq	.L185
 2835 002c 032B     		cmp	r3, #3
 2836 002e 00D1     		bne	.LCB2539
 2837 0030 08E1     		b	.L186	@long jump
 2838              	.LCB2539:
 2839 0032 1CE1     		b	.L181
 2840              	.L182:
 748:.\main.c      ****         case shldr_start:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 65


 749:.\main.c      ****             break;
 750:.\main.c      **** 
 751:.\main.c      ****         case shldr_init:
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2841              		.loc 1 752 0
 2842 0034 3B1C     		mov	r3, r7
 2843 0036 0F33     		add	r3, r3, #15
 2844 0038 0022     		mov	r2, #0
 2845 003a 1A70     		strb	r2, [r3]
 2846 003c 0EE0     		b	.L187
 2847              	.L188:
 753:.\main.c      ****             {
 754:.\main.c      ****                 shoulder_array[i] = 1500;
 2848              		.loc 1 754 0 discriminator 2
 2849 003e 3B1C     		mov	r3, r7
 2850 0040 0F33     		add	r3, r3, #15
 2851 0042 1B78     		ldrb	r3, [r3]
 2852 0044 5B00     		lsl	r3, r3, #1
 2853 0046 3A68     		ldr	r2, [r7]
 2854 0048 D318     		add	r3, r2, r3
 2855 004a A84A     		ldr	r2, .L221+20
 2856 004c 1A80     		strh	r2, [r3]
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2857              		.loc 1 752 0 discriminator 2
 2858 004e 3B1C     		mov	r3, r7
 2859 0050 0F33     		add	r3, r3, #15
 2860 0052 1A78     		ldrb	r2, [r3]
 2861 0054 3B1C     		mov	r3, r7
 2862 0056 0F33     		add	r3, r3, #15
 2863 0058 0132     		add	r2, r2, #1
 2864 005a 1A70     		strb	r2, [r3]
 2865              	.L187:
 752:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2866              		.loc 1 752 0 is_stmt 0 discriminator 1
 2867 005c 3B1C     		mov	r3, r7
 2868 005e 0F33     		add	r3, r3, #15
 2869 0060 1B78     		ldrb	r3, [r3]
 2870 0062 132B     		cmp	r3, #19
 2871 0064 EBD9     		bls	.L188
 755:.\main.c      ****             }
 756:.\main.c      ****             shldr_arr_cspot = 0;
 2872              		.loc 1 756 0 is_stmt 1
 2873 0066 FB1D     		add	r3, r7, #7
 2874 0068 0022     		mov	r2, #0
 2875 006a 1A70     		strb	r2, [r3]
 757:.\main.c      ****                         
 758:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 2876              		.loc 1 758 0
 2877 006c 9F4B     		ldr	r3, .L221+20
 2878 006e 181C     		mov	r0, r3
 2879 0070 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 759:.\main.c      ****             break;
 2880              		.loc 1 759 0
 2881 0074 FBE0     		b	.L181
 2882              	.L185:
 760:.\main.c      **** 
 761:.\main.c      ****         case shldr_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 66


 762:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2883              		.loc 1 762 0
 2884 0076 3C1C     		mov	r4, r7
 2885 0078 0A34     		add	r4, r4, #10
 2886 007a 9D4B     		ldr	r3, .L221+24
 2887 007c 181C     		mov	r0, r3
 2888 007e 0C21     		mov	r1, #12
 2889 0080 0D22     		mov	r2, #13
 2890 0082 FFF7FEFF 		bl	make_command
 2891 0086 031C     		mov	r3, r0
 2892 0088 2380     		strh	r3, [r4]
 763:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 2893              		.loc 1 763 0
 2894 008a FB1D     		add	r3, r7, #7
 2895 008c 1B78     		ldrb	r3, [r3]
 2896 008e 5B00     		lsl	r3, r3, #1
 2897 0090 3A68     		ldr	r2, [r7]
 2898 0092 D318     		add	r3, r2, r3
 2899 0094 3A1C     		mov	r2, r7
 2900 0096 0A32     		add	r2, r2, #10
 2901 0098 1288     		ldrh	r2, [r2]
 2902 009a 1A80     		strh	r2, [r3]
 764:.\main.c      ****         
 765:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2903              		.loc 1 765 0
 2904 009c FB1D     		add	r3, r7, #7
 2905 009e 1B78     		ldrb	r3, [r3]
 2906 00a0 122B     		cmp	r3, #18
 2907 00a2 05D8     		bhi	.L189
 766:.\main.c      ****             {
 767:.\main.c      ****                 shldr_arr_cspot++;
 2908              		.loc 1 767 0
 2909 00a4 FB1D     		add	r3, r7, #7
 2910 00a6 1A78     		ldrb	r2, [r3]
 2911 00a8 FB1D     		add	r3, r7, #7
 2912 00aa 0132     		add	r2, r2, #1
 2913 00ac 1A70     		strb	r2, [r3]
 2914 00ae 02E0     		b	.L190
 2915              	.L189:
 768:.\main.c      ****             }
 769:.\main.c      ****             else
 770:.\main.c      ****             {
 771:.\main.c      ****                 shldr_arr_cspot = 0;
 2916              		.loc 1 771 0
 2917 00b0 FB1D     		add	r3, r7, #7
 2918 00b2 0022     		mov	r2, #0
 2919 00b4 1A70     		strb	r2, [r3]
 2920              	.L190:
 772:.\main.c      ****             }
 773:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2921              		.loc 1 773 0
 2922 00b6 3C1C     		mov	r4, r7
 2923 00b8 0834     		add	r4, r4, #8
 2924 00ba 3B68     		ldr	r3, [r7]
 2925 00bc 181C     		mov	r0, r3
 2926 00be 1421     		mov	r1, #20
 2927 00c0 FFF7FEFF 		bl	average
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 67


 2928 00c4 031C     		mov	r3, r0
 2929 00c6 2380     		strh	r3, [r4]
 774:.\main.c      ****             
 775:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 2930              		.loc 1 775 0
 2931 00c8 FFF7FEFF 		bl	stop_shdr_dn_Read
 2932 00cc 031C     		mov	r3, r0
 2933 00ce 002B     		cmp	r3, #0
 2934 00d0 05D0     		beq	.L191
 2935              		.loc 1 775 0 is_stmt 0 discriminator 1
 2936 00d2 FFF7FEFF 		bl	stop_shdr_up_Read
 2937 00d6 031C     		mov	r3, r0
 2938 00d8 002B     		cmp	r3, #0
 2939 00da 00D0     		beq	.LCB2635
 2940 00dc 6FE0     		b	.L192	@long jump
 2941              	.LCB2635:
 2942              	.L191:
 776:.\main.c      ****             {
 777:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 2943              		.loc 1 777 0 is_stmt 1
 2944 00de 3B1C     		mov	r3, r7
 2945 00e0 0C33     		add	r3, r3, #12
 2946 00e2 1A88     		ldrh	r2, [r3]
 2947 00e4 834B     		ldr	r3, .L221+28
 2948 00e6 1B68     		ldr	r3, [r3]
 2949 00e8 9A42     		cmp	r2, r3
 2950 00ea 23D8     		bhi	.L193
 778:.\main.c      ****                 {
 779:.\main.c      ****                     if (avg < 1500)
 2951              		.loc 1 779 0
 2952 00ec 3B1C     		mov	r3, r7
 2953 00ee 0833     		add	r3, r3, #8
 2954 00f0 1A88     		ldrh	r2, [r3]
 2955 00f2 814B     		ldr	r3, .L221+32
 2956 00f4 9A42     		cmp	r2, r3
 2957 00f6 04D8     		bhi	.L194
 780:.\main.c      ****                     {
 781:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2958              		.loc 1 781 0
 2959 00f8 7C4B     		ldr	r3, .L221+20
 2960 00fa 181C     		mov	r0, r3
 2961 00fc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2962 0100 5CE0     		b	.L197
 2963              	.L194:
 782:.\main.c      ****                     }
 783:.\main.c      ****                     else
 784:.\main.c      ****                     {
 785:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2964              		.loc 1 785 0
 2965 0102 3B1C     		mov	r3, r7
 2966 0104 0833     		add	r3, r3, #8
 2967 0106 1A88     		ldrh	r2, [r3]
 2968 0108 FA23     		mov	r3, #250
 2969 010a DB00     		lsl	r3, r3, #3
 2970 010c 9A42     		cmp	r2, r3
 2971 010e 0CD8     		bhi	.L196
 2972              		.loc 1 785 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 68


 2973 0110 3B1C     		mov	r3, r7
 2974 0112 0833     		add	r3, r3, #8
 2975 0114 1A88     		ldrh	r2, [r3]
 2976 0116 794B     		ldr	r3, .L221+36
 2977 0118 9A42     		cmp	r2, r3
 2978 011a 06D9     		bls	.L196
 786:.\main.c      ****                         {
 787:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 2979              		.loc 1 787 0 is_stmt 1
 2980 011c 3B1C     		mov	r3, r7
 2981 011e 0833     		add	r3, r3, #8
 2982 0120 1B88     		ldrh	r3, [r3]
 2983 0122 181C     		mov	r0, r3
 2984 0124 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2985 0128 48E0     		b	.L197
 2986              	.L196:
 788:.\main.c      ****                         }
 789:.\main.c      ****                         else
 790:.\main.c      ****                         {
 791:.\main.c      ****                             //throw error
 792:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 2987              		.loc 1 792 0
 2988 012a 704B     		ldr	r3, .L221+20
 2989 012c 181C     		mov	r0, r3
 2990 012e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2991 0132 43E0     		b	.L197
 2992              	.L193:
 793:.\main.c      ****                         }
 794:.\main.c      ****                     }
 795:.\main.c      ****                 }
 796:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 2993              		.loc 1 796 0
 2994 0134 3B1C     		mov	r3, r7
 2995 0136 0C33     		add	r3, r3, #12
 2996 0138 1A88     		ldrh	r2, [r3]
 2997 013a 714B     		ldr	r3, .L221+40
 2998 013c 1B68     		ldr	r3, [r3]
 2999 013e 9A42     		cmp	r2, r3
 3000 0140 23D3     		bcc	.L198
 797:.\main.c      ****                 {
 798:.\main.c      ****                     if(avg > 1500)
 3001              		.loc 1 798 0
 3002 0142 3B1C     		mov	r3, r7
 3003 0144 0833     		add	r3, r3, #8
 3004 0146 1A88     		ldrh	r2, [r3]
 3005 0148 684B     		ldr	r3, .L221+20
 3006 014a 9A42     		cmp	r2, r3
 3007 014c 04D9     		bls	.L199
 799:.\main.c      ****                     {
 800:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3008              		.loc 1 800 0
 3009 014e 674B     		ldr	r3, .L221+20
 3010 0150 181C     		mov	r0, r3
 3011 0152 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3012 0156 31E0     		b	.L197
 3013              	.L199:
 801:.\main.c      ****                     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 69


 802:.\main.c      ****                     else
 803:.\main.c      ****                     {
 804:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3014              		.loc 1 804 0
 3015 0158 3B1C     		mov	r3, r7
 3016 015a 0833     		add	r3, r3, #8
 3017 015c 1A88     		ldrh	r2, [r3]
 3018 015e FA23     		mov	r3, #250
 3019 0160 DB00     		lsl	r3, r3, #3
 3020 0162 9A42     		cmp	r2, r3
 3021 0164 0CD8     		bhi	.L201
 3022              		.loc 1 804 0 is_stmt 0 discriminator 1
 3023 0166 3B1C     		mov	r3, r7
 3024 0168 0833     		add	r3, r3, #8
 3025 016a 1A88     		ldrh	r2, [r3]
 3026 016c 634B     		ldr	r3, .L221+36
 3027 016e 9A42     		cmp	r2, r3
 3028 0170 06D9     		bls	.L201
 805:.\main.c      ****                         {
 806:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3029              		.loc 1 806 0 is_stmt 1
 3030 0172 3B1C     		mov	r3, r7
 3031 0174 0833     		add	r3, r3, #8
 3032 0176 1B88     		ldrh	r3, [r3]
 3033 0178 181C     		mov	r0, r3
 3034 017a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3035 017e 1DE0     		b	.L197
 3036              	.L201:
 807:.\main.c      ****                         }
 808:.\main.c      ****                         else
 809:.\main.c      ****                         {
 810:.\main.c      ****                             //throw error
 811:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3037              		.loc 1 811 0
 3038 0180 5A4B     		ldr	r3, .L221+20
 3039 0182 181C     		mov	r0, r3
 3040 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3041 0188 18E0     		b	.L197
 3042              	.L198:
 812:.\main.c      ****                         }
 813:.\main.c      ****                     }
 814:.\main.c      ****                 }
 815:.\main.c      ****                 else
 816:.\main.c      ****                 {
 817:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3043              		.loc 1 817 0
 3044 018a 3B1C     		mov	r3, r7
 3045 018c 0833     		add	r3, r3, #8
 3046 018e 1A88     		ldrh	r2, [r3]
 3047 0190 FA23     		mov	r3, #250
 3048 0192 DB00     		lsl	r3, r3, #3
 3049 0194 9A42     		cmp	r2, r3
 3050 0196 0CD8     		bhi	.L202
 3051              		.loc 1 817 0 is_stmt 0 discriminator 1
 3052 0198 3B1C     		mov	r3, r7
 3053 019a 0833     		add	r3, r3, #8
 3054 019c 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 70


 3055 019e 574B     		ldr	r3, .L221+36
 3056 01a0 9A42     		cmp	r2, r3
 3057 01a2 06D9     		bls	.L202
 818:.\main.c      ****                     {
 819:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3058              		.loc 1 819 0 is_stmt 1
 3059 01a4 3B1C     		mov	r3, r7
 3060 01a6 0833     		add	r3, r3, #8
 3061 01a8 1B88     		ldrh	r3, [r3]
 3062 01aa 181C     		mov	r0, r3
 3063 01ac FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3064 01b0 04E0     		b	.L197
 3065              	.L202:
 820:.\main.c      ****                     }
 821:.\main.c      ****                     else
 822:.\main.c      ****                     {
 823:.\main.c      ****                         //throw error
 824:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3066              		.loc 1 824 0
 3067 01b2 4E4B     		ldr	r3, .L221+20
 3068 01b4 181C     		mov	r0, r3
 3069 01b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 777:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3070              		.loc 1 777 0
 3071 01ba 3FE0     		b	.L203
 3072              	.L197:
 3073 01bc 3EE0     		b	.L203
 3074              	.L192:
 825:.\main.c      ****                     }
 826:.\main.c      ****                 }
 827:.\main.c      ****             }
 828:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 829:.\main.c      ****             {
 830:.\main.c      ****                 if(!stop_shdr_dn_Read())
 3075              		.loc 1 830 0
 3076 01be FFF7FEFF 		bl	stop_shdr_dn_Read
 3077 01c2 031C     		mov	r3, r0
 3078 01c4 002B     		cmp	r3, #0
 3079 01c6 18D1     		bne	.L204
 831:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) * 1.1;
 3080              		.loc 1 831 0
 3081 01c8 0020     		mov	r0, #0
 3082 01ca FFF7FEFF 		bl	potFeedback
 3083 01ce 031C     		mov	r3, r0
 3084 01d0 181C     		mov	r0, r3
 3085 01d2 FFF7FEFF 		bl	__aeabi_i2d
 3086 01d6 031C     		mov	r3, r0
 3087 01d8 0C1C     		mov	r4, r1
 3088 01da 181C     		mov	r0, r3
 3089 01dc 211C     		mov	r1, r4
 3090 01de 3F4B     		ldr	r3, .L221+4
 3091 01e0 3D4A     		ldr	r2, .L221
 3092 01e2 FFF7FEFF 		bl	__aeabi_dmul
 3093 01e6 031C     		mov	r3, r0
 3094 01e8 0C1C     		mov	r4, r1
 3095 01ea 181C     		mov	r0, r3
 3096 01ec 211C     		mov	r1, r4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 71


 3097 01ee FFF7FEFF 		bl	__aeabi_d2uiz
 3098 01f2 021C     		mov	r2, r0
 3099 01f4 3F4B     		ldr	r3, .L221+28
 3100 01f6 1A60     		str	r2, [r3]
 3101 01f8 20E0     		b	.L203
 3102              	.L204:
 832:.\main.c      ****                 else if(!stop_shdr_up_Read())
 3103              		.loc 1 832 0
 3104 01fa FFF7FEFF 		bl	stop_shdr_up_Read
 3105 01fe 031C     		mov	r3, r0
 3106 0200 002B     		cmp	r3, #0
 3107 0202 18D1     		bne	.L205
 833:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) * .9;
 3108              		.loc 1 833 0
 3109 0204 0020     		mov	r0, #0
 3110 0206 FFF7FEFF 		bl	potFeedback
 3111 020a 031C     		mov	r3, r0
 3112 020c 181C     		mov	r0, r3
 3113 020e FFF7FEFF 		bl	__aeabi_i2d
 3114 0212 031C     		mov	r3, r0
 3115 0214 0C1C     		mov	r4, r1
 3116 0216 181C     		mov	r0, r3
 3117 0218 211C     		mov	r1, r4
 3118 021a 314A     		ldr	r2, .L221+8
 3119 021c 314B     		ldr	r3, .L221+12
 3120 021e FFF7FEFF 		bl	__aeabi_dmul
 3121 0222 031C     		mov	r3, r0
 3122 0224 0C1C     		mov	r4, r1
 3123 0226 181C     		mov	r0, r3
 3124 0228 211C     		mov	r1, r4
 3125 022a FFF7FEFF 		bl	__aeabi_d2uiz
 3126 022e 021C     		mov	r2, r0
 3127 0230 334B     		ldr	r3, .L221+40
 3128 0232 1A60     		str	r2, [r3]
 3129 0234 02E0     		b	.L203
 3130              	.L205:
 834:.\main.c      ****                 else
 835:.\main.c      ****                     LED_Write(1);
 3131              		.loc 1 835 0
 3132 0236 0120     		mov	r0, #1
 3133 0238 FFF7FEFF 		bl	LED_Write
 3134              	.L203:
 836:.\main.c      ****             }
 837:.\main.c      ****             SHOULDER_FLAG = 0;
 3135              		.loc 1 837 0
 3136 023c 314B     		ldr	r3, .L221+44
 3137 023e 0022     		mov	r2, #0
 3138 0240 1A70     		strb	r2, [r3]
 838:.\main.c      ****             break;
 3139              		.loc 1 838 0
 3140 0242 14E0     		b	.L181
 3141              	.L186:
 839:.\main.c      ****             
 840:.\main.c      ****         case shldr_wait:
 841:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3142              		.loc 1 841 0
 3143 0244 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 72


 3144 0246 0C33     		add	r3, r3, #12
 3145 0248 1A88     		ldrh	r2, [r3]
 3146 024a 2A4B     		ldr	r3, .L221+28
 3147 024c 1B68     		ldr	r3, [r3]
 3148 024e 9A42     		cmp	r2, r3
 3149 0250 06D9     		bls	.L206
 3150              		.loc 1 841 0 is_stmt 0 discriminator 1
 3151 0252 3B1C     		mov	r3, r7
 3152 0254 0C33     		add	r3, r3, #12
 3153 0256 1A88     		ldrh	r2, [r3]
 3154 0258 294B     		ldr	r3, .L221+40
 3155 025a 1B68     		ldr	r3, [r3]
 3156 025c 9A42     		cmp	r2, r3
 3157 025e 04D3     		bcc	.L207
 3158              	.L206:
 842:.\main.c      ****             {
 843:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3159              		.loc 1 843 0 is_stmt 1
 3160 0260 224B     		ldr	r3, .L221+20
 3161 0262 181C     		mov	r0, r3
 3162 0264 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 844:.\main.c      ****             }
 845:.\main.c      ****             break;
 3163              		.loc 1 845 0
 3164 0268 01E0     		b	.L181
 3165              	.L207:
 3166 026a 00E0     		b	.L181
 3167              	.L219:
 749:.\main.c      ****             break;
 3168              		.loc 1 749 0
 3169 026c C046     		mov	r8, r8
 3170              	.L181:
 846:.\main.c      ****     }
 847:.\main.c      ****     
 848:.\main.c      ****     switch(shoulder_state){ //transitions
 3171              		.loc 1 848 0
 3172 026e 1E4B     		ldr	r3, .L221+16
 3173 0270 1B78     		ldrb	r3, [r3]
 3174 0272 012B     		cmp	r3, #1
 3175 0274 0CD0     		beq	.L209
 3176 0276 02DC     		bgt	.L210
 3177 0278 002B     		cmp	r3, #0
 3178 027a 05D0     		beq	.L211
 3179 027c 24E0     		b	.L208
 3180              	.L210:
 3181 027e 022B     		cmp	r3, #2
 3182 0280 0AD0     		beq	.L212
 3183 0282 032B     		cmp	r3, #3
 3184 0284 14D0     		beq	.L213
 3185 0286 1FE0     		b	.L208
 3186              	.L211:
 849:.\main.c      ****         case shldr_start:
 850:.\main.c      ****             shoulder_state = shldr_init;
 3187              		.loc 1 850 0
 3188 0288 174B     		ldr	r3, .L221+16
 3189 028a 0122     		mov	r2, #1
 3190 028c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 73


 851:.\main.c      ****             break;
 3191              		.loc 1 851 0
 3192 028e 1BE0     		b	.L208
 3193              	.L209:
 852:.\main.c      ****         
 853:.\main.c      ****         case shldr_init:
 854:.\main.c      ****             shoulder_state = shldr_wait;
 3194              		.loc 1 854 0
 3195 0290 154B     		ldr	r3, .L221+16
 3196 0292 0322     		mov	r2, #3
 3197 0294 1A70     		strb	r2, [r3]
 855:.\main.c      ****             break;
 3198              		.loc 1 855 0
 3199 0296 17E0     		b	.L208
 3200              	.L212:
 856:.\main.c      ****         
 857:.\main.c      ****         case shldr_execute:
 858:.\main.c      ****             if(SHOULDER_FLAG)
 3201              		.loc 1 858 0
 3202 0298 1A4B     		ldr	r3, .L221+44
 3203 029a 1B78     		ldrb	r3, [r3]
 3204 029c 002B     		cmp	r3, #0
 3205 029e 03D0     		beq	.L214
 859:.\main.c      ****             {
 860:.\main.c      ****                 shoulder_state = shldr_execute;
 3206              		.loc 1 860 0
 3207 02a0 114B     		ldr	r3, .L221+16
 3208 02a2 0222     		mov	r2, #2
 3209 02a4 1A70     		strb	r2, [r3]
 861:.\main.c      ****             }
 862:.\main.c      ****             else
 863:.\main.c      ****             {
 864:.\main.c      ****                 shoulder_state = shldr_wait;
 865:.\main.c      ****             }
 866:.\main.c      ****             break;
 3210              		.loc 1 866 0
 3211 02a6 0FE0     		b	.L208
 3212              	.L214:
 864:.\main.c      ****                 shoulder_state = shldr_wait;
 3213              		.loc 1 864 0
 3214 02a8 0F4B     		ldr	r3, .L221+16
 3215 02aa 0322     		mov	r2, #3
 3216 02ac 1A70     		strb	r2, [r3]
 3217              		.loc 1 866 0
 3218 02ae 0BE0     		b	.L208
 3219              	.L213:
 867:.\main.c      ****         
 868:.\main.c      ****         case shldr_wait:
 869:.\main.c      ****             if(SHOULDER_FLAG)
 3220              		.loc 1 869 0
 3221 02b0 144B     		ldr	r3, .L221+44
 3222 02b2 1B78     		ldrb	r3, [r3]
 3223 02b4 002B     		cmp	r3, #0
 3224 02b6 03D0     		beq	.L216
 870:.\main.c      ****             {
 871:.\main.c      ****                 shoulder_state = shldr_execute;
 3225              		.loc 1 871 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 74


 3226 02b8 0B4B     		ldr	r3, .L221+16
 3227 02ba 0222     		mov	r2, #2
 3228 02bc 1A70     		strb	r2, [r3]
 872:.\main.c      ****             }
 873:.\main.c      ****             else
 874:.\main.c      ****             {
 875:.\main.c      ****                 shoulder_state = shldr_wait; 
 876:.\main.c      ****             }
 877:.\main.c      ****             break;
 3229              		.loc 1 877 0
 3230 02be 02E0     		b	.L220
 3231              	.L216:
 875:.\main.c      ****                 shoulder_state = shldr_wait; 
 3232              		.loc 1 875 0
 3233 02c0 094B     		ldr	r3, .L221+16
 3234 02c2 0322     		mov	r2, #3
 3235 02c4 1A70     		strb	r2, [r3]
 3236              	.L220:
 3237              		.loc 1 877 0
 3238 02c6 C046     		mov	r8, r8
 3239              	.L208:
 878:.\main.c      ****     }  
 879:.\main.c      ****     return shldr_arr_cspot;
 3240              		.loc 1 879 0
 3241 02c8 FB1D     		add	r3, r7, #7
 3242 02ca 1B78     		ldrb	r3, [r3]
 880:.\main.c      **** }
 3243              		.loc 1 880 0
 3244 02cc 181C     		mov	r0, r3
 3245 02ce BD46     		mov	sp, r7
 3246 02d0 05B0     		add	sp, sp, #20
 3247              		@ sp needed
 3248 02d2 90BD     		pop	{r4, r7, pc}
 3249              	.L222:
 3250 02d4 C046C046 		.align	3
 3251              	.L221:
 3252 02d8 9A999999 		.word	-1717986918
 3253 02dc 9999F13F 		.word	1072798105
 3254 02e0 CDCCCCCC 		.word	-858993459
 3255 02e4 CCCCEC3F 		.word	1072483532
 3256 02e8 00000000 		.word	shoulder_state
 3257 02ec DC050000 		.word	1500
 3258 02f0 00000000 		.word	data_array
 3259 02f4 00000000 		.word	SHOULDER_LOWER_BOUND
 3260 02f8 DB050000 		.word	1499
 3261 02fc E7030000 		.word	999
 3262 0300 00000000 		.word	SHOULDER_UPPER_BOUND
 3263 0304 00000000 		.word	SHOULDER_FLAG
 3264              		.cfi_endproc
 3265              	.LFE51:
 3266              		.size	shoulder, .-shoulder
 3267              		.comm	baseAzimuth_state,1,1
 3268              		.section	.text.baseAzimuth,"ax",%progbits
 3269              		.align	2
 3270              		.global	baseAzimuth
 3271              		.code	16
 3272              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 75


 3273              		.type	baseAzimuth, %function
 3274              	baseAzimuth:
 3275              	.LFB52:
 881:.\main.c      **** 
 882:.\main.c      **** //control the turret
 883:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 884:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
 885:.\main.c      **** { 
 3276              		.loc 1 885 0
 3277              		.cfi_startproc
 3278 0000 90B5     		push	{r4, r7, lr}
 3279              		.cfi_def_cfa_offset 12
 3280              		.cfi_offset 4, -12
 3281              		.cfi_offset 7, -8
 3282              		.cfi_offset 14, -4
 3283 0002 85B0     		sub	sp, sp, #20
 3284              		.cfi_def_cfa_offset 32
 3285 0004 00AF     		add	r7, sp, #0
 3286              		.cfi_def_cfa_register 7
 3287 0006 021C     		mov	r2, r0
 3288 0008 3960     		str	r1, [r7]
 3289 000a FB1D     		add	r3, r7, #7
 3290 000c 1A70     		strb	r2, [r3]
 886:.\main.c      ****     //take instruction from data_array
 887:.\main.c      ****     //smooth input
 888:.\main.c      ****     //actuate the turret using PWM
 889:.\main.c      ****     uint8 i;
 890:.\main.c      ****     uint16 avg;
 891:.\main.c      ****     uint16 command;
 892:.\main.c      ****     
 893:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3291              		.loc 1 893 0
 3292 000e 4E4B     		ldr	r3, .L247
 3293 0010 1B78     		ldrb	r3, [r3]
 3294 0012 012B     		cmp	r3, #1
 3295 0014 03D0     		beq	.L225
 3296 0016 63DD     		ble	.L245
 3297 0018 022B     		cmp	r3, #2
 3298 001a 21D0     		beq	.L228
 894:.\main.c      ****         case BA_start:
 895:.\main.c      ****             break;
 896:.\main.c      **** 
 897:.\main.c      ****         case BA_init:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 899:.\main.c      ****             {
 900:.\main.c      ****                 baseAz_array[i] = 1500;
 901:.\main.c      ****             }
 902:.\main.c      ****             BA_arr_cspot = 0;
 903:.\main.c      ****             
 904:.\main.c      ****             BA_PWM_WriteCompare(1500);
 905:.\main.c      ****             break;
 906:.\main.c      **** 
 907:.\main.c      ****         case BA_execute:
 908:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 909:.\main.c      ****             
 910:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
 911:.\main.c      **** //            
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 76


 912:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 913:.\main.c      **** //            {
 914:.\main.c      **** //                BA_arr_cspot++;
 915:.\main.c      **** //            }
 916:.\main.c      **** //            else
 917:.\main.c      **** //            {
 918:.\main.c      **** //                BA_arr_cspot = 0;
 919:.\main.c      **** //            }
 920:.\main.c      ****             
 921:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 922:.\main.c      ****             
 923:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 924:.\main.c      ****             
 925:.\main.c      **** //            if(avg == 1000 || avg == 2000)
 926:.\main.c      **** //            {
 927:.\main.c      **** //
 928:.\main.c      **** //                temp_val = temp_val*(-1);
 929:.\main.c      **** //            }
 930:.\main.c      ****             
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 932:.\main.c      ****             {
 933:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 934:.\main.c      ****             }
 935:.\main.c      ****             else
 936:.\main.c      ****             {
 937:.\main.c      ****                 LED_Write(1);
 938:.\main.c      **** 
 939:.\main.c      ****                 //throw error
 940:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 941:.\main.c      ****             }
 942:.\main.c      ****             BA_FLAG = 0;
 943:.\main.c      ****             break;
 944:.\main.c      ****             
 945:.\main.c      ****         case BA_wait:
 946:.\main.c      ****             break;
 3299              		.loc 1 946 0
 3300 001c 61E0     		b	.L224
 3301              	.L225:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3302              		.loc 1 898 0
 3303 001e 3B1C     		mov	r3, r7
 3304 0020 0F33     		add	r3, r3, #15
 3305 0022 0022     		mov	r2, #0
 3306 0024 1A70     		strb	r2, [r3]
 3307 0026 0EE0     		b	.L230
 3308              	.L231:
 900:.\main.c      ****                 baseAz_array[i] = 1500;
 3309              		.loc 1 900 0 discriminator 2
 3310 0028 3B1C     		mov	r3, r7
 3311 002a 0F33     		add	r3, r3, #15
 3312 002c 1B78     		ldrb	r3, [r3]
 3313 002e 5B00     		lsl	r3, r3, #1
 3314 0030 3A68     		ldr	r2, [r7]
 3315 0032 D318     		add	r3, r2, r3
 3316 0034 454A     		ldr	r2, .L247+4
 3317 0036 1A80     		strh	r2, [r3]
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 77


 3318              		.loc 1 898 0 discriminator 2
 3319 0038 3B1C     		mov	r3, r7
 3320 003a 0F33     		add	r3, r3, #15
 3321 003c 1A78     		ldrb	r2, [r3]
 3322 003e 3B1C     		mov	r3, r7
 3323 0040 0F33     		add	r3, r3, #15
 3324 0042 0132     		add	r2, r2, #1
 3325 0044 1A70     		strb	r2, [r3]
 3326              	.L230:
 898:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3327              		.loc 1 898 0 is_stmt 0 discriminator 1
 3328 0046 3B1C     		mov	r3, r7
 3329 0048 0F33     		add	r3, r3, #15
 3330 004a 1B78     		ldrb	r3, [r3]
 3331 004c 132B     		cmp	r3, #19
 3332 004e EBD9     		bls	.L231
 902:.\main.c      ****             BA_arr_cspot = 0;
 3333              		.loc 1 902 0 is_stmt 1
 3334 0050 FB1D     		add	r3, r7, #7
 3335 0052 0022     		mov	r2, #0
 3336 0054 1A70     		strb	r2, [r3]
 904:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3337              		.loc 1 904 0
 3338 0056 3D4B     		ldr	r3, .L247+4
 3339 0058 181C     		mov	r0, r3
 3340 005a FFF7FEFF 		bl	BA_PWM_WriteCompare
 905:.\main.c      ****             break;
 3341              		.loc 1 905 0
 3342 005e 40E0     		b	.L224
 3343              	.L228:
 908:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3344              		.loc 1 908 0
 3345 0060 3C1C     		mov	r4, r7
 3346 0062 0C34     		add	r4, r4, #12
 3347 0064 3A4B     		ldr	r3, .L247+8
 3348 0066 181C     		mov	r0, r3
 3349 0068 0A21     		mov	r1, #10
 3350 006a 0B22     		mov	r2, #11
 3351 006c FFF7FEFF 		bl	make_command
 3352 0070 031C     		mov	r3, r0
 3353 0072 2380     		strh	r3, [r4]
 921:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3354              		.loc 1 921 0
 3355 0074 FC1D     		add	r4, r7, #7
 3356 0076 FB1D     		add	r3, r7, #7
 3357 0078 1978     		ldrb	r1, [r3]
 3358 007a 3A68     		ldr	r2, [r7]
 3359 007c 3B1C     		mov	r3, r7
 3360 007e 0C33     		add	r3, r3, #12
 3361 0080 1B88     		ldrh	r3, [r3]
 3362 0082 081C     		mov	r0, r1
 3363 0084 111C     		mov	r1, r2
 3364 0086 1422     		mov	r2, #20
 3365 0088 FFF7FEFF 		bl	pos_to_vel
 3366 008c 031C     		mov	r3, r0
 3367 008e 2370     		strb	r3, [r4]
 923:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 78


 3368              		.loc 1 923 0
 3369 0090 3C1C     		mov	r4, r7
 3370 0092 0A34     		add	r4, r4, #10
 3371 0094 3B68     		ldr	r3, [r7]
 3372 0096 181C     		mov	r0, r3
 3373 0098 1421     		mov	r1, #20
 3374 009a FFF7FEFF 		bl	average
 3375 009e 031C     		mov	r3, r0
 3376 00a0 2380     		strh	r3, [r4]
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3377              		.loc 1 931 0
 3378 00a2 3B1C     		mov	r3, r7
 3379 00a4 0A33     		add	r3, r3, #10
 3380 00a6 1A88     		ldrh	r2, [r3]
 3381 00a8 FA23     		mov	r3, #250
 3382 00aa DB00     		lsl	r3, r3, #3
 3383 00ac 9A42     		cmp	r2, r3
 3384 00ae 0CD8     		bhi	.L232
 931:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3385              		.loc 1 931 0 is_stmt 0 discriminator 1
 3386 00b0 3B1C     		mov	r3, r7
 3387 00b2 0A33     		add	r3, r3, #10
 3388 00b4 1A88     		ldrh	r2, [r3]
 3389 00b6 274B     		ldr	r3, .L247+12
 3390 00b8 9A42     		cmp	r2, r3
 3391 00ba 06D9     		bls	.L232
 933:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3392              		.loc 1 933 0 is_stmt 1
 3393 00bc 3B1C     		mov	r3, r7
 3394 00be 0A33     		add	r3, r3, #10
 3395 00c0 1B88     		ldrh	r3, [r3]
 3396 00c2 181C     		mov	r0, r3
 3397 00c4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3398 00c8 06E0     		b	.L233
 3399              	.L232:
 937:.\main.c      ****                 LED_Write(1);
 3400              		.loc 1 937 0
 3401 00ca 0120     		mov	r0, #1
 3402 00cc FFF7FEFF 		bl	LED_Write
 940:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3403              		.loc 1 940 0
 3404 00d0 1E4B     		ldr	r3, .L247+4
 3405 00d2 181C     		mov	r0, r3
 3406 00d4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 3407              	.L233:
 942:.\main.c      ****             BA_FLAG = 0;
 3408              		.loc 1 942 0
 3409 00d8 1F4B     		ldr	r3, .L247+16
 3410 00da 0022     		mov	r2, #0
 3411 00dc 1A70     		strb	r2, [r3]
 943:.\main.c      ****             break;
 3412              		.loc 1 943 0
 3413 00de 00E0     		b	.L224
 3414              	.L245:
 895:.\main.c      ****             break;
 3415              		.loc 1 895 0
 3416 00e0 C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 79


 3417              	.L224:
 947:.\main.c      ****     }
 948:.\main.c      ****     
 949:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3418              		.loc 1 949 0
 3419 00e2 194B     		ldr	r3, .L247
 3420 00e4 1B78     		ldrb	r3, [r3]
 3421 00e6 012B     		cmp	r3, #1
 3422 00e8 0CD0     		beq	.L235
 3423 00ea 02DC     		bgt	.L236
 3424 00ec 002B     		cmp	r3, #0
 3425 00ee 05D0     		beq	.L237
 3426 00f0 24E0     		b	.L234
 3427              	.L236:
 3428 00f2 022B     		cmp	r3, #2
 3429 00f4 0AD0     		beq	.L238
 3430 00f6 032B     		cmp	r3, #3
 3431 00f8 14D0     		beq	.L239
 3432 00fa 1FE0     		b	.L234
 3433              	.L237:
 950:.\main.c      ****         case BA_start:
 951:.\main.c      ****             baseAzimuth_state = BA_init;
 3434              		.loc 1 951 0
 3435 00fc 124B     		ldr	r3, .L247
 3436 00fe 0122     		mov	r2, #1
 3437 0100 1A70     		strb	r2, [r3]
 952:.\main.c      ****             break;
 3438              		.loc 1 952 0
 3439 0102 1BE0     		b	.L234
 3440              	.L235:
 953:.\main.c      ****         
 954:.\main.c      ****         case BA_init:
 955:.\main.c      ****             baseAzimuth_state = BA_wait;
 3441              		.loc 1 955 0
 3442 0104 104B     		ldr	r3, .L247
 3443 0106 0322     		mov	r2, #3
 3444 0108 1A70     		strb	r2, [r3]
 956:.\main.c      ****             break;
 3445              		.loc 1 956 0
 3446 010a 17E0     		b	.L234
 3447              	.L238:
 957:.\main.c      ****         
 958:.\main.c      ****         case BA_execute:
 959:.\main.c      ****             if(BA_FLAG)
 3448              		.loc 1 959 0
 3449 010c 124B     		ldr	r3, .L247+16
 3450 010e 1B78     		ldrb	r3, [r3]
 3451 0110 002B     		cmp	r3, #0
 3452 0112 03D0     		beq	.L240
 960:.\main.c      ****             {
 961:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3453              		.loc 1 961 0
 3454 0114 0C4B     		ldr	r3, .L247
 3455 0116 0222     		mov	r2, #2
 3456 0118 1A70     		strb	r2, [r3]
 962:.\main.c      ****             }
 963:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 80


 964:.\main.c      ****             {
 965:.\main.c      ****                 baseAzimuth_state = BA_wait;
 966:.\main.c      ****             }
 967:.\main.c      ****             break;
 3457              		.loc 1 967 0
 3458 011a 0FE0     		b	.L234
 3459              	.L240:
 965:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3460              		.loc 1 965 0
 3461 011c 0A4B     		ldr	r3, .L247
 3462 011e 0322     		mov	r2, #3
 3463 0120 1A70     		strb	r2, [r3]
 3464              		.loc 1 967 0
 3465 0122 0BE0     		b	.L234
 3466              	.L239:
 968:.\main.c      ****         
 969:.\main.c      ****         case BA_wait:
 970:.\main.c      ****             if(BA_FLAG)
 3467              		.loc 1 970 0
 3468 0124 0C4B     		ldr	r3, .L247+16
 3469 0126 1B78     		ldrb	r3, [r3]
 3470 0128 002B     		cmp	r3, #0
 3471 012a 03D0     		beq	.L242
 971:.\main.c      ****             {
 972:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3472              		.loc 1 972 0
 3473 012c 064B     		ldr	r3, .L247
 3474 012e 0222     		mov	r2, #2
 3475 0130 1A70     		strb	r2, [r3]
 973:.\main.c      ****             }
 974:.\main.c      ****             else
 975:.\main.c      ****             {
 976:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 977:.\main.c      ****             }
 978:.\main.c      ****             break;
 3476              		.loc 1 978 0
 3477 0132 02E0     		b	.L246
 3478              	.L242:
 976:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3479              		.loc 1 976 0
 3480 0134 044B     		ldr	r3, .L247
 3481 0136 0322     		mov	r2, #3
 3482 0138 1A70     		strb	r2, [r3]
 3483              	.L246:
 3484              		.loc 1 978 0
 3485 013a C046     		mov	r8, r8
 3486              	.L234:
 979:.\main.c      ****     }  
 980:.\main.c      ****     return BA_arr_cspot;
 3487              		.loc 1 980 0
 3488 013c FB1D     		add	r3, r7, #7
 3489 013e 1B78     		ldrb	r3, [r3]
 981:.\main.c      **** }
 3490              		.loc 1 981 0
 3491 0140 181C     		mov	r0, r3
 3492 0142 BD46     		mov	sp, r7
 3493 0144 05B0     		add	sp, sp, #20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 81


 3494              		@ sp needed
 3495 0146 90BD     		pop	{r4, r7, pc}
 3496              	.L248:
 3497              		.align	2
 3498              	.L247:
 3499 0148 00000000 		.word	baseAzimuth_state
 3500 014c DC050000 		.word	1500
 3501 0150 00000000 		.word	data_array
 3502 0154 E7030000 		.word	999
 3503 0158 00000000 		.word	BA_FLAG
 3504              		.cfi_endproc
 3505              	.LFE52:
 3506              		.size	baseAzimuth, .-baseAzimuth
 3507              		.comm	effector_state,1,1
 3508              		.section	.text.effector,"ax",%progbits
 3509              		.align	2
 3510              		.global	effector
 3511              		.code	16
 3512              		.thumb_func
 3513              		.type	effector, %function
 3514              	effector:
 3515              	.LFB53:
 982:.\main.c      **** 
 983:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 984:.\main.c      **** void effector()
 985:.\main.c      **** {
 3516              		.loc 1 985 0
 3517              		.cfi_startproc
 3518 0000 90B5     		push	{r4, r7, lr}
 3519              		.cfi_def_cfa_offset 12
 3520              		.cfi_offset 4, -12
 3521              		.cfi_offset 7, -8
 3522              		.cfi_offset 14, -4
 3523 0002 83B0     		sub	sp, sp, #12
 3524              		.cfi_def_cfa_offset 24
 3525 0004 00AF     		add	r7, sp, #0
 3526              		.cfi_def_cfa_register 7
 986:.\main.c      ****     uint16 command;
 987:.\main.c      **** 
 988:.\main.c      ****     switch(effector_state){ //actions
 3527              		.loc 1 988 0
 3528 0006 304B     		ldr	r3, .L269
 3529 0008 1B78     		ldrb	r3, [r3]
 3530 000a 012B     		cmp	r3, #1
 3531 000c 03D0     		beq	.L251
 3532 000e 29DD     		ble	.L268
 3533 0010 022B     		cmp	r3, #2
 3534 0012 05D0     		beq	.L254
 989:.\main.c      ****         case shldr_start:
 990:.\main.c      ****             break;
 991:.\main.c      **** 
 992:.\main.c      ****         case eff_init:           
 993:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 994:.\main.c      ****            break;
 995:.\main.c      **** 
 996:.\main.c      ****         case eff_execute:
 997:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 82


 998:.\main.c      **** 
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
1000:.\main.c      ****             {
1001:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
1002:.\main.c      ****             }
1003:.\main.c      ****             else
1004:.\main.c      ****             {
1005:.\main.c      ****                 //throw error
1006:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
1007:.\main.c      ****             }
1008:.\main.c      ****             
1009:.\main.c      ****             EFFECTOR_FLAG = 0;
1010:.\main.c      ****             break;
1011:.\main.c      ****             
1012:.\main.c      ****         case eff_wait:
1013:.\main.c      ****             break;
 3535              		.loc 1 1013 0
 3536 0014 27E0     		b	.L250
 3537              	.L251:
 993:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3538              		.loc 1 993 0
 3539 0016 2D4B     		ldr	r3, .L269+4
 3540 0018 181C     		mov	r0, r3
 3541 001a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 994:.\main.c      ****            break;
 3542              		.loc 1 994 0
 3543 001e 22E0     		b	.L250
 3544              	.L254:
 997:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3545              		.loc 1 997 0
 3546 0020 BC1D     		add	r4, r7, #6
 3547 0022 2B4B     		ldr	r3, .L269+8
 3548 0024 181C     		mov	r0, r3
 3549 0026 1421     		mov	r1, #20
 3550 0028 1522     		mov	r2, #21
 3551 002a FFF7FEFF 		bl	make_command
 3552 002e 031C     		mov	r3, r0
 3553 0030 2380     		strh	r3, [r4]
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3554              		.loc 1 999 0
 3555 0032 BB1D     		add	r3, r7, #6
 3556 0034 1A88     		ldrh	r2, [r3]
 3557 0036 FA23     		mov	r3, #250
 3558 0038 DB00     		lsl	r3, r3, #3
 3559 003a 9A42     		cmp	r2, r3
 3560 003c 0AD8     		bhi	.L256
 999:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3561              		.loc 1 999 0 is_stmt 0 discriminator 1
 3562 003e BB1D     		add	r3, r7, #6
 3563 0040 1A88     		ldrh	r2, [r3]
 3564 0042 244B     		ldr	r3, .L269+12
 3565 0044 9A42     		cmp	r2, r3
 3566 0046 05D9     		bls	.L256
1001:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3567              		.loc 1 1001 0 is_stmt 1
 3568 0048 BB1D     		add	r3, r7, #6
 3569 004a 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 83


 3570 004c 181C     		mov	r0, r3
 3571 004e FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3572 0052 03E0     		b	.L257
 3573              	.L256:
1006:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3574              		.loc 1 1006 0
 3575 0054 1D4B     		ldr	r3, .L269+4
 3576 0056 181C     		mov	r0, r3
 3577 0058 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3578              	.L257:
1009:.\main.c      ****             EFFECTOR_FLAG = 0;
 3579              		.loc 1 1009 0
 3580 005c 1E4B     		ldr	r3, .L269+16
 3581 005e 0022     		mov	r2, #0
 3582 0060 1A70     		strb	r2, [r3]
1010:.\main.c      ****             break;
 3583              		.loc 1 1010 0
 3584 0062 00E0     		b	.L250
 3585              	.L268:
 990:.\main.c      ****             break;
 3586              		.loc 1 990 0
 3587 0064 C046     		mov	r8, r8
 3588              	.L250:
1014:.\main.c      ****     }
1015:.\main.c      ****     
1016:.\main.c      ****     switch(effector_state){ //transitions
 3589              		.loc 1 1016 0
 3590 0066 184B     		ldr	r3, .L269
 3591 0068 1B78     		ldrb	r3, [r3]
 3592 006a 012B     		cmp	r3, #1
 3593 006c 0CD0     		beq	.L259
 3594 006e 02DC     		bgt	.L260
 3595 0070 002B     		cmp	r3, #0
 3596 0072 05D0     		beq	.L261
 3597 0074 24E0     		b	.L249
 3598              	.L260:
 3599 0076 022B     		cmp	r3, #2
 3600 0078 0AD0     		beq	.L262
 3601 007a 032B     		cmp	r3, #3
 3602 007c 14D0     		beq	.L263
 3603 007e 1FE0     		b	.L249
 3604              	.L261:
1017:.\main.c      ****         case eff_start:
1018:.\main.c      ****             effector_state = eff_init;
 3605              		.loc 1 1018 0
 3606 0080 114B     		ldr	r3, .L269
 3607 0082 0122     		mov	r2, #1
 3608 0084 1A70     		strb	r2, [r3]
1019:.\main.c      ****             break;
 3609              		.loc 1 1019 0
 3610 0086 1BE0     		b	.L249
 3611              	.L259:
1020:.\main.c      ****         
1021:.\main.c      ****         case eff_init:
1022:.\main.c      ****             effector_state = eff_wait;
 3612              		.loc 1 1022 0
 3613 0088 0F4B     		ldr	r3, .L269
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 84


 3614 008a 0322     		mov	r2, #3
 3615 008c 1A70     		strb	r2, [r3]
1023:.\main.c      ****             break;
 3616              		.loc 1 1023 0
 3617 008e 17E0     		b	.L249
 3618              	.L262:
1024:.\main.c      ****         
1025:.\main.c      ****         case eff_execute:
1026:.\main.c      ****             if(EFFECTOR_FLAG)
 3619              		.loc 1 1026 0
 3620 0090 114B     		ldr	r3, .L269+16
 3621 0092 1B78     		ldrb	r3, [r3]
 3622 0094 002B     		cmp	r3, #0
 3623 0096 03D0     		beq	.L264
1027:.\main.c      ****             {
1028:.\main.c      ****                 effector_state = eff_execute;
 3624              		.loc 1 1028 0
 3625 0098 0B4B     		ldr	r3, .L269
 3626 009a 0222     		mov	r2, #2
 3627 009c 1A70     		strb	r2, [r3]
1029:.\main.c      ****             }
1030:.\main.c      ****             else
1031:.\main.c      ****             {
1032:.\main.c      ****                 effector_state = eff_wait;
1033:.\main.c      ****             }
1034:.\main.c      ****             break;
 3628              		.loc 1 1034 0
 3629 009e 0FE0     		b	.L249
 3630              	.L264:
1032:.\main.c      ****                 effector_state = eff_wait;
 3631              		.loc 1 1032 0
 3632 00a0 094B     		ldr	r3, .L269
 3633 00a2 0322     		mov	r2, #3
 3634 00a4 1A70     		strb	r2, [r3]
 3635              		.loc 1 1034 0
 3636 00a6 0BE0     		b	.L249
 3637              	.L263:
1035:.\main.c      ****         
1036:.\main.c      ****         case eff_wait:
1037:.\main.c      ****             if(EFFECTOR_FLAG)
 3638              		.loc 1 1037 0
 3639 00a8 0B4B     		ldr	r3, .L269+16
 3640 00aa 1B78     		ldrb	r3, [r3]
 3641 00ac 002B     		cmp	r3, #0
 3642 00ae 03D0     		beq	.L266
1038:.\main.c      ****             {
1039:.\main.c      ****                 effector_state = eff_execute;
 3643              		.loc 1 1039 0
 3644 00b0 054B     		ldr	r3, .L269
 3645 00b2 0222     		mov	r2, #2
 3646 00b4 1A70     		strb	r2, [r3]
 3647 00b6 02E0     		b	.L267
 3648              	.L266:
1040:.\main.c      ****             }
1041:.\main.c      ****             else
1042:.\main.c      ****             {
1043:.\main.c      ****                 effector_state = eff_wait; 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 85


 3649              		.loc 1 1043 0
 3650 00b8 034B     		ldr	r3, .L269
 3651 00ba 0322     		mov	r2, #3
 3652 00bc 1A70     		strb	r2, [r3]
 3653              	.L267:
1044:.\main.c      ****             }
1045:.\main.c      ****             break;
 3654              		.loc 1 1045 0
 3655 00be C046     		mov	r8, r8
 3656              	.L249:
1046:.\main.c      ****     }    
1047:.\main.c      **** }
 3657              		.loc 1 1047 0
 3658 00c0 BD46     		mov	sp, r7
 3659 00c2 03B0     		add	sp, sp, #12
 3660              		@ sp needed
 3661 00c4 90BD     		pop	{r4, r7, pc}
 3662              	.L270:
 3663 00c6 C046     		.align	2
 3664              	.L269:
 3665 00c8 00000000 		.word	effector_state
 3666 00cc DC050000 		.word	1500
 3667 00d0 00000000 		.word	data_array
 3668 00d4 E7030000 		.word	999
 3669 00d8 00000000 		.word	EFFECTOR_FLAG
 3670              		.cfi_endproc
 3671              	.LFE53:
 3672              		.size	effector, .-effector
 3673              		.section	.text.initialize,"ax",%progbits
 3674              		.align	2
 3675              		.global	initialize
 3676              		.code	16
 3677              		.thumb_func
 3678              		.type	initialize, %function
 3679              	initialize:
 3680              	.LFB54:
1048:.\main.c      **** 
1049:.\main.c      **** //Initialization function for the program
1050:.\main.c      **** void initialize()
1051:.\main.c      **** {
 3681              		.loc 1 1051 0
 3682              		.cfi_startproc
 3683 0000 80B5     		push	{r7, lr}
 3684              		.cfi_def_cfa_offset 8
 3685              		.cfi_offset 7, -8
 3686              		.cfi_offset 14, -4
 3687 0002 82B0     		sub	sp, sp, #8
 3688              		.cfi_def_cfa_offset 16
 3689 0004 00AF     		add	r7, sp, #0
 3690              		.cfi_def_cfa_register 7
1052:.\main.c      ****     //initialize the wiznet
1053:.\main.c      ****     WIZ_RST_Write(0);
 3691              		.loc 1 1053 0
 3692 0006 0020     		mov	r0, #0
 3693 0008 FFF7FEFF 		bl	WIZ_RST_Write
1054:.\main.c      ****     CyDelay(10);
 3694              		.loc 1 1054 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 86


 3695 000c 0A20     		mov	r0, #10
 3696 000e FFF7FEFF 		bl	CyDelay
1055:.\main.c      ****     WIZ_RST_Write(1);
 3697              		.loc 1 1055 0
 3698 0012 0120     		mov	r0, #1
 3699 0014 FFF7FEFF 		bl	WIZ_RST_Write
1056:.\main.c      ****     WIZ_SS_Write(1);
 3700              		.loc 1 1056 0
 3701 0018 0120     		mov	r0, #1
 3702 001a FFF7FEFF 		bl	WIZ_SS_Write
 3703              	.LBB2:
1057:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3704              		.loc 1 1057 0
 3705 001e FB1D     		add	r3, r7, #7
 3706 0020 0022     		mov	r2, #0
 3707 0022 1A70     		strb	r2, [r3]
 3708 0024 0DE0     		b	.L272
 3709              	.L275:
1058:.\main.c      ****     {
1059:.\main.c      ****         if(WIZ_RDY_Read())
 3710              		.loc 1 1059 0
 3711 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3712 002a 031C     		mov	r3, r0
 3713 002c 002B     		cmp	r3, #0
 3714 002e 00D0     		beq	.L273
1060:.\main.c      ****         {
1061:.\main.c      ****             break;
 3715              		.loc 1 1061 0
 3716 0030 0BE0     		b	.L274
 3717              	.L273:
1062:.\main.c      ****         }
1063:.\main.c      ****         else
1064:.\main.c      ****         {
1065:.\main.c      ****             CyDelay(4);
 3718              		.loc 1 1065 0
 3719 0032 0420     		mov	r0, #4
 3720 0034 FFF7FEFF 		bl	CyDelay
1057:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3721              		.loc 1 1057 0
 3722 0038 FB1D     		add	r3, r7, #7
 3723 003a 1A78     		ldrb	r2, [r3]
 3724 003c FB1D     		add	r3, r7, #7
 3725 003e 0132     		add	r2, r2, #1
 3726 0040 1A70     		strb	r2, [r3]
 3727              	.L272:
1057:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3728              		.loc 1 1057 0 is_stmt 0 discriminator 1
 3729 0042 FB1D     		add	r3, r7, #7
 3730 0044 1B78     		ldrb	r3, [r3]
 3731 0046 632B     		cmp	r3, #99
 3732 0048 EDD9     		bls	.L275
 3733              	.L274:
 3734              	.LBE2:
1066:.\main.c      ****         }
1067:.\main.c      ****     }
1068:.\main.c      ****     
1069:.\main.c      ****     //Initialize state variables
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 87


1070:.\main.c      ****     baseAzimuth_state = BA_start;
 3735              		.loc 1 1070 0 is_stmt 1
 3736 004a 304B     		ldr	r3, .L276
 3737 004c 0022     		mov	r2, #0
 3738 004e 1A70     		strb	r2, [r3]
1071:.\main.c      ****     wristTilt_state = tilt_start;
 3739              		.loc 1 1071 0
 3740 0050 2F4B     		ldr	r3, .L276+4
 3741 0052 0022     		mov	r2, #0
 3742 0054 1A70     		strb	r2, [r3]
1072:.\main.c      ****     wristRotate_state = rotate_start;
 3743              		.loc 1 1072 0
 3744 0056 2F4B     		ldr	r3, .L276+8
 3745 0058 0022     		mov	r2, #0
 3746 005a 1A70     		strb	r2, [r3]
1073:.\main.c      ****     shoulder_state = shldr_start;
 3747              		.loc 1 1073 0
 3748 005c 2E4B     		ldr	r3, .L276+12
 3749 005e 0022     		mov	r2, #0
 3750 0060 1A70     		strb	r2, [r3]
1074:.\main.c      ****     elbow_state = elbw_start;
 3751              		.loc 1 1074 0
 3752 0062 2E4B     		ldr	r3, .L276+16
 3753 0064 0022     		mov	r2, #0
 3754 0066 1A70     		strb	r2, [r3]
1075:.\main.c      ****     effector_state = eff_start;
 3755              		.loc 1 1075 0
 3756 0068 2D4B     		ldr	r3, .L276+20
 3757 006a 0022     		mov	r2, #0
 3758 006c 1A70     		strb	r2, [r3]
1076:.\main.c      ****     
1077:.\main.c      ****     //start all of our components
1078:.\main.c      ****     SPIM_1_Start();
 3759              		.loc 1 1078 0
 3760 006e FFF7FEFF 		bl	SPIM_1_Start
1079:.\main.c      ****     Clock_pwm_Start();
 3761              		.loc 1 1079 0
 3762 0072 FFF7FEFF 		bl	Clock_pwm_Start
1080:.\main.c      ****     Clock_counter_Start();
 3763              		.loc 1 1080 0
 3764 0076 FFF7FEFF 		bl	Clock_counter_Start
1081:.\main.c      ****     UART_1_Start();
 3765              		.loc 1 1081 0
 3766 007a FFF7FEFF 		bl	UART_1_Start
1082:.\main.c      ****     SHLDR_PWM_Start();
 3767              		.loc 1 1082 0
 3768 007e FFF7FEFF 		bl	SHLDR_PWM_Start
1083:.\main.c      ****     BA_PWM_Start();
 3769              		.loc 1 1083 0
 3770 0082 FFF7FEFF 		bl	BA_PWM_Start
1084:.\main.c      ****     ELBW_PWM_Start();
 3771              		.loc 1 1084 0
 3772 0086 FFF7FEFF 		bl	ELBW_PWM_Start
1085:.\main.c      ****     EFFECTOR_PWM_Start();
 3773              		.loc 1 1085 0
 3774 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
1086:.\main.c      ****     ADC_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 88


 3775              		.loc 1 1086 0
 3776 008e FFF7FEFF 		bl	ADC_Start
1087:.\main.c      ****     ADC_StartConvert();
 3777              		.loc 1 1087 0
 3778 0092 FFF7FEFF 		bl	ADC_StartConvert
1088:.\main.c      ****     
1089:.\main.c      ****     //uint8_t test_byte;
1090:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3779              		.loc 1 1090 0
 3780 0096 234B     		ldr	r3, .L276+24
 3781 0098 0420     		mov	r0, #4
 3782 009a 0121     		mov	r1, #1
 3783 009c 1A1C     		mov	r2, r3
 3784 009e FFF7FEFF 		bl	wiznetInit
1091:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1092:.\main.c      ****     
1093:.\main.c      ****     //Initialize the dynamixels
1094:.\main.c      ****     ServoSpeed(0xFE, 100);
 3785              		.loc 1 1094 0
 3786 00a2 FE20     		mov	r0, #254
 3787 00a4 6421     		mov	r1, #100
 3788 00a6 FFF7FEFF 		bl	ServoSpeed
1095:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3789              		.loc 1 1095 0
 3790 00aa 1F4B     		ldr	r3, .L276+28
 3791 00ac FE20     		mov	r0, #254
 3792 00ae 191C     		mov	r1, r3
 3793 00b0 FFF7FEFF 		bl	SetServoTorque
1096:.\main.c      ****     
1097:.\main.c      ****     LED_Write(1);
 3794              		.loc 1 1097 0
 3795 00b4 0120     		mov	r0, #1
 3796 00b6 FFF7FEFF 		bl	LED_Write
1098:.\main.c      ****     //Initialize our motor drivers
1099:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3797              		.loc 1 1099 0
 3798 00ba 1C4B     		ldr	r3, .L276+32
 3799 00bc 181C     		mov	r0, r3
 3800 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1100:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3801              		.loc 1 1100 0
 3802 00c2 1A4B     		ldr	r3, .L276+32
 3803 00c4 181C     		mov	r0, r3
 3804 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1101:.\main.c      ****     CyDelay(3000);
 3805              		.loc 1 1101 0
 3806 00ca 194B     		ldr	r3, .L276+36
 3807 00cc 181C     		mov	r0, r3
 3808 00ce FFF7FEFF 		bl	CyDelay
1102:.\main.c      ****     LED_Write(0);
 3809              		.loc 1 1102 0
 3810 00d2 0020     		mov	r0, #0
 3811 00d4 FFF7FEFF 		bl	LED_Write
1103:.\main.c      ****     
1104:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1105:.\main.c      ****     //SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
1106:.\main.c      ****     //SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 89


1107:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 3812              		.loc 1 1107 0
 3813 00d8 164B     		ldr	r3, .L276+40
 3814 00da 181C     		mov	r0, r3
 3815 00dc FFF7FEFF 		bl	CalibrationElbow
 3816 00e0 031C     		mov	r3, r0
 3817 00e2 1A1C     		mov	r2, r3
 3818 00e4 144B     		ldr	r3, .L276+44
 3819 00e6 1A60     		str	r2, [r3]
1108:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 3820              		.loc 1 1108 0
 3821 00e8 144B     		ldr	r3, .L276+48
 3822 00ea 181C     		mov	r0, r3
 3823 00ec FFF7FEFF 		bl	CalibrationElbow
 3824 00f0 031C     		mov	r3, r0
 3825 00f2 1A1C     		mov	r2, r3
 3826 00f4 124B     		ldr	r3, .L276+52
 3827 00f6 1A60     		str	r2, [r3]
1109:.\main.c      ****     
1110:.\main.c      ****     //helps for generating random arrays
1111:.\main.c      ****     //srand((unsigned) time(&t));
1112:.\main.c      ****     
1113:.\main.c      ****     CyGlobalIntEnable;
 3828              		.loc 1 1113 0
 3829              	@ 1113 ".\main.c" 1
 3830 00f8 62B6     		CPSIE   i
 3831              	@ 0 "" 2
1114:.\main.c      ****     isr_1_StartEx(timer_isr);
 3832              		.loc 1 1114 0
 3833              		.code	16
 3834 00fa 124B     		ldr	r3, .L276+56
 3835 00fc 181C     		mov	r0, r3
 3836 00fe FFF7FEFF 		bl	isr_1_StartEx
1115:.\main.c      ****     Timer_1_Start();
 3837              		.loc 1 1115 0
 3838 0102 FFF7FEFF 		bl	Timer_1_Start
1116:.\main.c      ****     
1117:.\main.c      ****     //UART_TEST_Start();
1118:.\main.c      ****     
1119:.\main.c      **** }
 3839              		.loc 1 1119 0
 3840 0106 BD46     		mov	sp, r7
 3841 0108 02B0     		add	sp, sp, #8
 3842              		@ sp needed
 3843 010a 80BD     		pop	{r7, pc}
 3844              	.L277:
 3845              		.align	2
 3846              	.L276:
 3847 010c 00000000 		.word	baseAzimuth_state
 3848 0110 00000000 		.word	wristTilt_state
 3849 0114 00000000 		.word	wristRotate_state
 3850 0118 00000000 		.word	shoulder_state
 3851 011c 00000000 		.word	elbow_state
 3852 0120 00000000 		.word	effector_state
 3853 0124 87690000 		.word	27015
 3854 0128 FF030000 		.word	1023
 3855 012c DC050000 		.word	1500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 90


 3856 0130 B80B0000 		.word	3000
 3857 0134 A4060000 		.word	1700
 3858 0138 00000000 		.word	ELBOW_UPPER_BOUND
 3859 013c 14050000 		.word	1300
 3860 0140 00000000 		.word	ELBOW_LOWER_BOUND
 3861 0144 00000000 		.word	timer_isr
 3862              		.cfi_endproc
 3863              	.LFE54:
 3864              		.size	initialize, .-initialize
 3865              		.section	.text.main,"ax",%progbits
 3866              		.align	2
 3867              		.global	main
 3868              		.code	16
 3869              		.thumb_func
 3870              		.type	main, %function
 3871              	main:
 3872              	.LFB55:
1120:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1121:.\main.c      **** int main()
1122:.\main.c      **** {  
 3873              		.loc 1 1122 0
 3874              		.cfi_startproc
 3875 0000 90B5     		push	{r4, r7, lr}
 3876              		.cfi_def_cfa_offset 12
 3877              		.cfi_offset 4, -12
 3878              		.cfi_offset 7, -8
 3879              		.cfi_offset 14, -4
 3880 0002 B7B0     		sub	sp, sp, #220
 3881              		.cfi_def_cfa_offset 232
 3882 0004 00AF     		add	r7, sp, #0
 3883              		.cfi_def_cfa_register 7
1123:.\main.c      ****     //Define variables
1124:.\main.c      ****     //for testing
1125:.\main.c      **** //    time_t t; 
1126:.\main.c      **** //    char time_array[8];
1127:.\main.c      **** //    uint8 counter;
1128:.\main.c      **** //    int direction = 0;
1129:.\main.c      ****     
1130:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1131:.\main.c      ****     
1132:.\main.c      ****     uint8 BA_cspot;
1133:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1134:.\main.c      ****     uint8 shldr_cspot;
1135:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1136:.\main.c      ****     uint8 elbw_cspot;
1137:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1138:.\main.c      ****     uint8 WT_cspot;
1139:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1140:.\main.c      ****     uint8 WR_cspot;
1141:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1142:.\main.c      ****     
1143:.\main.c      ****     //for testing
1144:.\main.c      **** //    int increasing = 1;
1145:.\main.c      **** //    int first_count;
1146:.\main.c      **** //    int second_count;
1147:.\main.c      **** //    int temp_code_time;
1148:.\main.c      **** //    int code_time = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 91


1149:.\main.c      ****     
1150:.\main.c      ****     
1151:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 3884              		.loc 1 1151 0
 3885 0006 3B1C     		mov	r3, r7
 3886 0008 D233     		add	r3, r3, #210
 3887 000a 0022     		mov	r2, #0
 3888 000c 1A70     		strb	r2, [r3]
1152:.\main.c      ****     int16 temp_val = 1500; 
 3889              		.loc 1 1152 0
 3890 000e 3B1C     		mov	r3, r7
 3891 0010 CA33     		add	r3, r3, #202
 3892 0012 5A4A     		ldr	r2, .L290
 3893 0014 1A80     		strh	r2, [r3]
1153:.\main.c      ****     
1154:.\main.c      ****     initialize();
 3894              		.loc 1 1154 0
 3895 0016 FFF7FEFF 		bl	initialize
 3896              	.L288:
1155:.\main.c      **** //    uint8 i;
1156:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1157:.\main.c      **** //    {
1158:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1159:.\main.c      **** //    }
1160:.\main.c      **** 
1161:.\main.c      ****     for(;;)
1162:.\main.c      ****     {
1163:.\main.c      ****         //UART_TEST_UartPutChar(31);
1164:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1165:.\main.c      ****         
1166:.\main.c      ****         if(stop_elb_dn_Read())
 3897              		.loc 1 1166 0
 3898 001a FFF7FEFF 		bl	stop_elb_dn_Read
 3899 001e 031C     		mov	r3, r0
 3900 0020 002B     		cmp	r3, #0
 3901 0022 03D0     		beq	.L279
1167:.\main.c      ****         {
1168:.\main.c      ****             LED_Write(1);
 3902              		.loc 1 1168 0
 3903 0024 0120     		mov	r0, #1
 3904 0026 FFF7FEFF 		bl	LED_Write
 3905 002a 02E0     		b	.L280
 3906              	.L279:
1169:.\main.c      ****         }
1170:.\main.c      ****         else
1171:.\main.c      ****         {
1172:.\main.c      ****             LED_Write(0);
 3907              		.loc 1 1172 0
 3908 002c 0020     		mov	r0, #0
 3909 002e FFF7FEFF 		bl	LED_Write
 3910              	.L280:
1173:.\main.c      ****         }
1174:.\main.c      ****         
1175:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 3911              		.loc 1 1175 0
 3912 0032 FFF7FEFF 		bl	WIZ_INT_Read
 3913 0036 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 92


 3914 0038 002B     		cmp	r3, #0
 3915 003a 17D1     		bne	.L281
1176:.\main.c      ****         {
1177:.\main.c      ****             wiznetClearInterrupts();
 3916              		.loc 1 1177 0
 3917 003c FFF7FEFF 		bl	wiznetClearInterrupts
1178:.\main.c      ****             fill_data_array();
 3918              		.loc 1 1178 0
 3919 0040 FFF7FEFF 		bl	fill_data_array
1179:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1180:.\main.c      ****             BA_FLAG = 1;
 3920              		.loc 1 1180 0
 3921 0044 4E4B     		ldr	r3, .L290+4
 3922 0046 0122     		mov	r2, #1
 3923 0048 1A70     		strb	r2, [r3]
1181:.\main.c      ****             WR_FLAG = 1;
 3924              		.loc 1 1181 0
 3925 004a 4E4B     		ldr	r3, .L290+8
 3926 004c 0122     		mov	r2, #1
 3927 004e 1A70     		strb	r2, [r3]
1182:.\main.c      ****             WT_FLAG = 1;
 3928              		.loc 1 1182 0
 3929 0050 4D4B     		ldr	r3, .L290+12
 3930 0052 0122     		mov	r2, #1
 3931 0054 1A70     		strb	r2, [r3]
1183:.\main.c      ****             SHOULDER_FLAG = 1;
 3932              		.loc 1 1183 0
 3933 0056 4D4B     		ldr	r3, .L290+16
 3934 0058 0122     		mov	r2, #1
 3935 005a 1A70     		strb	r2, [r3]
1184:.\main.c      ****             ELBOW_FLAG = 1;
 3936              		.loc 1 1184 0
 3937 005c 4C4B     		ldr	r3, .L290+20
 3938 005e 0122     		mov	r2, #1
 3939 0060 1A70     		strb	r2, [r3]
1185:.\main.c      ****             fs_count = 0;
 3940              		.loc 1 1185 0
 3941 0062 3B1C     		mov	r3, r7
 3942 0064 D233     		add	r3, r3, #210
 3943 0066 0022     		mov	r2, #0
 3944 0068 1A70     		strb	r2, [r3]
 3945 006a 06E0     		b	.L282
 3946              	.L281:
1186:.\main.c      ****             //wiznet = 0; //for testing
1187:.\main.c      ****         }
1188:.\main.c      ****         else
1189:.\main.c      ****         {
1190:.\main.c      ****             fs_count += 1;
 3947              		.loc 1 1190 0
 3948 006c 3B1C     		mov	r3, r7
 3949 006e D233     		add	r3, r3, #210
 3950 0070 3A1C     		mov	r2, r7
 3951 0072 D232     		add	r2, r2, #210
 3952 0074 1278     		ldrb	r2, [r2]
 3953 0076 0132     		add	r2, r2, #1
 3954 0078 1A70     		strb	r2, [r3]
 3955              	.L282:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 93


1191:.\main.c      ****         }
1192:.\main.c      ****         
1193:.\main.c      ****         if(fs_count >= 50)
 3956              		.loc 1 1193 0
 3957 007a 3B1C     		mov	r3, r7
 3958 007c D233     		add	r3, r3, #210
 3959 007e 1B78     		ldrb	r3, [r3]
 3960 0080 312B     		cmp	r3, #49
 3961 0082 2CD9     		bls	.L283
1194:.\main.c      ****         {
1195:.\main.c      ****             temp_val = 1500;
 3962              		.loc 1 1195 0
 3963 0084 3B1C     		mov	r3, r7
 3964 0086 CA33     		add	r3, r3, #202
 3965 0088 3C4A     		ldr	r2, .L290
 3966 008a 1A80     		strh	r2, [r3]
 3967              	.LBB3:
1196:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3968              		.loc 1 1196 0
 3969 008c 0023     		mov	r3, #0
 3970 008e CC20     		mov	r0, #204
 3971 0090 C019     		add	r0, r0, r7
 3972 0092 0360     		str	r3, [r0]
 3973 0094 1DE0     		b	.L284
 3974              	.L285:
1197:.\main.c      ****             {
1198:.\main.c      ****                 data_array[i] = temp_val >> 8;
 3975              		.loc 1 1198 0 discriminator 2
 3976 0096 3B1C     		mov	r3, r7
 3977 0098 CA33     		add	r3, r3, #202
 3978 009a 0022     		mov	r2, #0
 3979 009c 9B5E     		ldrsh	r3, [r3, r2]
 3980 009e 1B12     		asr	r3, r3, #8
 3981 00a0 9BB2     		uxth	r3, r3
 3982 00a2 DAB2     		uxtb	r2, r3
 3983 00a4 3B49     		ldr	r1, .L290+24
 3984 00a6 CC20     		mov	r0, #204
 3985 00a8 C019     		add	r0, r0, r7
 3986 00aa 0368     		ldr	r3, [r0]
 3987 00ac CB18     		add	r3, r1, r3
 3988 00ae 1A70     		strb	r2, [r3]
1199:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 3989              		.loc 1 1199 0 discriminator 2
 3990 00b0 CC22     		mov	r2, #204
 3991 00b2 D219     		add	r2, r2, r7
 3992 00b4 1368     		ldr	r3, [r2]
 3993 00b6 0133     		add	r3, r3, #1
 3994 00b8 3A1C     		mov	r2, r7
 3995 00ba CA32     		add	r2, r2, #202
 3996 00bc 1288     		ldrh	r2, [r2]
 3997 00be D1B2     		uxtb	r1, r2
 3998 00c0 344A     		ldr	r2, .L290+24
 3999 00c2 D154     		strb	r1, [r2, r3]
1196:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4000              		.loc 1 1196 0 discriminator 2
 4001 00c4 CC20     		mov	r0, #204
 4002 00c6 C019     		add	r0, r0, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 94


 4003 00c8 0368     		ldr	r3, [r0]
 4004 00ca 0233     		add	r3, r3, #2
 4005 00cc CC22     		mov	r2, #204
 4006 00ce D219     		add	r2, r2, r7
 4007 00d0 1360     		str	r3, [r2]
 4008              	.L284:
1196:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4009              		.loc 1 1196 0 is_stmt 0 discriminator 1
 4010 00d2 CC20     		mov	r0, #204
 4011 00d4 C019     		add	r0, r0, r7
 4012 00d6 0368     		ldr	r3, [r0]
 4013 00d8 152B     		cmp	r3, #21
 4014 00da DCDD     		ble	.L285
 4015              	.LBE3:
1200:.\main.c      ****             }
1201:.\main.c      ****         }
1202:.\main.c      ****         else
1203:.\main.c      ****         {
1204:.\main.c      ****         
1205:.\main.c      ****         //if(wiznet gives a complete packet)
1206:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1207:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1208:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1209:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1210:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1211:.\main.c      ****             effector();
1212:.\main.c      ****             send_feedback(); //send feedback onece every tick
1213:.\main.c      ****         }
1214:.\main.c      **** 
1215:.\main.c      **** //        else{dropped_packets++}
1216:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1217:.\main.c      **** //        LED_Write(0);
1218:.\main.c      **** //        temp_code_time = second_count - first_count;
1219:.\main.c      **** //        if(temp_code_time > code_time)
1220:.\main.c      **** //        {
1221:.\main.c      **** //            code_time = temp_code_time;
1222:.\main.c      **** //            itoa(code_time, time_array);
1223:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1224:.\main.c      **** //        }
1225:.\main.c      ****         
1226:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4016              		.loc 1 1226 0 is_stmt 1
 4017 00dc 43E0     		b	.L289
 4018              	.L283:
1206:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4019              		.loc 1 1206 0
 4020 00de 3C1C     		mov	r4, r7
 4021 00e0 D734     		add	r4, r4, #215
 4022 00e2 3B1C     		mov	r3, r7
 4023 00e4 D733     		add	r3, r3, #215
 4024 00e6 1A78     		ldrb	r2, [r3]
 4025 00e8 3B1C     		mov	r3, r7
 4026 00ea A033     		add	r3, r3, #160
 4027 00ec 101C     		mov	r0, r2
 4028 00ee 191C     		mov	r1, r3
 4029 00f0 FFF7FEFF 		bl	baseAzimuth
 4030 00f4 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 95


 4031 00f6 2370     		strb	r3, [r4]
1207:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4032              		.loc 1 1207 0
 4033 00f8 3C1C     		mov	r4, r7
 4034 00fa D634     		add	r4, r4, #214
 4035 00fc 3B1C     		mov	r3, r7
 4036 00fe D633     		add	r3, r3, #214
 4037 0100 1A78     		ldrb	r2, [r3]
 4038 0102 3B1C     		mov	r3, r7
 4039 0104 7833     		add	r3, r3, #120
 4040 0106 101C     		mov	r0, r2
 4041 0108 191C     		mov	r1, r3
 4042 010a FFF7FEFF 		bl	shoulder
 4043 010e 031C     		mov	r3, r0
 4044 0110 2370     		strb	r3, [r4]
1208:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4045              		.loc 1 1208 0
 4046 0112 3C1C     		mov	r4, r7
 4047 0114 D534     		add	r4, r4, #213
 4048 0116 3B1C     		mov	r3, r7
 4049 0118 D533     		add	r3, r3, #213
 4050 011a 1A78     		ldrb	r2, [r3]
 4051 011c 3B1C     		mov	r3, r7
 4052 011e 5033     		add	r3, r3, #80
 4053 0120 101C     		mov	r0, r2
 4054 0122 191C     		mov	r1, r3
 4055 0124 FFF7FEFF 		bl	elbow
 4056 0128 031C     		mov	r3, r0
 4057 012a 2370     		strb	r3, [r4]
1209:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4058              		.loc 1 1209 0
 4059 012c 3C1C     		mov	r4, r7
 4060 012e D434     		add	r4, r4, #212
 4061 0130 3B1C     		mov	r3, r7
 4062 0132 D433     		add	r3, r3, #212
 4063 0134 1A78     		ldrb	r2, [r3]
 4064 0136 3B1C     		mov	r3, r7
 4065 0138 2833     		add	r3, r3, #40
 4066 013a 101C     		mov	r0, r2
 4067 013c 191C     		mov	r1, r3
 4068 013e FFF7FEFF 		bl	wristTilt
 4069 0142 031C     		mov	r3, r0
 4070 0144 2370     		strb	r3, [r4]
1210:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4071              		.loc 1 1210 0
 4072 0146 3C1C     		mov	r4, r7
 4073 0148 D334     		add	r4, r4, #211
 4074 014a 3B1C     		mov	r3, r7
 4075 014c D333     		add	r3, r3, #211
 4076 014e 1A78     		ldrb	r2, [r3]
 4077 0150 3B1C     		mov	r3, r7
 4078 0152 101C     		mov	r0, r2
 4079 0154 191C     		mov	r1, r3
 4080 0156 FFF7FEFF 		bl	wristRotate
 4081 015a 031C     		mov	r3, r0
 4082 015c 2370     		strb	r3, [r4]
1211:.\main.c      ****             effector();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 96


 4083              		.loc 1 1211 0
 4084 015e FFF7FEFF 		bl	effector
1212:.\main.c      ****             send_feedback(); //send feedback onece every tick
 4085              		.loc 1 1212 0
 4086 0162 FFF7FEFF 		bl	send_feedback
 4087              	.L289:
 4088              		.loc 1 1226 0
 4089 0166 C046     		mov	r8, r8
 4090              	.L287:
 4091              		.loc 1 1226 0 is_stmt 0 discriminator 1
 4092 0168 0B4B     		ldr	r3, .L290+28
 4093 016a 1B78     		ldrb	r3, [r3]
 4094 016c DBB2     		uxtb	r3, r3
 4095 016e 002B     		cmp	r3, #0
 4096 0170 FAD0     		beq	.L287
1227:.\main.c      ****         timerFlag = 0;
 4097              		.loc 1 1227 0 is_stmt 1
 4098 0172 094B     		ldr	r3, .L290+28
 4099 0174 0022     		mov	r2, #0
 4100 0176 1A70     		strb	r2, [r3]
1228:.\main.c      ****     
1229:.\main.c      ****         
1230:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1231:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1232:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1233:.\main.c      **** //        counter++;
1234:.\main.c      **** //        
1235:.\main.c      **** //        if(counter == 50)
1236:.\main.c      **** //        {
1237:.\main.c      **** //        
1238:.\main.c      **** //            if(increasing)
1239:.\main.c      **** //            {
1240:.\main.c      **** //                temp_val += 100;
1241:.\main.c      **** //                if(temp_val == 1000)
1242:.\main.c      **** //                {
1243:.\main.c      **** //                    increasing = 0;
1244:.\main.c      **** //                }
1245:.\main.c      **** //            }
1246:.\main.c      **** //            else
1247:.\main.c      **** //            {
1248:.\main.c      **** //                temp_val -= 100;
1249:.\main.c      **** //                if(temp_val == -1000)
1250:.\main.c      **** //                {
1251:.\main.c      **** //                    increasing = 1;   
1252:.\main.c      **** //                }
1253:.\main.c      **** //            }
1254:.\main.c      **** //            
1255:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1256:.\main.c      **** //            //int16 forward = 1000;
1257:.\main.c      **** //            //int16 backward = -1000;
1258:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1259:.\main.c      **** //            {
1260:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1261:.\main.c      **** //                //test_array[i] = random_number >> 8;
1262:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1263:.\main.c      **** //                test_array[i] = temp_val >> 8;
1264:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 97


1265:.\main.c      **** //            }
1266:.\main.c      **** ////            counter = 0;
1267:.\main.c      **** //            wiznet = 1;
1268:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 4101              		.loc 1 1268 0
 4102 0178 4FE7     		b	.L288
 4103              	.L291:
 4104 017a C046     		.align	2
 4105              	.L290:
 4106 017c DC050000 		.word	1500
 4107 0180 00000000 		.word	BA_FLAG
 4108 0184 00000000 		.word	WR_FLAG
 4109 0188 00000000 		.word	WT_FLAG
 4110 018c 00000000 		.word	SHOULDER_FLAG
 4111 0190 00000000 		.word	ELBOW_FLAG
 4112 0194 00000000 		.word	data_array
 4113 0198 00000000 		.word	timerFlag
 4114              		.cfi_endproc
 4115              	.LFE55:
 4116              		.size	main, .-main
 4117              		.text
 4118              	.Letext0:
 4119              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 4120              		.file 3 ".\\main.h"
 4121              		.section	.debug_info,"",%progbits
 4122              	.Ldebug_info0:
 4123 0000 1E0B0000 		.4byte	0xb1e
 4124 0004 0400     		.2byte	0x4
 4125 0006 00000000 		.4byte	.Ldebug_abbrev0
 4126 000a 04       		.byte	0x4
 4127 000b 01       		.uleb128 0x1
 4128 000c F5050000 		.4byte	.LASF147
 4129 0010 01       		.byte	0x1
 4130 0011 43070000 		.4byte	.LASF148
 4131 0015 FD000000 		.4byte	.LASF149
 4132 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4133 001d 00000000 		.4byte	0
 4134 0021 00000000 		.4byte	.Ldebug_line0
 4135 0025 02       		.uleb128 0x2
 4136 0026 01       		.byte	0x1
 4137 0027 06       		.byte	0x6
 4138 0028 98060000 		.4byte	.LASF0
 4139 002c 02       		.uleb128 0x2
 4140 002d 01       		.byte	0x1
 4141 002e 08       		.byte	0x8
 4142 002f 8A050000 		.4byte	.LASF1
 4143 0033 02       		.uleb128 0x2
 4144 0034 02       		.byte	0x2
 4145 0035 05       		.byte	0x5
 4146 0036 64040000 		.4byte	.LASF2
 4147 003a 02       		.uleb128 0x2
 4148 003b 02       		.byte	0x2
 4149 003c 07       		.byte	0x7
 4150 003d AC060000 		.4byte	.LASF3
 4151 0041 02       		.uleb128 0x2
 4152 0042 04       		.byte	0x4
 4153 0043 05       		.byte	0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 98


 4154 0044 89040000 		.4byte	.LASF4
 4155 0048 02       		.uleb128 0x2
 4156 0049 04       		.byte	0x4
 4157 004a 07       		.byte	0x7
 4158 004b 26050000 		.4byte	.LASF5
 4159 004f 02       		.uleb128 0x2
 4160 0050 08       		.byte	0x8
 4161 0051 05       		.byte	0x5
 4162 0052 12030000 		.4byte	.LASF6
 4163 0056 02       		.uleb128 0x2
 4164 0057 08       		.byte	0x8
 4165 0058 07       		.byte	0x7
 4166 0059 DC010000 		.4byte	.LASF7
 4167 005d 03       		.uleb128 0x3
 4168 005e 04       		.byte	0x4
 4169 005f 05       		.byte	0x5
 4170 0060 696E7400 		.ascii	"int\000"
 4171 0064 02       		.uleb128 0x2
 4172 0065 04       		.byte	0x4
 4173 0066 07       		.byte	0x7
 4174 0067 80000000 		.4byte	.LASF8
 4175 006b 04       		.uleb128 0x4
 4176 006c EA060000 		.4byte	.LASF9
 4177 0070 02       		.byte	0x2
 4178 0071 A1       		.byte	0xa1
 4179 0072 2C000000 		.4byte	0x2c
 4180 0076 04       		.uleb128 0x4
 4181 0077 D4020000 		.4byte	.LASF10
 4182 007b 02       		.byte	0x2
 4183 007c A2       		.byte	0xa2
 4184 007d 3A000000 		.4byte	0x3a
 4185 0081 04       		.uleb128 0x4
 4186 0082 A4030000 		.4byte	.LASF11
 4187 0086 02       		.byte	0x2
 4188 0087 A3       		.byte	0xa3
 4189 0088 48000000 		.4byte	0x48
 4190 008c 04       		.uleb128 0x4
 4191 008d E2020000 		.4byte	.LASF12
 4192 0091 02       		.byte	0x2
 4193 0092 A4       		.byte	0xa4
 4194 0093 25000000 		.4byte	0x25
 4195 0097 04       		.uleb128 0x4
 4196 0098 A0000000 		.4byte	.LASF13
 4197 009c 02       		.byte	0x2
 4198 009d A5       		.byte	0xa5
 4199 009e 33000000 		.4byte	0x33
 4200 00a2 02       		.uleb128 0x2
 4201 00a3 04       		.byte	0x4
 4202 00a4 04       		.byte	0x4
 4203 00a5 B6010000 		.4byte	.LASF14
 4204 00a9 02       		.uleb128 0x2
 4205 00aa 08       		.byte	0x8
 4206 00ab 04       		.byte	0x4
 4207 00ac F0060000 		.4byte	.LASF15
 4208 00b0 02       		.uleb128 0x2
 4209 00b1 01       		.byte	0x1
 4210 00b2 08       		.byte	0x8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 99


 4211 00b3 CF020000 		.4byte	.LASF16
 4212 00b7 05       		.uleb128 0x5
 4213 00b8 6B000000 		.4byte	0x6b
 4214 00bc 02       		.uleb128 0x2
 4215 00bd 04       		.byte	0x4
 4216 00be 07       		.byte	0x7
 4217 00bf 1D050000 		.4byte	.LASF17
 4218 00c3 06       		.uleb128 0x6
 4219 00c4 CD040000 		.4byte	.LASF22
 4220 00c8 01       		.byte	0x1
 4221 00c9 01       		.byte	0x1
 4222 00ca 7801     		.2byte	0x178
 4223 00cc E9000000 		.4byte	0xe9
 4224 00d0 07       		.uleb128 0x7
 4225 00d1 7E010000 		.4byte	.LASF18
 4226 00d5 00       		.sleb128 0
 4227 00d6 07       		.uleb128 0x7
 4228 00d7 0C000000 		.4byte	.LASF19
 4229 00db 01       		.sleb128 1
 4230 00dc 07       		.uleb128 0x7
 4231 00dd 92040000 		.4byte	.LASF20
 4232 00e1 02       		.sleb128 2
 4233 00e2 07       		.uleb128 0x7
 4234 00e3 D7060000 		.4byte	.LASF21
 4235 00e7 03       		.sleb128 3
 4236 00e8 00       		.byte	0
 4237 00e9 06       		.uleb128 0x6
 4238 00ea 49030000 		.4byte	.LASF23
 4239 00ee 01       		.byte	0x1
 4240 00ef 01       		.byte	0x1
 4241 00f0 E001     		.2byte	0x1e0
 4242 00f2 0F010000 		.4byte	0x10f
 4243 00f6 07       		.uleb128 0x7
 4244 00f7 5C010000 		.4byte	.LASF24
 4245 00fb 00       		.sleb128 0
 4246 00fc 07       		.uleb128 0x7
 4247 00fd E9050000 		.4byte	.LASF25
 4248 0101 01       		.sleb128 1
 4249 0102 07       		.uleb128 0x7
 4250 0103 55040000 		.4byte	.LASF26
 4251 0107 02       		.sleb128 2
 4252 0108 07       		.uleb128 0x7
 4253 0109 52050000 		.4byte	.LASF27
 4254 010d 03       		.sleb128 3
 4255 010e 00       		.byte	0
 4256 010f 06       		.uleb128 0x6
 4257 0110 61000000 		.4byte	.LASF28
 4258 0114 01       		.byte	0x1
 4259 0115 01       		.byte	0x1
 4260 0116 4B02     		.2byte	0x24b
 4261 0118 35010000 		.4byte	0x135
 4262 011c 07       		.uleb128 0x7
 4263 011d E4030000 		.4byte	.LASF29
 4264 0121 00       		.sleb128 0
 4265 0122 07       		.uleb128 0x7
 4266 0123 4C070000 		.4byte	.LASF30
 4267 0127 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 100


 4268 0128 07       		.uleb128 0x7
 4269 0129 38050000 		.4byte	.LASF31
 4270 012d 02       		.sleb128 2
 4271 012e 07       		.uleb128 0x7
 4272 012f BF060000 		.4byte	.LASF32
 4273 0133 03       		.sleb128 3
 4274 0134 00       		.byte	0
 4275 0135 06       		.uleb128 0x6
 4276 0136 20030000 		.4byte	.LASF33
 4277 013a 01       		.byte	0x1
 4278 013b 01       		.byte	0x1
 4279 013c DF02     		.2byte	0x2df
 4280 013e 5B010000 		.4byte	0x15b
 4281 0142 07       		.uleb128 0x7
 4282 0143 73050000 		.4byte	.LASF34
 4283 0147 00       		.sleb128 0
 4284 0148 07       		.uleb128 0x7
 4285 0149 07030000 		.4byte	.LASF35
 4286 014d 01       		.sleb128 1
 4287 014e 07       		.uleb128 0x7
 4288 014f C9050000 		.4byte	.LASF36
 4289 0153 02       		.sleb128 2
 4290 0154 07       		.uleb128 0x7
 4291 0155 A9020000 		.4byte	.LASF37
 4292 0159 03       		.sleb128 3
 4293 015a 00       		.byte	0
 4294 015b 06       		.uleb128 0x6
 4295 015c 8D000000 		.4byte	.LASF38
 4296 0160 01       		.byte	0x1
 4297 0161 01       		.byte	0x1
 4298 0162 7303     		.2byte	0x373
 4299 0164 81010000 		.4byte	0x181
 4300 0168 07       		.uleb128 0x7
 4301 0169 C7000000 		.4byte	.LASF39
 4302 016d 00       		.sleb128 0
 4303 016e 07       		.uleb128 0x7
 4304 016f BC010000 		.4byte	.LASF40
 4305 0173 01       		.sleb128 1
 4306 0174 07       		.uleb128 0x7
 4307 0175 56000000 		.4byte	.LASF41
 4308 0179 02       		.sleb128 2
 4309 017a 07       		.uleb128 0x7
 4310 017b C5040000 		.4byte	.LASF42
 4311 017f 03       		.sleb128 3
 4312 0180 00       		.byte	0
 4313 0181 06       		.uleb128 0x6
 4314 0182 7F030000 		.4byte	.LASF43
 4315 0186 01       		.byte	0x1
 4316 0187 01       		.byte	0x1
 4317 0188 D703     		.2byte	0x3d7
 4318 018a A7010000 		.4byte	0x1a7
 4319 018e 07       		.uleb128 0x7
 4320 018f 68020000 		.4byte	.LASF44
 4321 0193 00       		.sleb128 0
 4322 0194 07       		.uleb128 0x7
 4323 0195 B4050000 		.4byte	.LASF45
 4324 0199 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 101


 4325 019a 07       		.uleb128 0x7
 4326 019b 18020000 		.4byte	.LASF46
 4327 019f 02       		.sleb128 2
 4328 01a0 07       		.uleb128 0x7
 4329 01a1 FD040000 		.4byte	.LASF47
 4330 01a5 03       		.sleb128 3
 4331 01a6 00       		.byte	0
 4332 01a7 08       		.uleb128 0x8
 4333 01a8 9F040000 		.4byte	.LASF83
 4334 01ac 01       		.byte	0x1
 4335 01ad 0A       		.byte	0xa
 4336 01ae 00000000 		.4byte	.LFB34
 4337 01b2 28000000 		.4byte	.LFE34-.LFB34
 4338 01b6 01       		.uleb128 0x1
 4339 01b7 9C       		.byte	0x9c
 4340 01b8 CB010000 		.4byte	0x1cb
 4341 01bc 09       		.uleb128 0x9
 4342 01bd 0A070000 		.4byte	.LASF48
 4343 01c1 01       		.byte	0x1
 4344 01c2 0C       		.byte	0xc
 4345 01c3 81000000 		.4byte	0x81
 4346 01c7 02       		.uleb128 0x2
 4347 01c8 91       		.byte	0x91
 4348 01c9 74       		.sleb128 -12
 4349 01ca 00       		.byte	0
 4350 01cb 0A       		.uleb128 0xa
 4351 01cc A6000000 		.4byte	.LASF54
 4352 01d0 01       		.byte	0x1
 4353 01d1 2F       		.byte	0x2f
 4354 01d2 76000000 		.4byte	0x76
 4355 01d6 00000000 		.4byte	.LFB35
 4356 01da B8010000 		.4byte	.LFE35-.LFB35
 4357 01de 01       		.uleb128 0x1
 4358 01df 9C       		.byte	0x9c
 4359 01e0 45020000 		.4byte	0x245
 4360 01e4 0B       		.uleb128 0xb
 4361 01e5 06050000 		.4byte	.LASF56
 4362 01e9 01       		.byte	0x1
 4363 01ea 2F       		.byte	0x2f
 4364 01eb 76000000 		.4byte	0x76
 4365 01ef 02       		.uleb128 0x2
 4366 01f0 91       		.byte	0x91
 4367 01f1 5E       		.sleb128 -34
 4368 01f2 09       		.uleb128 0x9
 4369 01f3 F8020000 		.4byte	.LASF49
 4370 01f7 01       		.byte	0x1
 4371 01f8 31       		.byte	0x31
 4372 01f9 6B000000 		.4byte	0x6b
 4373 01fd 02       		.uleb128 0x2
 4374 01fe 91       		.byte	0x91
 4375 01ff 69       		.sleb128 -23
 4376 0200 0C       		.uleb128 0xc
 4377 0201 6900     		.ascii	"i\000"
 4378 0203 01       		.byte	0x1
 4379 0204 32       		.byte	0x32
 4380 0205 6B000000 		.4byte	0x6b
 4381 0209 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 102


 4382 020a 91       		.byte	0x91
 4383 020b 6F       		.sleb128 -17
 4384 020c 09       		.uleb128 0x9
 4385 020d 9E030000 		.4byte	.LASF50
 4386 0211 01       		.byte	0x1
 4387 0212 33       		.byte	0x33
 4388 0213 76000000 		.4byte	0x76
 4389 0217 02       		.uleb128 0x2
 4390 0218 91       		.byte	0x91
 4391 0219 6C       		.sleb128 -20
 4392 021a 09       		.uleb128 0x9
 4393 021b A4060000 		.4byte	.LASF51
 4394 021f 01       		.byte	0x1
 4395 0220 34       		.byte	0x34
 4396 0221 76000000 		.4byte	0x76
 4397 0225 02       		.uleb128 0x2
 4398 0226 91       		.byte	0x91
 4399 0227 6A       		.sleb128 -22
 4400 0228 09       		.uleb128 0x9
 4401 0229 29040000 		.4byte	.LASF52
 4402 022d 01       		.byte	0x1
 4403 022e 35       		.byte	0x35
 4404 022f 81000000 		.4byte	0x81
 4405 0233 02       		.uleb128 0x2
 4406 0234 91       		.byte	0x91
 4407 0235 64       		.sleb128 -28
 4408 0236 09       		.uleb128 0x9
 4409 0237 84060000 		.4byte	.LASF53
 4410 023b 01       		.byte	0x1
 4411 023c 36       		.byte	0x36
 4412 023d 97000000 		.4byte	0x97
 4413 0241 02       		.uleb128 0x2
 4414 0242 91       		.byte	0x91
 4415 0243 62       		.sleb128 -30
 4416 0244 00       		.byte	0
 4417 0245 0A       		.uleb128 0xa
 4418 0246 87020000 		.4byte	.LASF55
 4419 024a 01       		.byte	0x1
 4420 024b 6F       		.byte	0x6f
 4421 024c 76000000 		.4byte	0x76
 4422 0250 00000000 		.4byte	.LFB36
 4423 0254 B8010000 		.4byte	.LFE36-.LFB36
 4424 0258 01       		.uleb128 0x1
 4425 0259 9C       		.byte	0x9c
 4426 025a BF020000 		.4byte	0x2bf
 4427 025e 0B       		.uleb128 0xb
 4428 025f 06050000 		.4byte	.LASF56
 4429 0263 01       		.byte	0x1
 4430 0264 6F       		.byte	0x6f
 4431 0265 76000000 		.4byte	0x76
 4432 0269 02       		.uleb128 0x2
 4433 026a 91       		.byte	0x91
 4434 026b 5E       		.sleb128 -34
 4435 026c 09       		.uleb128 0x9
 4436 026d F8020000 		.4byte	.LASF49
 4437 0271 01       		.byte	0x1
 4438 0272 71       		.byte	0x71
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 103


 4439 0273 6B000000 		.4byte	0x6b
 4440 0277 02       		.uleb128 0x2
 4441 0278 91       		.byte	0x91
 4442 0279 69       		.sleb128 -23
 4443 027a 0C       		.uleb128 0xc
 4444 027b 6900     		.ascii	"i\000"
 4445 027d 01       		.byte	0x1
 4446 027e 72       		.byte	0x72
 4447 027f 6B000000 		.4byte	0x6b
 4448 0283 02       		.uleb128 0x2
 4449 0284 91       		.byte	0x91
 4450 0285 6F       		.sleb128 -17
 4451 0286 09       		.uleb128 0x9
 4452 0287 9E030000 		.4byte	.LASF50
 4453 028b 01       		.byte	0x1
 4454 028c 73       		.byte	0x73
 4455 028d 76000000 		.4byte	0x76
 4456 0291 02       		.uleb128 0x2
 4457 0292 91       		.byte	0x91
 4458 0293 6C       		.sleb128 -20
 4459 0294 09       		.uleb128 0x9
 4460 0295 A4060000 		.4byte	.LASF51
 4461 0299 01       		.byte	0x1
 4462 029a 74       		.byte	0x74
 4463 029b 76000000 		.4byte	0x76
 4464 029f 02       		.uleb128 0x2
 4465 02a0 91       		.byte	0x91
 4466 02a1 6A       		.sleb128 -22
 4467 02a2 09       		.uleb128 0x9
 4468 02a3 29040000 		.4byte	.LASF52
 4469 02a7 01       		.byte	0x1
 4470 02a8 75       		.byte	0x75
 4471 02a9 81000000 		.4byte	0x81
 4472 02ad 02       		.uleb128 0x2
 4473 02ae 91       		.byte	0x91
 4474 02af 64       		.sleb128 -28
 4475 02b0 09       		.uleb128 0x9
 4476 02b1 84060000 		.4byte	.LASF53
 4477 02b5 01       		.byte	0x1
 4478 02b6 76       		.byte	0x76
 4479 02b7 97000000 		.4byte	0x97
 4480 02bb 02       		.uleb128 0x2
 4481 02bc 91       		.byte	0x91
 4482 02bd 62       		.sleb128 -30
 4483 02be 00       		.byte	0
 4484 02bf 0A       		.uleb128 0xa
 4485 02c0 A4060000 		.4byte	.LASF51
 4486 02c4 01       		.byte	0x1
 4487 02c5 A9       		.byte	0xa9
 4488 02c6 76000000 		.4byte	0x76
 4489 02ca 00000000 		.4byte	.LFB37
 4490 02ce 78000000 		.4byte	.LFE37-.LFB37
 4491 02d2 01       		.uleb128 0x1
 4492 02d3 9C       		.byte	0x9c
 4493 02d4 1D030000 		.4byte	0x31d
 4494 02d8 0B       		.uleb128 0xb
 4495 02d9 80040000 		.4byte	.LASF57
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 104


 4496 02dd 01       		.byte	0x1
 4497 02de A9       		.byte	0xa9
 4498 02df 1D030000 		.4byte	0x31d
 4499 02e3 02       		.uleb128 0x2
 4500 02e4 91       		.byte	0x91
 4501 02e5 64       		.sleb128 -28
 4502 02e6 0B       		.uleb128 0xb
 4503 02e7 16000000 		.4byte	.LASF58
 4504 02eb 01       		.byte	0x1
 4505 02ec A9       		.byte	0xa9
 4506 02ed 6B000000 		.4byte	0x6b
 4507 02f1 02       		.uleb128 0x2
 4508 02f2 91       		.byte	0x91
 4509 02f3 63       		.sleb128 -29
 4510 02f4 0C       		.uleb128 0xc
 4511 02f5 6900     		.ascii	"i\000"
 4512 02f7 01       		.byte	0x1
 4513 02f8 AB       		.byte	0xab
 4514 02f9 6B000000 		.4byte	0x6b
 4515 02fd 02       		.uleb128 0x2
 4516 02fe 91       		.byte	0x91
 4517 02ff 77       		.sleb128 -9
 4518 0300 0C       		.uleb128 0xc
 4519 0301 73756D00 		.ascii	"sum\000"
 4520 0305 01       		.byte	0x1
 4521 0306 AC       		.byte	0xac
 4522 0307 81000000 		.4byte	0x81
 4523 030b 02       		.uleb128 0x2
 4524 030c 91       		.byte	0x91
 4525 030d 70       		.sleb128 -16
 4526 030e 0C       		.uleb128 0xc
 4527 030f 61766700 		.ascii	"avg\000"
 4528 0313 01       		.byte	0x1
 4529 0314 AD       		.byte	0xad
 4530 0315 76000000 		.4byte	0x76
 4531 0319 02       		.uleb128 0x2
 4532 031a 91       		.byte	0x91
 4533 031b 6E       		.sleb128 -18
 4534 031c 00       		.byte	0
 4535 031d 0D       		.uleb128 0xd
 4536 031e 04       		.byte	0x4
 4537 031f 76000000 		.4byte	0x76
 4538 0323 0E       		.uleb128 0xe
 4539 0324 DF000000 		.4byte	.LASF59
 4540 0328 01       		.byte	0x1
 4541 0329 B9       		.byte	0xb9
 4542 032a 6B000000 		.4byte	0x6b
 4543 032e 00000000 		.4byte	.LFB38
 4544 0332 3E000000 		.4byte	.LFE38-.LFB38
 4545 0336 01       		.uleb128 0x1
 4546 0337 9C       		.byte	0x9c
 4547 0338 59030000 		.4byte	0x359
 4548 033c 0B       		.uleb128 0xb
 4549 033d 30030000 		.4byte	.LASF60
 4550 0341 01       		.byte	0x1
 4551 0342 B9       		.byte	0xb9
 4552 0343 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 105


 4553 0347 02       		.uleb128 0x2
 4554 0348 91       		.byte	0x91
 4555 0349 77       		.sleb128 -9
 4556 034a 0B       		.uleb128 0xb
 4557 034b A4020000 		.4byte	.LASF61
 4558 034f 01       		.byte	0x1
 4559 0350 B9       		.byte	0xb9
 4560 0351 6B000000 		.4byte	0x6b
 4561 0355 02       		.uleb128 0x2
 4562 0356 91       		.byte	0x91
 4563 0357 76       		.sleb128 -10
 4564 0358 00       		.byte	0
 4565 0359 0A       		.uleb128 0xa
 4566 035a E5040000 		.4byte	.LASF62
 4567 035e 01       		.byte	0x1
 4568 035f C6       		.byte	0xc6
 4569 0360 6B000000 		.4byte	0x6b
 4570 0364 00000000 		.4byte	.LFB39
 4571 0368 0C010000 		.4byte	.LFE39-.LFB39
 4572 036c 01       		.uleb128 0x1
 4573 036d 9C       		.byte	0x9c
 4574 036e B9030000 		.4byte	0x3b9
 4575 0372 0B       		.uleb128 0xb
 4576 0373 FF030000 		.4byte	.LASF63
 4577 0377 01       		.byte	0x1
 4578 0378 C6       		.byte	0xc6
 4579 0379 1D030000 		.4byte	0x31d
 4580 037d 02       		.uleb128 0x2
 4581 037e 91       		.byte	0x91
 4582 037f 6C       		.sleb128 -20
 4583 0380 0B       		.uleb128 0xb
 4584 0381 FF020000 		.4byte	.LASF64
 4585 0385 01       		.byte	0x1
 4586 0386 C6       		.byte	0xc6
 4587 0387 6B000000 		.4byte	0x6b
 4588 038b 02       		.uleb128 0x2
 4589 038c 91       		.byte	0x91
 4590 038d 6B       		.sleb128 -21
 4591 038e 0B       		.uleb128 0xb
 4592 038f 89010000 		.4byte	.LASF65
 4593 0393 01       		.byte	0x1
 4594 0394 C6       		.byte	0xc6
 4595 0395 6B000000 		.4byte	0x6b
 4596 0399 02       		.uleb128 0x2
 4597 039a 91       		.byte	0x91
 4598 039b 6A       		.sleb128 -22
 4599 039c 0B       		.uleb128 0xb
 4600 039d 22040000 		.4byte	.LASF66
 4601 03a1 01       		.byte	0x1
 4602 03a2 C6       		.byte	0xc6
 4603 03a3 5D000000 		.4byte	0x5d
 4604 03a7 02       		.uleb128 0x2
 4605 03a8 91       		.byte	0x91
 4606 03a9 64       		.sleb128 -28
 4607 03aa 09       		.uleb128 0x9
 4608 03ab C4010000 		.4byte	.LASF67
 4609 03af 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 106


 4610 03b0 C8       		.byte	0xc8
 4611 03b1 6B000000 		.4byte	0x6b
 4612 03b5 02       		.uleb128 0x2
 4613 03b6 91       		.byte	0x91
 4614 03b7 77       		.sleb128 -9
 4615 03b8 00       		.byte	0
 4616 03b9 0A       		.uleb128 0xa
 4617 03ba 9F010000 		.4byte	.LASF68
 4618 03be 01       		.byte	0x1
 4619 03bf EC       		.byte	0xec
 4620 03c0 6B000000 		.4byte	0x6b
 4621 03c4 00000000 		.4byte	.LFB40
 4622 03c8 0C020000 		.4byte	.LFE40-.LFB40
 4623 03cc 01       		.uleb128 0x1
 4624 03cd 9C       		.byte	0x9c
 4625 03ce 0B040000 		.4byte	0x40b
 4626 03d2 0B       		.uleb128 0xb
 4627 03d3 BF020000 		.4byte	.LASF69
 4628 03d7 01       		.byte	0x1
 4629 03d8 EC       		.byte	0xec
 4630 03d9 6B000000 		.4byte	0x6b
 4631 03dd 02       		.uleb128 0x2
 4632 03de 91       		.byte	0x91
 4633 03df 6F       		.sleb128 -17
 4634 03e0 0B       		.uleb128 0xb
 4635 03e1 FF030000 		.4byte	.LASF63
 4636 03e5 01       		.byte	0x1
 4637 03e6 EC       		.byte	0xec
 4638 03e7 1D030000 		.4byte	0x31d
 4639 03eb 02       		.uleb128 0x2
 4640 03ec 91       		.byte	0x91
 4641 03ed 68       		.sleb128 -24
 4642 03ee 0B       		.uleb128 0xb
 4643 03ef 3D040000 		.4byte	.LASF70
 4644 03f3 01       		.byte	0x1
 4645 03f4 EC       		.byte	0xec
 4646 03f5 6B000000 		.4byte	0x6b
 4647 03f9 02       		.uleb128 0x2
 4648 03fa 91       		.byte	0x91
 4649 03fb 6E       		.sleb128 -18
 4650 03fc 0B       		.uleb128 0xb
 4651 03fd 7C060000 		.4byte	.LASF71
 4652 0401 01       		.byte	0x1
 4653 0402 EC       		.byte	0xec
 4654 0403 76000000 		.4byte	0x76
 4655 0407 02       		.uleb128 0x2
 4656 0408 91       		.byte	0x91
 4657 0409 6C       		.sleb128 -20
 4658 040a 00       		.byte	0
 4659 040b 0F       		.uleb128 0xf
 4660 040c BF030000 		.4byte	.LASF72
 4661 0410 01       		.byte	0x1
 4662 0411 1A01     		.2byte	0x11a
 4663 0413 76000000 		.4byte	0x76
 4664 0417 00000000 		.4byte	.LFB41
 4665 041b 84000000 		.4byte	.LFE41-.LFB41
 4666 041f 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 107


 4667 0420 9C       		.byte	0x9c
 4668 0421 8F040000 		.4byte	0x48f
 4669 0425 10       		.uleb128 0x10
 4670 0426 7F050000 		.4byte	.LASF73
 4671 042a 01       		.byte	0x1
 4672 042b 1A01     		.2byte	0x11a
 4673 042d 8F040000 		.4byte	0x48f
 4674 0431 02       		.uleb128 0x2
 4675 0432 91       		.byte	0x91
 4676 0433 6C       		.sleb128 -20
 4677 0434 10       		.uleb128 0x10
 4678 0435 24020000 		.4byte	.LASF74
 4679 0439 01       		.byte	0x1
 4680 043a 1A01     		.2byte	0x11a
 4681 043c 6B000000 		.4byte	0x6b
 4682 0440 02       		.uleb128 0x2
 4683 0441 91       		.byte	0x91
 4684 0442 6B       		.sleb128 -21
 4685 0443 10       		.uleb128 0x10
 4686 0444 2A020000 		.4byte	.LASF75
 4687 0448 01       		.byte	0x1
 4688 0449 1A01     		.2byte	0x11a
 4689 044b 6B000000 		.4byte	0x6b
 4690 044f 02       		.uleb128 0x2
 4691 0450 91       		.byte	0x91
 4692 0451 6A       		.sleb128 -22
 4693 0452 11       		.uleb128 0x11
 4694 0453 7C060000 		.4byte	.LASF71
 4695 0457 01       		.byte	0x1
 4696 0458 1C01     		.2byte	0x11c
 4697 045a 76000000 		.4byte	0x76
 4698 045e 02       		.uleb128 0x2
 4699 045f 91       		.byte	0x91
 4700 0460 70       		.sleb128 -16
 4701 0461 11       		.uleb128 0x11
 4702 0462 45020000 		.4byte	.LASF76
 4703 0466 01       		.byte	0x1
 4704 0467 1D01     		.2byte	0x11d
 4705 0469 97000000 		.4byte	0x97
 4706 046d 02       		.uleb128 0x2
 4707 046e 91       		.byte	0x91
 4708 046f 76       		.sleb128 -10
 4709 0470 11       		.uleb128 0x11
 4710 0471 4B020000 		.4byte	.LASF77
 4711 0475 01       		.byte	0x1
 4712 0476 1E01     		.2byte	0x11e
 4713 0478 97000000 		.4byte	0x97
 4714 047c 02       		.uleb128 0x2
 4715 047d 91       		.byte	0x91
 4716 047e 74       		.sleb128 -12
 4717 047f 11       		.uleb128 0x11
 4718 0480 51020000 		.4byte	.LASF78
 4719 0484 01       		.byte	0x1
 4720 0485 1F01     		.2byte	0x11f
 4721 0487 97000000 		.4byte	0x97
 4722 048b 02       		.uleb128 0x2
 4723 048c 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 108


 4724 048d 72       		.sleb128 -14
 4725 048e 00       		.byte	0
 4726 048f 0D       		.uleb128 0xd
 4727 0490 04       		.byte	0x4
 4728 0491 8C000000 		.4byte	0x8c
 4729 0495 12       		.uleb128 0x12
 4730 0496 31040000 		.4byte	.LASF79
 4731 049a 01       		.byte	0x1
 4732 049b 2801     		.2byte	0x128
 4733 049d 76000000 		.4byte	0x76
 4734 04a1 00000000 		.4byte	.LFB42
 4735 04a5 28000000 		.4byte	.LFE42-.LFB42
 4736 04a9 01       		.uleb128 0x1
 4737 04aa 9C       		.byte	0x9c
 4738 04ab CE040000 		.4byte	0x4ce
 4739 04af 10       		.uleb128 0x10
 4740 04b0 29040000 		.4byte	.LASF52
 4741 04b4 01       		.byte	0x1
 4742 04b5 2801     		.2byte	0x128
 4743 04b7 81000000 		.4byte	0x81
 4744 04bb 02       		.uleb128 0x2
 4745 04bc 91       		.byte	0x91
 4746 04bd 6C       		.sleb128 -20
 4747 04be 11       		.uleb128 0x11
 4748 04bf E7020000 		.4byte	.LASF80
 4749 04c3 01       		.byte	0x1
 4750 04c4 2B01     		.2byte	0x12b
 4751 04c6 76000000 		.4byte	0x76
 4752 04ca 02       		.uleb128 0x2
 4753 04cb 91       		.byte	0x91
 4754 04cc 76       		.sleb128 -10
 4755 04cd 00       		.byte	0
 4756 04ce 13       		.uleb128 0x13
 4757 04cf 0F050000 		.4byte	.LASF81
 4758 04d3 01       		.byte	0x1
 4759 04d4 3001     		.2byte	0x130
 4760 04d6 00000000 		.4byte	.LFB43
 4761 04da 08000000 		.4byte	.LFE43-.LFB43
 4762 04de 01       		.uleb128 0x1
 4763 04df 9C       		.byte	0x9c
 4764 04e0 14       		.uleb128 0x14
 4765 04e1 98050000 		.4byte	.LASF82
 4766 04e5 01       		.byte	0x1
 4767 04e6 3901     		.2byte	0x139
 4768 04e8 00000000 		.4byte	.LFB44
 4769 04ec 18000000 		.4byte	.LFE44-.LFB44
 4770 04f0 01       		.uleb128 0x1
 4771 04f1 9C       		.byte	0x9c
 4772 04f2 15       		.uleb128 0x15
 4773 04f3 F3010000 		.4byte	.LASF84
 4774 04f7 01       		.byte	0x1
 4775 04f8 4301     		.2byte	0x143
 4776 04fa 00000000 		.4byte	.LFB45
 4777 04fe 98000000 		.4byte	.LFE45-.LFB45
 4778 0502 01       		.uleb128 0x1
 4779 0503 9C       		.byte	0x9c
 4780 0504 36050000 		.4byte	0x536
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 109


 4781 0508 10       		.uleb128 0x10
 4782 0509 02070000 		.4byte	.LASF85
 4783 050d 01       		.byte	0x1
 4784 050e 4301     		.2byte	0x143
 4785 0510 6B000000 		.4byte	0x6b
 4786 0514 02       		.uleb128 0x2
 4787 0515 91       		.byte	0x91
 4788 0516 67       		.sleb128 -25
 4789 0517 10       		.uleb128 0x10
 4790 0518 3A070000 		.4byte	.LASF86
 4791 051c 01       		.byte	0x1
 4792 051d 4301     		.2byte	0x143
 4793 051f 76000000 		.4byte	0x76
 4794 0523 02       		.uleb128 0x2
 4795 0524 91       		.byte	0x91
 4796 0525 64       		.sleb128 -28
 4797 0526 11       		.uleb128 0x11
 4798 0527 FF030000 		.4byte	.LASF63
 4799 052b 01       		.byte	0x1
 4800 052c 4501     		.2byte	0x145
 4801 052e 36050000 		.4byte	0x536
 4802 0532 02       		.uleb128 0x2
 4803 0533 91       		.byte	0x91
 4804 0534 6C       		.sleb128 -20
 4805 0535 00       		.byte	0
 4806 0536 16       		.uleb128 0x16
 4807 0537 6B000000 		.4byte	0x6b
 4808 053b 46050000 		.4byte	0x546
 4809 053f 17       		.uleb128 0x17
 4810 0540 BC000000 		.4byte	0xbc
 4811 0544 08       		.byte	0x8
 4812 0545 00       		.byte	0
 4813 0546 15       		.uleb128 0x15
 4814 0547 1F070000 		.4byte	.LASF87
 4815 054b 01       		.byte	0x1
 4816 054c 5401     		.2byte	0x154
 4817 054e 00000000 		.4byte	.LFB46
 4818 0552 98000000 		.4byte	.LFE46-.LFB46
 4819 0556 01       		.uleb128 0x1
 4820 0557 9C       		.byte	0x9c
 4821 0558 8A050000 		.4byte	0x58a
 4822 055c 10       		.uleb128 0x10
 4823 055d 02070000 		.4byte	.LASF85
 4824 0561 01       		.byte	0x1
 4825 0562 5401     		.2byte	0x154
 4826 0564 6B000000 		.4byte	0x6b
 4827 0568 02       		.uleb128 0x2
 4828 0569 91       		.byte	0x91
 4829 056a 67       		.sleb128 -25
 4830 056b 10       		.uleb128 0x10
 4831 056c DB020000 		.4byte	.LASF88
 4832 0570 01       		.byte	0x1
 4833 0571 5401     		.2byte	0x154
 4834 0573 76000000 		.4byte	0x76
 4835 0577 02       		.uleb128 0x2
 4836 0578 91       		.byte	0x91
 4837 0579 64       		.sleb128 -28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 110


 4838 057a 11       		.uleb128 0x11
 4839 057b FF030000 		.4byte	.LASF63
 4840 057f 01       		.byte	0x1
 4841 0580 5601     		.2byte	0x156
 4842 0582 36050000 		.4byte	0x536
 4843 0586 02       		.uleb128 0x2
 4844 0587 91       		.byte	0x91
 4845 0588 6C       		.sleb128 -20
 4846 0589 00       		.byte	0
 4847 058a 15       		.uleb128 0x15
 4848 058b F2040000 		.4byte	.LASF89
 4849 058f 01       		.byte	0x1
 4850 0590 6601     		.2byte	0x166
 4851 0592 00000000 		.4byte	.LFB47
 4852 0596 98000000 		.4byte	.LFE47-.LFB47
 4853 059a 01       		.uleb128 0x1
 4854 059b 9C       		.byte	0x9c
 4855 059c CE050000 		.4byte	0x5ce
 4856 05a0 10       		.uleb128 0x10
 4857 05a1 02070000 		.4byte	.LASF85
 4858 05a5 01       		.byte	0x1
 4859 05a6 6601     		.2byte	0x166
 4860 05a8 6B000000 		.4byte	0x6b
 4861 05ac 02       		.uleb128 0x2
 4862 05ad 91       		.byte	0x91
 4863 05ae 67       		.sleb128 -25
 4864 05af 10       		.uleb128 0x10
 4865 05b0 69010000 		.4byte	.LASF90
 4866 05b4 01       		.byte	0x1
 4867 05b5 6601     		.2byte	0x166
 4868 05b7 76000000 		.4byte	0x76
 4869 05bb 02       		.uleb128 0x2
 4870 05bc 91       		.byte	0x91
 4871 05bd 64       		.sleb128 -28
 4872 05be 11       		.uleb128 0x11
 4873 05bf FF030000 		.4byte	.LASF63
 4874 05c3 01       		.byte	0x1
 4875 05c4 6801     		.2byte	0x168
 4876 05c6 36050000 		.4byte	0x536
 4877 05ca 02       		.uleb128 0x2
 4878 05cb 91       		.byte	0x91
 4879 05cc 6C       		.sleb128 -20
 4880 05cd 00       		.byte	0
 4881 05ce 12       		.uleb128 0x12
 4882 05cf CC030000 		.4byte	.LASF91
 4883 05d3 01       		.byte	0x1
 4884 05d4 7A01     		.2byte	0x17a
 4885 05d6 6B000000 		.4byte	0x6b
 4886 05da 00000000 		.4byte	.LFB48
 4887 05de 6C010000 		.4byte	.LFE48-.LFB48
 4888 05e2 01       		.uleb128 0x1
 4889 05e3 9C       		.byte	0x9c
 4890 05e4 32060000 		.4byte	0x632
 4891 05e8 10       		.uleb128 0x10
 4892 05e9 48040000 		.4byte	.LASF92
 4893 05ed 01       		.byte	0x1
 4894 05ee 7A01     		.2byte	0x17a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 111


 4895 05f0 6B000000 		.4byte	0x6b
 4896 05f4 02       		.uleb128 0x2
 4897 05f5 91       		.byte	0x91
 4898 05f6 67       		.sleb128 -25
 4899 05f7 10       		.uleb128 0x10
 4900 05f8 6E000000 		.4byte	.LASF93
 4901 05fc 01       		.byte	0x1
 4902 05fd 7A01     		.2byte	0x17a
 4903 05ff 1D030000 		.4byte	0x31d
 4904 0603 02       		.uleb128 0x2
 4905 0604 91       		.byte	0x91
 4906 0605 60       		.sleb128 -32
 4907 0606 18       		.uleb128 0x18
 4908 0607 6900     		.ascii	"i\000"
 4909 0609 01       		.byte	0x1
 4910 060a 8A01     		.2byte	0x18a
 4911 060c 6B000000 		.4byte	0x6b
 4912 0610 02       		.uleb128 0x2
 4913 0611 91       		.byte	0x91
 4914 0612 6F       		.sleb128 -17
 4915 0613 18       		.uleb128 0x18
 4916 0614 61766700 		.ascii	"avg\000"
 4917 0618 01       		.byte	0x1
 4918 0619 8B01     		.2byte	0x18b
 4919 061b 76000000 		.4byte	0x76
 4920 061f 02       		.uleb128 0x2
 4921 0620 91       		.byte	0x91
 4922 0621 6A       		.sleb128 -22
 4923 0622 11       		.uleb128 0x11
 4924 0623 7C060000 		.4byte	.LASF71
 4925 0627 01       		.byte	0x1
 4926 0628 8C01     		.2byte	0x18c
 4927 062a 76000000 		.4byte	0x76
 4928 062e 02       		.uleb128 0x2
 4929 062f 91       		.byte	0x91
 4930 0630 6C       		.sleb128 -20
 4931 0631 00       		.byte	0
 4932 0632 12       		.uleb128 0x12
 4933 0633 A8050000 		.4byte	.LASF94
 4934 0637 01       		.byte	0x1
 4935 0638 E201     		.2byte	0x1e2
 4936 063a 6B000000 		.4byte	0x6b
 4937 063e 00000000 		.4byte	.LFB49
 4938 0642 6C010000 		.4byte	.LFE49-.LFB49
 4939 0646 01       		.uleb128 0x1
 4940 0647 9C       		.byte	0x9c
 4941 0648 96060000 		.4byte	0x696
 4942 064c 10       		.uleb128 0x10
 4943 064d 49000000 		.4byte	.LASF95
 4944 0651 01       		.byte	0x1
 4945 0652 E201     		.2byte	0x1e2
 4946 0654 6B000000 		.4byte	0x6b
 4947 0658 02       		.uleb128 0x2
 4948 0659 91       		.byte	0x91
 4949 065a 67       		.sleb128 -25
 4950 065b 10       		.uleb128 0x10
 4951 065c E1060000 		.4byte	.LASF96
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 112


 4952 0660 01       		.byte	0x1
 4953 0661 E201     		.2byte	0x1e2
 4954 0663 1D030000 		.4byte	0x31d
 4955 0667 02       		.uleb128 0x2
 4956 0668 91       		.byte	0x91
 4957 0669 60       		.sleb128 -32
 4958 066a 18       		.uleb128 0x18
 4959 066b 6900     		.ascii	"i\000"
 4960 066d 01       		.byte	0x1
 4961 066e F201     		.2byte	0x1f2
 4962 0670 6B000000 		.4byte	0x6b
 4963 0674 02       		.uleb128 0x2
 4964 0675 91       		.byte	0x91
 4965 0676 6F       		.sleb128 -17
 4966 0677 18       		.uleb128 0x18
 4967 0678 61766700 		.ascii	"avg\000"
 4968 067c 01       		.byte	0x1
 4969 067d F301     		.2byte	0x1f3
 4970 067f 76000000 		.4byte	0x76
 4971 0683 02       		.uleb128 0x2
 4972 0684 91       		.byte	0x91
 4973 0685 6A       		.sleb128 -22
 4974 0686 11       		.uleb128 0x11
 4975 0687 7C060000 		.4byte	.LASF71
 4976 068b 01       		.byte	0x1
 4977 068c F401     		.2byte	0x1f4
 4978 068e 76000000 		.4byte	0x76
 4979 0692 02       		.uleb128 0x2
 4980 0693 91       		.byte	0x91
 4981 0694 6C       		.sleb128 -20
 4982 0695 00       		.byte	0
 4983 0696 12       		.uleb128 0x12
 4984 0697 62020000 		.4byte	.LASF97
 4985 069b 01       		.byte	0x1
 4986 069c 4C02     		.2byte	0x24c
 4987 069e 6B000000 		.4byte	0x6b
 4988 06a2 00000000 		.4byte	.LFB50
 4989 06a6 08030000 		.4byte	.LFE50-.LFB50
 4990 06aa 01       		.uleb128 0x1
 4991 06ab 9C       		.byte	0x9c
 4992 06ac 09070000 		.4byte	0x709
 4993 06b0 10       		.uleb128 0x10
 4994 06b1 6F010000 		.4byte	.LASF98
 4995 06b5 01       		.byte	0x1
 4996 06b6 4C02     		.2byte	0x24c
 4997 06b8 6B000000 		.4byte	0x6b
 4998 06bc 02       		.uleb128 0x2
 4999 06bd 91       		.byte	0x91
 5000 06be 67       		.sleb128 -25
 5001 06bf 10       		.uleb128 0x10
 5002 06c0 BD050000 		.4byte	.LASF99
 5003 06c4 01       		.byte	0x1
 5004 06c5 4C02     		.2byte	0x24c
 5005 06c7 1D030000 		.4byte	0x31d
 5006 06cb 02       		.uleb128 0x2
 5007 06cc 91       		.byte	0x91
 5008 06cd 60       		.sleb128 -32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 113


 5009 06ce 18       		.uleb128 0x18
 5010 06cf 6900     		.ascii	"i\000"
 5011 06d1 01       		.byte	0x1
 5012 06d2 5202     		.2byte	0x252
 5013 06d4 6B000000 		.4byte	0x6b
 5014 06d8 02       		.uleb128 0x2
 5015 06d9 91       		.byte	0x91
 5016 06da 6F       		.sleb128 -17
 5017 06db 18       		.uleb128 0x18
 5018 06dc 61766700 		.ascii	"avg\000"
 5019 06e0 01       		.byte	0x1
 5020 06e1 5302     		.2byte	0x253
 5021 06e3 76000000 		.4byte	0x76
 5022 06e7 02       		.uleb128 0x2
 5023 06e8 91       		.byte	0x91
 5024 06e9 68       		.sleb128 -24
 5025 06ea 11       		.uleb128 0x11
 5026 06eb 7C060000 		.4byte	.LASF71
 5027 06ef 01       		.byte	0x1
 5028 06f0 5402     		.2byte	0x254
 5029 06f2 76000000 		.4byte	0x76
 5030 06f6 02       		.uleb128 0x2
 5031 06f7 91       		.byte	0x91
 5032 06f8 6A       		.sleb128 -22
 5033 06f9 11       		.uleb128 0x11
 5034 06fa E7020000 		.4byte	.LASF80
 5035 06fe 01       		.byte	0x1
 5036 06ff 5702     		.2byte	0x257
 5037 0701 76000000 		.4byte	0x76
 5038 0705 02       		.uleb128 0x2
 5039 0706 91       		.byte	0x91
 5040 0707 6C       		.sleb128 -20
 5041 0708 00       		.byte	0
 5042 0709 12       		.uleb128 0x12
 5043 070a 0F020000 		.4byte	.LASF100
 5044 070e 01       		.byte	0x1
 5045 070f E002     		.2byte	0x2e0
 5046 0711 6B000000 		.4byte	0x6b
 5047 0715 00000000 		.4byte	.LFB51
 5048 0719 08030000 		.4byte	.LFE51-.LFB51
 5049 071d 01       		.uleb128 0x1
 5050 071e 9C       		.byte	0x9c
 5051 071f 7C070000 		.4byte	0x77c
 5052 0723 10       		.uleb128 0x10
 5053 0724 05040000 		.4byte	.LASF101
 5054 0728 01       		.byte	0x1
 5055 0729 E002     		.2byte	0x2e0
 5056 072b 6B000000 		.4byte	0x6b
 5057 072f 02       		.uleb128 0x2
 5058 0730 91       		.byte	0x91
 5059 0731 67       		.sleb128 -25
 5060 0732 10       		.uleb128 0x10
 5061 0733 D0000000 		.4byte	.LASF102
 5062 0737 01       		.byte	0x1
 5063 0738 E002     		.2byte	0x2e0
 5064 073a 1D030000 		.4byte	0x31d
 5065 073e 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 114


 5066 073f 91       		.byte	0x91
 5067 0740 60       		.sleb128 -32
 5068 0741 18       		.uleb128 0x18
 5069 0742 6900     		.ascii	"i\000"
 5070 0744 01       		.byte	0x1
 5071 0745 E602     		.2byte	0x2e6
 5072 0747 6B000000 		.4byte	0x6b
 5073 074b 02       		.uleb128 0x2
 5074 074c 91       		.byte	0x91
 5075 074d 6F       		.sleb128 -17
 5076 074e 18       		.uleb128 0x18
 5077 074f 61766700 		.ascii	"avg\000"
 5078 0753 01       		.byte	0x1
 5079 0754 E702     		.2byte	0x2e7
 5080 0756 76000000 		.4byte	0x76
 5081 075a 02       		.uleb128 0x2
 5082 075b 91       		.byte	0x91
 5083 075c 68       		.sleb128 -24
 5084 075d 11       		.uleb128 0x11
 5085 075e 7C060000 		.4byte	.LASF71
 5086 0762 01       		.byte	0x1
 5087 0763 E802     		.2byte	0x2e8
 5088 0765 76000000 		.4byte	0x76
 5089 0769 02       		.uleb128 0x2
 5090 076a 91       		.byte	0x91
 5091 076b 6A       		.sleb128 -22
 5092 076c 11       		.uleb128 0x11
 5093 076d E7020000 		.4byte	.LASF80
 5094 0771 01       		.byte	0x1
 5095 0772 E902     		.2byte	0x2e9
 5096 0774 76000000 		.4byte	0x76
 5097 0778 02       		.uleb128 0x2
 5098 0779 91       		.byte	0x91
 5099 077a 6C       		.sleb128 -20
 5100 077b 00       		.byte	0
 5101 077c 12       		.uleb128 0x12
 5102 077d 00000000 		.4byte	.LASF103
 5103 0781 01       		.byte	0x1
 5104 0782 7403     		.2byte	0x374
 5105 0784 6B000000 		.4byte	0x6b
 5106 0788 00000000 		.4byte	.LFB52
 5107 078c 5C010000 		.4byte	.LFE52-.LFB52
 5108 0790 01       		.uleb128 0x1
 5109 0791 9C       		.byte	0x9c
 5110 0792 E0070000 		.4byte	0x7e0
 5111 0796 10       		.uleb128 0x10
 5112 0797 15040000 		.4byte	.LASF104
 5113 079b 01       		.byte	0x1
 5114 079c 7403     		.2byte	0x374
 5115 079e 6B000000 		.4byte	0x6b
 5116 07a2 02       		.uleb128 0x2
 5117 07a3 91       		.byte	0x91
 5118 07a4 67       		.sleb128 -25
 5119 07a5 10       		.uleb128 0x10
 5120 07a6 45050000 		.4byte	.LASF105
 5121 07aa 01       		.byte	0x1
 5122 07ab 7403     		.2byte	0x374
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 115


 5123 07ad 1D030000 		.4byte	0x31d
 5124 07b1 02       		.uleb128 0x2
 5125 07b2 91       		.byte	0x91
 5126 07b3 60       		.sleb128 -32
 5127 07b4 18       		.uleb128 0x18
 5128 07b5 6900     		.ascii	"i\000"
 5129 07b7 01       		.byte	0x1
 5130 07b8 7903     		.2byte	0x379
 5131 07ba 6B000000 		.4byte	0x6b
 5132 07be 02       		.uleb128 0x2
 5133 07bf 91       		.byte	0x91
 5134 07c0 6F       		.sleb128 -17
 5135 07c1 18       		.uleb128 0x18
 5136 07c2 61766700 		.ascii	"avg\000"
 5137 07c6 01       		.byte	0x1
 5138 07c7 7A03     		.2byte	0x37a
 5139 07c9 76000000 		.4byte	0x76
 5140 07cd 02       		.uleb128 0x2
 5141 07ce 91       		.byte	0x91
 5142 07cf 6A       		.sleb128 -22
 5143 07d0 11       		.uleb128 0x11
 5144 07d1 7C060000 		.4byte	.LASF71
 5145 07d5 01       		.byte	0x1
 5146 07d6 7B03     		.2byte	0x37b
 5147 07d8 76000000 		.4byte	0x76
 5148 07dc 02       		.uleb128 0x2
 5149 07dd 91       		.byte	0x91
 5150 07de 6C       		.sleb128 -20
 5151 07df 00       		.byte	0
 5152 07e0 19       		.uleb128 0x19
 5153 07e1 77000000 		.4byte	.LASF106
 5154 07e5 01       		.byte	0x1
 5155 07e6 D803     		.2byte	0x3d8
 5156 07e8 00000000 		.4byte	.LFB53
 5157 07ec DC000000 		.4byte	.LFE53-.LFB53
 5158 07f0 01       		.uleb128 0x1
 5159 07f1 9C       		.byte	0x9c
 5160 07f2 06080000 		.4byte	0x806
 5161 07f6 11       		.uleb128 0x11
 5162 07f7 7C060000 		.4byte	.LASF71
 5163 07fb 01       		.byte	0x1
 5164 07fc DA03     		.2byte	0x3da
 5165 07fe 76000000 		.4byte	0x76
 5166 0802 02       		.uleb128 0x2
 5167 0803 91       		.byte	0x91
 5168 0804 6E       		.sleb128 -18
 5169 0805 00       		.byte	0
 5170 0806 19       		.uleb128 0x19
 5171 0807 57020000 		.4byte	.LASF107
 5172 080b 01       		.byte	0x1
 5173 080c 1A04     		.2byte	0x41a
 5174 080e 00000000 		.4byte	.LFB54
 5175 0812 48010000 		.4byte	.LFE54-.LFB54
 5176 0816 01       		.uleb128 0x1
 5177 0817 9C       		.byte	0x9c
 5178 0818 34080000 		.4byte	0x834
 5179 081c 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 116


 5180 081d 1E000000 		.4byte	.LBB2
 5181 0821 2C000000 		.4byte	.LBE2-.LBB2
 5182 0825 18       		.uleb128 0x18
 5183 0826 6A00     		.ascii	"j\000"
 5184 0828 01       		.byte	0x1
 5185 0829 2104     		.2byte	0x421
 5186 082b 6B000000 		.4byte	0x6b
 5187 082f 02       		.uleb128 0x2
 5188 0830 91       		.byte	0x91
 5189 0831 77       		.sleb128 -9
 5190 0832 00       		.byte	0
 5191 0833 00       		.byte	0
 5192 0834 1B       		.uleb128 0x1b
 5193 0835 C9060000 		.4byte	.LASF108
 5194 0839 01       		.byte	0x1
 5195 083a 6104     		.2byte	0x461
 5196 083c 5D000000 		.4byte	0x5d
 5197 0840 00000000 		.4byte	.LFB55
 5198 0844 9C010000 		.4byte	.LFE55-.LFB55
 5199 0848 01       		.uleb128 0x1
 5200 0849 9C       		.byte	0x9c
 5201 084a 1F090000 		.4byte	0x91f
 5202 084e 11       		.uleb128 0x11
 5203 084f 2B000000 		.4byte	.LASF109
 5204 0853 01       		.byte	0x1
 5205 0854 6C04     		.2byte	0x46c
 5206 0856 6B000000 		.4byte	0x6b
 5207 085a 02       		.uleb128 0x2
 5208 085b 91       		.byte	0x91
 5209 085c 6F       		.sleb128 -17
 5210 085d 11       		.uleb128 0x11
 5211 085e CE060000 		.4byte	.LASF110
 5212 0862 01       		.byte	0x1
 5213 0863 6D04     		.2byte	0x46d
 5214 0865 1F090000 		.4byte	0x91f
 5215 0869 03       		.uleb128 0x3
 5216 086a 91       		.byte	0x91
 5217 086b B87F     		.sleb128 -72
 5218 086d 11       		.uleb128 0x11
 5219 086e AB030000 		.4byte	.LASF111
 5220 0872 01       		.byte	0x1
 5221 0873 6E04     		.2byte	0x46e
 5222 0875 6B000000 		.4byte	0x6b
 5223 0879 02       		.uleb128 0x2
 5224 087a 91       		.byte	0x91
 5225 087b 6E       		.sleb128 -18
 5226 087c 11       		.uleb128 0x11
 5227 087d 2E070000 		.4byte	.LASF112
 5228 0881 01       		.byte	0x1
 5229 0882 6F04     		.2byte	0x46f
 5230 0884 1F090000 		.4byte	0x91f
 5231 0888 03       		.uleb128 0x3
 5232 0889 91       		.byte	0x91
 5233 088a 907F     		.sleb128 -112
 5234 088c 11       		.uleb128 0x11
 5235 088d 72020000 		.4byte	.LASF113
 5236 0891 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 117


 5237 0892 7004     		.2byte	0x470
 5238 0894 6B000000 		.4byte	0x6b
 5239 0898 02       		.uleb128 0x2
 5240 0899 91       		.byte	0x91
 5241 089a 6D       		.sleb128 -19
 5242 089b 11       		.uleb128 0x11
 5243 089c 3E030000 		.4byte	.LASF114
 5244 08a0 01       		.byte	0x1
 5245 08a1 7104     		.2byte	0x471
 5246 08a3 1F090000 		.4byte	0x91f
 5247 08a7 03       		.uleb128 0x3
 5248 08a8 91       		.byte	0x91
 5249 08a9 E87E     		.sleb128 -152
 5250 08ab 11       		.uleb128 0x11
 5251 08ac 40000000 		.4byte	.LASF115
 5252 08b0 01       		.byte	0x1
 5253 08b1 7204     		.2byte	0x472
 5254 08b3 6B000000 		.4byte	0x6b
 5255 08b7 02       		.uleb128 0x2
 5256 08b8 91       		.byte	0x91
 5257 08b9 6C       		.sleb128 -20
 5258 08ba 11       		.uleb128 0x11
 5259 08bb 6E000000 		.4byte	.LASF93
 5260 08bf 01       		.byte	0x1
 5261 08c0 7304     		.2byte	0x473
 5262 08c2 1F090000 		.4byte	0x91f
 5263 08c6 03       		.uleb128 0x3
 5264 08c7 91       		.byte	0x91
 5265 08c8 C07E     		.sleb128 -192
 5266 08ca 11       		.uleb128 0x11
 5267 08cb 35030000 		.4byte	.LASF116
 5268 08cf 01       		.byte	0x1
 5269 08d0 7404     		.2byte	0x474
 5270 08d2 6B000000 		.4byte	0x6b
 5271 08d6 02       		.uleb128 0x2
 5272 08d7 91       		.byte	0x91
 5273 08d8 6B       		.sleb128 -21
 5274 08d9 11       		.uleb128 0x11
 5275 08da E1060000 		.4byte	.LASF96
 5276 08de 01       		.byte	0x1
 5277 08df 7504     		.2byte	0x475
 5278 08e1 1F090000 		.4byte	0x91f
 5279 08e5 03       		.uleb128 0x3
 5280 08e6 91       		.byte	0x91
 5281 08e7 987E     		.sleb128 -232
 5282 08e9 11       		.uleb128 0x11
 5283 08ea 9B020000 		.4byte	.LASF117
 5284 08ee 01       		.byte	0x1
 5285 08ef 7F04     		.2byte	0x47f
 5286 08f1 6B000000 		.4byte	0x6b
 5287 08f5 02       		.uleb128 0x2
 5288 08f6 91       		.byte	0x91
 5289 08f7 6A       		.sleb128 -22
 5290 08f8 11       		.uleb128 0x11
 5291 08f9 8F060000 		.4byte	.LASF118
 5292 08fd 01       		.byte	0x1
 5293 08fe 8004     		.2byte	0x480
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 118


 5294 0900 97000000 		.4byte	0x97
 5295 0904 02       		.uleb128 0x2
 5296 0905 91       		.byte	0x91
 5297 0906 62       		.sleb128 -30
 5298 0907 1A       		.uleb128 0x1a
 5299 0908 8C000000 		.4byte	.LBB3
 5300 090c 50000000 		.4byte	.LBE3-.LBB3
 5301 0910 18       		.uleb128 0x18
 5302 0911 6900     		.ascii	"i\000"
 5303 0913 01       		.byte	0x1
 5304 0914 AC04     		.2byte	0x4ac
 5305 0916 5D000000 		.4byte	0x5d
 5306 091a 02       		.uleb128 0x2
 5307 091b 91       		.byte	0x91
 5308 091c 64       		.sleb128 -28
 5309 091d 00       		.byte	0
 5310 091e 00       		.byte	0
 5311 091f 16       		.uleb128 0x16
 5312 0920 76000000 		.4byte	0x76
 5313 0924 2F090000 		.4byte	0x92f
 5314 0928 17       		.uleb128 0x17
 5315 0929 BC000000 		.4byte	0xbc
 5316 092d 13       		.byte	0x13
 5317 092e 00       		.byte	0
 5318 092f 1C       		.uleb128 0x1c
 5319 0930 D7050000 		.4byte	.LASF119
 5320 0934 03       		.byte	0x3
 5321 0935 19       		.byte	0x19
 5322 0936 81000000 		.4byte	0x81
 5323 093a 05       		.uleb128 0x5
 5324 093b 03       		.byte	0x3
 5325 093c 00000000 		.4byte	ELBOW_UPPER_BOUND
 5326 0940 1C       		.uleb128 0x1c
 5327 0941 CA010000 		.4byte	.LASF120
 5328 0945 03       		.byte	0x3
 5329 0946 1B       		.byte	0x1b
 5330 0947 81000000 		.4byte	0x81
 5331 094b 05       		.uleb128 0x5
 5332 094c 03       		.byte	0x3
 5333 094d 00000000 		.4byte	ELBOW_LOWER_BOUND
 5334 0951 1C       		.uleb128 0x1c
 5335 0952 6A030000 		.4byte	.LASF121
 5336 0956 03       		.byte	0x3
 5337 0957 1D       		.byte	0x1d
 5338 0958 81000000 		.4byte	0x81
 5339 095c 05       		.uleb128 0x5
 5340 095d 03       		.byte	0x3
 5341 095e 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5342 0962 1C       		.uleb128 0x1c
 5343 0963 5E050000 		.4byte	.LASF122
 5344 0967 03       		.byte	0x3
 5345 0968 1F       		.byte	0x1f
 5346 0969 81000000 		.4byte	0x81
 5347 096d 05       		.uleb128 0x5
 5348 096e 03       		.byte	0x3
 5349 096f 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5350 0973 16       		.uleb128 0x16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 119


 5351 0974 8C000000 		.4byte	0x8c
 5352 0978 83090000 		.4byte	0x983
 5353 097c 17       		.uleb128 0x17
 5354 097d BC000000 		.4byte	0xbc
 5355 0981 15       		.byte	0x15
 5356 0982 00       		.byte	0
 5357 0983 1C       		.uleb128 0x1c
 5358 0984 B4020000 		.4byte	.LASF123
 5359 0988 03       		.byte	0x3
 5360 0989 37       		.byte	0x37
 5361 098a 73090000 		.4byte	0x973
 5362 098e 05       		.uleb128 0x5
 5363 098f 03       		.byte	0x3
 5364 0990 00000000 		.4byte	data_array
 5365 0994 1C       		.uleb128 0x1c
 5366 0995 DE040000 		.4byte	.LASF124
 5367 0999 03       		.byte	0x3
 5368 099a 3A       		.byte	0x3a
 5369 099b 6B000000 		.4byte	0x6b
 5370 099f 05       		.uleb128 0x5
 5371 09a0 03       		.byte	0x3
 5372 09a1 00000000 		.4byte	wiznet
 5373 09a5 1C       		.uleb128 0x1c
 5374 09a6 20000000 		.4byte	.LASF125
 5375 09aa 03       		.byte	0x3
 5376 09ab 3E       		.byte	0x3e
 5377 09ac 73090000 		.4byte	0x973
 5378 09b0 05       		.uleb128 0x5
 5379 09b1 03       		.byte	0x3
 5380 09b2 00000000 		.4byte	test_array
 5381 09b6 1C       		.uleb128 0x1c
 5382 09b7 B7030000 		.4byte	.LASF126
 5383 09bb 03       		.byte	0x3
 5384 09bc 47       		.byte	0x47
 5385 09bd 6B000000 		.4byte	0x6b
 5386 09c1 05       		.uleb128 0x5
 5387 09c2 03       		.byte	0x3
 5388 09c3 00000000 		.4byte	WT_FLAG
 5389 09c7 1C       		.uleb128 0x1c
 5390 09c8 C7020000 		.4byte	.LASF127
 5391 09cc 03       		.byte	0x3
 5392 09cd 48       		.byte	0x48
 5393 09ce 6B000000 		.4byte	0x6b
 5394 09d2 05       		.uleb128 0x5
 5395 09d3 03       		.byte	0x3
 5396 09d4 00000000 		.4byte	WR_FLAG
 5397 09d8 1C       		.uleb128 0x1c
 5398 09d9 F7060000 		.4byte	.LASF128
 5399 09dd 03       		.byte	0x3
 5400 09de 49       		.byte	0x49
 5401 09df 6B000000 		.4byte	0x6b
 5402 09e3 05       		.uleb128 0x5
 5403 09e4 03       		.byte	0x3
 5404 09e5 00000000 		.4byte	ELBOW_FLAG
 5405 09e9 1C       		.uleb128 0x1c
 5406 09ea D6030000 		.4byte	.LASF129
 5407 09ee 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 120


 5408 09ef 4A       		.byte	0x4a
 5409 09f0 6B000000 		.4byte	0x6b
 5410 09f4 05       		.uleb128 0x5
 5411 09f5 03       		.byte	0x3
 5412 09f6 00000000 		.4byte	SHOULDER_FLAG
 5413 09fa 1C       		.uleb128 0x1c
 5414 09fb F0020000 		.4byte	.LASF130
 5415 09ff 03       		.byte	0x3
 5416 0a00 4B       		.byte	0x4b
 5417 0a01 6B000000 		.4byte	0x6b
 5418 0a05 05       		.uleb128 0x5
 5419 0a06 03       		.byte	0x3
 5420 0a07 00000000 		.4byte	BA_FLAG
 5421 0a0b 1C       		.uleb128 0x1c
 5422 0a0c 5C030000 		.4byte	.LASF131
 5423 0a10 03       		.byte	0x3
 5424 0a11 4C       		.byte	0x4c
 5425 0a12 6B000000 		.4byte	0x6b
 5426 0a16 05       		.uleb128 0x5
 5427 0a17 03       		.byte	0x3
 5428 0a18 00000000 		.4byte	EFFECTOR_FLAG
 5429 0a1c 1C       		.uleb128 0x1c
 5430 0a1d B7000000 		.4byte	.LASF132
 5431 0a21 03       		.byte	0x3
 5432 0a22 4F       		.byte	0x4f
 5433 0a23 76000000 		.4byte	0x76
 5434 0a27 05       		.uleb128 0x5
 5435 0a28 03       		.byte	0x3
 5436 0a29 00000000 		.4byte	dropped_packets
 5437 0a2d 1C       		.uleb128 0x1c
 5438 0a2e 8E010000 		.4byte	.LASF133
 5439 0a32 03       		.byte	0x3
 5440 0a33 50       		.byte	0x50
 5441 0a34 76000000 		.4byte	0x76
 5442 0a38 05       		.uleb128 0x5
 5443 0a39 03       		.byte	0x3
 5444 0a3a 00000000 		.4byte	fail_safe_errors
 5445 0a3e 1C       		.uleb128 0x1c
 5446 0a3f 12070000 		.4byte	.LASF134
 5447 0a43 03       		.byte	0x3
 5448 0a44 51       		.byte	0x51
 5449 0a45 76000000 		.4byte	0x76
 5450 0a49 05       		.uleb128 0x5
 5451 0a4a 03       		.byte	0x3
 5452 0a4b 00000000 		.4byte	shldr_errors
 5453 0a4f 1C       		.uleb128 0x1c
 5454 0a50 34000000 		.4byte	.LASF135
 5455 0a54 03       		.byte	0x3
 5456 0a55 52       		.byte	0x52
 5457 0a56 76000000 		.4byte	0x76
 5458 0a5a 05       		.uleb128 0x5
 5459 0a5b 03       		.byte	0x3
 5460 0a5c 00000000 		.4byte	elbw_errors
 5461 0a60 1C       		.uleb128 0x1c
 5462 0a61 7D020000 		.4byte	.LASF136
 5463 0a65 03       		.byte	0x3
 5464 0a66 53       		.byte	0x53
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 121


 5465 0a67 76000000 		.4byte	0x76
 5466 0a6b 05       		.uleb128 0x5
 5467 0a6c 03       		.byte	0x3
 5468 0a6d 00000000 		.4byte	BA_errors
 5469 0a71 1C       		.uleb128 0x1c
 5470 0a72 30020000 		.4byte	.LASF137
 5471 0a76 03       		.byte	0x3
 5472 0a77 54       		.byte	0x54
 5473 0a78 76000000 		.4byte	0x76
 5474 0a7c 05       		.uleb128 0x5
 5475 0a7d 03       		.byte	0x3
 5476 0a7e 00000000 		.4byte	WT_errors
 5477 0a82 1C       		.uleb128 0x1c
 5478 0a83 A9040000 		.4byte	.LASF138
 5479 0a87 03       		.byte	0x3
 5480 0a88 55       		.byte	0x55
 5481 0a89 76000000 		.4byte	0x76
 5482 0a8d 05       		.uleb128 0x5
 5483 0a8e 03       		.byte	0x3
 5484 0a8f 00000000 		.4byte	WR_errors
 5485 0a93 1C       		.uleb128 0x1c
 5486 0a94 3A020000 		.4byte	.LASF139
 5487 0a98 03       		.byte	0x3
 5488 0a99 56       		.byte	0x56
 5489 0a9a 76000000 		.4byte	0x76
 5490 0a9e 05       		.uleb128 0x5
 5491 0a9f 03       		.byte	0x3
 5492 0aa0 00000000 		.4byte	eff_errors
 5493 0aa4 1C       		.uleb128 0x1c
 5494 0aa5 05020000 		.4byte	.LASF140
 5495 0aa9 03       		.byte	0x3
 5496 0aaa 58       		.byte	0x58
 5497 0aab B7000000 		.4byte	0xb7
 5498 0aaf 05       		.uleb128 0x5
 5499 0ab0 03       		.byte	0x3
 5500 0ab1 00000000 		.4byte	timerFlag
 5501 0ab5 1D       		.uleb128 0x1d
 5502 0ab6 EF030000 		.4byte	.LASF141
 5503 0aba 01       		.byte	0x1
 5504 0abb 7801     		.2byte	0x178
 5505 0abd C3000000 		.4byte	0xc3
 5506 0ac1 05       		.uleb128 0x5
 5507 0ac2 03       		.byte	0x3
 5508 0ac3 00000000 		.4byte	wristTilt_state
 5509 0ac7 1D       		.uleb128 0x1d
 5510 0ac8 B3040000 		.4byte	.LASF142
 5511 0acc 01       		.byte	0x1
 5512 0acd E001     		.2byte	0x1e0
 5513 0acf E9000000 		.4byte	0xe9
 5514 0ad3 05       		.uleb128 0x5
 5515 0ad4 03       		.byte	0x3
 5516 0ad5 00000000 		.4byte	wristRotate_state
 5517 0ad9 1D       		.uleb128 0x1d
 5518 0ada AA010000 		.4byte	.LASF143
 5519 0ade 01       		.byte	0x1
 5520 0adf 4B02     		.2byte	0x24b
 5521 0ae1 0F010000 		.4byte	0x10f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 122


 5522 0ae5 05       		.uleb128 0x5
 5523 0ae6 03       		.byte	0x3
 5524 0ae7 00000000 		.4byte	elbow_state
 5525 0aeb 1D       		.uleb128 0x1d
 5526 0aec EE000000 		.4byte	.LASF144
 5527 0af0 01       		.byte	0x1
 5528 0af1 DF02     		.2byte	0x2df
 5529 0af3 35010000 		.4byte	0x135
 5530 0af7 05       		.uleb128 0x5
 5531 0af8 03       		.byte	0x3
 5532 0af9 00000000 		.4byte	shoulder_state
 5533 0afd 1D       		.uleb128 0x1d
 5534 0afe 6E040000 		.4byte	.LASF145
 5535 0b02 01       		.byte	0x1
 5536 0b03 7303     		.2byte	0x373
 5537 0b05 5B010000 		.4byte	0x15b
 5538 0b09 05       		.uleb128 0x5
 5539 0b0a 03       		.byte	0x3
 5540 0b0b 00000000 		.4byte	baseAzimuth_state
 5541 0b0f 1D       		.uleb128 0x1d
 5542 0b10 8F030000 		.4byte	.LASF146
 5543 0b14 01       		.byte	0x1
 5544 0b15 D703     		.2byte	0x3d7
 5545 0b17 81010000 		.4byte	0x181
 5546 0b1b 05       		.uleb128 0x5
 5547 0b1c 03       		.byte	0x3
 5548 0b1d 00000000 		.4byte	effector_state
 5549 0b21 00       		.byte	0
 5550              		.section	.debug_abbrev,"",%progbits
 5551              	.Ldebug_abbrev0:
 5552 0000 01       		.uleb128 0x1
 5553 0001 11       		.uleb128 0x11
 5554 0002 01       		.byte	0x1
 5555 0003 25       		.uleb128 0x25
 5556 0004 0E       		.uleb128 0xe
 5557 0005 13       		.uleb128 0x13
 5558 0006 0B       		.uleb128 0xb
 5559 0007 03       		.uleb128 0x3
 5560 0008 0E       		.uleb128 0xe
 5561 0009 1B       		.uleb128 0x1b
 5562 000a 0E       		.uleb128 0xe
 5563 000b 55       		.uleb128 0x55
 5564 000c 17       		.uleb128 0x17
 5565 000d 11       		.uleb128 0x11
 5566 000e 01       		.uleb128 0x1
 5567 000f 10       		.uleb128 0x10
 5568 0010 17       		.uleb128 0x17
 5569 0011 00       		.byte	0
 5570 0012 00       		.byte	0
 5571 0013 02       		.uleb128 0x2
 5572 0014 24       		.uleb128 0x24
 5573 0015 00       		.byte	0
 5574 0016 0B       		.uleb128 0xb
 5575 0017 0B       		.uleb128 0xb
 5576 0018 3E       		.uleb128 0x3e
 5577 0019 0B       		.uleb128 0xb
 5578 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 123


 5579 001b 0E       		.uleb128 0xe
 5580 001c 00       		.byte	0
 5581 001d 00       		.byte	0
 5582 001e 03       		.uleb128 0x3
 5583 001f 24       		.uleb128 0x24
 5584 0020 00       		.byte	0
 5585 0021 0B       		.uleb128 0xb
 5586 0022 0B       		.uleb128 0xb
 5587 0023 3E       		.uleb128 0x3e
 5588 0024 0B       		.uleb128 0xb
 5589 0025 03       		.uleb128 0x3
 5590 0026 08       		.uleb128 0x8
 5591 0027 00       		.byte	0
 5592 0028 00       		.byte	0
 5593 0029 04       		.uleb128 0x4
 5594 002a 16       		.uleb128 0x16
 5595 002b 00       		.byte	0
 5596 002c 03       		.uleb128 0x3
 5597 002d 0E       		.uleb128 0xe
 5598 002e 3A       		.uleb128 0x3a
 5599 002f 0B       		.uleb128 0xb
 5600 0030 3B       		.uleb128 0x3b
 5601 0031 0B       		.uleb128 0xb
 5602 0032 49       		.uleb128 0x49
 5603 0033 13       		.uleb128 0x13
 5604 0034 00       		.byte	0
 5605 0035 00       		.byte	0
 5606 0036 05       		.uleb128 0x5
 5607 0037 35       		.uleb128 0x35
 5608 0038 00       		.byte	0
 5609 0039 49       		.uleb128 0x49
 5610 003a 13       		.uleb128 0x13
 5611 003b 00       		.byte	0
 5612 003c 00       		.byte	0
 5613 003d 06       		.uleb128 0x6
 5614 003e 04       		.uleb128 0x4
 5615 003f 01       		.byte	0x1
 5616 0040 03       		.uleb128 0x3
 5617 0041 0E       		.uleb128 0xe
 5618 0042 0B       		.uleb128 0xb
 5619 0043 0B       		.uleb128 0xb
 5620 0044 3A       		.uleb128 0x3a
 5621 0045 0B       		.uleb128 0xb
 5622 0046 3B       		.uleb128 0x3b
 5623 0047 05       		.uleb128 0x5
 5624 0048 01       		.uleb128 0x1
 5625 0049 13       		.uleb128 0x13
 5626 004a 00       		.byte	0
 5627 004b 00       		.byte	0
 5628 004c 07       		.uleb128 0x7
 5629 004d 28       		.uleb128 0x28
 5630 004e 00       		.byte	0
 5631 004f 03       		.uleb128 0x3
 5632 0050 0E       		.uleb128 0xe
 5633 0051 1C       		.uleb128 0x1c
 5634 0052 0D       		.uleb128 0xd
 5635 0053 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 124


 5636 0054 00       		.byte	0
 5637 0055 08       		.uleb128 0x8
 5638 0056 2E       		.uleb128 0x2e
 5639 0057 01       		.byte	0x1
 5640 0058 3F       		.uleb128 0x3f
 5641 0059 19       		.uleb128 0x19
 5642 005a 03       		.uleb128 0x3
 5643 005b 0E       		.uleb128 0xe
 5644 005c 3A       		.uleb128 0x3a
 5645 005d 0B       		.uleb128 0xb
 5646 005e 3B       		.uleb128 0x3b
 5647 005f 0B       		.uleb128 0xb
 5648 0060 27       		.uleb128 0x27
 5649 0061 19       		.uleb128 0x19
 5650 0062 11       		.uleb128 0x11
 5651 0063 01       		.uleb128 0x1
 5652 0064 12       		.uleb128 0x12
 5653 0065 06       		.uleb128 0x6
 5654 0066 40       		.uleb128 0x40
 5655 0067 18       		.uleb128 0x18
 5656 0068 9642     		.uleb128 0x2116
 5657 006a 19       		.uleb128 0x19
 5658 006b 01       		.uleb128 0x1
 5659 006c 13       		.uleb128 0x13
 5660 006d 00       		.byte	0
 5661 006e 00       		.byte	0
 5662 006f 09       		.uleb128 0x9
 5663 0070 34       		.uleb128 0x34
 5664 0071 00       		.byte	0
 5665 0072 03       		.uleb128 0x3
 5666 0073 0E       		.uleb128 0xe
 5667 0074 3A       		.uleb128 0x3a
 5668 0075 0B       		.uleb128 0xb
 5669 0076 3B       		.uleb128 0x3b
 5670 0077 0B       		.uleb128 0xb
 5671 0078 49       		.uleb128 0x49
 5672 0079 13       		.uleb128 0x13
 5673 007a 02       		.uleb128 0x2
 5674 007b 18       		.uleb128 0x18
 5675 007c 00       		.byte	0
 5676 007d 00       		.byte	0
 5677 007e 0A       		.uleb128 0xa
 5678 007f 2E       		.uleb128 0x2e
 5679 0080 01       		.byte	0x1
 5680 0081 3F       		.uleb128 0x3f
 5681 0082 19       		.uleb128 0x19
 5682 0083 03       		.uleb128 0x3
 5683 0084 0E       		.uleb128 0xe
 5684 0085 3A       		.uleb128 0x3a
 5685 0086 0B       		.uleb128 0xb
 5686 0087 3B       		.uleb128 0x3b
 5687 0088 0B       		.uleb128 0xb
 5688 0089 27       		.uleb128 0x27
 5689 008a 19       		.uleb128 0x19
 5690 008b 49       		.uleb128 0x49
 5691 008c 13       		.uleb128 0x13
 5692 008d 11       		.uleb128 0x11
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 125


 5693 008e 01       		.uleb128 0x1
 5694 008f 12       		.uleb128 0x12
 5695 0090 06       		.uleb128 0x6
 5696 0091 40       		.uleb128 0x40
 5697 0092 18       		.uleb128 0x18
 5698 0093 9642     		.uleb128 0x2116
 5699 0095 19       		.uleb128 0x19
 5700 0096 01       		.uleb128 0x1
 5701 0097 13       		.uleb128 0x13
 5702 0098 00       		.byte	0
 5703 0099 00       		.byte	0
 5704 009a 0B       		.uleb128 0xb
 5705 009b 05       		.uleb128 0x5
 5706 009c 00       		.byte	0
 5707 009d 03       		.uleb128 0x3
 5708 009e 0E       		.uleb128 0xe
 5709 009f 3A       		.uleb128 0x3a
 5710 00a0 0B       		.uleb128 0xb
 5711 00a1 3B       		.uleb128 0x3b
 5712 00a2 0B       		.uleb128 0xb
 5713 00a3 49       		.uleb128 0x49
 5714 00a4 13       		.uleb128 0x13
 5715 00a5 02       		.uleb128 0x2
 5716 00a6 18       		.uleb128 0x18
 5717 00a7 00       		.byte	0
 5718 00a8 00       		.byte	0
 5719 00a9 0C       		.uleb128 0xc
 5720 00aa 34       		.uleb128 0x34
 5721 00ab 00       		.byte	0
 5722 00ac 03       		.uleb128 0x3
 5723 00ad 08       		.uleb128 0x8
 5724 00ae 3A       		.uleb128 0x3a
 5725 00af 0B       		.uleb128 0xb
 5726 00b0 3B       		.uleb128 0x3b
 5727 00b1 0B       		.uleb128 0xb
 5728 00b2 49       		.uleb128 0x49
 5729 00b3 13       		.uleb128 0x13
 5730 00b4 02       		.uleb128 0x2
 5731 00b5 18       		.uleb128 0x18
 5732 00b6 00       		.byte	0
 5733 00b7 00       		.byte	0
 5734 00b8 0D       		.uleb128 0xd
 5735 00b9 0F       		.uleb128 0xf
 5736 00ba 00       		.byte	0
 5737 00bb 0B       		.uleb128 0xb
 5738 00bc 0B       		.uleb128 0xb
 5739 00bd 49       		.uleb128 0x49
 5740 00be 13       		.uleb128 0x13
 5741 00bf 00       		.byte	0
 5742 00c0 00       		.byte	0
 5743 00c1 0E       		.uleb128 0xe
 5744 00c2 2E       		.uleb128 0x2e
 5745 00c3 01       		.byte	0x1
 5746 00c4 3F       		.uleb128 0x3f
 5747 00c5 19       		.uleb128 0x19
 5748 00c6 03       		.uleb128 0x3
 5749 00c7 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 126


 5750 00c8 3A       		.uleb128 0x3a
 5751 00c9 0B       		.uleb128 0xb
 5752 00ca 3B       		.uleb128 0x3b
 5753 00cb 0B       		.uleb128 0xb
 5754 00cc 27       		.uleb128 0x27
 5755 00cd 19       		.uleb128 0x19
 5756 00ce 49       		.uleb128 0x49
 5757 00cf 13       		.uleb128 0x13
 5758 00d0 11       		.uleb128 0x11
 5759 00d1 01       		.uleb128 0x1
 5760 00d2 12       		.uleb128 0x12
 5761 00d3 06       		.uleb128 0x6
 5762 00d4 40       		.uleb128 0x40
 5763 00d5 18       		.uleb128 0x18
 5764 00d6 9742     		.uleb128 0x2117
 5765 00d8 19       		.uleb128 0x19
 5766 00d9 01       		.uleb128 0x1
 5767 00da 13       		.uleb128 0x13
 5768 00db 00       		.byte	0
 5769 00dc 00       		.byte	0
 5770 00dd 0F       		.uleb128 0xf
 5771 00de 2E       		.uleb128 0x2e
 5772 00df 01       		.byte	0x1
 5773 00e0 3F       		.uleb128 0x3f
 5774 00e1 19       		.uleb128 0x19
 5775 00e2 03       		.uleb128 0x3
 5776 00e3 0E       		.uleb128 0xe
 5777 00e4 3A       		.uleb128 0x3a
 5778 00e5 0B       		.uleb128 0xb
 5779 00e6 3B       		.uleb128 0x3b
 5780 00e7 05       		.uleb128 0x5
 5781 00e8 27       		.uleb128 0x27
 5782 00e9 19       		.uleb128 0x19
 5783 00ea 49       		.uleb128 0x49
 5784 00eb 13       		.uleb128 0x13
 5785 00ec 11       		.uleb128 0x11
 5786 00ed 01       		.uleb128 0x1
 5787 00ee 12       		.uleb128 0x12
 5788 00ef 06       		.uleb128 0x6
 5789 00f0 40       		.uleb128 0x40
 5790 00f1 18       		.uleb128 0x18
 5791 00f2 9742     		.uleb128 0x2117
 5792 00f4 19       		.uleb128 0x19
 5793 00f5 01       		.uleb128 0x1
 5794 00f6 13       		.uleb128 0x13
 5795 00f7 00       		.byte	0
 5796 00f8 00       		.byte	0
 5797 00f9 10       		.uleb128 0x10
 5798 00fa 05       		.uleb128 0x5
 5799 00fb 00       		.byte	0
 5800 00fc 03       		.uleb128 0x3
 5801 00fd 0E       		.uleb128 0xe
 5802 00fe 3A       		.uleb128 0x3a
 5803 00ff 0B       		.uleb128 0xb
 5804 0100 3B       		.uleb128 0x3b
 5805 0101 05       		.uleb128 0x5
 5806 0102 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 127


 5807 0103 13       		.uleb128 0x13
 5808 0104 02       		.uleb128 0x2
 5809 0105 18       		.uleb128 0x18
 5810 0106 00       		.byte	0
 5811 0107 00       		.byte	0
 5812 0108 11       		.uleb128 0x11
 5813 0109 34       		.uleb128 0x34
 5814 010a 00       		.byte	0
 5815 010b 03       		.uleb128 0x3
 5816 010c 0E       		.uleb128 0xe
 5817 010d 3A       		.uleb128 0x3a
 5818 010e 0B       		.uleb128 0xb
 5819 010f 3B       		.uleb128 0x3b
 5820 0110 05       		.uleb128 0x5
 5821 0111 49       		.uleb128 0x49
 5822 0112 13       		.uleb128 0x13
 5823 0113 02       		.uleb128 0x2
 5824 0114 18       		.uleb128 0x18
 5825 0115 00       		.byte	0
 5826 0116 00       		.byte	0
 5827 0117 12       		.uleb128 0x12
 5828 0118 2E       		.uleb128 0x2e
 5829 0119 01       		.byte	0x1
 5830 011a 3F       		.uleb128 0x3f
 5831 011b 19       		.uleb128 0x19
 5832 011c 03       		.uleb128 0x3
 5833 011d 0E       		.uleb128 0xe
 5834 011e 3A       		.uleb128 0x3a
 5835 011f 0B       		.uleb128 0xb
 5836 0120 3B       		.uleb128 0x3b
 5837 0121 05       		.uleb128 0x5
 5838 0122 27       		.uleb128 0x27
 5839 0123 19       		.uleb128 0x19
 5840 0124 49       		.uleb128 0x49
 5841 0125 13       		.uleb128 0x13
 5842 0126 11       		.uleb128 0x11
 5843 0127 01       		.uleb128 0x1
 5844 0128 12       		.uleb128 0x12
 5845 0129 06       		.uleb128 0x6
 5846 012a 40       		.uleb128 0x40
 5847 012b 18       		.uleb128 0x18
 5848 012c 9642     		.uleb128 0x2116
 5849 012e 19       		.uleb128 0x19
 5850 012f 01       		.uleb128 0x1
 5851 0130 13       		.uleb128 0x13
 5852 0131 00       		.byte	0
 5853 0132 00       		.byte	0
 5854 0133 13       		.uleb128 0x13
 5855 0134 2E       		.uleb128 0x2e
 5856 0135 00       		.byte	0
 5857 0136 3F       		.uleb128 0x3f
 5858 0137 19       		.uleb128 0x19
 5859 0138 03       		.uleb128 0x3
 5860 0139 0E       		.uleb128 0xe
 5861 013a 3A       		.uleb128 0x3a
 5862 013b 0B       		.uleb128 0xb
 5863 013c 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 128


 5864 013d 05       		.uleb128 0x5
 5865 013e 11       		.uleb128 0x11
 5866 013f 01       		.uleb128 0x1
 5867 0140 12       		.uleb128 0x12
 5868 0141 06       		.uleb128 0x6
 5869 0142 40       		.uleb128 0x40
 5870 0143 18       		.uleb128 0x18
 5871 0144 9742     		.uleb128 0x2117
 5872 0146 19       		.uleb128 0x19
 5873 0147 00       		.byte	0
 5874 0148 00       		.byte	0
 5875 0149 14       		.uleb128 0x14
 5876 014a 2E       		.uleb128 0x2e
 5877 014b 00       		.byte	0
 5878 014c 3F       		.uleb128 0x3f
 5879 014d 19       		.uleb128 0x19
 5880 014e 03       		.uleb128 0x3
 5881 014f 0E       		.uleb128 0xe
 5882 0150 3A       		.uleb128 0x3a
 5883 0151 0B       		.uleb128 0xb
 5884 0152 3B       		.uleb128 0x3b
 5885 0153 05       		.uleb128 0x5
 5886 0154 11       		.uleb128 0x11
 5887 0155 01       		.uleb128 0x1
 5888 0156 12       		.uleb128 0x12
 5889 0157 06       		.uleb128 0x6
 5890 0158 40       		.uleb128 0x40
 5891 0159 18       		.uleb128 0x18
 5892 015a 9642     		.uleb128 0x2116
 5893 015c 19       		.uleb128 0x19
 5894 015d 00       		.byte	0
 5895 015e 00       		.byte	0
 5896 015f 15       		.uleb128 0x15
 5897 0160 2E       		.uleb128 0x2e
 5898 0161 01       		.byte	0x1
 5899 0162 3F       		.uleb128 0x3f
 5900 0163 19       		.uleb128 0x19
 5901 0164 03       		.uleb128 0x3
 5902 0165 0E       		.uleb128 0xe
 5903 0166 3A       		.uleb128 0x3a
 5904 0167 0B       		.uleb128 0xb
 5905 0168 3B       		.uleb128 0x3b
 5906 0169 05       		.uleb128 0x5
 5907 016a 27       		.uleb128 0x27
 5908 016b 19       		.uleb128 0x19
 5909 016c 11       		.uleb128 0x11
 5910 016d 01       		.uleb128 0x1
 5911 016e 12       		.uleb128 0x12
 5912 016f 06       		.uleb128 0x6
 5913 0170 40       		.uleb128 0x40
 5914 0171 18       		.uleb128 0x18
 5915 0172 9642     		.uleb128 0x2116
 5916 0174 19       		.uleb128 0x19
 5917 0175 01       		.uleb128 0x1
 5918 0176 13       		.uleb128 0x13
 5919 0177 00       		.byte	0
 5920 0178 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 129


 5921 0179 16       		.uleb128 0x16
 5922 017a 01       		.uleb128 0x1
 5923 017b 01       		.byte	0x1
 5924 017c 49       		.uleb128 0x49
 5925 017d 13       		.uleb128 0x13
 5926 017e 01       		.uleb128 0x1
 5927 017f 13       		.uleb128 0x13
 5928 0180 00       		.byte	0
 5929 0181 00       		.byte	0
 5930 0182 17       		.uleb128 0x17
 5931 0183 21       		.uleb128 0x21
 5932 0184 00       		.byte	0
 5933 0185 49       		.uleb128 0x49
 5934 0186 13       		.uleb128 0x13
 5935 0187 2F       		.uleb128 0x2f
 5936 0188 0B       		.uleb128 0xb
 5937 0189 00       		.byte	0
 5938 018a 00       		.byte	0
 5939 018b 18       		.uleb128 0x18
 5940 018c 34       		.uleb128 0x34
 5941 018d 00       		.byte	0
 5942 018e 03       		.uleb128 0x3
 5943 018f 08       		.uleb128 0x8
 5944 0190 3A       		.uleb128 0x3a
 5945 0191 0B       		.uleb128 0xb
 5946 0192 3B       		.uleb128 0x3b
 5947 0193 05       		.uleb128 0x5
 5948 0194 49       		.uleb128 0x49
 5949 0195 13       		.uleb128 0x13
 5950 0196 02       		.uleb128 0x2
 5951 0197 18       		.uleb128 0x18
 5952 0198 00       		.byte	0
 5953 0199 00       		.byte	0
 5954 019a 19       		.uleb128 0x19
 5955 019b 2E       		.uleb128 0x2e
 5956 019c 01       		.byte	0x1
 5957 019d 3F       		.uleb128 0x3f
 5958 019e 19       		.uleb128 0x19
 5959 019f 03       		.uleb128 0x3
 5960 01a0 0E       		.uleb128 0xe
 5961 01a1 3A       		.uleb128 0x3a
 5962 01a2 0B       		.uleb128 0xb
 5963 01a3 3B       		.uleb128 0x3b
 5964 01a4 05       		.uleb128 0x5
 5965 01a5 11       		.uleb128 0x11
 5966 01a6 01       		.uleb128 0x1
 5967 01a7 12       		.uleb128 0x12
 5968 01a8 06       		.uleb128 0x6
 5969 01a9 40       		.uleb128 0x40
 5970 01aa 18       		.uleb128 0x18
 5971 01ab 9642     		.uleb128 0x2116
 5972 01ad 19       		.uleb128 0x19
 5973 01ae 01       		.uleb128 0x1
 5974 01af 13       		.uleb128 0x13
 5975 01b0 00       		.byte	0
 5976 01b1 00       		.byte	0
 5977 01b2 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 130


 5978 01b3 0B       		.uleb128 0xb
 5979 01b4 01       		.byte	0x1
 5980 01b5 11       		.uleb128 0x11
 5981 01b6 01       		.uleb128 0x1
 5982 01b7 12       		.uleb128 0x12
 5983 01b8 06       		.uleb128 0x6
 5984 01b9 00       		.byte	0
 5985 01ba 00       		.byte	0
 5986 01bb 1B       		.uleb128 0x1b
 5987 01bc 2E       		.uleb128 0x2e
 5988 01bd 01       		.byte	0x1
 5989 01be 3F       		.uleb128 0x3f
 5990 01bf 19       		.uleb128 0x19
 5991 01c0 03       		.uleb128 0x3
 5992 01c1 0E       		.uleb128 0xe
 5993 01c2 3A       		.uleb128 0x3a
 5994 01c3 0B       		.uleb128 0xb
 5995 01c4 3B       		.uleb128 0x3b
 5996 01c5 05       		.uleb128 0x5
 5997 01c6 49       		.uleb128 0x49
 5998 01c7 13       		.uleb128 0x13
 5999 01c8 11       		.uleb128 0x11
 6000 01c9 01       		.uleb128 0x1
 6001 01ca 12       		.uleb128 0x12
 6002 01cb 06       		.uleb128 0x6
 6003 01cc 40       		.uleb128 0x40
 6004 01cd 18       		.uleb128 0x18
 6005 01ce 9642     		.uleb128 0x2116
 6006 01d0 19       		.uleb128 0x19
 6007 01d1 01       		.uleb128 0x1
 6008 01d2 13       		.uleb128 0x13
 6009 01d3 00       		.byte	0
 6010 01d4 00       		.byte	0
 6011 01d5 1C       		.uleb128 0x1c
 6012 01d6 34       		.uleb128 0x34
 6013 01d7 00       		.byte	0
 6014 01d8 03       		.uleb128 0x3
 6015 01d9 0E       		.uleb128 0xe
 6016 01da 3A       		.uleb128 0x3a
 6017 01db 0B       		.uleb128 0xb
 6018 01dc 3B       		.uleb128 0x3b
 6019 01dd 0B       		.uleb128 0xb
 6020 01de 49       		.uleb128 0x49
 6021 01df 13       		.uleb128 0x13
 6022 01e0 3F       		.uleb128 0x3f
 6023 01e1 19       		.uleb128 0x19
 6024 01e2 02       		.uleb128 0x2
 6025 01e3 18       		.uleb128 0x18
 6026 01e4 00       		.byte	0
 6027 01e5 00       		.byte	0
 6028 01e6 1D       		.uleb128 0x1d
 6029 01e7 34       		.uleb128 0x34
 6030 01e8 00       		.byte	0
 6031 01e9 03       		.uleb128 0x3
 6032 01ea 0E       		.uleb128 0xe
 6033 01eb 3A       		.uleb128 0x3a
 6034 01ec 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 131


 6035 01ed 3B       		.uleb128 0x3b
 6036 01ee 05       		.uleb128 0x5
 6037 01ef 49       		.uleb128 0x49
 6038 01f0 13       		.uleb128 0x13
 6039 01f1 3F       		.uleb128 0x3f
 6040 01f2 19       		.uleb128 0x19
 6041 01f3 02       		.uleb128 0x2
 6042 01f4 18       		.uleb128 0x18
 6043 01f5 00       		.byte	0
 6044 01f6 00       		.byte	0
 6045 01f7 00       		.byte	0
 6046              		.section	.debug_aranges,"",%progbits
 6047 0000 C4000000 		.4byte	0xc4
 6048 0004 0200     		.2byte	0x2
 6049 0006 00000000 		.4byte	.Ldebug_info0
 6050 000a 04       		.byte	0x4
 6051 000b 00       		.byte	0
 6052 000c 0000     		.2byte	0
 6053 000e 0000     		.2byte	0
 6054 0010 00000000 		.4byte	.LFB34
 6055 0014 28000000 		.4byte	.LFE34-.LFB34
 6056 0018 00000000 		.4byte	.LFB35
 6057 001c B8010000 		.4byte	.LFE35-.LFB35
 6058 0020 00000000 		.4byte	.LFB36
 6059 0024 B8010000 		.4byte	.LFE36-.LFB36
 6060 0028 00000000 		.4byte	.LFB37
 6061 002c 78000000 		.4byte	.LFE37-.LFB37
 6062 0030 00000000 		.4byte	.LFB38
 6063 0034 3E000000 		.4byte	.LFE38-.LFB38
 6064 0038 00000000 		.4byte	.LFB39
 6065 003c 0C010000 		.4byte	.LFE39-.LFB39
 6066 0040 00000000 		.4byte	.LFB40
 6067 0044 0C020000 		.4byte	.LFE40-.LFB40
 6068 0048 00000000 		.4byte	.LFB41
 6069 004c 84000000 		.4byte	.LFE41-.LFB41
 6070 0050 00000000 		.4byte	.LFB42
 6071 0054 28000000 		.4byte	.LFE42-.LFB42
 6072 0058 00000000 		.4byte	.LFB43
 6073 005c 08000000 		.4byte	.LFE43-.LFB43
 6074 0060 00000000 		.4byte	.LFB44
 6075 0064 18000000 		.4byte	.LFE44-.LFB44
 6076 0068 00000000 		.4byte	.LFB45
 6077 006c 98000000 		.4byte	.LFE45-.LFB45
 6078 0070 00000000 		.4byte	.LFB46
 6079 0074 98000000 		.4byte	.LFE46-.LFB46
 6080 0078 00000000 		.4byte	.LFB47
 6081 007c 98000000 		.4byte	.LFE47-.LFB47
 6082 0080 00000000 		.4byte	.LFB48
 6083 0084 6C010000 		.4byte	.LFE48-.LFB48
 6084 0088 00000000 		.4byte	.LFB49
 6085 008c 6C010000 		.4byte	.LFE49-.LFB49
 6086 0090 00000000 		.4byte	.LFB50
 6087 0094 08030000 		.4byte	.LFE50-.LFB50
 6088 0098 00000000 		.4byte	.LFB51
 6089 009c 08030000 		.4byte	.LFE51-.LFB51
 6090 00a0 00000000 		.4byte	.LFB52
 6091 00a4 5C010000 		.4byte	.LFE52-.LFB52
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 132


 6092 00a8 00000000 		.4byte	.LFB53
 6093 00ac DC000000 		.4byte	.LFE53-.LFB53
 6094 00b0 00000000 		.4byte	.LFB54
 6095 00b4 48010000 		.4byte	.LFE54-.LFB54
 6096 00b8 00000000 		.4byte	.LFB55
 6097 00bc 9C010000 		.4byte	.LFE55-.LFB55
 6098 00c0 00000000 		.4byte	0
 6099 00c4 00000000 		.4byte	0
 6100              		.section	.debug_ranges,"",%progbits
 6101              	.Ldebug_ranges0:
 6102 0000 00000000 		.4byte	.LFB34
 6103 0004 28000000 		.4byte	.LFE34
 6104 0008 00000000 		.4byte	.LFB35
 6105 000c B8010000 		.4byte	.LFE35
 6106 0010 00000000 		.4byte	.LFB36
 6107 0014 B8010000 		.4byte	.LFE36
 6108 0018 00000000 		.4byte	.LFB37
 6109 001c 78000000 		.4byte	.LFE37
 6110 0020 00000000 		.4byte	.LFB38
 6111 0024 3E000000 		.4byte	.LFE38
 6112 0028 00000000 		.4byte	.LFB39
 6113 002c 0C010000 		.4byte	.LFE39
 6114 0030 00000000 		.4byte	.LFB40
 6115 0034 0C020000 		.4byte	.LFE40
 6116 0038 00000000 		.4byte	.LFB41
 6117 003c 84000000 		.4byte	.LFE41
 6118 0040 00000000 		.4byte	.LFB42
 6119 0044 28000000 		.4byte	.LFE42
 6120 0048 00000000 		.4byte	.LFB43
 6121 004c 08000000 		.4byte	.LFE43
 6122 0050 00000000 		.4byte	.LFB44
 6123 0054 18000000 		.4byte	.LFE44
 6124 0058 00000000 		.4byte	.LFB45
 6125 005c 98000000 		.4byte	.LFE45
 6126 0060 00000000 		.4byte	.LFB46
 6127 0064 98000000 		.4byte	.LFE46
 6128 0068 00000000 		.4byte	.LFB47
 6129 006c 98000000 		.4byte	.LFE47
 6130 0070 00000000 		.4byte	.LFB48
 6131 0074 6C010000 		.4byte	.LFE48
 6132 0078 00000000 		.4byte	.LFB49
 6133 007c 6C010000 		.4byte	.LFE49
 6134 0080 00000000 		.4byte	.LFB50
 6135 0084 08030000 		.4byte	.LFE50
 6136 0088 00000000 		.4byte	.LFB51
 6137 008c 08030000 		.4byte	.LFE51
 6138 0090 00000000 		.4byte	.LFB52
 6139 0094 5C010000 		.4byte	.LFE52
 6140 0098 00000000 		.4byte	.LFB53
 6141 009c DC000000 		.4byte	.LFE53
 6142 00a0 00000000 		.4byte	.LFB54
 6143 00a4 48010000 		.4byte	.LFE54
 6144 00a8 00000000 		.4byte	.LFB55
 6145 00ac 9C010000 		.4byte	.LFE55
 6146 00b0 00000000 		.4byte	0
 6147 00b4 00000000 		.4byte	0
 6148              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 133


 6149              	.Ldebug_line0:
 6150 0000 28050000 		.section	.debug_str,"MS",%progbits,1
 6150      02005100 
 6150      00000201 
 6150      FB0E0D00 
 6150      01010101 
 6151              	.LASF103:
 6152 0000 62617365 		.ascii	"baseAzimuth\000"
 6152      417A696D 
 6152      75746800 
 6153              	.LASF19:
 6154 000c 74696C74 		.ascii	"tilt_init\000"
 6154      5F696E69 
 6154      7400
 6155              	.LASF58:
 6156 0016 6E756D5F 		.ascii	"num_items\000"
 6156      6974656D 
 6156      7300
 6157              	.LASF125:
 6158 0020 74657374 		.ascii	"test_array\000"
 6158      5F617272 
 6158      617900
 6159              	.LASF109:
 6160 002b 42415F63 		.ascii	"BA_cspot\000"
 6160      73706F74 
 6160      00
 6161              	.LASF135:
 6162 0034 656C6277 		.ascii	"elbw_errors\000"
 6162      5F657272 
 6162      6F727300 
 6163              	.LASF115:
 6164 0040 57545F63 		.ascii	"WT_cspot\000"
 6164      73706F74 
 6164      00
 6165              	.LASF95:
 6166 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6166      72725F63 
 6166      73706F74 
 6166      00
 6167              	.LASF41:
 6168 0056 42415F65 		.ascii	"BA_execute\000"
 6168      78656375 
 6168      746500
 6169              	.LASF28:
 6170 0061 656C626F 		.ascii	"elbow_states\000"
 6170      775F7374 
 6170      61746573 
 6170      00
 6171              	.LASF93:
 6172 006e 57545F61 		.ascii	"WT_array\000"
 6172      72726179 
 6172      00
 6173              	.LASF106:
 6174 0077 65666665 		.ascii	"effector\000"
 6174      63746F72 
 6174      00
 6175              	.LASF8:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 134


 6176 0080 756E7369 		.ascii	"unsigned int\000"
 6176      676E6564 
 6176      20696E74 
 6176      00
 6177              	.LASF38:
 6178 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6178      417A696D 
 6178      7574685F 
 6178      73746174 
 6178      657300
 6179              	.LASF13:
 6180 00a0 696E7431 		.ascii	"int16\000"
 6180      3600
 6181              	.LASF54:
 6182 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 6182      62726174 
 6182      696F6E45 
 6182      6C626F77 
 6182      00
 6183              	.LASF132:
 6184 00b7 64726F70 		.ascii	"dropped_packets\000"
 6184      7065645F 
 6184      7061636B 
 6184      65747300 
 6185              	.LASF39:
 6186 00c7 42415F73 		.ascii	"BA_start\000"
 6186      74617274 
 6186      00
 6187              	.LASF102:
 6188 00d0 73686F75 		.ascii	"shoulder_array\000"
 6188      6C646572 
 6188      5F617272 
 6188      617900
 6189              	.LASF59:
 6190 00df 6D61696E 		.ascii	"maintain_array\000"
 6190      7461696E 
 6190      5F617272 
 6190      617900
 6191              	.LASF144:
 6192 00ee 73686F75 		.ascii	"shoulder_state\000"
 6192      6C646572 
 6192      5F737461 
 6192      746500
 6193              	.LASF149:
 6194 00fd 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 6194      73657273 
 6194      5C53616D 
 6194      75656C5C 
 6194      446F6375 
 6195 012b 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 6195      5C61726D 
 6195      5F636F6E 
 6195      74726F6C 
 6195      6C65725F 
 6196 015b 00       		.ascii	"\000"
 6197              	.LASF24:
 6198 015c 726F7461 		.ascii	"rotate_start\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 135


 6198      74655F73 
 6198      74617274 
 6198      00
 6199              	.LASF90:
 6200 0169 73706565 		.ascii	"speed\000"
 6200      6400
 6201              	.LASF98:
 6202 016f 656C6277 		.ascii	"elbw_arr_cspot\000"
 6202      5F617272 
 6202      5F637370 
 6202      6F7400
 6203              	.LASF18:
 6204 017e 74696C74 		.ascii	"tilt_start\000"
 6204      5F737461 
 6204      727400
 6205              	.LASF65:
 6206 0189 73697A65 		.ascii	"size\000"
 6206      00
 6207              	.LASF133:
 6208 018e 6661696C 		.ascii	"fail_safe_errors\000"
 6208      5F736166 
 6208      655F6572 
 6208      726F7273 
 6208      00
 6209              	.LASF68:
 6210 019f 706F735F 		.ascii	"pos_to_vel\000"
 6210      746F5F76 
 6210      656C00
 6211              	.LASF143:
 6212 01aa 656C626F 		.ascii	"elbow_state\000"
 6212      775F7374 
 6212      61746500 
 6213              	.LASF14:
 6214 01b6 666C6F61 		.ascii	"float\000"
 6214      7400
 6215              	.LASF40:
 6216 01bc 42415F69 		.ascii	"BA_init\000"
 6216      6E697400 
 6217              	.LASF67:
 6218 01c4 696E6465 		.ascii	"index\000"
 6218      7800
 6219              	.LASF120:
 6220 01ca 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6220      575F4C4F 
 6220      5745525F 
 6220      424F554E 
 6220      4400
 6221              	.LASF7:
 6222 01dc 6C6F6E67 		.ascii	"long long unsigned int\000"
 6222      206C6F6E 
 6222      6720756E 
 6222      7369676E 
 6222      65642069 
 6223              	.LASF84:
 6224 01f3 53657276 		.ascii	"ServoGoalPosition\000"
 6224      6F476F61 
 6224      6C506F73 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 136


 6224      6974696F 
 6224      6E00
 6225              	.LASF140:
 6226 0205 74696D65 		.ascii	"timerFlag\000"
 6226      72466C61 
 6226      6700
 6227              	.LASF100:
 6228 020f 73686F75 		.ascii	"shoulder\000"
 6228      6C646572 
 6228      00
 6229              	.LASF46:
 6230 0218 6566665F 		.ascii	"eff_execute\000"
 6230      65786563 
 6230      75746500 
 6231              	.LASF74:
 6232 0224 62797465 		.ascii	"byte1\000"
 6232      3100
 6233              	.LASF75:
 6234 022a 62797465 		.ascii	"byte2\000"
 6234      3200
 6235              	.LASF137:
 6236 0230 57545F65 		.ascii	"WT_errors\000"
 6236      72726F72 
 6236      7300
 6237              	.LASF139:
 6238 023a 6566665F 		.ascii	"eff_errors\000"
 6238      6572726F 
 6238      727300
 6239              	.LASF76:
 6240 0245 74656D70 		.ascii	"temp1\000"
 6240      3100
 6241              	.LASF77:
 6242 024b 74656D70 		.ascii	"temp2\000"
 6242      3200
 6243              	.LASF78:
 6244 0251 74656D70 		.ascii	"temp3\000"
 6244      3300
 6245              	.LASF107:
 6246 0257 696E6974 		.ascii	"initialize\000"
 6246      69616C69 
 6246      7A6500
 6247              	.LASF97:
 6248 0262 656C626F 		.ascii	"elbow\000"
 6248      7700
 6249              	.LASF44:
 6250 0268 6566665F 		.ascii	"eff_start\000"
 6250      73746172 
 6250      7400
 6251              	.LASF113:
 6252 0272 656C6277 		.ascii	"elbw_cspot\000"
 6252      5F637370 
 6252      6F7400
 6253              	.LASF136:
 6254 027d 42415F65 		.ascii	"BA_errors\000"
 6254      72726F72 
 6254      7300
 6255              	.LASF55:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 137


 6256 0287 43616C69 		.ascii	"CalibrationShoulder\000"
 6256      62726174 
 6256      696F6E53 
 6256      686F756C 
 6256      64657200 
 6257              	.LASF117:
 6258 029b 66735F63 		.ascii	"fs_count\000"
 6258      6F756E74 
 6258      00
 6259              	.LASF61:
 6260 02a4 53495A45 		.ascii	"SIZE\000"
 6260      00
 6261              	.LASF37:
 6262 02a9 73686C64 		.ascii	"shldr_wait\000"
 6262      725F7761 
 6262      697400
 6263              	.LASF123:
 6264 02b4 64617461 		.ascii	"data_array\000"
 6264      5F617272 
 6264      617900
 6265              	.LASF69:
 6266 02bf 6375725F 		.ascii	"cur_pos\000"
 6266      706F7300 
 6267              	.LASF127:
 6268 02c7 57525F46 		.ascii	"WR_FLAG\000"
 6268      4C414700 
 6269              	.LASF16:
 6270 02cf 63686172 		.ascii	"char\000"
 6270      00
 6271              	.LASF10:
 6272 02d4 75696E74 		.ascii	"uint16\000"
 6272      313600
 6273              	.LASF88:
 6274 02db 746F7271 		.ascii	"torque\000"
 6274      756500
 6275              	.LASF12:
 6276 02e2 696E7438 		.ascii	"int8\000"
 6276      00
 6277              	.LASF80:
 6278 02e7 66656564 		.ascii	"feedback\000"
 6278      6261636B 
 6278      00
 6279              	.LASF130:
 6280 02f0 42415F46 		.ascii	"BA_FLAG\000"
 6280      4C414700 
 6281              	.LASF49:
 6282 02f8 4359434C 		.ascii	"CYCLES\000"
 6282      455300
 6283              	.LASF64:
 6284 02ff 6172725F 		.ascii	"arr_pos\000"
 6284      706F7300 
 6285              	.LASF35:
 6286 0307 73686C64 		.ascii	"shldr_init\000"
 6286      725F696E 
 6286      697400
 6287              	.LASF6:
 6288 0312 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 138


 6288      206C6F6E 
 6288      6720696E 
 6288      7400
 6289              	.LASF33:
 6290 0320 73686F75 		.ascii	"shoulder_states\000"
 6290      6C646572 
 6290      5F737461 
 6290      74657300 
 6291              	.LASF60:
 6292 0330 63706F73 		.ascii	"cpos\000"
 6292      00
 6293              	.LASF116:
 6294 0335 57525F63 		.ascii	"WR_cspot\000"
 6294      73706F74 
 6294      00
 6295              	.LASF114:
 6296 033e 656C6277 		.ascii	"elbw_array\000"
 6296      5F617272 
 6296      617900
 6297              	.LASF23:
 6298 0349 77726973 		.ascii	"wristRotate_states\000"
 6298      74526F74 
 6298      6174655F 
 6298      73746174 
 6298      657300
 6299              	.LASF131:
 6300 035c 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6300      43544F52 
 6300      5F464C41 
 6300      4700
 6301              	.LASF121:
 6302 036a 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6302      4C444552 
 6302      5F555050 
 6302      45525F42 
 6302      4F554E44 
 6303              	.LASF43:
 6304 037f 65666665 		.ascii	"effector_states\000"
 6304      63746F72 
 6304      5F737461 
 6304      74657300 
 6305              	.LASF146:
 6306 038f 65666665 		.ascii	"effector_state\000"
 6306      63746F72 
 6306      5F737461 
 6306      746500
 6307              	.LASF50:
 6308 039e 626F756E 		.ascii	"bound\000"
 6308      6400
 6309              	.LASF11:
 6310 03a4 75696E74 		.ascii	"uint32\000"
 6310      333200
 6311              	.LASF111:
 6312 03ab 73686C64 		.ascii	"shldr_cspot\000"
 6312      725F6373 
 6312      706F7400 
 6313              	.LASF126:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 139


 6314 03b7 57545F46 		.ascii	"WT_FLAG\000"
 6314      4C414700 
 6315              	.LASF72:
 6316 03bf 6D616B65 		.ascii	"make_command\000"
 6316      5F636F6D 
 6316      6D616E64 
 6316      00
 6317              	.LASF91:
 6318 03cc 77726973 		.ascii	"wristTilt\000"
 6318      7454696C 
 6318      7400
 6319              	.LASF129:
 6320 03d6 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6320      4C444552 
 6320      5F464C41 
 6320      4700
 6321              	.LASF29:
 6322 03e4 656C6277 		.ascii	"elbw_start\000"
 6322      5F737461 
 6322      727400
 6323              	.LASF141:
 6324 03ef 77726973 		.ascii	"wristTilt_state\000"
 6324      7454696C 
 6324      745F7374 
 6324      61746500 
 6325              	.LASF63:
 6326 03ff 61727261 		.ascii	"array\000"
 6326      7900
 6327              	.LASF101:
 6328 0405 73686C64 		.ascii	"shldr_arr_cspot\000"
 6328      725F6172 
 6328      725F6373 
 6328      706F7400 
 6329              	.LASF104:
 6330 0415 42415F61 		.ascii	"BA_arr_cspot\000"
 6330      72725F63 
 6330      73706F74 
 6330      00
 6331              	.LASF66:
 6332 0422 6368616E 		.ascii	"change\000"
 6332      676500
 6333              	.LASF52:
 6334 0429 6368616E 		.ascii	"channel\000"
 6334      6E656C00 
 6335              	.LASF79:
 6336 0431 706F7446 		.ascii	"potFeedback\000"
 6336      65656462 
 6336      61636B00 
 6337              	.LASF70:
 6338 043d 41525241 		.ascii	"ARRAY_SIZE\000"
 6338      595F5349 
 6338      5A4500
 6339              	.LASF92:
 6340 0448 57545F61 		.ascii	"WT_arr_cspot\000"
 6340      72725F63 
 6340      73706F74 
 6340      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 140


 6341              	.LASF26:
 6342 0455 726F7461 		.ascii	"rotate_control\000"
 6342      74655F63 
 6342      6F6E7472 
 6342      6F6C00
 6343              	.LASF2:
 6344 0464 73686F72 		.ascii	"short int\000"
 6344      7420696E 
 6344      7400
 6345              	.LASF145:
 6346 046e 62617365 		.ascii	"baseAzimuth_state\000"
 6346      417A696D 
 6346      7574685F 
 6346      73746174 
 6346      6500
 6347              	.LASF57:
 6348 0480 61765F61 		.ascii	"av_array\000"
 6348      72726179 
 6348      00
 6349              	.LASF4:
 6350 0489 6C6F6E67 		.ascii	"long int\000"
 6350      20696E74 
 6350      00
 6351              	.LASF20:
 6352 0492 74696C74 		.ascii	"tilt_control\000"
 6352      5F636F6E 
 6352      74726F6C 
 6352      00
 6353              	.LASF83:
 6354 049f 74696D65 		.ascii	"timer_isr\000"
 6354      725F6973 
 6354      7200
 6355              	.LASF138:
 6356 04a9 57525F65 		.ascii	"WR_errors\000"
 6356      72726F72 
 6356      7300
 6357              	.LASF142:
 6358 04b3 77726973 		.ascii	"wristRotate_state\000"
 6358      74526F74 
 6358      6174655F 
 6358      73746174 
 6358      6500
 6359              	.LASF42:
 6360 04c5 42415F77 		.ascii	"BA_wait\000"
 6360      61697400 
 6361              	.LASF22:
 6362 04cd 77726973 		.ascii	"wristTilt_states\000"
 6362      7454696C 
 6362      745F7374 
 6362      61746573 
 6362      00
 6363              	.LASF124:
 6364 04de 77697A6E 		.ascii	"wiznet\000"
 6364      657400
 6365              	.LASF62:
 6366 04e5 63686563 		.ascii	"check_update\000"
 6366      6B5F7570 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 141


 6366      64617465 
 6366      00
 6367              	.LASF89:
 6368 04f2 53657276 		.ascii	"ServoSpeed\000"
 6368      6F537065 
 6368      656400
 6369              	.LASF47:
 6370 04fd 6566665F 		.ascii	"eff_wait\000"
 6370      77616974 
 6370      00
 6371              	.LASF56:
 6372 0506 76656C6F 		.ascii	"velocity\000"
 6372      63697479 
 6372      00
 6373              	.LASF81:
 6374 050f 73656E64 		.ascii	"send_feedback\000"
 6374      5F666565 
 6374      64626163 
 6374      6B00
 6375              	.LASF17:
 6376 051d 73697A65 		.ascii	"sizetype\000"
 6376      74797065 
 6376      00
 6377              	.LASF5:
 6378 0526 6C6F6E67 		.ascii	"long unsigned int\000"
 6378      20756E73 
 6378      69676E65 
 6378      6420696E 
 6378      7400
 6379              	.LASF31:
 6380 0538 656C6277 		.ascii	"elbw_execute\000"
 6380      5F657865 
 6380      63757465 
 6380      00
 6381              	.LASF105:
 6382 0545 62617365 		.ascii	"baseAz_array\000"
 6382      417A5F61 
 6382      72726179 
 6382      00
 6383              	.LASF27:
 6384 0552 726F7461 		.ascii	"rotate_wait\000"
 6384      74655F77 
 6384      61697400 
 6385              	.LASF122:
 6386 055e 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 6386      4C444552 
 6386      5F4C4F57 
 6386      45525F42 
 6386      4F554E44 
 6387              	.LASF34:
 6388 0573 73686C64 		.ascii	"shldr_start\000"
 6388      725F7374 
 6388      61727400 
 6389              	.LASF73:
 6390 057f 696E666F 		.ascii	"info_array\000"
 6390      5F617272 
 6390      617900
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 142


 6391              	.LASF1:
 6392 058a 756E7369 		.ascii	"unsigned char\000"
 6392      676E6564 
 6392      20636861 
 6392      7200
 6393              	.LASF82:
 6394 0598 66696C6C 		.ascii	"fill_data_array\000"
 6394      5F646174 
 6394      615F6172 
 6394      72617900 
 6395              	.LASF94:
 6396 05a8 77726973 		.ascii	"wristRotate\000"
 6396      74526F74 
 6396      61746500 
 6397              	.LASF45:
 6398 05b4 6566665F 		.ascii	"eff_init\000"
 6398      696E6974 
 6398      00
 6399              	.LASF99:
 6400 05bd 656C626F 		.ascii	"elbow_array\000"
 6400      775F6172 
 6400      72617900 
 6401              	.LASF36:
 6402 05c9 73686C64 		.ascii	"shldr_execute\000"
 6402      725F6578 
 6402      65637574 
 6402      6500
 6403              	.LASF119:
 6404 05d7 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 6404      575F5550 
 6404      5045525F 
 6404      424F554E 
 6404      4400
 6405              	.LASF25:
 6406 05e9 726F7461 		.ascii	"rotate_init\000"
 6406      74655F69 
 6406      6E697400 
 6407              	.LASF147:
 6408 05f5 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 6408      4320342E 
 6408      382E3420 
 6408      32303134 
 6408      30353236 
 6409 0628 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 6409      20726576 
 6409      6973696F 
 6409      6E203231 
 6409      31333538 
 6410 065b 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 6410      74643D67 
 6410      6E753939 
 6410      202D6666 
 6410      756E6374 
 6411              	.LASF71:
 6412 067c 636F6D6D 		.ascii	"command\000"
 6412      616E6400 
 6413              	.LASF53:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 143


 6414 0684 64696666 		.ascii	"difference\000"
 6414      6572656E 
 6414      636500
 6415              	.LASF118:
 6416 068f 74656D70 		.ascii	"temp_val\000"
 6416      5F76616C 
 6416      00
 6417              	.LASF0:
 6418 0698 7369676E 		.ascii	"signed char\000"
 6418      65642063 
 6418      68617200 
 6419              	.LASF51:
 6420 06a4 61766572 		.ascii	"average\000"
 6420      61676500 
 6421              	.LASF3:
 6422 06ac 73686F72 		.ascii	"short unsigned int\000"
 6422      7420756E 
 6422      7369676E 
 6422      65642069 
 6422      6E7400
 6423              	.LASF32:
 6424 06bf 656C6277 		.ascii	"elbw_wait\000"
 6424      5F776169 
 6424      7400
 6425              	.LASF108:
 6426 06c9 6D61696E 		.ascii	"main\000"
 6426      00
 6427              	.LASF110:
 6428 06ce 42415F61 		.ascii	"BA_array\000"
 6428      72726179 
 6428      00
 6429              	.LASF21:
 6430 06d7 74696C74 		.ascii	"tilt_wait\000"
 6430      5F776169 
 6430      7400
 6431              	.LASF96:
 6432 06e1 57525F61 		.ascii	"WR_array\000"
 6432      72726179 
 6432      00
 6433              	.LASF9:
 6434 06ea 75696E74 		.ascii	"uint8\000"
 6434      3800
 6435              	.LASF15:
 6436 06f0 646F7562 		.ascii	"double\000"
 6436      6C6500
 6437              	.LASF128:
 6438 06f7 454C424F 		.ascii	"ELBOW_FLAG\000"
 6438      575F464C 
 6438      414700
 6439              	.LASF85:
 6440 0702 73657276 		.ascii	"servoID\000"
 6440      6F494400 
 6441              	.LASF48:
 6442 070a 6973725F 		.ascii	"isr_var\000"
 6442      76617200 
 6443              	.LASF134:
 6444 0712 73686C64 		.ascii	"shldr_errors\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cc6la1a1.s 			page 144


 6444      725F6572 
 6444      726F7273 
 6444      00
 6445              	.LASF87:
 6446 071f 53657453 		.ascii	"SetServoTorque\000"
 6446      6572766F 
 6446      546F7271 
 6446      756500
 6447              	.LASF112:
 6448 072e 73686C64 		.ascii	"shldr_array\000"
 6448      725F6172 
 6448      72617900 
 6449              	.LASF86:
 6450 073a 706F7369 		.ascii	"position\000"
 6450      74696F6E 
 6450      00
 6451              	.LASF148:
 6452 0743 2E5C6D61 		.ascii	".\\main.c\000"
 6452      696E2E63 
 6452      00
 6453              	.LASF30:
 6454 074c 656C6277 		.ascii	"elbw_init\000"
 6454      5F696E69 
 6454      7400
 6455              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	serv_arr_cspot,1,1
  23              		.comm	servo_array,40,4
  24              		.comm	led_arr_cspot,1,1
  25              		.comm	led_array,40,4
  26              		.comm	feedback_count,2,2
  27              		.comm	timerFlag,1,1
  28              		.section	.text.timer_isr,"ax",%progbits
  29              		.align	2
  30              		.global	timer_isr
  31              		.code	16
  32              		.thumb_func
  33              		.type	timer_isr, %function
  34              	timer_isr:
  35              	.LFB33:
  36              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define DATA_ARRAY_SIZE 14
  14:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  15:.\main.c      **** 
  16:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  17:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  18:.\main.c      **** 
  19:.\main.c      **** #define NUM_OF_SM 2
  20:.\main.c      **** uint8 fin_exec; //counts
  21:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 2


  22:.\main.c      **** #define TEST_ARRAY_SIZE 10
  23:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  24:.\main.c      **** 
  25:.\main.c      **** #define SERV_ARR_SIZE 20
  26:.\main.c      **** uint8 serv_arr_cspot;
  27:.\main.c      **** uint16 servo_array[SERV_ARR_SIZE];
  28:.\main.c      **** //uint8 serv_avg_count = 0;
  29:.\main.c      **** 
  30:.\main.c      **** #define LED_ARR_SIZE 20
  31:.\main.c      **** uint8 led_arr_cspot;
  32:.\main.c      **** uint16 led_array[LED_ARR_SIZE];
  33:.\main.c      **** 
  34:.\main.c      **** uint16 feedback_count;
  35:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  36:.\main.c      **** 
  37:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  38:.\main.c      **** ///set to the time of the longest path for our code
  39:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  40:.\main.c      **** CY_ISR(timer_isr)
  41:.\main.c      **** {
  37              		.loc 1 41 0
  38              		.cfi_startproc
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  42:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  47              		.loc 1 42 0
  48 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  49 000a 031C     		mov	r3, r0
  50 000c 7B60     		str	r3, [r7, #4]
  43:.\main.c      ****     timerFlag = 1;
  51              		.loc 1 43 0
  52 000e 054B     		ldr	r3, .L2
  53 0010 0122     		mov	r2, #1
  54 0012 1A70     		strb	r2, [r3]
  44:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  55              		.loc 1 44 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 181C     		mov	r0, r3
  58 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  45:.\main.c      **** }
  59              		.loc 1 45 0
  60 001c BD46     		mov	sp, r7
  61 001e 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0020 80BD     		pop	{r7, pc}
  64              	.L3:
  65 0022 C046     		.align	2
  66              	.L2:
  67 0024 00000000 		.word	timerFlag
  68              		.cfi_endproc
  69              	.LFE33:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 3


  70              		.size	timer_isr, .-timer_isr
  71              		.section	.text.fill_data_array,"ax",%progbits
  72              		.align	2
  73              		.global	fill_data_array
  74              		.code	16
  75              		.thumb_func
  76              		.type	fill_data_array, %function
  77              	fill_data_array:
  78              	.LFB34:
  46:.\main.c      **** 
  47:.\main.c      **** 
  48:.\main.c      **** //Funtion declarations/definitions
  49:.\main.c      **** //TODO do we need to make a header for good practice?
  50:.\main.c      **** 
  51:.\main.c      **** //---------------------------------------------------
  52:.\main.c      **** //    Function stubs for the header
  53:.\main.c      **** //---------------------------------------------------
  54:.\main.c      **** void fill_data_array();
  55:.\main.c      **** void baseAzimuth();
  56:.\main.c      **** void shoulder();
  57:.\main.c      **** void elbow();
  58:.\main.c      **** void wristTilt();
  59:.\main.c      **** void wristRotate();
  60:.\main.c      **** void send_feedback();
  61:.\main.c      **** 
  62:.\main.c      **** void servo();
  63:.\main.c      **** void servo1();
  64:.\main.c      **** 
  65:.\main.c      **** void led();
  66:.\main.c      **** void led1();
  67:.\main.c      **** 
  68:.\main.c      **** void fill_data_array1();
  69:.\main.c      **** 
  70:.\main.c      **** //--------------------------------------------------- END Function Stubs
  71:.\main.c      **** 
  72:.\main.c      **** 
  73:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  74:.\main.c      **** void fill_data_array() //maybe take param: uint8* array
  75:.\main.c      **** {
  79              		.loc 1 75 0
  80              		.cfi_startproc
  81 0000 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 82B0     		sub	sp, sp, #8
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  76:.\main.c      ****     
  77:.\main.c      ****     //read one byte at a time
  78:.\main.c      ****     uint8 c = 0; //UART_1_UartGetChar();
  89              		.loc 1 78 0
  90 0006 FB1D     		add	r3, r7, #7
  91 0008 0022     		mov	r2, #0
  92 000a 1A70     		strb	r2, [r3]
  79:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 4


  80:.\main.c      **** 
  81:.\main.c      ****     if(c == 'q'){
  93              		.loc 1 81 0
  94 000c FB1D     		add	r3, r7, #7
  95 000e 1B78     		ldrb	r3, [r3]
  96 0010 712B     		cmp	r3, #113
  97 0012 04D1     		bne	.L5
  82:.\main.c      ****         data_array[1] = 2000;
  98              		.loc 1 82 0
  99 0014 354B     		ldr	r3, .L18
 100 0016 FA22     		mov	r2, #250
 101 0018 D200     		lsl	r2, r2, #3
 102 001a 5A80     		strh	r2, [r3, #2]
 103 001c 62E0     		b	.L4
 104              	.L5:
  83:.\main.c      ****     }
  84:.\main.c      ****     else if(c == 'w'){
 105              		.loc 1 84 0
 106 001e FB1D     		add	r3, r7, #7
 107 0020 1B78     		ldrb	r3, [r3]
 108 0022 772B     		cmp	r3, #119
 109 0024 03D1     		bne	.L7
  85:.\main.c      ****         data_array[1] = 1750;
 110              		.loc 1 85 0
 111 0026 314B     		ldr	r3, .L18
 112 0028 314A     		ldr	r2, .L18+4
 113 002a 5A80     		strh	r2, [r3, #2]
 114 002c 5AE0     		b	.L4
 115              	.L7:
  86:.\main.c      ****     }
  87:.\main.c      ****     else if(c == 'e'){
 116              		.loc 1 87 0
 117 002e FB1D     		add	r3, r7, #7
 118 0030 1B78     		ldrb	r3, [r3]
 119 0032 652B     		cmp	r3, #101
 120 0034 03D1     		bne	.L8
  88:.\main.c      ****         data_array[1] = 1500;
 121              		.loc 1 88 0
 122 0036 2D4B     		ldr	r3, .L18
 123 0038 2E4A     		ldr	r2, .L18+8
 124 003a 5A80     		strh	r2, [r3, #2]
 125 003c 52E0     		b	.L4
 126              	.L8:
  89:.\main.c      ****     }
  90:.\main.c      ****     else if(c == 'r'){
 127              		.loc 1 90 0
 128 003e FB1D     		add	r3, r7, #7
 129 0040 1B78     		ldrb	r3, [r3]
 130 0042 722B     		cmp	r3, #114
 131 0044 03D1     		bne	.L9
  91:.\main.c      ****         data_array[1] = 1250;
 132              		.loc 1 91 0
 133 0046 294B     		ldr	r3, .L18
 134 0048 2B4A     		ldr	r2, .L18+12
 135 004a 5A80     		strh	r2, [r3, #2]
 136 004c 4AE0     		b	.L4
 137              	.L9:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 5


  92:.\main.c      ****     }
  93:.\main.c      ****     else if(c == 't'){
 138              		.loc 1 93 0
 139 004e FB1D     		add	r3, r7, #7
 140 0050 1B78     		ldrb	r3, [r3]
 141 0052 742B     		cmp	r3, #116
 142 0054 04D1     		bne	.L10
  94:.\main.c      ****         data_array[1] = 1000;
 143              		.loc 1 94 0
 144 0056 254B     		ldr	r3, .L18
 145 0058 FA22     		mov	r2, #250
 146 005a 9200     		lsl	r2, r2, #2
 147 005c 5A80     		strh	r2, [r3, #2]
 148 005e 41E0     		b	.L4
 149              	.L10:
  95:.\main.c      ****     }    
  96:.\main.c      ****     else if(c == '1'){
 150              		.loc 1 96 0
 151 0060 FB1D     		add	r3, r7, #7
 152 0062 1B78     		ldrb	r3, [r3]
 153 0064 312B     		cmp	r3, #49
 154 0066 04D1     		bne	.L11
  97:.\main.c      ****         data_array[2] = 1000;
 155              		.loc 1 97 0
 156 0068 204B     		ldr	r3, .L18
 157 006a FA22     		mov	r2, #250
 158 006c 9200     		lsl	r2, r2, #2
 159 006e 9A80     		strh	r2, [r3, #4]
 160 0070 38E0     		b	.L4
 161              	.L11:
  98:.\main.c      ****     }
  99:.\main.c      ****     else if(c == '2'){
 162              		.loc 1 99 0
 163 0072 FB1D     		add	r3, r7, #7
 164 0074 1B78     		ldrb	r3, [r3]
 165 0076 322B     		cmp	r3, #50
 166 0078 03D1     		bne	.L12
 100:.\main.c      ****         data_array[2] = 5000;
 167              		.loc 1 100 0
 168 007a 1C4B     		ldr	r3, .L18
 169 007c 1F4A     		ldr	r2, .L18+16
 170 007e 9A80     		strh	r2, [r3, #4]
 171 0080 30E0     		b	.L4
 172              	.L12:
 101:.\main.c      ****     }
 102:.\main.c      ****     else if(c == '3'){
 173              		.loc 1 102 0
 174 0082 FB1D     		add	r3, r7, #7
 175 0084 1B78     		ldrb	r3, [r3]
 176 0086 332B     		cmp	r3, #51
 177 0088 03D1     		bne	.L13
 103:.\main.c      ****         data_array[2] = 10000;
 178              		.loc 1 103 0
 179 008a 184B     		ldr	r3, .L18
 180 008c 1C4A     		ldr	r2, .L18+20
 181 008e 9A80     		strh	r2, [r3, #4]
 182 0090 28E0     		b	.L4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 6


 183              	.L13:
 104:.\main.c      ****     }
 105:.\main.c      ****     else if(c == '4'){
 184              		.loc 1 105 0
 185 0092 FB1D     		add	r3, r7, #7
 186 0094 1B78     		ldrb	r3, [r3]
 187 0096 342B     		cmp	r3, #52
 188 0098 03D1     		bne	.L14
 106:.\main.c      ****         data_array[2] = 15000;
 189              		.loc 1 106 0
 190 009a 144B     		ldr	r3, .L18
 191 009c 194A     		ldr	r2, .L18+24
 192 009e 9A80     		strh	r2, [r3, #4]
 193 00a0 20E0     		b	.L4
 194              	.L14:
 107:.\main.c      ****     }
 108:.\main.c      ****     else if(c == '5'){
 195              		.loc 1 108 0
 196 00a2 FB1D     		add	r3, r7, #7
 197 00a4 1B78     		ldrb	r3, [r3]
 198 00a6 352B     		cmp	r3, #53
 199 00a8 03D1     		bne	.L15
 109:.\main.c      ****         data_array[2] =19000;
 200              		.loc 1 109 0
 201 00aa 104B     		ldr	r3, .L18
 202 00ac 164A     		ldr	r2, .L18+28
 203 00ae 9A80     		strh	r2, [r3, #4]
 204 00b0 18E0     		b	.L4
 205              	.L15:
 110:.\main.c      ****     }    
 111:.\main.c      ****     else if(c == 'j'){
 206              		.loc 1 111 0
 207 00b2 FB1D     		add	r3, r7, #7
 208 00b4 1B78     		ldrb	r3, [r3]
 209 00b6 6A2B     		cmp	r3, #106
 210 00b8 04D1     		bne	.L16
 112:.\main.c      ****         data_array[3] = 1000;
 211              		.loc 1 112 0
 212 00ba 0C4B     		ldr	r3, .L18
 213 00bc FA22     		mov	r2, #250
 214 00be 9200     		lsl	r2, r2, #2
 215 00c0 DA80     		strh	r2, [r3, #6]
 216 00c2 0FE0     		b	.L4
 217              	.L16:
 113:.\main.c      ****     }
 114:.\main.c      ****     else if(c == 'k'){
 218              		.loc 1 114 0
 219 00c4 FB1D     		add	r3, r7, #7
 220 00c6 1B78     		ldrb	r3, [r3]
 221 00c8 6B2B     		cmp	r3, #107
 222 00ca 03D1     		bne	.L17
 115:.\main.c      ****         data_array[3] = 1500;
 223              		.loc 1 115 0
 224 00cc 074B     		ldr	r3, .L18
 225 00ce 094A     		ldr	r2, .L18+8
 226 00d0 DA80     		strh	r2, [r3, #6]
 227 00d2 07E0     		b	.L4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 7


 228              	.L17:
 116:.\main.c      ****     }
 117:.\main.c      ****     else if(c == 'l'){
 229              		.loc 1 117 0
 230 00d4 FB1D     		add	r3, r7, #7
 231 00d6 1B78     		ldrb	r3, [r3]
 232 00d8 6C2B     		cmp	r3, #108
 233 00da 03D1     		bne	.L4
 118:.\main.c      ****         data_array[3] =2000;
 234              		.loc 1 118 0
 235 00dc 034B     		ldr	r3, .L18
 236 00de FA22     		mov	r2, #250
 237 00e0 D200     		lsl	r2, r2, #3
 238 00e2 DA80     		strh	r2, [r3, #6]
 239              	.L4:
 119:.\main.c      ****     }    
 120:.\main.c      **** 
 121:.\main.c      **** }
 240              		.loc 1 121 0
 241 00e4 BD46     		mov	sp, r7
 242 00e6 02B0     		add	sp, sp, #8
 243              		@ sp needed
 244 00e8 80BD     		pop	{r7, pc}
 245              	.L19:
 246 00ea C046     		.align	2
 247              	.L18:
 248 00ec 00000000 		.word	data_array
 249 00f0 D6060000 		.word	1750
 250 00f4 DC050000 		.word	1500
 251 00f8 E2040000 		.word	1250
 252 00fc 88130000 		.word	5000
 253 0100 10270000 		.word	10000
 254 0104 983A0000 		.word	15000
 255 0108 384A0000 		.word	19000
 256              		.cfi_endproc
 257              	.LFE34:
 258              		.size	fill_data_array, .-fill_data_array
 259              		.section	.text.fill_data_array1,"ax",%progbits
 260              		.align	2
 261              		.global	fill_data_array1
 262              		.code	16
 263              		.thumb_func
 264              		.type	fill_data_array1, %function
 265              	fill_data_array1:
 266              	.LFB35:
 122:.\main.c      **** 
 123:.\main.c      **** void fill_data_array1()
 124:.\main.c      **** {
 267              		.loc 1 124 0
 268              		.cfi_startproc
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 82B0     		sub	sp, sp, #8
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 8


 276              		.cfi_def_cfa_register 7
 125:.\main.c      ****     uint8 i = 0;
 277              		.loc 1 125 0
 278 0006 FB1D     		add	r3, r7, #7
 279 0008 0022     		mov	r2, #0
 280 000a 1A70     		strb	r2, [r3]
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 281              		.loc 1 126 0
 282 000c FB1D     		add	r3, r7, #7
 283 000e 0022     		mov	r2, #0
 284 0010 1A70     		strb	r2, [r3]
 285 0012 0FE0     		b	.L21
 286              	.L22:
 127:.\main.c      ****     {
 128:.\main.c      ****         data_array[i] = test_array[i];
 287              		.loc 1 128 0 discriminator 2
 288 0014 FB1D     		add	r3, r7, #7
 289 0016 1A78     		ldrb	r2, [r3]
 290 0018 FB1D     		add	r3, r7, #7
 291 001a 1978     		ldrb	r1, [r3]
 292 001c 094B     		ldr	r3, .L23
 293 001e 4900     		lsl	r1, r1, #1
 294 0020 CB5A     		ldrh	r3, [r1, r3]
 295 0022 99B2     		uxth	r1, r3
 296 0024 084B     		ldr	r3, .L23+4
 297 0026 5200     		lsl	r2, r2, #1
 298 0028 D152     		strh	r1, [r2, r3]
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 299              		.loc 1 126 0 discriminator 2
 300 002a FB1D     		add	r3, r7, #7
 301 002c 1A78     		ldrb	r2, [r3]
 302 002e FB1D     		add	r3, r7, #7
 303 0030 0132     		add	r2, r2, #1
 304 0032 1A70     		strb	r2, [r3]
 305              	.L21:
 126:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 306              		.loc 1 126 0 is_stmt 0 discriminator 1
 307 0034 FB1D     		add	r3, r7, #7
 308 0036 1B78     		ldrb	r3, [r3]
 309 0038 092B     		cmp	r3, #9
 310 003a EBD9     		bls	.L22
 129:.\main.c      ****     }
 130:.\main.c      **** }
 311              		.loc 1 130 0 is_stmt 1
 312 003c BD46     		mov	sp, r7
 313 003e 02B0     		add	sp, sp, #8
 314              		@ sp needed
 315 0040 80BD     		pop	{r7, pc}
 316              	.L24:
 317 0042 C046     		.align	2
 318              	.L23:
 319 0044 00000000 		.word	test_array
 320 0048 00000000 		.word	data_array
 321              		.cfi_endproc
 322              	.LFE35:
 323              		.size	fill_data_array1, .-fill_data_array1
 324              		.section	.text.baseAzimuth,"ax",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 9


 325              		.align	2
 326              		.global	baseAzimuth
 327              		.code	16
 328              		.thumb_func
 329              		.type	baseAzimuth, %function
 330              	baseAzimuth:
 331              	.LFB36:
 131:.\main.c      **** 
 132:.\main.c      **** //control the turret
 133:.\main.c      **** void baseAzimuth()
 134:.\main.c      **** {
 332              		.loc 1 134 0
 333              		.cfi_startproc
 334 0000 80B5     		push	{r7, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 00AF     		add	r7, sp, #0
 339              		.cfi_def_cfa_register 7
 135:.\main.c      ****     //take instruction from data_array
 136:.\main.c      ****     //smooth input
 137:.\main.c      ****     //actuate the turret using PWM
 138:.\main.c      **** }
 340              		.loc 1 138 0
 341 0004 BD46     		mov	sp, r7
 342              		@ sp needed
 343 0006 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE36:
 346              		.size	baseAzimuth, .-baseAzimuth
 347              		.comm	shldr_state,1,1
 348              		.section	.text.shoulder,"ax",%progbits
 349              		.align	2
 350              		.global	shoulder
 351              		.code	16
 352              		.thumb_func
 353              		.type	shoulder, %function
 354              	shoulder:
 355              	.LFB37:
 139:.\main.c      **** 
 140:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
 141:.\main.c      **** //control the shoulder
 142:.\main.c      **** void shoulder()
 143:.\main.c      **** {
 356              		.loc 1 143 0
 357              		.cfi_startproc
 358 0000 80B5     		push	{r7, lr}
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 00AF     		add	r7, sp, #0
 363              		.cfi_def_cfa_register 7
 144:.\main.c      ****     //take instruction from data_array
 145:.\main.c      ****     //smooth input
 146:.\main.c      ****     //actuate the shoulder using PWM
 147:.\main.c      ****     //get feedback
 148:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 10


 149:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 150:.\main.c      ****     //switch statement for state actions
 151:.\main.c      **** 		//start
 152:.\main.c      **** 			//break
 153:.\main.c      **** 		//initialize
 154:.\main.c      **** 			//create smoothing array
 155:.\main.c      **** 		//feedback
 156:.\main.c      **** 			//read feedback
 157:.\main.c      **** 		//execute
 158:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 159:.\main.c      **** 			//calculate average of value in array
 160:.\main.c      ****     
 161:.\main.c      ****     switch(shldr_state)
 364              		.loc 1 161 0
 365 0004 0E4B     		ldr	r3, .L34
 366 0006 1B78     		ldrb	r3, [r3]
 367 0008 012B     		cmp	r3, #1
 368 000a 0CD0     		beq	.L28
 369 000c 02DC     		bgt	.L29
 370 000e 002B     		cmp	r3, #0
 371 0010 05D0     		beq	.L30
 372 0012 12E0     		b	.L26
 373              	.L29:
 374 0014 022B     		cmp	r3, #2
 375 0016 0FD0     		beq	.L33
 376 0018 032B     		cmp	r3, #3
 377 001a 08D0     		beq	.L32
 378 001c 0DE0     		b	.L26
 379              	.L30:
 162:.\main.c      ****     {//switch staatement for state transitions
 163:.\main.c      **** 		case shldr_start: //start
 164:.\main.c      **** 			//next state will be init
 165:.\main.c      ****             shldr_state = shldr_init;
 380              		.loc 1 165 0
 381 001e 084B     		ldr	r3, .L34
 382 0020 0122     		mov	r2, #1
 383 0022 1A70     		strb	r2, [r3]
 166:.\main.c      ****             break;
 384              		.loc 1 166 0
 385 0024 09E0     		b	.L26
 386              	.L28:
 167:.\main.c      ****         
 168:.\main.c      **** 		case shldr_init: //initialize
 169:.\main.c      **** 			//next state will be feedback
 170:.\main.c      ****             shldr_state = shldr_fdbk;
 387              		.loc 1 170 0
 388 0026 064B     		ldr	r3, .L34
 389 0028 0222     		mov	r2, #2
 390 002a 1A70     		strb	r2, [r3]
 171:.\main.c      ****             break;
 391              		.loc 1 171 0
 392 002c 05E0     		b	.L26
 393              	.L32:
 172:.\main.c      ****         
 173:.\main.c      **** 		case shldr_fdbk://feedback
 174:.\main.c      **** 			//if position ok relative to average
 175:.\main.c      **** 				//execute
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 11


 176:.\main.c      **** 			//else if not ok
 177:.\main.c      **** 				//report problem
 178:.\main.c      ****             break;
 179:.\main.c      **** 		case shldr_exe://execute
 180:.\main.c      **** 			//next state will be report
 181:.\main.c      ****             shldr_state = shldr_fdbk;
 394              		.loc 1 181 0
 395 002e 044B     		ldr	r3, .L34
 396 0030 0222     		mov	r2, #2
 397 0032 1A70     		strb	r2, [r3]
 182:.\main.c      ****             break;
 398              		.loc 1 182 0
 399 0034 C046     		mov	r8, r8
 400 0036 00E0     		b	.L26
 401              	.L33:
 178:.\main.c      ****             break;
 402              		.loc 1 178 0
 403 0038 C046     		mov	r8, r8
 404              	.L26:
 183:.\main.c      ****     }
 184:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 185:.\main.c      **** }
 405              		.loc 1 185 0
 406 003a BD46     		mov	sp, r7
 407              		@ sp needed
 408 003c 80BD     		pop	{r7, pc}
 409              	.L35:
 410 003e C046     		.align	2
 411              	.L34:
 412 0040 00000000 		.word	shldr_state
 413              		.cfi_endproc
 414              	.LFE37:
 415              		.size	shoulder, .-shoulder
 416              		.section	.text.elbow,"ax",%progbits
 417              		.align	2
 418              		.global	elbow
 419              		.code	16
 420              		.thumb_func
 421              		.type	elbow, %function
 422              	elbow:
 423              	.LFB38:
 186:.\main.c      **** 
 187:.\main.c      **** //control the elbow
 188:.\main.c      **** void elbow()
 189:.\main.c      **** {
 424              		.loc 1 189 0
 425              		.cfi_startproc
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 190:.\main.c      ****     //take instruction from data_array
 191:.\main.c      ****     //smooth input
 192:.\main.c      ****     //actuate the elbow using PWM
 193:.\main.c      ****     //get feedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 12


 194:.\main.c      **** }
 432              		.loc 1 194 0
 433 0004 BD46     		mov	sp, r7
 434              		@ sp needed
 435 0006 80BD     		pop	{r7, pc}
 436              		.cfi_endproc
 437              	.LFE38:
 438              		.size	elbow, .-elbow
 439              		.comm	wristTilt_state,1,1
 440              		.section	.text.wristTilt,"ax",%progbits
 441              		.align	2
 442              		.global	wristTilt
 443              		.code	16
 444              		.thumb_func
 445              		.type	wristTilt, %function
 446              	wristTilt:
 447              	.LFB39:
 195:.\main.c      **** 
 196:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 197:.\main.c      **** //control the tilting motion of the wrist
 198:.\main.c      **** void wristTilt()
 199:.\main.c      **** {
 448              		.loc 1 199 0
 449              		.cfi_startproc
 450 0000 80B5     		push	{r7, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 7, -8
 453              		.cfi_offset 14, -4
 454 0002 00AF     		add	r7, sp, #0
 455              		.cfi_def_cfa_register 7
 200:.\main.c      ****     // Overview
 201:.\main.c      ****     //take instruction from data_array
 202:.\main.c      ****     //smooth input
 203:.\main.c      ****     //actuate the tilting using UART
 204:.\main.c      ****     //get feedback
 205:.\main.c      **** 
 206:.\main.c      ****     //-------------------------- 
 207:.\main.c      ****     // Dynamixel Servo specific
 208:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 209:.\main.c      ****     // TODO: Set the desired position
 210:.\main.c      **** 
 211:.\main.c      ****     //--------------------------
 212:.\main.c      ****     // State machine
 213:.\main.c      ****     
 214:.\main.c      ****         // Action
 215:.\main.c      ****     switch(wristTilt_state)
 456              		.loc 1 215 0
 457 0004 0F4B     		ldr	r3, .L53
 458 0006 1B78     		ldrb	r3, [r3]
 459 0008 012B     		cmp	r3, #1
 460 000a 06D0     		beq	.L50
 461 000c 07DC     		bgt	.L51
 462 000e 002B     		cmp	r3, #0
 463 0010 06D1     		bne	.L38
 216:.\main.c      ****     {
 217:.\main.c      ****         case tilt_init:
 218:.\main.c      ****             wristTilt_state = tilt_start;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 13


 464              		.loc 1 218 0
 465 0012 0C4B     		ldr	r3, .L53
 466 0014 0122     		mov	r2, #1
 467 0016 1A70     		strb	r2, [r3]
 219:.\main.c      ****             break;
 468              		.loc 1 219 0
 469 0018 02E0     		b	.L38
 470              	.L50:
 220:.\main.c      ****         case tilt_start:
 221:.\main.c      ****             // Set the torque - this is a one time thing
 222:.\main.c      ****             // Set the speed - I think this is a one time thing
 223:.\main.c      ****             break;
 471              		.loc 1 223 0
 472 001a C046     		mov	r8, r8
 473 001c 00E0     		b	.L38
 474              	.L51:
 224:.\main.c      ****         case tilt_control:
 225:.\main.c      ****             break;
 475              		.loc 1 225 0
 476 001e C046     		mov	r8, r8
 477              	.L38:
 226:.\main.c      ****         case tilt_feedback:
 227:.\main.c      ****             break;
 228:.\main.c      ****     }
 229:.\main.c      ****         // Transistion
 230:.\main.c      ****     switch(wristTilt_state)
 478              		.loc 1 230 0
 479 0020 084B     		ldr	r3, .L53
 480 0022 1B78     		ldrb	r3, [r3]
 481 0024 012B     		cmp	r3, #1
 482 0026 06D0     		beq	.L45
 483 0028 09DC     		bgt	.L52
 484 002a 002B     		cmp	r3, #0
 485 002c 08D1     		bne	.L37
 231:.\main.c      ****     {
 232:.\main.c      ****         case tilt_init:
 233:.\main.c      ****             wristTilt_state = tilt_start;
 486              		.loc 1 233 0
 487 002e 054B     		ldr	r3, .L53
 488 0030 0122     		mov	r2, #1
 489 0032 1A70     		strb	r2, [r3]
 234:.\main.c      ****             break;
 490              		.loc 1 234 0
 491 0034 04E0     		b	.L37
 492              	.L45:
 235:.\main.c      ****         case tilt_start:
 236:.\main.c      ****             wristTilt_state = tilt_control;
 493              		.loc 1 236 0
 494 0036 034B     		ldr	r3, .L53
 495 0038 0222     		mov	r2, #2
 496 003a 1A70     		strb	r2, [r3]
 237:.\main.c      ****             break;
 497              		.loc 1 237 0
 498 003c 00E0     		b	.L37
 499              	.L52:
 238:.\main.c      ****         case tilt_control:
 239:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 14


 500              		.loc 1 239 0
 501 003e C046     		mov	r8, r8
 502              	.L37:
 240:.\main.c      ****         case tilt_feedback:
 241:.\main.c      ****             break;
 242:.\main.c      ****     }
 243:.\main.c      **** }
 503              		.loc 1 243 0
 504 0040 BD46     		mov	sp, r7
 505              		@ sp needed
 506 0042 80BD     		pop	{r7, pc}
 507              	.L54:
 508              		.align	2
 509              	.L53:
 510 0044 00000000 		.word	wristTilt_state
 511              		.cfi_endproc
 512              	.LFE39:
 513              		.size	wristTilt, .-wristTilt
 514              		.comm	wristRotate_state,1,1
 515              		.section	.text.wristRotate,"ax",%progbits
 516              		.align	2
 517              		.global	wristRotate
 518              		.code	16
 519              		.thumb_func
 520              		.type	wristRotate, %function
 521              	wristRotate:
 522              	.LFB40:
 244:.\main.c      **** 
 245:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 246:.\main.c      **** //control the rotating motion of the wrist
 247:.\main.c      **** void wristRotate()
 248:.\main.c      **** {
 523              		.loc 1 248 0
 524              		.cfi_startproc
 525 0000 80B5     		push	{r7, lr}
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 7, -8
 528              		.cfi_offset 14, -4
 529 0002 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 249:.\main.c      ****     //Overview
 250:.\main.c      ****     //take instruction from data_array
 251:.\main.c      ****     //smooth input
 252:.\main.c      ****     //actuate the tilting using UART
 253:.\main.c      ****     //get feedback
 254:.\main.c      **** 
 255:.\main.c      ****     //-------------------------- 
 256:.\main.c      ****     // Dynamixel Servo specific
 257:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 258:.\main.c      ****     // TODO: Set the desired position
 259:.\main.c      **** 
 260:.\main.c      ****     //--------------------------
 261:.\main.c      ****     // State machine
 262:.\main.c      ****     
 263:.\main.c      ****         // Action
 264:.\main.c      ****     switch(wristRotate_state)
 531              		.loc 1 264 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 15


 532 0004 0F4B     		ldr	r3, .L71
 533 0006 1B78     		ldrb	r3, [r3]
 534 0008 012B     		cmp	r3, #1
 535 000a 06D0     		beq	.L68
 536 000c 07DC     		bgt	.L69
 537 000e 002B     		cmp	r3, #0
 538 0010 06D1     		bne	.L56
 265:.\main.c      ****     {
 266:.\main.c      ****         case rotate_init:
 267:.\main.c      ****             wristRotate_state = rotate_start;
 539              		.loc 1 267 0
 540 0012 0C4B     		ldr	r3, .L71
 541 0014 0122     		mov	r2, #1
 542 0016 1A70     		strb	r2, [r3]
 268:.\main.c      ****             break;
 543              		.loc 1 268 0
 544 0018 02E0     		b	.L56
 545              	.L68:
 269:.\main.c      ****         case rotate_start:
 270:.\main.c      ****             // Set the torque - this is a one time thing
 271:.\main.c      ****             // Set the speed - I think this is a one time thing
 272:.\main.c      ****             break;
 546              		.loc 1 272 0
 547 001a C046     		mov	r8, r8
 548 001c 00E0     		b	.L56
 549              	.L69:
 273:.\main.c      ****         case rotate_control:
 274:.\main.c      ****             break;
 550              		.loc 1 274 0
 551 001e C046     		mov	r8, r8
 552              	.L56:
 275:.\main.c      ****         case rotate_feedback:
 276:.\main.c      ****             break;
 277:.\main.c      ****     }
 278:.\main.c      ****         // Transistion
 279:.\main.c      ****     switch(wristRotate_state)
 553              		.loc 1 279 0
 554 0020 084B     		ldr	r3, .L71
 555 0022 1B78     		ldrb	r3, [r3]
 556 0024 012B     		cmp	r3, #1
 557 0026 06D0     		beq	.L63
 558 0028 09DC     		bgt	.L70
 559 002a 002B     		cmp	r3, #0
 560 002c 08D1     		bne	.L55
 280:.\main.c      ****     {
 281:.\main.c      ****         case rotate_init:
 282:.\main.c      ****             wristRotate_state = rotate_start;
 561              		.loc 1 282 0
 562 002e 054B     		ldr	r3, .L71
 563 0030 0122     		mov	r2, #1
 564 0032 1A70     		strb	r2, [r3]
 283:.\main.c      ****             break;
 565              		.loc 1 283 0
 566 0034 04E0     		b	.L55
 567              	.L63:
 284:.\main.c      ****         case rotate_start:
 285:.\main.c      ****             wristRotate_state = rotate_control;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 16


 568              		.loc 1 285 0
 569 0036 034B     		ldr	r3, .L71
 570 0038 0222     		mov	r2, #2
 571 003a 1A70     		strb	r2, [r3]
 286:.\main.c      ****             break;
 572              		.loc 1 286 0
 573 003c 00E0     		b	.L55
 574              	.L70:
 287:.\main.c      ****         case rotate_control:
 288:.\main.c      ****             break;
 575              		.loc 1 288 0
 576 003e C046     		mov	r8, r8
 577              	.L55:
 289:.\main.c      ****         case rotate_feedback:
 290:.\main.c      ****             break;
 291:.\main.c      ****     }
 292:.\main.c      **** }
 578              		.loc 1 292 0
 579 0040 BD46     		mov	sp, r7
 580              		@ sp needed
 581 0042 80BD     		pop	{r7, pc}
 582              	.L72:
 583              		.align	2
 584              	.L71:
 585 0044 00000000 		.word	wristRotate_state
 586              		.cfi_endproc
 587              	.LFE40:
 588              		.size	wristRotate, .-wristRotate
 589              		.section	.text.send_feedback,"ax",%progbits
 590              		.align	2
 591              		.global	send_feedback
 592              		.code	16
 593              		.thumb_func
 594              		.type	send_feedback, %function
 595              	send_feedback:
 596              	.LFB41:
 293:.\main.c      **** 
 294:.\main.c      **** void send_feedback()
 295:.\main.c      **** {
 597              		.loc 1 295 0
 598              		.cfi_startproc
 599 0000 80B5     		push	{r7, lr}
 600              		.cfi_def_cfa_offset 8
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 296:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 297:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 298:.\main.c      ****     //TODO define system state
 299:.\main.c      ****     //send packet via serial to wiznet
 300:.\main.c      **** }
 605              		.loc 1 300 0
 606 0004 BD46     		mov	sp, r7
 607              		@ sp needed
 608 0006 80BD     		pop	{r7, pc}
 609              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 17


 610              	.LFE41:
 611              		.size	send_feedback, .-send_feedback
 612              		.comm	led_state,1,1
 613              		.section	.text.led,"ax",%progbits
 614              		.align	2
 615              		.global	led
 616              		.code	16
 617              		.thumb_func
 618              		.type	led, %function
 619              	led:
 620              	.LFB42:
 301:.\main.c      **** 
 302:.\main.c      **** enum led_states {l_start,l_different,l_wait} led_state;
 303:.\main.c      **** void led()
 304:.\main.c      **** {
 621              		.loc 1 304 0
 622              		.cfi_startproc
 623 0000 80B5     		push	{r7, lr}
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 82B0     		sub	sp, sp, #8
 628              		.cfi_def_cfa_offset 16
 629 0004 00AF     		add	r7, sp, #0
 630              		.cfi_def_cfa_register 7
 305:.\main.c      ****     uint16 old = 0;
 631              		.loc 1 305 0
 632 0006 BB1D     		add	r3, r7, #6
 633 0008 0022     		mov	r2, #0
 634 000a 1A80     		strh	r2, [r3]
 306:.\main.c      ****     switch(led_state)
 635              		.loc 1 306 0
 636 000c 1C4B     		ldr	r3, .L88
 637 000e 1B78     		ldrb	r3, [r3]
 638 0010 012B     		cmp	r3, #1
 639 0012 09D1     		bne	.L87
 640              	.LBB2:
 307:.\main.c      ****     {
 308:.\main.c      ****         case l_start:
 309:.\main.c      ****             break;
 310:.\main.c      ****         
 311:.\main.c      ****         case l_different:
 312:.\main.c      ****             PWM_1_WriteCompare1(data_array[1]);
 641              		.loc 1 312 0
 642 0014 1B4B     		ldr	r3, .L88+4
 643 0016 5B88     		ldrh	r3, [r3, #2]
 644 0018 181C     		mov	r0, r3
 645 001a FFF7FEFF 		bl	PWM_1_WriteCompare1
 313:.\main.c      ****             old = data_array[1];
 646              		.loc 1 313 0
 647 001e BB1D     		add	r3, r7, #6
 648 0020 184A     		ldr	r2, .L88+4
 649 0022 5288     		ldrh	r2, [r2, #2]
 650 0024 1A80     		strh	r2, [r3]
 314:.\main.c      ****             break;
 651              		.loc 1 314 0
 652 0026 00E0     		b	.L75
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 18


 653              	.L87:
 315:.\main.c      ****             
 316:.\main.c      ****         case l_wait:
 317:.\main.c      ****             break;
 654              		.loc 1 317 0
 655 0028 C046     		mov	r8, r8
 656              	.L75:
 657              	.LBE2:
 318:.\main.c      ****     }
 319:.\main.c      ****     
 320:.\main.c      ****     switch(led_state)
 658              		.loc 1 320 0
 659 002a 154B     		ldr	r3, .L88
 660 002c 1B78     		ldrb	r3, [r3]
 661 002e 012B     		cmp	r3, #1
 662 0030 07D0     		beq	.L80
 663 0032 022B     		cmp	r3, #2
 664 0034 13D0     		beq	.L81
 665 0036 002B     		cmp	r3, #0
 666 0038 1FD1     		bne	.L74
 321:.\main.c      ****     {
 322:.\main.c      ****         case l_start:
 323:.\main.c      ****             led_state = l_wait;
 667              		.loc 1 323 0
 668 003a 114B     		ldr	r3, .L88
 669 003c 0222     		mov	r2, #2
 670 003e 1A70     		strb	r2, [r3]
 324:.\main.c      ****             break;
 671              		.loc 1 324 0
 672 0040 1BE0     		b	.L74
 673              	.L80:
 325:.\main.c      ****         
 326:.\main.c      ****         case l_different:
 327:.\main.c      ****             if(data_array[1] != old)
 674              		.loc 1 327 0
 675 0042 104B     		ldr	r3, .L88+4
 676 0044 5B88     		ldrh	r3, [r3, #2]
 677 0046 BA1D     		add	r2, r7, #6
 678 0048 1288     		ldrh	r2, [r2]
 679 004a 9A42     		cmp	r2, r3
 680 004c 03D0     		beq	.L83
 328:.\main.c      ****             {
 329:.\main.c      ****                 led_state = l_different;
 681              		.loc 1 329 0
 682 004e 0C4B     		ldr	r3, .L88
 683 0050 0122     		mov	r2, #1
 684 0052 1A70     		strb	r2, [r3]
 330:.\main.c      ****             }
 331:.\main.c      ****             else
 332:.\main.c      ****             {
 333:.\main.c      ****                 led_state = l_wait;
 334:.\main.c      ****             }
 335:.\main.c      ****             break;
 685              		.loc 1 335 0
 686 0054 11E0     		b	.L74
 687              	.L83:
 333:.\main.c      ****                 led_state = l_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 19


 688              		.loc 1 333 0
 689 0056 0A4B     		ldr	r3, .L88
 690 0058 0222     		mov	r2, #2
 691 005a 1A70     		strb	r2, [r3]
 692              		.loc 1 335 0
 693 005c 0DE0     		b	.L74
 694              	.L81:
 336:.\main.c      ****             
 337:.\main.c      ****         case l_wait:
 338:.\main.c      ****             if(data_array[1] != old)
 695              		.loc 1 338 0
 696 005e 094B     		ldr	r3, .L88+4
 697 0060 5B88     		ldrh	r3, [r3, #2]
 698 0062 BA1D     		add	r2, r7, #6
 699 0064 1288     		ldrh	r2, [r2]
 700 0066 9A42     		cmp	r2, r3
 701 0068 03D0     		beq	.L85
 339:.\main.c      ****             {
 340:.\main.c      ****                 led_state = l_different;
 702              		.loc 1 340 0
 703 006a 054B     		ldr	r3, .L88
 704 006c 0122     		mov	r2, #1
 705 006e 1A70     		strb	r2, [r3]
 706 0070 02E0     		b	.L86
 707              	.L85:
 341:.\main.c      ****             }
 342:.\main.c      ****             else
 343:.\main.c      ****             {
 344:.\main.c      ****                 led_state = l_wait;
 708              		.loc 1 344 0
 709 0072 034B     		ldr	r3, .L88
 710 0074 0222     		mov	r2, #2
 711 0076 1A70     		strb	r2, [r3]
 712              	.L86:
 345:.\main.c      ****             }
 346:.\main.c      ****             break;
 713              		.loc 1 346 0
 714 0078 C046     		mov	r8, r8
 715              	.L74:
 347:.\main.c      ****     }
 348:.\main.c      **** }
 716              		.loc 1 348 0
 717 007a BD46     		mov	sp, r7
 718 007c 02B0     		add	sp, sp, #8
 719              		@ sp needed
 720 007e 80BD     		pop	{r7, pc}
 721              	.L89:
 722              		.align	2
 723              	.L88:
 724 0080 00000000 		.word	led_state
 725 0084 00000000 		.word	data_array
 726              		.cfi_endproc
 727              	.LFE42:
 728              		.size	led, .-led
 729              		.global	__aeabi_uidiv
 730              		.section	.text.average,"ax",%progbits
 731              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 20


 732              		.global	average
 733              		.code	16
 734              		.thumb_func
 735              		.type	average, %function
 736              	average:
 737              	.LFB43:
 349:.\main.c      **** 
 350:.\main.c      **** //Average function to be used in smoothing our input
 351:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 352:.\main.c      **** {
 738              		.loc 1 352 0
 739              		.cfi_startproc
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 86B0     		sub	sp, sp, #24
 745              		.cfi_def_cfa_offset 32
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 749 0008 0A1C     		mov	r2, r1
 750 000a FB1C     		add	r3, r7, #3
 751 000c 1A70     		strb	r2, [r3]
 353:.\main.c      ****     uint8 i;
 354:.\main.c      ****     uint32 sum = 0;
 752              		.loc 1 354 0
 753 000e 0023     		mov	r3, #0
 754 0010 3B61     		str	r3, [r7, #16]
 355:.\main.c      ****     uint16 avg = 0;
 755              		.loc 1 355 0
 756 0012 3B1C     		mov	r3, r7
 757 0014 0E33     		add	r3, r3, #14
 758 0016 0022     		mov	r2, #0
 759 0018 1A80     		strh	r2, [r3]
 356:.\main.c      ****     
 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 760              		.loc 1 357 0
 761 001a 3B1C     		mov	r3, r7
 762 001c 1733     		add	r3, r3, #23
 763 001e 0022     		mov	r2, #0
 764 0020 1A70     		strb	r2, [r3]
 765 0022 10E0     		b	.L91
 766              	.L92:
 358:.\main.c      ****     {
 359:.\main.c      ****         sum += array[i];
 767              		.loc 1 359 0 discriminator 2
 768 0024 3B1C     		mov	r3, r7
 769 0026 1733     		add	r3, r3, #23
 770 0028 1B78     		ldrb	r3, [r3]
 771 002a 5B00     		lsl	r3, r3, #1
 772 002c 7A68     		ldr	r2, [r7, #4]
 773 002e D318     		add	r3, r2, r3
 774 0030 1B88     		ldrh	r3, [r3]
 775 0032 3A69     		ldr	r2, [r7, #16]
 776 0034 D318     		add	r3, r2, r3
 777 0036 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 21


 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 778              		.loc 1 357 0 discriminator 2
 779 0038 3B1C     		mov	r3, r7
 780 003a 1733     		add	r3, r3, #23
 781 003c 1A78     		ldrb	r2, [r3]
 782 003e 3B1C     		mov	r3, r7
 783 0040 1733     		add	r3, r3, #23
 784 0042 0132     		add	r2, r2, #1
 785 0044 1A70     		strb	r2, [r3]
 786              	.L91:
 357:.\main.c      ****     for(i = 0; i < num_items; i++)
 787              		.loc 1 357 0 is_stmt 0 discriminator 1
 788 0046 3A1C     		mov	r2, r7
 789 0048 1732     		add	r2, r2, #23
 790 004a FB1C     		add	r3, r7, #3
 791 004c 1278     		ldrb	r2, [r2]
 792 004e 1B78     		ldrb	r3, [r3]
 793 0050 9A42     		cmp	r2, r3
 794 0052 E7D3     		bcc	.L92
 360:.\main.c      ****     }
 361:.\main.c      ****     
 362:.\main.c      ****     avg = sum/num_items;
 795              		.loc 1 362 0 is_stmt 1
 796 0054 FB1C     		add	r3, r7, #3
 797 0056 1B78     		ldrb	r3, [r3]
 798 0058 3869     		ldr	r0, [r7, #16]
 799 005a 191C     		mov	r1, r3
 800 005c FFF7FEFF 		bl	__aeabi_uidiv
 801 0060 031C     		mov	r3, r0
 802 0062 1A1C     		mov	r2, r3
 803 0064 3B1C     		mov	r3, r7
 804 0066 0E33     		add	r3, r3, #14
 805 0068 1A80     		strh	r2, [r3]
 363:.\main.c      ****     
 364:.\main.c      ****     return avg;
 806              		.loc 1 364 0
 807 006a 3B1C     		mov	r3, r7
 808 006c 0E33     		add	r3, r3, #14
 809 006e 1B88     		ldrh	r3, [r3]
 365:.\main.c      **** }
 810              		.loc 1 365 0
 811 0070 181C     		mov	r0, r3
 812 0072 BD46     		mov	sp, r7
 813 0074 06B0     		add	sp, sp, #24
 814              		@ sp needed
 815 0076 80BD     		pop	{r7, pc}
 816              		.cfi_endproc
 817              	.LFE43:
 818              		.size	average, .-average
 819              		.comm	servo_state,1,1
 820              		.section	.text.servo,"ax",%progbits
 821              		.align	2
 822              		.global	servo
 823              		.code	16
 824              		.thumb_func
 825              		.type	servo, %function
 826              	servo:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 22


 827              	.LFB44:
 366:.\main.c      **** 
 367:.\main.c      **** enum servo_states {s_start,s_different,s_wait} servo_state;
 368:.\main.c      **** void servo()
 369:.\main.c      **** {
 828              		.loc 1 369 0
 829              		.cfi_startproc
 830 0000 80B5     		push	{r7, lr}
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 82B0     		sub	sp, sp, #8
 835              		.cfi_def_cfa_offset 16
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 370:.\main.c      ****     uint16 old = 0;
 838              		.loc 1 370 0
 839 0006 BB1D     		add	r3, r7, #6
 840 0008 0022     		mov	r2, #0
 841 000a 1A80     		strh	r2, [r3]
 371:.\main.c      ****     switch(servo_state){
 842              		.loc 1 371 0
 843 000c 1C4B     		ldr	r3, .L108
 844 000e 1B78     		ldrb	r3, [r3]
 845 0010 012B     		cmp	r3, #1
 846 0012 09D1     		bne	.L107
 847              	.LBB3:
 372:.\main.c      ****         case s_start:
 373:.\main.c      ****             break;
 374:.\main.c      ****         
 375:.\main.c      ****         case s_different:
 376:.\main.c      ****             PWM_1_WriteCompare2(data_array[2]);
 848              		.loc 1 376 0
 849 0014 1B4B     		ldr	r3, .L108+4
 850 0016 9B88     		ldrh	r3, [r3, #4]
 851 0018 181C     		mov	r0, r3
 852 001a FFF7FEFF 		bl	PWM_1_WriteCompare2
 377:.\main.c      ****             old = data_array[2];
 853              		.loc 1 377 0
 854 001e BB1D     		add	r3, r7, #6
 855 0020 184A     		ldr	r2, .L108+4
 856 0022 9288     		ldrh	r2, [r2, #4]
 857 0024 1A80     		strh	r2, [r3]
 378:.\main.c      ****             break;
 858              		.loc 1 378 0
 859 0026 00E0     		b	.L95
 860              	.L107:
 379:.\main.c      ****             
 380:.\main.c      ****         case s_wait:
 381:.\main.c      ****             break;
 861              		.loc 1 381 0
 862 0028 C046     		mov	r8, r8
 863              	.L95:
 864              	.LBE3:
 382:.\main.c      ****     }
 383:.\main.c      ****     
 384:.\main.c      ****     switch(servo_state){
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 23


 865              		.loc 1 384 0
 866 002a 154B     		ldr	r3, .L108
 867 002c 1B78     		ldrb	r3, [r3]
 868 002e 012B     		cmp	r3, #1
 869 0030 07D0     		beq	.L100
 870 0032 022B     		cmp	r3, #2
 871 0034 13D0     		beq	.L101
 872 0036 002B     		cmp	r3, #0
 873 0038 1FD1     		bne	.L94
 385:.\main.c      ****         case s_start:
 386:.\main.c      ****             servo_state = s_wait;
 874              		.loc 1 386 0
 875 003a 114B     		ldr	r3, .L108
 876 003c 0222     		mov	r2, #2
 877 003e 1A70     		strb	r2, [r3]
 387:.\main.c      ****             break;
 878              		.loc 1 387 0
 879 0040 1BE0     		b	.L94
 880              	.L100:
 388:.\main.c      ****         
 389:.\main.c      ****         case s_different:
 390:.\main.c      ****             if(data_array[2] != old)
 881              		.loc 1 390 0
 882 0042 104B     		ldr	r3, .L108+4
 883 0044 9B88     		ldrh	r3, [r3, #4]
 884 0046 BA1D     		add	r2, r7, #6
 885 0048 1288     		ldrh	r2, [r2]
 886 004a 9A42     		cmp	r2, r3
 887 004c 03D0     		beq	.L103
 391:.\main.c      ****             {
 392:.\main.c      ****                 servo_state = s_different;
 888              		.loc 1 392 0
 889 004e 0C4B     		ldr	r3, .L108
 890 0050 0122     		mov	r2, #1
 891 0052 1A70     		strb	r2, [r3]
 393:.\main.c      ****             }
 394:.\main.c      ****             else
 395:.\main.c      ****             {
 396:.\main.c      ****                 servo_state = s_wait;
 397:.\main.c      ****             }
 398:.\main.c      ****             break;
 892              		.loc 1 398 0
 893 0054 11E0     		b	.L94
 894              	.L103:
 396:.\main.c      ****                 servo_state = s_wait;
 895              		.loc 1 396 0
 896 0056 0A4B     		ldr	r3, .L108
 897 0058 0222     		mov	r2, #2
 898 005a 1A70     		strb	r2, [r3]
 899              		.loc 1 398 0
 900 005c 0DE0     		b	.L94
 901              	.L101:
 399:.\main.c      ****             
 400:.\main.c      ****         case s_wait:
 401:.\main.c      ****             if(data_array[2] != old)
 902              		.loc 1 401 0
 903 005e 094B     		ldr	r3, .L108+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 24


 904 0060 9B88     		ldrh	r3, [r3, #4]
 905 0062 BA1D     		add	r2, r7, #6
 906 0064 1288     		ldrh	r2, [r2]
 907 0066 9A42     		cmp	r2, r3
 908 0068 03D0     		beq	.L105
 402:.\main.c      ****             {
 403:.\main.c      ****                 servo_state = s_different;
 909              		.loc 1 403 0
 910 006a 054B     		ldr	r3, .L108
 911 006c 0122     		mov	r2, #1
 912 006e 1A70     		strb	r2, [r3]
 913 0070 02E0     		b	.L106
 914              	.L105:
 404:.\main.c      ****             }
 405:.\main.c      ****             else
 406:.\main.c      ****             {
 407:.\main.c      ****                 servo_state = s_wait;
 915              		.loc 1 407 0
 916 0072 034B     		ldr	r3, .L108
 917 0074 0222     		mov	r2, #2
 918 0076 1A70     		strb	r2, [r3]
 919              	.L106:
 408:.\main.c      ****             }
 409:.\main.c      ****             break;
 920              		.loc 1 409 0
 921 0078 C046     		mov	r8, r8
 922              	.L94:
 410:.\main.c      ****     }    
 411:.\main.c      **** }
 923              		.loc 1 411 0
 924 007a BD46     		mov	sp, r7
 925 007c 02B0     		add	sp, sp, #8
 926              		@ sp needed
 927 007e 80BD     		pop	{r7, pc}
 928              	.L109:
 929              		.align	2
 930              	.L108:
 931 0080 00000000 		.word	servo_state
 932 0084 00000000 		.word	data_array
 933              		.cfi_endproc
 934              	.LFE44:
 935              		.size	servo, .-servo
 936              		.comm	servo1_state,1,1
 937              		.section	.text.servo1,"ax",%progbits
 938              		.align	2
 939              		.global	servo1
 940              		.code	16
 941              		.thumb_func
 942              		.type	servo1, %function
 943              	servo1:
 944              	.LFB45:
 412:.\main.c      **** 
 413:.\main.c      **** //New servo design
 414:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 415:.\main.c      **** enum servo1_states {s1_start,s1_init,s1_execute,s1_wait} servo1_state;
 416:.\main.c      **** void servo1()
 417:.\main.c      **** { 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 25


 945              		.loc 1 417 0
 946              		.cfi_startproc
 947 0000 90B5     		push	{r4, r7, lr}
 948              		.cfi_def_cfa_offset 12
 949              		.cfi_offset 4, -12
 950              		.cfi_offset 7, -8
 951              		.cfi_offset 14, -4
 952 0002 83B0     		sub	sp, sp, #12
 953              		.cfi_def_cfa_offset 24
 954 0004 00AF     		add	r7, sp, #0
 955              		.cfi_def_cfa_register 7
 418:.\main.c      ****     uint8 i;
 419:.\main.c      ****     uint16 avg;
 420:.\main.c      ****     uint16 command;
 421:.\main.c      ****     
 422:.\main.c      ****     switch(servo1_state){ //actions
 956              		.loc 1 422 0
 957 0006 444B     		ldr	r3, .L133
 958 0008 1B78     		ldrb	r3, [r3]
 959 000a 012B     		cmp	r3, #1
 960 000c 03D0     		beq	.L112
 961 000e 51DD     		ble	.L132
 962 0010 022B     		cmp	r3, #2
 963 0012 17D0     		beq	.L115
 423:.\main.c      ****         case s1_start:
 424:.\main.c      ****             break;
 425:.\main.c      **** 
 426:.\main.c      ****         case s1_init:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 428:.\main.c      ****             {
 429:.\main.c      ****                 servo_array[i] = 1500;
 430:.\main.c      ****             }
 431:.\main.c      ****             serv_arr_cspot = 0;
 432:.\main.c      ****             break;
 433:.\main.c      **** 
 434:.\main.c      ****         case s1_execute:
 435:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 436:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 437:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 438:.\main.c      ****             {
 439:.\main.c      ****                 serv_arr_cspot++;
 440:.\main.c      ****             }
 441:.\main.c      ****             else
 442:.\main.c      ****             {
 443:.\main.c      ****                 serv_arr_cspot = 0;
 444:.\main.c      ****             }
 445:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 446:.\main.c      ****             //servo_array[serv_avg_count] = data_array[2];
 447:.\main.c      ****             //PWM_1_WriteCompare2(avg);
 448:.\main.c      ****             PWM_3_WriteCompare(avg);
 449:.\main.c      ****             //new_pack = 0;
 450:.\main.c      ****             fin_exec++;
 451:.\main.c      ****             break;
 452:.\main.c      ****             
 453:.\main.c      ****         case s1_wait:
 454:.\main.c      ****             break;
 964              		.loc 1 454 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 26


 965 0014 4FE0     		b	.L111
 966              	.L112:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 967              		.loc 1 427 0
 968 0016 FB1D     		add	r3, r7, #7
 969 0018 0022     		mov	r2, #0
 970 001a 1A70     		strb	r2, [r3]
 971 001c 0AE0     		b	.L117
 972              	.L118:
 429:.\main.c      ****                 servo_array[i] = 1500;
 973              		.loc 1 429 0 discriminator 2
 974 001e FB1D     		add	r3, r7, #7
 975 0020 1A78     		ldrb	r2, [r3]
 976 0022 3E4B     		ldr	r3, .L133+4
 977 0024 5200     		lsl	r2, r2, #1
 978 0026 3E49     		ldr	r1, .L133+8
 979 0028 D152     		strh	r1, [r2, r3]
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 980              		.loc 1 427 0 discriminator 2
 981 002a FB1D     		add	r3, r7, #7
 982 002c 1A78     		ldrb	r2, [r3]
 983 002e FB1D     		add	r3, r7, #7
 984 0030 0132     		add	r2, r2, #1
 985 0032 1A70     		strb	r2, [r3]
 986              	.L117:
 427:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 987              		.loc 1 427 0 is_stmt 0 discriminator 1
 988 0034 FB1D     		add	r3, r7, #7
 989 0036 1B78     		ldrb	r3, [r3]
 990 0038 132B     		cmp	r3, #19
 991 003a F0D9     		bls	.L118
 431:.\main.c      ****             serv_arr_cspot = 0;
 992              		.loc 1 431 0 is_stmt 1
 993 003c 394B     		ldr	r3, .L133+12
 994 003e 0022     		mov	r2, #0
 995 0040 1A70     		strb	r2, [r3]
 432:.\main.c      ****             break;
 996              		.loc 1 432 0
 997 0042 38E0     		b	.L111
 998              	.L115:
 435:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 999              		.loc 1 435 0
 1000 0044 384B     		ldr	r3, .L133+16
 1001 0046 9B88     		ldrh	r3, [r3, #4]
 1002 0048 1A02     		lsl	r2, r3, #8
 1003 004a 374B     		ldr	r3, .L133+16
 1004 004c DB88     		ldrh	r3, [r3, #6]
 1005 004e 1343     		orr	r3, r2
 1006 0050 00D5     		bpl	.L119
 1007 0052 0133     		add	r3, r3, #1
 1008              	.L119:
 1009 0054 5B10     		asr	r3, r3, #1
 1010 0056 9AB2     		uxth	r2, r3
 1011 0058 3B1D     		add	r3, r7, #4
 1012 005a 3149     		ldr	r1, .L133+8
 1013 005c 5218     		add	r2, r2, r1
 1014 005e 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 27


 436:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 1015              		.loc 1 436 0
 1016 0060 304B     		ldr	r3, .L133+12
 1017 0062 1B78     		ldrb	r3, [r3]
 1018 0064 1A1C     		mov	r2, r3
 1019 0066 2D4B     		ldr	r3, .L133+4
 1020 0068 5200     		lsl	r2, r2, #1
 1021 006a 391D     		add	r1, r7, #4
 1022 006c 0988     		ldrh	r1, [r1]
 1023 006e D152     		strh	r1, [r2, r3]
 437:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 1024              		.loc 1 437 0
 1025 0070 2C4B     		ldr	r3, .L133+12
 1026 0072 1B78     		ldrb	r3, [r3]
 1027 0074 122B     		cmp	r3, #18
 1028 0076 06D8     		bhi	.L120
 439:.\main.c      ****                 serv_arr_cspot++;
 1029              		.loc 1 439 0
 1030 0078 2A4B     		ldr	r3, .L133+12
 1031 007a 1B78     		ldrb	r3, [r3]
 1032 007c 0133     		add	r3, r3, #1
 1033 007e DAB2     		uxtb	r2, r3
 1034 0080 284B     		ldr	r3, .L133+12
 1035 0082 1A70     		strb	r2, [r3]
 1036 0084 02E0     		b	.L121
 1037              	.L120:
 443:.\main.c      ****                 serv_arr_cspot = 0;
 1038              		.loc 1 443 0
 1039 0086 274B     		ldr	r3, .L133+12
 1040 0088 0022     		mov	r2, #0
 1041 008a 1A70     		strb	r2, [r3]
 1042              	.L121:
 445:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 1043              		.loc 1 445 0
 1044 008c BC1C     		add	r4, r7, #2
 1045 008e 234B     		ldr	r3, .L133+4
 1046 0090 181C     		mov	r0, r3
 1047 0092 1421     		mov	r1, #20
 1048 0094 FFF7FEFF 		bl	average
 1049 0098 031C     		mov	r3, r0
 1050 009a 2380     		strh	r3, [r4]
 448:.\main.c      ****             PWM_3_WriteCompare(avg);
 1051              		.loc 1 448 0
 1052 009c BB1C     		add	r3, r7, #2
 1053 009e 1B88     		ldrh	r3, [r3]
 1054 00a0 181C     		mov	r0, r3
 1055 00a2 FFF7FEFF 		bl	PWM_3_WriteCompare
 450:.\main.c      ****             fin_exec++;
 1056              		.loc 1 450 0
 1057 00a6 214B     		ldr	r3, .L133+20
 1058 00a8 1B78     		ldrb	r3, [r3]
 1059 00aa 0133     		add	r3, r3, #1
 1060 00ac DAB2     		uxtb	r2, r3
 1061 00ae 1F4B     		ldr	r3, .L133+20
 1062 00b0 1A70     		strb	r2, [r3]
 451:.\main.c      ****             break;
 1063              		.loc 1 451 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 28


 1064 00b2 00E0     		b	.L111
 1065              	.L132:
 424:.\main.c      ****             break;
 1066              		.loc 1 424 0
 1067 00b4 C046     		mov	r8, r8
 1068              	.L111:
 455:.\main.c      ****     }
 456:.\main.c      ****     
 457:.\main.c      ****     switch(servo1_state){ //transitions
 1069              		.loc 1 457 0
 1070 00b6 184B     		ldr	r3, .L133
 1071 00b8 1B78     		ldrb	r3, [r3]
 1072 00ba 012B     		cmp	r3, #1
 1073 00bc 0CD0     		beq	.L123
 1074 00be 02DC     		bgt	.L124
 1075 00c0 002B     		cmp	r3, #0
 1076 00c2 05D0     		beq	.L125
 1077 00c4 24E0     		b	.L110
 1078              	.L124:
 1079 00c6 022B     		cmp	r3, #2
 1080 00c8 0AD0     		beq	.L126
 1081 00ca 032B     		cmp	r3, #3
 1082 00cc 14D0     		beq	.L127
 1083 00ce 1FE0     		b	.L110
 1084              	.L125:
 458:.\main.c      ****         case s1_start:
 459:.\main.c      ****             servo1_state = s1_init;
 1085              		.loc 1 459 0
 1086 00d0 114B     		ldr	r3, .L133
 1087 00d2 0122     		mov	r2, #1
 1088 00d4 1A70     		strb	r2, [r3]
 460:.\main.c      ****             break;
 1089              		.loc 1 460 0
 1090 00d6 1BE0     		b	.L110
 1091              	.L123:
 461:.\main.c      ****         
 462:.\main.c      ****         case s1_init:
 463:.\main.c      ****             servo1_state = s1_wait;
 1092              		.loc 1 463 0
 1093 00d8 0F4B     		ldr	r3, .L133
 1094 00da 0322     		mov	r2, #3
 1095 00dc 1A70     		strb	r2, [r3]
 464:.\main.c      ****             break;
 1096              		.loc 1 464 0
 1097 00de 17E0     		b	.L110
 1098              	.L126:
 465:.\main.c      ****         
 466:.\main.c      ****         case s1_execute:
 467:.\main.c      ****             if(new_pack)
 1099              		.loc 1 467 0
 1100 00e0 134B     		ldr	r3, .L133+24
 1101 00e2 1B78     		ldrb	r3, [r3]
 1102 00e4 002B     		cmp	r3, #0
 1103 00e6 03D0     		beq	.L128
 468:.\main.c      ****             {
 469:.\main.c      ****                 servo1_state = s1_execute;
 1104              		.loc 1 469 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 29


 1105 00e8 0B4B     		ldr	r3, .L133
 1106 00ea 0222     		mov	r2, #2
 1107 00ec 1A70     		strb	r2, [r3]
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 servo1_state = s1_wait;
 474:.\main.c      ****             }
 475:.\main.c      ****             break;
 1108              		.loc 1 475 0
 1109 00ee 0FE0     		b	.L110
 1110              	.L128:
 473:.\main.c      ****                 servo1_state = s1_wait;
 1111              		.loc 1 473 0
 1112 00f0 094B     		ldr	r3, .L133
 1113 00f2 0322     		mov	r2, #3
 1114 00f4 1A70     		strb	r2, [r3]
 1115              		.loc 1 475 0
 1116 00f6 0BE0     		b	.L110
 1117              	.L127:
 476:.\main.c      ****         
 477:.\main.c      ****         case s1_wait:
 478:.\main.c      ****             if(new_pack)
 1118              		.loc 1 478 0
 1119 00f8 0D4B     		ldr	r3, .L133+24
 1120 00fa 1B78     		ldrb	r3, [r3]
 1121 00fc 002B     		cmp	r3, #0
 1122 00fe 03D0     		beq	.L130
 479:.\main.c      ****             {
 480:.\main.c      ****                 servo1_state = s1_execute;
 1123              		.loc 1 480 0
 1124 0100 054B     		ldr	r3, .L133
 1125 0102 0222     		mov	r2, #2
 1126 0104 1A70     		strb	r2, [r3]
 1127 0106 02E0     		b	.L131
 1128              	.L130:
 481:.\main.c      ****             }
 482:.\main.c      ****             else
 483:.\main.c      ****             {
 484:.\main.c      ****                 servo1_state = s1_wait; 
 1129              		.loc 1 484 0
 1130 0108 034B     		ldr	r3, .L133
 1131 010a 0322     		mov	r2, #3
 1132 010c 1A70     		strb	r2, [r3]
 1133              	.L131:
 485:.\main.c      ****             }
 486:.\main.c      ****             break;
 1134              		.loc 1 486 0
 1135 010e C046     		mov	r8, r8
 1136              	.L110:
 487:.\main.c      ****     }    
 488:.\main.c      **** }
 1137              		.loc 1 488 0
 1138 0110 BD46     		mov	sp, r7
 1139 0112 03B0     		add	sp, sp, #12
 1140              		@ sp needed
 1141 0114 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 30


 1142              	.L134:
 1143 0116 C046     		.align	2
 1144              	.L133:
 1145 0118 00000000 		.word	servo1_state
 1146 011c 00000000 		.word	servo_array
 1147 0120 DC050000 		.word	1500
 1148 0124 00000000 		.word	serv_arr_cspot
 1149 0128 00000000 		.word	data_array
 1150 012c 00000000 		.word	fin_exec
 1151 0130 00000000 		.word	new_pack
 1152              		.cfi_endproc
 1153              	.LFE45:
 1154              		.size	servo1, .-servo1
 1155              		.section	.text.led_adjust,"ax",%progbits
 1156              		.align	2
 1157              		.global	led_adjust
 1158              		.code	16
 1159              		.thumb_func
 1160              		.type	led_adjust, %function
 1161              	led_adjust:
 1162              	.LFB46:
 489:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 490:.\main.c      **** 
 491:.\main.c      **** uint16 led_adjust(uint16 raw)
 492:.\main.c      **** {
 1163              		.loc 1 492 0
 1164              		.cfi_startproc
 1165 0000 80B5     		push	{r7, lr}
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 7, -8
 1168              		.cfi_offset 14, -4
 1169 0002 84B0     		sub	sp, sp, #16
 1170              		.cfi_def_cfa_offset 24
 1171 0004 00AF     		add	r7, sp, #0
 1172              		.cfi_def_cfa_register 7
 1173 0006 021C     		mov	r2, r0
 1174 0008 BB1D     		add	r3, r7, #6
 1175 000a 1A80     		strh	r2, [r3]
 493:.\main.c      ****     uint16 new_val;
 494:.\main.c      ****     if(raw <= 1250)
 1176              		.loc 1 494 0
 1177 000c BB1D     		add	r3, r7, #6
 1178 000e 1A88     		ldrh	r2, [r3]
 1179 0010 194B     		ldr	r3, .L142
 1180 0012 9A42     		cmp	r2, r3
 1181 0014 05D8     		bhi	.L136
 495:.\main.c      ****     {
 496:.\main.c      ****         new_val = 1000;
 1182              		.loc 1 496 0
 1183 0016 3B1C     		mov	r3, r7
 1184 0018 0E33     		add	r3, r3, #14
 1185 001a FA22     		mov	r2, #250
 1186 001c 9200     		lsl	r2, r2, #2
 1187 001e 1A80     		strh	r2, [r3]
 1188 0020 22E0     		b	.L137
 1189              	.L136:
 497:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 31


 498:.\main.c      ****     else if(raw <= 1500)
 1190              		.loc 1 498 0
 1191 0022 BB1D     		add	r3, r7, #6
 1192 0024 1A88     		ldrh	r2, [r3]
 1193 0026 154B     		ldr	r3, .L142+4
 1194 0028 9A42     		cmp	r2, r3
 1195 002a 04D8     		bhi	.L138
 499:.\main.c      ****     {
 500:.\main.c      ****         new_val = 5000;
 1196              		.loc 1 500 0
 1197 002c 3B1C     		mov	r3, r7
 1198 002e 0E33     		add	r3, r3, #14
 1199 0030 134A     		ldr	r2, .L142+8
 1200 0032 1A80     		strh	r2, [r3]
 1201 0034 18E0     		b	.L137
 1202              	.L138:
 501:.\main.c      ****     }
 502:.\main.c      ****     else if(raw <= 1750)
 1203              		.loc 1 502 0
 1204 0036 BB1D     		add	r3, r7, #6
 1205 0038 1A88     		ldrh	r2, [r3]
 1206 003a 124B     		ldr	r3, .L142+12
 1207 003c 9A42     		cmp	r2, r3
 1208 003e 04D8     		bhi	.L139
 503:.\main.c      ****     {
 504:.\main.c      ****         new_val = 10000;
 1209              		.loc 1 504 0
 1210 0040 3B1C     		mov	r3, r7
 1211 0042 0E33     		add	r3, r3, #14
 1212 0044 104A     		ldr	r2, .L142+16
 1213 0046 1A80     		strh	r2, [r3]
 1214 0048 0EE0     		b	.L137
 1215              	.L139:
 505:.\main.c      ****     }
 506:.\main.c      ****     else if(raw <= 2000)
 1216              		.loc 1 506 0
 1217 004a BB1D     		add	r3, r7, #6
 1218 004c 1A88     		ldrh	r2, [r3]
 1219 004e FA23     		mov	r3, #250
 1220 0050 DB00     		lsl	r3, r3, #3
 1221 0052 9A42     		cmp	r2, r3
 1222 0054 04D8     		bhi	.L140
 507:.\main.c      ****     {
 508:.\main.c      ****         new_val = 15000;
 1223              		.loc 1 508 0
 1224 0056 3B1C     		mov	r3, r7
 1225 0058 0E33     		add	r3, r3, #14
 1226 005a 0C4A     		ldr	r2, .L142+20
 1227 005c 1A80     		strh	r2, [r3]
 1228 005e 03E0     		b	.L137
 1229              	.L140:
 509:.\main.c      ****     }
 510:.\main.c      ****     else
 511:.\main.c      ****     {
 512:.\main.c      ****         new_val = 0;
 1230              		.loc 1 512 0
 1231 0060 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 32


 1232 0062 0E33     		add	r3, r3, #14
 1233 0064 0022     		mov	r2, #0
 1234 0066 1A80     		strh	r2, [r3]
 1235              	.L137:
 513:.\main.c      ****     }
 514:.\main.c      ****     return new_val;
 1236              		.loc 1 514 0
 1237 0068 3B1C     		mov	r3, r7
 1238 006a 0E33     		add	r3, r3, #14
 1239 006c 1B88     		ldrh	r3, [r3]
 515:.\main.c      **** }
 1240              		.loc 1 515 0
 1241 006e 181C     		mov	r0, r3
 1242 0070 BD46     		mov	sp, r7
 1243 0072 04B0     		add	sp, sp, #16
 1244              		@ sp needed
 1245 0074 80BD     		pop	{r7, pc}
 1246              	.L143:
 1247 0076 C046     		.align	2
 1248              	.L142:
 1249 0078 E2040000 		.word	1250
 1250 007c DC050000 		.word	1500
 1251 0080 88130000 		.word	5000
 1252 0084 D6060000 		.word	1750
 1253 0088 10270000 		.word	10000
 1254 008c 983A0000 		.word	15000
 1255              		.cfi_endproc
 1256              	.LFE46:
 1257              		.size	led_adjust, .-led_adjust
 1258              		.comm	led1_state,1,1
 1259              		.section	.text.led1,"ax",%progbits
 1260              		.align	2
 1261              		.global	led1
 1262              		.code	16
 1263              		.thumb_func
 1264              		.type	led1, %function
 1265              	led1:
 1266              	.LFB47:
 516:.\main.c      **** 
 517:.\main.c      **** //New led design
 518:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 519:.\main.c      **** enum led1_states {l1_start,l1_init,l1_execute,l1_wait} led1_state;
 520:.\main.c      **** void led1()
 521:.\main.c      **** { 
 1267              		.loc 1 521 0
 1268              		.cfi_startproc
 1269 0000 90B5     		push	{r4, r7, lr}
 1270              		.cfi_def_cfa_offset 12
 1271              		.cfi_offset 4, -12
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 83B0     		sub	sp, sp, #12
 1275              		.cfi_def_cfa_offset 24
 1276 0004 00AF     		add	r7, sp, #0
 1277              		.cfi_def_cfa_register 7
 522:.\main.c      ****     uint8 i;
 523:.\main.c      ****     uint16 avg;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 33


 524:.\main.c      ****     uint16 command;
 525:.\main.c      ****     
 526:.\main.c      ****     switch(led1_state){ //actions
 1278              		.loc 1 526 0
 1279 0006 444B     		ldr	r3, .L167
 1280 0008 1B78     		ldrb	r3, [r3]
 1281 000a 012B     		cmp	r3, #1
 1282 000c 03D0     		beq	.L146
 1283 000e 51DD     		ble	.L166
 1284 0010 022B     		cmp	r3, #2
 1285 0012 17D0     		beq	.L149
 527:.\main.c      ****         case l1_start:
 528:.\main.c      ****             break;
 529:.\main.c      **** 
 530:.\main.c      ****         case l1_init:
 531:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 532:.\main.c      ****             {
 533:.\main.c      ****                 led_array[i] = 1500;
 534:.\main.c      ****             }
 535:.\main.c      ****             led_arr_cspot = 0;
 536:.\main.c      ****             break;
 537:.\main.c      **** 
 538:.\main.c      ****         case l1_execute:
 539:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 540:.\main.c      ****             led_array[led_arr_cspot] = command;
 541:.\main.c      ****             if(led_arr_cspot < (LED_ARR_SIZE - 1))
 542:.\main.c      ****             {
 543:.\main.c      ****                 led_arr_cspot++;
 544:.\main.c      ****             }
 545:.\main.c      ****             else
 546:.\main.c      ****             {
 547:.\main.c      ****                 led_arr_cspot = 0;
 548:.\main.c      ****             }
 549:.\main.c      ****             avg = average(led_array, LED_ARR_SIZE);
 550:.\main.c      ****             
 551:.\main.c      ****             //PWM_1_WriteCompare1(led_adjust(avg));
 552:.\main.c      ****             PWM_2_WriteCompare(avg);
 553:.\main.c      ****             fin_exec++;
 554:.\main.c      ****             break;
 555:.\main.c      ****             
 556:.\main.c      ****         case l1_wait:
 557:.\main.c      ****             break;
 1286              		.loc 1 557 0
 1287 0014 4FE0     		b	.L145
 1288              	.L146:
 531:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1289              		.loc 1 531 0
 1290 0016 FB1D     		add	r3, r7, #7
 1291 0018 0022     		mov	r2, #0
 1292 001a 1A70     		strb	r2, [r3]
 1293 001c 0AE0     		b	.L151
 1294              	.L152:
 533:.\main.c      ****                 led_array[i] = 1500;
 1295              		.loc 1 533 0 discriminator 2
 1296 001e FB1D     		add	r3, r7, #7
 1297 0020 1A78     		ldrb	r2, [r3]
 1298 0022 3E4B     		ldr	r3, .L167+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 34


 1299 0024 5200     		lsl	r2, r2, #1
 1300 0026 3E49     		ldr	r1, .L167+8
 1301 0028 D152     		strh	r1, [r2, r3]
 531:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1302              		.loc 1 531 0 discriminator 2
 1303 002a FB1D     		add	r3, r7, #7
 1304 002c 1A78     		ldrb	r2, [r3]
 1305 002e FB1D     		add	r3, r7, #7
 1306 0030 0132     		add	r2, r2, #1
 1307 0032 1A70     		strb	r2, [r3]
 1308              	.L151:
 531:.\main.c      ****             for(i = 0; i < LED_ARR_SIZE; i++)
 1309              		.loc 1 531 0 is_stmt 0 discriminator 1
 1310 0034 FB1D     		add	r3, r7, #7
 1311 0036 1B78     		ldrb	r3, [r3]
 1312 0038 132B     		cmp	r3, #19
 1313 003a F0D9     		bls	.L152
 535:.\main.c      ****             led_arr_cspot = 0;
 1314              		.loc 1 535 0 is_stmt 1
 1315 003c 394B     		ldr	r3, .L167+12
 1316 003e 0022     		mov	r2, #0
 1317 0040 1A70     		strb	r2, [r3]
 536:.\main.c      ****             break;
 1318              		.loc 1 536 0
 1319 0042 38E0     		b	.L145
 1320              	.L149:
 539:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 1321              		.loc 1 539 0
 1322 0044 384B     		ldr	r3, .L167+16
 1323 0046 1B89     		ldrh	r3, [r3, #8]
 1324 0048 1A02     		lsl	r2, r3, #8
 1325 004a 374B     		ldr	r3, .L167+16
 1326 004c 5B89     		ldrh	r3, [r3, #10]
 1327 004e 1343     		orr	r3, r2
 1328 0050 00D5     		bpl	.L153
 1329 0052 0133     		add	r3, r3, #1
 1330              	.L153:
 1331 0054 5B10     		asr	r3, r3, #1
 1332 0056 9AB2     		uxth	r2, r3
 1333 0058 3B1D     		add	r3, r7, #4
 1334 005a 3149     		ldr	r1, .L167+8
 1335 005c 5218     		add	r2, r2, r1
 1336 005e 1A80     		strh	r2, [r3]
 540:.\main.c      ****             led_array[led_arr_cspot] = command;
 1337              		.loc 1 540 0
 1338 0060 304B     		ldr	r3, .L167+12
 1339 0062 1B78     		ldrb	r3, [r3]
 1340 0064 1A1C     		mov	r2, r3
 1341 0066 2D4B     		ldr	r3, .L167+4
 1342 0068 5200     		lsl	r2, r2, #1
 1343 006a 391D     		add	r1, r7, #4
 1344 006c 0988     		ldrh	r1, [r1]
 1345 006e D152     		strh	r1, [r2, r3]
 541:.\main.c      ****             if(led_arr_cspot < (LED_ARR_SIZE - 1))
 1346              		.loc 1 541 0
 1347 0070 2C4B     		ldr	r3, .L167+12
 1348 0072 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 35


 1349 0074 122B     		cmp	r3, #18
 1350 0076 06D8     		bhi	.L154
 543:.\main.c      ****                 led_arr_cspot++;
 1351              		.loc 1 543 0
 1352 0078 2A4B     		ldr	r3, .L167+12
 1353 007a 1B78     		ldrb	r3, [r3]
 1354 007c 0133     		add	r3, r3, #1
 1355 007e DAB2     		uxtb	r2, r3
 1356 0080 284B     		ldr	r3, .L167+12
 1357 0082 1A70     		strb	r2, [r3]
 1358 0084 02E0     		b	.L155
 1359              	.L154:
 547:.\main.c      ****                 led_arr_cspot = 0;
 1360              		.loc 1 547 0
 1361 0086 274B     		ldr	r3, .L167+12
 1362 0088 0022     		mov	r2, #0
 1363 008a 1A70     		strb	r2, [r3]
 1364              	.L155:
 549:.\main.c      ****             avg = average(led_array, LED_ARR_SIZE);
 1365              		.loc 1 549 0
 1366 008c BC1C     		add	r4, r7, #2
 1367 008e 234B     		ldr	r3, .L167+4
 1368 0090 181C     		mov	r0, r3
 1369 0092 1421     		mov	r1, #20
 1370 0094 FFF7FEFF 		bl	average
 1371 0098 031C     		mov	r3, r0
 1372 009a 2380     		strh	r3, [r4]
 552:.\main.c      ****             PWM_2_WriteCompare(avg);
 1373              		.loc 1 552 0
 1374 009c BB1C     		add	r3, r7, #2
 1375 009e 1B88     		ldrh	r3, [r3]
 1376 00a0 181C     		mov	r0, r3
 1377 00a2 FFF7FEFF 		bl	PWM_2_WriteCompare
 553:.\main.c      ****             fin_exec++;
 1378              		.loc 1 553 0
 1379 00a6 214B     		ldr	r3, .L167+20
 1380 00a8 1B78     		ldrb	r3, [r3]
 1381 00aa 0133     		add	r3, r3, #1
 1382 00ac DAB2     		uxtb	r2, r3
 1383 00ae 1F4B     		ldr	r3, .L167+20
 1384 00b0 1A70     		strb	r2, [r3]
 554:.\main.c      ****             break;
 1385              		.loc 1 554 0
 1386 00b2 00E0     		b	.L145
 1387              	.L166:
 528:.\main.c      ****             break;
 1388              		.loc 1 528 0
 1389 00b4 C046     		mov	r8, r8
 1390              	.L145:
 558:.\main.c      ****     }
 559:.\main.c      ****     
 560:.\main.c      ****     switch(led1_state){ //transitions
 1391              		.loc 1 560 0
 1392 00b6 184B     		ldr	r3, .L167
 1393 00b8 1B78     		ldrb	r3, [r3]
 1394 00ba 012B     		cmp	r3, #1
 1395 00bc 0CD0     		beq	.L157
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 36


 1396 00be 02DC     		bgt	.L158
 1397 00c0 002B     		cmp	r3, #0
 1398 00c2 05D0     		beq	.L159
 1399 00c4 24E0     		b	.L144
 1400              	.L158:
 1401 00c6 022B     		cmp	r3, #2
 1402 00c8 0AD0     		beq	.L160
 1403 00ca 032B     		cmp	r3, #3
 1404 00cc 14D0     		beq	.L161
 1405 00ce 1FE0     		b	.L144
 1406              	.L159:
 561:.\main.c      ****         case l1_start:
 562:.\main.c      ****             led1_state = l1_init;
 1407              		.loc 1 562 0
 1408 00d0 114B     		ldr	r3, .L167
 1409 00d2 0122     		mov	r2, #1
 1410 00d4 1A70     		strb	r2, [r3]
 563:.\main.c      ****             break;
 1411              		.loc 1 563 0
 1412 00d6 1BE0     		b	.L144
 1413              	.L157:
 564:.\main.c      ****         
 565:.\main.c      ****         case l1_init:
 566:.\main.c      ****             led1_state = l1_wait;
 1414              		.loc 1 566 0
 1415 00d8 0F4B     		ldr	r3, .L167
 1416 00da 0322     		mov	r2, #3
 1417 00dc 1A70     		strb	r2, [r3]
 567:.\main.c      ****             break;
 1418              		.loc 1 567 0
 1419 00de 17E0     		b	.L144
 1420              	.L160:
 568:.\main.c      ****         
 569:.\main.c      ****         case l1_execute:
 570:.\main.c      ****             if(new_pack)
 1421              		.loc 1 570 0
 1422 00e0 134B     		ldr	r3, .L167+24
 1423 00e2 1B78     		ldrb	r3, [r3]
 1424 00e4 002B     		cmp	r3, #0
 1425 00e6 03D0     		beq	.L162
 571:.\main.c      ****             {
 572:.\main.c      ****                 led1_state = l1_execute;
 1426              		.loc 1 572 0
 1427 00e8 0B4B     		ldr	r3, .L167
 1428 00ea 0222     		mov	r2, #2
 1429 00ec 1A70     		strb	r2, [r3]
 573:.\main.c      ****             }
 574:.\main.c      ****             else
 575:.\main.c      ****             {
 576:.\main.c      ****                 led1_state = l1_wait;
 577:.\main.c      ****             }
 578:.\main.c      ****             break;
 1430              		.loc 1 578 0
 1431 00ee 0FE0     		b	.L144
 1432              	.L162:
 576:.\main.c      ****                 led1_state = l1_wait;
 1433              		.loc 1 576 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 37


 1434 00f0 094B     		ldr	r3, .L167
 1435 00f2 0322     		mov	r2, #3
 1436 00f4 1A70     		strb	r2, [r3]
 1437              		.loc 1 578 0
 1438 00f6 0BE0     		b	.L144
 1439              	.L161:
 579:.\main.c      ****         
 580:.\main.c      ****         case l1_wait:
 581:.\main.c      ****             if(new_pack)
 1440              		.loc 1 581 0
 1441 00f8 0D4B     		ldr	r3, .L167+24
 1442 00fa 1B78     		ldrb	r3, [r3]
 1443 00fc 002B     		cmp	r3, #0
 1444 00fe 03D0     		beq	.L164
 582:.\main.c      ****             {
 583:.\main.c      ****                 led1_state = l1_execute;
 1445              		.loc 1 583 0
 1446 0100 054B     		ldr	r3, .L167
 1447 0102 0222     		mov	r2, #2
 1448 0104 1A70     		strb	r2, [r3]
 1449 0106 02E0     		b	.L165
 1450              	.L164:
 584:.\main.c      ****             }
 585:.\main.c      ****             else
 586:.\main.c      ****             {
 587:.\main.c      ****                 led1_state = l1_wait; 
 1451              		.loc 1 587 0
 1452 0108 034B     		ldr	r3, .L167
 1453 010a 0322     		mov	r2, #3
 1454 010c 1A70     		strb	r2, [r3]
 1455              	.L165:
 588:.\main.c      ****             }
 589:.\main.c      ****             break;
 1456              		.loc 1 589 0
 1457 010e C046     		mov	r8, r8
 1458              	.L144:
 590:.\main.c      ****     }    
 591:.\main.c      **** }
 1459              		.loc 1 591 0
 1460 0110 BD46     		mov	sp, r7
 1461 0112 03B0     		add	sp, sp, #12
 1462              		@ sp needed
 1463 0114 90BD     		pop	{r4, r7, pc}
 1464              	.L168:
 1465 0116 C046     		.align	2
 1466              	.L167:
 1467 0118 00000000 		.word	led1_state
 1468 011c 00000000 		.word	led_array
 1469 0120 DC050000 		.word	1500
 1470 0124 00000000 		.word	led_arr_cspot
 1471 0128 00000000 		.word	data_array
 1472 012c 00000000 		.word	fin_exec
 1473 0130 00000000 		.word	new_pack
 1474              		.cfi_endproc
 1475              	.LFE47:
 1476              		.size	led1, .-led1
 1477              		.comm	motor_state,1,1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 38


 1478              		.section	.text.motor,"ax",%progbits
 1479              		.align	2
 1480              		.global	motor
 1481              		.code	16
 1482              		.thumb_func
 1483              		.type	motor, %function
 1484              	motor:
 1485              	.LFB48:
 592:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 593:.\main.c      **** 
 594:.\main.c      **** 
 595:.\main.c      **** enum motor_states {m_start,m_different,m_wait} motor_state;
 596:.\main.c      **** void motor(){
 1486              		.loc 1 596 0
 1487              		.cfi_startproc
 1488 0000 80B5     		push	{r7, lr}
 1489              		.cfi_def_cfa_offset 8
 1490              		.cfi_offset 7, -8
 1491              		.cfi_offset 14, -4
 1492 0002 00AF     		add	r7, sp, #0
 1493              		.cfi_def_cfa_register 7
 597:.\main.c      **** //    uint16 old = 0;
 598:.\main.c      **** //    switch(motor_state){ //state actions
 599:.\main.c      **** //        case m_start:
 600:.\main.c      **** //            break;
 601:.\main.c      **** //        
 602:.\main.c      **** //        case m_different:
 603:.\main.c      **** //            PWM_2_WriteCompare1(data_array[1]);
 604:.\main.c      **** //            old = data_array[3];
 605:.\main.c      **** //            break;
 606:.\main.c      **** //            
 607:.\main.c      **** //        case m_wait:
 608:.\main.c      **** //            break;
 609:.\main.c      **** //    }
 610:.\main.c      **** //    
 611:.\main.c      **** //    switch(motor_state){ //state transitions
 612:.\main.c      **** //        case m_start:
 613:.\main.c      **** //            motor_state = m_wait;
 614:.\main.c      **** //            break;
 615:.\main.c      **** //        
 616:.\main.c      **** //        case m_different:
 617:.\main.c      **** //            if(data_array[3] != old)
 618:.\main.c      **** //            {
 619:.\main.c      **** //                motor_state = m_different;
 620:.\main.c      **** //            }
 621:.\main.c      **** //            else
 622:.\main.c      **** //            {
 623:.\main.c      **** //                motor_state = m_wait;
 624:.\main.c      **** //            }
 625:.\main.c      **** //            break;
 626:.\main.c      **** //            
 627:.\main.c      **** //        case m_wait:
 628:.\main.c      **** //            if(data_array[3] != old)
 629:.\main.c      **** //            {
 630:.\main.c      **** //                motor_state = m_different;
 631:.\main.c      **** //            }
 632:.\main.c      **** //            else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 39


 633:.\main.c      **** //            {
 634:.\main.c      **** //                motor_state = m_wait;
 635:.\main.c      **** //            }
 636:.\main.c      **** //            break;
 637:.\main.c      **** //    }
 638:.\main.c      **** }
 1494              		.loc 1 638 0
 1495 0004 BD46     		mov	sp, r7
 1496              		@ sp needed
 1497 0006 80BD     		pop	{r7, pc}
 1498              		.cfi_endproc
 1499              	.LFE48:
 1500              		.size	motor, .-motor
 1501              		.global	__aeabi_idivmod
 1502              		.section	.text.main,"ax",%progbits
 1503              		.align	2
 1504              		.global	main
 1505              		.code	16
 1506              		.thumb_func
 1507              		.type	main, %function
 1508              	main:
 1509              	.LFB49:
 639:.\main.c      **** 
 640:.\main.c      **** int main()
 641:.\main.c      **** {
 1510              		.loc 1 641 0
 1511              		.cfi_startproc
 1512 0000 80B5     		push	{r7, lr}
 1513              		.cfi_def_cfa_offset 8
 1514              		.cfi_offset 7, -8
 1515              		.cfi_offset 14, -4
 1516 0002 86B0     		sub	sp, sp, #24
 1517              		.cfi_def_cfa_offset 32
 1518 0004 00AF     		add	r7, sp, #0
 1519              		.cfi_def_cfa_register 7
 642:.\main.c      ****     
 643:.\main.c      ****     CyGlobalIntEnable;
 1520              		.loc 1 643 0
 1521              	@ 643 ".\main.c" 1
 1522 0006 62B6     		CPSIE   i
 1523              	@ 0 "" 2
 644:.\main.c      ****     
 645:.\main.c      ****     //Define variables
 646:.\main.c      ****     time_t t;
 647:.\main.c      ****     uint8 counter;
 648:.\main.c      ****     
 649:.\main.c      ****     //start all of our components
 650:.\main.c      ****     Clock_pwm_Start();
 1524              		.loc 1 650 0
 1525              		.code	16
 1526 0008 FFF7FEFF 		bl	Clock_pwm_Start
 651:.\main.c      ****     Clock_counter_Start();
 1527              		.loc 1 651 0
 1528 000c FFF7FEFF 		bl	Clock_counter_Start
 652:.\main.c      ****     
 653:.\main.c      ****     //PWM_1_Start();
 654:.\main.c      ****     PWM_2_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 40


 1529              		.loc 1 654 0
 1530 0010 FFF7FEFF 		bl	PWM_2_Start
 655:.\main.c      ****     
 656:.\main.c      ****     PWM_2_WriteCompare(1500);
 1531              		.loc 1 656 0
 1532 0014 3D4B     		ldr	r3, .L179
 1533 0016 181C     		mov	r0, r3
 1534 0018 FFF7FEFF 		bl	PWM_2_WriteCompare
 657:.\main.c      ****     CyDelay(10000);
 1535              		.loc 1 657 0
 1536 001c 3C4B     		ldr	r3, .L179+4
 1537 001e 181C     		mov	r0, r3
 1538 0020 FFF7FEFF 		bl	CyDelay
 658:.\main.c      ****     
 659:.\main.c      ****     PWM_3_Start();
 1539              		.loc 1 659 0
 1540 0024 FFF7FEFF 		bl	PWM_3_Start
 660:.\main.c      ****     //PWM_2_Start();
 661:.\main.c      ****     
 662:.\main.c      ****     Timer_1_Start();
 1541              		.loc 1 662 0
 1542 0028 FFF7FEFF 		bl	Timer_1_Start
 663:.\main.c      ****     //UART_1_Start();
 664:.\main.c      ****     
 665:.\main.c      ****     isr_1_StartEx(timer_isr);
 1543              		.loc 1 665 0
 1544 002c 394B     		ldr	r3, .L179+8
 1545 002e 181C     		mov	r0, r3
 1546 0030 FFF7FEFF 		bl	isr_1_StartEx
 666:.\main.c      ****     
 667:.\main.c      ****     srand((unsigned) time(&t));
 1547              		.loc 1 667 0
 1548 0034 3B1D     		add	r3, r7, #4
 1549 0036 181C     		mov	r0, r3
 1550 0038 FFF7FEFF 		bl	time
 1551 003c 031C     		mov	r3, r0
 1552 003e 181C     		mov	r0, r3
 1553 0040 FFF7FEFF 		bl	srand
 668:.\main.c      ****     int counter_five = 0;
 1554              		.loc 1 668 0
 1555 0044 0023     		mov	r3, #0
 1556 0046 FB60     		str	r3, [r7, #12]
 1557              	.L177:
 669:.\main.c      ****     
 670:.\main.c      ****     for(;;)
 671:.\main.c      ****     {
 672:.\main.c      ****         //check addresses
 673:.\main.c      ****         //TODO get the address bytes from Steve
 674:.\main.c      ****         
 675:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1558              		.loc 1 675 0
 1559 0048 334B     		ldr	r3, .L179+12
 1560 004a 1B78     		ldrb	r3, [r3]
 1561 004c 002B     		cmp	r3, #0
 1562 004e 07D0     		beq	.L171
 676:.\main.c      ****         {
 677:.\main.c      ****             fill_data_array1(); //potentially take input &data_array
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 41


 1563              		.loc 1 677 0
 1564 0050 FFF7FEFF 		bl	fill_data_array1
 678:.\main.c      ****             new_pack = 1;
 1565              		.loc 1 678 0
 1566 0054 314B     		ldr	r3, .L179+16
 1567 0056 0122     		mov	r2, #1
 1568 0058 1A70     		strb	r2, [r3]
 679:.\main.c      ****             fin_exec = 0;
 1569              		.loc 1 679 0
 1570 005a 314B     		ldr	r3, .L179+20
 1571 005c 0022     		mov	r2, #0
 1572 005e 1A70     		strb	r2, [r3]
 1573              	.L171:
 680:.\main.c      ****         }
 681:.\main.c      ****         
 682:.\main.c      **** //        baseAzimuth();
 683:.\main.c      **** //        shoulder();
 684:.\main.c      **** //        elbow();
 685:.\main.c      **** //        wristTilt();
 686:.\main.c      **** //        wristRotate();
 687:.\main.c      **** 
 688:.\main.c      ****         led1();
 1574              		.loc 1 688 0
 1575 0060 FFF7FEFF 		bl	led1
 689:.\main.c      **** //        led();
 690:.\main.c      ****         servo1();
 1576              		.loc 1 690 0
 1577 0064 FFF7FEFF 		bl	servo1
 691:.\main.c      **** //        servo();
 692:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1578              		.loc 1 692 0
 1579 0068 2D4B     		ldr	r3, .L179+20
 1580 006a 1B78     		ldrb	r3, [r3]
 1581 006c 022B     		cmp	r3, #2
 1582 006e 03D1     		bne	.L172
 693:.\main.c      ****         {
 694:.\main.c      ****             new_pack = 0;
 1583              		.loc 1 694 0
 1584 0070 2A4B     		ldr	r3, .L179+16
 1585 0072 0022     		mov	r2, #0
 1586 0074 1A70     		strb	r2, [r3]
 695:.\main.c      ****         }
 696:.\main.c      ****         
 697:.\main.c      ****         
 698:.\main.c      ****         while(!timerFlag) //this while loop will periodize our code to the time of longest path
 1587              		.loc 1 698 0
 1588 0076 FFE7     		b	.L178
 1589              	.L172:
 1590              	.L178:
 1591 0078 C046     		mov	r8, r8
 1592              	.L173:
 1593              		.loc 1 698 0 is_stmt 0 discriminator 1
 1594 007a 2A4B     		ldr	r3, .L179+24
 1595 007c 1B78     		ldrb	r3, [r3]
 1596 007e 002B     		cmp	r3, #0
 1597 0080 FBD0     		beq	.L173
 699:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 42


 700:.\main.c      **** //            //Potential solution to how we will want to send feedback
 701:.\main.c      **** //            feedback_count++;
 702:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 703:.\main.c      **** //            {                                        //time through the full set of instructions
 704:.\main.c      **** //                send_feedback();
 705:.\main.c      **** //            }
 706:.\main.c      ****         }
 707:.\main.c      ****         counter++;
 1598              		.loc 1 707 0 is_stmt 1
 1599 0082 3B1C     		mov	r3, r7
 1600 0084 1733     		add	r3, r3, #23
 1601 0086 1A78     		ldrb	r2, [r3]
 1602 0088 3B1C     		mov	r3, r7
 1603 008a 1733     		add	r3, r3, #23
 1604 008c 0132     		add	r2, r2, #1
 1605 008e 1A70     		strb	r2, [r3]
 708:.\main.c      ****         if(counter == 100)
 1606              		.loc 1 708 0
 1607 0090 3B1C     		mov	r3, r7
 1608 0092 1733     		add	r3, r3, #23
 1609 0094 1B78     		ldrb	r3, [r3]
 1610 0096 642B     		cmp	r3, #100
 1611 0098 33D1     		bne	.L174
 1612              	.LBB4:
 709:.\main.c      ****         {
 710:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1613              		.loc 1 710 0
 1614 009a 0023     		mov	r3, #0
 1615 009c 3B61     		str	r3, [r7, #16]
 1616 009e 26E0     		b	.L175
 1617              	.L176:
 1618              	.LBB5:
 711:.\main.c      ****             {
 712:.\main.c      ****                 int16 random_number = rand()%2001 - 1000;
 1619              		.loc 1 712 0 discriminator 2
 1620 00a0 FFF7FEFF 		bl	rand
 1621 00a4 031C     		mov	r3, r0
 1622 00a6 181C     		mov	r0, r3
 1623 00a8 1F49     		ldr	r1, .L179+28
 1624 00aa FFF7FEFF 		bl	__aeabi_idivmod
 1625 00ae 0B1C     		mov	r3, r1
 1626 00b0 9BB2     		uxth	r3, r3
 1627 00b2 1E4A     		ldr	r2, .L179+32
 1628 00b4 9B18     		add	r3, r3, r2
 1629 00b6 9AB2     		uxth	r2, r3
 1630 00b8 3B1C     		mov	r3, r7
 1631 00ba 0A33     		add	r3, r3, #10
 1632 00bc 1A80     		strh	r2, [r3]
 713:.\main.c      ****                 test_array[i] = random_number >> 8;
 1633              		.loc 1 713 0 discriminator 2
 1634 00be 3B1C     		mov	r3, r7
 1635 00c0 0A33     		add	r3, r3, #10
 1636 00c2 0022     		mov	r2, #0
 1637 00c4 9B5E     		ldrsh	r3, [r3, r2]
 1638 00c6 1B12     		asr	r3, r3, #8
 1639 00c8 99B2     		uxth	r1, r3
 1640 00ca 194B     		ldr	r3, .L179+36
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 43


 1641 00cc 3A69     		ldr	r2, [r7, #16]
 1642 00ce 5200     		lsl	r2, r2, #1
 1643 00d0 D152     		strh	r1, [r2, r3]
 714:.\main.c      ****                 test_array[i+1] = random_number & 0x00FF;
 1644              		.loc 1 714 0 discriminator 2
 1645 00d2 3B69     		ldr	r3, [r7, #16]
 1646 00d4 5A1C     		add	r2, r3, #1
 1647 00d6 3B1C     		mov	r3, r7
 1648 00d8 0A33     		add	r3, r3, #10
 1649 00da 1988     		ldrh	r1, [r3]
 1650 00dc FF23     		mov	r3, #255
 1651 00de 0B40     		and	r3, r1
 1652 00e0 99B2     		uxth	r1, r3
 1653 00e2 134B     		ldr	r3, .L179+36
 1654 00e4 5200     		lsl	r2, r2, #1
 1655 00e6 D152     		strh	r1, [r2, r3]
 1656              	.LBE5:
 710:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1657              		.loc 1 710 0 discriminator 2
 1658 00e8 3B69     		ldr	r3, [r7, #16]
 1659 00ea 0233     		add	r3, r3, #2
 1660 00ec 3B61     		str	r3, [r7, #16]
 1661              	.L175:
 710:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1662              		.loc 1 710 0 is_stmt 0 discriminator 1
 1663 00ee 3B69     		ldr	r3, [r7, #16]
 1664 00f0 092B     		cmp	r3, #9
 1665 00f2 D5DD     		ble	.L176
 1666              	.LBE4:
 715:.\main.c      ****             }
 716:.\main.c      ****             counter = 0;
 1667              		.loc 1 716 0 is_stmt 1
 1668 00f4 3B1C     		mov	r3, r7
 1669 00f6 1733     		add	r3, r3, #23
 1670 00f8 0022     		mov	r2, #0
 1671 00fa 1A70     		strb	r2, [r3]
 717:.\main.c      ****             wiznet = 1;
 1672              		.loc 1 717 0
 1673 00fc 064B     		ldr	r3, .L179+12
 1674 00fe 0122     		mov	r2, #1
 1675 0100 1A70     		strb	r2, [r3]
 1676              	.L174:
 718:.\main.c      ****         }
 719:.\main.c      ****         timerFlag = 0;
 1677              		.loc 1 719 0
 1678 0102 084B     		ldr	r3, .L179+24
 1679 0104 0022     		mov	r2, #0
 1680 0106 1A70     		strb	r2, [r3]
 720:.\main.c      ****     }
 1681              		.loc 1 720 0
 1682 0108 9EE7     		b	.L177
 1683              	.L180:
 1684 010a C046     		.align	2
 1685              	.L179:
 1686 010c DC050000 		.word	1500
 1687 0110 10270000 		.word	10000
 1688 0114 00000000 		.word	timer_isr
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 44


 1689 0118 00000000 		.word	wiznet
 1690 011c 00000000 		.word	new_pack
 1691 0120 00000000 		.word	fin_exec
 1692 0124 00000000 		.word	timerFlag
 1693 0128 D1070000 		.word	2001
 1694 012c 18FCFFFF 		.word	-1000
 1695 0130 00000000 		.word	test_array
 1696              		.cfi_endproc
 1697              	.LFE49:
 1698              		.size	main, .-main
 1699              		.text
 1700              	.Letext0:
 1701              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1702              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1703              		.section	.debug_info,"",%progbits
 1704              	.Ldebug_info0:
 1705 0000 48060000 		.4byte	0x648
 1706 0004 0400     		.2byte	0x4
 1707 0006 00000000 		.4byte	.Ldebug_abbrev0
 1708 000a 04       		.byte	0x4
 1709 000b 01       		.uleb128 0x1
 1710 000c 7B040000 		.4byte	.LASF100
 1711 0010 01       		.byte	0x1
 1712 0011 3D020000 		.4byte	.LASF101
 1713 0015 32030000 		.4byte	.LASF102
 1714 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1715 001d 00000000 		.4byte	0
 1716 0021 00000000 		.4byte	.Ldebug_line0
 1717 0025 02       		.uleb128 0x2
 1718 0026 01       		.byte	0x1
 1719 0027 06       		.byte	0x6
 1720 0028 52010000 		.4byte	.LASF0
 1721 002c 02       		.uleb128 0x2
 1722 002d 01       		.byte	0x1
 1723 002e 08       		.byte	0x8
 1724 002f D6010000 		.4byte	.LASF1
 1725 0033 02       		.uleb128 0x2
 1726 0034 02       		.byte	0x2
 1727 0035 05       		.byte	0x5
 1728 0036 D7000000 		.4byte	.LASF2
 1729 003a 02       		.uleb128 0x2
 1730 003b 02       		.byte	0x2
 1731 003c 07       		.byte	0x7
 1732 003d 01030000 		.4byte	.LASF3
 1733 0041 02       		.uleb128 0x2
 1734 0042 04       		.byte	0x4
 1735 0043 05       		.byte	0x5
 1736 0044 A3010000 		.4byte	.LASF4
 1737 0048 02       		.uleb128 0x2
 1738 0049 04       		.byte	0x4
 1739 004a 07       		.byte	0x7
 1740 004b EF020000 		.4byte	.LASF5
 1741 004f 02       		.uleb128 0x2
 1742 0050 08       		.byte	0x8
 1743 0051 05       		.byte	0x5
 1744 0052 B5000000 		.4byte	.LASF6
 1745 0056 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 45


 1746 0057 08       		.byte	0x8
 1747 0058 07       		.byte	0x7
 1748 0059 B5020000 		.4byte	.LASF7
 1749 005d 03       		.uleb128 0x3
 1750 005e 04       		.byte	0x4
 1751 005f 05       		.byte	0x5
 1752 0060 696E7400 		.ascii	"int\000"
 1753 0064 02       		.uleb128 0x2
 1754 0065 04       		.byte	0x4
 1755 0066 07       		.byte	0x7
 1756 0067 DA020000 		.4byte	.LASF8
 1757 006b 04       		.uleb128 0x4
 1758 006c B8030000 		.4byte	.LASF9
 1759 0070 02       		.byte	0x2
 1760 0071 A1       		.byte	0xa1
 1761 0072 2C000000 		.4byte	0x2c
 1762 0076 04       		.uleb128 0x4
 1763 0077 0B010000 		.4byte	.LASF10
 1764 007b 02       		.byte	0x2
 1765 007c A2       		.byte	0xa2
 1766 007d 3A000000 		.4byte	0x3a
 1767 0081 04       		.uleb128 0x4
 1768 0082 D9030000 		.4byte	.LASF11
 1769 0086 02       		.byte	0x2
 1770 0087 A3       		.byte	0xa3
 1771 0088 48000000 		.4byte	0x48
 1772 008c 04       		.uleb128 0x4
 1773 008d 1E010000 		.4byte	.LASF12
 1774 0091 02       		.byte	0x2
 1775 0092 A5       		.byte	0xa5
 1776 0093 33000000 		.4byte	0x33
 1777 0097 02       		.uleb128 0x2
 1778 0098 04       		.byte	0x4
 1779 0099 04       		.byte	0x4
 1780 009a 69010000 		.4byte	.LASF13
 1781 009e 02       		.uleb128 0x2
 1782 009f 08       		.byte	0x8
 1783 00a0 04       		.byte	0x4
 1784 00a1 F7030000 		.4byte	.LASF14
 1785 00a5 02       		.uleb128 0x2
 1786 00a6 01       		.byte	0x1
 1787 00a7 08       		.byte	0x8
 1788 00a8 9E010000 		.4byte	.LASF15
 1789 00ac 02       		.uleb128 0x2
 1790 00ad 04       		.byte	0x4
 1791 00ae 07       		.byte	0x7
 1792 00af 87000000 		.4byte	.LASF16
 1793 00b3 04       		.uleb128 0x4
 1794 00b4 0B040000 		.4byte	.LASF17
 1795 00b8 03       		.byte	0x3
 1796 00b9 7A       		.byte	0x7a
 1797 00ba 41000000 		.4byte	0x41
 1798 00be 05       		.uleb128 0x5
 1799 00bf B5010000 		.4byte	.LASF22
 1800 00c3 01       		.byte	0x1
 1801 00c4 01       		.byte	0x1
 1802 00c5 8C       		.byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 46


 1803 00c6 E3000000 		.4byte	0xe3
 1804 00ca 06       		.uleb128 0x6
 1805 00cb 31020000 		.4byte	.LASF18
 1806 00cf 00       		.sleb128 0
 1807 00d0 06       		.uleb128 0x6
 1808 00d1 22000000 		.4byte	.LASF19
 1809 00d5 01       		.sleb128 1
 1810 00d6 06       		.uleb128 0x6
 1811 00d7 91020000 		.4byte	.LASF20
 1812 00db 02       		.sleb128 2
 1813 00dc 06       		.uleb128 0x6
 1814 00dd E0030000 		.4byte	.LASF21
 1815 00e1 03       		.sleb128 3
 1816 00e2 00       		.byte	0
 1817 00e3 05       		.uleb128 0x5
 1818 00e4 14030000 		.4byte	.LASF23
 1819 00e8 01       		.byte	0x1
 1820 00e9 01       		.byte	0x1
 1821 00ea C4       		.byte	0xc4
 1822 00eb 08010000 		.4byte	0x108
 1823 00ef 06       		.uleb128 0x6
 1824 00f0 18020000 		.4byte	.LASF24
 1825 00f4 00       		.sleb128 0
 1826 00f5 06       		.uleb128 0x6
 1827 00f6 2D000000 		.4byte	.LASF25
 1828 00fa 01       		.sleb128 1
 1829 00fb 06       		.uleb128 0x6
 1830 00fc EA030000 		.4byte	.LASF26
 1831 0100 02       		.sleb128 2
 1832 0101 06       		.uleb128 0x6
 1833 0102 83020000 		.4byte	.LASF27
 1834 0106 03       		.sleb128 3
 1835 0107 00       		.byte	0
 1836 0108 05       		.uleb128 0x5
 1837 0109 90000000 		.4byte	.LASF28
 1838 010d 01       		.byte	0x1
 1839 010e 01       		.byte	0x1
 1840 010f F5       		.byte	0xf5
 1841 0110 2D010000 		.4byte	0x12d
 1842 0114 06       		.uleb128 0x6
 1843 0115 24010000 		.4byte	.LASF29
 1844 0119 00       		.sleb128 0
 1845 011a 06       		.uleb128 0x6
 1846 011b 7A000000 		.4byte	.LASF30
 1847 011f 01       		.sleb128 1
 1848 0120 06       		.uleb128 0x6
 1849 0121 8F010000 		.4byte	.LASF31
 1850 0125 02       		.sleb128 2
 1851 0126 06       		.uleb128 0x6
 1852 0127 25050000 		.4byte	.LASF32
 1853 012b 03       		.sleb128 3
 1854 012c 00       		.byte	0
 1855 012d 07       		.uleb128 0x7
 1856 012e AD030000 		.4byte	.LASF33
 1857 0132 01       		.byte	0x1
 1858 0133 01       		.byte	0x1
 1859 0134 2E01     		.2byte	0x12e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 47


 1860 0136 4D010000 		.4byte	0x14d
 1861 013a 06       		.uleb128 0x6
 1862 013b 00000000 		.4byte	.LASF34
 1863 013f 00       		.sleb128 0
 1864 0140 06       		.uleb128 0x6
 1865 0141 46010000 		.4byte	.LASF35
 1866 0145 01       		.sleb128 1
 1867 0146 06       		.uleb128 0x6
 1868 0147 6E020000 		.4byte	.LASF36
 1869 014b 02       		.sleb128 2
 1870 014c 00       		.byte	0
 1871 014d 07       		.uleb128 0x7
 1872 014e E1000000 		.4byte	.LASF37
 1873 0152 01       		.byte	0x1
 1874 0153 01       		.byte	0x1
 1875 0154 6F01     		.2byte	0x16f
 1876 0156 6D010000 		.4byte	0x16d
 1877 015a 06       		.uleb128 0x6
 1878 015b 2D040000 		.4byte	.LASF38
 1879 015f 00       		.sleb128 0
 1880 0160 06       		.uleb128 0x6
 1881 0161 1B040000 		.4byte	.LASF39
 1882 0165 01       		.sleb128 1
 1883 0166 06       		.uleb128 0x6
 1884 0167 74040000 		.4byte	.LASF40
 1885 016b 02       		.sleb128 2
 1886 016c 00       		.byte	0
 1887 016d 07       		.uleb128 0x7
 1888 016e CC020000 		.4byte	.LASF41
 1889 0172 01       		.byte	0x1
 1890 0173 01       		.byte	0x1
 1891 0174 9F01     		.2byte	0x19f
 1892 0176 93010000 		.4byte	0x193
 1893 017a 06       		.uleb128 0x6
 1894 017b AC010000 		.4byte	.LASF42
 1895 017f 00       		.sleb128 0
 1896 0180 06       		.uleb128 0x6
 1897 0181 3F040000 		.4byte	.LASF43
 1898 0185 01       		.sleb128 1
 1899 0186 06       		.uleb128 0x6
 1900 0187 00010000 		.4byte	.LASF44
 1901 018b 02       		.sleb128 2
 1902 018c 06       		.uleb128 0x6
 1903 018d 1D050000 		.4byte	.LASF45
 1904 0191 03       		.sleb128 3
 1905 0192 00       		.byte	0
 1906 0193 07       		.uleb128 0x7
 1907 0194 3A010000 		.4byte	.LASF46
 1908 0198 01       		.byte	0x1
 1909 0199 01       		.byte	0x1
 1910 019a 0702     		.2byte	0x207
 1911 019c B9010000 		.4byte	0x1b9
 1912 01a0 06       		.uleb128 0x6
 1913 01a1 12040000 		.4byte	.LASF47
 1914 01a5 00       		.sleb128 0
 1915 01a6 06       		.uleb128 0x6
 1916 01a7 3E000000 		.4byte	.LASF48
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 48


 1917 01ab 01       		.sleb128 1
 1918 01ac 06       		.uleb128 0x6
 1919 01ad C2010000 		.4byte	.LASF49
 1920 01b1 02       		.sleb128 2
 1921 01b2 06       		.uleb128 0x6
 1922 01b3 CF000000 		.4byte	.LASF50
 1923 01b7 03       		.sleb128 3
 1924 01b8 00       		.byte	0
 1925 01b9 07       		.uleb128 0x7
 1926 01ba 25030000 		.4byte	.LASF51
 1927 01be 01       		.byte	0x1
 1928 01bf 01       		.byte	0x1
 1929 01c0 5302     		.2byte	0x253
 1930 01c2 D9010000 		.4byte	0x1d9
 1931 01c6 06       		.uleb128 0x6
 1932 01c7 E7020000 		.4byte	.LASF52
 1933 01cb 00       		.sleb128 0
 1934 01cc 06       		.uleb128 0x6
 1935 01cd C4030000 		.4byte	.LASF53
 1936 01d1 01       		.sleb128 1
 1937 01d2 06       		.uleb128 0x6
 1938 01d3 35050000 		.4byte	.LASF54
 1939 01d7 02       		.sleb128 2
 1940 01d8 00       		.byte	0
 1941 01d9 08       		.uleb128 0x8
 1942 01da 54020000 		.4byte	.LASF76
 1943 01de 01       		.byte	0x1
 1944 01df 28       		.byte	0x28
 1945 01e0 00000000 		.4byte	.LFB33
 1946 01e4 28000000 		.4byte	.LFE33-.LFB33
 1947 01e8 01       		.uleb128 0x1
 1948 01e9 9C       		.byte	0x9c
 1949 01ea FD010000 		.4byte	0x1fd
 1950 01ee 09       		.uleb128 0x9
 1951 01ef 5E020000 		.4byte	.LASF55
 1952 01f3 01       		.byte	0x1
 1953 01f4 2A       		.byte	0x2a
 1954 01f5 81000000 		.4byte	0x81
 1955 01f9 02       		.uleb128 0x2
 1956 01fa 91       		.byte	0x91
 1957 01fb 74       		.sleb128 -12
 1958 01fc 00       		.byte	0
 1959 01fd 0A       		.uleb128 0xa
 1960 01fe 46000000 		.4byte	.LASF56
 1961 0202 01       		.byte	0x1
 1962 0203 4A       		.byte	0x4a
 1963 0204 00000000 		.4byte	.LFB34
 1964 0208 0C010000 		.4byte	.LFE34-.LFB34
 1965 020c 01       		.uleb128 0x1
 1966 020d 9C       		.byte	0x9c
 1967 020e 1F020000 		.4byte	0x21f
 1968 0212 0B       		.uleb128 0xb
 1969 0213 6300     		.ascii	"c\000"
 1970 0215 01       		.byte	0x1
 1971 0216 4E       		.byte	0x4e
 1972 0217 6B000000 		.4byte	0x6b
 1973 021b 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 49


 1974 021c 91       		.byte	0x91
 1975 021d 77       		.sleb128 -9
 1976 021e 00       		.byte	0
 1977 021f 0A       		.uleb128 0xa
 1978 0220 4C040000 		.4byte	.LASF57
 1979 0224 01       		.byte	0x1
 1980 0225 7B       		.byte	0x7b
 1981 0226 00000000 		.4byte	.LFB35
 1982 022a 4C000000 		.4byte	.LFE35-.LFB35
 1983 022e 01       		.uleb128 0x1
 1984 022f 9C       		.byte	0x9c
 1985 0230 41020000 		.4byte	0x241
 1986 0234 0B       		.uleb128 0xb
 1987 0235 6900     		.ascii	"i\000"
 1988 0237 01       		.byte	0x1
 1989 0238 7D       		.byte	0x7d
 1990 0239 6B000000 		.4byte	0x6b
 1991 023d 02       		.uleb128 0x2
 1992 023e 91       		.byte	0x91
 1993 023f 77       		.sleb128 -9
 1994 0240 00       		.byte	0
 1995 0241 0C       		.uleb128 0xc
 1996 0242 79010000 		.4byte	.LASF58
 1997 0246 01       		.byte	0x1
 1998 0247 85       		.byte	0x85
 1999 0248 00000000 		.4byte	.LFB36
 2000 024c 08000000 		.4byte	.LFE36-.LFB36
 2001 0250 01       		.uleb128 0x1
 2002 0251 9C       		.byte	0x9c
 2003 0252 0C       		.uleb128 0xc
 2004 0253 D0030000 		.4byte	.LASF59
 2005 0257 01       		.byte	0x1
 2006 0258 8E       		.byte	0x8e
 2007 0259 00000000 		.4byte	.LFB37
 2008 025d 44000000 		.4byte	.LFE37-.LFB37
 2009 0261 01       		.uleb128 0x1
 2010 0262 9C       		.byte	0x9c
 2011 0263 0C       		.uleb128 0xc
 2012 0264 EE000000 		.4byte	.LASF60
 2013 0268 01       		.byte	0x1
 2014 0269 BC       		.byte	0xbc
 2015 026a 00000000 		.4byte	.LFB38
 2016 026e 08000000 		.4byte	.LFE38-.LFB38
 2017 0272 01       		.uleb128 0x1
 2018 0273 9C       		.byte	0x9c
 2019 0274 0C       		.uleb128 0xc
 2020 0275 85010000 		.4byte	.LASF61
 2021 0279 01       		.byte	0x1
 2022 027a C6       		.byte	0xc6
 2023 027b 00000000 		.4byte	.LFB39
 2024 027f 48000000 		.4byte	.LFE39-.LFB39
 2025 0283 01       		.uleb128 0x1
 2026 0284 9C       		.byte	0x9c
 2027 0285 0C       		.uleb128 0xc
 2028 0286 12010000 		.4byte	.LASF62
 2029 028a 01       		.byte	0x1
 2030 028b F7       		.byte	0xf7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 50


 2031 028c 00000000 		.4byte	.LFB40
 2032 0290 48000000 		.4byte	.LFE40-.LFB40
 2033 0294 01       		.uleb128 0x1
 2034 0295 9C       		.byte	0x9c
 2035 0296 0D       		.uleb128 0xd
 2036 0297 46020000 		.4byte	.LASF63
 2037 029b 01       		.byte	0x1
 2038 029c 2601     		.2byte	0x126
 2039 029e 00000000 		.4byte	.LFB41
 2040 02a2 08000000 		.4byte	.LFE41-.LFB41
 2041 02a6 01       		.uleb128 0x1
 2042 02a7 9C       		.byte	0x9c
 2043 02a8 0E       		.uleb128 0xe
 2044 02a9 6C656400 		.ascii	"led\000"
 2045 02ad 01       		.byte	0x1
 2046 02ae 2F01     		.2byte	0x12f
 2047 02b0 00000000 		.4byte	.LFB42
 2048 02b4 88000000 		.4byte	.LFE42-.LFB42
 2049 02b8 01       		.uleb128 0x1
 2050 02b9 9C       		.byte	0x9c
 2051 02ba E6020000 		.4byte	0x2e6
 2052 02be 0F       		.uleb128 0xf
 2053 02bf 6F6C6400 		.ascii	"old\000"
 2054 02c3 01       		.byte	0x1
 2055 02c4 3101     		.2byte	0x131
 2056 02c6 76000000 		.4byte	0x76
 2057 02ca 02       		.uleb128 0x2
 2058 02cb 91       		.byte	0x91
 2059 02cc 76       		.sleb128 -10
 2060 02cd 10       		.uleb128 0x10
 2061 02ce 14000000 		.4byte	.LBB2
 2062 02d2 16000000 		.4byte	.LBE2-.LBB2
 2063 02d6 11       		.uleb128 0x11
 2064 02d7 F0010000 		.4byte	.LASF67
 2065 02db 01       		.byte	0x1
 2066 02dc 3801     		.2byte	0x138
 2067 02de 5D000000 		.4byte	0x5d
 2068 02e2 12       		.uleb128 0x12
 2069 02e3 00       		.byte	0
 2070 02e4 00       		.byte	0
 2071 02e5 00       		.byte	0
 2072 02e6 13       		.uleb128 0x13
 2073 02e7 02050000 		.4byte	.LASF71
 2074 02eb 01       		.byte	0x1
 2075 02ec 5F01     		.2byte	0x15f
 2076 02ee 76000000 		.4byte	0x76
 2077 02f2 00000000 		.4byte	.LFB43
 2078 02f6 78000000 		.4byte	.LFE43-.LFB43
 2079 02fa 01       		.uleb128 0x1
 2080 02fb 9C       		.byte	0x9c
 2081 02fc 4A030000 		.4byte	0x34a
 2082 0300 14       		.uleb128 0x14
 2083 0301 38000000 		.4byte	.LASF64
 2084 0305 01       		.byte	0x1
 2085 0306 5F01     		.2byte	0x15f
 2086 0308 4A030000 		.4byte	0x34a
 2087 030c 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 51


 2088 030d 91       		.byte	0x91
 2089 030e 64       		.sleb128 -28
 2090 030f 14       		.uleb128 0x14
 2091 0310 9C020000 		.4byte	.LASF65
 2092 0314 01       		.byte	0x1
 2093 0315 5F01     		.2byte	0x15f
 2094 0317 6B000000 		.4byte	0x6b
 2095 031b 02       		.uleb128 0x2
 2096 031c 91       		.byte	0x91
 2097 031d 63       		.sleb128 -29
 2098 031e 0F       		.uleb128 0xf
 2099 031f 6900     		.ascii	"i\000"
 2100 0321 01       		.byte	0x1
 2101 0322 6101     		.2byte	0x161
 2102 0324 6B000000 		.4byte	0x6b
 2103 0328 02       		.uleb128 0x2
 2104 0329 91       		.byte	0x91
 2105 032a 77       		.sleb128 -9
 2106 032b 0F       		.uleb128 0xf
 2107 032c 73756D00 		.ascii	"sum\000"
 2108 0330 01       		.byte	0x1
 2109 0331 6201     		.2byte	0x162
 2110 0333 81000000 		.4byte	0x81
 2111 0337 02       		.uleb128 0x2
 2112 0338 91       		.byte	0x91
 2113 0339 70       		.sleb128 -16
 2114 033a 0F       		.uleb128 0xf
 2115 033b 61766700 		.ascii	"avg\000"
 2116 033f 01       		.byte	0x1
 2117 0340 6301     		.2byte	0x163
 2118 0342 76000000 		.4byte	0x76
 2119 0346 02       		.uleb128 0x2
 2120 0347 91       		.byte	0x91
 2121 0348 6E       		.sleb128 -18
 2122 0349 00       		.byte	0
 2123 034a 15       		.uleb128 0x15
 2124 034b 04       		.byte	0x4
 2125 034c 76000000 		.4byte	0x76
 2126 0350 16       		.uleb128 0x16
 2127 0351 27040000 		.4byte	.LASF66
 2128 0355 01       		.byte	0x1
 2129 0356 7001     		.2byte	0x170
 2130 0358 00000000 		.4byte	.LFB44
 2131 035c 88000000 		.4byte	.LFE44-.LFB44
 2132 0360 01       		.uleb128 0x1
 2133 0361 9C       		.byte	0x9c
 2134 0362 8E030000 		.4byte	0x38e
 2135 0366 0F       		.uleb128 0xf
 2136 0367 6F6C6400 		.ascii	"old\000"
 2137 036b 01       		.byte	0x1
 2138 036c 7201     		.2byte	0x172
 2139 036e 76000000 		.4byte	0x76
 2140 0372 02       		.uleb128 0x2
 2141 0373 91       		.byte	0x91
 2142 0374 76       		.sleb128 -10
 2143 0375 10       		.uleb128 0x10
 2144 0376 14000000 		.4byte	.LBB3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 52


 2145 037a 16000000 		.4byte	.LBE3-.LBB3
 2146 037e 11       		.uleb128 0x11
 2147 037f 04020000 		.4byte	.LASF68
 2148 0383 01       		.byte	0x1
 2149 0384 7801     		.2byte	0x178
 2150 0386 5D000000 		.4byte	0x5d
 2151 038a 12       		.uleb128 0x12
 2152 038b 00       		.byte	0
 2153 038c 00       		.byte	0
 2154 038d 00       		.byte	0
 2155 038e 16       		.uleb128 0x16
 2156 038f A6030000 		.4byte	.LASF69
 2157 0393 01       		.byte	0x1
 2158 0394 A001     		.2byte	0x1a0
 2159 0396 00000000 		.4byte	.LFB45
 2160 039a 34010000 		.4byte	.LFE45-.LFB45
 2161 039e 01       		.uleb128 0x1
 2162 039f 9C       		.byte	0x9c
 2163 03a0 D0030000 		.4byte	0x3d0
 2164 03a4 0F       		.uleb128 0xf
 2165 03a5 6900     		.ascii	"i\000"
 2166 03a7 01       		.byte	0x1
 2167 03a8 A201     		.2byte	0x1a2
 2168 03aa 6B000000 		.4byte	0x6b
 2169 03ae 02       		.uleb128 0x2
 2170 03af 91       		.byte	0x91
 2171 03b0 6F       		.sleb128 -17
 2172 03b1 0F       		.uleb128 0xf
 2173 03b2 61766700 		.ascii	"avg\000"
 2174 03b6 01       		.byte	0x1
 2175 03b7 A301     		.2byte	0x1a3
 2176 03b9 76000000 		.4byte	0x76
 2177 03bd 02       		.uleb128 0x2
 2178 03be 91       		.byte	0x91
 2179 03bf 6A       		.sleb128 -22
 2180 03c0 17       		.uleb128 0x17
 2181 03c1 15050000 		.4byte	.LASF70
 2182 03c5 01       		.byte	0x1
 2183 03c6 A401     		.2byte	0x1a4
 2184 03c8 76000000 		.4byte	0x76
 2185 03cc 02       		.uleb128 0x2
 2186 03cd 91       		.byte	0x91
 2187 03ce 6C       		.sleb128 -20
 2188 03cf 00       		.byte	0
 2189 03d0 18       		.uleb128 0x18
 2190 03d1 AA000000 		.4byte	.LASF72
 2191 03d5 01       		.byte	0x1
 2192 03d6 EB01     		.2byte	0x1eb
 2193 03d8 76000000 		.4byte	0x76
 2194 03dc 00000000 		.4byte	.LFB46
 2195 03e0 90000000 		.4byte	.LFE46-.LFB46
 2196 03e4 01       		.uleb128 0x1
 2197 03e5 9C       		.byte	0x9c
 2198 03e6 09040000 		.4byte	0x409
 2199 03ea 19       		.uleb128 0x19
 2200 03eb 72617700 		.ascii	"raw\000"
 2201 03ef 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 53


 2202 03f0 EB01     		.2byte	0x1eb
 2203 03f2 76000000 		.4byte	0x76
 2204 03f6 02       		.uleb128 0x2
 2205 03f7 91       		.byte	0x91
 2206 03f8 6E       		.sleb128 -18
 2207 03f9 17       		.uleb128 0x17
 2208 03fa 1A000000 		.4byte	.LASF73
 2209 03fe 01       		.byte	0x1
 2210 03ff ED01     		.2byte	0x1ed
 2211 0401 76000000 		.4byte	0x76
 2212 0405 02       		.uleb128 0x2
 2213 0406 91       		.byte	0x91
 2214 0407 76       		.sleb128 -10
 2215 0408 00       		.byte	0
 2216 0409 16       		.uleb128 0x16
 2217 040a 47040000 		.4byte	.LASF74
 2218 040e 01       		.byte	0x1
 2219 040f 0802     		.2byte	0x208
 2220 0411 00000000 		.4byte	.LFB47
 2221 0415 34010000 		.4byte	.LFE47-.LFB47
 2222 0419 01       		.uleb128 0x1
 2223 041a 9C       		.byte	0x9c
 2224 041b 4B040000 		.4byte	0x44b
 2225 041f 0F       		.uleb128 0xf
 2226 0420 6900     		.ascii	"i\000"
 2227 0422 01       		.byte	0x1
 2228 0423 0A02     		.2byte	0x20a
 2229 0425 6B000000 		.4byte	0x6b
 2230 0429 02       		.uleb128 0x2
 2231 042a 91       		.byte	0x91
 2232 042b 6F       		.sleb128 -17
 2233 042c 0F       		.uleb128 0xf
 2234 042d 61766700 		.ascii	"avg\000"
 2235 0431 01       		.byte	0x1
 2236 0432 0B02     		.2byte	0x20b
 2237 0434 76000000 		.4byte	0x76
 2238 0438 02       		.uleb128 0x2
 2239 0439 91       		.byte	0x91
 2240 043a 6A       		.sleb128 -22
 2241 043b 17       		.uleb128 0x17
 2242 043c 15050000 		.4byte	.LASF70
 2243 0440 01       		.byte	0x1
 2244 0441 0C02     		.2byte	0x20c
 2245 0443 76000000 		.4byte	0x76
 2246 0447 02       		.uleb128 0x2
 2247 0448 91       		.byte	0x91
 2248 0449 6C       		.sleb128 -20
 2249 044a 00       		.byte	0
 2250 044b 0D       		.uleb128 0xd
 2251 044c BE030000 		.4byte	.LASF75
 2252 0450 01       		.byte	0x1
 2253 0451 5402     		.2byte	0x254
 2254 0453 00000000 		.4byte	.LFB48
 2255 0457 08000000 		.4byte	.LFE48-.LFB48
 2256 045b 01       		.uleb128 0x1
 2257 045c 9C       		.byte	0x9c
 2258 045d 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 54


 2259 045e 91030000 		.4byte	.LASF77
 2260 0462 01       		.byte	0x1
 2261 0463 8002     		.2byte	0x280
 2262 0465 5D000000 		.4byte	0x5d
 2263 0469 00000000 		.4byte	.LFB49
 2264 046d 34010000 		.4byte	.LFE49-.LFB49
 2265 0471 01       		.uleb128 0x1
 2266 0472 9C       		.byte	0x9c
 2267 0473 D3040000 		.4byte	0x4d3
 2268 0477 0F       		.uleb128 0xf
 2269 0478 7400     		.ascii	"t\000"
 2270 047a 01       		.byte	0x1
 2271 047b 8602     		.2byte	0x286
 2272 047d B3000000 		.4byte	0xb3
 2273 0481 02       		.uleb128 0x2
 2274 0482 91       		.byte	0x91
 2275 0483 64       		.sleb128 -28
 2276 0484 17       		.uleb128 0x17
 2277 0485 66020000 		.4byte	.LASF78
 2278 0489 01       		.byte	0x1
 2279 048a 8702     		.2byte	0x287
 2280 048c 6B000000 		.4byte	0x6b
 2281 0490 02       		.uleb128 0x2
 2282 0491 91       		.byte	0x91
 2283 0492 77       		.sleb128 -9
 2284 0493 17       		.uleb128 0x17
 2285 0494 FE030000 		.4byte	.LASF79
 2286 0498 01       		.byte	0x1
 2287 0499 9C02     		.2byte	0x29c
 2288 049b 5D000000 		.4byte	0x5d
 2289 049f 02       		.uleb128 0x2
 2290 04a0 91       		.byte	0x91
 2291 04a1 6C       		.sleb128 -20
 2292 04a2 10       		.uleb128 0x10
 2293 04a3 9A000000 		.4byte	.LBB4
 2294 04a7 5A000000 		.4byte	.LBE4-.LBB4
 2295 04ab 0F       		.uleb128 0xf
 2296 04ac 6900     		.ascii	"i\000"
 2297 04ae 01       		.byte	0x1
 2298 04af C602     		.2byte	0x2c6
 2299 04b1 5D000000 		.4byte	0x5d
 2300 04b5 02       		.uleb128 0x2
 2301 04b6 91       		.byte	0x91
 2302 04b7 70       		.sleb128 -16
 2303 04b8 10       		.uleb128 0x10
 2304 04b9 A0000000 		.4byte	.LBB5
 2305 04bd 48000000 		.4byte	.LBE5-.LBB5
 2306 04c1 17       		.uleb128 0x17
 2307 04c2 75020000 		.4byte	.LASF80
 2308 04c6 01       		.byte	0x1
 2309 04c7 C802     		.2byte	0x2c8
 2310 04c9 8C000000 		.4byte	0x8c
 2311 04cd 02       		.uleb128 0x2
 2312 04ce 91       		.byte	0x91
 2313 04cf 6A       		.sleb128 -22
 2314 04d0 00       		.byte	0
 2315 04d1 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 55


 2316 04d2 00       		.byte	0
 2317 04d3 1B       		.uleb128 0x1b
 2318 04d4 76000000 		.4byte	0x76
 2319 04d8 E3040000 		.4byte	0x4e3
 2320 04dc 1C       		.uleb128 0x1c
 2321 04dd AC000000 		.4byte	0xac
 2322 04e1 0D       		.byte	0xd
 2323 04e2 00       		.byte	0
 2324 04e3 1D       		.uleb128 0x1d
 2325 04e4 0A050000 		.4byte	.LASF81
 2326 04e8 01       		.byte	0x1
 2327 04e9 0E       		.byte	0xe
 2328 04ea D3040000 		.4byte	0x4d3
 2329 04ee 05       		.uleb128 0x5
 2330 04ef 03       		.byte	0x3
 2331 04f0 00000000 		.4byte	data_array
 2332 04f4 1D       		.uleb128 0x1d
 2333 04f5 A3000000 		.4byte	.LASF82
 2334 04f9 01       		.byte	0x1
 2335 04fa 10       		.byte	0x10
 2336 04fb 6B000000 		.4byte	0x6b
 2337 04ff 05       		.uleb128 0x5
 2338 0500 03       		.byte	0x3
 2339 0501 00000000 		.4byte	wiznet
 2340 0505 1D       		.uleb128 0x1d
 2341 0506 6B040000 		.4byte	.LASF83
 2342 050a 01       		.byte	0x1
 2343 050b 11       		.byte	0x11
 2344 050c 6B000000 		.4byte	0x6b
 2345 0510 05       		.uleb128 0x5
 2346 0511 03       		.byte	0x3
 2347 0512 00000000 		.4byte	new_pack
 2348 0516 1D       		.uleb128 0x1d
 2349 0517 CD010000 		.4byte	.LASF84
 2350 051b 01       		.byte	0x1
 2351 051c 14       		.byte	0x14
 2352 051d 6B000000 		.4byte	0x6b
 2353 0521 05       		.uleb128 0x5
 2354 0522 03       		.byte	0x3
 2355 0523 00000000 		.4byte	fin_exec
 2356 0527 1B       		.uleb128 0x1b
 2357 0528 8C000000 		.4byte	0x8c
 2358 052c 37050000 		.4byte	0x537
 2359 0530 1C       		.uleb128 0x1c
 2360 0531 AC000000 		.4byte	0xac
 2361 0535 09       		.byte	0x9
 2362 0536 00       		.byte	0
 2363 0537 1D       		.uleb128 0x1d
 2364 0538 5E010000 		.4byte	.LASF85
 2365 053c 01       		.byte	0x1
 2366 053d 17       		.byte	0x17
 2367 053e 27050000 		.4byte	0x527
 2368 0542 05       		.uleb128 0x5
 2369 0543 03       		.byte	0x3
 2370 0544 00000000 		.4byte	test_array
 2371 0548 1D       		.uleb128 0x1d
 2372 0549 22020000 		.4byte	.LASF86
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 56


 2373 054d 01       		.byte	0x1
 2374 054e 1A       		.byte	0x1a
 2375 054f 6B000000 		.4byte	0x6b
 2376 0553 05       		.uleb128 0x5
 2377 0554 03       		.byte	0x3
 2378 0555 00000000 		.4byte	serv_arr_cspot
 2379 0559 1B       		.uleb128 0x1b
 2380 055a 76000000 		.4byte	0x76
 2381 055e 69050000 		.4byte	0x569
 2382 0562 1C       		.uleb128 0x1c
 2383 0563 AC000000 		.4byte	0xac
 2384 0567 13       		.byte	0x13
 2385 0568 00       		.byte	0
 2386 0569 1D       		.uleb128 0x1d
 2387 056a 56000000 		.4byte	.LASF87
 2388 056e 01       		.byte	0x1
 2389 056f 1B       		.byte	0x1b
 2390 0570 59050000 		.4byte	0x559
 2391 0574 05       		.uleb128 0x5
 2392 0575 03       		.byte	0x3
 2393 0576 00000000 		.4byte	servo_array
 2394 057a 1D       		.uleb128 0x1d
 2395 057b 5D040000 		.4byte	.LASF88
 2396 057f 01       		.byte	0x1
 2397 0580 1F       		.byte	0x1f
 2398 0581 6B000000 		.4byte	0x6b
 2399 0585 05       		.uleb128 0x5
 2400 0586 03       		.byte	0x3
 2401 0587 00000000 		.4byte	led_arr_cspot
 2402 058b 1D       		.uleb128 0x1d
 2403 058c 6F010000 		.4byte	.LASF89
 2404 0590 01       		.byte	0x1
 2405 0591 20       		.byte	0x20
 2406 0592 59050000 		.4byte	0x559
 2407 0596 05       		.uleb128 0x5
 2408 0597 03       		.byte	0x3
 2409 0598 00000000 		.4byte	led_array
 2410 059c 1D       		.uleb128 0x1d
 2411 059d A6020000 		.4byte	.LASF90
 2412 05a1 01       		.byte	0x1
 2413 05a2 22       		.byte	0x22
 2414 05a3 76000000 		.4byte	0x76
 2415 05a7 05       		.uleb128 0x5
 2416 05a8 03       		.byte	0x3
 2417 05a9 00000000 		.4byte	feedback_count
 2418 05ad 1D       		.uleb128 0x1d
 2419 05ae 30010000 		.4byte	.LASF91
 2420 05b2 01       		.byte	0x1
 2421 05b3 23       		.byte	0x23
 2422 05b4 6B000000 		.4byte	0x6b
 2423 05b8 05       		.uleb128 0x5
 2424 05b9 03       		.byte	0x3
 2425 05ba 00000000 		.4byte	timerFlag
 2426 05be 1D       		.uleb128 0x1d
 2427 05bf E4010000 		.4byte	.LASF92
 2428 05c3 01       		.byte	0x1
 2429 05c4 8C       		.byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 57


 2430 05c5 BE000000 		.4byte	0xbe
 2431 05c9 05       		.uleb128 0x5
 2432 05ca 03       		.byte	0x3
 2433 05cb 00000000 		.4byte	shldr_state
 2434 05cf 1D       		.uleb128 0x1d
 2435 05d0 96030000 		.4byte	.LASF93
 2436 05d4 01       		.byte	0x1
 2437 05d5 C4       		.byte	0xc4
 2438 05d6 E3000000 		.4byte	0xe3
 2439 05da 05       		.uleb128 0x5
 2440 05db 03       		.byte	0x3
 2441 05dc 00000000 		.4byte	wristTilt_state
 2442 05e0 1D       		.uleb128 0x1d
 2443 05e1 08000000 		.4byte	.LASF94
 2444 05e5 01       		.byte	0x1
 2445 05e6 F5       		.byte	0xf5
 2446 05e7 08010000 		.4byte	0x108
 2447 05eb 05       		.uleb128 0x5
 2448 05ec 03       		.byte	0x3
 2449 05ed 00000000 		.4byte	wristRotate_state
 2450 05f1 1E       		.uleb128 0x1e
 2451 05f2 35040000 		.4byte	.LASF95
 2452 05f6 01       		.byte	0x1
 2453 05f7 2E01     		.2byte	0x12e
 2454 05f9 2D010000 		.4byte	0x12d
 2455 05fd 05       		.uleb128 0x5
 2456 05fe 03       		.byte	0x3
 2457 05ff 00000000 		.4byte	led_state
 2458 0603 1E       		.uleb128 0x1e
 2459 0604 F4000000 		.4byte	.LASF96
 2460 0608 01       		.byte	0x1
 2461 0609 6F01     		.2byte	0x16f
 2462 060b 4D010000 		.4byte	0x14d
 2463 060f 05       		.uleb128 0x5
 2464 0610 03       		.byte	0x3
 2465 0611 00000000 		.4byte	servo_state
 2466 0615 1E       		.uleb128 0x1e
 2467 0616 6D000000 		.4byte	.LASF97
 2468 061a 01       		.byte	0x1
 2469 061b 9F01     		.2byte	0x19f
 2470 061d 6D010000 		.4byte	0x16d
 2471 0621 05       		.uleb128 0x5
 2472 0622 03       		.byte	0x3
 2473 0623 00000000 		.4byte	servo1_state
 2474 0627 1E       		.uleb128 0x1e
 2475 0628 62000000 		.4byte	.LASF98
 2476 062c 01       		.byte	0x1
 2477 062d 0702     		.2byte	0x207
 2478 062f 93010000 		.4byte	0x193
 2479 0633 05       		.uleb128 0x5
 2480 0634 03       		.byte	0x3
 2481 0635 00000000 		.4byte	led1_state
 2482 0639 1E       		.uleb128 0x1e
 2483 063a C3000000 		.4byte	.LASF99
 2484 063e 01       		.byte	0x1
 2485 063f 5302     		.2byte	0x253
 2486 0641 B9010000 		.4byte	0x1b9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 58


 2487 0645 05       		.uleb128 0x5
 2488 0646 03       		.byte	0x3
 2489 0647 00000000 		.4byte	motor_state
 2490 064b 00       		.byte	0
 2491              		.section	.debug_abbrev,"",%progbits
 2492              	.Ldebug_abbrev0:
 2493 0000 01       		.uleb128 0x1
 2494 0001 11       		.uleb128 0x11
 2495 0002 01       		.byte	0x1
 2496 0003 25       		.uleb128 0x25
 2497 0004 0E       		.uleb128 0xe
 2498 0005 13       		.uleb128 0x13
 2499 0006 0B       		.uleb128 0xb
 2500 0007 03       		.uleb128 0x3
 2501 0008 0E       		.uleb128 0xe
 2502 0009 1B       		.uleb128 0x1b
 2503 000a 0E       		.uleb128 0xe
 2504 000b 55       		.uleb128 0x55
 2505 000c 17       		.uleb128 0x17
 2506 000d 11       		.uleb128 0x11
 2507 000e 01       		.uleb128 0x1
 2508 000f 10       		.uleb128 0x10
 2509 0010 17       		.uleb128 0x17
 2510 0011 00       		.byte	0
 2511 0012 00       		.byte	0
 2512 0013 02       		.uleb128 0x2
 2513 0014 24       		.uleb128 0x24
 2514 0015 00       		.byte	0
 2515 0016 0B       		.uleb128 0xb
 2516 0017 0B       		.uleb128 0xb
 2517 0018 3E       		.uleb128 0x3e
 2518 0019 0B       		.uleb128 0xb
 2519 001a 03       		.uleb128 0x3
 2520 001b 0E       		.uleb128 0xe
 2521 001c 00       		.byte	0
 2522 001d 00       		.byte	0
 2523 001e 03       		.uleb128 0x3
 2524 001f 24       		.uleb128 0x24
 2525 0020 00       		.byte	0
 2526 0021 0B       		.uleb128 0xb
 2527 0022 0B       		.uleb128 0xb
 2528 0023 3E       		.uleb128 0x3e
 2529 0024 0B       		.uleb128 0xb
 2530 0025 03       		.uleb128 0x3
 2531 0026 08       		.uleb128 0x8
 2532 0027 00       		.byte	0
 2533 0028 00       		.byte	0
 2534 0029 04       		.uleb128 0x4
 2535 002a 16       		.uleb128 0x16
 2536 002b 00       		.byte	0
 2537 002c 03       		.uleb128 0x3
 2538 002d 0E       		.uleb128 0xe
 2539 002e 3A       		.uleb128 0x3a
 2540 002f 0B       		.uleb128 0xb
 2541 0030 3B       		.uleb128 0x3b
 2542 0031 0B       		.uleb128 0xb
 2543 0032 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 59


 2544 0033 13       		.uleb128 0x13
 2545 0034 00       		.byte	0
 2546 0035 00       		.byte	0
 2547 0036 05       		.uleb128 0x5
 2548 0037 04       		.uleb128 0x4
 2549 0038 01       		.byte	0x1
 2550 0039 03       		.uleb128 0x3
 2551 003a 0E       		.uleb128 0xe
 2552 003b 0B       		.uleb128 0xb
 2553 003c 0B       		.uleb128 0xb
 2554 003d 3A       		.uleb128 0x3a
 2555 003e 0B       		.uleb128 0xb
 2556 003f 3B       		.uleb128 0x3b
 2557 0040 0B       		.uleb128 0xb
 2558 0041 01       		.uleb128 0x1
 2559 0042 13       		.uleb128 0x13
 2560 0043 00       		.byte	0
 2561 0044 00       		.byte	0
 2562 0045 06       		.uleb128 0x6
 2563 0046 28       		.uleb128 0x28
 2564 0047 00       		.byte	0
 2565 0048 03       		.uleb128 0x3
 2566 0049 0E       		.uleb128 0xe
 2567 004a 1C       		.uleb128 0x1c
 2568 004b 0D       		.uleb128 0xd
 2569 004c 00       		.byte	0
 2570 004d 00       		.byte	0
 2571 004e 07       		.uleb128 0x7
 2572 004f 04       		.uleb128 0x4
 2573 0050 01       		.byte	0x1
 2574 0051 03       		.uleb128 0x3
 2575 0052 0E       		.uleb128 0xe
 2576 0053 0B       		.uleb128 0xb
 2577 0054 0B       		.uleb128 0xb
 2578 0055 3A       		.uleb128 0x3a
 2579 0056 0B       		.uleb128 0xb
 2580 0057 3B       		.uleb128 0x3b
 2581 0058 05       		.uleb128 0x5
 2582 0059 01       		.uleb128 0x1
 2583 005a 13       		.uleb128 0x13
 2584 005b 00       		.byte	0
 2585 005c 00       		.byte	0
 2586 005d 08       		.uleb128 0x8
 2587 005e 2E       		.uleb128 0x2e
 2588 005f 01       		.byte	0x1
 2589 0060 3F       		.uleb128 0x3f
 2590 0061 19       		.uleb128 0x19
 2591 0062 03       		.uleb128 0x3
 2592 0063 0E       		.uleb128 0xe
 2593 0064 3A       		.uleb128 0x3a
 2594 0065 0B       		.uleb128 0xb
 2595 0066 3B       		.uleb128 0x3b
 2596 0067 0B       		.uleb128 0xb
 2597 0068 27       		.uleb128 0x27
 2598 0069 19       		.uleb128 0x19
 2599 006a 11       		.uleb128 0x11
 2600 006b 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 60


 2601 006c 12       		.uleb128 0x12
 2602 006d 06       		.uleb128 0x6
 2603 006e 40       		.uleb128 0x40
 2604 006f 18       		.uleb128 0x18
 2605 0070 9642     		.uleb128 0x2116
 2606 0072 19       		.uleb128 0x19
 2607 0073 01       		.uleb128 0x1
 2608 0074 13       		.uleb128 0x13
 2609 0075 00       		.byte	0
 2610 0076 00       		.byte	0
 2611 0077 09       		.uleb128 0x9
 2612 0078 34       		.uleb128 0x34
 2613 0079 00       		.byte	0
 2614 007a 03       		.uleb128 0x3
 2615 007b 0E       		.uleb128 0xe
 2616 007c 3A       		.uleb128 0x3a
 2617 007d 0B       		.uleb128 0xb
 2618 007e 3B       		.uleb128 0x3b
 2619 007f 0B       		.uleb128 0xb
 2620 0080 49       		.uleb128 0x49
 2621 0081 13       		.uleb128 0x13
 2622 0082 02       		.uleb128 0x2
 2623 0083 18       		.uleb128 0x18
 2624 0084 00       		.byte	0
 2625 0085 00       		.byte	0
 2626 0086 0A       		.uleb128 0xa
 2627 0087 2E       		.uleb128 0x2e
 2628 0088 01       		.byte	0x1
 2629 0089 3F       		.uleb128 0x3f
 2630 008a 19       		.uleb128 0x19
 2631 008b 03       		.uleb128 0x3
 2632 008c 0E       		.uleb128 0xe
 2633 008d 3A       		.uleb128 0x3a
 2634 008e 0B       		.uleb128 0xb
 2635 008f 3B       		.uleb128 0x3b
 2636 0090 0B       		.uleb128 0xb
 2637 0091 11       		.uleb128 0x11
 2638 0092 01       		.uleb128 0x1
 2639 0093 12       		.uleb128 0x12
 2640 0094 06       		.uleb128 0x6
 2641 0095 40       		.uleb128 0x40
 2642 0096 18       		.uleb128 0x18
 2643 0097 9742     		.uleb128 0x2117
 2644 0099 19       		.uleb128 0x19
 2645 009a 01       		.uleb128 0x1
 2646 009b 13       		.uleb128 0x13
 2647 009c 00       		.byte	0
 2648 009d 00       		.byte	0
 2649 009e 0B       		.uleb128 0xb
 2650 009f 34       		.uleb128 0x34
 2651 00a0 00       		.byte	0
 2652 00a1 03       		.uleb128 0x3
 2653 00a2 08       		.uleb128 0x8
 2654 00a3 3A       		.uleb128 0x3a
 2655 00a4 0B       		.uleb128 0xb
 2656 00a5 3B       		.uleb128 0x3b
 2657 00a6 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 61


 2658 00a7 49       		.uleb128 0x49
 2659 00a8 13       		.uleb128 0x13
 2660 00a9 02       		.uleb128 0x2
 2661 00aa 18       		.uleb128 0x18
 2662 00ab 00       		.byte	0
 2663 00ac 00       		.byte	0
 2664 00ad 0C       		.uleb128 0xc
 2665 00ae 2E       		.uleb128 0x2e
 2666 00af 00       		.byte	0
 2667 00b0 3F       		.uleb128 0x3f
 2668 00b1 19       		.uleb128 0x19
 2669 00b2 03       		.uleb128 0x3
 2670 00b3 0E       		.uleb128 0xe
 2671 00b4 3A       		.uleb128 0x3a
 2672 00b5 0B       		.uleb128 0xb
 2673 00b6 3B       		.uleb128 0x3b
 2674 00b7 0B       		.uleb128 0xb
 2675 00b8 11       		.uleb128 0x11
 2676 00b9 01       		.uleb128 0x1
 2677 00ba 12       		.uleb128 0x12
 2678 00bb 06       		.uleb128 0x6
 2679 00bc 40       		.uleb128 0x40
 2680 00bd 18       		.uleb128 0x18
 2681 00be 9742     		.uleb128 0x2117
 2682 00c0 19       		.uleb128 0x19
 2683 00c1 00       		.byte	0
 2684 00c2 00       		.byte	0
 2685 00c3 0D       		.uleb128 0xd
 2686 00c4 2E       		.uleb128 0x2e
 2687 00c5 00       		.byte	0
 2688 00c6 3F       		.uleb128 0x3f
 2689 00c7 19       		.uleb128 0x19
 2690 00c8 03       		.uleb128 0x3
 2691 00c9 0E       		.uleb128 0xe
 2692 00ca 3A       		.uleb128 0x3a
 2693 00cb 0B       		.uleb128 0xb
 2694 00cc 3B       		.uleb128 0x3b
 2695 00cd 05       		.uleb128 0x5
 2696 00ce 11       		.uleb128 0x11
 2697 00cf 01       		.uleb128 0x1
 2698 00d0 12       		.uleb128 0x12
 2699 00d1 06       		.uleb128 0x6
 2700 00d2 40       		.uleb128 0x40
 2701 00d3 18       		.uleb128 0x18
 2702 00d4 9742     		.uleb128 0x2117
 2703 00d6 19       		.uleb128 0x19
 2704 00d7 00       		.byte	0
 2705 00d8 00       		.byte	0
 2706 00d9 0E       		.uleb128 0xe
 2707 00da 2E       		.uleb128 0x2e
 2708 00db 01       		.byte	0x1
 2709 00dc 3F       		.uleb128 0x3f
 2710 00dd 19       		.uleb128 0x19
 2711 00de 03       		.uleb128 0x3
 2712 00df 08       		.uleb128 0x8
 2713 00e0 3A       		.uleb128 0x3a
 2714 00e1 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 62


 2715 00e2 3B       		.uleb128 0x3b
 2716 00e3 05       		.uleb128 0x5
 2717 00e4 11       		.uleb128 0x11
 2718 00e5 01       		.uleb128 0x1
 2719 00e6 12       		.uleb128 0x12
 2720 00e7 06       		.uleb128 0x6
 2721 00e8 40       		.uleb128 0x40
 2722 00e9 18       		.uleb128 0x18
 2723 00ea 9642     		.uleb128 0x2116
 2724 00ec 19       		.uleb128 0x19
 2725 00ed 01       		.uleb128 0x1
 2726 00ee 13       		.uleb128 0x13
 2727 00ef 00       		.byte	0
 2728 00f0 00       		.byte	0
 2729 00f1 0F       		.uleb128 0xf
 2730 00f2 34       		.uleb128 0x34
 2731 00f3 00       		.byte	0
 2732 00f4 03       		.uleb128 0x3
 2733 00f5 08       		.uleb128 0x8
 2734 00f6 3A       		.uleb128 0x3a
 2735 00f7 0B       		.uleb128 0xb
 2736 00f8 3B       		.uleb128 0x3b
 2737 00f9 05       		.uleb128 0x5
 2738 00fa 49       		.uleb128 0x49
 2739 00fb 13       		.uleb128 0x13
 2740 00fc 02       		.uleb128 0x2
 2741 00fd 18       		.uleb128 0x18
 2742 00fe 00       		.byte	0
 2743 00ff 00       		.byte	0
 2744 0100 10       		.uleb128 0x10
 2745 0101 0B       		.uleb128 0xb
 2746 0102 01       		.byte	0x1
 2747 0103 11       		.uleb128 0x11
 2748 0104 01       		.uleb128 0x1
 2749 0105 12       		.uleb128 0x12
 2750 0106 06       		.uleb128 0x6
 2751 0107 00       		.byte	0
 2752 0108 00       		.byte	0
 2753 0109 11       		.uleb128 0x11
 2754 010a 2E       		.uleb128 0x2e
 2755 010b 01       		.byte	0x1
 2756 010c 3F       		.uleb128 0x3f
 2757 010d 19       		.uleb128 0x19
 2758 010e 03       		.uleb128 0x3
 2759 010f 0E       		.uleb128 0xe
 2760 0110 3A       		.uleb128 0x3a
 2761 0111 0B       		.uleb128 0xb
 2762 0112 3B       		.uleb128 0x3b
 2763 0113 05       		.uleb128 0x5
 2764 0114 49       		.uleb128 0x49
 2765 0115 13       		.uleb128 0x13
 2766 0116 3C       		.uleb128 0x3c
 2767 0117 19       		.uleb128 0x19
 2768 0118 00       		.byte	0
 2769 0119 00       		.byte	0
 2770 011a 12       		.uleb128 0x12
 2771 011b 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 63


 2772 011c 00       		.byte	0
 2773 011d 00       		.byte	0
 2774 011e 00       		.byte	0
 2775 011f 13       		.uleb128 0x13
 2776 0120 2E       		.uleb128 0x2e
 2777 0121 01       		.byte	0x1
 2778 0122 3F       		.uleb128 0x3f
 2779 0123 19       		.uleb128 0x19
 2780 0124 03       		.uleb128 0x3
 2781 0125 0E       		.uleb128 0xe
 2782 0126 3A       		.uleb128 0x3a
 2783 0127 0B       		.uleb128 0xb
 2784 0128 3B       		.uleb128 0x3b
 2785 0129 05       		.uleb128 0x5
 2786 012a 27       		.uleb128 0x27
 2787 012b 19       		.uleb128 0x19
 2788 012c 49       		.uleb128 0x49
 2789 012d 13       		.uleb128 0x13
 2790 012e 11       		.uleb128 0x11
 2791 012f 01       		.uleb128 0x1
 2792 0130 12       		.uleb128 0x12
 2793 0131 06       		.uleb128 0x6
 2794 0132 40       		.uleb128 0x40
 2795 0133 18       		.uleb128 0x18
 2796 0134 9642     		.uleb128 0x2116
 2797 0136 19       		.uleb128 0x19
 2798 0137 01       		.uleb128 0x1
 2799 0138 13       		.uleb128 0x13
 2800 0139 00       		.byte	0
 2801 013a 00       		.byte	0
 2802 013b 14       		.uleb128 0x14
 2803 013c 05       		.uleb128 0x5
 2804 013d 00       		.byte	0
 2805 013e 03       		.uleb128 0x3
 2806 013f 0E       		.uleb128 0xe
 2807 0140 3A       		.uleb128 0x3a
 2808 0141 0B       		.uleb128 0xb
 2809 0142 3B       		.uleb128 0x3b
 2810 0143 05       		.uleb128 0x5
 2811 0144 49       		.uleb128 0x49
 2812 0145 13       		.uleb128 0x13
 2813 0146 02       		.uleb128 0x2
 2814 0147 18       		.uleb128 0x18
 2815 0148 00       		.byte	0
 2816 0149 00       		.byte	0
 2817 014a 15       		.uleb128 0x15
 2818 014b 0F       		.uleb128 0xf
 2819 014c 00       		.byte	0
 2820 014d 0B       		.uleb128 0xb
 2821 014e 0B       		.uleb128 0xb
 2822 014f 49       		.uleb128 0x49
 2823 0150 13       		.uleb128 0x13
 2824 0151 00       		.byte	0
 2825 0152 00       		.byte	0
 2826 0153 16       		.uleb128 0x16
 2827 0154 2E       		.uleb128 0x2e
 2828 0155 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 64


 2829 0156 3F       		.uleb128 0x3f
 2830 0157 19       		.uleb128 0x19
 2831 0158 03       		.uleb128 0x3
 2832 0159 0E       		.uleb128 0xe
 2833 015a 3A       		.uleb128 0x3a
 2834 015b 0B       		.uleb128 0xb
 2835 015c 3B       		.uleb128 0x3b
 2836 015d 05       		.uleb128 0x5
 2837 015e 11       		.uleb128 0x11
 2838 015f 01       		.uleb128 0x1
 2839 0160 12       		.uleb128 0x12
 2840 0161 06       		.uleb128 0x6
 2841 0162 40       		.uleb128 0x40
 2842 0163 18       		.uleb128 0x18
 2843 0164 9642     		.uleb128 0x2116
 2844 0166 19       		.uleb128 0x19
 2845 0167 01       		.uleb128 0x1
 2846 0168 13       		.uleb128 0x13
 2847 0169 00       		.byte	0
 2848 016a 00       		.byte	0
 2849 016b 17       		.uleb128 0x17
 2850 016c 34       		.uleb128 0x34
 2851 016d 00       		.byte	0
 2852 016e 03       		.uleb128 0x3
 2853 016f 0E       		.uleb128 0xe
 2854 0170 3A       		.uleb128 0x3a
 2855 0171 0B       		.uleb128 0xb
 2856 0172 3B       		.uleb128 0x3b
 2857 0173 05       		.uleb128 0x5
 2858 0174 49       		.uleb128 0x49
 2859 0175 13       		.uleb128 0x13
 2860 0176 02       		.uleb128 0x2
 2861 0177 18       		.uleb128 0x18
 2862 0178 00       		.byte	0
 2863 0179 00       		.byte	0
 2864 017a 18       		.uleb128 0x18
 2865 017b 2E       		.uleb128 0x2e
 2866 017c 01       		.byte	0x1
 2867 017d 3F       		.uleb128 0x3f
 2868 017e 19       		.uleb128 0x19
 2869 017f 03       		.uleb128 0x3
 2870 0180 0E       		.uleb128 0xe
 2871 0181 3A       		.uleb128 0x3a
 2872 0182 0B       		.uleb128 0xb
 2873 0183 3B       		.uleb128 0x3b
 2874 0184 05       		.uleb128 0x5
 2875 0185 27       		.uleb128 0x27
 2876 0186 19       		.uleb128 0x19
 2877 0187 49       		.uleb128 0x49
 2878 0188 13       		.uleb128 0x13
 2879 0189 11       		.uleb128 0x11
 2880 018a 01       		.uleb128 0x1
 2881 018b 12       		.uleb128 0x12
 2882 018c 06       		.uleb128 0x6
 2883 018d 40       		.uleb128 0x40
 2884 018e 18       		.uleb128 0x18
 2885 018f 9742     		.uleb128 0x2117
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 65


 2886 0191 19       		.uleb128 0x19
 2887 0192 01       		.uleb128 0x1
 2888 0193 13       		.uleb128 0x13
 2889 0194 00       		.byte	0
 2890 0195 00       		.byte	0
 2891 0196 19       		.uleb128 0x19
 2892 0197 05       		.uleb128 0x5
 2893 0198 00       		.byte	0
 2894 0199 03       		.uleb128 0x3
 2895 019a 08       		.uleb128 0x8
 2896 019b 3A       		.uleb128 0x3a
 2897 019c 0B       		.uleb128 0xb
 2898 019d 3B       		.uleb128 0x3b
 2899 019e 05       		.uleb128 0x5
 2900 019f 49       		.uleb128 0x49
 2901 01a0 13       		.uleb128 0x13
 2902 01a1 02       		.uleb128 0x2
 2903 01a2 18       		.uleb128 0x18
 2904 01a3 00       		.byte	0
 2905 01a4 00       		.byte	0
 2906 01a5 1A       		.uleb128 0x1a
 2907 01a6 2E       		.uleb128 0x2e
 2908 01a7 01       		.byte	0x1
 2909 01a8 3F       		.uleb128 0x3f
 2910 01a9 19       		.uleb128 0x19
 2911 01aa 03       		.uleb128 0x3
 2912 01ab 0E       		.uleb128 0xe
 2913 01ac 3A       		.uleb128 0x3a
 2914 01ad 0B       		.uleb128 0xb
 2915 01ae 3B       		.uleb128 0x3b
 2916 01af 05       		.uleb128 0x5
 2917 01b0 49       		.uleb128 0x49
 2918 01b1 13       		.uleb128 0x13
 2919 01b2 11       		.uleb128 0x11
 2920 01b3 01       		.uleb128 0x1
 2921 01b4 12       		.uleb128 0x12
 2922 01b5 06       		.uleb128 0x6
 2923 01b6 40       		.uleb128 0x40
 2924 01b7 18       		.uleb128 0x18
 2925 01b8 9642     		.uleb128 0x2116
 2926 01ba 19       		.uleb128 0x19
 2927 01bb 01       		.uleb128 0x1
 2928 01bc 13       		.uleb128 0x13
 2929 01bd 00       		.byte	0
 2930 01be 00       		.byte	0
 2931 01bf 1B       		.uleb128 0x1b
 2932 01c0 01       		.uleb128 0x1
 2933 01c1 01       		.byte	0x1
 2934 01c2 49       		.uleb128 0x49
 2935 01c3 13       		.uleb128 0x13
 2936 01c4 01       		.uleb128 0x1
 2937 01c5 13       		.uleb128 0x13
 2938 01c6 00       		.byte	0
 2939 01c7 00       		.byte	0
 2940 01c8 1C       		.uleb128 0x1c
 2941 01c9 21       		.uleb128 0x21
 2942 01ca 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 66


 2943 01cb 49       		.uleb128 0x49
 2944 01cc 13       		.uleb128 0x13
 2945 01cd 2F       		.uleb128 0x2f
 2946 01ce 0B       		.uleb128 0xb
 2947 01cf 00       		.byte	0
 2948 01d0 00       		.byte	0
 2949 01d1 1D       		.uleb128 0x1d
 2950 01d2 34       		.uleb128 0x34
 2951 01d3 00       		.byte	0
 2952 01d4 03       		.uleb128 0x3
 2953 01d5 0E       		.uleb128 0xe
 2954 01d6 3A       		.uleb128 0x3a
 2955 01d7 0B       		.uleb128 0xb
 2956 01d8 3B       		.uleb128 0x3b
 2957 01d9 0B       		.uleb128 0xb
 2958 01da 49       		.uleb128 0x49
 2959 01db 13       		.uleb128 0x13
 2960 01dc 3F       		.uleb128 0x3f
 2961 01dd 19       		.uleb128 0x19
 2962 01de 02       		.uleb128 0x2
 2963 01df 18       		.uleb128 0x18
 2964 01e0 00       		.byte	0
 2965 01e1 00       		.byte	0
 2966 01e2 1E       		.uleb128 0x1e
 2967 01e3 34       		.uleb128 0x34
 2968 01e4 00       		.byte	0
 2969 01e5 03       		.uleb128 0x3
 2970 01e6 0E       		.uleb128 0xe
 2971 01e7 3A       		.uleb128 0x3a
 2972 01e8 0B       		.uleb128 0xb
 2973 01e9 3B       		.uleb128 0x3b
 2974 01ea 05       		.uleb128 0x5
 2975 01eb 49       		.uleb128 0x49
 2976 01ec 13       		.uleb128 0x13
 2977 01ed 3F       		.uleb128 0x3f
 2978 01ee 19       		.uleb128 0x19
 2979 01ef 02       		.uleb128 0x2
 2980 01f0 18       		.uleb128 0x18
 2981 01f1 00       		.byte	0
 2982 01f2 00       		.byte	0
 2983 01f3 00       		.byte	0
 2984              		.section	.debug_aranges,"",%progbits
 2985 0000 9C000000 		.4byte	0x9c
 2986 0004 0200     		.2byte	0x2
 2987 0006 00000000 		.4byte	.Ldebug_info0
 2988 000a 04       		.byte	0x4
 2989 000b 00       		.byte	0
 2990 000c 0000     		.2byte	0
 2991 000e 0000     		.2byte	0
 2992 0010 00000000 		.4byte	.LFB33
 2993 0014 28000000 		.4byte	.LFE33-.LFB33
 2994 0018 00000000 		.4byte	.LFB34
 2995 001c 0C010000 		.4byte	.LFE34-.LFB34
 2996 0020 00000000 		.4byte	.LFB35
 2997 0024 4C000000 		.4byte	.LFE35-.LFB35
 2998 0028 00000000 		.4byte	.LFB36
 2999 002c 08000000 		.4byte	.LFE36-.LFB36
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 67


 3000 0030 00000000 		.4byte	.LFB37
 3001 0034 44000000 		.4byte	.LFE37-.LFB37
 3002 0038 00000000 		.4byte	.LFB38
 3003 003c 08000000 		.4byte	.LFE38-.LFB38
 3004 0040 00000000 		.4byte	.LFB39
 3005 0044 48000000 		.4byte	.LFE39-.LFB39
 3006 0048 00000000 		.4byte	.LFB40
 3007 004c 48000000 		.4byte	.LFE40-.LFB40
 3008 0050 00000000 		.4byte	.LFB41
 3009 0054 08000000 		.4byte	.LFE41-.LFB41
 3010 0058 00000000 		.4byte	.LFB42
 3011 005c 88000000 		.4byte	.LFE42-.LFB42
 3012 0060 00000000 		.4byte	.LFB43
 3013 0064 78000000 		.4byte	.LFE43-.LFB43
 3014 0068 00000000 		.4byte	.LFB44
 3015 006c 88000000 		.4byte	.LFE44-.LFB44
 3016 0070 00000000 		.4byte	.LFB45
 3017 0074 34010000 		.4byte	.LFE45-.LFB45
 3018 0078 00000000 		.4byte	.LFB46
 3019 007c 90000000 		.4byte	.LFE46-.LFB46
 3020 0080 00000000 		.4byte	.LFB47
 3021 0084 34010000 		.4byte	.LFE47-.LFB47
 3022 0088 00000000 		.4byte	.LFB48
 3023 008c 08000000 		.4byte	.LFE48-.LFB48
 3024 0090 00000000 		.4byte	.LFB49
 3025 0094 34010000 		.4byte	.LFE49-.LFB49
 3026 0098 00000000 		.4byte	0
 3027 009c 00000000 		.4byte	0
 3028              		.section	.debug_ranges,"",%progbits
 3029              	.Ldebug_ranges0:
 3030 0000 00000000 		.4byte	.LFB33
 3031 0004 28000000 		.4byte	.LFE33
 3032 0008 00000000 		.4byte	.LFB34
 3033 000c 0C010000 		.4byte	.LFE34
 3034 0010 00000000 		.4byte	.LFB35
 3035 0014 4C000000 		.4byte	.LFE35
 3036 0018 00000000 		.4byte	.LFB36
 3037 001c 08000000 		.4byte	.LFE36
 3038 0020 00000000 		.4byte	.LFB37
 3039 0024 44000000 		.4byte	.LFE37
 3040 0028 00000000 		.4byte	.LFB38
 3041 002c 08000000 		.4byte	.LFE38
 3042 0030 00000000 		.4byte	.LFB39
 3043 0034 48000000 		.4byte	.LFE39
 3044 0038 00000000 		.4byte	.LFB40
 3045 003c 48000000 		.4byte	.LFE40
 3046 0040 00000000 		.4byte	.LFB41
 3047 0044 08000000 		.4byte	.LFE41
 3048 0048 00000000 		.4byte	.LFB42
 3049 004c 88000000 		.4byte	.LFE42
 3050 0050 00000000 		.4byte	.LFB43
 3051 0054 78000000 		.4byte	.LFE43
 3052 0058 00000000 		.4byte	.LFB44
 3053 005c 88000000 		.4byte	.LFE44
 3054 0060 00000000 		.4byte	.LFB45
 3055 0064 34010000 		.4byte	.LFE45
 3056 0068 00000000 		.4byte	.LFB46
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 68


 3057 006c 90000000 		.4byte	.LFE46
 3058 0070 00000000 		.4byte	.LFB47
 3059 0074 34010000 		.4byte	.LFE47
 3060 0078 00000000 		.4byte	.LFB48
 3061 007c 08000000 		.4byte	.LFE48
 3062 0080 00000000 		.4byte	.LFB49
 3063 0084 34010000 		.4byte	.LFE49
 3064 0088 00000000 		.4byte	0
 3065 008c 00000000 		.4byte	0
 3066              		.section	.debug_line,"",%progbits
 3067              	.Ldebug_line0:
 3068 0000 2D030000 		.section	.debug_str,"MS",%progbits,1
 3068      0200BF00 
 3068      00000201 
 3068      FB0E0D00 
 3068      01010101 
 3069              	.LASF34:
 3070 0000 6C5F7374 		.ascii	"l_start\000"
 3070      61727400 
 3071              	.LASF94:
 3072 0008 77726973 		.ascii	"wristRotate_state\000"
 3072      74526F74 
 3072      6174655F 
 3072      73746174 
 3072      6500
 3073              	.LASF73:
 3074 001a 6E65775F 		.ascii	"new_val\000"
 3074      76616C00 
 3075              	.LASF19:
 3076 0022 73686C64 		.ascii	"shldr_init\000"
 3076      725F696E 
 3076      697400
 3077              	.LASF25:
 3078 002d 74696C74 		.ascii	"tilt_start\000"
 3078      5F737461 
 3078      727400
 3079              	.LASF64:
 3080 0038 61727261 		.ascii	"array\000"
 3080      7900
 3081              	.LASF48:
 3082 003e 6C315F69 		.ascii	"l1_init\000"
 3082      6E697400 
 3083              	.LASF56:
 3084 0046 66696C6C 		.ascii	"fill_data_array\000"
 3084      5F646174 
 3084      615F6172 
 3084      72617900 
 3085              	.LASF87:
 3086 0056 73657276 		.ascii	"servo_array\000"
 3086      6F5F6172 
 3086      72617900 
 3087              	.LASF98:
 3088 0062 6C656431 		.ascii	"led1_state\000"
 3088      5F737461 
 3088      746500
 3089              	.LASF97:
 3090 006d 73657276 		.ascii	"servo1_state\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 69


 3090      6F315F73 
 3090      74617465 
 3090      00
 3091              	.LASF30:
 3092 007a 726F7461 		.ascii	"rotate_start\000"
 3092      74655F73 
 3092      74617274 
 3092      00
 3093              	.LASF16:
 3094 0087 73697A65 		.ascii	"sizetype\000"
 3094      74797065 
 3094      00
 3095              	.LASF28:
 3096 0090 77726973 		.ascii	"wristRotate_states\000"
 3096      74526F74 
 3096      6174655F 
 3096      73746174 
 3096      657300
 3097              	.LASF82:
 3098 00a3 77697A6E 		.ascii	"wiznet\000"
 3098      657400
 3099              	.LASF72:
 3100 00aa 6C65645F 		.ascii	"led_adjust\000"
 3100      61646A75 
 3100      737400
 3101              	.LASF6:
 3102 00b5 6C6F6E67 		.ascii	"long long int\000"
 3102      206C6F6E 
 3102      6720696E 
 3102      7400
 3103              	.LASF99:
 3104 00c3 6D6F746F 		.ascii	"motor_state\000"
 3104      725F7374 
 3104      61746500 
 3105              	.LASF50:
 3106 00cf 6C315F77 		.ascii	"l1_wait\000"
 3106      61697400 
 3107              	.LASF2:
 3108 00d7 73686F72 		.ascii	"short int\000"
 3108      7420696E 
 3108      7400
 3109              	.LASF37:
 3110 00e1 73657276 		.ascii	"servo_states\000"
 3110      6F5F7374 
 3110      61746573 
 3110      00
 3111              	.LASF60:
 3112 00ee 656C626F 		.ascii	"elbow\000"
 3112      7700
 3113              	.LASF96:
 3114 00f4 73657276 		.ascii	"servo_state\000"
 3114      6F5F7374 
 3114      61746500 
 3115              	.LASF44:
 3116 0100 73315F65 		.ascii	"s1_execute\000"
 3116      78656375 
 3116      746500
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 70


 3117              	.LASF10:
 3118 010b 75696E74 		.ascii	"uint16\000"
 3118      313600
 3119              	.LASF62:
 3120 0112 77726973 		.ascii	"wristRotate\000"
 3120      74526F74 
 3120      61746500 
 3121              	.LASF12:
 3122 011e 696E7431 		.ascii	"int16\000"
 3122      3600
 3123              	.LASF29:
 3124 0124 726F7461 		.ascii	"rotate_init\000"
 3124      74655F69 
 3124      6E697400 
 3125              	.LASF91:
 3126 0130 74696D65 		.ascii	"timerFlag\000"
 3126      72466C61 
 3126      6700
 3127              	.LASF46:
 3128 013a 6C656431 		.ascii	"led1_states\000"
 3128      5F737461 
 3128      74657300 
 3129              	.LASF35:
 3130 0146 6C5F6469 		.ascii	"l_different\000"
 3130      66666572 
 3130      656E7400 
 3131              	.LASF0:
 3132 0152 7369676E 		.ascii	"signed char\000"
 3132      65642063 
 3132      68617200 
 3133              	.LASF85:
 3134 015e 74657374 		.ascii	"test_array\000"
 3134      5F617272 
 3134      617900
 3135              	.LASF13:
 3136 0169 666C6F61 		.ascii	"float\000"
 3136      7400
 3137              	.LASF89:
 3138 016f 6C65645F 		.ascii	"led_array\000"
 3138      61727261 
 3138      7900
 3139              	.LASF58:
 3140 0179 62617365 		.ascii	"baseAzimuth\000"
 3140      417A696D 
 3140      75746800 
 3141              	.LASF61:
 3142 0185 77726973 		.ascii	"wristTilt\000"
 3142      7454696C 
 3142      7400
 3143              	.LASF31:
 3144 018f 726F7461 		.ascii	"rotate_control\000"
 3144      74655F63 
 3144      6F6E7472 
 3144      6F6C00
 3145              	.LASF15:
 3146 019e 63686172 		.ascii	"char\000"
 3146      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 71


 3147              	.LASF4:
 3148 01a3 6C6F6E67 		.ascii	"long int\000"
 3148      20696E74 
 3148      00
 3149              	.LASF42:
 3150 01ac 73315F73 		.ascii	"s1_start\000"
 3150      74617274 
 3150      00
 3151              	.LASF22:
 3152 01b5 73686C64 		.ascii	"shldr_states\000"
 3152      725F7374 
 3152      61746573 
 3152      00
 3153              	.LASF49:
 3154 01c2 6C315F65 		.ascii	"l1_execute\000"
 3154      78656375 
 3154      746500
 3155              	.LASF84:
 3156 01cd 66696E5F 		.ascii	"fin_exec\000"
 3156      65786563 
 3156      00
 3157              	.LASF1:
 3158 01d6 756E7369 		.ascii	"unsigned char\000"
 3158      676E6564 
 3158      20636861 
 3158      7200
 3159              	.LASF92:
 3160 01e4 73686C64 		.ascii	"shldr_state\000"
 3160      725F7374 
 3160      61746500 
 3161              	.LASF67:
 3162 01f0 50574D5F 		.ascii	"PWM_1_WriteCompare1\000"
 3162      315F5772 
 3162      69746543 
 3162      6F6D7061 
 3162      72653100 
 3163              	.LASF68:
 3164 0204 50574D5F 		.ascii	"PWM_1_WriteCompare2\000"
 3164      315F5772 
 3164      69746543 
 3164      6F6D7061 
 3164      72653200 
 3165              	.LASF24:
 3166 0218 74696C74 		.ascii	"tilt_init\000"
 3166      5F696E69 
 3166      7400
 3167              	.LASF86:
 3168 0222 73657276 		.ascii	"serv_arr_cspot\000"
 3168      5F617272 
 3168      5F637370 
 3168      6F7400
 3169              	.LASF18:
 3170 0231 73686C64 		.ascii	"shldr_start\000"
 3170      725F7374 
 3170      61727400 
 3171              	.LASF101:
 3172 023d 2E5C6D61 		.ascii	".\\main.c\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 72


 3172      696E2E63 
 3172      00
 3173              	.LASF63:
 3174 0246 73656E64 		.ascii	"send_feedback\000"
 3174      5F666565 
 3174      64626163 
 3174      6B00
 3175              	.LASF76:
 3176 0254 74696D65 		.ascii	"timer_isr\000"
 3176      725F6973 
 3176      7200
 3177              	.LASF55:
 3178 025e 6973725F 		.ascii	"isr_var\000"
 3178      76617200 
 3179              	.LASF78:
 3180 0266 636F756E 		.ascii	"counter\000"
 3180      74657200 
 3181              	.LASF36:
 3182 026e 6C5F7761 		.ascii	"l_wait\000"
 3182      697400
 3183              	.LASF80:
 3184 0275 72616E64 		.ascii	"random_number\000"
 3184      6F6D5F6E 
 3184      756D6265 
 3184      7200
 3185              	.LASF27:
 3186 0283 74696C74 		.ascii	"tilt_feedback\000"
 3186      5F666565 
 3186      64626163 
 3186      6B00
 3187              	.LASF20:
 3188 0291 73686C64 		.ascii	"shldr_fdbk\000"
 3188      725F6664 
 3188      626B00
 3189              	.LASF65:
 3190 029c 6E756D5F 		.ascii	"num_items\000"
 3190      6974656D 
 3190      7300
 3191              	.LASF90:
 3192 02a6 66656564 		.ascii	"feedback_count\000"
 3192      6261636B 
 3192      5F636F75 
 3192      6E7400
 3193              	.LASF7:
 3194 02b5 6C6F6E67 		.ascii	"long long unsigned int\000"
 3194      206C6F6E 
 3194      6720756E 
 3194      7369676E 
 3194      65642069 
 3195              	.LASF41:
 3196 02cc 73657276 		.ascii	"servo1_states\000"
 3196      6F315F73 
 3196      74617465 
 3196      7300
 3197              	.LASF8:
 3198 02da 756E7369 		.ascii	"unsigned int\000"
 3198      676E6564 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 73


 3198      20696E74 
 3198      00
 3199              	.LASF52:
 3200 02e7 6D5F7374 		.ascii	"m_start\000"
 3200      61727400 
 3201              	.LASF5:
 3202 02ef 6C6F6E67 		.ascii	"long unsigned int\000"
 3202      20756E73 
 3202      69676E65 
 3202      6420696E 
 3202      7400
 3203              	.LASF3:
 3204 0301 73686F72 		.ascii	"short unsigned int\000"
 3204      7420756E 
 3204      7369676E 
 3204      65642069 
 3204      6E7400
 3205              	.LASF23:
 3206 0314 77726973 		.ascii	"wristTilt_states\000"
 3206      7454696C 
 3206      745F7374 
 3206      61746573 
 3206      00
 3207              	.LASF51:
 3208 0325 6D6F746F 		.ascii	"motor_states\000"
 3208      725F7374 
 3208      61746573 
 3208      00
 3209              	.LASF102:
 3210 0332 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 3210      73657273 
 3210      5C53616D 
 3210      75656C5C 
 3210      446F6375 
 3211 0360 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 3211      5C61726D 
 3211      5F636F6E 
 3211      74726F6C 
 3211      6C65725F 
 3212 0390 00       		.ascii	"\000"
 3213              	.LASF77:
 3214 0391 6D61696E 		.ascii	"main\000"
 3214      00
 3215              	.LASF93:
 3216 0396 77726973 		.ascii	"wristTilt_state\000"
 3216      7454696C 
 3216      745F7374 
 3216      61746500 
 3217              	.LASF69:
 3218 03a6 73657276 		.ascii	"servo1\000"
 3218      6F3100
 3219              	.LASF33:
 3220 03ad 6C65645F 		.ascii	"led_states\000"
 3220      73746174 
 3220      657300
 3221              	.LASF9:
 3222 03b8 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 74


 3222      3800
 3223              	.LASF75:
 3224 03be 6D6F746F 		.ascii	"motor\000"
 3224      7200
 3225              	.LASF53:
 3226 03c4 6D5F6469 		.ascii	"m_different\000"
 3226      66666572 
 3226      656E7400 
 3227              	.LASF59:
 3228 03d0 73686F75 		.ascii	"shoulder\000"
 3228      6C646572 
 3228      00
 3229              	.LASF11:
 3230 03d9 75696E74 		.ascii	"uint32\000"
 3230      333200
 3231              	.LASF21:
 3232 03e0 73686C64 		.ascii	"shldr_exe\000"
 3232      725F6578 
 3232      6500
 3233              	.LASF26:
 3234 03ea 74696C74 		.ascii	"tilt_control\000"
 3234      5F636F6E 
 3234      74726F6C 
 3234      00
 3235              	.LASF14:
 3236 03f7 646F7562 		.ascii	"double\000"
 3236      6C6500
 3237              	.LASF79:
 3238 03fe 636F756E 		.ascii	"counter_five\000"
 3238      7465725F 
 3238      66697665 
 3238      00
 3239              	.LASF17:
 3240 040b 74696D65 		.ascii	"time_t\000"
 3240      5F7400
 3241              	.LASF47:
 3242 0412 6C315F73 		.ascii	"l1_start\000"
 3242      74617274 
 3242      00
 3243              	.LASF39:
 3244 041b 735F6469 		.ascii	"s_different\000"
 3244      66666572 
 3244      656E7400 
 3245              	.LASF66:
 3246 0427 73657276 		.ascii	"servo\000"
 3246      6F00
 3247              	.LASF38:
 3248 042d 735F7374 		.ascii	"s_start\000"
 3248      61727400 
 3249              	.LASF95:
 3250 0435 6C65645F 		.ascii	"led_state\000"
 3250      73746174 
 3250      6500
 3251              	.LASF43:
 3252 043f 73315F69 		.ascii	"s1_init\000"
 3252      6E697400 
 3253              	.LASF74:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 75


 3254 0447 6C656431 		.ascii	"led1\000"
 3254      00
 3255              	.LASF57:
 3256 044c 66696C6C 		.ascii	"fill_data_array1\000"
 3256      5F646174 
 3256      615F6172 
 3256      72617931 
 3256      00
 3257              	.LASF88:
 3258 045d 6C65645F 		.ascii	"led_arr_cspot\000"
 3258      6172725F 
 3258      6373706F 
 3258      7400
 3259              	.LASF83:
 3260 046b 6E65775F 		.ascii	"new_pack\000"
 3260      7061636B 
 3260      00
 3261              	.LASF40:
 3262 0474 735F7761 		.ascii	"s_wait\000"
 3262      697400
 3263              	.LASF100:
 3264 047b 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3264      4320342E 
 3264      382E3420 
 3264      32303134 
 3264      30353236 
 3265 04ae 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3265      20726576 
 3265      6973696F 
 3265      6E203231 
 3265      31333538 
 3266 04e1 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 3266      74643D67 
 3266      6E753939 
 3266      202D6666 
 3266      756E6374 
 3267              	.LASF71:
 3268 0502 61766572 		.ascii	"average\000"
 3268      61676500 
 3269              	.LASF81:
 3270 050a 64617461 		.ascii	"data_array\000"
 3270      5F617272 
 3270      617900
 3271              	.LASF70:
 3272 0515 636F6D6D 		.ascii	"command\000"
 3272      616E6400 
 3273              	.LASF45:
 3274 051d 73315F77 		.ascii	"s1_wait\000"
 3274      61697400 
 3275              	.LASF32:
 3276 0525 726F7461 		.ascii	"rotate_feedback\000"
 3276      74655F66 
 3276      65656462 
 3276      61636B00 
 3277              	.LASF54:
 3278 0535 6D5F7761 		.ascii	"m_wait\000"
 3278      697400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\cchdMLHY.s 			page 76


 3279              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

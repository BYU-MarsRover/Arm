ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,20,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	BA_arr_cspot,1,1
  25              		.comm	baseAz_array,40,4
  26              		.comm	feedback_count,2,2
  27              		.comm	timerFlag,1,1
  28              		.section	.text.timer_isr,"ax",%progbits
  29              		.align	2
  30              		.global	timer_isr
  31              		.code	16
  32              		.thumb_func
  33              		.type	timer_isr, %function
  34              	timer_isr:
  35              	.LFB33:
  36              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define ELBOW_UPPER_BOUND 64000
  14:.\main.c      **** #define ELBOW_LOWER_BOUND 0
  15:.\main.c      **** #define SHOULDER_UPPER_BOUND 64000
  16:.\main.c      **** #define SHOULDER_LOWER_BOUND 0
  17:.\main.c      **** #define SHOULDER_POT 0
  18:.\main.c      **** #define ELBOW_POT 1
  19:.\main.c      **** #define DATA_ARRAY_SIZE 14
  20:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  21:.\main.c      **** 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 2


  22:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  23:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  24:.\main.c      **** 
  25:.\main.c      **** #define NUM_OF_SM 2
  26:.\main.c      **** uint8 fin_exec; //counts
  27:.\main.c      **** 
  28:.\main.c      **** #define TEST_ARRAY_SIZE 10
  29:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  30:.\main.c      **** 
  31:.\main.c      **** #define ELBW_ARR_SIZE 20
  32:.\main.c      **** uint8 elbw_arr_cspot;
  33:.\main.c      **** uint16 elbow_array[ELBW_ARR_SIZE];
  34:.\main.c      **** 
  35:.\main.c      **** #define BA_ARR_SIZE 20
  36:.\main.c      **** uint8 BA_arr_cspot;
  37:.\main.c      **** uint16 baseAz_array[BA_ARR_SIZE];
  38:.\main.c      **** 
  39:.\main.c      **** uint16 feedback_count;
  40:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  41:.\main.c      **** 
  42:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  43:.\main.c      **** ///set to the time of the longest path for our code
  44:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  45:.\main.c      **** CY_ISR(timer_isr)
  46:.\main.c      **** {
  37              		.loc 1 46 0
  38              		.cfi_startproc
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
  47:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  47              		.loc 1 47 0
  48 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  49 000a 031C     		mov	r3, r0
  50 000c 7B60     		str	r3, [r7, #4]
  48:.\main.c      ****     timerFlag = 1;
  51              		.loc 1 48 0
  52 000e 054B     		ldr	r3, .L2
  53 0010 0122     		mov	r2, #1
  54 0012 1A70     		strb	r2, [r3]
  49:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  55              		.loc 1 49 0
  56 0014 7B68     		ldr	r3, [r7, #4]
  57 0016 181C     		mov	r0, r3
  58 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  50:.\main.c      **** }
  59              		.loc 1 50 0
  60 001c BD46     		mov	sp, r7
  61 001e 02B0     		add	sp, sp, #8
  62              		@ sp needed
  63 0020 80BD     		pop	{r7, pc}
  64              	.L3:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 3


  65 0022 C046     		.align	2
  66              	.L2:
  67 0024 00000000 		.word	timerFlag
  68              		.cfi_endproc
  69              	.LFE33:
  70              		.size	timer_isr, .-timer_isr
  71              		.section	.text.potFeedback,"ax",%progbits
  72              		.align	2
  73              		.global	potFeedback
  74              		.code	16
  75              		.thumb_func
  76              		.type	potFeedback, %function
  77              	potFeedback:
  78              	.LFB34:
  51:.\main.c      **** 
  52:.\main.c      **** 
  53:.\main.c      **** //Funtion declarations/definitions
  54:.\main.c      **** //TODO do we need to make a header for good practice?
  55:.\main.c      **** 
  56:.\main.c      **** //---------------------------------------------------
  57:.\main.c      **** //    Function stubs for the header
  58:.\main.c      **** //---------------------------------------------------
  59:.\main.c      **** void fill_data_array();
  60:.\main.c      **** void baseAzimuth();
  61:.\main.c      **** void shoulder();
  62:.\main.c      **** void elbow();
  63:.\main.c      **** void wristTilt();
  64:.\main.c      **** void wristRotate();
  65:.\main.c      **** void send_feedback();
  66:.\main.c      **** uint16 potFeedback();
  67:.\main.c      **** //--------------------------------------------------- END Function Stubs
  68:.\main.c      **** 
  69:.\main.c      **** uint16 potFeedback(uint32 channel){
  79              		.loc 1 69 0
  80              		.cfi_startproc
  81 0000 80B5     		push	{r7, lr}
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 84B0     		sub	sp, sp, #16
  86              		.cfi_def_cfa_offset 24
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  89 0006 7860     		str	r0, [r7, #4]
  70:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
  90              		.loc 1 70 0
  91 0008 7B68     		ldr	r3, [r7, #4]
  92 000a 181C     		mov	r0, r3
  93 000c FFF7FEFF 		bl	ADC_GetResult16
  94 0010 031C     		mov	r3, r0
  95 0012 1A1C     		mov	r2, r3
  96 0014 3B1C     		mov	r3, r7
  97 0016 0E33     		add	r3, r3, #14
  98 0018 1A80     		strh	r2, [r3]
  71:.\main.c      ****     return feedback;
  99              		.loc 1 71 0
 100 001a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 4


 101 001c 0E33     		add	r3, r3, #14
 102 001e 1B88     		ldrh	r3, [r3]
  72:.\main.c      **** }
 103              		.loc 1 72 0
 104 0020 181C     		mov	r0, r3
 105 0022 BD46     		mov	sp, r7
 106 0024 04B0     		add	sp, sp, #16
 107              		@ sp needed
 108 0026 80BD     		pop	{r7, pc}
 109              		.cfi_endproc
 110              	.LFE34:
 111              		.size	potFeedback, .-potFeedback
 112              		.section	.text.fill_data_array,"ax",%progbits
 113              		.align	2
 114              		.global	fill_data_array
 115              		.code	16
 116              		.thumb_func
 117              		.type	fill_data_array, %function
 118              	fill_data_array:
 119              	.LFB35:
  73:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  74:.\main.c      **** void fill_data_array()
  75:.\main.c      **** {
 120              		.loc 1 75 0
 121              		.cfi_startproc
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 82B0     		sub	sp, sp, #8
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  76:.\main.c      ****     uint8 i = 0;
 130              		.loc 1 76 0
 131 0006 FB1D     		add	r3, r7, #7
 132 0008 0022     		mov	r2, #0
 133 000a 1A70     		strb	r2, [r3]
  77:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 134              		.loc 1 77 0
 135 000c FB1D     		add	r3, r7, #7
 136 000e 0022     		mov	r2, #0
 137 0010 1A70     		strb	r2, [r3]
 138 0012 0FE0     		b	.L7
 139              	.L8:
  78:.\main.c      ****     {
  79:.\main.c      ****         data_array[i] = test_array[i];
 140              		.loc 1 79 0 discriminator 2
 141 0014 FB1D     		add	r3, r7, #7
 142 0016 1A78     		ldrb	r2, [r3]
 143 0018 FB1D     		add	r3, r7, #7
 144 001a 1978     		ldrb	r1, [r3]
 145 001c 094B     		ldr	r3, .L9
 146 001e 4900     		lsl	r1, r1, #1
 147 0020 CB5A     		ldrh	r3, [r1, r3]
 148 0022 99B2     		uxth	r1, r3
 149 0024 084B     		ldr	r3, .L9+4
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 5


 150 0026 5200     		lsl	r2, r2, #1
 151 0028 D152     		strh	r1, [r2, r3]
  77:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 152              		.loc 1 77 0 discriminator 2
 153 002a FB1D     		add	r3, r7, #7
 154 002c 1A78     		ldrb	r2, [r3]
 155 002e FB1D     		add	r3, r7, #7
 156 0030 0132     		add	r2, r2, #1
 157 0032 1A70     		strb	r2, [r3]
 158              	.L7:
  77:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 159              		.loc 1 77 0 is_stmt 0 discriminator 1
 160 0034 FB1D     		add	r3, r7, #7
 161 0036 1B78     		ldrb	r3, [r3]
 162 0038 092B     		cmp	r3, #9
 163 003a EBD9     		bls	.L8
  80:.\main.c      ****     }
  81:.\main.c      **** }
 164              		.loc 1 81 0 is_stmt 1
 165 003c BD46     		mov	sp, r7
 166 003e 02B0     		add	sp, sp, #8
 167              		@ sp needed
 168 0040 80BD     		pop	{r7, pc}
 169              	.L10:
 170 0042 C046     		.align	2
 171              	.L9:
 172 0044 00000000 		.word	test_array
 173 0048 00000000 		.word	data_array
 174              		.cfi_endproc
 175              	.LFE35:
 176              		.size	fill_data_array, .-fill_data_array
 177              		.comm	shldr_state,1,1
 178              		.section	.text.shoulder,"ax",%progbits
 179              		.align	2
 180              		.global	shoulder
 181              		.code	16
 182              		.thumb_func
 183              		.type	shoulder, %function
 184              	shoulder:
 185              	.LFB36:
  82:.\main.c      **** 
  83:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
  84:.\main.c      **** //control the shoulder
  85:.\main.c      **** void shoulder()
  86:.\main.c      **** {
 186              		.loc 1 86 0
 187              		.cfi_startproc
 188 0000 80B5     		push	{r7, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
  87:.\main.c      ****     //take instruction from data_array
  88:.\main.c      ****     //smooth input
  89:.\main.c      ****     //actuate the shoulder using PWM
  90:.\main.c      ****     //get feedback
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 6


  91:.\main.c      ****     
  92:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  93:.\main.c      ****     //switch statement for state actions
  94:.\main.c      **** 		//start
  95:.\main.c      **** 			//break
  96:.\main.c      **** 		//initialize
  97:.\main.c      **** 			//create smoothing array
  98:.\main.c      **** 		//feedback
  99:.\main.c      **** 			//read feedback
 100:.\main.c      **** 		//execute
 101:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 102:.\main.c      **** 			//calculate average of value in array
 103:.\main.c      ****     
 104:.\main.c      ****     switch(shldr_state)
 194              		.loc 1 104 0
 195 0004 0E4B     		ldr	r3, .L19
 196 0006 1B78     		ldrb	r3, [r3]
 197 0008 012B     		cmp	r3, #1
 198 000a 0CD0     		beq	.L13
 199 000c 02DC     		bgt	.L14
 200 000e 002B     		cmp	r3, #0
 201 0010 05D0     		beq	.L15
 202 0012 12E0     		b	.L11
 203              	.L14:
 204 0014 022B     		cmp	r3, #2
 205 0016 0FD0     		beq	.L18
 206 0018 032B     		cmp	r3, #3
 207 001a 08D0     		beq	.L17
 208 001c 0DE0     		b	.L11
 209              	.L15:
 105:.\main.c      ****     {//switch staatement for state transitions
 106:.\main.c      **** 		case shldr_start: //start
 107:.\main.c      **** 			//next state will be init
 108:.\main.c      ****             shldr_state = shldr_init;
 210              		.loc 1 108 0
 211 001e 084B     		ldr	r3, .L19
 212 0020 0122     		mov	r2, #1
 213 0022 1A70     		strb	r2, [r3]
 109:.\main.c      ****             break;
 214              		.loc 1 109 0
 215 0024 09E0     		b	.L11
 216              	.L13:
 110:.\main.c      ****         
 111:.\main.c      **** 		case shldr_init: //initialize
 112:.\main.c      **** 			//next state will be feedback
 113:.\main.c      ****             shldr_state = shldr_fdbk;
 217              		.loc 1 113 0
 218 0026 064B     		ldr	r3, .L19
 219 0028 0222     		mov	r2, #2
 220 002a 1A70     		strb	r2, [r3]
 114:.\main.c      ****             break;
 221              		.loc 1 114 0
 222 002c 05E0     		b	.L11
 223              	.L17:
 115:.\main.c      ****         
 116:.\main.c      **** 		case shldr_fdbk://feedback
 117:.\main.c      **** 			//if position ok relative to average
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 7


 118:.\main.c      **** 				//execute
 119:.\main.c      **** 			//else if not ok
 120:.\main.c      **** 				//report problem
 121:.\main.c      ****             break;
 122:.\main.c      **** 		case shldr_exe://execute
 123:.\main.c      **** 			//next state will be report
 124:.\main.c      ****             shldr_state = shldr_fdbk;
 224              		.loc 1 124 0
 225 002e 044B     		ldr	r3, .L19
 226 0030 0222     		mov	r2, #2
 227 0032 1A70     		strb	r2, [r3]
 125:.\main.c      ****             break;
 228              		.loc 1 125 0
 229 0034 C046     		mov	r8, r8
 230 0036 00E0     		b	.L11
 231              	.L18:
 121:.\main.c      ****             break;
 232              		.loc 1 121 0
 233 0038 C046     		mov	r8, r8
 234              	.L11:
 126:.\main.c      ****     }
 127:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 128:.\main.c      **** }
 235              		.loc 1 128 0
 236 003a BD46     		mov	sp, r7
 237              		@ sp needed
 238 003c 80BD     		pop	{r7, pc}
 239              	.L20:
 240 003e C046     		.align	2
 241              	.L19:
 242 0040 00000000 		.word	shldr_state
 243              		.cfi_endproc
 244              	.LFE36:
 245              		.size	shoulder, .-shoulder
 246              		.comm	wristTilt_state,1,1
 247              		.section	.text.wristTilt,"ax",%progbits
 248              		.align	2
 249              		.global	wristTilt
 250              		.code	16
 251              		.thumb_func
 252              		.type	wristTilt, %function
 253              	wristTilt:
 254              	.LFB37:
 129:.\main.c      **** 
 130:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 131:.\main.c      **** //control the tilting motion of the wrist
 132:.\main.c      **** void wristTilt()
 133:.\main.c      **** {
 255              		.loc 1 133 0
 256              		.cfi_startproc
 257 0000 80B5     		push	{r7, lr}
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 7, -8
 260              		.cfi_offset 14, -4
 261 0002 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 134:.\main.c      ****     // Overview
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 8


 135:.\main.c      ****     //take instruction from data_array
 136:.\main.c      ****     //smooth input
 137:.\main.c      ****     //actuate the tilting using UART
 138:.\main.c      ****     //get feedback
 139:.\main.c      **** 
 140:.\main.c      ****     //-------------------------- 
 141:.\main.c      ****     // Dynamixel Servo specific
 142:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 143:.\main.c      ****     // TODO: Set the desired position
 144:.\main.c      **** 
 145:.\main.c      ****     //--------------------------
 146:.\main.c      ****     // State machine
 147:.\main.c      ****     
 148:.\main.c      ****         // Action
 149:.\main.c      ****     switch(wristTilt_state)
 263              		.loc 1 149 0
 264 0004 0F4B     		ldr	r3, .L37
 265 0006 1B78     		ldrb	r3, [r3]
 266 0008 012B     		cmp	r3, #1
 267 000a 06D0     		beq	.L34
 268 000c 07DC     		bgt	.L35
 269 000e 002B     		cmp	r3, #0
 270 0010 06D1     		bne	.L22
 150:.\main.c      ****     {
 151:.\main.c      ****         case tilt_init:
 152:.\main.c      ****             wristTilt_state = tilt_start;
 271              		.loc 1 152 0
 272 0012 0C4B     		ldr	r3, .L37
 273 0014 0122     		mov	r2, #1
 274 0016 1A70     		strb	r2, [r3]
 153:.\main.c      ****             break;
 275              		.loc 1 153 0
 276 0018 02E0     		b	.L22
 277              	.L34:
 154:.\main.c      ****         case tilt_start:
 155:.\main.c      ****             // Set the torque - this is a one time thing
 156:.\main.c      ****             // Set the speed - I think this is a one time thing
 157:.\main.c      ****             break;
 278              		.loc 1 157 0
 279 001a C046     		mov	r8, r8
 280 001c 00E0     		b	.L22
 281              	.L35:
 158:.\main.c      ****         case tilt_control:
 159:.\main.c      ****             break;
 282              		.loc 1 159 0
 283 001e C046     		mov	r8, r8
 284              	.L22:
 160:.\main.c      ****         case tilt_feedback:
 161:.\main.c      ****             break;
 162:.\main.c      ****     }
 163:.\main.c      ****         // Transistion
 164:.\main.c      ****     switch(wristTilt_state)
 285              		.loc 1 164 0
 286 0020 084B     		ldr	r3, .L37
 287 0022 1B78     		ldrb	r3, [r3]
 288 0024 012B     		cmp	r3, #1
 289 0026 06D0     		beq	.L29
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 9


 290 0028 09DC     		bgt	.L36
 291 002a 002B     		cmp	r3, #0
 292 002c 08D1     		bne	.L21
 165:.\main.c      ****     {
 166:.\main.c      ****         case tilt_init:
 167:.\main.c      ****             wristTilt_state = tilt_start;
 293              		.loc 1 167 0
 294 002e 054B     		ldr	r3, .L37
 295 0030 0122     		mov	r2, #1
 296 0032 1A70     		strb	r2, [r3]
 168:.\main.c      ****             break;
 297              		.loc 1 168 0
 298 0034 04E0     		b	.L21
 299              	.L29:
 169:.\main.c      ****         case tilt_start:
 170:.\main.c      ****             wristTilt_state = tilt_control;
 300              		.loc 1 170 0
 301 0036 034B     		ldr	r3, .L37
 302 0038 0222     		mov	r2, #2
 303 003a 1A70     		strb	r2, [r3]
 171:.\main.c      ****             break;
 304              		.loc 1 171 0
 305 003c 00E0     		b	.L21
 306              	.L36:
 172:.\main.c      ****         case tilt_control:
 173:.\main.c      ****             break;
 307              		.loc 1 173 0
 308 003e C046     		mov	r8, r8
 309              	.L21:
 174:.\main.c      ****         case tilt_feedback:
 175:.\main.c      ****             break;
 176:.\main.c      ****     }
 177:.\main.c      **** }
 310              		.loc 1 177 0
 311 0040 BD46     		mov	sp, r7
 312              		@ sp needed
 313 0042 80BD     		pop	{r7, pc}
 314              	.L38:
 315              		.align	2
 316              	.L37:
 317 0044 00000000 		.word	wristTilt_state
 318              		.cfi_endproc
 319              	.LFE37:
 320              		.size	wristTilt, .-wristTilt
 321              		.comm	wristRotate_state,1,1
 322              		.section	.text.wristRotate,"ax",%progbits
 323              		.align	2
 324              		.global	wristRotate
 325              		.code	16
 326              		.thumb_func
 327              		.type	wristRotate, %function
 328              	wristRotate:
 329              	.LFB38:
 178:.\main.c      **** 
 179:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 180:.\main.c      **** //control the rotating motion of the wrist
 181:.\main.c      **** void wristRotate()
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 10


 182:.\main.c      **** {
 330              		.loc 1 182 0
 331              		.cfi_startproc
 332 0000 80B5     		push	{r7, lr}
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 00AF     		add	r7, sp, #0
 337              		.cfi_def_cfa_register 7
 183:.\main.c      ****     //Overview
 184:.\main.c      ****     //take instruction from data_array
 185:.\main.c      ****     //smooth input
 186:.\main.c      ****     //actuate the tilting using UART
 187:.\main.c      ****     //get feedback
 188:.\main.c      **** 
 189:.\main.c      ****     //-------------------------- 
 190:.\main.c      ****     // Dynamixel Servo specific
 191:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 192:.\main.c      ****     // TODO: Set the desired position
 193:.\main.c      **** 
 194:.\main.c      ****     //--------------------------
 195:.\main.c      ****     // State machine
 196:.\main.c      ****     
 197:.\main.c      ****         // Action
 198:.\main.c      ****     switch(wristRotate_state)
 338              		.loc 1 198 0
 339 0004 0F4B     		ldr	r3, .L55
 340 0006 1B78     		ldrb	r3, [r3]
 341 0008 012B     		cmp	r3, #1
 342 000a 06D0     		beq	.L52
 343 000c 07DC     		bgt	.L53
 344 000e 002B     		cmp	r3, #0
 345 0010 06D1     		bne	.L40
 199:.\main.c      ****     {
 200:.\main.c      ****         case rotate_init:
 201:.\main.c      ****             wristRotate_state = rotate_start;
 346              		.loc 1 201 0
 347 0012 0C4B     		ldr	r3, .L55
 348 0014 0122     		mov	r2, #1
 349 0016 1A70     		strb	r2, [r3]
 202:.\main.c      ****             break;
 350              		.loc 1 202 0
 351 0018 02E0     		b	.L40
 352              	.L52:
 203:.\main.c      ****         case rotate_start:
 204:.\main.c      ****             // Set the torque - this is a one time thing
 205:.\main.c      ****             // Set the speed - I think this is a one time thing
 206:.\main.c      ****             break;
 353              		.loc 1 206 0
 354 001a C046     		mov	r8, r8
 355 001c 00E0     		b	.L40
 356              	.L53:
 207:.\main.c      ****         case rotate_control:
 208:.\main.c      ****             break;
 357              		.loc 1 208 0
 358 001e C046     		mov	r8, r8
 359              	.L40:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 11


 209:.\main.c      ****         case rotate_feedback:
 210:.\main.c      ****             break;
 211:.\main.c      ****     }
 212:.\main.c      ****         // Transistion
 213:.\main.c      ****     switch(wristRotate_state)
 360              		.loc 1 213 0
 361 0020 084B     		ldr	r3, .L55
 362 0022 1B78     		ldrb	r3, [r3]
 363 0024 012B     		cmp	r3, #1
 364 0026 06D0     		beq	.L47
 365 0028 09DC     		bgt	.L54
 366 002a 002B     		cmp	r3, #0
 367 002c 08D1     		bne	.L39
 214:.\main.c      ****     {
 215:.\main.c      ****         case rotate_init:
 216:.\main.c      ****             wristRotate_state = rotate_start;
 368              		.loc 1 216 0
 369 002e 054B     		ldr	r3, .L55
 370 0030 0122     		mov	r2, #1
 371 0032 1A70     		strb	r2, [r3]
 217:.\main.c      ****             break;
 372              		.loc 1 217 0
 373 0034 04E0     		b	.L39
 374              	.L47:
 218:.\main.c      ****         case rotate_start:
 219:.\main.c      ****             wristRotate_state = rotate_control;
 375              		.loc 1 219 0
 376 0036 034B     		ldr	r3, .L55
 377 0038 0222     		mov	r2, #2
 378 003a 1A70     		strb	r2, [r3]
 220:.\main.c      ****             break;
 379              		.loc 1 220 0
 380 003c 00E0     		b	.L39
 381              	.L54:
 221:.\main.c      ****         case rotate_control:
 222:.\main.c      ****             break;
 382              		.loc 1 222 0
 383 003e C046     		mov	r8, r8
 384              	.L39:
 223:.\main.c      ****         case rotate_feedback:
 224:.\main.c      ****             break;
 225:.\main.c      ****     }
 226:.\main.c      **** }
 385              		.loc 1 226 0
 386 0040 BD46     		mov	sp, r7
 387              		@ sp needed
 388 0042 80BD     		pop	{r7, pc}
 389              	.L56:
 390              		.align	2
 391              	.L55:
 392 0044 00000000 		.word	wristRotate_state
 393              		.cfi_endproc
 394              	.LFE38:
 395              		.size	wristRotate, .-wristRotate
 396              		.section	.text.send_feedback,"ax",%progbits
 397              		.align	2
 398              		.global	send_feedback
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 12


 399              		.code	16
 400              		.thumb_func
 401              		.type	send_feedback, %function
 402              	send_feedback:
 403              	.LFB39:
 227:.\main.c      **** 
 228:.\main.c      **** void send_feedback()
 229:.\main.c      **** {
 404              		.loc 1 229 0
 405              		.cfi_startproc
 406 0000 80B5     		push	{r7, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 230:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 231:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 232:.\main.c      ****     //TODO define system state
 233:.\main.c      ****     //send packet via serial to wiznet
 234:.\main.c      **** }
 412              		.loc 1 234 0
 413 0004 BD46     		mov	sp, r7
 414              		@ sp needed
 415 0006 80BD     		pop	{r7, pc}
 416              		.cfi_endproc
 417              	.LFE39:
 418              		.size	send_feedback, .-send_feedback
 419              		.global	__aeabi_uidiv
 420              		.section	.text.average,"ax",%progbits
 421              		.align	2
 422              		.global	average
 423              		.code	16
 424              		.thumb_func
 425              		.type	average, %function
 426              	average:
 427              	.LFB40:
 235:.\main.c      **** 
 236:.\main.c      **** 
 237:.\main.c      **** //Average function to be used in smoothing our input
 238:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 239:.\main.c      **** {
 428              		.loc 1 239 0
 429              		.cfi_startproc
 430 0000 80B5     		push	{r7, lr}
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 0002 86B0     		sub	sp, sp, #24
 435              		.cfi_def_cfa_offset 32
 436 0004 00AF     		add	r7, sp, #0
 437              		.cfi_def_cfa_register 7
 438 0006 7860     		str	r0, [r7, #4]
 439 0008 0A1C     		mov	r2, r1
 440 000a FB1C     		add	r3, r7, #3
 441 000c 1A70     		strb	r2, [r3]
 240:.\main.c      ****     uint8 i;
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 13


 241:.\main.c      ****     uint32 sum = 0;
 442              		.loc 1 241 0
 443 000e 0023     		mov	r3, #0
 444 0010 3B61     		str	r3, [r7, #16]
 242:.\main.c      ****     uint16 avg = 0;
 445              		.loc 1 242 0
 446 0012 3B1C     		mov	r3, r7
 447 0014 0E33     		add	r3, r3, #14
 448 0016 0022     		mov	r2, #0
 449 0018 1A80     		strh	r2, [r3]
 243:.\main.c      ****     
 244:.\main.c      ****     for(i = 0; i < num_items; i++)
 450              		.loc 1 244 0
 451 001a 3B1C     		mov	r3, r7
 452 001c 1733     		add	r3, r3, #23
 453 001e 0022     		mov	r2, #0
 454 0020 1A70     		strb	r2, [r3]
 455 0022 10E0     		b	.L59
 456              	.L60:
 245:.\main.c      ****     {
 246:.\main.c      ****         sum += array[i];
 457              		.loc 1 246 0 discriminator 2
 458 0024 3B1C     		mov	r3, r7
 459 0026 1733     		add	r3, r3, #23
 460 0028 1B78     		ldrb	r3, [r3]
 461 002a 5B00     		lsl	r3, r3, #1
 462 002c 7A68     		ldr	r2, [r7, #4]
 463 002e D318     		add	r3, r2, r3
 464 0030 1B88     		ldrh	r3, [r3]
 465 0032 3A69     		ldr	r2, [r7, #16]
 466 0034 D318     		add	r3, r2, r3
 467 0036 3B61     		str	r3, [r7, #16]
 244:.\main.c      ****     for(i = 0; i < num_items; i++)
 468              		.loc 1 244 0 discriminator 2
 469 0038 3B1C     		mov	r3, r7
 470 003a 1733     		add	r3, r3, #23
 471 003c 1A78     		ldrb	r2, [r3]
 472 003e 3B1C     		mov	r3, r7
 473 0040 1733     		add	r3, r3, #23
 474 0042 0132     		add	r2, r2, #1
 475 0044 1A70     		strb	r2, [r3]
 476              	.L59:
 244:.\main.c      ****     for(i = 0; i < num_items; i++)
 477              		.loc 1 244 0 is_stmt 0 discriminator 1
 478 0046 3A1C     		mov	r2, r7
 479 0048 1732     		add	r2, r2, #23
 480 004a FB1C     		add	r3, r7, #3
 481 004c 1278     		ldrb	r2, [r2]
 482 004e 1B78     		ldrb	r3, [r3]
 483 0050 9A42     		cmp	r2, r3
 484 0052 E7D3     		bcc	.L60
 247:.\main.c      ****     }
 248:.\main.c      ****     
 249:.\main.c      ****     avg = sum/num_items;
 485              		.loc 1 249 0 is_stmt 1
 486 0054 FB1C     		add	r3, r7, #3
 487 0056 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 14


 488 0058 3869     		ldr	r0, [r7, #16]
 489 005a 191C     		mov	r1, r3
 490 005c FFF7FEFF 		bl	__aeabi_uidiv
 491 0060 031C     		mov	r3, r0
 492 0062 1A1C     		mov	r2, r3
 493 0064 3B1C     		mov	r3, r7
 494 0066 0E33     		add	r3, r3, #14
 495 0068 1A80     		strh	r2, [r3]
 250:.\main.c      ****     
 251:.\main.c      ****     return avg;
 496              		.loc 1 251 0
 497 006a 3B1C     		mov	r3, r7
 498 006c 0E33     		add	r3, r3, #14
 499 006e 1B88     		ldrh	r3, [r3]
 252:.\main.c      **** }
 500              		.loc 1 252 0
 501 0070 181C     		mov	r0, r3
 502 0072 BD46     		mov	sp, r7
 503 0074 06B0     		add	sp, sp, #24
 504              		@ sp needed
 505 0076 80BD     		pop	{r7, pc}
 506              		.cfi_endproc
 507              	.LFE40:
 508              		.size	average, .-average
 509              		.comm	elbow_state,1,1
 510              		.section	.text.elbow,"ax",%progbits
 511              		.align	2
 512              		.global	elbow
 513              		.code	16
 514              		.thumb_func
 515              		.type	elbow, %function
 516              	elbow:
 517              	.LFB41:
 253:.\main.c      **** 
 254:.\main.c      **** 
 255:.\main.c      **** //control the elbow
 256:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 257:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 258:.\main.c      **** void elbow()
 259:.\main.c      **** { 
 518              		.loc 1 259 0
 519              		.cfi_startproc
 520 0000 90B5     		push	{r4, r7, lr}
 521              		.cfi_def_cfa_offset 12
 522              		.cfi_offset 4, -12
 523              		.cfi_offset 7, -8
 524              		.cfi_offset 14, -4
 525 0002 83B0     		sub	sp, sp, #12
 526              		.cfi_def_cfa_offset 24
 527 0004 00AF     		add	r7, sp, #0
 528              		.cfi_def_cfa_register 7
 260:.\main.c      ****     //take instruction from data_array
 261:.\main.c      ****     //smooth input
 262:.\main.c      ****     //actuate the elbow using PWM
 263:.\main.c      ****     //get feedback
 264:.\main.c      ****     uint8 i;
 265:.\main.c      ****     uint16 avg;
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 15


 266:.\main.c      ****     uint16 command;
 267:.\main.c      ****     
 268:.\main.c      ****     switch(elbow_state){ //actions
 529              		.loc 1 268 0
 530 0006 5C4B     		ldr	r3, .L92
 531 0008 1B78     		ldrb	r3, [r3]
 532 000a 012B     		cmp	r3, #1
 533 000c 04D0     		beq	.L64
 534 000e 00DC     		bgt	.LCB461
 535 0010 81E0     		b	.L91	@long jump
 536              	.LCB461:
 537 0012 022B     		cmp	r3, #2
 538 0014 17D0     		beq	.L67
 539              	.LBB2:
 269:.\main.c      ****         case elbw_start:
 270:.\main.c      ****             break;
 271:.\main.c      **** 
 272:.\main.c      ****         case elbw_init:
 273:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 274:.\main.c      ****             {
 275:.\main.c      ****                 elbow_array[i] = 1500;
 276:.\main.c      ****             }
 277:.\main.c      ****             elbw_arr_cspot = 0;
 278:.\main.c      ****             break;
 279:.\main.c      **** 
 280:.\main.c      ****         case elbw_execute:
 281:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 282:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 283:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 284:.\main.c      ****             {
 285:.\main.c      ****                 elbw_arr_cspot++;
 286:.\main.c      ****             }
 287:.\main.c      ****             else
 288:.\main.c      ****             {
 289:.\main.c      ****                 elbw_arr_cspot = 0;
 290:.\main.c      ****             }
 291:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 292:.\main.c      ****            
 293:.\main.c      ****             uint16 feedback = potFeedback(ELBOW_POT);
 294:.\main.c      ****             
 295:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 296:.\main.c      ****             {
 297:.\main.c      ****                 if (avg < 1500)
 298:.\main.c      ****                 {
 299:.\main.c      ****                     PWM_3_WriteCompare(1500);
 300:.\main.c      ****                 }
 301:.\main.c      ****                 else
 302:.\main.c      ****                 {
 303:.\main.c      ****                     PWM_3_WriteCompare(avg);
 304:.\main.c      ****                 }
 305:.\main.c      ****                
 306:.\main.c      ****                 fin_exec++;
 307:.\main.c      ****             }
 308:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 309:.\main.c      ****             {
 310:.\main.c      ****                 if(avg > 1500)
 311:.\main.c      ****                 {
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 16


 312:.\main.c      ****                     PWM_3_WriteCompare(1500);
 313:.\main.c      ****                 }
 314:.\main.c      ****                 else
 315:.\main.c      ****                 {
 316:.\main.c      ****                     PWM_3_WriteCompare(avg);
 317:.\main.c      ****                 }
 318:.\main.c      ****             }
 319:.\main.c      ****             else
 320:.\main.c      ****             {
 321:.\main.c      ****                 PWM_3_WriteCompare(avg);
 322:.\main.c      ****             }
 323:.\main.c      ****           
 324:.\main.c      ****             break;
 325:.\main.c      ****             
 326:.\main.c      ****         case elbw_wait:
 327:.\main.c      ****             break;
 540              		.loc 1 327 0
 541 0016 7FE0     		b	.L63
 542              	.L64:
 273:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 543              		.loc 1 273 0
 544 0018 FB1D     		add	r3, r7, #7
 545 001a 0022     		mov	r2, #0
 546 001c 1A70     		strb	r2, [r3]
 547 001e 0AE0     		b	.L69
 548              	.L70:
 275:.\main.c      ****                 elbow_array[i] = 1500;
 549              		.loc 1 275 0 discriminator 2
 550 0020 FB1D     		add	r3, r7, #7
 551 0022 1A78     		ldrb	r2, [r3]
 552 0024 554B     		ldr	r3, .L92+4
 553 0026 5200     		lsl	r2, r2, #1
 554 0028 5549     		ldr	r1, .L92+8
 555 002a D152     		strh	r1, [r2, r3]
 273:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 556              		.loc 1 273 0 discriminator 2
 557 002c FB1D     		add	r3, r7, #7
 558 002e 1A78     		ldrb	r2, [r3]
 559 0030 FB1D     		add	r3, r7, #7
 560 0032 0132     		add	r2, r2, #1
 561 0034 1A70     		strb	r2, [r3]
 562              	.L69:
 273:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 563              		.loc 1 273 0 is_stmt 0 discriminator 1
 564 0036 FB1D     		add	r3, r7, #7
 565 0038 1B78     		ldrb	r3, [r3]
 566 003a 132B     		cmp	r3, #19
 567 003c F0D9     		bls	.L70
 277:.\main.c      ****             elbw_arr_cspot = 0;
 568              		.loc 1 277 0 is_stmt 1
 569 003e 514B     		ldr	r3, .L92+12
 570 0040 0022     		mov	r2, #0
 571 0042 1A70     		strb	r2, [r3]
 278:.\main.c      ****             break;
 572              		.loc 1 278 0
 573 0044 68E0     		b	.L63
 574              	.L67:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 17


 281:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 575              		.loc 1 281 0
 576 0046 504B     		ldr	r3, .L92+16
 577 0048 9B88     		ldrh	r3, [r3, #4]
 578 004a 1A02     		lsl	r2, r3, #8
 579 004c 4E4B     		ldr	r3, .L92+16
 580 004e DB88     		ldrh	r3, [r3, #6]
 581 0050 1343     		orr	r3, r2
 582 0052 00D5     		bpl	.L71
 583 0054 0133     		add	r3, r3, #1
 584              	.L71:
 585 0056 5B10     		asr	r3, r3, #1
 586 0058 9AB2     		uxth	r2, r3
 587 005a 3B1D     		add	r3, r7, #4
 588 005c 4849     		ldr	r1, .L92+8
 589 005e 5218     		add	r2, r2, r1
 590 0060 1A80     		strh	r2, [r3]
 282:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 591              		.loc 1 282 0
 592 0062 484B     		ldr	r3, .L92+12
 593 0064 1B78     		ldrb	r3, [r3]
 594 0066 1A1C     		mov	r2, r3
 595 0068 444B     		ldr	r3, .L92+4
 596 006a 5200     		lsl	r2, r2, #1
 597 006c 391D     		add	r1, r7, #4
 598 006e 0988     		ldrh	r1, [r1]
 599 0070 D152     		strh	r1, [r2, r3]
 283:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 600              		.loc 1 283 0
 601 0072 444B     		ldr	r3, .L92+12
 602 0074 1B78     		ldrb	r3, [r3]
 603 0076 122B     		cmp	r3, #18
 604 0078 06D8     		bhi	.L72
 285:.\main.c      ****                 elbw_arr_cspot++;
 605              		.loc 1 285 0
 606 007a 424B     		ldr	r3, .L92+12
 607 007c 1B78     		ldrb	r3, [r3]
 608 007e 0133     		add	r3, r3, #1
 609 0080 DAB2     		uxtb	r2, r3
 610 0082 404B     		ldr	r3, .L92+12
 611 0084 1A70     		strb	r2, [r3]
 612 0086 02E0     		b	.L73
 613              	.L72:
 289:.\main.c      ****                 elbw_arr_cspot = 0;
 614              		.loc 1 289 0
 615 0088 3E4B     		ldr	r3, .L92+12
 616 008a 0022     		mov	r2, #0
 617 008c 1A70     		strb	r2, [r3]
 618              	.L73:
 291:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 619              		.loc 1 291 0
 620 008e BC1C     		add	r4, r7, #2
 621 0090 3A4B     		ldr	r3, .L92+4
 622 0092 181C     		mov	r0, r3
 623 0094 1421     		mov	r1, #20
 624 0096 FFF7FEFF 		bl	average
 625 009a 031C     		mov	r3, r0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 18


 626 009c 2380     		strh	r3, [r4]
 293:.\main.c      ****             uint16 feedback = potFeedback(ELBOW_POT);
 627              		.loc 1 293 0
 628 009e 3C1C     		mov	r4, r7
 629 00a0 0120     		mov	r0, #1
 630 00a2 FFF7FEFF 		bl	potFeedback
 631 00a6 031C     		mov	r3, r0
 632 00a8 2380     		strh	r3, [r4]
 295:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 633              		.loc 1 295 0
 634 00aa 3B1C     		mov	r3, r7
 635 00ac 1B88     		ldrh	r3, [r3]
 636 00ae 002B     		cmp	r3, #0
 637 00b0 15D1     		bne	.L74
 297:.\main.c      ****                 if (avg < 1500)
 638              		.loc 1 297 0
 639 00b2 BB1C     		add	r3, r7, #2
 640 00b4 1A88     		ldrh	r2, [r3]
 641 00b6 354B     		ldr	r3, .L92+20
 642 00b8 9A42     		cmp	r2, r3
 643 00ba 04D8     		bhi	.L75
 299:.\main.c      ****                     PWM_3_WriteCompare(1500);
 644              		.loc 1 299 0
 645 00bc 304B     		ldr	r3, .L92+8
 646 00be 181C     		mov	r0, r3
 647 00c0 FFF7FEFF 		bl	PWM_3_WriteCompare
 648 00c4 04E0     		b	.L76
 649              	.L75:
 303:.\main.c      ****                     PWM_3_WriteCompare(avg);
 650              		.loc 1 303 0
 651 00c6 BB1C     		add	r3, r7, #2
 652 00c8 1B88     		ldrh	r3, [r3]
 653 00ca 181C     		mov	r0, r3
 654 00cc FFF7FEFF 		bl	PWM_3_WriteCompare
 655              	.L76:
 306:.\main.c      ****                 fin_exec++;
 656              		.loc 1 306 0 discriminator 1
 657 00d0 2F4B     		ldr	r3, .L92+24
 658 00d2 1B78     		ldrb	r3, [r3]
 659 00d4 0133     		add	r3, r3, #1
 660 00d6 DAB2     		uxtb	r2, r3
 661 00d8 2D4B     		ldr	r3, .L92+24
 662 00da 1A70     		strb	r2, [r3]
 663 00dc 1AE0     		b	.L77
 664              	.L74:
 308:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 665              		.loc 1 308 0
 666 00de 3B1C     		mov	r3, r7
 667 00e0 1A88     		ldrh	r2, [r3]
 668 00e2 2C4B     		ldr	r3, .L92+28
 669 00e4 9A42     		cmp	r2, r3
 670 00e6 0FD9     		bls	.L78
 310:.\main.c      ****                 if(avg > 1500)
 671              		.loc 1 310 0
 672 00e8 BB1C     		add	r3, r7, #2
 673 00ea 1A88     		ldrh	r2, [r3]
 674 00ec 244B     		ldr	r3, .L92+8
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 19


 675 00ee 9A42     		cmp	r2, r3
 676 00f0 04D9     		bls	.L79
 312:.\main.c      ****                     PWM_3_WriteCompare(1500);
 677              		.loc 1 312 0
 678 00f2 234B     		ldr	r3, .L92+8
 679 00f4 181C     		mov	r0, r3
 680 00f6 FFF7FEFF 		bl	PWM_3_WriteCompare
 681 00fa 0BE0     		b	.L77
 682              	.L79:
 316:.\main.c      ****                     PWM_3_WriteCompare(avg);
 683              		.loc 1 316 0
 684 00fc BB1C     		add	r3, r7, #2
 685 00fe 1B88     		ldrh	r3, [r3]
 686 0100 181C     		mov	r0, r3
 687 0102 FFF7FEFF 		bl	PWM_3_WriteCompare
 324:.\main.c      ****             break;
 688              		.loc 1 324 0
 689 0106 07E0     		b	.L63
 690              	.L78:
 321:.\main.c      ****                 PWM_3_WriteCompare(avg);
 691              		.loc 1 321 0
 692 0108 BB1C     		add	r3, r7, #2
 693 010a 1B88     		ldrh	r3, [r3]
 694 010c 181C     		mov	r0, r3
 695 010e FFF7FEFF 		bl	PWM_3_WriteCompare
 324:.\main.c      ****             break;
 696              		.loc 1 324 0
 697 0112 01E0     		b	.L63
 698              	.L77:
 699 0114 00E0     		b	.L63
 700              	.L91:
 270:.\main.c      ****             break;
 701              		.loc 1 270 0
 702 0116 C046     		mov	r8, r8
 703              	.L63:
 704              	.LBE2:
 328:.\main.c      ****     }
 329:.\main.c      ****     
 330:.\main.c      ****     switch(elbow_state){ //transitions
 705              		.loc 1 330 0
 706 0118 174B     		ldr	r3, .L92
 707 011a 1B78     		ldrb	r3, [r3]
 708 011c 012B     		cmp	r3, #1
 709 011e 0CD0     		beq	.L82
 710 0120 02DC     		bgt	.L83
 711 0122 002B     		cmp	r3, #0
 712 0124 05D0     		beq	.L84
 713 0126 24E0     		b	.L62
 714              	.L83:
 715 0128 022B     		cmp	r3, #2
 716 012a 0AD0     		beq	.L85
 717 012c 032B     		cmp	r3, #3
 718 012e 14D0     		beq	.L86
 719 0130 1FE0     		b	.L62
 720              	.L84:
 331:.\main.c      ****         case elbw_start:
 332:.\main.c      ****             elbow_state = elbw_init;
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 20


 721              		.loc 1 332 0
 722 0132 114B     		ldr	r3, .L92
 723 0134 0122     		mov	r2, #1
 724 0136 1A70     		strb	r2, [r3]
 333:.\main.c      ****             break;
 725              		.loc 1 333 0
 726 0138 1BE0     		b	.L62
 727              	.L82:
 334:.\main.c      ****         
 335:.\main.c      ****         case elbw_init:
 336:.\main.c      ****             elbow_state = elbw_wait;
 728              		.loc 1 336 0
 729 013a 0F4B     		ldr	r3, .L92
 730 013c 0322     		mov	r2, #3
 731 013e 1A70     		strb	r2, [r3]
 337:.\main.c      ****             break;
 732              		.loc 1 337 0
 733 0140 17E0     		b	.L62
 734              	.L85:
 338:.\main.c      ****         
 339:.\main.c      ****         case elbw_execute:
 340:.\main.c      ****             if(new_pack)
 735              		.loc 1 340 0
 736 0142 154B     		ldr	r3, .L92+32
 737 0144 1B78     		ldrb	r3, [r3]
 738 0146 002B     		cmp	r3, #0
 739 0148 03D0     		beq	.L87
 341:.\main.c      ****             {
 342:.\main.c      ****                 elbow_state = elbw_execute;
 740              		.loc 1 342 0
 741 014a 0B4B     		ldr	r3, .L92
 742 014c 0222     		mov	r2, #2
 743 014e 1A70     		strb	r2, [r3]
 343:.\main.c      ****             }
 344:.\main.c      ****             else
 345:.\main.c      ****             {
 346:.\main.c      ****                 elbow_state = elbw_wait;
 347:.\main.c      ****             }
 348:.\main.c      ****             break;
 744              		.loc 1 348 0
 745 0150 0FE0     		b	.L62
 746              	.L87:
 346:.\main.c      ****                 elbow_state = elbw_wait;
 747              		.loc 1 346 0
 748 0152 094B     		ldr	r3, .L92
 749 0154 0322     		mov	r2, #3
 750 0156 1A70     		strb	r2, [r3]
 751              		.loc 1 348 0
 752 0158 0BE0     		b	.L62
 753              	.L86:
 349:.\main.c      ****         
 350:.\main.c      ****         case elbw_wait:
 351:.\main.c      ****             if(new_pack)
 754              		.loc 1 351 0
 755 015a 0F4B     		ldr	r3, .L92+32
 756 015c 1B78     		ldrb	r3, [r3]
 757 015e 002B     		cmp	r3, #0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 21


 758 0160 03D0     		beq	.L89
 352:.\main.c      ****             {
 353:.\main.c      ****                 elbow_state = elbw_execute;
 759              		.loc 1 353 0
 760 0162 054B     		ldr	r3, .L92
 761 0164 0222     		mov	r2, #2
 762 0166 1A70     		strb	r2, [r3]
 763 0168 02E0     		b	.L90
 764              	.L89:
 354:.\main.c      ****             }
 355:.\main.c      ****             else
 356:.\main.c      ****             {
 357:.\main.c      ****                 elbow_state = elbw_wait; 
 765              		.loc 1 357 0
 766 016a 034B     		ldr	r3, .L92
 767 016c 0322     		mov	r2, #3
 768 016e 1A70     		strb	r2, [r3]
 769              	.L90:
 358:.\main.c      ****             }
 359:.\main.c      ****             break;
 770              		.loc 1 359 0
 771 0170 C046     		mov	r8, r8
 772              	.L62:
 360:.\main.c      ****     }    
 361:.\main.c      **** }
 773              		.loc 1 361 0
 774 0172 BD46     		mov	sp, r7
 775 0174 03B0     		add	sp, sp, #12
 776              		@ sp needed
 777 0176 90BD     		pop	{r4, r7, pc}
 778              	.L93:
 779              		.align	2
 780              	.L92:
 781 0178 00000000 		.word	elbow_state
 782 017c 00000000 		.word	elbow_array
 783 0180 DC050000 		.word	1500
 784 0184 00000000 		.word	elbw_arr_cspot
 785 0188 00000000 		.word	data_array
 786 018c DB050000 		.word	1499
 787 0190 00000000 		.word	fin_exec
 788 0194 FFF90000 		.word	63999
 789 0198 00000000 		.word	new_pack
 790              		.cfi_endproc
 791              	.LFE41:
 792              		.size	elbow, .-elbow
 793              		.comm	baseAzimuth_state,1,1
 794              		.section	.text.baseAzimuth,"ax",%progbits
 795              		.align	2
 796              		.global	baseAzimuth
 797              		.code	16
 798              		.thumb_func
 799              		.type	baseAzimuth, %function
 800              	baseAzimuth:
 801              	.LFB42:
 362:.\main.c      **** 
 363:.\main.c      **** //control the turret
 364:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 22


 365:.\main.c      **** void baseAzimuth()
 366:.\main.c      **** { 
 802              		.loc 1 366 0
 803              		.cfi_startproc
 804 0000 90B5     		push	{r4, r7, lr}
 805              		.cfi_def_cfa_offset 12
 806              		.cfi_offset 4, -12
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 83B0     		sub	sp, sp, #12
 810              		.cfi_def_cfa_offset 24
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_def_cfa_register 7
 367:.\main.c      ****     //take instruction from data_array
 368:.\main.c      ****     //smooth input
 369:.\main.c      ****     //actuate the turret using PWM
 370:.\main.c      ****     uint8 i;
 371:.\main.c      ****     uint16 avg;
 372:.\main.c      ****     uint16 command;
 373:.\main.c      ****     
 374:.\main.c      ****     switch(baseAzimuth_state){ //actions
 813              		.loc 1 374 0
 814 0006 444B     		ldr	r3, .L117
 815 0008 1B78     		ldrb	r3, [r3]
 816 000a 012B     		cmp	r3, #1
 817 000c 03D0     		beq	.L96
 818 000e 51DD     		ble	.L116
 819 0010 022B     		cmp	r3, #2
 820 0012 17D0     		beq	.L99
 375:.\main.c      ****         case BA_start:
 376:.\main.c      ****             break;
 377:.\main.c      **** 
 378:.\main.c      ****         case BA_init:
 379:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 380:.\main.c      ****             {
 381:.\main.c      ****                 baseAz_array[i] = 1500;
 382:.\main.c      ****             }
 383:.\main.c      ****             BA_arr_cspot = 0;
 384:.\main.c      ****             break;
 385:.\main.c      **** 
 386:.\main.c      ****         case BA_execute:
 387:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 388:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 389:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 390:.\main.c      ****             {
 391:.\main.c      ****                 BA_arr_cspot++;
 392:.\main.c      ****             }
 393:.\main.c      ****             else
 394:.\main.c      ****             {
 395:.\main.c      ****                 BA_arr_cspot = 0;
 396:.\main.c      ****             }
 397:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 398:.\main.c      ****             
 399:.\main.c      ****             PWM_2_WriteCompare(avg);
 400:.\main.c      ****             fin_exec++;
 401:.\main.c      ****             break;
 402:.\main.c      ****             
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 23


 403:.\main.c      ****         case BA_wait:
 404:.\main.c      ****             break;
 821              		.loc 1 404 0
 822 0014 4FE0     		b	.L95
 823              	.L96:
 379:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 824              		.loc 1 379 0
 825 0016 FB1D     		add	r3, r7, #7
 826 0018 0022     		mov	r2, #0
 827 001a 1A70     		strb	r2, [r3]
 828 001c 0AE0     		b	.L101
 829              	.L102:
 381:.\main.c      ****                 baseAz_array[i] = 1500;
 830              		.loc 1 381 0 discriminator 2
 831 001e FB1D     		add	r3, r7, #7
 832 0020 1A78     		ldrb	r2, [r3]
 833 0022 3E4B     		ldr	r3, .L117+4
 834 0024 5200     		lsl	r2, r2, #1
 835 0026 3E49     		ldr	r1, .L117+8
 836 0028 D152     		strh	r1, [r2, r3]
 379:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 837              		.loc 1 379 0 discriminator 2
 838 002a FB1D     		add	r3, r7, #7
 839 002c 1A78     		ldrb	r2, [r3]
 840 002e FB1D     		add	r3, r7, #7
 841 0030 0132     		add	r2, r2, #1
 842 0032 1A70     		strb	r2, [r3]
 843              	.L101:
 379:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 844              		.loc 1 379 0 is_stmt 0 discriminator 1
 845 0034 FB1D     		add	r3, r7, #7
 846 0036 1B78     		ldrb	r3, [r3]
 847 0038 132B     		cmp	r3, #19
 848 003a F0D9     		bls	.L102
 383:.\main.c      ****             BA_arr_cspot = 0;
 849              		.loc 1 383 0 is_stmt 1
 850 003c 394B     		ldr	r3, .L117+12
 851 003e 0022     		mov	r2, #0
 852 0040 1A70     		strb	r2, [r3]
 384:.\main.c      ****             break;
 853              		.loc 1 384 0
 854 0042 38E0     		b	.L95
 855              	.L99:
 387:.\main.c      ****             command = (((data_array[4] << 8) | data_array[5])/2) + 1500;
 856              		.loc 1 387 0
 857 0044 384B     		ldr	r3, .L117+16
 858 0046 1B89     		ldrh	r3, [r3, #8]
 859 0048 1A02     		lsl	r2, r3, #8
 860 004a 374B     		ldr	r3, .L117+16
 861 004c 5B89     		ldrh	r3, [r3, #10]
 862 004e 1343     		orr	r3, r2
 863 0050 00D5     		bpl	.L103
 864 0052 0133     		add	r3, r3, #1
 865              	.L103:
 866 0054 5B10     		asr	r3, r3, #1
 867 0056 9AB2     		uxth	r2, r3
 868 0058 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 24


 869 005a 3149     		ldr	r1, .L117+8
 870 005c 5218     		add	r2, r2, r1
 871 005e 1A80     		strh	r2, [r3]
 388:.\main.c      ****             baseAz_array[BA_arr_cspot] = command;
 872              		.loc 1 388 0
 873 0060 304B     		ldr	r3, .L117+12
 874 0062 1B78     		ldrb	r3, [r3]
 875 0064 1A1C     		mov	r2, r3
 876 0066 2D4B     		ldr	r3, .L117+4
 877 0068 5200     		lsl	r2, r2, #1
 878 006a 391D     		add	r1, r7, #4
 879 006c 0988     		ldrh	r1, [r1]
 880 006e D152     		strh	r1, [r2, r3]
 389:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 881              		.loc 1 389 0
 882 0070 2C4B     		ldr	r3, .L117+12
 883 0072 1B78     		ldrb	r3, [r3]
 884 0074 122B     		cmp	r3, #18
 885 0076 06D8     		bhi	.L104
 391:.\main.c      ****                 BA_arr_cspot++;
 886              		.loc 1 391 0
 887 0078 2A4B     		ldr	r3, .L117+12
 888 007a 1B78     		ldrb	r3, [r3]
 889 007c 0133     		add	r3, r3, #1
 890 007e DAB2     		uxtb	r2, r3
 891 0080 284B     		ldr	r3, .L117+12
 892 0082 1A70     		strb	r2, [r3]
 893 0084 02E0     		b	.L105
 894              	.L104:
 395:.\main.c      ****                 BA_arr_cspot = 0;
 895              		.loc 1 395 0
 896 0086 274B     		ldr	r3, .L117+12
 897 0088 0022     		mov	r2, #0
 898 008a 1A70     		strb	r2, [r3]
 899              	.L105:
 397:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 900              		.loc 1 397 0
 901 008c BC1C     		add	r4, r7, #2
 902 008e 234B     		ldr	r3, .L117+4
 903 0090 181C     		mov	r0, r3
 904 0092 1421     		mov	r1, #20
 905 0094 FFF7FEFF 		bl	average
 906 0098 031C     		mov	r3, r0
 907 009a 2380     		strh	r3, [r4]
 399:.\main.c      ****             PWM_2_WriteCompare(avg);
 908              		.loc 1 399 0
 909 009c BB1C     		add	r3, r7, #2
 910 009e 1B88     		ldrh	r3, [r3]
 911 00a0 181C     		mov	r0, r3
 912 00a2 FFF7FEFF 		bl	PWM_2_WriteCompare
 400:.\main.c      ****             fin_exec++;
 913              		.loc 1 400 0
 914 00a6 214B     		ldr	r3, .L117+20
 915 00a8 1B78     		ldrb	r3, [r3]
 916 00aa 0133     		add	r3, r3, #1
 917 00ac DAB2     		uxtb	r2, r3
 918 00ae 1F4B     		ldr	r3, .L117+20
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 25


 919 00b0 1A70     		strb	r2, [r3]
 401:.\main.c      ****             break;
 920              		.loc 1 401 0
 921 00b2 00E0     		b	.L95
 922              	.L116:
 376:.\main.c      ****             break;
 923              		.loc 1 376 0
 924 00b4 C046     		mov	r8, r8
 925              	.L95:
 405:.\main.c      ****     }
 406:.\main.c      ****     
 407:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 926              		.loc 1 407 0
 927 00b6 184B     		ldr	r3, .L117
 928 00b8 1B78     		ldrb	r3, [r3]
 929 00ba 012B     		cmp	r3, #1
 930 00bc 0CD0     		beq	.L107
 931 00be 02DC     		bgt	.L108
 932 00c0 002B     		cmp	r3, #0
 933 00c2 05D0     		beq	.L109
 934 00c4 24E0     		b	.L94
 935              	.L108:
 936 00c6 022B     		cmp	r3, #2
 937 00c8 0AD0     		beq	.L110
 938 00ca 032B     		cmp	r3, #3
 939 00cc 14D0     		beq	.L111
 940 00ce 1FE0     		b	.L94
 941              	.L109:
 408:.\main.c      ****         case BA_start:
 409:.\main.c      ****             baseAzimuth_state = BA_init;
 942              		.loc 1 409 0
 943 00d0 114B     		ldr	r3, .L117
 944 00d2 0122     		mov	r2, #1
 945 00d4 1A70     		strb	r2, [r3]
 410:.\main.c      ****             break;
 946              		.loc 1 410 0
 947 00d6 1BE0     		b	.L94
 948              	.L107:
 411:.\main.c      ****         
 412:.\main.c      ****         case BA_init:
 413:.\main.c      ****             baseAzimuth_state = BA_wait;
 949              		.loc 1 413 0
 950 00d8 0F4B     		ldr	r3, .L117
 951 00da 0322     		mov	r2, #3
 952 00dc 1A70     		strb	r2, [r3]
 414:.\main.c      ****             break;
 953              		.loc 1 414 0
 954 00de 17E0     		b	.L94
 955              	.L110:
 415:.\main.c      ****         
 416:.\main.c      ****         case BA_execute:
 417:.\main.c      ****             if(new_pack)
 956              		.loc 1 417 0
 957 00e0 134B     		ldr	r3, .L117+24
 958 00e2 1B78     		ldrb	r3, [r3]
 959 00e4 002B     		cmp	r3, #0
 960 00e6 03D0     		beq	.L112
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 26


 418:.\main.c      ****             {
 419:.\main.c      ****                 baseAzimuth_state = BA_execute;
 961              		.loc 1 419 0
 962 00e8 0B4B     		ldr	r3, .L117
 963 00ea 0222     		mov	r2, #2
 964 00ec 1A70     		strb	r2, [r3]
 420:.\main.c      ****             }
 421:.\main.c      ****             else
 422:.\main.c      ****             {
 423:.\main.c      ****                 baseAzimuth_state = BA_wait;
 424:.\main.c      ****             }
 425:.\main.c      ****             break;
 965              		.loc 1 425 0
 966 00ee 0FE0     		b	.L94
 967              	.L112:
 423:.\main.c      ****                 baseAzimuth_state = BA_wait;
 968              		.loc 1 423 0
 969 00f0 094B     		ldr	r3, .L117
 970 00f2 0322     		mov	r2, #3
 971 00f4 1A70     		strb	r2, [r3]
 972              		.loc 1 425 0
 973 00f6 0BE0     		b	.L94
 974              	.L111:
 426:.\main.c      ****         
 427:.\main.c      ****         case BA_wait:
 428:.\main.c      ****             if(new_pack)
 975              		.loc 1 428 0
 976 00f8 0D4B     		ldr	r3, .L117+24
 977 00fa 1B78     		ldrb	r3, [r3]
 978 00fc 002B     		cmp	r3, #0
 979 00fe 03D0     		beq	.L114
 429:.\main.c      ****             {
 430:.\main.c      ****                 baseAzimuth_state = BA_execute;
 980              		.loc 1 430 0
 981 0100 054B     		ldr	r3, .L117
 982 0102 0222     		mov	r2, #2
 983 0104 1A70     		strb	r2, [r3]
 984 0106 02E0     		b	.L115
 985              	.L114:
 431:.\main.c      ****             }
 432:.\main.c      ****             else
 433:.\main.c      ****             {
 434:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 986              		.loc 1 434 0
 987 0108 034B     		ldr	r3, .L117
 988 010a 0322     		mov	r2, #3
 989 010c 1A70     		strb	r2, [r3]
 990              	.L115:
 435:.\main.c      ****             }
 436:.\main.c      ****             break;
 991              		.loc 1 436 0
 992 010e C046     		mov	r8, r8
 993              	.L94:
 437:.\main.c      ****     }    
 438:.\main.c      **** }
 994              		.loc 1 438 0
 995 0110 BD46     		mov	sp, r7
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 27


 996 0112 03B0     		add	sp, sp, #12
 997              		@ sp needed
 998 0114 90BD     		pop	{r4, r7, pc}
 999              	.L118:
 1000 0116 C046     		.align	2
 1001              	.L117:
 1002 0118 00000000 		.word	baseAzimuth_state
 1003 011c 00000000 		.word	baseAz_array
 1004 0120 DC050000 		.word	1500
 1005 0124 00000000 		.word	BA_arr_cspot
 1006 0128 00000000 		.word	data_array
 1007 012c 00000000 		.word	fin_exec
 1008 0130 00000000 		.word	new_pack
 1009              		.cfi_endproc
 1010              	.LFE42:
 1011              		.size	baseAzimuth, .-baseAzimuth
 1012              		.global	__aeabi_idivmod
 1013              		.section	.text.main,"ax",%progbits
 1014              		.align	2
 1015              		.global	main
 1016              		.code	16
 1017              		.thumb_func
 1018              		.type	main, %function
 1019              	main:
 1020              	.LFB43:
 439:.\main.c      **** 
 440:.\main.c      **** int main()
 441:.\main.c      **** {  
 1021              		.loc 1 441 0
 1022              		.cfi_startproc
 1023 0000 80B5     		push	{r7, lr}
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 7, -8
 1026              		.cfi_offset 14, -4
 1027 0002 84B0     		sub	sp, sp, #16
 1028              		.cfi_def_cfa_offset 24
 1029 0004 00AF     		add	r7, sp, #0
 1030              		.cfi_def_cfa_register 7
 442:.\main.c      ****     CyGlobalIntEnable;
 1031              		.loc 1 442 0
 1032              	@ 442 ".\main.c" 1
 1033 0006 62B6     		CPSIE   i
 1034              	@ 0 "" 2
 443:.\main.c      ****     
 444:.\main.c      ****     //Define variables
 445:.\main.c      ****     time_t t;
 446:.\main.c      ****     uint8 counter;
 447:.\main.c      ****     
 448:.\main.c      ****     //start all of our components
 449:.\main.c      ****     Clock_pwm_Start();
 1035              		.loc 1 449 0
 1036              		.code	16
 1037 0008 FFF7FEFF 		bl	Clock_pwm_Start
 450:.\main.c      ****     Clock_counter_Start();
 1038              		.loc 1 450 0
 1039 000c FFF7FEFF 		bl	Clock_counter_Start
 451:.\main.c      ****     
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 28


 452:.\main.c      ****     //PWM_1_Start();
 453:.\main.c      ****     PWM_2_Start();
 1040              		.loc 1 453 0
 1041 0010 FFF7FEFF 		bl	PWM_2_Start
 454:.\main.c      ****     
 455:.\main.c      ****     PWM_2_WriteCompare(1500); //Initialize our motor drivers
 1042              		.loc 1 455 0
 1043 0014 3D4B     		ldr	r3, .L128
 1044 0016 181C     		mov	r0, r3
 1045 0018 FFF7FEFF 		bl	PWM_2_WriteCompare
 456:.\main.c      ****     CyDelay(10000);
 1046              		.loc 1 456 0
 1047 001c 3C4B     		ldr	r3, .L128+4
 1048 001e 181C     		mov	r0, r3
 1049 0020 FFF7FEFF 		bl	CyDelay
 457:.\main.c      ****     
 458:.\main.c      ****     PWM_3_Start();
 1050              		.loc 1 458 0
 1051 0024 FFF7FEFF 		bl	PWM_3_Start
 459:.\main.c      ****     
 460:.\main.c      ****     Timer_1_Start();
 1052              		.loc 1 460 0
 1053 0028 FFF7FEFF 		bl	Timer_1_Start
 461:.\main.c      ****     
 462:.\main.c      ****     ADC_Start();
 1054              		.loc 1 462 0
 1055 002c FFF7FEFF 		bl	ADC_Start
 463:.\main.c      ****     ADC_StartConvert();
 1056              		.loc 1 463 0
 1057 0030 FFF7FEFF 		bl	ADC_StartConvert
 464:.\main.c      ****     
 465:.\main.c      ****     isr_1_StartEx(timer_isr);
 1058              		.loc 1 465 0
 1059 0034 374B     		ldr	r3, .L128+8
 1060 0036 181C     		mov	r0, r3
 1061 0038 FFF7FEFF 		bl	isr_1_StartEx
 466:.\main.c      ****     
 467:.\main.c      ****     
 468:.\main.c      ****     
 469:.\main.c      ****     
 470:.\main.c      ****     
 471:.\main.c      ****     //helpers for generating random arrays
 472:.\main.c      ****     srand((unsigned) time(&t));
 1062              		.loc 1 472 0
 1063 003c 3B1C     		mov	r3, r7
 1064 003e 181C     		mov	r0, r3
 1065 0040 FFF7FEFF 		bl	time
 1066 0044 031C     		mov	r3, r0
 1067 0046 181C     		mov	r0, r3
 1068 0048 FFF7FEFF 		bl	srand
 1069              	.L126:
 473:.\main.c      ****     
 474:.\main.c      ****     for(;;)
 475:.\main.c      ****     {
 476:.\main.c      ****         //check addresses
 477:.\main.c      ****         //TODO get the address bytes from Steve
 478:.\main.c      ****         
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 29


 479:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1070              		.loc 1 479 0
 1071 004c 324B     		ldr	r3, .L128+12
 1072 004e 1B78     		ldrb	r3, [r3]
 1073 0050 002B     		cmp	r3, #0
 1074 0052 07D0     		beq	.L120
 480:.\main.c      ****         {
 481:.\main.c      ****             fill_data_array();
 1075              		.loc 1 481 0
 1076 0054 FFF7FEFF 		bl	fill_data_array
 482:.\main.c      ****             new_pack = 1;
 1077              		.loc 1 482 0
 1078 0058 304B     		ldr	r3, .L128+16
 1079 005a 0122     		mov	r2, #1
 1080 005c 1A70     		strb	r2, [r3]
 483:.\main.c      ****             fin_exec = 0;
 1081              		.loc 1 483 0
 1082 005e 304B     		ldr	r3, .L128+20
 1083 0060 0022     		mov	r2, #0
 1084 0062 1A70     		strb	r2, [r3]
 1085              	.L120:
 484:.\main.c      ****         }
 485:.\main.c      ****         
 486:.\main.c      ****         baseAzimuth();
 1086              		.loc 1 486 0
 1087 0064 FFF7FEFF 		bl	baseAzimuth
 487:.\main.c      **** //        shoulder();
 488:.\main.c      ****         elbow();
 1088              		.loc 1 488 0
 1089 0068 FFF7FEFF 		bl	elbow
 489:.\main.c      **** //        wristTilt();
 490:.\main.c      **** //        wristRotate();
 491:.\main.c      **** 
 492:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 1090              		.loc 1 492 0
 1091 006c 2C4B     		ldr	r3, .L128+20
 1092 006e 1B78     		ldrb	r3, [r3]
 1093 0070 022B     		cmp	r3, #2
 1094 0072 03D1     		bne	.L121
 493:.\main.c      ****         {
 494:.\main.c      ****             new_pack = 0;
 1095              		.loc 1 494 0
 1096 0074 294B     		ldr	r3, .L128+16
 1097 0076 0022     		mov	r2, #0
 1098 0078 1A70     		strb	r2, [r3]
 495:.\main.c      ****         }
 496:.\main.c      ****         
 497:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 1099              		.loc 1 497 0
 1100 007a FFE7     		b	.L127
 1101              	.L121:
 1102              	.L127:
 1103 007c C046     		mov	r8, r8
 1104              	.L122:
 1105              		.loc 1 497 0 is_stmt 0 discriminator 1
 1106 007e 294B     		ldr	r3, .L128+24
 1107 0080 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 30


 1108 0082 002B     		cmp	r3, #0
 1109 0084 FBD0     		beq	.L122
 498:.\main.c      ****         timerFlag = 0;
 1110              		.loc 1 498 0 is_stmt 1
 1111 0086 274B     		ldr	r3, .L128+24
 1112 0088 0022     		mov	r2, #0
 1113 008a 1A70     		strb	r2, [r3]
 499:.\main.c      ****         
 500:.\main.c      ****         counter++;
 1114              		.loc 1 500 0
 1115 008c 3B1C     		mov	r3, r7
 1116 008e 0F33     		add	r3, r3, #15
 1117 0090 1A78     		ldrb	r2, [r3]
 1118 0092 3B1C     		mov	r3, r7
 1119 0094 0F33     		add	r3, r3, #15
 1120 0096 0132     		add	r2, r2, #1
 1121 0098 1A70     		strb	r2, [r3]
 501:.\main.c      ****         
 502:.\main.c      ****         if(counter == 100)
 1122              		.loc 1 502 0
 1123 009a 3B1C     		mov	r3, r7
 1124 009c 0F33     		add	r3, r3, #15
 1125 009e 1B78     		ldrb	r3, [r3]
 1126 00a0 642B     		cmp	r3, #100
 1127 00a2 31D1     		bne	.L123
 1128              	.LBB3:
 503:.\main.c      ****         {
 504:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1129              		.loc 1 504 0
 1130 00a4 0023     		mov	r3, #0
 1131 00a6 BB60     		str	r3, [r7, #8]
 1132 00a8 23E0     		b	.L124
 1133              	.L125:
 1134              	.LBB4:
 505:.\main.c      ****             {
 506:.\main.c      ****                 int16 random_number = rand()%2001 - 1000;
 1135              		.loc 1 506 0 discriminator 2
 1136 00aa FFF7FEFF 		bl	rand
 1137 00ae 031C     		mov	r3, r0
 1138 00b0 181C     		mov	r0, r3
 1139 00b2 1D49     		ldr	r1, .L128+28
 1140 00b4 FFF7FEFF 		bl	__aeabi_idivmod
 1141 00b8 0B1C     		mov	r3, r1
 1142 00ba 9BB2     		uxth	r3, r3
 1143 00bc 1B4A     		ldr	r2, .L128+32
 1144 00be 9B18     		add	r3, r3, r2
 1145 00c0 9AB2     		uxth	r2, r3
 1146 00c2 BB1D     		add	r3, r7, #6
 1147 00c4 1A80     		strh	r2, [r3]
 507:.\main.c      ****                 test_array[i] = random_number >> 8;
 1148              		.loc 1 507 0 discriminator 2
 1149 00c6 BB1D     		add	r3, r7, #6
 1150 00c8 0022     		mov	r2, #0
 1151 00ca 9B5E     		ldrsh	r3, [r3, r2]
 1152 00cc 1B12     		asr	r3, r3, #8
 1153 00ce 99B2     		uxth	r1, r3
 1154 00d0 174B     		ldr	r3, .L128+36
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 31


 1155 00d2 BA68     		ldr	r2, [r7, #8]
 1156 00d4 5200     		lsl	r2, r2, #1
 1157 00d6 D152     		strh	r1, [r2, r3]
 508:.\main.c      ****                 test_array[i+1] = random_number & 0x00FF;
 1158              		.loc 1 508 0 discriminator 2
 1159 00d8 BB68     		ldr	r3, [r7, #8]
 1160 00da 5A1C     		add	r2, r3, #1
 1161 00dc BB1D     		add	r3, r7, #6
 1162 00de 1988     		ldrh	r1, [r3]
 1163 00e0 FF23     		mov	r3, #255
 1164 00e2 0B40     		and	r3, r1
 1165 00e4 99B2     		uxth	r1, r3
 1166 00e6 124B     		ldr	r3, .L128+36
 1167 00e8 5200     		lsl	r2, r2, #1
 1168 00ea D152     		strh	r1, [r2, r3]
 1169              	.LBE4:
 504:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1170              		.loc 1 504 0 discriminator 2
 1171 00ec BB68     		ldr	r3, [r7, #8]
 1172 00ee 0233     		add	r3, r3, #2
 1173 00f0 BB60     		str	r3, [r7, #8]
 1174              	.L124:
 504:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1175              		.loc 1 504 0 is_stmt 0 discriminator 1
 1176 00f2 BB68     		ldr	r3, [r7, #8]
 1177 00f4 092B     		cmp	r3, #9
 1178 00f6 D8DD     		ble	.L125
 1179              	.LBE3:
 509:.\main.c      ****             }
 510:.\main.c      ****             counter = 0;
 1180              		.loc 1 510 0 is_stmt 1
 1181 00f8 3B1C     		mov	r3, r7
 1182 00fa 0F33     		add	r3, r3, #15
 1183 00fc 0022     		mov	r2, #0
 1184 00fe 1A70     		strb	r2, [r3]
 511:.\main.c      ****             wiznet = 1;
 1185              		.loc 1 511 0
 1186 0100 054B     		ldr	r3, .L128+12
 1187 0102 0122     		mov	r2, #1
 1188 0104 1A70     		strb	r2, [r3]
 512:.\main.c      ****         }
 513:.\main.c      ****         
 514:.\main.c      **** //            //Potential solution to how we will want to send feedback
 515:.\main.c      **** //            feedback_count++;
 516:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 517:.\main.c      **** //            {                                        //time through the full set of instructions
 518:.\main.c      **** //                send_feedback();
 519:.\main.c      **** //            }
 520:.\main.c      ****     }
 1189              		.loc 1 520 0
 1190 0106 A1E7     		b	.L126
 1191              	.L123:
 1192 0108 A0E7     		b	.L126
 1193              	.L129:
 1194 010a C046     		.align	2
 1195              	.L128:
 1196 010c DC050000 		.word	1500
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 32


 1197 0110 10270000 		.word	10000
 1198 0114 00000000 		.word	timer_isr
 1199 0118 00000000 		.word	wiznet
 1200 011c 00000000 		.word	new_pack
 1201 0120 00000000 		.word	fin_exec
 1202 0124 00000000 		.word	timerFlag
 1203 0128 D1070000 		.word	2001
 1204 012c 18FCFFFF 		.word	-1000
 1205 0130 00000000 		.word	test_array
 1206              		.cfi_endproc
 1207              	.LFE43:
 1208              		.size	main, .-main
 1209              		.text
 1210              	.Letext0:
 1211              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1212              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1213              		.section	.debug_info,"",%progbits
 1214              	.Ldebug_info0:
 1215 0000 E0040000 		.4byte	0x4e0
 1216 0004 0400     		.2byte	0x4
 1217 0006 00000000 		.4byte	.Ldebug_abbrev0
 1218 000a 04       		.byte	0x4
 1219 000b 01       		.uleb128 0x1
 1220 000c 86030000 		.4byte	.LASF78
 1221 0010 01       		.byte	0x1
 1222 0011 07020000 		.4byte	.LASF79
 1223 0015 2F000000 		.4byte	.LASF80
 1224 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1225 001d 00000000 		.4byte	0
 1226 0021 00000000 		.4byte	.Ldebug_line0
 1227 0025 02       		.uleb128 0x2
 1228 0026 01       		.byte	0x1
 1229 0027 06       		.byte	0x6
 1230 0028 56010000 		.4byte	.LASF0
 1231 002c 02       		.uleb128 0x2
 1232 002d 01       		.byte	0x1
 1233 002e 08       		.byte	0x8
 1234 002f 1E020000 		.4byte	.LASF1
 1235 0033 02       		.uleb128 0x2
 1236 0034 02       		.byte	0x2
 1237 0035 05       		.byte	0x5
 1238 0036 81000000 		.4byte	.LASF2
 1239 003a 02       		.uleb128 0x2
 1240 003b 02       		.byte	0x2
 1241 003c 07       		.byte	0x7
 1242 003d B2020000 		.4byte	.LASF3
 1243 0041 02       		.uleb128 0x2
 1244 0042 04       		.byte	0x4
 1245 0043 05       		.byte	0x5
 1246 0044 A3010000 		.4byte	.LASF4
 1247 0048 02       		.uleb128 0x2
 1248 0049 04       		.byte	0x4
 1249 004a 07       		.byte	0x7
 1250 004b A0020000 		.4byte	.LASF5
 1251 004f 02       		.uleb128 0x2
 1252 0050 08       		.byte	0x8
 1253 0051 05       		.byte	0x5
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 33


 1254 0052 C6000000 		.4byte	.LASF6
 1255 0056 02       		.uleb128 0x2
 1256 0057 08       		.byte	0x8
 1257 0058 07       		.byte	0x7
 1258 0059 7C020000 		.4byte	.LASF7
 1259 005d 03       		.uleb128 0x3
 1260 005e 04       		.byte	0x4
 1261 005f 05       		.byte	0x5
 1262 0060 696E7400 		.ascii	"int\000"
 1263 0064 02       		.uleb128 0x2
 1264 0065 04       		.byte	0x4
 1265 0066 07       		.byte	0x7
 1266 0067 93020000 		.4byte	.LASF8
 1267 006b 04       		.uleb128 0x4
 1268 006c F5010000 		.4byte	.LASF9
 1269 0070 02       		.byte	0x2
 1270 0071 A1       		.byte	0xa1
 1271 0072 2C000000 		.4byte	0x2c
 1272 0076 04       		.uleb128 0x4
 1273 0077 04010000 		.4byte	.LASF10
 1274 007b 02       		.byte	0x2
 1275 007c A2       		.byte	0xa2
 1276 007d 3A000000 		.4byte	0x3a
 1277 0081 04       		.uleb128 0x4
 1278 0082 17030000 		.4byte	.LASF11
 1279 0086 02       		.byte	0x2
 1280 0087 A3       		.byte	0xa3
 1281 0088 48000000 		.4byte	0x48
 1282 008c 04       		.uleb128 0x4
 1283 008d 26010000 		.4byte	.LASF12
 1284 0091 02       		.byte	0x2
 1285 0092 A5       		.byte	0xa5
 1286 0093 33000000 		.4byte	0x33
 1287 0097 02       		.uleb128 0x2
 1288 0098 04       		.byte	0x4
 1289 0099 04       		.byte	0x4
 1290 009a 6D010000 		.4byte	.LASF13
 1291 009e 02       		.uleb128 0x2
 1292 009f 08       		.byte	0x8
 1293 00a0 04       		.byte	0x4
 1294 00a1 35030000 		.4byte	.LASF14
 1295 00a5 02       		.uleb128 0x2
 1296 00a6 01       		.byte	0x1
 1297 00a7 08       		.byte	0x8
 1298 00a8 E3020000 		.4byte	.LASF15
 1299 00ac 02       		.uleb128 0x2
 1300 00ad 04       		.byte	0x4
 1301 00ae 07       		.byte	0x7
 1302 00af 98000000 		.4byte	.LASF16
 1303 00b3 04       		.uleb128 0x4
 1304 00b4 3C030000 		.4byte	.LASF17
 1305 00b8 03       		.byte	0x3
 1306 00b9 7A       		.byte	0x7a
 1307 00ba 41000000 		.4byte	0x41
 1308 00be 05       		.uleb128 0x5
 1309 00bf BF010000 		.4byte	.LASF22
 1310 00c3 01       		.byte	0x1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 34


 1311 00c4 01       		.byte	0x1
 1312 00c5 53       		.byte	0x53
 1313 00c6 E3000000 		.4byte	0xe3
 1314 00ca 06       		.uleb128 0x6
 1315 00cb FB010000 		.4byte	.LASF18
 1316 00cf 00       		.sleb128 0
 1317 00d0 06       		.uleb128 0x6
 1318 00d1 09000000 		.4byte	.LASF19
 1319 00d5 01       		.sleb128 1
 1320 00d6 06       		.uleb128 0x6
 1321 00d7 58020000 		.4byte	.LASF20
 1322 00db 02       		.sleb128 2
 1323 00dc 06       		.uleb128 0x6
 1324 00dd 1E030000 		.4byte	.LASF21
 1325 00e1 03       		.sleb128 3
 1326 00e2 00       		.byte	0
 1327 00e3 05       		.uleb128 0x5
 1328 00e4 C5020000 		.4byte	.LASF23
 1329 00e8 01       		.byte	0x1
 1330 00e9 01       		.byte	0x1
 1331 00ea 82       		.byte	0x82
 1332 00eb 08010000 		.4byte	0x108
 1333 00ef 06       		.uleb128 0x6
 1334 00f0 EB010000 		.4byte	.LASF24
 1335 00f4 00       		.sleb128 0
 1336 00f5 06       		.uleb128 0x6
 1337 00f6 14000000 		.4byte	.LASF25
 1338 00fa 01       		.sleb128 1
 1339 00fb 06       		.uleb128 0x6
 1340 00fc 28030000 		.4byte	.LASF26
 1341 0100 02       		.sleb128 2
 1342 0101 06       		.uleb128 0x6
 1343 0102 4A020000 		.4byte	.LASF27
 1344 0106 03       		.sleb128 3
 1345 0107 00       		.byte	0
 1346 0108 05       		.uleb128 0x5
 1347 0109 AC000000 		.4byte	.LASF28
 1348 010d 01       		.byte	0x1
 1349 010e 01       		.byte	0x1
 1350 010f B3       		.byte	0xb3
 1351 0110 2D010000 		.4byte	0x12d
 1352 0114 06       		.uleb128 0x6
 1353 0115 2C010000 		.4byte	.LASF29
 1354 0119 00       		.sleb128 0
 1355 011a 06       		.uleb128 0x6
 1356 011b 8B000000 		.4byte	.LASF30
 1357 011f 01       		.sleb128 1
 1358 0120 06       		.uleb128 0x6
 1359 0121 94010000 		.4byte	.LASF31
 1360 0125 02       		.sleb128 2
 1361 0126 06       		.uleb128 0x6
 1362 0127 3F040000 		.4byte	.LASF32
 1363 012b 03       		.sleb128 3
 1364 012c 00       		.byte	0
 1365 012d 07       		.uleb128 0x7
 1366 012e D6020000 		.4byte	.LASF33
 1367 0132 01       		.byte	0x1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 35


 1368 0133 01       		.byte	0x1
 1369 0134 0101     		.2byte	0x101
 1370 0136 53010000 		.4byte	0x153
 1371 013a 06       		.uleb128 0x6
 1372 013b 73010000 		.4byte	.LASF34
 1373 013f 00       		.sleb128 0
 1374 0140 06       		.uleb128 0x6
 1375 0141 77000000 		.4byte	.LASF35
 1376 0145 01       		.sleb128 1
 1377 0146 06       		.uleb128 0x6
 1378 0147 32040000 		.4byte	.LASF36
 1379 014b 02       		.sleb128 2
 1380 014c 06       		.uleb128 0x6
 1381 014d 0D040000 		.4byte	.LASF37
 1382 0151 03       		.sleb128 3
 1383 0152 00       		.byte	0
 1384 0153 07       		.uleb128 0x7
 1385 0154 AC010000 		.4byte	.LASF38
 1386 0158 01       		.byte	0x1
 1387 0159 01       		.byte	0x1
 1388 015a 6C01     		.2byte	0x16c
 1389 015c 79010000 		.4byte	0x179
 1390 0160 06       		.uleb128 0x6
 1391 0161 00000000 		.4byte	.LASF39
 1392 0165 00       		.sleb128 0
 1393 0166 06       		.uleb128 0x6
 1394 0167 D4000000 		.4byte	.LASF40
 1395 016b 01       		.sleb128 1
 1396 016c 06       		.uleb128 0x6
 1397 016d A1000000 		.4byte	.LASF41
 1398 0171 02       		.sleb128 2
 1399 0172 06       		.uleb128 0x6
 1400 0173 4E010000 		.4byte	.LASF42
 1401 0177 03       		.sleb128 3
 1402 0178 00       		.byte	0
 1403 0179 08       		.uleb128 0x8
 1404 017a 73030000 		.4byte	.LASF58
 1405 017e 01       		.byte	0x1
 1406 017f 2D       		.byte	0x2d
 1407 0180 00000000 		.4byte	.LFB33
 1408 0184 28000000 		.4byte	.LFE33-.LFB33
 1409 0188 01       		.uleb128 0x1
 1410 0189 9C       		.byte	0x9c
 1411 018a 9D010000 		.4byte	0x19d
 1412 018e 09       		.uleb128 0x9
 1413 018f 2C020000 		.4byte	.LASF43
 1414 0193 01       		.byte	0x1
 1415 0194 2F       		.byte	0x2f
 1416 0195 81000000 		.4byte	0x81
 1417 0199 02       		.uleb128 0x2
 1418 019a 91       		.byte	0x91
 1419 019b 74       		.sleb128 -12
 1420 019c 00       		.byte	0
 1421 019d 0A       		.uleb128 0xa
 1422 019e 5B030000 		.4byte	.LASF49
 1423 01a2 01       		.byte	0x1
 1424 01a3 45       		.byte	0x45
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 36


 1425 01a4 76000000 		.4byte	0x76
 1426 01a8 00000000 		.4byte	.LFB34
 1427 01ac 28000000 		.4byte	.LFE34-.LFB34
 1428 01b0 01       		.uleb128 0x1
 1429 01b1 9C       		.byte	0x9c
 1430 01b2 D3010000 		.4byte	0x1d3
 1431 01b6 0B       		.uleb128 0xb
 1432 01b7 F9020000 		.4byte	.LASF51
 1433 01bb 01       		.byte	0x1
 1434 01bc 45       		.byte	0x45
 1435 01bd 81000000 		.4byte	0x81
 1436 01c1 02       		.uleb128 0x2
 1437 01c2 91       		.byte	0x91
 1438 01c3 6C       		.sleb128 -20
 1439 01c4 09       		.uleb128 0x9
 1440 01c5 D5010000 		.4byte	.LASF44
 1441 01c9 01       		.byte	0x1
 1442 01ca 46       		.byte	0x46
 1443 01cb 76000000 		.4byte	0x76
 1444 01cf 02       		.uleb128 0x2
 1445 01d0 91       		.byte	0x91
 1446 01d1 76       		.sleb128 -10
 1447 01d2 00       		.byte	0
 1448 01d3 0C       		.uleb128 0xc
 1449 01d4 1F000000 		.4byte	.LASF54
 1450 01d8 01       		.byte	0x1
 1451 01d9 4A       		.byte	0x4a
 1452 01da 00000000 		.4byte	.LFB35
 1453 01de 4C000000 		.4byte	.LFE35-.LFB35
 1454 01e2 01       		.uleb128 0x1
 1455 01e3 9C       		.byte	0x9c
 1456 01e4 F5010000 		.4byte	0x1f5
 1457 01e8 0D       		.uleb128 0xd
 1458 01e9 6900     		.ascii	"i\000"
 1459 01eb 01       		.byte	0x1
 1460 01ec 4C       		.byte	0x4c
 1461 01ed 6B000000 		.4byte	0x6b
 1462 01f1 02       		.uleb128 0x2
 1463 01f2 91       		.byte	0x91
 1464 01f3 77       		.sleb128 -9
 1465 01f4 00       		.byte	0
 1466 01f5 0E       		.uleb128 0xe
 1467 01f6 0E030000 		.4byte	.LASF45
 1468 01fa 01       		.byte	0x1
 1469 01fb 55       		.byte	0x55
 1470 01fc 00000000 		.4byte	.LFB36
 1471 0200 44000000 		.4byte	.LFE36-.LFB36
 1472 0204 01       		.uleb128 0x1
 1473 0205 9C       		.byte	0x9c
 1474 0206 0E       		.uleb128 0xe
 1475 0207 8A010000 		.4byte	.LASF46
 1476 020b 01       		.byte	0x1
 1477 020c 84       		.byte	0x84
 1478 020d 00000000 		.4byte	.LFB37
 1479 0211 48000000 		.4byte	.LFE37-.LFB37
 1480 0215 01       		.uleb128 0x1
 1481 0216 9C       		.byte	0x9c
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 37


 1482 0217 0E       		.uleb128 0xe
 1483 0218 1A010000 		.4byte	.LASF47
 1484 021c 01       		.byte	0x1
 1485 021d B5       		.byte	0xb5
 1486 021e 00000000 		.4byte	.LFB38
 1487 0222 48000000 		.4byte	.LFE38-.LFB38
 1488 0226 01       		.uleb128 0x1
 1489 0227 9C       		.byte	0x9c
 1490 0228 0E       		.uleb128 0xe
 1491 0229 10020000 		.4byte	.LASF48
 1492 022d 01       		.byte	0x1
 1493 022e E4       		.byte	0xe4
 1494 022f 00000000 		.4byte	.LFB39
 1495 0233 08000000 		.4byte	.LFE39-.LFB39
 1496 0237 01       		.uleb128 0x1
 1497 0238 9C       		.byte	0x9c
 1498 0239 0A       		.uleb128 0xa
 1499 023a 17040000 		.4byte	.LASF50
 1500 023e 01       		.byte	0x1
 1501 023f EE       		.byte	0xee
 1502 0240 76000000 		.4byte	0x76
 1503 0244 00000000 		.4byte	.LFB40
 1504 0248 78000000 		.4byte	.LFE40-.LFB40
 1505 024c 01       		.uleb128 0x1
 1506 024d 9C       		.byte	0x9c
 1507 024e 97020000 		.4byte	0x297
 1508 0252 0B       		.uleb128 0xb
 1509 0253 43030000 		.4byte	.LASF52
 1510 0257 01       		.byte	0x1
 1511 0258 EE       		.byte	0xee
 1512 0259 97020000 		.4byte	0x297
 1513 025d 02       		.uleb128 0x2
 1514 025e 91       		.byte	0x91
 1515 025f 64       		.sleb128 -28
 1516 0260 0B       		.uleb128 0xb
 1517 0261 63020000 		.4byte	.LASF53
 1518 0265 01       		.byte	0x1
 1519 0266 EE       		.byte	0xee
 1520 0267 6B000000 		.4byte	0x6b
 1521 026b 02       		.uleb128 0x2
 1522 026c 91       		.byte	0x91
 1523 026d 63       		.sleb128 -29
 1524 026e 0D       		.uleb128 0xd
 1525 026f 6900     		.ascii	"i\000"
 1526 0271 01       		.byte	0x1
 1527 0272 F0       		.byte	0xf0
 1528 0273 6B000000 		.4byte	0x6b
 1529 0277 02       		.uleb128 0x2
 1530 0278 91       		.byte	0x91
 1531 0279 77       		.sleb128 -9
 1532 027a 0D       		.uleb128 0xd
 1533 027b 73756D00 		.ascii	"sum\000"
 1534 027f 01       		.byte	0x1
 1535 0280 F1       		.byte	0xf1
 1536 0281 81000000 		.4byte	0x81
 1537 0285 02       		.uleb128 0x2
 1538 0286 91       		.byte	0x91
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 38


 1539 0287 70       		.sleb128 -16
 1540 0288 0D       		.uleb128 0xd
 1541 0289 61766700 		.ascii	"avg\000"
 1542 028d 01       		.byte	0x1
 1543 028e F2       		.byte	0xf2
 1544 028f 76000000 		.4byte	0x76
 1545 0293 02       		.uleb128 0x2
 1546 0294 91       		.byte	0x91
 1547 0295 6E       		.sleb128 -18
 1548 0296 00       		.byte	0
 1549 0297 0F       		.uleb128 0xf
 1550 0298 04       		.byte	0x4
 1551 0299 76000000 		.4byte	0x76
 1552 029d 10       		.uleb128 0x10
 1553 029e FE000000 		.4byte	.LASF55
 1554 02a2 01       		.byte	0x1
 1555 02a3 0201     		.2byte	0x102
 1556 02a5 00000000 		.4byte	.LFB41
 1557 02a9 9C010000 		.4byte	.LFE41-.LFB41
 1558 02ad 01       		.uleb128 0x1
 1559 02ae 9C       		.byte	0x9c
 1560 02af F8020000 		.4byte	0x2f8
 1561 02b3 11       		.uleb128 0x11
 1562 02b4 6900     		.ascii	"i\000"
 1563 02b6 01       		.byte	0x1
 1564 02b7 0801     		.2byte	0x108
 1565 02b9 6B000000 		.4byte	0x6b
 1566 02bd 02       		.uleb128 0x2
 1567 02be 91       		.byte	0x91
 1568 02bf 6F       		.sleb128 -17
 1569 02c0 11       		.uleb128 0x11
 1570 02c1 61766700 		.ascii	"avg\000"
 1571 02c5 01       		.byte	0x1
 1572 02c6 0901     		.2byte	0x109
 1573 02c8 76000000 		.4byte	0x76
 1574 02cc 02       		.uleb128 0x2
 1575 02cd 91       		.byte	0x91
 1576 02ce 6A       		.sleb128 -22
 1577 02cf 12       		.uleb128 0x12
 1578 02d0 2A040000 		.4byte	.LASF56
 1579 02d4 01       		.byte	0x1
 1580 02d5 0A01     		.2byte	0x10a
 1581 02d7 76000000 		.4byte	0x76
 1582 02db 02       		.uleb128 0x2
 1583 02dc 91       		.byte	0x91
 1584 02dd 6C       		.sleb128 -20
 1585 02de 13       		.uleb128 0x13
 1586 02df 16000000 		.4byte	.LBB2
 1587 02e3 02010000 		.4byte	.LBE2-.LBB2
 1588 02e7 12       		.uleb128 0x12
 1589 02e8 D5010000 		.4byte	.LASF44
 1590 02ec 01       		.byte	0x1
 1591 02ed 2501     		.2byte	0x125
 1592 02ef 76000000 		.4byte	0x76
 1593 02f3 02       		.uleb128 0x2
 1594 02f4 91       		.byte	0x91
 1595 02f5 68       		.sleb128 -24
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 39


 1596 02f6 00       		.byte	0
 1597 02f7 00       		.byte	0
 1598 02f8 10       		.uleb128 0x10
 1599 02f9 7E010000 		.4byte	.LASF57
 1600 02fd 01       		.byte	0x1
 1601 02fe 6D01     		.2byte	0x16d
 1602 0300 00000000 		.4byte	.LFB42
 1603 0304 34010000 		.4byte	.LFE42-.LFB42
 1604 0308 01       		.uleb128 0x1
 1605 0309 9C       		.byte	0x9c
 1606 030a 3A030000 		.4byte	0x33a
 1607 030e 11       		.uleb128 0x11
 1608 030f 6900     		.ascii	"i\000"
 1609 0311 01       		.byte	0x1
 1610 0312 7201     		.2byte	0x172
 1611 0314 6B000000 		.4byte	0x6b
 1612 0318 02       		.uleb128 0x2
 1613 0319 91       		.byte	0x91
 1614 031a 6F       		.sleb128 -17
 1615 031b 11       		.uleb128 0x11
 1616 031c 61766700 		.ascii	"avg\000"
 1617 0320 01       		.byte	0x1
 1618 0321 7301     		.2byte	0x173
 1619 0323 76000000 		.4byte	0x76
 1620 0327 02       		.uleb128 0x2
 1621 0328 91       		.byte	0x91
 1622 0329 6A       		.sleb128 -22
 1623 032a 12       		.uleb128 0x12
 1624 032b 2A040000 		.4byte	.LASF56
 1625 032f 01       		.byte	0x1
 1626 0330 7401     		.2byte	0x174
 1627 0332 76000000 		.4byte	0x76
 1628 0336 02       		.uleb128 0x2
 1629 0337 91       		.byte	0x91
 1630 0338 6C       		.sleb128 -20
 1631 0339 00       		.byte	0
 1632 033a 14       		.uleb128 0x14
 1633 033b E8020000 		.4byte	.LASF59
 1634 033f 01       		.byte	0x1
 1635 0340 B801     		.2byte	0x1b8
 1636 0342 5D000000 		.4byte	0x5d
 1637 0346 00000000 		.4byte	.LFB43
 1638 034a 34010000 		.4byte	.LFE43-.LFB43
 1639 034e 01       		.uleb128 0x1
 1640 034f 9C       		.byte	0x9c
 1641 0350 A1030000 		.4byte	0x3a1
 1642 0354 11       		.uleb128 0x11
 1643 0355 7400     		.ascii	"t\000"
 1644 0357 01       		.byte	0x1
 1645 0358 BD01     		.2byte	0x1bd
 1646 035a B3000000 		.4byte	0xb3
 1647 035e 02       		.uleb128 0x2
 1648 035f 91       		.byte	0x91
 1649 0360 68       		.sleb128 -24
 1650 0361 12       		.uleb128 0x12
 1651 0362 34020000 		.4byte	.LASF60
 1652 0366 01       		.byte	0x1
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 40


 1653 0367 BE01     		.2byte	0x1be
 1654 0369 6B000000 		.4byte	0x6b
 1655 036d 02       		.uleb128 0x2
 1656 036e 91       		.byte	0x91
 1657 036f 77       		.sleb128 -9
 1658 0370 13       		.uleb128 0x13
 1659 0371 A4000000 		.4byte	.LBB3
 1660 0375 54000000 		.4byte	.LBE3-.LBB3
 1661 0379 11       		.uleb128 0x11
 1662 037a 6900     		.ascii	"i\000"
 1663 037c 01       		.byte	0x1
 1664 037d F801     		.2byte	0x1f8
 1665 037f 5D000000 		.4byte	0x5d
 1666 0383 02       		.uleb128 0x2
 1667 0384 91       		.byte	0x91
 1668 0385 70       		.sleb128 -16
 1669 0386 13       		.uleb128 0x13
 1670 0387 AA000000 		.4byte	.LBB4
 1671 038b 42000000 		.4byte	.LBE4-.LBB4
 1672 038f 12       		.uleb128 0x12
 1673 0390 3C020000 		.4byte	.LASF61
 1674 0394 01       		.byte	0x1
 1675 0395 FA01     		.2byte	0x1fa
 1676 0397 8C000000 		.4byte	0x8c
 1677 039b 02       		.uleb128 0x2
 1678 039c 91       		.byte	0x91
 1679 039d 6E       		.sleb128 -18
 1680 039e 00       		.byte	0
 1681 039f 00       		.byte	0
 1682 03a0 00       		.byte	0
 1683 03a1 15       		.uleb128 0x15
 1684 03a2 76000000 		.4byte	0x76
 1685 03a6 B1030000 		.4byte	0x3b1
 1686 03aa 16       		.uleb128 0x16
 1687 03ab AC000000 		.4byte	0xac
 1688 03af 0D       		.byte	0xd
 1689 03b0 00       		.byte	0
 1690 03b1 17       		.uleb128 0x17
 1691 03b2 1F040000 		.4byte	.LASF62
 1692 03b6 01       		.byte	0x1
 1693 03b7 14       		.byte	0x14
 1694 03b8 A1030000 		.4byte	0x3a1
 1695 03bc 05       		.uleb128 0x5
 1696 03bd 03       		.byte	0x3
 1697 03be 00000000 		.4byte	data_array
 1698 03c2 17       		.uleb128 0x17
 1699 03c3 BF000000 		.4byte	.LASF63
 1700 03c7 01       		.byte	0x1
 1701 03c8 16       		.byte	0x16
 1702 03c9 6B000000 		.4byte	0x6b
 1703 03cd 05       		.uleb128 0x5
 1704 03ce 03       		.byte	0x3
 1705 03cf 00000000 		.4byte	wiznet
 1706 03d3 17       		.uleb128 0x17
 1707 03d4 7D030000 		.4byte	.LASF64
 1708 03d8 01       		.byte	0x1
 1709 03d9 17       		.byte	0x17
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 41


 1710 03da 6B000000 		.4byte	0x6b
 1711 03de 05       		.uleb128 0x5
 1712 03df 03       		.byte	0x3
 1713 03e0 00000000 		.4byte	new_pack
 1714 03e4 17       		.uleb128 0x17
 1715 03e5 CC010000 		.4byte	.LASF65
 1716 03e9 01       		.byte	0x1
 1717 03ea 1A       		.byte	0x1a
 1718 03eb 6B000000 		.4byte	0x6b
 1719 03ef 05       		.uleb128 0x5
 1720 03f0 03       		.byte	0x3
 1721 03f1 00000000 		.4byte	fin_exec
 1722 03f5 15       		.uleb128 0x15
 1723 03f6 8C000000 		.4byte	0x8c
 1724 03fa 05040000 		.4byte	0x405
 1725 03fe 16       		.uleb128 0x16
 1726 03ff AC000000 		.4byte	0xac
 1727 0403 09       		.byte	0x9
 1728 0404 00       		.byte	0
 1729 0405 17       		.uleb128 0x17
 1730 0406 62010000 		.4byte	.LASF66
 1731 040a 01       		.byte	0x1
 1732 040b 1D       		.byte	0x1d
 1733 040c F5030000 		.4byte	0x3f5
 1734 0410 05       		.uleb128 0x5
 1735 0411 03       		.byte	0x3
 1736 0412 00000000 		.4byte	test_array
 1737 0416 17       		.uleb128 0x17
 1738 0417 0B010000 		.4byte	.LASF67
 1739 041b 01       		.byte	0x1
 1740 041c 20       		.byte	0x20
 1741 041d 6B000000 		.4byte	0x6b
 1742 0421 05       		.uleb128 0x5
 1743 0422 03       		.byte	0x3
 1744 0423 00000000 		.4byte	elbw_arr_cspot
 1745 0427 15       		.uleb128 0x15
 1746 0428 76000000 		.4byte	0x76
 1747 042c 37040000 		.4byte	0x437
 1748 0430 16       		.uleb128 0x16
 1749 0431 AC000000 		.4byte	0xac
 1750 0435 13       		.byte	0x13
 1751 0436 00       		.byte	0
 1752 0437 17       		.uleb128 0x17
 1753 0438 ED020000 		.4byte	.LASF68
 1754 043c 01       		.byte	0x1
 1755 043d 21       		.byte	0x21
 1756 043e 27040000 		.4byte	0x427
 1757 0442 05       		.uleb128 0x5
 1758 0443 03       		.byte	0x3
 1759 0444 00000000 		.4byte	elbow_array
 1760 0448 17       		.uleb128 0x17
 1761 0449 DE010000 		.4byte	.LASF69
 1762 044d 01       		.byte	0x1
 1763 044e 24       		.byte	0x24
 1764 044f 6B000000 		.4byte	0x6b
 1765 0453 05       		.uleb128 0x5
 1766 0454 03       		.byte	0x3
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 42


 1767 0455 00000000 		.4byte	BA_arr_cspot
 1768 0459 17       		.uleb128 0x17
 1769 045a 01030000 		.4byte	.LASF70
 1770 045e 01       		.byte	0x1
 1771 045f 25       		.byte	0x25
 1772 0460 27040000 		.4byte	0x427
 1773 0464 05       		.uleb128 0x5
 1774 0465 03       		.byte	0x3
 1775 0466 00000000 		.4byte	baseAz_array
 1776 046a 17       		.uleb128 0x17
 1777 046b 6D020000 		.4byte	.LASF71
 1778 046f 01       		.byte	0x1
 1779 0470 27       		.byte	0x27
 1780 0471 76000000 		.4byte	0x76
 1781 0475 05       		.uleb128 0x5
 1782 0476 03       		.byte	0x3
 1783 0477 00000000 		.4byte	feedback_count
 1784 047b 17       		.uleb128 0x17
 1785 047c 38010000 		.4byte	.LASF72
 1786 0480 01       		.byte	0x1
 1787 0481 28       		.byte	0x28
 1788 0482 6B000000 		.4byte	0x6b
 1789 0486 05       		.uleb128 0x5
 1790 0487 03       		.byte	0x3
 1791 0488 00000000 		.4byte	timerFlag
 1792 048c 17       		.uleb128 0x17
 1793 048d 42010000 		.4byte	.LASF73
 1794 0491 01       		.byte	0x1
 1795 0492 53       		.byte	0x53
 1796 0493 BE000000 		.4byte	0xbe
 1797 0497 05       		.uleb128 0x5
 1798 0498 03       		.byte	0x3
 1799 0499 00000000 		.4byte	shldr_state
 1800 049d 17       		.uleb128 0x17
 1801 049e EE000000 		.4byte	.LASF74
 1802 04a2 01       		.byte	0x1
 1803 04a3 82       		.byte	0x82
 1804 04a4 E3000000 		.4byte	0xe3
 1805 04a8 05       		.uleb128 0x5
 1806 04a9 03       		.byte	0x3
 1807 04aa 00000000 		.4byte	wristTilt_state
 1808 04ae 17       		.uleb128 0x17
 1809 04af 49030000 		.4byte	.LASF75
 1810 04b3 01       		.byte	0x1
 1811 04b4 B3       		.byte	0xb3
 1812 04b5 08010000 		.4byte	0x108
 1813 04b9 05       		.uleb128 0x5
 1814 04ba 03       		.byte	0x3
 1815 04bb 00000000 		.4byte	wristRotate_state
 1816 04bf 18       		.uleb128 0x18
 1817 04c0 67030000 		.4byte	.LASF76
 1818 04c4 01       		.byte	0x1
 1819 04c5 0101     		.2byte	0x101
 1820 04c7 2D010000 		.4byte	0x12d
 1821 04cb 05       		.uleb128 0x5
 1822 04cc 03       		.byte	0x3
 1823 04cd 00000000 		.4byte	elbow_state
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 43


 1824 04d1 18       		.uleb128 0x18
 1825 04d2 DC000000 		.4byte	.LASF77
 1826 04d6 01       		.byte	0x1
 1827 04d7 6C01     		.2byte	0x16c
 1828 04d9 53010000 		.4byte	0x153
 1829 04dd 05       		.uleb128 0x5
 1830 04de 03       		.byte	0x3
 1831 04df 00000000 		.4byte	baseAzimuth_state
 1832 04e3 00       		.byte	0
 1833              		.section	.debug_abbrev,"",%progbits
 1834              	.Ldebug_abbrev0:
 1835 0000 01       		.uleb128 0x1
 1836 0001 11       		.uleb128 0x11
 1837 0002 01       		.byte	0x1
 1838 0003 25       		.uleb128 0x25
 1839 0004 0E       		.uleb128 0xe
 1840 0005 13       		.uleb128 0x13
 1841 0006 0B       		.uleb128 0xb
 1842 0007 03       		.uleb128 0x3
 1843 0008 0E       		.uleb128 0xe
 1844 0009 1B       		.uleb128 0x1b
 1845 000a 0E       		.uleb128 0xe
 1846 000b 55       		.uleb128 0x55
 1847 000c 17       		.uleb128 0x17
 1848 000d 11       		.uleb128 0x11
 1849 000e 01       		.uleb128 0x1
 1850 000f 10       		.uleb128 0x10
 1851 0010 17       		.uleb128 0x17
 1852 0011 00       		.byte	0
 1853 0012 00       		.byte	0
 1854 0013 02       		.uleb128 0x2
 1855 0014 24       		.uleb128 0x24
 1856 0015 00       		.byte	0
 1857 0016 0B       		.uleb128 0xb
 1858 0017 0B       		.uleb128 0xb
 1859 0018 3E       		.uleb128 0x3e
 1860 0019 0B       		.uleb128 0xb
 1861 001a 03       		.uleb128 0x3
 1862 001b 0E       		.uleb128 0xe
 1863 001c 00       		.byte	0
 1864 001d 00       		.byte	0
 1865 001e 03       		.uleb128 0x3
 1866 001f 24       		.uleb128 0x24
 1867 0020 00       		.byte	0
 1868 0021 0B       		.uleb128 0xb
 1869 0022 0B       		.uleb128 0xb
 1870 0023 3E       		.uleb128 0x3e
 1871 0024 0B       		.uleb128 0xb
 1872 0025 03       		.uleb128 0x3
 1873 0026 08       		.uleb128 0x8
 1874 0027 00       		.byte	0
 1875 0028 00       		.byte	0
 1876 0029 04       		.uleb128 0x4
 1877 002a 16       		.uleb128 0x16
 1878 002b 00       		.byte	0
 1879 002c 03       		.uleb128 0x3
 1880 002d 0E       		.uleb128 0xe
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 44


 1881 002e 3A       		.uleb128 0x3a
 1882 002f 0B       		.uleb128 0xb
 1883 0030 3B       		.uleb128 0x3b
 1884 0031 0B       		.uleb128 0xb
 1885 0032 49       		.uleb128 0x49
 1886 0033 13       		.uleb128 0x13
 1887 0034 00       		.byte	0
 1888 0035 00       		.byte	0
 1889 0036 05       		.uleb128 0x5
 1890 0037 04       		.uleb128 0x4
 1891 0038 01       		.byte	0x1
 1892 0039 03       		.uleb128 0x3
 1893 003a 0E       		.uleb128 0xe
 1894 003b 0B       		.uleb128 0xb
 1895 003c 0B       		.uleb128 0xb
 1896 003d 3A       		.uleb128 0x3a
 1897 003e 0B       		.uleb128 0xb
 1898 003f 3B       		.uleb128 0x3b
 1899 0040 0B       		.uleb128 0xb
 1900 0041 01       		.uleb128 0x1
 1901 0042 13       		.uleb128 0x13
 1902 0043 00       		.byte	0
 1903 0044 00       		.byte	0
 1904 0045 06       		.uleb128 0x6
 1905 0046 28       		.uleb128 0x28
 1906 0047 00       		.byte	0
 1907 0048 03       		.uleb128 0x3
 1908 0049 0E       		.uleb128 0xe
 1909 004a 1C       		.uleb128 0x1c
 1910 004b 0D       		.uleb128 0xd
 1911 004c 00       		.byte	0
 1912 004d 00       		.byte	0
 1913 004e 07       		.uleb128 0x7
 1914 004f 04       		.uleb128 0x4
 1915 0050 01       		.byte	0x1
 1916 0051 03       		.uleb128 0x3
 1917 0052 0E       		.uleb128 0xe
 1918 0053 0B       		.uleb128 0xb
 1919 0054 0B       		.uleb128 0xb
 1920 0055 3A       		.uleb128 0x3a
 1921 0056 0B       		.uleb128 0xb
 1922 0057 3B       		.uleb128 0x3b
 1923 0058 05       		.uleb128 0x5
 1924 0059 01       		.uleb128 0x1
 1925 005a 13       		.uleb128 0x13
 1926 005b 00       		.byte	0
 1927 005c 00       		.byte	0
 1928 005d 08       		.uleb128 0x8
 1929 005e 2E       		.uleb128 0x2e
 1930 005f 01       		.byte	0x1
 1931 0060 3F       		.uleb128 0x3f
 1932 0061 19       		.uleb128 0x19
 1933 0062 03       		.uleb128 0x3
 1934 0063 0E       		.uleb128 0xe
 1935 0064 3A       		.uleb128 0x3a
 1936 0065 0B       		.uleb128 0xb
 1937 0066 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 45


 1938 0067 0B       		.uleb128 0xb
 1939 0068 27       		.uleb128 0x27
 1940 0069 19       		.uleb128 0x19
 1941 006a 11       		.uleb128 0x11
 1942 006b 01       		.uleb128 0x1
 1943 006c 12       		.uleb128 0x12
 1944 006d 06       		.uleb128 0x6
 1945 006e 40       		.uleb128 0x40
 1946 006f 18       		.uleb128 0x18
 1947 0070 9642     		.uleb128 0x2116
 1948 0072 19       		.uleb128 0x19
 1949 0073 01       		.uleb128 0x1
 1950 0074 13       		.uleb128 0x13
 1951 0075 00       		.byte	0
 1952 0076 00       		.byte	0
 1953 0077 09       		.uleb128 0x9
 1954 0078 34       		.uleb128 0x34
 1955 0079 00       		.byte	0
 1956 007a 03       		.uleb128 0x3
 1957 007b 0E       		.uleb128 0xe
 1958 007c 3A       		.uleb128 0x3a
 1959 007d 0B       		.uleb128 0xb
 1960 007e 3B       		.uleb128 0x3b
 1961 007f 0B       		.uleb128 0xb
 1962 0080 49       		.uleb128 0x49
 1963 0081 13       		.uleb128 0x13
 1964 0082 02       		.uleb128 0x2
 1965 0083 18       		.uleb128 0x18
 1966 0084 00       		.byte	0
 1967 0085 00       		.byte	0
 1968 0086 0A       		.uleb128 0xa
 1969 0087 2E       		.uleb128 0x2e
 1970 0088 01       		.byte	0x1
 1971 0089 3F       		.uleb128 0x3f
 1972 008a 19       		.uleb128 0x19
 1973 008b 03       		.uleb128 0x3
 1974 008c 0E       		.uleb128 0xe
 1975 008d 3A       		.uleb128 0x3a
 1976 008e 0B       		.uleb128 0xb
 1977 008f 3B       		.uleb128 0x3b
 1978 0090 0B       		.uleb128 0xb
 1979 0091 27       		.uleb128 0x27
 1980 0092 19       		.uleb128 0x19
 1981 0093 49       		.uleb128 0x49
 1982 0094 13       		.uleb128 0x13
 1983 0095 11       		.uleb128 0x11
 1984 0096 01       		.uleb128 0x1
 1985 0097 12       		.uleb128 0x12
 1986 0098 06       		.uleb128 0x6
 1987 0099 40       		.uleb128 0x40
 1988 009a 18       		.uleb128 0x18
 1989 009b 9642     		.uleb128 0x2116
 1990 009d 19       		.uleb128 0x19
 1991 009e 01       		.uleb128 0x1
 1992 009f 13       		.uleb128 0x13
 1993 00a0 00       		.byte	0
 1994 00a1 00       		.byte	0
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 46


 1995 00a2 0B       		.uleb128 0xb
 1996 00a3 05       		.uleb128 0x5
 1997 00a4 00       		.byte	0
 1998 00a5 03       		.uleb128 0x3
 1999 00a6 0E       		.uleb128 0xe
 2000 00a7 3A       		.uleb128 0x3a
 2001 00a8 0B       		.uleb128 0xb
 2002 00a9 3B       		.uleb128 0x3b
 2003 00aa 0B       		.uleb128 0xb
 2004 00ab 49       		.uleb128 0x49
 2005 00ac 13       		.uleb128 0x13
 2006 00ad 02       		.uleb128 0x2
 2007 00ae 18       		.uleb128 0x18
 2008 00af 00       		.byte	0
 2009 00b0 00       		.byte	0
 2010 00b1 0C       		.uleb128 0xc
 2011 00b2 2E       		.uleb128 0x2e
 2012 00b3 01       		.byte	0x1
 2013 00b4 3F       		.uleb128 0x3f
 2014 00b5 19       		.uleb128 0x19
 2015 00b6 03       		.uleb128 0x3
 2016 00b7 0E       		.uleb128 0xe
 2017 00b8 3A       		.uleb128 0x3a
 2018 00b9 0B       		.uleb128 0xb
 2019 00ba 3B       		.uleb128 0x3b
 2020 00bb 0B       		.uleb128 0xb
 2021 00bc 11       		.uleb128 0x11
 2022 00bd 01       		.uleb128 0x1
 2023 00be 12       		.uleb128 0x12
 2024 00bf 06       		.uleb128 0x6
 2025 00c0 40       		.uleb128 0x40
 2026 00c1 18       		.uleb128 0x18
 2027 00c2 9742     		.uleb128 0x2117
 2028 00c4 19       		.uleb128 0x19
 2029 00c5 01       		.uleb128 0x1
 2030 00c6 13       		.uleb128 0x13
 2031 00c7 00       		.byte	0
 2032 00c8 00       		.byte	0
 2033 00c9 0D       		.uleb128 0xd
 2034 00ca 34       		.uleb128 0x34
 2035 00cb 00       		.byte	0
 2036 00cc 03       		.uleb128 0x3
 2037 00cd 08       		.uleb128 0x8
 2038 00ce 3A       		.uleb128 0x3a
 2039 00cf 0B       		.uleb128 0xb
 2040 00d0 3B       		.uleb128 0x3b
 2041 00d1 0B       		.uleb128 0xb
 2042 00d2 49       		.uleb128 0x49
 2043 00d3 13       		.uleb128 0x13
 2044 00d4 02       		.uleb128 0x2
 2045 00d5 18       		.uleb128 0x18
 2046 00d6 00       		.byte	0
 2047 00d7 00       		.byte	0
 2048 00d8 0E       		.uleb128 0xe
 2049 00d9 2E       		.uleb128 0x2e
 2050 00da 00       		.byte	0
 2051 00db 3F       		.uleb128 0x3f
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 47


 2052 00dc 19       		.uleb128 0x19
 2053 00dd 03       		.uleb128 0x3
 2054 00de 0E       		.uleb128 0xe
 2055 00df 3A       		.uleb128 0x3a
 2056 00e0 0B       		.uleb128 0xb
 2057 00e1 3B       		.uleb128 0x3b
 2058 00e2 0B       		.uleb128 0xb
 2059 00e3 11       		.uleb128 0x11
 2060 00e4 01       		.uleb128 0x1
 2061 00e5 12       		.uleb128 0x12
 2062 00e6 06       		.uleb128 0x6
 2063 00e7 40       		.uleb128 0x40
 2064 00e8 18       		.uleb128 0x18
 2065 00e9 9742     		.uleb128 0x2117
 2066 00eb 19       		.uleb128 0x19
 2067 00ec 00       		.byte	0
 2068 00ed 00       		.byte	0
 2069 00ee 0F       		.uleb128 0xf
 2070 00ef 0F       		.uleb128 0xf
 2071 00f0 00       		.byte	0
 2072 00f1 0B       		.uleb128 0xb
 2073 00f2 0B       		.uleb128 0xb
 2074 00f3 49       		.uleb128 0x49
 2075 00f4 13       		.uleb128 0x13
 2076 00f5 00       		.byte	0
 2077 00f6 00       		.byte	0
 2078 00f7 10       		.uleb128 0x10
 2079 00f8 2E       		.uleb128 0x2e
 2080 00f9 01       		.byte	0x1
 2081 00fa 3F       		.uleb128 0x3f
 2082 00fb 19       		.uleb128 0x19
 2083 00fc 03       		.uleb128 0x3
 2084 00fd 0E       		.uleb128 0xe
 2085 00fe 3A       		.uleb128 0x3a
 2086 00ff 0B       		.uleb128 0xb
 2087 0100 3B       		.uleb128 0x3b
 2088 0101 05       		.uleb128 0x5
 2089 0102 11       		.uleb128 0x11
 2090 0103 01       		.uleb128 0x1
 2091 0104 12       		.uleb128 0x12
 2092 0105 06       		.uleb128 0x6
 2093 0106 40       		.uleb128 0x40
 2094 0107 18       		.uleb128 0x18
 2095 0108 9642     		.uleb128 0x2116
 2096 010a 19       		.uleb128 0x19
 2097 010b 01       		.uleb128 0x1
 2098 010c 13       		.uleb128 0x13
 2099 010d 00       		.byte	0
 2100 010e 00       		.byte	0
 2101 010f 11       		.uleb128 0x11
 2102 0110 34       		.uleb128 0x34
 2103 0111 00       		.byte	0
 2104 0112 03       		.uleb128 0x3
 2105 0113 08       		.uleb128 0x8
 2106 0114 3A       		.uleb128 0x3a
 2107 0115 0B       		.uleb128 0xb
 2108 0116 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 48


 2109 0117 05       		.uleb128 0x5
 2110 0118 49       		.uleb128 0x49
 2111 0119 13       		.uleb128 0x13
 2112 011a 02       		.uleb128 0x2
 2113 011b 18       		.uleb128 0x18
 2114 011c 00       		.byte	0
 2115 011d 00       		.byte	0
 2116 011e 12       		.uleb128 0x12
 2117 011f 34       		.uleb128 0x34
 2118 0120 00       		.byte	0
 2119 0121 03       		.uleb128 0x3
 2120 0122 0E       		.uleb128 0xe
 2121 0123 3A       		.uleb128 0x3a
 2122 0124 0B       		.uleb128 0xb
 2123 0125 3B       		.uleb128 0x3b
 2124 0126 05       		.uleb128 0x5
 2125 0127 49       		.uleb128 0x49
 2126 0128 13       		.uleb128 0x13
 2127 0129 02       		.uleb128 0x2
 2128 012a 18       		.uleb128 0x18
 2129 012b 00       		.byte	0
 2130 012c 00       		.byte	0
 2131 012d 13       		.uleb128 0x13
 2132 012e 0B       		.uleb128 0xb
 2133 012f 01       		.byte	0x1
 2134 0130 11       		.uleb128 0x11
 2135 0131 01       		.uleb128 0x1
 2136 0132 12       		.uleb128 0x12
 2137 0133 06       		.uleb128 0x6
 2138 0134 00       		.byte	0
 2139 0135 00       		.byte	0
 2140 0136 14       		.uleb128 0x14
 2141 0137 2E       		.uleb128 0x2e
 2142 0138 01       		.byte	0x1
 2143 0139 3F       		.uleb128 0x3f
 2144 013a 19       		.uleb128 0x19
 2145 013b 03       		.uleb128 0x3
 2146 013c 0E       		.uleb128 0xe
 2147 013d 3A       		.uleb128 0x3a
 2148 013e 0B       		.uleb128 0xb
 2149 013f 3B       		.uleb128 0x3b
 2150 0140 05       		.uleb128 0x5
 2151 0141 49       		.uleb128 0x49
 2152 0142 13       		.uleb128 0x13
 2153 0143 11       		.uleb128 0x11
 2154 0144 01       		.uleb128 0x1
 2155 0145 12       		.uleb128 0x12
 2156 0146 06       		.uleb128 0x6
 2157 0147 40       		.uleb128 0x40
 2158 0148 18       		.uleb128 0x18
 2159 0149 9642     		.uleb128 0x2116
 2160 014b 19       		.uleb128 0x19
 2161 014c 01       		.uleb128 0x1
 2162 014d 13       		.uleb128 0x13
 2163 014e 00       		.byte	0
 2164 014f 00       		.byte	0
 2165 0150 15       		.uleb128 0x15
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 49


 2166 0151 01       		.uleb128 0x1
 2167 0152 01       		.byte	0x1
 2168 0153 49       		.uleb128 0x49
 2169 0154 13       		.uleb128 0x13
 2170 0155 01       		.uleb128 0x1
 2171 0156 13       		.uleb128 0x13
 2172 0157 00       		.byte	0
 2173 0158 00       		.byte	0
 2174 0159 16       		.uleb128 0x16
 2175 015a 21       		.uleb128 0x21
 2176 015b 00       		.byte	0
 2177 015c 49       		.uleb128 0x49
 2178 015d 13       		.uleb128 0x13
 2179 015e 2F       		.uleb128 0x2f
 2180 015f 0B       		.uleb128 0xb
 2181 0160 00       		.byte	0
 2182 0161 00       		.byte	0
 2183 0162 17       		.uleb128 0x17
 2184 0163 34       		.uleb128 0x34
 2185 0164 00       		.byte	0
 2186 0165 03       		.uleb128 0x3
 2187 0166 0E       		.uleb128 0xe
 2188 0167 3A       		.uleb128 0x3a
 2189 0168 0B       		.uleb128 0xb
 2190 0169 3B       		.uleb128 0x3b
 2191 016a 0B       		.uleb128 0xb
 2192 016b 49       		.uleb128 0x49
 2193 016c 13       		.uleb128 0x13
 2194 016d 3F       		.uleb128 0x3f
 2195 016e 19       		.uleb128 0x19
 2196 016f 02       		.uleb128 0x2
 2197 0170 18       		.uleb128 0x18
 2198 0171 00       		.byte	0
 2199 0172 00       		.byte	0
 2200 0173 18       		.uleb128 0x18
 2201 0174 34       		.uleb128 0x34
 2202 0175 00       		.byte	0
 2203 0176 03       		.uleb128 0x3
 2204 0177 0E       		.uleb128 0xe
 2205 0178 3A       		.uleb128 0x3a
 2206 0179 0B       		.uleb128 0xb
 2207 017a 3B       		.uleb128 0x3b
 2208 017b 05       		.uleb128 0x5
 2209 017c 49       		.uleb128 0x49
 2210 017d 13       		.uleb128 0x13
 2211 017e 3F       		.uleb128 0x3f
 2212 017f 19       		.uleb128 0x19
 2213 0180 02       		.uleb128 0x2
 2214 0181 18       		.uleb128 0x18
 2215 0182 00       		.byte	0
 2216 0183 00       		.byte	0
 2217 0184 00       		.byte	0
 2218              		.section	.debug_aranges,"",%progbits
 2219 0000 6C000000 		.4byte	0x6c
 2220 0004 0200     		.2byte	0x2
 2221 0006 00000000 		.4byte	.Ldebug_info0
 2222 000a 04       		.byte	0x4
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 50


 2223 000b 00       		.byte	0
 2224 000c 0000     		.2byte	0
 2225 000e 0000     		.2byte	0
 2226 0010 00000000 		.4byte	.LFB33
 2227 0014 28000000 		.4byte	.LFE33-.LFB33
 2228 0018 00000000 		.4byte	.LFB34
 2229 001c 28000000 		.4byte	.LFE34-.LFB34
 2230 0020 00000000 		.4byte	.LFB35
 2231 0024 4C000000 		.4byte	.LFE35-.LFB35
 2232 0028 00000000 		.4byte	.LFB36
 2233 002c 44000000 		.4byte	.LFE36-.LFB36
 2234 0030 00000000 		.4byte	.LFB37
 2235 0034 48000000 		.4byte	.LFE37-.LFB37
 2236 0038 00000000 		.4byte	.LFB38
 2237 003c 48000000 		.4byte	.LFE38-.LFB38
 2238 0040 00000000 		.4byte	.LFB39
 2239 0044 08000000 		.4byte	.LFE39-.LFB39
 2240 0048 00000000 		.4byte	.LFB40
 2241 004c 78000000 		.4byte	.LFE40-.LFB40
 2242 0050 00000000 		.4byte	.LFB41
 2243 0054 9C010000 		.4byte	.LFE41-.LFB41
 2244 0058 00000000 		.4byte	.LFB42
 2245 005c 34010000 		.4byte	.LFE42-.LFB42
 2246 0060 00000000 		.4byte	.LFB43
 2247 0064 34010000 		.4byte	.LFE43-.LFB43
 2248 0068 00000000 		.4byte	0
 2249 006c 00000000 		.4byte	0
 2250              		.section	.debug_ranges,"",%progbits
 2251              	.Ldebug_ranges0:
 2252 0000 00000000 		.4byte	.LFB33
 2253 0004 28000000 		.4byte	.LFE33
 2254 0008 00000000 		.4byte	.LFB34
 2255 000c 28000000 		.4byte	.LFE34
 2256 0010 00000000 		.4byte	.LFB35
 2257 0014 4C000000 		.4byte	.LFE35
 2258 0018 00000000 		.4byte	.LFB36
 2259 001c 44000000 		.4byte	.LFE36
 2260 0020 00000000 		.4byte	.LFB37
 2261 0024 48000000 		.4byte	.LFE37
 2262 0028 00000000 		.4byte	.LFB38
 2263 002c 48000000 		.4byte	.LFE38
 2264 0030 00000000 		.4byte	.LFB39
 2265 0034 08000000 		.4byte	.LFE39
 2266 0038 00000000 		.4byte	.LFB40
 2267 003c 78000000 		.4byte	.LFE40
 2268 0040 00000000 		.4byte	.LFB41
 2269 0044 9C010000 		.4byte	.LFE41
 2270 0048 00000000 		.4byte	.LFB42
 2271 004c 34010000 		.4byte	.LFE42
 2272 0050 00000000 		.4byte	.LFB43
 2273 0054 34010000 		.4byte	.LFE43
 2274 0058 00000000 		.4byte	0
 2275 005c 00000000 		.4byte	0
 2276              		.section	.debug_line,"",%progbits
 2277              	.Ldebug_line0:
 2278 0000 8E020000 		.section	.debug_str,"MS",%progbits,1
 2278      0200BF00 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 51


 2278      00000201 
 2278      FB0E0D00 
 2278      01010101 
 2279              	.LASF39:
 2280 0000 42415F73 		.ascii	"BA_start\000"
 2280      74617274 
 2280      00
 2281              	.LASF19:
 2282 0009 73686C64 		.ascii	"shldr_init\000"
 2282      725F696E 
 2282      697400
 2283              	.LASF25:
 2284 0014 74696C74 		.ascii	"tilt_start\000"
 2284      5F737461 
 2284      727400
 2285              	.LASF54:
 2286 001f 66696C6C 		.ascii	"fill_data_array\000"
 2286      5F646174 
 2286      615F6172 
 2286      72617900 
 2287              	.LASF80:
 2288 002f 5A3A5C4F 		.ascii	"Z:\\OneDrive\\Tech\\GitHub\\Arm\\arm_controller_v2\\"
 2288      6E654472 
 2288      6976655C 
 2288      54656368 
 2288      5C476974 
 2289 005d 61726D5F 		.ascii	"arm_controller_v2.1.cydsn\000"
 2289      636F6E74 
 2289      726F6C6C 
 2289      65725F76 
 2289      322E312E 
 2290              	.LASF35:
 2291 0077 656C6277 		.ascii	"elbw_init\000"
 2291      5F696E69 
 2291      7400
 2292              	.LASF2:
 2293 0081 73686F72 		.ascii	"short int\000"
 2293      7420696E 
 2293      7400
 2294              	.LASF30:
 2295 008b 726F7461 		.ascii	"rotate_start\000"
 2295      74655F73 
 2295      74617274 
 2295      00
 2296              	.LASF16:
 2297 0098 73697A65 		.ascii	"sizetype\000"
 2297      74797065 
 2297      00
 2298              	.LASF41:
 2299 00a1 42415F65 		.ascii	"BA_execute\000"
 2299      78656375 
 2299      746500
 2300              	.LASF28:
 2301 00ac 77726973 		.ascii	"wristRotate_states\000"
 2301      74526F74 
 2301      6174655F 
 2301      73746174 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 52


 2301      657300
 2302              	.LASF63:
 2303 00bf 77697A6E 		.ascii	"wiznet\000"
 2303      657400
 2304              	.LASF6:
 2305 00c6 6C6F6E67 		.ascii	"long long int\000"
 2305      206C6F6E 
 2305      6720696E 
 2305      7400
 2306              	.LASF40:
 2307 00d4 42415F69 		.ascii	"BA_init\000"
 2307      6E697400 
 2308              	.LASF77:
 2309 00dc 62617365 		.ascii	"baseAzimuth_state\000"
 2309      417A696D 
 2309      7574685F 
 2309      73746174 
 2309      6500
 2310              	.LASF74:
 2311 00ee 77726973 		.ascii	"wristTilt_state\000"
 2311      7454696C 
 2311      745F7374 
 2311      61746500 
 2312              	.LASF55:
 2313 00fe 656C626F 		.ascii	"elbow\000"
 2313      7700
 2314              	.LASF10:
 2315 0104 75696E74 		.ascii	"uint16\000"
 2315      313600
 2316              	.LASF67:
 2317 010b 656C6277 		.ascii	"elbw_arr_cspot\000"
 2317      5F617272 
 2317      5F637370 
 2317      6F7400
 2318              	.LASF47:
 2319 011a 77726973 		.ascii	"wristRotate\000"
 2319      74526F74 
 2319      61746500 
 2320              	.LASF12:
 2321 0126 696E7431 		.ascii	"int16\000"
 2321      3600
 2322              	.LASF29:
 2323 012c 726F7461 		.ascii	"rotate_init\000"
 2323      74655F69 
 2323      6E697400 
 2324              	.LASF72:
 2325 0138 74696D65 		.ascii	"timerFlag\000"
 2325      72466C61 
 2325      6700
 2326              	.LASF73:
 2327 0142 73686C64 		.ascii	"shldr_state\000"
 2327      725F7374 
 2327      61746500 
 2328              	.LASF42:
 2329 014e 42415F77 		.ascii	"BA_wait\000"
 2329      61697400 
 2330              	.LASF0:
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 53


 2331 0156 7369676E 		.ascii	"signed char\000"
 2331      65642063 
 2331      68617200 
 2332              	.LASF66:
 2333 0162 74657374 		.ascii	"test_array\000"
 2333      5F617272 
 2333      617900
 2334              	.LASF13:
 2335 016d 666C6F61 		.ascii	"float\000"
 2335      7400
 2336              	.LASF34:
 2337 0173 656C6277 		.ascii	"elbw_start\000"
 2337      5F737461 
 2337      727400
 2338              	.LASF57:
 2339 017e 62617365 		.ascii	"baseAzimuth\000"
 2339      417A696D 
 2339      75746800 
 2340              	.LASF46:
 2341 018a 77726973 		.ascii	"wristTilt\000"
 2341      7454696C 
 2341      7400
 2342              	.LASF31:
 2343 0194 726F7461 		.ascii	"rotate_control\000"
 2343      74655F63 
 2343      6F6E7472 
 2343      6F6C00
 2344              	.LASF4:
 2345 01a3 6C6F6E67 		.ascii	"long int\000"
 2345      20696E74 
 2345      00
 2346              	.LASF38:
 2347 01ac 62617365 		.ascii	"baseAzimuth_states\000"
 2347      417A696D 
 2347      7574685F 
 2347      73746174 
 2347      657300
 2348              	.LASF22:
 2349 01bf 73686C64 		.ascii	"shldr_states\000"
 2349      725F7374 
 2349      61746573 
 2349      00
 2350              	.LASF65:
 2351 01cc 66696E5F 		.ascii	"fin_exec\000"
 2351      65786563 
 2351      00
 2352              	.LASF44:
 2353 01d5 66656564 		.ascii	"feedback\000"
 2353      6261636B 
 2353      00
 2354              	.LASF69:
 2355 01de 42415F61 		.ascii	"BA_arr_cspot\000"
 2355      72725F63 
 2355      73706F74 
 2355      00
 2356              	.LASF24:
 2357 01eb 74696C74 		.ascii	"tilt_init\000"
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 54


 2357      5F696E69 
 2357      7400
 2358              	.LASF9:
 2359 01f5 75696E74 		.ascii	"uint8\000"
 2359      3800
 2360              	.LASF18:
 2361 01fb 73686C64 		.ascii	"shldr_start\000"
 2361      725F7374 
 2361      61727400 
 2362              	.LASF79:
 2363 0207 2E5C6D61 		.ascii	".\\main.c\000"
 2363      696E2E63 
 2363      00
 2364              	.LASF48:
 2365 0210 73656E64 		.ascii	"send_feedback\000"
 2365      5F666565 
 2365      64626163 
 2365      6B00
 2366              	.LASF1:
 2367 021e 756E7369 		.ascii	"unsigned char\000"
 2367      676E6564 
 2367      20636861 
 2367      7200
 2368              	.LASF43:
 2369 022c 6973725F 		.ascii	"isr_var\000"
 2369      76617200 
 2370              	.LASF60:
 2371 0234 636F756E 		.ascii	"counter\000"
 2371      74657200 
 2372              	.LASF61:
 2373 023c 72616E64 		.ascii	"random_number\000"
 2373      6F6D5F6E 
 2373      756D6265 
 2373      7200
 2374              	.LASF27:
 2375 024a 74696C74 		.ascii	"tilt_feedback\000"
 2375      5F666565 
 2375      64626163 
 2375      6B00
 2376              	.LASF20:
 2377 0258 73686C64 		.ascii	"shldr_fdbk\000"
 2377      725F6664 
 2377      626B00
 2378              	.LASF53:
 2379 0263 6E756D5F 		.ascii	"num_items\000"
 2379      6974656D 
 2379      7300
 2380              	.LASF71:
 2381 026d 66656564 		.ascii	"feedback_count\000"
 2381      6261636B 
 2381      5F636F75 
 2381      6E7400
 2382              	.LASF7:
 2383 027c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2383      206C6F6E 
 2383      6720756E 
 2383      7369676E 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 55


 2383      65642069 
 2384              	.LASF8:
 2385 0293 756E7369 		.ascii	"unsigned int\000"
 2385      676E6564 
 2385      20696E74 
 2385      00
 2386              	.LASF5:
 2387 02a0 6C6F6E67 		.ascii	"long unsigned int\000"
 2387      20756E73 
 2387      69676E65 
 2387      6420696E 
 2387      7400
 2388              	.LASF3:
 2389 02b2 73686F72 		.ascii	"short unsigned int\000"
 2389      7420756E 
 2389      7369676E 
 2389      65642069 
 2389      6E7400
 2390              	.LASF23:
 2391 02c5 77726973 		.ascii	"wristTilt_states\000"
 2391      7454696C 
 2391      745F7374 
 2391      61746573 
 2391      00
 2392              	.LASF33:
 2393 02d6 656C626F 		.ascii	"elbow_states\000"
 2393      775F7374 
 2393      61746573 
 2393      00
 2394              	.LASF15:
 2395 02e3 63686172 		.ascii	"char\000"
 2395      00
 2396              	.LASF59:
 2397 02e8 6D61696E 		.ascii	"main\000"
 2397      00
 2398              	.LASF68:
 2399 02ed 656C626F 		.ascii	"elbow_array\000"
 2399      775F6172 
 2399      72617900 
 2400              	.LASF51:
 2401 02f9 6368616E 		.ascii	"channel\000"
 2401      6E656C00 
 2402              	.LASF70:
 2403 0301 62617365 		.ascii	"baseAz_array\000"
 2403      417A5F61 
 2403      72726179 
 2403      00
 2404              	.LASF45:
 2405 030e 73686F75 		.ascii	"shoulder\000"
 2405      6C646572 
 2405      00
 2406              	.LASF11:
 2407 0317 75696E74 		.ascii	"uint32\000"
 2407      333200
 2408              	.LASF21:
 2409 031e 73686C64 		.ascii	"shldr_exe\000"
 2409      725F6578 
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 56


 2409      6500
 2410              	.LASF26:
 2411 0328 74696C74 		.ascii	"tilt_control\000"
 2411      5F636F6E 
 2411      74726F6C 
 2411      00
 2412              	.LASF14:
 2413 0335 646F7562 		.ascii	"double\000"
 2413      6C6500
 2414              	.LASF17:
 2415 033c 74696D65 		.ascii	"time_t\000"
 2415      5F7400
 2416              	.LASF52:
 2417 0343 61727261 		.ascii	"array\000"
 2417      7900
 2418              	.LASF75:
 2419 0349 77726973 		.ascii	"wristRotate_state\000"
 2419      74526F74 
 2419      6174655F 
 2419      73746174 
 2419      6500
 2420              	.LASF49:
 2421 035b 706F7446 		.ascii	"potFeedback\000"
 2421      65656462 
 2421      61636B00 
 2422              	.LASF76:
 2423 0367 656C626F 		.ascii	"elbow_state\000"
 2423      775F7374 
 2423      61746500 
 2424              	.LASF58:
 2425 0373 74696D65 		.ascii	"timer_isr\000"
 2425      725F6973 
 2425      7200
 2426              	.LASF64:
 2427 037d 6E65775F 		.ascii	"new_pack\000"
 2427      7061636B 
 2427      00
 2428              	.LASF78:
 2429 0386 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2429      4320342E 
 2429      382E3420 
 2429      32303134 
 2429      30353236 
 2430 03b9 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2430      20726576 
 2430      6973696F 
 2430      6E203231 
 2430      31333538 
 2431 03ec 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2431      74643D67 
 2431      6E753939 
 2431      202D6666 
 2431      756E6374 
 2432              	.LASF37:
 2433 040d 656C6277 		.ascii	"elbw_wait\000"
 2433      5F776169 
 2433      7400
ARM GAS  C:\Users\JOHNSO~1\AppData\Local\Temp\ccXIi0Yg.s 			page 57


 2434              	.LASF50:
 2435 0417 61766572 		.ascii	"average\000"
 2435      61676500 
 2436              	.LASF62:
 2437 041f 64617461 		.ascii	"data_array\000"
 2437      5F617272 
 2437      617900
 2438              	.LASF56:
 2439 042a 636F6D6D 		.ascii	"command\000"
 2439      616E6400 
 2440              	.LASF36:
 2441 0432 656C6277 		.ascii	"elbw_execute\000"
 2441      5F657865 
 2441      63757465 
 2441      00
 2442              	.LASF32:
 2443 043f 726F7461 		.ascii	"rotate_feedback\000"
 2443      74655F66 
 2443      65656462 
 2443      61636B00 
 2444              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

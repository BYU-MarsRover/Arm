ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,14,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	fin_exec,1,1
  21              		.comm	test_array,14,4
  22              		.comm	elbw_arr_cspot,1,1
  23              		.comm	elbow_array,40,4
  24              		.comm	shldr_arr_cspot,1,1
  25              		.comm	shoulder_array,40,4
  26              		.comm	BA_arr_cspot,1,1
  27              		.comm	baseAz_array,40,4
  28              		.comm	WT_arr_cspot,1,1
  29              		.comm	WT_array,40,4
  30              		.comm	WR_arr_cspot,1,1
  31              		.comm	WR_array,40,4
  32              		.comm	timerFlag,1,1
  33              		.section	.text.timer_isr,"ax",%progbits
  34              		.align	2
  35              		.global	timer_isr
  36              		.code	16
  37              		.thumb_func
  38              		.type	timer_isr, %function
  39              	timer_isr:
  40              	.LFB34:
  41              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
  42              		.loc 1 11 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 2


  47              		.cfi_offset 14, -4
  48 0002 82B0     		sub	sp, sp, #8
  49              		.cfi_def_cfa_offset 16
  50 0004 00AF     		add	r7, sp, #0
  51              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  52              		.loc 1 12 0
  53 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  54 000a 031C     		mov	r3, r0
  55 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
  56              		.loc 1 13 0
  57 000e 054B     		ldr	r3, .L2
  58 0010 0122     		mov	r2, #1
  59 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  60              		.loc 1 14 0
  61 0014 7B68     		ldr	r3, [r7, #4]
  62 0016 181C     		mov	r0, r3
  63 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
  64              		.loc 1 15 0
  65 001c BD46     		mov	sp, r7
  66 001e 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0020 80BD     		pop	{r7, pc}
  69              	.L3:
  70 0022 C046     		.align	2
  71              	.L2:
  72 0024 00000000 		.word	timerFlag
  73              		.cfi_endproc
  74              	.LFE34:
  75              		.size	timer_isr, .-timer_isr
  76              		.global	__aeabi_uidiv
  77              		.section	.text.average,"ax",%progbits
  78              		.align	2
  79              		.global	average
  80              		.code	16
  81              		.thumb_func
  82              		.type	average, %function
  83              	average:
  84              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** //// function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 3


  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
  47:.\main.c      **** 
  48:.\main.c      **** 
  49:.\main.c      **** //Average function to be used in smoothing our input
  50:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
  51:.\main.c      **** {
  85              		.loc 1 51 0
  86              		.cfi_startproc
  87 0000 80B5     		push	{r7, lr}
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 86B0     		sub	sp, sp, #24
  92              		.cfi_def_cfa_offset 32
  93 0004 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  95 0006 7860     		str	r0, [r7, #4]
  96 0008 0A1C     		mov	r2, r1
  97 000a FB1C     		add	r3, r7, #3
  98 000c 1A70     		strb	r2, [r3]
  52:.\main.c      ****     uint8 i;
  53:.\main.c      ****     uint32 sum = 0;
  99              		.loc 1 53 0
 100 000e 0023     		mov	r3, #0
 101 0010 3B61     		str	r3, [r7, #16]
  54:.\main.c      ****     uint16 avg = 0;
 102              		.loc 1 54 0
 103 0012 3B1C     		mov	r3, r7
 104 0014 0E33     		add	r3, r3, #14
 105 0016 0022     		mov	r2, #0
 106 0018 1A80     		strh	r2, [r3]
  55:.\main.c      ****     
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 107              		.loc 1 56 0
 108 001a 3B1C     		mov	r3, r7
 109 001c 1733     		add	r3, r3, #23
 110 001e 0022     		mov	r2, #0
 111 0020 1A70     		strb	r2, [r3]
 112 0022 10E0     		b	.L5
 113              	.L6:
  57:.\main.c      ****     {
  58:.\main.c      ****         sum += av_array[i];
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 4


 114              		.loc 1 58 0 discriminator 2
 115 0024 3B1C     		mov	r3, r7
 116 0026 1733     		add	r3, r3, #23
 117 0028 1B78     		ldrb	r3, [r3]
 118 002a 5B00     		lsl	r3, r3, #1
 119 002c 7A68     		ldr	r2, [r7, #4]
 120 002e D318     		add	r3, r2, r3
 121 0030 1B88     		ldrh	r3, [r3]
 122 0032 3A69     		ldr	r2, [r7, #16]
 123 0034 D318     		add	r3, r2, r3
 124 0036 3B61     		str	r3, [r7, #16]
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 125              		.loc 1 56 0 discriminator 2
 126 0038 3B1C     		mov	r3, r7
 127 003a 1733     		add	r3, r3, #23
 128 003c 1A78     		ldrb	r2, [r3]
 129 003e 3B1C     		mov	r3, r7
 130 0040 1733     		add	r3, r3, #23
 131 0042 0132     		add	r2, r2, #1
 132 0044 1A70     		strb	r2, [r3]
 133              	.L5:
  56:.\main.c      ****     for(i = 0; i < num_items; i++)
 134              		.loc 1 56 0 is_stmt 0 discriminator 1
 135 0046 3A1C     		mov	r2, r7
 136 0048 1732     		add	r2, r2, #23
 137 004a FB1C     		add	r3, r7, #3
 138 004c 1278     		ldrb	r2, [r2]
 139 004e 1B78     		ldrb	r3, [r3]
 140 0050 9A42     		cmp	r2, r3
 141 0052 E7D3     		bcc	.L6
  59:.\main.c      ****     }
  60:.\main.c      ****     
  61:.\main.c      ****     avg = sum/num_items;
 142              		.loc 1 61 0 is_stmt 1
 143 0054 FB1C     		add	r3, r7, #3
 144 0056 1B78     		ldrb	r3, [r3]
 145 0058 3869     		ldr	r0, [r7, #16]
 146 005a 191C     		mov	r1, r3
 147 005c FFF7FEFF 		bl	__aeabi_uidiv
 148 0060 031C     		mov	r3, r0
 149 0062 1A1C     		mov	r2, r3
 150 0064 3B1C     		mov	r3, r7
 151 0066 0E33     		add	r3, r3, #14
 152 0068 1A80     		strh	r2, [r3]
  62:.\main.c      ****     
  63:.\main.c      ****     return avg;
 153              		.loc 1 63 0
 154 006a 3B1C     		mov	r3, r7
 155 006c 0E33     		add	r3, r3, #14
 156 006e 1B88     		ldrh	r3, [r3]
  64:.\main.c      **** }
 157              		.loc 1 64 0
 158 0070 181C     		mov	r0, r3
 159 0072 BD46     		mov	sp, r7
 160 0074 06B0     		add	sp, sp, #24
 161              		@ sp needed
 162 0076 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 5


 163              		.cfi_endproc
 164              	.LFE35:
 165              		.size	average, .-average
 166              		.section	.text.pos_to_vel,"ax",%progbits
 167              		.align	2
 168              		.global	pos_to_vel
 169              		.code	16
 170              		.thumb_func
 171              		.type	pos_to_vel, %function
 172              	pos_to_vel:
 173              	.LFB36:
  65:.\main.c      **** 
  66:.\main.c      **** void pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
  67:.\main.c      **** {
 174              		.loc 1 67 0
 175              		.cfi_startproc
 176 0000 80B5     		push	{r7, lr}
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 7, -8
 179              		.cfi_offset 14, -4
 180 0002 82B0     		sub	sp, sp, #8
 181              		.cfi_def_cfa_offset 16
 182 0004 00AF     		add	r7, sp, #0
 183              		.cfi_def_cfa_register 7
 184 0006 3960     		str	r1, [r7]
 185 0008 111C     		mov	r1, r2
 186 000a 1A1C     		mov	r2, r3
 187 000c FB1D     		add	r3, r7, #7
 188 000e 1870     		strb	r0, [r3]
 189 0010 BB1D     		add	r3, r7, #6
 190 0012 1970     		strb	r1, [r3]
 191 0014 3B1D     		add	r3, r7, #4
 192 0016 1A80     		strh	r2, [r3]
  68:.\main.c      ****     if(command >= 1000 && command < 1100)
 193              		.loc 1 68 0
 194 0018 3B1D     		add	r3, r7, #4
 195 001a 1A88     		ldrh	r2, [r3]
 196 001c C54B     		ldr	r3, .L70
 197 001e 9A42     		cmp	r2, r3
 198 0020 00D8     		bhi	.LCB141
 199 0022 7CE0     		b	.L9	@long jump
 200              	.LCB141:
 201              		.loc 1 68 0 is_stmt 0 discriminator 1
 202 0024 3B1D     		add	r3, r7, #4
 203 0026 1A88     		ldrh	r2, [r3]
 204 0028 C34B     		ldr	r3, .L70+4
 205 002a 9A42     		cmp	r2, r3
 206 002c 00D9     		bls	.LCB146
 207 002e 76E0     		b	.L9	@long jump
 208              	.LCB146:
  69:.\main.c      ****     {
  70:.\main.c      ****         if(cur_pos != 0)
 209              		.loc 1 70 0 is_stmt 1
 210 0030 FB1D     		add	r3, r7, #7
 211 0032 1B78     		ldrb	r3, [r3]
 212 0034 002B     		cmp	r3, #0
 213 0036 34D0     		beq	.L10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 6


  71:.\main.c      ****         {
  72:.\main.c      ****             if(array[cur_pos - 1] >= 1020)
 214              		.loc 1 72 0
 215 0038 FB1D     		add	r3, r7, #7
 216 003a 1B78     		ldrb	r3, [r3]
 217 003c BF49     		ldr	r1, .L70+8
 218 003e 5B18     		add	r3, r3, r1
 219 0040 5B00     		lsl	r3, r3, #1
 220 0042 3A68     		ldr	r2, [r7]
 221 0044 D318     		add	r3, r2, r3
 222 0046 1A88     		ldrh	r2, [r3]
 223 0048 BD4B     		ldr	r3, .L70+12
 224 004a 9A42     		cmp	r2, r3
 225 004c 10D9     		bls	.L11
  73:.\main.c      ****             {
  74:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] - 20);
 226              		.loc 1 74 0
 227 004e FB1D     		add	r3, r7, #7
 228 0050 1B78     		ldrb	r3, [r3]
 229 0052 5B00     		lsl	r3, r3, #1
 230 0054 3A68     		ldr	r2, [r7]
 231 0056 D318     		add	r3, r2, r3
 232 0058 FA1D     		add	r2, r7, #7
 233 005a 1278     		ldrb	r2, [r2]
 234 005c B749     		ldr	r1, .L70+8
 235 005e 5218     		add	r2, r2, r1
 236 0060 5200     		lsl	r2, r2, #1
 237 0062 3968     		ldr	r1, [r7]
 238 0064 8A18     		add	r2, r1, r2
 239 0066 1288     		ldrh	r2, [r2]
 240 0068 143A     		sub	r2, r2, #20
 241 006a 92B2     		uxth	r2, r2
 242 006c 1A80     		strh	r2, [r3]
 243 006e 07E0     		b	.L12
 244              	.L11:
  75:.\main.c      ****             }
  76:.\main.c      ****             else
  77:.\main.c      ****             {
  78:.\main.c      ****                 array[cur_pos] = 1000;
 245              		.loc 1 78 0
 246 0070 FB1D     		add	r3, r7, #7
 247 0072 1B78     		ldrb	r3, [r3]
 248 0074 5B00     		lsl	r3, r3, #1
 249 0076 3A68     		ldr	r2, [r7]
 250 0078 D318     		add	r3, r2, r3
 251 007a FA22     		mov	r2, #250
 252 007c 9200     		lsl	r2, r2, #2
 253 007e 1A80     		strh	r2, [r3]
 254              	.L12:
  79:.\main.c      ****             }
  80:.\main.c      ****             
  81:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 255              		.loc 1 81 0
 256 0080 FB1D     		add	r3, r7, #7
 257 0082 1A78     		ldrb	r2, [r3]
 258 0084 BB1D     		add	r3, r7, #6
 259 0086 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 7


 260 0088 013B     		sub	r3, r3, #1
 261 008a 9A42     		cmp	r2, r3
 262 008c 05DA     		bge	.L13
  82:.\main.c      ****             {
  83:.\main.c      ****                 cur_pos++;
 263              		.loc 1 83 0
 264 008e FB1D     		add	r3, r7, #7
 265 0090 1A78     		ldrb	r2, [r3]
 266 0092 FB1D     		add	r3, r7, #7
 267 0094 0132     		add	r2, r2, #1
 268 0096 1A70     		strb	r2, [r3]
 269 0098 40E0     		b	.L15
 270              	.L13:
  84:.\main.c      ****             }
  85:.\main.c      ****             else
  86:.\main.c      ****             {
  87:.\main.c      ****                 cur_pos = 0;
 271              		.loc 1 87 0
 272 009a FB1D     		add	r3, r7, #7
 273 009c 0022     		mov	r2, #0
 274 009e 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 275              		.loc 1 70 0
 276 00a0 60E2     		b	.L8
 277              	.L10:
  88:.\main.c      ****             }
  89:.\main.c      ****         }
  90:.\main.c      ****         else if(cur_pos == 0)
 278              		.loc 1 90 0
 279 00a2 FB1D     		add	r3, r7, #7
 280 00a4 1B78     		ldrb	r3, [r3]
 281 00a6 002B     		cmp	r3, #0
 282 00a8 34D1     		bne	.L16
  91:.\main.c      ****         {
  92:.\main.c      ****             if(array[ARRAY_SIZE - 1] >= 1020)
 283              		.loc 1 92 0
 284 00aa BB1D     		add	r3, r7, #6
 285 00ac 1B78     		ldrb	r3, [r3]
 286 00ae A34A     		ldr	r2, .L70+8
 287 00b0 9B18     		add	r3, r3, r2
 288 00b2 5B00     		lsl	r3, r3, #1
 289 00b4 3A68     		ldr	r2, [r7]
 290 00b6 D318     		add	r3, r2, r3
 291 00b8 1A88     		ldrh	r2, [r3]
 292 00ba A14B     		ldr	r3, .L70+12
 293 00bc 9A42     		cmp	r2, r3
 294 00be 10D9     		bls	.L17
  93:.\main.c      ****             {
  94:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] - 20);
 295              		.loc 1 94 0
 296 00c0 FB1D     		add	r3, r7, #7
 297 00c2 1B78     		ldrb	r3, [r3]
 298 00c4 5B00     		lsl	r3, r3, #1
 299 00c6 3A68     		ldr	r2, [r7]
 300 00c8 D318     		add	r3, r2, r3
 301 00ca BA1D     		add	r2, r7, #6
 302 00cc 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 8


 303 00ce 9B49     		ldr	r1, .L70+8
 304 00d0 5218     		add	r2, r2, r1
 305 00d2 5200     		lsl	r2, r2, #1
 306 00d4 3968     		ldr	r1, [r7]
 307 00d6 8A18     		add	r2, r1, r2
 308 00d8 1288     		ldrh	r2, [r2]
 309 00da 143A     		sub	r2, r2, #20
 310 00dc 92B2     		uxth	r2, r2
 311 00de 1A80     		strh	r2, [r3]
 312 00e0 07E0     		b	.L18
 313              	.L17:
  95:.\main.c      ****             }
  96:.\main.c      ****             else
  97:.\main.c      ****             {
  98:.\main.c      ****                 array[cur_pos] = 1000;
 314              		.loc 1 98 0
 315 00e2 FB1D     		add	r3, r7, #7
 316 00e4 1B78     		ldrb	r3, [r3]
 317 00e6 5B00     		lsl	r3, r3, #1
 318 00e8 3A68     		ldr	r2, [r7]
 319 00ea D318     		add	r3, r2, r3
 320 00ec FA22     		mov	r2, #250
 321 00ee 9200     		lsl	r2, r2, #2
 322 00f0 1A80     		strh	r2, [r3]
 323              	.L18:
  99:.\main.c      ****             }
 100:.\main.c      ****             
 101:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 324              		.loc 1 101 0
 325 00f2 FB1D     		add	r3, r7, #7
 326 00f4 1A78     		ldrb	r2, [r3]
 327 00f6 BB1D     		add	r3, r7, #6
 328 00f8 1B78     		ldrb	r3, [r3]
 329 00fa 013B     		sub	r3, r3, #1
 330 00fc 9A42     		cmp	r2, r3
 331 00fe 05DA     		bge	.L19
 102:.\main.c      ****             {
 103:.\main.c      ****                 cur_pos++;
 332              		.loc 1 103 0
 333 0100 FB1D     		add	r3, r7, #7
 334 0102 1A78     		ldrb	r2, [r3]
 335 0104 FB1D     		add	r3, r7, #7
 336 0106 0132     		add	r2, r2, #1
 337 0108 1A70     		strb	r2, [r3]
 338 010a 07E0     		b	.L15
 339              	.L19:
 104:.\main.c      ****             }
 105:.\main.c      ****             else
 106:.\main.c      ****             {
 107:.\main.c      ****                 cur_pos = 0;
 340              		.loc 1 107 0
 341 010c FB1D     		add	r3, r7, #7
 342 010e 0022     		mov	r2, #0
 343 0110 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 344              		.loc 1 70 0
 345 0112 27E2     		b	.L8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 9


 346              	.L16:
 108:.\main.c      ****             }
 109:.\main.c      ****         }
 110:.\main.c      ****         else
 111:.\main.c      ****         {
 112:.\main.c      ****             cur_pos = 0;
 347              		.loc 1 112 0
 348 0114 FB1D     		add	r3, r7, #7
 349 0116 0022     		mov	r2, #0
 350 0118 1A70     		strb	r2, [r3]
  70:.\main.c      ****         if(cur_pos != 0)
 351              		.loc 1 70 0
 352 011a 23E2     		b	.L8
 353              	.L15:
 354 011c 22E2     		b	.L8
 355              	.L9:
 113:.\main.c      ****         }
 114:.\main.c      ****     }
 115:.\main.c      ****     else if(command >= 1100 && command < 1300)
 356              		.loc 1 115 0
 357 011e 3B1D     		add	r3, r7, #4
 358 0120 1A88     		ldrh	r2, [r3]
 359 0122 854B     		ldr	r3, .L70+4
 360 0124 9A42     		cmp	r2, r3
 361 0126 53D9     		bls	.L22
 362              		.loc 1 115 0 is_stmt 0 discriminator 1
 363 0128 3B1D     		add	r3, r7, #4
 364 012a 1A88     		ldrh	r2, [r3]
 365 012c 854B     		ldr	r3, .L70+16
 366 012e 9A42     		cmp	r2, r3
 367 0130 4ED8     		bhi	.L22
 116:.\main.c      ****     {
 117:.\main.c      ****         if(cur_pos != 0)
 368              		.loc 1 117 0 is_stmt 1
 369 0132 FB1D     		add	r3, r7, #7
 370 0134 1B78     		ldrb	r3, [r3]
 371 0136 002B     		cmp	r3, #0
 372 0138 20D0     		beq	.L23
 118:.\main.c      ****         {
 119:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 10);
 373              		.loc 1 119 0
 374 013a FB1D     		add	r3, r7, #7
 375 013c 1B78     		ldrb	r3, [r3]
 376 013e 5B00     		lsl	r3, r3, #1
 377 0140 3A68     		ldr	r2, [r7]
 378 0142 D318     		add	r3, r2, r3
 379 0144 FA1D     		add	r2, r7, #7
 380 0146 1278     		ldrb	r2, [r2]
 381 0148 7C49     		ldr	r1, .L70+8
 382 014a 5218     		add	r2, r2, r1
 383 014c 5200     		lsl	r2, r2, #1
 384 014e 3968     		ldr	r1, [r7]
 385 0150 8A18     		add	r2, r1, r2
 386 0152 1288     		ldrh	r2, [r2]
 387 0154 0A3A     		sub	r2, r2, #10
 388 0156 92B2     		uxth	r2, r2
 389 0158 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 10


 120:.\main.c      ****             
 121:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 390              		.loc 1 121 0
 391 015a FB1D     		add	r3, r7, #7
 392 015c 1A78     		ldrb	r2, [r3]
 393 015e BB1D     		add	r3, r7, #6
 394 0160 1B78     		ldrb	r3, [r3]
 395 0162 013B     		sub	r3, r3, #1
 396 0164 9A42     		cmp	r2, r3
 397 0166 05DA     		bge	.L24
 122:.\main.c      ****             {
 123:.\main.c      ****                 cur_pos++;
 398              		.loc 1 123 0
 399 0168 FB1D     		add	r3, r7, #7
 400 016a 1A78     		ldrb	r2, [r3]
 401 016c FB1D     		add	r3, r7, #7
 402 016e 0132     		add	r2, r2, #1
 403 0170 1A70     		strb	r2, [r3]
 404 0172 2CE0     		b	.L26
 405              	.L24:
 124:.\main.c      ****             }
 125:.\main.c      ****             else
 126:.\main.c      ****             {
 127:.\main.c      ****                 cur_pos = 0;
 406              		.loc 1 127 0
 407 0174 FB1D     		add	r3, r7, #7
 408 0176 0022     		mov	r2, #0
 409 0178 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 410              		.loc 1 117 0
 411 017a F3E1     		b	.L8
 412              	.L23:
 128:.\main.c      ****             }
 129:.\main.c      ****         }
 130:.\main.c      ****         else if(cur_pos == 0)
 413              		.loc 1 130 0
 414 017c FB1D     		add	r3, r7, #7
 415 017e 1B78     		ldrb	r3, [r3]
 416 0180 002B     		cmp	r3, #0
 417 0182 20D1     		bne	.L27
 131:.\main.c      ****         {
 132:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 10);
 418              		.loc 1 132 0
 419 0184 FB1D     		add	r3, r7, #7
 420 0186 1B78     		ldrb	r3, [r3]
 421 0188 5B00     		lsl	r3, r3, #1
 422 018a 3A68     		ldr	r2, [r7]
 423 018c D318     		add	r3, r2, r3
 424 018e BA1D     		add	r2, r7, #6
 425 0190 1278     		ldrb	r2, [r2]
 426 0192 6A49     		ldr	r1, .L70+8
 427 0194 5218     		add	r2, r2, r1
 428 0196 5200     		lsl	r2, r2, #1
 429 0198 3968     		ldr	r1, [r7]
 430 019a 8A18     		add	r2, r1, r2
 431 019c 1288     		ldrh	r2, [r2]
 432 019e 0A3A     		sub	r2, r2, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 11


 433 01a0 92B2     		uxth	r2, r2
 434 01a2 1A80     		strh	r2, [r3]
 133:.\main.c      ****            
 134:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 435              		.loc 1 134 0
 436 01a4 FB1D     		add	r3, r7, #7
 437 01a6 1A78     		ldrb	r2, [r3]
 438 01a8 BB1D     		add	r3, r7, #6
 439 01aa 1B78     		ldrb	r3, [r3]
 440 01ac 013B     		sub	r3, r3, #1
 441 01ae 9A42     		cmp	r2, r3
 442 01b0 05DA     		bge	.L28
 135:.\main.c      ****             {
 136:.\main.c      ****                 cur_pos++;
 443              		.loc 1 136 0
 444 01b2 FB1D     		add	r3, r7, #7
 445 01b4 1A78     		ldrb	r2, [r3]
 446 01b6 FB1D     		add	r3, r7, #7
 447 01b8 0132     		add	r2, r2, #1
 448 01ba 1A70     		strb	r2, [r3]
 449 01bc 07E0     		b	.L26
 450              	.L28:
 137:.\main.c      ****             }
 138:.\main.c      ****             else
 139:.\main.c      ****             {
 140:.\main.c      ****                 cur_pos = 0;
 451              		.loc 1 140 0
 452 01be FB1D     		add	r3, r7, #7
 453 01c0 0022     		mov	r2, #0
 454 01c2 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 455              		.loc 1 117 0
 456 01c4 CEE1     		b	.L8
 457              	.L27:
 141:.\main.c      ****             }
 142:.\main.c      ****         }
 143:.\main.c      ****         else
 144:.\main.c      ****         {
 145:.\main.c      ****             cur_pos = 0;   
 458              		.loc 1 145 0
 459 01c6 FB1D     		add	r3, r7, #7
 460 01c8 0022     		mov	r2, #0
 461 01ca 1A70     		strb	r2, [r3]
 117:.\main.c      ****         if(cur_pos != 0)
 462              		.loc 1 117 0
 463 01cc CAE1     		b	.L8
 464              	.L26:
 465 01ce C9E1     		b	.L8
 466              	.L22:
 146:.\main.c      ****         }    
 147:.\main.c      ****     }
 148:.\main.c      ****     else if(command >= 1300 && command < 1490)
 467              		.loc 1 148 0
 468 01d0 3B1D     		add	r3, r7, #4
 469 01d2 1A88     		ldrh	r2, [r3]
 470 01d4 5B4B     		ldr	r3, .L70+16
 471 01d6 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 12


 472 01d8 53D9     		bls	.L30
 473              		.loc 1 148 0 is_stmt 0 discriminator 1
 474 01da 3B1D     		add	r3, r7, #4
 475 01dc 1A88     		ldrh	r2, [r3]
 476 01de 5A4B     		ldr	r3, .L70+20
 477 01e0 9A42     		cmp	r2, r3
 478 01e2 4ED8     		bhi	.L30
 149:.\main.c      ****     {
 150:.\main.c      ****         if(cur_pos != 0)
 479              		.loc 1 150 0 is_stmt 1
 480 01e4 FB1D     		add	r3, r7, #7
 481 01e6 1B78     		ldrb	r3, [r3]
 482 01e8 002B     		cmp	r3, #0
 483 01ea 20D0     		beq	.L31
 151:.\main.c      ****         {
 152:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] - 5);
 484              		.loc 1 152 0
 485 01ec FB1D     		add	r3, r7, #7
 486 01ee 1B78     		ldrb	r3, [r3]
 487 01f0 5B00     		lsl	r3, r3, #1
 488 01f2 3A68     		ldr	r2, [r7]
 489 01f4 D318     		add	r3, r2, r3
 490 01f6 FA1D     		add	r2, r7, #7
 491 01f8 1278     		ldrb	r2, [r2]
 492 01fa 5049     		ldr	r1, .L70+8
 493 01fc 5218     		add	r2, r2, r1
 494 01fe 5200     		lsl	r2, r2, #1
 495 0200 3968     		ldr	r1, [r7]
 496 0202 8A18     		add	r2, r1, r2
 497 0204 1288     		ldrh	r2, [r2]
 498 0206 053A     		sub	r2, r2, #5
 499 0208 92B2     		uxth	r2, r2
 500 020a 1A80     		strh	r2, [r3]
 153:.\main.c      ****             
 154:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 501              		.loc 1 154 0
 502 020c FB1D     		add	r3, r7, #7
 503 020e 1A78     		ldrb	r2, [r3]
 504 0210 BB1D     		add	r3, r7, #6
 505 0212 1B78     		ldrb	r3, [r3]
 506 0214 013B     		sub	r3, r3, #1
 507 0216 9A42     		cmp	r2, r3
 508 0218 05DA     		bge	.L32
 155:.\main.c      ****             {
 156:.\main.c      ****                 cur_pos++;
 509              		.loc 1 156 0
 510 021a FB1D     		add	r3, r7, #7
 511 021c 1A78     		ldrb	r2, [r3]
 512 021e FB1D     		add	r3, r7, #7
 513 0220 0132     		add	r2, r2, #1
 514 0222 1A70     		strb	r2, [r3]
 515 0224 2CE0     		b	.L34
 516              	.L32:
 157:.\main.c      ****             }
 158:.\main.c      ****             else
 159:.\main.c      ****             {
 160:.\main.c      ****                 cur_pos = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 13


 517              		.loc 1 160 0
 518 0226 FB1D     		add	r3, r7, #7
 519 0228 0022     		mov	r2, #0
 520 022a 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 521              		.loc 1 150 0
 522 022c 9AE1     		b	.L8
 523              	.L31:
 161:.\main.c      ****             }
 162:.\main.c      ****         }
 163:.\main.c      ****         else if(cur_pos == 0)
 524              		.loc 1 163 0
 525 022e FB1D     		add	r3, r7, #7
 526 0230 1B78     		ldrb	r3, [r3]
 527 0232 002B     		cmp	r3, #0
 528 0234 20D1     		bne	.L35
 164:.\main.c      ****         {
 165:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] - 5);
 529              		.loc 1 165 0
 530 0236 FB1D     		add	r3, r7, #7
 531 0238 1B78     		ldrb	r3, [r3]
 532 023a 5B00     		lsl	r3, r3, #1
 533 023c 3A68     		ldr	r2, [r7]
 534 023e D318     		add	r3, r2, r3
 535 0240 BA1D     		add	r2, r7, #6
 536 0242 1278     		ldrb	r2, [r2]
 537 0244 3D49     		ldr	r1, .L70+8
 538 0246 5218     		add	r2, r2, r1
 539 0248 5200     		lsl	r2, r2, #1
 540 024a 3968     		ldr	r1, [r7]
 541 024c 8A18     		add	r2, r1, r2
 542 024e 1288     		ldrh	r2, [r2]
 543 0250 053A     		sub	r2, r2, #5
 544 0252 92B2     		uxth	r2, r2
 545 0254 1A80     		strh	r2, [r3]
 166:.\main.c      ****            
 167:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 546              		.loc 1 167 0
 547 0256 FB1D     		add	r3, r7, #7
 548 0258 1A78     		ldrb	r2, [r3]
 549 025a BB1D     		add	r3, r7, #6
 550 025c 1B78     		ldrb	r3, [r3]
 551 025e 013B     		sub	r3, r3, #1
 552 0260 9A42     		cmp	r2, r3
 553 0262 05DA     		bge	.L36
 168:.\main.c      ****             {
 169:.\main.c      ****                 cur_pos++;
 554              		.loc 1 169 0
 555 0264 FB1D     		add	r3, r7, #7
 556 0266 1A78     		ldrb	r2, [r3]
 557 0268 FB1D     		add	r3, r7, #7
 558 026a 0132     		add	r2, r2, #1
 559 026c 1A70     		strb	r2, [r3]
 560 026e 07E0     		b	.L34
 561              	.L36:
 170:.\main.c      ****             }
 171:.\main.c      ****             else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 14


 172:.\main.c      ****             {
 173:.\main.c      ****                 cur_pos = 0;
 562              		.loc 1 173 0
 563 0270 FB1D     		add	r3, r7, #7
 564 0272 0022     		mov	r2, #0
 565 0274 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 566              		.loc 1 150 0
 567 0276 75E1     		b	.L8
 568              	.L35:
 174:.\main.c      ****             }
 175:.\main.c      ****         }
 176:.\main.c      ****         else
 177:.\main.c      ****         {
 178:.\main.c      ****             cur_pos = 0;   
 569              		.loc 1 178 0
 570 0278 FB1D     		add	r3, r7, #7
 571 027a 0022     		mov	r2, #0
 572 027c 1A70     		strb	r2, [r3]
 150:.\main.c      ****         if(cur_pos != 0)
 573              		.loc 1 150 0
 574 027e 71E1     		b	.L8
 575              	.L34:
 576 0280 70E1     		b	.L8
 577              	.L30:
 179:.\main.c      ****         }    
 180:.\main.c      ****     }
 181:.\main.c      ****     else if(command > 1510 && command <= 1700)
 578              		.loc 1 181 0
 579 0282 3B1D     		add	r3, r7, #4
 580 0284 1A88     		ldrh	r2, [r3]
 581 0286 314B     		ldr	r3, .L70+24
 582 0288 9A42     		cmp	r2, r3
 583 028a 63D9     		bls	.L38
 584              		.loc 1 181 0 is_stmt 0 discriminator 1
 585 028c 3B1D     		add	r3, r7, #4
 586 028e 1A88     		ldrh	r2, [r3]
 587 0290 2F4B     		ldr	r3, .L70+28
 588 0292 9A42     		cmp	r2, r3
 589 0294 5ED8     		bhi	.L38
 182:.\main.c      ****     {
 183:.\main.c      ****         if(cur_pos != 0)
 590              		.loc 1 183 0 is_stmt 1
 591 0296 FB1D     		add	r3, r7, #7
 592 0298 1B78     		ldrb	r3, [r3]
 593 029a 002B     		cmp	r3, #0
 594 029c 20D0     		beq	.L39
 184:.\main.c      ****         {
 185:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 5);
 595              		.loc 1 185 0
 596 029e FB1D     		add	r3, r7, #7
 597 02a0 1B78     		ldrb	r3, [r3]
 598 02a2 5B00     		lsl	r3, r3, #1
 599 02a4 3A68     		ldr	r2, [r7]
 600 02a6 D318     		add	r3, r2, r3
 601 02a8 FA1D     		add	r2, r7, #7
 602 02aa 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 15


 603 02ac 2349     		ldr	r1, .L70+8
 604 02ae 5218     		add	r2, r2, r1
 605 02b0 5200     		lsl	r2, r2, #1
 606 02b2 3968     		ldr	r1, [r7]
 607 02b4 8A18     		add	r2, r1, r2
 608 02b6 1288     		ldrh	r2, [r2]
 609 02b8 0532     		add	r2, r2, #5
 610 02ba 92B2     		uxth	r2, r2
 611 02bc 1A80     		strh	r2, [r3]
 186:.\main.c      ****             
 187:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 612              		.loc 1 187 0
 613 02be FB1D     		add	r3, r7, #7
 614 02c0 1A78     		ldrb	r2, [r3]
 615 02c2 BB1D     		add	r3, r7, #6
 616 02c4 1B78     		ldrb	r3, [r3]
 617 02c6 013B     		sub	r3, r3, #1
 618 02c8 9A42     		cmp	r2, r3
 619 02ca 05DA     		bge	.L40
 188:.\main.c      ****             {
 189:.\main.c      ****                 cur_pos++;
 620              		.loc 1 189 0
 621 02cc FB1D     		add	r3, r7, #7
 622 02ce 1A78     		ldrb	r2, [r3]
 623 02d0 FB1D     		add	r3, r7, #7
 624 02d2 0132     		add	r2, r2, #1
 625 02d4 1A70     		strb	r2, [r3]
 626 02d6 2CE0     		b	.L42
 627              	.L40:
 190:.\main.c      ****             }
 191:.\main.c      ****             else
 192:.\main.c      ****             {
 193:.\main.c      ****                 cur_pos = 0;
 628              		.loc 1 193 0
 629 02d8 FB1D     		add	r3, r7, #7
 630 02da 0022     		mov	r2, #0
 631 02dc 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 632              		.loc 1 183 0
 633 02de 41E1     		b	.L8
 634              	.L39:
 194:.\main.c      ****             }
 195:.\main.c      ****         }
 196:.\main.c      ****         else if(cur_pos == 0)
 635              		.loc 1 196 0
 636 02e0 FB1D     		add	r3, r7, #7
 637 02e2 1B78     		ldrb	r3, [r3]
 638 02e4 002B     		cmp	r3, #0
 639 02e6 20D1     		bne	.L43
 197:.\main.c      ****         {
 198:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 5);
 640              		.loc 1 198 0
 641 02e8 FB1D     		add	r3, r7, #7
 642 02ea 1B78     		ldrb	r3, [r3]
 643 02ec 5B00     		lsl	r3, r3, #1
 644 02ee 3A68     		ldr	r2, [r7]
 645 02f0 D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 16


 646 02f2 BA1D     		add	r2, r7, #6
 647 02f4 1278     		ldrb	r2, [r2]
 648 02f6 1149     		ldr	r1, .L70+8
 649 02f8 5218     		add	r2, r2, r1
 650 02fa 5200     		lsl	r2, r2, #1
 651 02fc 3968     		ldr	r1, [r7]
 652 02fe 8A18     		add	r2, r1, r2
 653 0300 1288     		ldrh	r2, [r2]
 654 0302 0532     		add	r2, r2, #5
 655 0304 92B2     		uxth	r2, r2
 656 0306 1A80     		strh	r2, [r3]
 199:.\main.c      ****            
 200:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 657              		.loc 1 200 0
 658 0308 FB1D     		add	r3, r7, #7
 659 030a 1A78     		ldrb	r2, [r3]
 660 030c BB1D     		add	r3, r7, #6
 661 030e 1B78     		ldrb	r3, [r3]
 662 0310 013B     		sub	r3, r3, #1
 663 0312 9A42     		cmp	r2, r3
 664 0314 05DA     		bge	.L44
 201:.\main.c      ****             {
 202:.\main.c      ****                 cur_pos++;
 665              		.loc 1 202 0
 666 0316 FB1D     		add	r3, r7, #7
 667 0318 1A78     		ldrb	r2, [r3]
 668 031a FB1D     		add	r3, r7, #7
 669 031c 0132     		add	r2, r2, #1
 670 031e 1A70     		strb	r2, [r3]
 671 0320 07E0     		b	.L42
 672              	.L44:
 203:.\main.c      ****             }
 204:.\main.c      ****             else
 205:.\main.c      ****             {
 206:.\main.c      ****                 cur_pos = 0;
 673              		.loc 1 206 0
 674 0322 FB1D     		add	r3, r7, #7
 675 0324 0022     		mov	r2, #0
 676 0326 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 677              		.loc 1 183 0
 678 0328 1CE1     		b	.L8
 679              	.L43:
 207:.\main.c      ****             }
 208:.\main.c      ****         }
 209:.\main.c      ****         else
 210:.\main.c      ****         {
 211:.\main.c      ****             cur_pos = 0;   
 680              		.loc 1 211 0
 681 032a FB1D     		add	r3, r7, #7
 682 032c 0022     		mov	r2, #0
 683 032e 1A70     		strb	r2, [r3]
 183:.\main.c      ****         if(cur_pos != 0)
 684              		.loc 1 183 0
 685 0330 18E1     		b	.L8
 686              	.L42:
 687 0332 17E1     		b	.L8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 17


 688              	.L71:
 689              		.align	2
 690              	.L70:
 691 0334 E7030000 		.word	999
 692 0338 4B040000 		.word	1099
 693 033c FFFFFF7F 		.word	2147483647
 694 0340 FB030000 		.word	1019
 695 0344 13050000 		.word	1299
 696 0348 D1050000 		.word	1489
 697 034c E6050000 		.word	1510
 698 0350 A4060000 		.word	1700
 699              	.L38:
 212:.\main.c      ****         }    
 213:.\main.c      ****     }
 214:.\main.c      ****     else if(command > 1700 && command <= 1900)
 700              		.loc 1 214 0
 701 0354 3B1D     		add	r3, r7, #4
 702 0356 1A88     		ldrh	r2, [r3]
 703 0358 844B     		ldr	r3, .L72
 704 035a 9A42     		cmp	r2, r3
 705 035c 53D9     		bls	.L46
 706              		.loc 1 214 0 is_stmt 0 discriminator 1
 707 035e 3B1D     		add	r3, r7, #4
 708 0360 1A88     		ldrh	r2, [r3]
 709 0362 834B     		ldr	r3, .L72+4
 710 0364 9A42     		cmp	r2, r3
 711 0366 4ED8     		bhi	.L46
 215:.\main.c      ****     {
 216:.\main.c      ****         if(cur_pos != 0)
 712              		.loc 1 216 0 is_stmt 1
 713 0368 FB1D     		add	r3, r7, #7
 714 036a 1B78     		ldrb	r3, [r3]
 715 036c 002B     		cmp	r3, #0
 716 036e 20D0     		beq	.L47
 217:.\main.c      ****         {
 218:.\main.c      ****             array[cur_pos] = (array[cur_pos - 1] + 10);
 717              		.loc 1 218 0
 718 0370 FB1D     		add	r3, r7, #7
 719 0372 1B78     		ldrb	r3, [r3]
 720 0374 5B00     		lsl	r3, r3, #1
 721 0376 3A68     		ldr	r2, [r7]
 722 0378 D318     		add	r3, r2, r3
 723 037a FA1D     		add	r2, r7, #7
 724 037c 1278     		ldrb	r2, [r2]
 725 037e 7D49     		ldr	r1, .L72+8
 726 0380 5218     		add	r2, r2, r1
 727 0382 5200     		lsl	r2, r2, #1
 728 0384 3968     		ldr	r1, [r7]
 729 0386 8A18     		add	r2, r1, r2
 730 0388 1288     		ldrh	r2, [r2]
 731 038a 0A32     		add	r2, r2, #10
 732 038c 92B2     		uxth	r2, r2
 733 038e 1A80     		strh	r2, [r3]
 219:.\main.c      ****             
 220:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 734              		.loc 1 220 0
 735 0390 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 18


 736 0392 1A78     		ldrb	r2, [r3]
 737 0394 BB1D     		add	r3, r7, #6
 738 0396 1B78     		ldrb	r3, [r3]
 739 0398 013B     		sub	r3, r3, #1
 740 039a 9A42     		cmp	r2, r3
 741 039c 05DA     		bge	.L48
 221:.\main.c      ****             {
 222:.\main.c      ****                 cur_pos++;
 742              		.loc 1 222 0
 743 039e FB1D     		add	r3, r7, #7
 744 03a0 1A78     		ldrb	r2, [r3]
 745 03a2 FB1D     		add	r3, r7, #7
 746 03a4 0132     		add	r2, r2, #1
 747 03a6 1A70     		strb	r2, [r3]
 748 03a8 2CE0     		b	.L50
 749              	.L48:
 223:.\main.c      ****             }
 224:.\main.c      ****             else
 225:.\main.c      ****             {
 226:.\main.c      ****                 cur_pos = 0;
 750              		.loc 1 226 0
 751 03aa FB1D     		add	r3, r7, #7
 752 03ac 0022     		mov	r2, #0
 753 03ae 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 754              		.loc 1 216 0
 755 03b0 D8E0     		b	.L8
 756              	.L47:
 227:.\main.c      ****             }
 228:.\main.c      ****         }
 229:.\main.c      ****         else if(cur_pos == 0)
 757              		.loc 1 229 0
 758 03b2 FB1D     		add	r3, r7, #7
 759 03b4 1B78     		ldrb	r3, [r3]
 760 03b6 002B     		cmp	r3, #0
 761 03b8 20D1     		bne	.L51
 230:.\main.c      ****         {
 231:.\main.c      ****             array[cur_pos] = (array[ARRAY_SIZE - 1] + 10);
 762              		.loc 1 231 0
 763 03ba FB1D     		add	r3, r7, #7
 764 03bc 1B78     		ldrb	r3, [r3]
 765 03be 5B00     		lsl	r3, r3, #1
 766 03c0 3A68     		ldr	r2, [r7]
 767 03c2 D318     		add	r3, r2, r3
 768 03c4 BA1D     		add	r2, r7, #6
 769 03c6 1278     		ldrb	r2, [r2]
 770 03c8 6A49     		ldr	r1, .L72+8
 771 03ca 5218     		add	r2, r2, r1
 772 03cc 5200     		lsl	r2, r2, #1
 773 03ce 3968     		ldr	r1, [r7]
 774 03d0 8A18     		add	r2, r1, r2
 775 03d2 1288     		ldrh	r2, [r2]
 776 03d4 0A32     		add	r2, r2, #10
 777 03d6 92B2     		uxth	r2, r2
 778 03d8 1A80     		strh	r2, [r3]
 232:.\main.c      ****            
 233:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 19


 779              		.loc 1 233 0
 780 03da FB1D     		add	r3, r7, #7
 781 03dc 1A78     		ldrb	r2, [r3]
 782 03de BB1D     		add	r3, r7, #6
 783 03e0 1B78     		ldrb	r3, [r3]
 784 03e2 013B     		sub	r3, r3, #1
 785 03e4 9A42     		cmp	r2, r3
 786 03e6 05DA     		bge	.L52
 234:.\main.c      ****             {
 235:.\main.c      ****                 cur_pos++;
 787              		.loc 1 235 0
 788 03e8 FB1D     		add	r3, r7, #7
 789 03ea 1A78     		ldrb	r2, [r3]
 790 03ec FB1D     		add	r3, r7, #7
 791 03ee 0132     		add	r2, r2, #1
 792 03f0 1A70     		strb	r2, [r3]
 793 03f2 07E0     		b	.L50
 794              	.L52:
 236:.\main.c      ****             }
 237:.\main.c      ****             else
 238:.\main.c      ****             {
 239:.\main.c      ****                 cur_pos = 0;
 795              		.loc 1 239 0
 796 03f4 FB1D     		add	r3, r7, #7
 797 03f6 0022     		mov	r2, #0
 798 03f8 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 799              		.loc 1 216 0
 800 03fa B3E0     		b	.L8
 801              	.L51:
 240:.\main.c      ****             }
 241:.\main.c      ****         }
 242:.\main.c      ****         else
 243:.\main.c      ****         {
 244:.\main.c      ****             cur_pos = 0;   
 802              		.loc 1 244 0
 803 03fc FB1D     		add	r3, r7, #7
 804 03fe 0022     		mov	r2, #0
 805 0400 1A70     		strb	r2, [r3]
 216:.\main.c      ****         if(cur_pos != 0)
 806              		.loc 1 216 0
 807 0402 AFE0     		b	.L8
 808              	.L50:
 809 0404 AEE0     		b	.L8
 810              	.L46:
 245:.\main.c      ****         }
 246:.\main.c      ****     }
 247:.\main.c      ****     else if(command > 1900 && command <= 2000)
 811              		.loc 1 247 0
 812 0406 3B1D     		add	r3, r7, #4
 813 0408 1A88     		ldrh	r2, [r3]
 814 040a 594B     		ldr	r3, .L72+4
 815 040c 9A42     		cmp	r2, r3
 816 040e 00D8     		bhi	.LCB739
 817 0410 7DE0     		b	.L54	@long jump
 818              	.LCB739:
 819              		.loc 1 247 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 20


 820 0412 3B1D     		add	r3, r7, #4
 821 0414 1A88     		ldrh	r2, [r3]
 822 0416 FA23     		mov	r3, #250
 823 0418 DB00     		lsl	r3, r3, #3
 824 041a 9A42     		cmp	r2, r3
 825 041c 00D9     		bls	.LCB745
 826 041e 76E0     		b	.L54	@long jump
 827              	.LCB745:
 248:.\main.c      ****     {
 249:.\main.c      ****         if(cur_pos != 0)
 828              		.loc 1 249 0 is_stmt 1
 829 0420 FB1D     		add	r3, r7, #7
 830 0422 1B78     		ldrb	r3, [r3]
 831 0424 002B     		cmp	r3, #0
 832 0426 34D0     		beq	.L55
 250:.\main.c      ****         {
 251:.\main.c      ****             if(array[cur_pos - 1] <= 1980)
 833              		.loc 1 251 0
 834 0428 FB1D     		add	r3, r7, #7
 835 042a 1B78     		ldrb	r3, [r3]
 836 042c 514A     		ldr	r2, .L72+8
 837 042e 9B18     		add	r3, r3, r2
 838 0430 5B00     		lsl	r3, r3, #1
 839 0432 3A68     		ldr	r2, [r7]
 840 0434 D318     		add	r3, r2, r3
 841 0436 1A88     		ldrh	r2, [r3]
 842 0438 4F4B     		ldr	r3, .L72+12
 843 043a 9A42     		cmp	r2, r3
 844 043c 10D8     		bhi	.L56
 252:.\main.c      ****             {
 253:.\main.c      ****                 array[cur_pos] = (array[cur_pos - 1] + 20);
 845              		.loc 1 253 0
 846 043e FB1D     		add	r3, r7, #7
 847 0440 1B78     		ldrb	r3, [r3]
 848 0442 5B00     		lsl	r3, r3, #1
 849 0444 3A68     		ldr	r2, [r7]
 850 0446 D318     		add	r3, r2, r3
 851 0448 FA1D     		add	r2, r7, #7
 852 044a 1278     		ldrb	r2, [r2]
 853 044c 4949     		ldr	r1, .L72+8
 854 044e 5218     		add	r2, r2, r1
 855 0450 5200     		lsl	r2, r2, #1
 856 0452 3968     		ldr	r1, [r7]
 857 0454 8A18     		add	r2, r1, r2
 858 0456 1288     		ldrh	r2, [r2]
 859 0458 1432     		add	r2, r2, #20
 860 045a 92B2     		uxth	r2, r2
 861 045c 1A80     		strh	r2, [r3]
 862 045e 07E0     		b	.L57
 863              	.L56:
 254:.\main.c      ****             }
 255:.\main.c      ****             else
 256:.\main.c      ****             {
 257:.\main.c      ****                 array[cur_pos] = 2000;
 864              		.loc 1 257 0
 865 0460 FB1D     		add	r3, r7, #7
 866 0462 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 21


 867 0464 5B00     		lsl	r3, r3, #1
 868 0466 3A68     		ldr	r2, [r7]
 869 0468 D318     		add	r3, r2, r3
 870 046a FA22     		mov	r2, #250
 871 046c D200     		lsl	r2, r2, #3
 872 046e 1A80     		strh	r2, [r3]
 873              	.L57:
 258:.\main.c      ****             }
 259:.\main.c      ****             
 260:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 874              		.loc 1 260 0
 875 0470 FB1D     		add	r3, r7, #7
 876 0472 1A78     		ldrb	r2, [r3]
 877 0474 BB1D     		add	r3, r7, #6
 878 0476 1B78     		ldrb	r3, [r3]
 879 0478 013B     		sub	r3, r3, #1
 880 047a 9A42     		cmp	r2, r3
 881 047c 05DA     		bge	.L58
 261:.\main.c      ****             {
 262:.\main.c      ****                 cur_pos++;
 882              		.loc 1 262 0
 883 047e FB1D     		add	r3, r7, #7
 884 0480 1A78     		ldrb	r2, [r3]
 885 0482 FB1D     		add	r3, r7, #7
 886 0484 0132     		add	r2, r2, #1
 887 0486 1A70     		strb	r2, [r3]
 888 0488 40E0     		b	.L60
 889              	.L58:
 263:.\main.c      ****             }
 264:.\main.c      ****             else
 265:.\main.c      ****             {
 266:.\main.c      ****                 cur_pos = 0;
 890              		.loc 1 266 0
 891 048a FB1D     		add	r3, r7, #7
 892 048c 0022     		mov	r2, #0
 893 048e 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 894              		.loc 1 249 0
 895 0490 68E0     		b	.L8
 896              	.L55:
 267:.\main.c      ****             }
 268:.\main.c      ****         }
 269:.\main.c      ****         else if(cur_pos == 0)
 897              		.loc 1 269 0
 898 0492 FB1D     		add	r3, r7, #7
 899 0494 1B78     		ldrb	r3, [r3]
 900 0496 002B     		cmp	r3, #0
 901 0498 34D1     		bne	.L61
 270:.\main.c      ****         {
 271:.\main.c      ****             if(array[ARRAY_SIZE - 1] <= 1980)
 902              		.loc 1 271 0
 903 049a BB1D     		add	r3, r7, #6
 904 049c 1B78     		ldrb	r3, [r3]
 905 049e 354A     		ldr	r2, .L72+8
 906 04a0 9B18     		add	r3, r3, r2
 907 04a2 5B00     		lsl	r3, r3, #1
 908 04a4 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 22


 909 04a6 D318     		add	r3, r2, r3
 910 04a8 1A88     		ldrh	r2, [r3]
 911 04aa 334B     		ldr	r3, .L72+12
 912 04ac 9A42     		cmp	r2, r3
 913 04ae 10D8     		bhi	.L62
 272:.\main.c      ****             {
 273:.\main.c      ****                 array[cur_pos] = (array[ARRAY_SIZE - 1] + 20);
 914              		.loc 1 273 0
 915 04b0 FB1D     		add	r3, r7, #7
 916 04b2 1B78     		ldrb	r3, [r3]
 917 04b4 5B00     		lsl	r3, r3, #1
 918 04b6 3A68     		ldr	r2, [r7]
 919 04b8 D318     		add	r3, r2, r3
 920 04ba BA1D     		add	r2, r7, #6
 921 04bc 1278     		ldrb	r2, [r2]
 922 04be 2D49     		ldr	r1, .L72+8
 923 04c0 5218     		add	r2, r2, r1
 924 04c2 5200     		lsl	r2, r2, #1
 925 04c4 3968     		ldr	r1, [r7]
 926 04c6 8A18     		add	r2, r1, r2
 927 04c8 1288     		ldrh	r2, [r2]
 928 04ca 1432     		add	r2, r2, #20
 929 04cc 92B2     		uxth	r2, r2
 930 04ce 1A80     		strh	r2, [r3]
 931 04d0 07E0     		b	.L63
 932              	.L62:
 274:.\main.c      ****             }
 275:.\main.c      ****             else
 276:.\main.c      ****             {
 277:.\main.c      ****                 array[cur_pos] = 2000;
 933              		.loc 1 277 0
 934 04d2 FB1D     		add	r3, r7, #7
 935 04d4 1B78     		ldrb	r3, [r3]
 936 04d6 5B00     		lsl	r3, r3, #1
 937 04d8 3A68     		ldr	r2, [r7]
 938 04da D318     		add	r3, r2, r3
 939 04dc FA22     		mov	r2, #250
 940 04de D200     		lsl	r2, r2, #3
 941 04e0 1A80     		strh	r2, [r3]
 942              	.L63:
 278:.\main.c      ****             }
 279:.\main.c      ****             
 280:.\main.c      ****             if(cur_pos < (ARRAY_SIZE - 1))
 943              		.loc 1 280 0
 944 04e2 FB1D     		add	r3, r7, #7
 945 04e4 1A78     		ldrb	r2, [r3]
 946 04e6 BB1D     		add	r3, r7, #6
 947 04e8 1B78     		ldrb	r3, [r3]
 948 04ea 013B     		sub	r3, r3, #1
 949 04ec 9A42     		cmp	r2, r3
 950 04ee 05DA     		bge	.L64
 281:.\main.c      ****             {
 282:.\main.c      ****                 cur_pos++;
 951              		.loc 1 282 0
 952 04f0 FB1D     		add	r3, r7, #7
 953 04f2 1A78     		ldrb	r2, [r3]
 954 04f4 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 23


 955 04f6 0132     		add	r2, r2, #1
 956 04f8 1A70     		strb	r2, [r3]
 957 04fa 07E0     		b	.L60
 958              	.L64:
 283:.\main.c      ****             }
 284:.\main.c      ****             else
 285:.\main.c      ****             {
 286:.\main.c      ****                 cur_pos = 0;
 959              		.loc 1 286 0
 960 04fc FB1D     		add	r3, r7, #7
 961 04fe 0022     		mov	r2, #0
 962 0500 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 963              		.loc 1 249 0
 964 0502 2FE0     		b	.L8
 965              	.L61:
 287:.\main.c      ****             }
 288:.\main.c      ****         }
 289:.\main.c      ****         else
 290:.\main.c      ****         {
 291:.\main.c      ****             cur_pos = 0;
 966              		.loc 1 291 0
 967 0504 FB1D     		add	r3, r7, #7
 968 0506 0022     		mov	r2, #0
 969 0508 1A70     		strb	r2, [r3]
 249:.\main.c      ****         if(cur_pos != 0)
 970              		.loc 1 249 0
 971 050a 2BE0     		b	.L8
 972              	.L60:
 973 050c 2AE0     		b	.L8
 974              	.L54:
 292:.\main.c      ****         }
 293:.\main.c      ****     }
 294:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 975              		.loc 1 294 0
 976 050e 3B1D     		add	r3, r7, #4
 977 0510 1A88     		ldrh	r2, [r3]
 978 0512 1A4B     		ldr	r3, .L72+16
 979 0514 9A42     		cmp	r2, r3
 980 0516 15D8     		bhi	.L66
 981              		.loc 1 294 0 is_stmt 0 discriminator 1
 982 0518 3B1D     		add	r3, r7, #4
 983 051a 1A88     		ldrh	r2, [r3]
 984 051c 184B     		ldr	r3, .L72+20
 985 051e 9A42     		cmp	r2, r3
 986 0520 10D9     		bls	.L66
 295:.\main.c      ****     {
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 987              		.loc 1 296 0 is_stmt 1
 988 0522 FB1D     		add	r3, r7, #7
 989 0524 1A78     		ldrb	r2, [r3]
 990 0526 BB1D     		add	r3, r7, #6
 991 0528 1B78     		ldrb	r3, [r3]
 992 052a 013B     		sub	r3, r3, #1
 993 052c 9A42     		cmp	r2, r3
 994 052e 05DA     		bge	.L67
 297:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 24


 298:.\main.c      ****             cur_pos++;
 995              		.loc 1 298 0
 996 0530 FB1D     		add	r3, r7, #7
 997 0532 1A78     		ldrb	r2, [r3]
 998 0534 FB1D     		add	r3, r7, #7
 999 0536 0132     		add	r2, r2, #1
 1000 0538 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1001              		.loc 1 296 0
 1002 053a 13E0     		b	.L8
 1003              	.L67:
 299:.\main.c      ****         }
 300:.\main.c      ****         else
 301:.\main.c      ****         {
 302:.\main.c      ****             cur_pos = 0;
 1004              		.loc 1 302 0
 1005 053c FB1D     		add	r3, r7, #7
 1006 053e 0022     		mov	r2, #0
 1007 0540 1A70     		strb	r2, [r3]
 296:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1008              		.loc 1 296 0
 1009 0542 0FE0     		b	.L8
 1010              	.L66:
 303:.\main.c      ****         }
 304:.\main.c      ****     }
 305:.\main.c      ****     else
 306:.\main.c      ****     {
 307:.\main.c      ****         //throw error
 308:.\main.c      ****         if(cur_pos < (ARRAY_SIZE - 1))
 1011              		.loc 1 308 0
 1012 0544 FB1D     		add	r3, r7, #7
 1013 0546 1A78     		ldrb	r2, [r3]
 1014 0548 BB1D     		add	r3, r7, #6
 1015 054a 1B78     		ldrb	r3, [r3]
 1016 054c 013B     		sub	r3, r3, #1
 1017 054e 9A42     		cmp	r2, r3
 1018 0550 05DA     		bge	.L69
 309:.\main.c      ****         {
 310:.\main.c      ****             cur_pos++;
 1019              		.loc 1 310 0
 1020 0552 FB1D     		add	r3, r7, #7
 1021 0554 1A78     		ldrb	r2, [r3]
 1022 0556 FB1D     		add	r3, r7, #7
 1023 0558 0132     		add	r2, r2, #1
 1024 055a 1A70     		strb	r2, [r3]
 1025 055c 02E0     		b	.L8
 1026              	.L69:
 311:.\main.c      ****         }
 312:.\main.c      ****         else
 313:.\main.c      ****         {
 314:.\main.c      ****             cur_pos = 0;
 1027              		.loc 1 314 0
 1028 055e FB1D     		add	r3, r7, #7
 1029 0560 0022     		mov	r2, #0
 1030 0562 1A70     		strb	r2, [r3]
 1031              	.L8:
 315:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 25


 316:.\main.c      ****     }
 317:.\main.c      **** }
 1032              		.loc 1 317 0
 1033 0564 BD46     		mov	sp, r7
 1034 0566 02B0     		add	sp, sp, #8
 1035              		@ sp needed
 1036 0568 80BD     		pop	{r7, pc}
 1037              	.L73:
 1038 056a C046     		.align	2
 1039              	.L72:
 1040 056c A4060000 		.word	1700
 1041 0570 6C070000 		.word	1900
 1042 0574 FFFFFF7F 		.word	2147483647
 1043 0578 BC070000 		.word	1980
 1044 057c E6050000 		.word	1510
 1045 0580 D1050000 		.word	1489
 1046              		.cfi_endproc
 1047              	.LFE36:
 1048              		.size	pos_to_vel, .-pos_to_vel
 1049              		.section	.text.make_command,"ax",%progbits
 1050              		.align	2
 1051              		.global	make_command
 1052              		.code	16
 1053              		.thumb_func
 1054              		.type	make_command, %function
 1055              	make_command:
 1056              	.LFB37:
 318:.\main.c      **** 
 319:.\main.c      **** void make_command(uint16* act_array, uint8 act_cspot, int8* info_array, uint8 byte1, uint8 byte2)
 320:.\main.c      **** {
 1057              		.loc 1 320 0
 1058              		.cfi_startproc
 1059 0000 80B5     		push	{r7, lr}
 1060              		.cfi_def_cfa_offset 8
 1061              		.cfi_offset 7, -8
 1062              		.cfi_offset 14, -4
 1063 0002 86B0     		sub	sp, sp, #24
 1064              		.cfi_def_cfa_offset 32
 1065 0004 00AF     		add	r7, sp, #0
 1066              		.cfi_def_cfa_register 7
 1067 0006 F860     		str	r0, [r7, #12]
 1068 0008 7A60     		str	r2, [r7, #4]
 1069 000a 1A1C     		mov	r2, r3
 1070 000c 3B1C     		mov	r3, r7
 1071 000e 0B33     		add	r3, r3, #11
 1072 0010 1970     		strb	r1, [r3]
 1073 0012 3B1C     		mov	r3, r7
 1074 0014 0A33     		add	r3, r3, #10
 1075 0016 1A70     		strb	r2, [r3]
 321:.\main.c      ****     int16 command;
 322:.\main.c      ****     int16 temp1;
 323:.\main.c      ****     int16 temp2;
 324:.\main.c      ****     int16 temp3;
 325:.\main.c      ****     
 326:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1076              		.loc 1 326 0
 1077 0018 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 26


 1078 001a 0A33     		add	r3, r3, #10
 1079 001c 1B78     		ldrb	r3, [r3]
 1080 001e 7A68     		ldr	r2, [r7, #4]
 1081 0020 D318     		add	r3, r2, r3
 1082 0022 1B78     		ldrb	r3, [r3]
 1083 0024 5BB2     		sxtb	r3, r3
 1084 0026 1A02     		lsl	r2, r3, #8
 1085 0028 3B1C     		mov	r3, r7
 1086 002a 1633     		add	r3, r3, #22
 1087 002c 1A80     		strh	r2, [r3]
 327:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1088              		.loc 1 327 0
 1089 002e 3B1C     		mov	r3, r7
 1090 0030 2033     		add	r3, r3, #32
 1091 0032 1B78     		ldrb	r3, [r3]
 1092 0034 7A68     		ldr	r2, [r7, #4]
 1093 0036 D318     		add	r3, r2, r3
 1094 0038 1B78     		ldrb	r3, [r3]
 1095 003a 5BB2     		sxtb	r3, r3
 1096 003c 9AB2     		uxth	r2, r3
 1097 003e 3B1C     		mov	r3, r7
 1098 0040 1433     		add	r3, r3, #20
 1099 0042 111C     		add	r1, r2, #0
 1100 0044 FF22     		mov	r2, #255
 1101 0046 0A40     		and	r2, r1
 1102 0048 1A80     		strh	r2, [r3]
 328:.\main.c      ****     temp3 = temp1 | temp2;
 1103              		.loc 1 328 0
 1104 004a 3B1C     		mov	r3, r7
 1105 004c 1233     		add	r3, r3, #18
 1106 004e 391C     		mov	r1, r7
 1107 0050 1631     		add	r1, r1, #22
 1108 0052 3A1C     		mov	r2, r7
 1109 0054 1432     		add	r2, r2, #20
 1110 0056 0988     		ldrh	r1, [r1]
 1111 0058 1288     		ldrh	r2, [r2]
 1112 005a 0A43     		orr	r2, r1
 1113 005c 1A80     		strh	r2, [r3]
 329:.\main.c      ****     command = temp3/2 + 1500;
 1114              		.loc 1 329 0
 1115 005e 3B1C     		mov	r3, r7
 1116 0060 1233     		add	r3, r3, #18
 1117 0062 0022     		mov	r2, #0
 1118 0064 9B5E     		ldrsh	r3, [r3, r2]
 1119 0066 002B     		cmp	r3, #0
 1120 0068 00DA     		bge	.L75
 1121 006a 0133     		add	r3, r3, #1
 1122              	.L75:
 1123 006c 5B10     		asr	r3, r3, #1
 1124 006e 9BB2     		uxth	r3, r3
 1125 0070 9BB2     		uxth	r3, r3
 1126 0072 094A     		ldr	r2, .L76
 1127 0074 9B18     		add	r3, r3, r2
 1128 0076 9AB2     		uxth	r2, r3
 1129 0078 3B1C     		mov	r3, r7
 1130 007a 1033     		add	r3, r3, #16
 1131 007c 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 27


 330:.\main.c      ****     act_array[act_cspot] = command;
 1132              		.loc 1 330 0
 1133 007e 3B1C     		mov	r3, r7
 1134 0080 0B33     		add	r3, r3, #11
 1135 0082 1B78     		ldrb	r3, [r3]
 1136 0084 5B00     		lsl	r3, r3, #1
 1137 0086 FA68     		ldr	r2, [r7, #12]
 1138 0088 D318     		add	r3, r2, r3
 1139 008a 3A1C     		mov	r2, r7
 1140 008c 1032     		add	r2, r2, #16
 1141 008e 1288     		ldrh	r2, [r2]
 1142 0090 1A80     		strh	r2, [r3]
 331:.\main.c      **** }
 1143              		.loc 1 331 0
 1144 0092 BD46     		mov	sp, r7
 1145 0094 06B0     		add	sp, sp, #24
 1146              		@ sp needed
 1147 0096 80BD     		pop	{r7, pc}
 1148              	.L77:
 1149              		.align	2
 1150              	.L76:
 1151 0098 DC050000 		.word	1500
 1152              		.cfi_endproc
 1153              	.LFE37:
 1154              		.size	make_command, .-make_command
 1155              		.section	.text.potFeedback,"ax",%progbits
 1156              		.align	2
 1157              		.global	potFeedback
 1158              		.code	16
 1159              		.thumb_func
 1160              		.type	potFeedback, %function
 1161              	potFeedback:
 1162              	.LFB38:
 332:.\main.c      **** 
 333:.\main.c      **** uint16 potFeedback(uint32 channel)
 334:.\main.c      **** {
 1163              		.loc 1 334 0
 1164              		.cfi_startproc
 1165 0000 80B5     		push	{r7, lr}
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 7, -8
 1168              		.cfi_offset 14, -4
 1169 0002 84B0     		sub	sp, sp, #16
 1170              		.cfi_def_cfa_offset 24
 1171 0004 00AF     		add	r7, sp, #0
 1172              		.cfi_def_cfa_register 7
 1173 0006 7860     		str	r0, [r7, #4]
 335:.\main.c      ****     //uint16 feedback = ADC_GetResult16(channel);
 336:.\main.c      ****     uint16 feedback = 500;
 1174              		.loc 1 336 0
 1175 0008 3B1C     		mov	r3, r7
 1176 000a 0E33     		add	r3, r3, #14
 1177 000c FA22     		mov	r2, #250
 1178 000e 5200     		lsl	r2, r2, #1
 1179 0010 1A80     		strh	r2, [r3]
 337:.\main.c      ****     return feedback;
 1180              		.loc 1 337 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 28


 1181 0012 3B1C     		mov	r3, r7
 1182 0014 0E33     		add	r3, r3, #14
 1183 0016 1B88     		ldrh	r3, [r3]
 338:.\main.c      **** }
 1184              		.loc 1 338 0
 1185 0018 181C     		mov	r0, r3
 1186 001a BD46     		mov	sp, r7
 1187 001c 04B0     		add	sp, sp, #16
 1188              		@ sp needed
 1189 001e 80BD     		pop	{r7, pc}
 1190              		.cfi_endproc
 1191              	.LFE38:
 1192              		.size	potFeedback, .-potFeedback
 1193              		.section	.text.send_feedback,"ax",%progbits
 1194              		.align	2
 1195              		.global	send_feedback
 1196              		.code	16
 1197              		.thumb_func
 1198              		.type	send_feedback, %function
 1199              	send_feedback:
 1200              	.LFB39:
 339:.\main.c      **** 
 340:.\main.c      **** void send_feedback()
 341:.\main.c      **** {
 1201              		.loc 1 341 0
 1202              		.cfi_startproc
 1203 0000 80B5     		push	{r7, lr}
 1204              		.cfi_def_cfa_offset 8
 1205              		.cfi_offset 7, -8
 1206              		.cfi_offset 14, -4
 1207 0002 00AF     		add	r7, sp, #0
 1208              		.cfi_def_cfa_register 7
 342:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 343:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 344:.\main.c      ****     //TODO define system state
 345:.\main.c      ****     //send packet via serial to wiznet
 346:.\main.c      **** }
 1209              		.loc 1 346 0
 1210 0004 BD46     		mov	sp, r7
 1211              		@ sp needed
 1212 0006 80BD     		pop	{r7, pc}
 1213              		.cfi_endproc
 1214              	.LFE39:
 1215              		.size	send_feedback, .-send_feedback
 1216              		.section	.text.fill_data_array,"ax",%progbits
 1217              		.align	2
 1218              		.global	fill_data_array
 1219              		.code	16
 1220              		.thumb_func
 1221              		.type	fill_data_array, %function
 1222              	fill_data_array:
 1223              	.LFB40:
 347:.\main.c      **** 
 348:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 349:.\main.c      **** void fill_data_array()
 350:.\main.c      **** {
 1224              		.loc 1 350 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 29


 1225              		.cfi_startproc
 1226 0000 80B5     		push	{r7, lr}
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 7, -8
 1229              		.cfi_offset 14, -4
 1230 0002 82B0     		sub	sp, sp, #8
 1231              		.cfi_def_cfa_offset 16
 1232 0004 00AF     		add	r7, sp, #0
 1233              		.cfi_def_cfa_register 7
 351:.\main.c      ****    // wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 352:.\main.c      ****     uint8 i = 0;
 1234              		.loc 1 352 0
 1235 0006 FB1D     		add	r3, r7, #7
 1236 0008 0022     		mov	r2, #0
 1237 000a 1A70     		strb	r2, [r3]
 353:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 1238              		.loc 1 353 0
 1239 000c FB1D     		add	r3, r7, #7
 1240 000e 0022     		mov	r2, #0
 1241 0010 1A70     		strb	r2, [r3]
 1242 0012 0CE0     		b	.L82
 1243              	.L83:
 354:.\main.c      ****     {
 355:.\main.c      ****         data_array[i] = test_array[i];
 1244              		.loc 1 355 0 discriminator 2
 1245 0014 FB1D     		add	r3, r7, #7
 1246 0016 1B78     		ldrb	r3, [r3]
 1247 0018 FA1D     		add	r2, r7, #7
 1248 001a 1278     		ldrb	r2, [r2]
 1249 001c 0749     		ldr	r1, .L84
 1250 001e 895C     		ldrb	r1, [r1, r2]
 1251 0020 074A     		ldr	r2, .L84+4
 1252 0022 D154     		strb	r1, [r2, r3]
 353:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 1253              		.loc 1 353 0 discriminator 2
 1254 0024 FB1D     		add	r3, r7, #7
 1255 0026 1A78     		ldrb	r2, [r3]
 1256 0028 FB1D     		add	r3, r7, #7
 1257 002a 0132     		add	r2, r2, #1
 1258 002c 1A70     		strb	r2, [r3]
 1259              	.L82:
 353:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 1260              		.loc 1 353 0 is_stmt 0 discriminator 1
 1261 002e FB1D     		add	r3, r7, #7
 1262 0030 1B78     		ldrb	r3, [r3]
 1263 0032 0D2B     		cmp	r3, #13
 1264 0034 EED9     		bls	.L83
 356:.\main.c      ****     }
 357:.\main.c      **** }
 1265              		.loc 1 357 0 is_stmt 1
 1266 0036 BD46     		mov	sp, r7
 1267 0038 02B0     		add	sp, sp, #8
 1268              		@ sp needed
 1269 003a 80BD     		pop	{r7, pc}
 1270              	.L85:
 1271              		.align	2
 1272              	.L84:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 30


 1273 003c 00000000 		.word	test_array
 1274 0040 00000000 		.word	data_array
 1275              		.cfi_endproc
 1276              	.LFE40:
 1277              		.size	fill_data_array, .-fill_data_array
 1278              		.section	.text.ServoGoalPosition,"ax",%progbits
 1279              		.align	2
 1280              		.global	ServoGoalPosition
 1281              		.code	16
 1282              		.thumb_func
 1283              		.type	ServoGoalPosition, %function
 1284              	ServoGoalPosition:
 1285              	.LFB41:
 358:.\main.c      **** 
 359:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 360:.\main.c      **** {
 1286              		.loc 1 360 0
 1287              		.cfi_startproc
 1288 0000 80B5     		push	{r7, lr}
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 86B0     		sub	sp, sp, #24
 1293              		.cfi_def_cfa_offset 32
 1294 0004 00AF     		add	r7, sp, #0
 1295              		.cfi_def_cfa_register 7
 1296 0006 0A1C     		mov	r2, r1
 1297 0008 FB1D     		add	r3, r7, #7
 1298 000a 011C     		add	r1, r0, #0
 1299 000c 1970     		strb	r1, [r3]
 1300 000e 3B1D     		add	r3, r7, #4
 1301 0010 1A80     		strh	r2, [r3]
 361:.\main.c      ****     uint8 array[9];
 362:.\main.c      ****     
 363:.\main.c      ****     array[0] = 0xFF;
 1302              		.loc 1 363 0
 1303 0012 3B1C     		mov	r3, r7
 1304 0014 0C33     		add	r3, r3, #12
 1305 0016 FF22     		mov	r2, #255
 1306 0018 1A70     		strb	r2, [r3]
 364:.\main.c      ****     array[1] = 0xFF;
 1307              		.loc 1 364 0
 1308 001a 3B1C     		mov	r3, r7
 1309 001c 0C33     		add	r3, r3, #12
 1310 001e FF22     		mov	r2, #255
 1311 0020 5A70     		strb	r2, [r3, #1]
 365:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1312              		.loc 1 365 0
 1313 0022 3B1C     		mov	r3, r7
 1314 0024 0C33     		add	r3, r3, #12
 1315 0026 FA1D     		add	r2, r7, #7
 1316 0028 1278     		ldrb	r2, [r2]
 1317 002a 9A70     		strb	r2, [r3, #2]
 366:.\main.c      ****     array[3] = 0x05;
 1318              		.loc 1 366 0
 1319 002c 3B1C     		mov	r3, r7
 1320 002e 0C33     		add	r3, r3, #12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 31


 1321 0030 0522     		mov	r2, #5
 1322 0032 DA70     		strb	r2, [r3, #3]
 367:.\main.c      ****     array[4] = 0x03; //write instruction
 1323              		.loc 1 367 0
 1324 0034 3B1C     		mov	r3, r7
 1325 0036 0C33     		add	r3, r3, #12
 1326 0038 0322     		mov	r2, #3
 1327 003a 1A71     		strb	r2, [r3, #4]
 368:.\main.c      ****     array[5] = 0x1E;
 1328              		.loc 1 368 0
 1329 003c 3B1C     		mov	r3, r7
 1330 003e 0C33     		add	r3, r3, #12
 1331 0040 1E22     		mov	r2, #30
 1332 0042 5A71     		strb	r2, [r3, #5]
 369:.\main.c      ****     array[6] = position;
 1333              		.loc 1 369 0
 1334 0044 3B1D     		add	r3, r7, #4
 1335 0046 1B88     		ldrh	r3, [r3]
 1336 0048 DAB2     		uxtb	r2, r3
 1337 004a 3B1C     		mov	r3, r7
 1338 004c 0C33     		add	r3, r3, #12
 1339 004e 9A71     		strb	r2, [r3, #6]
 370:.\main.c      ****     array[7] = position >> 8;
 1340              		.loc 1 370 0
 1341 0050 3B1D     		add	r3, r7, #4
 1342 0052 1B88     		ldrh	r3, [r3]
 1343 0054 1B0A     		lsr	r3, r3, #8
 1344 0056 9BB2     		uxth	r3, r3
 1345 0058 DAB2     		uxtb	r2, r3
 1346 005a 3B1C     		mov	r3, r7
 1347 005c 0C33     		add	r3, r3, #12
 1348 005e DA71     		strb	r2, [r3, #7]
 371:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1349              		.loc 1 371 0
 1350 0060 3B1C     		mov	r3, r7
 1351 0062 0C33     		add	r3, r3, #12
 1352 0064 9A79     		ldrb	r2, [r3, #6]
 1353 0066 FB1D     		add	r3, r7, #7
 1354 0068 1B78     		ldrb	r3, [r3]
 1355 006a D318     		add	r3, r2, r3
 1356 006c DAB2     		uxtb	r2, r3
 1357 006e 3B1C     		mov	r3, r7
 1358 0070 0C33     		add	r3, r3, #12
 1359 0072 DB79     		ldrb	r3, [r3, #7]
 1360 0074 D318     		add	r3, r2, r3
 1361 0076 DBB2     		uxtb	r3, r3
 1362 0078 2633     		add	r3, r3, #38
 1363 007a DBB2     		uxtb	r3, r3
 1364 007c DB43     		mvn	r3, r3
 1365 007e DAB2     		uxtb	r2, r3
 1366 0080 3B1C     		mov	r3, r7
 1367 0082 0C33     		add	r3, r3, #12
 1368 0084 1A72     		strb	r2, [r3, #8]
 372:.\main.c      ****     
 373:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1369              		.loc 1 373 0
 1370 0086 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 32


 1371 0088 0C33     		add	r3, r3, #12
 1372 008a 181C     		mov	r0, r3
 1373 008c 0921     		mov	r1, #9
 1374 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 374:.\main.c      **** }
 1375              		.loc 1 374 0
 1376 0092 BD46     		mov	sp, r7
 1377 0094 06B0     		add	sp, sp, #24
 1378              		@ sp needed
 1379 0096 80BD     		pop	{r7, pc}
 1380              		.cfi_endproc
 1381              	.LFE41:
 1382              		.size	ServoGoalPosition, .-ServoGoalPosition
 1383              		.section	.text.SetServoTorque,"ax",%progbits
 1384              		.align	2
 1385              		.global	SetServoTorque
 1386              		.code	16
 1387              		.thumb_func
 1388              		.type	SetServoTorque, %function
 1389              	SetServoTorque:
 1390              	.LFB42:
 375:.\main.c      **** 
 376:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 377:.\main.c      **** {
 1391              		.loc 1 377 0
 1392              		.cfi_startproc
 1393 0000 80B5     		push	{r7, lr}
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397 0002 86B0     		sub	sp, sp, #24
 1398              		.cfi_def_cfa_offset 32
 1399 0004 00AF     		add	r7, sp, #0
 1400              		.cfi_def_cfa_register 7
 1401 0006 0A1C     		mov	r2, r1
 1402 0008 FB1D     		add	r3, r7, #7
 1403 000a 011C     		add	r1, r0, #0
 1404 000c 1970     		strb	r1, [r3]
 1405 000e 3B1D     		add	r3, r7, #4
 1406 0010 1A80     		strh	r2, [r3]
 378:.\main.c      ****     uint8 array[9];
 379:.\main.c      ****     
 380:.\main.c      ****     array[0] = 0xFF;
 1407              		.loc 1 380 0
 1408 0012 3B1C     		mov	r3, r7
 1409 0014 0C33     		add	r3, r3, #12
 1410 0016 FF22     		mov	r2, #255
 1411 0018 1A70     		strb	r2, [r3]
 381:.\main.c      ****     array[1] = 0xFF;
 1412              		.loc 1 381 0
 1413 001a 3B1C     		mov	r3, r7
 1414 001c 0C33     		add	r3, r3, #12
 1415 001e FF22     		mov	r2, #255
 1416 0020 5A70     		strb	r2, [r3, #1]
 382:.\main.c      ****     array[2] = servoID; 
 1417              		.loc 1 382 0
 1418 0022 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 33


 1419 0024 0C33     		add	r3, r3, #12
 1420 0026 FA1D     		add	r2, r7, #7
 1421 0028 1278     		ldrb	r2, [r2]
 1422 002a 9A70     		strb	r2, [r3, #2]
 383:.\main.c      ****     array[3] = 0x05;
 1423              		.loc 1 383 0
 1424 002c 3B1C     		mov	r3, r7
 1425 002e 0C33     		add	r3, r3, #12
 1426 0030 0522     		mov	r2, #5
 1427 0032 DA70     		strb	r2, [r3, #3]
 384:.\main.c      ****     array[4] = 0x03; //write instruction
 1428              		.loc 1 384 0
 1429 0034 3B1C     		mov	r3, r7
 1430 0036 0C33     		add	r3, r3, #12
 1431 0038 0322     		mov	r2, #3
 1432 003a 1A71     		strb	r2, [r3, #4]
 385:.\main.c      ****     array[5] = 0x0E;
 1433              		.loc 1 385 0
 1434 003c 3B1C     		mov	r3, r7
 1435 003e 0C33     		add	r3, r3, #12
 1436 0040 0E22     		mov	r2, #14
 1437 0042 5A71     		strb	r2, [r3, #5]
 386:.\main.c      ****     array[6] = torque;
 1438              		.loc 1 386 0
 1439 0044 3B1D     		add	r3, r7, #4
 1440 0046 1B88     		ldrh	r3, [r3]
 1441 0048 DAB2     		uxtb	r2, r3
 1442 004a 3B1C     		mov	r3, r7
 1443 004c 0C33     		add	r3, r3, #12
 1444 004e 9A71     		strb	r2, [r3, #6]
 387:.\main.c      ****     array[7] = torque >> 8;
 1445              		.loc 1 387 0
 1446 0050 3B1D     		add	r3, r7, #4
 1447 0052 1B88     		ldrh	r3, [r3]
 1448 0054 1B0A     		lsr	r3, r3, #8
 1449 0056 9BB2     		uxth	r3, r3
 1450 0058 DAB2     		uxtb	r2, r3
 1451 005a 3B1C     		mov	r3, r7
 1452 005c 0C33     		add	r3, r3, #12
 1453 005e DA71     		strb	r2, [r3, #7]
 388:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1454              		.loc 1 388 0
 1455 0060 3B1C     		mov	r3, r7
 1456 0062 0C33     		add	r3, r3, #12
 1457 0064 9A79     		ldrb	r2, [r3, #6]
 1458 0066 FB1D     		add	r3, r7, #7
 1459 0068 1B78     		ldrb	r3, [r3]
 1460 006a D318     		add	r3, r2, r3
 1461 006c DAB2     		uxtb	r2, r3
 1462 006e 3B1C     		mov	r3, r7
 1463 0070 0C33     		add	r3, r3, #12
 1464 0072 DB79     		ldrb	r3, [r3, #7]
 1465 0074 D318     		add	r3, r2, r3
 1466 0076 DBB2     		uxtb	r3, r3
 1467 0078 1633     		add	r3, r3, #22
 1468 007a DBB2     		uxtb	r3, r3
 1469 007c DB43     		mvn	r3, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 34


 1470 007e DAB2     		uxtb	r2, r3
 1471 0080 3B1C     		mov	r3, r7
 1472 0082 0C33     		add	r3, r3, #12
 1473 0084 1A72     		strb	r2, [r3, #8]
 389:.\main.c      ****     
 390:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1474              		.loc 1 390 0
 1475 0086 3B1C     		mov	r3, r7
 1476 0088 0C33     		add	r3, r3, #12
 1477 008a 181C     		mov	r0, r3
 1478 008c 0921     		mov	r1, #9
 1479 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 391:.\main.c      ****     
 392:.\main.c      **** }    
 1480              		.loc 1 392 0
 1481 0092 BD46     		mov	sp, r7
 1482 0094 06B0     		add	sp, sp, #24
 1483              		@ sp needed
 1484 0096 80BD     		pop	{r7, pc}
 1485              		.cfi_endproc
 1486              	.LFE42:
 1487              		.size	SetServoTorque, .-SetServoTorque
 1488              		.section	.text.ServoSpeed,"ax",%progbits
 1489              		.align	2
 1490              		.global	ServoSpeed
 1491              		.code	16
 1492              		.thumb_func
 1493              		.type	ServoSpeed, %function
 1494              	ServoSpeed:
 1495              	.LFB43:
 393:.\main.c      **** 
 394:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 395:.\main.c      **** {
 1496              		.loc 1 395 0
 1497              		.cfi_startproc
 1498 0000 80B5     		push	{r7, lr}
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 86B0     		sub	sp, sp, #24
 1503              		.cfi_def_cfa_offset 32
 1504 0004 00AF     		add	r7, sp, #0
 1505              		.cfi_def_cfa_register 7
 1506 0006 0A1C     		mov	r2, r1
 1507 0008 FB1D     		add	r3, r7, #7
 1508 000a 011C     		add	r1, r0, #0
 1509 000c 1970     		strb	r1, [r3]
 1510 000e 3B1D     		add	r3, r7, #4
 1511 0010 1A80     		strh	r2, [r3]
 396:.\main.c      ****     uint8 array[9];
 397:.\main.c      ****     
 398:.\main.c      ****     array[0] = 0xFF;
 1512              		.loc 1 398 0
 1513 0012 3B1C     		mov	r3, r7
 1514 0014 0C33     		add	r3, r3, #12
 1515 0016 FF22     		mov	r2, #255
 1516 0018 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 35


 399:.\main.c      ****     array[1] = 0xFF;
 1517              		.loc 1 399 0
 1518 001a 3B1C     		mov	r3, r7
 1519 001c 0C33     		add	r3, r3, #12
 1520 001e FF22     		mov	r2, #255
 1521 0020 5A70     		strb	r2, [r3, #1]
 400:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1522              		.loc 1 400 0
 1523 0022 3B1C     		mov	r3, r7
 1524 0024 0C33     		add	r3, r3, #12
 1525 0026 FA1D     		add	r2, r7, #7
 1526 0028 1278     		ldrb	r2, [r2]
 1527 002a 9A70     		strb	r2, [r3, #2]
 401:.\main.c      ****     array[3] = 0x05;
 1528              		.loc 1 401 0
 1529 002c 3B1C     		mov	r3, r7
 1530 002e 0C33     		add	r3, r3, #12
 1531 0030 0522     		mov	r2, #5
 1532 0032 DA70     		strb	r2, [r3, #3]
 402:.\main.c      ****     array[4] = 0x03; //write instruction
 1533              		.loc 1 402 0
 1534 0034 3B1C     		mov	r3, r7
 1535 0036 0C33     		add	r3, r3, #12
 1536 0038 0322     		mov	r2, #3
 1537 003a 1A71     		strb	r2, [r3, #4]
 403:.\main.c      ****     array[5] = 0x20;
 1538              		.loc 1 403 0
 1539 003c 3B1C     		mov	r3, r7
 1540 003e 0C33     		add	r3, r3, #12
 1541 0040 2022     		mov	r2, #32
 1542 0042 5A71     		strb	r2, [r3, #5]
 404:.\main.c      ****     array[6] = speed;
 1543              		.loc 1 404 0
 1544 0044 3B1D     		add	r3, r7, #4
 1545 0046 1B88     		ldrh	r3, [r3]
 1546 0048 DAB2     		uxtb	r2, r3
 1547 004a 3B1C     		mov	r3, r7
 1548 004c 0C33     		add	r3, r3, #12
 1549 004e 9A71     		strb	r2, [r3, #6]
 405:.\main.c      ****     array[7] = speed >> 8;
 1550              		.loc 1 405 0
 1551 0050 3B1D     		add	r3, r7, #4
 1552 0052 1B88     		ldrh	r3, [r3]
 1553 0054 1B0A     		lsr	r3, r3, #8
 1554 0056 9BB2     		uxth	r3, r3
 1555 0058 DAB2     		uxtb	r2, r3
 1556 005a 3B1C     		mov	r3, r7
 1557 005c 0C33     		add	r3, r3, #12
 1558 005e DA71     		strb	r2, [r3, #7]
 406:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1559              		.loc 1 406 0
 1560 0060 3B1C     		mov	r3, r7
 1561 0062 0C33     		add	r3, r3, #12
 1562 0064 9A79     		ldrb	r2, [r3, #6]
 1563 0066 FB1D     		add	r3, r7, #7
 1564 0068 1B78     		ldrb	r3, [r3]
 1565 006a D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 36


 1566 006c DAB2     		uxtb	r2, r3
 1567 006e 3B1C     		mov	r3, r7
 1568 0070 0C33     		add	r3, r3, #12
 1569 0072 DB79     		ldrb	r3, [r3, #7]
 1570 0074 D318     		add	r3, r2, r3
 1571 0076 DBB2     		uxtb	r3, r3
 1572 0078 2833     		add	r3, r3, #40
 1573 007a DBB2     		uxtb	r3, r3
 1574 007c DB43     		mvn	r3, r3
 1575 007e DAB2     		uxtb	r2, r3
 1576 0080 3B1C     		mov	r3, r7
 1577 0082 0C33     		add	r3, r3, #12
 1578 0084 1A72     		strb	r2, [r3, #8]
 407:.\main.c      ****     
 408:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1579              		.loc 1 408 0
 1580 0086 3B1C     		mov	r3, r7
 1581 0088 0C33     		add	r3, r3, #12
 1582 008a 181C     		mov	r0, r3
 1583 008c 0921     		mov	r1, #9
 1584 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 409:.\main.c      ****     
 410:.\main.c      **** }
 1585              		.loc 1 410 0
 1586 0092 BD46     		mov	sp, r7
 1587 0094 06B0     		add	sp, sp, #24
 1588              		@ sp needed
 1589 0096 80BD     		pop	{r7, pc}
 1590              		.cfi_endproc
 1591              	.LFE43:
 1592              		.size	ServoSpeed, .-ServoSpeed
 1593              		.comm	wristTilt_state,1,1
 1594              		.section	.text.wristTilt,"ax",%progbits
 1595              		.align	2
 1596              		.global	wristTilt
 1597              		.code	16
 1598              		.thumb_func
 1599              		.type	wristTilt, %function
 1600              	wristTilt:
 1601              	.LFB44:
 411:.\main.c      **** 
 412:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait, tilt_feedback} wristTilt_sta
 413:.\main.c      **** //control the tilting motion of the wrist
 414:.\main.c      **** void wristTilt()
 415:.\main.c      **** {
 1602              		.loc 1 415 0
 1603              		.cfi_startproc
 1604 0000 90B5     		push	{r4, r7, lr}
 1605              		.cfi_def_cfa_offset 12
 1606              		.cfi_offset 4, -12
 1607              		.cfi_offset 7, -8
 1608              		.cfi_offset 14, -4
 1609 0002 85B0     		sub	sp, sp, #20
 1610              		.cfi_def_cfa_offset 32
 1611 0004 02AF     		add	r7, sp, #8
 1612              		.cfi_def_cfa 7, 24
 416:.\main.c      ****     // Overview
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 37


 417:.\main.c      ****     //take instruction from data_array
 418:.\main.c      ****     //smooth input
 419:.\main.c      ****     //actuate the tilting using UART
 420:.\main.c      ****     //get feedback
 421:.\main.c      **** 
 422:.\main.c      ****     //-------------------------- 
 423:.\main.c      ****     // Dynamixel Servo specific
 424:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 425:.\main.c      ****     // TODO: Set the desired position
 426:.\main.c      **** 
 427:.\main.c      ****     //--------------------------
 428:.\main.c      ****     // State machine
 429:.\main.c      ****     
 430:.\main.c      ****     uint8 i;
 431:.\main.c      ****     uint16 avg;
 432:.\main.c      ****     
 433:.\main.c      ****     switch(wristTilt_state){ //actions
 1613              		.loc 1 433 0
 1614 0006 484B     		ldr	r3, .L113
 1615 0008 1B78     		ldrb	r3, [r3]
 1616 000a 012B     		cmp	r3, #1
 1617 000c 03D0     		beq	.L91
 1618 000e 59DD     		ble	.L112
 1619 0010 022B     		cmp	r3, #2
 1620 0012 17D0     		beq	.L94
 434:.\main.c      ****         case tilt_start:
 435:.\main.c      ****             break;
 436:.\main.c      **** 
 437:.\main.c      ****         case tilt_init:
 438:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 439:.\main.c      ****             {
 440:.\main.c      ****                 WT_array[i] = 1500;
 441:.\main.c      ****             }
 442:.\main.c      ****             WT_arr_cspot = 0;
 443:.\main.c      ****             
 444:.\main.c      ****             break;
 445:.\main.c      **** 
 446:.\main.c      ****         case tilt_control:
 447:.\main.c      ****             make_command(WT_array, WT_arr_cspot, data_array, WT_BYTE_1, WT_BYTE_2);
 448:.\main.c      ****             
 449:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 450:.\main.c      ****             {
 451:.\main.c      ****                 WT_arr_cspot++;
 452:.\main.c      ****             }
 453:.\main.c      ****             else
 454:.\main.c      ****             {
 455:.\main.c      ****                 WT_arr_cspot = 0;
 456:.\main.c      ****             }
 457:.\main.c      ****             
 458:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 459:.\main.c      ****             
 460:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 461:.\main.c      ****             
 462:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 463:.\main.c      ****             {
 464:.\main.c      ****                 //UART_1_SpiUartPutArray(avg);
 465:.\main.c      ****                 ServoGoalPosition(0x02, avg);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 38


 466:.\main.c      ****             }
 467:.\main.c      ****             else
 468:.\main.c      ****             {
 469:.\main.c      ****                 //throw error
 470:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 471:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 472:.\main.c      ****             }
 473:.\main.c      ****             fin_exec++;
 474:.\main.c      ****             break;
 475:.\main.c      ****             
 476:.\main.c      ****         case tilt_wait:
 477:.\main.c      ****             break;
 1621              		.loc 1 477 0
 1622 0014 57E0     		b	.L90
 1623              	.L91:
 438:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1624              		.loc 1 438 0
 1625 0016 FB1D     		add	r3, r7, #7
 1626 0018 0022     		mov	r2, #0
 1627 001a 1A70     		strb	r2, [r3]
 1628 001c 0AE0     		b	.L96
 1629              	.L97:
 440:.\main.c      ****                 WT_array[i] = 1500;
 1630              		.loc 1 440 0 discriminator 2
 1631 001e FB1D     		add	r3, r7, #7
 1632 0020 1A78     		ldrb	r2, [r3]
 1633 0022 424B     		ldr	r3, .L113+4
 1634 0024 5200     		lsl	r2, r2, #1
 1635 0026 4249     		ldr	r1, .L113+8
 1636 0028 D152     		strh	r1, [r2, r3]
 438:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1637              		.loc 1 438 0 discriminator 2
 1638 002a FB1D     		add	r3, r7, #7
 1639 002c 1A78     		ldrb	r2, [r3]
 1640 002e FB1D     		add	r3, r7, #7
 1641 0030 0132     		add	r2, r2, #1
 1642 0032 1A70     		strb	r2, [r3]
 1643              	.L96:
 438:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1644              		.loc 1 438 0 is_stmt 0 discriminator 1
 1645 0034 FB1D     		add	r3, r7, #7
 1646 0036 1B78     		ldrb	r3, [r3]
 1647 0038 132B     		cmp	r3, #19
 1648 003a F0D9     		bls	.L97
 442:.\main.c      ****             WT_arr_cspot = 0;
 1649              		.loc 1 442 0 is_stmt 1
 1650 003c 3D4B     		ldr	r3, .L113+12
 1651 003e 0022     		mov	r2, #0
 1652 0040 1A70     		strb	r2, [r3]
 444:.\main.c      ****             break;
 1653              		.loc 1 444 0
 1654 0042 40E0     		b	.L90
 1655              	.L94:
 447:.\main.c      ****             make_command(WT_array, WT_arr_cspot, data_array, WT_BYTE_1, WT_BYTE_2);
 1656              		.loc 1 447 0
 1657 0044 3B4B     		ldr	r3, .L113+12
 1658 0046 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 39


 1659 0048 3849     		ldr	r1, .L113+4
 1660 004a 3B4B     		ldr	r3, .L113+16
 1661 004c 0B20     		mov	r0, #11
 1662 004e 0090     		str	r0, [sp]
 1663 0050 081C     		mov	r0, r1
 1664 0052 111C     		mov	r1, r2
 1665 0054 1A1C     		mov	r2, r3
 1666 0056 0A23     		mov	r3, #10
 1667 0058 FFF7FEFF 		bl	make_command
 449:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 1668              		.loc 1 449 0
 1669 005c 354B     		ldr	r3, .L113+12
 1670 005e 1B78     		ldrb	r3, [r3]
 1671 0060 122B     		cmp	r3, #18
 1672 0062 06D8     		bhi	.L98
 451:.\main.c      ****                 WT_arr_cspot++;
 1673              		.loc 1 451 0
 1674 0064 334B     		ldr	r3, .L113+12
 1675 0066 1B78     		ldrb	r3, [r3]
 1676 0068 0133     		add	r3, r3, #1
 1677 006a DAB2     		uxtb	r2, r3
 1678 006c 314B     		ldr	r3, .L113+12
 1679 006e 1A70     		strb	r2, [r3]
 1680 0070 02E0     		b	.L99
 1681              	.L98:
 455:.\main.c      ****                 WT_arr_cspot = 0;
 1682              		.loc 1 455 0
 1683 0072 304B     		ldr	r3, .L113+12
 1684 0074 0022     		mov	r2, #0
 1685 0076 1A70     		strb	r2, [r3]
 1686              	.L99:
 460:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 1687              		.loc 1 460 0
 1688 0078 3C1D     		add	r4, r7, #4
 1689 007a 2C4B     		ldr	r3, .L113+4
 1690 007c 181C     		mov	r0, r3
 1691 007e 1421     		mov	r1, #20
 1692 0080 FFF7FEFF 		bl	average
 1693 0084 031C     		mov	r3, r0
 1694 0086 2380     		strh	r3, [r4]
 462:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1695              		.loc 1 462 0
 1696 0088 3B1D     		add	r3, r7, #4
 1697 008a 1A88     		ldrh	r2, [r3]
 1698 008c FA23     		mov	r3, #250
 1699 008e DB00     		lsl	r3, r3, #3
 1700 0090 9A42     		cmp	r2, r3
 1701 0092 0BD8     		bhi	.L100
 462:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1702              		.loc 1 462 0 is_stmt 0 discriminator 1
 1703 0094 3B1D     		add	r3, r7, #4
 1704 0096 1A88     		ldrh	r2, [r3]
 1705 0098 284B     		ldr	r3, .L113+20
 1706 009a 9A42     		cmp	r2, r3
 1707 009c 06D9     		bls	.L100
 465:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 1708              		.loc 1 465 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 40


 1709 009e 3B1D     		add	r3, r7, #4
 1710 00a0 1B88     		ldrh	r3, [r3]
 1711 00a2 0220     		mov	r0, #2
 1712 00a4 191C     		mov	r1, r3
 1713 00a6 FFF7FEFF 		bl	ServoGoalPosition
 1714 00aa 04E0     		b	.L101
 1715              	.L100:
 471:.\main.c      ****                 ServoGoalPosition(0x02, 1500);
 1716              		.loc 1 471 0
 1717 00ac 204B     		ldr	r3, .L113+8
 1718 00ae 0220     		mov	r0, #2
 1719 00b0 191C     		mov	r1, r3
 1720 00b2 FFF7FEFF 		bl	ServoGoalPosition
 1721              	.L101:
 473:.\main.c      ****             fin_exec++;
 1722              		.loc 1 473 0
 1723 00b6 224B     		ldr	r3, .L113+24
 1724 00b8 1B78     		ldrb	r3, [r3]
 1725 00ba 0133     		add	r3, r3, #1
 1726 00bc DAB2     		uxtb	r2, r3
 1727 00be 204B     		ldr	r3, .L113+24
 1728 00c0 1A70     		strb	r2, [r3]
 474:.\main.c      ****             break;
 1729              		.loc 1 474 0
 1730 00c2 00E0     		b	.L90
 1731              	.L112:
 435:.\main.c      ****             break;
 1732              		.loc 1 435 0
 1733 00c4 C046     		mov	r8, r8
 1734              	.L90:
 478:.\main.c      ****     }
 479:.\main.c      ****     
 480:.\main.c      ****     switch(wristTilt_state){ //transitions
 1735              		.loc 1 480 0
 1736 00c6 184B     		ldr	r3, .L113
 1737 00c8 1B78     		ldrb	r3, [r3]
 1738 00ca 012B     		cmp	r3, #1
 1739 00cc 0CD0     		beq	.L103
 1740 00ce 02DC     		bgt	.L104
 1741 00d0 002B     		cmp	r3, #0
 1742 00d2 05D0     		beq	.L105
 1743 00d4 24E0     		b	.L89
 1744              	.L104:
 1745 00d6 022B     		cmp	r3, #2
 1746 00d8 0AD0     		beq	.L106
 1747 00da 032B     		cmp	r3, #3
 1748 00dc 14D0     		beq	.L107
 1749 00de 1FE0     		b	.L89
 1750              	.L105:
 481:.\main.c      ****         case tilt_start:
 482:.\main.c      ****             wristTilt_state = tilt_init;
 1751              		.loc 1 482 0
 1752 00e0 114B     		ldr	r3, .L113
 1753 00e2 0122     		mov	r2, #1
 1754 00e4 1A70     		strb	r2, [r3]
 483:.\main.c      ****             break;
 1755              		.loc 1 483 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 41


 1756 00e6 1BE0     		b	.L89
 1757              	.L103:
 484:.\main.c      ****         
 485:.\main.c      ****         case tilt_init:
 486:.\main.c      ****             wristTilt_state = tilt_wait;
 1758              		.loc 1 486 0
 1759 00e8 0F4B     		ldr	r3, .L113
 1760 00ea 0322     		mov	r2, #3
 1761 00ec 1A70     		strb	r2, [r3]
 487:.\main.c      ****             break;
 1762              		.loc 1 487 0
 1763 00ee 17E0     		b	.L89
 1764              	.L106:
 488:.\main.c      ****         
 489:.\main.c      ****         case tilt_control:
 490:.\main.c      ****             if(new_pack)
 1765              		.loc 1 490 0
 1766 00f0 144B     		ldr	r3, .L113+28
 1767 00f2 1B78     		ldrb	r3, [r3]
 1768 00f4 002B     		cmp	r3, #0
 1769 00f6 03D0     		beq	.L108
 491:.\main.c      ****             {
 492:.\main.c      ****                 wristTilt_state = tilt_control;
 1770              		.loc 1 492 0
 1771 00f8 0B4B     		ldr	r3, .L113
 1772 00fa 0222     		mov	r2, #2
 1773 00fc 1A70     		strb	r2, [r3]
 493:.\main.c      ****             }
 494:.\main.c      ****             else
 495:.\main.c      ****             {
 496:.\main.c      ****                 wristTilt_state = tilt_wait;
 497:.\main.c      ****             }
 498:.\main.c      ****             break;
 1774              		.loc 1 498 0
 1775 00fe 0FE0     		b	.L89
 1776              	.L108:
 496:.\main.c      ****                 wristTilt_state = tilt_wait;
 1777              		.loc 1 496 0
 1778 0100 094B     		ldr	r3, .L113
 1779 0102 0322     		mov	r2, #3
 1780 0104 1A70     		strb	r2, [r3]
 1781              		.loc 1 498 0
 1782 0106 0BE0     		b	.L89
 1783              	.L107:
 499:.\main.c      ****         
 500:.\main.c      ****         case tilt_wait:
 501:.\main.c      ****             if(new_pack)
 1784              		.loc 1 501 0
 1785 0108 0E4B     		ldr	r3, .L113+28
 1786 010a 1B78     		ldrb	r3, [r3]
 1787 010c 002B     		cmp	r3, #0
 1788 010e 03D0     		beq	.L110
 502:.\main.c      ****             {
 503:.\main.c      ****                 wristTilt_state = tilt_control;
 1789              		.loc 1 503 0
 1790 0110 054B     		ldr	r3, .L113
 1791 0112 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 42


 1792 0114 1A70     		strb	r2, [r3]
 1793 0116 02E0     		b	.L111
 1794              	.L110:
 504:.\main.c      ****             }
 505:.\main.c      ****             else
 506:.\main.c      ****             {
 507:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1795              		.loc 1 507 0
 1796 0118 034B     		ldr	r3, .L113
 1797 011a 0322     		mov	r2, #3
 1798 011c 1A70     		strb	r2, [r3]
 1799              	.L111:
 508:.\main.c      ****             }
 509:.\main.c      ****             break;
 1800              		.loc 1 509 0
 1801 011e C046     		mov	r8, r8
 1802              	.L89:
 510:.\main.c      ****     }    
 511:.\main.c      **** }
 1803              		.loc 1 511 0
 1804 0120 BD46     		mov	sp, r7
 1805 0122 03B0     		add	sp, sp, #12
 1806              		@ sp needed
 1807 0124 90BD     		pop	{r4, r7, pc}
 1808              	.L114:
 1809 0126 C046     		.align	2
 1810              	.L113:
 1811 0128 00000000 		.word	wristTilt_state
 1812 012c 00000000 		.word	WT_array
 1813 0130 DC050000 		.word	1500
 1814 0134 00000000 		.word	WT_arr_cspot
 1815 0138 00000000 		.word	data_array
 1816 013c E7030000 		.word	999
 1817 0140 00000000 		.word	fin_exec
 1818 0144 00000000 		.word	new_pack
 1819              		.cfi_endproc
 1820              	.LFE44:
 1821              		.size	wristTilt, .-wristTilt
 1822              		.comm	wristRotate_state,1,1
 1823              		.section	.text.wristRotate,"ax",%progbits
 1824              		.align	2
 1825              		.global	wristRotate
 1826              		.code	16
 1827              		.thumb_func
 1828              		.type	wristRotate, %function
 1829              	wristRotate:
 1830              	.LFB45:
 512:.\main.c      **** 
 513:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait, rotate_feedback} w
 514:.\main.c      **** //control the rotating motion of the wrist
 515:.\main.c      **** void wristRotate()
 516:.\main.c      **** {
 1831              		.loc 1 516 0
 1832              		.cfi_startproc
 1833 0000 90B5     		push	{r4, r7, lr}
 1834              		.cfi_def_cfa_offset 12
 1835              		.cfi_offset 4, -12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 43


 1836              		.cfi_offset 7, -8
 1837              		.cfi_offset 14, -4
 1838 0002 85B0     		sub	sp, sp, #20
 1839              		.cfi_def_cfa_offset 32
 1840 0004 02AF     		add	r7, sp, #8
 1841              		.cfi_def_cfa 7, 24
 517:.\main.c      ****     //Overview
 518:.\main.c      ****     //take instruction from data_array
 519:.\main.c      ****     //smooth input
 520:.\main.c      ****     //actuate the tilting using UART
 521:.\main.c      ****     //get feedback
 522:.\main.c      **** 
 523:.\main.c      ****     //-------------------------- 
 524:.\main.c      ****     // Dynamixel Servo specific
 525:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 526:.\main.c      ****     // TODO: Set the desired position
 527:.\main.c      **** 
 528:.\main.c      ****     //--------------------------
 529:.\main.c      ****     // State machine
 530:.\main.c      ****     
 531:.\main.c      ****     uint8 i;
 532:.\main.c      ****     uint16 avg;
 533:.\main.c      ****     
 534:.\main.c      ****     switch(wristRotate_state){ //actions
 1842              		.loc 1 534 0
 1843 0006 484B     		ldr	r3, .L139
 1844 0008 1B78     		ldrb	r3, [r3]
 1845 000a 012B     		cmp	r3, #1
 1846 000c 03D0     		beq	.L117
 1847 000e 59DD     		ble	.L138
 1848 0010 022B     		cmp	r3, #2
 1849 0012 17D0     		beq	.L120
 535:.\main.c      ****         case rotate_start:
 536:.\main.c      ****             break;
 537:.\main.c      **** 
 538:.\main.c      ****         case rotate_init:
 539:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 540:.\main.c      ****             {
 541:.\main.c      ****                 WR_array[i] = 1500;
 542:.\main.c      ****             }
 543:.\main.c      ****             WR_arr_cspot = 0;
 544:.\main.c      ****             break;
 545:.\main.c      **** 
 546:.\main.c      ****         case rotate_control:
 547:.\main.c      ****             make_command(WR_array, WR_arr_cspot, data_array, WR_BYTE_1, WR_BYTE_2);
 548:.\main.c      ****             
 549:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 550:.\main.c      ****             {
 551:.\main.c      ****                 WR_arr_cspot++;
 552:.\main.c      ****             }
 553:.\main.c      ****             else
 554:.\main.c      ****             {
 555:.\main.c      ****                 WR_arr_cspot = 0;
 556:.\main.c      ****             }
 557:.\main.c      ****             
 558:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 559:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 44


 560:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 561:.\main.c      ****             
 562:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 563:.\main.c      ****             {
 564:.\main.c      ****                 //BA_PWM_WriteCompare(avg);
 565:.\main.c      ****                 //TODO maybe scale avg between 0 and 3000
 566:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 567:.\main.c      ****             }
 568:.\main.c      ****             else
 569:.\main.c      ****             {
 570:.\main.c      ****                 //throw error
 571:.\main.c      ****                 //BA_PWM_WriteCompare(1500);
 572:.\main.c      ****                 //TODO if we scale change the "neutral" value
 573:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 574:.\main.c      ****             }
 575:.\main.c      ****             fin_exec++;
 576:.\main.c      ****             break;
 577:.\main.c      ****             
 578:.\main.c      ****         case rotate_wait:
 579:.\main.c      ****             break;
 1850              		.loc 1 579 0
 1851 0014 57E0     		b	.L116
 1852              	.L117:
 539:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1853              		.loc 1 539 0
 1854 0016 FB1D     		add	r3, r7, #7
 1855 0018 0022     		mov	r2, #0
 1856 001a 1A70     		strb	r2, [r3]
 1857 001c 0AE0     		b	.L122
 1858              	.L123:
 541:.\main.c      ****                 WR_array[i] = 1500;
 1859              		.loc 1 541 0 discriminator 2
 1860 001e FB1D     		add	r3, r7, #7
 1861 0020 1A78     		ldrb	r2, [r3]
 1862 0022 424B     		ldr	r3, .L139+4
 1863 0024 5200     		lsl	r2, r2, #1
 1864 0026 4249     		ldr	r1, .L139+8
 1865 0028 D152     		strh	r1, [r2, r3]
 539:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1866              		.loc 1 539 0 discriminator 2
 1867 002a FB1D     		add	r3, r7, #7
 1868 002c 1A78     		ldrb	r2, [r3]
 1869 002e FB1D     		add	r3, r7, #7
 1870 0030 0132     		add	r2, r2, #1
 1871 0032 1A70     		strb	r2, [r3]
 1872              	.L122:
 539:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 1873              		.loc 1 539 0 is_stmt 0 discriminator 1
 1874 0034 FB1D     		add	r3, r7, #7
 1875 0036 1B78     		ldrb	r3, [r3]
 1876 0038 132B     		cmp	r3, #19
 1877 003a F0D9     		bls	.L123
 543:.\main.c      ****             WR_arr_cspot = 0;
 1878              		.loc 1 543 0 is_stmt 1
 1879 003c 3D4B     		ldr	r3, .L139+12
 1880 003e 0022     		mov	r2, #0
 1881 0040 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 45


 544:.\main.c      ****             break;
 1882              		.loc 1 544 0
 1883 0042 40E0     		b	.L116
 1884              	.L120:
 547:.\main.c      ****             make_command(WR_array, WR_arr_cspot, data_array, WR_BYTE_1, WR_BYTE_2);
 1885              		.loc 1 547 0
 1886 0044 3B4B     		ldr	r3, .L139+12
 1887 0046 1A78     		ldrb	r2, [r3]
 1888 0048 3849     		ldr	r1, .L139+4
 1889 004a 3B4B     		ldr	r3, .L139+16
 1890 004c 0D20     		mov	r0, #13
 1891 004e 0090     		str	r0, [sp]
 1892 0050 081C     		mov	r0, r1
 1893 0052 111C     		mov	r1, r2
 1894 0054 1A1C     		mov	r2, r3
 1895 0056 0C23     		mov	r3, #12
 1896 0058 FFF7FEFF 		bl	make_command
 549:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 1897              		.loc 1 549 0
 1898 005c 354B     		ldr	r3, .L139+12
 1899 005e 1B78     		ldrb	r3, [r3]
 1900 0060 122B     		cmp	r3, #18
 1901 0062 06D8     		bhi	.L124
 551:.\main.c      ****                 WR_arr_cspot++;
 1902              		.loc 1 551 0
 1903 0064 334B     		ldr	r3, .L139+12
 1904 0066 1B78     		ldrb	r3, [r3]
 1905 0068 0133     		add	r3, r3, #1
 1906 006a DAB2     		uxtb	r2, r3
 1907 006c 314B     		ldr	r3, .L139+12
 1908 006e 1A70     		strb	r2, [r3]
 1909 0070 02E0     		b	.L125
 1910              	.L124:
 555:.\main.c      ****                 WR_arr_cspot = 0;
 1911              		.loc 1 555 0
 1912 0072 304B     		ldr	r3, .L139+12
 1913 0074 0022     		mov	r2, #0
 1914 0076 1A70     		strb	r2, [r3]
 1915              	.L125:
 560:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 1916              		.loc 1 560 0
 1917 0078 3C1D     		add	r4, r7, #4
 1918 007a 2C4B     		ldr	r3, .L139+4
 1919 007c 181C     		mov	r0, r3
 1920 007e 1421     		mov	r1, #20
 1921 0080 FFF7FEFF 		bl	average
 1922 0084 031C     		mov	r3, r0
 1923 0086 2380     		strh	r3, [r4]
 562:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 1924              		.loc 1 562 0
 1925 0088 3B1D     		add	r3, r7, #4
 1926 008a 1A88     		ldrh	r2, [r3]
 1927 008c FA23     		mov	r3, #250
 1928 008e DB00     		lsl	r3, r3, #3
 1929 0090 9A42     		cmp	r2, r3
 1930 0092 0BD8     		bhi	.L126
 562:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 46


 1931              		.loc 1 562 0 is_stmt 0 discriminator 1
 1932 0094 3B1D     		add	r3, r7, #4
 1933 0096 1A88     		ldrh	r2, [r3]
 1934 0098 284B     		ldr	r3, .L139+20
 1935 009a 9A42     		cmp	r2, r3
 1936 009c 06D9     		bls	.L126
 566:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 1937              		.loc 1 566 0 is_stmt 1
 1938 009e 3B1D     		add	r3, r7, #4
 1939 00a0 1B88     		ldrh	r3, [r3]
 1940 00a2 0120     		mov	r0, #1
 1941 00a4 191C     		mov	r1, r3
 1942 00a6 FFF7FEFF 		bl	ServoGoalPosition
 1943 00aa 04E0     		b	.L127
 1944              	.L126:
 573:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 1945              		.loc 1 573 0
 1946 00ac 204B     		ldr	r3, .L139+8
 1947 00ae 0120     		mov	r0, #1
 1948 00b0 191C     		mov	r1, r3
 1949 00b2 FFF7FEFF 		bl	ServoGoalPosition
 1950              	.L127:
 575:.\main.c      ****             fin_exec++;
 1951              		.loc 1 575 0
 1952 00b6 224B     		ldr	r3, .L139+24
 1953 00b8 1B78     		ldrb	r3, [r3]
 1954 00ba 0133     		add	r3, r3, #1
 1955 00bc DAB2     		uxtb	r2, r3
 1956 00be 204B     		ldr	r3, .L139+24
 1957 00c0 1A70     		strb	r2, [r3]
 576:.\main.c      ****             break;
 1958              		.loc 1 576 0
 1959 00c2 00E0     		b	.L116
 1960              	.L138:
 536:.\main.c      ****             break;
 1961              		.loc 1 536 0
 1962 00c4 C046     		mov	r8, r8
 1963              	.L116:
 580:.\main.c      ****     }
 581:.\main.c      ****     
 582:.\main.c      ****     switch(wristRotate_state){ //transitions
 1964              		.loc 1 582 0
 1965 00c6 184B     		ldr	r3, .L139
 1966 00c8 1B78     		ldrb	r3, [r3]
 1967 00ca 012B     		cmp	r3, #1
 1968 00cc 0CD0     		beq	.L129
 1969 00ce 02DC     		bgt	.L130
 1970 00d0 002B     		cmp	r3, #0
 1971 00d2 05D0     		beq	.L131
 1972 00d4 24E0     		b	.L115
 1973              	.L130:
 1974 00d6 022B     		cmp	r3, #2
 1975 00d8 0AD0     		beq	.L132
 1976 00da 032B     		cmp	r3, #3
 1977 00dc 14D0     		beq	.L133
 1978 00de 1FE0     		b	.L115
 1979              	.L131:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 47


 583:.\main.c      ****         case rotate_start:
 584:.\main.c      ****             wristRotate_state = rotate_init;
 1980              		.loc 1 584 0
 1981 00e0 114B     		ldr	r3, .L139
 1982 00e2 0122     		mov	r2, #1
 1983 00e4 1A70     		strb	r2, [r3]
 585:.\main.c      ****             break;
 1984              		.loc 1 585 0
 1985 00e6 1BE0     		b	.L115
 1986              	.L129:
 586:.\main.c      ****         
 587:.\main.c      ****         case rotate_init:
 588:.\main.c      ****             wristRotate_state = rotate_wait;
 1987              		.loc 1 588 0
 1988 00e8 0F4B     		ldr	r3, .L139
 1989 00ea 0322     		mov	r2, #3
 1990 00ec 1A70     		strb	r2, [r3]
 589:.\main.c      ****             break;
 1991              		.loc 1 589 0
 1992 00ee 17E0     		b	.L115
 1993              	.L132:
 590:.\main.c      ****         
 591:.\main.c      ****         case rotate_control:
 592:.\main.c      ****             if(new_pack)
 1994              		.loc 1 592 0
 1995 00f0 144B     		ldr	r3, .L139+28
 1996 00f2 1B78     		ldrb	r3, [r3]
 1997 00f4 002B     		cmp	r3, #0
 1998 00f6 03D0     		beq	.L134
 593:.\main.c      ****             {
 594:.\main.c      ****                 wristRotate_state = rotate_control;
 1999              		.loc 1 594 0
 2000 00f8 0B4B     		ldr	r3, .L139
 2001 00fa 0222     		mov	r2, #2
 2002 00fc 1A70     		strb	r2, [r3]
 595:.\main.c      ****             }
 596:.\main.c      ****             else
 597:.\main.c      ****             {
 598:.\main.c      ****                 wristRotate_state = rotate_wait;
 599:.\main.c      ****             }
 600:.\main.c      ****             break;
 2003              		.loc 1 600 0
 2004 00fe 0FE0     		b	.L115
 2005              	.L134:
 598:.\main.c      ****                 wristRotate_state = rotate_wait;
 2006              		.loc 1 598 0
 2007 0100 094B     		ldr	r3, .L139
 2008 0102 0322     		mov	r2, #3
 2009 0104 1A70     		strb	r2, [r3]
 2010              		.loc 1 600 0
 2011 0106 0BE0     		b	.L115
 2012              	.L133:
 601:.\main.c      ****         
 602:.\main.c      ****         case rotate_wait:
 603:.\main.c      ****             if(new_pack)
 2013              		.loc 1 603 0
 2014 0108 0E4B     		ldr	r3, .L139+28
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 48


 2015 010a 1B78     		ldrb	r3, [r3]
 2016 010c 002B     		cmp	r3, #0
 2017 010e 03D0     		beq	.L136
 604:.\main.c      ****             {
 605:.\main.c      ****                 wristRotate_state = rotate_control;
 2018              		.loc 1 605 0
 2019 0110 054B     		ldr	r3, .L139
 2020 0112 0222     		mov	r2, #2
 2021 0114 1A70     		strb	r2, [r3]
 2022 0116 02E0     		b	.L137
 2023              	.L136:
 606:.\main.c      ****             }
 607:.\main.c      ****             else
 608:.\main.c      ****             {
 609:.\main.c      ****                 wristRotate_state = rotate_wait;
 2024              		.loc 1 609 0
 2025 0118 034B     		ldr	r3, .L139
 2026 011a 0322     		mov	r2, #3
 2027 011c 1A70     		strb	r2, [r3]
 2028              	.L137:
 610:.\main.c      ****             }
 611:.\main.c      ****             break;
 2029              		.loc 1 611 0
 2030 011e C046     		mov	r8, r8
 2031              	.L115:
 612:.\main.c      ****     }    
 613:.\main.c      **** }
 2032              		.loc 1 613 0
 2033 0120 BD46     		mov	sp, r7
 2034 0122 03B0     		add	sp, sp, #12
 2035              		@ sp needed
 2036 0124 90BD     		pop	{r4, r7, pc}
 2037              	.L140:
 2038 0126 C046     		.align	2
 2039              	.L139:
 2040 0128 00000000 		.word	wristRotate_state
 2041 012c 00000000 		.word	WR_array
 2042 0130 DC050000 		.word	1500
 2043 0134 00000000 		.word	WR_arr_cspot
 2044 0138 00000000 		.word	data_array
 2045 013c E7030000 		.word	999
 2046 0140 00000000 		.word	fin_exec
 2047 0144 00000000 		.word	new_pack
 2048              		.cfi_endproc
 2049              	.LFE45:
 2050              		.size	wristRotate, .-wristRotate
 2051              		.comm	elbow_state,1,1
 2052              		.section	.text.elbow,"ax",%progbits
 2053              		.align	2
 2054              		.global	elbow
 2055              		.code	16
 2056              		.thumb_func
 2057              		.type	elbow, %function
 2058              	elbow:
 2059              	.LFB46:
 614:.\main.c      **** 
 615:.\main.c      **** //control the elbow
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 49


 616:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 617:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 618:.\main.c      **** void elbow()
 619:.\main.c      **** { 
 2060              		.loc 1 619 0
 2061              		.cfi_startproc
 2062 0000 90B5     		push	{r4, r7, lr}
 2063              		.cfi_def_cfa_offset 12
 2064              		.cfi_offset 4, -12
 2065              		.cfi_offset 7, -8
 2066              		.cfi_offset 14, -4
 2067 0002 85B0     		sub	sp, sp, #20
 2068              		.cfi_def_cfa_offset 32
 2069 0004 02AF     		add	r7, sp, #8
 2070              		.cfi_def_cfa 7, 24
 620:.\main.c      ****     //take instruction from data_array
 621:.\main.c      ****     //smooth input
 622:.\main.c      ****     //actuate the elbow using PWM
 623:.\main.c      ****     //get feedback
 624:.\main.c      ****     uint8 i;
 625:.\main.c      ****     uint16 avg;
 626:.\main.c      ****     
 627:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2071              		.loc 1 627 0
 2072 0006 3C1D     		add	r4, r7, #4
 2073 0008 0120     		mov	r0, #1
 2074 000a FFF7FEFF 		bl	potFeedback
 2075 000e 031C     		mov	r3, r0
 2076 0010 2380     		strh	r3, [r4]
 628:.\main.c      ****     
 629:.\main.c      ****     switch(elbow_state){ //actions
 2077              		.loc 1 629 0
 2078 0012 754B     		ldr	r3, .L175
 2079 0014 1B78     		ldrb	r3, [r3]
 2080 0016 012B     		cmp	r3, #1
 2081 0018 07D0     		beq	.L143
 2082 001a 00DC     		bgt	.LCB1921
 2083 001c B2E0     		b	.L174	@long jump
 2084              	.LCB1921:
 2085 001e 022B     		cmp	r3, #2
 2086 0020 1AD0     		beq	.L146
 2087 0022 032B     		cmp	r3, #3
 2088 0024 00D1     		bne	.LCB1925
 2089 0026 9EE0     		b	.L147	@long jump
 2090              	.LCB1925:
 2091 0028 ADE0     		b	.L142
 2092              	.L143:
 630:.\main.c      ****         case elbw_start:
 631:.\main.c      ****             break;
 632:.\main.c      **** 
 633:.\main.c      ****         case elbw_init:
 634:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2093              		.loc 1 634 0
 2094 002a FB1D     		add	r3, r7, #7
 2095 002c 0022     		mov	r2, #0
 2096 002e 1A70     		strb	r2, [r3]
 2097 0030 0AE0     		b	.L148
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 50


 2098              	.L149:
 635:.\main.c      ****             {
 636:.\main.c      ****                 elbow_array[i] = 1500;
 2099              		.loc 1 636 0 discriminator 2
 2100 0032 FB1D     		add	r3, r7, #7
 2101 0034 1A78     		ldrb	r2, [r3]
 2102 0036 6D4B     		ldr	r3, .L175+4
 2103 0038 5200     		lsl	r2, r2, #1
 2104 003a 6D49     		ldr	r1, .L175+8
 2105 003c D152     		strh	r1, [r2, r3]
 634:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2106              		.loc 1 634 0 discriminator 2
 2107 003e FB1D     		add	r3, r7, #7
 2108 0040 1A78     		ldrb	r2, [r3]
 2109 0042 FB1D     		add	r3, r7, #7
 2110 0044 0132     		add	r2, r2, #1
 2111 0046 1A70     		strb	r2, [r3]
 2112              	.L148:
 634:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2113              		.loc 1 634 0 is_stmt 0 discriminator 1
 2114 0048 FB1D     		add	r3, r7, #7
 2115 004a 1B78     		ldrb	r3, [r3]
 2116 004c 132B     		cmp	r3, #19
 2117 004e F0D9     		bls	.L149
 637:.\main.c      ****             }
 638:.\main.c      ****             elbw_arr_cspot = 0;
 2118              		.loc 1 638 0 is_stmt 1
 2119 0050 684B     		ldr	r3, .L175+12
 2120 0052 0022     		mov	r2, #0
 2121 0054 1A70     		strb	r2, [r3]
 639:.\main.c      ****             break;
 2122              		.loc 1 639 0
 2123 0056 96E0     		b	.L142
 2124              	.L146:
 640:.\main.c      **** 
 641:.\main.c      ****         case elbw_execute:
 642:.\main.c      ****             make_command(elbow_array, elbw_arr_cspot, data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2125              		.loc 1 642 0
 2126 0058 664B     		ldr	r3, .L175+12
 2127 005a 1A78     		ldrb	r2, [r3]
 2128 005c 6349     		ldr	r1, .L175+4
 2129 005e 664B     		ldr	r3, .L175+16
 2130 0060 0920     		mov	r0, #9
 2131 0062 0090     		str	r0, [sp]
 2132 0064 081C     		mov	r0, r1
 2133 0066 111C     		mov	r1, r2
 2134 0068 1A1C     		mov	r2, r3
 2135 006a 0823     		mov	r3, #8
 2136 006c FFF7FEFF 		bl	make_command
 643:.\main.c      ****             
 644:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2137              		.loc 1 644 0
 2138 0070 604B     		ldr	r3, .L175+12
 2139 0072 1B78     		ldrb	r3, [r3]
 2140 0074 122B     		cmp	r3, #18
 2141 0076 06D8     		bhi	.L150
 645:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 51


 646:.\main.c      ****                 elbw_arr_cspot++;
 2142              		.loc 1 646 0
 2143 0078 5E4B     		ldr	r3, .L175+12
 2144 007a 1B78     		ldrb	r3, [r3]
 2145 007c 0133     		add	r3, r3, #1
 2146 007e DAB2     		uxtb	r2, r3
 2147 0080 5C4B     		ldr	r3, .L175+12
 2148 0082 1A70     		strb	r2, [r3]
 2149 0084 02E0     		b	.L151
 2150              	.L150:
 647:.\main.c      ****             }
 648:.\main.c      ****             else
 649:.\main.c      ****             {
 650:.\main.c      ****                 elbw_arr_cspot = 0;
 2151              		.loc 1 650 0
 2152 0086 5B4B     		ldr	r3, .L175+12
 2153 0088 0022     		mov	r2, #0
 2154 008a 1A70     		strb	r2, [r3]
 2155              	.L151:
 651:.\main.c      ****             }
 652:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);
 2156              		.loc 1 652 0
 2157 008c BC1C     		add	r4, r7, #2
 2158 008e 574B     		ldr	r3, .L175+4
 2159 0090 181C     		mov	r0, r3
 2160 0092 1421     		mov	r1, #20
 2161 0094 FFF7FEFF 		bl	average
 2162 0098 031C     		mov	r3, r0
 2163 009a 2380     		strh	r3, [r4]
 653:.\main.c      ****            
 654:.\main.c      ****             //uint16 feedback = potFeedback(ELBOW_POT); --see above
 655:.\main.c      ****             //TODO make sure reading from correct pots
 656:.\main.c      **** //            char buffer[20];
 657:.\main.c      **** //            
 658:.\main.c      **** //            itoa(avg, buffer);
 659:.\main.c      **** //            
 660:.\main.c      **** //            UART_1_UartPutString(buffer);      
 661:.\main.c      **** //            UART_1_UartPutString("\r\n");      
 662:.\main.c      ****             
 663:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND)
 2164              		.loc 1 663 0
 2165 009c 3B1D     		add	r3, r7, #4
 2166 009e 1B88     		ldrh	r3, [r3]
 2167 00a0 642B     		cmp	r3, #100
 2168 00a2 1FD8     		bhi	.L152
 664:.\main.c      ****             {
 665:.\main.c      ****                 if (avg < 1500)
 2169              		.loc 1 665 0
 2170 00a4 BB1C     		add	r3, r7, #2
 2171 00a6 1A88     		ldrh	r2, [r3]
 2172 00a8 544B     		ldr	r3, .L175+20
 2173 00aa 9A42     		cmp	r2, r3
 2174 00ac 04D8     		bhi	.L153
 666:.\main.c      ****                 {
 667:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2175              		.loc 1 667 0
 2176 00ae 504B     		ldr	r3, .L175+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 52


 2177 00b0 181C     		mov	r0, r3
 2178 00b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2179 00b6 4FE0     		b	.L156
 2180              	.L153:
 668:.\main.c      ****                 }
 669:.\main.c      ****                 else
 670:.\main.c      ****                 {
 671:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2181              		.loc 1 671 0
 2182 00b8 BB1C     		add	r3, r7, #2
 2183 00ba 1A88     		ldrh	r2, [r3]
 2184 00bc FA23     		mov	r3, #250
 2185 00be DB00     		lsl	r3, r3, #3
 2186 00c0 9A42     		cmp	r2, r3
 2187 00c2 0AD8     		bhi	.L155
 2188              		.loc 1 671 0 is_stmt 0 discriminator 1
 2189 00c4 BB1C     		add	r3, r7, #2
 2190 00c6 1A88     		ldrh	r2, [r3]
 2191 00c8 4D4B     		ldr	r3, .L175+24
 2192 00ca 9A42     		cmp	r2, r3
 2193 00cc 05D9     		bls	.L155
 672:.\main.c      ****                     {
 673:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2194              		.loc 1 673 0 is_stmt 1
 2195 00ce BB1C     		add	r3, r7, #2
 2196 00d0 1B88     		ldrh	r3, [r3]
 2197 00d2 181C     		mov	r0, r3
 2198 00d4 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2199 00d8 3EE0     		b	.L156
 2200              	.L155:
 674:.\main.c      ****                     }
 675:.\main.c      ****                     else
 676:.\main.c      ****                     {
 677:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2201              		.loc 1 677 0
 2202 00da 454B     		ldr	r3, .L175+8
 2203 00dc 181C     		mov	r0, r3
 2204 00de FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2205 00e2 39E0     		b	.L156
 2206              	.L152:
 678:.\main.c      ****                     }
 679:.\main.c      ****                 }
 680:.\main.c      ****             }
 681:.\main.c      ****             else if (feedback >= ELBOW_UPPER_BOUND)
 2207              		.loc 1 681 0
 2208 00e4 3B1D     		add	r3, r7, #4
 2209 00e6 1A88     		ldrh	r2, [r3]
 2210 00e8 454B     		ldr	r3, .L175+24
 2211 00ea 9A42     		cmp	r2, r3
 2212 00ec 1FD9     		bls	.L157
 682:.\main.c      ****             {
 683:.\main.c      ****                 if(avg > 1500)
 2213              		.loc 1 683 0
 2214 00ee BB1C     		add	r3, r7, #2
 2215 00f0 1A88     		ldrh	r2, [r3]
 2216 00f2 3F4B     		ldr	r3, .L175+8
 2217 00f4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 53


 2218 00f6 04D9     		bls	.L158
 684:.\main.c      ****                 {
 685:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2219              		.loc 1 685 0
 2220 00f8 3D4B     		ldr	r3, .L175+8
 2221 00fa 181C     		mov	r0, r3
 2222 00fc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2223 0100 2AE0     		b	.L156
 2224              	.L158:
 686:.\main.c      ****                 }
 687:.\main.c      ****                 else
 688:.\main.c      ****                 {
 689:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2225              		.loc 1 689 0
 2226 0102 BB1C     		add	r3, r7, #2
 2227 0104 1A88     		ldrh	r2, [r3]
 2228 0106 FA23     		mov	r3, #250
 2229 0108 DB00     		lsl	r3, r3, #3
 2230 010a 9A42     		cmp	r2, r3
 2231 010c 0AD8     		bhi	.L160
 2232              		.loc 1 689 0 is_stmt 0 discriminator 1
 2233 010e BB1C     		add	r3, r7, #2
 2234 0110 1A88     		ldrh	r2, [r3]
 2235 0112 3B4B     		ldr	r3, .L175+24
 2236 0114 9A42     		cmp	r2, r3
 2237 0116 05D9     		bls	.L160
 690:.\main.c      ****                     {
 691:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2238              		.loc 1 691 0 is_stmt 1
 2239 0118 BB1C     		add	r3, r7, #2
 2240 011a 1B88     		ldrh	r3, [r3]
 2241 011c 181C     		mov	r0, r3
 2242 011e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2243 0122 19E0     		b	.L156
 2244              	.L160:
 692:.\main.c      ****                     }
 693:.\main.c      ****                     else
 694:.\main.c      ****                     {
 695:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2245              		.loc 1 695 0
 2246 0124 324B     		ldr	r3, .L175+8
 2247 0126 181C     		mov	r0, r3
 2248 0128 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2249 012c 14E0     		b	.L156
 2250              	.L157:
 696:.\main.c      ****                     }
 697:.\main.c      ****                 }
 698:.\main.c      ****             }
 699:.\main.c      ****             else
 700:.\main.c      ****             {
 701:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2251              		.loc 1 701 0
 2252 012e BB1C     		add	r3, r7, #2
 2253 0130 1A88     		ldrh	r2, [r3]
 2254 0132 FA23     		mov	r3, #250
 2255 0134 DB00     		lsl	r3, r3, #3
 2256 0136 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 54


 2257 0138 0AD8     		bhi	.L161
 2258              		.loc 1 701 0 is_stmt 0 discriminator 1
 2259 013a BB1C     		add	r3, r7, #2
 2260 013c 1A88     		ldrh	r2, [r3]
 2261 013e 304B     		ldr	r3, .L175+24
 2262 0140 9A42     		cmp	r2, r3
 2263 0142 05D9     		bls	.L161
 702:.\main.c      ****                 {
 703:.\main.c      ****                     ELBW_PWM_WriteCompare(avg);
 2264              		.loc 1 703 0 is_stmt 1
 2265 0144 BB1C     		add	r3, r7, #2
 2266 0146 1B88     		ldrh	r3, [r3]
 2267 0148 181C     		mov	r0, r3
 2268 014a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2269 014e 03E0     		b	.L156
 2270              	.L161:
 704:.\main.c      ****                 }
 705:.\main.c      ****                 else
 706:.\main.c      ****                 {
 707:.\main.c      ****                     ELBW_PWM_WriteCompare(1500);
 2271              		.loc 1 707 0
 2272 0150 274B     		ldr	r3, .L175+8
 2273 0152 181C     		mov	r0, r3
 2274 0154 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2275              	.L156:
 708:.\main.c      ****                 }
 709:.\main.c      ****             }
 710:.\main.c      ****             
 711:.\main.c      ****             fin_exec++;
 2276              		.loc 1 711 0
 2277 0158 2A4B     		ldr	r3, .L175+28
 2278 015a 1B78     		ldrb	r3, [r3]
 2279 015c 0133     		add	r3, r3, #1
 2280 015e DAB2     		uxtb	r2, r3
 2281 0160 284B     		ldr	r3, .L175+28
 2282 0162 1A70     		strb	r2, [r3]
 712:.\main.c      ****             break;
 2283              		.loc 1 712 0
 2284 0164 0FE0     		b	.L142
 2285              	.L147:
 713:.\main.c      ****             
 714:.\main.c      ****         case elbw_wait:
 715:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2286              		.loc 1 715 0
 2287 0166 3B1D     		add	r3, r7, #4
 2288 0168 1B88     		ldrh	r3, [r3]
 2289 016a 642B     		cmp	r3, #100
 2290 016c 04D9     		bls	.L162
 2291              		.loc 1 715 0 is_stmt 0 discriminator 1
 2292 016e 3B1D     		add	r3, r7, #4
 2293 0170 1A88     		ldrh	r2, [r3]
 2294 0172 234B     		ldr	r3, .L175+24
 2295 0174 9A42     		cmp	r2, r3
 2296 0176 04D9     		bls	.L163
 2297              	.L162:
 716:.\main.c      ****             {
 717:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 55


 2298              		.loc 1 717 0 is_stmt 1
 2299 0178 1D4B     		ldr	r3, .L175+8
 2300 017a 181C     		mov	r0, r3
 2301 017c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 718:.\main.c      ****             }
 719:.\main.c      ****             break;
 2302              		.loc 1 719 0
 2303 0180 01E0     		b	.L142
 2304              	.L163:
 2305 0182 00E0     		b	.L142
 2306              	.L174:
 631:.\main.c      ****             break;
 2307              		.loc 1 631 0
 2308 0184 C046     		mov	r8, r8
 2309              	.L142:
 720:.\main.c      ****     }
 721:.\main.c      ****     
 722:.\main.c      ****     switch(elbow_state){ //transitions
 2310              		.loc 1 722 0
 2311 0186 184B     		ldr	r3, .L175
 2312 0188 1B78     		ldrb	r3, [r3]
 2313 018a 012B     		cmp	r3, #1
 2314 018c 0CD0     		beq	.L165
 2315 018e 02DC     		bgt	.L166
 2316 0190 002B     		cmp	r3, #0
 2317 0192 05D0     		beq	.L167
 2318 0194 24E0     		b	.L141
 2319              	.L166:
 2320 0196 022B     		cmp	r3, #2
 2321 0198 0AD0     		beq	.L168
 2322 019a 032B     		cmp	r3, #3
 2323 019c 14D0     		beq	.L169
 2324 019e 1FE0     		b	.L141
 2325              	.L167:
 723:.\main.c      ****         case elbw_start:
 724:.\main.c      ****             elbow_state = elbw_init;
 2326              		.loc 1 724 0
 2327 01a0 114B     		ldr	r3, .L175
 2328 01a2 0122     		mov	r2, #1
 2329 01a4 1A70     		strb	r2, [r3]
 725:.\main.c      ****             break;
 2330              		.loc 1 725 0
 2331 01a6 1BE0     		b	.L141
 2332              	.L165:
 726:.\main.c      ****         
 727:.\main.c      ****         case elbw_init:
 728:.\main.c      ****             elbow_state = elbw_wait;
 2333              		.loc 1 728 0
 2334 01a8 0F4B     		ldr	r3, .L175
 2335 01aa 0322     		mov	r2, #3
 2336 01ac 1A70     		strb	r2, [r3]
 729:.\main.c      ****             break;
 2337              		.loc 1 729 0
 2338 01ae 17E0     		b	.L141
 2339              	.L168:
 730:.\main.c      ****         
 731:.\main.c      ****         case elbw_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 56


 732:.\main.c      ****             if(new_pack)
 2340              		.loc 1 732 0
 2341 01b0 154B     		ldr	r3, .L175+32
 2342 01b2 1B78     		ldrb	r3, [r3]
 2343 01b4 002B     		cmp	r3, #0
 2344 01b6 03D0     		beq	.L170
 733:.\main.c      ****             {
 734:.\main.c      ****                 elbow_state = elbw_execute;
 2345              		.loc 1 734 0
 2346 01b8 0B4B     		ldr	r3, .L175
 2347 01ba 0222     		mov	r2, #2
 2348 01bc 1A70     		strb	r2, [r3]
 735:.\main.c      ****             }
 736:.\main.c      ****             else
 737:.\main.c      ****             {
 738:.\main.c      ****                 elbow_state = elbw_wait;
 739:.\main.c      ****             }
 740:.\main.c      ****             break;
 2349              		.loc 1 740 0
 2350 01be 0FE0     		b	.L141
 2351              	.L170:
 738:.\main.c      ****                 elbow_state = elbw_wait;
 2352              		.loc 1 738 0
 2353 01c0 094B     		ldr	r3, .L175
 2354 01c2 0322     		mov	r2, #3
 2355 01c4 1A70     		strb	r2, [r3]
 2356              		.loc 1 740 0
 2357 01c6 0BE0     		b	.L141
 2358              	.L169:
 741:.\main.c      ****         
 742:.\main.c      ****         case elbw_wait:
 743:.\main.c      ****             if(new_pack)
 2359              		.loc 1 743 0
 2360 01c8 0F4B     		ldr	r3, .L175+32
 2361 01ca 1B78     		ldrb	r3, [r3]
 2362 01cc 002B     		cmp	r3, #0
 2363 01ce 03D0     		beq	.L172
 744:.\main.c      ****             {
 745:.\main.c      ****                 elbow_state = elbw_execute;
 2364              		.loc 1 745 0
 2365 01d0 054B     		ldr	r3, .L175
 2366 01d2 0222     		mov	r2, #2
 2367 01d4 1A70     		strb	r2, [r3]
 2368 01d6 02E0     		b	.L173
 2369              	.L172:
 746:.\main.c      ****             }
 747:.\main.c      ****             else
 748:.\main.c      ****             {
 749:.\main.c      ****                 elbow_state = elbw_wait; 
 2370              		.loc 1 749 0
 2371 01d8 034B     		ldr	r3, .L175
 2372 01da 0322     		mov	r2, #3
 2373 01dc 1A70     		strb	r2, [r3]
 2374              	.L173:
 750:.\main.c      ****             }
 751:.\main.c      ****             break;
 2375              		.loc 1 751 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 57


 2376 01de C046     		mov	r8, r8
 2377              	.L141:
 752:.\main.c      ****     }    
 753:.\main.c      **** }
 2378              		.loc 1 753 0
 2379 01e0 BD46     		mov	sp, r7
 2380 01e2 03B0     		add	sp, sp, #12
 2381              		@ sp needed
 2382 01e4 90BD     		pop	{r4, r7, pc}
 2383              	.L176:
 2384 01e6 C046     		.align	2
 2385              	.L175:
 2386 01e8 00000000 		.word	elbow_state
 2387 01ec 00000000 		.word	elbow_array
 2388 01f0 DC050000 		.word	1500
 2389 01f4 00000000 		.word	elbw_arr_cspot
 2390 01f8 00000000 		.word	data_array
 2391 01fc DB050000 		.word	1499
 2392 0200 E7030000 		.word	999
 2393 0204 00000000 		.word	fin_exec
 2394 0208 00000000 		.word	new_pack
 2395              		.cfi_endproc
 2396              	.LFE46:
 2397              		.size	elbow, .-elbow
 2398              		.comm	shoulder_state,1,1
 2399              		.section	.text.shoulder,"ax",%progbits
 2400              		.align	2
 2401              		.global	shoulder
 2402              		.code	16
 2403              		.thumb_func
 2404              		.type	shoulder, %function
 2405              	shoulder:
 2406              	.LFB47:
 754:.\main.c      **** 
 755:.\main.c      **** //control the shoulder
 756:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 757:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 758:.\main.c      **** void shoulder()
 759:.\main.c      **** { 
 2407              		.loc 1 759 0
 2408              		.cfi_startproc
 2409 0000 90B5     		push	{r4, r7, lr}
 2410              		.cfi_def_cfa_offset 12
 2411              		.cfi_offset 4, -12
 2412              		.cfi_offset 7, -8
 2413              		.cfi_offset 14, -4
 2414 0002 85B0     		sub	sp, sp, #20
 2415              		.cfi_def_cfa_offset 32
 2416 0004 02AF     		add	r7, sp, #8
 2417              		.cfi_def_cfa 7, 24
 760:.\main.c      ****     //take instruction from data_array
 761:.\main.c      ****     //smooth input
 762:.\main.c      ****     //actuate the shoulder using PWM
 763:.\main.c      ****     //get feedback
 764:.\main.c      ****     uint8 i;
 765:.\main.c      ****     uint16 avg;
 766:.\main.c      ****     int16 command;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 58


 767:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT);
 2418              		.loc 1 767 0
 2419 0006 3C1D     		add	r4, r7, #4
 2420 0008 0020     		mov	r0, #0
 2421 000a FFF7FEFF 		bl	potFeedback
 2422 000e 031C     		mov	r3, r0
 2423 0010 2380     		strh	r3, [r4]
 768:.\main.c      ****     
 769:.\main.c      ****     switch(shoulder_state){ //actions
 2424              		.loc 1 769 0
 2425 0012 774B     		ldr	r3, .L211
 2426 0014 1B78     		ldrb	r3, [r3]
 2427 0016 012B     		cmp	r3, #1
 2428 0018 07D0     		beq	.L179
 2429 001a 00DC     		bgt	.LCB2259
 2430 001c B6E0     		b	.L210	@long jump
 2431              	.LCB2259:
 2432 001e 022B     		cmp	r3, #2
 2433 0020 1AD0     		beq	.L182
 2434 0022 032B     		cmp	r3, #3
 2435 0024 00D1     		bne	.LCB2263
 2436 0026 A0E0     		b	.L183	@long jump
 2437              	.LCB2263:
 2438 0028 B1E0     		b	.L178
 2439              	.L179:
 770:.\main.c      ****         case shldr_start:
 771:.\main.c      ****             break;
 772:.\main.c      **** 
 773:.\main.c      ****         case shldr_init:
 774:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2440              		.loc 1 774 0
 2441 002a FB1D     		add	r3, r7, #7
 2442 002c 0022     		mov	r2, #0
 2443 002e 1A70     		strb	r2, [r3]
 2444 0030 0AE0     		b	.L184
 2445              	.L185:
 775:.\main.c      ****             {
 776:.\main.c      ****                 shoulder_array[i] = 1500;
 2446              		.loc 1 776 0 discriminator 2
 2447 0032 FB1D     		add	r3, r7, #7
 2448 0034 1A78     		ldrb	r2, [r3]
 2449 0036 6F4B     		ldr	r3, .L211+4
 2450 0038 5200     		lsl	r2, r2, #1
 2451 003a 6F49     		ldr	r1, .L211+8
 2452 003c D152     		strh	r1, [r2, r3]
 774:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2453              		.loc 1 774 0 discriminator 2
 2454 003e FB1D     		add	r3, r7, #7
 2455 0040 1A78     		ldrb	r2, [r3]
 2456 0042 FB1D     		add	r3, r7, #7
 2457 0044 0132     		add	r2, r2, #1
 2458 0046 1A70     		strb	r2, [r3]
 2459              	.L184:
 774:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 2460              		.loc 1 774 0 is_stmt 0 discriminator 1
 2461 0048 FB1D     		add	r3, r7, #7
 2462 004a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 59


 2463 004c 132B     		cmp	r3, #19
 2464 004e F0D9     		bls	.L185
 777:.\main.c      ****             }
 778:.\main.c      ****             shldr_arr_cspot = 0;
 2465              		.loc 1 778 0 is_stmt 1
 2466 0050 6A4B     		ldr	r3, .L211+12
 2467 0052 0022     		mov	r2, #0
 2468 0054 1A70     		strb	r2, [r3]
 779:.\main.c      ****             break;
 2469              		.loc 1 779 0
 2470 0056 9AE0     		b	.L178
 2471              	.L182:
 780:.\main.c      **** 
 781:.\main.c      ****         case shldr_execute:
 782:.\main.c      ****             make_command(shoulder_array, shldr_arr_cspot, data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2472              		.loc 1 782 0
 2473 0058 684B     		ldr	r3, .L211+12
 2474 005a 1A78     		ldrb	r2, [r3]
 2475 005c 6549     		ldr	r1, .L211+4
 2476 005e 684B     		ldr	r3, .L211+16
 2477 0060 0720     		mov	r0, #7
 2478 0062 0090     		str	r0, [sp]
 2479 0064 081C     		mov	r0, r1
 2480 0066 111C     		mov	r1, r2
 2481 0068 1A1C     		mov	r2, r3
 2482 006a 0623     		mov	r3, #6
 2483 006c FFF7FEFF 		bl	make_command
 783:.\main.c      ****             
 784:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 2484              		.loc 1 784 0
 2485 0070 624B     		ldr	r3, .L211+12
 2486 0072 1B78     		ldrb	r3, [r3]
 2487 0074 122B     		cmp	r3, #18
 2488 0076 06D8     		bhi	.L186
 785:.\main.c      ****             {
 786:.\main.c      ****                 shldr_arr_cspot++;
 2489              		.loc 1 786 0
 2490 0078 604B     		ldr	r3, .L211+12
 2491 007a 1B78     		ldrb	r3, [r3]
 2492 007c 0133     		add	r3, r3, #1
 2493 007e DAB2     		uxtb	r2, r3
 2494 0080 5E4B     		ldr	r3, .L211+12
 2495 0082 1A70     		strb	r2, [r3]
 2496 0084 02E0     		b	.L187
 2497              	.L186:
 787:.\main.c      ****             }
 788:.\main.c      ****             else
 789:.\main.c      ****             {
 790:.\main.c      ****                 shldr_arr_cspot = 0;
 2498              		.loc 1 790 0
 2499 0086 5D4B     		ldr	r3, .L211+12
 2500 0088 0022     		mov	r2, #0
 2501 008a 1A70     		strb	r2, [r3]
 2502              	.L187:
 791:.\main.c      ****             }
 792:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 2503              		.loc 1 792 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 60


 2504 008c BC1C     		add	r4, r7, #2
 2505 008e 594B     		ldr	r3, .L211+4
 2506 0090 181C     		mov	r0, r3
 2507 0092 1421     		mov	r1, #20
 2508 0094 FFF7FEFF 		bl	average
 2509 0098 031C     		mov	r3, r0
 2510 009a 2380     		strh	r3, [r4]
 793:.\main.c      ****            
 794:.\main.c      ****             //uint16 feedback = potFeedback(SHOULDER_POT); -- see above
 795:.\main.c      ****             
 796:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND)
 2511              		.loc 1 796 0
 2512 009c 3B1D     		add	r3, r7, #4
 2513 009e 1A88     		ldrh	r2, [r3]
 2514 00a0 8C23     		mov	r3, #140
 2515 00a2 5B00     		lsl	r3, r3, #1
 2516 00a4 9A42     		cmp	r2, r3
 2517 00a6 1FD8     		bhi	.L188
 797:.\main.c      ****             {
 798:.\main.c      ****                 if (avg < 1500)
 2518              		.loc 1 798 0
 2519 00a8 BB1C     		add	r3, r7, #2
 2520 00aa 1A88     		ldrh	r2, [r3]
 2521 00ac 554B     		ldr	r3, .L211+20
 2522 00ae 9A42     		cmp	r2, r3
 2523 00b0 04D8     		bhi	.L189
 799:.\main.c      ****                 {
 800:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2524              		.loc 1 800 0
 2525 00b2 514B     		ldr	r3, .L211+8
 2526 00b4 181C     		mov	r0, r3
 2527 00b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2528 00ba 4FE0     		b	.L192
 2529              	.L189:
 801:.\main.c      ****                 }
 802:.\main.c      ****                 else
 803:.\main.c      ****                 {
 804:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2530              		.loc 1 804 0
 2531 00bc BB1C     		add	r3, r7, #2
 2532 00be 1A88     		ldrh	r2, [r3]
 2533 00c0 FA23     		mov	r3, #250
 2534 00c2 DB00     		lsl	r3, r3, #3
 2535 00c4 9A42     		cmp	r2, r3
 2536 00c6 0AD8     		bhi	.L191
 2537              		.loc 1 804 0 is_stmt 0 discriminator 1
 2538 00c8 BB1C     		add	r3, r7, #2
 2539 00ca 1A88     		ldrh	r2, [r3]
 2540 00cc 4E4B     		ldr	r3, .L211+24
 2541 00ce 9A42     		cmp	r2, r3
 2542 00d0 05D9     		bls	.L191
 805:.\main.c      ****                     {
 806:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2543              		.loc 1 806 0 is_stmt 1
 2544 00d2 BB1C     		add	r3, r7, #2
 2545 00d4 1B88     		ldrh	r3, [r3]
 2546 00d6 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 61


 2547 00d8 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2548 00dc 3EE0     		b	.L192
 2549              	.L191:
 807:.\main.c      ****                     }
 808:.\main.c      ****                     else
 809:.\main.c      ****                     {
 810:.\main.c      ****                         //throw error
 811:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2550              		.loc 1 811 0
 2551 00de 464B     		ldr	r3, .L211+8
 2552 00e0 181C     		mov	r0, r3
 2553 00e2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2554 00e6 39E0     		b	.L192
 2555              	.L188:
 812:.\main.c      ****                     }
 813:.\main.c      ****                 }
 814:.\main.c      ****             }
 815:.\main.c      ****             else if (feedback >= SHOULDER_UPPER_BOUND)
 2556              		.loc 1 815 0
 2557 00e8 3B1D     		add	r3, r7, #4
 2558 00ea 1A88     		ldrh	r2, [r3]
 2559 00ec 474B     		ldr	r3, .L211+28
 2560 00ee 9A42     		cmp	r2, r3
 2561 00f0 1FD9     		bls	.L193
 816:.\main.c      ****             {
 817:.\main.c      ****                 if(avg > 1500)
 2562              		.loc 1 817 0
 2563 00f2 BB1C     		add	r3, r7, #2
 2564 00f4 1A88     		ldrh	r2, [r3]
 2565 00f6 404B     		ldr	r3, .L211+8
 2566 00f8 9A42     		cmp	r2, r3
 2567 00fa 04D9     		bls	.L194
 818:.\main.c      ****                 {
 819:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2568              		.loc 1 819 0
 2569 00fc 3E4B     		ldr	r3, .L211+8
 2570 00fe 181C     		mov	r0, r3
 2571 0100 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2572 0104 2AE0     		b	.L192
 2573              	.L194:
 820:.\main.c      ****                 }
 821:.\main.c      ****                 else
 822:.\main.c      ****                 {
 823:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2574              		.loc 1 823 0
 2575 0106 BB1C     		add	r3, r7, #2
 2576 0108 1A88     		ldrh	r2, [r3]
 2577 010a FA23     		mov	r3, #250
 2578 010c DB00     		lsl	r3, r3, #3
 2579 010e 9A42     		cmp	r2, r3
 2580 0110 0AD8     		bhi	.L196
 2581              		.loc 1 823 0 is_stmt 0 discriminator 1
 2582 0112 BB1C     		add	r3, r7, #2
 2583 0114 1A88     		ldrh	r2, [r3]
 2584 0116 3C4B     		ldr	r3, .L211+24
 2585 0118 9A42     		cmp	r2, r3
 2586 011a 05D9     		bls	.L196
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 62


 824:.\main.c      ****                     {
 825:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 2587              		.loc 1 825 0 is_stmt 1
 2588 011c BB1C     		add	r3, r7, #2
 2589 011e 1B88     		ldrh	r3, [r3]
 2590 0120 181C     		mov	r0, r3
 2591 0122 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2592 0126 19E0     		b	.L192
 2593              	.L196:
 826:.\main.c      ****                     }
 827:.\main.c      ****                     else
 828:.\main.c      ****                     {
 829:.\main.c      ****                         //throw error
 830:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 2594              		.loc 1 830 0
 2595 0128 334B     		ldr	r3, .L211+8
 2596 012a 181C     		mov	r0, r3
 2597 012c FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2598 0130 14E0     		b	.L192
 2599              	.L193:
 831:.\main.c      ****                     }
 832:.\main.c      ****                 }
 833:.\main.c      ****             }
 834:.\main.c      ****             else
 835:.\main.c      ****             {
 836:.\main.c      ****                 if(avg <= 2000 && avg >= 1000)
 2600              		.loc 1 836 0
 2601 0132 BB1C     		add	r3, r7, #2
 2602 0134 1A88     		ldrh	r2, [r3]
 2603 0136 FA23     		mov	r3, #250
 2604 0138 DB00     		lsl	r3, r3, #3
 2605 013a 9A42     		cmp	r2, r3
 2606 013c 0AD8     		bhi	.L197
 2607              		.loc 1 836 0 is_stmt 0 discriminator 1
 2608 013e BB1C     		add	r3, r7, #2
 2609 0140 1A88     		ldrh	r2, [r3]
 2610 0142 314B     		ldr	r3, .L211+24
 2611 0144 9A42     		cmp	r2, r3
 2612 0146 05D9     		bls	.L197
 837:.\main.c      ****                 {
 838:.\main.c      ****                     SHLDR_PWM_WriteCompare(avg);
 2613              		.loc 1 838 0 is_stmt 1
 2614 0148 BB1C     		add	r3, r7, #2
 2615 014a 1B88     		ldrh	r3, [r3]
 2616 014c 181C     		mov	r0, r3
 2617 014e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2618 0152 03E0     		b	.L192
 2619              	.L197:
 839:.\main.c      ****                 }
 840:.\main.c      ****                 else
 841:.\main.c      ****                 {
 842:.\main.c      ****                     //throw error
 843:.\main.c      ****                     SHLDR_PWM_WriteCompare(1500);
 2620              		.loc 1 843 0
 2621 0154 284B     		ldr	r3, .L211+8
 2622 0156 181C     		mov	r0, r3
 2623 0158 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 63


 2624              	.L192:
 844:.\main.c      ****                 }
 845:.\main.c      ****             }
 846:.\main.c      ****             
 847:.\main.c      ****             fin_exec++;
 2625              		.loc 1 847 0
 2626 015c 2C4B     		ldr	r3, .L211+32
 2627 015e 1B78     		ldrb	r3, [r3]
 2628 0160 0133     		add	r3, r3, #1
 2629 0162 DAB2     		uxtb	r2, r3
 2630 0164 2A4B     		ldr	r3, .L211+32
 2631 0166 1A70     		strb	r2, [r3]
 848:.\main.c      ****             break;
 2632              		.loc 1 848 0
 2633 0168 11E0     		b	.L178
 2634              	.L183:
 849:.\main.c      ****             
 850:.\main.c      ****         case shldr_wait:
 851:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 2635              		.loc 1 851 0
 2636 016a 3B1D     		add	r3, r7, #4
 2637 016c 1A88     		ldrh	r2, [r3]
 2638 016e 8C23     		mov	r3, #140
 2639 0170 5B00     		lsl	r3, r3, #1
 2640 0172 9A42     		cmp	r2, r3
 2641 0174 04D9     		bls	.L198
 2642              		.loc 1 851 0 is_stmt 0 discriminator 1
 2643 0176 3B1D     		add	r3, r7, #4
 2644 0178 1A88     		ldrh	r2, [r3]
 2645 017a 244B     		ldr	r3, .L211+28
 2646 017c 9A42     		cmp	r2, r3
 2647 017e 04D9     		bls	.L199
 2648              	.L198:
 852:.\main.c      ****             {
 853:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 2649              		.loc 1 853 0 is_stmt 1
 2650 0180 1D4B     		ldr	r3, .L211+8
 2651 0182 181C     		mov	r0, r3
 2652 0184 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 854:.\main.c      ****             }
 855:.\main.c      ****             break;
 2653              		.loc 1 855 0
 2654 0188 01E0     		b	.L178
 2655              	.L199:
 2656 018a 00E0     		b	.L178
 2657              	.L210:
 771:.\main.c      ****             break;
 2658              		.loc 1 771 0
 2659 018c C046     		mov	r8, r8
 2660              	.L178:
 856:.\main.c      ****     }
 857:.\main.c      ****     
 858:.\main.c      ****     switch(shoulder_state){ //transitions
 2661              		.loc 1 858 0
 2662 018e 184B     		ldr	r3, .L211
 2663 0190 1B78     		ldrb	r3, [r3]
 2664 0192 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 64


 2665 0194 0CD0     		beq	.L201
 2666 0196 02DC     		bgt	.L202
 2667 0198 002B     		cmp	r3, #0
 2668 019a 05D0     		beq	.L203
 2669 019c 24E0     		b	.L177
 2670              	.L202:
 2671 019e 022B     		cmp	r3, #2
 2672 01a0 0AD0     		beq	.L204
 2673 01a2 032B     		cmp	r3, #3
 2674 01a4 14D0     		beq	.L205
 2675 01a6 1FE0     		b	.L177
 2676              	.L203:
 859:.\main.c      ****         case shldr_start:
 860:.\main.c      ****             shoulder_state = shldr_init;
 2677              		.loc 1 860 0
 2678 01a8 114B     		ldr	r3, .L211
 2679 01aa 0122     		mov	r2, #1
 2680 01ac 1A70     		strb	r2, [r3]
 861:.\main.c      ****             break;
 2681              		.loc 1 861 0
 2682 01ae 1BE0     		b	.L177
 2683              	.L201:
 862:.\main.c      ****         
 863:.\main.c      ****         case shldr_init:
 864:.\main.c      ****             shoulder_state = shldr_wait;
 2684              		.loc 1 864 0
 2685 01b0 0F4B     		ldr	r3, .L211
 2686 01b2 0322     		mov	r2, #3
 2687 01b4 1A70     		strb	r2, [r3]
 865:.\main.c      ****             break;
 2688              		.loc 1 865 0
 2689 01b6 17E0     		b	.L177
 2690              	.L204:
 866:.\main.c      ****         
 867:.\main.c      ****         case shldr_execute:
 868:.\main.c      ****             if(new_pack)
 2691              		.loc 1 868 0
 2692 01b8 164B     		ldr	r3, .L211+36
 2693 01ba 1B78     		ldrb	r3, [r3]
 2694 01bc 002B     		cmp	r3, #0
 2695 01be 03D0     		beq	.L206
 869:.\main.c      ****             {
 870:.\main.c      ****                 shoulder_state = shldr_execute;
 2696              		.loc 1 870 0
 2697 01c0 0B4B     		ldr	r3, .L211
 2698 01c2 0222     		mov	r2, #2
 2699 01c4 1A70     		strb	r2, [r3]
 871:.\main.c      ****             }
 872:.\main.c      ****             else
 873:.\main.c      ****             {
 874:.\main.c      ****                 shoulder_state = shldr_wait;
 875:.\main.c      ****             }
 876:.\main.c      ****             break;
 2700              		.loc 1 876 0
 2701 01c6 0FE0     		b	.L177
 2702              	.L206:
 874:.\main.c      ****                 shoulder_state = shldr_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 65


 2703              		.loc 1 874 0
 2704 01c8 094B     		ldr	r3, .L211
 2705 01ca 0322     		mov	r2, #3
 2706 01cc 1A70     		strb	r2, [r3]
 2707              		.loc 1 876 0
 2708 01ce 0BE0     		b	.L177
 2709              	.L205:
 877:.\main.c      ****         
 878:.\main.c      ****         case shldr_wait:
 879:.\main.c      ****             if(new_pack)
 2710              		.loc 1 879 0
 2711 01d0 104B     		ldr	r3, .L211+36
 2712 01d2 1B78     		ldrb	r3, [r3]
 2713 01d4 002B     		cmp	r3, #0
 2714 01d6 03D0     		beq	.L208
 880:.\main.c      ****             {
 881:.\main.c      ****                 shoulder_state = shldr_execute;
 2715              		.loc 1 881 0
 2716 01d8 054B     		ldr	r3, .L211
 2717 01da 0222     		mov	r2, #2
 2718 01dc 1A70     		strb	r2, [r3]
 2719 01de 02E0     		b	.L209
 2720              	.L208:
 882:.\main.c      ****             }
 883:.\main.c      ****             else
 884:.\main.c      ****             {
 885:.\main.c      ****                 shoulder_state = shldr_wait; 
 2721              		.loc 1 885 0
 2722 01e0 034B     		ldr	r3, .L211
 2723 01e2 0322     		mov	r2, #3
 2724 01e4 1A70     		strb	r2, [r3]
 2725              	.L209:
 886:.\main.c      ****             }
 887:.\main.c      ****             break;
 2726              		.loc 1 887 0
 2727 01e6 C046     		mov	r8, r8
 2728              	.L177:
 888:.\main.c      ****     }    
 889:.\main.c      **** }
 2729              		.loc 1 889 0
 2730 01e8 BD46     		mov	sp, r7
 2731 01ea 03B0     		add	sp, sp, #12
 2732              		@ sp needed
 2733 01ec 90BD     		pop	{r4, r7, pc}
 2734              	.L212:
 2735 01ee C046     		.align	2
 2736              	.L211:
 2737 01f0 00000000 		.word	shoulder_state
 2738 01f4 00000000 		.word	shoulder_array
 2739 01f8 DC050000 		.word	1500
 2740 01fc 00000000 		.word	shldr_arr_cspot
 2741 0200 00000000 		.word	data_array
 2742 0204 DB050000 		.word	1499
 2743 0208 E7030000 		.word	999
 2744 020c 1F030000 		.word	799
 2745 0210 00000000 		.word	fin_exec
 2746 0214 00000000 		.word	new_pack
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 66


 2747              		.cfi_endproc
 2748              	.LFE47:
 2749              		.size	shoulder, .-shoulder
 2750              		.comm	baseAzimuth_state,1,1
 2751              		.section	.text.baseAzimuth,"ax",%progbits
 2752              		.align	2
 2753              		.global	baseAzimuth
 2754              		.code	16
 2755              		.thumb_func
 2756              		.type	baseAzimuth, %function
 2757              	baseAzimuth:
 2758              	.LFB48:
 890:.\main.c      **** 
 891:.\main.c      **** //control the turret
 892:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 893:.\main.c      **** void baseAzimuth()
 894:.\main.c      **** { 
 2759              		.loc 1 894 0
 2760              		.cfi_startproc
 2761 0000 90B5     		push	{r4, r7, lr}
 2762              		.cfi_def_cfa_offset 12
 2763              		.cfi_offset 4, -12
 2764              		.cfi_offset 7, -8
 2765              		.cfi_offset 14, -4
 2766 0002 85B0     		sub	sp, sp, #20
 2767              		.cfi_def_cfa_offset 32
 2768 0004 02AF     		add	r7, sp, #8
 2769              		.cfi_def_cfa 7, 24
 895:.\main.c      ****     //take instruction from data_array
 896:.\main.c      ****     //smooth input
 897:.\main.c      ****     //actuate the turret using PWM
 898:.\main.c      ****     uint8 i;
 899:.\main.c      ****     uint16 avg;
 900:.\main.c      ****     
 901:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2770              		.loc 1 901 0
 2771 0006 474B     		ldr	r3, .L237
 2772 0008 1B78     		ldrb	r3, [r3]
 2773 000a 012B     		cmp	r3, #1
 2774 000c 03D0     		beq	.L215
 2775 000e 57DD     		ble	.L236
 2776 0010 022B     		cmp	r3, #2
 2777 0012 17D0     		beq	.L218
 902:.\main.c      ****         case BA_start:
 903:.\main.c      ****             break;
 904:.\main.c      **** 
 905:.\main.c      ****         case BA_init:
 906:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 907:.\main.c      ****             {
 908:.\main.c      ****                 baseAz_array[i] = 1500;
 909:.\main.c      ****             }
 910:.\main.c      ****             BA_arr_cspot = 0;
 911:.\main.c      ****             break;
 912:.\main.c      **** 
 913:.\main.c      ****         case BA_execute:
 914:.\main.c      ****             make_command(baseAz_array, BA_arr_cspot, data_array, BA_BYTE_1, BA_BYTE_2);
 915:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 67


 916:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 917:.\main.c      ****             {
 918:.\main.c      ****                 BA_arr_cspot++;
 919:.\main.c      ****             }
 920:.\main.c      ****             else
 921:.\main.c      ****             {
 922:.\main.c      ****                 BA_arr_cspot = 0;
 923:.\main.c      ****             }
 924:.\main.c      ****             
 925:.\main.c      ****             //pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 926:.\main.c      ****             
 927:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 928:.\main.c      ****             
 929:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 930:.\main.c      ****             {
 931:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 932:.\main.c      ****             }
 933:.\main.c      ****             else
 934:.\main.c      ****             {
 935:.\main.c      ****                 //throw error
 936:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 937:.\main.c      ****             }
 938:.\main.c      ****             fin_exec++;
 939:.\main.c      ****             break;
 940:.\main.c      ****             
 941:.\main.c      ****         case BA_wait:
 942:.\main.c      ****             break;
 2778              		.loc 1 942 0
 2779 0014 55E0     		b	.L214
 2780              	.L215:
 906:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2781              		.loc 1 906 0
 2782 0016 FB1D     		add	r3, r7, #7
 2783 0018 0022     		mov	r2, #0
 2784 001a 1A70     		strb	r2, [r3]
 2785 001c 0AE0     		b	.L220
 2786              	.L221:
 908:.\main.c      ****                 baseAz_array[i] = 1500;
 2787              		.loc 1 908 0 discriminator 2
 2788 001e FB1D     		add	r3, r7, #7
 2789 0020 1A78     		ldrb	r2, [r3]
 2790 0022 414B     		ldr	r3, .L237+4
 2791 0024 5200     		lsl	r2, r2, #1
 2792 0026 4149     		ldr	r1, .L237+8
 2793 0028 D152     		strh	r1, [r2, r3]
 906:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2794              		.loc 1 906 0 discriminator 2
 2795 002a FB1D     		add	r3, r7, #7
 2796 002c 1A78     		ldrb	r2, [r3]
 2797 002e FB1D     		add	r3, r7, #7
 2798 0030 0132     		add	r2, r2, #1
 2799 0032 1A70     		strb	r2, [r3]
 2800              	.L220:
 906:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 2801              		.loc 1 906 0 is_stmt 0 discriminator 1
 2802 0034 FB1D     		add	r3, r7, #7
 2803 0036 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 68


 2804 0038 132B     		cmp	r3, #19
 2805 003a F0D9     		bls	.L221
 910:.\main.c      ****             BA_arr_cspot = 0;
 2806              		.loc 1 910 0 is_stmt 1
 2807 003c 3C4B     		ldr	r3, .L237+12
 2808 003e 0022     		mov	r2, #0
 2809 0040 1A70     		strb	r2, [r3]
 911:.\main.c      ****             break;
 2810              		.loc 1 911 0
 2811 0042 3EE0     		b	.L214
 2812              	.L218:
 914:.\main.c      ****             make_command(baseAz_array, BA_arr_cspot, data_array, BA_BYTE_1, BA_BYTE_2);
 2813              		.loc 1 914 0
 2814 0044 3A4B     		ldr	r3, .L237+12
 2815 0046 1A78     		ldrb	r2, [r3]
 2816 0048 3749     		ldr	r1, .L237+4
 2817 004a 3A4B     		ldr	r3, .L237+16
 2818 004c 0520     		mov	r0, #5
 2819 004e 0090     		str	r0, [sp]
 2820 0050 081C     		mov	r0, r1
 2821 0052 111C     		mov	r1, r2
 2822 0054 1A1C     		mov	r2, r3
 2823 0056 0423     		mov	r3, #4
 2824 0058 FFF7FEFF 		bl	make_command
 916:.\main.c      ****             if(BA_arr_cspot < (BA_ARR_SIZE - 1))
 2825              		.loc 1 916 0
 2826 005c 344B     		ldr	r3, .L237+12
 2827 005e 1B78     		ldrb	r3, [r3]
 2828 0060 122B     		cmp	r3, #18
 2829 0062 06D8     		bhi	.L222
 918:.\main.c      ****                 BA_arr_cspot++;
 2830              		.loc 1 918 0
 2831 0064 324B     		ldr	r3, .L237+12
 2832 0066 1B78     		ldrb	r3, [r3]
 2833 0068 0133     		add	r3, r3, #1
 2834 006a DAB2     		uxtb	r2, r3
 2835 006c 304B     		ldr	r3, .L237+12
 2836 006e 1A70     		strb	r2, [r3]
 2837 0070 02E0     		b	.L223
 2838              	.L222:
 922:.\main.c      ****                 BA_arr_cspot = 0;
 2839              		.loc 1 922 0
 2840 0072 2F4B     		ldr	r3, .L237+12
 2841 0074 0022     		mov	r2, #0
 2842 0076 1A70     		strb	r2, [r3]
 2843              	.L223:
 927:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 2844              		.loc 1 927 0
 2845 0078 3C1D     		add	r4, r7, #4
 2846 007a 2B4B     		ldr	r3, .L237+4
 2847 007c 181C     		mov	r0, r3
 2848 007e 1421     		mov	r1, #20
 2849 0080 FFF7FEFF 		bl	average
 2850 0084 031C     		mov	r3, r0
 2851 0086 2380     		strh	r3, [r4]
 929:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2852              		.loc 1 929 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 69


 2853 0088 3B1D     		add	r3, r7, #4
 2854 008a 1A88     		ldrh	r2, [r3]
 2855 008c FA23     		mov	r3, #250
 2856 008e DB00     		lsl	r3, r3, #3
 2857 0090 9A42     		cmp	r2, r3
 2858 0092 0AD8     		bhi	.L224
 929:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2859              		.loc 1 929 0 is_stmt 0 discriminator 1
 2860 0094 3B1D     		add	r3, r7, #4
 2861 0096 1A88     		ldrh	r2, [r3]
 2862 0098 274B     		ldr	r3, .L237+20
 2863 009a 9A42     		cmp	r2, r3
 2864 009c 05D9     		bls	.L224
 931:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 2865              		.loc 1 931 0 is_stmt 1
 2866 009e 3B1D     		add	r3, r7, #4
 2867 00a0 1B88     		ldrh	r3, [r3]
 2868 00a2 181C     		mov	r0, r3
 2869 00a4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2870 00a8 03E0     		b	.L225
 2871              	.L224:
 936:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 2872              		.loc 1 936 0
 2873 00aa 204B     		ldr	r3, .L237+8
 2874 00ac 181C     		mov	r0, r3
 2875 00ae FFF7FEFF 		bl	BA_PWM_WriteCompare
 2876              	.L225:
 938:.\main.c      ****             fin_exec++;
 2877              		.loc 1 938 0
 2878 00b2 224B     		ldr	r3, .L237+24
 2879 00b4 1B78     		ldrb	r3, [r3]
 2880 00b6 0133     		add	r3, r3, #1
 2881 00b8 DAB2     		uxtb	r2, r3
 2882 00ba 204B     		ldr	r3, .L237+24
 2883 00bc 1A70     		strb	r2, [r3]
 939:.\main.c      ****             break;
 2884              		.loc 1 939 0
 2885 00be 00E0     		b	.L214
 2886              	.L236:
 903:.\main.c      ****             break;
 2887              		.loc 1 903 0
 2888 00c0 C046     		mov	r8, r8
 2889              	.L214:
 943:.\main.c      ****     }
 944:.\main.c      ****     
 945:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 2890              		.loc 1 945 0
 2891 00c2 184B     		ldr	r3, .L237
 2892 00c4 1B78     		ldrb	r3, [r3]
 2893 00c6 012B     		cmp	r3, #1
 2894 00c8 0CD0     		beq	.L227
 2895 00ca 02DC     		bgt	.L228
 2896 00cc 002B     		cmp	r3, #0
 2897 00ce 05D0     		beq	.L229
 2898 00d0 24E0     		b	.L213
 2899              	.L228:
 2900 00d2 022B     		cmp	r3, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 70


 2901 00d4 0AD0     		beq	.L230
 2902 00d6 032B     		cmp	r3, #3
 2903 00d8 14D0     		beq	.L231
 2904 00da 1FE0     		b	.L213
 2905              	.L229:
 946:.\main.c      ****         case BA_start:
 947:.\main.c      ****             baseAzimuth_state = BA_init;
 2906              		.loc 1 947 0
 2907 00dc 114B     		ldr	r3, .L237
 2908 00de 0122     		mov	r2, #1
 2909 00e0 1A70     		strb	r2, [r3]
 948:.\main.c      ****             break;
 2910              		.loc 1 948 0
 2911 00e2 1BE0     		b	.L213
 2912              	.L227:
 949:.\main.c      ****         
 950:.\main.c      ****         case BA_init:
 951:.\main.c      ****             baseAzimuth_state = BA_wait;
 2913              		.loc 1 951 0
 2914 00e4 0F4B     		ldr	r3, .L237
 2915 00e6 0322     		mov	r2, #3
 2916 00e8 1A70     		strb	r2, [r3]
 952:.\main.c      ****             break;
 2917              		.loc 1 952 0
 2918 00ea 17E0     		b	.L213
 2919              	.L230:
 953:.\main.c      ****         
 954:.\main.c      ****         case BA_execute:
 955:.\main.c      ****             if(new_pack)
 2920              		.loc 1 955 0
 2921 00ec 144B     		ldr	r3, .L237+28
 2922 00ee 1B78     		ldrb	r3, [r3]
 2923 00f0 002B     		cmp	r3, #0
 2924 00f2 03D0     		beq	.L232
 956:.\main.c      ****             {
 957:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2925              		.loc 1 957 0
 2926 00f4 0B4B     		ldr	r3, .L237
 2927 00f6 0222     		mov	r2, #2
 2928 00f8 1A70     		strb	r2, [r3]
 958:.\main.c      ****             }
 959:.\main.c      ****             else
 960:.\main.c      ****             {
 961:.\main.c      ****                 baseAzimuth_state = BA_wait;
 962:.\main.c      ****             }
 963:.\main.c      ****             break;
 2929              		.loc 1 963 0
 2930 00fa 0FE0     		b	.L213
 2931              	.L232:
 961:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2932              		.loc 1 961 0
 2933 00fc 094B     		ldr	r3, .L237
 2934 00fe 0322     		mov	r2, #3
 2935 0100 1A70     		strb	r2, [r3]
 2936              		.loc 1 963 0
 2937 0102 0BE0     		b	.L213
 2938              	.L231:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 71


 964:.\main.c      ****         
 965:.\main.c      ****         case BA_wait:
 966:.\main.c      ****             if(new_pack)
 2939              		.loc 1 966 0
 2940 0104 0E4B     		ldr	r3, .L237+28
 2941 0106 1B78     		ldrb	r3, [r3]
 2942 0108 002B     		cmp	r3, #0
 2943 010a 03D0     		beq	.L234
 967:.\main.c      ****             {
 968:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2944              		.loc 1 968 0
 2945 010c 054B     		ldr	r3, .L237
 2946 010e 0222     		mov	r2, #2
 2947 0110 1A70     		strb	r2, [r3]
 2948 0112 02E0     		b	.L235
 2949              	.L234:
 969:.\main.c      ****             }
 970:.\main.c      ****             else
 971:.\main.c      ****             {
 972:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2950              		.loc 1 972 0
 2951 0114 034B     		ldr	r3, .L237
 2952 0116 0322     		mov	r2, #3
 2953 0118 1A70     		strb	r2, [r3]
 2954              	.L235:
 973:.\main.c      ****             }
 974:.\main.c      ****             break;
 2955              		.loc 1 974 0
 2956 011a C046     		mov	r8, r8
 2957              	.L213:
 975:.\main.c      ****     }    
 976:.\main.c      **** }
 2958              		.loc 1 976 0
 2959 011c BD46     		mov	sp, r7
 2960 011e 03B0     		add	sp, sp, #12
 2961              		@ sp needed
 2962 0120 90BD     		pop	{r4, r7, pc}
 2963              	.L238:
 2964 0122 C046     		.align	2
 2965              	.L237:
 2966 0124 00000000 		.word	baseAzimuth_state
 2967 0128 00000000 		.word	baseAz_array
 2968 012c DC050000 		.word	1500
 2969 0130 00000000 		.word	BA_arr_cspot
 2970 0134 00000000 		.word	data_array
 2971 0138 E7030000 		.word	999
 2972 013c 00000000 		.word	fin_exec
 2973 0140 00000000 		.word	new_pack
 2974              		.cfi_endproc
 2975              	.LFE48:
 2976              		.size	baseAzimuth, .-baseAzimuth
 2977              		.section	.text.initialize,"ax",%progbits
 2978              		.align	2
 2979              		.global	initialize
 2980              		.code	16
 2981              		.thumb_func
 2982              		.type	initialize, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 72


 2983              	initialize:
 2984              	.LFB49:
 977:.\main.c      **** 
 978:.\main.c      **** //Initialization function for the program
 979:.\main.c      **** void initialize()
 980:.\main.c      **** {
 2985              		.loc 1 980 0
 2986              		.cfi_startproc
 2987 0000 80B5     		push	{r7, lr}
 2988              		.cfi_def_cfa_offset 8
 2989              		.cfi_offset 7, -8
 2990              		.cfi_offset 14, -4
 2991 0002 00AF     		add	r7, sp, #0
 2992              		.cfi_def_cfa_register 7
 981:.\main.c      ****     //Initialize state variables
 982:.\main.c      ****     baseAzimuth_state = BA_start;
 2993              		.loc 1 982 0
 2994 0004 214B     		ldr	r3, .L240
 2995 0006 0022     		mov	r2, #0
 2996 0008 1A70     		strb	r2, [r3]
 983:.\main.c      ****     wristTilt_state = tilt_start;
 2997              		.loc 1 983 0
 2998 000a 214B     		ldr	r3, .L240+4
 2999 000c 0022     		mov	r2, #0
 3000 000e 1A70     		strb	r2, [r3]
 984:.\main.c      ****     wristRotate_state = rotate_start;
 3001              		.loc 1 984 0
 3002 0010 204B     		ldr	r3, .L240+8
 3003 0012 0022     		mov	r2, #0
 3004 0014 1A70     		strb	r2, [r3]
 985:.\main.c      ****     shoulder_state = shldr_start;
 3005              		.loc 1 985 0
 3006 0016 204B     		ldr	r3, .L240+12
 3007 0018 0022     		mov	r2, #0
 3008 001a 1A70     		strb	r2, [r3]
 986:.\main.c      ****     elbow_state = elbw_start;
 3009              		.loc 1 986 0
 3010 001c 1F4B     		ldr	r3, .L240+16
 3011 001e 0022     		mov	r2, #0
 3012 0020 1A70     		strb	r2, [r3]
 987:.\main.c      ****     
 988:.\main.c      ****     //start all of our components
 989:.\main.c      ****     Clock_pwm_Start();
 3013              		.loc 1 989 0
 3014 0022 FFF7FEFF 		bl	Clock_pwm_Start
 990:.\main.c      ****     Clock_counter_Start();
 3015              		.loc 1 990 0
 3016 0026 FFF7FEFF 		bl	Clock_counter_Start
 991:.\main.c      ****     UART_1_Start();
 3017              		.loc 1 991 0
 3018 002a FFF7FEFF 		bl	UART_1_Start
 992:.\main.c      ****     SHLDR_PWM_Start();
 3019              		.loc 1 992 0
 3020 002e FFF7FEFF 		bl	SHLDR_PWM_Start
 993:.\main.c      ****     BA_PWM_Start();
 3021              		.loc 1 993 0
 3022 0032 FFF7FEFF 		bl	BA_PWM_Start
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 73


 994:.\main.c      ****     ELBW_PWM_Start();
 3023              		.loc 1 994 0
 3024 0036 FFF7FEFF 		bl	ELBW_PWM_Start
 995:.\main.c      ****     
 996:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3025              		.loc 1 996 0
 3026 003a 194B     		ldr	r3, .L240+20
 3027 003c 0420     		mov	r0, #4
 3028 003e 0121     		mov	r1, #1
 3029 0040 1A1C     		mov	r2, r3
 3030 0042 FFF7FEFF 		bl	wiznetInit
 997:.\main.c      ****     
 998:.\main.c      ****     //Initialize the dynamixels
 999:.\main.c      ****     ServoSpeed(0xFE, 100);
 3031              		.loc 1 999 0
 3032 0046 FE20     		mov	r0, #254
 3033 0048 6421     		mov	r1, #100
 3034 004a FFF7FEFF 		bl	ServoSpeed
1000:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3035              		.loc 1 1000 0
 3036 004e 154B     		ldr	r3, .L240+24
 3037 0050 FE20     		mov	r0, #254
 3038 0052 191C     		mov	r1, r3
 3039 0054 FFF7FEFF 		bl	SetServoTorque
1001:.\main.c      ****     
1002:.\main.c      ****     //Initialize our motor drivers
1003:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 3040              		.loc 1 1003 0
 3041 0058 134B     		ldr	r3, .L240+28
 3042 005a 181C     		mov	r0, r3
 3043 005c FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1004:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 3044              		.loc 1 1004 0
 3045 0060 114B     		ldr	r3, .L240+28
 3046 0062 181C     		mov	r0, r3
 3047 0064 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1005:.\main.c      ****     CyDelay(3000);
 3048              		.loc 1 1005 0
 3049 0068 104B     		ldr	r3, .L240+32
 3050 006a 181C     		mov	r0, r3
 3051 006c FFF7FEFF 		bl	CyDelay
1006:.\main.c      ****    
1007:.\main.c      ****     ADC_Start();
 3052              		.loc 1 1007 0
 3053 0070 FFF7FEFF 		bl	ADC_Start
1008:.\main.c      ****     ADC_StartConvert();
 3054              		.loc 1 1008 0
 3055 0074 FFF7FEFF 		bl	ADC_StartConvert
1009:.\main.c      ****     
1010:.\main.c      ****     //helps for generating random arrays
1011:.\main.c      ****     //srand((unsigned) time(&t));
1012:.\main.c      ****     
1013:.\main.c      ****     CyGlobalIntEnable;
 3056              		.loc 1 1013 0
 3057              	@ 1013 ".\main.c" 1
 3058 0078 62B6     		CPSIE   i
 3059              	@ 0 "" 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 74


1014:.\main.c      ****     isr_1_StartEx(timer_isr);
 3060              		.loc 1 1014 0
 3061              		.code	16
 3062 007a 0D4B     		ldr	r3, .L240+36
 3063 007c 181C     		mov	r0, r3
 3064 007e FFF7FEFF 		bl	isr_1_StartEx
1015:.\main.c      ****     Timer_1_Start();
 3065              		.loc 1 1015 0
 3066 0082 FFF7FEFF 		bl	Timer_1_Start
1016:.\main.c      **** }
 3067              		.loc 1 1016 0
 3068 0086 BD46     		mov	sp, r7
 3069              		@ sp needed
 3070 0088 80BD     		pop	{r7, pc}
 3071              	.L241:
 3072 008a C046     		.align	2
 3073              	.L240:
 3074 008c 00000000 		.word	baseAzimuth_state
 3075 0090 00000000 		.word	wristTilt_state
 3076 0094 00000000 		.word	wristRotate_state
 3077 0098 00000000 		.word	shoulder_state
 3078 009c 00000000 		.word	elbow_state
 3079 00a0 87690000 		.word	27015
 3080 00a4 FF030000 		.word	1023
 3081 00a8 DC050000 		.word	1500
 3082 00ac B80B0000 		.word	3000
 3083 00b0 00000000 		.word	timer_isr
 3084              		.cfi_endproc
 3085              	.LFE49:
 3086              		.size	initialize, .-initialize
 3087              		.section	.text.main,"ax",%progbits
 3088              		.align	2
 3089              		.global	main
 3090              		.code	16
 3091              		.thumb_func
 3092              		.type	main, %function
 3093              	main:
 3094              	.LFB50:
1017:.\main.c      **** 
1018:.\main.c      **** int main()
1019:.\main.c      **** {  
 3095              		.loc 1 1019 0
 3096              		.cfi_startproc
 3097 0000 80B5     		push	{r7, lr}
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 7, -8
 3100              		.cfi_offset 14, -4
 3101 0002 84B0     		sub	sp, sp, #16
 3102              		.cfi_def_cfa_offset 24
 3103 0004 00AF     		add	r7, sp, #0
 3104              		.cfi_def_cfa_register 7
1020:.\main.c      ****     //Define variables
1021:.\main.c      ****     time_t t;
1022:.\main.c      ****     uint8 counter;
1023:.\main.c      ****     int direction = 0;
 3105              		.loc 1 1023 0
 3106 0006 0023     		mov	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 75


 3107 0008 3B60     		str	r3, [r7]
1024:.\main.c      ****     int16 temp_val= -1000;
 3108              		.loc 1 1024 0
 3109 000a 3B1C     		mov	r3, r7
 3110 000c 0C33     		add	r3, r3, #12
 3111 000e 454A     		ldr	r2, .L254
 3112 0010 1A80     		strh	r2, [r3]
1025:.\main.c      ****     wiznet = 0;
 3113              		.loc 1 1025 0
 3114 0012 454B     		ldr	r3, .L254+4
 3115 0014 0022     		mov	r2, #0
 3116 0016 1A70     		strb	r2, [r3]
1026:.\main.c      ****     
1027:.\main.c      ****     //for testing
1028:.\main.c      ****     int increasing = 1;
 3117              		.loc 1 1028 0
 3118 0018 0123     		mov	r3, #1
 3119 001a BB60     		str	r3, [r7, #8]
1029:.\main.c      ****     
1030:.\main.c      ****     initialize();
 3120              		.loc 1 1030 0
 3121 001c FFF7FEFF 		bl	initialize
 3122              	.L252:
1031:.\main.c      **** 
1032:.\main.c      ****     for(;;)
1033:.\main.c      ****     {
1034:.\main.c      ****         //check addresses
1035:.\main.c      ****         //TODO get the address bytes from Steve
1036:.\main.c      ****         //TODO at what point should we send feedback?
1037:.\main.c      ****         
1038:.\main.c      ****         if(wiznet) //!WIZ_INT_Read()
 3123              		.loc 1 1038 0
 3124 0020 414B     		ldr	r3, .L254+4
 3125 0022 1B78     		ldrb	r3, [r3]
 3126 0024 002B     		cmp	r3, #0
 3127 0026 0AD0     		beq	.L243
1039:.\main.c      ****         {
1040:.\main.c      ****             //wiznetClearInterrupts();
1041:.\main.c      ****             fill_data_array();
 3128              		.loc 1 1041 0
 3129 0028 FFF7FEFF 		bl	fill_data_array
1042:.\main.c      ****             new_pack = 1;
 3130              		.loc 1 1042 0
 3131 002c 3F4B     		ldr	r3, .L254+8
 3132 002e 0122     		mov	r2, #1
 3133 0030 1A70     		strb	r2, [r3]
1043:.\main.c      ****             fin_exec = 0;
 3134              		.loc 1 1043 0
 3135 0032 3F4B     		ldr	r3, .L254+12
 3136 0034 0022     		mov	r2, #0
 3137 0036 1A70     		strb	r2, [r3]
1044:.\main.c      ****             wiznet = 0;
 3138              		.loc 1 1044 0
 3139 0038 3B4B     		ldr	r3, .L254+4
 3140 003a 0022     		mov	r2, #0
 3141 003c 1A70     		strb	r2, [r3]
 3142              	.L243:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 76


1045:.\main.c      ****         }
1046:.\main.c      ****         
1047:.\main.c      ****         baseAzimuth();
 3143              		.loc 1 1047 0
 3144 003e FFF7FEFF 		bl	baseAzimuth
1048:.\main.c      ****         shoulder();
 3145              		.loc 1 1048 0
 3146 0042 FFF7FEFF 		bl	shoulder
1049:.\main.c      ****         elbow();
 3147              		.loc 1 1049 0
 3148 0046 FFF7FEFF 		bl	elbow
1050:.\main.c      ****         wristTilt();
 3149              		.loc 1 1050 0
 3150 004a FFF7FEFF 		bl	wristTilt
1051:.\main.c      ****         wristRotate();
 3151              		.loc 1 1051 0
 3152 004e FFF7FEFF 		bl	wristRotate
1052:.\main.c      **** 
1053:.\main.c      ****         if(fin_exec == NUM_OF_SM)
 3153              		.loc 1 1053 0
 3154 0052 374B     		ldr	r3, .L254+12
 3155 0054 1B78     		ldrb	r3, [r3]
 3156 0056 052B     		cmp	r3, #5
 3157 0058 03D1     		bne	.L244
1054:.\main.c      ****         {
1055:.\main.c      ****             new_pack = 0;
 3158              		.loc 1 1055 0
 3159 005a 344B     		ldr	r3, .L254+8
 3160 005c 0022     		mov	r2, #0
 3161 005e 1A70     		strb	r2, [r3]
1056:.\main.c      ****         }
1057:.\main.c      ****         
1058:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3162              		.loc 1 1058 0
 3163 0060 FFE7     		b	.L253
 3164              	.L244:
 3165              	.L253:
 3166 0062 C046     		mov	r8, r8
 3167              	.L245:
 3168              		.loc 1 1058 0 is_stmt 0 discriminator 1
 3169 0064 334B     		ldr	r3, .L254+16
 3170 0066 1B78     		ldrb	r3, [r3]
 3171 0068 002B     		cmp	r3, #0
 3172 006a FBD0     		beq	.L245
1059:.\main.c      ****         timerFlag = 0;
 3173              		.loc 1 1059 0 is_stmt 1
 3174 006c 314B     		ldr	r3, .L254+16
 3175 006e 0022     		mov	r2, #0
 3176 0070 1A70     		strb	r2, [r3]
1060:.\main.c      ****         
1061:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1062:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1063:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1064:.\main.c      ****         counter++;
 3177              		.loc 1 1064 0
 3178 0072 3B1C     		mov	r3, r7
 3179 0074 0F33     		add	r3, r3, #15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 77


 3180 0076 1A78     		ldrb	r2, [r3]
 3181 0078 3B1C     		mov	r3, r7
 3182 007a 0F33     		add	r3, r3, #15
 3183 007c 0132     		add	r2, r2, #1
 3184 007e 1A70     		strb	r2, [r3]
1065:.\main.c      ****         
1066:.\main.c      ****         if(counter == 50)
 3185              		.loc 1 1066 0
 3186 0080 3B1C     		mov	r3, r7
 3187 0082 0F33     		add	r3, r3, #15
 3188 0084 1B78     		ldrb	r3, [r3]
 3189 0086 322B     		cmp	r3, #50
 3190 0088 4AD1     		bne	.L246
1067:.\main.c      ****         {
1068:.\main.c      ****         
1069:.\main.c      ****             if(increasing)
 3191              		.loc 1 1069 0
 3192 008a BB68     		ldr	r3, [r7, #8]
 3193 008c 002B     		cmp	r3, #0
 3194 008e 12D0     		beq	.L247
1070:.\main.c      ****             {
1071:.\main.c      ****                 temp_val += 100;
 3195              		.loc 1 1071 0
 3196 0090 3B1C     		mov	r3, r7
 3197 0092 0C33     		add	r3, r3, #12
 3198 0094 1B88     		ldrh	r3, [r3]
 3199 0096 6433     		add	r3, r3, #100
 3200 0098 9AB2     		uxth	r2, r3
 3201 009a 3B1C     		mov	r3, r7
 3202 009c 0C33     		add	r3, r3, #12
 3203 009e 1A80     		strh	r2, [r3]
1072:.\main.c      ****                 if(temp_val == 1000)
 3204              		.loc 1 1072 0
 3205 00a0 3B1C     		mov	r3, r7
 3206 00a2 0C33     		add	r3, r3, #12
 3207 00a4 0021     		mov	r1, #0
 3208 00a6 5A5E     		ldrsh	r2, [r3, r1]
 3209 00a8 FA23     		mov	r3, #250
 3210 00aa 9B00     		lsl	r3, r3, #2
 3211 00ac 9A42     		cmp	r2, r3
 3212 00ae 13D1     		bne	.L249
1073:.\main.c      ****                 {
1074:.\main.c      ****                     increasing = 0;
 3213              		.loc 1 1074 0
 3214 00b0 0023     		mov	r3, #0
 3215 00b2 BB60     		str	r3, [r7, #8]
 3216 00b4 10E0     		b	.L249
 3217              	.L247:
1075:.\main.c      ****                 }
1076:.\main.c      ****             }
1077:.\main.c      ****             else
1078:.\main.c      ****             {
1079:.\main.c      ****                 temp_val -= 100;
 3218              		.loc 1 1079 0
 3219 00b6 3B1C     		mov	r3, r7
 3220 00b8 0C33     		add	r3, r3, #12
 3221 00ba 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 78


 3222 00bc 643B     		sub	r3, r3, #100
 3223 00be 9AB2     		uxth	r2, r3
 3224 00c0 3B1C     		mov	r3, r7
 3225 00c2 0C33     		add	r3, r3, #12
 3226 00c4 1A80     		strh	r2, [r3]
1080:.\main.c      ****                 if(temp_val == -1000)
 3227              		.loc 1 1080 0
 3228 00c6 3B1C     		mov	r3, r7
 3229 00c8 0C33     		add	r3, r3, #12
 3230 00ca 0021     		mov	r1, #0
 3231 00cc 5A5E     		ldrsh	r2, [r3, r1]
 3232 00ce 154B     		ldr	r3, .L254
 3233 00d0 9A42     		cmp	r2, r3
 3234 00d2 01D1     		bne	.L249
1081:.\main.c      ****                 {
1082:.\main.c      ****                     increasing = 1;   
 3235              		.loc 1 1082 0
 3236 00d4 0123     		mov	r3, #1
 3237 00d6 BB60     		str	r3, [r7, #8]
 3238              	.L249:
 3239              	.LBB2:
1083:.\main.c      ****                 }
1084:.\main.c      ****             }
1085:.\main.c      ****             
1086:.\main.c      ****             //uint16 feedback1 = ADC_GetResult16(2);
1087:.\main.c      ****             //int16 forward = 1000;
1088:.\main.c      ****             //int16 backward = -1000;
1089:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3240              		.loc 1 1089 0
 3241 00d8 0023     		mov	r3, #0
 3242 00da 7B60     		str	r3, [r7, #4]
 3243 00dc 15E0     		b	.L250
 3244              	.L251:
1090:.\main.c      ****             {
1091:.\main.c      ****                 //int16 random_number = rand()%2001 - 1000;
1092:.\main.c      ****                 //test_array[i] = random_number >> 8;
1093:.\main.c      ****                 //test_array[i+1] = random_number & 0x00FF;
1094:.\main.c      ****                 test_array[i] = temp_val >> 8;
 3245              		.loc 1 1094 0 discriminator 2
 3246 00de 3B1C     		mov	r3, r7
 3247 00e0 0C33     		add	r3, r3, #12
 3248 00e2 0022     		mov	r2, #0
 3249 00e4 9B5E     		ldrsh	r3, [r3, r2]
 3250 00e6 1B12     		asr	r3, r3, #8
 3251 00e8 9BB2     		uxth	r3, r3
 3252 00ea DAB2     		uxtb	r2, r3
 3253 00ec 1249     		ldr	r1, .L254+20
 3254 00ee 7B68     		ldr	r3, [r7, #4]
 3255 00f0 CB18     		add	r3, r1, r3
 3256 00f2 1A70     		strb	r2, [r3]
1095:.\main.c      ****                 test_array[i+1] = temp_val & 0x00FF;
 3257              		.loc 1 1095 0 discriminator 2
 3258 00f4 7B68     		ldr	r3, [r7, #4]
 3259 00f6 0133     		add	r3, r3, #1
 3260 00f8 3A1C     		mov	r2, r7
 3261 00fa 0C32     		add	r2, r2, #12
 3262 00fc 1288     		ldrh	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 79


 3263 00fe D1B2     		uxtb	r1, r2
 3264 0100 0D4A     		ldr	r2, .L254+20
 3265 0102 D154     		strb	r1, [r2, r3]
1089:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3266              		.loc 1 1089 0 discriminator 2
 3267 0104 7B68     		ldr	r3, [r7, #4]
 3268 0106 0233     		add	r3, r3, #2
 3269 0108 7B60     		str	r3, [r7, #4]
 3270              	.L250:
1089:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 3271              		.loc 1 1089 0 is_stmt 0 discriminator 1
 3272 010a 7B68     		ldr	r3, [r7, #4]
 3273 010c 0D2B     		cmp	r3, #13
 3274 010e E6DD     		ble	.L251
 3275              	.LBE2:
1096:.\main.c      ****             }
1097:.\main.c      ****             counter = 0;
 3276              		.loc 1 1097 0 is_stmt 1
 3277 0110 3B1C     		mov	r3, r7
 3278 0112 0F33     		add	r3, r3, #15
 3279 0114 0022     		mov	r2, #0
 3280 0116 1A70     		strb	r2, [r3]
1098:.\main.c      ****             wiznet = 1;
 3281              		.loc 1 1098 0
 3282 0118 034B     		ldr	r3, .L254+4
 3283 011a 0122     		mov	r2, #1
 3284 011c 1A70     		strb	r2, [r3]
1099:.\main.c      ****         }
1100:.\main.c      ****     }
 3285              		.loc 1 1100 0
 3286 011e 7FE7     		b	.L252
 3287              	.L246:
 3288 0120 7EE7     		b	.L252
 3289              	.L255:
 3290 0122 C046     		.align	2
 3291              	.L254:
 3292 0124 18FCFFFF 		.word	-1000
 3293 0128 00000000 		.word	wiznet
 3294 012c 00000000 		.word	new_pack
 3295 0130 00000000 		.word	fin_exec
 3296 0134 00000000 		.word	timerFlag
 3297 0138 00000000 		.word	test_array
 3298              		.cfi_endproc
 3299              	.LFE50:
 3300              		.size	main, .-main
 3301              		.text
 3302              	.Letext0:
 3303              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 3304              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3305              		.file 4 ".\\main.h"
 3306              		.section	.debug_info,"",%progbits
 3307              	.Ldebug_info0:
 3308 0000 92070000 		.4byte	0x792
 3309 0004 0400     		.2byte	0x4
 3310 0006 00000000 		.4byte	.Ldebug_abbrev0
 3311 000a 04       		.byte	0x4
 3312 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 80


 3313 000c C9040000 		.4byte	.LASF109
 3314 0010 01       		.byte	0x1
 3315 0011 31020000 		.4byte	.LASF110
 3316 0015 43030000 		.4byte	.LASF111
 3317 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3318 001d 00000000 		.4byte	0
 3319 0021 00000000 		.4byte	.Ldebug_line0
 3320 0025 02       		.uleb128 0x2
 3321 0026 01       		.byte	0x1
 3322 0027 06       		.byte	0x6
 3323 0028 5A010000 		.4byte	.LASF0
 3324 002c 02       		.uleb128 0x2
 3325 002d 01       		.byte	0x1
 3326 002e 08       		.byte	0x8
 3327 002f 45020000 		.4byte	.LASF1
 3328 0033 02       		.uleb128 0x2
 3329 0034 02       		.byte	0x2
 3330 0035 05       		.byte	0x5
 3331 0036 3C000000 		.4byte	.LASF2
 3332 003a 02       		.uleb128 0x2
 3333 003b 02       		.byte	0x2
 3334 003c 07       		.byte	0x7
 3335 003d 04030000 		.4byte	.LASF3
 3336 0041 02       		.uleb128 0x2
 3337 0042 04       		.byte	0x4
 3338 0043 05       		.byte	0x5
 3339 0044 B7010000 		.4byte	.LASF4
 3340 0048 02       		.uleb128 0x2
 3341 0049 04       		.byte	0x4
 3342 004a 07       		.byte	0x7
 3343 004b D7020000 		.4byte	.LASF5
 3344 004f 02       		.uleb128 0x2
 3345 0050 08       		.byte	0x8
 3346 0051 05       		.byte	0x5
 3347 0052 97000000 		.4byte	.LASF6
 3348 0056 02       		.uleb128 0x2
 3349 0057 08       		.byte	0x8
 3350 0058 07       		.byte	0x7
 3351 0059 A9020000 		.4byte	.LASF7
 3352 005d 03       		.uleb128 0x3
 3353 005e 04       		.byte	0x4
 3354 005f 05       		.byte	0x5
 3355 0060 696E7400 		.ascii	"int\000"
 3356 0064 02       		.uleb128 0x2
 3357 0065 04       		.byte	0x4
 3358 0066 07       		.byte	0x7
 3359 0067 C0020000 		.4byte	.LASF8
 3360 006b 04       		.uleb128 0x4
 3361 006c 1F020000 		.4byte	.LASF9
 3362 0070 02       		.byte	0x2
 3363 0071 A1       		.byte	0xa1
 3364 0072 2C000000 		.4byte	0x2c
 3365 0076 04       		.uleb128 0x4
 3366 0077 FC000000 		.4byte	.LASF10
 3367 007b 02       		.byte	0x2
 3368 007c A2       		.byte	0xa2
 3369 007d 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 81


 3370 0081 04       		.uleb128 0x4
 3371 0082 13040000 		.4byte	.LASF11
 3372 0086 02       		.byte	0x2
 3373 0087 A3       		.byte	0xa3
 3374 0088 48000000 		.4byte	0x48
 3375 008c 04       		.uleb128 0x4
 3376 008d 9B010000 		.4byte	.LASF12
 3377 0091 02       		.byte	0x2
 3378 0092 A4       		.byte	0xa4
 3379 0093 25000000 		.4byte	0x25
 3380 0097 04       		.uleb128 0x4
 3381 0098 54010000 		.4byte	.LASF13
 3382 009c 02       		.byte	0x2
 3383 009d A5       		.byte	0xa5
 3384 009e 33000000 		.4byte	0x33
 3385 00a2 02       		.uleb128 0x2
 3386 00a3 04       		.byte	0x4
 3387 00a4 04       		.byte	0x4
 3388 00a5 71010000 		.4byte	.LASF14
 3389 00a9 02       		.uleb128 0x2
 3390 00aa 08       		.byte	0x8
 3391 00ab 04       		.byte	0x4
 3392 00ac 9C040000 		.4byte	.LASF15
 3393 00b0 02       		.uleb128 0x2
 3394 00b1 01       		.byte	0x1
 3395 00b2 08       		.byte	0x8
 3396 00b3 3E030000 		.4byte	.LASF16
 3397 00b7 02       		.uleb128 0x2
 3398 00b8 04       		.byte	0x4
 3399 00b9 07       		.byte	0x7
 3400 00ba 53000000 		.4byte	.LASF17
 3401 00be 04       		.uleb128 0x4
 3402 00bf 32040000 		.4byte	.LASF18
 3403 00c3 03       		.byte	0x3
 3404 00c4 7A       		.byte	0x7a
 3405 00c5 41000000 		.4byte	0x41
 3406 00c9 05       		.uleb128 0x5
 3407 00ca 17030000 		.4byte	.LASF24
 3408 00ce 01       		.byte	0x1
 3409 00cf 01       		.byte	0x1
 3410 00d0 9C01     		.2byte	0x19c
 3411 00d2 F5000000 		.4byte	0xf5
 3412 00d6 06       		.uleb128 0x6
 3413 00d7 21000000 		.4byte	.LASF19
 3414 00db 00       		.sleb128 0
 3415 00dc 06       		.uleb128 0x6
 3416 00dd 0C020000 		.4byte	.LASF20
 3417 00e1 01       		.sleb128 1
 3418 00e2 06       		.uleb128 0x6
 3419 00e3 1A040000 		.4byte	.LASF21
 3420 00e7 02       		.sleb128 2
 3421 00e8 06       		.uleb128 0x6
 3422 00e9 EF020000 		.4byte	.LASF22
 3423 00ed 03       		.sleb128 3
 3424 00ee 06       		.uleb128 0x6
 3425 00ef 78020000 		.4byte	.LASF23
 3426 00f3 04       		.sleb128 4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 82


 3427 00f4 00       		.byte	0
 3428 00f5 05       		.uleb128 0x5
 3429 00f6 67000000 		.4byte	.LASF25
 3430 00fa 01       		.byte	0x1
 3431 00fb 01       		.byte	0x1
 3432 00fc 0102     		.2byte	0x201
 3433 00fe 21010000 		.4byte	0x121
 3434 0102 06       		.uleb128 0x6
 3435 0103 46000000 		.4byte	.LASF26
 3436 0107 00       		.sleb128 0
 3437 0108 06       		.uleb128 0x6
 3438 0109 27010000 		.4byte	.LASF27
 3439 010d 01       		.sleb128 1
 3440 010e 06       		.uleb128 0x6
 3441 010f 9A020000 		.4byte	.LASF28
 3442 0113 02       		.sleb128 2
 3443 0114 06       		.uleb128 0x6
 3444 0115 D3010000 		.4byte	.LASF29
 3445 0119 03       		.sleb128 3
 3446 011a 06       		.uleb128 0x6
 3447 011b 8D050000 		.4byte	.LASF30
 3448 011f 04       		.sleb128 4
 3449 0120 00       		.byte	0
 3450 0121 05       		.uleb128 0x5
 3451 0122 31030000 		.4byte	.LASF31
 3452 0126 01       		.byte	0x1
 3453 0127 01       		.byte	0x1
 3454 0128 6902     		.2byte	0x269
 3455 012a 47010000 		.4byte	0x147
 3456 012e 06       		.uleb128 0x6
 3457 012f 77010000 		.4byte	.LASF32
 3458 0133 00       		.sleb128 0
 3459 0134 06       		.uleb128 0x6
 3460 0135 86020000 		.4byte	.LASF33
 3461 0139 01       		.sleb128 1
 3462 013a 06       		.uleb128 0x6
 3463 013b 75050000 		.4byte	.LASF34
 3464 013f 02       		.sleb128 2
 3465 0140 06       		.uleb128 0x6
 3466 0141 50050000 		.4byte	.LASF35
 3467 0145 03       		.sleb128 3
 3468 0146 00       		.byte	0
 3469 0147 05       		.uleb128 0x5
 3470 0148 C4000000 		.4byte	.LASF36
 3471 014c 01       		.byte	0x1
 3472 014d 01       		.byte	0x1
 3473 014e F502     		.2byte	0x2f5
 3474 0150 6D010000 		.4byte	0x16d
 3475 0154 06       		.uleb128 0x6
 3476 0155 25020000 		.4byte	.LASF37
 3477 0159 00       		.sleb128 0
 3478 015a 06       		.uleb128 0x6
 3479 015b 16000000 		.4byte	.LASF38
 3480 015f 01       		.sleb128 1
 3481 0160 06       		.uleb128 0x6
 3482 0161 B6000000 		.4byte	.LASF39
 3483 0165 02       		.sleb128 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 83


 3484 0166 06       		.uleb128 0x6
 3485 0167 F9020000 		.4byte	.LASF40
 3486 016b 03       		.sleb128 3
 3487 016c 00       		.byte	0
 3488 016d 05       		.uleb128 0x5
 3489 016e C0010000 		.4byte	.LASF41
 3490 0172 01       		.byte	0x1
 3491 0173 01       		.byte	0x1
 3492 0174 7C03     		.2byte	0x37c
 3493 0176 93010000 		.4byte	0x193
 3494 017a 06       		.uleb128 0x6
 3495 017b 0D000000 		.4byte	.LASF42
 3496 017f 00       		.sleb128 0
 3497 0180 06       		.uleb128 0x6
 3498 0181 AE000000 		.4byte	.LASF43
 3499 0185 01       		.sleb128 1
 3500 0186 06       		.uleb128 0x6
 3501 0187 5C000000 		.4byte	.LASF44
 3502 018b 02       		.sleb128 2
 3503 018c 06       		.uleb128 0x6
 3504 018d 3D010000 		.4byte	.LASF45
 3505 0191 03       		.sleb128 3
 3506 0192 00       		.byte	0
 3507 0193 07       		.uleb128 0x7
 3508 0194 AB040000 		.4byte	.LASF49
 3509 0198 01       		.byte	0x1
 3510 0199 0A       		.byte	0xa
 3511 019a 00000000 		.4byte	.LFB34
 3512 019e 28000000 		.4byte	.LFE34-.LFB34
 3513 01a2 01       		.uleb128 0x1
 3514 01a3 9C       		.byte	0x9c
 3515 01a4 B7010000 		.4byte	0x1b7
 3516 01a8 08       		.uleb128 0x8
 3517 01a9 53020000 		.4byte	.LASF48
 3518 01ad 01       		.byte	0x1
 3519 01ae 0C       		.byte	0xc
 3520 01af 81000000 		.4byte	0x81
 3521 01b3 02       		.uleb128 0x2
 3522 01b4 91       		.byte	0x91
 3523 01b5 74       		.sleb128 -12
 3524 01b6 00       		.byte	0
 3525 01b7 09       		.uleb128 0x9
 3526 01b8 5A050000 		.4byte	.LASF64
 3527 01bc 01       		.byte	0x1
 3528 01bd 32       		.byte	0x32
 3529 01be 76000000 		.4byte	0x76
 3530 01c2 00000000 		.4byte	.LFB35
 3531 01c6 78000000 		.4byte	.LFE35-.LFB35
 3532 01ca 01       		.uleb128 0x1
 3533 01cb 9C       		.byte	0x9c
 3534 01cc 15020000 		.4byte	0x215
 3535 01d0 0A       		.uleb128 0xa
 3536 01d1 28030000 		.4byte	.LASF46
 3537 01d5 01       		.byte	0x1
 3538 01d6 32       		.byte	0x32
 3539 01d7 15020000 		.4byte	0x215
 3540 01db 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 84


 3541 01dc 91       		.byte	0x91
 3542 01dd 64       		.sleb128 -28
 3543 01de 0A       		.uleb128 0xa
 3544 01df 90020000 		.4byte	.LASF47
 3545 01e3 01       		.byte	0x1
 3546 01e4 32       		.byte	0x32
 3547 01e5 6B000000 		.4byte	0x6b
 3548 01e9 02       		.uleb128 0x2
 3549 01ea 91       		.byte	0x91
 3550 01eb 63       		.sleb128 -29
 3551 01ec 0B       		.uleb128 0xb
 3552 01ed 6900     		.ascii	"i\000"
 3553 01ef 01       		.byte	0x1
 3554 01f0 34       		.byte	0x34
 3555 01f1 6B000000 		.4byte	0x6b
 3556 01f5 02       		.uleb128 0x2
 3557 01f6 91       		.byte	0x91
 3558 01f7 77       		.sleb128 -9
 3559 01f8 0B       		.uleb128 0xb
 3560 01f9 73756D00 		.ascii	"sum\000"
 3561 01fd 01       		.byte	0x1
 3562 01fe 35       		.byte	0x35
 3563 01ff 81000000 		.4byte	0x81
 3564 0203 02       		.uleb128 0x2
 3565 0204 91       		.byte	0x91
 3566 0205 70       		.sleb128 -16
 3567 0206 0B       		.uleb128 0xb
 3568 0207 61766700 		.ascii	"avg\000"
 3569 020b 01       		.byte	0x1
 3570 020c 36       		.byte	0x36
 3571 020d 76000000 		.4byte	0x76
 3572 0211 02       		.uleb128 0x2
 3573 0212 91       		.byte	0x91
 3574 0213 6E       		.sleb128 -18
 3575 0214 00       		.byte	0
 3576 0215 0C       		.uleb128 0xc
 3577 0216 04       		.byte	0x4
 3578 0217 76000000 		.4byte	0x76
 3579 021b 0D       		.uleb128 0xd
 3580 021c 27040000 		.4byte	.LASF50
 3581 0220 01       		.byte	0x1
 3582 0221 42       		.byte	0x42
 3583 0222 00000000 		.4byte	.LFB36
 3584 0226 84050000 		.4byte	.LFE36-.LFB36
 3585 022a 01       		.uleb128 0x1
 3586 022b 9C       		.byte	0x9c
 3587 022c 69020000 		.4byte	0x269
 3588 0230 0A       		.uleb128 0xa
 3589 0231 AC030000 		.4byte	.LASF51
 3590 0235 01       		.byte	0x1
 3591 0236 42       		.byte	0x42
 3592 0237 6B000000 		.4byte	0x6b
 3593 023b 02       		.uleb128 0x2
 3594 023c 91       		.byte	0x91
 3595 023d 77       		.sleb128 -9
 3596 023e 0A       		.uleb128 0xa
 3597 023f 39040000 		.4byte	.LASF52
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 85


 3598 0243 01       		.byte	0x1
 3599 0244 42       		.byte	0x42
 3600 0245 15020000 		.4byte	0x215
 3601 0249 02       		.uleb128 0x2
 3602 024a 91       		.byte	0x91
 3603 024b 70       		.sleb128 -16
 3604 024c 0A       		.uleb128 0xa
 3605 024d 3F040000 		.4byte	.LASF53
 3606 0251 01       		.byte	0x1
 3607 0252 42       		.byte	0x42
 3608 0253 6B000000 		.4byte	0x6b
 3609 0257 02       		.uleb128 0x2
 3610 0258 91       		.byte	0x91
 3611 0259 76       		.sleb128 -10
 3612 025a 0A       		.uleb128 0xa
 3613 025b 6D050000 		.4byte	.LASF54
 3614 025f 01       		.byte	0x1
 3615 0260 42       		.byte	0x42
 3616 0261 76000000 		.4byte	0x76
 3617 0265 02       		.uleb128 0x2
 3618 0266 91       		.byte	0x91
 3619 0267 74       		.sleb128 -12
 3620 0268 00       		.byte	0
 3621 0269 0E       		.uleb128 0xe
 3622 026a AA010000 		.4byte	.LASF55
 3623 026e 01       		.byte	0x1
 3624 026f 3F01     		.2byte	0x13f
 3625 0271 00000000 		.4byte	.LFB37
 3626 0275 9C000000 		.4byte	.LFE37-.LFB37
 3627 0279 01       		.uleb128 0x1
 3628 027a 9C       		.byte	0x9c
 3629 027b 07030000 		.4byte	0x307
 3630 027f 0F       		.uleb128 0xf
 3631 0280 A2030000 		.4byte	.LASF56
 3632 0284 01       		.byte	0x1
 3633 0285 3F01     		.2byte	0x13f
 3634 0287 15020000 		.4byte	0x215
 3635 028b 02       		.uleb128 0x2
 3636 028c 91       		.byte	0x91
 3637 028d 6C       		.sleb128 -20
 3638 028e 0F       		.uleb128 0xf
 3639 028f CD020000 		.4byte	.LASF57
 3640 0293 01       		.byte	0x1
 3641 0294 3F01     		.2byte	0x13f
 3642 0296 6B000000 		.4byte	0x6b
 3643 029a 02       		.uleb128 0x2
 3644 029b 91       		.byte	0x91
 3645 029c 6B       		.sleb128 -21
 3646 029d 0F       		.uleb128 0xf
 3647 029e FF030000 		.4byte	.LASF58
 3648 02a2 01       		.byte	0x1
 3649 02a3 3F01     		.2byte	0x13f
 3650 02a5 07030000 		.4byte	0x307
 3651 02a9 02       		.uleb128 0x2
 3652 02aa 91       		.byte	0x91
 3653 02ab 64       		.sleb128 -28
 3654 02ac 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 86


 3655 02ad 78040000 		.4byte	.LASF59
 3656 02b1 01       		.byte	0x1
 3657 02b2 3F01     		.2byte	0x13f
 3658 02b4 6B000000 		.4byte	0x6b
 3659 02b8 02       		.uleb128 0x2
 3660 02b9 91       		.byte	0x91
 3661 02ba 6A       		.sleb128 -22
 3662 02bb 0F       		.uleb128 0xf
 3663 02bc 72020000 		.4byte	.LASF60
 3664 02c0 01       		.byte	0x1
 3665 02c1 3F01     		.2byte	0x13f
 3666 02c3 6B000000 		.4byte	0x6b
 3667 02c7 02       		.uleb128 0x2
 3668 02c8 91       		.byte	0x91
 3669 02c9 00       		.sleb128 0
 3670 02ca 10       		.uleb128 0x10
 3671 02cb 6D050000 		.4byte	.LASF54
 3672 02cf 01       		.byte	0x1
 3673 02d0 4101     		.2byte	0x141
 3674 02d2 97000000 		.4byte	0x97
 3675 02d6 02       		.uleb128 0x2
 3676 02d7 91       		.byte	0x91
 3677 02d8 70       		.sleb128 -16
 3678 02d9 10       		.uleb128 0x10
 3679 02da 8A040000 		.4byte	.LASF61
 3680 02de 01       		.byte	0x1
 3681 02df 4201     		.2byte	0x142
 3682 02e1 97000000 		.4byte	0x97
 3683 02e5 02       		.uleb128 0x2
 3684 02e6 91       		.byte	0x91
 3685 02e7 76       		.sleb128 -10
 3686 02e8 10       		.uleb128 0x10
 3687 02e9 90040000 		.4byte	.LASF62
 3688 02ed 01       		.byte	0x1
 3689 02ee 4301     		.2byte	0x143
 3690 02f0 97000000 		.4byte	0x97
 3691 02f4 02       		.uleb128 0x2
 3692 02f5 91       		.byte	0x91
 3693 02f6 74       		.sleb128 -12
 3694 02f7 10       		.uleb128 0x10
 3695 02f8 96040000 		.4byte	.LASF63
 3696 02fc 01       		.byte	0x1
 3697 02fd 4401     		.2byte	0x144
 3698 02ff 97000000 		.4byte	0x97
 3699 0303 02       		.uleb128 0x2
 3700 0304 91       		.byte	0x91
 3701 0305 72       		.sleb128 -14
 3702 0306 00       		.byte	0
 3703 0307 0C       		.uleb128 0xc
 3704 0308 04       		.byte	0x4
 3705 0309 8C000000 		.4byte	0x8c
 3706 030d 11       		.uleb128 0x11
 3707 030e 5C040000 		.4byte	.LASF65
 3708 0312 01       		.byte	0x1
 3709 0313 4D01     		.2byte	0x14d
 3710 0315 76000000 		.4byte	0x76
 3711 0319 00000000 		.4byte	.LFB38
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 87


 3712 031d 20000000 		.4byte	.LFE38-.LFB38
 3713 0321 01       		.uleb128 0x1
 3714 0322 9C       		.byte	0x9c
 3715 0323 46030000 		.4byte	0x346
 3716 0327 0F       		.uleb128 0xf
 3717 0328 DB030000 		.4byte	.LASF66
 3718 032c 01       		.byte	0x1
 3719 032d 4D01     		.2byte	0x14d
 3720 032f 81000000 		.4byte	0x81
 3721 0333 02       		.uleb128 0x2
 3722 0334 91       		.byte	0x91
 3723 0335 6C       		.sleb128 -20
 3724 0336 10       		.uleb128 0x10
 3725 0337 F6010000 		.4byte	.LASF67
 3726 033b 01       		.byte	0x1
 3727 033c 5001     		.2byte	0x150
 3728 033e 76000000 		.4byte	0x76
 3729 0342 02       		.uleb128 0x2
 3730 0343 91       		.byte	0x91
 3731 0344 76       		.sleb128 -10
 3732 0345 00       		.byte	0
 3733 0346 12       		.uleb128 0x12
 3734 0347 E8010000 		.4byte	.LASF81
 3735 034b 01       		.byte	0x1
 3736 034c 5401     		.2byte	0x154
 3737 034e 00000000 		.4byte	.LFB39
 3738 0352 08000000 		.4byte	.LFE39-.LFB39
 3739 0356 01       		.uleb128 0x1
 3740 0357 9C       		.byte	0x9c
 3741 0358 13       		.uleb128 0x13
 3742 0359 2C000000 		.4byte	.LASF75
 3743 035d 01       		.byte	0x1
 3744 035e 5D01     		.2byte	0x15d
 3745 0360 00000000 		.4byte	.LFB40
 3746 0364 44000000 		.4byte	.LFE40-.LFB40
 3747 0368 01       		.uleb128 0x1
 3748 0369 9C       		.byte	0x9c
 3749 036a 7C030000 		.4byte	0x37c
 3750 036e 14       		.uleb128 0x14
 3751 036f 6900     		.ascii	"i\000"
 3752 0371 01       		.byte	0x1
 3753 0372 6001     		.2byte	0x160
 3754 0374 6B000000 		.4byte	0x6b
 3755 0378 02       		.uleb128 0x2
 3756 0379 91       		.byte	0x91
 3757 037a 77       		.sleb128 -9
 3758 037b 00       		.byte	0
 3759 037c 15       		.uleb128 0x15
 3760 037d B4030000 		.4byte	.LASF68
 3761 0381 01       		.byte	0x1
 3762 0382 6701     		.2byte	0x167
 3763 0384 00000000 		.4byte	.LFB41
 3764 0388 98000000 		.4byte	.LFE41-.LFB41
 3765 038c 01       		.uleb128 0x1
 3766 038d 9C       		.byte	0x9c
 3767 038e C0030000 		.4byte	0x3c0
 3768 0392 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 88


 3769 0393 A3040000 		.4byte	.LASF69
 3770 0397 01       		.byte	0x1
 3771 0398 6701     		.2byte	0x167
 3772 039a 6B000000 		.4byte	0x6b
 3773 039e 02       		.uleb128 0x2
 3774 039f 91       		.byte	0x91
 3775 03a0 67       		.sleb128 -25
 3776 03a1 0F       		.uleb128 0xf
 3777 03a2 16020000 		.4byte	.LASF70
 3778 03a6 01       		.byte	0x1
 3779 03a7 6701     		.2byte	0x167
 3780 03a9 76000000 		.4byte	0x76
 3781 03ad 02       		.uleb128 0x2
 3782 03ae 91       		.byte	0x91
 3783 03af 64       		.sleb128 -28
 3784 03b0 10       		.uleb128 0x10
 3785 03b1 39040000 		.4byte	.LASF52
 3786 03b5 01       		.byte	0x1
 3787 03b6 6901     		.2byte	0x169
 3788 03b8 C0030000 		.4byte	0x3c0
 3789 03bc 02       		.uleb128 0x2
 3790 03bd 91       		.byte	0x91
 3791 03be 6C       		.sleb128 -20
 3792 03bf 00       		.byte	0
 3793 03c0 16       		.uleb128 0x16
 3794 03c1 6B000000 		.4byte	0x6b
 3795 03c5 D0030000 		.4byte	0x3d0
 3796 03c9 17       		.uleb128 0x17
 3797 03ca B7000000 		.4byte	0xb7
 3798 03ce 08       		.byte	0x8
 3799 03cf 00       		.byte	0
 3800 03d0 15       		.uleb128 0x15
 3801 03d1 45010000 		.4byte	.LASF71
 3802 03d5 01       		.byte	0x1
 3803 03d6 7801     		.2byte	0x178
 3804 03d8 00000000 		.4byte	.LFB42
 3805 03dc 98000000 		.4byte	.LFE42-.LFB42
 3806 03e0 01       		.uleb128 0x1
 3807 03e1 9C       		.byte	0x9c
 3808 03e2 14040000 		.4byte	0x414
 3809 03e6 0F       		.uleb128 0xf
 3810 03e7 A3040000 		.4byte	.LASF69
 3811 03eb 01       		.byte	0x1
 3812 03ec 7801     		.2byte	0x178
 3813 03ee 6B000000 		.4byte	0x6b
 3814 03f2 02       		.uleb128 0x2
 3815 03f3 91       		.byte	0x91
 3816 03f4 67       		.sleb128 -25
 3817 03f5 0F       		.uleb128 0xf
 3818 03f6 7A000000 		.4byte	.LASF72
 3819 03fa 01       		.byte	0x1
 3820 03fb 7801     		.2byte	0x178
 3821 03fd 76000000 		.4byte	0x76
 3822 0401 02       		.uleb128 0x2
 3823 0402 91       		.byte	0x91
 3824 0403 64       		.sleb128 -28
 3825 0404 10       		.uleb128 0x10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 89


 3826 0405 39040000 		.4byte	.LASF52
 3827 0409 01       		.byte	0x1
 3828 040a 7A01     		.2byte	0x17a
 3829 040c C0030000 		.4byte	0x3c0
 3830 0410 02       		.uleb128 0x2
 3831 0411 91       		.byte	0x91
 3832 0412 6C       		.sleb128 -20
 3833 0413 00       		.byte	0
 3834 0414 15       		.uleb128 0x15
 3835 0415 BE040000 		.4byte	.LASF73
 3836 0419 01       		.byte	0x1
 3837 041a 8A01     		.2byte	0x18a
 3838 041c 00000000 		.4byte	.LFB43
 3839 0420 98000000 		.4byte	.LFE43-.LFB43
 3840 0424 01       		.uleb128 0x1
 3841 0425 9C       		.byte	0x9c
 3842 0426 58040000 		.4byte	0x458
 3843 042a 0F       		.uleb128 0xf
 3844 042b A3040000 		.4byte	.LASF69
 3845 042f 01       		.byte	0x1
 3846 0430 8A01     		.2byte	0x18a
 3847 0432 6B000000 		.4byte	0x6b
 3848 0436 02       		.uleb128 0x2
 3849 0437 91       		.byte	0x91
 3850 0438 67       		.sleb128 -25
 3851 0439 0F       		.uleb128 0xf
 3852 043a E9020000 		.4byte	.LASF74
 3853 043e 01       		.byte	0x1
 3854 043f 8A01     		.2byte	0x18a
 3855 0441 76000000 		.4byte	0x76
 3856 0445 02       		.uleb128 0x2
 3857 0446 91       		.byte	0x91
 3858 0447 64       		.sleb128 -28
 3859 0448 10       		.uleb128 0x10
 3860 0449 39040000 		.4byte	.LASF52
 3861 044d 01       		.byte	0x1
 3862 044e 8C01     		.2byte	0x18c
 3863 0450 C0030000 		.4byte	0x3c0
 3864 0454 02       		.uleb128 0x2
 3865 0455 91       		.byte	0x91
 3866 0456 6C       		.sleb128 -20
 3867 0457 00       		.byte	0
 3868 0458 18       		.uleb128 0x18
 3869 0459 A0010000 		.4byte	.LASF76
 3870 045d 01       		.byte	0x1
 3871 045e 9E01     		.2byte	0x19e
 3872 0460 00000000 		.4byte	.LFB44
 3873 0464 48010000 		.4byte	.LFE44-.LFB44
 3874 0468 01       		.uleb128 0x1
 3875 0469 9C       		.byte	0x9c
 3876 046a 8B040000 		.4byte	0x48b
 3877 046e 14       		.uleb128 0x14
 3878 046f 6900     		.ascii	"i\000"
 3879 0471 01       		.byte	0x1
 3880 0472 AE01     		.2byte	0x1ae
 3881 0474 6B000000 		.4byte	0x6b
 3882 0478 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 90


 3883 0479 91       		.byte	0x91
 3884 047a 6F       		.sleb128 -17
 3885 047b 14       		.uleb128 0x14
 3886 047c 61766700 		.ascii	"avg\000"
 3887 0480 01       		.byte	0x1
 3888 0481 AF01     		.2byte	0x1af
 3889 0483 76000000 		.4byte	0x76
 3890 0487 02       		.uleb128 0x2
 3891 0488 91       		.byte	0x91
 3892 0489 6C       		.sleb128 -20
 3893 048a 00       		.byte	0
 3894 048b 18       		.uleb128 0x18
 3895 048c 12010000 		.4byte	.LASF77
 3896 0490 01       		.byte	0x1
 3897 0491 0302     		.2byte	0x203
 3898 0493 00000000 		.4byte	.LFB45
 3899 0497 48010000 		.4byte	.LFE45-.LFB45
 3900 049b 01       		.uleb128 0x1
 3901 049c 9C       		.byte	0x9c
 3902 049d BE040000 		.4byte	0x4be
 3903 04a1 14       		.uleb128 0x14
 3904 04a2 6900     		.ascii	"i\000"
 3905 04a4 01       		.byte	0x1
 3906 04a5 1302     		.2byte	0x213
 3907 04a7 6B000000 		.4byte	0x6b
 3908 04ab 02       		.uleb128 0x2
 3909 04ac 91       		.byte	0x91
 3910 04ad 6F       		.sleb128 -17
 3911 04ae 14       		.uleb128 0x14
 3912 04af 61766700 		.ascii	"avg\000"
 3913 04b3 01       		.byte	0x1
 3914 04b4 1402     		.2byte	0x214
 3915 04b6 76000000 		.4byte	0x76
 3916 04ba 02       		.uleb128 0x2
 3917 04bb 91       		.byte	0x91
 3918 04bc 6C       		.sleb128 -20
 3919 04bd 00       		.byte	0
 3920 04be 18       		.uleb128 0x18
 3921 04bf F6000000 		.4byte	.LASF78
 3922 04c3 01       		.byte	0x1
 3923 04c4 6A02     		.2byte	0x26a
 3924 04c6 00000000 		.4byte	.LFB46
 3925 04ca 0C020000 		.4byte	.LFE46-.LFB46
 3926 04ce 01       		.uleb128 0x1
 3927 04cf 9C       		.byte	0x9c
 3928 04d0 00050000 		.4byte	0x500
 3929 04d4 14       		.uleb128 0x14
 3930 04d5 6900     		.ascii	"i\000"
 3931 04d7 01       		.byte	0x1
 3932 04d8 7002     		.2byte	0x270
 3933 04da 6B000000 		.4byte	0x6b
 3934 04de 02       		.uleb128 0x2
 3935 04df 91       		.byte	0x91
 3936 04e0 6F       		.sleb128 -17
 3937 04e1 14       		.uleb128 0x14
 3938 04e2 61766700 		.ascii	"avg\000"
 3939 04e6 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 91


 3940 04e7 7102     		.2byte	0x271
 3941 04e9 76000000 		.4byte	0x76
 3942 04ed 02       		.uleb128 0x2
 3943 04ee 91       		.byte	0x91
 3944 04ef 6A       		.sleb128 -22
 3945 04f0 10       		.uleb128 0x10
 3946 04f1 F6010000 		.4byte	.LASF67
 3947 04f5 01       		.byte	0x1
 3948 04f6 7302     		.2byte	0x273
 3949 04f8 76000000 		.4byte	0x76
 3950 04fc 02       		.uleb128 0x2
 3951 04fd 91       		.byte	0x91
 3952 04fe 6C       		.sleb128 -20
 3953 04ff 00       		.byte	0
 3954 0500 18       		.uleb128 0x18
 3955 0501 0A040000 		.4byte	.LASF79
 3956 0505 01       		.byte	0x1
 3957 0506 F602     		.2byte	0x2f6
 3958 0508 00000000 		.4byte	.LFB47
 3959 050c 18020000 		.4byte	.LFE47-.LFB47
 3960 0510 01       		.uleb128 0x1
 3961 0511 9C       		.byte	0x9c
 3962 0512 4E050000 		.4byte	0x54e
 3963 0516 14       		.uleb128 0x14
 3964 0517 6900     		.ascii	"i\000"
 3965 0519 01       		.byte	0x1
 3966 051a FC02     		.2byte	0x2fc
 3967 051c 6B000000 		.4byte	0x6b
 3968 0520 02       		.uleb128 0x2
 3969 0521 91       		.byte	0x91
 3970 0522 6F       		.sleb128 -17
 3971 0523 14       		.uleb128 0x14
 3972 0524 61766700 		.ascii	"avg\000"
 3973 0528 01       		.byte	0x1
 3974 0529 FD02     		.2byte	0x2fd
 3975 052b 76000000 		.4byte	0x76
 3976 052f 02       		.uleb128 0x2
 3977 0530 91       		.byte	0x91
 3978 0531 6A       		.sleb128 -22
 3979 0532 19       		.uleb128 0x19
 3980 0533 6D050000 		.4byte	.LASF54
 3981 0537 01       		.byte	0x1
 3982 0538 FE02     		.2byte	0x2fe
 3983 053a 97000000 		.4byte	0x97
 3984 053e 10       		.uleb128 0x10
 3985 053f F6010000 		.4byte	.LASF67
 3986 0543 01       		.byte	0x1
 3987 0544 FF02     		.2byte	0x2ff
 3988 0546 76000000 		.4byte	0x76
 3989 054a 02       		.uleb128 0x2
 3990 054b 91       		.byte	0x91
 3991 054c 6C       		.sleb128 -20
 3992 054d 00       		.byte	0
 3993 054e 18       		.uleb128 0x18
 3994 054f 8F010000 		.4byte	.LASF80
 3995 0553 01       		.byte	0x1
 3996 0554 7D03     		.2byte	0x37d
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 92


 3997 0556 00000000 		.4byte	.LFB48
 3998 055a 44010000 		.4byte	.LFE48-.LFB48
 3999 055e 01       		.uleb128 0x1
 4000 055f 9C       		.byte	0x9c
 4001 0560 81050000 		.4byte	0x581
 4002 0564 14       		.uleb128 0x14
 4003 0565 6900     		.ascii	"i\000"
 4004 0567 01       		.byte	0x1
 4005 0568 8203     		.2byte	0x382
 4006 056a 6B000000 		.4byte	0x6b
 4007 056e 02       		.uleb128 0x2
 4008 056f 91       		.byte	0x91
 4009 0570 6F       		.sleb128 -17
 4010 0571 14       		.uleb128 0x14
 4011 0572 61766700 		.ascii	"avg\000"
 4012 0576 01       		.byte	0x1
 4013 0577 8303     		.2byte	0x383
 4014 0579 76000000 		.4byte	0x76
 4015 057d 02       		.uleb128 0x2
 4016 057e 91       		.byte	0x91
 4017 057f 6C       		.sleb128 -20
 4018 0580 00       		.byte	0
 4019 0581 1A       		.uleb128 0x1a
 4020 0582 3A020000 		.4byte	.LASF82
 4021 0586 01       		.byte	0x1
 4022 0587 D303     		.2byte	0x3d3
 4023 0589 00000000 		.4byte	.LFB49
 4024 058d B4000000 		.4byte	.LFE49-.LFB49
 4025 0591 01       		.uleb128 0x1
 4026 0592 9C       		.byte	0x9c
 4027 0593 1B       		.uleb128 0x1b
 4028 0594 88000000 		.4byte	.LASF83
 4029 0598 01       		.byte	0x1
 4030 0599 FA03     		.2byte	0x3fa
 4031 059b 5D000000 		.4byte	0x5d
 4032 059f 00000000 		.4byte	.LFB50
 4033 05a3 3C010000 		.4byte	.LFE50-.LFB50
 4034 05a7 01       		.uleb128 0x1
 4035 05a8 9C       		.byte	0x9c
 4036 05a9 0B060000 		.4byte	0x60b
 4037 05ad 1C       		.uleb128 0x1c
 4038 05ae 7400     		.ascii	"t\000"
 4039 05b0 01       		.byte	0x1
 4040 05b1 FD03     		.2byte	0x3fd
 4041 05b3 BE000000 		.4byte	0xbe
 4042 05b7 10       		.uleb128 0x10
 4043 05b8 5B020000 		.4byte	.LASF84
 4044 05bc 01       		.byte	0x1
 4045 05bd FE03     		.2byte	0x3fe
 4046 05bf 6B000000 		.4byte	0x6b
 4047 05c3 02       		.uleb128 0x2
 4048 05c4 91       		.byte	0x91
 4049 05c5 77       		.sleb128 -9
 4050 05c6 10       		.uleb128 0x10
 4051 05c7 8D000000 		.4byte	.LASF85
 4052 05cb 01       		.byte	0x1
 4053 05cc FF03     		.2byte	0x3ff
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 93


 4054 05ce 5D000000 		.4byte	0x5d
 4055 05d2 02       		.uleb128 0x2
 4056 05d3 91       		.byte	0x91
 4057 05d4 68       		.sleb128 -24
 4058 05d5 10       		.uleb128 0x10
 4059 05d6 C6030000 		.4byte	.LASF86
 4060 05da 01       		.byte	0x1
 4061 05db 0004     		.2byte	0x400
 4062 05dd 97000000 		.4byte	0x97
 4063 05e1 02       		.uleb128 0x2
 4064 05e2 91       		.byte	0x91
 4065 05e3 74       		.sleb128 -12
 4066 05e4 10       		.uleb128 0x10
 4067 05e5 82050000 		.4byte	.LASF87
 4068 05e9 01       		.byte	0x1
 4069 05ea 0404     		.2byte	0x404
 4070 05ec 5D000000 		.4byte	0x5d
 4071 05f0 02       		.uleb128 0x2
 4072 05f1 91       		.byte	0x91
 4073 05f2 70       		.sleb128 -16
 4074 05f3 1D       		.uleb128 0x1d
 4075 05f4 D8000000 		.4byte	.LBB2
 4076 05f8 38000000 		.4byte	.LBE2-.LBB2
 4077 05fc 14       		.uleb128 0x14
 4078 05fd 6900     		.ascii	"i\000"
 4079 05ff 01       		.byte	0x1
 4080 0600 4104     		.2byte	0x441
 4081 0602 5D000000 		.4byte	0x5d
 4082 0606 02       		.uleb128 0x2
 4083 0607 91       		.byte	0x91
 4084 0608 6C       		.sleb128 -20
 4085 0609 00       		.byte	0
 4086 060a 00       		.byte	0
 4087 060b 16       		.uleb128 0x16
 4088 060c 8C000000 		.4byte	0x8c
 4089 0610 1B060000 		.4byte	0x61b
 4090 0614 17       		.uleb128 0x17
 4091 0615 B7000000 		.4byte	0xb7
 4092 0619 0D       		.byte	0xd
 4093 061a 00       		.byte	0
 4094 061b 1E       		.uleb128 0x1e
 4095 061c 62050000 		.4byte	.LASF88
 4096 0620 04       		.byte	0x4
 4097 0621 2A       		.byte	0x2a
 4098 0622 0B060000 		.4byte	0x60b
 4099 0626 05       		.uleb128 0x5
 4100 0627 03       		.byte	0x3
 4101 0628 00000000 		.4byte	data_array
 4102 062c 1E       		.uleb128 0x1e
 4103 062d 81000000 		.4byte	.LASF89
 4104 0631 04       		.byte	0x4
 4105 0632 2C       		.byte	0x2c
 4106 0633 6B000000 		.4byte	0x6b
 4107 0637 05       		.uleb128 0x5
 4108 0638 03       		.byte	0x3
 4109 0639 00000000 		.4byte	wiznet
 4110 063d 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 94


 4111 063e B5040000 		.4byte	.LASF90
 4112 0642 04       		.byte	0x4
 4113 0643 2D       		.byte	0x2d
 4114 0644 6B000000 		.4byte	0x6b
 4115 0648 05       		.uleb128 0x5
 4116 0649 03       		.byte	0x3
 4117 064a 00000000 		.4byte	new_pack
 4118 064e 1E       		.uleb128 0x1e
 4119 064f DF010000 		.4byte	.LASF91
 4120 0653 04       		.byte	0x4
 4121 0654 30       		.byte	0x30
 4122 0655 6B000000 		.4byte	0x6b
 4123 0659 05       		.uleb128 0x5
 4124 065a 03       		.byte	0x3
 4125 065b 00000000 		.4byte	fin_exec
 4126 065f 1E       		.uleb128 0x1e
 4127 0660 66010000 		.4byte	.LASF92
 4128 0664 04       		.byte	0x4
 4129 0665 33       		.byte	0x33
 4130 0666 0B060000 		.4byte	0x60b
 4131 066a 05       		.uleb128 0x5
 4132 066b 03       		.byte	0x3
 4133 066c 00000000 		.4byte	test_array
 4134 0670 1E       		.uleb128 0x1e
 4135 0671 03010000 		.4byte	.LASF93
 4136 0675 04       		.byte	0x4
 4137 0676 36       		.byte	0x36
 4138 0677 6B000000 		.4byte	0x6b
 4139 067b 05       		.uleb128 0x5
 4140 067c 03       		.byte	0x3
 4141 067d 00000000 		.4byte	elbw_arr_cspot
 4142 0681 16       		.uleb128 0x16
 4143 0682 76000000 		.4byte	0x76
 4144 0686 91060000 		.4byte	0x691
 4145 068a 17       		.uleb128 0x17
 4146 068b B7000000 		.4byte	0xb7
 4147 068f 13       		.byte	0x13
 4148 0690 00       		.byte	0
 4149 0691 1E       		.uleb128 0x1e
 4150 0692 CF030000 		.4byte	.LASF94
 4151 0696 04       		.byte	0x4
 4152 0697 37       		.byte	0x37
 4153 0698 81060000 		.4byte	0x681
 4154 069c 05       		.uleb128 0x5
 4155 069d 03       		.byte	0x3
 4156 069e 00000000 		.4byte	elbow_array
 4157 06a2 1E       		.uleb128 0x1e
 4158 06a3 68040000 		.4byte	.LASF95
 4159 06a7 04       		.byte	0x4
 4160 06a8 3A       		.byte	0x3a
 4161 06a9 6B000000 		.4byte	0x6b
 4162 06ad 05       		.uleb128 0x5
 4163 06ae 03       		.byte	0x3
 4164 06af 00000000 		.4byte	shldr_arr_cspot
 4165 06b3 1E       		.uleb128 0x1e
 4166 06b4 F0030000 		.4byte	.LASF96
 4167 06b8 04       		.byte	0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 95


 4168 06b9 3B       		.byte	0x3b
 4169 06ba 81060000 		.4byte	0x681
 4170 06be 05       		.uleb128 0x5
 4171 06bf 03       		.byte	0x3
 4172 06c0 00000000 		.4byte	shoulder_array
 4173 06c4 1E       		.uleb128 0x1e
 4174 06c5 FF010000 		.4byte	.LASF97
 4175 06c9 04       		.byte	0x4
 4176 06ca 3E       		.byte	0x3e
 4177 06cb 6B000000 		.4byte	0x6b
 4178 06cf 05       		.uleb128 0x5
 4179 06d0 03       		.byte	0x3
 4180 06d1 00000000 		.4byte	BA_arr_cspot
 4181 06d5 1E       		.uleb128 0x1e
 4182 06d6 E3030000 		.4byte	.LASF98
 4183 06da 04       		.byte	0x4
 4184 06db 3F       		.byte	0x3f
 4185 06dc 81060000 		.4byte	0x681
 4186 06e0 05       		.uleb128 0x5
 4187 06e1 03       		.byte	0x3
 4188 06e2 00000000 		.4byte	baseAz_array
 4189 06e6 1E       		.uleb128 0x1e
 4190 06e7 82010000 		.4byte	.LASF99
 4191 06eb 04       		.byte	0x4
 4192 06ec 42       		.byte	0x42
 4193 06ed 6B000000 		.4byte	0x6b
 4194 06f1 05       		.uleb128 0x5
 4195 06f2 03       		.byte	0x3
 4196 06f3 00000000 		.4byte	WT_arr_cspot
 4197 06f7 1E       		.uleb128 0x1e
 4198 06f8 1E010000 		.4byte	.LASF100
 4199 06fc 04       		.byte	0x4
 4200 06fd 43       		.byte	0x43
 4201 06fe 81060000 		.4byte	0x681
 4202 0702 05       		.uleb128 0x5
 4203 0703 03       		.byte	0x3
 4204 0704 00000000 		.4byte	WT_array
 4205 0708 1E       		.uleb128 0x1e
 4206 0709 00000000 		.4byte	.LASF101
 4207 070d 04       		.byte	0x4
 4208 070e 46       		.byte	0x46
 4209 070f 6B000000 		.4byte	0x6b
 4210 0713 05       		.uleb128 0x5
 4211 0714 03       		.byte	0x3
 4212 0715 00000000 		.4byte	WR_arr_cspot
 4213 0719 1E       		.uleb128 0x1e
 4214 071a A5000000 		.4byte	.LASF102
 4215 071e 04       		.byte	0x4
 4216 071f 47       		.byte	0x47
 4217 0720 81060000 		.4byte	0x681
 4218 0724 05       		.uleb128 0x5
 4219 0725 03       		.byte	0x3
 4220 0726 00000000 		.4byte	WR_array
 4221 072a 1E       		.uleb128 0x1e
 4222 072b 33010000 		.4byte	.LASF103
 4223 072f 04       		.byte	0x4
 4224 0730 4A       		.byte	0x4a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 96


 4225 0731 6B000000 		.4byte	0x6b
 4226 0735 05       		.uleb128 0x5
 4227 0736 03       		.byte	0x3
 4228 0737 00000000 		.4byte	timerFlag
 4229 073b 1F       		.uleb128 0x1f
 4230 073c E6000000 		.4byte	.LASF104
 4231 0740 01       		.byte	0x1
 4232 0741 9C01     		.2byte	0x19c
 4233 0743 C9000000 		.4byte	0xc9
 4234 0747 05       		.uleb128 0x5
 4235 0748 03       		.byte	0x3
 4236 0749 00000000 		.4byte	wristTilt_state
 4237 074d 1F       		.uleb128 0x1f
 4238 074e 4A040000 		.4byte	.LASF105
 4239 0752 01       		.byte	0x1
 4240 0753 0102     		.2byte	0x201
 4241 0755 F5000000 		.4byte	0xf5
 4242 0759 05       		.uleb128 0x5
 4243 075a 03       		.byte	0x3
 4244 075b 00000000 		.4byte	wristRotate_state
 4245 075f 1F       		.uleb128 0x1f
 4246 0760 7E040000 		.4byte	.LASF106
 4247 0764 01       		.byte	0x1
 4248 0765 6902     		.2byte	0x269
 4249 0767 21010000 		.4byte	0x121
 4250 076b 05       		.uleb128 0x5
 4251 076c 03       		.byte	0x3
 4252 076d 00000000 		.4byte	elbow_state
 4253 0771 1F       		.uleb128 0x1f
 4254 0772 63020000 		.4byte	.LASF107
 4255 0776 01       		.byte	0x1
 4256 0777 F502     		.2byte	0x2f5
 4257 0779 47010000 		.4byte	0x147
 4258 077d 05       		.uleb128 0x5
 4259 077e 03       		.byte	0x3
 4260 077f 00000000 		.4byte	shoulder_state
 4261 0783 1F       		.uleb128 0x1f
 4262 0784 D4000000 		.4byte	.LASF108
 4263 0788 01       		.byte	0x1
 4264 0789 7C03     		.2byte	0x37c
 4265 078b 6D010000 		.4byte	0x16d
 4266 078f 05       		.uleb128 0x5
 4267 0790 03       		.byte	0x3
 4268 0791 00000000 		.4byte	baseAzimuth_state
 4269 0795 00       		.byte	0
 4270              		.section	.debug_abbrev,"",%progbits
 4271              	.Ldebug_abbrev0:
 4272 0000 01       		.uleb128 0x1
 4273 0001 11       		.uleb128 0x11
 4274 0002 01       		.byte	0x1
 4275 0003 25       		.uleb128 0x25
 4276 0004 0E       		.uleb128 0xe
 4277 0005 13       		.uleb128 0x13
 4278 0006 0B       		.uleb128 0xb
 4279 0007 03       		.uleb128 0x3
 4280 0008 0E       		.uleb128 0xe
 4281 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 97


 4282 000a 0E       		.uleb128 0xe
 4283 000b 55       		.uleb128 0x55
 4284 000c 17       		.uleb128 0x17
 4285 000d 11       		.uleb128 0x11
 4286 000e 01       		.uleb128 0x1
 4287 000f 10       		.uleb128 0x10
 4288 0010 17       		.uleb128 0x17
 4289 0011 00       		.byte	0
 4290 0012 00       		.byte	0
 4291 0013 02       		.uleb128 0x2
 4292 0014 24       		.uleb128 0x24
 4293 0015 00       		.byte	0
 4294 0016 0B       		.uleb128 0xb
 4295 0017 0B       		.uleb128 0xb
 4296 0018 3E       		.uleb128 0x3e
 4297 0019 0B       		.uleb128 0xb
 4298 001a 03       		.uleb128 0x3
 4299 001b 0E       		.uleb128 0xe
 4300 001c 00       		.byte	0
 4301 001d 00       		.byte	0
 4302 001e 03       		.uleb128 0x3
 4303 001f 24       		.uleb128 0x24
 4304 0020 00       		.byte	0
 4305 0021 0B       		.uleb128 0xb
 4306 0022 0B       		.uleb128 0xb
 4307 0023 3E       		.uleb128 0x3e
 4308 0024 0B       		.uleb128 0xb
 4309 0025 03       		.uleb128 0x3
 4310 0026 08       		.uleb128 0x8
 4311 0027 00       		.byte	0
 4312 0028 00       		.byte	0
 4313 0029 04       		.uleb128 0x4
 4314 002a 16       		.uleb128 0x16
 4315 002b 00       		.byte	0
 4316 002c 03       		.uleb128 0x3
 4317 002d 0E       		.uleb128 0xe
 4318 002e 3A       		.uleb128 0x3a
 4319 002f 0B       		.uleb128 0xb
 4320 0030 3B       		.uleb128 0x3b
 4321 0031 0B       		.uleb128 0xb
 4322 0032 49       		.uleb128 0x49
 4323 0033 13       		.uleb128 0x13
 4324 0034 00       		.byte	0
 4325 0035 00       		.byte	0
 4326 0036 05       		.uleb128 0x5
 4327 0037 04       		.uleb128 0x4
 4328 0038 01       		.byte	0x1
 4329 0039 03       		.uleb128 0x3
 4330 003a 0E       		.uleb128 0xe
 4331 003b 0B       		.uleb128 0xb
 4332 003c 0B       		.uleb128 0xb
 4333 003d 3A       		.uleb128 0x3a
 4334 003e 0B       		.uleb128 0xb
 4335 003f 3B       		.uleb128 0x3b
 4336 0040 05       		.uleb128 0x5
 4337 0041 01       		.uleb128 0x1
 4338 0042 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 98


 4339 0043 00       		.byte	0
 4340 0044 00       		.byte	0
 4341 0045 06       		.uleb128 0x6
 4342 0046 28       		.uleb128 0x28
 4343 0047 00       		.byte	0
 4344 0048 03       		.uleb128 0x3
 4345 0049 0E       		.uleb128 0xe
 4346 004a 1C       		.uleb128 0x1c
 4347 004b 0D       		.uleb128 0xd
 4348 004c 00       		.byte	0
 4349 004d 00       		.byte	0
 4350 004e 07       		.uleb128 0x7
 4351 004f 2E       		.uleb128 0x2e
 4352 0050 01       		.byte	0x1
 4353 0051 3F       		.uleb128 0x3f
 4354 0052 19       		.uleb128 0x19
 4355 0053 03       		.uleb128 0x3
 4356 0054 0E       		.uleb128 0xe
 4357 0055 3A       		.uleb128 0x3a
 4358 0056 0B       		.uleb128 0xb
 4359 0057 3B       		.uleb128 0x3b
 4360 0058 0B       		.uleb128 0xb
 4361 0059 27       		.uleb128 0x27
 4362 005a 19       		.uleb128 0x19
 4363 005b 11       		.uleb128 0x11
 4364 005c 01       		.uleb128 0x1
 4365 005d 12       		.uleb128 0x12
 4366 005e 06       		.uleb128 0x6
 4367 005f 40       		.uleb128 0x40
 4368 0060 18       		.uleb128 0x18
 4369 0061 9642     		.uleb128 0x2116
 4370 0063 19       		.uleb128 0x19
 4371 0064 01       		.uleb128 0x1
 4372 0065 13       		.uleb128 0x13
 4373 0066 00       		.byte	0
 4374 0067 00       		.byte	0
 4375 0068 08       		.uleb128 0x8
 4376 0069 34       		.uleb128 0x34
 4377 006a 00       		.byte	0
 4378 006b 03       		.uleb128 0x3
 4379 006c 0E       		.uleb128 0xe
 4380 006d 3A       		.uleb128 0x3a
 4381 006e 0B       		.uleb128 0xb
 4382 006f 3B       		.uleb128 0x3b
 4383 0070 0B       		.uleb128 0xb
 4384 0071 49       		.uleb128 0x49
 4385 0072 13       		.uleb128 0x13
 4386 0073 02       		.uleb128 0x2
 4387 0074 18       		.uleb128 0x18
 4388 0075 00       		.byte	0
 4389 0076 00       		.byte	0
 4390 0077 09       		.uleb128 0x9
 4391 0078 2E       		.uleb128 0x2e
 4392 0079 01       		.byte	0x1
 4393 007a 3F       		.uleb128 0x3f
 4394 007b 19       		.uleb128 0x19
 4395 007c 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 99


 4396 007d 0E       		.uleb128 0xe
 4397 007e 3A       		.uleb128 0x3a
 4398 007f 0B       		.uleb128 0xb
 4399 0080 3B       		.uleb128 0x3b
 4400 0081 0B       		.uleb128 0xb
 4401 0082 27       		.uleb128 0x27
 4402 0083 19       		.uleb128 0x19
 4403 0084 49       		.uleb128 0x49
 4404 0085 13       		.uleb128 0x13
 4405 0086 11       		.uleb128 0x11
 4406 0087 01       		.uleb128 0x1
 4407 0088 12       		.uleb128 0x12
 4408 0089 06       		.uleb128 0x6
 4409 008a 40       		.uleb128 0x40
 4410 008b 18       		.uleb128 0x18
 4411 008c 9642     		.uleb128 0x2116
 4412 008e 19       		.uleb128 0x19
 4413 008f 01       		.uleb128 0x1
 4414 0090 13       		.uleb128 0x13
 4415 0091 00       		.byte	0
 4416 0092 00       		.byte	0
 4417 0093 0A       		.uleb128 0xa
 4418 0094 05       		.uleb128 0x5
 4419 0095 00       		.byte	0
 4420 0096 03       		.uleb128 0x3
 4421 0097 0E       		.uleb128 0xe
 4422 0098 3A       		.uleb128 0x3a
 4423 0099 0B       		.uleb128 0xb
 4424 009a 3B       		.uleb128 0x3b
 4425 009b 0B       		.uleb128 0xb
 4426 009c 49       		.uleb128 0x49
 4427 009d 13       		.uleb128 0x13
 4428 009e 02       		.uleb128 0x2
 4429 009f 18       		.uleb128 0x18
 4430 00a0 00       		.byte	0
 4431 00a1 00       		.byte	0
 4432 00a2 0B       		.uleb128 0xb
 4433 00a3 34       		.uleb128 0x34
 4434 00a4 00       		.byte	0
 4435 00a5 03       		.uleb128 0x3
 4436 00a6 08       		.uleb128 0x8
 4437 00a7 3A       		.uleb128 0x3a
 4438 00a8 0B       		.uleb128 0xb
 4439 00a9 3B       		.uleb128 0x3b
 4440 00aa 0B       		.uleb128 0xb
 4441 00ab 49       		.uleb128 0x49
 4442 00ac 13       		.uleb128 0x13
 4443 00ad 02       		.uleb128 0x2
 4444 00ae 18       		.uleb128 0x18
 4445 00af 00       		.byte	0
 4446 00b0 00       		.byte	0
 4447 00b1 0C       		.uleb128 0xc
 4448 00b2 0F       		.uleb128 0xf
 4449 00b3 00       		.byte	0
 4450 00b4 0B       		.uleb128 0xb
 4451 00b5 0B       		.uleb128 0xb
 4452 00b6 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 100


 4453 00b7 13       		.uleb128 0x13
 4454 00b8 00       		.byte	0
 4455 00b9 00       		.byte	0
 4456 00ba 0D       		.uleb128 0xd
 4457 00bb 2E       		.uleb128 0x2e
 4458 00bc 01       		.byte	0x1
 4459 00bd 3F       		.uleb128 0x3f
 4460 00be 19       		.uleb128 0x19
 4461 00bf 03       		.uleb128 0x3
 4462 00c0 0E       		.uleb128 0xe
 4463 00c1 3A       		.uleb128 0x3a
 4464 00c2 0B       		.uleb128 0xb
 4465 00c3 3B       		.uleb128 0x3b
 4466 00c4 0B       		.uleb128 0xb
 4467 00c5 27       		.uleb128 0x27
 4468 00c6 19       		.uleb128 0x19
 4469 00c7 11       		.uleb128 0x11
 4470 00c8 01       		.uleb128 0x1
 4471 00c9 12       		.uleb128 0x12
 4472 00ca 06       		.uleb128 0x6
 4473 00cb 40       		.uleb128 0x40
 4474 00cc 18       		.uleb128 0x18
 4475 00cd 9742     		.uleb128 0x2117
 4476 00cf 19       		.uleb128 0x19
 4477 00d0 01       		.uleb128 0x1
 4478 00d1 13       		.uleb128 0x13
 4479 00d2 00       		.byte	0
 4480 00d3 00       		.byte	0
 4481 00d4 0E       		.uleb128 0xe
 4482 00d5 2E       		.uleb128 0x2e
 4483 00d6 01       		.byte	0x1
 4484 00d7 3F       		.uleb128 0x3f
 4485 00d8 19       		.uleb128 0x19
 4486 00d9 03       		.uleb128 0x3
 4487 00da 0E       		.uleb128 0xe
 4488 00db 3A       		.uleb128 0x3a
 4489 00dc 0B       		.uleb128 0xb
 4490 00dd 3B       		.uleb128 0x3b
 4491 00de 05       		.uleb128 0x5
 4492 00df 27       		.uleb128 0x27
 4493 00e0 19       		.uleb128 0x19
 4494 00e1 11       		.uleb128 0x11
 4495 00e2 01       		.uleb128 0x1
 4496 00e3 12       		.uleb128 0x12
 4497 00e4 06       		.uleb128 0x6
 4498 00e5 40       		.uleb128 0x40
 4499 00e6 18       		.uleb128 0x18
 4500 00e7 9742     		.uleb128 0x2117
 4501 00e9 19       		.uleb128 0x19
 4502 00ea 01       		.uleb128 0x1
 4503 00eb 13       		.uleb128 0x13
 4504 00ec 00       		.byte	0
 4505 00ed 00       		.byte	0
 4506 00ee 0F       		.uleb128 0xf
 4507 00ef 05       		.uleb128 0x5
 4508 00f0 00       		.byte	0
 4509 00f1 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 101


 4510 00f2 0E       		.uleb128 0xe
 4511 00f3 3A       		.uleb128 0x3a
 4512 00f4 0B       		.uleb128 0xb
 4513 00f5 3B       		.uleb128 0x3b
 4514 00f6 05       		.uleb128 0x5
 4515 00f7 49       		.uleb128 0x49
 4516 00f8 13       		.uleb128 0x13
 4517 00f9 02       		.uleb128 0x2
 4518 00fa 18       		.uleb128 0x18
 4519 00fb 00       		.byte	0
 4520 00fc 00       		.byte	0
 4521 00fd 10       		.uleb128 0x10
 4522 00fe 34       		.uleb128 0x34
 4523 00ff 00       		.byte	0
 4524 0100 03       		.uleb128 0x3
 4525 0101 0E       		.uleb128 0xe
 4526 0102 3A       		.uleb128 0x3a
 4527 0103 0B       		.uleb128 0xb
 4528 0104 3B       		.uleb128 0x3b
 4529 0105 05       		.uleb128 0x5
 4530 0106 49       		.uleb128 0x49
 4531 0107 13       		.uleb128 0x13
 4532 0108 02       		.uleb128 0x2
 4533 0109 18       		.uleb128 0x18
 4534 010a 00       		.byte	0
 4535 010b 00       		.byte	0
 4536 010c 11       		.uleb128 0x11
 4537 010d 2E       		.uleb128 0x2e
 4538 010e 01       		.byte	0x1
 4539 010f 3F       		.uleb128 0x3f
 4540 0110 19       		.uleb128 0x19
 4541 0111 03       		.uleb128 0x3
 4542 0112 0E       		.uleb128 0xe
 4543 0113 3A       		.uleb128 0x3a
 4544 0114 0B       		.uleb128 0xb
 4545 0115 3B       		.uleb128 0x3b
 4546 0116 05       		.uleb128 0x5
 4547 0117 27       		.uleb128 0x27
 4548 0118 19       		.uleb128 0x19
 4549 0119 49       		.uleb128 0x49
 4550 011a 13       		.uleb128 0x13
 4551 011b 11       		.uleb128 0x11
 4552 011c 01       		.uleb128 0x1
 4553 011d 12       		.uleb128 0x12
 4554 011e 06       		.uleb128 0x6
 4555 011f 40       		.uleb128 0x40
 4556 0120 18       		.uleb128 0x18
 4557 0121 9742     		.uleb128 0x2117
 4558 0123 19       		.uleb128 0x19
 4559 0124 01       		.uleb128 0x1
 4560 0125 13       		.uleb128 0x13
 4561 0126 00       		.byte	0
 4562 0127 00       		.byte	0
 4563 0128 12       		.uleb128 0x12
 4564 0129 2E       		.uleb128 0x2e
 4565 012a 00       		.byte	0
 4566 012b 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 102


 4567 012c 19       		.uleb128 0x19
 4568 012d 03       		.uleb128 0x3
 4569 012e 0E       		.uleb128 0xe
 4570 012f 3A       		.uleb128 0x3a
 4571 0130 0B       		.uleb128 0xb
 4572 0131 3B       		.uleb128 0x3b
 4573 0132 05       		.uleb128 0x5
 4574 0133 11       		.uleb128 0x11
 4575 0134 01       		.uleb128 0x1
 4576 0135 12       		.uleb128 0x12
 4577 0136 06       		.uleb128 0x6
 4578 0137 40       		.uleb128 0x40
 4579 0138 18       		.uleb128 0x18
 4580 0139 9742     		.uleb128 0x2117
 4581 013b 19       		.uleb128 0x19
 4582 013c 00       		.byte	0
 4583 013d 00       		.byte	0
 4584 013e 13       		.uleb128 0x13
 4585 013f 2E       		.uleb128 0x2e
 4586 0140 01       		.byte	0x1
 4587 0141 3F       		.uleb128 0x3f
 4588 0142 19       		.uleb128 0x19
 4589 0143 03       		.uleb128 0x3
 4590 0144 0E       		.uleb128 0xe
 4591 0145 3A       		.uleb128 0x3a
 4592 0146 0B       		.uleb128 0xb
 4593 0147 3B       		.uleb128 0x3b
 4594 0148 05       		.uleb128 0x5
 4595 0149 11       		.uleb128 0x11
 4596 014a 01       		.uleb128 0x1
 4597 014b 12       		.uleb128 0x12
 4598 014c 06       		.uleb128 0x6
 4599 014d 40       		.uleb128 0x40
 4600 014e 18       		.uleb128 0x18
 4601 014f 9742     		.uleb128 0x2117
 4602 0151 19       		.uleb128 0x19
 4603 0152 01       		.uleb128 0x1
 4604 0153 13       		.uleb128 0x13
 4605 0154 00       		.byte	0
 4606 0155 00       		.byte	0
 4607 0156 14       		.uleb128 0x14
 4608 0157 34       		.uleb128 0x34
 4609 0158 00       		.byte	0
 4610 0159 03       		.uleb128 0x3
 4611 015a 08       		.uleb128 0x8
 4612 015b 3A       		.uleb128 0x3a
 4613 015c 0B       		.uleb128 0xb
 4614 015d 3B       		.uleb128 0x3b
 4615 015e 05       		.uleb128 0x5
 4616 015f 49       		.uleb128 0x49
 4617 0160 13       		.uleb128 0x13
 4618 0161 02       		.uleb128 0x2
 4619 0162 18       		.uleb128 0x18
 4620 0163 00       		.byte	0
 4621 0164 00       		.byte	0
 4622 0165 15       		.uleb128 0x15
 4623 0166 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 103


 4624 0167 01       		.byte	0x1
 4625 0168 3F       		.uleb128 0x3f
 4626 0169 19       		.uleb128 0x19
 4627 016a 03       		.uleb128 0x3
 4628 016b 0E       		.uleb128 0xe
 4629 016c 3A       		.uleb128 0x3a
 4630 016d 0B       		.uleb128 0xb
 4631 016e 3B       		.uleb128 0x3b
 4632 016f 05       		.uleb128 0x5
 4633 0170 27       		.uleb128 0x27
 4634 0171 19       		.uleb128 0x19
 4635 0172 11       		.uleb128 0x11
 4636 0173 01       		.uleb128 0x1
 4637 0174 12       		.uleb128 0x12
 4638 0175 06       		.uleb128 0x6
 4639 0176 40       		.uleb128 0x40
 4640 0177 18       		.uleb128 0x18
 4641 0178 9642     		.uleb128 0x2116
 4642 017a 19       		.uleb128 0x19
 4643 017b 01       		.uleb128 0x1
 4644 017c 13       		.uleb128 0x13
 4645 017d 00       		.byte	0
 4646 017e 00       		.byte	0
 4647 017f 16       		.uleb128 0x16
 4648 0180 01       		.uleb128 0x1
 4649 0181 01       		.byte	0x1
 4650 0182 49       		.uleb128 0x49
 4651 0183 13       		.uleb128 0x13
 4652 0184 01       		.uleb128 0x1
 4653 0185 13       		.uleb128 0x13
 4654 0186 00       		.byte	0
 4655 0187 00       		.byte	0
 4656 0188 17       		.uleb128 0x17
 4657 0189 21       		.uleb128 0x21
 4658 018a 00       		.byte	0
 4659 018b 49       		.uleb128 0x49
 4660 018c 13       		.uleb128 0x13
 4661 018d 2F       		.uleb128 0x2f
 4662 018e 0B       		.uleb128 0xb
 4663 018f 00       		.byte	0
 4664 0190 00       		.byte	0
 4665 0191 18       		.uleb128 0x18
 4666 0192 2E       		.uleb128 0x2e
 4667 0193 01       		.byte	0x1
 4668 0194 3F       		.uleb128 0x3f
 4669 0195 19       		.uleb128 0x19
 4670 0196 03       		.uleb128 0x3
 4671 0197 0E       		.uleb128 0xe
 4672 0198 3A       		.uleb128 0x3a
 4673 0199 0B       		.uleb128 0xb
 4674 019a 3B       		.uleb128 0x3b
 4675 019b 05       		.uleb128 0x5
 4676 019c 11       		.uleb128 0x11
 4677 019d 01       		.uleb128 0x1
 4678 019e 12       		.uleb128 0x12
 4679 019f 06       		.uleb128 0x6
 4680 01a0 40       		.uleb128 0x40
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 104


 4681 01a1 18       		.uleb128 0x18
 4682 01a2 9642     		.uleb128 0x2116
 4683 01a4 19       		.uleb128 0x19
 4684 01a5 01       		.uleb128 0x1
 4685 01a6 13       		.uleb128 0x13
 4686 01a7 00       		.byte	0
 4687 01a8 00       		.byte	0
 4688 01a9 19       		.uleb128 0x19
 4689 01aa 34       		.uleb128 0x34
 4690 01ab 00       		.byte	0
 4691 01ac 03       		.uleb128 0x3
 4692 01ad 0E       		.uleb128 0xe
 4693 01ae 3A       		.uleb128 0x3a
 4694 01af 0B       		.uleb128 0xb
 4695 01b0 3B       		.uleb128 0x3b
 4696 01b1 05       		.uleb128 0x5
 4697 01b2 49       		.uleb128 0x49
 4698 01b3 13       		.uleb128 0x13
 4699 01b4 00       		.byte	0
 4700 01b5 00       		.byte	0
 4701 01b6 1A       		.uleb128 0x1a
 4702 01b7 2E       		.uleb128 0x2e
 4703 01b8 00       		.byte	0
 4704 01b9 3F       		.uleb128 0x3f
 4705 01ba 19       		.uleb128 0x19
 4706 01bb 03       		.uleb128 0x3
 4707 01bc 0E       		.uleb128 0xe
 4708 01bd 3A       		.uleb128 0x3a
 4709 01be 0B       		.uleb128 0xb
 4710 01bf 3B       		.uleb128 0x3b
 4711 01c0 05       		.uleb128 0x5
 4712 01c1 11       		.uleb128 0x11
 4713 01c2 01       		.uleb128 0x1
 4714 01c3 12       		.uleb128 0x12
 4715 01c4 06       		.uleb128 0x6
 4716 01c5 40       		.uleb128 0x40
 4717 01c6 18       		.uleb128 0x18
 4718 01c7 9642     		.uleb128 0x2116
 4719 01c9 19       		.uleb128 0x19
 4720 01ca 00       		.byte	0
 4721 01cb 00       		.byte	0
 4722 01cc 1B       		.uleb128 0x1b
 4723 01cd 2E       		.uleb128 0x2e
 4724 01ce 01       		.byte	0x1
 4725 01cf 3F       		.uleb128 0x3f
 4726 01d0 19       		.uleb128 0x19
 4727 01d1 03       		.uleb128 0x3
 4728 01d2 0E       		.uleb128 0xe
 4729 01d3 3A       		.uleb128 0x3a
 4730 01d4 0B       		.uleb128 0xb
 4731 01d5 3B       		.uleb128 0x3b
 4732 01d6 05       		.uleb128 0x5
 4733 01d7 49       		.uleb128 0x49
 4734 01d8 13       		.uleb128 0x13
 4735 01d9 11       		.uleb128 0x11
 4736 01da 01       		.uleb128 0x1
 4737 01db 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 105


 4738 01dc 06       		.uleb128 0x6
 4739 01dd 40       		.uleb128 0x40
 4740 01de 18       		.uleb128 0x18
 4741 01df 9642     		.uleb128 0x2116
 4742 01e1 19       		.uleb128 0x19
 4743 01e2 01       		.uleb128 0x1
 4744 01e3 13       		.uleb128 0x13
 4745 01e4 00       		.byte	0
 4746 01e5 00       		.byte	0
 4747 01e6 1C       		.uleb128 0x1c
 4748 01e7 34       		.uleb128 0x34
 4749 01e8 00       		.byte	0
 4750 01e9 03       		.uleb128 0x3
 4751 01ea 08       		.uleb128 0x8
 4752 01eb 3A       		.uleb128 0x3a
 4753 01ec 0B       		.uleb128 0xb
 4754 01ed 3B       		.uleb128 0x3b
 4755 01ee 05       		.uleb128 0x5
 4756 01ef 49       		.uleb128 0x49
 4757 01f0 13       		.uleb128 0x13
 4758 01f1 00       		.byte	0
 4759 01f2 00       		.byte	0
 4760 01f3 1D       		.uleb128 0x1d
 4761 01f4 0B       		.uleb128 0xb
 4762 01f5 01       		.byte	0x1
 4763 01f6 11       		.uleb128 0x11
 4764 01f7 01       		.uleb128 0x1
 4765 01f8 12       		.uleb128 0x12
 4766 01f9 06       		.uleb128 0x6
 4767 01fa 00       		.byte	0
 4768 01fb 00       		.byte	0
 4769 01fc 1E       		.uleb128 0x1e
 4770 01fd 34       		.uleb128 0x34
 4771 01fe 00       		.byte	0
 4772 01ff 03       		.uleb128 0x3
 4773 0200 0E       		.uleb128 0xe
 4774 0201 3A       		.uleb128 0x3a
 4775 0202 0B       		.uleb128 0xb
 4776 0203 3B       		.uleb128 0x3b
 4777 0204 0B       		.uleb128 0xb
 4778 0205 49       		.uleb128 0x49
 4779 0206 13       		.uleb128 0x13
 4780 0207 3F       		.uleb128 0x3f
 4781 0208 19       		.uleb128 0x19
 4782 0209 02       		.uleb128 0x2
 4783 020a 18       		.uleb128 0x18
 4784 020b 00       		.byte	0
 4785 020c 00       		.byte	0
 4786 020d 1F       		.uleb128 0x1f
 4787 020e 34       		.uleb128 0x34
 4788 020f 00       		.byte	0
 4789 0210 03       		.uleb128 0x3
 4790 0211 0E       		.uleb128 0xe
 4791 0212 3A       		.uleb128 0x3a
 4792 0213 0B       		.uleb128 0xb
 4793 0214 3B       		.uleb128 0x3b
 4794 0215 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 106


 4795 0216 49       		.uleb128 0x49
 4796 0217 13       		.uleb128 0x13
 4797 0218 3F       		.uleb128 0x3f
 4798 0219 19       		.uleb128 0x19
 4799 021a 02       		.uleb128 0x2
 4800 021b 18       		.uleb128 0x18
 4801 021c 00       		.byte	0
 4802 021d 00       		.byte	0
 4803 021e 00       		.byte	0
 4804              		.section	.debug_aranges,"",%progbits
 4805 0000 9C000000 		.4byte	0x9c
 4806 0004 0200     		.2byte	0x2
 4807 0006 00000000 		.4byte	.Ldebug_info0
 4808 000a 04       		.byte	0x4
 4809 000b 00       		.byte	0
 4810 000c 0000     		.2byte	0
 4811 000e 0000     		.2byte	0
 4812 0010 00000000 		.4byte	.LFB34
 4813 0014 28000000 		.4byte	.LFE34-.LFB34
 4814 0018 00000000 		.4byte	.LFB35
 4815 001c 78000000 		.4byte	.LFE35-.LFB35
 4816 0020 00000000 		.4byte	.LFB36
 4817 0024 84050000 		.4byte	.LFE36-.LFB36
 4818 0028 00000000 		.4byte	.LFB37
 4819 002c 9C000000 		.4byte	.LFE37-.LFB37
 4820 0030 00000000 		.4byte	.LFB38
 4821 0034 20000000 		.4byte	.LFE38-.LFB38
 4822 0038 00000000 		.4byte	.LFB39
 4823 003c 08000000 		.4byte	.LFE39-.LFB39
 4824 0040 00000000 		.4byte	.LFB40
 4825 0044 44000000 		.4byte	.LFE40-.LFB40
 4826 0048 00000000 		.4byte	.LFB41
 4827 004c 98000000 		.4byte	.LFE41-.LFB41
 4828 0050 00000000 		.4byte	.LFB42
 4829 0054 98000000 		.4byte	.LFE42-.LFB42
 4830 0058 00000000 		.4byte	.LFB43
 4831 005c 98000000 		.4byte	.LFE43-.LFB43
 4832 0060 00000000 		.4byte	.LFB44
 4833 0064 48010000 		.4byte	.LFE44-.LFB44
 4834 0068 00000000 		.4byte	.LFB45
 4835 006c 48010000 		.4byte	.LFE45-.LFB45
 4836 0070 00000000 		.4byte	.LFB46
 4837 0074 0C020000 		.4byte	.LFE46-.LFB46
 4838 0078 00000000 		.4byte	.LFB47
 4839 007c 18020000 		.4byte	.LFE47-.LFB47
 4840 0080 00000000 		.4byte	.LFB48
 4841 0084 44010000 		.4byte	.LFE48-.LFB48
 4842 0088 00000000 		.4byte	.LFB49
 4843 008c B4000000 		.4byte	.LFE49-.LFB49
 4844 0090 00000000 		.4byte	.LFB50
 4845 0094 3C010000 		.4byte	.LFE50-.LFB50
 4846 0098 00000000 		.4byte	0
 4847 009c 00000000 		.4byte	0
 4848              		.section	.debug_ranges,"",%progbits
 4849              	.Ldebug_ranges0:
 4850 0000 00000000 		.4byte	.LFB34
 4851 0004 28000000 		.4byte	.LFE34
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 107


 4852 0008 00000000 		.4byte	.LFB35
 4853 000c 78000000 		.4byte	.LFE35
 4854 0010 00000000 		.4byte	.LFB36
 4855 0014 84050000 		.4byte	.LFE36
 4856 0018 00000000 		.4byte	.LFB37
 4857 001c 9C000000 		.4byte	.LFE37
 4858 0020 00000000 		.4byte	.LFB38
 4859 0024 20000000 		.4byte	.LFE38
 4860 0028 00000000 		.4byte	.LFB39
 4861 002c 08000000 		.4byte	.LFE39
 4862 0030 00000000 		.4byte	.LFB40
 4863 0034 44000000 		.4byte	.LFE40
 4864 0038 00000000 		.4byte	.LFB41
 4865 003c 98000000 		.4byte	.LFE41
 4866 0040 00000000 		.4byte	.LFB42
 4867 0044 98000000 		.4byte	.LFE42
 4868 0048 00000000 		.4byte	.LFB43
 4869 004c 98000000 		.4byte	.LFE43
 4870 0050 00000000 		.4byte	.LFB44
 4871 0054 48010000 		.4byte	.LFE44
 4872 0058 00000000 		.4byte	.LFB45
 4873 005c 48010000 		.4byte	.LFE45
 4874 0060 00000000 		.4byte	.LFB46
 4875 0064 0C020000 		.4byte	.LFE46
 4876 0068 00000000 		.4byte	.LFB47
 4877 006c 18020000 		.4byte	.LFE47
 4878 0070 00000000 		.4byte	.LFB48
 4879 0074 44010000 		.4byte	.LFE48
 4880 0078 00000000 		.4byte	.LFB49
 4881 007c B4000000 		.4byte	.LFE49
 4882 0080 00000000 		.4byte	.LFB50
 4883 0084 3C010000 		.4byte	.LFE50
 4884 0088 00000000 		.4byte	0
 4885 008c 00000000 		.4byte	0
 4886              		.section	.debug_line,"",%progbits
 4887              	.Ldebug_line0:
 4888 0000 05050000 		.section	.debug_str,"MS",%progbits,1
 4888      0200CB00 
 4888      00000201 
 4888      FB0E0D00 
 4888      01010101 
 4889              	.LASF101:
 4890 0000 57525F61 		.ascii	"WR_arr_cspot\000"
 4890      72725F63 
 4890      73706F74 
 4890      00
 4891              	.LASF42:
 4892 000d 42415F73 		.ascii	"BA_start\000"
 4892      74617274 
 4892      00
 4893              	.LASF38:
 4894 0016 73686C64 		.ascii	"shldr_init\000"
 4894      725F696E 
 4894      697400
 4895              	.LASF19:
 4896 0021 74696C74 		.ascii	"tilt_start\000"
 4896      5F737461 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 108


 4896      727400
 4897              	.LASF75:
 4898 002c 66696C6C 		.ascii	"fill_data_array\000"
 4898      5F646174 
 4898      615F6172 
 4898      72617900 
 4899              	.LASF2:
 4900 003c 73686F72 		.ascii	"short int\000"
 4900      7420696E 
 4900      7400
 4901              	.LASF26:
 4902 0046 726F7461 		.ascii	"rotate_start\000"
 4902      74655F73 
 4902      74617274 
 4902      00
 4903              	.LASF17:
 4904 0053 73697A65 		.ascii	"sizetype\000"
 4904      74797065 
 4904      00
 4905              	.LASF44:
 4906 005c 42415F65 		.ascii	"BA_execute\000"
 4906      78656375 
 4906      746500
 4907              	.LASF25:
 4908 0067 77726973 		.ascii	"wristRotate_states\000"
 4908      74526F74 
 4908      6174655F 
 4908      73746174 
 4908      657300
 4909              	.LASF72:
 4910 007a 746F7271 		.ascii	"torque\000"
 4910      756500
 4911              	.LASF89:
 4912 0081 77697A6E 		.ascii	"wiznet\000"
 4912      657400
 4913              	.LASF83:
 4914 0088 6D61696E 		.ascii	"main\000"
 4914      00
 4915              	.LASF85:
 4916 008d 64697265 		.ascii	"direction\000"
 4916      6374696F 
 4916      6E00
 4917              	.LASF6:
 4918 0097 6C6F6E67 		.ascii	"long long int\000"
 4918      206C6F6E 
 4918      6720696E 
 4918      7400
 4919              	.LASF102:
 4920 00a5 57525F61 		.ascii	"WR_array\000"
 4920      72726179 
 4920      00
 4921              	.LASF43:
 4922 00ae 42415F69 		.ascii	"BA_init\000"
 4922      6E697400 
 4923              	.LASF39:
 4924 00b6 73686C64 		.ascii	"shldr_execute\000"
 4924      725F6578 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 109


 4924      65637574 
 4924      6500
 4925              	.LASF36:
 4926 00c4 73686F75 		.ascii	"shoulder_states\000"
 4926      6C646572 
 4926      5F737461 
 4926      74657300 
 4927              	.LASF108:
 4928 00d4 62617365 		.ascii	"baseAzimuth_state\000"
 4928      417A696D 
 4928      7574685F 
 4928      73746174 
 4928      6500
 4929              	.LASF104:
 4930 00e6 77726973 		.ascii	"wristTilt_state\000"
 4930      7454696C 
 4930      745F7374 
 4930      61746500 
 4931              	.LASF78:
 4932 00f6 656C626F 		.ascii	"elbow\000"
 4932      7700
 4933              	.LASF10:
 4934 00fc 75696E74 		.ascii	"uint16\000"
 4934      313600
 4935              	.LASF93:
 4936 0103 656C6277 		.ascii	"elbw_arr_cspot\000"
 4936      5F617272 
 4936      5F637370 
 4936      6F7400
 4937              	.LASF77:
 4938 0112 77726973 		.ascii	"wristRotate\000"
 4938      74526F74 
 4938      61746500 
 4939              	.LASF100:
 4940 011e 57545F61 		.ascii	"WT_array\000"
 4940      72726179 
 4940      00
 4941              	.LASF27:
 4942 0127 726F7461 		.ascii	"rotate_init\000"
 4942      74655F69 
 4942      6E697400 
 4943              	.LASF103:
 4944 0133 74696D65 		.ascii	"timerFlag\000"
 4944      72466C61 
 4944      6700
 4945              	.LASF45:
 4946 013d 42415F77 		.ascii	"BA_wait\000"
 4946      61697400 
 4947              	.LASF71:
 4948 0145 53657453 		.ascii	"SetServoTorque\000"
 4948      6572766F 
 4948      546F7271 
 4948      756500
 4949              	.LASF13:
 4950 0154 696E7431 		.ascii	"int16\000"
 4950      3600
 4951              	.LASF0:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 110


 4952 015a 7369676E 		.ascii	"signed char\000"
 4952      65642063 
 4952      68617200 
 4953              	.LASF92:
 4954 0166 74657374 		.ascii	"test_array\000"
 4954      5F617272 
 4954      617900
 4955              	.LASF14:
 4956 0171 666C6F61 		.ascii	"float\000"
 4956      7400
 4957              	.LASF32:
 4958 0177 656C6277 		.ascii	"elbw_start\000"
 4958      5F737461 
 4958      727400
 4959              	.LASF99:
 4960 0182 57545F61 		.ascii	"WT_arr_cspot\000"
 4960      72725F63 
 4960      73706F74 
 4960      00
 4961              	.LASF80:
 4962 018f 62617365 		.ascii	"baseAzimuth\000"
 4962      417A696D 
 4962      75746800 
 4963              	.LASF12:
 4964 019b 696E7438 		.ascii	"int8\000"
 4964      00
 4965              	.LASF76:
 4966 01a0 77726973 		.ascii	"wristTilt\000"
 4966      7454696C 
 4966      7400
 4967              	.LASF55:
 4968 01aa 6D616B65 		.ascii	"make_command\000"
 4968      5F636F6D 
 4968      6D616E64 
 4968      00
 4969              	.LASF4:
 4970 01b7 6C6F6E67 		.ascii	"long int\000"
 4970      20696E74 
 4970      00
 4971              	.LASF41:
 4972 01c0 62617365 		.ascii	"baseAzimuth_states\000"
 4972      417A696D 
 4972      7574685F 
 4972      73746174 
 4972      657300
 4973              	.LASF29:
 4974 01d3 726F7461 		.ascii	"rotate_wait\000"
 4974      74655F77 
 4974      61697400 
 4975              	.LASF91:
 4976 01df 66696E5F 		.ascii	"fin_exec\000"
 4976      65786563 
 4976      00
 4977              	.LASF81:
 4978 01e8 73656E64 		.ascii	"send_feedback\000"
 4978      5F666565 
 4978      64626163 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 111


 4978      6B00
 4979              	.LASF67:
 4980 01f6 66656564 		.ascii	"feedback\000"
 4980      6261636B 
 4980      00
 4981              	.LASF97:
 4982 01ff 42415F61 		.ascii	"BA_arr_cspot\000"
 4982      72725F63 
 4982      73706F74 
 4982      00
 4983              	.LASF20:
 4984 020c 74696C74 		.ascii	"tilt_init\000"
 4984      5F696E69 
 4984      7400
 4985              	.LASF70:
 4986 0216 706F7369 		.ascii	"position\000"
 4986      74696F6E 
 4986      00
 4987              	.LASF9:
 4988 021f 75696E74 		.ascii	"uint8\000"
 4988      3800
 4989              	.LASF37:
 4990 0225 73686C64 		.ascii	"shldr_start\000"
 4990      725F7374 
 4990      61727400 
 4991              	.LASF110:
 4992 0231 2E5C6D61 		.ascii	".\\main.c\000"
 4992      696E2E63 
 4992      00
 4993              	.LASF82:
 4994 023a 696E6974 		.ascii	"initialize\000"
 4994      69616C69 
 4994      7A6500
 4995              	.LASF1:
 4996 0245 756E7369 		.ascii	"unsigned char\000"
 4996      676E6564 
 4996      20636861 
 4996      7200
 4997              	.LASF48:
 4998 0253 6973725F 		.ascii	"isr_var\000"
 4998      76617200 
 4999              	.LASF84:
 5000 025b 636F756E 		.ascii	"counter\000"
 5000      74657200 
 5001              	.LASF107:
 5002 0263 73686F75 		.ascii	"shoulder_state\000"
 5002      6C646572 
 5002      5F737461 
 5002      746500
 5003              	.LASF60:
 5004 0272 62797465 		.ascii	"byte2\000"
 5004      3200
 5005              	.LASF23:
 5006 0278 74696C74 		.ascii	"tilt_feedback\000"
 5006      5F666565 
 5006      64626163 
 5006      6B00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 112


 5007              	.LASF33:
 5008 0286 656C6277 		.ascii	"elbw_init\000"
 5008      5F696E69 
 5008      7400
 5009              	.LASF47:
 5010 0290 6E756D5F 		.ascii	"num_items\000"
 5010      6974656D 
 5010      7300
 5011              	.LASF28:
 5012 029a 726F7461 		.ascii	"rotate_control\000"
 5012      74655F63 
 5012      6F6E7472 
 5012      6F6C00
 5013              	.LASF7:
 5014 02a9 6C6F6E67 		.ascii	"long long unsigned int\000"
 5014      206C6F6E 
 5014      6720756E 
 5014      7369676E 
 5014      65642069 
 5015              	.LASF8:
 5016 02c0 756E7369 		.ascii	"unsigned int\000"
 5016      676E6564 
 5016      20696E74 
 5016      00
 5017              	.LASF57:
 5018 02cd 6163745F 		.ascii	"act_cspot\000"
 5018      6373706F 
 5018      7400
 5019              	.LASF5:
 5020 02d7 6C6F6E67 		.ascii	"long unsigned int\000"
 5020      20756E73 
 5020      69676E65 
 5020      6420696E 
 5020      7400
 5021              	.LASF74:
 5022 02e9 73706565 		.ascii	"speed\000"
 5022      6400
 5023              	.LASF22:
 5024 02ef 74696C74 		.ascii	"tilt_wait\000"
 5024      5F776169 
 5024      7400
 5025              	.LASF40:
 5026 02f9 73686C64 		.ascii	"shldr_wait\000"
 5026      725F7761 
 5026      697400
 5027              	.LASF3:
 5028 0304 73686F72 		.ascii	"short unsigned int\000"
 5028      7420756E 
 5028      7369676E 
 5028      65642069 
 5028      6E7400
 5029              	.LASF24:
 5030 0317 77726973 		.ascii	"wristTilt_states\000"
 5030      7454696C 
 5030      745F7374 
 5030      61746573 
 5030      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 113


 5031              	.LASF46:
 5032 0328 61765F61 		.ascii	"av_array\000"
 5032      72726179 
 5032      00
 5033              	.LASF31:
 5034 0331 656C626F 		.ascii	"elbow_states\000"
 5034      775F7374 
 5034      61746573 
 5034      00
 5035              	.LASF16:
 5036 033e 63686172 		.ascii	"char\000"
 5036      00
 5037              	.LASF111:
 5038 0343 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 5038      73657273 
 5038      5C53616D 
 5038      75656C5C 
 5038      446F6375 
 5039 0371 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 5039      5C61726D 
 5039      5F636F6E 
 5039      74726F6C 
 5039      6C65725F 
 5040 03a1 00       		.ascii	"\000"
 5041              	.LASF56:
 5042 03a2 6163745F 		.ascii	"act_array\000"
 5042      61727261 
 5042      7900
 5043              	.LASF51:
 5044 03ac 6375725F 		.ascii	"cur_pos\000"
 5044      706F7300 
 5045              	.LASF68:
 5046 03b4 53657276 		.ascii	"ServoGoalPosition\000"
 5046      6F476F61 
 5046      6C506F73 
 5046      6974696F 
 5046      6E00
 5047              	.LASF86:
 5048 03c6 74656D70 		.ascii	"temp_val\000"
 5048      5F76616C 
 5048      00
 5049              	.LASF94:
 5050 03cf 656C626F 		.ascii	"elbow_array\000"
 5050      775F6172 
 5050      72617900 
 5051              	.LASF66:
 5052 03db 6368616E 		.ascii	"channel\000"
 5052      6E656C00 
 5053              	.LASF98:
 5054 03e3 62617365 		.ascii	"baseAz_array\000"
 5054      417A5F61 
 5054      72726179 
 5054      00
 5055              	.LASF96:
 5056 03f0 73686F75 		.ascii	"shoulder_array\000"
 5056      6C646572 
 5056      5F617272 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 114


 5056      617900
 5057              	.LASF58:
 5058 03ff 696E666F 		.ascii	"info_array\000"
 5058      5F617272 
 5058      617900
 5059              	.LASF79:
 5060 040a 73686F75 		.ascii	"shoulder\000"
 5060      6C646572 
 5060      00
 5061              	.LASF11:
 5062 0413 75696E74 		.ascii	"uint32\000"
 5062      333200
 5063              	.LASF21:
 5064 041a 74696C74 		.ascii	"tilt_control\000"
 5064      5F636F6E 
 5064      74726F6C 
 5064      00
 5065              	.LASF50:
 5066 0427 706F735F 		.ascii	"pos_to_vel\000"
 5066      746F5F76 
 5066      656C00
 5067              	.LASF18:
 5068 0432 74696D65 		.ascii	"time_t\000"
 5068      5F7400
 5069              	.LASF52:
 5070 0439 61727261 		.ascii	"array\000"
 5070      7900
 5071              	.LASF53:
 5072 043f 41525241 		.ascii	"ARRAY_SIZE\000"
 5072      595F5349 
 5072      5A4500
 5073              	.LASF105:
 5074 044a 77726973 		.ascii	"wristRotate_state\000"
 5074      74526F74 
 5074      6174655F 
 5074      73746174 
 5074      6500
 5075              	.LASF65:
 5076 045c 706F7446 		.ascii	"potFeedback\000"
 5076      65656462 
 5076      61636B00 
 5077              	.LASF95:
 5078 0468 73686C64 		.ascii	"shldr_arr_cspot\000"
 5078      725F6172 
 5078      725F6373 
 5078      706F7400 
 5079              	.LASF59:
 5080 0478 62797465 		.ascii	"byte1\000"
 5080      3100
 5081              	.LASF106:
 5082 047e 656C626F 		.ascii	"elbow_state\000"
 5082      775F7374 
 5082      61746500 
 5083              	.LASF61:
 5084 048a 74656D70 		.ascii	"temp1\000"
 5084      3100
 5085              	.LASF62:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 115


 5086 0490 74656D70 		.ascii	"temp2\000"
 5086      3200
 5087              	.LASF63:
 5088 0496 74656D70 		.ascii	"temp3\000"
 5088      3300
 5089              	.LASF15:
 5090 049c 646F7562 		.ascii	"double\000"
 5090      6C6500
 5091              	.LASF69:
 5092 04a3 73657276 		.ascii	"servoID\000"
 5092      6F494400 
 5093              	.LASF49:
 5094 04ab 74696D65 		.ascii	"timer_isr\000"
 5094      725F6973 
 5094      7200
 5095              	.LASF90:
 5096 04b5 6E65775F 		.ascii	"new_pack\000"
 5096      7061636B 
 5096      00
 5097              	.LASF73:
 5098 04be 53657276 		.ascii	"ServoSpeed\000"
 5098      6F537065 
 5098      656400
 5099              	.LASF109:
 5100 04c9 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 5100      4320342E 
 5100      382E3420 
 5100      32303134 
 5100      30353236 
 5101 04fc 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 5101      20726576 
 5101      6973696F 
 5101      6E203231 
 5101      31333538 
 5102 052f 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 5102      74643D67 
 5102      6E753939 
 5102      202D6666 
 5102      756E6374 
 5103              	.LASF35:
 5104 0550 656C6277 		.ascii	"elbw_wait\000"
 5104      5F776169 
 5104      7400
 5105              	.LASF64:
 5106 055a 61766572 		.ascii	"average\000"
 5106      61676500 
 5107              	.LASF88:
 5108 0562 64617461 		.ascii	"data_array\000"
 5108      5F617272 
 5108      617900
 5109              	.LASF54:
 5110 056d 636F6D6D 		.ascii	"command\000"
 5110      616E6400 
 5111              	.LASF34:
 5112 0575 656C6277 		.ascii	"elbw_execute\000"
 5112      5F657865 
 5112      63757465 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccZn5kKa.s 			page 116


 5112      00
 5113              	.LASF87:
 5114 0582 696E6372 		.ascii	"increasing\000"
 5114      65617369 
 5114      6E6700
 5115              	.LASF30:
 5116 058d 726F7461 		.ascii	"rotate_feedback\000"
 5116      74655F66 
 5116      65656462 
 5116      61636B00 
 5117              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

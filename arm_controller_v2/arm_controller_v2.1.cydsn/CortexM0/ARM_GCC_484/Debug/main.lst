ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ELBOW_UPPER_BOUND
  18              		.data
  19              		.align	2
  20              		.type	ELBOW_UPPER_BOUND, %object
  21              		.size	ELBOW_UPPER_BOUND, 4
  22              	ELBOW_UPPER_BOUND:
  23 0000 E8030000 		.word	1000
  24              		.global	ELBOW_LOWER_BOUND
  25              		.align	2
  26              		.type	ELBOW_LOWER_BOUND, %object
  27              		.size	ELBOW_LOWER_BOUND, 4
  28              	ELBOW_LOWER_BOUND:
  29 0004 64000000 		.word	100
  30              		.global	SHOULDER_UPPER_BOUND
  31              		.align	2
  32              		.type	SHOULDER_UPPER_BOUND, %object
  33              		.size	SHOULDER_UPPER_BOUND, 4
  34              	SHOULDER_UPPER_BOUND:
  35 0008 20030000 		.word	800
  36              		.global	SHOULDER_LOWER_BOUND
  37              		.align	2
  38              		.type	SHOULDER_LOWER_BOUND, %object
  39              		.size	SHOULDER_LOWER_BOUND, 4
  40              	SHOULDER_LOWER_BOUND:
  41 000c 18010000 		.word	280
  42              		.comm	data_array,22,4
  43              		.comm	feedback_array,14,4
  44              		.comm	wiznet,1,1
  45              		.comm	test_array,22,4
  46              		.global	WT_FLAG
  47              		.bss
  48              		.type	WT_FLAG, %object
  49              		.size	WT_FLAG, 1
  50              	WT_FLAG:
  51 0000 00       		.space	1
  52              		.global	WR_FLAG
  53              		.type	WR_FLAG, %object
  54              		.size	WR_FLAG, 1
  55              	WR_FLAG:
  56 0001 00       		.space	1
  57              		.global	ELBOW_FLAG
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 2


  58              		.type	ELBOW_FLAG, %object
  59              		.size	ELBOW_FLAG, 1
  60              	ELBOW_FLAG:
  61 0002 00       		.space	1
  62              		.global	SHOULDER_FLAG
  63              		.type	SHOULDER_FLAG, %object
  64              		.size	SHOULDER_FLAG, 1
  65              	SHOULDER_FLAG:
  66 0003 00       		.space	1
  67              		.global	BA_FLAG
  68              		.type	BA_FLAG, %object
  69              		.size	BA_FLAG, 1
  70              	BA_FLAG:
  71 0004 00       		.space	1
  72              		.global	EFFECTOR_FLAG
  73              		.type	EFFECTOR_FLAG, %object
  74              		.size	EFFECTOR_FLAG, 1
  75              	EFFECTOR_FLAG:
  76 0005 00       		.space	1
  77              		.global	PH_FLAG
  78              		.type	PH_FLAG, %object
  79              		.size	PH_FLAG, 1
  80              	PH_FLAG:
  81 0006 00       		.space	1
  82              		.global	dropped_packets
  83 0007 00       		.align	1
  84              		.type	dropped_packets, %object
  85              		.size	dropped_packets, 2
  86              	dropped_packets:
  87 0008 0000     		.space	2
  88              		.global	fail_safe_errors
  89              		.align	1
  90              		.type	fail_safe_errors, %object
  91              		.size	fail_safe_errors, 2
  92              	fail_safe_errors:
  93 000a 0000     		.space	2
  94              		.global	shldr_errors
  95              		.align	1
  96              		.type	shldr_errors, %object
  97              		.size	shldr_errors, 2
  98              	shldr_errors:
  99 000c 0000     		.space	2
 100              		.global	elbw_errors
 101              		.align	1
 102              		.type	elbw_errors, %object
 103              		.size	elbw_errors, 2
 104              	elbw_errors:
 105 000e 0000     		.space	2
 106              		.global	BA_errors
 107              		.align	1
 108              		.type	BA_errors, %object
 109              		.size	BA_errors, 2
 110              	BA_errors:
 111 0010 0000     		.space	2
 112              		.global	WT_errors
 113              		.align	1
 114              		.type	WT_errors, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 3


 115              		.size	WT_errors, 2
 116              	WT_errors:
 117 0012 0000     		.space	2
 118              		.global	WR_errors
 119              		.align	1
 120              		.type	WR_errors, %object
 121              		.size	WR_errors, 2
 122              	WR_errors:
 123 0014 0000     		.space	2
 124              		.global	eff_errors
 125              		.align	1
 126              		.type	eff_errors, %object
 127              		.size	eff_errors, 2
 128              	eff_errors:
 129 0016 0000     		.space	2
 130              		.comm	timerFlag,1,1
 131              		.section	.text.timer_isr,"ax",%progbits
 132              		.align	2
 133              		.global	timer_isr
 134              		.code	16
 135              		.thumb_func
 136              		.type	timer_isr, %function
 137              	timer_isr:
 138              	.LFB34:
 139              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run before really implementing this
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 140              		.loc 1 11 0
 141              		.cfi_startproc
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 82B0     		sub	sp, sp, #8
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 150              		.loc 1 12 0
 151 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 152 000a 031C     		mov	r3, r0
 153 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 154              		.loc 1 13 0
 155 000e 054B     		ldr	r3, .L2
 156 0010 0122     		mov	r2, #1
 157 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 4


 158              		.loc 1 14 0
 159 0014 7B68     		ldr	r3, [r7, #4]
 160 0016 181C     		mov	r0, r3
 161 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 162              		.loc 1 15 0
 163 001c BD46     		mov	sp, r7
 164 001e 02B0     		add	sp, sp, #8
 165              		@ sp needed
 166 0020 80BD     		pop	{r7, pc}
 167              	.L3:
 168 0022 C046     		.align	2
 169              	.L2:
 170 0024 00000000 		.word	timerFlag
 171              		.cfi_endproc
 172              	.LFE34:
 173              		.size	timer_isr, .-timer_isr
 174              		.global	__aeabi_idiv
 175              		.section	.text.CalibrationElbow,"ax",%progbits
 176              		.align	2
 177              		.global	CalibrationElbow
 178              		.code	16
 179              		.thumb_func
 180              		.type	CalibrationElbow, %function
 181              	CalibrationElbow:
 182              	.LFB35:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** 
  19:.\main.c      **** // function to convert int to string
  20:.\main.c      **** //void reverse(char s[])
  21:.\main.c      **** // {
  22:.\main.c      **** //     int i, j;
  23:.\main.c      **** //     char c;
  24:.\main.c      **** // 
  25:.\main.c      **** //     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
  26:.\main.c      **** //         c = s[i];
  27:.\main.c      **** //         s[i] = s[j];
  28:.\main.c      **** //         s[j] = c;
  29:.\main.c      **** //     }
  30:.\main.c      **** // }
  31:.\main.c      **** ///* itoa:  convert n to characters in s */
  32:.\main.c      **** // void itoa(int n, char s[])
  33:.\main.c      **** // {
  34:.\main.c      **** //     int i, sign;
  35:.\main.c      **** // 
  36:.\main.c      **** //     if ((sign = n) < 0)  /* record sign */
  37:.\main.c      **** //         n = -n;          /* make n positive */
  38:.\main.c      **** //     i = 0;
  39:.\main.c      **** //     do {       /* generate digits in reverse order */
  40:.\main.c      **** //         s[i++] = n % 10 + '0';   /* get next digit */
  41:.\main.c      **** //     } while ((n /= 10) > 0);     /* delete it */
  42:.\main.c      **** //     if (sign < 0)
  43:.\main.c      **** //         s[i++] = '-';
  44:.\main.c      **** //     s[i] = '\0';
  45:.\main.c      **** //     reverse(s);
  46:.\main.c      **** // }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 5


  47:.\main.c      **** uint16 CalibrationElbow(uint16 velocity)
  48:.\main.c      **** {
 183              		.loc 1 48 0
 184              		.cfi_startproc
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 86B0     		sub	sp, sp, #24
 190              		.cfi_def_cfa_offset 32
 191 0004 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 193 0006 021C     		mov	r2, r0
 194 0008 BB1D     		add	r3, r7, #6
 195 000a 1A80     		strh	r2, [r3]
  49:.\main.c      ****     uint8 	CYCLES = 3;
 196              		.loc 1 49 0
 197 000c 3B1C     		mov	r3, r7
 198 000e 1133     		add	r3, r3, #17
 199 0010 0322     		mov	r2, #3
 200 0012 1A70     		strb	r2, [r3]
  50:.\main.c      **** 	uint8 	i;
  51:.\main.c      **** 	uint16 	bound;
  52:.\main.c      **** 	uint16 	average;
  53:.\main.c      ****     uint32  channel;
  54:.\main.c      ****     int16   difference;
  55:.\main.c      ****  
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 201              		.loc 1 56 0
 202 0014 3B1C     		mov	r3, r7
 203 0016 1733     		add	r3, r3, #23
 204 0018 0022     		mov	r2, #0
 205 001a 1A70     		strb	r2, [r3]
 206 001c 3B1C     		mov	r3, r7
 207 001e 1233     		add	r3, r3, #18
 208 0020 0022     		mov	r2, #0
 209 0022 1A80     		strh	r2, [r3]
 210 0024 70E0     		b	.L5
 211              	.L13:
  57:.\main.c      **** 	{
  58:.\main.c      ****         // Test stop switch
  59:.\main.c      ****         LED_Write(0);
 212              		.loc 1 59 0
 213 0026 0020     		mov	r0, #0
 214 0028 FFF7FEFF 		bl	LED_Write
  60:.\main.c      ****         
  61:.\main.c      ****         // Move till stop switch presses down
  62:.\main.c      ****         if(velocity < 1500)
 215              		.loc 1 62 0
 216 002c BB1D     		add	r3, r7, #6
 217 002e 1A88     		ldrh	r2, [r3]
 218 0030 554B     		ldr	r3, .L18
 219 0032 9A42     		cmp	r2, r3
 220 0034 0BD8     		bhi	.L6
  63:.\main.c      ****         {
  64:.\main.c      ****             while(stop_elb_dn_Read())
 221              		.loc 1 64 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 6


 222 0036 04E0     		b	.L7
 223              	.L8:
  65:.\main.c      ****             {
  66:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 224              		.loc 1 66 0
 225 0038 BB1D     		add	r3, r7, #6
 226 003a 1B88     		ldrh	r3, [r3]
 227 003c 181C     		mov	r0, r3
 228 003e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 229              	.L7:
  64:.\main.c      ****             while(stop_elb_dn_Read())
 230              		.loc 1 64 0 discriminator 1
 231 0042 FFF7FEFF 		bl	stop_elb_dn_Read
 232 0046 031C     		mov	r3, r0
 233 0048 002B     		cmp	r3, #0
 234 004a F5D1     		bne	.L8
 235 004c 15E0     		b	.L9
 236              	.L6:
  67:.\main.c      ****             }
  68:.\main.c      ****         }
  69:.\main.c      ****         else if(velocity > 1500)
 237              		.loc 1 69 0
 238 004e BB1D     		add	r3, r7, #6
 239 0050 1A88     		ldrh	r2, [r3]
 240 0052 4E4B     		ldr	r3, .L18+4
 241 0054 9A42     		cmp	r2, r3
 242 0056 0BD9     		bls	.L10
  70:.\main.c      ****         {
  71:.\main.c      ****             while(stop_elb_up_Read())
 243              		.loc 1 71 0
 244 0058 04E0     		b	.L11
 245              	.L12:
  72:.\main.c      ****             {
  73:.\main.c      ****                 ELBW_PWM_WriteCompare(velocity);
 246              		.loc 1 73 0
 247 005a BB1D     		add	r3, r7, #6
 248 005c 1B88     		ldrh	r3, [r3]
 249 005e 181C     		mov	r0, r3
 250 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 251              	.L11:
  71:.\main.c      ****             while(stop_elb_up_Read())
 252              		.loc 1 71 0 discriminator 1
 253 0064 FFF7FEFF 		bl	stop_elb_up_Read
 254 0068 031C     		mov	r3, r0
 255 006a 002B     		cmp	r3, #0
 256 006c F5D1     		bne	.L12
 257 006e 04E0     		b	.L9
 258              	.L10:
  74:.\main.c      ****             }
  75:.\main.c      ****         }
  76:.\main.c      ****         else
  77:.\main.c      ****         {
  78:.\main.c      ****             ELBW_PWM_WriteCompare(velocity);
 259              		.loc 1 78 0
 260 0070 BB1D     		add	r3, r7, #6
 261 0072 1B88     		ldrh	r3, [r3]
 262 0074 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 7


 263 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 264              	.L9:
  79:.\main.c      ****             //LED_Write(1);
  80:.\main.c      ****         }
  81:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 265              		.loc 1 81 0
 266 007a 444B     		ldr	r3, .L18+4
 267 007c 181C     		mov	r0, r3
 268 007e FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  82:.\main.c      ****         LED_Write(1);
 269              		.loc 1 82 0
 270 0082 0120     		mov	r0, #1
 271 0084 FFF7FEFF 		bl	LED_Write
  83:.\main.c      ****         CyDelay(1000);
 272              		.loc 1 83 0
 273 0088 FA23     		mov	r3, #250
 274 008a 9B00     		lsl	r3, r3, #2
 275 008c 181C     		mov	r0, r3
 276 008e FFF7FEFF 		bl	CyDelay
  84:.\main.c      ****         
  85:.\main.c      ****         channel = ELBOW_POT;
 277              		.loc 1 85 0
 278 0092 0123     		mov	r3, #1
 279 0094 FB60     		str	r3, [r7, #12]
  86:.\main.c      ****         
  87:.\main.c      ****         // Add the value to average
  88:.\main.c      ****         average+=potFeedback(channel);
 280              		.loc 1 88 0
 281 0096 FB68     		ldr	r3, [r7, #12]
 282 0098 181C     		mov	r0, r3
 283 009a FFF7FEFF 		bl	potFeedback
 284 009e 031C     		mov	r3, r0
 285 00a0 191C     		mov	r1, r3
 286 00a2 3B1C     		mov	r3, r7
 287 00a4 1233     		add	r3, r3, #18
 288 00a6 3A1C     		mov	r2, r7
 289 00a8 1232     		add	r2, r2, #18
 290 00aa 1288     		ldrh	r2, [r2]
 291 00ac 8A18     		add	r2, r1, r2
 292 00ae 1A80     		strh	r2, [r3]
  89:.\main.c      ****  
  90:.\main.c      **** 		// Move away for 2 seconds
  91:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
  92:.\main.c      ****         difference = 1500-velocity;
 293              		.loc 1 92 0
 294 00b0 BB1D     		add	r3, r7, #6
 295 00b2 1B88     		ldrh	r3, [r3]
 296 00b4 354A     		ldr	r2, .L18+4
 297 00b6 D31A     		sub	r3, r2, r3
 298 00b8 9AB2     		uxth	r2, r3
 299 00ba 3B1C     		mov	r3, r7
 300 00bc 0A33     		add	r3, r3, #10
 301 00be 1A80     		strh	r2, [r3]
  93:.\main.c      ****         ELBW_PWM_WriteCompare((uint16)(1500 + difference));
 302              		.loc 1 93 0
 303 00c0 3B1C     		mov	r3, r7
 304 00c2 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 8


 305 00c4 1B88     		ldrh	r3, [r3]
 306 00c6 314A     		ldr	r2, .L18+4
 307 00c8 9B18     		add	r3, r3, r2
 308 00ca 9BB2     		uxth	r3, r3
 309 00cc 181C     		mov	r0, r3
 310 00ce FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  94:.\main.c      ****         LED_Write(0); 
 311              		.loc 1 94 0
 312 00d2 0020     		mov	r0, #0
 313 00d4 FFF7FEFF 		bl	LED_Write
  95:.\main.c      ****         CyDelay(1000);
 314              		.loc 1 95 0
 315 00d8 FA23     		mov	r3, #250
 316 00da 9B00     		lsl	r3, r3, #2
 317 00dc 181C     		mov	r0, r3
 318 00de FFF7FEFF 		bl	CyDelay
  96:.\main.c      ****  
  97:.\main.c      **** 		// Stop moving
  98:.\main.c      ****         ELBW_PWM_WriteCompare(NEUTRAL);
 319              		.loc 1 98 0
 320 00e2 2A4B     		ldr	r3, .L18+4
 321 00e4 181C     		mov	r0, r3
 322 00e6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
  99:.\main.c      ****         LED_Write(1); 
 323              		.loc 1 99 0
 324 00ea 0120     		mov	r0, #1
 325 00ec FFF7FEFF 		bl	LED_Write
 100:.\main.c      ****         CyDelay(1000);
 326              		.loc 1 100 0
 327 00f0 FA23     		mov	r3, #250
 328 00f2 9B00     		lsl	r3, r3, #2
 329 00f4 181C     		mov	r0, r3
 330 00f6 FFF7FEFF 		bl	CyDelay
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 331              		.loc 1 56 0
 332 00fa 3B1C     		mov	r3, r7
 333 00fc 1733     		add	r3, r3, #23
 334 00fe 1A78     		ldrb	r2, [r3]
 335 0100 3B1C     		mov	r3, r7
 336 0102 1733     		add	r3, r3, #23
 337 0104 0132     		add	r2, r2, #1
 338 0106 1A70     		strb	r2, [r3]
 339              	.L5:
  56:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 340              		.loc 1 56 0 is_stmt 0 discriminator 1
 341 0108 3A1C     		mov	r2, r7
 342 010a 1732     		add	r2, r2, #23
 343 010c 3B1C     		mov	r3, r7
 344 010e 1133     		add	r3, r3, #17
 345 0110 1278     		ldrb	r2, [r2]
 346 0112 1B78     		ldrb	r3, [r3]
 347 0114 9A42     		cmp	r2, r3
 348 0116 00D2     		bcs	.LCB191
 349 0118 85E7     		b	.L13	@long jump
 350              	.LCB191:
 101:.\main.c      **** 	}
 102:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 9


 103:.\main.c      ****     if(velocity > 1500)
 351              		.loc 1 103 0 is_stmt 1
 352 011a BB1D     		add	r3, r7, #6
 353 011c 1A88     		ldrh	r2, [r3]
 354 011e 1B4B     		ldr	r3, .L18+4
 355 0120 9A42     		cmp	r2, r3
 356 0122 10D9     		bls	.L14
 104:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 357              		.loc 1 104 0
 358 0124 3B1C     		mov	r3, r7
 359 0126 1233     		add	r3, r3, #18
 360 0128 1A88     		ldrh	r2, [r3]
 361 012a 3B1C     		mov	r3, r7
 362 012c 1133     		add	r3, r3, #17
 363 012e 1B78     		ldrb	r3, [r3]
 364 0130 101C     		mov	r0, r2
 365 0132 191C     		mov	r1, r3
 366 0134 FFF7FEFF 		bl	__aeabi_idiv
 367 0138 031C     		mov	r3, r0
 368 013a 9AB2     		uxth	r2, r3
 369 013c 3B1C     		mov	r3, r7
 370 013e 1433     		add	r3, r3, #20
 371 0140 143A     		sub	r2, r2, #20
 372 0142 1A80     		strh	r2, [r3]
 373 0144 18E0     		b	.L15
 374              	.L14:
 105:.\main.c      ****     else if(velocity < 1500)
 375              		.loc 1 105 0
 376 0146 BB1D     		add	r3, r7, #6
 377 0148 1A88     		ldrh	r2, [r3]
 378 014a 0F4B     		ldr	r3, .L18
 379 014c 9A42     		cmp	r2, r3
 380 014e 10D8     		bhi	.L16
 106:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 381              		.loc 1 106 0
 382 0150 3B1C     		mov	r3, r7
 383 0152 1233     		add	r3, r3, #18
 384 0154 1A88     		ldrh	r2, [r3]
 385 0156 3B1C     		mov	r3, r7
 386 0158 1133     		add	r3, r3, #17
 387 015a 1B78     		ldrb	r3, [r3]
 388 015c 101C     		mov	r0, r2
 389 015e 191C     		mov	r1, r3
 390 0160 FFF7FEFF 		bl	__aeabi_idiv
 391 0164 031C     		mov	r3, r0
 392 0166 9AB2     		uxth	r2, r3
 393 0168 3B1C     		mov	r3, r7
 394 016a 1433     		add	r3, r3, #20
 395 016c 1432     		add	r2, r2, #20
 396 016e 1A80     		strh	r2, [r3]
 397 0170 02E0     		b	.L15
 398              	.L16:
 107:.\main.c      ****     else // velocity == 1500
 108:.\main.c      ****         LED_Write(1); 
 399              		.loc 1 108 0
 400 0172 0120     		mov	r0, #1
 401 0174 FFF7FEFF 		bl	LED_Write
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 10


 402              	.L15:
 109:.\main.c      ****  
 110:.\main.c      **** 	return bound;
 403              		.loc 1 110 0
 404 0178 3B1C     		mov	r3, r7
 405 017a 1433     		add	r3, r3, #20
 406 017c 1B88     		ldrh	r3, [r3]
 111:.\main.c      **** }
 407              		.loc 1 111 0
 408 017e 181C     		mov	r0, r3
 409 0180 BD46     		mov	sp, r7
 410 0182 06B0     		add	sp, sp, #24
 411              		@ sp needed
 412 0184 80BD     		pop	{r7, pc}
 413              	.L19:
 414 0186 C046     		.align	2
 415              	.L18:
 416 0188 DB050000 		.word	1499
 417 018c DC050000 		.word	1500
 418              		.cfi_endproc
 419              	.LFE35:
 420              		.size	CalibrationElbow, .-CalibrationElbow
 421              		.section	.text.CalibrationShoulder,"ax",%progbits
 422              		.align	2
 423              		.global	CalibrationShoulder
 424              		.code	16
 425              		.thumb_func
 426              		.type	CalibrationShoulder, %function
 427              	CalibrationShoulder:
 428              	.LFB36:
 112:.\main.c      **** 
 113:.\main.c      **** uint16 CalibrationShoulder(uint16 velocity)
 114:.\main.c      **** {
 429              		.loc 1 114 0
 430              		.cfi_startproc
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 86B0     		sub	sp, sp, #24
 436              		.cfi_def_cfa_offset 32
 437 0004 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 439 0006 021C     		mov	r2, r0
 440 0008 BB1D     		add	r3, r7, #6
 441 000a 1A80     		strh	r2, [r3]
 115:.\main.c      **** 	uint8 	CYCLES = 3;
 442              		.loc 1 115 0
 443 000c 3B1C     		mov	r3, r7
 444 000e 1133     		add	r3, r3, #17
 445 0010 0322     		mov	r2, #3
 446 0012 1A70     		strb	r2, [r3]
 116:.\main.c      **** 	uint8 	i;
 117:.\main.c      **** 	uint16 	bound;
 118:.\main.c      **** 	uint16 	average;
 119:.\main.c      ****     uint32  channel;
 120:.\main.c      ****     int16 difference;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 11


 121:.\main.c      ****  
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 447              		.loc 1 122 0
 448 0014 3B1C     		mov	r3, r7
 449 0016 1733     		add	r3, r3, #23
 450 0018 0022     		mov	r2, #0
 451 001a 1A70     		strb	r2, [r3]
 452 001c 3B1C     		mov	r3, r7
 453 001e 1233     		add	r3, r3, #18
 454 0020 0022     		mov	r2, #0
 455 0022 1A80     		strh	r2, [r3]
 456 0024 70E0     		b	.L21
 457              	.L29:
 123:.\main.c      **** 	{
 124:.\main.c      ****         LED_Write(0);
 458              		.loc 1 124 0
 459 0026 0020     		mov	r0, #0
 460 0028 FFF7FEFF 		bl	LED_Write
 125:.\main.c      **** 		// Move till stop switch presses down
 126:.\main.c      ****         if(velocity < 1500)
 461              		.loc 1 126 0
 462 002c BB1D     		add	r3, r7, #6
 463 002e 1A88     		ldrh	r2, [r3]
 464 0030 554B     		ldr	r3, .L34
 465 0032 9A42     		cmp	r2, r3
 466 0034 0BD8     		bhi	.L22
 127:.\main.c      ****         {
 128:.\main.c      ****             while(stop_shdr_dn_Read())
 467              		.loc 1 128 0
 468 0036 04E0     		b	.L23
 469              	.L24:
 129:.\main.c      ****             {
 130:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 470              		.loc 1 130 0
 471 0038 BB1D     		add	r3, r7, #6
 472 003a 1B88     		ldrh	r3, [r3]
 473 003c 181C     		mov	r0, r3
 474 003e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 475              	.L23:
 128:.\main.c      ****             while(stop_shdr_dn_Read())
 476              		.loc 1 128 0 discriminator 1
 477 0042 FFF7FEFF 		bl	stop_shdr_dn_Read
 478 0046 031C     		mov	r3, r0
 479 0048 002B     		cmp	r3, #0
 480 004a F5D1     		bne	.L24
 481 004c 15E0     		b	.L25
 482              	.L22:
 131:.\main.c      ****             }
 132:.\main.c      ****         }
 133:.\main.c      ****         else if(velocity > 1500)
 483              		.loc 1 133 0
 484 004e BB1D     		add	r3, r7, #6
 485 0050 1A88     		ldrh	r2, [r3]
 486 0052 4E4B     		ldr	r3, .L34+4
 487 0054 9A42     		cmp	r2, r3
 488 0056 0BD9     		bls	.L26
 134:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 12


 135:.\main.c      ****             while(stop_shdr_up_Read())
 489              		.loc 1 135 0
 490 0058 04E0     		b	.L27
 491              	.L28:
 136:.\main.c      ****             {
 137:.\main.c      ****                 SHLDR_PWM_WriteCompare(velocity);
 492              		.loc 1 137 0
 493 005a BB1D     		add	r3, r7, #6
 494 005c 1B88     		ldrh	r3, [r3]
 495 005e 181C     		mov	r0, r3
 496 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 497              	.L27:
 135:.\main.c      ****             while(stop_shdr_up_Read())
 498              		.loc 1 135 0 discriminator 1
 499 0064 FFF7FEFF 		bl	stop_shdr_up_Read
 500 0068 031C     		mov	r3, r0
 501 006a 002B     		cmp	r3, #0
 502 006c F5D1     		bne	.L28
 503 006e 04E0     		b	.L25
 504              	.L26:
 138:.\main.c      ****             }
 139:.\main.c      ****         }
 140:.\main.c      ****         else
 141:.\main.c      ****         {
 142:.\main.c      ****             SHLDR_PWM_WriteCompare(velocity);
 505              		.loc 1 142 0
 506 0070 BB1D     		add	r3, r7, #6
 507 0072 1B88     		ldrh	r3, [r3]
 508 0074 181C     		mov	r0, r3
 509 0076 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 510              	.L25:
 143:.\main.c      ****             //LED_Write(1);
 144:.\main.c      ****         }
 145:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 511              		.loc 1 145 0
 512 007a 444B     		ldr	r3, .L34+4
 513 007c 181C     		mov	r0, r3
 514 007e FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 146:.\main.c      ****         LED_Write(1); 
 515              		.loc 1 146 0
 516 0082 0120     		mov	r0, #1
 517 0084 FFF7FEFF 		bl	LED_Write
 147:.\main.c      ****         CyDelay(1000);
 518              		.loc 1 147 0
 519 0088 FA23     		mov	r3, #250
 520 008a 9B00     		lsl	r3, r3, #2
 521 008c 181C     		mov	r0, r3
 522 008e FFF7FEFF 		bl	CyDelay
 148:.\main.c      ****         
 149:.\main.c      ****         channel = SHOULDER_POT;
 523              		.loc 1 149 0
 524 0092 0023     		mov	r3, #0
 525 0094 FB60     		str	r3, [r7, #12]
 150:.\main.c      ****  
 151:.\main.c      **** 		// Add the value to average
 152:.\main.c      ****         average+=potFeedback(channel);
 526              		.loc 1 152 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 13


 527 0096 FB68     		ldr	r3, [r7, #12]
 528 0098 181C     		mov	r0, r3
 529 009a FFF7FEFF 		bl	potFeedback
 530 009e 031C     		mov	r3, r0
 531 00a0 191C     		mov	r1, r3
 532 00a2 3B1C     		mov	r3, r7
 533 00a4 1233     		add	r3, r3, #18
 534 00a6 3A1C     		mov	r2, r7
 535 00a8 1232     		add	r2, r2, #18
 536 00aa 1288     		ldrh	r2, [r2]
 537 00ac 8A18     		add	r2, r1, r2
 538 00ae 1A80     		strh	r2, [r3]
 153:.\main.c      ****  
 154:.\main.c      **** 		// Move away for 2 seconds
 155:.\main.c      **** 			// Use negative of velocity * 2, so that it moves away quick enough
 156:.\main.c      ****         difference = 1500-velocity;
 539              		.loc 1 156 0
 540 00b0 BB1D     		add	r3, r7, #6
 541 00b2 1B88     		ldrh	r3, [r3]
 542 00b4 354A     		ldr	r2, .L34+4
 543 00b6 D31A     		sub	r3, r2, r3
 544 00b8 9AB2     		uxth	r2, r3
 545 00ba 3B1C     		mov	r3, r7
 546 00bc 0A33     		add	r3, r3, #10
 547 00be 1A80     		strh	r2, [r3]
 157:.\main.c      ****         SHLDR_PWM_WriteCompare((uint16)(1500 + difference));
 548              		.loc 1 157 0
 549 00c0 3B1C     		mov	r3, r7
 550 00c2 0A33     		add	r3, r3, #10
 551 00c4 1B88     		ldrh	r3, [r3]
 552 00c6 314A     		ldr	r2, .L34+4
 553 00c8 9B18     		add	r3, r3, r2
 554 00ca 9BB2     		uxth	r3, r3
 555 00cc 181C     		mov	r0, r3
 556 00ce FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 158:.\main.c      ****         LED_Write(0); 
 557              		.loc 1 158 0
 558 00d2 0020     		mov	r0, #0
 559 00d4 FFF7FEFF 		bl	LED_Write
 159:.\main.c      ****         CyDelay(1000);
 560              		.loc 1 159 0
 561 00d8 FA23     		mov	r3, #250
 562 00da 9B00     		lsl	r3, r3, #2
 563 00dc 181C     		mov	r0, r3
 564 00de FFF7FEFF 		bl	CyDelay
 160:.\main.c      ****  
 161:.\main.c      **** 		// Stop moving
 162:.\main.c      ****         SHLDR_PWM_WriteCompare(NEUTRAL);
 565              		.loc 1 162 0
 566 00e2 2A4B     		ldr	r3, .L34+4
 567 00e4 181C     		mov	r0, r3
 568 00e6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 163:.\main.c      ****         LED_Write(1); 
 569              		.loc 1 163 0
 570 00ea 0120     		mov	r0, #1
 571 00ec FFF7FEFF 		bl	LED_Write
 164:.\main.c      ****         CyDelay(1000);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 14


 572              		.loc 1 164 0
 573 00f0 FA23     		mov	r3, #250
 574 00f2 9B00     		lsl	r3, r3, #2
 575 00f4 181C     		mov	r0, r3
 576 00f6 FFF7FEFF 		bl	CyDelay
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 577              		.loc 1 122 0
 578 00fa 3B1C     		mov	r3, r7
 579 00fc 1733     		add	r3, r3, #23
 580 00fe 1A78     		ldrb	r2, [r3]
 581 0100 3B1C     		mov	r3, r7
 582 0102 1733     		add	r3, r3, #23
 583 0104 0132     		add	r2, r2, #1
 584 0106 1A70     		strb	r2, [r3]
 585              	.L21:
 122:.\main.c      **** 	for(i = 0, average = 0; i < CYCLES; i++)
 586              		.loc 1 122 0 is_stmt 0 discriminator 1
 587 0108 3A1C     		mov	r2, r7
 588 010a 1732     		add	r2, r2, #23
 589 010c 3B1C     		mov	r3, r7
 590 010e 1133     		add	r3, r3, #17
 591 0110 1278     		ldrb	r2, [r2]
 592 0112 1B78     		ldrb	r3, [r3]
 593 0114 9A42     		cmp	r2, r3
 594 0116 00D2     		bcs	.LCB420
 595 0118 85E7     		b	.L29	@long jump
 596              	.LCB420:
 165:.\main.c      **** 	}
 166:.\main.c      ****  
 167:.\main.c      **** 	if(velocity > 1500)
 597              		.loc 1 167 0 is_stmt 1
 598 011a BB1D     		add	r3, r7, #6
 599 011c 1A88     		ldrh	r2, [r3]
 600 011e 1B4B     		ldr	r3, .L34+4
 601 0120 9A42     		cmp	r2, r3
 602 0122 10D9     		bls	.L30
 168:.\main.c      **** 	    bound = ((average / CYCLES) - BOUND_OFFSET);
 603              		.loc 1 168 0
 604 0124 3B1C     		mov	r3, r7
 605 0126 1233     		add	r3, r3, #18
 606 0128 1A88     		ldrh	r2, [r3]
 607 012a 3B1C     		mov	r3, r7
 608 012c 1133     		add	r3, r3, #17
 609 012e 1B78     		ldrb	r3, [r3]
 610 0130 101C     		mov	r0, r2
 611 0132 191C     		mov	r1, r3
 612 0134 FFF7FEFF 		bl	__aeabi_idiv
 613 0138 031C     		mov	r3, r0
 614 013a 9AB2     		uxth	r2, r3
 615 013c 3B1C     		mov	r3, r7
 616 013e 1433     		add	r3, r3, #20
 617 0140 143A     		sub	r2, r2, #20
 618 0142 1A80     		strh	r2, [r3]
 619 0144 18E0     		b	.L31
 620              	.L30:
 169:.\main.c      ****     else if(velocity < 1500)
 621              		.loc 1 169 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 15


 622 0146 BB1D     		add	r3, r7, #6
 623 0148 1A88     		ldrh	r2, [r3]
 624 014a 0F4B     		ldr	r3, .L34
 625 014c 9A42     		cmp	r2, r3
 626 014e 10D8     		bhi	.L32
 170:.\main.c      ****         bound = ((average / CYCLES) + BOUND_OFFSET);
 627              		.loc 1 170 0
 628 0150 3B1C     		mov	r3, r7
 629 0152 1233     		add	r3, r3, #18
 630 0154 1A88     		ldrh	r2, [r3]
 631 0156 3B1C     		mov	r3, r7
 632 0158 1133     		add	r3, r3, #17
 633 015a 1B78     		ldrb	r3, [r3]
 634 015c 101C     		mov	r0, r2
 635 015e 191C     		mov	r1, r3
 636 0160 FFF7FEFF 		bl	__aeabi_idiv
 637 0164 031C     		mov	r3, r0
 638 0166 9AB2     		uxth	r2, r3
 639 0168 3B1C     		mov	r3, r7
 640 016a 1433     		add	r3, r3, #20
 641 016c 1432     		add	r2, r2, #20
 642 016e 1A80     		strh	r2, [r3]
 643 0170 02E0     		b	.L31
 644              	.L32:
 171:.\main.c      ****     else // velocity == 1500
 172:.\main.c      ****         LED_Write(1); 
 645              		.loc 1 172 0
 646 0172 0120     		mov	r0, #1
 647 0174 FFF7FEFF 		bl	LED_Write
 648              	.L31:
 173:.\main.c      ****  
 174:.\main.c      **** 	return bound;
 649              		.loc 1 174 0
 650 0178 3B1C     		mov	r3, r7
 651 017a 1433     		add	r3, r3, #20
 652 017c 1B88     		ldrh	r3, [r3]
 175:.\main.c      **** }
 653              		.loc 1 175 0
 654 017e 181C     		mov	r0, r3
 655 0180 BD46     		mov	sp, r7
 656 0182 06B0     		add	sp, sp, #24
 657              		@ sp needed
 658 0184 80BD     		pop	{r7, pc}
 659              	.L35:
 660 0186 C046     		.align	2
 661              	.L34:
 662 0188 DB050000 		.word	1499
 663 018c DC050000 		.word	1500
 664              		.cfi_endproc
 665              	.LFE36:
 666              		.size	CalibrationShoulder, .-CalibrationShoulder
 667              		.global	__aeabi_uidiv
 668              		.section	.text.average,"ax",%progbits
 669              		.align	2
 670              		.global	average
 671              		.code	16
 672              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 16


 673              		.type	average, %function
 674              	average:
 675              	.LFB37:
 176:.\main.c      **** 
 177:.\main.c      **** //Average function to be used in smoothing our input
 178:.\main.c      **** uint16 average(uint16* av_array, uint8 num_items)
 179:.\main.c      **** {
 676              		.loc 1 179 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 86B0     		sub	sp, sp, #24
 683              		.cfi_def_cfa_offset 32
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 687 0008 0A1C     		mov	r2, r1
 688 000a FB1C     		add	r3, r7, #3
 689 000c 1A70     		strb	r2, [r3]
 180:.\main.c      ****     uint8 i;
 181:.\main.c      ****     uint32 sum = 0;
 690              		.loc 1 181 0
 691 000e 0023     		mov	r3, #0
 692 0010 3B61     		str	r3, [r7, #16]
 182:.\main.c      ****     uint16 avg = 0;
 693              		.loc 1 182 0
 694 0012 3B1C     		mov	r3, r7
 695 0014 0E33     		add	r3, r3, #14
 696 0016 0022     		mov	r2, #0
 697 0018 1A80     		strh	r2, [r3]
 183:.\main.c      ****     
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 698              		.loc 1 184 0
 699 001a 3B1C     		mov	r3, r7
 700 001c 1733     		add	r3, r3, #23
 701 001e 0022     		mov	r2, #0
 702 0020 1A70     		strb	r2, [r3]
 703 0022 10E0     		b	.L37
 704              	.L38:
 185:.\main.c      ****     {
 186:.\main.c      ****         sum += av_array[i];
 705              		.loc 1 186 0 discriminator 2
 706 0024 3B1C     		mov	r3, r7
 707 0026 1733     		add	r3, r3, #23
 708 0028 1B78     		ldrb	r3, [r3]
 709 002a 5B00     		lsl	r3, r3, #1
 710 002c 7A68     		ldr	r2, [r7, #4]
 711 002e D318     		add	r3, r2, r3
 712 0030 1B88     		ldrh	r3, [r3]
 713 0032 3A69     		ldr	r2, [r7, #16]
 714 0034 D318     		add	r3, r2, r3
 715 0036 3B61     		str	r3, [r7, #16]
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 716              		.loc 1 184 0 discriminator 2
 717 0038 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 17


 718 003a 1733     		add	r3, r3, #23
 719 003c 1A78     		ldrb	r2, [r3]
 720 003e 3B1C     		mov	r3, r7
 721 0040 1733     		add	r3, r3, #23
 722 0042 0132     		add	r2, r2, #1
 723 0044 1A70     		strb	r2, [r3]
 724              	.L37:
 184:.\main.c      ****     for(i = 0; i < num_items; i++)
 725              		.loc 1 184 0 is_stmt 0 discriminator 1
 726 0046 3A1C     		mov	r2, r7
 727 0048 1732     		add	r2, r2, #23
 728 004a FB1C     		add	r3, r7, #3
 729 004c 1278     		ldrb	r2, [r2]
 730 004e 1B78     		ldrb	r3, [r3]
 731 0050 9A42     		cmp	r2, r3
 732 0052 E7D3     		bcc	.L38
 187:.\main.c      ****     }
 188:.\main.c      ****     
 189:.\main.c      ****     avg = sum/num_items;
 733              		.loc 1 189 0 is_stmt 1
 734 0054 FB1C     		add	r3, r7, #3
 735 0056 1B78     		ldrb	r3, [r3]
 736 0058 3869     		ldr	r0, [r7, #16]
 737 005a 191C     		mov	r1, r3
 738 005c FFF7FEFF 		bl	__aeabi_uidiv
 739 0060 031C     		mov	r3, r0
 740 0062 1A1C     		mov	r2, r3
 741 0064 3B1C     		mov	r3, r7
 742 0066 0E33     		add	r3, r3, #14
 743 0068 1A80     		strh	r2, [r3]
 190:.\main.c      ****     
 191:.\main.c      ****     return avg;
 744              		.loc 1 191 0
 745 006a 3B1C     		mov	r3, r7
 746 006c 0E33     		add	r3, r3, #14
 747 006e 1B88     		ldrh	r3, [r3]
 192:.\main.c      **** }
 748              		.loc 1 192 0
 749 0070 181C     		mov	r0, r3
 750 0072 BD46     		mov	sp, r7
 751 0074 06B0     		add	sp, sp, #24
 752              		@ sp needed
 753 0076 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE37:
 756              		.size	average, .-average
 757              		.section	.text.maintain_array,"ax",%progbits
 758              		.align	2
 759              		.global	maintain_array
 760              		.code	16
 761              		.thumb_func
 762              		.type	maintain_array, %function
 763              	maintain_array:
 764              	.LFB38:
 193:.\main.c      **** 
 194:.\main.c      **** uint8 maintain_array(uint8 cpos, uint8 SIZE)
 195:.\main.c      **** {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 18


 765              		.loc 1 195 0
 766              		.cfi_startproc
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 0A1C     		mov	r2, r1
 776 0008 FB1D     		add	r3, r7, #7
 777 000a 011C     		add	r1, r0, #0
 778 000c 1970     		strb	r1, [r3]
 779 000e BB1D     		add	r3, r7, #6
 780 0010 1A70     		strb	r2, [r3]
 196:.\main.c      ****     if(cpos < (SIZE - 1))
 781              		.loc 1 196 0
 782 0012 FB1D     		add	r3, r7, #7
 783 0014 1A78     		ldrb	r2, [r3]
 784 0016 BB1D     		add	r3, r7, #6
 785 0018 1B78     		ldrb	r3, [r3]
 786 001a 013B     		sub	r3, r3, #1
 787 001c 9A42     		cmp	r2, r3
 788 001e 05DA     		bge	.L41
 197:.\main.c      ****     {
 198:.\main.c      ****         cpos++;
 789              		.loc 1 198 0
 790 0020 FB1D     		add	r3, r7, #7
 791 0022 1A78     		ldrb	r2, [r3]
 792 0024 FB1D     		add	r3, r7, #7
 793 0026 0132     		add	r2, r2, #1
 794 0028 1A70     		strb	r2, [r3]
 795 002a 02E0     		b	.L42
 796              	.L41:
 199:.\main.c      ****     }
 200:.\main.c      ****     else
 201:.\main.c      ****     {
 202:.\main.c      ****         cpos = 0;
 797              		.loc 1 202 0
 798 002c FB1D     		add	r3, r7, #7
 799 002e 0022     		mov	r2, #0
 800 0030 1A70     		strb	r2, [r3]
 801              	.L42:
 203:.\main.c      ****     }
 204:.\main.c      ****     return cpos;
 802              		.loc 1 204 0
 803 0032 FB1D     		add	r3, r7, #7
 804 0034 1B78     		ldrb	r3, [r3]
 205:.\main.c      **** }
 805              		.loc 1 205 0
 806 0036 181C     		mov	r0, r3
 807 0038 BD46     		mov	sp, r7
 808 003a 02B0     		add	sp, sp, #8
 809              		@ sp needed
 810 003c 80BD     		pop	{r7, pc}
 811              		.cfi_endproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 19


 812              	.LFE38:
 813              		.size	maintain_array, .-maintain_array
 814 003e C046     		.section	.text.check_update,"ax",%progbits
 815              		.align	2
 816              		.global	check_update
 817              		.code	16
 818              		.thumb_func
 819              		.type	check_update, %function
 820              	check_update:
 821              	.LFB39:
 206:.\main.c      **** 
 207:.\main.c      **** uint8 check_update(uint16* array, uint8 arr_pos, uint8 size, int change)
 208:.\main.c      **** {
 822              		.loc 1 208 0
 823              		.cfi_startproc
 824 0000 80B5     		push	{r7, lr}
 825              		.cfi_def_cfa_offset 8
 826              		.cfi_offset 7, -8
 827              		.cfi_offset 14, -4
 828 0002 86B0     		sub	sp, sp, #24
 829              		.cfi_def_cfa_offset 32
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 F860     		str	r0, [r7, #12]
 833 0008 7B60     		str	r3, [r7, #4]
 834 000a 3B1C     		mov	r3, r7
 835 000c 0B33     		add	r3, r3, #11
 836 000e 1970     		strb	r1, [r3]
 837 0010 3B1C     		mov	r3, r7
 838 0012 0A33     		add	r3, r3, #10
 839 0014 1A70     		strb	r2, [r3]
 209:.\main.c      ****     uint8 index;
 210:.\main.c      ****     if(arr_pos != 0)
 840              		.loc 1 210 0
 841 0016 3B1C     		mov	r3, r7
 842 0018 0B33     		add	r3, r3, #11
 843 001a 1B78     		ldrb	r3, [r3]
 844 001c 002B     		cmp	r3, #0
 845 001e 07D0     		beq	.L45
 211:.\main.c      ****     {
 212:.\main.c      ****         index = arr_pos - 1;
 846              		.loc 1 212 0
 847 0020 3B1C     		mov	r3, r7
 848 0022 1733     		add	r3, r3, #23
 849 0024 3A1C     		mov	r2, r7
 850 0026 0B32     		add	r2, r2, #11
 851 0028 1278     		ldrb	r2, [r2]
 852 002a 013A     		sub	r2, r2, #1
 853 002c 1A70     		strb	r2, [r3]
 854 002e 06E0     		b	.L46
 855              	.L45:
 213:.\main.c      ****     }
 214:.\main.c      ****     else
 215:.\main.c      ****     {
 216:.\main.c      ****         index = size - 1;
 856              		.loc 1 216 0
 857 0030 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 20


 858 0032 1733     		add	r3, r3, #23
 859 0034 3A1C     		mov	r2, r7
 860 0036 0A32     		add	r2, r2, #10
 861 0038 1278     		ldrb	r2, [r2]
 862 003a 013A     		sub	r2, r2, #1
 863 003c 1A70     		strb	r2, [r3]
 864              	.L46:
 217:.\main.c      ****     }
 218:.\main.c      ****     
 219:.\main.c      ****     if(change < 0)
 865              		.loc 1 219 0
 866 003e 7B68     		ldr	r3, [r7, #4]
 867 0040 002B     		cmp	r3, #0
 868 0042 2ADA     		bge	.L47
 220:.\main.c      ****     {
 221:.\main.c      ****         if(array[index] >= (1000 - change))
 869              		.loc 1 221 0
 870 0044 3B1C     		mov	r3, r7
 871 0046 1733     		add	r3, r3, #23
 872 0048 1B78     		ldrb	r3, [r3]
 873 004a 5B00     		lsl	r3, r3, #1
 874 004c FA68     		ldr	r2, [r7, #12]
 875 004e D318     		add	r3, r2, r3
 876 0050 1B88     		ldrh	r3, [r3]
 877 0052 1A1C     		mov	r2, r3
 878 0054 7B68     		ldr	r3, [r7, #4]
 879 0056 FA21     		mov	r1, #250
 880 0058 8900     		lsl	r1, r1, #2
 881 005a CB1A     		sub	r3, r1, r3
 882 005c 9A42     		cmp	r2, r3
 883 005e 12DB     		blt	.L48
 222:.\main.c      ****         {
 223:.\main.c      ****             array[arr_pos] = (array[index] + change);
 884              		.loc 1 223 0
 885 0060 3B1C     		mov	r3, r7
 886 0062 0B33     		add	r3, r3, #11
 887 0064 1B78     		ldrb	r3, [r3]
 888 0066 5B00     		lsl	r3, r3, #1
 889 0068 FA68     		ldr	r2, [r7, #12]
 890 006a D318     		add	r3, r2, r3
 891 006c 3A1C     		mov	r2, r7
 892 006e 1732     		add	r2, r2, #23
 893 0070 1278     		ldrb	r2, [r2]
 894 0072 5200     		lsl	r2, r2, #1
 895 0074 F968     		ldr	r1, [r7, #12]
 896 0076 8A18     		add	r2, r1, r2
 897 0078 1188     		ldrh	r1, [r2]
 898 007a 7A68     		ldr	r2, [r7, #4]
 899 007c 92B2     		uxth	r2, r2
 900 007e 8A18     		add	r2, r1, r2
 901 0080 92B2     		uxth	r2, r2
 902 0082 1A80     		strh	r2, [r3]
 903 0084 33E0     		b	.L50
 904              	.L48:
 224:.\main.c      ****         }
 225:.\main.c      ****         else
 226:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 21


 227:.\main.c      ****             array[arr_pos] = 1000;
 905              		.loc 1 227 0
 906 0086 3B1C     		mov	r3, r7
 907 0088 0B33     		add	r3, r3, #11
 908 008a 1B78     		ldrb	r3, [r3]
 909 008c 5B00     		lsl	r3, r3, #1
 910 008e FA68     		ldr	r2, [r7, #12]
 911 0090 D318     		add	r3, r2, r3
 912 0092 FA22     		mov	r2, #250
 913 0094 9200     		lsl	r2, r2, #2
 914 0096 1A80     		strh	r2, [r3]
 915 0098 29E0     		b	.L50
 916              	.L47:
 228:.\main.c      ****         }
 229:.\main.c      ****     }
 230:.\main.c      ****     else
 231:.\main.c      ****     {
 232:.\main.c      ****         if(array[index] <= (2000 - change))
 917              		.loc 1 232 0
 918 009a 3B1C     		mov	r3, r7
 919 009c 1733     		add	r3, r3, #23
 920 009e 1B78     		ldrb	r3, [r3]
 921 00a0 5B00     		lsl	r3, r3, #1
 922 00a2 FA68     		ldr	r2, [r7, #12]
 923 00a4 D318     		add	r3, r2, r3
 924 00a6 1B88     		ldrh	r3, [r3]
 925 00a8 1A1C     		mov	r2, r3
 926 00aa 7B68     		ldr	r3, [r7, #4]
 927 00ac FA21     		mov	r1, #250
 928 00ae C900     		lsl	r1, r1, #3
 929 00b0 CB1A     		sub	r3, r1, r3
 930 00b2 9A42     		cmp	r2, r3
 931 00b4 12DC     		bgt	.L51
 233:.\main.c      ****         {
 234:.\main.c      ****             array[arr_pos] = (array[index] + change);
 932              		.loc 1 234 0
 933 00b6 3B1C     		mov	r3, r7
 934 00b8 0B33     		add	r3, r3, #11
 935 00ba 1B78     		ldrb	r3, [r3]
 936 00bc 5B00     		lsl	r3, r3, #1
 937 00be FA68     		ldr	r2, [r7, #12]
 938 00c0 D318     		add	r3, r2, r3
 939 00c2 3A1C     		mov	r2, r7
 940 00c4 1732     		add	r2, r2, #23
 941 00c6 1278     		ldrb	r2, [r2]
 942 00c8 5200     		lsl	r2, r2, #1
 943 00ca F968     		ldr	r1, [r7, #12]
 944 00cc 8A18     		add	r2, r1, r2
 945 00ce 1188     		ldrh	r1, [r2]
 946 00d0 7A68     		ldr	r2, [r7, #4]
 947 00d2 92B2     		uxth	r2, r2
 948 00d4 8A18     		add	r2, r1, r2
 949 00d6 92B2     		uxth	r2, r2
 950 00d8 1A80     		strh	r2, [r3]
 951 00da 08E0     		b	.L50
 952              	.L51:
 235:.\main.c      ****         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 22


 236:.\main.c      ****         else
 237:.\main.c      ****         {
 238:.\main.c      ****             array[arr_pos] = 2000;
 953              		.loc 1 238 0
 954 00dc 3B1C     		mov	r3, r7
 955 00de 0B33     		add	r3, r3, #11
 956 00e0 1B78     		ldrb	r3, [r3]
 957 00e2 5B00     		lsl	r3, r3, #1
 958 00e4 FA68     		ldr	r2, [r7, #12]
 959 00e6 D318     		add	r3, r2, r3
 960 00e8 FA22     		mov	r2, #250
 961 00ea D200     		lsl	r2, r2, #3
 962 00ec 1A80     		strh	r2, [r3]
 963              	.L50:
 239:.\main.c      ****         }
 240:.\main.c      ****     }
 241:.\main.c      ****     
 242:.\main.c      ****     return maintain_array(arr_pos, size);
 964              		.loc 1 242 0
 965 00ee 3B1C     		mov	r3, r7
 966 00f0 0B33     		add	r3, r3, #11
 967 00f2 1A78     		ldrb	r2, [r3]
 968 00f4 3B1C     		mov	r3, r7
 969 00f6 0A33     		add	r3, r3, #10
 970 00f8 1B78     		ldrb	r3, [r3]
 971 00fa 101C     		mov	r0, r2
 972 00fc 191C     		mov	r1, r3
 973 00fe FFF7FEFF 		bl	maintain_array
 974 0102 031C     		mov	r3, r0
 243:.\main.c      **** }
 975              		.loc 1 243 0
 976 0104 181C     		mov	r0, r3
 977 0106 BD46     		mov	sp, r7
 978 0108 06B0     		add	sp, sp, #24
 979              		@ sp needed
 980 010a 80BD     		pop	{r7, pc}
 981              		.cfi_endproc
 982              	.LFE39:
 983              		.size	check_update, .-check_update
 984              		.section	.text.pos_to_vel,"ax",%progbits
 985              		.align	2
 986              		.global	pos_to_vel
 987              		.code	16
 988              		.thumb_func
 989              		.type	pos_to_vel, %function
 990              	pos_to_vel:
 991              	.LFB40:
 244:.\main.c      **** 
 245:.\main.c      **** uint8 pos_to_vel(uint8 cur_pos, uint16* array, uint8 ARRAY_SIZE, uint16 command)
 246:.\main.c      **** {
 992              		.loc 1 246 0
 993              		.cfi_startproc
 994 0000 90B5     		push	{r4, r7, lr}
 995              		.cfi_def_cfa_offset 12
 996              		.cfi_offset 4, -12
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 23


 999 0002 83B0     		sub	sp, sp, #12
 1000              		.cfi_def_cfa_offset 24
 1001 0004 00AF     		add	r7, sp, #0
 1002              		.cfi_def_cfa_register 7
 1003 0006 3960     		str	r1, [r7]
 1004 0008 111C     		mov	r1, r2
 1005 000a 1A1C     		mov	r2, r3
 1006 000c FB1D     		add	r3, r7, #7
 1007 000e 1870     		strb	r0, [r3]
 1008 0010 BB1D     		add	r3, r7, #6
 1009 0012 1970     		strb	r1, [r3]
 1010 0014 3B1D     		add	r3, r7, #4
 1011 0016 1A80     		strh	r2, [r3]
 247:.\main.c      ****     if(command >= 1000 && command < 1125)
 1012              		.loc 1 247 0
 1013 0018 3B1D     		add	r3, r7, #4
 1014 001a 1A88     		ldrh	r2, [r3]
 1015 001c 724B     		ldr	r3, .L65
 1016 001e 9A42     		cmp	r2, r3
 1017 0020 11D9     		bls	.L54
 1018              		.loc 1 247 0 is_stmt 0 discriminator 1
 1019 0022 3B1D     		add	r3, r7, #4
 1020 0024 1A88     		ldrh	r2, [r3]
 1021 0026 714B     		ldr	r3, .L65+4
 1022 0028 9A42     		cmp	r2, r3
 1023 002a 0CD8     		bhi	.L54
 248:.\main.c      ****     {
 249:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -100);
 1024              		.loc 1 249 0 is_stmt 1
 1025 002c FC1D     		add	r4, r7, #7
 1026 002e 3868     		ldr	r0, [r7]
 1027 0030 FB1D     		add	r3, r7, #7
 1028 0032 1978     		ldrb	r1, [r3]
 1029 0034 BB1D     		add	r3, r7, #6
 1030 0036 1A78     		ldrb	r2, [r3]
 1031 0038 6423     		mov	r3, #100
 1032 003a 5B42     		neg	r3, r3
 1033 003c FFF7FEFF 		bl	check_update
 1034 0040 031C     		mov	r3, r0
 1035 0042 2370     		strb	r3, [r4]
 1036 0044 CAE0     		b	.L55
 1037              	.L54:
 250:.\main.c      ****     }
 251:.\main.c      ****     else if(command >= 1125 && command < 1250)
 1038              		.loc 1 251 0
 1039 0046 3B1D     		add	r3, r7, #4
 1040 0048 1A88     		ldrh	r2, [r3]
 1041 004a 684B     		ldr	r3, .L65+4
 1042 004c 9A42     		cmp	r2, r3
 1043 004e 11D9     		bls	.L56
 1044              		.loc 1 251 0 is_stmt 0 discriminator 1
 1045 0050 3B1D     		add	r3, r7, #4
 1046 0052 1A88     		ldrh	r2, [r3]
 1047 0054 664B     		ldr	r3, .L65+8
 1048 0056 9A42     		cmp	r2, r3
 1049 0058 0CD8     		bhi	.L56
 252:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 24


 253:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -50);  
 1050              		.loc 1 253 0 is_stmt 1
 1051 005a FC1D     		add	r4, r7, #7
 1052 005c 3868     		ldr	r0, [r7]
 1053 005e FB1D     		add	r3, r7, #7
 1054 0060 1978     		ldrb	r1, [r3]
 1055 0062 BB1D     		add	r3, r7, #6
 1056 0064 1A78     		ldrb	r2, [r3]
 1057 0066 3223     		mov	r3, #50
 1058 0068 5B42     		neg	r3, r3
 1059 006a FFF7FEFF 		bl	check_update
 1060 006e 031C     		mov	r3, r0
 1061 0070 2370     		strb	r3, [r4]
 1062 0072 B3E0     		b	.L55
 1063              	.L56:
 254:.\main.c      ****     }
 255:.\main.c      ****     else if(command >= 1250 && command < 1375)
 1064              		.loc 1 255 0
 1065 0074 3B1D     		add	r3, r7, #4
 1066 0076 1A88     		ldrh	r2, [r3]
 1067 0078 5D4B     		ldr	r3, .L65+8
 1068 007a 9A42     		cmp	r2, r3
 1069 007c 11D9     		bls	.L57
 1070              		.loc 1 255 0 is_stmt 0 discriminator 1
 1071 007e 3B1D     		add	r3, r7, #4
 1072 0080 1A88     		ldrh	r2, [r3]
 1073 0082 5C4B     		ldr	r3, .L65+12
 1074 0084 9A42     		cmp	r2, r3
 1075 0086 0CD8     		bhi	.L57
 256:.\main.c      ****     {
 257:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -10);
 1076              		.loc 1 257 0 is_stmt 1
 1077 0088 FC1D     		add	r4, r7, #7
 1078 008a 3868     		ldr	r0, [r7]
 1079 008c FB1D     		add	r3, r7, #7
 1080 008e 1978     		ldrb	r1, [r3]
 1081 0090 BB1D     		add	r3, r7, #6
 1082 0092 1A78     		ldrb	r2, [r3]
 1083 0094 0A23     		mov	r3, #10
 1084 0096 5B42     		neg	r3, r3
 1085 0098 FFF7FEFF 		bl	check_update
 1086 009c 031C     		mov	r3, r0
 1087 009e 2370     		strb	r3, [r4]
 1088 00a0 9CE0     		b	.L55
 1089              	.L57:
 258:.\main.c      ****     }
 259:.\main.c      ****     else if(command >= 1375 && command < 1490)
 1090              		.loc 1 259 0
 1091 00a2 3B1D     		add	r3, r7, #4
 1092 00a4 1A88     		ldrh	r2, [r3]
 1093 00a6 534B     		ldr	r3, .L65+12
 1094 00a8 9A42     		cmp	r2, r3
 1095 00aa 11D9     		bls	.L58
 1096              		.loc 1 259 0 is_stmt 0 discriminator 1
 1097 00ac 3B1D     		add	r3, r7, #4
 1098 00ae 1A88     		ldrh	r2, [r3]
 1099 00b0 514B     		ldr	r3, .L65+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 25


 1100 00b2 9A42     		cmp	r2, r3
 1101 00b4 0CD8     		bhi	.L58
 260:.\main.c      ****     {
 261:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, -5);
 1102              		.loc 1 261 0 is_stmt 1
 1103 00b6 FC1D     		add	r4, r7, #7
 1104 00b8 3868     		ldr	r0, [r7]
 1105 00ba FB1D     		add	r3, r7, #7
 1106 00bc 1978     		ldrb	r1, [r3]
 1107 00be BB1D     		add	r3, r7, #6
 1108 00c0 1A78     		ldrb	r2, [r3]
 1109 00c2 0523     		mov	r3, #5
 1110 00c4 5B42     		neg	r3, r3
 1111 00c6 FFF7FEFF 		bl	check_update
 1112 00ca 031C     		mov	r3, r0
 1113 00cc 2370     		strb	r3, [r4]
 1114 00ce 85E0     		b	.L55
 1115              	.L58:
 262:.\main.c      ****     }
 263:.\main.c      ****     else if(command <= 1510 && command >= 1490)
 1116              		.loc 1 263 0
 1117 00d0 3B1D     		add	r3, r7, #4
 1118 00d2 1A88     		ldrh	r2, [r3]
 1119 00d4 494B     		ldr	r3, .L65+20
 1120 00d6 9A42     		cmp	r2, r3
 1121 00d8 10D8     		bhi	.L59
 1122              		.loc 1 263 0 is_stmt 0 discriminator 1
 1123 00da 3B1D     		add	r3, r7, #4
 1124 00dc 1A88     		ldrh	r2, [r3]
 1125 00de 464B     		ldr	r3, .L65+16
 1126 00e0 9A42     		cmp	r2, r3
 1127 00e2 0BD9     		bls	.L59
 264:.\main.c      ****     {
 265:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1128              		.loc 1 265 0 is_stmt 1
 1129 00e4 FC1D     		add	r4, r7, #7
 1130 00e6 FB1D     		add	r3, r7, #7
 1131 00e8 1A78     		ldrb	r2, [r3]
 1132 00ea BB1D     		add	r3, r7, #6
 1133 00ec 1B78     		ldrb	r3, [r3]
 1134 00ee 101C     		mov	r0, r2
 1135 00f0 191C     		mov	r1, r3
 1136 00f2 FFF7FEFF 		bl	maintain_array
 1137 00f6 031C     		mov	r3, r0
 1138 00f8 2370     		strb	r3, [r4]
 1139 00fa 6FE0     		b	.L55
 1140              	.L59:
 266:.\main.c      ****     }
 267:.\main.c      ****     else if(command > 1510 && command <= 1625)
 1141              		.loc 1 267 0
 1142 00fc 3B1D     		add	r3, r7, #4
 1143 00fe 1A88     		ldrh	r2, [r3]
 1144 0100 3E4B     		ldr	r3, .L65+20
 1145 0102 9A42     		cmp	r2, r3
 1146 0104 13D9     		bls	.L60
 1147              		.loc 1 267 0 is_stmt 0 discriminator 1
 1148 0106 3B1D     		add	r3, r7, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 26


 1149 0108 1A88     		ldrh	r2, [r3]
 1150 010a 3D4B     		ldr	r3, .L65+24
 1151 010c 9A42     		cmp	r2, r3
 1152 010e 0ED8     		bhi	.L60
 268:.\main.c      ****     {
 269:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 5);
 1153              		.loc 1 269 0 is_stmt 1
 1154 0110 FC1D     		add	r4, r7, #7
 1155 0112 3968     		ldr	r1, [r7]
 1156 0114 FB1D     		add	r3, r7, #7
 1157 0116 1A78     		ldrb	r2, [r3]
 1158 0118 BB1D     		add	r3, r7, #6
 1159 011a 1B78     		ldrb	r3, [r3]
 1160 011c 081C     		mov	r0, r1
 1161 011e 111C     		mov	r1, r2
 1162 0120 1A1C     		mov	r2, r3
 1163 0122 0523     		mov	r3, #5
 1164 0124 FFF7FEFF 		bl	check_update
 1165 0128 031C     		mov	r3, r0
 1166 012a 2370     		strb	r3, [r4]
 1167 012c 56E0     		b	.L55
 1168              	.L60:
 270:.\main.c      ****     }
 271:.\main.c      ****     else if(command > 1625 && command <= 1750)
 1169              		.loc 1 271 0
 1170 012e 3B1D     		add	r3, r7, #4
 1171 0130 1A88     		ldrh	r2, [r3]
 1172 0132 334B     		ldr	r3, .L65+24
 1173 0134 9A42     		cmp	r2, r3
 1174 0136 13D9     		bls	.L61
 1175              		.loc 1 271 0 is_stmt 0 discriminator 1
 1176 0138 3B1D     		add	r3, r7, #4
 1177 013a 1A88     		ldrh	r2, [r3]
 1178 013c 314B     		ldr	r3, .L65+28
 1179 013e 9A42     		cmp	r2, r3
 1180 0140 0ED8     		bhi	.L61
 272:.\main.c      ****     {
 273:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 10);
 1181              		.loc 1 273 0 is_stmt 1
 1182 0142 FC1D     		add	r4, r7, #7
 1183 0144 3968     		ldr	r1, [r7]
 1184 0146 FB1D     		add	r3, r7, #7
 1185 0148 1A78     		ldrb	r2, [r3]
 1186 014a BB1D     		add	r3, r7, #6
 1187 014c 1B78     		ldrb	r3, [r3]
 1188 014e 081C     		mov	r0, r1
 1189 0150 111C     		mov	r1, r2
 1190 0152 1A1C     		mov	r2, r3
 1191 0154 0A23     		mov	r3, #10
 1192 0156 FFF7FEFF 		bl	check_update
 1193 015a 031C     		mov	r3, r0
 1194 015c 2370     		strb	r3, [r4]
 1195 015e 3DE0     		b	.L55
 1196              	.L61:
 274:.\main.c      ****     }
 275:.\main.c      ****     else if(command > 1750 && command <= 1875)
 1197              		.loc 1 275 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 27


 1198 0160 3B1D     		add	r3, r7, #4
 1199 0162 1A88     		ldrh	r2, [r3]
 1200 0164 274B     		ldr	r3, .L65+28
 1201 0166 9A42     		cmp	r2, r3
 1202 0168 13D9     		bls	.L62
 1203              		.loc 1 275 0 is_stmt 0 discriminator 1
 1204 016a 3B1D     		add	r3, r7, #4
 1205 016c 1A88     		ldrh	r2, [r3]
 1206 016e 264B     		ldr	r3, .L65+32
 1207 0170 9A42     		cmp	r2, r3
 1208 0172 0ED8     		bhi	.L62
 276:.\main.c      ****     {
 277:.\main.c      ****         cur_pos = check_update(array, cur_pos, ARRAY_SIZE, 50);
 1209              		.loc 1 277 0 is_stmt 1
 1210 0174 FC1D     		add	r4, r7, #7
 1211 0176 3968     		ldr	r1, [r7]
 1212 0178 FB1D     		add	r3, r7, #7
 1213 017a 1A78     		ldrb	r2, [r3]
 1214 017c BB1D     		add	r3, r7, #6
 1215 017e 1B78     		ldrb	r3, [r3]
 1216 0180 081C     		mov	r0, r1
 1217 0182 111C     		mov	r1, r2
 1218 0184 1A1C     		mov	r2, r3
 1219 0186 3223     		mov	r3, #50
 1220 0188 FFF7FEFF 		bl	check_update
 1221 018c 031C     		mov	r3, r0
 1222 018e 2370     		strb	r3, [r4]
 1223 0190 24E0     		b	.L55
 1224              	.L62:
 278:.\main.c      ****     }
 279:.\main.c      ****     else if(command > 1875 && command <= 2000)
 1225              		.loc 1 279 0
 1226 0192 3B1D     		add	r3, r7, #4
 1227 0194 1A88     		ldrh	r2, [r3]
 1228 0196 1C4B     		ldr	r3, .L65+32
 1229 0198 9A42     		cmp	r2, r3
 1230 019a 14D9     		bls	.L63
 1231              		.loc 1 279 0 is_stmt 0 discriminator 1
 1232 019c 3B1D     		add	r3, r7, #4
 1233 019e 1A88     		ldrh	r2, [r3]
 1234 01a0 FA23     		mov	r3, #250
 1235 01a2 DB00     		lsl	r3, r3, #3
 1236 01a4 9A42     		cmp	r2, r3
 1237 01a6 0ED8     		bhi	.L63
 280:.\main.c      ****     {
 281:.\main.c      ****          cur_pos = check_update(array, cur_pos, ARRAY_SIZE, +100);
 1238              		.loc 1 281 0 is_stmt 1
 1239 01a8 FC1D     		add	r4, r7, #7
 1240 01aa 3968     		ldr	r1, [r7]
 1241 01ac FB1D     		add	r3, r7, #7
 1242 01ae 1A78     		ldrb	r2, [r3]
 1243 01b0 BB1D     		add	r3, r7, #6
 1244 01b2 1B78     		ldrb	r3, [r3]
 1245 01b4 081C     		mov	r0, r1
 1246 01b6 111C     		mov	r1, r2
 1247 01b8 1A1C     		mov	r2, r3
 1248 01ba 6423     		mov	r3, #100
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 28


 1249 01bc FFF7FEFF 		bl	check_update
 1250 01c0 031C     		mov	r3, r0
 1251 01c2 2370     		strb	r3, [r4]
 1252 01c4 0AE0     		b	.L55
 1253              	.L63:
 282:.\main.c      ****     }
 283:.\main.c      ****     else
 284:.\main.c      ****     {
 285:.\main.c      ****         //throw error
 286:.\main.c      ****         cur_pos = maintain_array(cur_pos, ARRAY_SIZE);
 1254              		.loc 1 286 0
 1255 01c6 FC1D     		add	r4, r7, #7
 1256 01c8 FB1D     		add	r3, r7, #7
 1257 01ca 1A78     		ldrb	r2, [r3]
 1258 01cc BB1D     		add	r3, r7, #6
 1259 01ce 1B78     		ldrb	r3, [r3]
 1260 01d0 101C     		mov	r0, r2
 1261 01d2 191C     		mov	r1, r3
 1262 01d4 FFF7FEFF 		bl	maintain_array
 1263 01d8 031C     		mov	r3, r0
 1264 01da 2370     		strb	r3, [r4]
 1265              	.L55:
 287:.\main.c      ****     }
 288:.\main.c      ****     return cur_pos;
 1266              		.loc 1 288 0
 1267 01dc FB1D     		add	r3, r7, #7
 1268 01de 1B78     		ldrb	r3, [r3]
 289:.\main.c      **** }
 1269              		.loc 1 289 0
 1270 01e0 181C     		mov	r0, r3
 1271 01e2 BD46     		mov	sp, r7
 1272 01e4 03B0     		add	sp, sp, #12
 1273              		@ sp needed
 1274 01e6 90BD     		pop	{r4, r7, pc}
 1275              	.L66:
 1276              		.align	2
 1277              	.L65:
 1278 01e8 E7030000 		.word	999
 1279 01ec 64040000 		.word	1124
 1280 01f0 E1040000 		.word	1249
 1281 01f4 5E050000 		.word	1374
 1282 01f8 D1050000 		.word	1489
 1283 01fc E6050000 		.word	1510
 1284 0200 59060000 		.word	1625
 1285 0204 D6060000 		.word	1750
 1286 0208 53070000 		.word	1875
 1287              		.cfi_endproc
 1288              	.LFE40:
 1289              		.size	pos_to_vel, .-pos_to_vel
 1290              		.section	.text.make_command,"ax",%progbits
 1291              		.align	2
 1292              		.global	make_command
 1293              		.code	16
 1294              		.thumb_func
 1295              		.type	make_command, %function
 1296              	make_command:
 1297              	.LFB41:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 29


 290:.\main.c      **** 
 291:.\main.c      **** uint16 make_command(int8* info_array, uint8 byte1, uint8 byte2)
 292:.\main.c      **** {
 1298              		.loc 1 292 0
 1299              		.cfi_startproc
 1300 0000 80B5     		push	{r7, lr}
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 84B0     		sub	sp, sp, #16
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              		.cfi_def_cfa_register 7
 1308 0006 7860     		str	r0, [r7, #4]
 1309 0008 FB1C     		add	r3, r7, #3
 1310 000a 1970     		strb	r1, [r3]
 1311 000c BB1C     		add	r3, r7, #2
 1312 000e 1A70     		strb	r2, [r3]
 293:.\main.c      ****     uint16 command;
 294:.\main.c      ****     int16 temp1;
 295:.\main.c      ****     int16 temp2;
 296:.\main.c      ****     int16 temp3;
 297:.\main.c      ****     
 298:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1313              		.loc 1 298 0
 1314 0010 FB1C     		add	r3, r7, #3
 1315 0012 1B78     		ldrb	r3, [r3]
 1316 0014 7A68     		ldr	r2, [r7, #4]
 1317 0016 D318     		add	r3, r2, r3
 1318 0018 1B78     		ldrb	r3, [r3]
 1319 001a 5BB2     		sxtb	r3, r3
 1320 001c 1A02     		lsl	r2, r3, #8
 1321 001e 3B1C     		mov	r3, r7
 1322 0020 0E33     		add	r3, r3, #14
 1323 0022 1A80     		strh	r2, [r3]
 299:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1324              		.loc 1 299 0
 1325 0024 BB1C     		add	r3, r7, #2
 1326 0026 1B78     		ldrb	r3, [r3]
 1327 0028 7A68     		ldr	r2, [r7, #4]
 1328 002a D318     		add	r3, r2, r3
 1329 002c 1B78     		ldrb	r3, [r3]
 1330 002e 5BB2     		sxtb	r3, r3
 1331 0030 9AB2     		uxth	r2, r3
 1332 0032 3B1C     		mov	r3, r7
 1333 0034 0C33     		add	r3, r3, #12
 1334 0036 111C     		add	r1, r2, #0
 1335 0038 FF22     		mov	r2, #255
 1336 003a 0A40     		and	r2, r1
 1337 003c 1A80     		strh	r2, [r3]
 300:.\main.c      ****     temp3 = temp1 | temp2;
 1338              		.loc 1 300 0
 1339 003e 3B1C     		mov	r3, r7
 1340 0040 0A33     		add	r3, r3, #10
 1341 0042 391C     		mov	r1, r7
 1342 0044 0E31     		add	r1, r1, #14
 1343 0046 3A1C     		mov	r2, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 30


 1344 0048 0C32     		add	r2, r2, #12
 1345 004a 0988     		ldrh	r1, [r1]
 1346 004c 1288     		ldrh	r2, [r2]
 1347 004e 0A43     		orr	r2, r1
 1348 0050 1A80     		strh	r2, [r3]
 301:.\main.c      ****     command = (temp3/2) + 1500;
 1349              		.loc 1 301 0
 1350 0052 3B1C     		mov	r3, r7
 1351 0054 0A33     		add	r3, r3, #10
 1352 0056 0021     		mov	r1, #0
 1353 0058 5B5E     		ldrsh	r3, [r3, r1]
 1354 005a 002B     		cmp	r3, #0
 1355 005c 00DA     		bge	.L68
 1356 005e 0133     		add	r3, r3, #1
 1357              	.L68:
 1358 0060 5B10     		asr	r3, r3, #1
 1359 0062 9BB2     		uxth	r3, r3
 1360 0064 9AB2     		uxth	r2, r3
 1361 0066 3B1C     		mov	r3, r7
 1362 0068 0833     		add	r3, r3, #8
 1363 006a 0549     		ldr	r1, .L70
 1364 006c 5218     		add	r2, r2, r1
 1365 006e 1A80     		strh	r2, [r3]
 302:.\main.c      ****     return command;
 1366              		.loc 1 302 0
 1367 0070 3B1C     		mov	r3, r7
 1368 0072 0833     		add	r3, r3, #8
 1369 0074 1B88     		ldrh	r3, [r3]
 303:.\main.c      **** }
 1370              		.loc 1 303 0
 1371 0076 181C     		mov	r0, r3
 1372 0078 BD46     		mov	sp, r7
 1373 007a 04B0     		add	sp, sp, #16
 1374              		@ sp needed
 1375 007c 80BD     		pop	{r7, pc}
 1376              	.L71:
 1377 007e C046     		.align	2
 1378              	.L70:
 1379 0080 DC050000 		.word	1500
 1380              		.cfi_endproc
 1381              	.LFE41:
 1382              		.size	make_command, .-make_command
 1383              		.section	.text.potFeedback,"ax",%progbits
 1384              		.align	2
 1385              		.global	potFeedback
 1386              		.code	16
 1387              		.thumb_func
 1388              		.type	potFeedback, %function
 1389              	potFeedback:
 1390              	.LFB42:
 304:.\main.c      **** 
 305:.\main.c      **** uint16 potFeedback(uint32 channel)
 306:.\main.c      **** {
 1391              		.loc 1 306 0
 1392              		.cfi_startproc
 1393 0000 80B5     		push	{r7, lr}
 1394              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 31


 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397 0002 84B0     		sub	sp, sp, #16
 1398              		.cfi_def_cfa_offset 24
 1399 0004 00AF     		add	r7, sp, #0
 1400              		.cfi_def_cfa_register 7
 1401 0006 7860     		str	r0, [r7, #4]
 307:.\main.c      ****     //TODO: uncomment this section
 308:.\main.c      ****     uint16 feedback = ADC_GetResult16(channel);
 1402              		.loc 1 308 0
 1403 0008 7B68     		ldr	r3, [r7, #4]
 1404 000a 181C     		mov	r0, r3
 1405 000c FFF7FEFF 		bl	ADC_GetResult16
 1406 0010 031C     		mov	r3, r0
 1407 0012 1A1C     		mov	r2, r3
 1408 0014 3B1C     		mov	r3, r7
 1409 0016 0E33     		add	r3, r3, #14
 1410 0018 1A80     		strh	r2, [r3]
 309:.\main.c      ****     //uint16 feedback = 500;
 310:.\main.c      ****     return feedback;
 1411              		.loc 1 310 0
 1412 001a 3B1C     		mov	r3, r7
 1413 001c 0E33     		add	r3, r3, #14
 1414 001e 1B88     		ldrh	r3, [r3]
 311:.\main.c      **** }
 1415              		.loc 1 311 0
 1416 0020 181C     		mov	r0, r3
 1417 0022 BD46     		mov	sp, r7
 1418 0024 04B0     		add	sp, sp, #16
 1419              		@ sp needed
 1420 0026 80BD     		pop	{r7, pc}
 1421              		.cfi_endproc
 1422              	.LFE42:
 1423              		.size	potFeedback, .-potFeedback
 1424              		.section	.text.send_packet,"ax",%progbits
 1425              		.align	2
 1426              		.global	send_packet
 1427              		.code	16
 1428              		.thumb_func
 1429              		.type	send_packet, %function
 1430              	send_packet:
 1431              	.LFB43:
 312:.\main.c      **** 
 313:.\main.c      **** void send_packet(uint8 heart_beat)
 314:.\main.c      **** {
 1432              		.loc 1 314 0
 1433              		.cfi_startproc
 1434 0000 80B5     		push	{r7, lr}
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 7, -8
 1437              		.cfi_offset 14, -4
 1438 0002 82B0     		sub	sp, sp, #8
 1439              		.cfi_def_cfa_offset 16
 1440 0004 00AF     		add	r7, sp, #0
 1441              		.cfi_def_cfa_register 7
 1442 0006 021C     		mov	r2, r0
 1443 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 32


 1444 000a 1A70     		strb	r2, [r3]
 315:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 316:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 317:.\main.c      ****     //TODO define system state
 318:.\main.c      ****     //send packet via serial to wiznet
 319:.\main.c      ****     
 320:.\main.c      ****     if(heart_beat){
 1445              		.loc 1 320 0
 1446 000c FB1D     		add	r3, r7, #7
 1447 000e 1B78     		ldrb	r3, [r3]
 1448 0010 002B     		cmp	r3, #0
 1449 0012 32D0     		beq	.L75
 321:.\main.c      ****         feedback_array[0] = 7;
 1450              		.loc 1 321 0
 1451 0014 3A4B     		ldr	r3, .L78
 1452 0016 0722     		mov	r2, #7
 1453 0018 1A70     		strb	r2, [r3]
 322:.\main.c      ****         feedback_array[1] = 7;
 1454              		.loc 1 322 0
 1455 001a 394B     		ldr	r3, .L78
 1456 001c 0722     		mov	r2, #7
 1457 001e 5A70     		strb	r2, [r3, #1]
 323:.\main.c      ****         feedback_array[2] = 7;
 1458              		.loc 1 323 0
 1459 0020 374B     		ldr	r3, .L78
 1460 0022 0722     		mov	r2, #7
 1461 0024 9A70     		strb	r2, [r3, #2]
 324:.\main.c      ****         feedback_array[3] = 7;
 1462              		.loc 1 324 0
 1463 0026 364B     		ldr	r3, .L78
 1464 0028 0722     		mov	r2, #7
 1465 002a DA70     		strb	r2, [r3, #3]
 325:.\main.c      ****         feedback_array[4] = 7;
 1466              		.loc 1 325 0
 1467 002c 344B     		ldr	r3, .L78
 1468 002e 0722     		mov	r2, #7
 1469 0030 1A71     		strb	r2, [r3, #4]
 326:.\main.c      ****         feedback_array[5] = 7;
 1470              		.loc 1 326 0
 1471 0032 334B     		ldr	r3, .L78
 1472 0034 0722     		mov	r2, #7
 1473 0036 5A71     		strb	r2, [r3, #5]
 327:.\main.c      ****         feedback_array[6] = 7;
 1474              		.loc 1 327 0
 1475 0038 314B     		ldr	r3, .L78
 1476 003a 0722     		mov	r2, #7
 1477 003c 9A71     		strb	r2, [r3, #6]
 328:.\main.c      ****         feedback_array[7] = 7;
 1478              		.loc 1 328 0
 1479 003e 304B     		ldr	r3, .L78
 1480 0040 0722     		mov	r2, #7
 1481 0042 DA71     		strb	r2, [r3, #7]
 329:.\main.c      ****         feedback_array[8] = 7;
 1482              		.loc 1 329 0
 1483 0044 2E4B     		ldr	r3, .L78
 1484 0046 0722     		mov	r2, #7
 1485 0048 1A72     		strb	r2, [r3, #8]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 33


 330:.\main.c      ****         feedback_array[9] = 7;
 1486              		.loc 1 330 0
 1487 004a 2D4B     		ldr	r3, .L78
 1488 004c 0722     		mov	r2, #7
 1489 004e 5A72     		strb	r2, [r3, #9]
 331:.\main.c      ****         feedback_array[10] = 7;
 1490              		.loc 1 331 0
 1491 0050 2B4B     		ldr	r3, .L78
 1492 0052 0722     		mov	r2, #7
 1493 0054 9A72     		strb	r2, [r3, #10]
 332:.\main.c      ****         feedback_array[11] = 7;
 1494              		.loc 1 332 0
 1495 0056 2A4B     		ldr	r3, .L78
 1496 0058 0722     		mov	r2, #7
 1497 005a DA72     		strb	r2, [r3, #11]
 333:.\main.c      ****         feedback_array[12] = 7;
 1498              		.loc 1 333 0
 1499 005c 284B     		ldr	r3, .L78
 1500 005e 0722     		mov	r2, #7
 1501 0060 1A73     		strb	r2, [r3, #12]
 334:.\main.c      ****         feedback_array[13] = 0xee;
 1502              		.loc 1 334 0
 1503 0062 274B     		ldr	r3, .L78
 1504 0064 EE22     		mov	r2, #238
 1505 0066 5A73     		strb	r2, [r3, #13]
 335:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1506              		.loc 1 335 0
 1507 0068 254B     		ldr	r3, .L78
 1508 006a 181C     		mov	r0, r3
 1509 006c 0E21     		mov	r1, #14
 1510 006e FFF7FEFF 		bl	wiznetWriteUdpFrame
 336:.\main.c      ****         LED_Write(1);
 1511              		.loc 1 336 0
 1512 0072 0120     		mov	r0, #1
 1513 0074 FFF7FEFF 		bl	LED_Write
 1514 0078 31E0     		b	.L76
 1515              	.L75:
 337:.\main.c      ****     }
 338:.\main.c      ****     else{
 339:.\main.c      ****         feedback_array[0] = 7;      // ph value
 1516              		.loc 1 339 0
 1517 007a 214B     		ldr	r3, .L78
 1518 007c 0722     		mov	r2, #7
 1519 007e 1A70     		strb	r2, [r3]
 340:.\main.c      ****         feedback_array[1] = 7;      // humidity
 1520              		.loc 1 340 0
 1521 0080 1F4B     		ldr	r3, .L78
 1522 0082 0722     		mov	r2, #7
 1523 0084 5A70     		strb	r2, [r3, #1]
 341:.\main.c      ****         feedback_array[2] = 7;      // wrist rotate temperature
 1524              		.loc 1 341 0
 1525 0086 1E4B     		ldr	r3, .L78
 1526 0088 0722     		mov	r2, #7
 1527 008a 9A70     		strb	r2, [r3, #2]
 342:.\main.c      ****         feedback_array[3] = 7;      // wrist rotate position
 1528              		.loc 1 342 0
 1529 008c 1C4B     		ldr	r3, .L78
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 34


 1530 008e 0722     		mov	r2, #7
 1531 0090 DA70     		strb	r2, [r3, #3]
 343:.\main.c      ****         feedback_array[4] = 7;      // wrist rotate error status
 1532              		.loc 1 343 0
 1533 0092 1B4B     		ldr	r3, .L78
 1534 0094 0722     		mov	r2, #7
 1535 0096 1A71     		strb	r2, [r3, #4]
 344:.\main.c      ****         feedback_array[5] = 7;      // wrist tilt temperature
 1536              		.loc 1 344 0
 1537 0098 194B     		ldr	r3, .L78
 1538 009a 0722     		mov	r2, #7
 1539 009c 5A71     		strb	r2, [r3, #5]
 345:.\main.c      ****         feedback_array[6] = 7;      // wrist tilt position
 1540              		.loc 1 345 0
 1541 009e 184B     		ldr	r3, .L78
 1542 00a0 0722     		mov	r2, #7
 1543 00a2 9A71     		strb	r2, [r3, #6]
 346:.\main.c      ****         feedback_array[7] = 7;      // wrist tilt error statue
 1544              		.loc 1 346 0
 1545 00a4 164B     		ldr	r3, .L78
 1546 00a6 0722     		mov	r2, #7
 1547 00a8 DA71     		strb	r2, [r3, #7]
 347:.\main.c      ****         feedback_array[8] = 7;      // elbow stop switch count
 1548              		.loc 1 347 0
 1549 00aa 154B     		ldr	r3, .L78
 1550 00ac 0722     		mov	r2, #7
 1551 00ae 1A72     		strb	r2, [r3, #8]
 348:.\main.c      ****         feedback_array[9] = 7;      // elbow pot value
 1552              		.loc 1 348 0
 1553 00b0 134B     		ldr	r3, .L78
 1554 00b2 0722     		mov	r2, #7
 1555 00b4 5A72     		strb	r2, [r3, #9]
 349:.\main.c      ****         feedback_array[10] = 7;      // shoulder stop swtich count
 1556              		.loc 1 349 0
 1557 00b6 124B     		ldr	r3, .L78
 1558 00b8 0722     		mov	r2, #7
 1559 00ba 9A72     		strb	r2, [r3, #10]
 350:.\main.c      ****         feedback_array[11] = 7;      // shoulder pot value
 1560              		.loc 1 350 0
 1561 00bc 104B     		ldr	r3, .L78
 1562 00be 0722     		mov	r2, #7
 1563 00c0 DA72     		strb	r2, [r3, #11]
 351:.\main.c      ****         feedback_array[12] = 7;      // turret error status
 1564              		.loc 1 351 0
 1565 00c2 0F4B     		ldr	r3, .L78
 1566 00c4 0722     		mov	r2, #7
 1567 00c6 1A73     		strb	r2, [r3, #12]
 352:.\main.c      ****         feedback_array[13] = 0xff;       
 1568              		.loc 1 352 0
 1569 00c8 0D4B     		ldr	r3, .L78
 1570 00ca FF22     		mov	r2, #255
 1571 00cc 5A73     		strb	r2, [r3, #13]
 353:.\main.c      ****         wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1572              		.loc 1 353 0
 1573 00ce 0C4B     		ldr	r3, .L78
 1574 00d0 181C     		mov	r0, r3
 1575 00d2 0E21     		mov	r1, #14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 35


 1576 00d4 FFF7FEFF 		bl	wiznetWriteUdpFrame
 354:.\main.c      ****         LED_Write(1);
 1577              		.loc 1 354 0
 1578 00d8 0120     		mov	r0, #1
 1579 00da FFF7FEFF 		bl	LED_Write
 1580              	.L76:
 355:.\main.c      ****     }
 356:.\main.c      ****     wiznetSend();
 1581              		.loc 1 356 0
 1582 00de FFF7FEFF 		bl	wiznetSend
 357:.\main.c      ****     while(WIZ_INT_Read() == 1);
 1583              		.loc 1 357 0
 1584 00e2 C046     		mov	r8, r8
 1585              	.L77:
 1586              		.loc 1 357 0 is_stmt 0 discriminator 1
 1587 00e4 FFF7FEFF 		bl	WIZ_INT_Read
 1588 00e8 031C     		mov	r3, r0
 1589 00ea 012B     		cmp	r3, #1
 1590 00ec FAD0     		beq	.L77
 358:.\main.c      ****     wiznetClearInterrupts();
 1591              		.loc 1 358 0 is_stmt 1
 1592 00ee FFF7FEFF 		bl	wiznetClearInterrupts
 359:.\main.c      ****     LED_Write(0);    
 1593              		.loc 1 359 0
 1594 00f2 0020     		mov	r0, #0
 1595 00f4 FFF7FEFF 		bl	LED_Write
 360:.\main.c      **** }
 1596              		.loc 1 360 0
 1597 00f8 BD46     		mov	sp, r7
 1598 00fa 02B0     		add	sp, sp, #8
 1599              		@ sp needed
 1600 00fc 80BD     		pop	{r7, pc}
 1601              	.L79:
 1602 00fe C046     		.align	2
 1603              	.L78:
 1604 0100 00000000 		.word	feedback_array
 1605              		.cfi_endproc
 1606              	.LFE43:
 1607              		.size	send_packet, .-send_packet
 1608              		.section	.text.fill_data_array,"ax",%progbits
 1609              		.align	2
 1610              		.global	fill_data_array
 1611              		.code	16
 1612              		.thumb_func
 1613              		.type	fill_data_array, %function
 1614              	fill_data_array:
 1615              	.LFB44:
 361:.\main.c      **** 
 362:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 363:.\main.c      **** void fill_data_array()
 364:.\main.c      **** {
 1616              		.loc 1 364 0
 1617              		.cfi_startproc
 1618 0000 80B5     		push	{r7, lr}
 1619              		.cfi_def_cfa_offset 8
 1620              		.cfi_offset 7, -8
 1621              		.cfi_offset 14, -4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 36


 1622 0002 00AF     		add	r7, sp, #0
 1623              		.cfi_def_cfa_register 7
 365:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1624              		.loc 1 365 0
 1625 0004 034B     		ldr	r3, .L81
 1626 0006 181C     		mov	r0, r3
 1627 0008 1621     		mov	r1, #22
 1628 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 366:.\main.c      **** //    uint8 i = 0;
 367:.\main.c      **** //    for(i = 0; i < TEST_ARRAY_SIZE; i++)
 368:.\main.c      **** //    {
 369:.\main.c      **** //        data_array[i] = test_array[i];
 370:.\main.c      **** //    }
 371:.\main.c      **** }
 1629              		.loc 1 371 0
 1630 000e BD46     		mov	sp, r7
 1631              		@ sp needed
 1632 0010 80BD     		pop	{r7, pc}
 1633              	.L82:
 1634 0012 C046     		.align	2
 1635              	.L81:
 1636 0014 00000000 		.word	data_array
 1637              		.cfi_endproc
 1638              	.LFE44:
 1639              		.size	fill_data_array, .-fill_data_array
 1640              		.section	.text.ServoGoalPosition,"ax",%progbits
 1641              		.align	2
 1642              		.global	ServoGoalPosition
 1643              		.code	16
 1644              		.thumb_func
 1645              		.type	ServoGoalPosition, %function
 1646              	ServoGoalPosition:
 1647              	.LFB45:
 372:.\main.c      **** 
 373:.\main.c      **** void ServoGoalPosition( uint8 servoID, uint16 position)
 374:.\main.c      **** {
 1648              		.loc 1 374 0
 1649              		.cfi_startproc
 1650 0000 80B5     		push	{r7, lr}
 1651              		.cfi_def_cfa_offset 8
 1652              		.cfi_offset 7, -8
 1653              		.cfi_offset 14, -4
 1654 0002 86B0     		sub	sp, sp, #24
 1655              		.cfi_def_cfa_offset 32
 1656 0004 00AF     		add	r7, sp, #0
 1657              		.cfi_def_cfa_register 7
 1658 0006 0A1C     		mov	r2, r1
 1659 0008 FB1D     		add	r3, r7, #7
 1660 000a 011C     		add	r1, r0, #0
 1661 000c 1970     		strb	r1, [r3]
 1662 000e 3B1D     		add	r3, r7, #4
 1663 0010 1A80     		strh	r2, [r3]
 375:.\main.c      ****     uint8 array[9];
 376:.\main.c      ****     
 377:.\main.c      ****     array[0] = 0xFF;
 1664              		.loc 1 377 0
 1665 0012 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 37


 1666 0014 0C33     		add	r3, r3, #12
 1667 0016 FF22     		mov	r2, #255
 1668 0018 1A70     		strb	r2, [r3]
 378:.\main.c      ****     array[1] = 0xFF;
 1669              		.loc 1 378 0
 1670 001a 3B1C     		mov	r3, r7
 1671 001c 0C33     		add	r3, r3, #12
 1672 001e FF22     		mov	r2, #255
 1673 0020 5A70     		strb	r2, [r3, #1]
 379:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1674              		.loc 1 379 0
 1675 0022 3B1C     		mov	r3, r7
 1676 0024 0C33     		add	r3, r3, #12
 1677 0026 FA1D     		add	r2, r7, #7
 1678 0028 1278     		ldrb	r2, [r2]
 1679 002a 9A70     		strb	r2, [r3, #2]
 380:.\main.c      ****     array[3] = 0x05;
 1680              		.loc 1 380 0
 1681 002c 3B1C     		mov	r3, r7
 1682 002e 0C33     		add	r3, r3, #12
 1683 0030 0522     		mov	r2, #5
 1684 0032 DA70     		strb	r2, [r3, #3]
 381:.\main.c      ****     array[4] = 0x03; //write instruction
 1685              		.loc 1 381 0
 1686 0034 3B1C     		mov	r3, r7
 1687 0036 0C33     		add	r3, r3, #12
 1688 0038 0322     		mov	r2, #3
 1689 003a 1A71     		strb	r2, [r3, #4]
 382:.\main.c      ****     array[5] = 0x1E;
 1690              		.loc 1 382 0
 1691 003c 3B1C     		mov	r3, r7
 1692 003e 0C33     		add	r3, r3, #12
 1693 0040 1E22     		mov	r2, #30
 1694 0042 5A71     		strb	r2, [r3, #5]
 383:.\main.c      ****     array[6] = position;
 1695              		.loc 1 383 0
 1696 0044 3B1D     		add	r3, r7, #4
 1697 0046 1B88     		ldrh	r3, [r3]
 1698 0048 DAB2     		uxtb	r2, r3
 1699 004a 3B1C     		mov	r3, r7
 1700 004c 0C33     		add	r3, r3, #12
 1701 004e 9A71     		strb	r2, [r3, #6]
 384:.\main.c      ****     array[7] = position >> 8;
 1702              		.loc 1 384 0
 1703 0050 3B1D     		add	r3, r7, #4
 1704 0052 1B88     		ldrh	r3, [r3]
 1705 0054 1B0A     		lsr	r3, r3, #8
 1706 0056 9BB2     		uxth	r3, r3
 1707 0058 DAB2     		uxtb	r2, r3
 1708 005a 3B1C     		mov	r3, r7
 1709 005c 0C33     		add	r3, r3, #12
 1710 005e DA71     		strb	r2, [r3, #7]
 385:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
 1711              		.loc 1 385 0
 1712 0060 3B1C     		mov	r3, r7
 1713 0062 0C33     		add	r3, r3, #12
 1714 0064 9A79     		ldrb	r2, [r3, #6]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 38


 1715 0066 FB1D     		add	r3, r7, #7
 1716 0068 1B78     		ldrb	r3, [r3]
 1717 006a D318     		add	r3, r2, r3
 1718 006c DAB2     		uxtb	r2, r3
 1719 006e 3B1C     		mov	r3, r7
 1720 0070 0C33     		add	r3, r3, #12
 1721 0072 DB79     		ldrb	r3, [r3, #7]
 1722 0074 D318     		add	r3, r2, r3
 1723 0076 DBB2     		uxtb	r3, r3
 1724 0078 2633     		add	r3, r3, #38
 1725 007a DBB2     		uxtb	r3, r3
 1726 007c DB43     		mvn	r3, r3
 1727 007e DAB2     		uxtb	r2, r3
 1728 0080 3B1C     		mov	r3, r7
 1729 0082 0C33     		add	r3, r3, #12
 1730 0084 1A72     		strb	r2, [r3, #8]
 386:.\main.c      ****     
 387:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);  
 1731              		.loc 1 387 0
 1732 0086 3B1C     		mov	r3, r7
 1733 0088 0C33     		add	r3, r3, #12
 1734 008a 181C     		mov	r0, r3
 1735 008c 0921     		mov	r1, #9
 1736 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 388:.\main.c      **** }
 1737              		.loc 1 388 0
 1738 0092 BD46     		mov	sp, r7
 1739 0094 06B0     		add	sp, sp, #24
 1740              		@ sp needed
 1741 0096 80BD     		pop	{r7, pc}
 1742              		.cfi_endproc
 1743              	.LFE45:
 1744              		.size	ServoGoalPosition, .-ServoGoalPosition
 1745              		.section	.text.SetServoTorque,"ax",%progbits
 1746              		.align	2
 1747              		.global	SetServoTorque
 1748              		.code	16
 1749              		.thumb_func
 1750              		.type	SetServoTorque, %function
 1751              	SetServoTorque:
 1752              	.LFB46:
 389:.\main.c      **** 
 390:.\main.c      **** void SetServoTorque( uint8 servoID, uint16 torque)
 391:.\main.c      **** {
 1753              		.loc 1 391 0
 1754              		.cfi_startproc
 1755 0000 80B5     		push	{r7, lr}
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 7, -8
 1758              		.cfi_offset 14, -4
 1759 0002 86B0     		sub	sp, sp, #24
 1760              		.cfi_def_cfa_offset 32
 1761 0004 00AF     		add	r7, sp, #0
 1762              		.cfi_def_cfa_register 7
 1763 0006 0A1C     		mov	r2, r1
 1764 0008 FB1D     		add	r3, r7, #7
 1765 000a 011C     		add	r1, r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 39


 1766 000c 1970     		strb	r1, [r3]
 1767 000e 3B1D     		add	r3, r7, #4
 1768 0010 1A80     		strh	r2, [r3]
 392:.\main.c      ****     uint8 array[9];
 393:.\main.c      ****     
 394:.\main.c      ****     array[0] = 0xFF;
 1769              		.loc 1 394 0
 1770 0012 3B1C     		mov	r3, r7
 1771 0014 0C33     		add	r3, r3, #12
 1772 0016 FF22     		mov	r2, #255
 1773 0018 1A70     		strb	r2, [r3]
 395:.\main.c      ****     array[1] = 0xFF;
 1774              		.loc 1 395 0
 1775 001a 3B1C     		mov	r3, r7
 1776 001c 0C33     		add	r3, r3, #12
 1777 001e FF22     		mov	r2, #255
 1778 0020 5A70     		strb	r2, [r3, #1]
 396:.\main.c      ****     array[2] = servoID; 
 1779              		.loc 1 396 0
 1780 0022 3B1C     		mov	r3, r7
 1781 0024 0C33     		add	r3, r3, #12
 1782 0026 FA1D     		add	r2, r7, #7
 1783 0028 1278     		ldrb	r2, [r2]
 1784 002a 9A70     		strb	r2, [r3, #2]
 397:.\main.c      ****     array[3] = 0x05;
 1785              		.loc 1 397 0
 1786 002c 3B1C     		mov	r3, r7
 1787 002e 0C33     		add	r3, r3, #12
 1788 0030 0522     		mov	r2, #5
 1789 0032 DA70     		strb	r2, [r3, #3]
 398:.\main.c      ****     array[4] = 0x03; //write instruction
 1790              		.loc 1 398 0
 1791 0034 3B1C     		mov	r3, r7
 1792 0036 0C33     		add	r3, r3, #12
 1793 0038 0322     		mov	r2, #3
 1794 003a 1A71     		strb	r2, [r3, #4]
 399:.\main.c      ****     array[5] = 0x0E;
 1795              		.loc 1 399 0
 1796 003c 3B1C     		mov	r3, r7
 1797 003e 0C33     		add	r3, r3, #12
 1798 0040 0E22     		mov	r2, #14
 1799 0042 5A71     		strb	r2, [r3, #5]
 400:.\main.c      ****     array[6] = torque;
 1800              		.loc 1 400 0
 1801 0044 3B1D     		add	r3, r7, #4
 1802 0046 1B88     		ldrh	r3, [r3]
 1803 0048 DAB2     		uxtb	r2, r3
 1804 004a 3B1C     		mov	r3, r7
 1805 004c 0C33     		add	r3, r3, #12
 1806 004e 9A71     		strb	r2, [r3, #6]
 401:.\main.c      ****     array[7] = torque >> 8;
 1807              		.loc 1 401 0
 1808 0050 3B1D     		add	r3, r7, #4
 1809 0052 1B88     		ldrh	r3, [r3]
 1810 0054 1B0A     		lsr	r3, r3, #8
 1811 0056 9BB2     		uxth	r3, r3
 1812 0058 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 40


 1813 005a 3B1C     		mov	r3, r7
 1814 005c 0C33     		add	r3, r3, #12
 1815 005e DA71     		strb	r2, [r3, #7]
 402:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 1816              		.loc 1 402 0
 1817 0060 3B1C     		mov	r3, r7
 1818 0062 0C33     		add	r3, r3, #12
 1819 0064 9A79     		ldrb	r2, [r3, #6]
 1820 0066 FB1D     		add	r3, r7, #7
 1821 0068 1B78     		ldrb	r3, [r3]
 1822 006a D318     		add	r3, r2, r3
 1823 006c DAB2     		uxtb	r2, r3
 1824 006e 3B1C     		mov	r3, r7
 1825 0070 0C33     		add	r3, r3, #12
 1826 0072 DB79     		ldrb	r3, [r3, #7]
 1827 0074 D318     		add	r3, r2, r3
 1828 0076 DBB2     		uxtb	r3, r3
 1829 0078 1633     		add	r3, r3, #22
 1830 007a DBB2     		uxtb	r3, r3
 1831 007c DB43     		mvn	r3, r3
 1832 007e DAB2     		uxtb	r2, r3
 1833 0080 3B1C     		mov	r3, r7
 1834 0082 0C33     		add	r3, r3, #12
 1835 0084 1A72     		strb	r2, [r3, #8]
 403:.\main.c      ****     
 404:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1836              		.loc 1 404 0
 1837 0086 3B1C     		mov	r3, r7
 1838 0088 0C33     		add	r3, r3, #12
 1839 008a 181C     		mov	r0, r3
 1840 008c 0921     		mov	r1, #9
 1841 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 405:.\main.c      ****     
 406:.\main.c      **** }    
 1842              		.loc 1 406 0
 1843 0092 BD46     		mov	sp, r7
 1844 0094 06B0     		add	sp, sp, #24
 1845              		@ sp needed
 1846 0096 80BD     		pop	{r7, pc}
 1847              		.cfi_endproc
 1848              	.LFE46:
 1849              		.size	SetServoTorque, .-SetServoTorque
 1850              		.section	.text.ServoSpeed,"ax",%progbits
 1851              		.align	2
 1852              		.global	ServoSpeed
 1853              		.code	16
 1854              		.thumb_func
 1855              		.type	ServoSpeed, %function
 1856              	ServoSpeed:
 1857              	.LFB47:
 407:.\main.c      **** 
 408:.\main.c      **** void ServoSpeed( uint8 servoID, uint16 speed)
 409:.\main.c      **** {
 1858              		.loc 1 409 0
 1859              		.cfi_startproc
 1860 0000 80B5     		push	{r7, lr}
 1861              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 41


 1862              		.cfi_offset 7, -8
 1863              		.cfi_offset 14, -4
 1864 0002 86B0     		sub	sp, sp, #24
 1865              		.cfi_def_cfa_offset 32
 1866 0004 00AF     		add	r7, sp, #0
 1867              		.cfi_def_cfa_register 7
 1868 0006 0A1C     		mov	r2, r1
 1869 0008 FB1D     		add	r3, r7, #7
 1870 000a 011C     		add	r1, r0, #0
 1871 000c 1970     		strb	r1, [r3]
 1872 000e 3B1D     		add	r3, r7, #4
 1873 0010 1A80     		strh	r2, [r3]
 410:.\main.c      ****     uint8 array[9];
 411:.\main.c      ****     
 412:.\main.c      ****     array[0] = 0xFF;
 1874              		.loc 1 412 0
 1875 0012 3B1C     		mov	r3, r7
 1876 0014 0C33     		add	r3, r3, #12
 1877 0016 FF22     		mov	r2, #255
 1878 0018 1A70     		strb	r2, [r3]
 413:.\main.c      ****     array[1] = 0xFF;
 1879              		.loc 1 413 0
 1880 001a 3B1C     		mov	r3, r7
 1881 001c 0C33     		add	r3, r3, #12
 1882 001e FF22     		mov	r2, #255
 1883 0020 5A70     		strb	r2, [r3, #1]
 414:.\main.c      ****     array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 1884              		.loc 1 414 0
 1885 0022 3B1C     		mov	r3, r7
 1886 0024 0C33     		add	r3, r3, #12
 1887 0026 FA1D     		add	r2, r7, #7
 1888 0028 1278     		ldrb	r2, [r2]
 1889 002a 9A70     		strb	r2, [r3, #2]
 415:.\main.c      ****     array[3] = 0x05;
 1890              		.loc 1 415 0
 1891 002c 3B1C     		mov	r3, r7
 1892 002e 0C33     		add	r3, r3, #12
 1893 0030 0522     		mov	r2, #5
 1894 0032 DA70     		strb	r2, [r3, #3]
 416:.\main.c      ****     array[4] = 0x03; //write instruction
 1895              		.loc 1 416 0
 1896 0034 3B1C     		mov	r3, r7
 1897 0036 0C33     		add	r3, r3, #12
 1898 0038 0322     		mov	r2, #3
 1899 003a 1A71     		strb	r2, [r3, #4]
 417:.\main.c      ****     array[5] = 0x20;
 1900              		.loc 1 417 0
 1901 003c 3B1C     		mov	r3, r7
 1902 003e 0C33     		add	r3, r3, #12
 1903 0040 2022     		mov	r2, #32
 1904 0042 5A71     		strb	r2, [r3, #5]
 418:.\main.c      ****     array[6] = speed;
 1905              		.loc 1 418 0
 1906 0044 3B1D     		add	r3, r7, #4
 1907 0046 1B88     		ldrh	r3, [r3]
 1908 0048 DAB2     		uxtb	r2, r3
 1909 004a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 42


 1910 004c 0C33     		add	r3, r3, #12
 1911 004e 9A71     		strb	r2, [r3, #6]
 419:.\main.c      ****     array[7] = speed >> 8;
 1912              		.loc 1 419 0
 1913 0050 3B1D     		add	r3, r7, #4
 1914 0052 1B88     		ldrh	r3, [r3]
 1915 0054 1B0A     		lsr	r3, r3, #8
 1916 0056 9BB2     		uxth	r3, r3
 1917 0058 DAB2     		uxtb	r2, r3
 1918 005a 3B1C     		mov	r3, r7
 1919 005c 0C33     		add	r3, r3, #12
 1920 005e DA71     		strb	r2, [r3, #7]
 420:.\main.c      ****     array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 1921              		.loc 1 420 0
 1922 0060 3B1C     		mov	r3, r7
 1923 0062 0C33     		add	r3, r3, #12
 1924 0064 9A79     		ldrb	r2, [r3, #6]
 1925 0066 FB1D     		add	r3, r7, #7
 1926 0068 1B78     		ldrb	r3, [r3]
 1927 006a D318     		add	r3, r2, r3
 1928 006c DAB2     		uxtb	r2, r3
 1929 006e 3B1C     		mov	r3, r7
 1930 0070 0C33     		add	r3, r3, #12
 1931 0072 DB79     		ldrb	r3, [r3, #7]
 1932 0074 D318     		add	r3, r2, r3
 1933 0076 DBB2     		uxtb	r3, r3
 1934 0078 2833     		add	r3, r3, #40
 1935 007a DBB2     		uxtb	r3, r3
 1936 007c DB43     		mvn	r3, r3
 1937 007e DAB2     		uxtb	r2, r3
 1938 0080 3B1C     		mov	r3, r7
 1939 0082 0C33     		add	r3, r3, #12
 1940 0084 1A72     		strb	r2, [r3, #8]
 421:.\main.c      ****     
 422:.\main.c      ****     UART_1_SpiUartPutArray(array, 0x09);
 1941              		.loc 1 422 0
 1942 0086 3B1C     		mov	r3, r7
 1943 0088 0C33     		add	r3, r3, #12
 1944 008a 181C     		mov	r0, r3
 1945 008c 0921     		mov	r1, #9
 1946 008e FFF7FEFF 		bl	UART_1_SpiUartPutArray
 423:.\main.c      ****     
 424:.\main.c      **** }
 1947              		.loc 1 424 0
 1948 0092 BD46     		mov	sp, r7
 1949 0094 06B0     		add	sp, sp, #24
 1950              		@ sp needed
 1951 0096 80BD     		pop	{r7, pc}
 1952              		.cfi_endproc
 1953              	.LFE47:
 1954              		.size	ServoSpeed, .-ServoSpeed
 1955              		.comm	wristTilt_state,1,1
 1956              		.section	.text.wristTilt,"ax",%progbits
 1957              		.align	2
 1958              		.global	wristTilt
 1959              		.code	16
 1960              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 43


 1961              		.type	wristTilt, %function
 1962              	wristTilt:
 1963              	.LFB48:
 425:.\main.c      **** 
 426:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 427:.\main.c      **** //control the tilting motion of the wrist
 428:.\main.c      **** uint8 wristTilt(uint8 WT_arr_cspot, uint16* WT_array)
 429:.\main.c      **** {
 1964              		.loc 1 429 0
 1965              		.cfi_startproc
 1966 0000 90B5     		push	{r4, r7, lr}
 1967              		.cfi_def_cfa_offset 12
 1968              		.cfi_offset 4, -12
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 85B0     		sub	sp, sp, #20
 1972              		.cfi_def_cfa_offset 32
 1973 0004 00AF     		add	r7, sp, #0
 1974              		.cfi_def_cfa_register 7
 1975 0006 021C     		mov	r2, r0
 1976 0008 3960     		str	r1, [r7]
 1977 000a FB1D     		add	r3, r7, #7
 1978 000c 1A70     		strb	r2, [r3]
 430:.\main.c      ****     // Overview
 431:.\main.c      ****     //take instruction from data_array
 432:.\main.c      ****     //smooth input
 433:.\main.c      ****     //actuate the tilting using UART
 434:.\main.c      ****     //get feedback
 435:.\main.c      **** 
 436:.\main.c      ****     //-------------------------- 
 437:.\main.c      ****     // Dynamixel Servo specific
 438:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 439:.\main.c      ****     // TODO: Set the desired position
 440:.\main.c      **** 
 441:.\main.c      ****     //--------------------------
 442:.\main.c      ****     // State machine
 443:.\main.c      ****     
 444:.\main.c      ****     uint8 i;
 445:.\main.c      ****     uint16 avg;
 446:.\main.c      ****     uint16 command;
 447:.\main.c      ****     
 448:.\main.c      ****     switch(wristTilt_state){ //actions
 1979              		.loc 1 448 0
 1980 000e 5B4B     		ldr	r3, .L114
 1981 0010 1B78     		ldrb	r3, [r3]
 1982 0012 012B     		cmp	r3, #1
 1983 0014 0AD0     		beq	.L88
 1984 0016 03DC     		bgt	.L89
 1985 0018 002B     		cmp	r3, #0
 1986 001a 00D1     		bne	.LCB1677
 1987 001c 73E0     		b	.L112	@long jump
 1988              	.LCB1677:
 1989 001e 6EE0     		b	.L87
 1990              	.L89:
 1991 0020 022B     		cmp	r3, #2
 1992 0022 25D0     		beq	.L91
 1993 0024 032B     		cmp	r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 44


 1994 0026 00D1     		bne	.LCB1685
 1995 0028 6FE0     		b	.L113	@long jump
 1996              	.LCB1685:
 1997 002a 68E0     		b	.L87
 1998              	.L88:
 449:.\main.c      ****         case tilt_start:
 450:.\main.c      ****             break;
 451:.\main.c      **** 
 452:.\main.c      ****         case tilt_init:
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 1999              		.loc 1 453 0
 2000 002c 3B1C     		mov	r3, r7
 2001 002e 0F33     		add	r3, r3, #15
 2002 0030 0022     		mov	r2, #0
 2003 0032 1A70     		strb	r2, [r3]
 2004 0034 0EE0     		b	.L94
 2005              	.L95:
 454:.\main.c      ****             {
 455:.\main.c      ****                 WT_array[i] = 1500; //TODO: make sure this is the neutral value
 2006              		.loc 1 455 0 discriminator 2
 2007 0036 3B1C     		mov	r3, r7
 2008 0038 0F33     		add	r3, r3, #15
 2009 003a 1B78     		ldrb	r3, [r3]
 2010 003c 5B00     		lsl	r3, r3, #1
 2011 003e 3A68     		ldr	r2, [r7]
 2012 0040 D318     		add	r3, r2, r3
 2013 0042 4F4A     		ldr	r2, .L114+4
 2014 0044 1A80     		strh	r2, [r3]
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2015              		.loc 1 453 0 discriminator 2
 2016 0046 3B1C     		mov	r3, r7
 2017 0048 0F33     		add	r3, r3, #15
 2018 004a 1A78     		ldrb	r2, [r3]
 2019 004c 3B1C     		mov	r3, r7
 2020 004e 0F33     		add	r3, r3, #15
 2021 0050 0132     		add	r2, r2, #1
 2022 0052 1A70     		strb	r2, [r3]
 2023              	.L94:
 453:.\main.c      ****             for(i = 0; i < WT_ARR_SIZE; i++)
 2024              		.loc 1 453 0 is_stmt 0 discriminator 1
 2025 0054 3B1C     		mov	r3, r7
 2026 0056 0F33     		add	r3, r3, #15
 2027 0058 1B78     		ldrb	r3, [r3]
 2028 005a 132B     		cmp	r3, #19
 2029 005c EBD9     		bls	.L95
 456:.\main.c      ****             }
 457:.\main.c      ****             WT_arr_cspot = 0;
 2030              		.loc 1 457 0 is_stmt 1
 2031 005e FB1D     		add	r3, r7, #7
 2032 0060 0022     		mov	r2, #0
 2033 0062 1A70     		strb	r2, [r3]
 458:.\main.c      ****             
 459:.\main.c      ****             ServoGoalPosition(0x02, 1500);
 2034              		.loc 1 459 0
 2035 0064 464B     		ldr	r3, .L114+4
 2036 0066 0220     		mov	r0, #2
 2037 0068 191C     		mov	r1, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 45


 2038 006a FFF7FEFF 		bl	ServoGoalPosition
 460:.\main.c      ****             break;
 2039              		.loc 1 460 0
 2040 006e 4DE0     		b	.L93
 2041              	.L91:
 461:.\main.c      **** 
 462:.\main.c      ****         case tilt_control:
 463:.\main.c      ****             command = make_command(data_array, WT_BYTE_1, WT_BYTE_2);
 2042              		.loc 1 463 0
 2043 0070 3C1C     		mov	r4, r7
 2044 0072 0C34     		add	r4, r4, #12
 2045 0074 434B     		ldr	r3, .L114+8
 2046 0076 181C     		mov	r0, r3
 2047 0078 1021     		mov	r1, #16
 2048 007a 1122     		mov	r2, #17
 2049 007c FFF7FEFF 		bl	make_command
 2050 0080 031C     		mov	r3, r0
 2051 0082 2380     		strh	r3, [r4]
 464:.\main.c      ****             
 465:.\main.c      ****             WT_array[WT_arr_cspot] = command;
 2052              		.loc 1 465 0
 2053 0084 FB1D     		add	r3, r7, #7
 2054 0086 1B78     		ldrb	r3, [r3]
 2055 0088 5B00     		lsl	r3, r3, #1
 2056 008a 3A68     		ldr	r2, [r7]
 2057 008c D318     		add	r3, r2, r3
 2058 008e 3A1C     		mov	r2, r7
 2059 0090 0C32     		add	r2, r2, #12
 2060 0092 1288     		ldrh	r2, [r2]
 2061 0094 1A80     		strh	r2, [r3]
 466:.\main.c      ****             
 467:.\main.c      ****             if(WT_arr_cspot < (WT_ARR_SIZE - 1))
 2062              		.loc 1 467 0
 2063 0096 FB1D     		add	r3, r7, #7
 2064 0098 1B78     		ldrb	r3, [r3]
 2065 009a 122B     		cmp	r3, #18
 2066 009c 05D8     		bhi	.L96
 468:.\main.c      ****             {
 469:.\main.c      ****                 WT_arr_cspot++;
 2067              		.loc 1 469 0
 2068 009e FB1D     		add	r3, r7, #7
 2069 00a0 1A78     		ldrb	r2, [r3]
 2070 00a2 FB1D     		add	r3, r7, #7
 2071 00a4 0132     		add	r2, r2, #1
 2072 00a6 1A70     		strb	r2, [r3]
 2073 00a8 02E0     		b	.L97
 2074              	.L96:
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 WT_arr_cspot = 0;
 2075              		.loc 1 473 0
 2076 00aa FB1D     		add	r3, r7, #7
 2077 00ac 0022     		mov	r2, #0
 2078 00ae 1A70     		strb	r2, [r3]
 2079              	.L97:
 474:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 46


 475:.\main.c      ****             
 476:.\main.c      ****             //pos_to_vel(WT_arr_cspot, WT_array, WT_ARR_SIZE, command);
 477:.\main.c      ****             
 478:.\main.c      ****             avg = average(WT_array, WT_ARR_SIZE);
 2080              		.loc 1 478 0
 2081 00b0 3C1C     		mov	r4, r7
 2082 00b2 0A34     		add	r4, r4, #10
 2083 00b4 3B68     		ldr	r3, [r7]
 2084 00b6 181C     		mov	r0, r3
 2085 00b8 1421     		mov	r1, #20
 2086 00ba FFF7FEFF 		bl	average
 2087 00be 031C     		mov	r3, r0
 2088 00c0 2380     		strh	r3, [r4]
 479:.\main.c      ****             
 480:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2089              		.loc 1 480 0
 2090 00c2 3B1C     		mov	r3, r7
 2091 00c4 0A33     		add	r3, r3, #10
 2092 00c6 1A88     		ldrh	r2, [r3]
 2093 00c8 FA23     		mov	r3, #250
 2094 00ca DB00     		lsl	r3, r3, #3
 2095 00cc 9A42     		cmp	r2, r3
 2096 00ce 0DD8     		bhi	.L98
 2097              		.loc 1 480 0 is_stmt 0 discriminator 1
 2098 00d0 3B1C     		mov	r3, r7
 2099 00d2 0A33     		add	r3, r3, #10
 2100 00d4 1A88     		ldrh	r2, [r3]
 2101 00d6 2C4B     		ldr	r3, .L114+12
 2102 00d8 9A42     		cmp	r2, r3
 2103 00da 07D9     		bls	.L98
 481:.\main.c      ****             {
 482:.\main.c      ****                 ServoGoalPosition(0x02, avg);
 2104              		.loc 1 482 0 is_stmt 1
 2105 00dc 3B1C     		mov	r3, r7
 2106 00de 0A33     		add	r3, r3, #10
 2107 00e0 1B88     		ldrh	r3, [r3]
 2108 00e2 0220     		mov	r0, #2
 2109 00e4 191C     		mov	r1, r3
 2110 00e6 FFF7FEFF 		bl	ServoGoalPosition
 2111 00ea 04E0     		b	.L99
 2112              	.L98:
 483:.\main.c      ****             }
 484:.\main.c      ****             else
 485:.\main.c      ****             {
 486:.\main.c      ****                 //throw error
 487:.\main.c      ****                 ServoGoalPosition(0x02, 1500); //TODO: write a neutral value
 2113              		.loc 1 487 0
 2114 00ec 244B     		ldr	r3, .L114+4
 2115 00ee 0220     		mov	r0, #2
 2116 00f0 191C     		mov	r1, r3
 2117 00f2 FFF7FEFF 		bl	ServoGoalPosition
 2118              	.L99:
 488:.\main.c      ****             }
 489:.\main.c      ****             WT_FLAG = 0;
 2119              		.loc 1 489 0
 2120 00f6 254B     		ldr	r3, .L114+16
 2121 00f8 0022     		mov	r2, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 47


 2122 00fa 1A70     		strb	r2, [r3]
 490:.\main.c      ****             break;
 2123              		.loc 1 490 0
 2124 00fc 06E0     		b	.L93
 2125              	.L87:
 491:.\main.c      ****             
 492:.\main.c      ****         case tilt_wait:
 493:.\main.c      ****             break;
 494:.\main.c      ****                         
 495:.\main.c      ****         default:
 496:.\main.c      ****             wristTilt_state = tilt_start;
 2126              		.loc 1 496 0
 2127 00fe 1F4B     		ldr	r3, .L114
 2128 0100 0022     		mov	r2, #0
 2129 0102 1A70     		strb	r2, [r3]
 497:.\main.c      ****             break;
 2130              		.loc 1 497 0
 2131 0104 02E0     		b	.L93
 2132              	.L112:
 450:.\main.c      ****             break;
 2133              		.loc 1 450 0
 2134 0106 C046     		mov	r8, r8
 2135 0108 00E0     		b	.L93
 2136              	.L113:
 493:.\main.c      ****             break;
 2137              		.loc 1 493 0
 2138 010a C046     		mov	r8, r8
 2139              	.L93:
 498:.\main.c      ****     }
 499:.\main.c      ****     
 500:.\main.c      ****     switch(wristTilt_state){ //transitions
 2140              		.loc 1 500 0
 2141 010c 1B4B     		ldr	r3, .L114
 2142 010e 1B78     		ldrb	r3, [r3]
 2143 0110 012B     		cmp	r3, #1
 2144 0112 0CD0     		beq	.L101
 2145 0114 02DC     		bgt	.L102
 2146 0116 002B     		cmp	r3, #0
 2147 0118 05D0     		beq	.L103
 2148 011a 24E0     		b	.L100
 2149              	.L102:
 2150 011c 022B     		cmp	r3, #2
 2151 011e 0AD0     		beq	.L104
 2152 0120 032B     		cmp	r3, #3
 2153 0122 14D0     		beq	.L105
 2154 0124 1FE0     		b	.L100
 2155              	.L103:
 501:.\main.c      ****         case tilt_start:
 502:.\main.c      ****             wristTilt_state = tilt_init;
 2156              		.loc 1 502 0
 2157 0126 154B     		ldr	r3, .L114
 2158 0128 0122     		mov	r2, #1
 2159 012a 1A70     		strb	r2, [r3]
 503:.\main.c      ****             break;
 2160              		.loc 1 503 0
 2161 012c 1FE0     		b	.L106
 2162              	.L101:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 48


 504:.\main.c      ****         
 505:.\main.c      ****         case tilt_init:
 506:.\main.c      ****             wristTilt_state = tilt_wait;
 2163              		.loc 1 506 0
 2164 012e 134B     		ldr	r3, .L114
 2165 0130 0322     		mov	r2, #3
 2166 0132 1A70     		strb	r2, [r3]
 507:.\main.c      ****             break;
 2167              		.loc 1 507 0
 2168 0134 1BE0     		b	.L106
 2169              	.L104:
 508:.\main.c      ****         
 509:.\main.c      ****         case tilt_control:
 510:.\main.c      ****             if(WT_FLAG)
 2170              		.loc 1 510 0
 2171 0136 154B     		ldr	r3, .L114+16
 2172 0138 1B78     		ldrb	r3, [r3]
 2173 013a 002B     		cmp	r3, #0
 2174 013c 03D0     		beq	.L107
 511:.\main.c      ****             {
 512:.\main.c      ****                 wristTilt_state = tilt_control;
 2175              		.loc 1 512 0
 2176 013e 0F4B     		ldr	r3, .L114
 2177 0140 0222     		mov	r2, #2
 2178 0142 1A70     		strb	r2, [r3]
 513:.\main.c      ****             }
 514:.\main.c      ****             else
 515:.\main.c      ****             {
 516:.\main.c      ****                 wristTilt_state = tilt_wait;
 517:.\main.c      ****             }
 518:.\main.c      ****             break;
 2179              		.loc 1 518 0
 2180 0144 13E0     		b	.L106
 2181              	.L107:
 516:.\main.c      ****                 wristTilt_state = tilt_wait;
 2182              		.loc 1 516 0
 2183 0146 0D4B     		ldr	r3, .L114
 2184 0148 0322     		mov	r2, #3
 2185 014a 1A70     		strb	r2, [r3]
 2186              		.loc 1 518 0
 2187 014c 0FE0     		b	.L106
 2188              	.L105:
 519:.\main.c      ****         
 520:.\main.c      ****         case tilt_wait:
 521:.\main.c      ****             if(WT_FLAG)
 2189              		.loc 1 521 0
 2190 014e 0F4B     		ldr	r3, .L114+16
 2191 0150 1B78     		ldrb	r3, [r3]
 2192 0152 002B     		cmp	r3, #0
 2193 0154 03D0     		beq	.L109
 522:.\main.c      ****             {
 523:.\main.c      ****                 wristTilt_state = tilt_control;
 2194              		.loc 1 523 0
 2195 0156 094B     		ldr	r3, .L114
 2196 0158 0222     		mov	r2, #2
 2197 015a 1A70     		strb	r2, [r3]
 524:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 49


 525:.\main.c      ****             else
 526:.\main.c      ****             {
 527:.\main.c      ****                 wristTilt_state = tilt_wait; 
 528:.\main.c      ****             }
 529:.\main.c      ****             break;
 2198              		.loc 1 529 0
 2199 015c 07E0     		b	.L106
 2200              	.L109:
 527:.\main.c      ****                 wristTilt_state = tilt_wait; 
 2201              		.loc 1 527 0
 2202 015e 074B     		ldr	r3, .L114
 2203 0160 0322     		mov	r2, #3
 2204 0162 1A70     		strb	r2, [r3]
 2205              		.loc 1 529 0
 2206 0164 03E0     		b	.L106
 2207              	.L100:
 530:.\main.c      ****             
 531:.\main.c      ****         default:
 532:.\main.c      ****             wristTilt_state = tilt_start;
 2208              		.loc 1 532 0
 2209 0166 054B     		ldr	r3, .L114
 2210 0168 0022     		mov	r2, #0
 2211 016a 1A70     		strb	r2, [r3]
 533:.\main.c      ****             break;
 2212              		.loc 1 533 0
 2213 016c C046     		mov	r8, r8
 2214              	.L106:
 534:.\main.c      ****     }  
 535:.\main.c      ****     return WT_arr_cspot;
 2215              		.loc 1 535 0
 2216 016e FB1D     		add	r3, r7, #7
 2217 0170 1B78     		ldrb	r3, [r3]
 536:.\main.c      **** }
 2218              		.loc 1 536 0
 2219 0172 181C     		mov	r0, r3
 2220 0174 BD46     		mov	sp, r7
 2221 0176 05B0     		add	sp, sp, #20
 2222              		@ sp needed
 2223 0178 90BD     		pop	{r4, r7, pc}
 2224              	.L115:
 2225 017a C046     		.align	2
 2226              	.L114:
 2227 017c 00000000 		.word	wristTilt_state
 2228 0180 DC050000 		.word	1500
 2229 0184 00000000 		.word	data_array
 2230 0188 E7030000 		.word	999
 2231 018c 00000000 		.word	WT_FLAG
 2232              		.cfi_endproc
 2233              	.LFE48:
 2234              		.size	wristTilt, .-wristTilt
 2235              		.comm	wristRotate_state,1,1
 2236              		.section	.text.wristRotate,"ax",%progbits
 2237              		.align	2
 2238              		.global	wristRotate
 2239              		.code	16
 2240              		.thumb_func
 2241              		.type	wristRotate, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 50


 2242              	wristRotate:
 2243              	.LFB49:
 537:.\main.c      **** 
 538:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 539:.\main.c      **** //control the rotating motion of the wrist
 540:.\main.c      **** uint8 wristRotate(uint8 WR_arr_cspot, uint16* WR_array)
 541:.\main.c      **** {
 2244              		.loc 1 541 0
 2245              		.cfi_startproc
 2246 0000 90B5     		push	{r4, r7, lr}
 2247              		.cfi_def_cfa_offset 12
 2248              		.cfi_offset 4, -12
 2249              		.cfi_offset 7, -8
 2250              		.cfi_offset 14, -4
 2251 0002 85B0     		sub	sp, sp, #20
 2252              		.cfi_def_cfa_offset 32
 2253 0004 00AF     		add	r7, sp, #0
 2254              		.cfi_def_cfa_register 7
 2255 0006 021C     		mov	r2, r0
 2256 0008 3960     		str	r1, [r7]
 2257 000a FB1D     		add	r3, r7, #7
 2258 000c 1A70     		strb	r2, [r3]
 542:.\main.c      ****     //Overview
 543:.\main.c      ****     //take instruction from data_array
 544:.\main.c      ****     //smooth input
 545:.\main.c      ****     //actuate the tilting using UART
 546:.\main.c      ****     //get feedback
 547:.\main.c      **** 
 548:.\main.c      ****     //-------------------------- 
 549:.\main.c      ****     // Dynamixel Servo specific
 550:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 551:.\main.c      ****     // TODO: Set the desired position
 552:.\main.c      **** 
 553:.\main.c      ****     //--------------------------
 554:.\main.c      ****     // State machine
 555:.\main.c      ****     
 556:.\main.c      ****     uint8 i;
 557:.\main.c      ****     uint16 avg;
 558:.\main.c      ****     uint16 command;
 559:.\main.c      ****     
 560:.\main.c      ****     switch(wristRotate_state){ //actions
 2259              		.loc 1 560 0
 2260 000e 5B4B     		ldr	r3, .L144
 2261 0010 1B78     		ldrb	r3, [r3]
 2262 0012 012B     		cmp	r3, #1
 2263 0014 0AD0     		beq	.L118
 2264 0016 03DC     		bgt	.L119
 2265 0018 002B     		cmp	r3, #0
 2266 001a 00D1     		bne	.LCB1950
 2267 001c 73E0     		b	.L142	@long jump
 2268              	.LCB1950:
 2269 001e 6EE0     		b	.L117
 2270              	.L119:
 2271 0020 022B     		cmp	r3, #2
 2272 0022 25D0     		beq	.L121
 2273 0024 032B     		cmp	r3, #3
 2274 0026 00D1     		bne	.LCB1958
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 51


 2275 0028 6FE0     		b	.L143	@long jump
 2276              	.LCB1958:
 2277 002a 68E0     		b	.L117
 2278              	.L118:
 561:.\main.c      ****         case rotate_start:
 562:.\main.c      ****             break;
 563:.\main.c      **** 
 564:.\main.c      ****         case rotate_init:
 565:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2279              		.loc 1 565 0
 2280 002c 3B1C     		mov	r3, r7
 2281 002e 0F33     		add	r3, r3, #15
 2282 0030 0022     		mov	r2, #0
 2283 0032 1A70     		strb	r2, [r3]
 2284 0034 0EE0     		b	.L124
 2285              	.L125:
 566:.\main.c      ****             {
 567:.\main.c      ****                 WR_array[i] = 1500; //TODO: Make sure this is the neutral value
 2286              		.loc 1 567 0 discriminator 2
 2287 0036 3B1C     		mov	r3, r7
 2288 0038 0F33     		add	r3, r3, #15
 2289 003a 1B78     		ldrb	r3, [r3]
 2290 003c 5B00     		lsl	r3, r3, #1
 2291 003e 3A68     		ldr	r2, [r7]
 2292 0040 D318     		add	r3, r2, r3
 2293 0042 4F4A     		ldr	r2, .L144+4
 2294 0044 1A80     		strh	r2, [r3]
 565:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2295              		.loc 1 565 0 discriminator 2
 2296 0046 3B1C     		mov	r3, r7
 2297 0048 0F33     		add	r3, r3, #15
 2298 004a 1A78     		ldrb	r2, [r3]
 2299 004c 3B1C     		mov	r3, r7
 2300 004e 0F33     		add	r3, r3, #15
 2301 0050 0132     		add	r2, r2, #1
 2302 0052 1A70     		strb	r2, [r3]
 2303              	.L124:
 565:.\main.c      ****             for(i = 0; i < WR_ARR_SIZE; i++)
 2304              		.loc 1 565 0 is_stmt 0 discriminator 1
 2305 0054 3B1C     		mov	r3, r7
 2306 0056 0F33     		add	r3, r3, #15
 2307 0058 1B78     		ldrb	r3, [r3]
 2308 005a 132B     		cmp	r3, #19
 2309 005c EBD9     		bls	.L125
 568:.\main.c      ****             }
 569:.\main.c      ****             WR_arr_cspot = 0;
 2310              		.loc 1 569 0 is_stmt 1
 2311 005e FB1D     		add	r3, r7, #7
 2312 0060 0022     		mov	r2, #0
 2313 0062 1A70     		strb	r2, [r3]
 570:.\main.c      ****             
 571:.\main.c      ****             ServoGoalPosition(0x01, 1500); //TODO: Make sure this is the neutral value
 2314              		.loc 1 571 0
 2315 0064 464B     		ldr	r3, .L144+4
 2316 0066 0120     		mov	r0, #1
 2317 0068 191C     		mov	r1, r3
 2318 006a FFF7FEFF 		bl	ServoGoalPosition
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 52


 572:.\main.c      ****             break;
 2319              		.loc 1 572 0
 2320 006e 4DE0     		b	.L123
 2321              	.L121:
 573:.\main.c      **** 
 574:.\main.c      ****         case rotate_control:
 575:.\main.c      ****             command = make_command(data_array, WR_BYTE_1, WR_BYTE_2);
 2322              		.loc 1 575 0
 2323 0070 3C1C     		mov	r4, r7
 2324 0072 0C34     		add	r4, r4, #12
 2325 0074 434B     		ldr	r3, .L144+8
 2326 0076 181C     		mov	r0, r3
 2327 0078 1221     		mov	r1, #18
 2328 007a 1322     		mov	r2, #19
 2329 007c FFF7FEFF 		bl	make_command
 2330 0080 031C     		mov	r3, r0
 2331 0082 2380     		strh	r3, [r4]
 576:.\main.c      ****             
 577:.\main.c      ****             WR_array[WR_arr_cspot] = command;
 2332              		.loc 1 577 0
 2333 0084 FB1D     		add	r3, r7, #7
 2334 0086 1B78     		ldrb	r3, [r3]
 2335 0088 5B00     		lsl	r3, r3, #1
 2336 008a 3A68     		ldr	r2, [r7]
 2337 008c D318     		add	r3, r2, r3
 2338 008e 3A1C     		mov	r2, r7
 2339 0090 0C32     		add	r2, r2, #12
 2340 0092 1288     		ldrh	r2, [r2]
 2341 0094 1A80     		strh	r2, [r3]
 578:.\main.c      ****             
 579:.\main.c      ****             if(WR_arr_cspot < (WR_ARR_SIZE - 1))
 2342              		.loc 1 579 0
 2343 0096 FB1D     		add	r3, r7, #7
 2344 0098 1B78     		ldrb	r3, [r3]
 2345 009a 122B     		cmp	r3, #18
 2346 009c 05D8     		bhi	.L126
 580:.\main.c      ****             {
 581:.\main.c      ****                 WR_arr_cspot++;
 2347              		.loc 1 581 0
 2348 009e FB1D     		add	r3, r7, #7
 2349 00a0 1A78     		ldrb	r2, [r3]
 2350 00a2 FB1D     		add	r3, r7, #7
 2351 00a4 0132     		add	r2, r2, #1
 2352 00a6 1A70     		strb	r2, [r3]
 2353 00a8 02E0     		b	.L127
 2354              	.L126:
 582:.\main.c      ****             }
 583:.\main.c      ****             else
 584:.\main.c      ****             {
 585:.\main.c      ****                 WR_arr_cspot = 0;
 2355              		.loc 1 585 0
 2356 00aa FB1D     		add	r3, r7, #7
 2357 00ac 0022     		mov	r2, #0
 2358 00ae 1A70     		strb	r2, [r3]
 2359              	.L127:
 586:.\main.c      ****             }
 587:.\main.c      ****             
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 53


 588:.\main.c      ****             //pos_to_vel(WR_arr_cspot, WR_array, WR_ARR_SIZE, command);
 589:.\main.c      ****             
 590:.\main.c      ****             avg = average(WR_array, WR_ARR_SIZE);
 2360              		.loc 1 590 0
 2361 00b0 3C1C     		mov	r4, r7
 2362 00b2 0A34     		add	r4, r4, #10
 2363 00b4 3B68     		ldr	r3, [r7]
 2364 00b6 181C     		mov	r0, r3
 2365 00b8 1421     		mov	r1, #20
 2366 00ba FFF7FEFF 		bl	average
 2367 00be 031C     		mov	r3, r0
 2368 00c0 2380     		strh	r3, [r4]
 591:.\main.c      ****             
 592:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 2369              		.loc 1 592 0
 2370 00c2 3B1C     		mov	r3, r7
 2371 00c4 0A33     		add	r3, r3, #10
 2372 00c6 1A88     		ldrh	r2, [r3]
 2373 00c8 FA23     		mov	r3, #250
 2374 00ca DB00     		lsl	r3, r3, #3
 2375 00cc 9A42     		cmp	r2, r3
 2376 00ce 0DD8     		bhi	.L128
 2377              		.loc 1 592 0 is_stmt 0 discriminator 1
 2378 00d0 3B1C     		mov	r3, r7
 2379 00d2 0A33     		add	r3, r3, #10
 2380 00d4 1A88     		ldrh	r2, [r3]
 2381 00d6 2C4B     		ldr	r3, .L144+12
 2382 00d8 9A42     		cmp	r2, r3
 2383 00da 07D9     		bls	.L128
 593:.\main.c      ****             {
 594:.\main.c      ****                 //TODO: maybe scale avg between 0 and 3000
 595:.\main.c      ****                 ServoGoalPosition(0x01, avg);
 2384              		.loc 1 595 0 is_stmt 1
 2385 00dc 3B1C     		mov	r3, r7
 2386 00de 0A33     		add	r3, r3, #10
 2387 00e0 1B88     		ldrh	r3, [r3]
 2388 00e2 0120     		mov	r0, #1
 2389 00e4 191C     		mov	r1, r3
 2390 00e6 FFF7FEFF 		bl	ServoGoalPosition
 2391 00ea 04E0     		b	.L129
 2392              	.L128:
 596:.\main.c      ****             }
 597:.\main.c      ****             else
 598:.\main.c      ****             {
 599:.\main.c      ****                 //throw error
 600:.\main.c      ****                 //TODO: if we scale change the "neutral" value
 601:.\main.c      ****                 ServoGoalPosition(0x01, 1500);
 2393              		.loc 1 601 0
 2394 00ec 244B     		ldr	r3, .L144+4
 2395 00ee 0120     		mov	r0, #1
 2396 00f0 191C     		mov	r1, r3
 2397 00f2 FFF7FEFF 		bl	ServoGoalPosition
 2398              	.L129:
 602:.\main.c      ****             }
 603:.\main.c      ****             WR_FLAG = 0;
 2399              		.loc 1 603 0
 2400 00f6 254B     		ldr	r3, .L144+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 54


 2401 00f8 0022     		mov	r2, #0
 2402 00fa 1A70     		strb	r2, [r3]
 604:.\main.c      ****             break;
 2403              		.loc 1 604 0
 2404 00fc 06E0     		b	.L123
 2405              	.L117:
 605:.\main.c      ****             
 606:.\main.c      ****         case rotate_wait:
 607:.\main.c      ****             break;
 608:.\main.c      ****                         
 609:.\main.c      ****         default:
 610:.\main.c      ****             wristRotate_state = rotate_start;
 2406              		.loc 1 610 0
 2407 00fe 1F4B     		ldr	r3, .L144
 2408 0100 0022     		mov	r2, #0
 2409 0102 1A70     		strb	r2, [r3]
 611:.\main.c      ****             break;
 2410              		.loc 1 611 0
 2411 0104 02E0     		b	.L123
 2412              	.L142:
 562:.\main.c      ****             break;
 2413              		.loc 1 562 0
 2414 0106 C046     		mov	r8, r8
 2415 0108 00E0     		b	.L123
 2416              	.L143:
 607:.\main.c      ****             break;
 2417              		.loc 1 607 0
 2418 010a C046     		mov	r8, r8
 2419              	.L123:
 612:.\main.c      ****     }
 613:.\main.c      ****     
 614:.\main.c      ****     switch(wristRotate_state){ //transitions
 2420              		.loc 1 614 0
 2421 010c 1B4B     		ldr	r3, .L144
 2422 010e 1B78     		ldrb	r3, [r3]
 2423 0110 012B     		cmp	r3, #1
 2424 0112 0CD0     		beq	.L131
 2425 0114 02DC     		bgt	.L132
 2426 0116 002B     		cmp	r3, #0
 2427 0118 05D0     		beq	.L133
 2428 011a 24E0     		b	.L130
 2429              	.L132:
 2430 011c 022B     		cmp	r3, #2
 2431 011e 0AD0     		beq	.L134
 2432 0120 032B     		cmp	r3, #3
 2433 0122 14D0     		beq	.L135
 2434 0124 1FE0     		b	.L130
 2435              	.L133:
 615:.\main.c      ****         case rotate_start:
 616:.\main.c      ****             wristRotate_state = rotate_init;
 2436              		.loc 1 616 0
 2437 0126 154B     		ldr	r3, .L144
 2438 0128 0122     		mov	r2, #1
 2439 012a 1A70     		strb	r2, [r3]
 617:.\main.c      ****             break;
 2440              		.loc 1 617 0
 2441 012c 1FE0     		b	.L136
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 55


 2442              	.L131:
 618:.\main.c      ****         
 619:.\main.c      ****         case rotate_init:
 620:.\main.c      ****             wristRotate_state = rotate_wait;
 2443              		.loc 1 620 0
 2444 012e 134B     		ldr	r3, .L144
 2445 0130 0322     		mov	r2, #3
 2446 0132 1A70     		strb	r2, [r3]
 621:.\main.c      ****             break;
 2447              		.loc 1 621 0
 2448 0134 1BE0     		b	.L136
 2449              	.L134:
 622:.\main.c      ****         
 623:.\main.c      ****         case rotate_control:
 624:.\main.c      ****             if(WR_FLAG)
 2450              		.loc 1 624 0
 2451 0136 154B     		ldr	r3, .L144+16
 2452 0138 1B78     		ldrb	r3, [r3]
 2453 013a 002B     		cmp	r3, #0
 2454 013c 03D0     		beq	.L137
 625:.\main.c      ****             {
 626:.\main.c      ****                 wristRotate_state = rotate_control;
 2455              		.loc 1 626 0
 2456 013e 0F4B     		ldr	r3, .L144
 2457 0140 0222     		mov	r2, #2
 2458 0142 1A70     		strb	r2, [r3]
 627:.\main.c      ****             }
 628:.\main.c      ****             else
 629:.\main.c      ****             {
 630:.\main.c      ****                 wristRotate_state = rotate_wait;
 631:.\main.c      ****             }
 632:.\main.c      ****             break;
 2459              		.loc 1 632 0
 2460 0144 13E0     		b	.L136
 2461              	.L137:
 630:.\main.c      ****                 wristRotate_state = rotate_wait;
 2462              		.loc 1 630 0
 2463 0146 0D4B     		ldr	r3, .L144
 2464 0148 0322     		mov	r2, #3
 2465 014a 1A70     		strb	r2, [r3]
 2466              		.loc 1 632 0
 2467 014c 0FE0     		b	.L136
 2468              	.L135:
 633:.\main.c      ****         
 634:.\main.c      ****         case rotate_wait:
 635:.\main.c      ****             if(WR_FLAG)
 2469              		.loc 1 635 0
 2470 014e 0F4B     		ldr	r3, .L144+16
 2471 0150 1B78     		ldrb	r3, [r3]
 2472 0152 002B     		cmp	r3, #0
 2473 0154 03D0     		beq	.L139
 636:.\main.c      ****             {
 637:.\main.c      ****                 wristRotate_state = rotate_control;
 2474              		.loc 1 637 0
 2475 0156 094B     		ldr	r3, .L144
 2476 0158 0222     		mov	r2, #2
 2477 015a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 56


 638:.\main.c      ****             }
 639:.\main.c      ****             else
 640:.\main.c      ****             {
 641:.\main.c      ****                 wristRotate_state = rotate_wait;
 642:.\main.c      ****             }
 643:.\main.c      ****             break;
 2478              		.loc 1 643 0
 2479 015c 07E0     		b	.L136
 2480              	.L139:
 641:.\main.c      ****                 wristRotate_state = rotate_wait;
 2481              		.loc 1 641 0
 2482 015e 074B     		ldr	r3, .L144
 2483 0160 0322     		mov	r2, #3
 2484 0162 1A70     		strb	r2, [r3]
 2485              		.loc 1 643 0
 2486 0164 03E0     		b	.L136
 2487              	.L130:
 644:.\main.c      ****             
 645:.\main.c      ****         default:
 646:.\main.c      ****             wristRotate_state = rotate_start;
 2488              		.loc 1 646 0
 2489 0166 054B     		ldr	r3, .L144
 2490 0168 0022     		mov	r2, #0
 2491 016a 1A70     		strb	r2, [r3]
 647:.\main.c      ****             break;
 2492              		.loc 1 647 0
 2493 016c C046     		mov	r8, r8
 2494              	.L136:
 648:.\main.c      ****     }  
 649:.\main.c      ****     return WR_arr_cspot;
 2495              		.loc 1 649 0
 2496 016e FB1D     		add	r3, r7, #7
 2497 0170 1B78     		ldrb	r3, [r3]
 650:.\main.c      **** }
 2498              		.loc 1 650 0
 2499 0172 181C     		mov	r0, r3
 2500 0174 BD46     		mov	sp, r7
 2501 0176 05B0     		add	sp, sp, #20
 2502              		@ sp needed
 2503 0178 90BD     		pop	{r4, r7, pc}
 2504              	.L145:
 2505 017a C046     		.align	2
 2506              	.L144:
 2507 017c 00000000 		.word	wristRotate_state
 2508 0180 DC050000 		.word	1500
 2509 0184 00000000 		.word	data_array
 2510 0188 E7030000 		.word	999
 2511 018c 00000000 		.word	WR_FLAG
 2512              		.cfi_endproc
 2513              	.LFE49:
 2514              		.size	wristRotate, .-wristRotate
 2515              		.comm	elbow_state,1,1
 2516              		.section	.text.elbow,"ax",%progbits
 2517              		.align	2
 2518              		.global	elbow
 2519              		.code	16
 2520              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 57


 2521              		.type	elbow, %function
 2522              	elbow:
 2523              	.LFB50:
 651:.\main.c      **** 
 652:.\main.c      **** //control the elbow
 653:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 654:.\main.c      **** uint8 elbow(uint8 elbw_arr_cspot, uint16* elbow_array)
 655:.\main.c      **** { 
 2524              		.loc 1 655 0
 2525              		.cfi_startproc
 2526 0000 90B5     		push	{r4, r7, lr}
 2527              		.cfi_def_cfa_offset 12
 2528              		.cfi_offset 4, -12
 2529              		.cfi_offset 7, -8
 2530              		.cfi_offset 14, -4
 2531 0002 85B0     		sub	sp, sp, #20
 2532              		.cfi_def_cfa_offset 32
 2533 0004 00AF     		add	r7, sp, #0
 2534              		.cfi_def_cfa_register 7
 2535 0006 021C     		mov	r2, r0
 2536 0008 3960     		str	r1, [r7]
 2537 000a FB1D     		add	r3, r7, #7
 2538 000c 1A70     		strb	r2, [r3]
 656:.\main.c      ****     //take instruction from data_array
 657:.\main.c      ****     //smooth input
 658:.\main.c      ****     //actuate the elbow using PWM
 659:.\main.c      ****     //get feedback
 660:.\main.c      ****     uint8 i;
 661:.\main.c      ****     uint16 avg;
 662:.\main.c      ****     uint16 command;
 663:.\main.c      ****     
 664:.\main.c      ****     //TODO: make sure reading from correct pots
 665:.\main.c      ****     uint16 feedback = potFeedback(ELBOW_POT); //check the feedback in every tick
 2539              		.loc 1 665 0
 2540 000e 3C1C     		mov	r4, r7
 2541 0010 0C34     		add	r4, r4, #12
 2542 0012 0120     		mov	r0, #1
 2543 0014 FFF7FEFF 		bl	potFeedback
 2544 0018 031C     		mov	r3, r0
 2545 001a 2380     		strh	r3, [r4]
 666:.\main.c      ****     
 667:.\main.c      ****     switch(elbow_state){ //actions
 2546              		.loc 1 667 0
 2547 001c BB4B     		ldr	r3, .L194
 2548 001e 1B78     		ldrb	r3, [r3]
 2549 0020 012B     		cmp	r3, #1
 2550 0022 0AD0     		beq	.L148
 2551 0024 03DC     		bgt	.L149
 2552 0026 002B     		cmp	r3, #0
 2553 0028 00D1     		bne	.LCB2229
 2554 002a 4CE1     		b	.L193	@long jump
 2555              	.LCB2229:
 2556 002c 47E1     		b	.L147
 2557              	.L149:
 2558 002e 022B     		cmp	r3, #2
 2559 0030 24D0     		beq	.L151
 2560 0032 032B     		cmp	r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 58


 2561 0034 00D1     		bne	.LCB2237
 2562 0036 2EE1     		b	.L152	@long jump
 2563              	.LCB2237:
 2564 0038 41E1     		b	.L147
 2565              	.L148:
 668:.\main.c      ****         case elbw_start:
 669:.\main.c      ****             break;
 670:.\main.c      **** 
 671:.\main.c      ****         case elbw_init:
 672:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2566              		.loc 1 672 0
 2567 003a 3B1C     		mov	r3, r7
 2568 003c 0F33     		add	r3, r3, #15
 2569 003e 0022     		mov	r2, #0
 2570 0040 1A70     		strb	r2, [r3]
 2571 0042 0EE0     		b	.L154
 2572              	.L155:
 673:.\main.c      ****             {
 674:.\main.c      ****                 elbow_array[i] = 1500;
 2573              		.loc 1 674 0 discriminator 2
 2574 0044 3B1C     		mov	r3, r7
 2575 0046 0F33     		add	r3, r3, #15
 2576 0048 1B78     		ldrb	r3, [r3]
 2577 004a 5B00     		lsl	r3, r3, #1
 2578 004c 3A68     		ldr	r2, [r7]
 2579 004e D318     		add	r3, r2, r3
 2580 0050 AF4A     		ldr	r2, .L194+4
 2581 0052 1A80     		strh	r2, [r3]
 672:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2582              		.loc 1 672 0 discriminator 2
 2583 0054 3B1C     		mov	r3, r7
 2584 0056 0F33     		add	r3, r3, #15
 2585 0058 1A78     		ldrb	r2, [r3]
 2586 005a 3B1C     		mov	r3, r7
 2587 005c 0F33     		add	r3, r3, #15
 2588 005e 0132     		add	r2, r2, #1
 2589 0060 1A70     		strb	r2, [r3]
 2590              	.L154:
 672:.\main.c      ****             for(i = 0; i < ELBW_ARR_SIZE; i++)
 2591              		.loc 1 672 0 is_stmt 0 discriminator 1
 2592 0062 3B1C     		mov	r3, r7
 2593 0064 0F33     		add	r3, r3, #15
 2594 0066 1B78     		ldrb	r3, [r3]
 2595 0068 132B     		cmp	r3, #19
 2596 006a EBD9     		bls	.L155
 675:.\main.c      ****             }
 676:.\main.c      ****             elbw_arr_cspot = 0;
 2597              		.loc 1 676 0 is_stmt 1
 2598 006c FB1D     		add	r3, r7, #7
 2599 006e 0022     		mov	r2, #0
 2600 0070 1A70     		strb	r2, [r3]
 677:.\main.c      ****             
 678:.\main.c      ****             ELBW_PWM_WriteCompare(1500);
 2601              		.loc 1 678 0
 2602 0072 A74B     		ldr	r3, .L194+4
 2603 0074 181C     		mov	r0, r3
 2604 0076 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 59


 679:.\main.c      ****             break;
 2605              		.loc 1 679 0
 2606 007a 25E1     		b	.L153
 2607              	.L151:
 680:.\main.c      **** 
 681:.\main.c      ****         case elbw_execute:
 682:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2608              		.loc 1 682 0
 2609 007c 3C1C     		mov	r4, r7
 2610 007e 0A34     		add	r4, r4, #10
 2611 0080 A44B     		ldr	r3, .L194+8
 2612 0082 181C     		mov	r0, r3
 2613 0084 0E21     		mov	r1, #14
 2614 0086 0F22     		mov	r2, #15
 2615 0088 FFF7FEFF 		bl	make_command
 2616 008c 031C     		mov	r3, r0
 2617 008e 2380     		strh	r3, [r4]
 683:.\main.c      ****             
 684:.\main.c      ****             elbow_array[elbw_arr_cspot] = command;
 2618              		.loc 1 684 0
 2619 0090 FB1D     		add	r3, r7, #7
 2620 0092 1B78     		ldrb	r3, [r3]
 2621 0094 5B00     		lsl	r3, r3, #1
 2622 0096 3A68     		ldr	r2, [r7]
 2623 0098 D318     		add	r3, r2, r3
 2624 009a 3A1C     		mov	r2, r7
 2625 009c 0A32     		add	r2, r2, #10
 2626 009e 1288     		ldrh	r2, [r2]
 2627 00a0 1A80     		strh	r2, [r3]
 685:.\main.c      ****             
 686:.\main.c      ****             if(elbw_arr_cspot < (ELBW_ARR_SIZE - 1))
 2628              		.loc 1 686 0
 2629 00a2 FB1D     		add	r3, r7, #7
 2630 00a4 1B78     		ldrb	r3, [r3]
 2631 00a6 122B     		cmp	r3, #18
 2632 00a8 05D8     		bhi	.L156
 687:.\main.c      ****             {
 688:.\main.c      ****                 elbw_arr_cspot++;
 2633              		.loc 1 688 0
 2634 00aa FB1D     		add	r3, r7, #7
 2635 00ac 1A78     		ldrb	r2, [r3]
 2636 00ae FB1D     		add	r3, r7, #7
 2637 00b0 0132     		add	r2, r2, #1
 2638 00b2 1A70     		strb	r2, [r3]
 2639 00b4 02E0     		b	.L157
 2640              	.L156:
 689:.\main.c      ****             }
 690:.\main.c      ****             else
 691:.\main.c      ****             {
 692:.\main.c      ****                 elbw_arr_cspot = 0;
 2641              		.loc 1 692 0
 2642 00b6 FB1D     		add	r3, r7, #7
 2643 00b8 0022     		mov	r2, #0
 2644 00ba 1A70     		strb	r2, [r3]
 2645              	.L157:
 693:.\main.c      ****             }
 694:.\main.c      ****             avg = average(elbow_array, ELBW_ARR_SIZE);   
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 60


 2646              		.loc 1 694 0
 2647 00bc 3C1C     		mov	r4, r7
 2648 00be 0834     		add	r4, r4, #8
 2649 00c0 3B68     		ldr	r3, [r7]
 2650 00c2 181C     		mov	r0, r3
 2651 00c4 1421     		mov	r1, #20
 2652 00c6 FFF7FEFF 		bl	average
 2653 00ca 031C     		mov	r3, r0
 2654 00cc 2380     		strh	r3, [r4]
 695:.\main.c      ****             
 696:.\main.c      ****             if(!stop_elb_dn_Read() || !stop_elb_up_Read())
 2655              		.loc 1 696 0
 2656 00ce FFF7FEFF 		bl	stop_elb_dn_Read
 2657 00d2 031C     		mov	r3, r0
 2658 00d4 002B     		cmp	r3, #0
 2659 00d6 05D0     		beq	.L158
 2660              		.loc 1 696 0 is_stmt 0 discriminator 1
 2661 00d8 FFF7FEFF 		bl	stop_elb_up_Read
 2662 00dc 031C     		mov	r3, r0
 2663 00de 002B     		cmp	r3, #0
 2664 00e0 00D0     		beq	.LCB2333
 2665 00e2 6FE0     		b	.L159	@long jump
 2666              	.LCB2333:
 2667              	.L158:
 697:.\main.c      ****             {
 698:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2668              		.loc 1 698 0 is_stmt 1
 2669 00e4 3B1C     		mov	r3, r7
 2670 00e6 0C33     		add	r3, r3, #12
 2671 00e8 1A88     		ldrh	r2, [r3]
 2672 00ea 8B4B     		ldr	r3, .L194+12
 2673 00ec 1B68     		ldr	r3, [r3]
 2674 00ee 9A42     		cmp	r2, r3
 2675 00f0 23D8     		bhi	.L160
 699:.\main.c      ****                 {
 700:.\main.c      ****                     if (avg < 1500)
 2676              		.loc 1 700 0
 2677 00f2 3B1C     		mov	r3, r7
 2678 00f4 0833     		add	r3, r3, #8
 2679 00f6 1A88     		ldrh	r2, [r3]
 2680 00f8 884B     		ldr	r3, .L194+16
 2681 00fa 9A42     		cmp	r2, r3
 2682 00fc 04D8     		bhi	.L161
 701:.\main.c      ****                     {
 702:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2683              		.loc 1 702 0
 2684 00fe 844B     		ldr	r3, .L194+4
 2685 0100 181C     		mov	r0, r3
 2686 0102 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2687 0106 5CE0     		b	.L164
 2688              	.L161:
 703:.\main.c      ****                     }
 704:.\main.c      ****                     else
 705:.\main.c      ****                     {
 706:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2689              		.loc 1 706 0
 2690 0108 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 61


 2691 010a 0833     		add	r3, r3, #8
 2692 010c 1A88     		ldrh	r2, [r3]
 2693 010e FA23     		mov	r3, #250
 2694 0110 DB00     		lsl	r3, r3, #3
 2695 0112 9A42     		cmp	r2, r3
 2696 0114 0CD8     		bhi	.L163
 2697              		.loc 1 706 0 is_stmt 0 discriminator 1
 2698 0116 3B1C     		mov	r3, r7
 2699 0118 0833     		add	r3, r3, #8
 2700 011a 1A88     		ldrh	r2, [r3]
 2701 011c 804B     		ldr	r3, .L194+20
 2702 011e 9A42     		cmp	r2, r3
 2703 0120 06D9     		bls	.L163
 707:.\main.c      ****                         {
 708:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2704              		.loc 1 708 0 is_stmt 1
 2705 0122 3B1C     		mov	r3, r7
 2706 0124 0833     		add	r3, r3, #8
 2707 0126 1B88     		ldrh	r3, [r3]
 2708 0128 181C     		mov	r0, r3
 2709 012a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2710 012e 48E0     		b	.L164
 2711              	.L163:
 709:.\main.c      ****                         }
 710:.\main.c      ****                         else
 711:.\main.c      ****                         {
 712:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2712              		.loc 1 712 0
 2713 0130 774B     		ldr	r3, .L194+4
 2714 0132 181C     		mov	r0, r3
 2715 0134 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2716 0138 43E0     		b	.L164
 2717              	.L160:
 713:.\main.c      ****                         }
 714:.\main.c      ****                     }
 715:.\main.c      ****                 }
 716:.\main.c      ****                 else if (feedback >= ELBOW_UPPER_BOUND) // upper bound checking, only move away is 
 2718              		.loc 1 716 0
 2719 013a 3B1C     		mov	r3, r7
 2720 013c 0C33     		add	r3, r3, #12
 2721 013e 1A88     		ldrh	r2, [r3]
 2722 0140 784B     		ldr	r3, .L194+24
 2723 0142 1B68     		ldr	r3, [r3]
 2724 0144 9A42     		cmp	r2, r3
 2725 0146 23D3     		bcc	.L165
 717:.\main.c      ****                 {
 718:.\main.c      ****                     if(avg > 1500)
 2726              		.loc 1 718 0
 2727 0148 3B1C     		mov	r3, r7
 2728 014a 0833     		add	r3, r3, #8
 2729 014c 1A88     		ldrh	r2, [r3]
 2730 014e 704B     		ldr	r3, .L194+4
 2731 0150 9A42     		cmp	r2, r3
 2732 0152 04D9     		bls	.L166
 719:.\main.c      ****                     {
 720:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2733              		.loc 1 720 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 62


 2734 0154 6E4B     		ldr	r3, .L194+4
 2735 0156 181C     		mov	r0, r3
 2736 0158 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2737 015c 31E0     		b	.L164
 2738              	.L166:
 721:.\main.c      ****                     }
 722:.\main.c      ****                     else
 723:.\main.c      ****                     {
 724:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2739              		.loc 1 724 0
 2740 015e 3B1C     		mov	r3, r7
 2741 0160 0833     		add	r3, r3, #8
 2742 0162 1A88     		ldrh	r2, [r3]
 2743 0164 FA23     		mov	r3, #250
 2744 0166 DB00     		lsl	r3, r3, #3
 2745 0168 9A42     		cmp	r2, r3
 2746 016a 0CD8     		bhi	.L168
 2747              		.loc 1 724 0 is_stmt 0 discriminator 1
 2748 016c 3B1C     		mov	r3, r7
 2749 016e 0833     		add	r3, r3, #8
 2750 0170 1A88     		ldrh	r2, [r3]
 2751 0172 6B4B     		ldr	r3, .L194+20
 2752 0174 9A42     		cmp	r2, r3
 2753 0176 06D9     		bls	.L168
 725:.\main.c      ****                         {
 726:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2754              		.loc 1 726 0 is_stmt 1
 2755 0178 3B1C     		mov	r3, r7
 2756 017a 0833     		add	r3, r3, #8
 2757 017c 1B88     		ldrh	r3, [r3]
 2758 017e 181C     		mov	r0, r3
 2759 0180 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2760 0184 1DE0     		b	.L164
 2761              	.L168:
 727:.\main.c      ****                         }
 728:.\main.c      ****                         else
 729:.\main.c      ****                         {
 730:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2762              		.loc 1 730 0
 2763 0186 624B     		ldr	r3, .L194+4
 2764 0188 181C     		mov	r0, r3
 2765 018a FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2766 018e 18E0     		b	.L164
 2767              	.L165:
 731:.\main.c      ****                         }
 732:.\main.c      ****                     }
 733:.\main.c      ****                 }
 734:.\main.c      ****                 else
 735:.\main.c      ****                 {
 736:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 2768              		.loc 1 736 0
 2769 0190 3B1C     		mov	r3, r7
 2770 0192 0833     		add	r3, r3, #8
 2771 0194 1A88     		ldrh	r2, [r3]
 2772 0196 FA23     		mov	r3, #250
 2773 0198 DB00     		lsl	r3, r3, #3
 2774 019a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 63


 2775 019c 0CD8     		bhi	.L169
 2776              		.loc 1 736 0 is_stmt 0 discriminator 1
 2777 019e 3B1C     		mov	r3, r7
 2778 01a0 0833     		add	r3, r3, #8
 2779 01a2 1A88     		ldrh	r2, [r3]
 2780 01a4 5E4B     		ldr	r3, .L194+20
 2781 01a6 9A42     		cmp	r2, r3
 2782 01a8 06D9     		bls	.L169
 737:.\main.c      ****                     {
 738:.\main.c      ****                         ELBW_PWM_WriteCompare(avg);
 2783              		.loc 1 738 0 is_stmt 1
 2784 01aa 3B1C     		mov	r3, r7
 2785 01ac 0833     		add	r3, r3, #8
 2786 01ae 1B88     		ldrh	r3, [r3]
 2787 01b0 181C     		mov	r0, r3
 2788 01b2 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2789 01b6 04E0     		b	.L164
 2790              	.L169:
 739:.\main.c      ****                     }
 740:.\main.c      ****                     else
 741:.\main.c      ****                     {
 742:.\main.c      ****                         ELBW_PWM_WriteCompare(NEUTRAL);
 2791              		.loc 1 742 0
 2792 01b8 554B     		ldr	r3, .L194+4
 2793 01ba 181C     		mov	r0, r3
 2794 01bc FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 698:.\main.c      ****                 if(feedback <= ELBOW_LOWER_BOUND )  // lower bound checking, only move away is allo
 2795              		.loc 1 698 0
 2796 01c0 65E0     		b	.L170
 2797              	.L164:
 2798 01c2 64E0     		b	.L170
 2799              	.L159:
 743:.\main.c      ****                     }
 744:.\main.c      ****                 }
 745:.\main.c      ****             }
 746:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 747:.\main.c      ****             {
 748:.\main.c      ****                 if(!stop_elb_dn_Read()){
 2800              		.loc 1 748 0
 2801 01c4 FFF7FEFF 		bl	stop_elb_dn_Read
 2802 01c8 031C     		mov	r3, r0
 2803 01ca 002B     		cmp	r3, #0
 2804 01cc 2BD1     		bne	.L171
 749:.\main.c      ****                     ELBOW_LOWER_BOUND = potFeedback(ELBOW_POT) + BOUND_OFFSET;
 2805              		.loc 1 749 0
 2806 01ce 0120     		mov	r0, #1
 2807 01d0 FFF7FEFF 		bl	potFeedback
 2808 01d4 031C     		mov	r3, r0
 2809 01d6 1433     		add	r3, r3, #20
 2810 01d8 1A1C     		mov	r2, r3
 2811 01da 4F4B     		ldr	r3, .L194+12
 2812 01dc 1A60     		str	r2, [r3]
 750:.\main.c      ****                     if (avg < 1500)
 2813              		.loc 1 750 0
 2814 01de 3B1C     		mov	r3, r7
 2815 01e0 0833     		add	r3, r3, #8
 2816 01e2 1A88     		ldrh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 64


 2817 01e4 4D4B     		ldr	r3, .L194+16
 2818 01e6 9A42     		cmp	r2, r3
 2819 01e8 04D8     		bhi	.L172
 751:.\main.c      ****                     {
 752:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2820              		.loc 1 752 0
 2821 01ea 494B     		ldr	r3, .L194+4
 2822 01ec 181C     		mov	r0, r3
 2823 01ee FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2824 01f2 4CE0     		b	.L170
 2825              	.L172:
 753:.\main.c      ****                     }
 754:.\main.c      ****                     else
 755:.\main.c      ****                     {
 756:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2826              		.loc 1 756 0
 2827 01f4 3B1C     		mov	r3, r7
 2828 01f6 0833     		add	r3, r3, #8
 2829 01f8 1A88     		ldrh	r2, [r3]
 2830 01fa FA23     		mov	r3, #250
 2831 01fc DB00     		lsl	r3, r3, #3
 2832 01fe 9A42     		cmp	r2, r3
 2833 0200 0CD8     		bhi	.L174
 2834              		.loc 1 756 0 is_stmt 0 discriminator 1
 2835 0202 3B1C     		mov	r3, r7
 2836 0204 0833     		add	r3, r3, #8
 2837 0206 1A88     		ldrh	r2, [r3]
 2838 0208 454B     		ldr	r3, .L194+20
 2839 020a 9A42     		cmp	r2, r3
 2840 020c 06D9     		bls	.L174
 757:.\main.c      ****                         {
 758:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2841              		.loc 1 758 0 is_stmt 1
 2842 020e 3B1C     		mov	r3, r7
 2843 0210 0833     		add	r3, r3, #8
 2844 0212 1B88     		ldrh	r3, [r3]
 2845 0214 181C     		mov	r0, r3
 2846 0216 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2847 021a 38E0     		b	.L170
 2848              	.L174:
 759:.\main.c      ****                         }
 760:.\main.c      ****                         else
 761:.\main.c      ****                         {
 762:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2849              		.loc 1 762 0
 2850 021c 3C4B     		ldr	r3, .L194+4
 2851 021e 181C     		mov	r0, r3
 2852 0220 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2853 0224 33E0     		b	.L170
 2854              	.L171:
 763:.\main.c      ****                         }
 764:.\main.c      ****                     }
 765:.\main.c      ****                 }
 766:.\main.c      ****                 else if(!stop_elb_up_Read()){
 2855              		.loc 1 766 0
 2856 0226 FFF7FEFF 		bl	stop_elb_up_Read
 2857 022a 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 65


 2858 022c 002B     		cmp	r3, #0
 2859 022e 2BD1     		bne	.L175
 767:.\main.c      ****                     ELBOW_UPPER_BOUND = potFeedback(ELBOW_POT) - BOUND_OFFSET;
 2860              		.loc 1 767 0
 2861 0230 0120     		mov	r0, #1
 2862 0232 FFF7FEFF 		bl	potFeedback
 2863 0236 031C     		mov	r3, r0
 2864 0238 143B     		sub	r3, r3, #20
 2865 023a 1A1C     		mov	r2, r3
 2866 023c 394B     		ldr	r3, .L194+24
 2867 023e 1A60     		str	r2, [r3]
 768:.\main.c      ****                     if(avg > 1500)
 2868              		.loc 1 768 0
 2869 0240 3B1C     		mov	r3, r7
 2870 0242 0833     		add	r3, r3, #8
 2871 0244 1A88     		ldrh	r2, [r3]
 2872 0246 324B     		ldr	r3, .L194+4
 2873 0248 9A42     		cmp	r2, r3
 2874 024a 04D9     		bls	.L176
 769:.\main.c      ****                     {
 770:.\main.c      ****                         ELBW_PWM_WriteCompare(1500);
 2875              		.loc 1 770 0
 2876 024c 304B     		ldr	r3, .L194+4
 2877 024e 181C     		mov	r0, r3
 2878 0250 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2879 0254 1BE0     		b	.L170
 2880              	.L176:
 771:.\main.c      ****                     }
 772:.\main.c      ****                     else
 773:.\main.c      ****                     {
 774:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 2881              		.loc 1 774 0
 2882 0256 3B1C     		mov	r3, r7
 2883 0258 0833     		add	r3, r3, #8
 2884 025a 1A88     		ldrh	r2, [r3]
 2885 025c FA23     		mov	r3, #250
 2886 025e DB00     		lsl	r3, r3, #3
 2887 0260 9A42     		cmp	r2, r3
 2888 0262 0CD8     		bhi	.L178
 2889              		.loc 1 774 0 is_stmt 0 discriminator 1
 2890 0264 3B1C     		mov	r3, r7
 2891 0266 0833     		add	r3, r3, #8
 2892 0268 1A88     		ldrh	r2, [r3]
 2893 026a 2D4B     		ldr	r3, .L194+20
 2894 026c 9A42     		cmp	r2, r3
 2895 026e 06D9     		bls	.L178
 775:.\main.c      ****                         {
 776:.\main.c      ****                             ELBW_PWM_WriteCompare(avg);
 2896              		.loc 1 776 0 is_stmt 1
 2897 0270 3B1C     		mov	r3, r7
 2898 0272 0833     		add	r3, r3, #8
 2899 0274 1B88     		ldrh	r3, [r3]
 2900 0276 181C     		mov	r0, r3
 2901 0278 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2902 027c 07E0     		b	.L170
 2903              	.L178:
 777:.\main.c      ****                         }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 66


 778:.\main.c      ****                         else
 779:.\main.c      ****                         {
 780:.\main.c      ****                             ELBW_PWM_WriteCompare(1500);
 2904              		.loc 1 780 0
 2905 027e 244B     		ldr	r3, .L194+4
 2906 0280 181C     		mov	r0, r3
 2907 0282 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2908 0286 02E0     		b	.L170
 2909              	.L175:
 781:.\main.c      ****                         }
 782:.\main.c      ****                     }
 783:.\main.c      ****                 }
 784:.\main.c      ****                 else{
 785:.\main.c      ****                     LED_Write(1);
 2910              		.loc 1 785 0
 2911 0288 0120     		mov	r0, #1
 2912 028a FFF7FEFF 		bl	LED_Write
 2913              	.L170:
 786:.\main.c      ****                 }
 787:.\main.c      ****             }
 788:.\main.c      ****             ELBOW_FLAG = 0;
 2914              		.loc 1 788 0
 2915 028e 264B     		ldr	r3, .L194+28
 2916 0290 0022     		mov	r2, #0
 2917 0292 1A70     		strb	r2, [r3]
 789:.\main.c      ****             break;
 2918              		.loc 1 789 0
 2919 0294 18E0     		b	.L153
 2920              	.L152:
 790:.\main.c      ****             
 791:.\main.c      ****         case elbw_wait:
 792:.\main.c      ****             if(feedback <= ELBOW_LOWER_BOUND || feedback >= ELBOW_UPPER_BOUND)
 2921              		.loc 1 792 0
 2922 0296 3B1C     		mov	r3, r7
 2923 0298 0C33     		add	r3, r3, #12
 2924 029a 1A88     		ldrh	r2, [r3]
 2925 029c 1E4B     		ldr	r3, .L194+12
 2926 029e 1B68     		ldr	r3, [r3]
 2927 02a0 9A42     		cmp	r2, r3
 2928 02a2 06D9     		bls	.L179
 2929              		.loc 1 792 0 is_stmt 0 discriminator 1
 2930 02a4 3B1C     		mov	r3, r7
 2931 02a6 0C33     		add	r3, r3, #12
 2932 02a8 1A88     		ldrh	r2, [r3]
 2933 02aa 1E4B     		ldr	r3, .L194+24
 2934 02ac 1B68     		ldr	r3, [r3]
 2935 02ae 9A42     		cmp	r2, r3
 2936 02b0 04D3     		bcc	.L180
 2937              	.L179:
 793:.\main.c      ****             {
 794:.\main.c      ****                 ELBW_PWM_WriteCompare(1500);
 2938              		.loc 1 794 0 is_stmt 1
 2939 02b2 174B     		ldr	r3, .L194+4
 2940 02b4 181C     		mov	r0, r3
 2941 02b6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 795:.\main.c      ****             }
 796:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 67


 2942              		.loc 1 796 0
 2943 02ba 05E0     		b	.L153
 2944              	.L180:
 2945 02bc 04E0     		b	.L153
 2946              	.L147:
 797:.\main.c      ****                         
 798:.\main.c      ****         default:
 799:.\main.c      ****             elbow_state = elbw_start;
 2947              		.loc 1 799 0
 2948 02be 134B     		ldr	r3, .L194
 2949 02c0 0022     		mov	r2, #0
 2950 02c2 1A70     		strb	r2, [r3]
 800:.\main.c      ****             break;
 2951              		.loc 1 800 0
 2952 02c4 00E0     		b	.L153
 2953              	.L193:
 669:.\main.c      ****             break;
 2954              		.loc 1 669 0
 2955 02c6 C046     		mov	r8, r8
 2956              	.L153:
 801:.\main.c      ****     }
 802:.\main.c      ****     
 803:.\main.c      ****     switch(elbow_state){ //transitions
 2957              		.loc 1 803 0
 2958 02c8 104B     		ldr	r3, .L194
 2959 02ca 1B78     		ldrb	r3, [r3]
 2960 02cc 012B     		cmp	r3, #1
 2961 02ce 0CD0     		beq	.L182
 2962 02d0 02DC     		bgt	.L183
 2963 02d2 002B     		cmp	r3, #0
 2964 02d4 05D0     		beq	.L184
 2965 02d6 35E0     		b	.L181
 2966              	.L183:
 2967 02d8 022B     		cmp	r3, #2
 2968 02da 0AD0     		beq	.L185
 2969 02dc 032B     		cmp	r3, #3
 2970 02de 25D0     		beq	.L186
 2971 02e0 30E0     		b	.L181
 2972              	.L184:
 804:.\main.c      ****         case elbw_start:
 805:.\main.c      ****             elbow_state = elbw_init;
 2973              		.loc 1 805 0
 2974 02e2 0A4B     		ldr	r3, .L194
 2975 02e4 0122     		mov	r2, #1
 2976 02e6 1A70     		strb	r2, [r3]
 806:.\main.c      ****             break;
 2977              		.loc 1 806 0
 2978 02e8 30E0     		b	.L187
 2979              	.L182:
 807:.\main.c      ****         
 808:.\main.c      ****         case elbw_init:
 809:.\main.c      ****             elbow_state = elbw_wait;
 2980              		.loc 1 809 0
 2981 02ea 084B     		ldr	r3, .L194
 2982 02ec 0322     		mov	r2, #3
 2983 02ee 1A70     		strb	r2, [r3]
 810:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 68


 2984              		.loc 1 810 0
 2985 02f0 2CE0     		b	.L187
 2986              	.L185:
 811:.\main.c      ****         
 812:.\main.c      ****         case elbw_execute:
 813:.\main.c      ****             if(ELBOW_FLAG)
 2987              		.loc 1 813 0
 2988 02f2 0D4B     		ldr	r3, .L194+28
 2989 02f4 1B78     		ldrb	r3, [r3]
 2990 02f6 002B     		cmp	r3, #0
 2991 02f8 03D0     		beq	.L188
 814:.\main.c      ****             {
 815:.\main.c      ****                 elbow_state = elbw_execute;
 2992              		.loc 1 815 0
 2993 02fa 044B     		ldr	r3, .L194
 2994 02fc 0222     		mov	r2, #2
 2995 02fe 1A70     		strb	r2, [r3]
 816:.\main.c      ****             }
 817:.\main.c      ****             else
 818:.\main.c      ****             {
 819:.\main.c      ****                 elbow_state = elbw_wait;
 820:.\main.c      ****             }
 821:.\main.c      ****             break;
 2996              		.loc 1 821 0
 2997 0300 24E0     		b	.L187
 2998              	.L188:
 819:.\main.c      ****                 elbow_state = elbw_wait;
 2999              		.loc 1 819 0
 3000 0302 024B     		ldr	r3, .L194
 3001 0304 0322     		mov	r2, #3
 3002 0306 1A70     		strb	r2, [r3]
 3003              		.loc 1 821 0
 3004 0308 20E0     		b	.L187
 3005              	.L195:
 3006 030a C046     		.align	2
 3007              	.L194:
 3008 030c 00000000 		.word	elbow_state
 3009 0310 DC050000 		.word	1500
 3010 0314 00000000 		.word	data_array
 3011 0318 00000000 		.word	ELBOW_LOWER_BOUND
 3012 031c DB050000 		.word	1499
 3013 0320 E7030000 		.word	999
 3014 0324 00000000 		.word	ELBOW_UPPER_BOUND
 3015 0328 00000000 		.word	ELBOW_FLAG
 3016              	.L186:
 822:.\main.c      ****         
 823:.\main.c      ****         case elbw_wait:
 824:.\main.c      ****             if(ELBOW_FLAG)
 3017              		.loc 1 824 0
 3018 032c 0A4B     		ldr	r3, .L196
 3019 032e 1B78     		ldrb	r3, [r3]
 3020 0330 002B     		cmp	r3, #0
 3021 0332 03D0     		beq	.L190
 825:.\main.c      ****             {
 826:.\main.c      ****                 elbow_state = elbw_execute;
 3022              		.loc 1 826 0
 3023 0334 094B     		ldr	r3, .L196+4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 69


 3024 0336 0222     		mov	r2, #2
 3025 0338 1A70     		strb	r2, [r3]
 827:.\main.c      ****             }
 828:.\main.c      ****             else
 829:.\main.c      ****             {
 830:.\main.c      ****                 elbow_state = elbw_wait; 
 831:.\main.c      ****             }
 832:.\main.c      ****             break;
 3026              		.loc 1 832 0
 3027 033a 07E0     		b	.L187
 3028              	.L190:
 830:.\main.c      ****                 elbow_state = elbw_wait; 
 3029              		.loc 1 830 0
 3030 033c 074B     		ldr	r3, .L196+4
 3031 033e 0322     		mov	r2, #3
 3032 0340 1A70     		strb	r2, [r3]
 3033              		.loc 1 832 0
 3034 0342 03E0     		b	.L187
 3035              	.L181:
 833:.\main.c      ****             
 834:.\main.c      ****         default:
 835:.\main.c      ****             elbow_state = elbw_start;
 3036              		.loc 1 835 0
 3037 0344 054B     		ldr	r3, .L196+4
 3038 0346 0022     		mov	r2, #0
 3039 0348 1A70     		strb	r2, [r3]
 836:.\main.c      ****             break;
 3040              		.loc 1 836 0
 3041 034a C046     		mov	r8, r8
 3042              	.L187:
 837:.\main.c      ****     }  
 838:.\main.c      ****     return elbw_arr_cspot;
 3043              		.loc 1 838 0
 3044 034c FB1D     		add	r3, r7, #7
 3045 034e 1B78     		ldrb	r3, [r3]
 839:.\main.c      **** }
 3046              		.loc 1 839 0
 3047 0350 181C     		mov	r0, r3
 3048 0352 BD46     		mov	sp, r7
 3049 0354 05B0     		add	sp, sp, #20
 3050              		@ sp needed
 3051 0356 90BD     		pop	{r4, r7, pc}
 3052              	.L197:
 3053              		.align	2
 3054              	.L196:
 3055 0358 00000000 		.word	ELBOW_FLAG
 3056 035c 00000000 		.word	elbow_state
 3057              		.cfi_endproc
 3058              	.LFE50:
 3059              		.size	elbow, .-elbow
 3060              		.comm	shoulder_state,1,1
 3061              		.section	.text.shoulder,"ax",%progbits
 3062              		.align	2
 3063              		.global	shoulder
 3064              		.code	16
 3065              		.thumb_func
 3066              		.type	shoulder, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 70


 3067              	shoulder:
 3068              	.LFB51:
 840:.\main.c      **** 
 841:.\main.c      **** //control the shoulder
 842:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 843:.\main.c      **** uint8 shoulder(uint8 shldr_arr_cspot, uint16* shoulder_array)
 844:.\main.c      **** { 
 3069              		.loc 1 844 0
 3070              		.cfi_startproc
 3071 0000 90B5     		push	{r4, r7, lr}
 3072              		.cfi_def_cfa_offset 12
 3073              		.cfi_offset 4, -12
 3074              		.cfi_offset 7, -8
 3075              		.cfi_offset 14, -4
 3076 0002 85B0     		sub	sp, sp, #20
 3077              		.cfi_def_cfa_offset 32
 3078 0004 00AF     		add	r7, sp, #0
 3079              		.cfi_def_cfa_register 7
 3080 0006 021C     		mov	r2, r0
 3081 0008 3960     		str	r1, [r7]
 3082 000a FB1D     		add	r3, r7, #7
 3083 000c 1A70     		strb	r2, [r3]
 845:.\main.c      ****     //take instruction from data_array
 846:.\main.c      ****     //smooth input
 847:.\main.c      ****     //actuate the shoulder using PWM
 848:.\main.c      ****     //get feedback
 849:.\main.c      ****     uint8 i;
 850:.\main.c      ****     uint16 avg;
 851:.\main.c      ****     uint16 command;
 852:.\main.c      ****     uint16 feedback = potFeedback(SHOULDER_POT); //TODO: Make sure reading from thecorrect pots
 3084              		.loc 1 852 0
 3085 000e 3C1C     		mov	r4, r7
 3086 0010 0C34     		add	r4, r4, #12
 3087 0012 0020     		mov	r0, #0
 3088 0014 FFF7FEFF 		bl	potFeedback
 3089 0018 031C     		mov	r3, r0
 3090 001a 2380     		strh	r3, [r4]
 853:.\main.c      ****     
 854:.\main.c      ****     switch(shoulder_state){ //actions
 3091              		.loc 1 854 0
 3092 001c BB4B     		ldr	r3, .L246
 3093 001e 1B78     		ldrb	r3, [r3]
 3094 0020 012B     		cmp	r3, #1
 3095 0022 0AD0     		beq	.L200
 3096 0024 03DC     		bgt	.L201
 3097 0026 002B     		cmp	r3, #0
 3098 0028 00D1     		bne	.LCB2759
 3099 002a 4CE1     		b	.L245	@long jump
 3100              	.LCB2759:
 3101 002c 47E1     		b	.L199
 3102              	.L201:
 3103 002e 022B     		cmp	r3, #2
 3104 0030 24D0     		beq	.L203
 3105 0032 032B     		cmp	r3, #3
 3106 0034 00D1     		bne	.LCB2767
 3107 0036 2EE1     		b	.L204	@long jump
 3108              	.LCB2767:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 71


 3109 0038 41E1     		b	.L199
 3110              	.L200:
 855:.\main.c      ****         case shldr_start:
 856:.\main.c      ****             break;
 857:.\main.c      **** 
 858:.\main.c      ****         case shldr_init:
 859:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3111              		.loc 1 859 0
 3112 003a 3B1C     		mov	r3, r7
 3113 003c 0F33     		add	r3, r3, #15
 3114 003e 0022     		mov	r2, #0
 3115 0040 1A70     		strb	r2, [r3]
 3116 0042 0EE0     		b	.L206
 3117              	.L207:
 860:.\main.c      ****             {
 861:.\main.c      ****                 shoulder_array[i] = 1500;
 3118              		.loc 1 861 0 discriminator 2
 3119 0044 3B1C     		mov	r3, r7
 3120 0046 0F33     		add	r3, r3, #15
 3121 0048 1B78     		ldrb	r3, [r3]
 3122 004a 5B00     		lsl	r3, r3, #1
 3123 004c 3A68     		ldr	r2, [r7]
 3124 004e D318     		add	r3, r2, r3
 3125 0050 AF4A     		ldr	r2, .L246+4
 3126 0052 1A80     		strh	r2, [r3]
 859:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3127              		.loc 1 859 0 discriminator 2
 3128 0054 3B1C     		mov	r3, r7
 3129 0056 0F33     		add	r3, r3, #15
 3130 0058 1A78     		ldrb	r2, [r3]
 3131 005a 3B1C     		mov	r3, r7
 3132 005c 0F33     		add	r3, r3, #15
 3133 005e 0132     		add	r2, r2, #1
 3134 0060 1A70     		strb	r2, [r3]
 3135              	.L206:
 859:.\main.c      ****             for(i = 0; i < SHLDR_ARR_SIZE; i++)
 3136              		.loc 1 859 0 is_stmt 0 discriminator 1
 3137 0062 3B1C     		mov	r3, r7
 3138 0064 0F33     		add	r3, r3, #15
 3139 0066 1B78     		ldrb	r3, [r3]
 3140 0068 132B     		cmp	r3, #19
 3141 006a EBD9     		bls	.L207
 862:.\main.c      ****             }
 863:.\main.c      ****             shldr_arr_cspot = 0;
 3142              		.loc 1 863 0 is_stmt 1
 3143 006c FB1D     		add	r3, r7, #7
 3144 006e 0022     		mov	r2, #0
 3145 0070 1A70     		strb	r2, [r3]
 864:.\main.c      ****                         
 865:.\main.c      ****             SHLDR_PWM_WriteCompare(1500);
 3146              		.loc 1 865 0
 3147 0072 A74B     		ldr	r3, .L246+4
 3148 0074 181C     		mov	r0, r3
 3149 0076 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 866:.\main.c      ****             break;
 3150              		.loc 1 866 0
 3151 007a 25E1     		b	.L205
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 72


 3152              	.L203:
 867:.\main.c      **** 
 868:.\main.c      ****         case shldr_execute:
 869:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 3153              		.loc 1 869 0
 3154 007c 3C1C     		mov	r4, r7
 3155 007e 0A34     		add	r4, r4, #10
 3156 0080 A44B     		ldr	r3, .L246+8
 3157 0082 181C     		mov	r0, r3
 3158 0084 0C21     		mov	r1, #12
 3159 0086 0D22     		mov	r2, #13
 3160 0088 FFF7FEFF 		bl	make_command
 3161 008c 031C     		mov	r3, r0
 3162 008e 2380     		strh	r3, [r4]
 870:.\main.c      ****             shoulder_array[shldr_arr_cspot] = command;    
 3163              		.loc 1 870 0
 3164 0090 FB1D     		add	r3, r7, #7
 3165 0092 1B78     		ldrb	r3, [r3]
 3166 0094 5B00     		lsl	r3, r3, #1
 3167 0096 3A68     		ldr	r2, [r7]
 3168 0098 D318     		add	r3, r2, r3
 3169 009a 3A1C     		mov	r2, r7
 3170 009c 0A32     		add	r2, r2, #10
 3171 009e 1288     		ldrh	r2, [r2]
 3172 00a0 1A80     		strh	r2, [r3]
 871:.\main.c      ****         
 872:.\main.c      ****             if(shldr_arr_cspot < (SHLDR_ARR_SIZE - 1))
 3173              		.loc 1 872 0
 3174 00a2 FB1D     		add	r3, r7, #7
 3175 00a4 1B78     		ldrb	r3, [r3]
 3176 00a6 122B     		cmp	r3, #18
 3177 00a8 05D8     		bhi	.L208
 873:.\main.c      ****             {
 874:.\main.c      ****                 shldr_arr_cspot++;
 3178              		.loc 1 874 0
 3179 00aa FB1D     		add	r3, r7, #7
 3180 00ac 1A78     		ldrb	r2, [r3]
 3181 00ae FB1D     		add	r3, r7, #7
 3182 00b0 0132     		add	r2, r2, #1
 3183 00b2 1A70     		strb	r2, [r3]
 3184 00b4 02E0     		b	.L209
 3185              	.L208:
 875:.\main.c      ****             }
 876:.\main.c      ****             else
 877:.\main.c      ****             {
 878:.\main.c      ****                 shldr_arr_cspot = 0;
 3186              		.loc 1 878 0
 3187 00b6 FB1D     		add	r3, r7, #7
 3188 00b8 0022     		mov	r2, #0
 3189 00ba 1A70     		strb	r2, [r3]
 3190              	.L209:
 879:.\main.c      ****             }
 880:.\main.c      ****             avg = average(shoulder_array, SHLDR_ARR_SIZE);
 3191              		.loc 1 880 0
 3192 00bc 3C1C     		mov	r4, r7
 3193 00be 0834     		add	r4, r4, #8
 3194 00c0 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 73


 3195 00c2 181C     		mov	r0, r3
 3196 00c4 1421     		mov	r1, #20
 3197 00c6 FFF7FEFF 		bl	average
 3198 00ca 031C     		mov	r3, r0
 3199 00cc 2380     		strh	r3, [r4]
 881:.\main.c      ****             
 882:.\main.c      ****             if(!stop_shdr_dn_Read() || !stop_shdr_up_Read())
 3200              		.loc 1 882 0
 3201 00ce FFF7FEFF 		bl	stop_shdr_dn_Read
 3202 00d2 031C     		mov	r3, r0
 3203 00d4 002B     		cmp	r3, #0
 3204 00d6 05D0     		beq	.L210
 3205              		.loc 1 882 0 is_stmt 0 discriminator 1
 3206 00d8 FFF7FEFF 		bl	stop_shdr_up_Read
 3207 00dc 031C     		mov	r3, r0
 3208 00de 002B     		cmp	r3, #0
 3209 00e0 00D0     		beq	.LCB2863
 3210 00e2 6FE0     		b	.L211	@long jump
 3211              	.LCB2863:
 3212              	.L210:
 883:.\main.c      ****             {
 884:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3213              		.loc 1 884 0 is_stmt 1
 3214 00e4 3B1C     		mov	r3, r7
 3215 00e6 0C33     		add	r3, r3, #12
 3216 00e8 1A88     		ldrh	r2, [r3]
 3217 00ea 8B4B     		ldr	r3, .L246+12
 3218 00ec 1B68     		ldr	r3, [r3]
 3219 00ee 9A42     		cmp	r2, r3
 3220 00f0 23D8     		bhi	.L212
 885:.\main.c      ****                 {
 886:.\main.c      ****                     if (avg < 1500)
 3221              		.loc 1 886 0
 3222 00f2 3B1C     		mov	r3, r7
 3223 00f4 0833     		add	r3, r3, #8
 3224 00f6 1A88     		ldrh	r2, [r3]
 3225 00f8 884B     		ldr	r3, .L246+16
 3226 00fa 9A42     		cmp	r2, r3
 3227 00fc 04D8     		bhi	.L213
 887:.\main.c      ****                     {
 888:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3228              		.loc 1 888 0
 3229 00fe 844B     		ldr	r3, .L246+4
 3230 0100 181C     		mov	r0, r3
 3231 0102 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3232 0106 5CE0     		b	.L216
 3233              	.L213:
 889:.\main.c      ****                     }
 890:.\main.c      ****                     else
 891:.\main.c      ****                     {
 892:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3234              		.loc 1 892 0
 3235 0108 3B1C     		mov	r3, r7
 3236 010a 0833     		add	r3, r3, #8
 3237 010c 1A88     		ldrh	r2, [r3]
 3238 010e FA23     		mov	r3, #250
 3239 0110 DB00     		lsl	r3, r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 74


 3240 0112 9A42     		cmp	r2, r3
 3241 0114 0CD8     		bhi	.L215
 3242              		.loc 1 892 0 is_stmt 0 discriminator 1
 3243 0116 3B1C     		mov	r3, r7
 3244 0118 0833     		add	r3, r3, #8
 3245 011a 1A88     		ldrh	r2, [r3]
 3246 011c 804B     		ldr	r3, .L246+20
 3247 011e 9A42     		cmp	r2, r3
 3248 0120 06D9     		bls	.L215
 893:.\main.c      ****                         {
 894:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3249              		.loc 1 894 0 is_stmt 1
 3250 0122 3B1C     		mov	r3, r7
 3251 0124 0833     		add	r3, r3, #8
 3252 0126 1B88     		ldrh	r3, [r3]
 3253 0128 181C     		mov	r0, r3
 3254 012a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3255 012e 48E0     		b	.L216
 3256              	.L215:
 895:.\main.c      ****                         }
 896:.\main.c      ****                         else
 897:.\main.c      ****                         {
 898:.\main.c      ****                             //throw error
 899:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3257              		.loc 1 899 0
 3258 0130 774B     		ldr	r3, .L246+4
 3259 0132 181C     		mov	r0, r3
 3260 0134 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3261 0138 43E0     		b	.L216
 3262              	.L212:
 900:.\main.c      ****                         }
 901:.\main.c      ****                     }
 902:.\main.c      ****                 }
 903:.\main.c      ****                 else if (feedback >= SHOULDER_UPPER_BOUND)
 3263              		.loc 1 903 0
 3264 013a 3B1C     		mov	r3, r7
 3265 013c 0C33     		add	r3, r3, #12
 3266 013e 1A88     		ldrh	r2, [r3]
 3267 0140 784B     		ldr	r3, .L246+24
 3268 0142 1B68     		ldr	r3, [r3]
 3269 0144 9A42     		cmp	r2, r3
 3270 0146 23D3     		bcc	.L217
 904:.\main.c      ****                 {
 905:.\main.c      ****                     if(avg > 1500)
 3271              		.loc 1 905 0
 3272 0148 3B1C     		mov	r3, r7
 3273 014a 0833     		add	r3, r3, #8
 3274 014c 1A88     		ldrh	r2, [r3]
 3275 014e 704B     		ldr	r3, .L246+4
 3276 0150 9A42     		cmp	r2, r3
 3277 0152 04D9     		bls	.L218
 906:.\main.c      ****                     {
 907:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3278              		.loc 1 907 0
 3279 0154 6E4B     		ldr	r3, .L246+4
 3280 0156 181C     		mov	r0, r3
 3281 0158 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 75


 3282 015c 31E0     		b	.L216
 3283              	.L218:
 908:.\main.c      ****                     }
 909:.\main.c      ****                     else
 910:.\main.c      ****                     {
 911:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3284              		.loc 1 911 0
 3285 015e 3B1C     		mov	r3, r7
 3286 0160 0833     		add	r3, r3, #8
 3287 0162 1A88     		ldrh	r2, [r3]
 3288 0164 FA23     		mov	r3, #250
 3289 0166 DB00     		lsl	r3, r3, #3
 3290 0168 9A42     		cmp	r2, r3
 3291 016a 0CD8     		bhi	.L220
 3292              		.loc 1 911 0 is_stmt 0 discriminator 1
 3293 016c 3B1C     		mov	r3, r7
 3294 016e 0833     		add	r3, r3, #8
 3295 0170 1A88     		ldrh	r2, [r3]
 3296 0172 6B4B     		ldr	r3, .L246+20
 3297 0174 9A42     		cmp	r2, r3
 3298 0176 06D9     		bls	.L220
 912:.\main.c      ****                         {
 913:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3299              		.loc 1 913 0 is_stmt 1
 3300 0178 3B1C     		mov	r3, r7
 3301 017a 0833     		add	r3, r3, #8
 3302 017c 1B88     		ldrh	r3, [r3]
 3303 017e 181C     		mov	r0, r3
 3304 0180 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3305 0184 1DE0     		b	.L216
 3306              	.L220:
 914:.\main.c      ****                         }
 915:.\main.c      ****                         else
 916:.\main.c      ****                         {
 917:.\main.c      ****                             //throw error
 918:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3307              		.loc 1 918 0
 3308 0186 624B     		ldr	r3, .L246+4
 3309 0188 181C     		mov	r0, r3
 3310 018a FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3311 018e 18E0     		b	.L216
 3312              	.L217:
 919:.\main.c      ****                         }
 920:.\main.c      ****                     }
 921:.\main.c      ****                 }
 922:.\main.c      ****                 else
 923:.\main.c      ****                 {
 924:.\main.c      ****                     if(avg <= 2000 && avg >= 1000)
 3313              		.loc 1 924 0
 3314 0190 3B1C     		mov	r3, r7
 3315 0192 0833     		add	r3, r3, #8
 3316 0194 1A88     		ldrh	r2, [r3]
 3317 0196 FA23     		mov	r3, #250
 3318 0198 DB00     		lsl	r3, r3, #3
 3319 019a 9A42     		cmp	r2, r3
 3320 019c 0CD8     		bhi	.L221
 3321              		.loc 1 924 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 76


 3322 019e 3B1C     		mov	r3, r7
 3323 01a0 0833     		add	r3, r3, #8
 3324 01a2 1A88     		ldrh	r2, [r3]
 3325 01a4 5E4B     		ldr	r3, .L246+20
 3326 01a6 9A42     		cmp	r2, r3
 3327 01a8 06D9     		bls	.L221
 925:.\main.c      ****                     {
 926:.\main.c      ****                         SHLDR_PWM_WriteCompare(avg);
 3328              		.loc 1 926 0 is_stmt 1
 3329 01aa 3B1C     		mov	r3, r7
 3330 01ac 0833     		add	r3, r3, #8
 3331 01ae 1B88     		ldrh	r3, [r3]
 3332 01b0 181C     		mov	r0, r3
 3333 01b2 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3334 01b6 04E0     		b	.L216
 3335              	.L221:
 927:.\main.c      ****                     }
 928:.\main.c      ****                     else
 929:.\main.c      ****                     {
 930:.\main.c      ****                         //throw error
 931:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3336              		.loc 1 931 0
 3337 01b8 554B     		ldr	r3, .L246+4
 3338 01ba 181C     		mov	r0, r3
 3339 01bc FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 884:.\main.c      ****                 if(feedback <= SHOULDER_LOWER_BOUND)
 3340              		.loc 1 884 0
 3341 01c0 65E0     		b	.L222
 3342              	.L216:
 3343 01c2 64E0     		b	.L222
 3344              	.L211:
 932:.\main.c      ****                     }
 933:.\main.c      ****                 }
 934:.\main.c      ****             }
 935:.\main.c      ****             else // One of the stop switches was presses, shouldn't happen but just in case
 936:.\main.c      ****             {
 937:.\main.c      ****                 if(!stop_elb_dn_Read()){
 3345              		.loc 1 937 0
 3346 01c4 FFF7FEFF 		bl	stop_elb_dn_Read
 3347 01c8 031C     		mov	r3, r0
 3348 01ca 002B     		cmp	r3, #0
 3349 01cc 2BD1     		bne	.L223
 938:.\main.c      ****                     SHOULDER_LOWER_BOUND = potFeedback(SHOULDER_POT) + BOUND_OFFSET;
 3350              		.loc 1 938 0
 3351 01ce 0020     		mov	r0, #0
 3352 01d0 FFF7FEFF 		bl	potFeedback
 3353 01d4 031C     		mov	r3, r0
 3354 01d6 1433     		add	r3, r3, #20
 3355 01d8 1A1C     		mov	r2, r3
 3356 01da 4F4B     		ldr	r3, .L246+12
 3357 01dc 1A60     		str	r2, [r3]
 939:.\main.c      ****                     if (avg < 1500)
 3358              		.loc 1 939 0
 3359 01de 3B1C     		mov	r3, r7
 3360 01e0 0833     		add	r3, r3, #8
 3361 01e2 1A88     		ldrh	r2, [r3]
 3362 01e4 4D4B     		ldr	r3, .L246+16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 77


 3363 01e6 9A42     		cmp	r2, r3
 3364 01e8 04D8     		bhi	.L224
 940:.\main.c      ****                     {
 941:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3365              		.loc 1 941 0
 3366 01ea 494B     		ldr	r3, .L246+4
 3367 01ec 181C     		mov	r0, r3
 3368 01ee FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3369 01f2 4CE0     		b	.L222
 3370              	.L224:
 942:.\main.c      ****                     }
 943:.\main.c      ****                     else
 944:.\main.c      ****                     {
 945:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3371              		.loc 1 945 0
 3372 01f4 3B1C     		mov	r3, r7
 3373 01f6 0833     		add	r3, r3, #8
 3374 01f8 1A88     		ldrh	r2, [r3]
 3375 01fa FA23     		mov	r3, #250
 3376 01fc DB00     		lsl	r3, r3, #3
 3377 01fe 9A42     		cmp	r2, r3
 3378 0200 0CD8     		bhi	.L226
 3379              		.loc 1 945 0 is_stmt 0 discriminator 1
 3380 0202 3B1C     		mov	r3, r7
 3381 0204 0833     		add	r3, r3, #8
 3382 0206 1A88     		ldrh	r2, [r3]
 3383 0208 454B     		ldr	r3, .L246+20
 3384 020a 9A42     		cmp	r2, r3
 3385 020c 06D9     		bls	.L226
 946:.\main.c      ****                         {
 947:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3386              		.loc 1 947 0 is_stmt 1
 3387 020e 3B1C     		mov	r3, r7
 3388 0210 0833     		add	r3, r3, #8
 3389 0212 1B88     		ldrh	r3, [r3]
 3390 0214 181C     		mov	r0, r3
 3391 0216 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3392 021a 38E0     		b	.L222
 3393              	.L226:
 948:.\main.c      ****                         }
 949:.\main.c      ****                         else
 950:.\main.c      ****                         {
 951:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3394              		.loc 1 951 0
 3395 021c 3C4B     		ldr	r3, .L246+4
 3396 021e 181C     		mov	r0, r3
 3397 0220 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3398 0224 33E0     		b	.L222
 3399              	.L223:
 952:.\main.c      ****                         }
 953:.\main.c      ****                     }
 954:.\main.c      ****                 }
 955:.\main.c      ****                 else if(!stop_elb_up_Read()){
 3400              		.loc 1 955 0
 3401 0226 FFF7FEFF 		bl	stop_elb_up_Read
 3402 022a 031C     		mov	r3, r0
 3403 022c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 78


 3404 022e 2BD1     		bne	.L227
 956:.\main.c      ****                     SHOULDER_UPPER_BOUND = potFeedback(SHOULDER_POT) - BOUND_OFFSET;
 3405              		.loc 1 956 0
 3406 0230 0020     		mov	r0, #0
 3407 0232 FFF7FEFF 		bl	potFeedback
 3408 0236 031C     		mov	r3, r0
 3409 0238 143B     		sub	r3, r3, #20
 3410 023a 1A1C     		mov	r2, r3
 3411 023c 394B     		ldr	r3, .L246+24
 3412 023e 1A60     		str	r2, [r3]
 957:.\main.c      ****                     if(avg > 1500)
 3413              		.loc 1 957 0
 3414 0240 3B1C     		mov	r3, r7
 3415 0242 0833     		add	r3, r3, #8
 3416 0244 1A88     		ldrh	r2, [r3]
 3417 0246 324B     		ldr	r3, .L246+4
 3418 0248 9A42     		cmp	r2, r3
 3419 024a 04D9     		bls	.L228
 958:.\main.c      ****                     {
 959:.\main.c      ****                         SHLDR_PWM_WriteCompare(1500);
 3420              		.loc 1 959 0
 3421 024c 304B     		ldr	r3, .L246+4
 3422 024e 181C     		mov	r0, r3
 3423 0250 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3424 0254 1BE0     		b	.L222
 3425              	.L228:
 960:.\main.c      ****                     }
 961:.\main.c      ****                     else
 962:.\main.c      ****                     {
 963:.\main.c      ****                         if(avg <= 2000 && avg >= 1000)
 3426              		.loc 1 963 0
 3427 0256 3B1C     		mov	r3, r7
 3428 0258 0833     		add	r3, r3, #8
 3429 025a 1A88     		ldrh	r2, [r3]
 3430 025c FA23     		mov	r3, #250
 3431 025e DB00     		lsl	r3, r3, #3
 3432 0260 9A42     		cmp	r2, r3
 3433 0262 0CD8     		bhi	.L230
 3434              		.loc 1 963 0 is_stmt 0 discriminator 1
 3435 0264 3B1C     		mov	r3, r7
 3436 0266 0833     		add	r3, r3, #8
 3437 0268 1A88     		ldrh	r2, [r3]
 3438 026a 2D4B     		ldr	r3, .L246+20
 3439 026c 9A42     		cmp	r2, r3
 3440 026e 06D9     		bls	.L230
 964:.\main.c      ****                         {
 965:.\main.c      ****                             SHLDR_PWM_WriteCompare(avg);
 3441              		.loc 1 965 0 is_stmt 1
 3442 0270 3B1C     		mov	r3, r7
 3443 0272 0833     		add	r3, r3, #8
 3444 0274 1B88     		ldrh	r3, [r3]
 3445 0276 181C     		mov	r0, r3
 3446 0278 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3447 027c 07E0     		b	.L222
 3448              	.L230:
 966:.\main.c      ****                         }
 967:.\main.c      ****                         else
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 79


 968:.\main.c      ****                         {
 969:.\main.c      ****                             SHLDR_PWM_WriteCompare(1500);
 3449              		.loc 1 969 0
 3450 027e 244B     		ldr	r3, .L246+4
 3451 0280 181C     		mov	r0, r3
 3452 0282 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3453 0286 02E0     		b	.L222
 3454              	.L227:
 970:.\main.c      ****                         }
 971:.\main.c      ****                     }
 972:.\main.c      ****                 }
 973:.\main.c      ****                 else{
 974:.\main.c      ****                     LED_Write(1);
 3455              		.loc 1 974 0
 3456 0288 0120     		mov	r0, #1
 3457 028a FFF7FEFF 		bl	LED_Write
 3458              	.L222:
 975:.\main.c      ****                 }
 976:.\main.c      ****             }
 977:.\main.c      ****             SHOULDER_FLAG = 0;
 3459              		.loc 1 977 0
 3460 028e 264B     		ldr	r3, .L246+28
 3461 0290 0022     		mov	r2, #0
 3462 0292 1A70     		strb	r2, [r3]
 978:.\main.c      ****             break;
 3463              		.loc 1 978 0
 3464 0294 18E0     		b	.L205
 3465              	.L204:
 979:.\main.c      ****             
 980:.\main.c      ****         case shldr_wait:
 981:.\main.c      ****             if(feedback <= SHOULDER_LOWER_BOUND || feedback >= SHOULDER_UPPER_BOUND)
 3466              		.loc 1 981 0
 3467 0296 3B1C     		mov	r3, r7
 3468 0298 0C33     		add	r3, r3, #12
 3469 029a 1A88     		ldrh	r2, [r3]
 3470 029c 1E4B     		ldr	r3, .L246+12
 3471 029e 1B68     		ldr	r3, [r3]
 3472 02a0 9A42     		cmp	r2, r3
 3473 02a2 06D9     		bls	.L231
 3474              		.loc 1 981 0 is_stmt 0 discriminator 1
 3475 02a4 3B1C     		mov	r3, r7
 3476 02a6 0C33     		add	r3, r3, #12
 3477 02a8 1A88     		ldrh	r2, [r3]
 3478 02aa 1E4B     		ldr	r3, .L246+24
 3479 02ac 1B68     		ldr	r3, [r3]
 3480 02ae 9A42     		cmp	r2, r3
 3481 02b0 04D3     		bcc	.L232
 3482              	.L231:
 982:.\main.c      ****             {
 983:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3483              		.loc 1 983 0 is_stmt 1
 3484 02b2 174B     		ldr	r3, .L246+4
 3485 02b4 181C     		mov	r0, r3
 3486 02b6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 984:.\main.c      ****             }
 985:.\main.c      ****             break;
 3487              		.loc 1 985 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 80


 3488 02ba 05E0     		b	.L205
 3489              	.L232:
 3490 02bc 04E0     		b	.L205
 3491              	.L199:
 986:.\main.c      ****                         
 987:.\main.c      ****         default:
 988:.\main.c      ****             shoulder_state = shldr_start;
 3492              		.loc 1 988 0
 3493 02be 134B     		ldr	r3, .L246
 3494 02c0 0022     		mov	r2, #0
 3495 02c2 1A70     		strb	r2, [r3]
 989:.\main.c      ****             break;
 3496              		.loc 1 989 0
 3497 02c4 00E0     		b	.L205
 3498              	.L245:
 856:.\main.c      ****             break;
 3499              		.loc 1 856 0
 3500 02c6 C046     		mov	r8, r8
 3501              	.L205:
 990:.\main.c      ****     }
 991:.\main.c      ****     
 992:.\main.c      ****     switch(shoulder_state){ //transitions
 3502              		.loc 1 992 0
 3503 02c8 104B     		ldr	r3, .L246
 3504 02ca 1B78     		ldrb	r3, [r3]
 3505 02cc 012B     		cmp	r3, #1
 3506 02ce 0CD0     		beq	.L234
 3507 02d0 02DC     		bgt	.L235
 3508 02d2 002B     		cmp	r3, #0
 3509 02d4 05D0     		beq	.L236
 3510 02d6 35E0     		b	.L233
 3511              	.L235:
 3512 02d8 022B     		cmp	r3, #2
 3513 02da 0AD0     		beq	.L237
 3514 02dc 032B     		cmp	r3, #3
 3515 02de 25D0     		beq	.L238
 3516 02e0 30E0     		b	.L233
 3517              	.L236:
 993:.\main.c      ****         case shldr_start:
 994:.\main.c      ****             shoulder_state = shldr_init;
 3518              		.loc 1 994 0
 3519 02e2 0A4B     		ldr	r3, .L246
 3520 02e4 0122     		mov	r2, #1
 3521 02e6 1A70     		strb	r2, [r3]
 995:.\main.c      ****             break;
 3522              		.loc 1 995 0
 3523 02e8 30E0     		b	.L239
 3524              	.L234:
 996:.\main.c      ****         
 997:.\main.c      ****         case shldr_init:
 998:.\main.c      ****             shoulder_state = shldr_wait;
 3525              		.loc 1 998 0
 3526 02ea 084B     		ldr	r3, .L246
 3527 02ec 0322     		mov	r2, #3
 3528 02ee 1A70     		strb	r2, [r3]
 999:.\main.c      ****             break;
 3529              		.loc 1 999 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 81


 3530 02f0 2CE0     		b	.L239
 3531              	.L237:
1000:.\main.c      ****         
1001:.\main.c      ****         case shldr_execute:
1002:.\main.c      ****             if(SHOULDER_FLAG)
 3532              		.loc 1 1002 0
 3533 02f2 0D4B     		ldr	r3, .L246+28
 3534 02f4 1B78     		ldrb	r3, [r3]
 3535 02f6 002B     		cmp	r3, #0
 3536 02f8 03D0     		beq	.L240
1003:.\main.c      ****             {
1004:.\main.c      ****                 shoulder_state = shldr_execute;
 3537              		.loc 1 1004 0
 3538 02fa 044B     		ldr	r3, .L246
 3539 02fc 0222     		mov	r2, #2
 3540 02fe 1A70     		strb	r2, [r3]
1005:.\main.c      ****             }
1006:.\main.c      ****             else
1007:.\main.c      ****             {
1008:.\main.c      ****                 shoulder_state = shldr_wait;
1009:.\main.c      ****             }
1010:.\main.c      ****             break;
 3541              		.loc 1 1010 0
 3542 0300 24E0     		b	.L239
 3543              	.L240:
1008:.\main.c      ****                 shoulder_state = shldr_wait;
 3544              		.loc 1 1008 0
 3545 0302 024B     		ldr	r3, .L246
 3546 0304 0322     		mov	r2, #3
 3547 0306 1A70     		strb	r2, [r3]
 3548              		.loc 1 1010 0
 3549 0308 20E0     		b	.L239
 3550              	.L247:
 3551 030a C046     		.align	2
 3552              	.L246:
 3553 030c 00000000 		.word	shoulder_state
 3554 0310 DC050000 		.word	1500
 3555 0314 00000000 		.word	data_array
 3556 0318 00000000 		.word	SHOULDER_LOWER_BOUND
 3557 031c DB050000 		.word	1499
 3558 0320 E7030000 		.word	999
 3559 0324 00000000 		.word	SHOULDER_UPPER_BOUND
 3560 0328 00000000 		.word	SHOULDER_FLAG
 3561              	.L238:
1011:.\main.c      ****         
1012:.\main.c      ****         case shldr_wait:
1013:.\main.c      ****             if(SHOULDER_FLAG)
 3562              		.loc 1 1013 0
 3563 032c 0A4B     		ldr	r3, .L248
 3564 032e 1B78     		ldrb	r3, [r3]
 3565 0330 002B     		cmp	r3, #0
 3566 0332 03D0     		beq	.L242
1014:.\main.c      ****             {
1015:.\main.c      ****                 shoulder_state = shldr_execute;
 3567              		.loc 1 1015 0
 3568 0334 094B     		ldr	r3, .L248+4
 3569 0336 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 82


 3570 0338 1A70     		strb	r2, [r3]
1016:.\main.c      ****             }
1017:.\main.c      ****             else
1018:.\main.c      ****             {
1019:.\main.c      ****                 shoulder_state = shldr_wait; 
1020:.\main.c      ****             }
1021:.\main.c      ****             break;
 3571              		.loc 1 1021 0
 3572 033a 07E0     		b	.L239
 3573              	.L242:
1019:.\main.c      ****                 shoulder_state = shldr_wait; 
 3574              		.loc 1 1019 0
 3575 033c 074B     		ldr	r3, .L248+4
 3576 033e 0322     		mov	r2, #3
 3577 0340 1A70     		strb	r2, [r3]
 3578              		.loc 1 1021 0
 3579 0342 03E0     		b	.L239
 3580              	.L233:
1022:.\main.c      ****             
1023:.\main.c      ****         default:
1024:.\main.c      ****             shoulder_state = shldr_start;
 3581              		.loc 1 1024 0
 3582 0344 054B     		ldr	r3, .L248+4
 3583 0346 0022     		mov	r2, #0
 3584 0348 1A70     		strb	r2, [r3]
1025:.\main.c      ****             break;
 3585              		.loc 1 1025 0
 3586 034a C046     		mov	r8, r8
 3587              	.L239:
1026:.\main.c      ****     }  
1027:.\main.c      ****     return shldr_arr_cspot;
 3588              		.loc 1 1027 0
 3589 034c FB1D     		add	r3, r7, #7
 3590 034e 1B78     		ldrb	r3, [r3]
1028:.\main.c      **** }
 3591              		.loc 1 1028 0
 3592 0350 181C     		mov	r0, r3
 3593 0352 BD46     		mov	sp, r7
 3594 0354 05B0     		add	sp, sp, #20
 3595              		@ sp needed
 3596 0356 90BD     		pop	{r4, r7, pc}
 3597              	.L249:
 3598              		.align	2
 3599              	.L248:
 3600 0358 00000000 		.word	SHOULDER_FLAG
 3601 035c 00000000 		.word	shoulder_state
 3602              		.cfi_endproc
 3603              	.LFE51:
 3604              		.size	shoulder, .-shoulder
 3605              		.comm	baseAzimuth_state,1,1
 3606              		.section	.text.baseAzimuth,"ax",%progbits
 3607              		.align	2
 3608              		.global	baseAzimuth
 3609              		.code	16
 3610              		.thumb_func
 3611              		.type	baseAzimuth, %function
 3612              	baseAzimuth:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 83


 3613              	.LFB52:
1029:.\main.c      **** 
1030:.\main.c      **** //control the turret
1031:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
1032:.\main.c      **** uint8 baseAzimuth(uint8 BA_arr_cspot, uint16* baseAz_array)
1033:.\main.c      **** { 
 3614              		.loc 1 1033 0
 3615              		.cfi_startproc
 3616 0000 90B5     		push	{r4, r7, lr}
 3617              		.cfi_def_cfa_offset 12
 3618              		.cfi_offset 4, -12
 3619              		.cfi_offset 7, -8
 3620              		.cfi_offset 14, -4
 3621 0002 85B0     		sub	sp, sp, #20
 3622              		.cfi_def_cfa_offset 32
 3623 0004 00AF     		add	r7, sp, #0
 3624              		.cfi_def_cfa_register 7
 3625 0006 021C     		mov	r2, r0
 3626 0008 3960     		str	r1, [r7]
 3627 000a FB1D     		add	r3, r7, #7
 3628 000c 1A70     		strb	r2, [r3]
1034:.\main.c      ****     //take instruction from data_array
1035:.\main.c      ****     //smooth input
1036:.\main.c      ****     //actuate the turret using PWM
1037:.\main.c      ****     uint8 i;
1038:.\main.c      ****     uint16 avg;
1039:.\main.c      ****     uint16 command;
1040:.\main.c      ****     
1041:.\main.c      ****     switch(baseAzimuth_state){ //actions
 3629              		.loc 1 1041 0
 3630 000e 564B     		ldr	r3, .L276
 3631 0010 1B78     		ldrb	r3, [r3]
 3632 0012 012B     		cmp	r3, #1
 3633 0014 08D0     		beq	.L252
 3634 0016 02DC     		bgt	.L253
 3635 0018 002B     		cmp	r3, #0
 3636 001a 6AD0     		beq	.L274
 3637 001c 65E0     		b	.L251
 3638              	.L253:
 3639 001e 022B     		cmp	r3, #2
 3640 0020 23D0     		beq	.L255
 3641 0022 032B     		cmp	r3, #3
 3642 0024 67D0     		beq	.L275
 3643 0026 60E0     		b	.L251
 3644              	.L252:
1042:.\main.c      ****         case BA_start:
1043:.\main.c      ****             break;
1044:.\main.c      **** 
1045:.\main.c      ****         case BA_init:
1046:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3645              		.loc 1 1046 0
 3646 0028 3B1C     		mov	r3, r7
 3647 002a 0F33     		add	r3, r3, #15
 3648 002c 0022     		mov	r2, #0
 3649 002e 1A70     		strb	r2, [r3]
 3650 0030 0EE0     		b	.L258
 3651              	.L259:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 84


1047:.\main.c      ****             {
1048:.\main.c      ****                 baseAz_array[i] = 1500;
 3652              		.loc 1 1048 0 discriminator 2
 3653 0032 3B1C     		mov	r3, r7
 3654 0034 0F33     		add	r3, r3, #15
 3655 0036 1B78     		ldrb	r3, [r3]
 3656 0038 5B00     		lsl	r3, r3, #1
 3657 003a 3A68     		ldr	r2, [r7]
 3658 003c D318     		add	r3, r2, r3
 3659 003e 4B4A     		ldr	r2, .L276+4
 3660 0040 1A80     		strh	r2, [r3]
1046:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3661              		.loc 1 1046 0 discriminator 2
 3662 0042 3B1C     		mov	r3, r7
 3663 0044 0F33     		add	r3, r3, #15
 3664 0046 1A78     		ldrb	r2, [r3]
 3665 0048 3B1C     		mov	r3, r7
 3666 004a 0F33     		add	r3, r3, #15
 3667 004c 0132     		add	r2, r2, #1
 3668 004e 1A70     		strb	r2, [r3]
 3669              	.L258:
1046:.\main.c      ****             for(i = 0; i < BA_ARR_SIZE; i++)
 3670              		.loc 1 1046 0 is_stmt 0 discriminator 1
 3671 0050 3B1C     		mov	r3, r7
 3672 0052 0F33     		add	r3, r3, #15
 3673 0054 1B78     		ldrb	r3, [r3]
 3674 0056 132B     		cmp	r3, #19
 3675 0058 EBD9     		bls	.L259
1049:.\main.c      ****             }
1050:.\main.c      ****             BA_arr_cspot = 0;
 3676              		.loc 1 1050 0 is_stmt 1
 3677 005a FB1D     		add	r3, r7, #7
 3678 005c 0022     		mov	r2, #0
 3679 005e 1A70     		strb	r2, [r3]
1051:.\main.c      ****             
1052:.\main.c      ****             BA_PWM_WriteCompare(1500);
 3680              		.loc 1 1052 0
 3681 0060 424B     		ldr	r3, .L276+4
 3682 0062 181C     		mov	r0, r3
 3683 0064 FFF7FEFF 		bl	BA_PWM_WriteCompare
1053:.\main.c      ****             break;
 3684              		.loc 1 1053 0
 3685 0068 46E0     		b	.L257
 3686              	.L255:
1054:.\main.c      **** 
1055:.\main.c      ****         case BA_execute:
1056:.\main.c      ****             command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 3687              		.loc 1 1056 0
 3688 006a 3C1C     		mov	r4, r7
 3689 006c 0C34     		add	r4, r4, #12
 3690 006e 404B     		ldr	r3, .L276+8
 3691 0070 181C     		mov	r0, r3
 3692 0072 0A21     		mov	r1, #10
 3693 0074 0B22     		mov	r2, #11
 3694 0076 FFF7FEFF 		bl	make_command
 3695 007a 031C     		mov	r3, r0
 3696 007c 2380     		strh	r3, [r4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 85


1057:.\main.c      ****             
1058:.\main.c      **** //            baseAz_array[BA_arr_cspot] = command;
1059:.\main.c      **** //            
1060:.\main.c      **** //            if(BA_arr_cspot < (BA_ARR_SIZE - 1))
1061:.\main.c      **** //            {
1062:.\main.c      **** //                BA_arr_cspot++;
1063:.\main.c      **** //            }
1064:.\main.c      **** //            else
1065:.\main.c      **** //            {
1066:.\main.c      **** //                BA_arr_cspot = 0;
1067:.\main.c      **** //            }
1068:.\main.c      ****             
1069:.\main.c      ****             BA_arr_cspot = pos_to_vel(BA_arr_cspot, baseAz_array, BA_ARR_SIZE, command);
 3697              		.loc 1 1069 0
 3698 007e FC1D     		add	r4, r7, #7
 3699 0080 FB1D     		add	r3, r7, #7
 3700 0082 1978     		ldrb	r1, [r3]
 3701 0084 3A68     		ldr	r2, [r7]
 3702 0086 3B1C     		mov	r3, r7
 3703 0088 0C33     		add	r3, r3, #12
 3704 008a 1B88     		ldrh	r3, [r3]
 3705 008c 081C     		mov	r0, r1
 3706 008e 111C     		mov	r1, r2
 3707 0090 1422     		mov	r2, #20
 3708 0092 FFF7FEFF 		bl	pos_to_vel
 3709 0096 031C     		mov	r3, r0
 3710 0098 2370     		strb	r3, [r4]
1070:.\main.c      ****             
1071:.\main.c      ****             avg = average(baseAz_array, BA_ARR_SIZE);
 3711              		.loc 1 1071 0
 3712 009a 3C1C     		mov	r4, r7
 3713 009c 0A34     		add	r4, r4, #10
 3714 009e 3B68     		ldr	r3, [r7]
 3715 00a0 181C     		mov	r0, r3
 3716 00a2 1421     		mov	r1, #20
 3717 00a4 FFF7FEFF 		bl	average
 3718 00a8 031C     		mov	r3, r0
 3719 00aa 2380     		strh	r3, [r4]
1072:.\main.c      ****             
1073:.\main.c      **** //            if(avg == 1000 || avg == 2000)
1074:.\main.c      **** //            {
1075:.\main.c      **** //
1076:.\main.c      **** //                temp_val = temp_val*(-1);
1077:.\main.c      **** //            }
1078:.\main.c      ****             
1079:.\main.c      ****             if(avg <= 2000 && avg >= 1000)
 3720              		.loc 1 1079 0
 3721 00ac 3B1C     		mov	r3, r7
 3722 00ae 0A33     		add	r3, r3, #10
 3723 00b0 1A88     		ldrh	r2, [r3]
 3724 00b2 FA23     		mov	r3, #250
 3725 00b4 DB00     		lsl	r3, r3, #3
 3726 00b6 9A42     		cmp	r2, r3
 3727 00b8 0CD8     		bhi	.L260
 3728              		.loc 1 1079 0 is_stmt 0 discriminator 1
 3729 00ba 3B1C     		mov	r3, r7
 3730 00bc 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 86


 3731 00be 1A88     		ldrh	r2, [r3]
 3732 00c0 2C4B     		ldr	r3, .L276+12
 3733 00c2 9A42     		cmp	r2, r3
 3734 00c4 06D9     		bls	.L260
1080:.\main.c      ****             {
1081:.\main.c      ****                 BA_PWM_WriteCompare(avg);
 3735              		.loc 1 1081 0 is_stmt 1
 3736 00c6 3B1C     		mov	r3, r7
 3737 00c8 0A33     		add	r3, r3, #10
 3738 00ca 1B88     		ldrh	r3, [r3]
 3739 00cc 181C     		mov	r0, r3
 3740 00ce FFF7FEFF 		bl	BA_PWM_WriteCompare
 3741 00d2 06E0     		b	.L261
 3742              	.L260:
1082:.\main.c      ****             }
1083:.\main.c      ****             else
1084:.\main.c      ****             {
1085:.\main.c      ****                 LED_Write(1);
 3743              		.loc 1 1085 0
 3744 00d4 0120     		mov	r0, #1
 3745 00d6 FFF7FEFF 		bl	LED_Write
1086:.\main.c      **** 
1087:.\main.c      ****                 //throw error
1088:.\main.c      ****                 BA_PWM_WriteCompare(1500);
 3746              		.loc 1 1088 0
 3747 00da 244B     		ldr	r3, .L276+4
 3748 00dc 181C     		mov	r0, r3
 3749 00de FFF7FEFF 		bl	BA_PWM_WriteCompare
 3750              	.L261:
1089:.\main.c      ****             }
1090:.\main.c      ****             BA_FLAG = 0;
 3751              		.loc 1 1090 0
 3752 00e2 254B     		ldr	r3, .L276+16
 3753 00e4 0022     		mov	r2, #0
 3754 00e6 1A70     		strb	r2, [r3]
1091:.\main.c      ****             break;
 3755              		.loc 1 1091 0
 3756 00e8 06E0     		b	.L257
 3757              	.L251:
1092:.\main.c      ****             
1093:.\main.c      ****         case BA_wait:
1094:.\main.c      ****             break;
1095:.\main.c      ****             
1096:.\main.c      ****         default:
1097:.\main.c      ****             baseAzimuth_state = BA_start;
 3758              		.loc 1 1097 0
 3759 00ea 1F4B     		ldr	r3, .L276
 3760 00ec 0022     		mov	r2, #0
 3761 00ee 1A70     		strb	r2, [r3]
1098:.\main.c      ****             break;
 3762              		.loc 1 1098 0
 3763 00f0 02E0     		b	.L257
 3764              	.L274:
1043:.\main.c      ****             break;
 3765              		.loc 1 1043 0
 3766 00f2 C046     		mov	r8, r8
 3767 00f4 00E0     		b	.L257
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 87


 3768              	.L275:
1094:.\main.c      ****             break;
 3769              		.loc 1 1094 0
 3770 00f6 C046     		mov	r8, r8
 3771              	.L257:
1099:.\main.c      ****     }
1100:.\main.c      ****     
1101:.\main.c      ****     switch(baseAzimuth_state){ //transitions
 3772              		.loc 1 1101 0
 3773 00f8 1B4B     		ldr	r3, .L276
 3774 00fa 1B78     		ldrb	r3, [r3]
 3775 00fc 012B     		cmp	r3, #1
 3776 00fe 0CD0     		beq	.L263
 3777 0100 02DC     		bgt	.L264
 3778 0102 002B     		cmp	r3, #0
 3779 0104 05D0     		beq	.L265
 3780 0106 24E0     		b	.L262
 3781              	.L264:
 3782 0108 022B     		cmp	r3, #2
 3783 010a 0AD0     		beq	.L266
 3784 010c 032B     		cmp	r3, #3
 3785 010e 14D0     		beq	.L267
 3786 0110 1FE0     		b	.L262
 3787              	.L265:
1102:.\main.c      ****         case BA_start:
1103:.\main.c      ****             baseAzimuth_state = BA_init;
 3788              		.loc 1 1103 0
 3789 0112 154B     		ldr	r3, .L276
 3790 0114 0122     		mov	r2, #1
 3791 0116 1A70     		strb	r2, [r3]
1104:.\main.c      ****             break;
 3792              		.loc 1 1104 0
 3793 0118 1FE0     		b	.L268
 3794              	.L263:
1105:.\main.c      ****         
1106:.\main.c      ****         case BA_init:
1107:.\main.c      ****             baseAzimuth_state = BA_wait;
 3795              		.loc 1 1107 0
 3796 011a 134B     		ldr	r3, .L276
 3797 011c 0322     		mov	r2, #3
 3798 011e 1A70     		strb	r2, [r3]
1108:.\main.c      ****             break;
 3799              		.loc 1 1108 0
 3800 0120 1BE0     		b	.L268
 3801              	.L266:
1109:.\main.c      ****         
1110:.\main.c      ****         case BA_execute:
1111:.\main.c      ****             if(BA_FLAG)
 3802              		.loc 1 1111 0
 3803 0122 154B     		ldr	r3, .L276+16
 3804 0124 1B78     		ldrb	r3, [r3]
 3805 0126 002B     		cmp	r3, #0
 3806 0128 03D0     		beq	.L269
1112:.\main.c      ****             {
1113:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3807              		.loc 1 1113 0
 3808 012a 0F4B     		ldr	r3, .L276
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 88


 3809 012c 0222     		mov	r2, #2
 3810 012e 1A70     		strb	r2, [r3]
1114:.\main.c      ****             }
1115:.\main.c      ****             else
1116:.\main.c      ****             {
1117:.\main.c      ****                 baseAzimuth_state = BA_wait;
1118:.\main.c      ****             }
1119:.\main.c      ****             break;
 3811              		.loc 1 1119 0
 3812 0130 13E0     		b	.L268
 3813              	.L269:
1117:.\main.c      ****                 baseAzimuth_state = BA_wait;
 3814              		.loc 1 1117 0
 3815 0132 0D4B     		ldr	r3, .L276
 3816 0134 0322     		mov	r2, #3
 3817 0136 1A70     		strb	r2, [r3]
 3818              		.loc 1 1119 0
 3819 0138 0FE0     		b	.L268
 3820              	.L267:
1120:.\main.c      ****         
1121:.\main.c      ****         case BA_wait:
1122:.\main.c      ****             if(BA_FLAG)
 3821              		.loc 1 1122 0
 3822 013a 0F4B     		ldr	r3, .L276+16
 3823 013c 1B78     		ldrb	r3, [r3]
 3824 013e 002B     		cmp	r3, #0
 3825 0140 03D0     		beq	.L271
1123:.\main.c      ****             {
1124:.\main.c      ****                 baseAzimuth_state = BA_execute;
 3826              		.loc 1 1124 0
 3827 0142 094B     		ldr	r3, .L276
 3828 0144 0222     		mov	r2, #2
 3829 0146 1A70     		strb	r2, [r3]
1125:.\main.c      ****             }
1126:.\main.c      ****             else
1127:.\main.c      ****             {
1128:.\main.c      ****                 baseAzimuth_state = BA_wait; 
1129:.\main.c      ****             }
1130:.\main.c      ****             break;
 3830              		.loc 1 1130 0
 3831 0148 07E0     		b	.L268
 3832              	.L271:
1128:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 3833              		.loc 1 1128 0
 3834 014a 074B     		ldr	r3, .L276
 3835 014c 0322     		mov	r2, #3
 3836 014e 1A70     		strb	r2, [r3]
 3837              		.loc 1 1130 0
 3838 0150 03E0     		b	.L268
 3839              	.L262:
1131:.\main.c      ****             
1132:.\main.c      ****         default:
1133:.\main.c      ****             baseAzimuth_state = BA_start;
 3840              		.loc 1 1133 0
 3841 0152 054B     		ldr	r3, .L276
 3842 0154 0022     		mov	r2, #0
 3843 0156 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 89


1134:.\main.c      ****             break;
 3844              		.loc 1 1134 0
 3845 0158 C046     		mov	r8, r8
 3846              	.L268:
1135:.\main.c      ****     }  
1136:.\main.c      ****     return BA_arr_cspot;
 3847              		.loc 1 1136 0
 3848 015a FB1D     		add	r3, r7, #7
 3849 015c 1B78     		ldrb	r3, [r3]
1137:.\main.c      **** }
 3850              		.loc 1 1137 0
 3851 015e 181C     		mov	r0, r3
 3852 0160 BD46     		mov	sp, r7
 3853 0162 05B0     		add	sp, sp, #20
 3854              		@ sp needed
 3855 0164 90BD     		pop	{r4, r7, pc}
 3856              	.L277:
 3857 0166 C046     		.align	2
 3858              	.L276:
 3859 0168 00000000 		.word	baseAzimuth_state
 3860 016c DC050000 		.word	1500
 3861 0170 00000000 		.word	data_array
 3862 0174 E7030000 		.word	999
 3863 0178 00000000 		.word	BA_FLAG
 3864              		.cfi_endproc
 3865              	.LFE52:
 3866              		.size	baseAzimuth, .-baseAzimuth
 3867              		.comm	effector_state,1,1
 3868              		.section	.text.effector,"ax",%progbits
 3869              		.align	2
 3870              		.global	effector
 3871              		.code	16
 3872              		.thumb_func
 3873              		.type	effector, %function
 3874              	effector:
 3875              	.LFB53:
1138:.\main.c      **** 
1139:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
1140:.\main.c      **** void effector()
1141:.\main.c      **** {
 3876              		.loc 1 1141 0
 3877              		.cfi_startproc
 3878 0000 90B5     		push	{r4, r7, lr}
 3879              		.cfi_def_cfa_offset 12
 3880              		.cfi_offset 4, -12
 3881              		.cfi_offset 7, -8
 3882              		.cfi_offset 14, -4
 3883 0002 83B0     		sub	sp, sp, #12
 3884              		.cfi_def_cfa_offset 24
 3885 0004 00AF     		add	r7, sp, #0
 3886              		.cfi_def_cfa_register 7
1142:.\main.c      ****     uint16 command;
1143:.\main.c      **** 
1144:.\main.c      ****     switch(effector_state){ //actions
 3887              		.loc 1 1144 0
 3888 0006 374B     		ldr	r3, .L301
 3889 0008 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 90


 3890 000a 012B     		cmp	r3, #1
 3891 000c 08D0     		beq	.L280
 3892 000e 02DC     		bgt	.L281
 3893 0010 002B     		cmp	r3, #0
 3894 0012 30D0     		beq	.L299
 3895 0014 2BE0     		b	.L279
 3896              	.L281:
 3897 0016 022B     		cmp	r3, #2
 3898 0018 07D0     		beq	.L283
 3899 001a 032B     		cmp	r3, #3
 3900 001c 2DD0     		beq	.L300
 3901 001e 26E0     		b	.L279
 3902              	.L280:
1145:.\main.c      ****         case shldr_start:
1146:.\main.c      ****             break;
1147:.\main.c      **** 
1148:.\main.c      ****         case eff_init:           
1149:.\main.c      ****            EFFECTOR_PWM_WriteCompare(1500);
 3903              		.loc 1 1149 0
 3904 0020 314B     		ldr	r3, .L301+4
 3905 0022 181C     		mov	r0, r3
 3906 0024 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
1150:.\main.c      ****            break;
 3907              		.loc 1 1150 0
 3908 0028 28E0     		b	.L285
 3909              	.L283:
1151:.\main.c      **** 
1152:.\main.c      ****         case eff_execute:
1153:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);    
 3910              		.loc 1 1153 0
 3911 002a BC1D     		add	r4, r7, #6
 3912 002c 2F4B     		ldr	r3, .L301+8
 3913 002e 181C     		mov	r0, r3
 3914 0030 1421     		mov	r1, #20
 3915 0032 1522     		mov	r2, #21
 3916 0034 FFF7FEFF 		bl	make_command
 3917 0038 031C     		mov	r3, r0
 3918 003a 2380     		strh	r3, [r4]
1154:.\main.c      **** 
1155:.\main.c      ****             if(command <= 2000 && command >= 1000)
 3919              		.loc 1 1155 0
 3920 003c BB1D     		add	r3, r7, #6
 3921 003e 1A88     		ldrh	r2, [r3]
 3922 0040 FA23     		mov	r3, #250
 3923 0042 DB00     		lsl	r3, r3, #3
 3924 0044 9A42     		cmp	r2, r3
 3925 0046 0AD8     		bhi	.L286
 3926              		.loc 1 1155 0 is_stmt 0 discriminator 1
 3927 0048 BB1D     		add	r3, r7, #6
 3928 004a 1A88     		ldrh	r2, [r3]
 3929 004c 284B     		ldr	r3, .L301+12
 3930 004e 9A42     		cmp	r2, r3
 3931 0050 05D9     		bls	.L286
1156:.\main.c      ****             {
1157:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 3932              		.loc 1 1157 0 is_stmt 1
 3933 0052 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 91


 3934 0054 1B88     		ldrh	r3, [r3]
 3935 0056 181C     		mov	r0, r3
 3936 0058 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 3937 005c 03E0     		b	.L287
 3938              	.L286:
1158:.\main.c      ****             }
1159:.\main.c      ****             else
1160:.\main.c      ****             {
1161:.\main.c      ****                 //throw error
1162:.\main.c      ****                 SHLDR_PWM_WriteCompare(1500);
 3939              		.loc 1 1162 0
 3940 005e 224B     		ldr	r3, .L301+4
 3941 0060 181C     		mov	r0, r3
 3942 0062 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 3943              	.L287:
1163:.\main.c      ****             }
1164:.\main.c      ****             
1165:.\main.c      ****             EFFECTOR_FLAG = 0;
 3944              		.loc 1 1165 0
 3945 0066 234B     		ldr	r3, .L301+16
 3946 0068 0022     		mov	r2, #0
 3947 006a 1A70     		strb	r2, [r3]
1166:.\main.c      ****             break;
 3948              		.loc 1 1166 0
 3949 006c 06E0     		b	.L285
 3950              	.L279:
1167:.\main.c      ****             
1168:.\main.c      ****         case eff_wait:
1169:.\main.c      ****             break;
1170:.\main.c      ****         
1171:.\main.c      ****         default:
1172:.\main.c      ****             effector_state = eff_start;
 3951              		.loc 1 1172 0
 3952 006e 1D4B     		ldr	r3, .L301
 3953 0070 0022     		mov	r2, #0
 3954 0072 1A70     		strb	r2, [r3]
1173:.\main.c      ****             break;
 3955              		.loc 1 1173 0
 3956 0074 02E0     		b	.L285
 3957              	.L299:
1146:.\main.c      ****             break;
 3958              		.loc 1 1146 0
 3959 0076 C046     		mov	r8, r8
 3960 0078 00E0     		b	.L285
 3961              	.L300:
1169:.\main.c      ****             break;
 3962              		.loc 1 1169 0
 3963 007a C046     		mov	r8, r8
 3964              	.L285:
1174:.\main.c      ****     }
1175:.\main.c      ****     
1176:.\main.c      ****     switch(effector_state){ //transitions
 3965              		.loc 1 1176 0
 3966 007c 194B     		ldr	r3, .L301
 3967 007e 1B78     		ldrb	r3, [r3]
 3968 0080 012B     		cmp	r3, #1
 3969 0082 0CD0     		beq	.L289
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 92


 3970 0084 02DC     		bgt	.L290
 3971 0086 002B     		cmp	r3, #0
 3972 0088 05D0     		beq	.L291
 3973 008a 24E0     		b	.L288
 3974              	.L290:
 3975 008c 022B     		cmp	r3, #2
 3976 008e 0AD0     		beq	.L292
 3977 0090 032B     		cmp	r3, #3
 3978 0092 14D0     		beq	.L293
 3979 0094 1FE0     		b	.L288
 3980              	.L291:
1177:.\main.c      ****         case eff_start:
1178:.\main.c      ****             effector_state = eff_init;
 3981              		.loc 1 1178 0
 3982 0096 134B     		ldr	r3, .L301
 3983 0098 0122     		mov	r2, #1
 3984 009a 1A70     		strb	r2, [r3]
1179:.\main.c      ****             break;
 3985              		.loc 1 1179 0
 3986 009c 1FE0     		b	.L278
 3987              	.L289:
1180:.\main.c      ****         
1181:.\main.c      ****         case eff_init:
1182:.\main.c      ****             effector_state = eff_wait;
 3988              		.loc 1 1182 0
 3989 009e 114B     		ldr	r3, .L301
 3990 00a0 0322     		mov	r2, #3
 3991 00a2 1A70     		strb	r2, [r3]
1183:.\main.c      ****             break;
 3992              		.loc 1 1183 0
 3993 00a4 1BE0     		b	.L278
 3994              	.L292:
1184:.\main.c      ****         
1185:.\main.c      ****         case eff_execute:
1186:.\main.c      ****             if(EFFECTOR_FLAG)
 3995              		.loc 1 1186 0
 3996 00a6 134B     		ldr	r3, .L301+16
 3997 00a8 1B78     		ldrb	r3, [r3]
 3998 00aa 002B     		cmp	r3, #0
 3999 00ac 03D0     		beq	.L295
1187:.\main.c      ****             {
1188:.\main.c      ****                 effector_state = eff_execute;
 4000              		.loc 1 1188 0
 4001 00ae 0D4B     		ldr	r3, .L301
 4002 00b0 0222     		mov	r2, #2
 4003 00b2 1A70     		strb	r2, [r3]
1189:.\main.c      ****             }
1190:.\main.c      ****             else
1191:.\main.c      ****             {
1192:.\main.c      ****                 effector_state = eff_wait;
1193:.\main.c      ****             }
1194:.\main.c      ****             break;
 4004              		.loc 1 1194 0
 4005 00b4 13E0     		b	.L278
 4006              	.L295:
1192:.\main.c      ****                 effector_state = eff_wait;
 4007              		.loc 1 1192 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 93


 4008 00b6 0B4B     		ldr	r3, .L301
 4009 00b8 0322     		mov	r2, #3
 4010 00ba 1A70     		strb	r2, [r3]
 4011              		.loc 1 1194 0
 4012 00bc 0FE0     		b	.L278
 4013              	.L293:
1195:.\main.c      ****         
1196:.\main.c      ****         case eff_wait:
1197:.\main.c      ****             if(EFFECTOR_FLAG)
 4014              		.loc 1 1197 0
 4015 00be 0D4B     		ldr	r3, .L301+16
 4016 00c0 1B78     		ldrb	r3, [r3]
 4017 00c2 002B     		cmp	r3, #0
 4018 00c4 03D0     		beq	.L297
1198:.\main.c      ****             {
1199:.\main.c      ****                 effector_state = eff_execute;
 4019              		.loc 1 1199 0
 4020 00c6 074B     		ldr	r3, .L301
 4021 00c8 0222     		mov	r2, #2
 4022 00ca 1A70     		strb	r2, [r3]
1200:.\main.c      ****             }
1201:.\main.c      ****             else
1202:.\main.c      ****             {
1203:.\main.c      ****                 effector_state = eff_wait; 
1204:.\main.c      ****             }
1205:.\main.c      ****             break;
 4023              		.loc 1 1205 0
 4024 00cc 07E0     		b	.L278
 4025              	.L297:
1203:.\main.c      ****                 effector_state = eff_wait; 
 4026              		.loc 1 1203 0
 4027 00ce 054B     		ldr	r3, .L301
 4028 00d0 0322     		mov	r2, #3
 4029 00d2 1A70     		strb	r2, [r3]
 4030              		.loc 1 1205 0
 4031 00d4 03E0     		b	.L278
 4032              	.L288:
1206:.\main.c      ****         
1207:.\main.c      ****         default:
1208:.\main.c      ****             effector_state = eff_start;
 4033              		.loc 1 1208 0
 4034 00d6 034B     		ldr	r3, .L301
 4035 00d8 0022     		mov	r2, #0
 4036 00da 1A70     		strb	r2, [r3]
1209:.\main.c      ****             break;
 4037              		.loc 1 1209 0
 4038 00dc C046     		mov	r8, r8
 4039              	.L278:
1210:.\main.c      ****     }    
1211:.\main.c      **** }
 4040              		.loc 1 1211 0
 4041 00de BD46     		mov	sp, r7
 4042 00e0 03B0     		add	sp, sp, #12
 4043              		@ sp needed
 4044 00e2 90BD     		pop	{r4, r7, pc}
 4045              	.L302:
 4046              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 94


 4047              	.L301:
 4048 00e4 00000000 		.word	effector_state
 4049 00e8 DC050000 		.word	1500
 4050 00ec 00000000 		.word	data_array
 4051 00f0 E7030000 		.word	999
 4052 00f4 00000000 		.word	EFFECTOR_FLAG
 4053              		.cfi_endproc
 4054              	.LFE53:
 4055              		.size	effector, .-effector
 4056              		.comm	phSensor_state,1,1
 4057              		.section	.text.phSensor,"ax",%progbits
 4058              		.align	2
 4059              		.global	phSensor
 4060              		.code	16
 4061              		.thumb_func
 4062              		.type	phSensor, %function
 4063              	phSensor:
 4064              	.LFB54:
1212:.\main.c      **** 
1213:.\main.c      **** enum phSensor_states {ph_start, ph_init, ph_execute, ph_wait} phSensor_state;
1214:.\main.c      **** void phSensor()
1215:.\main.c      **** {
 4065              		.loc 1 1215 0
 4066              		.cfi_startproc
 4067 0000 80B5     		push	{r7, lr}
 4068              		.cfi_def_cfa_offset 8
 4069              		.cfi_offset 7, -8
 4070              		.cfi_offset 14, -4
 4071 0002 00AF     		add	r7, sp, #0
 4072              		.cfi_def_cfa_register 7
1216:.\main.c      ****     switch(phSensor_state)
 4073              		.loc 1 1216 0
 4074 0004 264B     		ldr	r3, .L325
 4075 0006 1B78     		ldrb	r3, [r3]
 4076 0008 012B     		cmp	r3, #1
 4077 000a 10D0     		beq	.L322
 4078 000c 02DC     		bgt	.L306
 4079 000e 002B     		cmp	r3, #0
 4080 0010 0FD0     		beq	.L323
 4081 0012 08E0     		b	.L304
 4082              	.L306:
 4083 0014 022B     		cmp	r3, #2
 4084 0016 02D0     		beq	.L308
 4085 0018 032B     		cmp	r3, #3
 4086 001a 0CD0     		beq	.L324
 4087 001c 03E0     		b	.L304
 4088              	.L308:
1217:.\main.c      ****     { //actions
1218:.\main.c      ****         case ph_start:
1219:.\main.c      ****             // Do nothing
1220:.\main.c      ****             break;
1221:.\main.c      **** 
1222:.\main.c      ****         case ph_init:           
1223:.\main.c      ****            // TODO: Add initialization code. might not need
1224:.\main.c      ****            break;
1225:.\main.c      **** 
1226:.\main.c      ****         case ph_execute:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 95


1227:.\main.c      ****             // TODO:  Call Marshalls code for phSensor
1228:.\main.c      ****             PH_FLAG = 0;
 4089              		.loc 1 1228 0
 4090 001e 214B     		ldr	r3, .L325+4
 4091 0020 0022     		mov	r2, #0
 4092 0022 1A70     		strb	r2, [r3]
1229:.\main.c      ****             break;
 4093              		.loc 1 1229 0
 4094 0024 08E0     		b	.L310
 4095              	.L304:
1230:.\main.c      ****             
1231:.\main.c      ****         case ph_wait:
1232:.\main.c      ****             break;
1233:.\main.c      ****         
1234:.\main.c      ****         default:
1235:.\main.c      ****             phSensor_state = ph_start;
 4096              		.loc 1 1235 0
 4097 0026 1E4B     		ldr	r3, .L325
 4098 0028 0022     		mov	r2, #0
 4099 002a 1A70     		strb	r2, [r3]
1236:.\main.c      ****             break;
 4100              		.loc 1 1236 0
 4101 002c 04E0     		b	.L310
 4102              	.L322:
1224:.\main.c      ****            break;
 4103              		.loc 1 1224 0
 4104 002e C046     		mov	r8, r8
 4105 0030 02E0     		b	.L310
 4106              	.L323:
1220:.\main.c      ****             break;
 4107              		.loc 1 1220 0
 4108 0032 C046     		mov	r8, r8
 4109 0034 00E0     		b	.L310
 4110              	.L324:
1232:.\main.c      ****             break;
 4111              		.loc 1 1232 0
 4112 0036 C046     		mov	r8, r8
 4113              	.L310:
1237:.\main.c      ****     }
1238:.\main.c      ****     
1239:.\main.c      ****     switch(phSensor_state)
 4114              		.loc 1 1239 0
 4115 0038 194B     		ldr	r3, .L325
 4116 003a 1B78     		ldrb	r3, [r3]
 4117 003c 012B     		cmp	r3, #1
 4118 003e 0CD0     		beq	.L312
 4119 0040 02DC     		bgt	.L313
 4120 0042 002B     		cmp	r3, #0
 4121 0044 05D0     		beq	.L314
 4122 0046 24E0     		b	.L311
 4123              	.L313:
 4124 0048 022B     		cmp	r3, #2
 4125 004a 0AD0     		beq	.L315
 4126 004c 032B     		cmp	r3, #3
 4127 004e 14D0     		beq	.L316
 4128 0050 1FE0     		b	.L311
 4129              	.L314:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 96


1240:.\main.c      ****     { //transitions
1241:.\main.c      ****         case ph_start:
1242:.\main.c      ****             phSensor_state = ph_init;
 4130              		.loc 1 1242 0
 4131 0052 134B     		ldr	r3, .L325
 4132 0054 0122     		mov	r2, #1
 4133 0056 1A70     		strb	r2, [r3]
1243:.\main.c      ****             break;
 4134              		.loc 1 1243 0
 4135 0058 1FE0     		b	.L303
 4136              	.L312:
1244:.\main.c      ****         
1245:.\main.c      ****         case ph_init:
1246:.\main.c      ****             phSensor_state = ph_wait;
 4137              		.loc 1 1246 0
 4138 005a 114B     		ldr	r3, .L325
 4139 005c 0322     		mov	r2, #3
 4140 005e 1A70     		strb	r2, [r3]
1247:.\main.c      ****             break;
 4141              		.loc 1 1247 0
 4142 0060 1BE0     		b	.L303
 4143              	.L315:
1248:.\main.c      ****         
1249:.\main.c      ****         case ph_execute:
1250:.\main.c      ****             if(PH_FLAG)
 4144              		.loc 1 1250 0
 4145 0062 104B     		ldr	r3, .L325+4
 4146 0064 1B78     		ldrb	r3, [r3]
 4147 0066 002B     		cmp	r3, #0
 4148 0068 03D0     		beq	.L318
1251:.\main.c      ****                 phSensor_state = ph_execute;
 4149              		.loc 1 1251 0
 4150 006a 0D4B     		ldr	r3, .L325
 4151 006c 0222     		mov	r2, #2
 4152 006e 1A70     		strb	r2, [r3]
1252:.\main.c      ****             else
1253:.\main.c      ****                 phSensor_state = ph_wait;
1254:.\main.c      ****             break;
 4153              		.loc 1 1254 0
 4154 0070 13E0     		b	.L303
 4155              	.L318:
1253:.\main.c      ****                 phSensor_state = ph_wait;
 4156              		.loc 1 1253 0
 4157 0072 0B4B     		ldr	r3, .L325
 4158 0074 0322     		mov	r2, #3
 4159 0076 1A70     		strb	r2, [r3]
 4160              		.loc 1 1254 0
 4161 0078 0FE0     		b	.L303
 4162              	.L316:
1255:.\main.c      ****         
1256:.\main.c      ****         case ph_wait:
1257:.\main.c      ****             if(PH_FLAG)
 4163              		.loc 1 1257 0
 4164 007a 0A4B     		ldr	r3, .L325+4
 4165 007c 1B78     		ldrb	r3, [r3]
 4166 007e 002B     		cmp	r3, #0
 4167 0080 03D0     		beq	.L320
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 97


1258:.\main.c      ****                 phSensor_state = ph_execute;
 4168              		.loc 1 1258 0
 4169 0082 074B     		ldr	r3, .L325
 4170 0084 0222     		mov	r2, #2
 4171 0086 1A70     		strb	r2, [r3]
1259:.\main.c      ****             else
1260:.\main.c      ****                 phSensor_state = ph_wait; 
1261:.\main.c      ****             break;
 4172              		.loc 1 1261 0
 4173 0088 07E0     		b	.L303
 4174              	.L320:
1260:.\main.c      ****                 phSensor_state = ph_wait; 
 4175              		.loc 1 1260 0
 4176 008a 054B     		ldr	r3, .L325
 4177 008c 0322     		mov	r2, #3
 4178 008e 1A70     		strb	r2, [r3]
 4179              		.loc 1 1261 0
 4180 0090 03E0     		b	.L303
 4181              	.L311:
1262:.\main.c      ****             
1263:.\main.c      ****         default:
1264:.\main.c      ****             phSensor_state = ph_start;
 4182              		.loc 1 1264 0
 4183 0092 034B     		ldr	r3, .L325
 4184 0094 0022     		mov	r2, #0
 4185 0096 1A70     		strb	r2, [r3]
1265:.\main.c      ****             break;
 4186              		.loc 1 1265 0
 4187 0098 C046     		mov	r8, r8
 4188              	.L303:
1266:.\main.c      ****     }    
1267:.\main.c      **** }
 4189              		.loc 1 1267 0
 4190 009a BD46     		mov	sp, r7
 4191              		@ sp needed
 4192 009c 80BD     		pop	{r7, pc}
 4193              	.L326:
 4194 009e C046     		.align	2
 4195              	.L325:
 4196 00a0 00000000 		.word	phSensor_state
 4197 00a4 00000000 		.word	PH_FLAG
 4198              		.cfi_endproc
 4199              	.LFE54:
 4200              		.size	phSensor, .-phSensor
 4201              		.section	.text.initialize,"ax",%progbits
 4202              		.align	2
 4203              		.global	initialize
 4204              		.code	16
 4205              		.thumb_func
 4206              		.type	initialize, %function
 4207              	initialize:
 4208              	.LFB55:
1268:.\main.c      **** 
1269:.\main.c      **** //Initialization function for the program
1270:.\main.c      **** void initialize()
1271:.\main.c      **** {
 4209              		.loc 1 1271 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 98


 4210              		.cfi_startproc
 4211 0000 80B5     		push	{r7, lr}
 4212              		.cfi_def_cfa_offset 8
 4213              		.cfi_offset 7, -8
 4214              		.cfi_offset 14, -4
 4215 0002 82B0     		sub	sp, sp, #8
 4216              		.cfi_def_cfa_offset 16
 4217 0004 00AF     		add	r7, sp, #0
 4218              		.cfi_def_cfa_register 7
1272:.\main.c      ****     //initialize the wiznet
1273:.\main.c      ****     WIZ_RST_Write(0);
 4219              		.loc 1 1273 0
 4220 0006 0020     		mov	r0, #0
 4221 0008 FFF7FEFF 		bl	WIZ_RST_Write
1274:.\main.c      ****     CyDelay(10);
 4222              		.loc 1 1274 0
 4223 000c 0A20     		mov	r0, #10
 4224 000e FFF7FEFF 		bl	CyDelay
1275:.\main.c      ****     WIZ_RST_Write(1);
 4225              		.loc 1 1275 0
 4226 0012 0120     		mov	r0, #1
 4227 0014 FFF7FEFF 		bl	WIZ_RST_Write
1276:.\main.c      ****     WIZ_SS_Write(1);
 4228              		.loc 1 1276 0
 4229 0018 0120     		mov	r0, #1
 4230 001a FFF7FEFF 		bl	WIZ_SS_Write
 4231              	.LBB2:
1277:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4232              		.loc 1 1277 0
 4233 001e FB1D     		add	r3, r7, #7
 4234 0020 0022     		mov	r2, #0
 4235 0022 1A70     		strb	r2, [r3]
 4236 0024 0DE0     		b	.L328
 4237              	.L331:
1278:.\main.c      ****     {
1279:.\main.c      ****         if(WIZ_RDY_Read())
 4238              		.loc 1 1279 0
 4239 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 4240 002a 031C     		mov	r3, r0
 4241 002c 002B     		cmp	r3, #0
 4242 002e 00D0     		beq	.L329
1280:.\main.c      ****         {
1281:.\main.c      ****             break;
 4243              		.loc 1 1281 0
 4244 0030 0BE0     		b	.L330
 4245              	.L329:
1282:.\main.c      ****         }
1283:.\main.c      ****         else
1284:.\main.c      ****         {
1285:.\main.c      ****             CyDelay(4);
 4246              		.loc 1 1285 0
 4247 0032 0420     		mov	r0, #4
 4248 0034 FFF7FEFF 		bl	CyDelay
1277:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4249              		.loc 1 1277 0
 4250 0038 FB1D     		add	r3, r7, #7
 4251 003a 1A78     		ldrb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 99


 4252 003c FB1D     		add	r3, r7, #7
 4253 003e 0132     		add	r2, r2, #1
 4254 0040 1A70     		strb	r2, [r3]
 4255              	.L328:
1277:.\main.c      ****     for(uint8 j=0; j<100; j++)
 4256              		.loc 1 1277 0 is_stmt 0 discriminator 1
 4257 0042 FB1D     		add	r3, r7, #7
 4258 0044 1B78     		ldrb	r3, [r3]
 4259 0046 632B     		cmp	r3, #99
 4260 0048 EDD9     		bls	.L331
 4261              	.L330:
 4262              	.LBE2:
1286:.\main.c      ****         }
1287:.\main.c      ****     }
1288:.\main.c      ****     
1289:.\main.c      ****     //Initialize state variables
1290:.\main.c      ****     baseAzimuth_state = BA_start;
 4263              		.loc 1 1290 0 is_stmt 1
 4264 004a 384B     		ldr	r3, .L332
 4265 004c 0022     		mov	r2, #0
 4266 004e 1A70     		strb	r2, [r3]
1291:.\main.c      ****     wristTilt_state = tilt_start;
 4267              		.loc 1 1291 0
 4268 0050 374B     		ldr	r3, .L332+4
 4269 0052 0022     		mov	r2, #0
 4270 0054 1A70     		strb	r2, [r3]
1292:.\main.c      ****     wristRotate_state = rotate_start;
 4271              		.loc 1 1292 0
 4272 0056 374B     		ldr	r3, .L332+8
 4273 0058 0022     		mov	r2, #0
 4274 005a 1A70     		strb	r2, [r3]
1293:.\main.c      ****     shoulder_state = shldr_start;
 4275              		.loc 1 1293 0
 4276 005c 364B     		ldr	r3, .L332+12
 4277 005e 0022     		mov	r2, #0
 4278 0060 1A70     		strb	r2, [r3]
1294:.\main.c      ****     elbow_state = elbw_start;
 4279              		.loc 1 1294 0
 4280 0062 364B     		ldr	r3, .L332+16
 4281 0064 0022     		mov	r2, #0
 4282 0066 1A70     		strb	r2, [r3]
1295:.\main.c      ****     effector_state = eff_start;
 4283              		.loc 1 1295 0
 4284 0068 354B     		ldr	r3, .L332+20
 4285 006a 0022     		mov	r2, #0
 4286 006c 1A70     		strb	r2, [r3]
1296:.\main.c      ****     
1297:.\main.c      **** //    for(int i = 0; i < FEEDBACK_ARRAY_SIZE; i++){
1298:.\main.c      **** //        feedback_array[i] = 0;   
1299:.\main.c      **** //    }
1300:.\main.c      ****     
1301:.\main.c      ****     //start all of our components
1302:.\main.c      ****     SPIM_1_Start();
 4287              		.loc 1 1302 0
 4288 006e FFF7FEFF 		bl	SPIM_1_Start
1303:.\main.c      ****     Clock_pwm_Start();
 4289              		.loc 1 1303 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 100


 4290 0072 FFF7FEFF 		bl	Clock_pwm_Start
1304:.\main.c      ****     Clock_counter_Start();
 4291              		.loc 1 1304 0
 4292 0076 FFF7FEFF 		bl	Clock_counter_Start
1305:.\main.c      ****     UART_1_Start();
 4293              		.loc 1 1305 0
 4294 007a FFF7FEFF 		bl	UART_1_Start
1306:.\main.c      ****     SHLDR_PWM_Start();
 4295              		.loc 1 1306 0
 4296 007e FFF7FEFF 		bl	SHLDR_PWM_Start
1307:.\main.c      ****     BA_PWM_Start();
 4297              		.loc 1 1307 0
 4298 0082 FFF7FEFF 		bl	BA_PWM_Start
1308:.\main.c      ****     ELBW_PWM_Start();
 4299              		.loc 1 1308 0
 4300 0086 FFF7FEFF 		bl	ELBW_PWM_Start
1309:.\main.c      ****     EFFECTOR_PWM_Start();
 4301              		.loc 1 1309 0
 4302 008a FFF7FEFF 		bl	EFFECTOR_PWM_Start
1310:.\main.c      ****     ADC_Start();
 4303              		.loc 1 1310 0
 4304 008e FFF7FEFF 		bl	ADC_Start
1311:.\main.c      ****     ADC_StartConvert();
 4305              		.loc 1 1311 0
 4306 0092 FFF7FEFF 		bl	ADC_StartConvert
1312:.\main.c      ****     
1313:.\main.c      ****     //uint8_t test_byte;
1314:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 4307              		.loc 1 1314 0
 4308 0096 2B4B     		ldr	r3, .L332+24
 4309 0098 0420     		mov	r0, #4
 4310 009a 0121     		mov	r1, #1
 4311 009c 1A1C     		mov	r2, r3
 4312 009e FFF7FEFF 		bl	wiznetInit
1315:.\main.c      ****     //SPI_1_SpiUartWriteTxData(test_byte);
1316:.\main.c      ****     
1317:.\main.c      ****     //Initialize the dynamixels
1318:.\main.c      ****     ServoSpeed(0xFE, 100);
 4313              		.loc 1 1318 0
 4314 00a2 FE20     		mov	r0, #254
 4315 00a4 6421     		mov	r1, #100
 4316 00a6 FFF7FEFF 		bl	ServoSpeed
1319:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 4317              		.loc 1 1319 0
 4318 00aa 274B     		ldr	r3, .L332+28
 4319 00ac FE20     		mov	r0, #254
 4320 00ae 191C     		mov	r1, r3
 4321 00b0 FFF7FEFF 		bl	SetServoTorque
1320:.\main.c      ****     
1321:.\main.c      ****     LED_Write(1);
 4322              		.loc 1 1321 0
 4323 00b4 0120     		mov	r0, #1
 4324 00b6 FFF7FEFF 		bl	LED_Write
1322:.\main.c      ****     //Initialize our motor drivers
1323:.\main.c      ****     ELBW_PWM_WriteCompare(1500); 
 4325              		.loc 1 1323 0
 4326 00ba 244B     		ldr	r3, .L332+32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 101


 4327 00bc 181C     		mov	r0, r3
 4328 00be FFF7FEFF 		bl	ELBW_PWM_WriteCompare
1324:.\main.c      ****     SHLDR_PWM_WriteCompare(1500);
 4329              		.loc 1 1324 0
 4330 00c2 224B     		ldr	r3, .L332+32
 4331 00c4 181C     		mov	r0, r3
 4332 00c6 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
1325:.\main.c      ****     CyDelay(3000);
 4333              		.loc 1 1325 0
 4334 00ca 214B     		ldr	r3, .L332+36
 4335 00cc 181C     		mov	r0, r3
 4336 00ce FFF7FEFF 		bl	CyDelay
1326:.\main.c      ****     LED_Write(0);
 4337              		.loc 1 1326 0
 4338 00d2 0020     		mov	r0, #0
 4339 00d4 FFF7FEFF 		bl	LED_Write
1327:.\main.c      ****     
1328:.\main.c      ****     /*-------------call the initial calibration funtion here------------*/
1329:.\main.c      ****     SHOULDER_UPPER_BOUND = CalibrationShoulder(1700);
 4340              		.loc 1 1329 0
 4341 00d8 1E4B     		ldr	r3, .L332+40
 4342 00da 181C     		mov	r0, r3
 4343 00dc FFF7FEFF 		bl	CalibrationShoulder
 4344 00e0 031C     		mov	r3, r0
 4345 00e2 1A1C     		mov	r2, r3
 4346 00e4 1C4B     		ldr	r3, .L332+44
 4347 00e6 1A60     		str	r2, [r3]
1330:.\main.c      ****     SHOULDER_LOWER_BOUND = CalibrationShoulder(1300);
 4348              		.loc 1 1330 0
 4349 00e8 1C4B     		ldr	r3, .L332+48
 4350 00ea 181C     		mov	r0, r3
 4351 00ec FFF7FEFF 		bl	CalibrationShoulder
 4352 00f0 031C     		mov	r3, r0
 4353 00f2 1A1C     		mov	r2, r3
 4354 00f4 1A4B     		ldr	r3, .L332+52
 4355 00f6 1A60     		str	r2, [r3]
1331:.\main.c      ****     ELBOW_UPPER_BOUND = CalibrationElbow(1700);
 4356              		.loc 1 1331 0
 4357 00f8 164B     		ldr	r3, .L332+40
 4358 00fa 181C     		mov	r0, r3
 4359 00fc FFF7FEFF 		bl	CalibrationElbow
 4360 0100 031C     		mov	r3, r0
 4361 0102 1A1C     		mov	r2, r3
 4362 0104 174B     		ldr	r3, .L332+56
 4363 0106 1A60     		str	r2, [r3]
1332:.\main.c      ****     ELBOW_LOWER_BOUND = CalibrationElbow(1300);
 4364              		.loc 1 1332 0
 4365 0108 144B     		ldr	r3, .L332+48
 4366 010a 181C     		mov	r0, r3
 4367 010c FFF7FEFF 		bl	CalibrationElbow
 4368 0110 031C     		mov	r3, r0
 4369 0112 1A1C     		mov	r2, r3
 4370 0114 144B     		ldr	r3, .L332+60
 4371 0116 1A60     		str	r2, [r3]
1333:.\main.c      ****     
1334:.\main.c      ****     //helps for generating random arrays
1335:.\main.c      ****     //srand((unsigned) time(&t));
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 102


1336:.\main.c      ****     
1337:.\main.c      ****     CyGlobalIntEnable;
 4372              		.loc 1 1337 0
 4373              	@ 1337 ".\main.c" 1
 4374 0118 62B6     		CPSIE   i
 4375              	@ 0 "" 2
1338:.\main.c      ****     isr_1_StartEx(timer_isr);
 4376              		.loc 1 1338 0
 4377              		.code	16
 4378 011a 144B     		ldr	r3, .L332+64
 4379 011c 181C     		mov	r0, r3
 4380 011e FFF7FEFF 		bl	isr_1_StartEx
1339:.\main.c      ****     Timer_1_Start();
 4381              		.loc 1 1339 0
 4382 0122 FFF7FEFF 		bl	Timer_1_Start
1340:.\main.c      ****     
1341:.\main.c      ****     //UART_TEST_Start();
1342:.\main.c      ****     
1343:.\main.c      **** }
 4383              		.loc 1 1343 0
 4384 0126 BD46     		mov	sp, r7
 4385 0128 02B0     		add	sp, sp, #8
 4386              		@ sp needed
 4387 012a 80BD     		pop	{r7, pc}
 4388              	.L333:
 4389              		.align	2
 4390              	.L332:
 4391 012c 00000000 		.word	baseAzimuth_state
 4392 0130 00000000 		.word	wristTilt_state
 4393 0134 00000000 		.word	wristRotate_state
 4394 0138 00000000 		.word	shoulder_state
 4395 013c 00000000 		.word	elbow_state
 4396 0140 00000000 		.word	effector_state
 4397 0144 87690000 		.word	27015
 4398 0148 FF030000 		.word	1023
 4399 014c DC050000 		.word	1500
 4400 0150 B80B0000 		.word	3000
 4401 0154 A4060000 		.word	1700
 4402 0158 00000000 		.word	SHOULDER_UPPER_BOUND
 4403 015c 14050000 		.word	1300
 4404 0160 00000000 		.word	SHOULDER_LOWER_BOUND
 4405 0164 00000000 		.word	ELBOW_UPPER_BOUND
 4406 0168 00000000 		.word	ELBOW_LOWER_BOUND
 4407 016c 00000000 		.word	timer_isr
 4408              		.cfi_endproc
 4409              	.LFE55:
 4410              		.size	initialize, .-initialize
 4411              		.section	.text.main,"ax",%progbits
 4412              		.align	2
 4413              		.global	main
 4414              		.code	16
 4415              		.thumb_func
 4416              		.type	main, %function
 4417              	main:
 4418              	.LFB56:
1344:.\main.c      **** //const char welcome_string[] = "Hello World\n\r";
1345:.\main.c      **** int main()
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 103


1346:.\main.c      **** {  
 4419              		.loc 1 1346 0
 4420              		.cfi_startproc
 4421 0000 90B5     		push	{r4, r7, lr}
 4422              		.cfi_def_cfa_offset 12
 4423              		.cfi_offset 4, -12
 4424              		.cfi_offset 7, -8
 4425              		.cfi_offset 14, -4
 4426 0002 B7B0     		sub	sp, sp, #220
 4427              		.cfi_def_cfa_offset 232
 4428 0004 00AF     		add	r7, sp, #0
 4429              		.cfi_def_cfa_register 7
1347:.\main.c      ****     //Define variables
1348:.\main.c      ****     //for testing
1349:.\main.c      **** //    time_t t; 
1350:.\main.c      **** //    char time_array[8];
1351:.\main.c      **** //    uint8 counter;
1352:.\main.c      **** //    int direction = 0;
1353:.\main.c      ****     
1354:.\main.c      ****     //wiznet = 0; //for testing -- see header move from here when establish ISR for wiznet
1355:.\main.c      ****     
1356:.\main.c      ****     uint8 BA_cspot;
1357:.\main.c      ****     uint16 BA_array[BA_ARR_SIZE];
1358:.\main.c      ****     uint8 shldr_cspot;
1359:.\main.c      ****     uint16 shldr_array[SHLDR_ARR_SIZE];
1360:.\main.c      ****     uint8 elbw_cspot;
1361:.\main.c      ****     uint16 elbw_array[ELBW_ARR_SIZE];
1362:.\main.c      ****     uint8 WT_cspot;
1363:.\main.c      ****     uint16 WT_array[WT_ARR_SIZE];
1364:.\main.c      ****     uint8 WR_cspot;
1365:.\main.c      ****     uint16 WR_array[WR_ARR_SIZE];
1366:.\main.c      ****     
1367:.\main.c      ****     //for testing
1368:.\main.c      **** //    int increasing = 1;
1369:.\main.c      **** //    int first_count;
1370:.\main.c      **** //    int second_count;
1371:.\main.c      **** //    int temp_code_time;
1372:.\main.c      **** //    int code_time = 0;
1373:.\main.c      ****     
1374:.\main.c      ****     
1375:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 4430              		.loc 1 1375 0
 4431 0006 3B1C     		mov	r3, r7
 4432 0008 D233     		add	r3, r3, #210
 4433 000a 0022     		mov	r2, #0
 4434 000c 1A70     		strb	r2, [r3]
1376:.\main.c      ****     int16 temp_val = 1500; 
 4435              		.loc 1 1376 0
 4436 000e 3B1C     		mov	r3, r7
 4437 0010 CA33     		add	r3, r3, #202
 4438 0012 624A     		ldr	r2, .L346
 4439 0014 1A80     		strh	r2, [r3]
1377:.\main.c      ****     
1378:.\main.c      ****     initialize();
 4440              		.loc 1 1378 0
 4441 0016 FFF7FEFF 		bl	initialize
 4442              	.L344:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 104


1379:.\main.c      **** //    uint8 i;
1380:.\main.c      **** //    for(i =0; i < strlen(welcome_string); i++)
1381:.\main.c      **** //    {
1382:.\main.c      **** //        UART_TEST_UartPutChar(welcome_string[i]);
1383:.\main.c      **** //    }
1384:.\main.c      **** 
1385:.\main.c      ****     for(;;)
1386:.\main.c      ****     {
1387:.\main.c      ****         //UART_TEST_UartPutChar(31);
1388:.\main.c      ****         //first_count = Timer_1_ReadCounter();
1389:.\main.c      ****         
1390:.\main.c      ****         if(stop_elb_dn_Read())
 4443              		.loc 1 1390 0
 4444 001a FFF7FEFF 		bl	stop_elb_dn_Read
 4445 001e 031C     		mov	r3, r0
 4446 0020 002B     		cmp	r3, #0
 4447 0022 03D0     		beq	.L335
1391:.\main.c      ****         {
1392:.\main.c      ****             LED_Write(1);
 4448              		.loc 1 1392 0
 4449 0024 0120     		mov	r0, #1
 4450 0026 FFF7FEFF 		bl	LED_Write
 4451 002a 02E0     		b	.L336
 4452              	.L335:
1393:.\main.c      ****         }
1394:.\main.c      ****         else
1395:.\main.c      ****         {
1396:.\main.c      ****             LED_Write(0);
 4453              		.loc 1 1396 0
 4454 002c 0020     		mov	r0, #0
 4455 002e FFF7FEFF 		bl	LED_Write
 4456              	.L336:
1397:.\main.c      ****         }
1398:.\main.c      ****         
1399:.\main.c      ****         if(WIZ_INT_Read()==0) //!WIZ_INT_Read()--put wiznet in as condition if use ISR
 4457              		.loc 1 1399 0
 4458 0032 FFF7FEFF 		bl	WIZ_INT_Read
 4459 0036 031C     		mov	r3, r0
 4460 0038 002B     		cmp	r3, #0
 4461 003a 20D1     		bne	.L337
1400:.\main.c      ****         {
1401:.\main.c      ****             wiznetClearInterrupts();
 4462              		.loc 1 1401 0
 4463 003c FFF7FEFF 		bl	wiznetClearInterrupts
1402:.\main.c      ****             fill_data_array();
 4464              		.loc 1 1402 0
 4465 0040 FFF7FEFF 		bl	fill_data_array
1403:.\main.c      ****             //TODO check addresses? -- set up error checking/reporting logic
1404:.\main.c      ****             BA_FLAG = 1;
 4466              		.loc 1 1404 0
 4467 0044 564B     		ldr	r3, .L346+4
 4468 0046 0122     		mov	r2, #1
 4469 0048 1A70     		strb	r2, [r3]
1405:.\main.c      ****             WR_FLAG = 1;
 4470              		.loc 1 1405 0
 4471 004a 564B     		ldr	r3, .L346+8
 4472 004c 0122     		mov	r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 105


 4473 004e 1A70     		strb	r2, [r3]
1406:.\main.c      ****             WT_FLAG = 1;
 4474              		.loc 1 1406 0
 4475 0050 554B     		ldr	r3, .L346+12
 4476 0052 0122     		mov	r2, #1
 4477 0054 1A70     		strb	r2, [r3]
1407:.\main.c      ****             SHOULDER_FLAG = 1;
 4478              		.loc 1 1407 0
 4479 0056 554B     		ldr	r3, .L346+16
 4480 0058 0122     		mov	r2, #1
 4481 005a 1A70     		strb	r2, [r3]
1408:.\main.c      ****             ELBOW_FLAG = 1;
 4482              		.loc 1 1408 0
 4483 005c 544B     		ldr	r3, .L346+20
 4484 005e 0122     		mov	r2, #1
 4485 0060 1A70     		strb	r2, [r3]
1409:.\main.c      ****             EFFECTOR_FLAG = 1;
 4486              		.loc 1 1409 0
 4487 0062 544B     		ldr	r3, .L346+24
 4488 0064 0122     		mov	r2, #1
 4489 0066 1A70     		strb	r2, [r3]
1410:.\main.c      ****             PH_FLAG = 1;
 4490              		.loc 1 1410 0
 4491 0068 534B     		ldr	r3, .L346+28
 4492 006a 0122     		mov	r2, #1
 4493 006c 1A70     		strb	r2, [r3]
1411:.\main.c      ****             fs_count = 0;
 4494              		.loc 1 1411 0
 4495 006e 3B1C     		mov	r3, r7
 4496 0070 D233     		add	r3, r3, #210
 4497 0072 0022     		mov	r2, #0
 4498 0074 1A70     		strb	r2, [r3]
1412:.\main.c      ****             send_packet(1);
 4499              		.loc 1 1412 0
 4500 0076 0120     		mov	r0, #1
 4501 0078 FFF7FEFF 		bl	send_packet
 4502 007c 06E0     		b	.L338
 4503              	.L337:
1413:.\main.c      ****             //wiznet = 0; //for testing
1414:.\main.c      ****         }
1415:.\main.c      ****         else
1416:.\main.c      ****         {
1417:.\main.c      ****             fs_count += 1;
 4504              		.loc 1 1417 0
 4505 007e 3B1C     		mov	r3, r7
 4506 0080 D233     		add	r3, r3, #210
 4507 0082 3A1C     		mov	r2, r7
 4508 0084 D232     		add	r2, r2, #210
 4509 0086 1278     		ldrb	r2, [r2]
 4510 0088 0132     		add	r2, r2, #1
 4511 008a 1A70     		strb	r2, [r3]
 4512              	.L338:
1418:.\main.c      ****         }
1419:.\main.c      ****         
1420:.\main.c      ****         if(fs_count >= 50)
 4513              		.loc 1 1420 0
 4514 008c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 106


 4515 008e D233     		add	r3, r3, #210
 4516 0090 1B78     		ldrb	r3, [r3]
 4517 0092 312B     		cmp	r3, #49
 4518 0094 2CD9     		bls	.L339
1421:.\main.c      ****         {
1422:.\main.c      ****             temp_val = 1500;
 4519              		.loc 1 1422 0
 4520 0096 3B1C     		mov	r3, r7
 4521 0098 CA33     		add	r3, r3, #202
 4522 009a 404A     		ldr	r2, .L346
 4523 009c 1A80     		strh	r2, [r3]
 4524              	.LBB3:
1423:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4525              		.loc 1 1423 0
 4526 009e 0023     		mov	r3, #0
 4527 00a0 CC20     		mov	r0, #204
 4528 00a2 C019     		add	r0, r0, r7
 4529 00a4 0360     		str	r3, [r0]
 4530 00a6 1DE0     		b	.L340
 4531              	.L341:
1424:.\main.c      ****             {
1425:.\main.c      ****                 data_array[i] = temp_val >> 8;
 4532              		.loc 1 1425 0 discriminator 2
 4533 00a8 3B1C     		mov	r3, r7
 4534 00aa CA33     		add	r3, r3, #202
 4535 00ac 0022     		mov	r2, #0
 4536 00ae 9B5E     		ldrsh	r3, [r3, r2]
 4537 00b0 1B12     		asr	r3, r3, #8
 4538 00b2 9BB2     		uxth	r3, r3
 4539 00b4 DAB2     		uxtb	r2, r3
 4540 00b6 4149     		ldr	r1, .L346+32
 4541 00b8 CC20     		mov	r0, #204
 4542 00ba C019     		add	r0, r0, r7
 4543 00bc 0368     		ldr	r3, [r0]
 4544 00be CB18     		add	r3, r1, r3
 4545 00c0 1A70     		strb	r2, [r3]
1426:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 4546              		.loc 1 1426 0 discriminator 2
 4547 00c2 CC22     		mov	r2, #204
 4548 00c4 D219     		add	r2, r2, r7
 4549 00c6 1368     		ldr	r3, [r2]
 4550 00c8 0133     		add	r3, r3, #1
 4551 00ca 3A1C     		mov	r2, r7
 4552 00cc CA32     		add	r2, r2, #202
 4553 00ce 1288     		ldrh	r2, [r2]
 4554 00d0 D1B2     		uxtb	r1, r2
 4555 00d2 3A4A     		ldr	r2, .L346+32
 4556 00d4 D154     		strb	r1, [r2, r3]
1423:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4557              		.loc 1 1423 0 discriminator 2
 4558 00d6 CC20     		mov	r0, #204
 4559 00d8 C019     		add	r0, r0, r7
 4560 00da 0368     		ldr	r3, [r0]
 4561 00dc 0233     		add	r3, r3, #2
 4562 00de CC22     		mov	r2, #204
 4563 00e0 D219     		add	r2, r2, r7
 4564 00e2 1360     		str	r3, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 107


 4565              	.L340:
1423:.\main.c      ****             for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
 4566              		.loc 1 1423 0 is_stmt 0 discriminator 1
 4567 00e4 CC20     		mov	r0, #204
 4568 00e6 C019     		add	r0, r0, r7
 4569 00e8 0368     		ldr	r3, [r0]
 4570 00ea 152B     		cmp	r3, #21
 4571 00ec DCDD     		ble	.L341
 4572              	.LBE3:
1427:.\main.c      ****             }
1428:.\main.c      ****         }
1429:.\main.c      ****         else
1430:.\main.c      ****         {
1431:.\main.c      ****         
1432:.\main.c      ****         //if(wiznet gives a complete packet)
1433:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
1434:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
1435:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
1436:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
1437:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
1438:.\main.c      ****             effector();
1439:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
1440:.\main.c      ****             send_packet(0); //send feedback onece every tick
1441:.\main.c      ****         }
1442:.\main.c      **** 
1443:.\main.c      **** //        else{dropped_packets++}
1444:.\main.c      **** //        second_count = Timer_1_ReadCounter();
1445:.\main.c      **** //        LED_Write(0);
1446:.\main.c      **** //        temp_code_time = second_count - first_count;
1447:.\main.c      **** //        if(temp_code_time > code_time)
1448:.\main.c      **** //        {
1449:.\main.c      **** //            code_time = temp_code_time;
1450:.\main.c      **** //            itoa(code_time, time_array);
1451:.\main.c      **** //            UART_TEST_UartPutString(time_array);
1452:.\main.c      **** //        }
1453:.\main.c      ****         
1454:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 4573              		.loc 1 1454 0 is_stmt 1
 4574 00ee 4AE0     		b	.L345
 4575              	.L339:
1433:.\main.c      ****             BA_cspot = baseAzimuth(BA_cspot, BA_array);
 4576              		.loc 1 1433 0
 4577 00f0 3C1C     		mov	r4, r7
 4578 00f2 D734     		add	r4, r4, #215
 4579 00f4 3B1C     		mov	r3, r7
 4580 00f6 D733     		add	r3, r3, #215
 4581 00f8 1A78     		ldrb	r2, [r3]
 4582 00fa 3B1C     		mov	r3, r7
 4583 00fc A033     		add	r3, r3, #160
 4584 00fe 101C     		mov	r0, r2
 4585 0100 191C     		mov	r1, r3
 4586 0102 FFF7FEFF 		bl	baseAzimuth
 4587 0106 031C     		mov	r3, r0
 4588 0108 2370     		strb	r3, [r4]
1434:.\main.c      ****             shldr_cspot = shoulder(shldr_cspot, shldr_array);
 4589              		.loc 1 1434 0
 4590 010a 3C1C     		mov	r4, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 108


 4591 010c D634     		add	r4, r4, #214
 4592 010e 3B1C     		mov	r3, r7
 4593 0110 D633     		add	r3, r3, #214
 4594 0112 1A78     		ldrb	r2, [r3]
 4595 0114 3B1C     		mov	r3, r7
 4596 0116 7833     		add	r3, r3, #120
 4597 0118 101C     		mov	r0, r2
 4598 011a 191C     		mov	r1, r3
 4599 011c FFF7FEFF 		bl	shoulder
 4600 0120 031C     		mov	r3, r0
 4601 0122 2370     		strb	r3, [r4]
1435:.\main.c      ****             elbw_cspot = elbow(elbw_cspot, elbw_array);
 4602              		.loc 1 1435 0
 4603 0124 3C1C     		mov	r4, r7
 4604 0126 D534     		add	r4, r4, #213
 4605 0128 3B1C     		mov	r3, r7
 4606 012a D533     		add	r3, r3, #213
 4607 012c 1A78     		ldrb	r2, [r3]
 4608 012e 3B1C     		mov	r3, r7
 4609 0130 5033     		add	r3, r3, #80
 4610 0132 101C     		mov	r0, r2
 4611 0134 191C     		mov	r1, r3
 4612 0136 FFF7FEFF 		bl	elbow
 4613 013a 031C     		mov	r3, r0
 4614 013c 2370     		strb	r3, [r4]
1436:.\main.c      ****             WT_cspot = wristTilt(WT_cspot, WT_array);
 4615              		.loc 1 1436 0
 4616 013e 3C1C     		mov	r4, r7
 4617 0140 D434     		add	r4, r4, #212
 4618 0142 3B1C     		mov	r3, r7
 4619 0144 D433     		add	r3, r3, #212
 4620 0146 1A78     		ldrb	r2, [r3]
 4621 0148 3B1C     		mov	r3, r7
 4622 014a 2833     		add	r3, r3, #40
 4623 014c 101C     		mov	r0, r2
 4624 014e 191C     		mov	r1, r3
 4625 0150 FFF7FEFF 		bl	wristTilt
 4626 0154 031C     		mov	r3, r0
 4627 0156 2370     		strb	r3, [r4]
1437:.\main.c      ****             WR_cspot = wristRotate(WR_cspot, WR_array);
 4628              		.loc 1 1437 0
 4629 0158 3C1C     		mov	r4, r7
 4630 015a D334     		add	r4, r4, #211
 4631 015c 3B1C     		mov	r3, r7
 4632 015e D333     		add	r3, r3, #211
 4633 0160 1A78     		ldrb	r2, [r3]
 4634 0162 3B1C     		mov	r3, r7
 4635 0164 101C     		mov	r0, r2
 4636 0166 191C     		mov	r1, r3
 4637 0168 FFF7FEFF 		bl	wristRotate
 4638 016c 031C     		mov	r3, r0
 4639 016e 2370     		strb	r3, [r4]
1438:.\main.c      ****             effector();
 4640              		.loc 1 1438 0
 4641 0170 FFF7FEFF 		bl	effector
1439:.\main.c      ****             feedback_array[1] = (feedback_array[1] + 1);
 4642              		.loc 1 1439 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 109


 4643 0174 124B     		ldr	r3, .L346+36
 4644 0176 5B78     		ldrb	r3, [r3, #1]
 4645 0178 0133     		add	r3, r3, #1
 4646 017a DAB2     		uxtb	r2, r3
 4647 017c 104B     		ldr	r3, .L346+36
 4648 017e 5A70     		strb	r2, [r3, #1]
1440:.\main.c      ****             send_packet(0); //send feedback onece every tick
 4649              		.loc 1 1440 0
 4650 0180 0020     		mov	r0, #0
 4651 0182 FFF7FEFF 		bl	send_packet
 4652              	.L345:
 4653              		.loc 1 1454 0
 4654 0186 C046     		mov	r8, r8
 4655              	.L343:
 4656              		.loc 1 1454 0 is_stmt 0 discriminator 1
 4657 0188 0E4B     		ldr	r3, .L346+40
 4658 018a 1B78     		ldrb	r3, [r3]
 4659 018c DBB2     		uxtb	r3, r3
 4660 018e 002B     		cmp	r3, #0
 4661 0190 FAD0     		beq	.L343
1455:.\main.c      ****         timerFlag = 0;
 4662              		.loc 1 1455 0 is_stmt 1
 4663 0192 0C4B     		ldr	r3, .L346+40
 4664 0194 0022     		mov	r2, #0
 4665 0196 1A70     		strb	r2, [r3]
1456:.\main.c      ****     
1457:.\main.c      ****         
1458:.\main.c      **** /*``````````````````````````````````````````````````````````````````````````*
1459:.\main.c      ****  * From here to the end of the main function is purely for testing purposes *
1460:.\main.c      ****  *``````````````````````````````````````````````````````````````````````````*/
1461:.\main.c      **** //        counter++;
1462:.\main.c      **** //        
1463:.\main.c      **** //        if(counter == 50)
1464:.\main.c      **** //        {
1465:.\main.c      **** //        
1466:.\main.c      **** //            if(increasing)
1467:.\main.c      **** //            {
1468:.\main.c      **** //                temp_val += 100;
1469:.\main.c      **** //                if(temp_val == 1000)
1470:.\main.c      **** //                {
1471:.\main.c      **** //                    increasing = 0;
1472:.\main.c      **** //                }
1473:.\main.c      **** //            }
1474:.\main.c      **** //            else
1475:.\main.c      **** //            {
1476:.\main.c      **** //                temp_val -= 100;
1477:.\main.c      **** //                if(temp_val == -1000)
1478:.\main.c      **** //                {
1479:.\main.c      **** //                    increasing = 1;   
1480:.\main.c      **** //                }
1481:.\main.c      **** //            }
1482:.\main.c      **** //            
1483:.\main.c      **** //            //uint16 feedback1 = ADC_GetResult16(2);
1484:.\main.c      **** //            //int16 forward = 1000;
1485:.\main.c      **** //            //int16 backward = -1000;
1486:.\main.c      **** //            for(int i = 0; i < TEST_ARRAY_SIZE; (i+=2))
1487:.\main.c      **** //            {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 110


1488:.\main.c      **** //                //int16 random_number = rand()%2001 - 1000;
1489:.\main.c      **** //                //test_array[i] = random_number >> 8;
1490:.\main.c      **** //                //test_array[i+1] = random_number & 0x00FF;
1491:.\main.c      **** //                test_array[i] = temp_val >> 8;
1492:.\main.c      **** //                test_array[i+1] = temp_val & 0x00FF;
1493:.\main.c      **** //            }
1494:.\main.c      **** ////            counter = 0;
1495:.\main.c      **** //            wiznet = 1;
1496:.\main.c      ****     } //<<<<<<----------DONT DELETE THIS BRACE!!!!!!!!!!!! it goes to for loop :)
 4666              		.loc 1 1496 0
 4667 0198 3FE7     		b	.L344
 4668              	.L347:
 4669 019a C046     		.align	2
 4670              	.L346:
 4671 019c DC050000 		.word	1500
 4672 01a0 00000000 		.word	BA_FLAG
 4673 01a4 00000000 		.word	WR_FLAG
 4674 01a8 00000000 		.word	WT_FLAG
 4675 01ac 00000000 		.word	SHOULDER_FLAG
 4676 01b0 00000000 		.word	ELBOW_FLAG
 4677 01b4 00000000 		.word	EFFECTOR_FLAG
 4678 01b8 00000000 		.word	PH_FLAG
 4679 01bc 00000000 		.word	data_array
 4680 01c0 00000000 		.word	feedback_array
 4681 01c4 00000000 		.word	timerFlag
 4682              		.cfi_endproc
 4683              	.LFE56:
 4684              		.size	main, .-main
 4685              		.text
 4686              	.Letext0:
 4687              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4688              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 4689              		.file 4 ".\\Generated_Source\\PSoC4/cytypes.h"
 4690              		.file 5 ".\\main.h"
 4691              		.section	.debug_info,"",%progbits
 4692              	.Ldebug_info0:
 4693 0000 C40B0000 		.4byte	0xbc4
 4694 0004 0400     		.2byte	0x4
 4695 0006 00000000 		.4byte	.Ldebug_abbrev0
 4696 000a 04       		.byte	0x4
 4697 000b 01       		.uleb128 0x1
 4698 000c EE050000 		.4byte	.LASF159
 4699 0010 01       		.byte	0x1
 4700 0011 B3070000 		.4byte	.LASF160
 4701 0015 FA060000 		.4byte	.LASF161
 4702 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4703 001d 00000000 		.4byte	0
 4704 0021 00000000 		.4byte	.Ldebug_line0
 4705 0025 02       		.uleb128 0x2
 4706 0026 01       		.byte	0x1
 4707 0027 06       		.byte	0x6
 4708 0028 91060000 		.4byte	.LASF0
 4709 002c 03       		.uleb128 0x3
 4710 002d CE040000 		.4byte	.LASF9
 4711 0031 02       		.byte	0x2
 4712 0032 1C       		.byte	0x1c
 4713 0033 37000000 		.4byte	0x37
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 111


 4714 0037 02       		.uleb128 0x2
 4715 0038 01       		.byte	0x1
 4716 0039 08       		.byte	0x8
 4717 003a 7B050000 		.4byte	.LASF1
 4718 003e 02       		.uleb128 0x2
 4719 003f 02       		.byte	0x2
 4720 0040 05       		.byte	0x5
 4721 0041 4D040000 		.4byte	.LASF2
 4722 0045 02       		.uleb128 0x2
 4723 0046 02       		.byte	0x2
 4724 0047 07       		.byte	0x7
 4725 0048 BF060000 		.4byte	.LASF3
 4726 004c 02       		.uleb128 0x2
 4727 004d 04       		.byte	0x4
 4728 004e 05       		.byte	0x5
 4729 004f 72040000 		.4byte	.LASF4
 4730 0053 02       		.uleb128 0x2
 4731 0054 04       		.byte	0x4
 4732 0055 07       		.byte	0x7
 4733 0056 17050000 		.4byte	.LASF5
 4734 005a 02       		.uleb128 0x2
 4735 005b 08       		.byte	0x8
 4736 005c 05       		.byte	0x5
 4737 005d D5020000 		.4byte	.LASF6
 4738 0061 02       		.uleb128 0x2
 4739 0062 08       		.byte	0x8
 4740 0063 07       		.byte	0x7
 4741 0064 78010000 		.4byte	.LASF7
 4742 0068 04       		.uleb128 0x4
 4743 0069 04       		.byte	0x4
 4744 006a 05       		.byte	0x5
 4745 006b 696E7400 		.ascii	"int\000"
 4746 006f 02       		.uleb128 0x2
 4747 0070 04       		.byte	0x4
 4748 0071 07       		.byte	0x7
 4749 0072 80000000 		.4byte	.LASF8
 4750 0076 03       		.uleb128 0x3
 4751 0077 AB020000 		.4byte	.LASF10
 4752 007b 03       		.byte	0x3
 4753 007c 2A       		.byte	0x2a
 4754 007d 2C000000 		.4byte	0x2c
 4755 0081 03       		.uleb128 0x3
 4756 0082 5E070000 		.4byte	.LASF11
 4757 0086 04       		.byte	0x4
 4758 0087 A1       		.byte	0xa1
 4759 0088 37000000 		.4byte	0x37
 4760 008c 03       		.uleb128 0x3
 4761 008d 80020000 		.4byte	.LASF12
 4762 0091 04       		.byte	0x4
 4763 0092 A2       		.byte	0xa2
 4764 0093 45000000 		.4byte	0x45
 4765 0097 03       		.uleb128 0x3
 4766 0098 78030000 		.4byte	.LASF13
 4767 009c 04       		.byte	0x4
 4768 009d A3       		.byte	0xa3
 4769 009e 53000000 		.4byte	0x53
 4770 00a2 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 112


 4771 00a3 8E020000 		.4byte	.LASF14
 4772 00a7 04       		.byte	0x4
 4773 00a8 A4       		.byte	0xa4
 4774 00a9 25000000 		.4byte	0x25
 4775 00ad 03       		.uleb128 0x3
 4776 00ae A0000000 		.4byte	.LASF15
 4777 00b2 04       		.byte	0x4
 4778 00b3 A5       		.byte	0xa5
 4779 00b4 3E000000 		.4byte	0x3e
 4780 00b8 02       		.uleb128 0x2
 4781 00b9 04       		.byte	0x4
 4782 00ba 04       		.byte	0x4
 4783 00bb 52010000 		.4byte	.LASF16
 4784 00bf 02       		.uleb128 0x2
 4785 00c0 08       		.byte	0x8
 4786 00c1 04       		.byte	0x4
 4787 00c2 64070000 		.4byte	.LASF17
 4788 00c6 02       		.uleb128 0x2
 4789 00c7 01       		.byte	0x1
 4790 00c8 08       		.byte	0x8
 4791 00c9 7B020000 		.4byte	.LASF18
 4792 00cd 05       		.uleb128 0x5
 4793 00ce 81000000 		.4byte	0x81
 4794 00d2 02       		.uleb128 0x2
 4795 00d3 04       		.byte	0x4
 4796 00d4 07       		.byte	0x7
 4797 00d5 0E050000 		.4byte	.LASF19
 4798 00d9 06       		.uleb128 0x6
 4799 00da B6040000 		.4byte	.LASF24
 4800 00de 01       		.byte	0x1
 4801 00df 01       		.byte	0x1
 4802 00e0 AA01     		.2byte	0x1aa
 4803 00e2 FF000000 		.4byte	0xff
 4804 00e6 07       		.uleb128 0x7
 4805 00e7 1A010000 		.4byte	.LASF20
 4806 00eb 00       		.sleb128 0
 4807 00ec 07       		.uleb128 0x7
 4808 00ed 0C000000 		.4byte	.LASF21
 4809 00f1 01       		.sleb128 1
 4810 00f2 07       		.uleb128 0x7
 4811 00f3 7B040000 		.4byte	.LASF22
 4812 00f7 02       		.sleb128 2
 4813 00f8 07       		.uleb128 0x7
 4814 00f9 4B070000 		.4byte	.LASF23
 4815 00fd 03       		.sleb128 3
 4816 00fe 00       		.byte	0
 4817 00ff 06       		.uleb128 0x6
 4818 0100 14030000 		.4byte	.LASF25
 4819 0104 01       		.byte	0x1
 4820 0105 01       		.byte	0x1
 4821 0106 1A02     		.2byte	0x21a
 4822 0108 25010000 		.4byte	0x125
 4823 010c 07       		.uleb128 0x7
 4824 010d F8000000 		.4byte	.LASF26
 4825 0111 00       		.sleb128 0
 4826 0112 07       		.uleb128 0x7
 4827 0113 E2050000 		.4byte	.LASF27
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 113


 4828 0117 01       		.sleb128 1
 4829 0118 07       		.uleb128 0x7
 4830 0119 35040000 		.4byte	.LASF28
 4831 011d 02       		.sleb128 2
 4832 011e 07       		.uleb128 0x7
 4833 011f 43050000 		.4byte	.LASF29
 4834 0123 03       		.sleb128 3
 4835 0124 00       		.byte	0
 4836 0125 06       		.uleb128 0x6
 4837 0126 61000000 		.4byte	.LASF30
 4838 012a 01       		.byte	0x1
 4839 012b 01       		.byte	0x1
 4840 012c 8D02     		.2byte	0x28d
 4841 012e 4B010000 		.4byte	0x14b
 4842 0132 07       		.uleb128 0x7
 4843 0133 B8030000 		.4byte	.LASF31
 4844 0137 00       		.sleb128 0
 4845 0138 07       		.uleb128 0x7
 4846 0139 BC070000 		.4byte	.LASF32
 4847 013d 01       		.sleb128 1
 4848 013e 07       		.uleb128 0x7
 4849 013f 29050000 		.4byte	.LASF33
 4850 0143 02       		.sleb128 2
 4851 0144 07       		.uleb128 0x7
 4852 0145 D2060000 		.4byte	.LASF34
 4853 0149 03       		.sleb128 3
 4854 014a 00       		.byte	0
 4855 014b 06       		.uleb128 0x6
 4856 014c EB020000 		.4byte	.LASF35
 4857 0150 01       		.byte	0x1
 4858 0151 01       		.byte	0x1
 4859 0152 4A03     		.2byte	0x34a
 4860 0154 71010000 		.4byte	0x171
 4861 0158 07       		.uleb128 0x7
 4862 0159 64050000 		.4byte	.LASF36
 4863 015d 00       		.sleb128 0
 4864 015e 07       		.uleb128 0x7
 4865 015f BB020000 		.4byte	.LASF37
 4866 0163 01       		.sleb128 1
 4867 0164 07       		.uleb128 0x7
 4868 0165 BA050000 		.4byte	.LASF38
 4869 0169 02       		.sleb128 2
 4870 016a 07       		.uleb128 0x7
 4871 016b 45020000 		.4byte	.LASF39
 4872 016f 03       		.sleb128 3
 4873 0170 00       		.byte	0
 4874 0171 06       		.uleb128 0x6
 4875 0172 8D000000 		.4byte	.LASF40
 4876 0176 01       		.byte	0x1
 4877 0177 01       		.byte	0x1
 4878 0178 0704     		.2byte	0x407
 4879 017a 97010000 		.4byte	0x197
 4880 017e 07       		.uleb128 0x7
 4881 017f C2000000 		.4byte	.LASF41
 4882 0183 00       		.sleb128 0
 4883 0184 07       		.uleb128 0x7
 4884 0185 58010000 		.4byte	.LASF42
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 114


 4885 0189 01       		.sleb128 1
 4886 018a 07       		.uleb128 0x7
 4887 018b 56000000 		.4byte	.LASF43
 4888 018f 02       		.sleb128 2
 4889 0190 07       		.uleb128 0x7
 4890 0191 AE040000 		.4byte	.LASF44
 4891 0195 03       		.sleb128 3
 4892 0196 00       		.byte	0
 4893 0197 06       		.uleb128 0x6
 4894 0198 53030000 		.4byte	.LASF45
 4895 019c 01       		.byte	0x1
 4896 019d 01       		.byte	0x1
 4897 019e 7304     		.2byte	0x473
 4898 01a0 BD010000 		.4byte	0x1bd
 4899 01a4 07       		.uleb128 0x7
 4900 01a5 04020000 		.4byte	.LASF46
 4901 01a9 00       		.sleb128 0
 4902 01aa 07       		.uleb128 0x7
 4903 01ab A5050000 		.4byte	.LASF47
 4904 01af 01       		.sleb128 1
 4905 01b0 07       		.uleb128 0x7
 4906 01b1 B4010000 		.4byte	.LASF48
 4907 01b5 02       		.sleb128 2
 4908 01b6 07       		.uleb128 0x7
 4909 01b7 F0040000 		.4byte	.LASF49
 4910 01bb 03       		.sleb128 3
 4911 01bc 00       		.byte	0
 4912 01bd 06       		.uleb128 0x6
 4913 01be 50020000 		.4byte	.LASF50
 4914 01c2 01       		.byte	0x1
 4915 01c3 01       		.byte	0x1
 4916 01c4 BD04     		.2byte	0x4bd
 4917 01c6 E3010000 		.4byte	0x1e3
 4918 01ca 07       		.uleb128 0x7
 4919 01cb 4A030000 		.4byte	.LASF51
 4920 01cf 00       		.sleb128 0
 4921 01d0 07       		.uleb128 0x7
 4922 01d1 76070000 		.4byte	.LASF52
 4923 01d5 01       		.sleb128 1
 4924 01d6 07       		.uleb128 0x7
 4925 01d7 B7000000 		.4byte	.LASF53
 4926 01db 02       		.sleb128 2
 4927 01dc 07       		.uleb128 0x7
 4928 01dd DA050000 		.4byte	.LASF54
 4929 01e1 03       		.sleb128 3
 4930 01e2 00       		.byte	0
 4931 01e3 08       		.uleb128 0x8
 4932 01e4 88040000 		.4byte	.LASF88
 4933 01e8 01       		.byte	0x1
 4934 01e9 0A       		.byte	0xa
 4935 01ea 00000000 		.4byte	.LFB34
 4936 01ee 28000000 		.4byte	.LFE34-.LFB34
 4937 01f2 01       		.uleb128 0x1
 4938 01f3 9C       		.byte	0x9c
 4939 01f4 07020000 		.4byte	0x207
 4940 01f8 09       		.uleb128 0x9
 4941 01f9 86070000 		.4byte	.LASF55
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 115


 4942 01fd 01       		.byte	0x1
 4943 01fe 0C       		.byte	0xc
 4944 01ff 97000000 		.4byte	0x97
 4945 0203 02       		.uleb128 0x2
 4946 0204 91       		.byte	0x91
 4947 0205 74       		.sleb128 -12
 4948 0206 00       		.byte	0
 4949 0207 0A       		.uleb128 0xa
 4950 0208 A6000000 		.4byte	.LASF61
 4951 020c 01       		.byte	0x1
 4952 020d 2F       		.byte	0x2f
 4953 020e 8C000000 		.4byte	0x8c
 4954 0212 00000000 		.4byte	.LFB35
 4955 0216 90010000 		.4byte	.LFE35-.LFB35
 4956 021a 01       		.uleb128 0x1
 4957 021b 9C       		.byte	0x9c
 4958 021c 81020000 		.4byte	0x281
 4959 0220 0B       		.uleb128 0xb
 4960 0221 F9040000 		.4byte	.LASF63
 4961 0225 01       		.byte	0x1
 4962 0226 2F       		.byte	0x2f
 4963 0227 8C000000 		.4byte	0x8c
 4964 022b 02       		.uleb128 0x2
 4965 022c 91       		.byte	0x91
 4966 022d 66       		.sleb128 -26
 4967 022e 09       		.uleb128 0x9
 4968 022f A4020000 		.4byte	.LASF56
 4969 0233 01       		.byte	0x1
 4970 0234 31       		.byte	0x31
 4971 0235 81000000 		.4byte	0x81
 4972 0239 02       		.uleb128 0x2
 4973 023a 91       		.byte	0x91
 4974 023b 71       		.sleb128 -15
 4975 023c 0C       		.uleb128 0xc
 4976 023d 6900     		.ascii	"i\000"
 4977 023f 01       		.byte	0x1
 4978 0240 32       		.byte	0x32
 4979 0241 81000000 		.4byte	0x81
 4980 0245 02       		.uleb128 0x2
 4981 0246 91       		.byte	0x91
 4982 0247 77       		.sleb128 -9
 4983 0248 09       		.uleb128 0x9
 4984 0249 72030000 		.4byte	.LASF57
 4985 024d 01       		.byte	0x1
 4986 024e 33       		.byte	0x33
 4987 024f 8C000000 		.4byte	0x8c
 4988 0253 02       		.uleb128 0x2
 4989 0254 91       		.byte	0x91
 4990 0255 74       		.sleb128 -12
 4991 0256 09       		.uleb128 0x9
 4992 0257 B7060000 		.4byte	.LASF58
 4993 025b 01       		.byte	0x1
 4994 025c 34       		.byte	0x34
 4995 025d 8C000000 		.4byte	0x8c
 4996 0261 02       		.uleb128 0x2
 4997 0262 91       		.byte	0x91
 4998 0263 72       		.sleb128 -14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 116


 4999 0264 09       		.uleb128 0x9
 5000 0265 09040000 		.4byte	.LASF59
 5001 0269 01       		.byte	0x1
 5002 026a 35       		.byte	0x35
 5003 026b 97000000 		.4byte	0x97
 5004 026f 02       		.uleb128 0x2
 5005 0270 91       		.byte	0x91
 5006 0271 6C       		.sleb128 -20
 5007 0272 09       		.uleb128 0x9
 5008 0273 7D060000 		.4byte	.LASF60
 5009 0277 01       		.byte	0x1
 5010 0278 36       		.byte	0x36
 5011 0279 AD000000 		.4byte	0xad
 5012 027d 02       		.uleb128 0x2
 5013 027e 91       		.byte	0x91
 5014 027f 6A       		.sleb128 -22
 5015 0280 00       		.byte	0
 5016 0281 0A       		.uleb128 0xa
 5017 0282 23020000 		.4byte	.LASF62
 5018 0286 01       		.byte	0x1
 5019 0287 71       		.byte	0x71
 5020 0288 8C000000 		.4byte	0x8c
 5021 028c 00000000 		.4byte	.LFB36
 5022 0290 90010000 		.4byte	.LFE36-.LFB36
 5023 0294 01       		.uleb128 0x1
 5024 0295 9C       		.byte	0x9c
 5025 0296 FB020000 		.4byte	0x2fb
 5026 029a 0B       		.uleb128 0xb
 5027 029b F9040000 		.4byte	.LASF63
 5028 029f 01       		.byte	0x1
 5029 02a0 71       		.byte	0x71
 5030 02a1 8C000000 		.4byte	0x8c
 5031 02a5 02       		.uleb128 0x2
 5032 02a6 91       		.byte	0x91
 5033 02a7 66       		.sleb128 -26
 5034 02a8 09       		.uleb128 0x9
 5035 02a9 A4020000 		.4byte	.LASF56
 5036 02ad 01       		.byte	0x1
 5037 02ae 73       		.byte	0x73
 5038 02af 81000000 		.4byte	0x81
 5039 02b3 02       		.uleb128 0x2
 5040 02b4 91       		.byte	0x91
 5041 02b5 71       		.sleb128 -15
 5042 02b6 0C       		.uleb128 0xc
 5043 02b7 6900     		.ascii	"i\000"
 5044 02b9 01       		.byte	0x1
 5045 02ba 74       		.byte	0x74
 5046 02bb 81000000 		.4byte	0x81
 5047 02bf 02       		.uleb128 0x2
 5048 02c0 91       		.byte	0x91
 5049 02c1 77       		.sleb128 -9
 5050 02c2 09       		.uleb128 0x9
 5051 02c3 72030000 		.4byte	.LASF57
 5052 02c7 01       		.byte	0x1
 5053 02c8 75       		.byte	0x75
 5054 02c9 8C000000 		.4byte	0x8c
 5055 02cd 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 117


 5056 02ce 91       		.byte	0x91
 5057 02cf 74       		.sleb128 -12
 5058 02d0 09       		.uleb128 0x9
 5059 02d1 B7060000 		.4byte	.LASF58
 5060 02d5 01       		.byte	0x1
 5061 02d6 76       		.byte	0x76
 5062 02d7 8C000000 		.4byte	0x8c
 5063 02db 02       		.uleb128 0x2
 5064 02dc 91       		.byte	0x91
 5065 02dd 72       		.sleb128 -14
 5066 02de 09       		.uleb128 0x9
 5067 02df 09040000 		.4byte	.LASF59
 5068 02e3 01       		.byte	0x1
 5069 02e4 77       		.byte	0x77
 5070 02e5 97000000 		.4byte	0x97
 5071 02e9 02       		.uleb128 0x2
 5072 02ea 91       		.byte	0x91
 5073 02eb 6C       		.sleb128 -20
 5074 02ec 09       		.uleb128 0x9
 5075 02ed 7D060000 		.4byte	.LASF60
 5076 02f1 01       		.byte	0x1
 5077 02f2 78       		.byte	0x78
 5078 02f3 AD000000 		.4byte	0xad
 5079 02f7 02       		.uleb128 0x2
 5080 02f8 91       		.byte	0x91
 5081 02f9 6A       		.sleb128 -22
 5082 02fa 00       		.byte	0
 5083 02fb 0A       		.uleb128 0xa
 5084 02fc B7060000 		.4byte	.LASF58
 5085 0300 01       		.byte	0x1
 5086 0301 B2       		.byte	0xb2
 5087 0302 8C000000 		.4byte	0x8c
 5088 0306 00000000 		.4byte	.LFB37
 5089 030a 78000000 		.4byte	.LFE37-.LFB37
 5090 030e 01       		.uleb128 0x1
 5091 030f 9C       		.byte	0x9c
 5092 0310 59030000 		.4byte	0x359
 5093 0314 0B       		.uleb128 0xb
 5094 0315 69040000 		.4byte	.LASF64
 5095 0319 01       		.byte	0x1
 5096 031a B2       		.byte	0xb2
 5097 031b 59030000 		.4byte	0x359
 5098 031f 02       		.uleb128 0x2
 5099 0320 91       		.byte	0x91
 5100 0321 64       		.sleb128 -28
 5101 0322 0B       		.uleb128 0xb
 5102 0323 16000000 		.4byte	.LASF65
 5103 0327 01       		.byte	0x1
 5104 0328 B2       		.byte	0xb2
 5105 0329 81000000 		.4byte	0x81
 5106 032d 02       		.uleb128 0x2
 5107 032e 91       		.byte	0x91
 5108 032f 63       		.sleb128 -29
 5109 0330 0C       		.uleb128 0xc
 5110 0331 6900     		.ascii	"i\000"
 5111 0333 01       		.byte	0x1
 5112 0334 B4       		.byte	0xb4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 118


 5113 0335 81000000 		.4byte	0x81
 5114 0339 02       		.uleb128 0x2
 5115 033a 91       		.byte	0x91
 5116 033b 77       		.sleb128 -9
 5117 033c 0C       		.uleb128 0xc
 5118 033d 73756D00 		.ascii	"sum\000"
 5119 0341 01       		.byte	0x1
 5120 0342 B5       		.byte	0xb5
 5121 0343 97000000 		.4byte	0x97
 5122 0347 02       		.uleb128 0x2
 5123 0348 91       		.byte	0x91
 5124 0349 70       		.sleb128 -16
 5125 034a 0C       		.uleb128 0xc
 5126 034b 61766700 		.ascii	"avg\000"
 5127 034f 01       		.byte	0x1
 5128 0350 B6       		.byte	0xb6
 5129 0351 8C000000 		.4byte	0x8c
 5130 0355 02       		.uleb128 0x2
 5131 0356 91       		.byte	0x91
 5132 0357 6E       		.sleb128 -18
 5133 0358 00       		.byte	0
 5134 0359 0D       		.uleb128 0xd
 5135 035a 04       		.byte	0x4
 5136 035b 8C000000 		.4byte	0x8c
 5137 035f 0E       		.uleb128 0xe
 5138 0360 DA000000 		.4byte	.LASF66
 5139 0364 01       		.byte	0x1
 5140 0365 C2       		.byte	0xc2
 5141 0366 81000000 		.4byte	0x81
 5142 036a 00000000 		.4byte	.LFB38
 5143 036e 3E000000 		.4byte	.LFE38-.LFB38
 5144 0372 01       		.uleb128 0x1
 5145 0373 9C       		.byte	0x9c
 5146 0374 95030000 		.4byte	0x395
 5147 0378 0B       		.uleb128 0xb
 5148 0379 FB020000 		.4byte	.LASF67
 5149 037d 01       		.byte	0x1
 5150 037e C2       		.byte	0xc2
 5151 037f 81000000 		.4byte	0x81
 5152 0383 02       		.uleb128 0x2
 5153 0384 91       		.byte	0x91
 5154 0385 77       		.sleb128 -9
 5155 0386 0B       		.uleb128 0xb
 5156 0387 40020000 		.4byte	.LASF68
 5157 038b 01       		.byte	0x1
 5158 038c C2       		.byte	0xc2
 5159 038d 81000000 		.4byte	0x81
 5160 0391 02       		.uleb128 0x2
 5161 0392 91       		.byte	0x91
 5162 0393 76       		.sleb128 -10
 5163 0394 00       		.byte	0
 5164 0395 0A       		.uleb128 0xa
 5165 0396 D8040000 		.4byte	.LASF69
 5166 039a 01       		.byte	0x1
 5167 039b CF       		.byte	0xcf
 5168 039c 81000000 		.4byte	0x81
 5169 03a0 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 119


 5170 03a4 0C010000 		.4byte	.LFE39-.LFB39
 5171 03a8 01       		.uleb128 0x1
 5172 03a9 9C       		.byte	0x9c
 5173 03aa F5030000 		.4byte	0x3f5
 5174 03ae 0B       		.uleb128 0xb
 5175 03af D3030000 		.4byte	.LASF70
 5176 03b3 01       		.byte	0x1
 5177 03b4 CF       		.byte	0xcf
 5178 03b5 59030000 		.4byte	0x359
 5179 03b9 02       		.uleb128 0x2
 5180 03ba 91       		.byte	0x91
 5181 03bb 6C       		.sleb128 -20
 5182 03bc 0B       		.uleb128 0xb
 5183 03bd B3020000 		.4byte	.LASF71
 5184 03c1 01       		.byte	0x1
 5185 03c2 CF       		.byte	0xcf
 5186 03c3 81000000 		.4byte	0x81
 5187 03c7 02       		.uleb128 0x2
 5188 03c8 91       		.byte	0x91
 5189 03c9 6B       		.sleb128 -21
 5190 03ca 0B       		.uleb128 0xb
 5191 03cb 25010000 		.4byte	.LASF72
 5192 03cf 01       		.byte	0x1
 5193 03d0 CF       		.byte	0xcf
 5194 03d1 81000000 		.4byte	0x81
 5195 03d5 02       		.uleb128 0x2
 5196 03d6 91       		.byte	0x91
 5197 03d7 6A       		.sleb128 -22
 5198 03d8 0B       		.uleb128 0xb
 5199 03d9 02040000 		.4byte	.LASF73
 5200 03dd 01       		.byte	0x1
 5201 03de CF       		.byte	0xcf
 5202 03df 68000000 		.4byte	0x68
 5203 03e3 02       		.uleb128 0x2
 5204 03e4 91       		.byte	0x91
 5205 03e5 64       		.sleb128 -28
 5206 03e6 09       		.uleb128 0x9
 5207 03e7 60010000 		.4byte	.LASF74
 5208 03eb 01       		.byte	0x1
 5209 03ec D1       		.byte	0xd1
 5210 03ed 81000000 		.4byte	0x81
 5211 03f1 02       		.uleb128 0x2
 5212 03f2 91       		.byte	0x91
 5213 03f3 77       		.sleb128 -9
 5214 03f4 00       		.byte	0
 5215 03f5 0A       		.uleb128 0xa
 5216 03f6 3B010000 		.4byte	.LASF75
 5217 03fa 01       		.byte	0x1
 5218 03fb F5       		.byte	0xf5
 5219 03fc 81000000 		.4byte	0x81
 5220 0400 00000000 		.4byte	.LFB40
 5221 0404 0C020000 		.4byte	.LFE40-.LFB40
 5222 0408 01       		.uleb128 0x1
 5223 0409 9C       		.byte	0x9c
 5224 040a 47040000 		.4byte	0x447
 5225 040e 0B       		.uleb128 0xb
 5226 040f 6B020000 		.4byte	.LASF76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 120


 5227 0413 01       		.byte	0x1
 5228 0414 F5       		.byte	0xf5
 5229 0415 81000000 		.4byte	0x81
 5230 0419 02       		.uleb128 0x2
 5231 041a 91       		.byte	0x91
 5232 041b 6F       		.sleb128 -17
 5233 041c 0B       		.uleb128 0xb
 5234 041d D3030000 		.4byte	.LASF70
 5235 0421 01       		.byte	0x1
 5236 0422 F5       		.byte	0xf5
 5237 0423 59030000 		.4byte	0x359
 5238 0427 02       		.uleb128 0x2
 5239 0428 91       		.byte	0x91
 5240 0429 68       		.sleb128 -24
 5241 042a 0B       		.uleb128 0xb
 5242 042b 1D040000 		.4byte	.LASF77
 5243 042f 01       		.byte	0x1
 5244 0430 F5       		.byte	0xf5
 5245 0431 81000000 		.4byte	0x81
 5246 0435 02       		.uleb128 0x2
 5247 0436 91       		.byte	0x91
 5248 0437 6E       		.sleb128 -18
 5249 0438 0B       		.uleb128 0xb
 5250 0439 75060000 		.4byte	.LASF78
 5251 043d 01       		.byte	0x1
 5252 043e F5       		.byte	0xf5
 5253 043f 8C000000 		.4byte	0x8c
 5254 0443 02       		.uleb128 0x2
 5255 0444 91       		.byte	0x91
 5256 0445 6C       		.sleb128 -20
 5257 0446 00       		.byte	0
 5258 0447 0F       		.uleb128 0xf
 5259 0448 93030000 		.4byte	.LASF79
 5260 044c 01       		.byte	0x1
 5261 044d 2301     		.2byte	0x123
 5262 044f 8C000000 		.4byte	0x8c
 5263 0453 00000000 		.4byte	.LFB41
 5264 0457 84000000 		.4byte	.LFE41-.LFB41
 5265 045b 01       		.uleb128 0x1
 5266 045c 9C       		.byte	0x9c
 5267 045d CB040000 		.4byte	0x4cb
 5268 0461 10       		.uleb128 0x10
 5269 0462 70050000 		.4byte	.LASF80
 5270 0466 01       		.byte	0x1
 5271 0467 2301     		.2byte	0x123
 5272 0469 CB040000 		.4byte	0x4cb
 5273 046d 02       		.uleb128 0x2
 5274 046e 91       		.byte	0x91
 5275 046f 6C       		.sleb128 -20
 5276 0470 10       		.uleb128 0x10
 5277 0471 C0010000 		.4byte	.LASF81
 5278 0475 01       		.byte	0x1
 5279 0476 2301     		.2byte	0x123
 5280 0478 81000000 		.4byte	0x81
 5281 047c 02       		.uleb128 0x2
 5282 047d 91       		.byte	0x91
 5283 047e 6B       		.sleb128 -21
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 121


 5284 047f 10       		.uleb128 0x10
 5285 0480 C6010000 		.4byte	.LASF82
 5286 0484 01       		.byte	0x1
 5287 0485 2301     		.2byte	0x123
 5288 0487 81000000 		.4byte	0x81
 5289 048b 02       		.uleb128 0x2
 5290 048c 91       		.byte	0x91
 5291 048d 6A       		.sleb128 -22
 5292 048e 11       		.uleb128 0x11
 5293 048f 75060000 		.4byte	.LASF78
 5294 0493 01       		.byte	0x1
 5295 0494 2501     		.2byte	0x125
 5296 0496 8C000000 		.4byte	0x8c
 5297 049a 02       		.uleb128 0x2
 5298 049b 91       		.byte	0x91
 5299 049c 70       		.sleb128 -16
 5300 049d 11       		.uleb128 0x11
 5301 049e E1010000 		.4byte	.LASF83
 5302 04a2 01       		.byte	0x1
 5303 04a3 2601     		.2byte	0x126
 5304 04a5 AD000000 		.4byte	0xad
 5305 04a9 02       		.uleb128 0x2
 5306 04aa 91       		.byte	0x91
 5307 04ab 76       		.sleb128 -10
 5308 04ac 11       		.uleb128 0x11
 5309 04ad E7010000 		.4byte	.LASF84
 5310 04b1 01       		.byte	0x1
 5311 04b2 2701     		.2byte	0x127
 5312 04b4 AD000000 		.4byte	0xad
 5313 04b8 02       		.uleb128 0x2
 5314 04b9 91       		.byte	0x91
 5315 04ba 74       		.sleb128 -12
 5316 04bb 11       		.uleb128 0x11
 5317 04bc ED010000 		.4byte	.LASF85
 5318 04c0 01       		.byte	0x1
 5319 04c1 2801     		.2byte	0x128
 5320 04c3 AD000000 		.4byte	0xad
 5321 04c7 02       		.uleb128 0x2
 5322 04c8 91       		.byte	0x91
 5323 04c9 72       		.sleb128 -14
 5324 04ca 00       		.byte	0
 5325 04cb 0D       		.uleb128 0xd
 5326 04cc 04       		.byte	0x4
 5327 04cd A2000000 		.4byte	0xa2
 5328 04d1 12       		.uleb128 0x12
 5329 04d2 11040000 		.4byte	.LASF86
 5330 04d6 01       		.byte	0x1
 5331 04d7 3101     		.2byte	0x131
 5332 04d9 8C000000 		.4byte	0x8c
 5333 04dd 00000000 		.4byte	.LFB42
 5334 04e1 28000000 		.4byte	.LFE42-.LFB42
 5335 04e5 01       		.uleb128 0x1
 5336 04e6 9C       		.byte	0x9c
 5337 04e7 0A050000 		.4byte	0x50a
 5338 04eb 10       		.uleb128 0x10
 5339 04ec 09040000 		.4byte	.LASF59
 5340 04f0 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 122


 5341 04f1 3101     		.2byte	0x131
 5342 04f3 97000000 		.4byte	0x97
 5343 04f7 02       		.uleb128 0x2
 5344 04f8 91       		.byte	0x91
 5345 04f9 6C       		.sleb128 -20
 5346 04fa 11       		.uleb128 0x11
 5347 04fb 93020000 		.4byte	.LASF87
 5348 04ff 01       		.byte	0x1
 5349 0500 3401     		.2byte	0x134
 5350 0502 8C000000 		.4byte	0x8c
 5351 0506 02       		.uleb128 0x2
 5352 0507 91       		.byte	0x91
 5353 0508 76       		.sleb128 -10
 5354 0509 00       		.byte	0
 5355 050a 13       		.uleb128 0x13
 5356 050b F6030000 		.4byte	.LASF89
 5357 050f 01       		.byte	0x1
 5358 0510 3901     		.2byte	0x139
 5359 0512 00000000 		.4byte	.LFB43
 5360 0516 04010000 		.4byte	.LFE43-.LFB43
 5361 051a 01       		.uleb128 0x1
 5362 051b 9C       		.byte	0x9c
 5363 051c 30050000 		.4byte	0x530
 5364 0520 10       		.uleb128 0x10
 5365 0521 9D060000 		.4byte	.LASF90
 5366 0525 01       		.byte	0x1
 5367 0526 3901     		.2byte	0x139
 5368 0528 81000000 		.4byte	0x81
 5369 052c 02       		.uleb128 0x2
 5370 052d 91       		.byte	0x91
 5371 052e 77       		.sleb128 -9
 5372 052f 00       		.byte	0
 5373 0530 14       		.uleb128 0x14
 5374 0531 89050000 		.4byte	.LASF113
 5375 0535 01       		.byte	0x1
 5376 0536 6B01     		.2byte	0x16b
 5377 0538 00000000 		.4byte	.LFB44
 5378 053c 18000000 		.4byte	.LFE44-.LFB44
 5379 0540 01       		.uleb128 0x1
 5380 0541 9C       		.byte	0x9c
 5381 0542 13       		.uleb128 0x13
 5382 0543 8F010000 		.4byte	.LASF91
 5383 0547 01       		.byte	0x1
 5384 0548 7501     		.2byte	0x175
 5385 054a 00000000 		.4byte	.LFB45
 5386 054e 98000000 		.4byte	.LFE45-.LFB45
 5387 0552 01       		.uleb128 0x1
 5388 0553 9C       		.byte	0x9c
 5389 0554 86050000 		.4byte	0x586
 5390 0558 10       		.uleb128 0x10
 5391 0559 7E070000 		.4byte	.LASF92
 5392 055d 01       		.byte	0x1
 5393 055e 7501     		.2byte	0x175
 5394 0560 81000000 		.4byte	0x81
 5395 0564 02       		.uleb128 0x2
 5396 0565 91       		.byte	0x91
 5397 0566 67       		.sleb128 -25
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 123


 5398 0567 10       		.uleb128 0x10
 5399 0568 AA070000 		.4byte	.LASF93
 5400 056c 01       		.byte	0x1
 5401 056d 7501     		.2byte	0x175
 5402 056f 8C000000 		.4byte	0x8c
 5403 0573 02       		.uleb128 0x2
 5404 0574 91       		.byte	0x91
 5405 0575 64       		.sleb128 -28
 5406 0576 11       		.uleb128 0x11
 5407 0577 D3030000 		.4byte	.LASF70
 5408 057b 01       		.byte	0x1
 5409 057c 7701     		.2byte	0x177
 5410 057e 86050000 		.4byte	0x586
 5411 0582 02       		.uleb128 0x2
 5412 0583 91       		.byte	0x91
 5413 0584 6C       		.sleb128 -20
 5414 0585 00       		.byte	0
 5415 0586 15       		.uleb128 0x15
 5416 0587 81000000 		.4byte	0x81
 5417 058b 96050000 		.4byte	0x596
 5418 058f 16       		.uleb128 0x16
 5419 0590 D2000000 		.4byte	0xd2
 5420 0594 08       		.byte	0x8
 5421 0595 00       		.byte	0
 5422 0596 13       		.uleb128 0x13
 5423 0597 9B070000 		.4byte	.LASF94
 5424 059b 01       		.byte	0x1
 5425 059c 8601     		.2byte	0x186
 5426 059e 00000000 		.4byte	.LFB46
 5427 05a2 98000000 		.4byte	.LFE46-.LFB46
 5428 05a6 01       		.uleb128 0x1
 5429 05a7 9C       		.byte	0x9c
 5430 05a8 DA050000 		.4byte	0x5da
 5431 05ac 10       		.uleb128 0x10
 5432 05ad 7E070000 		.4byte	.LASF92
 5433 05b1 01       		.byte	0x1
 5434 05b2 8601     		.2byte	0x186
 5435 05b4 81000000 		.4byte	0x81
 5436 05b8 02       		.uleb128 0x2
 5437 05b9 91       		.byte	0x91
 5438 05ba 67       		.sleb128 -25
 5439 05bb 10       		.uleb128 0x10
 5440 05bc 87020000 		.4byte	.LASF95
 5441 05c0 01       		.byte	0x1
 5442 05c1 8601     		.2byte	0x186
 5443 05c3 8C000000 		.4byte	0x8c
 5444 05c7 02       		.uleb128 0x2
 5445 05c8 91       		.byte	0x91
 5446 05c9 64       		.sleb128 -28
 5447 05ca 11       		.uleb128 0x11
 5448 05cb D3030000 		.4byte	.LASF70
 5449 05cf 01       		.byte	0x1
 5450 05d0 8801     		.2byte	0x188
 5451 05d2 86050000 		.4byte	0x586
 5452 05d6 02       		.uleb128 0x2
 5453 05d7 91       		.byte	0x91
 5454 05d8 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 124


 5455 05d9 00       		.byte	0
 5456 05da 13       		.uleb128 0x13
 5457 05db E5040000 		.4byte	.LASF96
 5458 05df 01       		.byte	0x1
 5459 05e0 9801     		.2byte	0x198
 5460 05e2 00000000 		.4byte	.LFB47
 5461 05e6 98000000 		.4byte	.LFE47-.LFB47
 5462 05ea 01       		.uleb128 0x1
 5463 05eb 9C       		.byte	0x9c
 5464 05ec 1E060000 		.4byte	0x61e
 5465 05f0 10       		.uleb128 0x10
 5466 05f1 7E070000 		.4byte	.LASF92
 5467 05f5 01       		.byte	0x1
 5468 05f6 9801     		.2byte	0x198
 5469 05f8 81000000 		.4byte	0x81
 5470 05fc 02       		.uleb128 0x2
 5471 05fd 91       		.byte	0x91
 5472 05fe 67       		.sleb128 -25
 5473 05ff 10       		.uleb128 0x10
 5474 0600 05010000 		.4byte	.LASF97
 5475 0604 01       		.byte	0x1
 5476 0605 9801     		.2byte	0x198
 5477 0607 8C000000 		.4byte	0x8c
 5478 060b 02       		.uleb128 0x2
 5479 060c 91       		.byte	0x91
 5480 060d 64       		.sleb128 -28
 5481 060e 11       		.uleb128 0x11
 5482 060f D3030000 		.4byte	.LASF70
 5483 0613 01       		.byte	0x1
 5484 0614 9A01     		.2byte	0x19a
 5485 0616 86050000 		.4byte	0x586
 5486 061a 02       		.uleb128 0x2
 5487 061b 91       		.byte	0x91
 5488 061c 6C       		.sleb128 -20
 5489 061d 00       		.byte	0
 5490 061e 12       		.uleb128 0x12
 5491 061f A0030000 		.4byte	.LASF98
 5492 0623 01       		.byte	0x1
 5493 0624 AC01     		.2byte	0x1ac
 5494 0626 81000000 		.4byte	0x81
 5495 062a 00000000 		.4byte	.LFB48
 5496 062e 90010000 		.4byte	.LFE48-.LFB48
 5497 0632 01       		.uleb128 0x1
 5498 0633 9C       		.byte	0x9c
 5499 0634 82060000 		.4byte	0x682
 5500 0638 10       		.uleb128 0x10
 5501 0639 28040000 		.4byte	.LASF99
 5502 063d 01       		.byte	0x1
 5503 063e AC01     		.2byte	0x1ac
 5504 0640 81000000 		.4byte	0x81
 5505 0644 02       		.uleb128 0x2
 5506 0645 91       		.byte	0x91
 5507 0646 67       		.sleb128 -25
 5508 0647 10       		.uleb128 0x10
 5509 0648 6E000000 		.4byte	.LASF100
 5510 064c 01       		.byte	0x1
 5511 064d AC01     		.2byte	0x1ac
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 125


 5512 064f 59030000 		.4byte	0x359
 5513 0653 02       		.uleb128 0x2
 5514 0654 91       		.byte	0x91
 5515 0655 60       		.sleb128 -32
 5516 0656 17       		.uleb128 0x17
 5517 0657 6900     		.ascii	"i\000"
 5518 0659 01       		.byte	0x1
 5519 065a BC01     		.2byte	0x1bc
 5520 065c 81000000 		.4byte	0x81
 5521 0660 02       		.uleb128 0x2
 5522 0661 91       		.byte	0x91
 5523 0662 6F       		.sleb128 -17
 5524 0663 17       		.uleb128 0x17
 5525 0664 61766700 		.ascii	"avg\000"
 5526 0668 01       		.byte	0x1
 5527 0669 BD01     		.2byte	0x1bd
 5528 066b 8C000000 		.4byte	0x8c
 5529 066f 02       		.uleb128 0x2
 5530 0670 91       		.byte	0x91
 5531 0671 6A       		.sleb128 -22
 5532 0672 11       		.uleb128 0x11
 5533 0673 75060000 		.4byte	.LASF78
 5534 0677 01       		.byte	0x1
 5535 0678 BE01     		.2byte	0x1be
 5536 067a 8C000000 		.4byte	0x8c
 5537 067e 02       		.uleb128 0x2
 5538 067f 91       		.byte	0x91
 5539 0680 6C       		.sleb128 -20
 5540 0681 00       		.byte	0
 5541 0682 12       		.uleb128 0x12
 5542 0683 99050000 		.4byte	.LASF101
 5543 0687 01       		.byte	0x1
 5544 0688 1C02     		.2byte	0x21c
 5545 068a 81000000 		.4byte	0x81
 5546 068e 00000000 		.4byte	.LFB49
 5547 0692 90010000 		.4byte	.LFE49-.LFB49
 5548 0696 01       		.uleb128 0x1
 5549 0697 9C       		.byte	0x9c
 5550 0698 E6060000 		.4byte	0x6e6
 5551 069c 10       		.uleb128 0x10
 5552 069d 49000000 		.4byte	.LASF102
 5553 06a1 01       		.byte	0x1
 5554 06a2 1C02     		.2byte	0x21c
 5555 06a4 81000000 		.4byte	0x81
 5556 06a8 02       		.uleb128 0x2
 5557 06a9 91       		.byte	0x91
 5558 06aa 67       		.sleb128 -25
 5559 06ab 10       		.uleb128 0x10
 5560 06ac 55070000 		.4byte	.LASF103
 5561 06b0 01       		.byte	0x1
 5562 06b1 1C02     		.2byte	0x21c
 5563 06b3 59030000 		.4byte	0x359
 5564 06b7 02       		.uleb128 0x2
 5565 06b8 91       		.byte	0x91
 5566 06b9 60       		.sleb128 -32
 5567 06ba 17       		.uleb128 0x17
 5568 06bb 6900     		.ascii	"i\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 126


 5569 06bd 01       		.byte	0x1
 5570 06be 2C02     		.2byte	0x22c
 5571 06c0 81000000 		.4byte	0x81
 5572 06c4 02       		.uleb128 0x2
 5573 06c5 91       		.byte	0x91
 5574 06c6 6F       		.sleb128 -17
 5575 06c7 17       		.uleb128 0x17
 5576 06c8 61766700 		.ascii	"avg\000"
 5577 06cc 01       		.byte	0x1
 5578 06cd 2D02     		.2byte	0x22d
 5579 06cf 8C000000 		.4byte	0x8c
 5580 06d3 02       		.uleb128 0x2
 5581 06d4 91       		.byte	0x91
 5582 06d5 6A       		.sleb128 -22
 5583 06d6 11       		.uleb128 0x11
 5584 06d7 75060000 		.4byte	.LASF78
 5585 06db 01       		.byte	0x1
 5586 06dc 2E02     		.2byte	0x22e
 5587 06de 8C000000 		.4byte	0x8c
 5588 06e2 02       		.uleb128 0x2
 5589 06e3 91       		.byte	0x91
 5590 06e4 6C       		.sleb128 -20
 5591 06e5 00       		.byte	0
 5592 06e6 12       		.uleb128 0x12
 5593 06e7 FE010000 		.4byte	.LASF104
 5594 06eb 01       		.byte	0x1
 5595 06ec 8E02     		.2byte	0x28e
 5596 06ee 81000000 		.4byte	0x81
 5597 06f2 00000000 		.4byte	.LFB50
 5598 06f6 60030000 		.4byte	.LFE50-.LFB50
 5599 06fa 01       		.uleb128 0x1
 5600 06fb 9C       		.byte	0x9c
 5601 06fc 59070000 		.4byte	0x759
 5602 0700 10       		.uleb128 0x10
 5603 0701 0B010000 		.4byte	.LASF105
 5604 0705 01       		.byte	0x1
 5605 0706 8E02     		.2byte	0x28e
 5606 0708 81000000 		.4byte	0x81
 5607 070c 02       		.uleb128 0x2
 5608 070d 91       		.byte	0x91
 5609 070e 67       		.sleb128 -25
 5610 070f 10       		.uleb128 0x10
 5611 0710 AE050000 		.4byte	.LASF106
 5612 0714 01       		.byte	0x1
 5613 0715 8E02     		.2byte	0x28e
 5614 0717 59030000 		.4byte	0x359
 5615 071b 02       		.uleb128 0x2
 5616 071c 91       		.byte	0x91
 5617 071d 60       		.sleb128 -32
 5618 071e 17       		.uleb128 0x17
 5619 071f 6900     		.ascii	"i\000"
 5620 0721 01       		.byte	0x1
 5621 0722 9402     		.2byte	0x294
 5622 0724 81000000 		.4byte	0x81
 5623 0728 02       		.uleb128 0x2
 5624 0729 91       		.byte	0x91
 5625 072a 6F       		.sleb128 -17
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 127


 5626 072b 17       		.uleb128 0x17
 5627 072c 61766700 		.ascii	"avg\000"
 5628 0730 01       		.byte	0x1
 5629 0731 9502     		.2byte	0x295
 5630 0733 8C000000 		.4byte	0x8c
 5631 0737 02       		.uleb128 0x2
 5632 0738 91       		.byte	0x91
 5633 0739 68       		.sleb128 -24
 5634 073a 11       		.uleb128 0x11
 5635 073b 75060000 		.4byte	.LASF78
 5636 073f 01       		.byte	0x1
 5637 0740 9602     		.2byte	0x296
 5638 0742 8C000000 		.4byte	0x8c
 5639 0746 02       		.uleb128 0x2
 5640 0747 91       		.byte	0x91
 5641 0748 6A       		.sleb128 -22
 5642 0749 11       		.uleb128 0x11
 5643 074a 93020000 		.4byte	.LASF87
 5644 074e 01       		.byte	0x1
 5645 074f 9902     		.2byte	0x299
 5646 0751 8C000000 		.4byte	0x8c
 5647 0755 02       		.uleb128 0x2
 5648 0756 91       		.byte	0x91
 5649 0757 6C       		.sleb128 -20
 5650 0758 00       		.byte	0
 5651 0759 12       		.uleb128 0x12
 5652 075a AB010000 		.4byte	.LASF107
 5653 075e 01       		.byte	0x1
 5654 075f 4B03     		.2byte	0x34b
 5655 0761 81000000 		.4byte	0x81
 5656 0765 00000000 		.4byte	.LFB51
 5657 0769 60030000 		.4byte	.LFE51-.LFB51
 5658 076d 01       		.uleb128 0x1
 5659 076e 9C       		.byte	0x9c
 5660 076f CC070000 		.4byte	0x7cc
 5661 0773 10       		.uleb128 0x10
 5662 0774 D9030000 		.4byte	.LASF108
 5663 0778 01       		.byte	0x1
 5664 0779 4B03     		.2byte	0x34b
 5665 077b 81000000 		.4byte	0x81
 5666 077f 02       		.uleb128 0x2
 5667 0780 91       		.byte	0x91
 5668 0781 67       		.sleb128 -25
 5669 0782 10       		.uleb128 0x10
 5670 0783 CB000000 		.4byte	.LASF109
 5671 0787 01       		.byte	0x1
 5672 0788 4B03     		.2byte	0x34b
 5673 078a 59030000 		.4byte	0x359
 5674 078e 02       		.uleb128 0x2
 5675 078f 91       		.byte	0x91
 5676 0790 60       		.sleb128 -32
 5677 0791 17       		.uleb128 0x17
 5678 0792 6900     		.ascii	"i\000"
 5679 0794 01       		.byte	0x1
 5680 0795 5103     		.2byte	0x351
 5681 0797 81000000 		.4byte	0x81
 5682 079b 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 128


 5683 079c 91       		.byte	0x91
 5684 079d 6F       		.sleb128 -17
 5685 079e 17       		.uleb128 0x17
 5686 079f 61766700 		.ascii	"avg\000"
 5687 07a3 01       		.byte	0x1
 5688 07a4 5203     		.2byte	0x352
 5689 07a6 8C000000 		.4byte	0x8c
 5690 07aa 02       		.uleb128 0x2
 5691 07ab 91       		.byte	0x91
 5692 07ac 68       		.sleb128 -24
 5693 07ad 11       		.uleb128 0x11
 5694 07ae 75060000 		.4byte	.LASF78
 5695 07b2 01       		.byte	0x1
 5696 07b3 5303     		.2byte	0x353
 5697 07b5 8C000000 		.4byte	0x8c
 5698 07b9 02       		.uleb128 0x2
 5699 07ba 91       		.byte	0x91
 5700 07bb 6A       		.sleb128 -22
 5701 07bc 11       		.uleb128 0x11
 5702 07bd 93020000 		.4byte	.LASF87
 5703 07c1 01       		.byte	0x1
 5704 07c2 5403     		.2byte	0x354
 5705 07c4 8C000000 		.4byte	0x8c
 5706 07c8 02       		.uleb128 0x2
 5707 07c9 91       		.byte	0x91
 5708 07ca 6C       		.sleb128 -20
 5709 07cb 00       		.byte	0
 5710 07cc 12       		.uleb128 0x12
 5711 07cd 00000000 		.4byte	.LASF110
 5712 07d1 01       		.byte	0x1
 5713 07d2 0804     		.2byte	0x408
 5714 07d4 81000000 		.4byte	0x81
 5715 07d8 00000000 		.4byte	.LFB52
 5716 07dc 7C010000 		.4byte	.LFE52-.LFB52
 5717 07e0 01       		.uleb128 0x1
 5718 07e1 9C       		.byte	0x9c
 5719 07e2 30080000 		.4byte	0x830
 5720 07e6 10       		.uleb128 0x10
 5721 07e7 E9030000 		.4byte	.LASF111
 5722 07eb 01       		.byte	0x1
 5723 07ec 0804     		.2byte	0x408
 5724 07ee 81000000 		.4byte	0x81
 5725 07f2 02       		.uleb128 0x2
 5726 07f3 91       		.byte	0x91
 5727 07f4 67       		.sleb128 -25
 5728 07f5 10       		.uleb128 0x10
 5729 07f6 36050000 		.4byte	.LASF112
 5730 07fa 01       		.byte	0x1
 5731 07fb 0804     		.2byte	0x408
 5732 07fd 59030000 		.4byte	0x359
 5733 0801 02       		.uleb128 0x2
 5734 0802 91       		.byte	0x91
 5735 0803 60       		.sleb128 -32
 5736 0804 17       		.uleb128 0x17
 5737 0805 6900     		.ascii	"i\000"
 5738 0807 01       		.byte	0x1
 5739 0808 0D04     		.2byte	0x40d
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 129


 5740 080a 81000000 		.4byte	0x81
 5741 080e 02       		.uleb128 0x2
 5742 080f 91       		.byte	0x91
 5743 0810 6F       		.sleb128 -17
 5744 0811 17       		.uleb128 0x17
 5745 0812 61766700 		.ascii	"avg\000"
 5746 0816 01       		.byte	0x1
 5747 0817 0E04     		.2byte	0x40e
 5748 0819 8C000000 		.4byte	0x8c
 5749 081d 02       		.uleb128 0x2
 5750 081e 91       		.byte	0x91
 5751 081f 6A       		.sleb128 -22
 5752 0820 11       		.uleb128 0x11
 5753 0821 75060000 		.4byte	.LASF78
 5754 0825 01       		.byte	0x1
 5755 0826 0F04     		.2byte	0x40f
 5756 0828 8C000000 		.4byte	0x8c
 5757 082c 02       		.uleb128 0x2
 5758 082d 91       		.byte	0x91
 5759 082e 6C       		.sleb128 -20
 5760 082f 00       		.byte	0
 5761 0830 18       		.uleb128 0x18
 5762 0831 77000000 		.4byte	.LASF115
 5763 0835 01       		.byte	0x1
 5764 0836 7404     		.2byte	0x474
 5765 0838 00000000 		.4byte	.LFB53
 5766 083c F8000000 		.4byte	.LFE53-.LFB53
 5767 0840 01       		.uleb128 0x1
 5768 0841 9C       		.byte	0x9c
 5769 0842 56080000 		.4byte	0x856
 5770 0846 11       		.uleb128 0x11
 5771 0847 75060000 		.4byte	.LASF78
 5772 084b 01       		.byte	0x1
 5773 084c 7604     		.2byte	0x476
 5774 084e 8C000000 		.4byte	0x8c
 5775 0852 02       		.uleb128 0x2
 5776 0853 91       		.byte	0x91
 5777 0854 6E       		.sleb128 -18
 5778 0855 00       		.byte	0
 5779 0856 19       		.uleb128 0x19
 5780 0857 44040000 		.4byte	.LASF114
 5781 085b 01       		.byte	0x1
 5782 085c BE04     		.2byte	0x4be
 5783 085e 00000000 		.4byte	.LFB54
 5784 0862 A8000000 		.4byte	.LFE54-.LFB54
 5785 0866 01       		.uleb128 0x1
 5786 0867 9C       		.byte	0x9c
 5787 0868 18       		.uleb128 0x18
 5788 0869 F3010000 		.4byte	.LASF116
 5789 086d 01       		.byte	0x1
 5790 086e F604     		.2byte	0x4f6
 5791 0870 00000000 		.4byte	.LFB55
 5792 0874 70010000 		.4byte	.LFE55-.LFB55
 5793 0878 01       		.uleb128 0x1
 5794 0879 9C       		.byte	0x9c
 5795 087a 96080000 		.4byte	0x896
 5796 087e 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 130


 5797 087f 1E000000 		.4byte	.LBB2
 5798 0883 2C000000 		.4byte	.LBE2-.LBB2
 5799 0887 17       		.uleb128 0x17
 5800 0888 6A00     		.ascii	"j\000"
 5801 088a 01       		.byte	0x1
 5802 088b FD04     		.2byte	0x4fd
 5803 088d 81000000 		.4byte	0x81
 5804 0891 02       		.uleb128 0x2
 5805 0892 91       		.byte	0x91
 5806 0893 77       		.sleb128 -9
 5807 0894 00       		.byte	0
 5808 0895 00       		.byte	0
 5809 0896 1B       		.uleb128 0x1b
 5810 0897 EC060000 		.4byte	.LASF117
 5811 089b 01       		.byte	0x1
 5812 089c 4105     		.2byte	0x541
 5813 089e 68000000 		.4byte	0x68
 5814 08a2 00000000 		.4byte	.LFB56
 5815 08a6 C8010000 		.4byte	.LFE56-.LFB56
 5816 08aa 01       		.uleb128 0x1
 5817 08ab 9C       		.byte	0x9c
 5818 08ac 81090000 		.4byte	0x981
 5819 08b0 11       		.uleb128 0x11
 5820 08b1 2B000000 		.4byte	.LASF118
 5821 08b5 01       		.byte	0x1
 5822 08b6 4C05     		.2byte	0x54c
 5823 08b8 81000000 		.4byte	0x81
 5824 08bc 02       		.uleb128 0x2
 5825 08bd 91       		.byte	0x91
 5826 08be 6F       		.sleb128 -17
 5827 08bf 11       		.uleb128 0x11
 5828 08c0 F1060000 		.4byte	.LASF119
 5829 08c4 01       		.byte	0x1
 5830 08c5 4D05     		.2byte	0x54d
 5831 08c7 81090000 		.4byte	0x981
 5832 08cb 03       		.uleb128 0x3
 5833 08cc 91       		.byte	0x91
 5834 08cd B87F     		.sleb128 -72
 5835 08cf 11       		.uleb128 0x11
 5836 08d0 7F030000 		.4byte	.LASF120
 5837 08d4 01       		.byte	0x1
 5838 08d5 4E05     		.2byte	0x54e
 5839 08d7 81000000 		.4byte	0x81
 5840 08db 02       		.uleb128 0x2
 5841 08dc 91       		.byte	0x91
 5842 08dd 6E       		.sleb128 -18
 5843 08de 11       		.uleb128 0x11
 5844 08df 02050000 		.4byte	.LASF121
 5845 08e3 01       		.byte	0x1
 5846 08e4 4F05     		.2byte	0x54f
 5847 08e6 81090000 		.4byte	0x981
 5848 08ea 03       		.uleb128 0x3
 5849 08eb 91       		.byte	0x91
 5850 08ec 907F     		.sleb128 -112
 5851 08ee 11       		.uleb128 0x11
 5852 08ef 0E020000 		.4byte	.LASF122
 5853 08f3 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 131


 5854 08f4 5005     		.2byte	0x550
 5855 08f6 81000000 		.4byte	0x81
 5856 08fa 02       		.uleb128 0x2
 5857 08fb 91       		.byte	0x91
 5858 08fc 6D       		.sleb128 -19
 5859 08fd 11       		.uleb128 0x11
 5860 08fe 09030000 		.4byte	.LASF123
 5861 0902 01       		.byte	0x1
 5862 0903 5105     		.2byte	0x551
 5863 0905 81090000 		.4byte	0x981
 5864 0909 03       		.uleb128 0x3
 5865 090a 91       		.byte	0x91
 5866 090b E87E     		.sleb128 -152
 5867 090d 11       		.uleb128 0x11
 5868 090e 40000000 		.4byte	.LASF124
 5869 0912 01       		.byte	0x1
 5870 0913 5205     		.2byte	0x552
 5871 0915 81000000 		.4byte	0x81
 5872 0919 02       		.uleb128 0x2
 5873 091a 91       		.byte	0x91
 5874 091b 6C       		.sleb128 -20
 5875 091c 11       		.uleb128 0x11
 5876 091d 6E000000 		.4byte	.LASF100
 5877 0921 01       		.byte	0x1
 5878 0922 5305     		.2byte	0x553
 5879 0924 81090000 		.4byte	0x981
 5880 0928 03       		.uleb128 0x3
 5881 0929 91       		.byte	0x91
 5882 092a C07E     		.sleb128 -192
 5883 092c 11       		.uleb128 0x11
 5884 092d 00030000 		.4byte	.LASF125
 5885 0931 01       		.byte	0x1
 5886 0932 5405     		.2byte	0x554
 5887 0934 81000000 		.4byte	0x81
 5888 0938 02       		.uleb128 0x2
 5889 0939 91       		.byte	0x91
 5890 093a 6B       		.sleb128 -21
 5891 093b 11       		.uleb128 0x11
 5892 093c 55070000 		.4byte	.LASF103
 5893 0940 01       		.byte	0x1
 5894 0941 5505     		.2byte	0x555
 5895 0943 81090000 		.4byte	0x981
 5896 0947 03       		.uleb128 0x3
 5897 0948 91       		.byte	0x91
 5898 0949 987E     		.sleb128 -232
 5899 094b 11       		.uleb128 0x11
 5900 094c 37020000 		.4byte	.LASF126
 5901 0950 01       		.byte	0x1
 5902 0951 5F05     		.2byte	0x55f
 5903 0953 81000000 		.4byte	0x81
 5904 0957 02       		.uleb128 0x2
 5905 0958 91       		.byte	0x91
 5906 0959 6A       		.sleb128 -22
 5907 095a 11       		.uleb128 0x11
 5908 095b 88060000 		.4byte	.LASF127
 5909 095f 01       		.byte	0x1
 5910 0960 6005     		.2byte	0x560
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 132


 5911 0962 AD000000 		.4byte	0xad
 5912 0966 02       		.uleb128 0x2
 5913 0967 91       		.byte	0x91
 5914 0968 62       		.sleb128 -30
 5915 0969 1A       		.uleb128 0x1a
 5916 096a 9E000000 		.4byte	.LBB3
 5917 096e 50000000 		.4byte	.LBE3-.LBB3
 5918 0972 17       		.uleb128 0x17
 5919 0973 6900     		.ascii	"i\000"
 5920 0975 01       		.byte	0x1
 5921 0976 8F05     		.2byte	0x58f
 5922 0978 68000000 		.4byte	0x68
 5923 097c 02       		.uleb128 0x2
 5924 097d 91       		.byte	0x91
 5925 097e 64       		.sleb128 -28
 5926 097f 00       		.byte	0
 5927 0980 00       		.byte	0
 5928 0981 15       		.uleb128 0x15
 5929 0982 8C000000 		.4byte	0x8c
 5930 0986 91090000 		.4byte	0x991
 5931 098a 16       		.uleb128 0x16
 5932 098b D2000000 		.4byte	0xd2
 5933 098f 13       		.byte	0x13
 5934 0990 00       		.byte	0
 5935 0991 1C       		.uleb128 0x1c
 5936 0992 C8050000 		.4byte	.LASF128
 5937 0996 05       		.byte	0x5
 5938 0997 19       		.byte	0x19
 5939 0998 97000000 		.4byte	0x97
 5940 099c 05       		.uleb128 0x5
 5941 099d 03       		.byte	0x3
 5942 099e 00000000 		.4byte	ELBOW_UPPER_BOUND
 5943 09a2 1C       		.uleb128 0x1c
 5944 09a3 66010000 		.4byte	.LASF129
 5945 09a7 05       		.byte	0x5
 5946 09a8 1B       		.byte	0x1b
 5947 09a9 97000000 		.4byte	0x97
 5948 09ad 05       		.uleb128 0x5
 5949 09ae 03       		.byte	0x3
 5950 09af 00000000 		.4byte	ELBOW_LOWER_BOUND
 5951 09b3 1C       		.uleb128 0x1c
 5952 09b4 35030000 		.4byte	.LASF130
 5953 09b8 05       		.byte	0x5
 5954 09b9 1D       		.byte	0x1d
 5955 09ba 97000000 		.4byte	0x97
 5956 09be 05       		.uleb128 0x5
 5957 09bf 03       		.byte	0x3
 5958 09c0 00000000 		.4byte	SHOULDER_UPPER_BOUND
 5959 09c4 1C       		.uleb128 0x1c
 5960 09c5 4F050000 		.4byte	.LASF131
 5961 09c9 05       		.byte	0x5
 5962 09ca 1F       		.byte	0x1f
 5963 09cb 97000000 		.4byte	0x97
 5964 09cf 05       		.uleb128 0x5
 5965 09d0 03       		.byte	0x3
 5966 09d1 00000000 		.4byte	SHOULDER_LOWER_BOUND
 5967 09d5 15       		.uleb128 0x15
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 133


 5968 09d6 A2000000 		.4byte	0xa2
 5969 09da E5090000 		.4byte	0x9e5
 5970 09de 16       		.uleb128 0x16
 5971 09df D2000000 		.4byte	0xd2
 5972 09e3 15       		.byte	0x15
 5973 09e4 00       		.byte	0
 5974 09e5 1C       		.uleb128 0x1c
 5975 09e6 60020000 		.4byte	.LASF132
 5976 09ea 05       		.byte	0x5
 5977 09eb 38       		.byte	0x38
 5978 09ec D5090000 		.4byte	0x9d5
 5979 09f0 05       		.uleb128 0x5
 5980 09f1 03       		.byte	0x3
 5981 09f2 00000000 		.4byte	data_array
 5982 09f6 15       		.uleb128 0x15
 5983 09f7 76000000 		.4byte	0x76
 5984 09fb 060A0000 		.4byte	0xa06
 5985 09ff 16       		.uleb128 0x16
 5986 0a00 D2000000 		.4byte	0xd2
 5987 0a04 0D       		.byte	0xd
 5988 0a05 00       		.byte	0
 5989 0a06 1C       		.uleb128 0x1c
 5990 0a07 C6020000 		.4byte	.LASF133
 5991 0a0b 05       		.byte	0x5
 5992 0a0c 3B       		.byte	0x3b
 5993 0a0d F6090000 		.4byte	0x9f6
 5994 0a11 05       		.uleb128 0x5
 5995 0a12 03       		.byte	0x3
 5996 0a13 00000000 		.4byte	feedback_array
 5997 0a17 1C       		.uleb128 0x1c
 5998 0a18 C7040000 		.4byte	.LASF134
 5999 0a1c 05       		.byte	0x5
 6000 0a1d 3E       		.byte	0x3e
 6001 0a1e 81000000 		.4byte	0x81
 6002 0a22 05       		.uleb128 0x5
 6003 0a23 03       		.byte	0x3
 6004 0a24 00000000 		.4byte	wiznet
 6005 0a28 1C       		.uleb128 0x1c
 6006 0a29 20000000 		.4byte	.LASF135
 6007 0a2d 05       		.byte	0x5
 6008 0a2e 42       		.byte	0x42
 6009 0a2f D5090000 		.4byte	0x9d5
 6010 0a33 05       		.uleb128 0x5
 6011 0a34 03       		.byte	0x3
 6012 0a35 00000000 		.4byte	test_array
 6013 0a39 1C       		.uleb128 0x1c
 6014 0a3a 8B030000 		.4byte	.LASF136
 6015 0a3e 05       		.byte	0x5
 6016 0a3f 4B       		.byte	0x4b
 6017 0a40 81000000 		.4byte	0x81
 6018 0a44 05       		.uleb128 0x5
 6019 0a45 03       		.byte	0x3
 6020 0a46 00000000 		.4byte	WT_FLAG
 6021 0a4a 1C       		.uleb128 0x1c
 6022 0a4b 73020000 		.4byte	.LASF137
 6023 0a4f 05       		.byte	0x5
 6024 0a50 4C       		.byte	0x4c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 134


 6025 0a51 81000000 		.4byte	0x81
 6026 0a55 05       		.uleb128 0x5
 6027 0a56 03       		.byte	0x3
 6028 0a57 00000000 		.4byte	WR_FLAG
 6029 0a5b 1C       		.uleb128 0x1c
 6030 0a5c 6B070000 		.4byte	.LASF138
 6031 0a60 05       		.byte	0x5
 6032 0a61 4D       		.byte	0x4d
 6033 0a62 81000000 		.4byte	0x81
 6034 0a66 05       		.uleb128 0x5
 6035 0a67 03       		.byte	0x3
 6036 0a68 00000000 		.4byte	ELBOW_FLAG
 6037 0a6c 1C       		.uleb128 0x1c
 6038 0a6d AA030000 		.4byte	.LASF139
 6039 0a71 05       		.byte	0x5
 6040 0a72 4E       		.byte	0x4e
 6041 0a73 81000000 		.4byte	0x81
 6042 0a77 05       		.uleb128 0x5
 6043 0a78 03       		.byte	0x3
 6044 0a79 00000000 		.4byte	SHOULDER_FLAG
 6045 0a7d 1C       		.uleb128 0x1c
 6046 0a7e 9C020000 		.4byte	.LASF140
 6047 0a82 05       		.byte	0x5
 6048 0a83 4F       		.byte	0x4f
 6049 0a84 81000000 		.4byte	0x81
 6050 0a88 05       		.uleb128 0x5
 6051 0a89 03       		.byte	0x3
 6052 0a8a 00000000 		.4byte	BA_FLAG
 6053 0a8e 1C       		.uleb128 0x1c
 6054 0a8f 27030000 		.4byte	.LASF141
 6055 0a93 05       		.byte	0x5
 6056 0a94 50       		.byte	0x50
 6057 0a95 81000000 		.4byte	0x81
 6058 0a99 05       		.uleb128 0x5
 6059 0a9a 03       		.byte	0x3
 6060 0a9b 00000000 		.4byte	EFFECTOR_FLAG
 6061 0a9f 1C       		.uleb128 0x1c
 6062 0aa0 E3020000 		.4byte	.LASF142
 6063 0aa4 05       		.byte	0x5
 6064 0aa5 51       		.byte	0x51
 6065 0aa6 81000000 		.4byte	0x81
 6066 0aaa 05       		.uleb128 0x5
 6067 0aab 03       		.byte	0x3
 6068 0aac 00000000 		.4byte	PH_FLAG
 6069 0ab0 1C       		.uleb128 0x1c
 6070 0ab1 DC060000 		.4byte	.LASF143
 6071 0ab5 05       		.byte	0x5
 6072 0ab6 54       		.byte	0x54
 6073 0ab7 8C000000 		.4byte	0x8c
 6074 0abb 05       		.uleb128 0x5
 6075 0abc 03       		.byte	0x3
 6076 0abd 00000000 		.4byte	dropped_packets
 6077 0ac1 1C       		.uleb128 0x1c
 6078 0ac2 2A010000 		.4byte	.LASF144
 6079 0ac6 05       		.byte	0x5
 6080 0ac7 55       		.byte	0x55
 6081 0ac8 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 135


 6082 0acc 05       		.uleb128 0x5
 6083 0acd 03       		.byte	0x3
 6084 0ace 00000000 		.4byte	fail_safe_errors
 6085 0ad2 1C       		.uleb128 0x1c
 6086 0ad3 8E070000 		.4byte	.LASF145
 6087 0ad7 05       		.byte	0x5
 6088 0ad8 56       		.byte	0x56
 6089 0ad9 8C000000 		.4byte	0x8c
 6090 0add 05       		.uleb128 0x5
 6091 0ade 03       		.byte	0x3
 6092 0adf 00000000 		.4byte	shldr_errors
 6093 0ae3 1C       		.uleb128 0x1c
 6094 0ae4 34000000 		.4byte	.LASF146
 6095 0ae8 05       		.byte	0x5
 6096 0ae9 57       		.byte	0x57
 6097 0aea 8C000000 		.4byte	0x8c
 6098 0aee 05       		.uleb128 0x5
 6099 0aef 03       		.byte	0x3
 6100 0af0 00000000 		.4byte	elbw_errors
 6101 0af4 1C       		.uleb128 0x1c
 6102 0af5 19020000 		.4byte	.LASF147
 6103 0af9 05       		.byte	0x5
 6104 0afa 58       		.byte	0x58
 6105 0afb 8C000000 		.4byte	0x8c
 6106 0aff 05       		.uleb128 0x5
 6107 0b00 03       		.byte	0x3
 6108 0b01 00000000 		.4byte	BA_errors
 6109 0b05 1C       		.uleb128 0x1c
 6110 0b06 CC010000 		.4byte	.LASF148
 6111 0b0a 05       		.byte	0x5
 6112 0b0b 59       		.byte	0x59
 6113 0b0c 8C000000 		.4byte	0x8c
 6114 0b10 05       		.uleb128 0x5
 6115 0b11 03       		.byte	0x3
 6116 0b12 00000000 		.4byte	WT_errors
 6117 0b16 1C       		.uleb128 0x1c
 6118 0b17 92040000 		.4byte	.LASF149
 6119 0b1b 05       		.byte	0x5
 6120 0b1c 5A       		.byte	0x5a
 6121 0b1d 8C000000 		.4byte	0x8c
 6122 0b21 05       		.uleb128 0x5
 6123 0b22 03       		.byte	0x3
 6124 0b23 00000000 		.4byte	WR_errors
 6125 0b27 1C       		.uleb128 0x1c
 6126 0b28 D6010000 		.4byte	.LASF150
 6127 0b2c 05       		.byte	0x5
 6128 0b2d 5B       		.byte	0x5b
 6129 0b2e 8C000000 		.4byte	0x8c
 6130 0b32 05       		.uleb128 0x5
 6131 0b33 03       		.byte	0x3
 6132 0b34 00000000 		.4byte	eff_errors
 6133 0b38 1C       		.uleb128 0x1c
 6134 0b39 A1010000 		.4byte	.LASF151
 6135 0b3d 05       		.byte	0x5
 6136 0b3e 5D       		.byte	0x5d
 6137 0b3f CD000000 		.4byte	0xcd
 6138 0b43 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 136


 6139 0b44 03       		.byte	0x3
 6140 0b45 00000000 		.4byte	timerFlag
 6141 0b49 1D       		.uleb128 0x1d
 6142 0b4a C3030000 		.4byte	.LASF152
 6143 0b4e 01       		.byte	0x1
 6144 0b4f AA01     		.2byte	0x1aa
 6145 0b51 D9000000 		.4byte	0xd9
 6146 0b55 05       		.uleb128 0x5
 6147 0b56 03       		.byte	0x3
 6148 0b57 00000000 		.4byte	wristTilt_state
 6149 0b5b 1D       		.uleb128 0x1d
 6150 0b5c 9C040000 		.4byte	.LASF153
 6151 0b60 01       		.byte	0x1
 6152 0b61 1A02     		.2byte	0x21a
 6153 0b63 FF000000 		.4byte	0xff
 6154 0b67 05       		.uleb128 0x5
 6155 0b68 03       		.byte	0x3
 6156 0b69 00000000 		.4byte	wristRotate_state
 6157 0b6d 1D       		.uleb128 0x1d
 6158 0b6e 46010000 		.4byte	.LASF154
 6159 0b72 01       		.byte	0x1
 6160 0b73 8D02     		.2byte	0x28d
 6161 0b75 25010000 		.4byte	0x125
 6162 0b79 05       		.uleb128 0x5
 6163 0b7a 03       		.byte	0x3
 6164 0b7b 00000000 		.4byte	elbow_state
 6165 0b7f 1D       		.uleb128 0x1d
 6166 0b80 E9000000 		.4byte	.LASF155
 6167 0b84 01       		.byte	0x1
 6168 0b85 4A03     		.2byte	0x34a
 6169 0b87 4B010000 		.4byte	0x14b
 6170 0b8b 05       		.uleb128 0x5
 6171 0b8c 03       		.byte	0x3
 6172 0b8d 00000000 		.4byte	shoulder_state
 6173 0b91 1D       		.uleb128 0x1d
 6174 0b92 57040000 		.4byte	.LASF156
 6175 0b96 01       		.byte	0x1
 6176 0b97 0704     		.2byte	0x407
 6177 0b99 71010000 		.4byte	0x171
 6178 0b9d 05       		.uleb128 0x5
 6179 0b9e 03       		.byte	0x3
 6180 0b9f 00000000 		.4byte	baseAzimuth_state
 6181 0ba3 1D       		.uleb128 0x1d
 6182 0ba4 63030000 		.4byte	.LASF157
 6183 0ba8 01       		.byte	0x1
 6184 0ba9 7304     		.2byte	0x473
 6185 0bab 97010000 		.4byte	0x197
 6186 0baf 05       		.uleb128 0x5
 6187 0bb0 03       		.byte	0x3
 6188 0bb1 00000000 		.4byte	effector_state
 6189 0bb5 1D       		.uleb128 0x1d
 6190 0bb6 A8060000 		.4byte	.LASF158
 6191 0bba 01       		.byte	0x1
 6192 0bbb BD04     		.2byte	0x4bd
 6193 0bbd BD010000 		.4byte	0x1bd
 6194 0bc1 05       		.uleb128 0x5
 6195 0bc2 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 137


 6196 0bc3 00000000 		.4byte	phSensor_state
 6197 0bc7 00       		.byte	0
 6198              		.section	.debug_abbrev,"",%progbits
 6199              	.Ldebug_abbrev0:
 6200 0000 01       		.uleb128 0x1
 6201 0001 11       		.uleb128 0x11
 6202 0002 01       		.byte	0x1
 6203 0003 25       		.uleb128 0x25
 6204 0004 0E       		.uleb128 0xe
 6205 0005 13       		.uleb128 0x13
 6206 0006 0B       		.uleb128 0xb
 6207 0007 03       		.uleb128 0x3
 6208 0008 0E       		.uleb128 0xe
 6209 0009 1B       		.uleb128 0x1b
 6210 000a 0E       		.uleb128 0xe
 6211 000b 55       		.uleb128 0x55
 6212 000c 17       		.uleb128 0x17
 6213 000d 11       		.uleb128 0x11
 6214 000e 01       		.uleb128 0x1
 6215 000f 10       		.uleb128 0x10
 6216 0010 17       		.uleb128 0x17
 6217 0011 00       		.byte	0
 6218 0012 00       		.byte	0
 6219 0013 02       		.uleb128 0x2
 6220 0014 24       		.uleb128 0x24
 6221 0015 00       		.byte	0
 6222 0016 0B       		.uleb128 0xb
 6223 0017 0B       		.uleb128 0xb
 6224 0018 3E       		.uleb128 0x3e
 6225 0019 0B       		.uleb128 0xb
 6226 001a 03       		.uleb128 0x3
 6227 001b 0E       		.uleb128 0xe
 6228 001c 00       		.byte	0
 6229 001d 00       		.byte	0
 6230 001e 03       		.uleb128 0x3
 6231 001f 16       		.uleb128 0x16
 6232 0020 00       		.byte	0
 6233 0021 03       		.uleb128 0x3
 6234 0022 0E       		.uleb128 0xe
 6235 0023 3A       		.uleb128 0x3a
 6236 0024 0B       		.uleb128 0xb
 6237 0025 3B       		.uleb128 0x3b
 6238 0026 0B       		.uleb128 0xb
 6239 0027 49       		.uleb128 0x49
 6240 0028 13       		.uleb128 0x13
 6241 0029 00       		.byte	0
 6242 002a 00       		.byte	0
 6243 002b 04       		.uleb128 0x4
 6244 002c 24       		.uleb128 0x24
 6245 002d 00       		.byte	0
 6246 002e 0B       		.uleb128 0xb
 6247 002f 0B       		.uleb128 0xb
 6248 0030 3E       		.uleb128 0x3e
 6249 0031 0B       		.uleb128 0xb
 6250 0032 03       		.uleb128 0x3
 6251 0033 08       		.uleb128 0x8
 6252 0034 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 138


 6253 0035 00       		.byte	0
 6254 0036 05       		.uleb128 0x5
 6255 0037 35       		.uleb128 0x35
 6256 0038 00       		.byte	0
 6257 0039 49       		.uleb128 0x49
 6258 003a 13       		.uleb128 0x13
 6259 003b 00       		.byte	0
 6260 003c 00       		.byte	0
 6261 003d 06       		.uleb128 0x6
 6262 003e 04       		.uleb128 0x4
 6263 003f 01       		.byte	0x1
 6264 0040 03       		.uleb128 0x3
 6265 0041 0E       		.uleb128 0xe
 6266 0042 0B       		.uleb128 0xb
 6267 0043 0B       		.uleb128 0xb
 6268 0044 3A       		.uleb128 0x3a
 6269 0045 0B       		.uleb128 0xb
 6270 0046 3B       		.uleb128 0x3b
 6271 0047 05       		.uleb128 0x5
 6272 0048 01       		.uleb128 0x1
 6273 0049 13       		.uleb128 0x13
 6274 004a 00       		.byte	0
 6275 004b 00       		.byte	0
 6276 004c 07       		.uleb128 0x7
 6277 004d 28       		.uleb128 0x28
 6278 004e 00       		.byte	0
 6279 004f 03       		.uleb128 0x3
 6280 0050 0E       		.uleb128 0xe
 6281 0051 1C       		.uleb128 0x1c
 6282 0052 0D       		.uleb128 0xd
 6283 0053 00       		.byte	0
 6284 0054 00       		.byte	0
 6285 0055 08       		.uleb128 0x8
 6286 0056 2E       		.uleb128 0x2e
 6287 0057 01       		.byte	0x1
 6288 0058 3F       		.uleb128 0x3f
 6289 0059 19       		.uleb128 0x19
 6290 005a 03       		.uleb128 0x3
 6291 005b 0E       		.uleb128 0xe
 6292 005c 3A       		.uleb128 0x3a
 6293 005d 0B       		.uleb128 0xb
 6294 005e 3B       		.uleb128 0x3b
 6295 005f 0B       		.uleb128 0xb
 6296 0060 27       		.uleb128 0x27
 6297 0061 19       		.uleb128 0x19
 6298 0062 11       		.uleb128 0x11
 6299 0063 01       		.uleb128 0x1
 6300 0064 12       		.uleb128 0x12
 6301 0065 06       		.uleb128 0x6
 6302 0066 40       		.uleb128 0x40
 6303 0067 18       		.uleb128 0x18
 6304 0068 9642     		.uleb128 0x2116
 6305 006a 19       		.uleb128 0x19
 6306 006b 01       		.uleb128 0x1
 6307 006c 13       		.uleb128 0x13
 6308 006d 00       		.byte	0
 6309 006e 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 139


 6310 006f 09       		.uleb128 0x9
 6311 0070 34       		.uleb128 0x34
 6312 0071 00       		.byte	0
 6313 0072 03       		.uleb128 0x3
 6314 0073 0E       		.uleb128 0xe
 6315 0074 3A       		.uleb128 0x3a
 6316 0075 0B       		.uleb128 0xb
 6317 0076 3B       		.uleb128 0x3b
 6318 0077 0B       		.uleb128 0xb
 6319 0078 49       		.uleb128 0x49
 6320 0079 13       		.uleb128 0x13
 6321 007a 02       		.uleb128 0x2
 6322 007b 18       		.uleb128 0x18
 6323 007c 00       		.byte	0
 6324 007d 00       		.byte	0
 6325 007e 0A       		.uleb128 0xa
 6326 007f 2E       		.uleb128 0x2e
 6327 0080 01       		.byte	0x1
 6328 0081 3F       		.uleb128 0x3f
 6329 0082 19       		.uleb128 0x19
 6330 0083 03       		.uleb128 0x3
 6331 0084 0E       		.uleb128 0xe
 6332 0085 3A       		.uleb128 0x3a
 6333 0086 0B       		.uleb128 0xb
 6334 0087 3B       		.uleb128 0x3b
 6335 0088 0B       		.uleb128 0xb
 6336 0089 27       		.uleb128 0x27
 6337 008a 19       		.uleb128 0x19
 6338 008b 49       		.uleb128 0x49
 6339 008c 13       		.uleb128 0x13
 6340 008d 11       		.uleb128 0x11
 6341 008e 01       		.uleb128 0x1
 6342 008f 12       		.uleb128 0x12
 6343 0090 06       		.uleb128 0x6
 6344 0091 40       		.uleb128 0x40
 6345 0092 18       		.uleb128 0x18
 6346 0093 9642     		.uleb128 0x2116
 6347 0095 19       		.uleb128 0x19
 6348 0096 01       		.uleb128 0x1
 6349 0097 13       		.uleb128 0x13
 6350 0098 00       		.byte	0
 6351 0099 00       		.byte	0
 6352 009a 0B       		.uleb128 0xb
 6353 009b 05       		.uleb128 0x5
 6354 009c 00       		.byte	0
 6355 009d 03       		.uleb128 0x3
 6356 009e 0E       		.uleb128 0xe
 6357 009f 3A       		.uleb128 0x3a
 6358 00a0 0B       		.uleb128 0xb
 6359 00a1 3B       		.uleb128 0x3b
 6360 00a2 0B       		.uleb128 0xb
 6361 00a3 49       		.uleb128 0x49
 6362 00a4 13       		.uleb128 0x13
 6363 00a5 02       		.uleb128 0x2
 6364 00a6 18       		.uleb128 0x18
 6365 00a7 00       		.byte	0
 6366 00a8 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 140


 6367 00a9 0C       		.uleb128 0xc
 6368 00aa 34       		.uleb128 0x34
 6369 00ab 00       		.byte	0
 6370 00ac 03       		.uleb128 0x3
 6371 00ad 08       		.uleb128 0x8
 6372 00ae 3A       		.uleb128 0x3a
 6373 00af 0B       		.uleb128 0xb
 6374 00b0 3B       		.uleb128 0x3b
 6375 00b1 0B       		.uleb128 0xb
 6376 00b2 49       		.uleb128 0x49
 6377 00b3 13       		.uleb128 0x13
 6378 00b4 02       		.uleb128 0x2
 6379 00b5 18       		.uleb128 0x18
 6380 00b6 00       		.byte	0
 6381 00b7 00       		.byte	0
 6382 00b8 0D       		.uleb128 0xd
 6383 00b9 0F       		.uleb128 0xf
 6384 00ba 00       		.byte	0
 6385 00bb 0B       		.uleb128 0xb
 6386 00bc 0B       		.uleb128 0xb
 6387 00bd 49       		.uleb128 0x49
 6388 00be 13       		.uleb128 0x13
 6389 00bf 00       		.byte	0
 6390 00c0 00       		.byte	0
 6391 00c1 0E       		.uleb128 0xe
 6392 00c2 2E       		.uleb128 0x2e
 6393 00c3 01       		.byte	0x1
 6394 00c4 3F       		.uleb128 0x3f
 6395 00c5 19       		.uleb128 0x19
 6396 00c6 03       		.uleb128 0x3
 6397 00c7 0E       		.uleb128 0xe
 6398 00c8 3A       		.uleb128 0x3a
 6399 00c9 0B       		.uleb128 0xb
 6400 00ca 3B       		.uleb128 0x3b
 6401 00cb 0B       		.uleb128 0xb
 6402 00cc 27       		.uleb128 0x27
 6403 00cd 19       		.uleb128 0x19
 6404 00ce 49       		.uleb128 0x49
 6405 00cf 13       		.uleb128 0x13
 6406 00d0 11       		.uleb128 0x11
 6407 00d1 01       		.uleb128 0x1
 6408 00d2 12       		.uleb128 0x12
 6409 00d3 06       		.uleb128 0x6
 6410 00d4 40       		.uleb128 0x40
 6411 00d5 18       		.uleb128 0x18
 6412 00d6 9742     		.uleb128 0x2117
 6413 00d8 19       		.uleb128 0x19
 6414 00d9 01       		.uleb128 0x1
 6415 00da 13       		.uleb128 0x13
 6416 00db 00       		.byte	0
 6417 00dc 00       		.byte	0
 6418 00dd 0F       		.uleb128 0xf
 6419 00de 2E       		.uleb128 0x2e
 6420 00df 01       		.byte	0x1
 6421 00e0 3F       		.uleb128 0x3f
 6422 00e1 19       		.uleb128 0x19
 6423 00e2 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 141


 6424 00e3 0E       		.uleb128 0xe
 6425 00e4 3A       		.uleb128 0x3a
 6426 00e5 0B       		.uleb128 0xb
 6427 00e6 3B       		.uleb128 0x3b
 6428 00e7 05       		.uleb128 0x5
 6429 00e8 27       		.uleb128 0x27
 6430 00e9 19       		.uleb128 0x19
 6431 00ea 49       		.uleb128 0x49
 6432 00eb 13       		.uleb128 0x13
 6433 00ec 11       		.uleb128 0x11
 6434 00ed 01       		.uleb128 0x1
 6435 00ee 12       		.uleb128 0x12
 6436 00ef 06       		.uleb128 0x6
 6437 00f0 40       		.uleb128 0x40
 6438 00f1 18       		.uleb128 0x18
 6439 00f2 9742     		.uleb128 0x2117
 6440 00f4 19       		.uleb128 0x19
 6441 00f5 01       		.uleb128 0x1
 6442 00f6 13       		.uleb128 0x13
 6443 00f7 00       		.byte	0
 6444 00f8 00       		.byte	0
 6445 00f9 10       		.uleb128 0x10
 6446 00fa 05       		.uleb128 0x5
 6447 00fb 00       		.byte	0
 6448 00fc 03       		.uleb128 0x3
 6449 00fd 0E       		.uleb128 0xe
 6450 00fe 3A       		.uleb128 0x3a
 6451 00ff 0B       		.uleb128 0xb
 6452 0100 3B       		.uleb128 0x3b
 6453 0101 05       		.uleb128 0x5
 6454 0102 49       		.uleb128 0x49
 6455 0103 13       		.uleb128 0x13
 6456 0104 02       		.uleb128 0x2
 6457 0105 18       		.uleb128 0x18
 6458 0106 00       		.byte	0
 6459 0107 00       		.byte	0
 6460 0108 11       		.uleb128 0x11
 6461 0109 34       		.uleb128 0x34
 6462 010a 00       		.byte	0
 6463 010b 03       		.uleb128 0x3
 6464 010c 0E       		.uleb128 0xe
 6465 010d 3A       		.uleb128 0x3a
 6466 010e 0B       		.uleb128 0xb
 6467 010f 3B       		.uleb128 0x3b
 6468 0110 05       		.uleb128 0x5
 6469 0111 49       		.uleb128 0x49
 6470 0112 13       		.uleb128 0x13
 6471 0113 02       		.uleb128 0x2
 6472 0114 18       		.uleb128 0x18
 6473 0115 00       		.byte	0
 6474 0116 00       		.byte	0
 6475 0117 12       		.uleb128 0x12
 6476 0118 2E       		.uleb128 0x2e
 6477 0119 01       		.byte	0x1
 6478 011a 3F       		.uleb128 0x3f
 6479 011b 19       		.uleb128 0x19
 6480 011c 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 142


 6481 011d 0E       		.uleb128 0xe
 6482 011e 3A       		.uleb128 0x3a
 6483 011f 0B       		.uleb128 0xb
 6484 0120 3B       		.uleb128 0x3b
 6485 0121 05       		.uleb128 0x5
 6486 0122 27       		.uleb128 0x27
 6487 0123 19       		.uleb128 0x19
 6488 0124 49       		.uleb128 0x49
 6489 0125 13       		.uleb128 0x13
 6490 0126 11       		.uleb128 0x11
 6491 0127 01       		.uleb128 0x1
 6492 0128 12       		.uleb128 0x12
 6493 0129 06       		.uleb128 0x6
 6494 012a 40       		.uleb128 0x40
 6495 012b 18       		.uleb128 0x18
 6496 012c 9642     		.uleb128 0x2116
 6497 012e 19       		.uleb128 0x19
 6498 012f 01       		.uleb128 0x1
 6499 0130 13       		.uleb128 0x13
 6500 0131 00       		.byte	0
 6501 0132 00       		.byte	0
 6502 0133 13       		.uleb128 0x13
 6503 0134 2E       		.uleb128 0x2e
 6504 0135 01       		.byte	0x1
 6505 0136 3F       		.uleb128 0x3f
 6506 0137 19       		.uleb128 0x19
 6507 0138 03       		.uleb128 0x3
 6508 0139 0E       		.uleb128 0xe
 6509 013a 3A       		.uleb128 0x3a
 6510 013b 0B       		.uleb128 0xb
 6511 013c 3B       		.uleb128 0x3b
 6512 013d 05       		.uleb128 0x5
 6513 013e 27       		.uleb128 0x27
 6514 013f 19       		.uleb128 0x19
 6515 0140 11       		.uleb128 0x11
 6516 0141 01       		.uleb128 0x1
 6517 0142 12       		.uleb128 0x12
 6518 0143 06       		.uleb128 0x6
 6519 0144 40       		.uleb128 0x40
 6520 0145 18       		.uleb128 0x18
 6521 0146 9642     		.uleb128 0x2116
 6522 0148 19       		.uleb128 0x19
 6523 0149 01       		.uleb128 0x1
 6524 014a 13       		.uleb128 0x13
 6525 014b 00       		.byte	0
 6526 014c 00       		.byte	0
 6527 014d 14       		.uleb128 0x14
 6528 014e 2E       		.uleb128 0x2e
 6529 014f 00       		.byte	0
 6530 0150 3F       		.uleb128 0x3f
 6531 0151 19       		.uleb128 0x19
 6532 0152 03       		.uleb128 0x3
 6533 0153 0E       		.uleb128 0xe
 6534 0154 3A       		.uleb128 0x3a
 6535 0155 0B       		.uleb128 0xb
 6536 0156 3B       		.uleb128 0x3b
 6537 0157 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 143


 6538 0158 11       		.uleb128 0x11
 6539 0159 01       		.uleb128 0x1
 6540 015a 12       		.uleb128 0x12
 6541 015b 06       		.uleb128 0x6
 6542 015c 40       		.uleb128 0x40
 6543 015d 18       		.uleb128 0x18
 6544 015e 9642     		.uleb128 0x2116
 6545 0160 19       		.uleb128 0x19
 6546 0161 00       		.byte	0
 6547 0162 00       		.byte	0
 6548 0163 15       		.uleb128 0x15
 6549 0164 01       		.uleb128 0x1
 6550 0165 01       		.byte	0x1
 6551 0166 49       		.uleb128 0x49
 6552 0167 13       		.uleb128 0x13
 6553 0168 01       		.uleb128 0x1
 6554 0169 13       		.uleb128 0x13
 6555 016a 00       		.byte	0
 6556 016b 00       		.byte	0
 6557 016c 16       		.uleb128 0x16
 6558 016d 21       		.uleb128 0x21
 6559 016e 00       		.byte	0
 6560 016f 49       		.uleb128 0x49
 6561 0170 13       		.uleb128 0x13
 6562 0171 2F       		.uleb128 0x2f
 6563 0172 0B       		.uleb128 0xb
 6564 0173 00       		.byte	0
 6565 0174 00       		.byte	0
 6566 0175 17       		.uleb128 0x17
 6567 0176 34       		.uleb128 0x34
 6568 0177 00       		.byte	0
 6569 0178 03       		.uleb128 0x3
 6570 0179 08       		.uleb128 0x8
 6571 017a 3A       		.uleb128 0x3a
 6572 017b 0B       		.uleb128 0xb
 6573 017c 3B       		.uleb128 0x3b
 6574 017d 05       		.uleb128 0x5
 6575 017e 49       		.uleb128 0x49
 6576 017f 13       		.uleb128 0x13
 6577 0180 02       		.uleb128 0x2
 6578 0181 18       		.uleb128 0x18
 6579 0182 00       		.byte	0
 6580 0183 00       		.byte	0
 6581 0184 18       		.uleb128 0x18
 6582 0185 2E       		.uleb128 0x2e
 6583 0186 01       		.byte	0x1
 6584 0187 3F       		.uleb128 0x3f
 6585 0188 19       		.uleb128 0x19
 6586 0189 03       		.uleb128 0x3
 6587 018a 0E       		.uleb128 0xe
 6588 018b 3A       		.uleb128 0x3a
 6589 018c 0B       		.uleb128 0xb
 6590 018d 3B       		.uleb128 0x3b
 6591 018e 05       		.uleb128 0x5
 6592 018f 11       		.uleb128 0x11
 6593 0190 01       		.uleb128 0x1
 6594 0191 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 144


 6595 0192 06       		.uleb128 0x6
 6596 0193 40       		.uleb128 0x40
 6597 0194 18       		.uleb128 0x18
 6598 0195 9642     		.uleb128 0x2116
 6599 0197 19       		.uleb128 0x19
 6600 0198 01       		.uleb128 0x1
 6601 0199 13       		.uleb128 0x13
 6602 019a 00       		.byte	0
 6603 019b 00       		.byte	0
 6604 019c 19       		.uleb128 0x19
 6605 019d 2E       		.uleb128 0x2e
 6606 019e 00       		.byte	0
 6607 019f 3F       		.uleb128 0x3f
 6608 01a0 19       		.uleb128 0x19
 6609 01a1 03       		.uleb128 0x3
 6610 01a2 0E       		.uleb128 0xe
 6611 01a3 3A       		.uleb128 0x3a
 6612 01a4 0B       		.uleb128 0xb
 6613 01a5 3B       		.uleb128 0x3b
 6614 01a6 05       		.uleb128 0x5
 6615 01a7 11       		.uleb128 0x11
 6616 01a8 01       		.uleb128 0x1
 6617 01a9 12       		.uleb128 0x12
 6618 01aa 06       		.uleb128 0x6
 6619 01ab 40       		.uleb128 0x40
 6620 01ac 18       		.uleb128 0x18
 6621 01ad 9742     		.uleb128 0x2117
 6622 01af 19       		.uleb128 0x19
 6623 01b0 00       		.byte	0
 6624 01b1 00       		.byte	0
 6625 01b2 1A       		.uleb128 0x1a
 6626 01b3 0B       		.uleb128 0xb
 6627 01b4 01       		.byte	0x1
 6628 01b5 11       		.uleb128 0x11
 6629 01b6 01       		.uleb128 0x1
 6630 01b7 12       		.uleb128 0x12
 6631 01b8 06       		.uleb128 0x6
 6632 01b9 00       		.byte	0
 6633 01ba 00       		.byte	0
 6634 01bb 1B       		.uleb128 0x1b
 6635 01bc 2E       		.uleb128 0x2e
 6636 01bd 01       		.byte	0x1
 6637 01be 3F       		.uleb128 0x3f
 6638 01bf 19       		.uleb128 0x19
 6639 01c0 03       		.uleb128 0x3
 6640 01c1 0E       		.uleb128 0xe
 6641 01c2 3A       		.uleb128 0x3a
 6642 01c3 0B       		.uleb128 0xb
 6643 01c4 3B       		.uleb128 0x3b
 6644 01c5 05       		.uleb128 0x5
 6645 01c6 49       		.uleb128 0x49
 6646 01c7 13       		.uleb128 0x13
 6647 01c8 11       		.uleb128 0x11
 6648 01c9 01       		.uleb128 0x1
 6649 01ca 12       		.uleb128 0x12
 6650 01cb 06       		.uleb128 0x6
 6651 01cc 40       		.uleb128 0x40
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 145


 6652 01cd 18       		.uleb128 0x18
 6653 01ce 9642     		.uleb128 0x2116
 6654 01d0 19       		.uleb128 0x19
 6655 01d1 01       		.uleb128 0x1
 6656 01d2 13       		.uleb128 0x13
 6657 01d3 00       		.byte	0
 6658 01d4 00       		.byte	0
 6659 01d5 1C       		.uleb128 0x1c
 6660 01d6 34       		.uleb128 0x34
 6661 01d7 00       		.byte	0
 6662 01d8 03       		.uleb128 0x3
 6663 01d9 0E       		.uleb128 0xe
 6664 01da 3A       		.uleb128 0x3a
 6665 01db 0B       		.uleb128 0xb
 6666 01dc 3B       		.uleb128 0x3b
 6667 01dd 0B       		.uleb128 0xb
 6668 01de 49       		.uleb128 0x49
 6669 01df 13       		.uleb128 0x13
 6670 01e0 3F       		.uleb128 0x3f
 6671 01e1 19       		.uleb128 0x19
 6672 01e2 02       		.uleb128 0x2
 6673 01e3 18       		.uleb128 0x18
 6674 01e4 00       		.byte	0
 6675 01e5 00       		.byte	0
 6676 01e6 1D       		.uleb128 0x1d
 6677 01e7 34       		.uleb128 0x34
 6678 01e8 00       		.byte	0
 6679 01e9 03       		.uleb128 0x3
 6680 01ea 0E       		.uleb128 0xe
 6681 01eb 3A       		.uleb128 0x3a
 6682 01ec 0B       		.uleb128 0xb
 6683 01ed 3B       		.uleb128 0x3b
 6684 01ee 05       		.uleb128 0x5
 6685 01ef 49       		.uleb128 0x49
 6686 01f0 13       		.uleb128 0x13
 6687 01f1 3F       		.uleb128 0x3f
 6688 01f2 19       		.uleb128 0x19
 6689 01f3 02       		.uleb128 0x2
 6690 01f4 18       		.uleb128 0x18
 6691 01f5 00       		.byte	0
 6692 01f6 00       		.byte	0
 6693 01f7 00       		.byte	0
 6694              		.section	.debug_aranges,"",%progbits
 6695 0000 CC000000 		.4byte	0xcc
 6696 0004 0200     		.2byte	0x2
 6697 0006 00000000 		.4byte	.Ldebug_info0
 6698 000a 04       		.byte	0x4
 6699 000b 00       		.byte	0
 6700 000c 0000     		.2byte	0
 6701 000e 0000     		.2byte	0
 6702 0010 00000000 		.4byte	.LFB34
 6703 0014 28000000 		.4byte	.LFE34-.LFB34
 6704 0018 00000000 		.4byte	.LFB35
 6705 001c 90010000 		.4byte	.LFE35-.LFB35
 6706 0020 00000000 		.4byte	.LFB36
 6707 0024 90010000 		.4byte	.LFE36-.LFB36
 6708 0028 00000000 		.4byte	.LFB37
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 146


 6709 002c 78000000 		.4byte	.LFE37-.LFB37
 6710 0030 00000000 		.4byte	.LFB38
 6711 0034 3E000000 		.4byte	.LFE38-.LFB38
 6712 0038 00000000 		.4byte	.LFB39
 6713 003c 0C010000 		.4byte	.LFE39-.LFB39
 6714 0040 00000000 		.4byte	.LFB40
 6715 0044 0C020000 		.4byte	.LFE40-.LFB40
 6716 0048 00000000 		.4byte	.LFB41
 6717 004c 84000000 		.4byte	.LFE41-.LFB41
 6718 0050 00000000 		.4byte	.LFB42
 6719 0054 28000000 		.4byte	.LFE42-.LFB42
 6720 0058 00000000 		.4byte	.LFB43
 6721 005c 04010000 		.4byte	.LFE43-.LFB43
 6722 0060 00000000 		.4byte	.LFB44
 6723 0064 18000000 		.4byte	.LFE44-.LFB44
 6724 0068 00000000 		.4byte	.LFB45
 6725 006c 98000000 		.4byte	.LFE45-.LFB45
 6726 0070 00000000 		.4byte	.LFB46
 6727 0074 98000000 		.4byte	.LFE46-.LFB46
 6728 0078 00000000 		.4byte	.LFB47
 6729 007c 98000000 		.4byte	.LFE47-.LFB47
 6730 0080 00000000 		.4byte	.LFB48
 6731 0084 90010000 		.4byte	.LFE48-.LFB48
 6732 0088 00000000 		.4byte	.LFB49
 6733 008c 90010000 		.4byte	.LFE49-.LFB49
 6734 0090 00000000 		.4byte	.LFB50
 6735 0094 60030000 		.4byte	.LFE50-.LFB50
 6736 0098 00000000 		.4byte	.LFB51
 6737 009c 60030000 		.4byte	.LFE51-.LFB51
 6738 00a0 00000000 		.4byte	.LFB52
 6739 00a4 7C010000 		.4byte	.LFE52-.LFB52
 6740 00a8 00000000 		.4byte	.LFB53
 6741 00ac F8000000 		.4byte	.LFE53-.LFB53
 6742 00b0 00000000 		.4byte	.LFB54
 6743 00b4 A8000000 		.4byte	.LFE54-.LFB54
 6744 00b8 00000000 		.4byte	.LFB55
 6745 00bc 70010000 		.4byte	.LFE55-.LFB55
 6746 00c0 00000000 		.4byte	.LFB56
 6747 00c4 C8010000 		.4byte	.LFE56-.LFB56
 6748 00c8 00000000 		.4byte	0
 6749 00cc 00000000 		.4byte	0
 6750              		.section	.debug_ranges,"",%progbits
 6751              	.Ldebug_ranges0:
 6752 0000 00000000 		.4byte	.LFB34
 6753 0004 28000000 		.4byte	.LFE34
 6754 0008 00000000 		.4byte	.LFB35
 6755 000c 90010000 		.4byte	.LFE35
 6756 0010 00000000 		.4byte	.LFB36
 6757 0014 90010000 		.4byte	.LFE36
 6758 0018 00000000 		.4byte	.LFB37
 6759 001c 78000000 		.4byte	.LFE37
 6760 0020 00000000 		.4byte	.LFB38
 6761 0024 3E000000 		.4byte	.LFE38
 6762 0028 00000000 		.4byte	.LFB39
 6763 002c 0C010000 		.4byte	.LFE39
 6764 0030 00000000 		.4byte	.LFB40
 6765 0034 0C020000 		.4byte	.LFE40
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 147


 6766 0038 00000000 		.4byte	.LFB41
 6767 003c 84000000 		.4byte	.LFE41
 6768 0040 00000000 		.4byte	.LFB42
 6769 0044 28000000 		.4byte	.LFE42
 6770 0048 00000000 		.4byte	.LFB43
 6771 004c 04010000 		.4byte	.LFE43
 6772 0050 00000000 		.4byte	.LFB44
 6773 0054 18000000 		.4byte	.LFE44
 6774 0058 00000000 		.4byte	.LFB45
 6775 005c 98000000 		.4byte	.LFE45
 6776 0060 00000000 		.4byte	.LFB46
 6777 0064 98000000 		.4byte	.LFE46
 6778 0068 00000000 		.4byte	.LFB47
 6779 006c 98000000 		.4byte	.LFE47
 6780 0070 00000000 		.4byte	.LFB48
 6781 0074 90010000 		.4byte	.LFE48
 6782 0078 00000000 		.4byte	.LFB49
 6783 007c 90010000 		.4byte	.LFE49
 6784 0080 00000000 		.4byte	.LFB50
 6785 0084 60030000 		.4byte	.LFE50
 6786 0088 00000000 		.4byte	.LFB51
 6787 008c 60030000 		.4byte	.LFE51
 6788 0090 00000000 		.4byte	.LFB52
 6789 0094 7C010000 		.4byte	.LFE52
 6790 0098 00000000 		.4byte	.LFB53
 6791 009c F8000000 		.4byte	.LFE53
 6792 00a0 00000000 		.4byte	.LFB54
 6793 00a4 A8000000 		.4byte	.LFE54
 6794 00a8 00000000 		.4byte	.LFB55
 6795 00ac 70010000 		.4byte	.LFE55
 6796 00b0 00000000 		.4byte	.LFB56
 6797 00b4 C8010000 		.4byte	.LFE56
 6798 00b8 00000000 		.4byte	0
 6799 00bc 00000000 		.4byte	0
 6800              		.section	.debug_line,"",%progbits
 6801              	.Ldebug_line0:
 6802 0000 CB060000 		.section	.debug_str,"MS",%progbits,1
 6802      02004F01 
 6802      00000201 
 6802      FB0E0D00 
 6802      01010101 
 6803              	.LASF110:
 6804 0000 62617365 		.ascii	"baseAzimuth\000"
 6804      417A696D 
 6804      75746800 
 6805              	.LASF21:
 6806 000c 74696C74 		.ascii	"tilt_init\000"
 6806      5F696E69 
 6806      7400
 6807              	.LASF65:
 6808 0016 6E756D5F 		.ascii	"num_items\000"
 6808      6974656D 
 6808      7300
 6809              	.LASF135:
 6810 0020 74657374 		.ascii	"test_array\000"
 6810      5F617272 
 6810      617900
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 148


 6811              	.LASF118:
 6812 002b 42415F63 		.ascii	"BA_cspot\000"
 6812      73706F74 
 6812      00
 6813              	.LASF146:
 6814 0034 656C6277 		.ascii	"elbw_errors\000"
 6814      5F657272 
 6814      6F727300 
 6815              	.LASF124:
 6816 0040 57545F63 		.ascii	"WT_cspot\000"
 6816      73706F74 
 6816      00
 6817              	.LASF102:
 6818 0049 57525F61 		.ascii	"WR_arr_cspot\000"
 6818      72725F63 
 6818      73706F74 
 6818      00
 6819              	.LASF43:
 6820 0056 42415F65 		.ascii	"BA_execute\000"
 6820      78656375 
 6820      746500
 6821              	.LASF30:
 6822 0061 656C626F 		.ascii	"elbow_states\000"
 6822      775F7374 
 6822      61746573 
 6822      00
 6823              	.LASF100:
 6824 006e 57545F61 		.ascii	"WT_array\000"
 6824      72726179 
 6824      00
 6825              	.LASF115:
 6826 0077 65666665 		.ascii	"effector\000"
 6826      63746F72 
 6826      00
 6827              	.LASF8:
 6828 0080 756E7369 		.ascii	"unsigned int\000"
 6828      676E6564 
 6828      20696E74 
 6828      00
 6829              	.LASF40:
 6830 008d 62617365 		.ascii	"baseAzimuth_states\000"
 6830      417A696D 
 6830      7574685F 
 6830      73746174 
 6830      657300
 6831              	.LASF15:
 6832 00a0 696E7431 		.ascii	"int16\000"
 6832      3600
 6833              	.LASF61:
 6834 00a6 43616C69 		.ascii	"CalibrationElbow\000"
 6834      62726174 
 6834      696F6E45 
 6834      6C626F77 
 6834      00
 6835              	.LASF53:
 6836 00b7 70685F65 		.ascii	"ph_execute\000"
 6836      78656375 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 149


 6836      746500
 6837              	.LASF41:
 6838 00c2 42415F73 		.ascii	"BA_start\000"
 6838      74617274 
 6838      00
 6839              	.LASF109:
 6840 00cb 73686F75 		.ascii	"shoulder_array\000"
 6840      6C646572 
 6840      5F617272 
 6840      617900
 6841              	.LASF66:
 6842 00da 6D61696E 		.ascii	"maintain_array\000"
 6842      7461696E 
 6842      5F617272 
 6842      617900
 6843              	.LASF155:
 6844 00e9 73686F75 		.ascii	"shoulder_state\000"
 6844      6C646572 
 6844      5F737461 
 6844      746500
 6845              	.LASF26:
 6846 00f8 726F7461 		.ascii	"rotate_start\000"
 6846      74655F73 
 6846      74617274 
 6846      00
 6847              	.LASF97:
 6848 0105 73706565 		.ascii	"speed\000"
 6848      6400
 6849              	.LASF105:
 6850 010b 656C6277 		.ascii	"elbw_arr_cspot\000"
 6850      5F617272 
 6850      5F637370 
 6850      6F7400
 6851              	.LASF20:
 6852 011a 74696C74 		.ascii	"tilt_start\000"
 6852      5F737461 
 6852      727400
 6853              	.LASF72:
 6854 0125 73697A65 		.ascii	"size\000"
 6854      00
 6855              	.LASF144:
 6856 012a 6661696C 		.ascii	"fail_safe_errors\000"
 6856      5F736166 
 6856      655F6572 
 6856      726F7273 
 6856      00
 6857              	.LASF75:
 6858 013b 706F735F 		.ascii	"pos_to_vel\000"
 6858      746F5F76 
 6858      656C00
 6859              	.LASF154:
 6860 0146 656C626F 		.ascii	"elbow_state\000"
 6860      775F7374 
 6860      61746500 
 6861              	.LASF16:
 6862 0152 666C6F61 		.ascii	"float\000"
 6862      7400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 150


 6863              	.LASF42:
 6864 0158 42415F69 		.ascii	"BA_init\000"
 6864      6E697400 
 6865              	.LASF74:
 6866 0160 696E6465 		.ascii	"index\000"
 6866      7800
 6867              	.LASF129:
 6868 0166 454C424F 		.ascii	"ELBOW_LOWER_BOUND\000"
 6868      575F4C4F 
 6868      5745525F 
 6868      424F554E 
 6868      4400
 6869              	.LASF7:
 6870 0178 6C6F6E67 		.ascii	"long long unsigned int\000"
 6870      206C6F6E 
 6870      6720756E 
 6870      7369676E 
 6870      65642069 
 6871              	.LASF91:
 6872 018f 53657276 		.ascii	"ServoGoalPosition\000"
 6872      6F476F61 
 6872      6C506F73 
 6872      6974696F 
 6872      6E00
 6873              	.LASF151:
 6874 01a1 74696D65 		.ascii	"timerFlag\000"
 6874      72466C61 
 6874      6700
 6875              	.LASF107:
 6876 01ab 73686F75 		.ascii	"shoulder\000"
 6876      6C646572 
 6876      00
 6877              	.LASF48:
 6878 01b4 6566665F 		.ascii	"eff_execute\000"
 6878      65786563 
 6878      75746500 
 6879              	.LASF81:
 6880 01c0 62797465 		.ascii	"byte1\000"
 6880      3100
 6881              	.LASF82:
 6882 01c6 62797465 		.ascii	"byte2\000"
 6882      3200
 6883              	.LASF148:
 6884 01cc 57545F65 		.ascii	"WT_errors\000"
 6884      72726F72 
 6884      7300
 6885              	.LASF150:
 6886 01d6 6566665F 		.ascii	"eff_errors\000"
 6886      6572726F 
 6886      727300
 6887              	.LASF83:
 6888 01e1 74656D70 		.ascii	"temp1\000"
 6888      3100
 6889              	.LASF84:
 6890 01e7 74656D70 		.ascii	"temp2\000"
 6890      3200
 6891              	.LASF85:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 151


 6892 01ed 74656D70 		.ascii	"temp3\000"
 6892      3300
 6893              	.LASF116:
 6894 01f3 696E6974 		.ascii	"initialize\000"
 6894      69616C69 
 6894      7A6500
 6895              	.LASF104:
 6896 01fe 656C626F 		.ascii	"elbow\000"
 6896      7700
 6897              	.LASF46:
 6898 0204 6566665F 		.ascii	"eff_start\000"
 6898      73746172 
 6898      7400
 6899              	.LASF122:
 6900 020e 656C6277 		.ascii	"elbw_cspot\000"
 6900      5F637370 
 6900      6F7400
 6901              	.LASF147:
 6902 0219 42415F65 		.ascii	"BA_errors\000"
 6902      72726F72 
 6902      7300
 6903              	.LASF62:
 6904 0223 43616C69 		.ascii	"CalibrationShoulder\000"
 6904      62726174 
 6904      696F6E53 
 6904      686F756C 
 6904      64657200 
 6905              	.LASF126:
 6906 0237 66735F63 		.ascii	"fs_count\000"
 6906      6F756E74 
 6906      00
 6907              	.LASF68:
 6908 0240 53495A45 		.ascii	"SIZE\000"
 6908      00
 6909              	.LASF39:
 6910 0245 73686C64 		.ascii	"shldr_wait\000"
 6910      725F7761 
 6910      697400
 6911              	.LASF50:
 6912 0250 70685365 		.ascii	"phSensor_states\000"
 6912      6E736F72 
 6912      5F737461 
 6912      74657300 
 6913              	.LASF132:
 6914 0260 64617461 		.ascii	"data_array\000"
 6914      5F617272 
 6914      617900
 6915              	.LASF76:
 6916 026b 6375725F 		.ascii	"cur_pos\000"
 6916      706F7300 
 6917              	.LASF137:
 6918 0273 57525F46 		.ascii	"WR_FLAG\000"
 6918      4C414700 
 6919              	.LASF18:
 6920 027b 63686172 		.ascii	"char\000"
 6920      00
 6921              	.LASF12:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 152


 6922 0280 75696E74 		.ascii	"uint16\000"
 6922      313600
 6923              	.LASF95:
 6924 0287 746F7271 		.ascii	"torque\000"
 6924      756500
 6925              	.LASF14:
 6926 028e 696E7438 		.ascii	"int8\000"
 6926      00
 6927              	.LASF87:
 6928 0293 66656564 		.ascii	"feedback\000"
 6928      6261636B 
 6928      00
 6929              	.LASF140:
 6930 029c 42415F46 		.ascii	"BA_FLAG\000"
 6930      4C414700 
 6931              	.LASF56:
 6932 02a4 4359434C 		.ascii	"CYCLES\000"
 6932      455300
 6933              	.LASF10:
 6934 02ab 75696E74 		.ascii	"uint8_t\000"
 6934      385F7400 
 6935              	.LASF71:
 6936 02b3 6172725F 		.ascii	"arr_pos\000"
 6936      706F7300 
 6937              	.LASF37:
 6938 02bb 73686C64 		.ascii	"shldr_init\000"
 6938      725F696E 
 6938      697400
 6939              	.LASF133:
 6940 02c6 66656564 		.ascii	"feedback_array\000"
 6940      6261636B 
 6940      5F617272 
 6940      617900
 6941              	.LASF6:
 6942 02d5 6C6F6E67 		.ascii	"long long int\000"
 6942      206C6F6E 
 6942      6720696E 
 6942      7400
 6943              	.LASF142:
 6944 02e3 50485F46 		.ascii	"PH_FLAG\000"
 6944      4C414700 
 6945              	.LASF35:
 6946 02eb 73686F75 		.ascii	"shoulder_states\000"
 6946      6C646572 
 6946      5F737461 
 6946      74657300 
 6947              	.LASF67:
 6948 02fb 63706F73 		.ascii	"cpos\000"
 6948      00
 6949              	.LASF125:
 6950 0300 57525F63 		.ascii	"WR_cspot\000"
 6950      73706F74 
 6950      00
 6951              	.LASF123:
 6952 0309 656C6277 		.ascii	"elbw_array\000"
 6952      5F617272 
 6952      617900
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 153


 6953              	.LASF25:
 6954 0314 77726973 		.ascii	"wristRotate_states\000"
 6954      74526F74 
 6954      6174655F 
 6954      73746174 
 6954      657300
 6955              	.LASF141:
 6956 0327 45464645 		.ascii	"EFFECTOR_FLAG\000"
 6956      43544F52 
 6956      5F464C41 
 6956      4700
 6957              	.LASF130:
 6958 0335 53484F55 		.ascii	"SHOULDER_UPPER_BOUND\000"
 6958      4C444552 
 6958      5F555050 
 6958      45525F42 
 6958      4F554E44 
 6959              	.LASF51:
 6960 034a 70685F73 		.ascii	"ph_start\000"
 6960      74617274 
 6960      00
 6961              	.LASF45:
 6962 0353 65666665 		.ascii	"effector_states\000"
 6962      63746F72 
 6962      5F737461 
 6962      74657300 
 6963              	.LASF157:
 6964 0363 65666665 		.ascii	"effector_state\000"
 6964      63746F72 
 6964      5F737461 
 6964      746500
 6965              	.LASF57:
 6966 0372 626F756E 		.ascii	"bound\000"
 6966      6400
 6967              	.LASF13:
 6968 0378 75696E74 		.ascii	"uint32\000"
 6968      333200
 6969              	.LASF120:
 6970 037f 73686C64 		.ascii	"shldr_cspot\000"
 6970      725F6373 
 6970      706F7400 
 6971              	.LASF136:
 6972 038b 57545F46 		.ascii	"WT_FLAG\000"
 6972      4C414700 
 6973              	.LASF79:
 6974 0393 6D616B65 		.ascii	"make_command\000"
 6974      5F636F6D 
 6974      6D616E64 
 6974      00
 6975              	.LASF98:
 6976 03a0 77726973 		.ascii	"wristTilt\000"
 6976      7454696C 
 6976      7400
 6977              	.LASF139:
 6978 03aa 53484F55 		.ascii	"SHOULDER_FLAG\000"
 6978      4C444552 
 6978      5F464C41 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 154


 6978      4700
 6979              	.LASF31:
 6980 03b8 656C6277 		.ascii	"elbw_start\000"
 6980      5F737461 
 6980      727400
 6981              	.LASF152:
 6982 03c3 77726973 		.ascii	"wristTilt_state\000"
 6982      7454696C 
 6982      745F7374 
 6982      61746500 
 6983              	.LASF70:
 6984 03d3 61727261 		.ascii	"array\000"
 6984      7900
 6985              	.LASF108:
 6986 03d9 73686C64 		.ascii	"shldr_arr_cspot\000"
 6986      725F6172 
 6986      725F6373 
 6986      706F7400 
 6987              	.LASF111:
 6988 03e9 42415F61 		.ascii	"BA_arr_cspot\000"
 6988      72725F63 
 6988      73706F74 
 6988      00
 6989              	.LASF89:
 6990 03f6 73656E64 		.ascii	"send_packet\000"
 6990      5F706163 
 6990      6B657400 
 6991              	.LASF73:
 6992 0402 6368616E 		.ascii	"change\000"
 6992      676500
 6993              	.LASF59:
 6994 0409 6368616E 		.ascii	"channel\000"
 6994      6E656C00 
 6995              	.LASF86:
 6996 0411 706F7446 		.ascii	"potFeedback\000"
 6996      65656462 
 6996      61636B00 
 6997              	.LASF77:
 6998 041d 41525241 		.ascii	"ARRAY_SIZE\000"
 6998      595F5349 
 6998      5A4500
 6999              	.LASF99:
 7000 0428 57545F61 		.ascii	"WT_arr_cspot\000"
 7000      72725F63 
 7000      73706F74 
 7000      00
 7001              	.LASF28:
 7002 0435 726F7461 		.ascii	"rotate_control\000"
 7002      74655F63 
 7002      6F6E7472 
 7002      6F6C00
 7003              	.LASF114:
 7004 0444 70685365 		.ascii	"phSensor\000"
 7004      6E736F72 
 7004      00
 7005              	.LASF2:
 7006 044d 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 155


 7006      7420696E 
 7006      7400
 7007              	.LASF156:
 7008 0457 62617365 		.ascii	"baseAzimuth_state\000"
 7008      417A696D 
 7008      7574685F 
 7008      73746174 
 7008      6500
 7009              	.LASF64:
 7010 0469 61765F61 		.ascii	"av_array\000"
 7010      72726179 
 7010      00
 7011              	.LASF4:
 7012 0472 6C6F6E67 		.ascii	"long int\000"
 7012      20696E74 
 7012      00
 7013              	.LASF22:
 7014 047b 74696C74 		.ascii	"tilt_control\000"
 7014      5F636F6E 
 7014      74726F6C 
 7014      00
 7015              	.LASF88:
 7016 0488 74696D65 		.ascii	"timer_isr\000"
 7016      725F6973 
 7016      7200
 7017              	.LASF149:
 7018 0492 57525F65 		.ascii	"WR_errors\000"
 7018      72726F72 
 7018      7300
 7019              	.LASF153:
 7020 049c 77726973 		.ascii	"wristRotate_state\000"
 7020      74526F74 
 7020      6174655F 
 7020      73746174 
 7020      6500
 7021              	.LASF44:
 7022 04ae 42415F77 		.ascii	"BA_wait\000"
 7022      61697400 
 7023              	.LASF24:
 7024 04b6 77726973 		.ascii	"wristTilt_states\000"
 7024      7454696C 
 7024      745F7374 
 7024      61746573 
 7024      00
 7025              	.LASF134:
 7026 04c7 77697A6E 		.ascii	"wiznet\000"
 7026      657400
 7027              	.LASF9:
 7028 04ce 5F5F7569 		.ascii	"__uint8_t\000"
 7028      6E74385F 
 7028      7400
 7029              	.LASF69:
 7030 04d8 63686563 		.ascii	"check_update\000"
 7030      6B5F7570 
 7030      64617465 
 7030      00
 7031              	.LASF96:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 156


 7032 04e5 53657276 		.ascii	"ServoSpeed\000"
 7032      6F537065 
 7032      656400
 7033              	.LASF49:
 7034 04f0 6566665F 		.ascii	"eff_wait\000"
 7034      77616974 
 7034      00
 7035              	.LASF63:
 7036 04f9 76656C6F 		.ascii	"velocity\000"
 7036      63697479 
 7036      00
 7037              	.LASF121:
 7038 0502 73686C64 		.ascii	"shldr_array\000"
 7038      725F6172 
 7038      72617900 
 7039              	.LASF19:
 7040 050e 73697A65 		.ascii	"sizetype\000"
 7040      74797065 
 7040      00
 7041              	.LASF5:
 7042 0517 6C6F6E67 		.ascii	"long unsigned int\000"
 7042      20756E73 
 7042      69676E65 
 7042      6420696E 
 7042      7400
 7043              	.LASF33:
 7044 0529 656C6277 		.ascii	"elbw_execute\000"
 7044      5F657865 
 7044      63757465 
 7044      00
 7045              	.LASF112:
 7046 0536 62617365 		.ascii	"baseAz_array\000"
 7046      417A5F61 
 7046      72726179 
 7046      00
 7047              	.LASF29:
 7048 0543 726F7461 		.ascii	"rotate_wait\000"
 7048      74655F77 
 7048      61697400 
 7049              	.LASF131:
 7050 054f 53484F55 		.ascii	"SHOULDER_LOWER_BOUND\000"
 7050      4C444552 
 7050      5F4C4F57 
 7050      45525F42 
 7050      4F554E44 
 7051              	.LASF36:
 7052 0564 73686C64 		.ascii	"shldr_start\000"
 7052      725F7374 
 7052      61727400 
 7053              	.LASF80:
 7054 0570 696E666F 		.ascii	"info_array\000"
 7054      5F617272 
 7054      617900
 7055              	.LASF1:
 7056 057b 756E7369 		.ascii	"unsigned char\000"
 7056      676E6564 
 7056      20636861 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 157


 7056      7200
 7057              	.LASF113:
 7058 0589 66696C6C 		.ascii	"fill_data_array\000"
 7058      5F646174 
 7058      615F6172 
 7058      72617900 
 7059              	.LASF101:
 7060 0599 77726973 		.ascii	"wristRotate\000"
 7060      74526F74 
 7060      61746500 
 7061              	.LASF47:
 7062 05a5 6566665F 		.ascii	"eff_init\000"
 7062      696E6974 
 7062      00
 7063              	.LASF106:
 7064 05ae 656C626F 		.ascii	"elbow_array\000"
 7064      775F6172 
 7064      72617900 
 7065              	.LASF38:
 7066 05ba 73686C64 		.ascii	"shldr_execute\000"
 7066      725F6578 
 7066      65637574 
 7066      6500
 7067              	.LASF128:
 7068 05c8 454C424F 		.ascii	"ELBOW_UPPER_BOUND\000"
 7068      575F5550 
 7068      5045525F 
 7068      424F554E 
 7068      4400
 7069              	.LASF54:
 7070 05da 70685F77 		.ascii	"ph_wait\000"
 7070      61697400 
 7071              	.LASF27:
 7072 05e2 726F7461 		.ascii	"rotate_init\000"
 7072      74655F69 
 7072      6E697400 
 7073              	.LASF159:
 7074 05ee 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 7074      4320342E 
 7074      382E3420 
 7074      32303134 
 7074      30353236 
 7075 0621 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 7075      20726576 
 7075      6973696F 
 7075      6E203231 
 7075      31333538 
 7076 0654 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 7076      74643D67 
 7076      6E753939 
 7076      202D6666 
 7076      756E6374 
 7077              	.LASF78:
 7078 0675 636F6D6D 		.ascii	"command\000"
 7078      616E6400 
 7079              	.LASF60:
 7080 067d 64696666 		.ascii	"difference\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 158


 7080      6572656E 
 7080      636500
 7081              	.LASF127:
 7082 0688 74656D70 		.ascii	"temp_val\000"
 7082      5F76616C 
 7082      00
 7083              	.LASF0:
 7084 0691 7369676E 		.ascii	"signed char\000"
 7084      65642063 
 7084      68617200 
 7085              	.LASF90:
 7086 069d 68656172 		.ascii	"heart_beat\000"
 7086      745F6265 
 7086      617400
 7087              	.LASF158:
 7088 06a8 70685365 		.ascii	"phSensor_state\000"
 7088      6E736F72 
 7088      5F737461 
 7088      746500
 7089              	.LASF58:
 7090 06b7 61766572 		.ascii	"average\000"
 7090      61676500 
 7091              	.LASF3:
 7092 06bf 73686F72 		.ascii	"short unsigned int\000"
 7092      7420756E 
 7092      7369676E 
 7092      65642069 
 7092      6E7400
 7093              	.LASF34:
 7094 06d2 656C6277 		.ascii	"elbw_wait\000"
 7094      5F776169 
 7094      7400
 7095              	.LASF143:
 7096 06dc 64726F70 		.ascii	"dropped_packets\000"
 7096      7065645F 
 7096      7061636B 
 7096      65747300 
 7097              	.LASF117:
 7098 06ec 6D61696E 		.ascii	"main\000"
 7098      00
 7099              	.LASF119:
 7100 06f1 42415F61 		.ascii	"BA_array\000"
 7100      72726179 
 7100      00
 7101              	.LASF161:
 7102 06fa 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 7102      73657273 
 7102      5C53616D 
 7102      75656C5C 
 7102      446F6375 
 7103 0727 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 7103      65725F76 
 7103      325C6172 
 7103      6D5F636F 
 7103      6E74726F 
 7104              	.LASF23:
 7105 074b 74696C74 		.ascii	"tilt_wait\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccSfytBk.s 			page 159


 7105      5F776169 
 7105      7400
 7106              	.LASF103:
 7107 0755 57525F61 		.ascii	"WR_array\000"
 7107      72726179 
 7107      00
 7108              	.LASF11:
 7109 075e 75696E74 		.ascii	"uint8\000"
 7109      3800
 7110              	.LASF17:
 7111 0764 646F7562 		.ascii	"double\000"
 7111      6C6500
 7112              	.LASF138:
 7113 076b 454C424F 		.ascii	"ELBOW_FLAG\000"
 7113      575F464C 
 7113      414700
 7114              	.LASF52:
 7115 0776 70685F69 		.ascii	"ph_init\000"
 7115      6E697400 
 7116              	.LASF92:
 7117 077e 73657276 		.ascii	"servoID\000"
 7117      6F494400 
 7118              	.LASF55:
 7119 0786 6973725F 		.ascii	"isr_var\000"
 7119      76617200 
 7120              	.LASF145:
 7121 078e 73686C64 		.ascii	"shldr_errors\000"
 7121      725F6572 
 7121      726F7273 
 7121      00
 7122              	.LASF94:
 7123 079b 53657453 		.ascii	"SetServoTorque\000"
 7123      6572766F 
 7123      546F7271 
 7123      756500
 7124              	.LASF93:
 7125 07aa 706F7369 		.ascii	"position\000"
 7125      74696F6E 
 7125      00
 7126              	.LASF160:
 7127 07b3 2E5C6D61 		.ascii	".\\main.c\000"
 7127      696E2E63 
 7127      00
 7128              	.LASF32:
 7129 07bc 656C6277 		.ascii	"elbw_init\000"
 7129      5F696E69 
 7129      7400
 7130              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

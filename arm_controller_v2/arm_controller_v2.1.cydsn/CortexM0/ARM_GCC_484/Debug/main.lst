ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	test_array,20,4
  21              		.comm	serv_arr_cspot,1,1
  22              		.comm	servo_array,40,4
  23              		.comm	feedback_count,2,2
  24              		.comm	timerFlag,1,1
  25              		.section	.text.timer_isr,"ax",%progbits
  26              		.align	2
  27              		.global	timer_isr
  28              		.code	16
  29              		.thumb_func
  30              		.type	timer_isr, %function
  31              	timer_isr:
  32              	.LFB33:
  33              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** #include <time.h>
   7:.\main.c      **** #include <stdlib.h>
   8:.\main.c      **** #include <stdio.h>
   9:.\main.c      **** 
  10:.\main.c      **** //Initializations of global variables
  11:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
  12:.\main.c      **** //////pointer to each function?
  13:.\main.c      **** #define DATA_ARRAY_SIZE 14
  14:.\main.c      **** uint16 data_array[DATA_ARRAY_SIZE]; //stores the parsed instructions from the wiznet
  15:.\main.c      **** 
  16:.\main.c      **** uint8 wiznet; //bool indicating wiznet interupt high or low
  17:.\main.c      **** uint8 new_pack; //bool indicating a new pack of instructions to carry out
  18:.\main.c      **** 
  19:.\main.c      **** #define TEST_ARRAY_SIZE 10
  20:.\main.c      **** int16 test_array[TEST_ARRAY_SIZE];
  21:.\main.c      **** 
  22:.\main.c      **** #define SERV_ARR_SIZE 20
  23:.\main.c      **** uint8 serv_arr_cspot;
  24:.\main.c      **** uint16 servo_array[SERV_ARR_SIZE];
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 2


  25:.\main.c      **** //uint8 serv_avg_count = 0;
  26:.\main.c      **** 
  27:.\main.c      **** uint16 feedback_count;
  28:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  29:.\main.c      **** 
  30:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  31:.\main.c      **** ///set to the time of the longest path for our code
  32:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  33:.\main.c      **** CY_ISR(timer_isr)
  34:.\main.c      **** {
  34              		.loc 1 34 0
  35              		.cfi_startproc
  36 0000 80B5     		push	{r7, lr}
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 82B0     		sub	sp, sp, #8
  41              		.cfi_def_cfa_offset 16
  42 0004 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  35:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  44              		.loc 1 35 0
  45 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  46 000a 031C     		mov	r3, r0
  47 000c 7B60     		str	r3, [r7, #4]
  36:.\main.c      ****     timerFlag = 1;
  48              		.loc 1 36 0
  49 000e 054B     		ldr	r3, .L2
  50 0010 0122     		mov	r2, #1
  51 0012 1A70     		strb	r2, [r3]
  37:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  52              		.loc 1 37 0
  53 0014 7B68     		ldr	r3, [r7, #4]
  54 0016 181C     		mov	r0, r3
  55 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  38:.\main.c      **** }
  56              		.loc 1 38 0
  57 001c BD46     		mov	sp, r7
  58 001e 02B0     		add	sp, sp, #8
  59              		@ sp needed
  60 0020 80BD     		pop	{r7, pc}
  61              	.L3:
  62 0022 C046     		.align	2
  63              	.L2:
  64 0024 00000000 		.word	timerFlag
  65              		.cfi_endproc
  66              	.LFE33:
  67              		.size	timer_isr, .-timer_isr
  68              		.section	.text.fill_data_array,"ax",%progbits
  69              		.align	2
  70              		.global	fill_data_array
  71              		.code	16
  72              		.thumb_func
  73              		.type	fill_data_array, %function
  74              	fill_data_array:
  75              	.LFB34:
  39:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 3


  40:.\main.c      **** 
  41:.\main.c      **** //Funtion declarations/definitions
  42:.\main.c      **** //TODO do we need to make a header for good practice?
  43:.\main.c      **** 
  44:.\main.c      **** //---------------------------------------------------
  45:.\main.c      **** //    Function stubs for the header
  46:.\main.c      **** //---------------------------------------------------
  47:.\main.c      **** void fill_data_array();
  48:.\main.c      **** void baseAzimuth();
  49:.\main.c      **** void shoulder();
  50:.\main.c      **** void elbow();
  51:.\main.c      **** void wristTilt();
  52:.\main.c      **** void wristRotate();
  53:.\main.c      **** void send_feedback();
  54:.\main.c      **** 
  55:.\main.c      **** void servo();
  56:.\main.c      **** void servo1();
  57:.\main.c      **** 
  58:.\main.c      **** void led();
  59:.\main.c      **** void fill_data_array1();
  60:.\main.c      **** 
  61:.\main.c      **** //--------------------------------------------------- END Function Stubs
  62:.\main.c      **** 
  63:.\main.c      **** 
  64:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  65:.\main.c      **** void fill_data_array() //maybe take param: uint8* array
  66:.\main.c      **** {
  76              		.loc 1 66 0
  77              		.cfi_startproc
  78 0000 80B5     		push	{r7, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 82B0     		sub	sp, sp, #8
  83              		.cfi_def_cfa_offset 16
  84 0004 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  67:.\main.c      ****     
  68:.\main.c      ****     //read one byte at a time
  69:.\main.c      ****     uint8 c = 0; //UART_1_UartGetChar();
  86              		.loc 1 69 0
  87 0006 FB1D     		add	r3, r7, #7
  88 0008 0022     		mov	r2, #0
  89 000a 1A70     		strb	r2, [r3]
  70:.\main.c      ****     
  71:.\main.c      **** 
  72:.\main.c      ****     if(c == 'q'){
  90              		.loc 1 72 0
  91 000c FB1D     		add	r3, r7, #7
  92 000e 1B78     		ldrb	r3, [r3]
  93 0010 712B     		cmp	r3, #113
  94 0012 04D1     		bne	.L5
  73:.\main.c      ****         data_array[1] = 2000;
  95              		.loc 1 73 0
  96 0014 354B     		ldr	r3, .L18
  97 0016 FA22     		mov	r2, #250
  98 0018 D200     		lsl	r2, r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 4


  99 001a 5A80     		strh	r2, [r3, #2]
 100 001c 62E0     		b	.L4
 101              	.L5:
  74:.\main.c      ****     }
  75:.\main.c      ****     else if(c == 'w'){
 102              		.loc 1 75 0
 103 001e FB1D     		add	r3, r7, #7
 104 0020 1B78     		ldrb	r3, [r3]
 105 0022 772B     		cmp	r3, #119
 106 0024 03D1     		bne	.L7
  76:.\main.c      ****         data_array[1] = 1750;
 107              		.loc 1 76 0
 108 0026 314B     		ldr	r3, .L18
 109 0028 314A     		ldr	r2, .L18+4
 110 002a 5A80     		strh	r2, [r3, #2]
 111 002c 5AE0     		b	.L4
 112              	.L7:
  77:.\main.c      ****     }
  78:.\main.c      ****     else if(c == 'e'){
 113              		.loc 1 78 0
 114 002e FB1D     		add	r3, r7, #7
 115 0030 1B78     		ldrb	r3, [r3]
 116 0032 652B     		cmp	r3, #101
 117 0034 03D1     		bne	.L8
  79:.\main.c      ****         data_array[1] = 1500;
 118              		.loc 1 79 0
 119 0036 2D4B     		ldr	r3, .L18
 120 0038 2E4A     		ldr	r2, .L18+8
 121 003a 5A80     		strh	r2, [r3, #2]
 122 003c 52E0     		b	.L4
 123              	.L8:
  80:.\main.c      ****     }
  81:.\main.c      ****     else if(c == 'r'){
 124              		.loc 1 81 0
 125 003e FB1D     		add	r3, r7, #7
 126 0040 1B78     		ldrb	r3, [r3]
 127 0042 722B     		cmp	r3, #114
 128 0044 03D1     		bne	.L9
  82:.\main.c      ****         data_array[1] = 1250;
 129              		.loc 1 82 0
 130 0046 294B     		ldr	r3, .L18
 131 0048 2B4A     		ldr	r2, .L18+12
 132 004a 5A80     		strh	r2, [r3, #2]
 133 004c 4AE0     		b	.L4
 134              	.L9:
  83:.\main.c      ****     }
  84:.\main.c      ****     else if(c == 't'){
 135              		.loc 1 84 0
 136 004e FB1D     		add	r3, r7, #7
 137 0050 1B78     		ldrb	r3, [r3]
 138 0052 742B     		cmp	r3, #116
 139 0054 04D1     		bne	.L10
  85:.\main.c      ****         data_array[1] = 1000;
 140              		.loc 1 85 0
 141 0056 254B     		ldr	r3, .L18
 142 0058 FA22     		mov	r2, #250
 143 005a 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 5


 144 005c 5A80     		strh	r2, [r3, #2]
 145 005e 41E0     		b	.L4
 146              	.L10:
  86:.\main.c      ****     }    
  87:.\main.c      ****     else if(c == '1'){
 147              		.loc 1 87 0
 148 0060 FB1D     		add	r3, r7, #7
 149 0062 1B78     		ldrb	r3, [r3]
 150 0064 312B     		cmp	r3, #49
 151 0066 04D1     		bne	.L11
  88:.\main.c      ****         data_array[2] = 1000;
 152              		.loc 1 88 0
 153 0068 204B     		ldr	r3, .L18
 154 006a FA22     		mov	r2, #250
 155 006c 9200     		lsl	r2, r2, #2
 156 006e 9A80     		strh	r2, [r3, #4]
 157 0070 38E0     		b	.L4
 158              	.L11:
  89:.\main.c      ****     }
  90:.\main.c      ****     else if(c == '2'){
 159              		.loc 1 90 0
 160 0072 FB1D     		add	r3, r7, #7
 161 0074 1B78     		ldrb	r3, [r3]
 162 0076 322B     		cmp	r3, #50
 163 0078 03D1     		bne	.L12
  91:.\main.c      ****         data_array[2] = 5000;
 164              		.loc 1 91 0
 165 007a 1C4B     		ldr	r3, .L18
 166 007c 1F4A     		ldr	r2, .L18+16
 167 007e 9A80     		strh	r2, [r3, #4]
 168 0080 30E0     		b	.L4
 169              	.L12:
  92:.\main.c      ****     }
  93:.\main.c      ****     else if(c == '3'){
 170              		.loc 1 93 0
 171 0082 FB1D     		add	r3, r7, #7
 172 0084 1B78     		ldrb	r3, [r3]
 173 0086 332B     		cmp	r3, #51
 174 0088 03D1     		bne	.L13
  94:.\main.c      ****         data_array[2] = 10000;
 175              		.loc 1 94 0
 176 008a 184B     		ldr	r3, .L18
 177 008c 1C4A     		ldr	r2, .L18+20
 178 008e 9A80     		strh	r2, [r3, #4]
 179 0090 28E0     		b	.L4
 180              	.L13:
  95:.\main.c      ****     }
  96:.\main.c      ****     else if(c == '4'){
 181              		.loc 1 96 0
 182 0092 FB1D     		add	r3, r7, #7
 183 0094 1B78     		ldrb	r3, [r3]
 184 0096 342B     		cmp	r3, #52
 185 0098 03D1     		bne	.L14
  97:.\main.c      ****         data_array[2] = 15000;
 186              		.loc 1 97 0
 187 009a 144B     		ldr	r3, .L18
 188 009c 194A     		ldr	r2, .L18+24
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 6


 189 009e 9A80     		strh	r2, [r3, #4]
 190 00a0 20E0     		b	.L4
 191              	.L14:
  98:.\main.c      ****     }
  99:.\main.c      ****     else if(c == '5'){
 192              		.loc 1 99 0
 193 00a2 FB1D     		add	r3, r7, #7
 194 00a4 1B78     		ldrb	r3, [r3]
 195 00a6 352B     		cmp	r3, #53
 196 00a8 03D1     		bne	.L15
 100:.\main.c      ****         data_array[2] =19000;
 197              		.loc 1 100 0
 198 00aa 104B     		ldr	r3, .L18
 199 00ac 164A     		ldr	r2, .L18+28
 200 00ae 9A80     		strh	r2, [r3, #4]
 201 00b0 18E0     		b	.L4
 202              	.L15:
 101:.\main.c      ****     }    
 102:.\main.c      ****     else if(c == 'j'){
 203              		.loc 1 102 0
 204 00b2 FB1D     		add	r3, r7, #7
 205 00b4 1B78     		ldrb	r3, [r3]
 206 00b6 6A2B     		cmp	r3, #106
 207 00b8 04D1     		bne	.L16
 103:.\main.c      ****         data_array[3] = 1000;
 208              		.loc 1 103 0
 209 00ba 0C4B     		ldr	r3, .L18
 210 00bc FA22     		mov	r2, #250
 211 00be 9200     		lsl	r2, r2, #2
 212 00c0 DA80     		strh	r2, [r3, #6]
 213 00c2 0FE0     		b	.L4
 214              	.L16:
 104:.\main.c      ****     }
 105:.\main.c      ****     else if(c == 'k'){
 215              		.loc 1 105 0
 216 00c4 FB1D     		add	r3, r7, #7
 217 00c6 1B78     		ldrb	r3, [r3]
 218 00c8 6B2B     		cmp	r3, #107
 219 00ca 03D1     		bne	.L17
 106:.\main.c      ****         data_array[3] = 1500;
 220              		.loc 1 106 0
 221 00cc 074B     		ldr	r3, .L18
 222 00ce 094A     		ldr	r2, .L18+8
 223 00d0 DA80     		strh	r2, [r3, #6]
 224 00d2 07E0     		b	.L4
 225              	.L17:
 107:.\main.c      ****     }
 108:.\main.c      ****     else if(c == 'l'){
 226              		.loc 1 108 0
 227 00d4 FB1D     		add	r3, r7, #7
 228 00d6 1B78     		ldrb	r3, [r3]
 229 00d8 6C2B     		cmp	r3, #108
 230 00da 03D1     		bne	.L4
 109:.\main.c      ****         data_array[3] =2000;
 231              		.loc 1 109 0
 232 00dc 034B     		ldr	r3, .L18
 233 00de FA22     		mov	r2, #250
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 7


 234 00e0 D200     		lsl	r2, r2, #3
 235 00e2 DA80     		strh	r2, [r3, #6]
 236              	.L4:
 110:.\main.c      ****     }    
 111:.\main.c      **** 
 112:.\main.c      **** }
 237              		.loc 1 112 0
 238 00e4 BD46     		mov	sp, r7
 239 00e6 02B0     		add	sp, sp, #8
 240              		@ sp needed
 241 00e8 80BD     		pop	{r7, pc}
 242              	.L19:
 243 00ea C046     		.align	2
 244              	.L18:
 245 00ec 00000000 		.word	data_array
 246 00f0 D6060000 		.word	1750
 247 00f4 DC050000 		.word	1500
 248 00f8 E2040000 		.word	1250
 249 00fc 88130000 		.word	5000
 250 0100 10270000 		.word	10000
 251 0104 983A0000 		.word	15000
 252 0108 384A0000 		.word	19000
 253              		.cfi_endproc
 254              	.LFE34:
 255              		.size	fill_data_array, .-fill_data_array
 256              		.section	.text.fill_data_array1,"ax",%progbits
 257              		.align	2
 258              		.global	fill_data_array1
 259              		.code	16
 260              		.thumb_func
 261              		.type	fill_data_array1, %function
 262              	fill_data_array1:
 263              	.LFB35:
 113:.\main.c      **** 
 114:.\main.c      **** void fill_data_array1()
 115:.\main.c      **** {
 264              		.loc 1 115 0
 265              		.cfi_startproc
 266 0000 80B5     		push	{r7, lr}
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 82B0     		sub	sp, sp, #8
 271              		.cfi_def_cfa_offset 16
 272 0004 00AF     		add	r7, sp, #0
 273              		.cfi_def_cfa_register 7
 116:.\main.c      ****     uint8 i = 0;
 274              		.loc 1 116 0
 275 0006 FB1D     		add	r3, r7, #7
 276 0008 0022     		mov	r2, #0
 277 000a 1A70     		strb	r2, [r3]
 117:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 278              		.loc 1 117 0
 279 000c FB1D     		add	r3, r7, #7
 280 000e 0022     		mov	r2, #0
 281 0010 1A70     		strb	r2, [r3]
 282 0012 0FE0     		b	.L21
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 8


 283              	.L22:
 118:.\main.c      ****     {
 119:.\main.c      ****         data_array[i] = test_array[i];
 284              		.loc 1 119 0 discriminator 2
 285 0014 FB1D     		add	r3, r7, #7
 286 0016 1A78     		ldrb	r2, [r3]
 287 0018 FB1D     		add	r3, r7, #7
 288 001a 1978     		ldrb	r1, [r3]
 289 001c 094B     		ldr	r3, .L23
 290 001e 4900     		lsl	r1, r1, #1
 291 0020 CB5A     		ldrh	r3, [r1, r3]
 292 0022 99B2     		uxth	r1, r3
 293 0024 084B     		ldr	r3, .L23+4
 294 0026 5200     		lsl	r2, r2, #1
 295 0028 D152     		strh	r1, [r2, r3]
 117:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 296              		.loc 1 117 0 discriminator 2
 297 002a FB1D     		add	r3, r7, #7
 298 002c 1A78     		ldrb	r2, [r3]
 299 002e FB1D     		add	r3, r7, #7
 300 0030 0132     		add	r2, r2, #1
 301 0032 1A70     		strb	r2, [r3]
 302              	.L21:
 117:.\main.c      ****     for(i = 0; i < TEST_ARRAY_SIZE; i++)
 303              		.loc 1 117 0 is_stmt 0 discriminator 1
 304 0034 FB1D     		add	r3, r7, #7
 305 0036 1B78     		ldrb	r3, [r3]
 306 0038 092B     		cmp	r3, #9
 307 003a EBD9     		bls	.L22
 120:.\main.c      ****     }
 121:.\main.c      **** }
 308              		.loc 1 121 0 is_stmt 1
 309 003c BD46     		mov	sp, r7
 310 003e 02B0     		add	sp, sp, #8
 311              		@ sp needed
 312 0040 80BD     		pop	{r7, pc}
 313              	.L24:
 314 0042 C046     		.align	2
 315              	.L23:
 316 0044 00000000 		.word	test_array
 317 0048 00000000 		.word	data_array
 318              		.cfi_endproc
 319              	.LFE35:
 320              		.size	fill_data_array1, .-fill_data_array1
 321              		.section	.text.baseAzimuth,"ax",%progbits
 322              		.align	2
 323              		.global	baseAzimuth
 324              		.code	16
 325              		.thumb_func
 326              		.type	baseAzimuth, %function
 327              	baseAzimuth:
 328              	.LFB36:
 122:.\main.c      **** 
 123:.\main.c      **** //control the turret
 124:.\main.c      **** void baseAzimuth()
 125:.\main.c      **** {
 329              		.loc 1 125 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 9


 330              		.cfi_startproc
 331 0000 80B5     		push	{r7, lr}
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
 335 0002 00AF     		add	r7, sp, #0
 336              		.cfi_def_cfa_register 7
 126:.\main.c      ****     //take instruction from data_array
 127:.\main.c      ****     //smooth input
 128:.\main.c      ****     //actuate the turret using PWM
 129:.\main.c      **** }
 337              		.loc 1 129 0
 338 0004 BD46     		mov	sp, r7
 339              		@ sp needed
 340 0006 80BD     		pop	{r7, pc}
 341              		.cfi_endproc
 342              	.LFE36:
 343              		.size	baseAzimuth, .-baseAzimuth
 344              		.comm	shldr_state,1,1
 345              		.section	.text.shoulder,"ax",%progbits
 346              		.align	2
 347              		.global	shoulder
 348              		.code	16
 349              		.thumb_func
 350              		.type	shoulder, %function
 351              	shoulder:
 352              	.LFB37:
 130:.\main.c      **** 
 131:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
 132:.\main.c      **** //control the shoulder
 133:.\main.c      **** void shoulder()
 134:.\main.c      **** {
 353              		.loc 1 134 0
 354              		.cfi_startproc
 355 0000 80B5     		push	{r7, lr}
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 7, -8
 358              		.cfi_offset 14, -4
 359 0002 00AF     		add	r7, sp, #0
 360              		.cfi_def_cfa_register 7
 135:.\main.c      ****     //take instruction from data_array
 136:.\main.c      ****     //smooth input
 137:.\main.c      ****     //actuate the shoulder using PWM
 138:.\main.c      ****     //get feedback
 139:.\main.c      ****     
 140:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 141:.\main.c      ****     //switch statement for state actions
 142:.\main.c      **** 		//start
 143:.\main.c      **** 			//break
 144:.\main.c      **** 		//initialize
 145:.\main.c      **** 			//create smoothing array
 146:.\main.c      **** 		//feedback
 147:.\main.c      **** 			//read feedback
 148:.\main.c      **** 		//execute
 149:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 150:.\main.c      **** 			//calculate average of value in array
 151:.\main.c      ****     
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 10


 152:.\main.c      ****     switch(shldr_state)
 361              		.loc 1 152 0
 362 0004 0E4B     		ldr	r3, .L34
 363 0006 1B78     		ldrb	r3, [r3]
 364 0008 012B     		cmp	r3, #1
 365 000a 0CD0     		beq	.L28
 366 000c 02DC     		bgt	.L29
 367 000e 002B     		cmp	r3, #0
 368 0010 05D0     		beq	.L30
 369 0012 12E0     		b	.L26
 370              	.L29:
 371 0014 022B     		cmp	r3, #2
 372 0016 0FD0     		beq	.L33
 373 0018 032B     		cmp	r3, #3
 374 001a 08D0     		beq	.L32
 375 001c 0DE0     		b	.L26
 376              	.L30:
 153:.\main.c      ****     {//switch staatement for state transitions
 154:.\main.c      **** 		case shldr_start: //start
 155:.\main.c      **** 			//next state will be init
 156:.\main.c      ****             shldr_state = shldr_init;
 377              		.loc 1 156 0
 378 001e 084B     		ldr	r3, .L34
 379 0020 0122     		mov	r2, #1
 380 0022 1A70     		strb	r2, [r3]
 157:.\main.c      ****             break;
 381              		.loc 1 157 0
 382 0024 09E0     		b	.L26
 383              	.L28:
 158:.\main.c      ****         
 159:.\main.c      **** 		case shldr_init: //initialize
 160:.\main.c      **** 			//next state will be feedback
 161:.\main.c      ****             shldr_state = shldr_fdbk;
 384              		.loc 1 161 0
 385 0026 064B     		ldr	r3, .L34
 386 0028 0222     		mov	r2, #2
 387 002a 1A70     		strb	r2, [r3]
 162:.\main.c      ****             break;
 388              		.loc 1 162 0
 389 002c 05E0     		b	.L26
 390              	.L32:
 163:.\main.c      ****         
 164:.\main.c      **** 		case shldr_fdbk://feedback
 165:.\main.c      **** 			//if position ok relative to average
 166:.\main.c      **** 				//execute
 167:.\main.c      **** 			//else if not ok
 168:.\main.c      **** 				//report problem
 169:.\main.c      ****             break;
 170:.\main.c      **** 		case shldr_exe://execute
 171:.\main.c      **** 			//next state will be report
 172:.\main.c      ****             shldr_state = shldr_fdbk;
 391              		.loc 1 172 0
 392 002e 044B     		ldr	r3, .L34
 393 0030 0222     		mov	r2, #2
 394 0032 1A70     		strb	r2, [r3]
 173:.\main.c      ****             break;
 395              		.loc 1 173 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 11


 396 0034 C046     		mov	r8, r8
 397 0036 00E0     		b	.L26
 398              	.L33:
 169:.\main.c      ****             break;
 399              		.loc 1 169 0
 400 0038 C046     		mov	r8, r8
 401              	.L26:
 174:.\main.c      ****     }
 175:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 176:.\main.c      **** }
 402              		.loc 1 176 0
 403 003a BD46     		mov	sp, r7
 404              		@ sp needed
 405 003c 80BD     		pop	{r7, pc}
 406              	.L35:
 407 003e C046     		.align	2
 408              	.L34:
 409 0040 00000000 		.word	shldr_state
 410              		.cfi_endproc
 411              	.LFE37:
 412              		.size	shoulder, .-shoulder
 413              		.section	.text.elbow,"ax",%progbits
 414              		.align	2
 415              		.global	elbow
 416              		.code	16
 417              		.thumb_func
 418              		.type	elbow, %function
 419              	elbow:
 420              	.LFB38:
 177:.\main.c      **** 
 178:.\main.c      **** //control the elbow
 179:.\main.c      **** void elbow()
 180:.\main.c      **** {
 421              		.loc 1 180 0
 422              		.cfi_startproc
 423 0000 80B5     		push	{r7, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 00AF     		add	r7, sp, #0
 428              		.cfi_def_cfa_register 7
 181:.\main.c      ****     //take instruction from data_array
 182:.\main.c      ****     //smooth input
 183:.\main.c      ****     //actuate the elbow using PWM
 184:.\main.c      ****     //get feedback
 185:.\main.c      **** }
 429              		.loc 1 185 0
 430 0004 BD46     		mov	sp, r7
 431              		@ sp needed
 432 0006 80BD     		pop	{r7, pc}
 433              		.cfi_endproc
 434              	.LFE38:
 435              		.size	elbow, .-elbow
 436              		.comm	wristTilt_state,1,1
 437              		.section	.text.wristTilt,"ax",%progbits
 438              		.align	2
 439              		.global	wristTilt
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 12


 440              		.code	16
 441              		.thumb_func
 442              		.type	wristTilt, %function
 443              	wristTilt:
 444              	.LFB39:
 186:.\main.c      **** 
 187:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 188:.\main.c      **** //control the tilting motion of the wrist
 189:.\main.c      **** void wristTilt()
 190:.\main.c      **** {
 445              		.loc 1 190 0
 446              		.cfi_startproc
 447 0000 80B5     		push	{r7, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 191:.\main.c      ****     // Overview
 192:.\main.c      ****     //take instruction from data_array
 193:.\main.c      ****     //smooth input
 194:.\main.c      ****     //actuate the tilting using UART
 195:.\main.c      ****     //get feedback
 196:.\main.c      **** 
 197:.\main.c      ****     //-------------------------- 
 198:.\main.c      ****     // Dynamixel Servo specific
 199:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 200:.\main.c      ****     // TODO: Set the desired position
 201:.\main.c      **** 
 202:.\main.c      ****     //--------------------------
 203:.\main.c      ****     // State machine
 204:.\main.c      ****     
 205:.\main.c      ****         // Action
 206:.\main.c      ****     switch(wristTilt_state)
 453              		.loc 1 206 0
 454 0004 0F4B     		ldr	r3, .L53
 455 0006 1B78     		ldrb	r3, [r3]
 456 0008 012B     		cmp	r3, #1
 457 000a 06D0     		beq	.L50
 458 000c 07DC     		bgt	.L51
 459 000e 002B     		cmp	r3, #0
 460 0010 06D1     		bne	.L38
 207:.\main.c      ****     {
 208:.\main.c      ****         case tilt_init:
 209:.\main.c      ****             wristTilt_state = tilt_start;
 461              		.loc 1 209 0
 462 0012 0C4B     		ldr	r3, .L53
 463 0014 0122     		mov	r2, #1
 464 0016 1A70     		strb	r2, [r3]
 210:.\main.c      ****             break;
 465              		.loc 1 210 0
 466 0018 02E0     		b	.L38
 467              	.L50:
 211:.\main.c      ****         case tilt_start:
 212:.\main.c      ****             // Set the torque - this is a one time thing
 213:.\main.c      ****             // Set the speed - I think this is a one time thing
 214:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 13


 468              		.loc 1 214 0
 469 001a C046     		mov	r8, r8
 470 001c 00E0     		b	.L38
 471              	.L51:
 215:.\main.c      ****         case tilt_control:
 216:.\main.c      ****             break;
 472              		.loc 1 216 0
 473 001e C046     		mov	r8, r8
 474              	.L38:
 217:.\main.c      ****         case tilt_feedback:
 218:.\main.c      ****             break;
 219:.\main.c      ****     }
 220:.\main.c      ****         // Transistion
 221:.\main.c      ****     switch(wristTilt_state)
 475              		.loc 1 221 0
 476 0020 084B     		ldr	r3, .L53
 477 0022 1B78     		ldrb	r3, [r3]
 478 0024 012B     		cmp	r3, #1
 479 0026 06D0     		beq	.L45
 480 0028 09DC     		bgt	.L52
 481 002a 002B     		cmp	r3, #0
 482 002c 08D1     		bne	.L37
 222:.\main.c      ****     {
 223:.\main.c      ****         case tilt_init:
 224:.\main.c      ****             wristTilt_state = tilt_start;
 483              		.loc 1 224 0
 484 002e 054B     		ldr	r3, .L53
 485 0030 0122     		mov	r2, #1
 486 0032 1A70     		strb	r2, [r3]
 225:.\main.c      ****             break;
 487              		.loc 1 225 0
 488 0034 04E0     		b	.L37
 489              	.L45:
 226:.\main.c      ****         case tilt_start:
 227:.\main.c      ****             wristTilt_state = tilt_control;
 490              		.loc 1 227 0
 491 0036 034B     		ldr	r3, .L53
 492 0038 0222     		mov	r2, #2
 493 003a 1A70     		strb	r2, [r3]
 228:.\main.c      ****             break;
 494              		.loc 1 228 0
 495 003c 00E0     		b	.L37
 496              	.L52:
 229:.\main.c      ****         case tilt_control:
 230:.\main.c      ****             break;
 497              		.loc 1 230 0
 498 003e C046     		mov	r8, r8
 499              	.L37:
 231:.\main.c      ****         case tilt_feedback:
 232:.\main.c      ****             break;
 233:.\main.c      ****     }
 234:.\main.c      **** }
 500              		.loc 1 234 0
 501 0040 BD46     		mov	sp, r7
 502              		@ sp needed
 503 0042 80BD     		pop	{r7, pc}
 504              	.L54:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 14


 505              		.align	2
 506              	.L53:
 507 0044 00000000 		.word	wristTilt_state
 508              		.cfi_endproc
 509              	.LFE39:
 510              		.size	wristTilt, .-wristTilt
 511              		.comm	wristRotate_state,1,1
 512              		.section	.text.wristRotate,"ax",%progbits
 513              		.align	2
 514              		.global	wristRotate
 515              		.code	16
 516              		.thumb_func
 517              		.type	wristRotate, %function
 518              	wristRotate:
 519              	.LFB40:
 235:.\main.c      **** 
 236:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 237:.\main.c      **** //control the rotating motion of the wrist
 238:.\main.c      **** void wristRotate()
 239:.\main.c      **** {
 520              		.loc 1 239 0
 521              		.cfi_startproc
 522 0000 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0002 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 240:.\main.c      ****     //Overview
 241:.\main.c      ****     //take instruction from data_array
 242:.\main.c      ****     //smooth input
 243:.\main.c      ****     //actuate the tilting using UART
 244:.\main.c      ****     //get feedback
 245:.\main.c      **** 
 246:.\main.c      ****     //-------------------------- 
 247:.\main.c      ****     // Dynamixel Servo specific
 248:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 249:.\main.c      ****     // TODO: Set the desired position
 250:.\main.c      **** 
 251:.\main.c      ****     //--------------------------
 252:.\main.c      ****     // State machine
 253:.\main.c      ****     
 254:.\main.c      ****         // Action
 255:.\main.c      ****     switch(wristRotate_state)
 528              		.loc 1 255 0
 529 0004 0F4B     		ldr	r3, .L71
 530 0006 1B78     		ldrb	r3, [r3]
 531 0008 012B     		cmp	r3, #1
 532 000a 06D0     		beq	.L68
 533 000c 07DC     		bgt	.L69
 534 000e 002B     		cmp	r3, #0
 535 0010 06D1     		bne	.L56
 256:.\main.c      ****     {
 257:.\main.c      ****         case rotate_init:
 258:.\main.c      ****             wristRotate_state = rotate_start;
 536              		.loc 1 258 0
 537 0012 0C4B     		ldr	r3, .L71
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 15


 538 0014 0122     		mov	r2, #1
 539 0016 1A70     		strb	r2, [r3]
 259:.\main.c      ****             break;
 540              		.loc 1 259 0
 541 0018 02E0     		b	.L56
 542              	.L68:
 260:.\main.c      ****         case rotate_start:
 261:.\main.c      ****             // Set the torque - this is a one time thing
 262:.\main.c      ****             // Set the speed - I think this is a one time thing
 263:.\main.c      ****             break;
 543              		.loc 1 263 0
 544 001a C046     		mov	r8, r8
 545 001c 00E0     		b	.L56
 546              	.L69:
 264:.\main.c      ****         case rotate_control:
 265:.\main.c      ****             break;
 547              		.loc 1 265 0
 548 001e C046     		mov	r8, r8
 549              	.L56:
 266:.\main.c      ****         case rotate_feedback:
 267:.\main.c      ****             break;
 268:.\main.c      ****     }
 269:.\main.c      ****         // Transistion
 270:.\main.c      ****     switch(wristRotate_state)
 550              		.loc 1 270 0
 551 0020 084B     		ldr	r3, .L71
 552 0022 1B78     		ldrb	r3, [r3]
 553 0024 012B     		cmp	r3, #1
 554 0026 06D0     		beq	.L63
 555 0028 09DC     		bgt	.L70
 556 002a 002B     		cmp	r3, #0
 557 002c 08D1     		bne	.L55
 271:.\main.c      ****     {
 272:.\main.c      ****         case rotate_init:
 273:.\main.c      ****             wristRotate_state = rotate_start;
 558              		.loc 1 273 0
 559 002e 054B     		ldr	r3, .L71
 560 0030 0122     		mov	r2, #1
 561 0032 1A70     		strb	r2, [r3]
 274:.\main.c      ****             break;
 562              		.loc 1 274 0
 563 0034 04E0     		b	.L55
 564              	.L63:
 275:.\main.c      ****         case rotate_start:
 276:.\main.c      ****             wristRotate_state = rotate_control;
 565              		.loc 1 276 0
 566 0036 034B     		ldr	r3, .L71
 567 0038 0222     		mov	r2, #2
 568 003a 1A70     		strb	r2, [r3]
 277:.\main.c      ****             break;
 569              		.loc 1 277 0
 570 003c 00E0     		b	.L55
 571              	.L70:
 278:.\main.c      ****         case rotate_control:
 279:.\main.c      ****             break;
 572              		.loc 1 279 0
 573 003e C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 16


 574              	.L55:
 280:.\main.c      ****         case rotate_feedback:
 281:.\main.c      ****             break;
 282:.\main.c      ****     }
 283:.\main.c      **** }
 575              		.loc 1 283 0
 576 0040 BD46     		mov	sp, r7
 577              		@ sp needed
 578 0042 80BD     		pop	{r7, pc}
 579              	.L72:
 580              		.align	2
 581              	.L71:
 582 0044 00000000 		.word	wristRotate_state
 583              		.cfi_endproc
 584              	.LFE40:
 585              		.size	wristRotate, .-wristRotate
 586              		.section	.text.send_feedback,"ax",%progbits
 587              		.align	2
 588              		.global	send_feedback
 589              		.code	16
 590              		.thumb_func
 591              		.type	send_feedback, %function
 592              	send_feedback:
 593              	.LFB41:
 284:.\main.c      **** 
 285:.\main.c      **** void send_feedback()
 286:.\main.c      **** {
 594              		.loc 1 286 0
 595              		.cfi_startproc
 596 0000 80B5     		push	{r7, lr}
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 7, -8
 599              		.cfi_offset 14, -4
 600 0002 00AF     		add	r7, sp, #0
 601              		.cfi_def_cfa_register 7
 287:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 288:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 289:.\main.c      ****     //TODO define system state
 290:.\main.c      ****     //send packet via serial to wiznet
 291:.\main.c      **** }
 602              		.loc 1 291 0
 603 0004 BD46     		mov	sp, r7
 604              		@ sp needed
 605 0006 80BD     		pop	{r7, pc}
 606              		.cfi_endproc
 607              	.LFE41:
 608              		.size	send_feedback, .-send_feedback
 609              		.comm	led_state,1,1
 610              		.section	.text.led,"ax",%progbits
 611              		.align	2
 612              		.global	led
 613              		.code	16
 614              		.thumb_func
 615              		.type	led, %function
 616              	led:
 617              	.LFB42:
 292:.\main.c      **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 17


 293:.\main.c      **** enum led_states {l_start,l_different,l_wait} led_state;
 294:.\main.c      **** void led()
 295:.\main.c      **** {
 618              		.loc 1 295 0
 619              		.cfi_startproc
 620 0000 80B5     		push	{r7, lr}
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 82B0     		sub	sp, sp, #8
 625              		.cfi_def_cfa_offset 16
 626 0004 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 296:.\main.c      ****     uint16 old = 0;
 628              		.loc 1 296 0
 629 0006 BB1D     		add	r3, r7, #6
 630 0008 0022     		mov	r2, #0
 631 000a 1A80     		strh	r2, [r3]
 297:.\main.c      ****     switch(led_state)
 632              		.loc 1 297 0
 633 000c 1C4B     		ldr	r3, .L88
 634 000e 1B78     		ldrb	r3, [r3]
 635 0010 012B     		cmp	r3, #1
 636 0012 09D1     		bne	.L87
 298:.\main.c      ****     {
 299:.\main.c      ****         case l_start:
 300:.\main.c      ****             break;
 301:.\main.c      ****         
 302:.\main.c      ****         case l_different:
 303:.\main.c      ****             PWM_1_WriteCompare1(data_array[1]);
 637              		.loc 1 303 0
 638 0014 1B4B     		ldr	r3, .L88+4
 639 0016 5B88     		ldrh	r3, [r3, #2]
 640 0018 181C     		mov	r0, r3
 641 001a FFF7FEFF 		bl	PWM_1_WriteCompare1
 304:.\main.c      ****             old = data_array[1];
 642              		.loc 1 304 0
 643 001e BB1D     		add	r3, r7, #6
 644 0020 184A     		ldr	r2, .L88+4
 645 0022 5288     		ldrh	r2, [r2, #2]
 646 0024 1A80     		strh	r2, [r3]
 305:.\main.c      ****             break;
 647              		.loc 1 305 0
 648 0026 00E0     		b	.L75
 649              	.L87:
 306:.\main.c      ****             
 307:.\main.c      ****         case l_wait:
 308:.\main.c      ****             break;
 650              		.loc 1 308 0
 651 0028 C046     		mov	r8, r8
 652              	.L75:
 309:.\main.c      ****     }
 310:.\main.c      ****     
 311:.\main.c      ****     switch(led_state)
 653              		.loc 1 311 0
 654 002a 154B     		ldr	r3, .L88
 655 002c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 18


 656 002e 012B     		cmp	r3, #1
 657 0030 07D0     		beq	.L80
 658 0032 022B     		cmp	r3, #2
 659 0034 13D0     		beq	.L81
 660 0036 002B     		cmp	r3, #0
 661 0038 1FD1     		bne	.L74
 312:.\main.c      ****     {
 313:.\main.c      ****         case l_start:
 314:.\main.c      ****             led_state = l_wait;
 662              		.loc 1 314 0
 663 003a 114B     		ldr	r3, .L88
 664 003c 0222     		mov	r2, #2
 665 003e 1A70     		strb	r2, [r3]
 315:.\main.c      ****             break;
 666              		.loc 1 315 0
 667 0040 1BE0     		b	.L74
 668              	.L80:
 316:.\main.c      ****         
 317:.\main.c      ****         case l_different:
 318:.\main.c      ****             if(data_array[1] != old)
 669              		.loc 1 318 0
 670 0042 104B     		ldr	r3, .L88+4
 671 0044 5B88     		ldrh	r3, [r3, #2]
 672 0046 BA1D     		add	r2, r7, #6
 673 0048 1288     		ldrh	r2, [r2]
 674 004a 9A42     		cmp	r2, r3
 675 004c 03D0     		beq	.L83
 319:.\main.c      ****             {
 320:.\main.c      ****                 led_state = l_different;
 676              		.loc 1 320 0
 677 004e 0C4B     		ldr	r3, .L88
 678 0050 0122     		mov	r2, #1
 679 0052 1A70     		strb	r2, [r3]
 321:.\main.c      ****             }
 322:.\main.c      ****             else
 323:.\main.c      ****             {
 324:.\main.c      ****                 led_state = l_wait;
 325:.\main.c      ****             }
 326:.\main.c      ****             break;
 680              		.loc 1 326 0
 681 0054 11E0     		b	.L74
 682              	.L83:
 324:.\main.c      ****                 led_state = l_wait;
 683              		.loc 1 324 0
 684 0056 0A4B     		ldr	r3, .L88
 685 0058 0222     		mov	r2, #2
 686 005a 1A70     		strb	r2, [r3]
 687              		.loc 1 326 0
 688 005c 0DE0     		b	.L74
 689              	.L81:
 327:.\main.c      ****             
 328:.\main.c      ****         case l_wait:
 329:.\main.c      ****             if(data_array[1] != old)
 690              		.loc 1 329 0
 691 005e 094B     		ldr	r3, .L88+4
 692 0060 5B88     		ldrh	r3, [r3, #2]
 693 0062 BA1D     		add	r2, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 19


 694 0064 1288     		ldrh	r2, [r2]
 695 0066 9A42     		cmp	r2, r3
 696 0068 03D0     		beq	.L85
 330:.\main.c      ****             {
 331:.\main.c      ****                 led_state = l_different;
 697              		.loc 1 331 0
 698 006a 054B     		ldr	r3, .L88
 699 006c 0122     		mov	r2, #1
 700 006e 1A70     		strb	r2, [r3]
 701 0070 02E0     		b	.L86
 702              	.L85:
 332:.\main.c      ****             }
 333:.\main.c      ****             else
 334:.\main.c      ****             {
 335:.\main.c      ****                 led_state = l_wait;
 703              		.loc 1 335 0
 704 0072 034B     		ldr	r3, .L88
 705 0074 0222     		mov	r2, #2
 706 0076 1A70     		strb	r2, [r3]
 707              	.L86:
 336:.\main.c      ****             }
 337:.\main.c      ****             break;
 708              		.loc 1 337 0
 709 0078 C046     		mov	r8, r8
 710              	.L74:
 338:.\main.c      ****     }
 339:.\main.c      **** }
 711              		.loc 1 339 0
 712 007a BD46     		mov	sp, r7
 713 007c 02B0     		add	sp, sp, #8
 714              		@ sp needed
 715 007e 80BD     		pop	{r7, pc}
 716              	.L89:
 717              		.align	2
 718              	.L88:
 719 0080 00000000 		.word	led_state
 720 0084 00000000 		.word	data_array
 721              		.cfi_endproc
 722              	.LFE42:
 723              		.size	led, .-led
 724              		.global	__aeabi_uidiv
 725              		.section	.text.average,"ax",%progbits
 726              		.align	2
 727              		.global	average
 728              		.code	16
 729              		.thumb_func
 730              		.type	average, %function
 731              	average:
 732              	.LFB43:
 340:.\main.c      **** 
 341:.\main.c      **** //Average function to be used in smoothing our input
 342:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
 343:.\main.c      **** {
 733              		.loc 1 343 0
 734              		.cfi_startproc
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 20


 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 86B0     		sub	sp, sp, #24
 740              		.cfi_def_cfa_offset 32
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
 744 0008 0A1C     		mov	r2, r1
 745 000a FB1C     		add	r3, r7, #3
 746 000c 1A70     		strb	r2, [r3]
 344:.\main.c      ****     uint8 i;
 345:.\main.c      ****     uint32 sum = 0;
 747              		.loc 1 345 0
 748 000e 0023     		mov	r3, #0
 749 0010 3B61     		str	r3, [r7, #16]
 346:.\main.c      ****     uint16 avg = 0;
 750              		.loc 1 346 0
 751 0012 3B1C     		mov	r3, r7
 752 0014 0E33     		add	r3, r3, #14
 753 0016 0022     		mov	r2, #0
 754 0018 1A80     		strh	r2, [r3]
 347:.\main.c      ****     
 348:.\main.c      ****     for(i = 0; i < num_items; i++)
 755              		.loc 1 348 0
 756 001a 3B1C     		mov	r3, r7
 757 001c 1733     		add	r3, r3, #23
 758 001e 0022     		mov	r2, #0
 759 0020 1A70     		strb	r2, [r3]
 760 0022 10E0     		b	.L91
 761              	.L92:
 349:.\main.c      ****     {
 350:.\main.c      ****         sum += array[i];
 762              		.loc 1 350 0 discriminator 2
 763 0024 3B1C     		mov	r3, r7
 764 0026 1733     		add	r3, r3, #23
 765 0028 1B78     		ldrb	r3, [r3]
 766 002a 5B00     		lsl	r3, r3, #1
 767 002c 7A68     		ldr	r2, [r7, #4]
 768 002e D318     		add	r3, r2, r3
 769 0030 1B88     		ldrh	r3, [r3]
 770 0032 3A69     		ldr	r2, [r7, #16]
 771 0034 D318     		add	r3, r2, r3
 772 0036 3B61     		str	r3, [r7, #16]
 348:.\main.c      ****     for(i = 0; i < num_items; i++)
 773              		.loc 1 348 0 discriminator 2
 774 0038 3B1C     		mov	r3, r7
 775 003a 1733     		add	r3, r3, #23
 776 003c 1A78     		ldrb	r2, [r3]
 777 003e 3B1C     		mov	r3, r7
 778 0040 1733     		add	r3, r3, #23
 779 0042 0132     		add	r2, r2, #1
 780 0044 1A70     		strb	r2, [r3]
 781              	.L91:
 348:.\main.c      ****     for(i = 0; i < num_items; i++)
 782              		.loc 1 348 0 is_stmt 0 discriminator 1
 783 0046 3A1C     		mov	r2, r7
 784 0048 1732     		add	r2, r2, #23
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 21


 785 004a FB1C     		add	r3, r7, #3
 786 004c 1278     		ldrb	r2, [r2]
 787 004e 1B78     		ldrb	r3, [r3]
 788 0050 9A42     		cmp	r2, r3
 789 0052 E7D3     		bcc	.L92
 351:.\main.c      ****     }
 352:.\main.c      ****     
 353:.\main.c      ****     avg = sum/num_items;
 790              		.loc 1 353 0 is_stmt 1
 791 0054 FB1C     		add	r3, r7, #3
 792 0056 1B78     		ldrb	r3, [r3]
 793 0058 3869     		ldr	r0, [r7, #16]
 794 005a 191C     		mov	r1, r3
 795 005c FFF7FEFF 		bl	__aeabi_uidiv
 796 0060 031C     		mov	r3, r0
 797 0062 1A1C     		mov	r2, r3
 798 0064 3B1C     		mov	r3, r7
 799 0066 0E33     		add	r3, r3, #14
 800 0068 1A80     		strh	r2, [r3]
 354:.\main.c      ****     
 355:.\main.c      ****     return avg;
 801              		.loc 1 355 0
 802 006a 3B1C     		mov	r3, r7
 803 006c 0E33     		add	r3, r3, #14
 804 006e 1B88     		ldrh	r3, [r3]
 356:.\main.c      **** }
 805              		.loc 1 356 0
 806 0070 181C     		mov	r0, r3
 807 0072 BD46     		mov	sp, r7
 808 0074 06B0     		add	sp, sp, #24
 809              		@ sp needed
 810 0076 80BD     		pop	{r7, pc}
 811              		.cfi_endproc
 812              	.LFE43:
 813              		.size	average, .-average
 814              		.comm	servo_state,1,1
 815              		.section	.text.servo,"ax",%progbits
 816              		.align	2
 817              		.global	servo
 818              		.code	16
 819              		.thumb_func
 820              		.type	servo, %function
 821              	servo:
 822              	.LFB44:
 357:.\main.c      **** 
 358:.\main.c      **** enum servo_states {s_start,s_different,s_wait} servo_state;
 359:.\main.c      **** void servo()
 360:.\main.c      **** {
 823              		.loc 1 360 0
 824              		.cfi_startproc
 825 0000 80B5     		push	{r7, lr}
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 7, -8
 828              		.cfi_offset 14, -4
 829 0002 82B0     		sub	sp, sp, #8
 830              		.cfi_def_cfa_offset 16
 831 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 22


 832              		.cfi_def_cfa_register 7
 361:.\main.c      ****     uint16 old = 0;
 833              		.loc 1 361 0
 834 0006 BB1D     		add	r3, r7, #6
 835 0008 0022     		mov	r2, #0
 836 000a 1A80     		strh	r2, [r3]
 362:.\main.c      ****     switch(servo_state){
 837              		.loc 1 362 0
 838 000c 1C4B     		ldr	r3, .L108
 839 000e 1B78     		ldrb	r3, [r3]
 840 0010 012B     		cmp	r3, #1
 841 0012 09D1     		bne	.L107
 363:.\main.c      ****         case s_start:
 364:.\main.c      ****             break;
 365:.\main.c      ****         
 366:.\main.c      ****         case s_different:
 367:.\main.c      ****             PWM_1_WriteCompare2(data_array[2]);
 842              		.loc 1 367 0
 843 0014 1B4B     		ldr	r3, .L108+4
 844 0016 9B88     		ldrh	r3, [r3, #4]
 845 0018 181C     		mov	r0, r3
 846 001a FFF7FEFF 		bl	PWM_1_WriteCompare2
 368:.\main.c      ****             old = data_array[2];
 847              		.loc 1 368 0
 848 001e BB1D     		add	r3, r7, #6
 849 0020 184A     		ldr	r2, .L108+4
 850 0022 9288     		ldrh	r2, [r2, #4]
 851 0024 1A80     		strh	r2, [r3]
 369:.\main.c      ****             break;
 852              		.loc 1 369 0
 853 0026 00E0     		b	.L95
 854              	.L107:
 370:.\main.c      ****             
 371:.\main.c      ****         case s_wait:
 372:.\main.c      ****             break;
 855              		.loc 1 372 0
 856 0028 C046     		mov	r8, r8
 857              	.L95:
 373:.\main.c      ****     }
 374:.\main.c      ****     
 375:.\main.c      ****     switch(servo_state){
 858              		.loc 1 375 0
 859 002a 154B     		ldr	r3, .L108
 860 002c 1B78     		ldrb	r3, [r3]
 861 002e 012B     		cmp	r3, #1
 862 0030 07D0     		beq	.L100
 863 0032 022B     		cmp	r3, #2
 864 0034 13D0     		beq	.L101
 865 0036 002B     		cmp	r3, #0
 866 0038 1FD1     		bne	.L94
 376:.\main.c      ****         case s_start:
 377:.\main.c      ****             servo_state = s_wait;
 867              		.loc 1 377 0
 868 003a 114B     		ldr	r3, .L108
 869 003c 0222     		mov	r2, #2
 870 003e 1A70     		strb	r2, [r3]
 378:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 23


 871              		.loc 1 378 0
 872 0040 1BE0     		b	.L94
 873              	.L100:
 379:.\main.c      ****         
 380:.\main.c      ****         case s_different:
 381:.\main.c      ****             if(data_array[2] != old)
 874              		.loc 1 381 0
 875 0042 104B     		ldr	r3, .L108+4
 876 0044 9B88     		ldrh	r3, [r3, #4]
 877 0046 BA1D     		add	r2, r7, #6
 878 0048 1288     		ldrh	r2, [r2]
 879 004a 9A42     		cmp	r2, r3
 880 004c 03D0     		beq	.L103
 382:.\main.c      ****             {
 383:.\main.c      ****                 servo_state = s_different;
 881              		.loc 1 383 0
 882 004e 0C4B     		ldr	r3, .L108
 883 0050 0122     		mov	r2, #1
 884 0052 1A70     		strb	r2, [r3]
 384:.\main.c      ****             }
 385:.\main.c      ****             else
 386:.\main.c      ****             {
 387:.\main.c      ****                 servo_state = s_wait;
 388:.\main.c      ****             }
 389:.\main.c      ****             break;
 885              		.loc 1 389 0
 886 0054 11E0     		b	.L94
 887              	.L103:
 387:.\main.c      ****                 servo_state = s_wait;
 888              		.loc 1 387 0
 889 0056 0A4B     		ldr	r3, .L108
 890 0058 0222     		mov	r2, #2
 891 005a 1A70     		strb	r2, [r3]
 892              		.loc 1 389 0
 893 005c 0DE0     		b	.L94
 894              	.L101:
 390:.\main.c      ****             
 391:.\main.c      ****         case s_wait:
 392:.\main.c      ****             if(data_array[2] != old)
 895              		.loc 1 392 0
 896 005e 094B     		ldr	r3, .L108+4
 897 0060 9B88     		ldrh	r3, [r3, #4]
 898 0062 BA1D     		add	r2, r7, #6
 899 0064 1288     		ldrh	r2, [r2]
 900 0066 9A42     		cmp	r2, r3
 901 0068 03D0     		beq	.L105
 393:.\main.c      ****             {
 394:.\main.c      ****                 servo_state = s_different;
 902              		.loc 1 394 0
 903 006a 054B     		ldr	r3, .L108
 904 006c 0122     		mov	r2, #1
 905 006e 1A70     		strb	r2, [r3]
 906 0070 02E0     		b	.L106
 907              	.L105:
 395:.\main.c      ****             }
 396:.\main.c      ****             else
 397:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 24


 398:.\main.c      ****                 servo_state = s_wait;
 908              		.loc 1 398 0
 909 0072 034B     		ldr	r3, .L108
 910 0074 0222     		mov	r2, #2
 911 0076 1A70     		strb	r2, [r3]
 912              	.L106:
 399:.\main.c      ****             }
 400:.\main.c      ****             break;
 913              		.loc 1 400 0
 914 0078 C046     		mov	r8, r8
 915              	.L94:
 401:.\main.c      ****     }    
 402:.\main.c      **** }
 916              		.loc 1 402 0
 917 007a BD46     		mov	sp, r7
 918 007c 02B0     		add	sp, sp, #8
 919              		@ sp needed
 920 007e 80BD     		pop	{r7, pc}
 921              	.L109:
 922              		.align	2
 923              	.L108:
 924 0080 00000000 		.word	servo_state
 925 0084 00000000 		.word	data_array
 926              		.cfi_endproc
 927              	.LFE44:
 928              		.size	servo, .-servo
 929              		.comm	servo1_state,1,1
 930              		.section	.text.servo1,"ax",%progbits
 931              		.align	2
 932              		.global	servo1
 933              		.code	16
 934              		.thumb_func
 935              		.type	servo1, %function
 936              	servo1:
 937              	.LFB45:
 403:.\main.c      **** 
 404:.\main.c      **** //New servo design
 405:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 406:.\main.c      **** enum servo1_states {s1_start,s1_init,s1_execute,s1_wait} servo1_state;
 407:.\main.c      **** void servo1()
 408:.\main.c      **** { 
 938              		.loc 1 408 0
 939              		.cfi_startproc
 940 0000 90B5     		push	{r4, r7, lr}
 941              		.cfi_def_cfa_offset 12
 942              		.cfi_offset 4, -12
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 83B0     		sub	sp, sp, #12
 946              		.cfi_def_cfa_offset 24
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 409:.\main.c      ****     uint8 i;
 410:.\main.c      ****     uint16 avg;
 411:.\main.c      ****     uint16 command;
 412:.\main.c      ****     
 413:.\main.c      ****     switch(servo1_state){ //actions
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 25


 949              		.loc 1 413 0
 950 0006 424B     		ldr	r3, .L133
 951 0008 1B78     		ldrb	r3, [r3]
 952 000a 012B     		cmp	r3, #1
 953 000c 03D0     		beq	.L112
 954 000e 4EDD     		ble	.L132
 955 0010 022B     		cmp	r3, #2
 956 0012 17D0     		beq	.L115
 414:.\main.c      ****         case s_start:
 415:.\main.c      ****             break;
 416:.\main.c      **** 
 417:.\main.c      ****         case s1_init:
 418:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 419:.\main.c      ****             {
 420:.\main.c      ****                 servo_array[i] = 1500;
 421:.\main.c      ****             }
 422:.\main.c      ****             serv_arr_cspot = 0;
 423:.\main.c      ****             break;
 424:.\main.c      **** 
 425:.\main.c      ****         case s1_execute:
 426:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 427:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 428:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 429:.\main.c      ****             {
 430:.\main.c      ****                 serv_arr_cspot++;
 431:.\main.c      ****             }
 432:.\main.c      ****             else
 433:.\main.c      ****             {
 434:.\main.c      ****                 serv_arr_cspot = 0;
 435:.\main.c      ****             }
 436:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 437:.\main.c      ****             //servo_array[serv_avg_count] = data_array[2];
 438:.\main.c      ****             PWM_1_WriteCompare2(avg);
 439:.\main.c      ****             new_pack = 0;
 440:.\main.c      ****             break;
 441:.\main.c      ****             
 442:.\main.c      ****         case s1_wait:
 443:.\main.c      ****             break;
 957              		.loc 1 443 0
 958 0014 4CE0     		b	.L111
 959              	.L112:
 418:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 960              		.loc 1 418 0
 961 0016 FB1D     		add	r3, r7, #7
 962 0018 0022     		mov	r2, #0
 963 001a 1A70     		strb	r2, [r3]
 964 001c 0AE0     		b	.L117
 965              	.L118:
 420:.\main.c      ****                 servo_array[i] = 1500;
 966              		.loc 1 420 0 discriminator 2
 967 001e FB1D     		add	r3, r7, #7
 968 0020 1A78     		ldrb	r2, [r3]
 969 0022 3C4B     		ldr	r3, .L133+4
 970 0024 5200     		lsl	r2, r2, #1
 971 0026 3C49     		ldr	r1, .L133+8
 972 0028 D152     		strh	r1, [r2, r3]
 418:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 26


 973              		.loc 1 418 0 discriminator 2
 974 002a FB1D     		add	r3, r7, #7
 975 002c 1A78     		ldrb	r2, [r3]
 976 002e FB1D     		add	r3, r7, #7
 977 0030 0132     		add	r2, r2, #1
 978 0032 1A70     		strb	r2, [r3]
 979              	.L117:
 418:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 980              		.loc 1 418 0 is_stmt 0 discriminator 1
 981 0034 FB1D     		add	r3, r7, #7
 982 0036 1B78     		ldrb	r3, [r3]
 983 0038 132B     		cmp	r3, #19
 984 003a F0D9     		bls	.L118
 422:.\main.c      ****             serv_arr_cspot = 0;
 985              		.loc 1 422 0 is_stmt 1
 986 003c 374B     		ldr	r3, .L133+12
 987 003e 0022     		mov	r2, #0
 988 0040 1A70     		strb	r2, [r3]
 423:.\main.c      ****             break;
 989              		.loc 1 423 0
 990 0042 35E0     		b	.L111
 991              	.L115:
 426:.\main.c      ****             command = (((data_array[2] << 8) | data_array[3])/2) + 1500;
 992              		.loc 1 426 0
 993 0044 364B     		ldr	r3, .L133+16
 994 0046 9B88     		ldrh	r3, [r3, #4]
 995 0048 1A02     		lsl	r2, r3, #8
 996 004a 354B     		ldr	r3, .L133+16
 997 004c DB88     		ldrh	r3, [r3, #6]
 998 004e 1343     		orr	r3, r2
 999 0050 00D5     		bpl	.L119
 1000 0052 0133     		add	r3, r3, #1
 1001              	.L119:
 1002 0054 5B10     		asr	r3, r3, #1
 1003 0056 9AB2     		uxth	r2, r3
 1004 0058 3B1D     		add	r3, r7, #4
 1005 005a 2F49     		ldr	r1, .L133+8
 1006 005c 5218     		add	r2, r2, r1
 1007 005e 1A80     		strh	r2, [r3]
 427:.\main.c      ****             servo_array[serv_arr_cspot] = command;
 1008              		.loc 1 427 0
 1009 0060 2E4B     		ldr	r3, .L133+12
 1010 0062 1B78     		ldrb	r3, [r3]
 1011 0064 1A1C     		mov	r2, r3
 1012 0066 2B4B     		ldr	r3, .L133+4
 1013 0068 5200     		lsl	r2, r2, #1
 1014 006a 391D     		add	r1, r7, #4
 1015 006c 0988     		ldrh	r1, [r1]
 1016 006e D152     		strh	r1, [r2, r3]
 428:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 1017              		.loc 1 428 0
 1018 0070 2A4B     		ldr	r3, .L133+12
 1019 0072 1B78     		ldrb	r3, [r3]
 1020 0074 122B     		cmp	r3, #18
 1021 0076 06D8     		bhi	.L120
 430:.\main.c      ****                 serv_arr_cspot++;
 1022              		.loc 1 430 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 27


 1023 0078 284B     		ldr	r3, .L133+12
 1024 007a 1B78     		ldrb	r3, [r3]
 1025 007c 0133     		add	r3, r3, #1
 1026 007e DAB2     		uxtb	r2, r3
 1027 0080 264B     		ldr	r3, .L133+12
 1028 0082 1A70     		strb	r2, [r3]
 1029 0084 02E0     		b	.L121
 1030              	.L120:
 434:.\main.c      ****                 serv_arr_cspot = 0;
 1031              		.loc 1 434 0
 1032 0086 254B     		ldr	r3, .L133+12
 1033 0088 0022     		mov	r2, #0
 1034 008a 1A70     		strb	r2, [r3]
 1035              	.L121:
 436:.\main.c      ****             avg = average(servo_array, SERV_ARR_SIZE);
 1036              		.loc 1 436 0
 1037 008c BC1C     		add	r4, r7, #2
 1038 008e 214B     		ldr	r3, .L133+4
 1039 0090 181C     		mov	r0, r3
 1040 0092 1421     		mov	r1, #20
 1041 0094 FFF7FEFF 		bl	average
 1042 0098 031C     		mov	r3, r0
 1043 009a 2380     		strh	r3, [r4]
 438:.\main.c      ****             PWM_1_WriteCompare2(avg);
 1044              		.loc 1 438 0
 1045 009c BB1C     		add	r3, r7, #2
 1046 009e 1B88     		ldrh	r3, [r3]
 1047 00a0 181C     		mov	r0, r3
 1048 00a2 FFF7FEFF 		bl	PWM_1_WriteCompare2
 439:.\main.c      ****             new_pack = 0;
 1049              		.loc 1 439 0
 1050 00a6 1F4B     		ldr	r3, .L133+20
 1051 00a8 0022     		mov	r2, #0
 1052 00aa 1A70     		strb	r2, [r3]
 440:.\main.c      ****             break;
 1053              		.loc 1 440 0
 1054 00ac 00E0     		b	.L111
 1055              	.L132:
 415:.\main.c      ****             break;
 1056              		.loc 1 415 0
 1057 00ae C046     		mov	r8, r8
 1058              	.L111:
 444:.\main.c      ****     }
 445:.\main.c      ****     
 446:.\main.c      ****     switch(servo1_state){ //transitions
 1059              		.loc 1 446 0
 1060 00b0 174B     		ldr	r3, .L133
 1061 00b2 1B78     		ldrb	r3, [r3]
 1062 00b4 012B     		cmp	r3, #1
 1063 00b6 0CD0     		beq	.L123
 1064 00b8 02DC     		bgt	.L124
 1065 00ba 002B     		cmp	r3, #0
 1066 00bc 05D0     		beq	.L125
 1067 00be 24E0     		b	.L110
 1068              	.L124:
 1069 00c0 022B     		cmp	r3, #2
 1070 00c2 0AD0     		beq	.L126
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 28


 1071 00c4 032B     		cmp	r3, #3
 1072 00c6 14D0     		beq	.L127
 1073 00c8 1FE0     		b	.L110
 1074              	.L125:
 447:.\main.c      ****         case s1_start:
 448:.\main.c      ****             servo1_state = s1_init;
 1075              		.loc 1 448 0
 1076 00ca 114B     		ldr	r3, .L133
 1077 00cc 0122     		mov	r2, #1
 1078 00ce 1A70     		strb	r2, [r3]
 449:.\main.c      ****             break;
 1079              		.loc 1 449 0
 1080 00d0 1BE0     		b	.L110
 1081              	.L123:
 450:.\main.c      ****         
 451:.\main.c      ****         case s1_init:
 452:.\main.c      ****             servo1_state = s1_wait;
 1082              		.loc 1 452 0
 1083 00d2 0F4B     		ldr	r3, .L133
 1084 00d4 0322     		mov	r2, #3
 1085 00d6 1A70     		strb	r2, [r3]
 453:.\main.c      ****             break;
 1086              		.loc 1 453 0
 1087 00d8 17E0     		b	.L110
 1088              	.L126:
 454:.\main.c      ****         
 455:.\main.c      ****         case s1_execute:
 456:.\main.c      ****             if(new_pack)
 1089              		.loc 1 456 0
 1090 00da 124B     		ldr	r3, .L133+20
 1091 00dc 1B78     		ldrb	r3, [r3]
 1092 00de 002B     		cmp	r3, #0
 1093 00e0 03D0     		beq	.L128
 457:.\main.c      ****             {
 458:.\main.c      ****                 servo1_state = s1_execute;
 1094              		.loc 1 458 0
 1095 00e2 0B4B     		ldr	r3, .L133
 1096 00e4 0222     		mov	r2, #2
 1097 00e6 1A70     		strb	r2, [r3]
 459:.\main.c      ****             }
 460:.\main.c      ****             else
 461:.\main.c      ****             {
 462:.\main.c      ****                 servo1_state = s1_wait;
 463:.\main.c      ****             }
 464:.\main.c      ****             break;
 1098              		.loc 1 464 0
 1099 00e8 0FE0     		b	.L110
 1100              	.L128:
 462:.\main.c      ****                 servo1_state = s1_wait;
 1101              		.loc 1 462 0
 1102 00ea 094B     		ldr	r3, .L133
 1103 00ec 0322     		mov	r2, #3
 1104 00ee 1A70     		strb	r2, [r3]
 1105              		.loc 1 464 0
 1106 00f0 0BE0     		b	.L110
 1107              	.L127:
 465:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 29


 466:.\main.c      ****         case s1_wait:
 467:.\main.c      ****             if(new_pack)
 1108              		.loc 1 467 0
 1109 00f2 0C4B     		ldr	r3, .L133+20
 1110 00f4 1B78     		ldrb	r3, [r3]
 1111 00f6 002B     		cmp	r3, #0
 1112 00f8 03D0     		beq	.L130
 468:.\main.c      ****             {
 469:.\main.c      ****                 servo1_state = s1_execute;
 1113              		.loc 1 469 0
 1114 00fa 054B     		ldr	r3, .L133
 1115 00fc 0222     		mov	r2, #2
 1116 00fe 1A70     		strb	r2, [r3]
 1117 0100 02E0     		b	.L131
 1118              	.L130:
 470:.\main.c      ****             }
 471:.\main.c      ****             else
 472:.\main.c      ****             {
 473:.\main.c      ****                 servo1_state = s1_wait; 
 1119              		.loc 1 473 0
 1120 0102 034B     		ldr	r3, .L133
 1121 0104 0322     		mov	r2, #3
 1122 0106 1A70     		strb	r2, [r3]
 1123              	.L131:
 474:.\main.c      ****             }
 475:.\main.c      ****             break;
 1124              		.loc 1 475 0
 1125 0108 C046     		mov	r8, r8
 1126              	.L110:
 476:.\main.c      ****     }    
 477:.\main.c      **** }
 1127              		.loc 1 477 0
 1128 010a BD46     		mov	sp, r7
 1129 010c 03B0     		add	sp, sp, #12
 1130              		@ sp needed
 1131 010e 90BD     		pop	{r4, r7, pc}
 1132              	.L134:
 1133              		.align	2
 1134              	.L133:
 1135 0110 00000000 		.word	servo1_state
 1136 0114 00000000 		.word	servo_array
 1137 0118 DC050000 		.word	1500
 1138 011c 00000000 		.word	serv_arr_cspot
 1139 0120 00000000 		.word	data_array
 1140 0124 00000000 		.word	new_pack
 1141              		.cfi_endproc
 1142              	.LFE45:
 1143              		.size	servo1, .-servo1
 1144              		.comm	motor_state,1,1
 1145              		.section	.text.motor,"ax",%progbits
 1146              		.align	2
 1147              		.global	motor
 1148              		.code	16
 1149              		.thumb_func
 1150              		.type	motor, %function
 1151              	motor:
 1152              	.LFB46:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 30


 478:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 479:.\main.c      **** 
 480:.\main.c      **** enum motor_states {m_start,m_different,m_wait} motor_state;
 481:.\main.c      **** void motor(){
 1153              		.loc 1 481 0
 1154              		.cfi_startproc
 1155 0000 80B5     		push	{r7, lr}
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 482:.\main.c      **** //    uint16 old = 0;
 483:.\main.c      **** //    switch(motor_state){ //state actions
 484:.\main.c      **** //        case m_start:
 485:.\main.c      **** //            break;
 486:.\main.c      **** //        
 487:.\main.c      **** //        case m_different:
 488:.\main.c      **** //            PWM_2_WriteCompare1(data_array[1]);
 489:.\main.c      **** //            old = data_array[3];
 490:.\main.c      **** //            break;
 491:.\main.c      **** //            
 492:.\main.c      **** //        case m_wait:
 493:.\main.c      **** //            break;
 494:.\main.c      **** //    }
 495:.\main.c      **** //    
 496:.\main.c      **** //    switch(motor_state){ //state transitions
 497:.\main.c      **** //        case m_start:
 498:.\main.c      **** //            motor_state = m_wait;
 499:.\main.c      **** //            break;
 500:.\main.c      **** //        
 501:.\main.c      **** //        case m_different:
 502:.\main.c      **** //            if(data_array[3] != old)
 503:.\main.c      **** //            {
 504:.\main.c      **** //                motor_state = m_different;
 505:.\main.c      **** //            }
 506:.\main.c      **** //            else
 507:.\main.c      **** //            {
 508:.\main.c      **** //                motor_state = m_wait;
 509:.\main.c      **** //            }
 510:.\main.c      **** //            break;
 511:.\main.c      **** //            
 512:.\main.c      **** //        case m_wait:
 513:.\main.c      **** //            if(data_array[3] != old)
 514:.\main.c      **** //            {
 515:.\main.c      **** //                motor_state = m_different;
 516:.\main.c      **** //            }
 517:.\main.c      **** //            else
 518:.\main.c      **** //            {
 519:.\main.c      **** //                motor_state = m_wait;
 520:.\main.c      **** //            }
 521:.\main.c      **** //            break;
 522:.\main.c      **** //    }
 523:.\main.c      **** }
 1161              		.loc 1 523 0
 1162 0004 BD46     		mov	sp, r7
 1163              		@ sp needed
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 31


 1164 0006 80BD     		pop	{r7, pc}
 1165              		.cfi_endproc
 1166              	.LFE46:
 1167              		.size	motor, .-motor
 1168              		.global	__aeabi_idivmod
 1169              		.section	.text.main,"ax",%progbits
 1170              		.align	2
 1171              		.global	main
 1172              		.code	16
 1173              		.thumb_func
 1174              		.type	main, %function
 1175              	main:
 1176              	.LFB47:
 524:.\main.c      **** 
 525:.\main.c      **** int main()
 526:.\main.c      **** {
 1177              		.loc 1 526 0
 1178              		.cfi_startproc
 1179 0000 80B5     		push	{r7, lr}
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 0002 86B0     		sub	sp, sp, #24
 1184              		.cfi_def_cfa_offset 32
 1185 0004 00AF     		add	r7, sp, #0
 1186              		.cfi_def_cfa_register 7
 527:.\main.c      ****     CyGlobalIntEnable;
 1187              		.loc 1 527 0
 1188              	@ 527 ".\main.c" 1
 1189 0006 62B6     		CPSIE   i
 1190              	@ 0 "" 2
 528:.\main.c      ****     
 529:.\main.c      ****     //Define variables
 530:.\main.c      ****     time_t t;
 531:.\main.c      ****     uint8 counter;
 532:.\main.c      ****     
 533:.\main.c      ****     //start all of our components
 534:.\main.c      ****     Clock_pwm_Start();
 1191              		.loc 1 534 0
 1192              		.code	16
 1193 0008 FFF7FEFF 		bl	Clock_pwm_Start
 535:.\main.c      ****     Clock_counter_Start();
 1194              		.loc 1 535 0
 1195 000c FFF7FEFF 		bl	Clock_counter_Start
 536:.\main.c      ****     
 537:.\main.c      ****     PWM_1_Start();
 1196              		.loc 1 537 0
 1197 0010 FFF7FEFF 		bl	PWM_1_Start
 538:.\main.c      ****     //PWM_2_Start();
 539:.\main.c      ****     
 540:.\main.c      ****     Timer_1_Start();
 1198              		.loc 1 540 0
 1199 0014 FFF7FEFF 		bl	Timer_1_Start
 541:.\main.c      ****     //UART_1_Start();
 542:.\main.c      ****     
 543:.\main.c      ****     isr_1_StartEx(timer_isr);
 1200              		.loc 1 543 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 32


 1201 0018 304B     		ldr	r3, .L143
 1202 001a 181C     		mov	r0, r3
 1203 001c FFF7FEFF 		bl	isr_1_StartEx
 544:.\main.c      ****     
 545:.\main.c      ****     srand((unsigned) time(&t));
 1204              		.loc 1 545 0
 1205 0020 3B1D     		add	r3, r7, #4
 1206 0022 181C     		mov	r0, r3
 1207 0024 FFF7FEFF 		bl	time
 1208 0028 031C     		mov	r3, r0
 1209 002a 181C     		mov	r0, r3
 1210 002c FFF7FEFF 		bl	srand
 546:.\main.c      ****     int counter_five = 0;
 1211              		.loc 1 546 0
 1212 0030 0023     		mov	r3, #0
 1213 0032 FB60     		str	r3, [r7, #12]
 1214              	.L142:
 547:.\main.c      ****     
 548:.\main.c      ****     for(;;)
 549:.\main.c      ****     {
 550:.\main.c      ****         //check addresses
 551:.\main.c      ****         //TODO get the address bytes from Steve
 552:.\main.c      ****         
 553:.\main.c      ****         if(wiznet) //WIZ_INT_Read()
 1215              		.loc 1 553 0
 1216 0034 2A4B     		ldr	r3, .L143+4
 1217 0036 1B78     		ldrb	r3, [r3]
 1218 0038 002B     		cmp	r3, #0
 1219 003a 04D0     		beq	.L137
 554:.\main.c      ****         {
 555:.\main.c      ****             fill_data_array1(); //potentially take input &data_array
 1220              		.loc 1 555 0
 1221 003c FFF7FEFF 		bl	fill_data_array1
 556:.\main.c      ****             new_pack = 1;
 1222              		.loc 1 556 0
 1223 0040 284B     		ldr	r3, .L143+8
 1224 0042 0122     		mov	r2, #1
 1225 0044 1A70     		strb	r2, [r3]
 1226              	.L137:
 557:.\main.c      ****         }
 558:.\main.c      ****         
 559:.\main.c      **** //        baseAzimuth();
 560:.\main.c      **** //        shoulder();
 561:.\main.c      **** //        elbow();
 562:.\main.c      **** //        wristTilt();
 563:.\main.c      **** //        wristRotate();
 564:.\main.c      **** 
 565:.\main.c      **** //        led();
 566:.\main.c      ****         servo1();
 1227              		.loc 1 566 0
 1228 0046 FFF7FEFF 		bl	servo1
 567:.\main.c      **** //        servo();
 568:.\main.c      ****         
 569:.\main.c      ****         
 570:.\main.c      ****         while(!timerFlag) //this while loop will periodize our code to the time of longest path
 1229              		.loc 1 570 0
 1230 004a C046     		mov	r8, r8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 33


 1231              	.L138:
 1232              		.loc 1 570 0 is_stmt 0 discriminator 1
 1233 004c 264B     		ldr	r3, .L143+12
 1234 004e 1B78     		ldrb	r3, [r3]
 1235 0050 002B     		cmp	r3, #0
 1236 0052 FBD0     		beq	.L138
 571:.\main.c      ****         {
 572:.\main.c      **** //            //Potential solution to how we will want to send feedback
 573:.\main.c      **** //            feedback_count++;
 574:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 575:.\main.c      **** //            {                                        //time through the full set of instructions
 576:.\main.c      **** //                send_feedback();
 577:.\main.c      **** //            }
 578:.\main.c      ****         }
 579:.\main.c      ****         counter++;
 1237              		.loc 1 579 0 is_stmt 1
 1238 0054 3B1C     		mov	r3, r7
 1239 0056 1733     		add	r3, r3, #23
 1240 0058 1A78     		ldrb	r2, [r3]
 1241 005a 3B1C     		mov	r3, r7
 1242 005c 1733     		add	r3, r3, #23
 1243 005e 0132     		add	r2, r2, #1
 1244 0060 1A70     		strb	r2, [r3]
 580:.\main.c      ****         if(counter == 100)
 1245              		.loc 1 580 0
 1246 0062 3B1C     		mov	r3, r7
 1247 0064 1733     		add	r3, r3, #23
 1248 0066 1B78     		ldrb	r3, [r3]
 1249 0068 642B     		cmp	r3, #100
 1250 006a 33D1     		bne	.L139
 1251              	.LBB2:
 581:.\main.c      ****         {
 582:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1252              		.loc 1 582 0
 1253 006c 0023     		mov	r3, #0
 1254 006e 3B61     		str	r3, [r7, #16]
 1255 0070 26E0     		b	.L140
 1256              	.L141:
 1257              	.LBB3:
 583:.\main.c      ****             {
 584:.\main.c      ****                 int16 random_number = rand()%2001 - 1000;
 1258              		.loc 1 584 0 discriminator 2
 1259 0072 FFF7FEFF 		bl	rand
 1260 0076 031C     		mov	r3, r0
 1261 0078 181C     		mov	r0, r3
 1262 007a 1C49     		ldr	r1, .L143+16
 1263 007c FFF7FEFF 		bl	__aeabi_idivmod
 1264 0080 0B1C     		mov	r3, r1
 1265 0082 9BB2     		uxth	r3, r3
 1266 0084 1A4A     		ldr	r2, .L143+20
 1267 0086 9B18     		add	r3, r3, r2
 1268 0088 9AB2     		uxth	r2, r3
 1269 008a 3B1C     		mov	r3, r7
 1270 008c 0A33     		add	r3, r3, #10
 1271 008e 1A80     		strh	r2, [r3]
 585:.\main.c      ****                 test_array[i] = random_number >> 8;
 1272              		.loc 1 585 0 discriminator 2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 34


 1273 0090 3B1C     		mov	r3, r7
 1274 0092 0A33     		add	r3, r3, #10
 1275 0094 0022     		mov	r2, #0
 1276 0096 9B5E     		ldrsh	r3, [r3, r2]
 1277 0098 1B12     		asr	r3, r3, #8
 1278 009a 99B2     		uxth	r1, r3
 1279 009c 154B     		ldr	r3, .L143+24
 1280 009e 3A69     		ldr	r2, [r7, #16]
 1281 00a0 5200     		lsl	r2, r2, #1
 1282 00a2 D152     		strh	r1, [r2, r3]
 586:.\main.c      ****                 test_array[i+1] = random_number & 0x00FF;
 1283              		.loc 1 586 0 discriminator 2
 1284 00a4 3B69     		ldr	r3, [r7, #16]
 1285 00a6 5A1C     		add	r2, r3, #1
 1286 00a8 3B1C     		mov	r3, r7
 1287 00aa 0A33     		add	r3, r3, #10
 1288 00ac 1988     		ldrh	r1, [r3]
 1289 00ae FF23     		mov	r3, #255
 1290 00b0 0B40     		and	r3, r1
 1291 00b2 99B2     		uxth	r1, r3
 1292 00b4 0F4B     		ldr	r3, .L143+24
 1293 00b6 5200     		lsl	r2, r2, #1
 1294 00b8 D152     		strh	r1, [r2, r3]
 1295              	.LBE3:
 582:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1296              		.loc 1 582 0 discriminator 2
 1297 00ba 3B69     		ldr	r3, [r7, #16]
 1298 00bc 0233     		add	r3, r3, #2
 1299 00be 3B61     		str	r3, [r7, #16]
 1300              	.L140:
 582:.\main.c      ****             for(int i = 0; i < 10; (i+=2))
 1301              		.loc 1 582 0 is_stmt 0 discriminator 1
 1302 00c0 3B69     		ldr	r3, [r7, #16]
 1303 00c2 092B     		cmp	r3, #9
 1304 00c4 D5DD     		ble	.L141
 1305              	.LBE2:
 587:.\main.c      ****             }
 588:.\main.c      ****             counter = 0;
 1306              		.loc 1 588 0 is_stmt 1
 1307 00c6 3B1C     		mov	r3, r7
 1308 00c8 1733     		add	r3, r3, #23
 1309 00ca 0022     		mov	r2, #0
 1310 00cc 1A70     		strb	r2, [r3]
 589:.\main.c      ****             wiznet = 1;
 1311              		.loc 1 589 0
 1312 00ce 044B     		ldr	r3, .L143+4
 1313 00d0 0122     		mov	r2, #1
 1314 00d2 1A70     		strb	r2, [r3]
 1315              	.L139:
 590:.\main.c      ****         }
 591:.\main.c      ****         timerFlag = 0;
 1316              		.loc 1 591 0
 1317 00d4 044B     		ldr	r3, .L143+12
 1318 00d6 0022     		mov	r2, #0
 1319 00d8 1A70     		strb	r2, [r3]
 592:.\main.c      ****     }
 1320              		.loc 1 592 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 35


 1321 00da ABE7     		b	.L142
 1322              	.L144:
 1323              		.align	2
 1324              	.L143:
 1325 00dc 00000000 		.word	timer_isr
 1326 00e0 00000000 		.word	wiznet
 1327 00e4 00000000 		.word	new_pack
 1328 00e8 00000000 		.word	timerFlag
 1329 00ec D1070000 		.word	2001
 1330 00f0 18FCFFFF 		.word	-1000
 1331 00f4 00000000 		.word	test_array
 1332              		.cfi_endproc
 1333              	.LFE47:
 1334              		.size	main, .-main
 1335              		.text
 1336              	.Letext0:
 1337              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1338              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1339              		.section	.debug_info,"",%progbits
 1340              	.Ldebug_info0:
 1341 0000 32050000 		.4byte	0x532
 1342 0004 0400     		.2byte	0x4
 1343 0006 00000000 		.4byte	.Ldebug_abbrev0
 1344 000a 04       		.byte	0x4
 1345 000b 01       		.uleb128 0x1
 1346 000c DF030000 		.4byte	.LASF85
 1347 0010 01       		.byte	0x1
 1348 0011 98010000 		.4byte	.LASF86
 1349 0015 96020000 		.4byte	.LASF87
 1350 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1351 001d 00000000 		.4byte	0
 1352 0021 00000000 		.4byte	.Ldebug_line0
 1353 0025 02       		.uleb128 0x2
 1354 0026 01       		.byte	0x1
 1355 0027 06       		.byte	0x6
 1356 0028 06010000 		.4byte	.LASF0
 1357 002c 02       		.uleb128 0x2
 1358 002d 01       		.byte	0x1
 1359 002e 08       		.byte	0x8
 1360 002f AF010000 		.4byte	.LASF1
 1361 0033 02       		.uleb128 0x2
 1362 0034 02       		.byte	0x2
 1363 0035 05       		.byte	0x5
 1364 0036 A3000000 		.4byte	.LASF2
 1365 003a 02       		.uleb128 0x2
 1366 003b 02       		.byte	0x2
 1367 003c 07       		.byte	0x7
 1368 003d 60020000 		.4byte	.LASF3
 1369 0041 02       		.uleb128 0x2
 1370 0042 04       		.byte	0x4
 1371 0043 05       		.byte	0x5
 1372 0044 48010000 		.4byte	.LASF4
 1373 0048 02       		.uleb128 0x2
 1374 0049 04       		.byte	0x4
 1375 004a 07       		.byte	0x7
 1376 004b 4E020000 		.4byte	.LASF5
 1377 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 36


 1378 0050 08       		.byte	0x8
 1379 0051 05       		.byte	0x5
 1380 0052 89000000 		.4byte	.LASF6
 1381 0056 02       		.uleb128 0x2
 1382 0057 08       		.byte	0x8
 1383 0058 07       		.byte	0x7
 1384 0059 14020000 		.4byte	.LASF7
 1385 005d 03       		.uleb128 0x3
 1386 005e 04       		.byte	0x4
 1387 005f 05       		.byte	0x5
 1388 0060 696E7400 		.ascii	"int\000"
 1389 0064 02       		.uleb128 0x2
 1390 0065 04       		.byte	0x4
 1391 0066 07       		.byte	0x7
 1392 0067 39020000 		.4byte	.LASF8
 1393 006b 04       		.uleb128 0x4
 1394 006c 1C030000 		.4byte	.LASF9
 1395 0070 02       		.byte	0x2
 1396 0071 A1       		.byte	0xa1
 1397 0072 2C000000 		.4byte	0x2c
 1398 0076 04       		.uleb128 0x4
 1399 0077 CB000000 		.4byte	.LASF10
 1400 007b 02       		.byte	0x2
 1401 007c A2       		.byte	0xa2
 1402 007d 3A000000 		.4byte	0x3a
 1403 0081 04       		.uleb128 0x4
 1404 0082 3D030000 		.4byte	.LASF11
 1405 0086 02       		.byte	0x2
 1406 0087 A3       		.byte	0xa3
 1407 0088 48000000 		.4byte	0x48
 1408 008c 04       		.uleb128 0x4
 1409 008d DE000000 		.4byte	.LASF12
 1410 0091 02       		.byte	0x2
 1411 0092 A5       		.byte	0xa5
 1412 0093 33000000 		.4byte	0x33
 1413 0097 02       		.uleb128 0x2
 1414 0098 04       		.byte	0x4
 1415 0099 04       		.byte	0x4
 1416 009a 1D010000 		.4byte	.LASF13
 1417 009e 02       		.uleb128 0x2
 1418 009f 08       		.byte	0x8
 1419 00a0 04       		.byte	0x4
 1420 00a1 5B030000 		.4byte	.LASF14
 1421 00a5 02       		.uleb128 0x2
 1422 00a6 01       		.byte	0x1
 1423 00a7 08       		.byte	0x8
 1424 00a8 91020000 		.4byte	.LASF15
 1425 00ac 02       		.uleb128 0x2
 1426 00ad 04       		.byte	0x4
 1427 00ae 07       		.byte	0x7
 1428 00af 66000000 		.4byte	.LASF16
 1429 00b3 04       		.uleb128 0x4
 1430 00b4 6F030000 		.4byte	.LASF17
 1431 00b8 03       		.byte	0x3
 1432 00b9 7A       		.byte	0x7a
 1433 00ba 41000000 		.4byte	0x41
 1434 00be 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 37


 1435 00bf 5A010000 		.4byte	.LASF22
 1436 00c3 01       		.byte	0x1
 1437 00c4 01       		.byte	0x1
 1438 00c5 83       		.byte	0x83
 1439 00c6 E3000000 		.4byte	0xe3
 1440 00ca 06       		.uleb128 0x6
 1441 00cb 8C010000 		.4byte	.LASF18
 1442 00cf 00       		.sleb128 0
 1443 00d0 06       		.uleb128 0x6
 1444 00d1 1A000000 		.4byte	.LASF19
 1445 00d5 01       		.sleb128 1
 1446 00d6 06       		.uleb128 0x6
 1447 00d7 F0010000 		.4byte	.LASF20
 1448 00db 02       		.sleb128 2
 1449 00dc 06       		.uleb128 0x6
 1450 00dd 44030000 		.4byte	.LASF21
 1451 00e1 03       		.sleb128 3
 1452 00e2 00       		.byte	0
 1453 00e3 05       		.uleb128 0x5
 1454 00e4 73020000 		.4byte	.LASF23
 1455 00e8 01       		.byte	0x1
 1456 00e9 01       		.byte	0x1
 1457 00ea BB       		.byte	0xbb
 1458 00eb 08010000 		.4byte	0x108
 1459 00ef 06       		.uleb128 0x6
 1460 00f0 73010000 		.4byte	.LASF24
 1461 00f4 00       		.sleb128 0
 1462 00f5 06       		.uleb128 0x6
 1463 00f6 25000000 		.4byte	.LASF25
 1464 00fa 01       		.sleb128 1
 1465 00fb 06       		.uleb128 0x6
 1466 00fc 4E030000 		.4byte	.LASF26
 1467 0100 02       		.sleb128 2
 1468 0101 06       		.uleb128 0x6
 1469 0102 E2010000 		.4byte	.LASF27
 1470 0106 03       		.sleb128 3
 1471 0107 00       		.byte	0
 1472 0108 05       		.uleb128 0x5
 1473 0109 6F000000 		.4byte	.LASF28
 1474 010d 01       		.byte	0x1
 1475 010e 01       		.byte	0x1
 1476 010f EC       		.byte	0xec
 1477 0110 2D010000 		.4byte	0x12d
 1478 0114 06       		.uleb128 0x6
 1479 0115 E4000000 		.4byte	.LASF29
 1480 0119 00       		.sleb128 0
 1481 011a 06       		.uleb128 0x6
 1482 011b 59000000 		.4byte	.LASF30
 1483 011f 01       		.sleb128 1
 1484 0120 06       		.uleb128 0x6
 1485 0121 39010000 		.4byte	.LASF31
 1486 0125 02       		.sleb128 2
 1487 0126 06       		.uleb128 0x6
 1488 0127 89040000 		.4byte	.LASF32
 1489 012b 03       		.sleb128 3
 1490 012c 00       		.byte	0
 1491 012d 07       		.uleb128 0x7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 38


 1492 012e 11030000 		.4byte	.LASF33
 1493 0132 01       		.byte	0x1
 1494 0133 01       		.byte	0x1
 1495 0134 2501     		.2byte	0x125
 1496 0136 4D010000 		.4byte	0x14d
 1497 013a 06       		.uleb128 0x6
 1498 013b 00000000 		.4byte	.LASF34
 1499 013f 00       		.sleb128 0
 1500 0140 06       		.uleb128 0x6
 1501 0141 FA000000 		.4byte	.LASF35
 1502 0145 01       		.sleb128 1
 1503 0146 06       		.uleb128 0x6
 1504 0147 CD010000 		.4byte	.LASF36
 1505 014b 02       		.sleb128 2
 1506 014c 00       		.byte	0
 1507 014d 07       		.uleb128 0x7
 1508 014e AD000000 		.4byte	.LASF37
 1509 0152 01       		.byte	0x1
 1510 0153 01       		.byte	0x1
 1511 0154 6601     		.2byte	0x166
 1512 0156 6D010000 		.4byte	0x16d
 1513 015a 06       		.uleb128 0x6
 1514 015b 8E030000 		.4byte	.LASF38
 1515 015f 00       		.sleb128 0
 1516 0160 06       		.uleb128 0x6
 1517 0161 7C030000 		.4byte	.LASF39
 1518 0165 01       		.sleb128 1
 1519 0166 06       		.uleb128 0x6
 1520 0167 D8030000 		.4byte	.LASF40
 1521 016b 02       		.sleb128 2
 1522 016c 00       		.byte	0
 1523 016d 07       		.uleb128 0x7
 1524 016e 2B020000 		.4byte	.LASF41
 1525 0172 01       		.byte	0x1
 1526 0173 01       		.byte	0x1
 1527 0174 9601     		.2byte	0x196
 1528 0176 93010000 		.4byte	0x193
 1529 017a 06       		.uleb128 0x6
 1530 017b 51010000 		.4byte	.LASF42
 1531 017f 00       		.sleb128 0
 1532 0180 06       		.uleb128 0x6
 1533 0181 A0030000 		.4byte	.LASF43
 1534 0185 01       		.sleb128 1
 1535 0186 06       		.uleb128 0x6
 1536 0187 C0000000 		.4byte	.LASF44
 1537 018b 02       		.sleb128 2
 1538 018c 06       		.uleb128 0x6
 1539 018d 81040000 		.4byte	.LASF45
 1540 0191 03       		.sleb128 3
 1541 0192 00       		.byte	0
 1542 0193 07       		.uleb128 0x7
 1543 0194 84020000 		.4byte	.LASF46
 1544 0198 01       		.byte	0x1
 1545 0199 01       		.byte	0x1
 1546 019a E001     		.2byte	0x1e0
 1547 019c B3010000 		.4byte	0x1b3
 1548 01a0 06       		.uleb128 0x6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 39


 1549 01a1 46020000 		.4byte	.LASF47
 1550 01a5 00       		.sleb128 0
 1551 01a6 06       		.uleb128 0x6
 1552 01a7 28030000 		.4byte	.LASF48
 1553 01ab 01       		.sleb128 1
 1554 01ac 06       		.uleb128 0x6
 1555 01ad 99040000 		.4byte	.LASF49
 1556 01b1 02       		.sleb128 2
 1557 01b2 00       		.byte	0
 1558 01b3 08       		.uleb128 0x8
 1559 01b4 C5030000 		.4byte	.LASF65
 1560 01b8 01       		.byte	0x1
 1561 01b9 21       		.byte	0x21
 1562 01ba 00000000 		.4byte	.LFB33
 1563 01be 28000000 		.4byte	.LFE33-.LFB33
 1564 01c2 01       		.uleb128 0x1
 1565 01c3 9C       		.byte	0x9c
 1566 01c4 D7010000 		.4byte	0x1d7
 1567 01c8 09       		.uleb128 0x9
 1568 01c9 BD010000 		.4byte	.LASF50
 1569 01cd 01       		.byte	0x1
 1570 01ce 23       		.byte	0x23
 1571 01cf 81000000 		.4byte	0x81
 1572 01d3 02       		.uleb128 0x2
 1573 01d4 91       		.byte	0x91
 1574 01d5 74       		.sleb128 -12
 1575 01d6 00       		.byte	0
 1576 01d7 0A       		.uleb128 0xa
 1577 01d8 30000000 		.4byte	.LASF51
 1578 01dc 01       		.byte	0x1
 1579 01dd 41       		.byte	0x41
 1580 01de 00000000 		.4byte	.LFB34
 1581 01e2 0C010000 		.4byte	.LFE34-.LFB34
 1582 01e6 01       		.uleb128 0x1
 1583 01e7 9C       		.byte	0x9c
 1584 01e8 F9010000 		.4byte	0x1f9
 1585 01ec 0B       		.uleb128 0xb
 1586 01ed 6300     		.ascii	"c\000"
 1587 01ef 01       		.byte	0x1
 1588 01f0 45       		.byte	0x45
 1589 01f1 6B000000 		.4byte	0x6b
 1590 01f5 02       		.uleb128 0x2
 1591 01f6 91       		.byte	0x91
 1592 01f7 77       		.sleb128 -9
 1593 01f8 00       		.byte	0
 1594 01f9 0A       		.uleb128 0xa
 1595 01fa B4030000 		.4byte	.LASF52
 1596 01fe 01       		.byte	0x1
 1597 01ff 72       		.byte	0x72
 1598 0200 00000000 		.4byte	.LFB35
 1599 0204 4C000000 		.4byte	.LFE35-.LFB35
 1600 0208 01       		.uleb128 0x1
 1601 0209 9C       		.byte	0x9c
 1602 020a 1B020000 		.4byte	0x21b
 1603 020e 0B       		.uleb128 0xb
 1604 020f 6900     		.ascii	"i\000"
 1605 0211 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 40


 1606 0212 74       		.byte	0x74
 1607 0213 6B000000 		.4byte	0x6b
 1608 0217 02       		.uleb128 0x2
 1609 0218 91       		.byte	0x91
 1610 0219 77       		.sleb128 -9
 1611 021a 00       		.byte	0
 1612 021b 0C       		.uleb128 0xc
 1613 021c 23010000 		.4byte	.LASF53
 1614 0220 01       		.byte	0x1
 1615 0221 7C       		.byte	0x7c
 1616 0222 00000000 		.4byte	.LFB36
 1617 0226 08000000 		.4byte	.LFE36-.LFB36
 1618 022a 01       		.uleb128 0x1
 1619 022b 9C       		.byte	0x9c
 1620 022c 0C       		.uleb128 0xc
 1621 022d 34030000 		.4byte	.LASF54
 1622 0231 01       		.byte	0x1
 1623 0232 85       		.byte	0x85
 1624 0233 00000000 		.4byte	.LFB37
 1625 0237 44000000 		.4byte	.LFE37-.LFB37
 1626 023b 01       		.uleb128 0x1
 1627 023c 9C       		.byte	0x9c
 1628 023d 0C       		.uleb128 0xc
 1629 023e BA000000 		.4byte	.LASF55
 1630 0242 01       		.byte	0x1
 1631 0243 B3       		.byte	0xb3
 1632 0244 00000000 		.4byte	.LFB38
 1633 0248 08000000 		.4byte	.LFE38-.LFB38
 1634 024c 01       		.uleb128 0x1
 1635 024d 9C       		.byte	0x9c
 1636 024e 0C       		.uleb128 0xc
 1637 024f 2F010000 		.4byte	.LASF56
 1638 0253 01       		.byte	0x1
 1639 0254 BD       		.byte	0xbd
 1640 0255 00000000 		.4byte	.LFB39
 1641 0259 48000000 		.4byte	.LFE39-.LFB39
 1642 025d 01       		.uleb128 0x1
 1643 025e 9C       		.byte	0x9c
 1644 025f 0C       		.uleb128 0xc
 1645 0260 D2000000 		.4byte	.LASF57
 1646 0264 01       		.byte	0x1
 1647 0265 EE       		.byte	0xee
 1648 0266 00000000 		.4byte	.LFB40
 1649 026a 48000000 		.4byte	.LFE40-.LFB40
 1650 026e 01       		.uleb128 0x1
 1651 026f 9C       		.byte	0x9c
 1652 0270 0D       		.uleb128 0xd
 1653 0271 A1010000 		.4byte	.LASF58
 1654 0275 01       		.byte	0x1
 1655 0276 1D01     		.2byte	0x11d
 1656 0278 00000000 		.4byte	.LFB41
 1657 027c 08000000 		.4byte	.LFE41-.LFB41
 1658 0280 01       		.uleb128 0x1
 1659 0281 9C       		.byte	0x9c
 1660 0282 0E       		.uleb128 0xe
 1661 0283 6C656400 		.ascii	"led\000"
 1662 0287 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 41


 1663 0288 2601     		.2byte	0x126
 1664 028a 00000000 		.4byte	.LFB42
 1665 028e 88000000 		.4byte	.LFE42-.LFB42
 1666 0292 01       		.uleb128 0x1
 1667 0293 9C       		.byte	0x9c
 1668 0294 A8020000 		.4byte	0x2a8
 1669 0298 0F       		.uleb128 0xf
 1670 0299 6F6C6400 		.ascii	"old\000"
 1671 029d 01       		.byte	0x1
 1672 029e 2801     		.2byte	0x128
 1673 02a0 76000000 		.4byte	0x76
 1674 02a4 02       		.uleb128 0x2
 1675 02a5 91       		.byte	0x91
 1676 02a6 76       		.sleb128 -10
 1677 02a7 00       		.byte	0
 1678 02a8 10       		.uleb128 0x10
 1679 02a9 66040000 		.4byte	.LASF88
 1680 02ad 01       		.byte	0x1
 1681 02ae 5601     		.2byte	0x156
 1682 02b0 76000000 		.4byte	0x76
 1683 02b4 00000000 		.4byte	.LFB43
 1684 02b8 78000000 		.4byte	.LFE43-.LFB43
 1685 02bc 01       		.uleb128 0x1
 1686 02bd 9C       		.byte	0x9c
 1687 02be 0C030000 		.4byte	0x30c
 1688 02c2 11       		.uleb128 0x11
 1689 02c3 76030000 		.4byte	.LASF59
 1690 02c7 01       		.byte	0x1
 1691 02c8 5601     		.2byte	0x156
 1692 02ca 0C030000 		.4byte	0x30c
 1693 02ce 02       		.uleb128 0x2
 1694 02cf 91       		.byte	0x91
 1695 02d0 64       		.sleb128 -28
 1696 02d1 11       		.uleb128 0x11
 1697 02d2 FB010000 		.4byte	.LASF60
 1698 02d6 01       		.byte	0x1
 1699 02d7 5601     		.2byte	0x156
 1700 02d9 6B000000 		.4byte	0x6b
 1701 02dd 02       		.uleb128 0x2
 1702 02de 91       		.byte	0x91
 1703 02df 63       		.sleb128 -29
 1704 02e0 0F       		.uleb128 0xf
 1705 02e1 6900     		.ascii	"i\000"
 1706 02e3 01       		.byte	0x1
 1707 02e4 5801     		.2byte	0x158
 1708 02e6 6B000000 		.4byte	0x6b
 1709 02ea 02       		.uleb128 0x2
 1710 02eb 91       		.byte	0x91
 1711 02ec 77       		.sleb128 -9
 1712 02ed 0F       		.uleb128 0xf
 1713 02ee 73756D00 		.ascii	"sum\000"
 1714 02f2 01       		.byte	0x1
 1715 02f3 5901     		.2byte	0x159
 1716 02f5 81000000 		.4byte	0x81
 1717 02f9 02       		.uleb128 0x2
 1718 02fa 91       		.byte	0x91
 1719 02fb 70       		.sleb128 -16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 42


 1720 02fc 0F       		.uleb128 0xf
 1721 02fd 61766700 		.ascii	"avg\000"
 1722 0301 01       		.byte	0x1
 1723 0302 5A01     		.2byte	0x15a
 1724 0304 76000000 		.4byte	0x76
 1725 0308 02       		.uleb128 0x2
 1726 0309 91       		.byte	0x91
 1727 030a 6E       		.sleb128 -18
 1728 030b 00       		.byte	0
 1729 030c 12       		.uleb128 0x12
 1730 030d 04       		.byte	0x4
 1731 030e 76000000 		.4byte	0x76
 1732 0312 13       		.uleb128 0x13
 1733 0313 88030000 		.4byte	.LASF61
 1734 0317 01       		.byte	0x1
 1735 0318 6701     		.2byte	0x167
 1736 031a 00000000 		.4byte	.LFB44
 1737 031e 88000000 		.4byte	.LFE44-.LFB44
 1738 0322 01       		.uleb128 0x1
 1739 0323 9C       		.byte	0x9c
 1740 0324 38030000 		.4byte	0x338
 1741 0328 0F       		.uleb128 0xf
 1742 0329 6F6C6400 		.ascii	"old\000"
 1743 032d 01       		.byte	0x1
 1744 032e 6901     		.2byte	0x169
 1745 0330 76000000 		.4byte	0x76
 1746 0334 02       		.uleb128 0x2
 1747 0335 91       		.byte	0x91
 1748 0336 76       		.sleb128 -10
 1749 0337 00       		.byte	0
 1750 0338 13       		.uleb128 0x13
 1751 0339 0A030000 		.4byte	.LASF62
 1752 033d 01       		.byte	0x1
 1753 033e 9701     		.2byte	0x197
 1754 0340 00000000 		.4byte	.LFB45
 1755 0344 28010000 		.4byte	.LFE45-.LFB45
 1756 0348 01       		.uleb128 0x1
 1757 0349 9C       		.byte	0x9c
 1758 034a 7A030000 		.4byte	0x37a
 1759 034e 0F       		.uleb128 0xf
 1760 034f 6900     		.ascii	"i\000"
 1761 0351 01       		.byte	0x1
 1762 0352 9901     		.2byte	0x199
 1763 0354 6B000000 		.4byte	0x6b
 1764 0358 02       		.uleb128 0x2
 1765 0359 91       		.byte	0x91
 1766 035a 6F       		.sleb128 -17
 1767 035b 0F       		.uleb128 0xf
 1768 035c 61766700 		.ascii	"avg\000"
 1769 0360 01       		.byte	0x1
 1770 0361 9A01     		.2byte	0x19a
 1771 0363 76000000 		.4byte	0x76
 1772 0367 02       		.uleb128 0x2
 1773 0368 91       		.byte	0x91
 1774 0369 6A       		.sleb128 -22
 1775 036a 14       		.uleb128 0x14
 1776 036b 79040000 		.4byte	.LASF63
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 43


 1777 036f 01       		.byte	0x1
 1778 0370 9B01     		.2byte	0x19b
 1779 0372 76000000 		.4byte	0x76
 1780 0376 02       		.uleb128 0x2
 1781 0377 91       		.byte	0x91
 1782 0378 6C       		.sleb128 -20
 1783 0379 00       		.byte	0
 1784 037a 0D       		.uleb128 0xd
 1785 037b 22030000 		.4byte	.LASF64
 1786 037f 01       		.byte	0x1
 1787 0380 E101     		.2byte	0x1e1
 1788 0382 00000000 		.4byte	.LFB46
 1789 0386 08000000 		.4byte	.LFE46-.LFB46
 1790 038a 01       		.uleb128 0x1
 1791 038b 9C       		.byte	0x9c
 1792 038c 15       		.uleb128 0x15
 1793 038d F5020000 		.4byte	.LASF66
 1794 0391 01       		.byte	0x1
 1795 0392 0D02     		.2byte	0x20d
 1796 0394 5D000000 		.4byte	0x5d
 1797 0398 00000000 		.4byte	.LFB47
 1798 039c F8000000 		.4byte	.LFE47-.LFB47
 1799 03a0 01       		.uleb128 0x1
 1800 03a1 9C       		.byte	0x9c
 1801 03a2 02040000 		.4byte	0x402
 1802 03a6 0F       		.uleb128 0xf
 1803 03a7 7400     		.ascii	"t\000"
 1804 03a9 01       		.byte	0x1
 1805 03aa 1202     		.2byte	0x212
 1806 03ac B3000000 		.4byte	0xb3
 1807 03b0 02       		.uleb128 0x2
 1808 03b1 91       		.byte	0x91
 1809 03b2 64       		.sleb128 -28
 1810 03b3 14       		.uleb128 0x14
 1811 03b4 C5010000 		.4byte	.LASF67
 1812 03b8 01       		.byte	0x1
 1813 03b9 1302     		.2byte	0x213
 1814 03bb 6B000000 		.4byte	0x6b
 1815 03bf 02       		.uleb128 0x2
 1816 03c0 91       		.byte	0x91
 1817 03c1 77       		.sleb128 -9
 1818 03c2 14       		.uleb128 0x14
 1819 03c3 62030000 		.4byte	.LASF68
 1820 03c7 01       		.byte	0x1
 1821 03c8 2202     		.2byte	0x222
 1822 03ca 5D000000 		.4byte	0x5d
 1823 03ce 02       		.uleb128 0x2
 1824 03cf 91       		.byte	0x91
 1825 03d0 6C       		.sleb128 -20
 1826 03d1 16       		.uleb128 0x16
 1827 03d2 6C000000 		.4byte	.LBB2
 1828 03d6 5A000000 		.4byte	.LBE2-.LBB2
 1829 03da 0F       		.uleb128 0xf
 1830 03db 6900     		.ascii	"i\000"
 1831 03dd 01       		.byte	0x1
 1832 03de 4602     		.2byte	0x246
 1833 03e0 5D000000 		.4byte	0x5d
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 44


 1834 03e4 02       		.uleb128 0x2
 1835 03e5 91       		.byte	0x91
 1836 03e6 70       		.sleb128 -16
 1837 03e7 16       		.uleb128 0x16
 1838 03e8 72000000 		.4byte	.LBB3
 1839 03ec 48000000 		.4byte	.LBE3-.LBB3
 1840 03f0 14       		.uleb128 0x14
 1841 03f1 D4010000 		.4byte	.LASF69
 1842 03f5 01       		.byte	0x1
 1843 03f6 4802     		.2byte	0x248
 1844 03f8 8C000000 		.4byte	0x8c
 1845 03fc 02       		.uleb128 0x2
 1846 03fd 91       		.byte	0x91
 1847 03fe 6A       		.sleb128 -22
 1848 03ff 00       		.byte	0
 1849 0400 00       		.byte	0
 1850 0401 00       		.byte	0
 1851 0402 17       		.uleb128 0x17
 1852 0403 76000000 		.4byte	0x76
 1853 0407 12040000 		.4byte	0x412
 1854 040b 18       		.uleb128 0x18
 1855 040c AC000000 		.4byte	0xac
 1856 0410 0D       		.byte	0xd
 1857 0411 00       		.byte	0
 1858 0412 19       		.uleb128 0x19
 1859 0413 6E040000 		.4byte	.LASF70
 1860 0417 01       		.byte	0x1
 1861 0418 0E       		.byte	0xe
 1862 0419 02040000 		.4byte	0x402
 1863 041d 05       		.uleb128 0x5
 1864 041e 03       		.byte	0x3
 1865 041f 00000000 		.4byte	data_array
 1866 0423 19       		.uleb128 0x19
 1867 0424 82000000 		.4byte	.LASF71
 1868 0428 01       		.byte	0x1
 1869 0429 10       		.byte	0x10
 1870 042a 6B000000 		.4byte	0x6b
 1871 042e 05       		.uleb128 0x5
 1872 042f 03       		.byte	0x3
 1873 0430 00000000 		.4byte	wiznet
 1874 0434 19       		.uleb128 0x19
 1875 0435 CF030000 		.4byte	.LASF72
 1876 0439 01       		.byte	0x1
 1877 043a 11       		.byte	0x11
 1878 043b 6B000000 		.4byte	0x6b
 1879 043f 05       		.uleb128 0x5
 1880 0440 03       		.byte	0x3
 1881 0441 00000000 		.4byte	new_pack
 1882 0445 17       		.uleb128 0x17
 1883 0446 8C000000 		.4byte	0x8c
 1884 044a 55040000 		.4byte	0x455
 1885 044e 18       		.uleb128 0x18
 1886 044f AC000000 		.4byte	0xac
 1887 0453 09       		.byte	0x9
 1888 0454 00       		.byte	0
 1889 0455 19       		.uleb128 0x19
 1890 0456 12010000 		.4byte	.LASF73
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 45


 1891 045a 01       		.byte	0x1
 1892 045b 14       		.byte	0x14
 1893 045c 45040000 		.4byte	0x445
 1894 0460 05       		.uleb128 0x5
 1895 0461 03       		.byte	0x3
 1896 0462 00000000 		.4byte	test_array
 1897 0466 19       		.uleb128 0x19
 1898 0467 7D010000 		.4byte	.LASF74
 1899 046b 01       		.byte	0x1
 1900 046c 17       		.byte	0x17
 1901 046d 6B000000 		.4byte	0x6b
 1902 0471 05       		.uleb128 0x5
 1903 0472 03       		.byte	0x3
 1904 0473 00000000 		.4byte	serv_arr_cspot
 1905 0477 17       		.uleb128 0x17
 1906 0478 76000000 		.4byte	0x76
 1907 047c 87040000 		.4byte	0x487
 1908 0480 18       		.uleb128 0x18
 1909 0481 AC000000 		.4byte	0xac
 1910 0485 13       		.byte	0x13
 1911 0486 00       		.byte	0
 1912 0487 19       		.uleb128 0x19
 1913 0488 40000000 		.4byte	.LASF75
 1914 048c 01       		.byte	0x1
 1915 048d 18       		.byte	0x18
 1916 048e 77040000 		.4byte	0x477
 1917 0492 05       		.uleb128 0x5
 1918 0493 03       		.byte	0x3
 1919 0494 00000000 		.4byte	servo_array
 1920 0498 19       		.uleb128 0x19
 1921 0499 05020000 		.4byte	.LASF76
 1922 049d 01       		.byte	0x1
 1923 049e 1B       		.byte	0x1b
 1924 049f 76000000 		.4byte	0x76
 1925 04a3 05       		.uleb128 0x5
 1926 04a4 03       		.byte	0x3
 1927 04a5 00000000 		.4byte	feedback_count
 1928 04a9 19       		.uleb128 0x19
 1929 04aa F0000000 		.4byte	.LASF77
 1930 04ae 01       		.byte	0x1
 1931 04af 1C       		.byte	0x1c
 1932 04b0 6B000000 		.4byte	0x6b
 1933 04b4 05       		.uleb128 0x5
 1934 04b5 03       		.byte	0x3
 1935 04b6 00000000 		.4byte	timerFlag
 1936 04ba 19       		.uleb128 0x19
 1937 04bb 67010000 		.4byte	.LASF78
 1938 04bf 01       		.byte	0x1
 1939 04c0 83       		.byte	0x83
 1940 04c1 BE000000 		.4byte	0xbe
 1941 04c5 05       		.uleb128 0x5
 1942 04c6 03       		.byte	0x3
 1943 04c7 00000000 		.4byte	shldr_state
 1944 04cb 19       		.uleb128 0x19
 1945 04cc FA020000 		.4byte	.LASF79
 1946 04d0 01       		.byte	0x1
 1947 04d1 BB       		.byte	0xbb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 46


 1948 04d2 E3000000 		.4byte	0xe3
 1949 04d6 05       		.uleb128 0x5
 1950 04d7 03       		.byte	0x3
 1951 04d8 00000000 		.4byte	wristTilt_state
 1952 04dc 19       		.uleb128 0x19
 1953 04dd 08000000 		.4byte	.LASF80
 1954 04e1 01       		.byte	0x1
 1955 04e2 EC       		.byte	0xec
 1956 04e3 08010000 		.4byte	0x108
 1957 04e7 05       		.uleb128 0x5
 1958 04e8 03       		.byte	0x3
 1959 04e9 00000000 		.4byte	wristRotate_state
 1960 04ed 1A       		.uleb128 0x1a
 1961 04ee 96030000 		.4byte	.LASF81
 1962 04f2 01       		.byte	0x1
 1963 04f3 2501     		.2byte	0x125
 1964 04f5 2D010000 		.4byte	0x12d
 1965 04f9 05       		.uleb128 0x5
 1966 04fa 03       		.byte	0x3
 1967 04fb 00000000 		.4byte	led_state
 1968 04ff 1A       		.uleb128 0x1a
 1969 0500 A8030000 		.4byte	.LASF82
 1970 0504 01       		.byte	0x1
 1971 0505 6601     		.2byte	0x166
 1972 0507 4D010000 		.4byte	0x14d
 1973 050b 05       		.uleb128 0x5
 1974 050c 03       		.byte	0x3
 1975 050d 00000000 		.4byte	servo_state
 1976 0511 1A       		.uleb128 0x1a
 1977 0512 4C000000 		.4byte	.LASF83
 1978 0516 01       		.byte	0x1
 1979 0517 9601     		.2byte	0x196
 1980 0519 6D010000 		.4byte	0x16d
 1981 051d 05       		.uleb128 0x5
 1982 051e 03       		.byte	0x3
 1983 051f 00000000 		.4byte	servo1_state
 1984 0523 1A       		.uleb128 0x1a
 1985 0524 97000000 		.4byte	.LASF84
 1986 0528 01       		.byte	0x1
 1987 0529 E001     		.2byte	0x1e0
 1988 052b 93010000 		.4byte	0x193
 1989 052f 05       		.uleb128 0x5
 1990 0530 03       		.byte	0x3
 1991 0531 00000000 		.4byte	motor_state
 1992 0535 00       		.byte	0
 1993              		.section	.debug_abbrev,"",%progbits
 1994              	.Ldebug_abbrev0:
 1995 0000 01       		.uleb128 0x1
 1996 0001 11       		.uleb128 0x11
 1997 0002 01       		.byte	0x1
 1998 0003 25       		.uleb128 0x25
 1999 0004 0E       		.uleb128 0xe
 2000 0005 13       		.uleb128 0x13
 2001 0006 0B       		.uleb128 0xb
 2002 0007 03       		.uleb128 0x3
 2003 0008 0E       		.uleb128 0xe
 2004 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 47


 2005 000a 0E       		.uleb128 0xe
 2006 000b 55       		.uleb128 0x55
 2007 000c 17       		.uleb128 0x17
 2008 000d 11       		.uleb128 0x11
 2009 000e 01       		.uleb128 0x1
 2010 000f 10       		.uleb128 0x10
 2011 0010 17       		.uleb128 0x17
 2012 0011 00       		.byte	0
 2013 0012 00       		.byte	0
 2014 0013 02       		.uleb128 0x2
 2015 0014 24       		.uleb128 0x24
 2016 0015 00       		.byte	0
 2017 0016 0B       		.uleb128 0xb
 2018 0017 0B       		.uleb128 0xb
 2019 0018 3E       		.uleb128 0x3e
 2020 0019 0B       		.uleb128 0xb
 2021 001a 03       		.uleb128 0x3
 2022 001b 0E       		.uleb128 0xe
 2023 001c 00       		.byte	0
 2024 001d 00       		.byte	0
 2025 001e 03       		.uleb128 0x3
 2026 001f 24       		.uleb128 0x24
 2027 0020 00       		.byte	0
 2028 0021 0B       		.uleb128 0xb
 2029 0022 0B       		.uleb128 0xb
 2030 0023 3E       		.uleb128 0x3e
 2031 0024 0B       		.uleb128 0xb
 2032 0025 03       		.uleb128 0x3
 2033 0026 08       		.uleb128 0x8
 2034 0027 00       		.byte	0
 2035 0028 00       		.byte	0
 2036 0029 04       		.uleb128 0x4
 2037 002a 16       		.uleb128 0x16
 2038 002b 00       		.byte	0
 2039 002c 03       		.uleb128 0x3
 2040 002d 0E       		.uleb128 0xe
 2041 002e 3A       		.uleb128 0x3a
 2042 002f 0B       		.uleb128 0xb
 2043 0030 3B       		.uleb128 0x3b
 2044 0031 0B       		.uleb128 0xb
 2045 0032 49       		.uleb128 0x49
 2046 0033 13       		.uleb128 0x13
 2047 0034 00       		.byte	0
 2048 0035 00       		.byte	0
 2049 0036 05       		.uleb128 0x5
 2050 0037 04       		.uleb128 0x4
 2051 0038 01       		.byte	0x1
 2052 0039 03       		.uleb128 0x3
 2053 003a 0E       		.uleb128 0xe
 2054 003b 0B       		.uleb128 0xb
 2055 003c 0B       		.uleb128 0xb
 2056 003d 3A       		.uleb128 0x3a
 2057 003e 0B       		.uleb128 0xb
 2058 003f 3B       		.uleb128 0x3b
 2059 0040 0B       		.uleb128 0xb
 2060 0041 01       		.uleb128 0x1
 2061 0042 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 48


 2062 0043 00       		.byte	0
 2063 0044 00       		.byte	0
 2064 0045 06       		.uleb128 0x6
 2065 0046 28       		.uleb128 0x28
 2066 0047 00       		.byte	0
 2067 0048 03       		.uleb128 0x3
 2068 0049 0E       		.uleb128 0xe
 2069 004a 1C       		.uleb128 0x1c
 2070 004b 0D       		.uleb128 0xd
 2071 004c 00       		.byte	0
 2072 004d 00       		.byte	0
 2073 004e 07       		.uleb128 0x7
 2074 004f 04       		.uleb128 0x4
 2075 0050 01       		.byte	0x1
 2076 0051 03       		.uleb128 0x3
 2077 0052 0E       		.uleb128 0xe
 2078 0053 0B       		.uleb128 0xb
 2079 0054 0B       		.uleb128 0xb
 2080 0055 3A       		.uleb128 0x3a
 2081 0056 0B       		.uleb128 0xb
 2082 0057 3B       		.uleb128 0x3b
 2083 0058 05       		.uleb128 0x5
 2084 0059 01       		.uleb128 0x1
 2085 005a 13       		.uleb128 0x13
 2086 005b 00       		.byte	0
 2087 005c 00       		.byte	0
 2088 005d 08       		.uleb128 0x8
 2089 005e 2E       		.uleb128 0x2e
 2090 005f 01       		.byte	0x1
 2091 0060 3F       		.uleb128 0x3f
 2092 0061 19       		.uleb128 0x19
 2093 0062 03       		.uleb128 0x3
 2094 0063 0E       		.uleb128 0xe
 2095 0064 3A       		.uleb128 0x3a
 2096 0065 0B       		.uleb128 0xb
 2097 0066 3B       		.uleb128 0x3b
 2098 0067 0B       		.uleb128 0xb
 2099 0068 27       		.uleb128 0x27
 2100 0069 19       		.uleb128 0x19
 2101 006a 11       		.uleb128 0x11
 2102 006b 01       		.uleb128 0x1
 2103 006c 12       		.uleb128 0x12
 2104 006d 06       		.uleb128 0x6
 2105 006e 40       		.uleb128 0x40
 2106 006f 18       		.uleb128 0x18
 2107 0070 9642     		.uleb128 0x2116
 2108 0072 19       		.uleb128 0x19
 2109 0073 01       		.uleb128 0x1
 2110 0074 13       		.uleb128 0x13
 2111 0075 00       		.byte	0
 2112 0076 00       		.byte	0
 2113 0077 09       		.uleb128 0x9
 2114 0078 34       		.uleb128 0x34
 2115 0079 00       		.byte	0
 2116 007a 03       		.uleb128 0x3
 2117 007b 0E       		.uleb128 0xe
 2118 007c 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 49


 2119 007d 0B       		.uleb128 0xb
 2120 007e 3B       		.uleb128 0x3b
 2121 007f 0B       		.uleb128 0xb
 2122 0080 49       		.uleb128 0x49
 2123 0081 13       		.uleb128 0x13
 2124 0082 02       		.uleb128 0x2
 2125 0083 18       		.uleb128 0x18
 2126 0084 00       		.byte	0
 2127 0085 00       		.byte	0
 2128 0086 0A       		.uleb128 0xa
 2129 0087 2E       		.uleb128 0x2e
 2130 0088 01       		.byte	0x1
 2131 0089 3F       		.uleb128 0x3f
 2132 008a 19       		.uleb128 0x19
 2133 008b 03       		.uleb128 0x3
 2134 008c 0E       		.uleb128 0xe
 2135 008d 3A       		.uleb128 0x3a
 2136 008e 0B       		.uleb128 0xb
 2137 008f 3B       		.uleb128 0x3b
 2138 0090 0B       		.uleb128 0xb
 2139 0091 11       		.uleb128 0x11
 2140 0092 01       		.uleb128 0x1
 2141 0093 12       		.uleb128 0x12
 2142 0094 06       		.uleb128 0x6
 2143 0095 40       		.uleb128 0x40
 2144 0096 18       		.uleb128 0x18
 2145 0097 9742     		.uleb128 0x2117
 2146 0099 19       		.uleb128 0x19
 2147 009a 01       		.uleb128 0x1
 2148 009b 13       		.uleb128 0x13
 2149 009c 00       		.byte	0
 2150 009d 00       		.byte	0
 2151 009e 0B       		.uleb128 0xb
 2152 009f 34       		.uleb128 0x34
 2153 00a0 00       		.byte	0
 2154 00a1 03       		.uleb128 0x3
 2155 00a2 08       		.uleb128 0x8
 2156 00a3 3A       		.uleb128 0x3a
 2157 00a4 0B       		.uleb128 0xb
 2158 00a5 3B       		.uleb128 0x3b
 2159 00a6 0B       		.uleb128 0xb
 2160 00a7 49       		.uleb128 0x49
 2161 00a8 13       		.uleb128 0x13
 2162 00a9 02       		.uleb128 0x2
 2163 00aa 18       		.uleb128 0x18
 2164 00ab 00       		.byte	0
 2165 00ac 00       		.byte	0
 2166 00ad 0C       		.uleb128 0xc
 2167 00ae 2E       		.uleb128 0x2e
 2168 00af 00       		.byte	0
 2169 00b0 3F       		.uleb128 0x3f
 2170 00b1 19       		.uleb128 0x19
 2171 00b2 03       		.uleb128 0x3
 2172 00b3 0E       		.uleb128 0xe
 2173 00b4 3A       		.uleb128 0x3a
 2174 00b5 0B       		.uleb128 0xb
 2175 00b6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 50


 2176 00b7 0B       		.uleb128 0xb
 2177 00b8 11       		.uleb128 0x11
 2178 00b9 01       		.uleb128 0x1
 2179 00ba 12       		.uleb128 0x12
 2180 00bb 06       		.uleb128 0x6
 2181 00bc 40       		.uleb128 0x40
 2182 00bd 18       		.uleb128 0x18
 2183 00be 9742     		.uleb128 0x2117
 2184 00c0 19       		.uleb128 0x19
 2185 00c1 00       		.byte	0
 2186 00c2 00       		.byte	0
 2187 00c3 0D       		.uleb128 0xd
 2188 00c4 2E       		.uleb128 0x2e
 2189 00c5 00       		.byte	0
 2190 00c6 3F       		.uleb128 0x3f
 2191 00c7 19       		.uleb128 0x19
 2192 00c8 03       		.uleb128 0x3
 2193 00c9 0E       		.uleb128 0xe
 2194 00ca 3A       		.uleb128 0x3a
 2195 00cb 0B       		.uleb128 0xb
 2196 00cc 3B       		.uleb128 0x3b
 2197 00cd 05       		.uleb128 0x5
 2198 00ce 11       		.uleb128 0x11
 2199 00cf 01       		.uleb128 0x1
 2200 00d0 12       		.uleb128 0x12
 2201 00d1 06       		.uleb128 0x6
 2202 00d2 40       		.uleb128 0x40
 2203 00d3 18       		.uleb128 0x18
 2204 00d4 9742     		.uleb128 0x2117
 2205 00d6 19       		.uleb128 0x19
 2206 00d7 00       		.byte	0
 2207 00d8 00       		.byte	0
 2208 00d9 0E       		.uleb128 0xe
 2209 00da 2E       		.uleb128 0x2e
 2210 00db 01       		.byte	0x1
 2211 00dc 3F       		.uleb128 0x3f
 2212 00dd 19       		.uleb128 0x19
 2213 00de 03       		.uleb128 0x3
 2214 00df 08       		.uleb128 0x8
 2215 00e0 3A       		.uleb128 0x3a
 2216 00e1 0B       		.uleb128 0xb
 2217 00e2 3B       		.uleb128 0x3b
 2218 00e3 05       		.uleb128 0x5
 2219 00e4 11       		.uleb128 0x11
 2220 00e5 01       		.uleb128 0x1
 2221 00e6 12       		.uleb128 0x12
 2222 00e7 06       		.uleb128 0x6
 2223 00e8 40       		.uleb128 0x40
 2224 00e9 18       		.uleb128 0x18
 2225 00ea 9642     		.uleb128 0x2116
 2226 00ec 19       		.uleb128 0x19
 2227 00ed 01       		.uleb128 0x1
 2228 00ee 13       		.uleb128 0x13
 2229 00ef 00       		.byte	0
 2230 00f0 00       		.byte	0
 2231 00f1 0F       		.uleb128 0xf
 2232 00f2 34       		.uleb128 0x34
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 51


 2233 00f3 00       		.byte	0
 2234 00f4 03       		.uleb128 0x3
 2235 00f5 08       		.uleb128 0x8
 2236 00f6 3A       		.uleb128 0x3a
 2237 00f7 0B       		.uleb128 0xb
 2238 00f8 3B       		.uleb128 0x3b
 2239 00f9 05       		.uleb128 0x5
 2240 00fa 49       		.uleb128 0x49
 2241 00fb 13       		.uleb128 0x13
 2242 00fc 02       		.uleb128 0x2
 2243 00fd 18       		.uleb128 0x18
 2244 00fe 00       		.byte	0
 2245 00ff 00       		.byte	0
 2246 0100 10       		.uleb128 0x10
 2247 0101 2E       		.uleb128 0x2e
 2248 0102 01       		.byte	0x1
 2249 0103 3F       		.uleb128 0x3f
 2250 0104 19       		.uleb128 0x19
 2251 0105 03       		.uleb128 0x3
 2252 0106 0E       		.uleb128 0xe
 2253 0107 3A       		.uleb128 0x3a
 2254 0108 0B       		.uleb128 0xb
 2255 0109 3B       		.uleb128 0x3b
 2256 010a 05       		.uleb128 0x5
 2257 010b 27       		.uleb128 0x27
 2258 010c 19       		.uleb128 0x19
 2259 010d 49       		.uleb128 0x49
 2260 010e 13       		.uleb128 0x13
 2261 010f 11       		.uleb128 0x11
 2262 0110 01       		.uleb128 0x1
 2263 0111 12       		.uleb128 0x12
 2264 0112 06       		.uleb128 0x6
 2265 0113 40       		.uleb128 0x40
 2266 0114 18       		.uleb128 0x18
 2267 0115 9642     		.uleb128 0x2116
 2268 0117 19       		.uleb128 0x19
 2269 0118 01       		.uleb128 0x1
 2270 0119 13       		.uleb128 0x13
 2271 011a 00       		.byte	0
 2272 011b 00       		.byte	0
 2273 011c 11       		.uleb128 0x11
 2274 011d 05       		.uleb128 0x5
 2275 011e 00       		.byte	0
 2276 011f 03       		.uleb128 0x3
 2277 0120 0E       		.uleb128 0xe
 2278 0121 3A       		.uleb128 0x3a
 2279 0122 0B       		.uleb128 0xb
 2280 0123 3B       		.uleb128 0x3b
 2281 0124 05       		.uleb128 0x5
 2282 0125 49       		.uleb128 0x49
 2283 0126 13       		.uleb128 0x13
 2284 0127 02       		.uleb128 0x2
 2285 0128 18       		.uleb128 0x18
 2286 0129 00       		.byte	0
 2287 012a 00       		.byte	0
 2288 012b 12       		.uleb128 0x12
 2289 012c 0F       		.uleb128 0xf
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 52


 2290 012d 00       		.byte	0
 2291 012e 0B       		.uleb128 0xb
 2292 012f 0B       		.uleb128 0xb
 2293 0130 49       		.uleb128 0x49
 2294 0131 13       		.uleb128 0x13
 2295 0132 00       		.byte	0
 2296 0133 00       		.byte	0
 2297 0134 13       		.uleb128 0x13
 2298 0135 2E       		.uleb128 0x2e
 2299 0136 01       		.byte	0x1
 2300 0137 3F       		.uleb128 0x3f
 2301 0138 19       		.uleb128 0x19
 2302 0139 03       		.uleb128 0x3
 2303 013a 0E       		.uleb128 0xe
 2304 013b 3A       		.uleb128 0x3a
 2305 013c 0B       		.uleb128 0xb
 2306 013d 3B       		.uleb128 0x3b
 2307 013e 05       		.uleb128 0x5
 2308 013f 11       		.uleb128 0x11
 2309 0140 01       		.uleb128 0x1
 2310 0141 12       		.uleb128 0x12
 2311 0142 06       		.uleb128 0x6
 2312 0143 40       		.uleb128 0x40
 2313 0144 18       		.uleb128 0x18
 2314 0145 9642     		.uleb128 0x2116
 2315 0147 19       		.uleb128 0x19
 2316 0148 01       		.uleb128 0x1
 2317 0149 13       		.uleb128 0x13
 2318 014a 00       		.byte	0
 2319 014b 00       		.byte	0
 2320 014c 14       		.uleb128 0x14
 2321 014d 34       		.uleb128 0x34
 2322 014e 00       		.byte	0
 2323 014f 03       		.uleb128 0x3
 2324 0150 0E       		.uleb128 0xe
 2325 0151 3A       		.uleb128 0x3a
 2326 0152 0B       		.uleb128 0xb
 2327 0153 3B       		.uleb128 0x3b
 2328 0154 05       		.uleb128 0x5
 2329 0155 49       		.uleb128 0x49
 2330 0156 13       		.uleb128 0x13
 2331 0157 02       		.uleb128 0x2
 2332 0158 18       		.uleb128 0x18
 2333 0159 00       		.byte	0
 2334 015a 00       		.byte	0
 2335 015b 15       		.uleb128 0x15
 2336 015c 2E       		.uleb128 0x2e
 2337 015d 01       		.byte	0x1
 2338 015e 3F       		.uleb128 0x3f
 2339 015f 19       		.uleb128 0x19
 2340 0160 03       		.uleb128 0x3
 2341 0161 0E       		.uleb128 0xe
 2342 0162 3A       		.uleb128 0x3a
 2343 0163 0B       		.uleb128 0xb
 2344 0164 3B       		.uleb128 0x3b
 2345 0165 05       		.uleb128 0x5
 2346 0166 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 53


 2347 0167 13       		.uleb128 0x13
 2348 0168 11       		.uleb128 0x11
 2349 0169 01       		.uleb128 0x1
 2350 016a 12       		.uleb128 0x12
 2351 016b 06       		.uleb128 0x6
 2352 016c 40       		.uleb128 0x40
 2353 016d 18       		.uleb128 0x18
 2354 016e 9642     		.uleb128 0x2116
 2355 0170 19       		.uleb128 0x19
 2356 0171 01       		.uleb128 0x1
 2357 0172 13       		.uleb128 0x13
 2358 0173 00       		.byte	0
 2359 0174 00       		.byte	0
 2360 0175 16       		.uleb128 0x16
 2361 0176 0B       		.uleb128 0xb
 2362 0177 01       		.byte	0x1
 2363 0178 11       		.uleb128 0x11
 2364 0179 01       		.uleb128 0x1
 2365 017a 12       		.uleb128 0x12
 2366 017b 06       		.uleb128 0x6
 2367 017c 00       		.byte	0
 2368 017d 00       		.byte	0
 2369 017e 17       		.uleb128 0x17
 2370 017f 01       		.uleb128 0x1
 2371 0180 01       		.byte	0x1
 2372 0181 49       		.uleb128 0x49
 2373 0182 13       		.uleb128 0x13
 2374 0183 01       		.uleb128 0x1
 2375 0184 13       		.uleb128 0x13
 2376 0185 00       		.byte	0
 2377 0186 00       		.byte	0
 2378 0187 18       		.uleb128 0x18
 2379 0188 21       		.uleb128 0x21
 2380 0189 00       		.byte	0
 2381 018a 49       		.uleb128 0x49
 2382 018b 13       		.uleb128 0x13
 2383 018c 2F       		.uleb128 0x2f
 2384 018d 0B       		.uleb128 0xb
 2385 018e 00       		.byte	0
 2386 018f 00       		.byte	0
 2387 0190 19       		.uleb128 0x19
 2388 0191 34       		.uleb128 0x34
 2389 0192 00       		.byte	0
 2390 0193 03       		.uleb128 0x3
 2391 0194 0E       		.uleb128 0xe
 2392 0195 3A       		.uleb128 0x3a
 2393 0196 0B       		.uleb128 0xb
 2394 0197 3B       		.uleb128 0x3b
 2395 0198 0B       		.uleb128 0xb
 2396 0199 49       		.uleb128 0x49
 2397 019a 13       		.uleb128 0x13
 2398 019b 3F       		.uleb128 0x3f
 2399 019c 19       		.uleb128 0x19
 2400 019d 02       		.uleb128 0x2
 2401 019e 18       		.uleb128 0x18
 2402 019f 00       		.byte	0
 2403 01a0 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 54


 2404 01a1 1A       		.uleb128 0x1a
 2405 01a2 34       		.uleb128 0x34
 2406 01a3 00       		.byte	0
 2407 01a4 03       		.uleb128 0x3
 2408 01a5 0E       		.uleb128 0xe
 2409 01a6 3A       		.uleb128 0x3a
 2410 01a7 0B       		.uleb128 0xb
 2411 01a8 3B       		.uleb128 0x3b
 2412 01a9 05       		.uleb128 0x5
 2413 01aa 49       		.uleb128 0x49
 2414 01ab 13       		.uleb128 0x13
 2415 01ac 3F       		.uleb128 0x3f
 2416 01ad 19       		.uleb128 0x19
 2417 01ae 02       		.uleb128 0x2
 2418 01af 18       		.uleb128 0x18
 2419 01b0 00       		.byte	0
 2420 01b1 00       		.byte	0
 2421 01b2 00       		.byte	0
 2422              		.section	.debug_aranges,"",%progbits
 2423 0000 8C000000 		.4byte	0x8c
 2424 0004 0200     		.2byte	0x2
 2425 0006 00000000 		.4byte	.Ldebug_info0
 2426 000a 04       		.byte	0x4
 2427 000b 00       		.byte	0
 2428 000c 0000     		.2byte	0
 2429 000e 0000     		.2byte	0
 2430 0010 00000000 		.4byte	.LFB33
 2431 0014 28000000 		.4byte	.LFE33-.LFB33
 2432 0018 00000000 		.4byte	.LFB34
 2433 001c 0C010000 		.4byte	.LFE34-.LFB34
 2434 0020 00000000 		.4byte	.LFB35
 2435 0024 4C000000 		.4byte	.LFE35-.LFB35
 2436 0028 00000000 		.4byte	.LFB36
 2437 002c 08000000 		.4byte	.LFE36-.LFB36
 2438 0030 00000000 		.4byte	.LFB37
 2439 0034 44000000 		.4byte	.LFE37-.LFB37
 2440 0038 00000000 		.4byte	.LFB38
 2441 003c 08000000 		.4byte	.LFE38-.LFB38
 2442 0040 00000000 		.4byte	.LFB39
 2443 0044 48000000 		.4byte	.LFE39-.LFB39
 2444 0048 00000000 		.4byte	.LFB40
 2445 004c 48000000 		.4byte	.LFE40-.LFB40
 2446 0050 00000000 		.4byte	.LFB41
 2447 0054 08000000 		.4byte	.LFE41-.LFB41
 2448 0058 00000000 		.4byte	.LFB42
 2449 005c 88000000 		.4byte	.LFE42-.LFB42
 2450 0060 00000000 		.4byte	.LFB43
 2451 0064 78000000 		.4byte	.LFE43-.LFB43
 2452 0068 00000000 		.4byte	.LFB44
 2453 006c 88000000 		.4byte	.LFE44-.LFB44
 2454 0070 00000000 		.4byte	.LFB45
 2455 0074 28010000 		.4byte	.LFE45-.LFB45
 2456 0078 00000000 		.4byte	.LFB46
 2457 007c 08000000 		.4byte	.LFE46-.LFB46
 2458 0080 00000000 		.4byte	.LFB47
 2459 0084 F8000000 		.4byte	.LFE47-.LFB47
 2460 0088 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 55


 2461 008c 00000000 		.4byte	0
 2462              		.section	.debug_ranges,"",%progbits
 2463              	.Ldebug_ranges0:
 2464 0000 00000000 		.4byte	.LFB33
 2465 0004 28000000 		.4byte	.LFE33
 2466 0008 00000000 		.4byte	.LFB34
 2467 000c 0C010000 		.4byte	.LFE34
 2468 0010 00000000 		.4byte	.LFB35
 2469 0014 4C000000 		.4byte	.LFE35
 2470 0018 00000000 		.4byte	.LFB36
 2471 001c 08000000 		.4byte	.LFE36
 2472 0020 00000000 		.4byte	.LFB37
 2473 0024 44000000 		.4byte	.LFE37
 2474 0028 00000000 		.4byte	.LFB38
 2475 002c 08000000 		.4byte	.LFE38
 2476 0030 00000000 		.4byte	.LFB39
 2477 0034 48000000 		.4byte	.LFE39
 2478 0038 00000000 		.4byte	.LFB40
 2479 003c 48000000 		.4byte	.LFE40
 2480 0040 00000000 		.4byte	.LFB41
 2481 0044 08000000 		.4byte	.LFE41
 2482 0048 00000000 		.4byte	.LFB42
 2483 004c 88000000 		.4byte	.LFE42
 2484 0050 00000000 		.4byte	.LFB43
 2485 0054 78000000 		.4byte	.LFE43
 2486 0058 00000000 		.4byte	.LFB44
 2487 005c 88000000 		.4byte	.LFE44
 2488 0060 00000000 		.4byte	.LFB45
 2489 0064 28010000 		.4byte	.LFE45
 2490 0068 00000000 		.4byte	.LFB46
 2491 006c 08000000 		.4byte	.LFE46
 2492 0070 00000000 		.4byte	.LFB47
 2493 0074 F8000000 		.4byte	.LFE47
 2494 0078 00000000 		.4byte	0
 2495 007c 00000000 		.4byte	0
 2496              		.section	.debug_line,"",%progbits
 2497              	.Ldebug_line0:
 2498 0000 C5020000 		.section	.debug_str,"MS",%progbits,1
 2498      0200BF00 
 2498      00000201 
 2498      FB0E0D00 
 2498      01010101 
 2499              	.LASF34:
 2500 0000 6C5F7374 		.ascii	"l_start\000"
 2500      61727400 
 2501              	.LASF80:
 2502 0008 77726973 		.ascii	"wristRotate_state\000"
 2502      74526F74 
 2502      6174655F 
 2502      73746174 
 2502      6500
 2503              	.LASF19:
 2504 001a 73686C64 		.ascii	"shldr_init\000"
 2504      725F696E 
 2504      697400
 2505              	.LASF25:
 2506 0025 74696C74 		.ascii	"tilt_start\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 56


 2506      5F737461 
 2506      727400
 2507              	.LASF51:
 2508 0030 66696C6C 		.ascii	"fill_data_array\000"
 2508      5F646174 
 2508      615F6172 
 2508      72617900 
 2509              	.LASF75:
 2510 0040 73657276 		.ascii	"servo_array\000"
 2510      6F5F6172 
 2510      72617900 
 2511              	.LASF83:
 2512 004c 73657276 		.ascii	"servo1_state\000"
 2512      6F315F73 
 2512      74617465 
 2512      00
 2513              	.LASF30:
 2514 0059 726F7461 		.ascii	"rotate_start\000"
 2514      74655F73 
 2514      74617274 
 2514      00
 2515              	.LASF16:
 2516 0066 73697A65 		.ascii	"sizetype\000"
 2516      74797065 
 2516      00
 2517              	.LASF28:
 2518 006f 77726973 		.ascii	"wristRotate_states\000"
 2518      74526F74 
 2518      6174655F 
 2518      73746174 
 2518      657300
 2519              	.LASF71:
 2520 0082 77697A6E 		.ascii	"wiznet\000"
 2520      657400
 2521              	.LASF6:
 2522 0089 6C6F6E67 		.ascii	"long long int\000"
 2522      206C6F6E 
 2522      6720696E 
 2522      7400
 2523              	.LASF84:
 2524 0097 6D6F746F 		.ascii	"motor_state\000"
 2524      725F7374 
 2524      61746500 
 2525              	.LASF2:
 2526 00a3 73686F72 		.ascii	"short int\000"
 2526      7420696E 
 2526      7400
 2527              	.LASF37:
 2528 00ad 73657276 		.ascii	"servo_states\000"
 2528      6F5F7374 
 2528      61746573 
 2528      00
 2529              	.LASF55:
 2530 00ba 656C626F 		.ascii	"elbow\000"
 2530      7700
 2531              	.LASF44:
 2532 00c0 73315F65 		.ascii	"s1_execute\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 57


 2532      78656375 
 2532      746500
 2533              	.LASF10:
 2534 00cb 75696E74 		.ascii	"uint16\000"
 2534      313600
 2535              	.LASF57:
 2536 00d2 77726973 		.ascii	"wristRotate\000"
 2536      74526F74 
 2536      61746500 
 2537              	.LASF12:
 2538 00de 696E7431 		.ascii	"int16\000"
 2538      3600
 2539              	.LASF29:
 2540 00e4 726F7461 		.ascii	"rotate_init\000"
 2540      74655F69 
 2540      6E697400 
 2541              	.LASF77:
 2542 00f0 74696D65 		.ascii	"timerFlag\000"
 2542      72466C61 
 2542      6700
 2543              	.LASF35:
 2544 00fa 6C5F6469 		.ascii	"l_different\000"
 2544      66666572 
 2544      656E7400 
 2545              	.LASF0:
 2546 0106 7369676E 		.ascii	"signed char\000"
 2546      65642063 
 2546      68617200 
 2547              	.LASF73:
 2548 0112 74657374 		.ascii	"test_array\000"
 2548      5F617272 
 2548      617900
 2549              	.LASF13:
 2550 011d 666C6F61 		.ascii	"float\000"
 2550      7400
 2551              	.LASF53:
 2552 0123 62617365 		.ascii	"baseAzimuth\000"
 2552      417A696D 
 2552      75746800 
 2553              	.LASF56:
 2554 012f 77726973 		.ascii	"wristTilt\000"
 2554      7454696C 
 2554      7400
 2555              	.LASF31:
 2556 0139 726F7461 		.ascii	"rotate_control\000"
 2556      74655F63 
 2556      6F6E7472 
 2556      6F6C00
 2557              	.LASF4:
 2558 0148 6C6F6E67 		.ascii	"long int\000"
 2558      20696E74 
 2558      00
 2559              	.LASF42:
 2560 0151 73315F73 		.ascii	"s1_start\000"
 2560      74617274 
 2560      00
 2561              	.LASF22:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 58


 2562 015a 73686C64 		.ascii	"shldr_states\000"
 2562      725F7374 
 2562      61746573 
 2562      00
 2563              	.LASF78:
 2564 0167 73686C64 		.ascii	"shldr_state\000"
 2564      725F7374 
 2564      61746500 
 2565              	.LASF24:
 2566 0173 74696C74 		.ascii	"tilt_init\000"
 2566      5F696E69 
 2566      7400
 2567              	.LASF74:
 2568 017d 73657276 		.ascii	"serv_arr_cspot\000"
 2568      5F617272 
 2568      5F637370 
 2568      6F7400
 2569              	.LASF18:
 2570 018c 73686C64 		.ascii	"shldr_start\000"
 2570      725F7374 
 2570      61727400 
 2571              	.LASF86:
 2572 0198 2E5C6D61 		.ascii	".\\main.c\000"
 2572      696E2E63 
 2572      00
 2573              	.LASF58:
 2574 01a1 73656E64 		.ascii	"send_feedback\000"
 2574      5F666565 
 2574      64626163 
 2574      6B00
 2575              	.LASF1:
 2576 01af 756E7369 		.ascii	"unsigned char\000"
 2576      676E6564 
 2576      20636861 
 2576      7200
 2577              	.LASF50:
 2578 01bd 6973725F 		.ascii	"isr_var\000"
 2578      76617200 
 2579              	.LASF67:
 2580 01c5 636F756E 		.ascii	"counter\000"
 2580      74657200 
 2581              	.LASF36:
 2582 01cd 6C5F7761 		.ascii	"l_wait\000"
 2582      697400
 2583              	.LASF69:
 2584 01d4 72616E64 		.ascii	"random_number\000"
 2584      6F6D5F6E 
 2584      756D6265 
 2584      7200
 2585              	.LASF27:
 2586 01e2 74696C74 		.ascii	"tilt_feedback\000"
 2586      5F666565 
 2586      64626163 
 2586      6B00
 2587              	.LASF20:
 2588 01f0 73686C64 		.ascii	"shldr_fdbk\000"
 2588      725F6664 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 59


 2588      626B00
 2589              	.LASF60:
 2590 01fb 6E756D5F 		.ascii	"num_items\000"
 2590      6974656D 
 2590      7300
 2591              	.LASF76:
 2592 0205 66656564 		.ascii	"feedback_count\000"
 2592      6261636B 
 2592      5F636F75 
 2592      6E7400
 2593              	.LASF7:
 2594 0214 6C6F6E67 		.ascii	"long long unsigned int\000"
 2594      206C6F6E 
 2594      6720756E 
 2594      7369676E 
 2594      65642069 
 2595              	.LASF41:
 2596 022b 73657276 		.ascii	"servo1_states\000"
 2596      6F315F73 
 2596      74617465 
 2596      7300
 2597              	.LASF8:
 2598 0239 756E7369 		.ascii	"unsigned int\000"
 2598      676E6564 
 2598      20696E74 
 2598      00
 2599              	.LASF47:
 2600 0246 6D5F7374 		.ascii	"m_start\000"
 2600      61727400 
 2601              	.LASF5:
 2602 024e 6C6F6E67 		.ascii	"long unsigned int\000"
 2602      20756E73 
 2602      69676E65 
 2602      6420696E 
 2602      7400
 2603              	.LASF3:
 2604 0260 73686F72 		.ascii	"short unsigned int\000"
 2604      7420756E 
 2604      7369676E 
 2604      65642069 
 2604      6E7400
 2605              	.LASF23:
 2606 0273 77726973 		.ascii	"wristTilt_states\000"
 2606      7454696C 
 2606      745F7374 
 2606      61746573 
 2606      00
 2607              	.LASF46:
 2608 0284 6D6F746F 		.ascii	"motor_states\000"
 2608      725F7374 
 2608      61746573 
 2608      00
 2609              	.LASF15:
 2610 0291 63686172 		.ascii	"char\000"
 2610      00
 2611              	.LASF87:
 2612 0296 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 60


 2612      73657273 
 2612      5C53616D 
 2612      75656C5C 
 2612      446F6375 
 2613 02c4 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.1.cydsn"
 2613      5C61726D 
 2613      5F636F6E 
 2613      74726F6C 
 2613      6C65725F 
 2614 02f4 00       		.ascii	"\000"
 2615              	.LASF66:
 2616 02f5 6D61696E 		.ascii	"main\000"
 2616      00
 2617              	.LASF79:
 2618 02fa 77726973 		.ascii	"wristTilt_state\000"
 2618      7454696C 
 2618      745F7374 
 2618      61746500 
 2619              	.LASF62:
 2620 030a 73657276 		.ascii	"servo1\000"
 2620      6F3100
 2621              	.LASF33:
 2622 0311 6C65645F 		.ascii	"led_states\000"
 2622      73746174 
 2622      657300
 2623              	.LASF9:
 2624 031c 75696E74 		.ascii	"uint8\000"
 2624      3800
 2625              	.LASF64:
 2626 0322 6D6F746F 		.ascii	"motor\000"
 2626      7200
 2627              	.LASF48:
 2628 0328 6D5F6469 		.ascii	"m_different\000"
 2628      66666572 
 2628      656E7400 
 2629              	.LASF54:
 2630 0334 73686F75 		.ascii	"shoulder\000"
 2630      6C646572 
 2630      00
 2631              	.LASF11:
 2632 033d 75696E74 		.ascii	"uint32\000"
 2632      333200
 2633              	.LASF21:
 2634 0344 73686C64 		.ascii	"shldr_exe\000"
 2634      725F6578 
 2634      6500
 2635              	.LASF26:
 2636 034e 74696C74 		.ascii	"tilt_control\000"
 2636      5F636F6E 
 2636      74726F6C 
 2636      00
 2637              	.LASF14:
 2638 035b 646F7562 		.ascii	"double\000"
 2638      6C6500
 2639              	.LASF68:
 2640 0362 636F756E 		.ascii	"counter_five\000"
 2640      7465725F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 61


 2640      66697665 
 2640      00
 2641              	.LASF17:
 2642 036f 74696D65 		.ascii	"time_t\000"
 2642      5F7400
 2643              	.LASF59:
 2644 0376 61727261 		.ascii	"array\000"
 2644      7900
 2645              	.LASF39:
 2646 037c 735F6469 		.ascii	"s_different\000"
 2646      66666572 
 2646      656E7400 
 2647              	.LASF61:
 2648 0388 73657276 		.ascii	"servo\000"
 2648      6F00
 2649              	.LASF38:
 2650 038e 735F7374 		.ascii	"s_start\000"
 2650      61727400 
 2651              	.LASF81:
 2652 0396 6C65645F 		.ascii	"led_state\000"
 2652      73746174 
 2652      6500
 2653              	.LASF43:
 2654 03a0 73315F69 		.ascii	"s1_init\000"
 2654      6E697400 
 2655              	.LASF82:
 2656 03a8 73657276 		.ascii	"servo_state\000"
 2656      6F5F7374 
 2656      61746500 
 2657              	.LASF52:
 2658 03b4 66696C6C 		.ascii	"fill_data_array1\000"
 2658      5F646174 
 2658      615F6172 
 2658      72617931 
 2658      00
 2659              	.LASF65:
 2660 03c5 74696D65 		.ascii	"timer_isr\000"
 2660      725F6973 
 2660      7200
 2661              	.LASF72:
 2662 03cf 6E65775F 		.ascii	"new_pack\000"
 2662      7061636B 
 2662      00
 2663              	.LASF40:
 2664 03d8 735F7761 		.ascii	"s_wait\000"
 2664      697400
 2665              	.LASF85:
 2666 03df 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2666      4320342E 
 2666      382E3420 
 2666      32303134 
 2666      30353236 
 2667 0412 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2667      20726576 
 2667      6973696F 
 2667      6E203231 
 2667      31333538 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccgFt4e0.s 			page 62


 2668 0445 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2668      74643D67 
 2668      6E753939 
 2668      202D6666 
 2668      756E6374 
 2669              	.LASF88:
 2670 0466 61766572 		.ascii	"average\000"
 2670      61676500 
 2671              	.LASF70:
 2672 046e 64617461 		.ascii	"data_array\000"
 2672      5F617272 
 2672      617900
 2673              	.LASF63:
 2674 0479 636F6D6D 		.ascii	"command\000"
 2674      616E6400 
 2675              	.LASF45:
 2676 0481 73315F77 		.ascii	"s1_wait\000"
 2676      61697400 
 2677              	.LASF32:
 2678 0489 726F7461 		.ascii	"rotate_feedback\000"
 2678      74655F66 
 2678      65656462 
 2678      61636B00 
 2679              	.LASF49:
 2680 0499 6D5F7761 		.ascii	"m_wait\000"
 2680      697400
 2681              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

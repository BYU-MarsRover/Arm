ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,28,4
  18              		.comm	wiznet,1,1
  19              		.comm	new_pack,1,1
  20              		.comm	serv_arr_cspot,1,1
  21              		.comm	servo_array,40,4
  22              		.global	serv_avg_count
  23              		.bss
  24              		.type	serv_avg_count, %object
  25              		.size	serv_avg_count, 1
  26              	serv_avg_count:
  27 0000 00       		.space	1
  28              		.comm	feedback_count,2,2
  29              		.comm	timerFlag,1,1
  30              		.section	.text.timer_isr,"ax",%progbits
  31              		.align	2
  32              		.global	timer_isr
  33              		.code	16
  34              		.thumb_func
  35              		.type	timer_isr, %function
  36              	timer_isr:
  37              	.LFB33:
  38              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** 
   7:.\main.c      **** //Initializations of global variables
   8:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
   9:.\main.c      **** //////pointer to each function?
  10:.\main.c      **** uint16 data_array[14]; //stores the parsed instructions from the wiznet
  11:.\main.c      **** uint8 wiznet;
  12:.\main.c      **** uint8 new_pack;
  13:.\main.c      **** 
  14:.\main.c      **** #define SERV_ARR_SIZE 20
  15:.\main.c      **** uint8 serv_arr_cspot;
  16:.\main.c      **** uint16 servo_array[SERV_ARR_SIZE];
  17:.\main.c      **** uint8 serv_avg_count = 0;
  18:.\main.c      **** 
  19:.\main.c      **** uint16 feedback_count;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 2


  20:.\main.c      **** uint8 timerFlag; //used in the timer_isr
  21:.\main.c      **** 
  22:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  23:.\main.c      **** ///set to the time of the longest path for our code
  24:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  25:.\main.c      **** CY_ISR(timer_isr)
  26:.\main.c      **** {
  39              		.loc 1 26 0
  40              		.cfi_startproc
  41 0000 80B5     		push	{r7, lr}
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 82B0     		sub	sp, sp, #8
  46              		.cfi_def_cfa_offset 16
  47 0004 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  27:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  49              		.loc 1 27 0
  50 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  51 000a 031C     		mov	r3, r0
  52 000c 7B60     		str	r3, [r7, #4]
  28:.\main.c      ****     timerFlag = 1;
  53              		.loc 1 28 0
  54 000e 054B     		ldr	r3, .L2
  55 0010 0122     		mov	r2, #1
  56 0012 1A70     		strb	r2, [r3]
  29:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  57              		.loc 1 29 0
  58 0014 7B68     		ldr	r3, [r7, #4]
  59 0016 181C     		mov	r0, r3
  60 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  30:.\main.c      **** }
  61              		.loc 1 30 0
  62 001c BD46     		mov	sp, r7
  63 001e 02B0     		add	sp, sp, #8
  64              		@ sp needed
  65 0020 80BD     		pop	{r7, pc}
  66              	.L3:
  67 0022 C046     		.align	2
  68              	.L2:
  69 0024 00000000 		.word	timerFlag
  70              		.cfi_endproc
  71              	.LFE33:
  72              		.size	timer_isr, .-timer_isr
  73              		.section	.text.fill_data_array,"ax",%progbits
  74              		.align	2
  75              		.global	fill_data_array
  76              		.code	16
  77              		.thumb_func
  78              		.type	fill_data_array, %function
  79              	fill_data_array:
  80              	.LFB34:
  31:.\main.c      **** 
  32:.\main.c      **** 
  33:.\main.c      **** //Funtion declarations/definitions
  34:.\main.c      **** //TODO do we need to make a header for good practice?
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 3


  35:.\main.c      **** 
  36:.\main.c      **** //---------------------------------------------------
  37:.\main.c      **** //    Function stubs for the header
  38:.\main.c      **** //---------------------------------------------------
  39:.\main.c      **** void fill_data_array();
  40:.\main.c      **** void baseAzimuth();
  41:.\main.c      **** void shoulder();
  42:.\main.c      **** void elbow();
  43:.\main.c      **** void wristTilt();
  44:.\main.c      **** void wristRotate();
  45:.\main.c      **** void send_feedback();
  46:.\main.c      **** 
  47:.\main.c      **** void servo();
  48:.\main.c      **** void led();
  49:.\main.c      **** void fill_data_array1();
  50:.\main.c      **** 
  51:.\main.c      **** //--------------------------------------------------- END Function Stubs
  52:.\main.c      **** 
  53:.\main.c      **** 
  54:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  55:.\main.c      **** void fill_data_array() //maybe take param: uint8* array
  56:.\main.c      **** {
  81              		.loc 1 56 0
  82              		.cfi_startproc
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 82B0     		sub	sp, sp, #8
  88              		.cfi_def_cfa_offset 16
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  57:.\main.c      ****     
  58:.\main.c      ****     //read one byte at a time
  59:.\main.c      ****     uint8 c = UART_1_UartGetChar();
  91              		.loc 1 59 0
  92 0006 FFF7FEFF 		bl	UART_1_UartGetChar
  93 000a 021C     		mov	r2, r0
  94 000c FB1D     		add	r3, r7, #7
  95 000e 1A70     		strb	r2, [r3]
  60:.\main.c      ****     
  61:.\main.c      **** 
  62:.\main.c      ****     if(c == 'q'){
  96              		.loc 1 62 0
  97 0010 FB1D     		add	r3, r7, #7
  98 0012 1B78     		ldrb	r3, [r3]
  99 0014 712B     		cmp	r3, #113
 100 0016 04D1     		bne	.L5
  63:.\main.c      ****         data_array[1] = 2000;
 101              		.loc 1 63 0
 102 0018 354B     		ldr	r3, .L18
 103 001a FA22     		mov	r2, #250
 104 001c D200     		lsl	r2, r2, #3
 105 001e 5A80     		strh	r2, [r3, #2]
 106 0020 62E0     		b	.L4
 107              	.L5:
  64:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 4


  65:.\main.c      ****     else if(c == 'w'){
 108              		.loc 1 65 0
 109 0022 FB1D     		add	r3, r7, #7
 110 0024 1B78     		ldrb	r3, [r3]
 111 0026 772B     		cmp	r3, #119
 112 0028 03D1     		bne	.L7
  66:.\main.c      ****         data_array[1] = 1750;
 113              		.loc 1 66 0
 114 002a 314B     		ldr	r3, .L18
 115 002c 314A     		ldr	r2, .L18+4
 116 002e 5A80     		strh	r2, [r3, #2]
 117 0030 5AE0     		b	.L4
 118              	.L7:
  67:.\main.c      ****     }
  68:.\main.c      ****     else if(c == 'e'){
 119              		.loc 1 68 0
 120 0032 FB1D     		add	r3, r7, #7
 121 0034 1B78     		ldrb	r3, [r3]
 122 0036 652B     		cmp	r3, #101
 123 0038 03D1     		bne	.L8
  69:.\main.c      ****         data_array[1] = 1500;
 124              		.loc 1 69 0
 125 003a 2D4B     		ldr	r3, .L18
 126 003c 2E4A     		ldr	r2, .L18+8
 127 003e 5A80     		strh	r2, [r3, #2]
 128 0040 52E0     		b	.L4
 129              	.L8:
  70:.\main.c      ****     }
  71:.\main.c      ****     else if(c == 'r'){
 130              		.loc 1 71 0
 131 0042 FB1D     		add	r3, r7, #7
 132 0044 1B78     		ldrb	r3, [r3]
 133 0046 722B     		cmp	r3, #114
 134 0048 03D1     		bne	.L9
  72:.\main.c      ****         data_array[1] = 1250;
 135              		.loc 1 72 0
 136 004a 294B     		ldr	r3, .L18
 137 004c 2B4A     		ldr	r2, .L18+12
 138 004e 5A80     		strh	r2, [r3, #2]
 139 0050 4AE0     		b	.L4
 140              	.L9:
  73:.\main.c      ****     }
  74:.\main.c      ****     else if(c == 't'){
 141              		.loc 1 74 0
 142 0052 FB1D     		add	r3, r7, #7
 143 0054 1B78     		ldrb	r3, [r3]
 144 0056 742B     		cmp	r3, #116
 145 0058 04D1     		bne	.L10
  75:.\main.c      ****         data_array[1] = 1000;
 146              		.loc 1 75 0
 147 005a 254B     		ldr	r3, .L18
 148 005c FA22     		mov	r2, #250
 149 005e 9200     		lsl	r2, r2, #2
 150 0060 5A80     		strh	r2, [r3, #2]
 151 0062 41E0     		b	.L4
 152              	.L10:
  76:.\main.c      ****     }    
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 5


  77:.\main.c      ****     else if(c == '1'){
 153              		.loc 1 77 0
 154 0064 FB1D     		add	r3, r7, #7
 155 0066 1B78     		ldrb	r3, [r3]
 156 0068 312B     		cmp	r3, #49
 157 006a 04D1     		bne	.L11
  78:.\main.c      ****         data_array[2] = 1000;
 158              		.loc 1 78 0
 159 006c 204B     		ldr	r3, .L18
 160 006e FA22     		mov	r2, #250
 161 0070 9200     		lsl	r2, r2, #2
 162 0072 9A80     		strh	r2, [r3, #4]
 163 0074 38E0     		b	.L4
 164              	.L11:
  79:.\main.c      ****     }
  80:.\main.c      ****     else if(c == '2'){
 165              		.loc 1 80 0
 166 0076 FB1D     		add	r3, r7, #7
 167 0078 1B78     		ldrb	r3, [r3]
 168 007a 322B     		cmp	r3, #50
 169 007c 03D1     		bne	.L12
  81:.\main.c      ****         data_array[2] = 5000;
 170              		.loc 1 81 0
 171 007e 1C4B     		ldr	r3, .L18
 172 0080 1F4A     		ldr	r2, .L18+16
 173 0082 9A80     		strh	r2, [r3, #4]
 174 0084 30E0     		b	.L4
 175              	.L12:
  82:.\main.c      ****     }
  83:.\main.c      ****     else if(c == '3'){
 176              		.loc 1 83 0
 177 0086 FB1D     		add	r3, r7, #7
 178 0088 1B78     		ldrb	r3, [r3]
 179 008a 332B     		cmp	r3, #51
 180 008c 03D1     		bne	.L13
  84:.\main.c      ****         data_array[2] = 10000;
 181              		.loc 1 84 0
 182 008e 184B     		ldr	r3, .L18
 183 0090 1C4A     		ldr	r2, .L18+20
 184 0092 9A80     		strh	r2, [r3, #4]
 185 0094 28E0     		b	.L4
 186              	.L13:
  85:.\main.c      ****     }
  86:.\main.c      ****     else if(c == '4'){
 187              		.loc 1 86 0
 188 0096 FB1D     		add	r3, r7, #7
 189 0098 1B78     		ldrb	r3, [r3]
 190 009a 342B     		cmp	r3, #52
 191 009c 03D1     		bne	.L14
  87:.\main.c      ****         data_array[2] = 15000;
 192              		.loc 1 87 0
 193 009e 144B     		ldr	r3, .L18
 194 00a0 194A     		ldr	r2, .L18+24
 195 00a2 9A80     		strh	r2, [r3, #4]
 196 00a4 20E0     		b	.L4
 197              	.L14:
  88:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 6


  89:.\main.c      ****     else if(c == '5'){
 198              		.loc 1 89 0
 199 00a6 FB1D     		add	r3, r7, #7
 200 00a8 1B78     		ldrb	r3, [r3]
 201 00aa 352B     		cmp	r3, #53
 202 00ac 03D1     		bne	.L15
  90:.\main.c      ****         data_array[2] =19000;
 203              		.loc 1 90 0
 204 00ae 104B     		ldr	r3, .L18
 205 00b0 164A     		ldr	r2, .L18+28
 206 00b2 9A80     		strh	r2, [r3, #4]
 207 00b4 18E0     		b	.L4
 208              	.L15:
  91:.\main.c      ****     }    
  92:.\main.c      ****     else if(c == 'j'){
 209              		.loc 1 92 0
 210 00b6 FB1D     		add	r3, r7, #7
 211 00b8 1B78     		ldrb	r3, [r3]
 212 00ba 6A2B     		cmp	r3, #106
 213 00bc 04D1     		bne	.L16
  93:.\main.c      ****         data_array[3] = 1000;
 214              		.loc 1 93 0
 215 00be 0C4B     		ldr	r3, .L18
 216 00c0 FA22     		mov	r2, #250
 217 00c2 9200     		lsl	r2, r2, #2
 218 00c4 DA80     		strh	r2, [r3, #6]
 219 00c6 0FE0     		b	.L4
 220              	.L16:
  94:.\main.c      ****     }
  95:.\main.c      ****     else if(c == 'k'){
 221              		.loc 1 95 0
 222 00c8 FB1D     		add	r3, r7, #7
 223 00ca 1B78     		ldrb	r3, [r3]
 224 00cc 6B2B     		cmp	r3, #107
 225 00ce 03D1     		bne	.L17
  96:.\main.c      ****         data_array[3] = 1500;
 226              		.loc 1 96 0
 227 00d0 074B     		ldr	r3, .L18
 228 00d2 094A     		ldr	r2, .L18+8
 229 00d4 DA80     		strh	r2, [r3, #6]
 230 00d6 07E0     		b	.L4
 231              	.L17:
  97:.\main.c      ****     }
  98:.\main.c      ****     else if(c == 'l'){
 232              		.loc 1 98 0
 233 00d8 FB1D     		add	r3, r7, #7
 234 00da 1B78     		ldrb	r3, [r3]
 235 00dc 6C2B     		cmp	r3, #108
 236 00de 03D1     		bne	.L4
  99:.\main.c      ****         data_array[3] =2000;
 237              		.loc 1 99 0
 238 00e0 034B     		ldr	r3, .L18
 239 00e2 FA22     		mov	r2, #250
 240 00e4 D200     		lsl	r2, r2, #3
 241 00e6 DA80     		strh	r2, [r3, #6]
 242              	.L4:
 100:.\main.c      ****     }    
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 7


 101:.\main.c      **** 
 102:.\main.c      **** }
 243              		.loc 1 102 0
 244 00e8 BD46     		mov	sp, r7
 245 00ea 02B0     		add	sp, sp, #8
 246              		@ sp needed
 247 00ec 80BD     		pop	{r7, pc}
 248              	.L19:
 249 00ee C046     		.align	2
 250              	.L18:
 251 00f0 00000000 		.word	data_array
 252 00f4 D6060000 		.word	1750
 253 00f8 DC050000 		.word	1500
 254 00fc E2040000 		.word	1250
 255 0100 88130000 		.word	5000
 256 0104 10270000 		.word	10000
 257 0108 983A0000 		.word	15000
 258 010c 384A0000 		.word	19000
 259              		.cfi_endproc
 260              	.LFE34:
 261              		.size	fill_data_array, .-fill_data_array
 262              		.section	.text.fill_data_array1,"ax",%progbits
 263              		.align	2
 264              		.global	fill_data_array1
 265              		.code	16
 266              		.thumb_func
 267              		.type	fill_data_array1, %function
 268              	fill_data_array1:
 269              	.LFB35:
 103:.\main.c      **** 
 104:.\main.c      **** void fill_data_array1()
 105:.\main.c      **** {
 270              		.loc 1 105 0
 271              		.cfi_startproc
 272 0000 80B5     		push	{r7, lr}
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 7, -8
 275              		.cfi_offset 14, -4
 276 0002 00AF     		add	r7, sp, #0
 277              		.cfi_def_cfa_register 7
 106:.\main.c      ****     
 107:.\main.c      **** }
 278              		.loc 1 107 0
 279 0004 BD46     		mov	sp, r7
 280              		@ sp needed
 281 0006 80BD     		pop	{r7, pc}
 282              		.cfi_endproc
 283              	.LFE35:
 284              		.size	fill_data_array1, .-fill_data_array1
 285              		.section	.text.baseAzimuth,"ax",%progbits
 286              		.align	2
 287              		.global	baseAzimuth
 288              		.code	16
 289              		.thumb_func
 290              		.type	baseAzimuth, %function
 291              	baseAzimuth:
 292              	.LFB36:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 8


 108:.\main.c      **** 
 109:.\main.c      **** //control the turret
 110:.\main.c      **** void baseAzimuth()
 111:.\main.c      **** {
 293              		.loc 1 111 0
 294              		.cfi_startproc
 295 0000 80B5     		push	{r7, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 112:.\main.c      ****     //take instruction from data_array
 113:.\main.c      ****     //smooth input
 114:.\main.c      ****     //actuate the turret using PWM
 115:.\main.c      **** }
 301              		.loc 1 115 0
 302 0004 BD46     		mov	sp, r7
 303              		@ sp needed
 304 0006 80BD     		pop	{r7, pc}
 305              		.cfi_endproc
 306              	.LFE36:
 307              		.size	baseAzimuth, .-baseAzimuth
 308              		.comm	shldr_state,1,1
 309              		.section	.text.shoulder,"ax",%progbits
 310              		.align	2
 311              		.global	shoulder
 312              		.code	16
 313              		.thumb_func
 314              		.type	shoulder, %function
 315              	shoulder:
 316              	.LFB37:
 116:.\main.c      **** 
 117:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
 118:.\main.c      **** //control the shoulder
 119:.\main.c      **** void shoulder()
 120:.\main.c      **** {
 317              		.loc 1 120 0
 318              		.cfi_startproc
 319 0000 80B5     		push	{r7, lr}
 320              		.cfi_def_cfa_offset 8
 321              		.cfi_offset 7, -8
 322              		.cfi_offset 14, -4
 323 0002 00AF     		add	r7, sp, #0
 324              		.cfi_def_cfa_register 7
 121:.\main.c      ****     //take instruction from data_array
 122:.\main.c      ****     //smooth input
 123:.\main.c      ****     //actuate the shoulder using PWM
 124:.\main.c      ****     //get feedback
 125:.\main.c      ****     
 126:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 127:.\main.c      ****     //switch statement for state actions
 128:.\main.c      **** 		//start
 129:.\main.c      **** 			//break
 130:.\main.c      **** 		//initialize
 131:.\main.c      **** 			//create smoothing array
 132:.\main.c      **** 		//feedback
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 9


 133:.\main.c      **** 			//read feedback
 134:.\main.c      **** 		//execute
 135:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 136:.\main.c      **** 			//calculate average of value in array
 137:.\main.c      ****     
 138:.\main.c      ****     switch(shldr_state)
 325              		.loc 1 138 0
 326 0004 0E4B     		ldr	r3, .L30
 327 0006 1B78     		ldrb	r3, [r3]
 328 0008 012B     		cmp	r3, #1
 329 000a 0CD0     		beq	.L24
 330 000c 02DC     		bgt	.L25
 331 000e 002B     		cmp	r3, #0
 332 0010 05D0     		beq	.L26
 333 0012 12E0     		b	.L22
 334              	.L25:
 335 0014 022B     		cmp	r3, #2
 336 0016 0FD0     		beq	.L29
 337 0018 032B     		cmp	r3, #3
 338 001a 08D0     		beq	.L28
 339 001c 0DE0     		b	.L22
 340              	.L26:
 139:.\main.c      ****     {//switch staatement for state transitions
 140:.\main.c      **** 		case shldr_start: //start
 141:.\main.c      **** 			//next state will be init
 142:.\main.c      ****             shldr_state = shldr_init;
 341              		.loc 1 142 0
 342 001e 084B     		ldr	r3, .L30
 343 0020 0122     		mov	r2, #1
 344 0022 1A70     		strb	r2, [r3]
 143:.\main.c      ****             break;
 345              		.loc 1 143 0
 346 0024 09E0     		b	.L22
 347              	.L24:
 144:.\main.c      ****         
 145:.\main.c      **** 		case shldr_init: //initialize
 146:.\main.c      **** 			//next state will be feedback
 147:.\main.c      ****             shldr_state = shldr_fdbk;
 348              		.loc 1 147 0
 349 0026 064B     		ldr	r3, .L30
 350 0028 0222     		mov	r2, #2
 351 002a 1A70     		strb	r2, [r3]
 148:.\main.c      ****             break;
 352              		.loc 1 148 0
 353 002c 05E0     		b	.L22
 354              	.L28:
 149:.\main.c      ****         
 150:.\main.c      **** 		case shldr_fdbk://feedback
 151:.\main.c      **** 			//if position ok relative to average
 152:.\main.c      **** 				//execute
 153:.\main.c      **** 			//else if not ok
 154:.\main.c      **** 				//report problem
 155:.\main.c      ****             break;
 156:.\main.c      **** 		case shldr_exe://execute
 157:.\main.c      **** 			//next state will be report
 158:.\main.c      ****             shldr_state = shldr_fdbk;
 355              		.loc 1 158 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 10


 356 002e 044B     		ldr	r3, .L30
 357 0030 0222     		mov	r2, #2
 358 0032 1A70     		strb	r2, [r3]
 159:.\main.c      ****             break;
 359              		.loc 1 159 0
 360 0034 C046     		mov	r8, r8
 361 0036 00E0     		b	.L22
 362              	.L29:
 155:.\main.c      ****             break;
 363              		.loc 1 155 0
 364 0038 C046     		mov	r8, r8
 365              	.L22:
 160:.\main.c      ****     }
 161:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 162:.\main.c      **** }
 366              		.loc 1 162 0
 367 003a BD46     		mov	sp, r7
 368              		@ sp needed
 369 003c 80BD     		pop	{r7, pc}
 370              	.L31:
 371 003e C046     		.align	2
 372              	.L30:
 373 0040 00000000 		.word	shldr_state
 374              		.cfi_endproc
 375              	.LFE37:
 376              		.size	shoulder, .-shoulder
 377              		.section	.text.elbow,"ax",%progbits
 378              		.align	2
 379              		.global	elbow
 380              		.code	16
 381              		.thumb_func
 382              		.type	elbow, %function
 383              	elbow:
 384              	.LFB38:
 163:.\main.c      **** 
 164:.\main.c      **** //control the elbow
 165:.\main.c      **** void elbow()
 166:.\main.c      **** {
 385              		.loc 1 166 0
 386              		.cfi_startproc
 387 0000 80B5     		push	{r7, lr}
 388              		.cfi_def_cfa_offset 8
 389              		.cfi_offset 7, -8
 390              		.cfi_offset 14, -4
 391 0002 00AF     		add	r7, sp, #0
 392              		.cfi_def_cfa_register 7
 167:.\main.c      ****     //take instruction from data_array
 168:.\main.c      ****     //smooth input
 169:.\main.c      ****     //actuate the elbow using PWM
 170:.\main.c      ****     //get feedback
 171:.\main.c      **** }
 393              		.loc 1 171 0
 394 0004 BD46     		mov	sp, r7
 395              		@ sp needed
 396 0006 80BD     		pop	{r7, pc}
 397              		.cfi_endproc
 398              	.LFE38:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 11


 399              		.size	elbow, .-elbow
 400              		.comm	wristTilt_state,1,1
 401              		.section	.text.wristTilt,"ax",%progbits
 402              		.align	2
 403              		.global	wristTilt
 404              		.code	16
 405              		.thumb_func
 406              		.type	wristTilt, %function
 407              	wristTilt:
 408              	.LFB39:
 172:.\main.c      **** 
 173:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 174:.\main.c      **** //control the tilting motion of the wrist
 175:.\main.c      **** void wristTilt()
 176:.\main.c      **** {
 409              		.loc 1 176 0
 410              		.cfi_startproc
 411 0000 80B5     		push	{r7, lr}
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 415 0002 00AF     		add	r7, sp, #0
 416              		.cfi_def_cfa_register 7
 177:.\main.c      ****     // Overview
 178:.\main.c      ****     //take instruction from data_array
 179:.\main.c      ****     //smooth input
 180:.\main.c      ****     //actuate the tilting using UART
 181:.\main.c      ****     //get feedback
 182:.\main.c      **** 
 183:.\main.c      ****     //-------------------------- 
 184:.\main.c      ****     // Dynamixel Servo specific
 185:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 186:.\main.c      ****     // TODO: Set the desired position
 187:.\main.c      **** 
 188:.\main.c      ****     //--------------------------
 189:.\main.c      ****     // State machine
 190:.\main.c      ****     
 191:.\main.c      ****         // Action
 192:.\main.c      ****     switch(wristTilt_state)
 417              		.loc 1 192 0
 418 0004 0F4B     		ldr	r3, .L49
 419 0006 1B78     		ldrb	r3, [r3]
 420 0008 012B     		cmp	r3, #1
 421 000a 06D0     		beq	.L46
 422 000c 07DC     		bgt	.L47
 423 000e 002B     		cmp	r3, #0
 424 0010 06D1     		bne	.L34
 193:.\main.c      ****     {
 194:.\main.c      ****         case tilt_init:
 195:.\main.c      ****             wristTilt_state = tilt_start;
 425              		.loc 1 195 0
 426 0012 0C4B     		ldr	r3, .L49
 427 0014 0122     		mov	r2, #1
 428 0016 1A70     		strb	r2, [r3]
 196:.\main.c      ****             break;
 429              		.loc 1 196 0
 430 0018 02E0     		b	.L34
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 12


 431              	.L46:
 197:.\main.c      ****         case tilt_start:
 198:.\main.c      ****             // Set the torque - this is a one time thing
 199:.\main.c      ****             // Set the speed - I think this is a one time thing
 200:.\main.c      ****             break;
 432              		.loc 1 200 0
 433 001a C046     		mov	r8, r8
 434 001c 00E0     		b	.L34
 435              	.L47:
 201:.\main.c      ****         case tilt_control:
 202:.\main.c      ****             break;
 436              		.loc 1 202 0
 437 001e C046     		mov	r8, r8
 438              	.L34:
 203:.\main.c      ****         case tilt_feedback:
 204:.\main.c      ****             break;
 205:.\main.c      ****     }
 206:.\main.c      ****         // Transistion
 207:.\main.c      ****     switch(wristTilt_state)
 439              		.loc 1 207 0
 440 0020 084B     		ldr	r3, .L49
 441 0022 1B78     		ldrb	r3, [r3]
 442 0024 012B     		cmp	r3, #1
 443 0026 06D0     		beq	.L41
 444 0028 09DC     		bgt	.L48
 445 002a 002B     		cmp	r3, #0
 446 002c 08D1     		bne	.L33
 208:.\main.c      ****     {
 209:.\main.c      ****         case tilt_init:
 210:.\main.c      ****             wristTilt_state = tilt_start;
 447              		.loc 1 210 0
 448 002e 054B     		ldr	r3, .L49
 449 0030 0122     		mov	r2, #1
 450 0032 1A70     		strb	r2, [r3]
 211:.\main.c      ****             break;
 451              		.loc 1 211 0
 452 0034 04E0     		b	.L33
 453              	.L41:
 212:.\main.c      ****         case tilt_start:
 213:.\main.c      ****             wristTilt_state = tilt_control;
 454              		.loc 1 213 0
 455 0036 034B     		ldr	r3, .L49
 456 0038 0222     		mov	r2, #2
 457 003a 1A70     		strb	r2, [r3]
 214:.\main.c      ****             break;
 458              		.loc 1 214 0
 459 003c 00E0     		b	.L33
 460              	.L48:
 215:.\main.c      ****         case tilt_control:
 216:.\main.c      ****             break;
 461              		.loc 1 216 0
 462 003e C046     		mov	r8, r8
 463              	.L33:
 217:.\main.c      ****         case tilt_feedback:
 218:.\main.c      ****             break;
 219:.\main.c      ****     }
 220:.\main.c      **** }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 13


 464              		.loc 1 220 0
 465 0040 BD46     		mov	sp, r7
 466              		@ sp needed
 467 0042 80BD     		pop	{r7, pc}
 468              	.L50:
 469              		.align	2
 470              	.L49:
 471 0044 00000000 		.word	wristTilt_state
 472              		.cfi_endproc
 473              	.LFE39:
 474              		.size	wristTilt, .-wristTilt
 475              		.comm	wristRotate_state,1,1
 476              		.section	.text.wristRotate,"ax",%progbits
 477              		.align	2
 478              		.global	wristRotate
 479              		.code	16
 480              		.thumb_func
 481              		.type	wristRotate, %function
 482              	wristRotate:
 483              	.LFB40:
 221:.\main.c      **** 
 222:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 223:.\main.c      **** //control the rotating motion of the wrist
 224:.\main.c      **** void wristRotate()
 225:.\main.c      **** {
 484              		.loc 1 225 0
 485              		.cfi_startproc
 486 0000 80B5     		push	{r7, lr}
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 7, -8
 489              		.cfi_offset 14, -4
 490 0002 00AF     		add	r7, sp, #0
 491              		.cfi_def_cfa_register 7
 226:.\main.c      ****     //Overview
 227:.\main.c      ****     //take instruction from data_array
 228:.\main.c      ****     //smooth input
 229:.\main.c      ****     //actuate the tilting using UART
 230:.\main.c      ****     //get feedback
 231:.\main.c      **** 
 232:.\main.c      ****     //-------------------------- 
 233:.\main.c      ****     // Dynamixel Servo specific
 234:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 235:.\main.c      ****     // TODO: Set the desired position
 236:.\main.c      **** 
 237:.\main.c      ****     //--------------------------
 238:.\main.c      ****     // State machine
 239:.\main.c      ****     
 240:.\main.c      ****         // Action
 241:.\main.c      ****     switch(wristRotate_state)
 492              		.loc 1 241 0
 493 0004 0F4B     		ldr	r3, .L67
 494 0006 1B78     		ldrb	r3, [r3]
 495 0008 012B     		cmp	r3, #1
 496 000a 06D0     		beq	.L64
 497 000c 07DC     		bgt	.L65
 498 000e 002B     		cmp	r3, #0
 499 0010 06D1     		bne	.L52
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 14


 242:.\main.c      ****     {
 243:.\main.c      ****         case rotate_init:
 244:.\main.c      ****             wristRotate_state = rotate_start;
 500              		.loc 1 244 0
 501 0012 0C4B     		ldr	r3, .L67
 502 0014 0122     		mov	r2, #1
 503 0016 1A70     		strb	r2, [r3]
 245:.\main.c      ****             break;
 504              		.loc 1 245 0
 505 0018 02E0     		b	.L52
 506              	.L64:
 246:.\main.c      ****         case rotate_start:
 247:.\main.c      ****             // Set the torque - this is a one time thing
 248:.\main.c      ****             // Set the speed - I think this is a one time thing
 249:.\main.c      ****             break;
 507              		.loc 1 249 0
 508 001a C046     		mov	r8, r8
 509 001c 00E0     		b	.L52
 510              	.L65:
 250:.\main.c      ****         case rotate_control:
 251:.\main.c      ****             break;
 511              		.loc 1 251 0
 512 001e C046     		mov	r8, r8
 513              	.L52:
 252:.\main.c      ****         case rotate_feedback:
 253:.\main.c      ****             break;
 254:.\main.c      ****     }
 255:.\main.c      ****         // Transistion
 256:.\main.c      ****     switch(wristRotate_state)
 514              		.loc 1 256 0
 515 0020 084B     		ldr	r3, .L67
 516 0022 1B78     		ldrb	r3, [r3]
 517 0024 012B     		cmp	r3, #1
 518 0026 06D0     		beq	.L59
 519 0028 09DC     		bgt	.L66
 520 002a 002B     		cmp	r3, #0
 521 002c 08D1     		bne	.L51
 257:.\main.c      ****     {
 258:.\main.c      ****         case rotate_init:
 259:.\main.c      ****             wristRotate_state = rotate_start;
 522              		.loc 1 259 0
 523 002e 054B     		ldr	r3, .L67
 524 0030 0122     		mov	r2, #1
 525 0032 1A70     		strb	r2, [r3]
 260:.\main.c      ****             break;
 526              		.loc 1 260 0
 527 0034 04E0     		b	.L51
 528              	.L59:
 261:.\main.c      ****         case rotate_start:
 262:.\main.c      ****             wristRotate_state = rotate_control;
 529              		.loc 1 262 0
 530 0036 034B     		ldr	r3, .L67
 531 0038 0222     		mov	r2, #2
 532 003a 1A70     		strb	r2, [r3]
 263:.\main.c      ****             break;
 533              		.loc 1 263 0
 534 003c 00E0     		b	.L51
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 15


 535              	.L66:
 264:.\main.c      ****         case rotate_control:
 265:.\main.c      ****             break;
 536              		.loc 1 265 0
 537 003e C046     		mov	r8, r8
 538              	.L51:
 266:.\main.c      ****         case rotate_feedback:
 267:.\main.c      ****             break;
 268:.\main.c      ****     }
 269:.\main.c      **** }
 539              		.loc 1 269 0
 540 0040 BD46     		mov	sp, r7
 541              		@ sp needed
 542 0042 80BD     		pop	{r7, pc}
 543              	.L68:
 544              		.align	2
 545              	.L67:
 546 0044 00000000 		.word	wristRotate_state
 547              		.cfi_endproc
 548              	.LFE40:
 549              		.size	wristRotate, .-wristRotate
 550              		.section	.text.send_feedback,"ax",%progbits
 551              		.align	2
 552              		.global	send_feedback
 553              		.code	16
 554              		.thumb_func
 555              		.type	send_feedback, %function
 556              	send_feedback:
 557              	.LFB41:
 270:.\main.c      **** 
 271:.\main.c      **** void send_feedback()
 272:.\main.c      **** {
 558              		.loc 1 272 0
 559              		.cfi_startproc
 560 0000 80B5     		push	{r7, lr}
 561              		.cfi_def_cfa_offset 8
 562              		.cfi_offset 7, -8
 563              		.cfi_offset 14, -4
 564 0002 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 273:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 274:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 275:.\main.c      ****     //TODO define system state
 276:.\main.c      ****     //send packet via serial to wiznet
 277:.\main.c      **** }
 566              		.loc 1 277 0
 567 0004 BD46     		mov	sp, r7
 568              		@ sp needed
 569 0006 80BD     		pop	{r7, pc}
 570              		.cfi_endproc
 571              	.LFE41:
 572              		.size	send_feedback, .-send_feedback
 573              		.comm	led_state,1,1
 574              		.section	.text.led,"ax",%progbits
 575              		.align	2
 576              		.global	led
 577              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 16


 578              		.thumb_func
 579              		.type	led, %function
 580              	led:
 581              	.LFB42:
 278:.\main.c      **** 
 279:.\main.c      **** enum led_states {l_start,l_different,l_wait} led_state;
 280:.\main.c      **** void led()
 281:.\main.c      **** {
 582              		.loc 1 281 0
 583              		.cfi_startproc
 584 0000 80B5     		push	{r7, lr}
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 82B0     		sub	sp, sp, #8
 589              		.cfi_def_cfa_offset 16
 590 0004 00AF     		add	r7, sp, #0
 591              		.cfi_def_cfa_register 7
 282:.\main.c      ****     uint16 old = 0;
 592              		.loc 1 282 0
 593 0006 BB1D     		add	r3, r7, #6
 594 0008 0022     		mov	r2, #0
 595 000a 1A80     		strh	r2, [r3]
 283:.\main.c      ****     switch(led_state)
 596              		.loc 1 283 0
 597 000c 1C4B     		ldr	r3, .L84
 598 000e 1B78     		ldrb	r3, [r3]
 599 0010 012B     		cmp	r3, #1
 600 0012 09D1     		bne	.L83
 284:.\main.c      ****     {
 285:.\main.c      ****         case l_start:
 286:.\main.c      ****             break;
 287:.\main.c      ****         
 288:.\main.c      ****         case l_different:
 289:.\main.c      ****             PWM_1_WriteCompare1(data_array[1]);
 601              		.loc 1 289 0
 602 0014 1B4B     		ldr	r3, .L84+4
 603 0016 5B88     		ldrh	r3, [r3, #2]
 604 0018 181C     		mov	r0, r3
 605 001a FFF7FEFF 		bl	PWM_1_WriteCompare1
 290:.\main.c      ****             old = data_array[1];
 606              		.loc 1 290 0
 607 001e BB1D     		add	r3, r7, #6
 608 0020 184A     		ldr	r2, .L84+4
 609 0022 5288     		ldrh	r2, [r2, #2]
 610 0024 1A80     		strh	r2, [r3]
 291:.\main.c      ****             break;
 611              		.loc 1 291 0
 612 0026 00E0     		b	.L71
 613              	.L83:
 292:.\main.c      ****             
 293:.\main.c      ****         case l_wait:
 294:.\main.c      ****             break;
 614              		.loc 1 294 0
 615 0028 C046     		mov	r8, r8
 616              	.L71:
 295:.\main.c      ****     }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 17


 296:.\main.c      ****     
 297:.\main.c      ****     switch(led_state)
 617              		.loc 1 297 0
 618 002a 154B     		ldr	r3, .L84
 619 002c 1B78     		ldrb	r3, [r3]
 620 002e 012B     		cmp	r3, #1
 621 0030 07D0     		beq	.L76
 622 0032 022B     		cmp	r3, #2
 623 0034 13D0     		beq	.L77
 624 0036 002B     		cmp	r3, #0
 625 0038 1FD1     		bne	.L70
 298:.\main.c      ****     {
 299:.\main.c      ****         case l_start:
 300:.\main.c      ****             led_state = l_wait;
 626              		.loc 1 300 0
 627 003a 114B     		ldr	r3, .L84
 628 003c 0222     		mov	r2, #2
 629 003e 1A70     		strb	r2, [r3]
 301:.\main.c      ****             break;
 630              		.loc 1 301 0
 631 0040 1BE0     		b	.L70
 632              	.L76:
 302:.\main.c      ****         
 303:.\main.c      ****         case l_different:
 304:.\main.c      ****             if(data_array[1] != old)
 633              		.loc 1 304 0
 634 0042 104B     		ldr	r3, .L84+4
 635 0044 5B88     		ldrh	r3, [r3, #2]
 636 0046 BA1D     		add	r2, r7, #6
 637 0048 1288     		ldrh	r2, [r2]
 638 004a 9A42     		cmp	r2, r3
 639 004c 03D0     		beq	.L79
 305:.\main.c      ****             {
 306:.\main.c      ****                 led_state = l_different;
 640              		.loc 1 306 0
 641 004e 0C4B     		ldr	r3, .L84
 642 0050 0122     		mov	r2, #1
 643 0052 1A70     		strb	r2, [r3]
 307:.\main.c      ****             }
 308:.\main.c      ****             else
 309:.\main.c      ****             {
 310:.\main.c      ****                 led_state = l_wait;
 311:.\main.c      ****             }
 312:.\main.c      ****             break;
 644              		.loc 1 312 0
 645 0054 11E0     		b	.L70
 646              	.L79:
 310:.\main.c      ****                 led_state = l_wait;
 647              		.loc 1 310 0
 648 0056 0A4B     		ldr	r3, .L84
 649 0058 0222     		mov	r2, #2
 650 005a 1A70     		strb	r2, [r3]
 651              		.loc 1 312 0
 652 005c 0DE0     		b	.L70
 653              	.L77:
 313:.\main.c      ****             
 314:.\main.c      ****         case l_wait:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 18


 315:.\main.c      ****             if(data_array[1] != old)
 654              		.loc 1 315 0
 655 005e 094B     		ldr	r3, .L84+4
 656 0060 5B88     		ldrh	r3, [r3, #2]
 657 0062 BA1D     		add	r2, r7, #6
 658 0064 1288     		ldrh	r2, [r2]
 659 0066 9A42     		cmp	r2, r3
 660 0068 03D0     		beq	.L81
 316:.\main.c      ****             {
 317:.\main.c      ****                 led_state = l_different;
 661              		.loc 1 317 0
 662 006a 054B     		ldr	r3, .L84
 663 006c 0122     		mov	r2, #1
 664 006e 1A70     		strb	r2, [r3]
 665 0070 02E0     		b	.L82
 666              	.L81:
 318:.\main.c      ****             }
 319:.\main.c      ****             else
 320:.\main.c      ****             {
 321:.\main.c      ****                 led_state = l_wait;
 667              		.loc 1 321 0
 668 0072 034B     		ldr	r3, .L84
 669 0074 0222     		mov	r2, #2
 670 0076 1A70     		strb	r2, [r3]
 671              	.L82:
 322:.\main.c      ****             }
 323:.\main.c      ****             break;
 672              		.loc 1 323 0
 673 0078 C046     		mov	r8, r8
 674              	.L70:
 324:.\main.c      ****     }
 325:.\main.c      **** }
 675              		.loc 1 325 0
 676 007a BD46     		mov	sp, r7
 677 007c 02B0     		add	sp, sp, #8
 678              		@ sp needed
 679 007e 80BD     		pop	{r7, pc}
 680              	.L85:
 681              		.align	2
 682              	.L84:
 683 0080 00000000 		.word	led_state
 684 0084 00000000 		.word	data_array
 685              		.cfi_endproc
 686              	.LFE42:
 687              		.size	led, .-led
 688              		.global	__aeabi_uidiv
 689              		.section	.text.average,"ax",%progbits
 690              		.align	2
 691              		.global	average
 692              		.code	16
 693              		.thumb_func
 694              		.type	average, %function
 695              	average:
 696              	.LFB43:
 326:.\main.c      **** 
 327:.\main.c      **** //Average function to be used in smoothing our input
 328:.\main.c      **** uint16 average(uint16* array, uint8 num_items)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 19


 329:.\main.c      **** {
 697              		.loc 1 329 0
 698              		.cfi_startproc
 699 0000 80B5     		push	{r7, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 86B0     		sub	sp, sp, #24
 704              		.cfi_def_cfa_offset 32
 705 0004 00AF     		add	r7, sp, #0
 706              		.cfi_def_cfa_register 7
 707 0006 7860     		str	r0, [r7, #4]
 708 0008 0A1C     		mov	r2, r1
 709 000a FB1C     		add	r3, r7, #3
 710 000c 1A70     		strb	r2, [r3]
 330:.\main.c      ****     uint8 i;
 331:.\main.c      ****     uint32 sum = 0;
 711              		.loc 1 331 0
 712 000e 0023     		mov	r3, #0
 713 0010 3B61     		str	r3, [r7, #16]
 332:.\main.c      ****     uint16 avg = 0;
 714              		.loc 1 332 0
 715 0012 3B1C     		mov	r3, r7
 716 0014 0E33     		add	r3, r3, #14
 717 0016 0022     		mov	r2, #0
 718 0018 1A80     		strh	r2, [r3]
 333:.\main.c      ****     
 334:.\main.c      ****     for(i = 0; i < num_items; i++)
 719              		.loc 1 334 0
 720 001a 3B1C     		mov	r3, r7
 721 001c 1733     		add	r3, r3, #23
 722 001e 0022     		mov	r2, #0
 723 0020 1A70     		strb	r2, [r3]
 724 0022 10E0     		b	.L87
 725              	.L88:
 335:.\main.c      ****     {
 336:.\main.c      ****         sum += array[i];
 726              		.loc 1 336 0 discriminator 2
 727 0024 3B1C     		mov	r3, r7
 728 0026 1733     		add	r3, r3, #23
 729 0028 1B78     		ldrb	r3, [r3]
 730 002a 5B00     		lsl	r3, r3, #1
 731 002c 7A68     		ldr	r2, [r7, #4]
 732 002e D318     		add	r3, r2, r3
 733 0030 1B88     		ldrh	r3, [r3]
 734 0032 3A69     		ldr	r2, [r7, #16]
 735 0034 D318     		add	r3, r2, r3
 736 0036 3B61     		str	r3, [r7, #16]
 334:.\main.c      ****     for(i = 0; i < num_items; i++)
 737              		.loc 1 334 0 discriminator 2
 738 0038 3B1C     		mov	r3, r7
 739 003a 1733     		add	r3, r3, #23
 740 003c 1A78     		ldrb	r2, [r3]
 741 003e 3B1C     		mov	r3, r7
 742 0040 1733     		add	r3, r3, #23
 743 0042 0132     		add	r2, r2, #1
 744 0044 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 20


 745              	.L87:
 334:.\main.c      ****     for(i = 0; i < num_items; i++)
 746              		.loc 1 334 0 is_stmt 0 discriminator 1
 747 0046 3A1C     		mov	r2, r7
 748 0048 1732     		add	r2, r2, #23
 749 004a FB1C     		add	r3, r7, #3
 750 004c 1278     		ldrb	r2, [r2]
 751 004e 1B78     		ldrb	r3, [r3]
 752 0050 9A42     		cmp	r2, r3
 753 0052 E7D3     		bcc	.L88
 337:.\main.c      ****     }
 338:.\main.c      ****     
 339:.\main.c      ****     avg = sum/num_items;
 754              		.loc 1 339 0 is_stmt 1
 755 0054 FB1C     		add	r3, r7, #3
 756 0056 1B78     		ldrb	r3, [r3]
 757 0058 3869     		ldr	r0, [r7, #16]
 758 005a 191C     		mov	r1, r3
 759 005c FFF7FEFF 		bl	__aeabi_uidiv
 760 0060 031C     		mov	r3, r0
 761 0062 1A1C     		mov	r2, r3
 762 0064 3B1C     		mov	r3, r7
 763 0066 0E33     		add	r3, r3, #14
 764 0068 1A80     		strh	r2, [r3]
 340:.\main.c      ****     
 341:.\main.c      ****     return avg;
 765              		.loc 1 341 0
 766 006a 3B1C     		mov	r3, r7
 767 006c 0E33     		add	r3, r3, #14
 768 006e 1B88     		ldrh	r3, [r3]
 342:.\main.c      **** }
 769              		.loc 1 342 0
 770 0070 181C     		mov	r0, r3
 771 0072 BD46     		mov	sp, r7
 772 0074 06B0     		add	sp, sp, #24
 773              		@ sp needed
 774 0076 80BD     		pop	{r7, pc}
 775              		.cfi_endproc
 776              	.LFE43:
 777              		.size	average, .-average
 778              		.comm	servo_state,1,1
 779              		.section	.text.servo,"ax",%progbits
 780              		.align	2
 781              		.global	servo
 782              		.code	16
 783              		.thumb_func
 784              		.type	servo, %function
 785              	servo:
 786              	.LFB44:
 343:.\main.c      **** 
 344:.\main.c      **** enum servo_states {s_start,s_different,s_wait} servo_state;
 345:.\main.c      **** void servo()
 346:.\main.c      **** {
 787              		.loc 1 346 0
 788              		.cfi_startproc
 789 0000 80B5     		push	{r7, lr}
 790              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 21


 791              		.cfi_offset 7, -8
 792              		.cfi_offset 14, -4
 793 0002 82B0     		sub	sp, sp, #8
 794              		.cfi_def_cfa_offset 16
 795 0004 00AF     		add	r7, sp, #0
 796              		.cfi_def_cfa_register 7
 347:.\main.c      ****     uint16 old = 0;
 797              		.loc 1 347 0
 798 0006 BB1D     		add	r3, r7, #6
 799 0008 0022     		mov	r2, #0
 800 000a 1A80     		strh	r2, [r3]
 348:.\main.c      ****     switch(servo_state){
 801              		.loc 1 348 0
 802 000c 1C4B     		ldr	r3, .L104
 803 000e 1B78     		ldrb	r3, [r3]
 804 0010 012B     		cmp	r3, #1
 805 0012 09D1     		bne	.L103
 349:.\main.c      ****         case s_start:
 350:.\main.c      ****             break;
 351:.\main.c      ****         
 352:.\main.c      ****         case s_different:
 353:.\main.c      ****             PWM_1_WriteCompare2(data_array[2]);
 806              		.loc 1 353 0
 807 0014 1B4B     		ldr	r3, .L104+4
 808 0016 9B88     		ldrh	r3, [r3, #4]
 809 0018 181C     		mov	r0, r3
 810 001a FFF7FEFF 		bl	PWM_1_WriteCompare2
 354:.\main.c      ****             old = data_array[2];
 811              		.loc 1 354 0
 812 001e BB1D     		add	r3, r7, #6
 813 0020 184A     		ldr	r2, .L104+4
 814 0022 9288     		ldrh	r2, [r2, #4]
 815 0024 1A80     		strh	r2, [r3]
 355:.\main.c      ****             break;
 816              		.loc 1 355 0
 817 0026 00E0     		b	.L91
 818              	.L103:
 356:.\main.c      ****             
 357:.\main.c      ****         case s_wait:
 358:.\main.c      ****             break;
 819              		.loc 1 358 0
 820 0028 C046     		mov	r8, r8
 821              	.L91:
 359:.\main.c      ****     }
 360:.\main.c      ****     
 361:.\main.c      ****     switch(servo_state){
 822              		.loc 1 361 0
 823 002a 154B     		ldr	r3, .L104
 824 002c 1B78     		ldrb	r3, [r3]
 825 002e 012B     		cmp	r3, #1
 826 0030 07D0     		beq	.L96
 827 0032 022B     		cmp	r3, #2
 828 0034 13D0     		beq	.L97
 829 0036 002B     		cmp	r3, #0
 830 0038 1FD1     		bne	.L90
 362:.\main.c      ****         case s_start:
 363:.\main.c      ****             servo_state = s_wait;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 22


 831              		.loc 1 363 0
 832 003a 114B     		ldr	r3, .L104
 833 003c 0222     		mov	r2, #2
 834 003e 1A70     		strb	r2, [r3]
 364:.\main.c      ****             break;
 835              		.loc 1 364 0
 836 0040 1BE0     		b	.L90
 837              	.L96:
 365:.\main.c      ****         
 366:.\main.c      ****         case s_different:
 367:.\main.c      ****             if(data_array[2] != old)
 838              		.loc 1 367 0
 839 0042 104B     		ldr	r3, .L104+4
 840 0044 9B88     		ldrh	r3, [r3, #4]
 841 0046 BA1D     		add	r2, r7, #6
 842 0048 1288     		ldrh	r2, [r2]
 843 004a 9A42     		cmp	r2, r3
 844 004c 03D0     		beq	.L99
 368:.\main.c      ****             {
 369:.\main.c      ****                 servo_state = s_different;
 845              		.loc 1 369 0
 846 004e 0C4B     		ldr	r3, .L104
 847 0050 0122     		mov	r2, #1
 848 0052 1A70     		strb	r2, [r3]
 370:.\main.c      ****             }
 371:.\main.c      ****             else
 372:.\main.c      ****             {
 373:.\main.c      ****                 servo_state = s_wait;
 374:.\main.c      ****             }
 375:.\main.c      ****             break;
 849              		.loc 1 375 0
 850 0054 11E0     		b	.L90
 851              	.L99:
 373:.\main.c      ****                 servo_state = s_wait;
 852              		.loc 1 373 0
 853 0056 0A4B     		ldr	r3, .L104
 854 0058 0222     		mov	r2, #2
 855 005a 1A70     		strb	r2, [r3]
 856              		.loc 1 375 0
 857 005c 0DE0     		b	.L90
 858              	.L97:
 376:.\main.c      ****             
 377:.\main.c      ****         case s_wait:
 378:.\main.c      ****             if(data_array[2] != old)
 859              		.loc 1 378 0
 860 005e 094B     		ldr	r3, .L104+4
 861 0060 9B88     		ldrh	r3, [r3, #4]
 862 0062 BA1D     		add	r2, r7, #6
 863 0064 1288     		ldrh	r2, [r2]
 864 0066 9A42     		cmp	r2, r3
 865 0068 03D0     		beq	.L101
 379:.\main.c      ****             {
 380:.\main.c      ****                 servo_state = s_different;
 866              		.loc 1 380 0
 867 006a 054B     		ldr	r3, .L104
 868 006c 0122     		mov	r2, #1
 869 006e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 23


 870 0070 02E0     		b	.L102
 871              	.L101:
 381:.\main.c      ****             }
 382:.\main.c      ****             else
 383:.\main.c      ****             {
 384:.\main.c      ****                 servo_state = s_wait;
 872              		.loc 1 384 0
 873 0072 034B     		ldr	r3, .L104
 874 0074 0222     		mov	r2, #2
 875 0076 1A70     		strb	r2, [r3]
 876              	.L102:
 385:.\main.c      ****             }
 386:.\main.c      ****             break;
 877              		.loc 1 386 0
 878 0078 C046     		mov	r8, r8
 879              	.L90:
 387:.\main.c      ****     }    
 388:.\main.c      **** }
 880              		.loc 1 388 0
 881 007a BD46     		mov	sp, r7
 882 007c 02B0     		add	sp, sp, #8
 883              		@ sp needed
 884 007e 80BD     		pop	{r7, pc}
 885              	.L105:
 886              		.align	2
 887              	.L104:
 888 0080 00000000 		.word	servo_state
 889 0084 00000000 		.word	data_array
 890              		.cfi_endproc
 891              	.LFE44:
 892              		.size	servo, .-servo
 893              		.comm	servo1_state,1,1
 894              		.section	.text.servo1,"ax",%progbits
 895              		.align	2
 896              		.global	servo1
 897              		.code	16
 898              		.thumb_func
 899              		.type	servo1, %function
 900              	servo1:
 901              	.LFB45:
 389:.\main.c      **** 
 390:.\main.c      **** //New servo design
 391:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 392:.\main.c      **** enum servo1_states {s1_start,s1_init,s1_execute,s1_wait} servo1_state;
 393:.\main.c      **** void servo1()
 394:.\main.c      **** { 
 902              		.loc 1 394 0
 903              		.cfi_startproc
 904 0000 90B5     		push	{r4, r7, lr}
 905              		.cfi_def_cfa_offset 12
 906              		.cfi_offset 4, -12
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 83B0     		sub	sp, sp, #12
 910              		.cfi_def_cfa_offset 24
 911 0004 00AF     		add	r7, sp, #0
 912              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 24


 395:.\main.c      ****     uint8 i;
 396:.\main.c      ****     uint16 avg;
 397:.\main.c      ****     uint16 drive;
 398:.\main.c      ****     
 399:.\main.c      ****     switch(servo1_state){ //actions
 913              		.loc 1 399 0
 914 0006 424B     		ldr	r3, .L128
 915 0008 1B78     		ldrb	r3, [r3]
 916 000a 012B     		cmp	r3, #1
 917 000c 03D0     		beq	.L108
 918 000e 4DDD     		ble	.L127
 919 0010 022B     		cmp	r3, #2
 920 0012 17D0     		beq	.L111
 400:.\main.c      ****         case s_start:
 401:.\main.c      ****             break;
 402:.\main.c      **** 
 403:.\main.c      ****         case s1_init:
 404:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 405:.\main.c      ****             {
 406:.\main.c      ****                 servo_array[i] = 1500;
 407:.\main.c      ****             }
 408:.\main.c      ****             serv_arr_cspot = 0;
 409:.\main.c      ****             break;
 410:.\main.c      **** 
 411:.\main.c      ****         case s1_execute:
 412:.\main.c      ****             servo_array[serv_arr_cspot] = data_array[2] << 8 | data_array[3];
 413:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 414:.\main.c      ****             {
 415:.\main.c      ****                 serv_arr_cspot++;
 416:.\main.c      ****             }
 417:.\main.c      ****             else
 418:.\main.c      ****             {
 419:.\main.c      ****                 serv_arr_cspot = 0;
 420:.\main.c      ****             }
 421:.\main.c      ****             avg = average(servo_array, 20);
 422:.\main.c      ****             servo_array[serv_avg_count] = data_array[2];
 423:.\main.c      ****             PWM_1_WriteCompare2(avg);
 424:.\main.c      ****             break;
 425:.\main.c      ****             
 426:.\main.c      ****         case s1_wait:
 427:.\main.c      ****             break;
 921              		.loc 1 427 0
 922 0014 4BE0     		b	.L107
 923              	.L108:
 404:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 924              		.loc 1 404 0
 925 0016 FB1D     		add	r3, r7, #7
 926 0018 0022     		mov	r2, #0
 927 001a 1A70     		strb	r2, [r3]
 928 001c 0AE0     		b	.L113
 929              	.L114:
 406:.\main.c      ****                 servo_array[i] = 1500;
 930              		.loc 1 406 0 discriminator 2
 931 001e FB1D     		add	r3, r7, #7
 932 0020 1A78     		ldrb	r2, [r3]
 933 0022 3C4B     		ldr	r3, .L128+4
 934 0024 5200     		lsl	r2, r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 25


 935 0026 3C49     		ldr	r1, .L128+8
 936 0028 D152     		strh	r1, [r2, r3]
 404:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 937              		.loc 1 404 0 discriminator 2
 938 002a FB1D     		add	r3, r7, #7
 939 002c 1A78     		ldrb	r2, [r3]
 940 002e FB1D     		add	r3, r7, #7
 941 0030 0132     		add	r2, r2, #1
 942 0032 1A70     		strb	r2, [r3]
 943              	.L113:
 404:.\main.c      ****             for(i = 0; i < SERV_ARR_SIZE; i++)
 944              		.loc 1 404 0 is_stmt 0 discriminator 1
 945 0034 FB1D     		add	r3, r7, #7
 946 0036 1B78     		ldrb	r3, [r3]
 947 0038 132B     		cmp	r3, #19
 948 003a F0D9     		bls	.L114
 408:.\main.c      ****             serv_arr_cspot = 0;
 949              		.loc 1 408 0 is_stmt 1
 950 003c 374B     		ldr	r3, .L128+12
 951 003e 0022     		mov	r2, #0
 952 0040 1A70     		strb	r2, [r3]
 409:.\main.c      ****             break;
 953              		.loc 1 409 0
 954 0042 34E0     		b	.L107
 955              	.L111:
 412:.\main.c      ****             servo_array[serv_arr_cspot] = data_array[2] << 8 | data_array[3];
 956              		.loc 1 412 0
 957 0044 354B     		ldr	r3, .L128+12
 958 0046 1B78     		ldrb	r3, [r3]
 959 0048 1A1C     		mov	r2, r3
 960 004a 354B     		ldr	r3, .L128+16
 961 004c 9B88     		ldrh	r3, [r3, #4]
 962 004e 1B02     		lsl	r3, r3, #8
 963 0050 99B2     		uxth	r1, r3
 964 0052 334B     		ldr	r3, .L128+16
 965 0054 DB88     		ldrh	r3, [r3, #6]
 966 0056 9BB2     		uxth	r3, r3
 967 0058 0B43     		orr	r3, r1
 968 005a 9BB2     		uxth	r3, r3
 969 005c 99B2     		uxth	r1, r3
 970 005e 2D4B     		ldr	r3, .L128+4
 971 0060 5200     		lsl	r2, r2, #1
 972 0062 D152     		strh	r1, [r2, r3]
 413:.\main.c      ****             if(serv_arr_cspot < (SERV_ARR_SIZE - 1))
 973              		.loc 1 413 0
 974 0064 2D4B     		ldr	r3, .L128+12
 975 0066 1B78     		ldrb	r3, [r3]
 976 0068 122B     		cmp	r3, #18
 977 006a 06D8     		bhi	.L115
 415:.\main.c      ****                 serv_arr_cspot++;
 978              		.loc 1 415 0
 979 006c 2B4B     		ldr	r3, .L128+12
 980 006e 1B78     		ldrb	r3, [r3]
 981 0070 0133     		add	r3, r3, #1
 982 0072 DAB2     		uxtb	r2, r3
 983 0074 294B     		ldr	r3, .L128+12
 984 0076 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 26


 985 0078 02E0     		b	.L116
 986              	.L115:
 419:.\main.c      ****                 serv_arr_cspot = 0;
 987              		.loc 1 419 0
 988 007a 284B     		ldr	r3, .L128+12
 989 007c 0022     		mov	r2, #0
 990 007e 1A70     		strb	r2, [r3]
 991              	.L116:
 421:.\main.c      ****             avg = average(servo_array, 20);
 992              		.loc 1 421 0
 993 0080 3C1D     		add	r4, r7, #4
 994 0082 244B     		ldr	r3, .L128+4
 995 0084 181C     		mov	r0, r3
 996 0086 1421     		mov	r1, #20
 997 0088 FFF7FEFF 		bl	average
 998 008c 031C     		mov	r3, r0
 999 008e 2380     		strh	r3, [r4]
 422:.\main.c      ****             servo_array[serv_avg_count] = data_array[2];
 1000              		.loc 1 422 0
 1001 0090 244B     		ldr	r3, .L128+20
 1002 0092 1B78     		ldrb	r3, [r3]
 1003 0094 1A1C     		mov	r2, r3
 1004 0096 224B     		ldr	r3, .L128+16
 1005 0098 9988     		ldrh	r1, [r3, #4]
 1006 009a 1E4B     		ldr	r3, .L128+4
 1007 009c 5200     		lsl	r2, r2, #1
 1008 009e D152     		strh	r1, [r2, r3]
 423:.\main.c      ****             PWM_1_WriteCompare2(avg);
 1009              		.loc 1 423 0
 1010 00a0 3B1D     		add	r3, r7, #4
 1011 00a2 1B88     		ldrh	r3, [r3]
 1012 00a4 181C     		mov	r0, r3
 1013 00a6 FFF7FEFF 		bl	PWM_1_WriteCompare2
 424:.\main.c      ****             break;
 1014              		.loc 1 424 0
 1015 00aa 00E0     		b	.L107
 1016              	.L127:
 401:.\main.c      ****             break;
 1017              		.loc 1 401 0
 1018 00ac C046     		mov	r8, r8
 1019              	.L107:
 428:.\main.c      ****     }
 429:.\main.c      ****     
 430:.\main.c      ****     switch(servo1_state){ //transitions
 1020              		.loc 1 430 0
 1021 00ae 184B     		ldr	r3, .L128
 1022 00b0 1B78     		ldrb	r3, [r3]
 1023 00b2 012B     		cmp	r3, #1
 1024 00b4 0CD0     		beq	.L118
 1025 00b6 02DC     		bgt	.L119
 1026 00b8 002B     		cmp	r3, #0
 1027 00ba 05D0     		beq	.L120
 1028 00bc 24E0     		b	.L106
 1029              	.L119:
 1030 00be 022B     		cmp	r3, #2
 1031 00c0 0AD0     		beq	.L121
 1032 00c2 032B     		cmp	r3, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 27


 1033 00c4 14D0     		beq	.L122
 1034 00c6 1FE0     		b	.L106
 1035              	.L120:
 431:.\main.c      ****         case s1_start:
 432:.\main.c      ****             servo1_state = s1_wait;
 1036              		.loc 1 432 0
 1037 00c8 114B     		ldr	r3, .L128
 1038 00ca 0322     		mov	r2, #3
 1039 00cc 1A70     		strb	r2, [r3]
 433:.\main.c      ****             break;
 1040              		.loc 1 433 0
 1041 00ce 1BE0     		b	.L106
 1042              	.L118:
 434:.\main.c      ****         
 435:.\main.c      ****         case s1_init:
 436:.\main.c      ****             servo1_state = s1_execute;
 1043              		.loc 1 436 0
 1044 00d0 0F4B     		ldr	r3, .L128
 1045 00d2 0222     		mov	r2, #2
 1046 00d4 1A70     		strb	r2, [r3]
 437:.\main.c      ****             break;
 1047              		.loc 1 437 0
 1048 00d6 17E0     		b	.L106
 1049              	.L121:
 438:.\main.c      ****         
 439:.\main.c      ****         case s1_execute:
 440:.\main.c      ****             if(new_pack)
 1050              		.loc 1 440 0
 1051 00d8 134B     		ldr	r3, .L128+24
 1052 00da 1B78     		ldrb	r3, [r3]
 1053 00dc 002B     		cmp	r3, #0
 1054 00de 03D0     		beq	.L123
 441:.\main.c      ****             {
 442:.\main.c      ****                 servo1_state = s1_execute;
 1055              		.loc 1 442 0
 1056 00e0 0B4B     		ldr	r3, .L128
 1057 00e2 0222     		mov	r2, #2
 1058 00e4 1A70     		strb	r2, [r3]
 443:.\main.c      ****             }
 444:.\main.c      ****             else
 445:.\main.c      ****             {
 446:.\main.c      ****                 servo1_state = s1_wait;
 447:.\main.c      ****             }
 448:.\main.c      ****             break;
 1059              		.loc 1 448 0
 1060 00e6 0FE0     		b	.L106
 1061              	.L123:
 446:.\main.c      ****                 servo1_state = s1_wait;
 1062              		.loc 1 446 0
 1063 00e8 094B     		ldr	r3, .L128
 1064 00ea 0322     		mov	r2, #3
 1065 00ec 1A70     		strb	r2, [r3]
 1066              		.loc 1 448 0
 1067 00ee 0BE0     		b	.L106
 1068              	.L122:
 449:.\main.c      ****         
 450:.\main.c      ****         case s1_wait:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 28


 451:.\main.c      ****             if(new_pack)
 1069              		.loc 1 451 0
 1070 00f0 0D4B     		ldr	r3, .L128+24
 1071 00f2 1B78     		ldrb	r3, [r3]
 1072 00f4 002B     		cmp	r3, #0
 1073 00f6 03D0     		beq	.L125
 452:.\main.c      ****             {
 453:.\main.c      ****                 servo1_state = s1_execute;
 1074              		.loc 1 453 0
 1075 00f8 054B     		ldr	r3, .L128
 1076 00fa 0222     		mov	r2, #2
 1077 00fc 1A70     		strb	r2, [r3]
 1078 00fe 02E0     		b	.L126
 1079              	.L125:
 454:.\main.c      ****             }
 455:.\main.c      ****             else
 456:.\main.c      ****             {
 457:.\main.c      ****                 servo1_state = s1_wait; 
 1080              		.loc 1 457 0
 1081 0100 034B     		ldr	r3, .L128
 1082 0102 0322     		mov	r2, #3
 1083 0104 1A70     		strb	r2, [r3]
 1084              	.L126:
 458:.\main.c      ****             }
 459:.\main.c      ****             break;
 1085              		.loc 1 459 0
 1086 0106 C046     		mov	r8, r8
 1087              	.L106:
 460:.\main.c      ****     }    
 461:.\main.c      **** }
 1088              		.loc 1 461 0
 1089 0108 BD46     		mov	sp, r7
 1090 010a 03B0     		add	sp, sp, #12
 1091              		@ sp needed
 1092 010c 90BD     		pop	{r4, r7, pc}
 1093              	.L129:
 1094 010e C046     		.align	2
 1095              	.L128:
 1096 0110 00000000 		.word	servo1_state
 1097 0114 00000000 		.word	servo_array
 1098 0118 DC050000 		.word	1500
 1099 011c 00000000 		.word	serv_arr_cspot
 1100 0120 00000000 		.word	data_array
 1101 0124 00000000 		.word	serv_avg_count
 1102 0128 00000000 		.word	new_pack
 1103              		.cfi_endproc
 1104              	.LFE45:
 1105              		.size	servo1, .-servo1
 1106              		.comm	motor_state,1,1
 1107              		.section	.text.motor,"ax",%progbits
 1108              		.align	2
 1109              		.global	motor
 1110              		.code	16
 1111              		.thumb_func
 1112              		.type	motor, %function
 1113              	motor:
 1114              	.LFB46:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 29


 462:.\main.c      **** //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 463:.\main.c      **** 
 464:.\main.c      **** enum motor_states {m_start,m_different,m_wait} motor_state;
 465:.\main.c      **** void motor(){
 1115              		.loc 1 465 0
 1116              		.cfi_startproc
 1117 0000 80B5     		push	{r7, lr}
 1118              		.cfi_def_cfa_offset 8
 1119              		.cfi_offset 7, -8
 1120              		.cfi_offset 14, -4
 1121 0002 82B0     		sub	sp, sp, #8
 1122              		.cfi_def_cfa_offset 16
 1123 0004 00AF     		add	r7, sp, #0
 1124              		.cfi_def_cfa_register 7
 466:.\main.c      ****     uint16 old = 0;
 1125              		.loc 1 466 0
 1126 0006 BB1D     		add	r3, r7, #6
 1127 0008 0022     		mov	r2, #0
 1128 000a 1A80     		strh	r2, [r3]
 467:.\main.c      ****     switch(motor_state){ //state actions
 1129              		.loc 1 467 0
 1130 000c 1D4B     		ldr	r3, .L144
 1131 000e 1B78     		ldrb	r3, [r3]
 1132 0010 012B     		cmp	r3, #1
 1133 0012 0AD1     		bne	.L143
 468:.\main.c      ****         case m_start:
 469:.\main.c      ****             break;
 470:.\main.c      ****         
 471:.\main.c      ****         case m_different:
 472:.\main.c      ****             PWM_2_WriteCompare1(data_array[1]);
 1134              		.loc 1 472 0
 1135 0014 1C4B     		ldr	r3, .L144+4
 1136 0016 5B88     		ldrh	r3, [r3, #2]
 1137 0018 DBB2     		uxtb	r3, r3
 1138 001a 181C     		mov	r0, r3
 1139 001c FFF7FEFF 		bl	PWM_2_WriteCompare1
 473:.\main.c      ****             old = data_array[3];
 1140              		.loc 1 473 0
 1141 0020 BB1D     		add	r3, r7, #6
 1142 0022 194A     		ldr	r2, .L144+4
 1143 0024 D288     		ldrh	r2, [r2, #6]
 1144 0026 1A80     		strh	r2, [r3]
 474:.\main.c      ****             break;
 1145              		.loc 1 474 0
 1146 0028 00E0     		b	.L131
 1147              	.L143:
 475:.\main.c      ****             
 476:.\main.c      ****         case m_wait:
 477:.\main.c      ****             break;
 1148              		.loc 1 477 0
 1149 002a C046     		mov	r8, r8
 1150              	.L131:
 478:.\main.c      ****     }
 479:.\main.c      ****     
 480:.\main.c      ****     switch(motor_state){ //state transitions
 1151              		.loc 1 480 0
 1152 002c 154B     		ldr	r3, .L144
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 30


 1153 002e 1B78     		ldrb	r3, [r3]
 1154 0030 012B     		cmp	r3, #1
 1155 0032 07D0     		beq	.L136
 1156 0034 022B     		cmp	r3, #2
 1157 0036 13D0     		beq	.L137
 1158 0038 002B     		cmp	r3, #0
 1159 003a 1FD1     		bne	.L130
 481:.\main.c      ****         case m_start:
 482:.\main.c      ****             motor_state = m_wait;
 1160              		.loc 1 482 0
 1161 003c 114B     		ldr	r3, .L144
 1162 003e 0222     		mov	r2, #2
 1163 0040 1A70     		strb	r2, [r3]
 483:.\main.c      ****             break;
 1164              		.loc 1 483 0
 1165 0042 1BE0     		b	.L130
 1166              	.L136:
 484:.\main.c      ****         
 485:.\main.c      ****         case m_different:
 486:.\main.c      ****             if(data_array[3] != old)
 1167              		.loc 1 486 0
 1168 0044 104B     		ldr	r3, .L144+4
 1169 0046 DB88     		ldrh	r3, [r3, #6]
 1170 0048 BA1D     		add	r2, r7, #6
 1171 004a 1288     		ldrh	r2, [r2]
 1172 004c 9A42     		cmp	r2, r3
 1173 004e 03D0     		beq	.L139
 487:.\main.c      ****             {
 488:.\main.c      ****                 motor_state = m_different;
 1174              		.loc 1 488 0
 1175 0050 0C4B     		ldr	r3, .L144
 1176 0052 0122     		mov	r2, #1
 1177 0054 1A70     		strb	r2, [r3]
 489:.\main.c      ****             }
 490:.\main.c      ****             else
 491:.\main.c      ****             {
 492:.\main.c      ****                 motor_state = m_wait;
 493:.\main.c      ****             }
 494:.\main.c      ****             break;
 1178              		.loc 1 494 0
 1179 0056 11E0     		b	.L130
 1180              	.L139:
 492:.\main.c      ****                 motor_state = m_wait;
 1181              		.loc 1 492 0
 1182 0058 0A4B     		ldr	r3, .L144
 1183 005a 0222     		mov	r2, #2
 1184 005c 1A70     		strb	r2, [r3]
 1185              		.loc 1 494 0
 1186 005e 0DE0     		b	.L130
 1187              	.L137:
 495:.\main.c      ****             
 496:.\main.c      ****         case m_wait:
 497:.\main.c      ****             if(data_array[3] != old)
 1188              		.loc 1 497 0
 1189 0060 094B     		ldr	r3, .L144+4
 1190 0062 DB88     		ldrh	r3, [r3, #6]
 1191 0064 BA1D     		add	r2, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 31


 1192 0066 1288     		ldrh	r2, [r2]
 1193 0068 9A42     		cmp	r2, r3
 1194 006a 03D0     		beq	.L141
 498:.\main.c      ****             {
 499:.\main.c      ****                 motor_state = m_different;
 1195              		.loc 1 499 0
 1196 006c 054B     		ldr	r3, .L144
 1197 006e 0122     		mov	r2, #1
 1198 0070 1A70     		strb	r2, [r3]
 1199 0072 02E0     		b	.L142
 1200              	.L141:
 500:.\main.c      ****             }
 501:.\main.c      ****             else
 502:.\main.c      ****             {
 503:.\main.c      ****                 motor_state = m_wait;
 1201              		.loc 1 503 0
 1202 0074 034B     		ldr	r3, .L144
 1203 0076 0222     		mov	r2, #2
 1204 0078 1A70     		strb	r2, [r3]
 1205              	.L142:
 504:.\main.c      ****             }
 505:.\main.c      ****             break;
 1206              		.loc 1 505 0
 1207 007a C046     		mov	r8, r8
 1208              	.L130:
 506:.\main.c      ****     }
 507:.\main.c      **** }
 1209              		.loc 1 507 0
 1210 007c BD46     		mov	sp, r7
 1211 007e 02B0     		add	sp, sp, #8
 1212              		@ sp needed
 1213 0080 80BD     		pop	{r7, pc}
 1214              	.L145:
 1215 0082 C046     		.align	2
 1216              	.L144:
 1217 0084 00000000 		.word	motor_state
 1218 0088 00000000 		.word	data_array
 1219              		.cfi_endproc
 1220              	.LFE46:
 1221              		.size	motor, .-motor
 1222              		.section	.text.main,"ax",%progbits
 1223              		.align	2
 1224              		.global	main
 1225              		.code	16
 1226              		.thumb_func
 1227              		.type	main, %function
 1228              	main:
 1229              	.LFB47:
 508:.\main.c      **** int main()
 509:.\main.c      **** {
 1230              		.loc 1 509 0
 1231              		.cfi_startproc
 1232 0000 80B5     		push	{r7, lr}
 1233              		.cfi_def_cfa_offset 8
 1234              		.cfi_offset 7, -8
 1235              		.cfi_offset 14, -4
 1236 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 32


 1237              		.cfi_def_cfa_register 7
 510:.\main.c      ****     CyGlobalIntEnable;
 1238              		.loc 1 510 0
 1239              	@ 510 ".\main.c" 1
 1240 0004 62B6     		CPSIE   i
 1241              	@ 0 "" 2
 511:.\main.c      ****     
 512:.\main.c      ****     //start all of our components
 513:.\main.c      ****     Clock_pwm_Start();
 1242              		.loc 1 513 0
 1243              		.code	16
 1244 0006 FFF7FEFF 		bl	Clock_pwm_Start
 514:.\main.c      ****     Clock_counter_Start();
 1245              		.loc 1 514 0
 1246 000a FFF7FEFF 		bl	Clock_counter_Start
 515:.\main.c      ****     
 516:.\main.c      ****     PWM_1_Start();
 1247              		.loc 1 516 0
 1248 000e FFF7FEFF 		bl	PWM_1_Start
 517:.\main.c      ****     PWM_2_Start();
 1249              		.loc 1 517 0
 1250 0012 FFF7FEFF 		bl	PWM_2_Start
 518:.\main.c      ****     
 519:.\main.c      ****     Timer_1_Start();
 1251              		.loc 1 519 0
 1252 0016 FFF7FEFF 		bl	Timer_1_Start
 520:.\main.c      ****     UART_1_Start();
 1253              		.loc 1 520 0
 1254 001a FFF7FEFF 		bl	UART_1_Start
 521:.\main.c      ****     
 522:.\main.c      ****     isr_1_StartEx(timer_isr);
 1255              		.loc 1 522 0
 1256 001e 0D4B     		ldr	r3, .L150
 1257 0020 181C     		mov	r0, r3
 1258 0022 FFF7FEFF 		bl	isr_1_StartEx
 1259              	.L149:
 523:.\main.c      ****     
 524:.\main.c      ****     
 525:.\main.c      ****     for(;;)
 526:.\main.c      ****     {
 527:.\main.c      ****         //check addresses
 528:.\main.c      ****         //TODO get the address bytes from Steve
 529:.\main.c      ****         
 530:.\main.c      ****         if(wiznet)
 1260              		.loc 1 530 0
 1261 0026 0C4B     		ldr	r3, .L150+4
 1262 0028 1B78     		ldrb	r3, [r3]
 1263 002a 002B     		cmp	r3, #0
 1264 002c 04D0     		beq	.L147
 531:.\main.c      ****         {
 532:.\main.c      ****             fill_data_array(); //potentially take input &data_array
 1265              		.loc 1 532 0
 1266 002e FFF7FEFF 		bl	fill_data_array
 533:.\main.c      ****             new_pack = 1;
 1267              		.loc 1 533 0
 1268 0032 0A4B     		ldr	r3, .L150+8
 1269 0034 0122     		mov	r2, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 33


 1270 0036 1A70     		strb	r2, [r3]
 1271              	.L147:
 534:.\main.c      ****         }
 535:.\main.c      ****         
 536:.\main.c      **** //        baseAzimuth();
 537:.\main.c      **** //        shoulder();
 538:.\main.c      **** //        elbow();
 539:.\main.c      **** //        wristTilt();
 540:.\main.c      **** //        wristRotate();
 541:.\main.c      **** 
 542:.\main.c      ****         led();
 1272              		.loc 1 542 0
 1273 0038 FFF7FEFF 		bl	led
 543:.\main.c      ****         servo1();
 1274              		.loc 1 543 0
 1275 003c FFF7FEFF 		bl	servo1
 544:.\main.c      **** //        servo();
 545:.\main.c      ****         
 546:.\main.c      ****         
 547:.\main.c      ****         while(!timerFlag) //this while loop will periodize our code to the time of longest path
 1276              		.loc 1 547 0
 1277 0040 C046     		mov	r8, r8
 1278              	.L148:
 1279              		.loc 1 547 0 is_stmt 0 discriminator 1
 1280 0042 074B     		ldr	r3, .L150+12
 1281 0044 1B78     		ldrb	r3, [r3]
 1282 0046 002B     		cmp	r3, #0
 1283 0048 FBD0     		beq	.L148
 548:.\main.c      ****         {
 549:.\main.c      **** //            //Potential solution to how we will want to send feedback
 550:.\main.c      **** //            feedback_count++;
 551:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 552:.\main.c      **** //            {                                        //time through the full set of instructions
 553:.\main.c      **** //                send_feedback();
 554:.\main.c      **** //            }
 555:.\main.c      ****         }
 556:.\main.c      ****         timerFlag = 0;
 1284              		.loc 1 556 0 is_stmt 1
 1285 004a 054B     		ldr	r3, .L150+12
 1286 004c 0022     		mov	r2, #0
 1287 004e 1A70     		strb	r2, [r3]
 557:.\main.c      ****         
 558:.\main.c      ****     }
 1288              		.loc 1 558 0
 1289 0050 E9E7     		b	.L149
 1290              	.L151:
 1291 0052 C046     		.align	2
 1292              	.L150:
 1293 0054 00000000 		.word	timer_isr
 1294 0058 00000000 		.word	wiznet
 1295 005c 00000000 		.word	new_pack
 1296 0060 00000000 		.word	timerFlag
 1297              		.cfi_endproc
 1298              	.LFE47:
 1299              		.size	main, .-main
 1300              		.text
 1301              	.Letext0:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 34


 1302              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 1303              		.section	.debug_info,"",%progbits
 1304              	.Ldebug_info0:
 1305 0000 AC040000 		.4byte	0x4ac
 1306 0004 0400     		.2byte	0x4
 1307 0006 00000000 		.4byte	.Ldebug_abbrev0
 1308 000a 04       		.byte	0x4
 1309 000b 01       		.uleb128 0x1
 1310 000c 9C030000 		.4byte	.LASF77
 1311 0010 01       		.byte	0x1
 1312 0011 DE010000 		.4byte	.LASF78
 1313 0015 F4000000 		.4byte	.LASF79
 1314 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1315 001d 00000000 		.4byte	0
 1316 0021 00000000 		.4byte	.Ldebug_line0
 1317 0025 02       		.uleb128 0x2
 1318 0026 01       		.byte	0x1
 1319 0027 06       		.byte	0x6
 1320 0028 51010000 		.4byte	.LASF0
 1321 002c 02       		.uleb128 0x2
 1322 002d 01       		.byte	0x1
 1323 002e 08       		.byte	0x8
 1324 002f F5010000 		.4byte	.LASF1
 1325 0033 02       		.uleb128 0x2
 1326 0034 02       		.byte	0x2
 1327 0035 05       		.byte	0x5
 1328 0036 A3000000 		.4byte	.LASF2
 1329 003a 02       		.uleb128 0x2
 1330 003b 02       		.byte	0x2
 1331 003c 07       		.byte	0x7
 1332 003d 90020000 		.4byte	.LASF3
 1333 0041 02       		.uleb128 0x2
 1334 0042 04       		.byte	0x4
 1335 0043 05       		.byte	0x5
 1336 0044 88010000 		.4byte	.LASF4
 1337 0048 02       		.uleb128 0x2
 1338 0049 04       		.byte	0x4
 1339 004a 07       		.byte	0x7
 1340 004b 7E020000 		.4byte	.LASF5
 1341 004f 02       		.uleb128 0x2
 1342 0050 08       		.byte	0x8
 1343 0051 05       		.byte	0x5
 1344 0052 89000000 		.4byte	.LASF6
 1345 0056 02       		.uleb128 0x2
 1346 0057 08       		.byte	0x8
 1347 0058 07       		.byte	0x7
 1348 0059 44020000 		.4byte	.LASF7
 1349 005d 03       		.uleb128 0x3
 1350 005e 04       		.byte	0x4
 1351 005f 05       		.byte	0x5
 1352 0060 696E7400 		.ascii	"int\000"
 1353 0064 02       		.uleb128 0x2
 1354 0065 04       		.byte	0x4
 1355 0066 07       		.byte	0x7
 1356 0067 69020000 		.4byte	.LASF8
 1357 006b 04       		.uleb128 0x4
 1358 006c ED020000 		.4byte	.LASF9
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 35


 1359 0070 02       		.byte	0x2
 1360 0071 A1       		.byte	0xa1
 1361 0072 2C000000 		.4byte	0x2c
 1362 0076 04       		.uleb128 0x4
 1363 0077 CB000000 		.4byte	.LASF10
 1364 007b 02       		.byte	0x2
 1365 007c A2       		.byte	0xa2
 1366 007d 3A000000 		.4byte	0x3a
 1367 0081 04       		.uleb128 0x4
 1368 0082 0E030000 		.4byte	.LASF11
 1369 0086 02       		.byte	0x2
 1370 0087 A3       		.byte	0xa3
 1371 0088 48000000 		.4byte	0x48
 1372 008c 02       		.uleb128 0x2
 1373 008d 04       		.byte	0x4
 1374 008e 04       		.byte	0x4
 1375 008f 5D010000 		.4byte	.LASF12
 1376 0093 02       		.uleb128 0x2
 1377 0094 08       		.byte	0x8
 1378 0095 04       		.byte	0x4
 1379 0096 2C030000 		.4byte	.LASF13
 1380 009a 02       		.uleb128 0x2
 1381 009b 01       		.byte	0x1
 1382 009c 08       		.byte	0x8
 1383 009d C1020000 		.4byte	.LASF14
 1384 00a1 02       		.uleb128 0x2
 1385 00a2 04       		.byte	0x4
 1386 00a3 07       		.byte	0x7
 1387 00a4 66000000 		.4byte	.LASF15
 1388 00a8 05       		.uleb128 0x5
 1389 00a9 9A010000 		.4byte	.LASF20
 1390 00ad 01       		.byte	0x1
 1391 00ae 01       		.byte	0x1
 1392 00af 75       		.byte	0x75
 1393 00b0 CD000000 		.4byte	0xcd
 1394 00b4 06       		.uleb128 0x6
 1395 00b5 D2010000 		.4byte	.LASF16
 1396 00b9 00       		.sleb128 0
 1397 00ba 06       		.uleb128 0x6
 1398 00bb 1A000000 		.4byte	.LASF17
 1399 00bf 01       		.sleb128 1
 1400 00c0 06       		.uleb128 0x6
 1401 00c1 20020000 		.4byte	.LASF18
 1402 00c5 02       		.sleb128 2
 1403 00c6 06       		.uleb128 0x6
 1404 00c7 15030000 		.4byte	.LASF19
 1405 00cb 03       		.sleb128 3
 1406 00cc 00       		.byte	0
 1407 00cd 05       		.uleb128 0x5
 1408 00ce A3020000 		.4byte	.LASF21
 1409 00d2 01       		.byte	0x1
 1410 00d3 01       		.byte	0x1
 1411 00d4 AD       		.byte	0xad
 1412 00d5 F2000000 		.4byte	0xf2
 1413 00d9 06       		.uleb128 0x6
 1414 00da B9010000 		.4byte	.LASF22
 1415 00de 00       		.sleb128 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 36


 1416 00df 06       		.uleb128 0x6
 1417 00e0 25000000 		.4byte	.LASF23
 1418 00e4 01       		.sleb128 1
 1419 00e5 06       		.uleb128 0x6
 1420 00e6 1F030000 		.4byte	.LASF24
 1421 00ea 02       		.sleb128 2
 1422 00eb 06       		.uleb128 0x6
 1423 00ec 12020000 		.4byte	.LASF25
 1424 00f0 03       		.sleb128 3
 1425 00f1 00       		.byte	0
 1426 00f2 05       		.uleb128 0x5
 1427 00f3 6F000000 		.4byte	.LASF26
 1428 00f7 01       		.byte	0x1
 1429 00f8 01       		.byte	0x1
 1430 00f9 DE       		.byte	0xde
 1431 00fa 17010000 		.4byte	0x117
 1432 00fe 06       		.uleb128 0x6
 1433 00ff DE000000 		.4byte	.LASF27
 1434 0103 00       		.sleb128 0
 1435 0104 06       		.uleb128 0x6
 1436 0105 59000000 		.4byte	.LASF28
 1437 0109 01       		.sleb128 1
 1438 010a 06       		.uleb128 0x6
 1439 010b 79010000 		.4byte	.LASF29
 1440 010f 02       		.sleb128 2
 1441 0110 06       		.uleb128 0x6
 1442 0111 4A040000 		.4byte	.LASF30
 1443 0115 03       		.sleb128 3
 1444 0116 00       		.byte	0
 1445 0117 07       		.uleb128 0x7
 1446 0118 E2020000 		.4byte	.LASF31
 1447 011c 01       		.byte	0x1
 1448 011d 01       		.byte	0x1
 1449 011e 1701     		.2byte	0x117
 1450 0120 37010000 		.4byte	0x137
 1451 0124 06       		.uleb128 0x6
 1452 0125 00000000 		.4byte	.LASF32
 1453 0129 00       		.sleb128 0
 1454 012a 06       		.uleb128 0x6
 1455 012b 36040000 		.4byte	.LASF33
 1456 012f 01       		.sleb128 1
 1457 0130 06       		.uleb128 0x6
 1458 0131 0B020000 		.4byte	.LASF34
 1459 0135 02       		.sleb128 2
 1460 0136 00       		.byte	0
 1461 0137 07       		.uleb128 0x7
 1462 0138 AD000000 		.4byte	.LASF35
 1463 013c 01       		.byte	0x1
 1464 013d 01       		.byte	0x1
 1465 013e 5801     		.2byte	0x158
 1466 0140 57010000 		.4byte	0x157
 1467 0144 06       		.uleb128 0x6
 1468 0145 4B030000 		.4byte	.LASF36
 1469 0149 00       		.sleb128 0
 1470 014a 06       		.uleb128 0x6
 1471 014b 39030000 		.4byte	.LASF37
 1472 014f 01       		.sleb128 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 37


 1473 0150 06       		.uleb128 0x6
 1474 0151 95030000 		.4byte	.LASF38
 1475 0155 02       		.sleb128 2
 1476 0156 00       		.byte	0
 1477 0157 07       		.uleb128 0x7
 1478 0158 5B020000 		.4byte	.LASF39
 1479 015c 01       		.byte	0x1
 1480 015d 01       		.byte	0x1
 1481 015e 8801     		.2byte	0x188
 1482 0160 7D010000 		.4byte	0x17d
 1483 0164 06       		.uleb128 0x6
 1484 0165 91010000 		.4byte	.LASF40
 1485 0169 00       		.sleb128 0
 1486 016a 06       		.uleb128 0x6
 1487 016b 5D030000 		.4byte	.LASF41
 1488 016f 01       		.sleb128 1
 1489 0170 06       		.uleb128 0x6
 1490 0171 C0000000 		.4byte	.LASF42
 1491 0175 02       		.sleb128 2
 1492 0176 06       		.uleb128 0x6
 1493 0177 42040000 		.4byte	.LASF43
 1494 017b 03       		.sleb128 3
 1495 017c 00       		.byte	0
 1496 017d 07       		.uleb128 0x7
 1497 017e B4020000 		.4byte	.LASF44
 1498 0182 01       		.byte	0x1
 1499 0183 01       		.byte	0x1
 1500 0184 D001     		.2byte	0x1d0
 1501 0186 9D010000 		.4byte	0x19d
 1502 018a 06       		.uleb128 0x6
 1503 018b 76020000 		.4byte	.LASF45
 1504 018f 00       		.sleb128 0
 1505 0190 06       		.uleb128 0x6
 1506 0191 F9020000 		.4byte	.LASF46
 1507 0195 01       		.sleb128 1
 1508 0196 06       		.uleb128 0x6
 1509 0197 5A040000 		.4byte	.LASF47
 1510 019b 02       		.sleb128 2
 1511 019c 00       		.byte	0
 1512 019d 08       		.uleb128 0x8
 1513 019e 82030000 		.4byte	.LASF80
 1514 01a2 01       		.byte	0x1
 1515 01a3 19       		.byte	0x19
 1516 01a4 00000000 		.4byte	.LFB33
 1517 01a8 28000000 		.4byte	.LFE33-.LFB33
 1518 01ac 01       		.uleb128 0x1
 1519 01ad 9C       		.byte	0x9c
 1520 01ae C1010000 		.4byte	0x1c1
 1521 01b2 09       		.uleb128 0x9
 1522 01b3 03020000 		.4byte	.LASF48
 1523 01b7 01       		.byte	0x1
 1524 01b8 1B       		.byte	0x1b
 1525 01b9 81000000 		.4byte	0x81
 1526 01bd 02       		.uleb128 0x2
 1527 01be 91       		.byte	0x91
 1528 01bf 74       		.sleb128 -12
 1529 01c0 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 38


 1530 01c1 0A       		.uleb128 0xa
 1531 01c2 30000000 		.4byte	.LASF56
 1532 01c6 01       		.byte	0x1
 1533 01c7 37       		.byte	0x37
 1534 01c8 00000000 		.4byte	.LFB34
 1535 01cc 10010000 		.4byte	.LFE34-.LFB34
 1536 01d0 01       		.uleb128 0x1
 1537 01d1 9C       		.byte	0x9c
 1538 01d2 E3010000 		.4byte	0x1e3
 1539 01d6 0B       		.uleb128 0xb
 1540 01d7 6300     		.ascii	"c\000"
 1541 01d9 01       		.byte	0x1
 1542 01da 3B       		.byte	0x3b
 1543 01db 6B000000 		.4byte	0x6b
 1544 01df 02       		.uleb128 0x2
 1545 01e0 91       		.byte	0x91
 1546 01e1 77       		.sleb128 -9
 1547 01e2 00       		.byte	0
 1548 01e3 0C       		.uleb128 0xc
 1549 01e4 71030000 		.4byte	.LASF49
 1550 01e8 01       		.byte	0x1
 1551 01e9 68       		.byte	0x68
 1552 01ea 00000000 		.4byte	.LFB35
 1553 01ee 08000000 		.4byte	.LFE35-.LFB35
 1554 01f2 01       		.uleb128 0x1
 1555 01f3 9C       		.byte	0x9c
 1556 01f4 0C       		.uleb128 0xc
 1557 01f5 63010000 		.4byte	.LASF50
 1558 01f9 01       		.byte	0x1
 1559 01fa 6E       		.byte	0x6e
 1560 01fb 00000000 		.4byte	.LFB36
 1561 01ff 08000000 		.4byte	.LFE36-.LFB36
 1562 0203 01       		.uleb128 0x1
 1563 0204 9C       		.byte	0x9c
 1564 0205 0C       		.uleb128 0xc
 1565 0206 05030000 		.4byte	.LASF51
 1566 020a 01       		.byte	0x1
 1567 020b 77       		.byte	0x77
 1568 020c 00000000 		.4byte	.LFB37
 1569 0210 44000000 		.4byte	.LFE37-.LFB37
 1570 0214 01       		.uleb128 0x1
 1571 0215 9C       		.byte	0x9c
 1572 0216 0C       		.uleb128 0xc
 1573 0217 BA000000 		.4byte	.LASF52
 1574 021b 01       		.byte	0x1
 1575 021c A5       		.byte	0xa5
 1576 021d 00000000 		.4byte	.LFB38
 1577 0221 08000000 		.4byte	.LFE38-.LFB38
 1578 0225 01       		.uleb128 0x1
 1579 0226 9C       		.byte	0x9c
 1580 0227 0C       		.uleb128 0xc
 1581 0228 6F010000 		.4byte	.LASF53
 1582 022c 01       		.byte	0x1
 1583 022d AF       		.byte	0xaf
 1584 022e 00000000 		.4byte	.LFB39
 1585 0232 48000000 		.4byte	.LFE39-.LFB39
 1586 0236 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 39


 1587 0237 9C       		.byte	0x9c
 1588 0238 0C       		.uleb128 0xc
 1589 0239 D2000000 		.4byte	.LASF54
 1590 023d 01       		.byte	0x1
 1591 023e E0       		.byte	0xe0
 1592 023f 00000000 		.4byte	.LFB40
 1593 0243 48000000 		.4byte	.LFE40-.LFB40
 1594 0247 01       		.uleb128 0x1
 1595 0248 9C       		.byte	0x9c
 1596 0249 0D       		.uleb128 0xd
 1597 024a E7010000 		.4byte	.LASF55
 1598 024e 01       		.byte	0x1
 1599 024f 0F01     		.2byte	0x10f
 1600 0251 00000000 		.4byte	.LFB41
 1601 0255 08000000 		.4byte	.LFE41-.LFB41
 1602 0259 01       		.uleb128 0x1
 1603 025a 9C       		.byte	0x9c
 1604 025b 0E       		.uleb128 0xe
 1605 025c 6C656400 		.ascii	"led\000"
 1606 0260 01       		.byte	0x1
 1607 0261 1801     		.2byte	0x118
 1608 0263 00000000 		.4byte	.LFB42
 1609 0267 88000000 		.4byte	.LFE42-.LFB42
 1610 026b 01       		.uleb128 0x1
 1611 026c 9C       		.byte	0x9c
 1612 026d 81020000 		.4byte	0x281
 1613 0271 0F       		.uleb128 0xf
 1614 0272 6F6C6400 		.ascii	"old\000"
 1615 0276 01       		.byte	0x1
 1616 0277 1A01     		.2byte	0x11a
 1617 0279 76000000 		.4byte	0x76
 1618 027d 02       		.uleb128 0x2
 1619 027e 91       		.byte	0x91
 1620 027f 76       		.sleb128 -10
 1621 0280 00       		.byte	0
 1622 0281 10       		.uleb128 0x10
 1623 0282 23040000 		.4byte	.LASF81
 1624 0286 01       		.byte	0x1
 1625 0287 4801     		.2byte	0x148
 1626 0289 76000000 		.4byte	0x76
 1627 028d 00000000 		.4byte	.LFB43
 1628 0291 78000000 		.4byte	.LFE43-.LFB43
 1629 0295 01       		.uleb128 0x1
 1630 0296 9C       		.byte	0x9c
 1631 0297 E5020000 		.4byte	0x2e5
 1632 029b 11       		.uleb128 0x11
 1633 029c 33030000 		.4byte	.LASF57
 1634 02a0 01       		.byte	0x1
 1635 02a1 4801     		.2byte	0x148
 1636 02a3 E5020000 		.4byte	0x2e5
 1637 02a7 02       		.uleb128 0x2
 1638 02a8 91       		.byte	0x91
 1639 02a9 64       		.sleb128 -28
 1640 02aa 11       		.uleb128 0x11
 1641 02ab 2B020000 		.4byte	.LASF58
 1642 02af 01       		.byte	0x1
 1643 02b0 4801     		.2byte	0x148
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 40


 1644 02b2 6B000000 		.4byte	0x6b
 1645 02b6 02       		.uleb128 0x2
 1646 02b7 91       		.byte	0x91
 1647 02b8 63       		.sleb128 -29
 1648 02b9 0F       		.uleb128 0xf
 1649 02ba 6900     		.ascii	"i\000"
 1650 02bc 01       		.byte	0x1
 1651 02bd 4A01     		.2byte	0x14a
 1652 02bf 6B000000 		.4byte	0x6b
 1653 02c3 02       		.uleb128 0x2
 1654 02c4 91       		.byte	0x91
 1655 02c5 77       		.sleb128 -9
 1656 02c6 0F       		.uleb128 0xf
 1657 02c7 73756D00 		.ascii	"sum\000"
 1658 02cb 01       		.byte	0x1
 1659 02cc 4B01     		.2byte	0x14b
 1660 02ce 81000000 		.4byte	0x81
 1661 02d2 02       		.uleb128 0x2
 1662 02d3 91       		.byte	0x91
 1663 02d4 70       		.sleb128 -16
 1664 02d5 0F       		.uleb128 0xf
 1665 02d6 61766700 		.ascii	"avg\000"
 1666 02da 01       		.byte	0x1
 1667 02db 4C01     		.2byte	0x14c
 1668 02dd 76000000 		.4byte	0x76
 1669 02e1 02       		.uleb128 0x2
 1670 02e2 91       		.byte	0x91
 1671 02e3 6E       		.sleb128 -18
 1672 02e4 00       		.byte	0
 1673 02e5 12       		.uleb128 0x12
 1674 02e6 04       		.byte	0x4
 1675 02e7 76000000 		.4byte	0x76
 1676 02eb 13       		.uleb128 0x13
 1677 02ec 45030000 		.4byte	.LASF59
 1678 02f0 01       		.byte	0x1
 1679 02f1 5901     		.2byte	0x159
 1680 02f3 00000000 		.4byte	.LFB44
 1681 02f7 88000000 		.4byte	.LFE44-.LFB44
 1682 02fb 01       		.uleb128 0x1
 1683 02fc 9C       		.byte	0x9c
 1684 02fd 11030000 		.4byte	0x311
 1685 0301 0F       		.uleb128 0xf
 1686 0302 6F6C6400 		.ascii	"old\000"
 1687 0306 01       		.byte	0x1
 1688 0307 5B01     		.2byte	0x15b
 1689 0309 76000000 		.4byte	0x76
 1690 030d 02       		.uleb128 0x2
 1691 030e 91       		.byte	0x91
 1692 030f 76       		.sleb128 -10
 1693 0310 00       		.byte	0
 1694 0311 13       		.uleb128 0x13
 1695 0312 DB020000 		.4byte	.LASF60
 1696 0316 01       		.byte	0x1
 1697 0317 8901     		.2byte	0x189
 1698 0319 00000000 		.4byte	.LFB45
 1699 031d 2C010000 		.4byte	.LFE45-.LFB45
 1700 0321 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 41


 1701 0322 9C       		.byte	0x9c
 1702 0323 50030000 		.4byte	0x350
 1703 0327 0F       		.uleb128 0xf
 1704 0328 6900     		.ascii	"i\000"
 1705 032a 01       		.byte	0x1
 1706 032b 8B01     		.2byte	0x18b
 1707 032d 6B000000 		.4byte	0x6b
 1708 0331 02       		.uleb128 0x2
 1709 0332 91       		.byte	0x91
 1710 0333 6F       		.sleb128 -17
 1711 0334 0F       		.uleb128 0xf
 1712 0335 61766700 		.ascii	"avg\000"
 1713 0339 01       		.byte	0x1
 1714 033a 8C01     		.2byte	0x18c
 1715 033c 76000000 		.4byte	0x76
 1716 0340 02       		.uleb128 0x2
 1717 0341 91       		.byte	0x91
 1718 0342 6C       		.sleb128 -20
 1719 0343 14       		.uleb128 0x14
 1720 0344 A7010000 		.4byte	.LASF82
 1721 0348 01       		.byte	0x1
 1722 0349 8D01     		.2byte	0x18d
 1723 034b 76000000 		.4byte	0x76
 1724 034f 00       		.byte	0
 1725 0350 13       		.uleb128 0x13
 1726 0351 F3020000 		.4byte	.LASF61
 1727 0355 01       		.byte	0x1
 1728 0356 D101     		.2byte	0x1d1
 1729 0358 00000000 		.4byte	.LFB46
 1730 035c 8C000000 		.4byte	.LFE46-.LFB46
 1731 0360 01       		.uleb128 0x1
 1732 0361 9C       		.byte	0x9c
 1733 0362 76030000 		.4byte	0x376
 1734 0366 0F       		.uleb128 0xf
 1735 0367 6F6C6400 		.ascii	"old\000"
 1736 036b 01       		.byte	0x1
 1737 036c D201     		.2byte	0x1d2
 1738 036e 76000000 		.4byte	0x76
 1739 0372 02       		.uleb128 0x2
 1740 0373 91       		.byte	0x91
 1741 0374 76       		.sleb128 -10
 1742 0375 00       		.byte	0
 1743 0376 15       		.uleb128 0x15
 1744 0377 C6020000 		.4byte	.LASF83
 1745 037b 01       		.byte	0x1
 1746 037c FC01     		.2byte	0x1fc
 1747 037e 5D000000 		.4byte	0x5d
 1748 0382 00000000 		.4byte	.LFB47
 1749 0386 64000000 		.4byte	.LFE47-.LFB47
 1750 038a 01       		.uleb128 0x1
 1751 038b 9C       		.byte	0x9c
 1752 038c 16       		.uleb128 0x16
 1753 038d 76000000 		.4byte	0x76
 1754 0391 9C030000 		.4byte	0x39c
 1755 0395 17       		.uleb128 0x17
 1756 0396 A1000000 		.4byte	0xa1
 1757 039a 0D       		.byte	0xd
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 42


 1758 039b 00       		.byte	0
 1759 039c 18       		.uleb128 0x18
 1760 039d 2B040000 		.4byte	.LASF62
 1761 03a1 01       		.byte	0x1
 1762 03a2 0A       		.byte	0xa
 1763 03a3 8C030000 		.4byte	0x38c
 1764 03a7 05       		.uleb128 0x5
 1765 03a8 03       		.byte	0x3
 1766 03a9 00000000 		.4byte	data_array
 1767 03ad 18       		.uleb128 0x18
 1768 03ae 82000000 		.4byte	.LASF63
 1769 03b2 01       		.byte	0x1
 1770 03b3 0B       		.byte	0xb
 1771 03b4 6B000000 		.4byte	0x6b
 1772 03b8 05       		.uleb128 0x5
 1773 03b9 03       		.byte	0x3
 1774 03ba 00000000 		.4byte	wiznet
 1775 03be 18       		.uleb128 0x18
 1776 03bf 8C030000 		.4byte	.LASF64
 1777 03c3 01       		.byte	0x1
 1778 03c4 0C       		.byte	0xc
 1779 03c5 6B000000 		.4byte	0x6b
 1780 03c9 05       		.uleb128 0x5
 1781 03ca 03       		.byte	0x3
 1782 03cb 00000000 		.4byte	new_pack
 1783 03cf 18       		.uleb128 0x18
 1784 03d0 C3010000 		.4byte	.LASF65
 1785 03d4 01       		.byte	0x1
 1786 03d5 0F       		.byte	0xf
 1787 03d6 6B000000 		.4byte	0x6b
 1788 03da 05       		.uleb128 0x5
 1789 03db 03       		.byte	0x3
 1790 03dc 00000000 		.4byte	serv_arr_cspot
 1791 03e0 16       		.uleb128 0x16
 1792 03e1 76000000 		.4byte	0x76
 1793 03e5 F0030000 		.4byte	0x3f0
 1794 03e9 17       		.uleb128 0x17
 1795 03ea A1000000 		.4byte	0xa1
 1796 03ee 13       		.byte	0x13
 1797 03ef 00       		.byte	0
 1798 03f0 18       		.uleb128 0x18
 1799 03f1 40000000 		.4byte	.LASF66
 1800 03f5 01       		.byte	0x1
 1801 03f6 10       		.byte	0x10
 1802 03f7 E0030000 		.4byte	0x3e0
 1803 03fb 05       		.uleb128 0x5
 1804 03fc 03       		.byte	0x3
 1805 03fd 00000000 		.4byte	servo_array
 1806 0401 18       		.uleb128 0x18
 1807 0402 61040000 		.4byte	.LASF67
 1808 0406 01       		.byte	0x1
 1809 0407 11       		.byte	0x11
 1810 0408 6B000000 		.4byte	0x6b
 1811 040c 05       		.uleb128 0x5
 1812 040d 03       		.byte	0x3
 1813 040e 00000000 		.4byte	serv_avg_count
 1814 0412 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 43


 1815 0413 35020000 		.4byte	.LASF68
 1816 0417 01       		.byte	0x1
 1817 0418 13       		.byte	0x13
 1818 0419 76000000 		.4byte	0x76
 1819 041d 05       		.uleb128 0x5
 1820 041e 03       		.byte	0x3
 1821 041f 00000000 		.4byte	feedback_count
 1822 0423 18       		.uleb128 0x18
 1823 0424 EA000000 		.4byte	.LASF69
 1824 0428 01       		.byte	0x1
 1825 0429 14       		.byte	0x14
 1826 042a 6B000000 		.4byte	0x6b
 1827 042e 05       		.uleb128 0x5
 1828 042f 03       		.byte	0x3
 1829 0430 00000000 		.4byte	timerFlag
 1830 0434 18       		.uleb128 0x18
 1831 0435 AD010000 		.4byte	.LASF70
 1832 0439 01       		.byte	0x1
 1833 043a 75       		.byte	0x75
 1834 043b A8000000 		.4byte	0xa8
 1835 043f 05       		.uleb128 0x5
 1836 0440 03       		.byte	0x3
 1837 0441 00000000 		.4byte	shldr_state
 1838 0445 18       		.uleb128 0x18
 1839 0446 CB020000 		.4byte	.LASF71
 1840 044a 01       		.byte	0x1
 1841 044b AD       		.byte	0xad
 1842 044c CD000000 		.4byte	0xcd
 1843 0450 05       		.uleb128 0x5
 1844 0451 03       		.byte	0x3
 1845 0452 00000000 		.4byte	wristTilt_state
 1846 0456 18       		.uleb128 0x18
 1847 0457 08000000 		.4byte	.LASF72
 1848 045b 01       		.byte	0x1
 1849 045c DE       		.byte	0xde
 1850 045d F2000000 		.4byte	0xf2
 1851 0461 05       		.uleb128 0x5
 1852 0462 03       		.byte	0x3
 1853 0463 00000000 		.4byte	wristRotate_state
 1854 0467 19       		.uleb128 0x19
 1855 0468 53030000 		.4byte	.LASF73
 1856 046c 01       		.byte	0x1
 1857 046d 1701     		.2byte	0x117
 1858 046f 17010000 		.4byte	0x117
 1859 0473 05       		.uleb128 0x5
 1860 0474 03       		.byte	0x3
 1861 0475 00000000 		.4byte	led_state
 1862 0479 19       		.uleb128 0x19
 1863 047a 65030000 		.4byte	.LASF74
 1864 047e 01       		.byte	0x1
 1865 047f 5801     		.2byte	0x158
 1866 0481 37010000 		.4byte	0x137
 1867 0485 05       		.uleb128 0x5
 1868 0486 03       		.byte	0x3
 1869 0487 00000000 		.4byte	servo_state
 1870 048b 19       		.uleb128 0x19
 1871 048c 4C000000 		.4byte	.LASF75
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 44


 1872 0490 01       		.byte	0x1
 1873 0491 8801     		.2byte	0x188
 1874 0493 57010000 		.4byte	0x157
 1875 0497 05       		.uleb128 0x5
 1876 0498 03       		.byte	0x3
 1877 0499 00000000 		.4byte	servo1_state
 1878 049d 19       		.uleb128 0x19
 1879 049e 97000000 		.4byte	.LASF76
 1880 04a2 01       		.byte	0x1
 1881 04a3 D001     		.2byte	0x1d0
 1882 04a5 7D010000 		.4byte	0x17d
 1883 04a9 05       		.uleb128 0x5
 1884 04aa 03       		.byte	0x3
 1885 04ab 00000000 		.4byte	motor_state
 1886 04af 00       		.byte	0
 1887              		.section	.debug_abbrev,"",%progbits
 1888              	.Ldebug_abbrev0:
 1889 0000 01       		.uleb128 0x1
 1890 0001 11       		.uleb128 0x11
 1891 0002 01       		.byte	0x1
 1892 0003 25       		.uleb128 0x25
 1893 0004 0E       		.uleb128 0xe
 1894 0005 13       		.uleb128 0x13
 1895 0006 0B       		.uleb128 0xb
 1896 0007 03       		.uleb128 0x3
 1897 0008 0E       		.uleb128 0xe
 1898 0009 1B       		.uleb128 0x1b
 1899 000a 0E       		.uleb128 0xe
 1900 000b 55       		.uleb128 0x55
 1901 000c 17       		.uleb128 0x17
 1902 000d 11       		.uleb128 0x11
 1903 000e 01       		.uleb128 0x1
 1904 000f 10       		.uleb128 0x10
 1905 0010 17       		.uleb128 0x17
 1906 0011 00       		.byte	0
 1907 0012 00       		.byte	0
 1908 0013 02       		.uleb128 0x2
 1909 0014 24       		.uleb128 0x24
 1910 0015 00       		.byte	0
 1911 0016 0B       		.uleb128 0xb
 1912 0017 0B       		.uleb128 0xb
 1913 0018 3E       		.uleb128 0x3e
 1914 0019 0B       		.uleb128 0xb
 1915 001a 03       		.uleb128 0x3
 1916 001b 0E       		.uleb128 0xe
 1917 001c 00       		.byte	0
 1918 001d 00       		.byte	0
 1919 001e 03       		.uleb128 0x3
 1920 001f 24       		.uleb128 0x24
 1921 0020 00       		.byte	0
 1922 0021 0B       		.uleb128 0xb
 1923 0022 0B       		.uleb128 0xb
 1924 0023 3E       		.uleb128 0x3e
 1925 0024 0B       		.uleb128 0xb
 1926 0025 03       		.uleb128 0x3
 1927 0026 08       		.uleb128 0x8
 1928 0027 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 45


 1929 0028 00       		.byte	0
 1930 0029 04       		.uleb128 0x4
 1931 002a 16       		.uleb128 0x16
 1932 002b 00       		.byte	0
 1933 002c 03       		.uleb128 0x3
 1934 002d 0E       		.uleb128 0xe
 1935 002e 3A       		.uleb128 0x3a
 1936 002f 0B       		.uleb128 0xb
 1937 0030 3B       		.uleb128 0x3b
 1938 0031 0B       		.uleb128 0xb
 1939 0032 49       		.uleb128 0x49
 1940 0033 13       		.uleb128 0x13
 1941 0034 00       		.byte	0
 1942 0035 00       		.byte	0
 1943 0036 05       		.uleb128 0x5
 1944 0037 04       		.uleb128 0x4
 1945 0038 01       		.byte	0x1
 1946 0039 03       		.uleb128 0x3
 1947 003a 0E       		.uleb128 0xe
 1948 003b 0B       		.uleb128 0xb
 1949 003c 0B       		.uleb128 0xb
 1950 003d 3A       		.uleb128 0x3a
 1951 003e 0B       		.uleb128 0xb
 1952 003f 3B       		.uleb128 0x3b
 1953 0040 0B       		.uleb128 0xb
 1954 0041 01       		.uleb128 0x1
 1955 0042 13       		.uleb128 0x13
 1956 0043 00       		.byte	0
 1957 0044 00       		.byte	0
 1958 0045 06       		.uleb128 0x6
 1959 0046 28       		.uleb128 0x28
 1960 0047 00       		.byte	0
 1961 0048 03       		.uleb128 0x3
 1962 0049 0E       		.uleb128 0xe
 1963 004a 1C       		.uleb128 0x1c
 1964 004b 0D       		.uleb128 0xd
 1965 004c 00       		.byte	0
 1966 004d 00       		.byte	0
 1967 004e 07       		.uleb128 0x7
 1968 004f 04       		.uleb128 0x4
 1969 0050 01       		.byte	0x1
 1970 0051 03       		.uleb128 0x3
 1971 0052 0E       		.uleb128 0xe
 1972 0053 0B       		.uleb128 0xb
 1973 0054 0B       		.uleb128 0xb
 1974 0055 3A       		.uleb128 0x3a
 1975 0056 0B       		.uleb128 0xb
 1976 0057 3B       		.uleb128 0x3b
 1977 0058 05       		.uleb128 0x5
 1978 0059 01       		.uleb128 0x1
 1979 005a 13       		.uleb128 0x13
 1980 005b 00       		.byte	0
 1981 005c 00       		.byte	0
 1982 005d 08       		.uleb128 0x8
 1983 005e 2E       		.uleb128 0x2e
 1984 005f 01       		.byte	0x1
 1985 0060 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 46


 1986 0061 19       		.uleb128 0x19
 1987 0062 03       		.uleb128 0x3
 1988 0063 0E       		.uleb128 0xe
 1989 0064 3A       		.uleb128 0x3a
 1990 0065 0B       		.uleb128 0xb
 1991 0066 3B       		.uleb128 0x3b
 1992 0067 0B       		.uleb128 0xb
 1993 0068 27       		.uleb128 0x27
 1994 0069 19       		.uleb128 0x19
 1995 006a 11       		.uleb128 0x11
 1996 006b 01       		.uleb128 0x1
 1997 006c 12       		.uleb128 0x12
 1998 006d 06       		.uleb128 0x6
 1999 006e 40       		.uleb128 0x40
 2000 006f 18       		.uleb128 0x18
 2001 0070 9642     		.uleb128 0x2116
 2002 0072 19       		.uleb128 0x19
 2003 0073 01       		.uleb128 0x1
 2004 0074 13       		.uleb128 0x13
 2005 0075 00       		.byte	0
 2006 0076 00       		.byte	0
 2007 0077 09       		.uleb128 0x9
 2008 0078 34       		.uleb128 0x34
 2009 0079 00       		.byte	0
 2010 007a 03       		.uleb128 0x3
 2011 007b 0E       		.uleb128 0xe
 2012 007c 3A       		.uleb128 0x3a
 2013 007d 0B       		.uleb128 0xb
 2014 007e 3B       		.uleb128 0x3b
 2015 007f 0B       		.uleb128 0xb
 2016 0080 49       		.uleb128 0x49
 2017 0081 13       		.uleb128 0x13
 2018 0082 02       		.uleb128 0x2
 2019 0083 18       		.uleb128 0x18
 2020 0084 00       		.byte	0
 2021 0085 00       		.byte	0
 2022 0086 0A       		.uleb128 0xa
 2023 0087 2E       		.uleb128 0x2e
 2024 0088 01       		.byte	0x1
 2025 0089 3F       		.uleb128 0x3f
 2026 008a 19       		.uleb128 0x19
 2027 008b 03       		.uleb128 0x3
 2028 008c 0E       		.uleb128 0xe
 2029 008d 3A       		.uleb128 0x3a
 2030 008e 0B       		.uleb128 0xb
 2031 008f 3B       		.uleb128 0x3b
 2032 0090 0B       		.uleb128 0xb
 2033 0091 11       		.uleb128 0x11
 2034 0092 01       		.uleb128 0x1
 2035 0093 12       		.uleb128 0x12
 2036 0094 06       		.uleb128 0x6
 2037 0095 40       		.uleb128 0x40
 2038 0096 18       		.uleb128 0x18
 2039 0097 9642     		.uleb128 0x2116
 2040 0099 19       		.uleb128 0x19
 2041 009a 01       		.uleb128 0x1
 2042 009b 13       		.uleb128 0x13
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 47


 2043 009c 00       		.byte	0
 2044 009d 00       		.byte	0
 2045 009e 0B       		.uleb128 0xb
 2046 009f 34       		.uleb128 0x34
 2047 00a0 00       		.byte	0
 2048 00a1 03       		.uleb128 0x3
 2049 00a2 08       		.uleb128 0x8
 2050 00a3 3A       		.uleb128 0x3a
 2051 00a4 0B       		.uleb128 0xb
 2052 00a5 3B       		.uleb128 0x3b
 2053 00a6 0B       		.uleb128 0xb
 2054 00a7 49       		.uleb128 0x49
 2055 00a8 13       		.uleb128 0x13
 2056 00a9 02       		.uleb128 0x2
 2057 00aa 18       		.uleb128 0x18
 2058 00ab 00       		.byte	0
 2059 00ac 00       		.byte	0
 2060 00ad 0C       		.uleb128 0xc
 2061 00ae 2E       		.uleb128 0x2e
 2062 00af 00       		.byte	0
 2063 00b0 3F       		.uleb128 0x3f
 2064 00b1 19       		.uleb128 0x19
 2065 00b2 03       		.uleb128 0x3
 2066 00b3 0E       		.uleb128 0xe
 2067 00b4 3A       		.uleb128 0x3a
 2068 00b5 0B       		.uleb128 0xb
 2069 00b6 3B       		.uleb128 0x3b
 2070 00b7 0B       		.uleb128 0xb
 2071 00b8 11       		.uleb128 0x11
 2072 00b9 01       		.uleb128 0x1
 2073 00ba 12       		.uleb128 0x12
 2074 00bb 06       		.uleb128 0x6
 2075 00bc 40       		.uleb128 0x40
 2076 00bd 18       		.uleb128 0x18
 2077 00be 9742     		.uleb128 0x2117
 2078 00c0 19       		.uleb128 0x19
 2079 00c1 00       		.byte	0
 2080 00c2 00       		.byte	0
 2081 00c3 0D       		.uleb128 0xd
 2082 00c4 2E       		.uleb128 0x2e
 2083 00c5 00       		.byte	0
 2084 00c6 3F       		.uleb128 0x3f
 2085 00c7 19       		.uleb128 0x19
 2086 00c8 03       		.uleb128 0x3
 2087 00c9 0E       		.uleb128 0xe
 2088 00ca 3A       		.uleb128 0x3a
 2089 00cb 0B       		.uleb128 0xb
 2090 00cc 3B       		.uleb128 0x3b
 2091 00cd 05       		.uleb128 0x5
 2092 00ce 11       		.uleb128 0x11
 2093 00cf 01       		.uleb128 0x1
 2094 00d0 12       		.uleb128 0x12
 2095 00d1 06       		.uleb128 0x6
 2096 00d2 40       		.uleb128 0x40
 2097 00d3 18       		.uleb128 0x18
 2098 00d4 9742     		.uleb128 0x2117
 2099 00d6 19       		.uleb128 0x19
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 48


 2100 00d7 00       		.byte	0
 2101 00d8 00       		.byte	0
 2102 00d9 0E       		.uleb128 0xe
 2103 00da 2E       		.uleb128 0x2e
 2104 00db 01       		.byte	0x1
 2105 00dc 3F       		.uleb128 0x3f
 2106 00dd 19       		.uleb128 0x19
 2107 00de 03       		.uleb128 0x3
 2108 00df 08       		.uleb128 0x8
 2109 00e0 3A       		.uleb128 0x3a
 2110 00e1 0B       		.uleb128 0xb
 2111 00e2 3B       		.uleb128 0x3b
 2112 00e3 05       		.uleb128 0x5
 2113 00e4 11       		.uleb128 0x11
 2114 00e5 01       		.uleb128 0x1
 2115 00e6 12       		.uleb128 0x12
 2116 00e7 06       		.uleb128 0x6
 2117 00e8 40       		.uleb128 0x40
 2118 00e9 18       		.uleb128 0x18
 2119 00ea 9642     		.uleb128 0x2116
 2120 00ec 19       		.uleb128 0x19
 2121 00ed 01       		.uleb128 0x1
 2122 00ee 13       		.uleb128 0x13
 2123 00ef 00       		.byte	0
 2124 00f0 00       		.byte	0
 2125 00f1 0F       		.uleb128 0xf
 2126 00f2 34       		.uleb128 0x34
 2127 00f3 00       		.byte	0
 2128 00f4 03       		.uleb128 0x3
 2129 00f5 08       		.uleb128 0x8
 2130 00f6 3A       		.uleb128 0x3a
 2131 00f7 0B       		.uleb128 0xb
 2132 00f8 3B       		.uleb128 0x3b
 2133 00f9 05       		.uleb128 0x5
 2134 00fa 49       		.uleb128 0x49
 2135 00fb 13       		.uleb128 0x13
 2136 00fc 02       		.uleb128 0x2
 2137 00fd 18       		.uleb128 0x18
 2138 00fe 00       		.byte	0
 2139 00ff 00       		.byte	0
 2140 0100 10       		.uleb128 0x10
 2141 0101 2E       		.uleb128 0x2e
 2142 0102 01       		.byte	0x1
 2143 0103 3F       		.uleb128 0x3f
 2144 0104 19       		.uleb128 0x19
 2145 0105 03       		.uleb128 0x3
 2146 0106 0E       		.uleb128 0xe
 2147 0107 3A       		.uleb128 0x3a
 2148 0108 0B       		.uleb128 0xb
 2149 0109 3B       		.uleb128 0x3b
 2150 010a 05       		.uleb128 0x5
 2151 010b 27       		.uleb128 0x27
 2152 010c 19       		.uleb128 0x19
 2153 010d 49       		.uleb128 0x49
 2154 010e 13       		.uleb128 0x13
 2155 010f 11       		.uleb128 0x11
 2156 0110 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 49


 2157 0111 12       		.uleb128 0x12
 2158 0112 06       		.uleb128 0x6
 2159 0113 40       		.uleb128 0x40
 2160 0114 18       		.uleb128 0x18
 2161 0115 9642     		.uleb128 0x2116
 2162 0117 19       		.uleb128 0x19
 2163 0118 01       		.uleb128 0x1
 2164 0119 13       		.uleb128 0x13
 2165 011a 00       		.byte	0
 2166 011b 00       		.byte	0
 2167 011c 11       		.uleb128 0x11
 2168 011d 05       		.uleb128 0x5
 2169 011e 00       		.byte	0
 2170 011f 03       		.uleb128 0x3
 2171 0120 0E       		.uleb128 0xe
 2172 0121 3A       		.uleb128 0x3a
 2173 0122 0B       		.uleb128 0xb
 2174 0123 3B       		.uleb128 0x3b
 2175 0124 05       		.uleb128 0x5
 2176 0125 49       		.uleb128 0x49
 2177 0126 13       		.uleb128 0x13
 2178 0127 02       		.uleb128 0x2
 2179 0128 18       		.uleb128 0x18
 2180 0129 00       		.byte	0
 2181 012a 00       		.byte	0
 2182 012b 12       		.uleb128 0x12
 2183 012c 0F       		.uleb128 0xf
 2184 012d 00       		.byte	0
 2185 012e 0B       		.uleb128 0xb
 2186 012f 0B       		.uleb128 0xb
 2187 0130 49       		.uleb128 0x49
 2188 0131 13       		.uleb128 0x13
 2189 0132 00       		.byte	0
 2190 0133 00       		.byte	0
 2191 0134 13       		.uleb128 0x13
 2192 0135 2E       		.uleb128 0x2e
 2193 0136 01       		.byte	0x1
 2194 0137 3F       		.uleb128 0x3f
 2195 0138 19       		.uleb128 0x19
 2196 0139 03       		.uleb128 0x3
 2197 013a 0E       		.uleb128 0xe
 2198 013b 3A       		.uleb128 0x3a
 2199 013c 0B       		.uleb128 0xb
 2200 013d 3B       		.uleb128 0x3b
 2201 013e 05       		.uleb128 0x5
 2202 013f 11       		.uleb128 0x11
 2203 0140 01       		.uleb128 0x1
 2204 0141 12       		.uleb128 0x12
 2205 0142 06       		.uleb128 0x6
 2206 0143 40       		.uleb128 0x40
 2207 0144 18       		.uleb128 0x18
 2208 0145 9642     		.uleb128 0x2116
 2209 0147 19       		.uleb128 0x19
 2210 0148 01       		.uleb128 0x1
 2211 0149 13       		.uleb128 0x13
 2212 014a 00       		.byte	0
 2213 014b 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 50


 2214 014c 14       		.uleb128 0x14
 2215 014d 34       		.uleb128 0x34
 2216 014e 00       		.byte	0
 2217 014f 03       		.uleb128 0x3
 2218 0150 0E       		.uleb128 0xe
 2219 0151 3A       		.uleb128 0x3a
 2220 0152 0B       		.uleb128 0xb
 2221 0153 3B       		.uleb128 0x3b
 2222 0154 05       		.uleb128 0x5
 2223 0155 49       		.uleb128 0x49
 2224 0156 13       		.uleb128 0x13
 2225 0157 00       		.byte	0
 2226 0158 00       		.byte	0
 2227 0159 15       		.uleb128 0x15
 2228 015a 2E       		.uleb128 0x2e
 2229 015b 00       		.byte	0
 2230 015c 3F       		.uleb128 0x3f
 2231 015d 19       		.uleb128 0x19
 2232 015e 03       		.uleb128 0x3
 2233 015f 0E       		.uleb128 0xe
 2234 0160 3A       		.uleb128 0x3a
 2235 0161 0B       		.uleb128 0xb
 2236 0162 3B       		.uleb128 0x3b
 2237 0163 05       		.uleb128 0x5
 2238 0164 49       		.uleb128 0x49
 2239 0165 13       		.uleb128 0x13
 2240 0166 11       		.uleb128 0x11
 2241 0167 01       		.uleb128 0x1
 2242 0168 12       		.uleb128 0x12
 2243 0169 06       		.uleb128 0x6
 2244 016a 40       		.uleb128 0x40
 2245 016b 18       		.uleb128 0x18
 2246 016c 9642     		.uleb128 0x2116
 2247 016e 19       		.uleb128 0x19
 2248 016f 00       		.byte	0
 2249 0170 00       		.byte	0
 2250 0171 16       		.uleb128 0x16
 2251 0172 01       		.uleb128 0x1
 2252 0173 01       		.byte	0x1
 2253 0174 49       		.uleb128 0x49
 2254 0175 13       		.uleb128 0x13
 2255 0176 01       		.uleb128 0x1
 2256 0177 13       		.uleb128 0x13
 2257 0178 00       		.byte	0
 2258 0179 00       		.byte	0
 2259 017a 17       		.uleb128 0x17
 2260 017b 21       		.uleb128 0x21
 2261 017c 00       		.byte	0
 2262 017d 49       		.uleb128 0x49
 2263 017e 13       		.uleb128 0x13
 2264 017f 2F       		.uleb128 0x2f
 2265 0180 0B       		.uleb128 0xb
 2266 0181 00       		.byte	0
 2267 0182 00       		.byte	0
 2268 0183 18       		.uleb128 0x18
 2269 0184 34       		.uleb128 0x34
 2270 0185 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 51


 2271 0186 03       		.uleb128 0x3
 2272 0187 0E       		.uleb128 0xe
 2273 0188 3A       		.uleb128 0x3a
 2274 0189 0B       		.uleb128 0xb
 2275 018a 3B       		.uleb128 0x3b
 2276 018b 0B       		.uleb128 0xb
 2277 018c 49       		.uleb128 0x49
 2278 018d 13       		.uleb128 0x13
 2279 018e 3F       		.uleb128 0x3f
 2280 018f 19       		.uleb128 0x19
 2281 0190 02       		.uleb128 0x2
 2282 0191 18       		.uleb128 0x18
 2283 0192 00       		.byte	0
 2284 0193 00       		.byte	0
 2285 0194 19       		.uleb128 0x19
 2286 0195 34       		.uleb128 0x34
 2287 0196 00       		.byte	0
 2288 0197 03       		.uleb128 0x3
 2289 0198 0E       		.uleb128 0xe
 2290 0199 3A       		.uleb128 0x3a
 2291 019a 0B       		.uleb128 0xb
 2292 019b 3B       		.uleb128 0x3b
 2293 019c 05       		.uleb128 0x5
 2294 019d 49       		.uleb128 0x49
 2295 019e 13       		.uleb128 0x13
 2296 019f 3F       		.uleb128 0x3f
 2297 01a0 19       		.uleb128 0x19
 2298 01a1 02       		.uleb128 0x2
 2299 01a2 18       		.uleb128 0x18
 2300 01a3 00       		.byte	0
 2301 01a4 00       		.byte	0
 2302 01a5 00       		.byte	0
 2303              		.section	.debug_aranges,"",%progbits
 2304 0000 8C000000 		.4byte	0x8c
 2305 0004 0200     		.2byte	0x2
 2306 0006 00000000 		.4byte	.Ldebug_info0
 2307 000a 04       		.byte	0x4
 2308 000b 00       		.byte	0
 2309 000c 0000     		.2byte	0
 2310 000e 0000     		.2byte	0
 2311 0010 00000000 		.4byte	.LFB33
 2312 0014 28000000 		.4byte	.LFE33-.LFB33
 2313 0018 00000000 		.4byte	.LFB34
 2314 001c 10010000 		.4byte	.LFE34-.LFB34
 2315 0020 00000000 		.4byte	.LFB35
 2316 0024 08000000 		.4byte	.LFE35-.LFB35
 2317 0028 00000000 		.4byte	.LFB36
 2318 002c 08000000 		.4byte	.LFE36-.LFB36
 2319 0030 00000000 		.4byte	.LFB37
 2320 0034 44000000 		.4byte	.LFE37-.LFB37
 2321 0038 00000000 		.4byte	.LFB38
 2322 003c 08000000 		.4byte	.LFE38-.LFB38
 2323 0040 00000000 		.4byte	.LFB39
 2324 0044 48000000 		.4byte	.LFE39-.LFB39
 2325 0048 00000000 		.4byte	.LFB40
 2326 004c 48000000 		.4byte	.LFE40-.LFB40
 2327 0050 00000000 		.4byte	.LFB41
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 52


 2328 0054 08000000 		.4byte	.LFE41-.LFB41
 2329 0058 00000000 		.4byte	.LFB42
 2330 005c 88000000 		.4byte	.LFE42-.LFB42
 2331 0060 00000000 		.4byte	.LFB43
 2332 0064 78000000 		.4byte	.LFE43-.LFB43
 2333 0068 00000000 		.4byte	.LFB44
 2334 006c 88000000 		.4byte	.LFE44-.LFB44
 2335 0070 00000000 		.4byte	.LFB45
 2336 0074 2C010000 		.4byte	.LFE45-.LFB45
 2337 0078 00000000 		.4byte	.LFB46
 2338 007c 8C000000 		.4byte	.LFE46-.LFB46
 2339 0080 00000000 		.4byte	.LFB47
 2340 0084 64000000 		.4byte	.LFE47-.LFB47
 2341 0088 00000000 		.4byte	0
 2342 008c 00000000 		.4byte	0
 2343              		.section	.debug_ranges,"",%progbits
 2344              	.Ldebug_ranges0:
 2345 0000 00000000 		.4byte	.LFB33
 2346 0004 28000000 		.4byte	.LFE33
 2347 0008 00000000 		.4byte	.LFB34
 2348 000c 10010000 		.4byte	.LFE34
 2349 0010 00000000 		.4byte	.LFB35
 2350 0014 08000000 		.4byte	.LFE35
 2351 0018 00000000 		.4byte	.LFB36
 2352 001c 08000000 		.4byte	.LFE36
 2353 0020 00000000 		.4byte	.LFB37
 2354 0024 44000000 		.4byte	.LFE37
 2355 0028 00000000 		.4byte	.LFB38
 2356 002c 08000000 		.4byte	.LFE38
 2357 0030 00000000 		.4byte	.LFB39
 2358 0034 48000000 		.4byte	.LFE39
 2359 0038 00000000 		.4byte	.LFB40
 2360 003c 48000000 		.4byte	.LFE40
 2361 0040 00000000 		.4byte	.LFB41
 2362 0044 08000000 		.4byte	.LFE41
 2363 0048 00000000 		.4byte	.LFB42
 2364 004c 88000000 		.4byte	.LFE42
 2365 0050 00000000 		.4byte	.LFB43
 2366 0054 78000000 		.4byte	.LFE43
 2367 0058 00000000 		.4byte	.LFB44
 2368 005c 88000000 		.4byte	.LFE44
 2369 0060 00000000 		.4byte	.LFB45
 2370 0064 2C010000 		.4byte	.LFE45
 2371 0068 00000000 		.4byte	.LFB46
 2372 006c 8C000000 		.4byte	.LFE46
 2373 0070 00000000 		.4byte	.LFB47
 2374 0074 64000000 		.4byte	.LFE47
 2375 0078 00000000 		.4byte	0
 2376 007c 00000000 		.4byte	0
 2377              		.section	.debug_line,"",%progbits
 2378              	.Ldebug_line0:
 2379 0000 27020000 		.section	.debug_str,"MS",%progbits,1
 2379      02004500 
 2379      00000201 
 2379      FB0E0D00 
 2379      01010101 
 2380              	.LASF32:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 53


 2381 0000 6C5F7374 		.ascii	"l_start\000"
 2381      61727400 
 2382              	.LASF72:
 2383 0008 77726973 		.ascii	"wristRotate_state\000"
 2383      74526F74 
 2383      6174655F 
 2383      73746174 
 2383      6500
 2384              	.LASF17:
 2385 001a 73686C64 		.ascii	"shldr_init\000"
 2385      725F696E 
 2385      697400
 2386              	.LASF23:
 2387 0025 74696C74 		.ascii	"tilt_start\000"
 2387      5F737461 
 2387      727400
 2388              	.LASF56:
 2389 0030 66696C6C 		.ascii	"fill_data_array\000"
 2389      5F646174 
 2389      615F6172 
 2389      72617900 
 2390              	.LASF66:
 2391 0040 73657276 		.ascii	"servo_array\000"
 2391      6F5F6172 
 2391      72617900 
 2392              	.LASF75:
 2393 004c 73657276 		.ascii	"servo1_state\000"
 2393      6F315F73 
 2393      74617465 
 2393      00
 2394              	.LASF28:
 2395 0059 726F7461 		.ascii	"rotate_start\000"
 2395      74655F73 
 2395      74617274 
 2395      00
 2396              	.LASF15:
 2397 0066 73697A65 		.ascii	"sizetype\000"
 2397      74797065 
 2397      00
 2398              	.LASF26:
 2399 006f 77726973 		.ascii	"wristRotate_states\000"
 2399      74526F74 
 2399      6174655F 
 2399      73746174 
 2399      657300
 2400              	.LASF63:
 2401 0082 77697A6E 		.ascii	"wiznet\000"
 2401      657400
 2402              	.LASF6:
 2403 0089 6C6F6E67 		.ascii	"long long int\000"
 2403      206C6F6E 
 2403      6720696E 
 2403      7400
 2404              	.LASF76:
 2405 0097 6D6F746F 		.ascii	"motor_state\000"
 2405      725F7374 
 2405      61746500 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 54


 2406              	.LASF2:
 2407 00a3 73686F72 		.ascii	"short int\000"
 2407      7420696E 
 2407      7400
 2408              	.LASF35:
 2409 00ad 73657276 		.ascii	"servo_states\000"
 2409      6F5F7374 
 2409      61746573 
 2409      00
 2410              	.LASF52:
 2411 00ba 656C626F 		.ascii	"elbow\000"
 2411      7700
 2412              	.LASF42:
 2413 00c0 73315F65 		.ascii	"s1_execute\000"
 2413      78656375 
 2413      746500
 2414              	.LASF10:
 2415 00cb 75696E74 		.ascii	"uint16\000"
 2415      313600
 2416              	.LASF54:
 2417 00d2 77726973 		.ascii	"wristRotate\000"
 2417      74526F74 
 2417      61746500 
 2418              	.LASF27:
 2419 00de 726F7461 		.ascii	"rotate_init\000"
 2419      74655F69 
 2419      6E697400 
 2420              	.LASF69:
 2421 00ea 74696D65 		.ascii	"timerFlag\000"
 2421      72466C61 
 2421      6700
 2422              	.LASF79:
 2423 00f4 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\BYU-MarsRover"
 2423      73657273 
 2423      5C53616D 
 2423      75656C5C 
 2423      446F6375 
 2424 0122 5C41726D 		.ascii	"\\Arm\\arm_controller_v2\\arm_controller_v2.cydsn\000"
 2424      5C61726D 
 2424      5F636F6E 
 2424      74726F6C 
 2424      6C65725F 
 2425              	.LASF0:
 2426 0151 7369676E 		.ascii	"signed char\000"
 2426      65642063 
 2426      68617200 
 2427              	.LASF12:
 2428 015d 666C6F61 		.ascii	"float\000"
 2428      7400
 2429              	.LASF50:
 2430 0163 62617365 		.ascii	"baseAzimuth\000"
 2430      417A696D 
 2430      75746800 
 2431              	.LASF53:
 2432 016f 77726973 		.ascii	"wristTilt\000"
 2432      7454696C 
 2432      7400
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 55


 2433              	.LASF29:
 2434 0179 726F7461 		.ascii	"rotate_control\000"
 2434      74655F63 
 2434      6F6E7472 
 2434      6F6C00
 2435              	.LASF4:
 2436 0188 6C6F6E67 		.ascii	"long int\000"
 2436      20696E74 
 2436      00
 2437              	.LASF40:
 2438 0191 73315F73 		.ascii	"s1_start\000"
 2438      74617274 
 2438      00
 2439              	.LASF20:
 2440 019a 73686C64 		.ascii	"shldr_states\000"
 2440      725F7374 
 2440      61746573 
 2440      00
 2441              	.LASF82:
 2442 01a7 64726976 		.ascii	"drive\000"
 2442      6500
 2443              	.LASF70:
 2444 01ad 73686C64 		.ascii	"shldr_state\000"
 2444      725F7374 
 2444      61746500 
 2445              	.LASF22:
 2446 01b9 74696C74 		.ascii	"tilt_init\000"
 2446      5F696E69 
 2446      7400
 2447              	.LASF65:
 2448 01c3 73657276 		.ascii	"serv_arr_cspot\000"
 2448      5F617272 
 2448      5F637370 
 2448      6F7400
 2449              	.LASF16:
 2450 01d2 73686C64 		.ascii	"shldr_start\000"
 2450      725F7374 
 2450      61727400 
 2451              	.LASF78:
 2452 01de 2E5C6D61 		.ascii	".\\main.c\000"
 2452      696E2E63 
 2452      00
 2453              	.LASF55:
 2454 01e7 73656E64 		.ascii	"send_feedback\000"
 2454      5F666565 
 2454      64626163 
 2454      6B00
 2455              	.LASF1:
 2456 01f5 756E7369 		.ascii	"unsigned char\000"
 2456      676E6564 
 2456      20636861 
 2456      7200
 2457              	.LASF48:
 2458 0203 6973725F 		.ascii	"isr_var\000"
 2458      76617200 
 2459              	.LASF34:
 2460 020b 6C5F7761 		.ascii	"l_wait\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 56


 2460      697400
 2461              	.LASF25:
 2462 0212 74696C74 		.ascii	"tilt_feedback\000"
 2462      5F666565 
 2462      64626163 
 2462      6B00
 2463              	.LASF18:
 2464 0220 73686C64 		.ascii	"shldr_fdbk\000"
 2464      725F6664 
 2464      626B00
 2465              	.LASF58:
 2466 022b 6E756D5F 		.ascii	"num_items\000"
 2466      6974656D 
 2466      7300
 2467              	.LASF68:
 2468 0235 66656564 		.ascii	"feedback_count\000"
 2468      6261636B 
 2468      5F636F75 
 2468      6E7400
 2469              	.LASF7:
 2470 0244 6C6F6E67 		.ascii	"long long unsigned int\000"
 2470      206C6F6E 
 2470      6720756E 
 2470      7369676E 
 2470      65642069 
 2471              	.LASF39:
 2472 025b 73657276 		.ascii	"servo1_states\000"
 2472      6F315F73 
 2472      74617465 
 2472      7300
 2473              	.LASF8:
 2474 0269 756E7369 		.ascii	"unsigned int\000"
 2474      676E6564 
 2474      20696E74 
 2474      00
 2475              	.LASF45:
 2476 0276 6D5F7374 		.ascii	"m_start\000"
 2476      61727400 
 2477              	.LASF5:
 2478 027e 6C6F6E67 		.ascii	"long unsigned int\000"
 2478      20756E73 
 2478      69676E65 
 2478      6420696E 
 2478      7400
 2479              	.LASF3:
 2480 0290 73686F72 		.ascii	"short unsigned int\000"
 2480      7420756E 
 2480      7369676E 
 2480      65642069 
 2480      6E7400
 2481              	.LASF21:
 2482 02a3 77726973 		.ascii	"wristTilt_states\000"
 2482      7454696C 
 2482      745F7374 
 2482      61746573 
 2482      00
 2483              	.LASF44:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 57


 2484 02b4 6D6F746F 		.ascii	"motor_states\000"
 2484      725F7374 
 2484      61746573 
 2484      00
 2485              	.LASF14:
 2486 02c1 63686172 		.ascii	"char\000"
 2486      00
 2487              	.LASF83:
 2488 02c6 6D61696E 		.ascii	"main\000"
 2488      00
 2489              	.LASF71:
 2490 02cb 77726973 		.ascii	"wristTilt_state\000"
 2490      7454696C 
 2490      745F7374 
 2490      61746500 
 2491              	.LASF60:
 2492 02db 73657276 		.ascii	"servo1\000"
 2492      6F3100
 2493              	.LASF31:
 2494 02e2 6C65645F 		.ascii	"led_states\000"
 2494      73746174 
 2494      657300
 2495              	.LASF9:
 2496 02ed 75696E74 		.ascii	"uint8\000"
 2496      3800
 2497              	.LASF61:
 2498 02f3 6D6F746F 		.ascii	"motor\000"
 2498      7200
 2499              	.LASF46:
 2500 02f9 6D5F6469 		.ascii	"m_different\000"
 2500      66666572 
 2500      656E7400 
 2501              	.LASF51:
 2502 0305 73686F75 		.ascii	"shoulder\000"
 2502      6C646572 
 2502      00
 2503              	.LASF11:
 2504 030e 75696E74 		.ascii	"uint32\000"
 2504      333200
 2505              	.LASF19:
 2506 0315 73686C64 		.ascii	"shldr_exe\000"
 2506      725F6578 
 2506      6500
 2507              	.LASF24:
 2508 031f 74696C74 		.ascii	"tilt_control\000"
 2508      5F636F6E 
 2508      74726F6C 
 2508      00
 2509              	.LASF13:
 2510 032c 646F7562 		.ascii	"double\000"
 2510      6C6500
 2511              	.LASF57:
 2512 0333 61727261 		.ascii	"array\000"
 2512      7900
 2513              	.LASF37:
 2514 0339 735F6469 		.ascii	"s_different\000"
 2514      66666572 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 58


 2514      656E7400 
 2515              	.LASF59:
 2516 0345 73657276 		.ascii	"servo\000"
 2516      6F00
 2517              	.LASF36:
 2518 034b 735F7374 		.ascii	"s_start\000"
 2518      61727400 
 2519              	.LASF73:
 2520 0353 6C65645F 		.ascii	"led_state\000"
 2520      73746174 
 2520      6500
 2521              	.LASF41:
 2522 035d 73315F69 		.ascii	"s1_init\000"
 2522      6E697400 
 2523              	.LASF74:
 2524 0365 73657276 		.ascii	"servo_state\000"
 2524      6F5F7374 
 2524      61746500 
 2525              	.LASF49:
 2526 0371 66696C6C 		.ascii	"fill_data_array1\000"
 2526      5F646174 
 2526      615F6172 
 2526      72617931 
 2526      00
 2527              	.LASF80:
 2528 0382 74696D65 		.ascii	"timer_isr\000"
 2528      725F6973 
 2528      7200
 2529              	.LASF64:
 2530 038c 6E65775F 		.ascii	"new_pack\000"
 2530      7061636B 
 2530      00
 2531              	.LASF38:
 2532 0395 735F7761 		.ascii	"s_wait\000"
 2532      697400
 2533              	.LASF77:
 2534 039c 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2534      4320342E 
 2534      382E3420 
 2534      32303134 
 2534      30353236 
 2535 03cf 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2535      20726576 
 2535      6973696F 
 2535      6E203231 
 2535      31333538 
 2536 0402 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2536      74643D67 
 2536      6E753939 
 2536      202D6666 
 2536      756E6374 
 2537              	.LASF81:
 2538 0423 61766572 		.ascii	"average\000"
 2538      61676500 
 2539              	.LASF62:
 2540 042b 64617461 		.ascii	"data_array\000"
 2540      5F617272 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccUBMdFQ.s 			page 59


 2540      617900
 2541              	.LASF33:
 2542 0436 6C5F6469 		.ascii	"l_different\000"
 2542      66666572 
 2542      656E7400 
 2543              	.LASF43:
 2544 0442 73315F77 		.ascii	"s1_wait\000"
 2544      61697400 
 2545              	.LASF30:
 2546 044a 726F7461 		.ascii	"rotate_feedback\000"
 2546      74655F66 
 2546      65656462 
 2546      61636B00 
 2547              	.LASF47:
 2548 045a 6D5F7761 		.ascii	"m_wait\000"
 2548      697400
 2549              	.LASF67:
 2550 0461 73657276 		.ascii	"serv_avg_count\000"
 2550      5F617667 
 2550      5F636F75 
 2550      6E7400
 2551              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br

ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	data_array,14,4
  18              		.comm	feedback_count,2,2
  19              		.comm	timerFlag,1,1
  20              		.section	.text.timer_isr,"ax",%progbits
  21              		.align	2
  22              		.global	timer_isr
  23              		.code	16
  24              		.thumb_func
  25              		.type	timer_isr, %function
  26              	timer_isr:
  27              	.LFB33:
  28              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      ****  *last modified date: Jan. 31, 2015
   4:.\main.c      **** */
   5:.\main.c      **** #include <project.h>
   6:.\main.c      **** 
   7:.\main.c      **** //Initializations of global variables
   8:.\main.c      **** //TODO should this be global or should we declare it in main and pass a
   9:.\main.c      **** //////pointer to each function?
  10:.\main.c      **** uint8 data_array[14]; //stores the parsed instructions from the wiznet
  11:.\main.c      **** uint16 feedback_count;
  12:.\main.c      **** uint8 timerFlag;
  13:.\main.c      **** 
  14:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
  15:.\main.c      **** ///set to the time of the longest path for our code
  16:.\main.c      **** //TODO test how long it takes code to run before really implementing this
  17:.\main.c      **** 
  18:.\main.c      **** 
  19:.\main.c      **** CY_ISR(timer_isr)
  20:.\main.c      **** {
  29              		.loc 1 20 0
  30              		.cfi_startproc
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 2


  38              		.cfi_def_cfa_register 7
  21:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
  39              		.loc 1 21 0
  40 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
  41 000a 031C     		mov	r3, r0
  42 000c 7B60     		str	r3, [r7, #4]
  22:.\main.c      ****     timerFlag = 1;
  43              		.loc 1 22 0
  44 000e 054B     		ldr	r3, .L2
  45 0010 0122     		mov	r2, #1
  46 0012 1A70     		strb	r2, [r3]
  23:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
  47              		.loc 1 23 0
  48 0014 7B68     		ldr	r3, [r7, #4]
  49 0016 181C     		mov	r0, r3
  50 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  24:.\main.c      **** }
  51              		.loc 1 24 0
  52 001c BD46     		mov	sp, r7
  53 001e 02B0     		add	sp, sp, #8
  54              		@ sp needed
  55 0020 80BD     		pop	{r7, pc}
  56              	.L3:
  57 0022 C046     		.align	2
  58              	.L2:
  59 0024 00000000 		.word	timerFlag
  60              		.cfi_endproc
  61              	.LFE33:
  62              		.size	timer_isr, .-timer_isr
  63              		.section	.text.fill_data_array,"ax",%progbits
  64              		.align	2
  65              		.global	fill_data_array
  66              		.code	16
  67              		.thumb_func
  68              		.type	fill_data_array, %function
  69              	fill_data_array:
  70              	.LFB34:
  25:.\main.c      **** 
  26:.\main.c      **** 
  27:.\main.c      **** //Funtion declarations/definitions
  28:.\main.c      **** //TODO do we need to make a header for good practice?
  29:.\main.c      **** 
  30:.\main.c      **** //---------------------------------------------------
  31:.\main.c      **** //    Function stubs for the header
  32:.\main.c      **** //---------------------------------------------------
  33:.\main.c      **** void fill_data_array();
  34:.\main.c      **** void baseAzimuth();
  35:.\main.c      **** void shoulder();
  36:.\main.c      **** void elbow();
  37:.\main.c      **** void wristTilt();
  38:.\main.c      **** void wristRotate();
  39:.\main.c      **** void send_feedback();
  40:.\main.c      **** //--------------------------------------------------- END Function Stubs
  41:.\main.c      **** 
  42:.\main.c      **** 
  43:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
  44:.\main.c      **** void fill_data_array() //maybe take param: uint8* array
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 3


  45:.\main.c      **** {
  71              		.loc 1 45 0
  72              		.cfi_startproc
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 82B0     		sub	sp, sp, #8
  78              		.cfi_def_cfa_offset 16
  79 0004 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  46:.\main.c      ****     //read one byte at a time
  47:.\main.c      ****     uint8 c = UART_1_UartGetChar();
  81              		.loc 1 47 0
  82 0006 FFF7FEFF 		bl	UART_1_UartGetChar
  83 000a 021C     		mov	r2, r0
  84 000c FB1D     		add	r3, r7, #7
  85 000e 1A70     		strb	r2, [r3]
  48:.\main.c      ****     
  49:.\main.c      **** 
  50:.\main.c      ****     if(c == 'q'){
  86              		.loc 1 50 0
  87 0010 FB1D     		add	r3, r7, #7
  88 0012 1B78     		ldrb	r3, [r3]
  89 0014 712B     		cmp	r3, #113
  90 0016 03D1     		bne	.L5
  51:.\main.c      ****         data_array[1] = 189;
  91              		.loc 1 51 0
  92 0018 264B     		ldr	r3, .L15
  93 001a BD22     		mov	r2, #189
  94 001c 5A70     		strb	r2, [r3, #1]
  95 001e 46E0     		b	.L4
  96              	.L5:
  52:.\main.c      ****     }
  53:.\main.c      ****     else if(c == 'w'){
  97              		.loc 1 53 0
  98 0020 FB1D     		add	r3, r7, #7
  99 0022 1B78     		ldrb	r3, [r3]
 100 0024 772B     		cmp	r3, #119
 101 0026 03D1     		bne	.L7
  54:.\main.c      ****         data_array[1] = 186;
 102              		.loc 1 54 0
 103 0028 224B     		ldr	r3, .L15
 104 002a BA22     		mov	r2, #186
 105 002c 5A70     		strb	r2, [r3, #1]
 106 002e 3EE0     		b	.L4
 107              	.L7:
  55:.\main.c      ****     }
  56:.\main.c      ****     else if(c == 'e'){
 108              		.loc 1 56 0
 109 0030 FB1D     		add	r3, r7, #7
 110 0032 1B78     		ldrb	r3, [r3]
 111 0034 652B     		cmp	r3, #101
 112 0036 03D1     		bne	.L8
  57:.\main.c      ****         data_array[1] = 184;
 113              		.loc 1 57 0
 114 0038 1E4B     		ldr	r3, .L15
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 4


 115 003a B822     		mov	r2, #184
 116 003c 5A70     		strb	r2, [r3, #1]
 117 003e 36E0     		b	.L4
 118              	.L8:
  58:.\main.c      ****     }
  59:.\main.c      ****     else if(c == 'r'){
 119              		.loc 1 59 0
 120 0040 FB1D     		add	r3, r7, #7
 121 0042 1B78     		ldrb	r3, [r3]
 122 0044 722B     		cmp	r3, #114
 123 0046 03D1     		bne	.L9
  60:.\main.c      ****         data_array[1] = 182;
 124              		.loc 1 60 0
 125 0048 1A4B     		ldr	r3, .L15
 126 004a B622     		mov	r2, #182
 127 004c 5A70     		strb	r2, [r3, #1]
 128 004e 2EE0     		b	.L4
 129              	.L9:
  61:.\main.c      ****     }
  62:.\main.c      ****     else if(c == 't'){
 130              		.loc 1 62 0
 131 0050 FB1D     		add	r3, r7, #7
 132 0052 1B78     		ldrb	r3, [r3]
 133 0054 742B     		cmp	r3, #116
 134 0056 03D1     		bne	.L10
  63:.\main.c      ****         data_array[1] = 179;
 135              		.loc 1 63 0
 136 0058 164B     		ldr	r3, .L15
 137 005a B322     		mov	r2, #179
 138 005c 5A70     		strb	r2, [r3, #1]
 139 005e 26E0     		b	.L4
 140              	.L10:
  64:.\main.c      ****     }    
  65:.\main.c      ****     else if(c == '1'){
 141              		.loc 1 65 0
 142 0060 FB1D     		add	r3, r7, #7
 143 0062 1B78     		ldrb	r3, [r3]
 144 0064 312B     		cmp	r3, #49
 145 0066 03D1     		bne	.L11
  66:.\main.c      ****         data_array[2] = 10;
 146              		.loc 1 66 0
 147 0068 124B     		ldr	r3, .L15
 148 006a 0A22     		mov	r2, #10
 149 006c 9A70     		strb	r2, [r3, #2]
 150 006e 1EE0     		b	.L4
 151              	.L11:
  67:.\main.c      ****     }
  68:.\main.c      ****     else if(c == '2'){
 152              		.loc 1 68 0
 153 0070 FB1D     		add	r3, r7, #7
 154 0072 1B78     		ldrb	r3, [r3]
 155 0074 322B     		cmp	r3, #50
 156 0076 03D1     		bne	.L12
  69:.\main.c      ****         data_array[2] = 50;
 157              		.loc 1 69 0
 158 0078 0E4B     		ldr	r3, .L15
 159 007a 3222     		mov	r2, #50
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 5


 160 007c 9A70     		strb	r2, [r3, #2]
 161 007e 16E0     		b	.L4
 162              	.L12:
  70:.\main.c      ****     }
  71:.\main.c      ****     else if(c == '3'){
 163              		.loc 1 71 0
 164 0080 FB1D     		add	r3, r7, #7
 165 0082 1B78     		ldrb	r3, [r3]
 166 0084 332B     		cmp	r3, #51
 167 0086 03D1     		bne	.L13
  72:.\main.c      ****         data_array[2] = 100;
 168              		.loc 1 72 0
 169 0088 0A4B     		ldr	r3, .L15
 170 008a 6422     		mov	r2, #100
 171 008c 9A70     		strb	r2, [r3, #2]
 172 008e 0EE0     		b	.L4
 173              	.L13:
  73:.\main.c      ****     }
  74:.\main.c      ****     else if(c == '4'){
 174              		.loc 1 74 0
 175 0090 FB1D     		add	r3, r7, #7
 176 0092 1B78     		ldrb	r3, [r3]
 177 0094 342B     		cmp	r3, #52
 178 0096 03D1     		bne	.L14
  75:.\main.c      ****         data_array[2] = 150;
 179              		.loc 1 75 0
 180 0098 064B     		ldr	r3, .L15
 181 009a 9622     		mov	r2, #150
 182 009c 9A70     		strb	r2, [r3, #2]
 183 009e 06E0     		b	.L4
 184              	.L14:
  76:.\main.c      ****     }
  77:.\main.c      ****     else if(c == '5'){
 185              		.loc 1 77 0
 186 00a0 FB1D     		add	r3, r7, #7
 187 00a2 1B78     		ldrb	r3, [r3]
 188 00a4 352B     		cmp	r3, #53
 189 00a6 02D1     		bne	.L4
  78:.\main.c      ****         data_array[2] =199;
 190              		.loc 1 78 0
 191 00a8 024B     		ldr	r3, .L15
 192 00aa C722     		mov	r2, #199
 193 00ac 9A70     		strb	r2, [r3, #2]
 194              	.L4:
  79:.\main.c      ****     }    
  80:.\main.c      ****     
  81:.\main.c      **** }
 195              		.loc 1 81 0
 196 00ae BD46     		mov	sp, r7
 197 00b0 02B0     		add	sp, sp, #8
 198              		@ sp needed
 199 00b2 80BD     		pop	{r7, pc}
 200              	.L16:
 201              		.align	2
 202              	.L15:
 203 00b4 00000000 		.word	data_array
 204              		.cfi_endproc
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 6


 205              	.LFE34:
 206              		.size	fill_data_array, .-fill_data_array
 207              		.section	.text.baseAzimuth,"ax",%progbits
 208              		.align	2
 209              		.global	baseAzimuth
 210              		.code	16
 211              		.thumb_func
 212              		.type	baseAzimuth, %function
 213              	baseAzimuth:
 214              	.LFB35:
  82:.\main.c      **** 
  83:.\main.c      **** //control the turret
  84:.\main.c      **** void baseAzimuth()
  85:.\main.c      **** {
 215              		.loc 1 85 0
 216              		.cfi_startproc
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
  86:.\main.c      ****     //take instruction from data_array
  87:.\main.c      ****     //smooth input
  88:.\main.c      ****     //actuate the turret using PWM
  89:.\main.c      ****     
  90:.\main.c      ****     
  91:.\main.c      **** }
 223              		.loc 1 91 0
 224 0004 BD46     		mov	sp, r7
 225              		@ sp needed
 226 0006 80BD     		pop	{r7, pc}
 227              		.cfi_endproc
 228              	.LFE35:
 229              		.size	baseAzimuth, .-baseAzimuth
 230              		.comm	shldr_state,1,1
 231              		.section	.text.shoulder,"ax",%progbits
 232              		.align	2
 233              		.global	shoulder
 234              		.code	16
 235              		.thumb_func
 236              		.type	shoulder, %function
 237              	shoulder:
 238              	.LFB36:
  92:.\main.c      **** 
  93:.\main.c      **** enum shldr_states {shldr_start, shldr_init, shldr_fdbk, shldr_exe} shldr_state;
  94:.\main.c      **** //control the shoulder
  95:.\main.c      **** void shoulder()
  96:.\main.c      **** {
 239              		.loc 1 96 0
 240              		.cfi_startproc
 241 0000 80B5     		push	{r7, lr}
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 00AF     		add	r7, sp, #0
 246              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 7


  97:.\main.c      ****     //take instruction from data_array
  98:.\main.c      ****     //smooth input
  99:.\main.c      ****     //actuate the shoulder using PWM
 100:.\main.c      ****     //get feedback
 101:.\main.c      ****     
 102:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 103:.\main.c      ****     switch(shldr_state)
 247              		.loc 1 103 0
 248 0004 0E4B     		ldr	r3, .L26
 249 0006 1B78     		ldrb	r3, [r3]
 250 0008 012B     		cmp	r3, #1
 251 000a 0CD0     		beq	.L20
 252 000c 02DC     		bgt	.L21
 253 000e 002B     		cmp	r3, #0
 254 0010 05D0     		beq	.L22
 255 0012 12E0     		b	.L18
 256              	.L21:
 257 0014 022B     		cmp	r3, #2
 258 0016 0FD0     		beq	.L25
 259 0018 032B     		cmp	r3, #3
 260 001a 08D0     		beq	.L24
 261 001c 0DE0     		b	.L18
 262              	.L22:
 104:.\main.c      ****     {//switch staatement for state transitions
 105:.\main.c      **** 		case shldr_start: //start
 106:.\main.c      **** 			//next state will be init
 107:.\main.c      ****             shldr_state = shldr_init;
 263              		.loc 1 107 0
 264 001e 084B     		ldr	r3, .L26
 265 0020 0122     		mov	r2, #1
 266 0022 1A70     		strb	r2, [r3]
 108:.\main.c      ****             break;
 267              		.loc 1 108 0
 268 0024 09E0     		b	.L18
 269              	.L20:
 109:.\main.c      ****         
 110:.\main.c      **** 		case shldr_init: //initialize
 111:.\main.c      **** 			//next state will be feedback
 112:.\main.c      ****             shldr_state = shldr_fdbk;
 270              		.loc 1 112 0
 271 0026 064B     		ldr	r3, .L26
 272 0028 0222     		mov	r2, #2
 273 002a 1A70     		strb	r2, [r3]
 113:.\main.c      ****             break;
 274              		.loc 1 113 0
 275 002c 05E0     		b	.L18
 276              	.L24:
 114:.\main.c      ****         
 115:.\main.c      **** 		case shldr_fdbk://feedback
 116:.\main.c      **** 			//if position ok relative to average
 117:.\main.c      **** 				//execute
 118:.\main.c      **** 			//else if not ok
 119:.\main.c      **** 				//report problem
 120:.\main.c      ****             break;
 121:.\main.c      **** 		case shldr_exe://execute
 122:.\main.c      **** 			//next state will be report
 123:.\main.c      ****             shldr_state = shldr_fdbk;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 8


 277              		.loc 1 123 0
 278 002e 044B     		ldr	r3, .L26
 279 0030 0222     		mov	r2, #2
 280 0032 1A70     		strb	r2, [r3]
 124:.\main.c      ****             break;
 281              		.loc 1 124 0
 282 0034 C046     		mov	r8, r8
 283 0036 00E0     		b	.L18
 284              	.L25:
 120:.\main.c      ****             break;
 285              		.loc 1 120 0
 286 0038 C046     		mov	r8, r8
 287              	.L18:
 125:.\main.c      ****     }
 126:.\main.c      **** 			
 127:.\main.c      **** 	//switch statement for state actions
 128:.\main.c      **** 		//start
 129:.\main.c      **** 			//break
 130:.\main.c      **** 		//initialize
 131:.\main.c      **** 			//create smoothing array
 132:.\main.c      **** 		//feedback
 133:.\main.c      **** 			//read feedback
 134:.\main.c      **** 		//execute
 135:.\main.c      **** 			//add the shifted value from main to back of smoothing array
 136:.\main.c      **** 			//calculate average of value in array
 137:.\main.c      ****     /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 138:.\main.c      **** }
 288              		.loc 1 138 0
 289 003a BD46     		mov	sp, r7
 290              		@ sp needed
 291 003c 80BD     		pop	{r7, pc}
 292              	.L27:
 293 003e C046     		.align	2
 294              	.L26:
 295 0040 00000000 		.word	shldr_state
 296              		.cfi_endproc
 297              	.LFE36:
 298              		.size	shoulder, .-shoulder
 299              		.section	.text.elbow,"ax",%progbits
 300              		.align	2
 301              		.global	elbow
 302              		.code	16
 303              		.thumb_func
 304              		.type	elbow, %function
 305              	elbow:
 306              	.LFB37:
 139:.\main.c      **** 
 140:.\main.c      **** //control the elbow
 141:.\main.c      **** void elbow()
 142:.\main.c      **** {
 307              		.loc 1 142 0
 308              		.cfi_startproc
 309 0000 80B5     		push	{r7, lr}
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 7, -8
 312              		.cfi_offset 14, -4
 313 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 9


 314              		.cfi_def_cfa_register 7
 143:.\main.c      ****     //take instruction from data_array
 144:.\main.c      ****     //smooth input
 145:.\main.c      ****     //actuate the elbow using PWM
 146:.\main.c      ****     //get feedback
 147:.\main.c      **** }
 315              		.loc 1 147 0
 316 0004 BD46     		mov	sp, r7
 317              		@ sp needed
 318 0006 80BD     		pop	{r7, pc}
 319              		.cfi_endproc
 320              	.LFE37:
 321              		.size	elbow, .-elbow
 322              		.comm	wristTilt_state,1,1
 323              		.section	.text.wristTilt,"ax",%progbits
 324              		.align	2
 325              		.global	wristTilt
 326              		.code	16
 327              		.thumb_func
 328              		.type	wristTilt, %function
 329              	wristTilt:
 330              	.LFB38:
 148:.\main.c      **** 
 149:.\main.c      **** enum wristTilt_states {tilt_init = 0, tilt_start, tilt_control, tilt_feedback} wristTilt_state;
 150:.\main.c      **** //control the tilting motion of the wrist
 151:.\main.c      **** void wristTilt()
 152:.\main.c      **** {
 331              		.loc 1 152 0
 332              		.cfi_startproc
 333 0000 80B5     		push	{r7, lr}
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 7, -8
 336              		.cfi_offset 14, -4
 337 0002 00AF     		add	r7, sp, #0
 338              		.cfi_def_cfa_register 7
 153:.\main.c      ****     // Overview
 154:.\main.c      ****     //take instruction from data_array
 155:.\main.c      ****     //smooth input
 156:.\main.c      ****     //actuate the tilting using UART
 157:.\main.c      ****     //get feedback
 158:.\main.c      **** 
 159:.\main.c      ****     //-------------------------- 
 160:.\main.c      ****     // Dynamixel Servo specific
 161:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 162:.\main.c      ****     // TODO: Set the desired position
 163:.\main.c      **** 
 164:.\main.c      ****     //--------------------------
 165:.\main.c      ****     // State machine
 166:.\main.c      ****         // Transistion
 167:.\main.c      ****     switch(wristTilt_state)
 339              		.loc 1 167 0
 340 0004 0F4B     		ldr	r3, .L45
 341 0006 1B78     		ldrb	r3, [r3]
 342 0008 012B     		cmp	r3, #1
 343 000a 06D0     		beq	.L31
 344 000c 09DC     		bgt	.L42
 345 000e 002B     		cmp	r3, #0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 10


 346 0010 08D1     		bne	.L30
 168:.\main.c      ****     {
 169:.\main.c      ****         case tilt_init:
 170:.\main.c      ****             wristTilt_state = tilt_start;
 347              		.loc 1 170 0
 348 0012 0C4B     		ldr	r3, .L45
 349 0014 0122     		mov	r2, #1
 350 0016 1A70     		strb	r2, [r3]
 171:.\main.c      ****             break;
 351              		.loc 1 171 0
 352 0018 04E0     		b	.L30
 353              	.L31:
 172:.\main.c      ****         case tilt_start:
 173:.\main.c      ****             wristTilt_state = tilt_control;
 354              		.loc 1 173 0
 355 001a 0A4B     		ldr	r3, .L45
 356 001c 0222     		mov	r2, #2
 357 001e 1A70     		strb	r2, [r3]
 174:.\main.c      ****             break;
 358              		.loc 1 174 0
 359 0020 00E0     		b	.L30
 360              	.L42:
 175:.\main.c      ****         case tilt_control:
 176:.\main.c      ****             break;
 361              		.loc 1 176 0
 362 0022 C046     		mov	r8, r8
 363              	.L30:
 177:.\main.c      ****         case tilt_feedback:
 178:.\main.c      ****             break;
 179:.\main.c      ****     }
 180:.\main.c      ****         // Action
 181:.\main.c      ****     switch(wristTilt_state)
 364              		.loc 1 181 0
 365 0024 074B     		ldr	r3, .L45
 366 0026 1B78     		ldrb	r3, [r3]
 367 0028 012B     		cmp	r3, #1
 368 002a 06D0     		beq	.L43
 369 002c 07DC     		bgt	.L44
 370 002e 002B     		cmp	r3, #0
 371 0030 06D1     		bne	.L29
 182:.\main.c      ****     {
 183:.\main.c      ****         case tilt_init:
 184:.\main.c      ****             wristTilt_state = tilt_start;
 372              		.loc 1 184 0
 373 0032 044B     		ldr	r3, .L45
 374 0034 0122     		mov	r2, #1
 375 0036 1A70     		strb	r2, [r3]
 185:.\main.c      ****             break;
 376              		.loc 1 185 0
 377 0038 02E0     		b	.L29
 378              	.L43:
 186:.\main.c      ****         case tilt_start:
 187:.\main.c      ****             // Set the torque - this is a one time thing
 188:.\main.c      ****             // Set the speed - I think this is a one time thing
 189:.\main.c      ****             break;
 379              		.loc 1 189 0
 380 003a C046     		mov	r8, r8
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 11


 381 003c 00E0     		b	.L29
 382              	.L44:
 190:.\main.c      ****         case tilt_control:
 191:.\main.c      ****             break;
 383              		.loc 1 191 0
 384 003e C046     		mov	r8, r8
 385              	.L29:
 192:.\main.c      ****         case tilt_feedback:
 193:.\main.c      ****             break;
 194:.\main.c      ****     }
 195:.\main.c      **** }
 386              		.loc 1 195 0
 387 0040 BD46     		mov	sp, r7
 388              		@ sp needed
 389 0042 80BD     		pop	{r7, pc}
 390              	.L46:
 391              		.align	2
 392              	.L45:
 393 0044 00000000 		.word	wristTilt_state
 394              		.cfi_endproc
 395              	.LFE38:
 396              		.size	wristTilt, .-wristTilt
 397              		.comm	wristRotate_state,1,1
 398              		.section	.text.wristRotate,"ax",%progbits
 399              		.align	2
 400              		.global	wristRotate
 401              		.code	16
 402              		.thumb_func
 403              		.type	wristRotate, %function
 404              	wristRotate:
 405              	.LFB39:
 196:.\main.c      **** 
 197:.\main.c      **** enum wristRotate_states {rotate_init = 0, rotate_start, rotate_control, rotate_feedback} wristRotat
 198:.\main.c      **** //control the rotating motion of the wrist
 199:.\main.c      **** void wristRotate()
 200:.\main.c      **** {
 406              		.loc 1 200 0
 407              		.cfi_startproc
 408 0000 80B5     		push	{r7, lr}
 409              		.cfi_def_cfa_offset 8
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412 0002 00AF     		add	r7, sp, #0
 413              		.cfi_def_cfa_register 7
 201:.\main.c      ****     // Overview
 202:.\main.c      ****     //take instruction from data_array
 203:.\main.c      ****     //smooth input
 204:.\main.c      ****     //actuate the tilting using UART
 205:.\main.c      ****     //get feedback
 206:.\main.c      **** 
 207:.\main.c      ****     //-------------------------- 
 208:.\main.c      ****     // Dynamixel Servo specific
 209:.\main.c      ****     // TODO: Set the torque - Requires building an array with bit representation
 210:.\main.c      ****     // TOD: Set the desired position
 211:.\main.c      **** 
 212:.\main.c      ****     //--------------------------
 213:.\main.c      ****     // State machine
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 12


 214:.\main.c      ****         // Transistion
 215:.\main.c      ****     switch(wristRotate_state)
 414              		.loc 1 215 0
 415 0004 0F4B     		ldr	r3, .L63
 416 0006 1B78     		ldrb	r3, [r3]
 417 0008 012B     		cmp	r3, #1
 418 000a 06D0     		beq	.L49
 419 000c 09DC     		bgt	.L60
 420 000e 002B     		cmp	r3, #0
 421 0010 08D1     		bne	.L48
 216:.\main.c      ****     {
 217:.\main.c      ****         case rotate_init:
 218:.\main.c      ****             wristRotate_state = rotate_start;
 422              		.loc 1 218 0
 423 0012 0C4B     		ldr	r3, .L63
 424 0014 0122     		mov	r2, #1
 425 0016 1A70     		strb	r2, [r3]
 219:.\main.c      ****             break;
 426              		.loc 1 219 0
 427 0018 04E0     		b	.L48
 428              	.L49:
 220:.\main.c      ****         case rotate_start:
 221:.\main.c      ****             wristRotate_state = rotate_control;
 429              		.loc 1 221 0
 430 001a 0A4B     		ldr	r3, .L63
 431 001c 0222     		mov	r2, #2
 432 001e 1A70     		strb	r2, [r3]
 222:.\main.c      ****             break;
 433              		.loc 1 222 0
 434 0020 00E0     		b	.L48
 435              	.L60:
 223:.\main.c      ****         case rotate_control:
 224:.\main.c      ****             break;
 436              		.loc 1 224 0
 437 0022 C046     		mov	r8, r8
 438              	.L48:
 225:.\main.c      ****         case rotate_feedback:
 226:.\main.c      ****             break;
 227:.\main.c      ****     }
 228:.\main.c      ****         // Action
 229:.\main.c      ****     switch(wristRotate_state)
 439              		.loc 1 229 0
 440 0024 074B     		ldr	r3, .L63
 441 0026 1B78     		ldrb	r3, [r3]
 442 0028 012B     		cmp	r3, #1
 443 002a 06D0     		beq	.L61
 444 002c 07DC     		bgt	.L62
 445 002e 002B     		cmp	r3, #0
 446 0030 06D1     		bne	.L47
 230:.\main.c      ****     {
 231:.\main.c      ****         case rotate_init:
 232:.\main.c      ****             wristRotate_state = rotate_start;
 447              		.loc 1 232 0
 448 0032 044B     		ldr	r3, .L63
 449 0034 0122     		mov	r2, #1
 450 0036 1A70     		strb	r2, [r3]
 233:.\main.c      ****             break;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 13


 451              		.loc 1 233 0
 452 0038 02E0     		b	.L47
 453              	.L61:
 234:.\main.c      ****         case rotate_start:
 235:.\main.c      ****             // Set the torque - this is a one time thing
 236:.\main.c      ****             // Set the speed - I think this is a one time thing
 237:.\main.c      ****             break;
 454              		.loc 1 237 0
 455 003a C046     		mov	r8, r8
 456 003c 00E0     		b	.L47
 457              	.L62:
 238:.\main.c      ****         case rotate_control:
 239:.\main.c      ****             break;
 458              		.loc 1 239 0
 459 003e C046     		mov	r8, r8
 460              	.L47:
 240:.\main.c      ****         case rotate_feedback:
 241:.\main.c      ****             break;
 242:.\main.c      ****     }
 243:.\main.c      **** }
 461              		.loc 1 243 0
 462 0040 BD46     		mov	sp, r7
 463              		@ sp needed
 464 0042 80BD     		pop	{r7, pc}
 465              	.L64:
 466              		.align	2
 467              	.L63:
 468 0044 00000000 		.word	wristRotate_state
 469              		.cfi_endproc
 470              	.LFE39:
 471              		.size	wristRotate, .-wristRotate
 472              		.section	.text.send_feedback,"ax",%progbits
 473              		.align	2
 474              		.global	send_feedback
 475              		.code	16
 476              		.thumb_func
 477              		.type	send_feedback, %function
 478              	send_feedback:
 479              	.LFB40:
 244:.\main.c      **** 
 245:.\main.c      **** void send_feedback()
 246:.\main.c      **** {
 480              		.loc 1 246 0
 481              		.cfi_startproc
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 247:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 248:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 249:.\main.c      ****     //TODO define system state
 250:.\main.c      ****     //send packet via serial to wiznet
 251:.\main.c      **** }
 488              		.loc 1 251 0
 489 0004 BD46     		mov	sp, r7
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 14


 490              		@ sp needed
 491 0006 80BD     		pop	{r7, pc}
 492              		.cfi_endproc
 493              	.LFE40:
 494              		.size	send_feedback, .-send_feedback
 495              		.comm	servo_state,1,1
 496              		.comm	led_state,1,1
 497              		.section	.text.led,"ax",%progbits
 498              		.align	2
 499              		.global	led
 500              		.code	16
 501              		.thumb_func
 502              		.type	led, %function
 503              	led:
 504              	.LFB41:
 252:.\main.c      **** 
 253:.\main.c      **** enum servo_states {s_start,s_different,s_wait} servo_state;
 254:.\main.c      **** enum led_states {l_start,l_different,l_wait} led_state;
 255:.\main.c      **** void led(){
 505              		.loc 1 255 0
 506              		.cfi_startproc
 507 0000 80B5     		push	{r7, lr}
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 82B0     		sub	sp, sp, #8
 512              		.cfi_def_cfa_offset 16
 513 0004 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 256:.\main.c      ****     uint8 old = 0;
 515              		.loc 1 256 0
 516 0006 FB1D     		add	r3, r7, #7
 517 0008 0022     		mov	r2, #0
 518 000a 1A70     		strb	r2, [r3]
 257:.\main.c      ****     switch(led_state){
 519              		.loc 1 257 0
 520 000c 1C4B     		ldr	r3, .L80
 521 000e 1B78     		ldrb	r3, [r3]
 522 0010 012B     		cmp	r3, #1
 523 0012 09D1     		bne	.L79
 258:.\main.c      ****         case l_start:
 259:.\main.c      ****             break;
 260:.\main.c      ****         
 261:.\main.c      ****         case l_different:
 262:.\main.c      ****             PWM_1_WriteCompare1(data_array[1]);
 524              		.loc 1 262 0
 525 0014 1B4B     		ldr	r3, .L80+4
 526 0016 5B78     		ldrb	r3, [r3, #1]
 527 0018 181C     		mov	r0, r3
 528 001a FFF7FEFF 		bl	PWM_1_WriteCompare1
 263:.\main.c      ****             old = data_array[1];
 529              		.loc 1 263 0
 530 001e FB1D     		add	r3, r7, #7
 531 0020 184A     		ldr	r2, .L80+4
 532 0022 5278     		ldrb	r2, [r2, #1]
 533 0024 1A70     		strb	r2, [r3]
 264:.\main.c      ****             break;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 15


 534              		.loc 1 264 0
 535 0026 00E0     		b	.L67
 536              	.L79:
 265:.\main.c      ****             
 266:.\main.c      ****         case l_wait:
 267:.\main.c      ****             break;
 537              		.loc 1 267 0
 538 0028 C046     		mov	r8, r8
 539              	.L67:
 268:.\main.c      ****     }
 269:.\main.c      ****     
 270:.\main.c      ****     switch(led_state){
 540              		.loc 1 270 0
 541 002a 154B     		ldr	r3, .L80
 542 002c 1B78     		ldrb	r3, [r3]
 543 002e 012B     		cmp	r3, #1
 544 0030 07D0     		beq	.L72
 545 0032 022B     		cmp	r3, #2
 546 0034 13D0     		beq	.L73
 547 0036 002B     		cmp	r3, #0
 548 0038 1FD1     		bne	.L66
 271:.\main.c      ****         case l_start:
 272:.\main.c      ****             led_state = l_wait;
 549              		.loc 1 272 0
 550 003a 114B     		ldr	r3, .L80
 551 003c 0222     		mov	r2, #2
 552 003e 1A70     		strb	r2, [r3]
 273:.\main.c      ****             break;
 553              		.loc 1 273 0
 554 0040 1BE0     		b	.L66
 555              	.L72:
 274:.\main.c      ****         
 275:.\main.c      ****         case l_different:
 276:.\main.c      ****             if(data_array[1] != old)
 556              		.loc 1 276 0
 557 0042 104B     		ldr	r3, .L80+4
 558 0044 5B78     		ldrb	r3, [r3, #1]
 559 0046 FA1D     		add	r2, r7, #7
 560 0048 1278     		ldrb	r2, [r2]
 561 004a 9A42     		cmp	r2, r3
 562 004c 03D0     		beq	.L75
 277:.\main.c      ****             {
 278:.\main.c      ****                 led_state = l_different;
 563              		.loc 1 278 0
 564 004e 0C4B     		ldr	r3, .L80
 565 0050 0122     		mov	r2, #1
 566 0052 1A70     		strb	r2, [r3]
 279:.\main.c      ****             }
 280:.\main.c      ****             else
 281:.\main.c      ****             {
 282:.\main.c      ****                 led_state = l_wait;
 283:.\main.c      ****             }
 284:.\main.c      ****             break;
 567              		.loc 1 284 0
 568 0054 11E0     		b	.L66
 569              	.L75:
 282:.\main.c      ****                 led_state = l_wait;
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 16


 570              		.loc 1 282 0
 571 0056 0A4B     		ldr	r3, .L80
 572 0058 0222     		mov	r2, #2
 573 005a 1A70     		strb	r2, [r3]
 574              		.loc 1 284 0
 575 005c 0DE0     		b	.L66
 576              	.L73:
 285:.\main.c      ****             
 286:.\main.c      ****         case l_wait:
 287:.\main.c      ****             if(data_array[1] != old)
 577              		.loc 1 287 0
 578 005e 094B     		ldr	r3, .L80+4
 579 0060 5B78     		ldrb	r3, [r3, #1]
 580 0062 FA1D     		add	r2, r7, #7
 581 0064 1278     		ldrb	r2, [r2]
 582 0066 9A42     		cmp	r2, r3
 583 0068 03D0     		beq	.L77
 288:.\main.c      ****             {
 289:.\main.c      ****                 led_state = l_different;
 584              		.loc 1 289 0
 585 006a 054B     		ldr	r3, .L80
 586 006c 0122     		mov	r2, #1
 587 006e 1A70     		strb	r2, [r3]
 588 0070 02E0     		b	.L78
 589              	.L77:
 290:.\main.c      ****             }
 291:.\main.c      ****             else
 292:.\main.c      ****             {
 293:.\main.c      ****                 led_state = l_wait;
 590              		.loc 1 293 0
 591 0072 034B     		ldr	r3, .L80
 592 0074 0222     		mov	r2, #2
 593 0076 1A70     		strb	r2, [r3]
 594              	.L78:
 294:.\main.c      ****             }
 295:.\main.c      ****             break;
 595              		.loc 1 295 0
 596 0078 C046     		mov	r8, r8
 597              	.L66:
 296:.\main.c      ****     }
 297:.\main.c      **** }
 598              		.loc 1 297 0
 599 007a BD46     		mov	sp, r7
 600 007c 02B0     		add	sp, sp, #8
 601              		@ sp needed
 602 007e 80BD     		pop	{r7, pc}
 603              	.L81:
 604              		.align	2
 605              	.L80:
 606 0080 00000000 		.word	led_state
 607 0084 00000000 		.word	data_array
 608              		.cfi_endproc
 609              	.LFE41:
 610              		.size	led, .-led
 611              		.section	.text.servo,"ax",%progbits
 612              		.align	2
 613              		.global	servo
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 17


 614              		.code	16
 615              		.thumb_func
 616              		.type	servo, %function
 617              	servo:
 618              	.LFB42:
 298:.\main.c      **** void servo(){
 619              		.loc 1 298 0
 620              		.cfi_startproc
 621 0000 80B5     		push	{r7, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 7, -8
 624              		.cfi_offset 14, -4
 625 0002 82B0     		sub	sp, sp, #8
 626              		.cfi_def_cfa_offset 16
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_def_cfa_register 7
 299:.\main.c      ****     uint8 old = 0;
 629              		.loc 1 299 0
 630 0006 FB1D     		add	r3, r7, #7
 631 0008 0022     		mov	r2, #0
 632 000a 1A70     		strb	r2, [r3]
 300:.\main.c      ****     switch(servo_state){
 633              		.loc 1 300 0
 634 000c 1C4B     		ldr	r3, .L96
 635 000e 1B78     		ldrb	r3, [r3]
 636 0010 012B     		cmp	r3, #1
 637 0012 09D1     		bne	.L95
 301:.\main.c      ****         case s_start:
 302:.\main.c      ****             break;
 303:.\main.c      ****         
 304:.\main.c      ****         case s_different:
 305:.\main.c      ****             PWM_1_WriteCompare2(data_array[2]);
 638              		.loc 1 305 0
 639 0014 1B4B     		ldr	r3, .L96+4
 640 0016 9B78     		ldrb	r3, [r3, #2]
 641 0018 181C     		mov	r0, r3
 642 001a FFF7FEFF 		bl	PWM_1_WriteCompare2
 306:.\main.c      ****             old = data_array[2];
 643              		.loc 1 306 0
 644 001e FB1D     		add	r3, r7, #7
 645 0020 184A     		ldr	r2, .L96+4
 646 0022 9278     		ldrb	r2, [r2, #2]
 647 0024 1A70     		strb	r2, [r3]
 307:.\main.c      ****             break;
 648              		.loc 1 307 0
 649 0026 00E0     		b	.L83
 650              	.L95:
 308:.\main.c      ****             
 309:.\main.c      ****         case s_wait:
 310:.\main.c      ****             break;
 651              		.loc 1 310 0
 652 0028 C046     		mov	r8, r8
 653              	.L83:
 311:.\main.c      ****     }
 312:.\main.c      ****     
 313:.\main.c      ****     switch(servo_state){
 654              		.loc 1 313 0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 18


 655 002a 154B     		ldr	r3, .L96
 656 002c 1B78     		ldrb	r3, [r3]
 657 002e 012B     		cmp	r3, #1
 658 0030 07D0     		beq	.L88
 659 0032 022B     		cmp	r3, #2
 660 0034 13D0     		beq	.L89
 661 0036 002B     		cmp	r3, #0
 662 0038 1FD1     		bne	.L82
 314:.\main.c      ****         case s_start:
 315:.\main.c      ****             servo_state = s_wait;
 663              		.loc 1 315 0
 664 003a 114B     		ldr	r3, .L96
 665 003c 0222     		mov	r2, #2
 666 003e 1A70     		strb	r2, [r3]
 316:.\main.c      ****             break;
 667              		.loc 1 316 0
 668 0040 1BE0     		b	.L82
 669              	.L88:
 317:.\main.c      ****         
 318:.\main.c      ****         case s_different:
 319:.\main.c      ****             if(data_array[2] != old)
 670              		.loc 1 319 0
 671 0042 104B     		ldr	r3, .L96+4
 672 0044 9B78     		ldrb	r3, [r3, #2]
 673 0046 FA1D     		add	r2, r7, #7
 674 0048 1278     		ldrb	r2, [r2]
 675 004a 9A42     		cmp	r2, r3
 676 004c 03D0     		beq	.L91
 320:.\main.c      ****             {
 321:.\main.c      ****                 servo_state = s_different;
 677              		.loc 1 321 0
 678 004e 0C4B     		ldr	r3, .L96
 679 0050 0122     		mov	r2, #1
 680 0052 1A70     		strb	r2, [r3]
 322:.\main.c      ****             }
 323:.\main.c      ****             else
 324:.\main.c      ****             {
 325:.\main.c      ****                 servo_state = s_wait;
 326:.\main.c      ****             }
 327:.\main.c      ****             break;
 681              		.loc 1 327 0
 682 0054 11E0     		b	.L82
 683              	.L91:
 325:.\main.c      ****                 servo_state = s_wait;
 684              		.loc 1 325 0
 685 0056 0A4B     		ldr	r3, .L96
 686 0058 0222     		mov	r2, #2
 687 005a 1A70     		strb	r2, [r3]
 688              		.loc 1 327 0
 689 005c 0DE0     		b	.L82
 690              	.L89:
 328:.\main.c      ****             
 329:.\main.c      ****         case s_wait:
 330:.\main.c      ****             if(data_array[2] != old)
 691              		.loc 1 330 0
 692 005e 094B     		ldr	r3, .L96+4
 693 0060 9B78     		ldrb	r3, [r3, #2]
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 19


 694 0062 FA1D     		add	r2, r7, #7
 695 0064 1278     		ldrb	r2, [r2]
 696 0066 9A42     		cmp	r2, r3
 697 0068 03D0     		beq	.L93
 331:.\main.c      ****             {
 332:.\main.c      ****                 servo_state = s_different;
 698              		.loc 1 332 0
 699 006a 054B     		ldr	r3, .L96
 700 006c 0122     		mov	r2, #1
 701 006e 1A70     		strb	r2, [r3]
 702 0070 02E0     		b	.L94
 703              	.L93:
 333:.\main.c      ****             }
 334:.\main.c      ****             else
 335:.\main.c      ****             {
 336:.\main.c      ****                 servo_state = s_wait;
 704              		.loc 1 336 0
 705 0072 034B     		ldr	r3, .L96
 706 0074 0222     		mov	r2, #2
 707 0076 1A70     		strb	r2, [r3]
 708              	.L94:
 337:.\main.c      ****             }
 338:.\main.c      ****             break;
 709              		.loc 1 338 0
 710 0078 C046     		mov	r8, r8
 711              	.L82:
 339:.\main.c      ****     }    
 340:.\main.c      **** }
 712              		.loc 1 340 0
 713 007a BD46     		mov	sp, r7
 714 007c 02B0     		add	sp, sp, #8
 715              		@ sp needed
 716 007e 80BD     		pop	{r7, pc}
 717              	.L97:
 718              		.align	2
 719              	.L96:
 720 0080 00000000 		.word	servo_state
 721 0084 00000000 		.word	data_array
 722              		.cfi_endproc
 723              	.LFE42:
 724              		.size	servo, .-servo
 725              		.section	.text.main,"ax",%progbits
 726              		.align	2
 727              		.global	main
 728              		.code	16
 729              		.thumb_func
 730              		.type	main, %function
 731              	main:
 732              	.LFB43:
 341:.\main.c      **** 
 342:.\main.c      **** int main()
 343:.\main.c      **** {
 733              		.loc 1 343 0
 734              		.cfi_startproc
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 20


 738              		.cfi_offset 14, -4
 739 0002 00AF     		add	r7, sp, #0
 740              		.cfi_def_cfa_register 7
 344:.\main.c      ****     CyGlobalIntEnable;
 741              		.loc 1 344 0
 742              	@ 344 ".\main.c" 1
 743 0004 62B6     		CPSIE   i
 744              	@ 0 "" 2
 345:.\main.c      ****     
 346:.\main.c      ****     //start all of our components
 347:.\main.c      ****     Clock_pwm_Start();
 745              		.loc 1 347 0
 746              		.code	16
 747 0006 FFF7FEFF 		bl	Clock_pwm_Start
 348:.\main.c      ****     Clock_counter_Start();
 748              		.loc 1 348 0
 749 000a FFF7FEFF 		bl	Clock_counter_Start
 349:.\main.c      ****     PWM_1_Start();
 750              		.loc 1 349 0
 751 000e FFF7FEFF 		bl	PWM_1_Start
 350:.\main.c      ****     Timer_1_Start();
 752              		.loc 1 350 0
 753 0012 FFF7FEFF 		bl	Timer_1_Start
 351:.\main.c      ****     UART_1_Start();
 754              		.loc 1 351 0
 755 0016 FFF7FEFF 		bl	UART_1_Start
 352:.\main.c      ****     
 353:.\main.c      ****     isr_1_StartEx(timer_isr);
 756              		.loc 1 353 0
 757 001a 094B     		ldr	r3, .L101
 758 001c 181C     		mov	r0, r3
 759 001e FFF7FEFF 		bl	isr_1_StartEx
 760              	.L100:
 354:.\main.c      ****     
 355:.\main.c      ****     
 356:.\main.c      ****     for(;;)
 357:.\main.c      ****     {
 358:.\main.c      ****         //check addresses
 359:.\main.c      ****         //TODO get the address bytes from Steve
 360:.\main.c      ****         
 361:.\main.c      ****         
 362:.\main.c      ****         fill_data_array(); //potentially take input &data_array
 761              		.loc 1 362 0
 762 0022 FFF7FEFF 		bl	fill_data_array
 363:.\main.c      **** //        baseAzimuth();
 364:.\main.c      **** //        shoulder();
 365:.\main.c      **** //        elbow();
 366:.\main.c      **** //        wristTilt();
 367:.\main.c      **** //        wristRotate();
 368:.\main.c      **** 
 369:.\main.c      ****         led();
 763              		.loc 1 369 0
 764 0026 FFF7FEFF 		bl	led
 370:.\main.c      ****         servo();
 765              		.loc 1 370 0
 766 002a FFF7FEFF 		bl	servo
 371:.\main.c      ****         
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 21


 372:.\main.c      ****         
 373:.\main.c      ****         while(!timerFlag) //this while loop will periodize our code to the time of longest path
 767              		.loc 1 373 0
 768 002e C046     		mov	r8, r8
 769              	.L99:
 770              		.loc 1 373 0 is_stmt 0 discriminator 1
 771 0030 044B     		ldr	r3, .L101+4
 772 0032 1B78     		ldrb	r3, [r3]
 773 0034 002B     		cmp	r3, #0
 774 0036 FBD0     		beq	.L99
 374:.\main.c      ****         {
 375:.\main.c      **** //            //Potential solution to how we will want to send feedback
 376:.\main.c      **** //            feedback_count++;
 377:.\main.c      **** //            if(feedback_count == feedback_interval) //sends feeback to base station every 50th
 378:.\main.c      **** //            {                                        //time through the full set of instructions
 379:.\main.c      **** //                send_feedback();
 380:.\main.c      **** //            }
 381:.\main.c      ****         }
 382:.\main.c      ****         timerFlag = 0;
 775              		.loc 1 382 0 is_stmt 1
 776 0038 024B     		ldr	r3, .L101+4
 777 003a 0022     		mov	r2, #0
 778 003c 1A70     		strb	r2, [r3]
 383:.\main.c      ****         
 384:.\main.c      ****     }
 779              		.loc 1 384 0
 780 003e F0E7     		b	.L100
 781              	.L102:
 782              		.align	2
 783              	.L101:
 784 0040 00000000 		.word	timer_isr
 785 0044 00000000 		.word	timerFlag
 786              		.cfi_endproc
 787              	.LFE43:
 788              		.size	main, .-main
 789              		.text
 790              	.Letext0:
 791              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 792              		.section	.debug_info,"",%progbits
 793              	.Ldebug_info0:
 794 0000 F7020000 		.4byte	0x2f7
 795 0004 0400     		.2byte	0x4
 796 0006 00000000 		.4byte	.Ldebug_abbrev0
 797 000a 04       		.byte	0x4
 798 000b 01       		.uleb128 0x1
 799 000c B0010000 		.4byte	.LASF56
 800 0010 01       		.byte	0x1
 801 0011 95000000 		.4byte	.LASF57
 802 0015 3A020000 		.4byte	.LASF58
 803 0019 00000000 		.4byte	.Ldebug_ranges0+0
 804 001d 00000000 		.4byte	0
 805 0021 00000000 		.4byte	.Ldebug_line0
 806 0025 02       		.uleb128 0x2
 807 0026 01       		.byte	0x1
 808 0027 06       		.byte	0x6
 809 0028 72000000 		.4byte	.LASF0
 810 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 22


 811 002d 01       		.byte	0x1
 812 002e 08       		.byte	0x8
 813 002f 2C020000 		.4byte	.LASF1
 814 0033 02       		.uleb128 0x2
 815 0034 02       		.byte	0x2
 816 0035 05       		.byte	0x5
 817 0036 91020000 		.4byte	.LASF2
 818 003a 02       		.uleb128 0x2
 819 003b 02       		.byte	0x2
 820 003c 07       		.byte	0x7
 821 003d 1F010000 		.4byte	.LASF3
 822 0041 02       		.uleb128 0x2
 823 0042 04       		.byte	0x4
 824 0043 05       		.byte	0x5
 825 0044 9E000000 		.4byte	.LASF4
 826 0048 02       		.uleb128 0x2
 827 0049 04       		.byte	0x4
 828 004a 07       		.byte	0x7
 829 004b 05010000 		.4byte	.LASF5
 830 004f 02       		.uleb128 0x2
 831 0050 08       		.byte	0x8
 832 0051 05       		.byte	0x5
 833 0052 64000000 		.4byte	.LASF6
 834 0056 02       		.uleb128 0x2
 835 0057 08       		.byte	0x8
 836 0058 07       		.byte	0x7
 837 0059 46000000 		.4byte	.LASF7
 838 005d 03       		.uleb128 0x3
 839 005e 04       		.byte	0x4
 840 005f 05       		.byte	0x5
 841 0060 696E7400 		.ascii	"int\000"
 842 0064 02       		.uleb128 0x2
 843 0065 04       		.byte	0x4
 844 0066 07       		.byte	0x7
 845 0067 F8000000 		.4byte	.LASF8
 846 006b 04       		.uleb128 0x4
 847 006c A7000000 		.4byte	.LASF9
 848 0070 02       		.byte	0x2
 849 0071 A1       		.byte	0xa1
 850 0072 2C000000 		.4byte	0x2c
 851 0076 04       		.uleb128 0x4
 852 0077 00000000 		.4byte	.LASF10
 853 007b 02       		.byte	0x2
 854 007c A2       		.byte	0xa2
 855 007d 3A000000 		.4byte	0x3a
 856 0081 04       		.uleb128 0x4
 857 0082 DD000000 		.4byte	.LASF11
 858 0086 02       		.byte	0x2
 859 0087 A3       		.byte	0xa3
 860 0088 48000000 		.4byte	0x48
 861 008c 02       		.uleb128 0x2
 862 008d 04       		.byte	0x4
 863 008e 04       		.byte	0x4
 864 008f 9C010000 		.4byte	.LASF12
 865 0093 02       		.uleb128 0x2
 866 0094 08       		.byte	0x8
 867 0095 04       		.byte	0x4
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 23


 868 0096 AD000000 		.4byte	.LASF13
 869 009a 02       		.uleb128 0x2
 870 009b 01       		.byte	0x1
 871 009c 08       		.byte	0x8
 872 009d DF020000 		.4byte	.LASF14
 873 00a1 02       		.uleb128 0x2
 874 00a2 04       		.byte	0x4
 875 00a3 07       		.byte	0x7
 876 00a4 67010000 		.4byte	.LASF15
 877 00a8 05       		.uleb128 0x5
 878 00a9 C6020000 		.4byte	.LASF20
 879 00ad 01       		.byte	0x1
 880 00ae 01       		.byte	0x1
 881 00af 5D       		.byte	0x5d
 882 00b0 CD000000 		.4byte	0xcd
 883 00b4 06       		.uleb128 0x6
 884 00b5 70010000 		.4byte	.LASF16
 885 00b9 00       		.sleb128 0
 886 00ba 06       		.uleb128 0x6
 887 00bb 2F000000 		.4byte	.LASF17
 888 00bf 01       		.sleb128 1
 889 00c0 06       		.uleb128 0x6
 890 00c1 D2000000 		.4byte	.LASF18
 891 00c5 02       		.sleb128 2
 892 00c6 06       		.uleb128 0x6
 893 00c7 B4020000 		.4byte	.LASF19
 894 00cb 03       		.sleb128 3
 895 00cc 00       		.byte	0
 896 00cd 05       		.uleb128 0x5
 897 00ce E4020000 		.4byte	.LASF21
 898 00d2 01       		.byte	0x1
 899 00d3 01       		.byte	0x1
 900 00d4 95       		.byte	0x95
 901 00d5 F2000000 		.4byte	0xf2
 902 00d9 06       		.uleb128 0x6
 903 00da 32010000 		.4byte	.LASF22
 904 00de 00       		.sleb128 0
 905 00df 06       		.uleb128 0x6
 906 00e0 7C010000 		.4byte	.LASF23
 907 00e4 01       		.sleb128 1
 908 00e5 06       		.uleb128 0x6
 909 00e6 7E000000 		.4byte	.LASF24
 910 00ea 02       		.sleb128 2
 911 00eb 06       		.uleb128 0x6
 912 00ec A2010000 		.4byte	.LASF25
 913 00f0 03       		.sleb128 3
 914 00f1 00       		.byte	0
 915 00f2 05       		.uleb128 0x5
 916 00f3 0F030000 		.4byte	.LASF26
 917 00f7 01       		.byte	0x1
 918 00f8 01       		.byte	0x1
 919 00f9 C5       		.byte	0xc5
 920 00fa 17010000 		.4byte	0x117
 921 00fe 06       		.uleb128 0x6
 922 00ff 23000000 		.4byte	.LASF27
 923 0103 00       		.sleb128 0
 924 0104 06       		.uleb128 0x6
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 24


 925 0105 07000000 		.4byte	.LASF28
 926 0109 01       		.sleb128 1
 927 010a 06       		.uleb128 0x6
 928 010b 58010000 		.4byte	.LASF29
 929 010f 02       		.sleb128 2
 930 0110 06       		.uleb128 0x6
 931 0111 FF020000 		.4byte	.LASF30
 932 0115 03       		.sleb128 3
 933 0116 00       		.byte	0
 934 0117 05       		.uleb128 0x5
 935 0118 A7020000 		.4byte	.LASF31
 936 011c 01       		.byte	0x1
 937 011d 01       		.byte	0x1
 938 011e FD       		.byte	0xfd
 939 011f 36010000 		.4byte	0x136
 940 0123 06       		.uleb128 0x6
 941 0124 58030000 		.4byte	.LASF32
 942 0128 00       		.sleb128 0
 943 0129 06       		.uleb128 0x6
 944 012a 9B020000 		.4byte	.LASF33
 945 012e 01       		.sleb128 1
 946 012f 06       		.uleb128 0x6
 947 0130 5D000000 		.4byte	.LASF34
 948 0134 02       		.sleb128 2
 949 0135 00       		.byte	0
 950 0136 05       		.uleb128 0x5
 951 0137 87010000 		.4byte	.LASF35
 952 013b 01       		.byte	0x1
 953 013c 01       		.byte	0x1
 954 013d FE       		.byte	0xfe
 955 013e 55010000 		.4byte	0x155
 956 0142 06       		.uleb128 0x6
 957 0143 17010000 		.4byte	.LASF36
 958 0147 00       		.sleb128 0
 959 0148 06       		.uleb128 0x6
 960 0149 4C010000 		.4byte	.LASF37
 961 014d 01       		.sleb128 1
 962 014e 06       		.uleb128 0x6
 963 014f 8A020000 		.4byte	.LASF38
 964 0153 02       		.sleb128 2
 965 0154 00       		.byte	0
 966 0155 07       		.uleb128 0x7
 967 0156 8B000000 		.4byte	.LASF59
 968 015a 01       		.byte	0x1
 969 015b 13       		.byte	0x13
 970 015c 00000000 		.4byte	.LFB33
 971 0160 28000000 		.4byte	.LFE33-.LFB33
 972 0164 01       		.uleb128 0x1
 973 0165 9C       		.byte	0x9c
 974 0166 79010000 		.4byte	0x179
 975 016a 08       		.uleb128 0x8
 976 016b BE020000 		.4byte	.LASF39
 977 016f 01       		.byte	0x1
 978 0170 15       		.byte	0x15
 979 0171 81000000 		.4byte	0x81
 980 0175 02       		.uleb128 0x2
 981 0176 91       		.byte	0x91
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 25


 982 0177 74       		.sleb128 -12
 983 0178 00       		.byte	0
 984 0179 09       		.uleb128 0x9
 985 017a 22030000 		.4byte	.LASF46
 986 017e 01       		.byte	0x1
 987 017f 2C       		.byte	0x2c
 988 0180 00000000 		.4byte	.LFB34
 989 0184 B8000000 		.4byte	.LFE34-.LFB34
 990 0188 01       		.uleb128 0x1
 991 0189 9C       		.byte	0x9c
 992 018a 9B010000 		.4byte	0x19b
 993 018e 0A       		.uleb128 0xa
 994 018f 6300     		.ascii	"c\000"
 995 0191 01       		.byte	0x1
 996 0192 2F       		.byte	0x2f
 997 0193 6B000000 		.4byte	0x6b
 998 0197 02       		.uleb128 0x2
 999 0198 91       		.byte	0x91
 1000 0199 77       		.sleb128 -9
 1001 019a 00       		.byte	0
 1002 019b 0B       		.uleb128 0xb
 1003 019c 3A000000 		.4byte	.LASF40
 1004 01a0 01       		.byte	0x1
 1005 01a1 54       		.byte	0x54
 1006 01a2 00000000 		.4byte	.LFB35
 1007 01a6 08000000 		.4byte	.LFE35-.LFB35
 1008 01aa 01       		.uleb128 0x1
 1009 01ab 9C       		.byte	0x9c
 1010 01ac 0B       		.uleb128 0xb
 1011 01ad 1A000000 		.4byte	.LASF41
 1012 01b1 01       		.byte	0x1
 1013 01b2 5F       		.byte	0x5f
 1014 01b3 00000000 		.4byte	.LFB36
 1015 01b7 44000000 		.4byte	.LFE36-.LFB36
 1016 01bb 01       		.uleb128 0x1
 1017 01bc 9C       		.byte	0x9c
 1018 01bd 0B       		.uleb128 0xb
 1019 01be E4000000 		.4byte	.LASF42
 1020 01c2 01       		.byte	0x1
 1021 01c3 8D       		.byte	0x8d
 1022 01c4 00000000 		.4byte	.LFB37
 1023 01c8 08000000 		.4byte	.LFE37-.LFB37
 1024 01cc 01       		.uleb128 0x1
 1025 01cd 9C       		.byte	0x9c
 1026 01ce 0B       		.uleb128 0xb
 1027 01cf 92010000 		.4byte	.LASF43
 1028 01d3 01       		.byte	0x1
 1029 01d4 97       		.byte	0x97
 1030 01d5 00000000 		.4byte	.LFB38
 1031 01d9 48000000 		.4byte	.LFE38-.LFB38
 1032 01dd 01       		.uleb128 0x1
 1033 01de 9C       		.byte	0x9c
 1034 01df 0B       		.uleb128 0xb
 1035 01e0 32030000 		.4byte	.LASF44
 1036 01e4 01       		.byte	0x1
 1037 01e5 C7       		.byte	0xc7
 1038 01e6 00000000 		.4byte	.LFB39
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 26


 1039 01ea 48000000 		.4byte	.LFE39-.LFB39
 1040 01ee 01       		.uleb128 0x1
 1041 01ef 9C       		.byte	0x9c
 1042 01f0 0B       		.uleb128 0xb
 1043 01f1 EA000000 		.4byte	.LASF45
 1044 01f5 01       		.byte	0x1
 1045 01f6 F5       		.byte	0xf5
 1046 01f7 00000000 		.4byte	.LFB40
 1047 01fb 08000000 		.4byte	.LFE40-.LFB40
 1048 01ff 01       		.uleb128 0x1
 1049 0200 9C       		.byte	0x9c
 1050 0201 0C       		.uleb128 0xc
 1051 0202 6C656400 		.ascii	"led\000"
 1052 0206 01       		.byte	0x1
 1053 0207 FF       		.byte	0xff
 1054 0208 00000000 		.4byte	.LFB41
 1055 020c 88000000 		.4byte	.LFE41-.LFB41
 1056 0210 01       		.uleb128 0x1
 1057 0211 9C       		.byte	0x9c
 1058 0212 26020000 		.4byte	0x226
 1059 0216 0D       		.uleb128 0xd
 1060 0217 6F6C6400 		.ascii	"old\000"
 1061 021b 01       		.byte	0x1
 1062 021c 0001     		.2byte	0x100
 1063 021e 6B000000 		.4byte	0x6b
 1064 0222 02       		.uleb128 0x2
 1065 0223 91       		.byte	0x91
 1066 0224 77       		.sleb128 -9
 1067 0225 00       		.byte	0
 1068 0226 0E       		.uleb128 0xe
 1069 0227 14000000 		.4byte	.LASF47
 1070 022b 01       		.byte	0x1
 1071 022c 2A01     		.2byte	0x12a
 1072 022e 00000000 		.4byte	.LFB42
 1073 0232 88000000 		.4byte	.LFE42-.LFB42
 1074 0236 01       		.uleb128 0x1
 1075 0237 9C       		.byte	0x9c
 1076 0238 4C020000 		.4byte	0x24c
 1077 023c 0D       		.uleb128 0xd
 1078 023d 6F6C6400 		.ascii	"old\000"
 1079 0241 01       		.byte	0x1
 1080 0242 2B01     		.2byte	0x12b
 1081 0244 6B000000 		.4byte	0x6b
 1082 0248 02       		.uleb128 0x2
 1083 0249 91       		.byte	0x91
 1084 024a 77       		.sleb128 -9
 1085 024b 00       		.byte	0
 1086 024c 0F       		.uleb128 0xf
 1087 024d 49030000 		.4byte	.LASF60
 1088 0251 01       		.byte	0x1
 1089 0252 5601     		.2byte	0x156
 1090 0254 5D000000 		.4byte	0x5d
 1091 0258 00000000 		.4byte	.LFB43
 1092 025c 48000000 		.4byte	.LFE43-.LFB43
 1093 0260 01       		.uleb128 0x1
 1094 0261 9C       		.byte	0x9c
 1095 0262 10       		.uleb128 0x10
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 27


 1096 0263 6B000000 		.4byte	0x6b
 1097 0267 72020000 		.4byte	0x272
 1098 026b 11       		.uleb128 0x11
 1099 026c A1000000 		.4byte	0xa1
 1100 0270 0D       		.byte	0xd
 1101 0271 00       		.byte	0
 1102 0272 12       		.uleb128 0x12
 1103 0273 3E030000 		.4byte	.LASF48
 1104 0277 01       		.byte	0x1
 1105 0278 0A       		.byte	0xa
 1106 0279 62020000 		.4byte	0x262
 1107 027d 05       		.uleb128 0x5
 1108 027e 03       		.byte	0x3
 1109 027f 00000000 		.4byte	data_array
 1110 0283 12       		.uleb128 0x12
 1111 0284 60030000 		.4byte	.LASF49
 1112 0288 01       		.byte	0x1
 1113 0289 0B       		.byte	0xb
 1114 028a 76000000 		.4byte	0x76
 1115 028e 05       		.uleb128 0x5
 1116 028f 03       		.byte	0x3
 1117 0290 00000000 		.4byte	feedback_count
 1118 0294 12       		.uleb128 0x12
 1119 0295 4E030000 		.4byte	.LASF50
 1120 0299 01       		.byte	0x1
 1121 029a 0C       		.byte	0xc
 1122 029b 6B000000 		.4byte	0x6b
 1123 029f 05       		.uleb128 0x5
 1124 02a0 03       		.byte	0x3
 1125 02a1 00000000 		.4byte	timerFlag
 1126 02a5 12       		.uleb128 0x12
 1127 02a6 D3020000 		.4byte	.LASF51
 1128 02aa 01       		.byte	0x1
 1129 02ab 5D       		.byte	0x5d
 1130 02ac A8000000 		.4byte	0xa8
 1131 02b0 05       		.uleb128 0x5
 1132 02b1 03       		.byte	0x3
 1133 02b2 00000000 		.4byte	shldr_state
 1134 02b6 12       		.uleb128 0x12
 1135 02b7 3C010000 		.4byte	.LASF52
 1136 02bb 01       		.byte	0x1
 1137 02bc 95       		.byte	0x95
 1138 02bd CD000000 		.4byte	0xcd
 1139 02c1 05       		.uleb128 0x5
 1140 02c2 03       		.byte	0x3
 1141 02c3 00000000 		.4byte	wristTilt_state
 1142 02c7 12       		.uleb128 0x12
 1143 02c8 C0000000 		.4byte	.LASF53
 1144 02cc 01       		.byte	0x1
 1145 02cd C5       		.byte	0xc5
 1146 02ce F2000000 		.4byte	0xf2
 1147 02d2 05       		.uleb128 0x5
 1148 02d3 03       		.byte	0x3
 1149 02d4 00000000 		.4byte	wristRotate_state
 1150 02d8 12       		.uleb128 0x12
 1151 02d9 B4000000 		.4byte	.LASF54
 1152 02dd 01       		.byte	0x1
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 28


 1153 02de FD       		.byte	0xfd
 1154 02df 17010000 		.4byte	0x117
 1155 02e3 05       		.uleb128 0x5
 1156 02e4 03       		.byte	0x3
 1157 02e5 00000000 		.4byte	servo_state
 1158 02e9 12       		.uleb128 0x12
 1159 02ea F5020000 		.4byte	.LASF55
 1160 02ee 01       		.byte	0x1
 1161 02ef FE       		.byte	0xfe
 1162 02f0 36010000 		.4byte	0x136
 1163 02f4 05       		.uleb128 0x5
 1164 02f5 03       		.byte	0x3
 1165 02f6 00000000 		.4byte	led_state
 1166 02fa 00       		.byte	0
 1167              		.section	.debug_abbrev,"",%progbits
 1168              	.Ldebug_abbrev0:
 1169 0000 01       		.uleb128 0x1
 1170 0001 11       		.uleb128 0x11
 1171 0002 01       		.byte	0x1
 1172 0003 25       		.uleb128 0x25
 1173 0004 0E       		.uleb128 0xe
 1174 0005 13       		.uleb128 0x13
 1175 0006 0B       		.uleb128 0xb
 1176 0007 03       		.uleb128 0x3
 1177 0008 0E       		.uleb128 0xe
 1178 0009 1B       		.uleb128 0x1b
 1179 000a 0E       		.uleb128 0xe
 1180 000b 55       		.uleb128 0x55
 1181 000c 17       		.uleb128 0x17
 1182 000d 11       		.uleb128 0x11
 1183 000e 01       		.uleb128 0x1
 1184 000f 10       		.uleb128 0x10
 1185 0010 17       		.uleb128 0x17
 1186 0011 00       		.byte	0
 1187 0012 00       		.byte	0
 1188 0013 02       		.uleb128 0x2
 1189 0014 24       		.uleb128 0x24
 1190 0015 00       		.byte	0
 1191 0016 0B       		.uleb128 0xb
 1192 0017 0B       		.uleb128 0xb
 1193 0018 3E       		.uleb128 0x3e
 1194 0019 0B       		.uleb128 0xb
 1195 001a 03       		.uleb128 0x3
 1196 001b 0E       		.uleb128 0xe
 1197 001c 00       		.byte	0
 1198 001d 00       		.byte	0
 1199 001e 03       		.uleb128 0x3
 1200 001f 24       		.uleb128 0x24
 1201 0020 00       		.byte	0
 1202 0021 0B       		.uleb128 0xb
 1203 0022 0B       		.uleb128 0xb
 1204 0023 3E       		.uleb128 0x3e
 1205 0024 0B       		.uleb128 0xb
 1206 0025 03       		.uleb128 0x3
 1207 0026 08       		.uleb128 0x8
 1208 0027 00       		.byte	0
 1209 0028 00       		.byte	0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 29


 1210 0029 04       		.uleb128 0x4
 1211 002a 16       		.uleb128 0x16
 1212 002b 00       		.byte	0
 1213 002c 03       		.uleb128 0x3
 1214 002d 0E       		.uleb128 0xe
 1215 002e 3A       		.uleb128 0x3a
 1216 002f 0B       		.uleb128 0xb
 1217 0030 3B       		.uleb128 0x3b
 1218 0031 0B       		.uleb128 0xb
 1219 0032 49       		.uleb128 0x49
 1220 0033 13       		.uleb128 0x13
 1221 0034 00       		.byte	0
 1222 0035 00       		.byte	0
 1223 0036 05       		.uleb128 0x5
 1224 0037 04       		.uleb128 0x4
 1225 0038 01       		.byte	0x1
 1226 0039 03       		.uleb128 0x3
 1227 003a 0E       		.uleb128 0xe
 1228 003b 0B       		.uleb128 0xb
 1229 003c 0B       		.uleb128 0xb
 1230 003d 3A       		.uleb128 0x3a
 1231 003e 0B       		.uleb128 0xb
 1232 003f 3B       		.uleb128 0x3b
 1233 0040 0B       		.uleb128 0xb
 1234 0041 01       		.uleb128 0x1
 1235 0042 13       		.uleb128 0x13
 1236 0043 00       		.byte	0
 1237 0044 00       		.byte	0
 1238 0045 06       		.uleb128 0x6
 1239 0046 28       		.uleb128 0x28
 1240 0047 00       		.byte	0
 1241 0048 03       		.uleb128 0x3
 1242 0049 0E       		.uleb128 0xe
 1243 004a 1C       		.uleb128 0x1c
 1244 004b 0D       		.uleb128 0xd
 1245 004c 00       		.byte	0
 1246 004d 00       		.byte	0
 1247 004e 07       		.uleb128 0x7
 1248 004f 2E       		.uleb128 0x2e
 1249 0050 01       		.byte	0x1
 1250 0051 3F       		.uleb128 0x3f
 1251 0052 19       		.uleb128 0x19
 1252 0053 03       		.uleb128 0x3
 1253 0054 0E       		.uleb128 0xe
 1254 0055 3A       		.uleb128 0x3a
 1255 0056 0B       		.uleb128 0xb
 1256 0057 3B       		.uleb128 0x3b
 1257 0058 0B       		.uleb128 0xb
 1258 0059 27       		.uleb128 0x27
 1259 005a 19       		.uleb128 0x19
 1260 005b 11       		.uleb128 0x11
 1261 005c 01       		.uleb128 0x1
 1262 005d 12       		.uleb128 0x12
 1263 005e 06       		.uleb128 0x6
 1264 005f 40       		.uleb128 0x40
 1265 0060 18       		.uleb128 0x18
 1266 0061 9642     		.uleb128 0x2116
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 30


 1267 0063 19       		.uleb128 0x19
 1268 0064 01       		.uleb128 0x1
 1269 0065 13       		.uleb128 0x13
 1270 0066 00       		.byte	0
 1271 0067 00       		.byte	0
 1272 0068 08       		.uleb128 0x8
 1273 0069 34       		.uleb128 0x34
 1274 006a 00       		.byte	0
 1275 006b 03       		.uleb128 0x3
 1276 006c 0E       		.uleb128 0xe
 1277 006d 3A       		.uleb128 0x3a
 1278 006e 0B       		.uleb128 0xb
 1279 006f 3B       		.uleb128 0x3b
 1280 0070 0B       		.uleb128 0xb
 1281 0071 49       		.uleb128 0x49
 1282 0072 13       		.uleb128 0x13
 1283 0073 02       		.uleb128 0x2
 1284 0074 18       		.uleb128 0x18
 1285 0075 00       		.byte	0
 1286 0076 00       		.byte	0
 1287 0077 09       		.uleb128 0x9
 1288 0078 2E       		.uleb128 0x2e
 1289 0079 01       		.byte	0x1
 1290 007a 3F       		.uleb128 0x3f
 1291 007b 19       		.uleb128 0x19
 1292 007c 03       		.uleb128 0x3
 1293 007d 0E       		.uleb128 0xe
 1294 007e 3A       		.uleb128 0x3a
 1295 007f 0B       		.uleb128 0xb
 1296 0080 3B       		.uleb128 0x3b
 1297 0081 0B       		.uleb128 0xb
 1298 0082 11       		.uleb128 0x11
 1299 0083 01       		.uleb128 0x1
 1300 0084 12       		.uleb128 0x12
 1301 0085 06       		.uleb128 0x6
 1302 0086 40       		.uleb128 0x40
 1303 0087 18       		.uleb128 0x18
 1304 0088 9642     		.uleb128 0x2116
 1305 008a 19       		.uleb128 0x19
 1306 008b 01       		.uleb128 0x1
 1307 008c 13       		.uleb128 0x13
 1308 008d 00       		.byte	0
 1309 008e 00       		.byte	0
 1310 008f 0A       		.uleb128 0xa
 1311 0090 34       		.uleb128 0x34
 1312 0091 00       		.byte	0
 1313 0092 03       		.uleb128 0x3
 1314 0093 08       		.uleb128 0x8
 1315 0094 3A       		.uleb128 0x3a
 1316 0095 0B       		.uleb128 0xb
 1317 0096 3B       		.uleb128 0x3b
 1318 0097 0B       		.uleb128 0xb
 1319 0098 49       		.uleb128 0x49
 1320 0099 13       		.uleb128 0x13
 1321 009a 02       		.uleb128 0x2
 1322 009b 18       		.uleb128 0x18
 1323 009c 00       		.byte	0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 31


 1324 009d 00       		.byte	0
 1325 009e 0B       		.uleb128 0xb
 1326 009f 2E       		.uleb128 0x2e
 1327 00a0 00       		.byte	0
 1328 00a1 3F       		.uleb128 0x3f
 1329 00a2 19       		.uleb128 0x19
 1330 00a3 03       		.uleb128 0x3
 1331 00a4 0E       		.uleb128 0xe
 1332 00a5 3A       		.uleb128 0x3a
 1333 00a6 0B       		.uleb128 0xb
 1334 00a7 3B       		.uleb128 0x3b
 1335 00a8 0B       		.uleb128 0xb
 1336 00a9 11       		.uleb128 0x11
 1337 00aa 01       		.uleb128 0x1
 1338 00ab 12       		.uleb128 0x12
 1339 00ac 06       		.uleb128 0x6
 1340 00ad 40       		.uleb128 0x40
 1341 00ae 18       		.uleb128 0x18
 1342 00af 9742     		.uleb128 0x2117
 1343 00b1 19       		.uleb128 0x19
 1344 00b2 00       		.byte	0
 1345 00b3 00       		.byte	0
 1346 00b4 0C       		.uleb128 0xc
 1347 00b5 2E       		.uleb128 0x2e
 1348 00b6 01       		.byte	0x1
 1349 00b7 3F       		.uleb128 0x3f
 1350 00b8 19       		.uleb128 0x19
 1351 00b9 03       		.uleb128 0x3
 1352 00ba 08       		.uleb128 0x8
 1353 00bb 3A       		.uleb128 0x3a
 1354 00bc 0B       		.uleb128 0xb
 1355 00bd 3B       		.uleb128 0x3b
 1356 00be 0B       		.uleb128 0xb
 1357 00bf 11       		.uleb128 0x11
 1358 00c0 01       		.uleb128 0x1
 1359 00c1 12       		.uleb128 0x12
 1360 00c2 06       		.uleb128 0x6
 1361 00c3 40       		.uleb128 0x40
 1362 00c4 18       		.uleb128 0x18
 1363 00c5 9642     		.uleb128 0x2116
 1364 00c7 19       		.uleb128 0x19
 1365 00c8 01       		.uleb128 0x1
 1366 00c9 13       		.uleb128 0x13
 1367 00ca 00       		.byte	0
 1368 00cb 00       		.byte	0
 1369 00cc 0D       		.uleb128 0xd
 1370 00cd 34       		.uleb128 0x34
 1371 00ce 00       		.byte	0
 1372 00cf 03       		.uleb128 0x3
 1373 00d0 08       		.uleb128 0x8
 1374 00d1 3A       		.uleb128 0x3a
 1375 00d2 0B       		.uleb128 0xb
 1376 00d3 3B       		.uleb128 0x3b
 1377 00d4 05       		.uleb128 0x5
 1378 00d5 49       		.uleb128 0x49
 1379 00d6 13       		.uleb128 0x13
 1380 00d7 02       		.uleb128 0x2
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 32


 1381 00d8 18       		.uleb128 0x18
 1382 00d9 00       		.byte	0
 1383 00da 00       		.byte	0
 1384 00db 0E       		.uleb128 0xe
 1385 00dc 2E       		.uleb128 0x2e
 1386 00dd 01       		.byte	0x1
 1387 00de 3F       		.uleb128 0x3f
 1388 00df 19       		.uleb128 0x19
 1389 00e0 03       		.uleb128 0x3
 1390 00e1 0E       		.uleb128 0xe
 1391 00e2 3A       		.uleb128 0x3a
 1392 00e3 0B       		.uleb128 0xb
 1393 00e4 3B       		.uleb128 0x3b
 1394 00e5 05       		.uleb128 0x5
 1395 00e6 11       		.uleb128 0x11
 1396 00e7 01       		.uleb128 0x1
 1397 00e8 12       		.uleb128 0x12
 1398 00e9 06       		.uleb128 0x6
 1399 00ea 40       		.uleb128 0x40
 1400 00eb 18       		.uleb128 0x18
 1401 00ec 9642     		.uleb128 0x2116
 1402 00ee 19       		.uleb128 0x19
 1403 00ef 01       		.uleb128 0x1
 1404 00f0 13       		.uleb128 0x13
 1405 00f1 00       		.byte	0
 1406 00f2 00       		.byte	0
 1407 00f3 0F       		.uleb128 0xf
 1408 00f4 2E       		.uleb128 0x2e
 1409 00f5 00       		.byte	0
 1410 00f6 3F       		.uleb128 0x3f
 1411 00f7 19       		.uleb128 0x19
 1412 00f8 03       		.uleb128 0x3
 1413 00f9 0E       		.uleb128 0xe
 1414 00fa 3A       		.uleb128 0x3a
 1415 00fb 0B       		.uleb128 0xb
 1416 00fc 3B       		.uleb128 0x3b
 1417 00fd 05       		.uleb128 0x5
 1418 00fe 49       		.uleb128 0x49
 1419 00ff 13       		.uleb128 0x13
 1420 0100 11       		.uleb128 0x11
 1421 0101 01       		.uleb128 0x1
 1422 0102 12       		.uleb128 0x12
 1423 0103 06       		.uleb128 0x6
 1424 0104 40       		.uleb128 0x40
 1425 0105 18       		.uleb128 0x18
 1426 0106 9642     		.uleb128 0x2116
 1427 0108 19       		.uleb128 0x19
 1428 0109 00       		.byte	0
 1429 010a 00       		.byte	0
 1430 010b 10       		.uleb128 0x10
 1431 010c 01       		.uleb128 0x1
 1432 010d 01       		.byte	0x1
 1433 010e 49       		.uleb128 0x49
 1434 010f 13       		.uleb128 0x13
 1435 0110 01       		.uleb128 0x1
 1436 0111 13       		.uleb128 0x13
 1437 0112 00       		.byte	0
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 33


 1438 0113 00       		.byte	0
 1439 0114 11       		.uleb128 0x11
 1440 0115 21       		.uleb128 0x21
 1441 0116 00       		.byte	0
 1442 0117 49       		.uleb128 0x49
 1443 0118 13       		.uleb128 0x13
 1444 0119 2F       		.uleb128 0x2f
 1445 011a 0B       		.uleb128 0xb
 1446 011b 00       		.byte	0
 1447 011c 00       		.byte	0
 1448 011d 12       		.uleb128 0x12
 1449 011e 34       		.uleb128 0x34
 1450 011f 00       		.byte	0
 1451 0120 03       		.uleb128 0x3
 1452 0121 0E       		.uleb128 0xe
 1453 0122 3A       		.uleb128 0x3a
 1454 0123 0B       		.uleb128 0xb
 1455 0124 3B       		.uleb128 0x3b
 1456 0125 0B       		.uleb128 0xb
 1457 0126 49       		.uleb128 0x49
 1458 0127 13       		.uleb128 0x13
 1459 0128 3F       		.uleb128 0x3f
 1460 0129 19       		.uleb128 0x19
 1461 012a 02       		.uleb128 0x2
 1462 012b 18       		.uleb128 0x18
 1463 012c 00       		.byte	0
 1464 012d 00       		.byte	0
 1465 012e 00       		.byte	0
 1466              		.section	.debug_aranges,"",%progbits
 1467 0000 6C000000 		.4byte	0x6c
 1468 0004 0200     		.2byte	0x2
 1469 0006 00000000 		.4byte	.Ldebug_info0
 1470 000a 04       		.byte	0x4
 1471 000b 00       		.byte	0
 1472 000c 0000     		.2byte	0
 1473 000e 0000     		.2byte	0
 1474 0010 00000000 		.4byte	.LFB33
 1475 0014 28000000 		.4byte	.LFE33-.LFB33
 1476 0018 00000000 		.4byte	.LFB34
 1477 001c B8000000 		.4byte	.LFE34-.LFB34
 1478 0020 00000000 		.4byte	.LFB35
 1479 0024 08000000 		.4byte	.LFE35-.LFB35
 1480 0028 00000000 		.4byte	.LFB36
 1481 002c 44000000 		.4byte	.LFE36-.LFB36
 1482 0030 00000000 		.4byte	.LFB37
 1483 0034 08000000 		.4byte	.LFE37-.LFB37
 1484 0038 00000000 		.4byte	.LFB38
 1485 003c 48000000 		.4byte	.LFE38-.LFB38
 1486 0040 00000000 		.4byte	.LFB39
 1487 0044 48000000 		.4byte	.LFE39-.LFB39
 1488 0048 00000000 		.4byte	.LFB40
 1489 004c 08000000 		.4byte	.LFE40-.LFB40
 1490 0050 00000000 		.4byte	.LFB41
 1491 0054 88000000 		.4byte	.LFE41-.LFB41
 1492 0058 00000000 		.4byte	.LFB42
 1493 005c 88000000 		.4byte	.LFE42-.LFB42
 1494 0060 00000000 		.4byte	.LFB43
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 34


 1495 0064 48000000 		.4byte	.LFE43-.LFB43
 1496 0068 00000000 		.4byte	0
 1497 006c 00000000 		.4byte	0
 1498              		.section	.debug_ranges,"",%progbits
 1499              	.Ldebug_ranges0:
 1500 0000 00000000 		.4byte	.LFB33
 1501 0004 28000000 		.4byte	.LFE33
 1502 0008 00000000 		.4byte	.LFB34
 1503 000c B8000000 		.4byte	.LFE34
 1504 0010 00000000 		.4byte	.LFB35
 1505 0014 08000000 		.4byte	.LFE35
 1506 0018 00000000 		.4byte	.LFB36
 1507 001c 44000000 		.4byte	.LFE36
 1508 0020 00000000 		.4byte	.LFB37
 1509 0024 08000000 		.4byte	.LFE37
 1510 0028 00000000 		.4byte	.LFB38
 1511 002c 48000000 		.4byte	.LFE38
 1512 0030 00000000 		.4byte	.LFB39
 1513 0034 48000000 		.4byte	.LFE39
 1514 0038 00000000 		.4byte	.LFB40
 1515 003c 08000000 		.4byte	.LFE40
 1516 0040 00000000 		.4byte	.LFB41
 1517 0044 88000000 		.4byte	.LFE41
 1518 0048 00000000 		.4byte	.LFB42
 1519 004c 88000000 		.4byte	.LFE42
 1520 0050 00000000 		.4byte	.LFB43
 1521 0054 48000000 		.4byte	.LFE43
 1522 0058 00000000 		.4byte	0
 1523 005c 00000000 		.4byte	0
 1524              		.section	.debug_line,"",%progbits
 1525              	.Ldebug_line0:
 1526 0000 7D010000 		.section	.debug_str,"MS",%progbits,1
 1526      02004500 
 1526      00000201 
 1526      FB0E0D00 
 1526      01010101 
 1527              	.LASF10:
 1528 0000 75696E74 		.ascii	"uint16\000"
 1528      313600
 1529              	.LASF28:
 1530 0007 726F7461 		.ascii	"rotate_start\000"
 1530      74655F73 
 1530      74617274 
 1530      00
 1531              	.LASF47:
 1532 0014 73657276 		.ascii	"servo\000"
 1532      6F00
 1533              	.LASF41:
 1534 001a 73686F75 		.ascii	"shoulder\000"
 1534      6C646572 
 1534      00
 1535              	.LASF27:
 1536 0023 726F7461 		.ascii	"rotate_init\000"
 1536      74655F69 
 1536      6E697400 
 1537              	.LASF17:
 1538 002f 73686C64 		.ascii	"shldr_init\000"
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 35


 1538      725F696E 
 1538      697400
 1539              	.LASF40:
 1540 003a 62617365 		.ascii	"baseAzimuth\000"
 1540      417A696D 
 1540      75746800 
 1541              	.LASF7:
 1542 0046 6C6F6E67 		.ascii	"long long unsigned int\000"
 1542      206C6F6E 
 1542      6720756E 
 1542      7369676E 
 1542      65642069 
 1543              	.LASF34:
 1544 005d 735F7761 		.ascii	"s_wait\000"
 1544      697400
 1545              	.LASF6:
 1546 0064 6C6F6E67 		.ascii	"long long int\000"
 1546      206C6F6E 
 1546      6720696E 
 1546      7400
 1547              	.LASF0:
 1548 0072 7369676E 		.ascii	"signed char\000"
 1548      65642063 
 1548      68617200 
 1549              	.LASF24:
 1550 007e 74696C74 		.ascii	"tilt_control\000"
 1550      5F636F6E 
 1550      74726F6C 
 1550      00
 1551              	.LASF59:
 1552 008b 74696D65 		.ascii	"timer_isr\000"
 1552      725F6973 
 1552      7200
 1553              	.LASF57:
 1554 0095 2E5C6D61 		.ascii	".\\main.c\000"
 1554      696E2E63 
 1554      00
 1555              	.LASF4:
 1556 009e 6C6F6E67 		.ascii	"long int\000"
 1556      20696E74 
 1556      00
 1557              	.LASF9:
 1558 00a7 75696E74 		.ascii	"uint8\000"
 1558      3800
 1559              	.LASF13:
 1560 00ad 646F7562 		.ascii	"double\000"
 1560      6C6500
 1561              	.LASF54:
 1562 00b4 73657276 		.ascii	"servo_state\000"
 1562      6F5F7374 
 1562      61746500 
 1563              	.LASF53:
 1564 00c0 77726973 		.ascii	"wristRotate_state\000"
 1564      74526F74 
 1564      6174655F 
 1564      73746174 
 1564      6500
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 36


 1565              	.LASF18:
 1566 00d2 73686C64 		.ascii	"shldr_fdbk\000"
 1566      725F6664 
 1566      626B00
 1567              	.LASF11:
 1568 00dd 75696E74 		.ascii	"uint32\000"
 1568      333200
 1569              	.LASF42:
 1570 00e4 656C626F 		.ascii	"elbow\000"
 1570      7700
 1571              	.LASF45:
 1572 00ea 73656E64 		.ascii	"send_feedback\000"
 1572      5F666565 
 1572      64626163 
 1572      6B00
 1573              	.LASF8:
 1574 00f8 756E7369 		.ascii	"unsigned int\000"
 1574      676E6564 
 1574      20696E74 
 1574      00
 1575              	.LASF5:
 1576 0105 6C6F6E67 		.ascii	"long unsigned int\000"
 1576      20756E73 
 1576      69676E65 
 1576      6420696E 
 1576      7400
 1577              	.LASF36:
 1578 0117 6C5F7374 		.ascii	"l_start\000"
 1578      61727400 
 1579              	.LASF3:
 1580 011f 73686F72 		.ascii	"short unsigned int\000"
 1580      7420756E 
 1580      7369676E 
 1580      65642069 
 1580      6E7400
 1581              	.LASF22:
 1582 0132 74696C74 		.ascii	"tilt_init\000"
 1582      5F696E69 
 1582      7400
 1583              	.LASF52:
 1584 013c 77726973 		.ascii	"wristTilt_state\000"
 1584      7454696C 
 1584      745F7374 
 1584      61746500 
 1585              	.LASF37:
 1586 014c 6C5F6469 		.ascii	"l_different\000"
 1586      66666572 
 1586      656E7400 
 1587              	.LASF29:
 1588 0158 726F7461 		.ascii	"rotate_control\000"
 1588      74655F63 
 1588      6F6E7472 
 1588      6F6C00
 1589              	.LASF15:
 1590 0167 73697A65 		.ascii	"sizetype\000"
 1590      74797065 
 1590      00
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 37


 1591              	.LASF16:
 1592 0170 73686C64 		.ascii	"shldr_start\000"
 1592      725F7374 
 1592      61727400 
 1593              	.LASF23:
 1594 017c 74696C74 		.ascii	"tilt_start\000"
 1594      5F737461 
 1594      727400
 1595              	.LASF35:
 1596 0187 6C65645F 		.ascii	"led_states\000"
 1596      73746174 
 1596      657300
 1597              	.LASF43:
 1598 0192 77726973 		.ascii	"wristTilt\000"
 1598      7454696C 
 1598      7400
 1599              	.LASF12:
 1600 019c 666C6F61 		.ascii	"float\000"
 1600      7400
 1601              	.LASF25:
 1602 01a2 74696C74 		.ascii	"tilt_feedback\000"
 1602      5F666565 
 1602      64626163 
 1602      6B00
 1603              	.LASF56:
 1604 01b0 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1604      4320342E 
 1604      382E3420 
 1604      32303134 
 1604      30353236 
 1605 01e3 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1605      20726576 
 1605      6973696F 
 1605      6E203231 
 1605      31333538 
 1606 0216 30202D66 		.ascii	"0 -ffunction-sections\000"
 1606      66756E63 
 1606      74696F6E 
 1606      2D736563 
 1606      74696F6E 
 1607              	.LASF1:
 1608 022c 756E7369 		.ascii	"unsigned char\000"
 1608      676E6564 
 1608      20636861 
 1608      7200
 1609              	.LASF58:
 1610 023a 433A5C55 		.ascii	"C:\\Users\\Jae Lee\\Documents\\GitHub\\Arm\\arm_con"
 1610      73657273 
 1610      5C4A6165 
 1610      204C6565 
 1610      5C446F63 
 1611 0267 74726F6C 		.ascii	"troller_v2\\arm_controller_v2.cydsn\000"
 1611      6C65725F 
 1611      76325C61 
 1611      726D5F63 
 1611      6F6E7472 
 1612              	.LASF38:
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 38


 1613 028a 6C5F7761 		.ascii	"l_wait\000"
 1613      697400
 1614              	.LASF2:
 1615 0291 73686F72 		.ascii	"short int\000"
 1615      7420696E 
 1615      7400
 1616              	.LASF33:
 1617 029b 735F6469 		.ascii	"s_different\000"
 1617      66666572 
 1617      656E7400 
 1618              	.LASF31:
 1619 02a7 73657276 		.ascii	"servo_states\000"
 1619      6F5F7374 
 1619      61746573 
 1619      00
 1620              	.LASF19:
 1621 02b4 73686C64 		.ascii	"shldr_exe\000"
 1621      725F6578 
 1621      6500
 1622              	.LASF39:
 1623 02be 6973725F 		.ascii	"isr_var\000"
 1623      76617200 
 1624              	.LASF20:
 1625 02c6 73686C64 		.ascii	"shldr_states\000"
 1625      725F7374 
 1625      61746573 
 1625      00
 1626              	.LASF51:
 1627 02d3 73686C64 		.ascii	"shldr_state\000"
 1627      725F7374 
 1627      61746500 
 1628              	.LASF14:
 1629 02df 63686172 		.ascii	"char\000"
 1629      00
 1630              	.LASF21:
 1631 02e4 77726973 		.ascii	"wristTilt_states\000"
 1631      7454696C 
 1631      745F7374 
 1631      61746573 
 1631      00
 1632              	.LASF55:
 1633 02f5 6C65645F 		.ascii	"led_state\000"
 1633      73746174 
 1633      6500
 1634              	.LASF30:
 1635 02ff 726F7461 		.ascii	"rotate_feedback\000"
 1635      74655F66 
 1635      65656462 
 1635      61636B00 
 1636              	.LASF26:
 1637 030f 77726973 		.ascii	"wristRotate_states\000"
 1637      74526F74 
 1637      6174655F 
 1637      73746174 
 1637      657300
 1638              	.LASF46:
 1639 0322 66696C6C 		.ascii	"fill_data_array\000"
ARM GAS  C:\Users\JAELEE~1\AppData\Local\Temp\cch1ntwK.s 			page 39


 1639      5F646174 
 1639      615F6172 
 1639      72617900 
 1640              	.LASF44:
 1641 0332 77726973 		.ascii	"wristRotate\000"
 1641      74526F74 
 1641      61746500 
 1642              	.LASF48:
 1643 033e 64617461 		.ascii	"data_array\000"
 1643      5F617272 
 1643      617900
 1644              	.LASF60:
 1645 0349 6D61696E 		.ascii	"main\000"
 1645      00
 1646              	.LASF50:
 1647 034e 74696D65 		.ascii	"timerFlag\000"
 1647      72466C61 
 1647      6700
 1648              	.LASF32:
 1649 0358 735F7374 		.ascii	"s_start\000"
 1649      61727400 
 1650              	.LASF49:
 1651 0360 66656564 		.ascii	"feedback_count\000"
 1651      6261636B 
 1651      5F636F75 
 1651      6E7400
 1652              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
